
sensor_board_rev3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cea8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  0800d038  0800d038  0001d038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d164  0800d164  00020190  2**0
                  CONTENTS
  4 .ARM          00000000  0800d164  0800d164  00020190  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d164  0800d164  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d164  0800d164  0001d164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d168  0800d168  0001d168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  0800d16c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003530  20000190  0800d2fc  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200036c0  0800d2fc  000236c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f35d  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000560f  00000000  00000000  0004f51d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001f30  00000000  00000000  00054b30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001cb8  00000000  00000000  00056a60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00008949  00000000  00000000  00058718  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001dc90  00000000  00000000  00061061  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e2ecf  00000000  00000000  0007ecf1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00161bc0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000835c  00000000  00000000  00161c3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000190 	.word	0x20000190
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d020 	.word	0x0800d020

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000194 	.word	0x20000194
 80001cc:	0800d020 	.word	0x0800d020

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800030e:	f1a4 0401 	sub.w	r4, r4, #1
 8000312:	d1e9      	bne.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_d2uiz>:
 8000acc:	004a      	lsls	r2, r1, #1
 8000ace:	d211      	bcs.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad4:	d211      	bcs.n	8000afa <__aeabi_d2uiz+0x2e>
 8000ad6:	d50d      	bpl.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000adc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae0:	d40e      	bmi.n	8000b00 <__aeabi_d2uiz+0x34>
 8000ae2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d102      	bne.n	8000b06 <__aeabi_d2uiz+0x3a>
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295
 8000b04:	4770      	bx	lr
 8000b06:	f04f 0000 	mov.w	r0, #0
 8000b0a:	4770      	bx	lr

08000b0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b0c:	b590      	push	{r4, r7, lr}
 8000b0e:	b0b7      	sub	sp, #220	; 0xdc
 8000b10:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b12:	f001 faac 	bl	800206e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b16:	f000 f8fb 	bl	8000d10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b1a:	f000 fa35 	bl	8000f88 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000b1e:	f000 f97b 	bl	8000e18 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000b22:	f000 f9b9 	bl	8000e98 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000b26:	f000 f9f5 	bl	8000f14 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 8000b2a:	f00b fcc7 	bl	800c4bc <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  osKernelInitialize();
 8000b2e:	f008 f873 	bl	8008c18 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */

  /* Barometer Mutex */
  const osMutexAttr_t baro_mutex_attr = {
 8000b32:	4b5b      	ldr	r3, [pc, #364]	; (8000ca0 <main+0x194>)
 8000b34:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 8000b38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b3a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    osMutexPrioInherit,    // attr_bits
    NULL,                                     // memory for control block
    0U                                        // size for control block
  };

  baro_mutex = osMutexNew(&baro_mutex_attr);
 8000b3e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000b42:	4618      	mov	r0, r3
 8000b44:	f008 fa0e 	bl	8008f64 <osMutexNew>
 8000b48:	4602      	mov	r2, r0
 8000b4a:	4b56      	ldr	r3, [pc, #344]	; (8000ca4 <main+0x198>)
 8000b4c:	601a      	str	r2, [r3, #0]

  /* IMU Mutex */
  const osMutexAttr_t imu_mutex_attr = {
 8000b4e:	4b56      	ldr	r3, [pc, #344]	; (8000ca8 <main+0x19c>)
 8000b50:	f107 04b8 	add.w	r4, r7, #184	; 0xb8
 8000b54:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b56:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    osMutexPrioInherit,    // attr_bits
    NULL,                                     // memory for control block
    0U                                        // size for control block
  };

  imu_mutex = osMutexNew(&imu_mutex_attr);
 8000b5a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f008 fa00 	bl	8008f64 <osMutexNew>
 8000b64:	4602      	mov	r2, r0
 8000b66:	4b51      	ldr	r3, [pc, #324]	; (8000cac <main+0x1a0>)
 8000b68:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  vinit_queue(preprocess_queue);
 8000b6a:	4b51      	ldr	r3, [pc, #324]	; (8000cb0 <main+0x1a4>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f000 fc22 	bl	80013b8 <vinit_queue>
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  const osThreadAttr_t defaultTask_attributes = {
 8000b74:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000b78:	2224      	movs	r2, #36	; 0x24
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f00c fa46 	bl	800d00e <memset>
 8000b82:	4b4c      	ldr	r3, [pc, #304]	; (8000cb4 <main+0x1a8>)
 8000b84:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000b88:	2380      	movs	r3, #128	; 0x80
 8000b8a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000b8e:	2318      	movs	r3, #24
 8000b90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    .name = "defaultTask",
    .priority = (osPriority_t) osPriorityNormal,
    .stack_size = 128
  };
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000b94:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000b98:	461a      	mov	r2, r3
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4846      	ldr	r0, [pc, #280]	; (8000cb8 <main+0x1ac>)
 8000b9e:	f008 f8d5 	bl	8008d4c <osThreadNew>
 8000ba2:	4602      	mov	r2, r0
 8000ba4:	4b45      	ldr	r3, [pc, #276]	; (8000cbc <main+0x1b0>)
 8000ba6:	601a      	str	r2, [r3, #0]

  /* definition and creation of task_baro_read */
  const osThreadAttr_t task_baro_read_attributes = {
 8000ba8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000bac:	2224      	movs	r2, #36	; 0x24
 8000bae:	2100      	movs	r1, #0
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f00c fa2c 	bl	800d00e <memset>
 8000bb6:	4b42      	ldr	r3, [pc, #264]	; (8000cc0 <main+0x1b4>)
 8000bb8:	673b      	str	r3, [r7, #112]	; 0x70
 8000bba:	4b42      	ldr	r3, [pc, #264]	; (8000cc4 <main+0x1b8>)
 8000bbc:	67bb      	str	r3, [r7, #120]	; 0x78
 8000bbe:	235c      	movs	r3, #92	; 0x5c
 8000bc0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000bc2:	4b41      	ldr	r3, [pc, #260]	; (8000cc8 <main+0x1bc>)
 8000bc4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000bc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bcc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000bd0:	2318      	movs	r3, #24
 8000bd2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    .stack_size = sizeof(task_baro_readBuffer),
    .cb_mem = &task_baro_readControlBlock,
    .cb_size = sizeof(task_baro_readControlBlock),
    .priority = (osPriority_t) osPriorityNormal,
  };
  task_baro_readHandle = osThreadNew(vTaskBaroRead, NULL, &task_baro_read_attributes);
 8000bd6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000bda:	461a      	mov	r2, r3
 8000bdc:	2100      	movs	r1, #0
 8000bde:	483b      	ldr	r0, [pc, #236]	; (8000ccc <main+0x1c0>)
 8000be0:	f008 f8b4 	bl	8008d4c <osThreadNew>
 8000be4:	4602      	mov	r2, r0
 8000be6:	4b3a      	ldr	r3, [pc, #232]	; (8000cd0 <main+0x1c4>)
 8000be8:	601a      	str	r2, [r3, #0]

  /* definition and creation of task_imu_read */
  const osThreadAttr_t task_imu_read_attributes = {
 8000bea:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000bee:	2224      	movs	r2, #36	; 0x24
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f00c fa0b 	bl	800d00e <memset>
 8000bf8:	4b36      	ldr	r3, [pc, #216]	; (8000cd4 <main+0x1c8>)
 8000bfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000bfc:	4b36      	ldr	r3, [pc, #216]	; (8000cd8 <main+0x1cc>)
 8000bfe:	657b      	str	r3, [r7, #84]	; 0x54
 8000c00:	235c      	movs	r3, #92	; 0x5c
 8000c02:	65bb      	str	r3, [r7, #88]	; 0x58
 8000c04:	4b35      	ldr	r3, [pc, #212]	; (8000cdc <main+0x1d0>)
 8000c06:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000c08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c0c:	663b      	str	r3, [r7, #96]	; 0x60
 8000c0e:	2318      	movs	r3, #24
 8000c10:	667b      	str	r3, [r7, #100]	; 0x64
    .stack_size = sizeof(task_imu_readBuffer),
    .cb_mem = &task_imu_readControlBlock,
    .cb_size = sizeof(task_imu_readControlBlock),
    .priority = (osPriority_t) osPriorityNormal,
  };
  task_imu_readHandle = osThreadNew(vTaskImuRead, NULL, &task_imu_read_attributes);
 8000c12:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c16:	461a      	mov	r2, r3
 8000c18:	2100      	movs	r1, #0
 8000c1a:	4831      	ldr	r0, [pc, #196]	; (8000ce0 <main+0x1d4>)
 8000c1c:	f008 f896 	bl	8008d4c <osThreadNew>
 8000c20:	4602      	mov	r2, r0
 8000c22:	4b30      	ldr	r3, [pc, #192]	; (8000ce4 <main+0x1d8>)
 8000c24:	601a      	str	r2, [r3, #0]

  /* definition and creation of task_preprocess */
  const osThreadAttr_t task_preprocess_attributes = {
 8000c26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c2a:	2224      	movs	r2, #36	; 0x24
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f00c f9ed 	bl	800d00e <memset>
 8000c34:	4b2c      	ldr	r3, [pc, #176]	; (8000ce8 <main+0x1dc>)
 8000c36:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c38:	4b2c      	ldr	r3, [pc, #176]	; (8000cec <main+0x1e0>)
 8000c3a:	633b      	str	r3, [r7, #48]	; 0x30
 8000c3c:	235c      	movs	r3, #92	; 0x5c
 8000c3e:	637b      	str	r3, [r7, #52]	; 0x34
 8000c40:	4b2b      	ldr	r3, [pc, #172]	; (8000cf0 <main+0x1e4>)
 8000c42:	63bb      	str	r3, [r7, #56]	; 0x38
 8000c44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000c4a:	2318      	movs	r3, #24
 8000c4c:	643b      	str	r3, [r7, #64]	; 0x40
    .stack_size = sizeof(task_preprocessBuffer),
    .cb_mem = &task_preprocessControlBlock,
    .cb_size = sizeof(task_preprocessControlBlock),
    .priority = (osPriority_t) osPriorityNormal,
  };
  task_preprocessHandle = osThreadNew(vTaskPreprocess, NULL, &task_preprocess_attributes);
 8000c4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c52:	461a      	mov	r2, r3
 8000c54:	2100      	movs	r1, #0
 8000c56:	4827      	ldr	r0, [pc, #156]	; (8000cf4 <main+0x1e8>)
 8000c58:	f008 f878 	bl	8008d4c <osThreadNew>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	4b26      	ldr	r3, [pc, #152]	; (8000cf8 <main+0x1ec>)
 8000c60:	601a      	str	r2, [r3, #0]

  /* definition and creation of task_send_to_mb */
  const osThreadAttr_t task_send_to_mb_attributes = {
 8000c62:	1d3b      	adds	r3, r7, #4
 8000c64:	2224      	movs	r2, #36	; 0x24
 8000c66:	2100      	movs	r1, #0
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f00c f9d0 	bl	800d00e <memset>
 8000c6e:	4b23      	ldr	r3, [pc, #140]	; (8000cfc <main+0x1f0>)
 8000c70:	607b      	str	r3, [r7, #4]
 8000c72:	4b23      	ldr	r3, [pc, #140]	; (8000d00 <main+0x1f4>)
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	235c      	movs	r3, #92	; 0x5c
 8000c78:	613b      	str	r3, [r7, #16]
 8000c7a:	4b22      	ldr	r3, [pc, #136]	; (8000d04 <main+0x1f8>)
 8000c7c:	617b      	str	r3, [r7, #20]
 8000c7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c82:	61bb      	str	r3, [r7, #24]
 8000c84:	2318      	movs	r3, #24
 8000c86:	61fb      	str	r3, [r7, #28]
    .stack_size = sizeof(task_send_to_mbBuffer),
    .cb_mem = &task_send_to_mbControlBlock,
    .cb_size = sizeof(task_send_to_mbControlBlock),
    .priority = (osPriority_t) osPriorityNormal,
  };
  task_send_to_mbHandle = osThreadNew(vTaskSendToMb, NULL, &task_send_to_mb_attributes);
 8000c88:	1d3b      	adds	r3, r7, #4
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	481e      	ldr	r0, [pc, #120]	; (8000d08 <main+0x1fc>)
 8000c90:	f008 f85c 	bl	8008d4c <osThreadNew>
 8000c94:	4602      	mov	r2, r0
 8000c96:	4b1d      	ldr	r3, [pc, #116]	; (8000d0c <main+0x200>)
 8000c98:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000c9a:	f007 fff1 	bl	8008c80 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c9e:	e7fe      	b.n	8000c9e <main+0x192>
 8000ca0:	0800d090 	.word	0x0800d090
 8000ca4:	20002758 	.word	0x20002758
 8000ca8:	0800d0ac 	.word	0x0800d0ac
 8000cac:	200022c4 	.word	0x200022c4
 8000cb0:	20001d58 	.word	0x20001d58
 8000cb4:	0800d038 	.word	0x0800d038
 8000cb8:	0800103d 	.word	0x0800103d
 8000cbc:	20001cf8 	.word	0x20001cf8
 8000cc0:	0800d044 	.word	0x0800d044
 8000cc4:	20001cfc 	.word	0x20001cfc
 8000cc8:	200024d4 	.word	0x200024d4
 8000ccc:	080013d5 	.word	0x080013d5
 8000cd0:	200024cc 	.word	0x200024cc
 8000cd4:	0800d054 	.word	0x0800d054
 8000cd8:	20001e1c 	.word	0x20001e1c
 8000cdc:	200022cc 	.word	0x200022cc
 8000ce0:	0800181d 	.word	0x0800181d
 8000ce4:	20002738 	.word	0x20002738
 8000ce8:	0800d064 	.word	0x0800d064
 8000cec:	20001dc0 	.word	0x20001dc0
 8000cf0:	20001ec4 	.word	0x20001ec4
 8000cf4:	08001c29 	.word	0x08001c29
 8000cf8:	200024d0 	.word	0x200024d0
 8000cfc:	0800d074 	.word	0x0800d074
 8000d00:	20001c90 	.word	0x20001c90
 8000d04:	200020c4 	.word	0x200020c4
 8000d08:	08001f11 	.word	0x08001f11
 8000d0c:	200022c8 	.word	0x200022c8

08000d10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b0ae      	sub	sp, #184	; 0xb8
 8000d14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d16:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000d1a:	2244      	movs	r2, #68	; 0x44
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f00c f975 	bl	800d00e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d24:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d34:	463b      	mov	r3, r7
 8000d36:	2260      	movs	r2, #96	; 0x60
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f00c f967 	bl	800d00e <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000d40:	2310      	movs	r3, #16
 8000d42:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000d44:	2301      	movs	r3, #1
 8000d46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000d50:	2360      	movs	r3, #96	; 0x60
 8000d52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d56:	2302      	movs	r3, #2
 8000d58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d62:	2301      	movs	r3, #1
 8000d64:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000d68:	2328      	movs	r3, #40	; 0x28
 8000d6a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000d6e:	2307      	movs	r3, #7
 8000d70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d74:	2302      	movs	r3, #2
 8000d76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d80:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000d84:	4618      	mov	r0, r3
 8000d86:	f003 f8cd 	bl	8003f24 <HAL_RCC_OscConfig>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000d90:	f000 f96e 	bl	8001070 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d94:	230f      	movs	r3, #15
 8000d96:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000da0:	2300      	movs	r3, #0
 8000da2:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000da4:	2300      	movs	r3, #0
 8000da6:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000da8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000dac:	2104      	movs	r1, #4
 8000dae:	4618      	mov	r0, r3
 8000db0:	f003 fca6 	bl	8004700 <HAL_RCC_ClockConfig>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000dba:	f000 f959 	bl	8001070 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_USB;
 8000dbe:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 8000dc2:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000dc8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000dcc:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000dd6:	2318      	movs	r3, #24
 8000dd8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000dda:	2307      	movs	r3, #7
 8000ddc:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000dde:	2302      	movs	r3, #2
 8000de0:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000de2:	2302      	movs	r3, #2
 8000de4:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000de6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000dea:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dec:	463b      	mov	r3, r7
 8000dee:	4618      	mov	r0, r3
 8000df0:	f003 fea6 	bl	8004b40 <HAL_RCCEx_PeriphCLKConfig>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000dfa:	f000 f939 	bl	8001070 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000dfe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e02:	f003 f829 	bl	8003e58 <HAL_PWREx_ControlVoltageScaling>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <SystemClock_Config+0x100>
  {
    Error_Handler();
 8000e0c:	f000 f930 	bl	8001070 <Error_Handler>
  }
}
 8000e10:	bf00      	nop
 8000e12:	37b8      	adds	r7, #184	; 0xb8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e1c:	4b1b      	ldr	r3, [pc, #108]	; (8000e8c <MX_I2C1_Init+0x74>)
 8000e1e:	4a1c      	ldr	r2, [pc, #112]	; (8000e90 <MX_I2C1_Init+0x78>)
 8000e20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 8000e22:	4b1a      	ldr	r3, [pc, #104]	; (8000e8c <MX_I2C1_Init+0x74>)
 8000e24:	4a1b      	ldr	r2, [pc, #108]	; (8000e94 <MX_I2C1_Init+0x7c>)
 8000e26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e28:	4b18      	ldr	r3, [pc, #96]	; (8000e8c <MX_I2C1_Init+0x74>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e2e:	4b17      	ldr	r3, [pc, #92]	; (8000e8c <MX_I2C1_Init+0x74>)
 8000e30:	2201      	movs	r2, #1
 8000e32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e34:	4b15      	ldr	r3, [pc, #84]	; (8000e8c <MX_I2C1_Init+0x74>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e3a:	4b14      	ldr	r3, [pc, #80]	; (8000e8c <MX_I2C1_Init+0x74>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e40:	4b12      	ldr	r3, [pc, #72]	; (8000e8c <MX_I2C1_Init+0x74>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e46:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <MX_I2C1_Init+0x74>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e4c:	4b0f      	ldr	r3, [pc, #60]	; (8000e8c <MX_I2C1_Init+0x74>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e52:	480e      	ldr	r0, [pc, #56]	; (8000e8c <MX_I2C1_Init+0x74>)
 8000e54:	f001 fbb6 	bl	80025c4 <HAL_I2C_Init>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e5e:	f000 f907 	bl	8001070 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e62:	2100      	movs	r1, #0
 8000e64:	4809      	ldr	r0, [pc, #36]	; (8000e8c <MX_I2C1_Init+0x74>)
 8000e66:	f002 f807 	bl	8002e78 <HAL_I2CEx_ConfigAnalogFilter>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e70:	f000 f8fe 	bl	8001070 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e74:	2100      	movs	r1, #0
 8000e76:	4805      	ldr	r0, [pc, #20]	; (8000e8c <MX_I2C1_Init+0x74>)
 8000e78:	f002 f849 	bl	8002f0e <HAL_I2CEx_ConfigDigitalFilter>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e82:	f000 f8f5 	bl	8001070 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	20001e78 	.word	0x20001e78
 8000e90:	40005400 	.word	0x40005400
 8000e94:	00702991 	.word	0x00702991

08000e98 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e9c:	4b1b      	ldr	r3, [pc, #108]	; (8000f0c <MX_SPI1_Init+0x74>)
 8000e9e:	4a1c      	ldr	r2, [pc, #112]	; (8000f10 <MX_SPI1_Init+0x78>)
 8000ea0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ea2:	4b1a      	ldr	r3, [pc, #104]	; (8000f0c <MX_SPI1_Init+0x74>)
 8000ea4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ea8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000eaa:	4b18      	ldr	r3, [pc, #96]	; (8000f0c <MX_SPI1_Init+0x74>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000eb0:	4b16      	ldr	r3, [pc, #88]	; (8000f0c <MX_SPI1_Init+0x74>)
 8000eb2:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8000eb6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000eb8:	4b14      	ldr	r3, [pc, #80]	; (8000f0c <MX_SPI1_Init+0x74>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ebe:	4b13      	ldr	r3, [pc, #76]	; (8000f0c <MX_SPI1_Init+0x74>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ec4:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <MX_SPI1_Init+0x74>)
 8000ec6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eca:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ecc:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <MX_SPI1_Init+0x74>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ed2:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <MX_SPI1_Init+0x74>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <MX_SPI1_Init+0x74>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ede:	4b0b      	ldr	r3, [pc, #44]	; (8000f0c <MX_SPI1_Init+0x74>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000ee4:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <MX_SPI1_Init+0x74>)
 8000ee6:	2207      	movs	r2, #7
 8000ee8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000eea:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <MX_SPI1_Init+0x74>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <MX_SPI1_Init+0x74>)
 8000ef2:	2208      	movs	r2, #8
 8000ef4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ef6:	4805      	ldr	r0, [pc, #20]	; (8000f0c <MX_SPI1_Init+0x74>)
 8000ef8:	f004 f956 	bl	80051a8 <HAL_SPI_Init>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000f02:	f000 f8b5 	bl	8001070 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	200026d4 	.word	0x200026d4
 8000f10:	40013000 	.word	0x40013000

08000f14 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000f18:	4b19      	ldr	r3, [pc, #100]	; (8000f80 <MX_SPI2_Init+0x6c>)
 8000f1a:	4a1a      	ldr	r2, [pc, #104]	; (8000f84 <MX_SPI2_Init+0x70>)
 8000f1c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8000f1e:	4b18      	ldr	r3, [pc, #96]	; (8000f80 <MX_SPI2_Init+0x6c>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000f24:	4b16      	ldr	r3, [pc, #88]	; (8000f80 <MX_SPI2_Init+0x6c>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000f2a:	4b15      	ldr	r3, [pc, #84]	; (8000f80 <MX_SPI2_Init+0x6c>)
 8000f2c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000f30:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f32:	4b13      	ldr	r3, [pc, #76]	; (8000f80 <MX_SPI2_Init+0x6c>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f38:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <MX_SPI2_Init+0x6c>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000f3e:	4b10      	ldr	r3, [pc, #64]	; (8000f80 <MX_SPI2_Init+0x6c>)
 8000f40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f44:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f46:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <MX_SPI2_Init+0x6c>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f4c:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <MX_SPI2_Init+0x6c>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f52:	4b0b      	ldr	r3, [pc, #44]	; (8000f80 <MX_SPI2_Init+0x6c>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000f58:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <MX_SPI2_Init+0x6c>)
 8000f5a:	2207      	movs	r2, #7
 8000f5c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f5e:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <MX_SPI2_Init+0x6c>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000f64:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <MX_SPI2_Init+0x6c>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f6a:	4805      	ldr	r0, [pc, #20]	; (8000f80 <MX_SPI2_Init+0x6c>)
 8000f6c:	f004 f91c 	bl	80051a8 <HAL_SPI_Init>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_SPI2_Init+0x66>
  {
    Error_Handler();
 8000f76:	f000 f87b 	bl	8001070 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20001d5c 	.word	0x20001d5c
 8000f84:	40003800 	.word	0x40003800

08000f88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b088      	sub	sp, #32
 8000f8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8e:	f107 030c 	add.w	r3, r7, #12
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	605a      	str	r2, [r3, #4]
 8000f98:	609a      	str	r2, [r3, #8]
 8000f9a:	60da      	str	r2, [r3, #12]
 8000f9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f9e:	4b25      	ldr	r3, [pc, #148]	; (8001034 <MX_GPIO_Init+0xac>)
 8000fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa2:	4a24      	ldr	r2, [pc, #144]	; (8001034 <MX_GPIO_Init+0xac>)
 8000fa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000faa:	4b22      	ldr	r3, [pc, #136]	; (8001034 <MX_GPIO_Init+0xac>)
 8000fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fb2:	60bb      	str	r3, [r7, #8]
 8000fb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb6:	4b1f      	ldr	r3, [pc, #124]	; (8001034 <MX_GPIO_Init+0xac>)
 8000fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fba:	4a1e      	ldr	r2, [pc, #120]	; (8001034 <MX_GPIO_Init+0xac>)
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fc2:	4b1c      	ldr	r3, [pc, #112]	; (8001034 <MX_GPIO_Init+0xac>)
 8000fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fce:	4b19      	ldr	r3, [pc, #100]	; (8001034 <MX_GPIO_Init+0xac>)
 8000fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd2:	4a18      	ldr	r2, [pc, #96]	; (8001034 <MX_GPIO_Init+0xac>)
 8000fd4:	f043 0302 	orr.w	r3, r3, #2
 8000fd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fda:	4b16      	ldr	r3, [pc, #88]	; (8001034 <MX_GPIO_Init+0xac>)
 8000fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fde:	f003 0302 	and.w	r3, r3, #2
 8000fe2:	603b      	str	r3, [r7, #0]
 8000fe4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_ICM_CS_Pin|GPIO_BMI_CS_Pin, GPIO_PIN_RESET);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	2131      	movs	r1, #49	; 0x31
 8000fea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fee:	f001 fad1 	bl	8002594 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 GPIO_ICM_CS_Pin GPIO_BMI_CS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_ICM_CS_Pin|GPIO_BMI_CS_Pin;
 8000ff2:	2331      	movs	r3, #49	; 0x31
 8000ff4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001002:	f107 030c 	add.w	r3, r7, #12
 8001006:	4619      	mov	r1, r3
 8001008:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800100c:	f001 f948 	bl	80022a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001010:	230c      	movs	r3, #12
 8001012:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001014:	4b08      	ldr	r3, [pc, #32]	; (8001038 <MX_GPIO_Init+0xb0>)
 8001016:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101c:	f107 030c 	add.w	r3, r7, #12
 8001020:	4619      	mov	r1, r3
 8001022:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001026:	f001 f93b 	bl	80022a0 <HAL_GPIO_Init>

}
 800102a:	bf00      	nop
 800102c:	3720      	adds	r7, #32
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40021000 	.word	0x40021000
 8001038:	10110000 	.word	0x10110000

0800103c <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001044:	2001      	movs	r0, #1
 8001046:	f007 ff2b 	bl	8008ea0 <osDelay>
 800104a:	e7fb      	b.n	8001044 <StartDefaultTask+0x8>

0800104c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a04      	ldr	r2, [pc, #16]	; (800106c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d101      	bne.n	8001062 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800105e:	f001 f81f 	bl	80020a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40012c00 	.word	0x40012c00

08001070 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
	...

08001080 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001086:	4b11      	ldr	r3, [pc, #68]	; (80010cc <HAL_MspInit+0x4c>)
 8001088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800108a:	4a10      	ldr	r2, [pc, #64]	; (80010cc <HAL_MspInit+0x4c>)
 800108c:	f043 0301 	orr.w	r3, r3, #1
 8001090:	6613      	str	r3, [r2, #96]	; 0x60
 8001092:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <HAL_MspInit+0x4c>)
 8001094:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800109e:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <HAL_MspInit+0x4c>)
 80010a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a2:	4a0a      	ldr	r2, [pc, #40]	; (80010cc <HAL_MspInit+0x4c>)
 80010a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a8:	6593      	str	r3, [r2, #88]	; 0x58
 80010aa:	4b08      	ldr	r3, [pc, #32]	; (80010cc <HAL_MspInit+0x4c>)
 80010ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b2:	603b      	str	r3, [r7, #0]
 80010b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010b6:	2200      	movs	r2, #0
 80010b8:	210f      	movs	r1, #15
 80010ba:	f06f 0001 	mvn.w	r0, #1
 80010be:	f001 f8c5 	bl	800224c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40021000 	.word	0x40021000

080010d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08a      	sub	sp, #40	; 0x28
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a18      	ldr	r2, [pc, #96]	; (8001150 <HAL_I2C_MspInit+0x80>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d129      	bne.n	8001146 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f2:	4b18      	ldr	r3, [pc, #96]	; (8001154 <HAL_I2C_MspInit+0x84>)
 80010f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f6:	4a17      	ldr	r2, [pc, #92]	; (8001154 <HAL_I2C_MspInit+0x84>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010fe:	4b15      	ldr	r3, [pc, #84]	; (8001154 <HAL_I2C_MspInit+0x84>)
 8001100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	613b      	str	r3, [r7, #16]
 8001108:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800110a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800110e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001110:	2312      	movs	r3, #18
 8001112:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001114:	2301      	movs	r3, #1
 8001116:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001118:	2303      	movs	r3, #3
 800111a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800111c:	2304      	movs	r3, #4
 800111e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001120:	f107 0314 	add.w	r3, r7, #20
 8001124:	4619      	mov	r1, r3
 8001126:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800112a:	f001 f8b9 	bl	80022a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800112e:	4b09      	ldr	r3, [pc, #36]	; (8001154 <HAL_I2C_MspInit+0x84>)
 8001130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001132:	4a08      	ldr	r2, [pc, #32]	; (8001154 <HAL_I2C_MspInit+0x84>)
 8001134:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001138:	6593      	str	r3, [r2, #88]	; 0x58
 800113a:	4b06      	ldr	r3, [pc, #24]	; (8001154 <HAL_I2C_MspInit+0x84>)
 800113c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800113e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001146:	bf00      	nop
 8001148:	3728      	adds	r7, #40	; 0x28
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40005400 	.word	0x40005400
 8001154:	40021000 	.word	0x40021000

08001158 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b08c      	sub	sp, #48	; 0x30
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001160:	f107 031c 	add.w	r3, r7, #28
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a2f      	ldr	r2, [pc, #188]	; (8001234 <HAL_SPI_MspInit+0xdc>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d129      	bne.n	80011ce <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800117a:	4b2f      	ldr	r3, [pc, #188]	; (8001238 <HAL_SPI_MspInit+0xe0>)
 800117c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800117e:	4a2e      	ldr	r2, [pc, #184]	; (8001238 <HAL_SPI_MspInit+0xe0>)
 8001180:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001184:	6613      	str	r3, [r2, #96]	; 0x60
 8001186:	4b2c      	ldr	r3, [pc, #176]	; (8001238 <HAL_SPI_MspInit+0xe0>)
 8001188:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800118a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800118e:	61bb      	str	r3, [r7, #24]
 8001190:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001192:	4b29      	ldr	r3, [pc, #164]	; (8001238 <HAL_SPI_MspInit+0xe0>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001196:	4a28      	ldr	r2, [pc, #160]	; (8001238 <HAL_SPI_MspInit+0xe0>)
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800119e:	4b26      	ldr	r3, [pc, #152]	; (8001238 <HAL_SPI_MspInit+0xe0>)
 80011a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	617b      	str	r3, [r7, #20]
 80011a8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 80011aa:	23c2      	movs	r3, #194	; 0xc2
 80011ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ae:	2302      	movs	r3, #2
 80011b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b6:	2303      	movs	r3, #3
 80011b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011ba:	2305      	movs	r3, #5
 80011bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011be:	f107 031c 	add.w	r3, r7, #28
 80011c2:	4619      	mov	r1, r3
 80011c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011c8:	f001 f86a 	bl	80022a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80011cc:	e02d      	b.n	800122a <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI2)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a1a      	ldr	r2, [pc, #104]	; (800123c <HAL_SPI_MspInit+0xe4>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d128      	bne.n	800122a <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80011d8:	4b17      	ldr	r3, [pc, #92]	; (8001238 <HAL_SPI_MspInit+0xe0>)
 80011da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011dc:	4a16      	ldr	r2, [pc, #88]	; (8001238 <HAL_SPI_MspInit+0xe0>)
 80011de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011e2:	6593      	str	r3, [r2, #88]	; 0x58
 80011e4:	4b14      	ldr	r3, [pc, #80]	; (8001238 <HAL_SPI_MspInit+0xe0>)
 80011e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ec:	613b      	str	r3, [r7, #16]
 80011ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f0:	4b11      	ldr	r3, [pc, #68]	; (8001238 <HAL_SPI_MspInit+0xe0>)
 80011f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f4:	4a10      	ldr	r2, [pc, #64]	; (8001238 <HAL_SPI_MspInit+0xe0>)
 80011f6:	f043 0302 	orr.w	r3, r3, #2
 80011fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011fc:	4b0e      	ldr	r3, [pc, #56]	; (8001238 <HAL_SPI_MspInit+0xe0>)
 80011fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001200:	f003 0302 	and.w	r3, r3, #2
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8001208:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 800120c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120e:	2302      	movs	r3, #2
 8001210:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001216:	2303      	movs	r3, #3
 8001218:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800121a:	2305      	movs	r3, #5
 800121c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121e:	f107 031c 	add.w	r3, r7, #28
 8001222:	4619      	mov	r1, r3
 8001224:	4806      	ldr	r0, [pc, #24]	; (8001240 <HAL_SPI_MspInit+0xe8>)
 8001226:	f001 f83b 	bl	80022a0 <HAL_GPIO_Init>
}
 800122a:	bf00      	nop
 800122c:	3730      	adds	r7, #48	; 0x30
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40013000 	.word	0x40013000
 8001238:	40021000 	.word	0x40021000
 800123c:	40003800 	.word	0x40003800
 8001240:	48000400 	.word	0x48000400

08001244 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b08c      	sub	sp, #48	; 0x30
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800124c:	2300      	movs	r3, #0
 800124e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001250:	2300      	movs	r3, #0
 8001252:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8001254:	2200      	movs	r2, #0
 8001256:	6879      	ldr	r1, [r7, #4]
 8001258:	2019      	movs	r0, #25
 800125a:	f000 fff7 	bl	800224c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 800125e:	2019      	movs	r0, #25
 8001260:	f001 f810 	bl	8002284 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001264:	4b1e      	ldr	r3, [pc, #120]	; (80012e0 <HAL_InitTick+0x9c>)
 8001266:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001268:	4a1d      	ldr	r2, [pc, #116]	; (80012e0 <HAL_InitTick+0x9c>)
 800126a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800126e:	6613      	str	r3, [r2, #96]	; 0x60
 8001270:	4b1b      	ldr	r3, [pc, #108]	; (80012e0 <HAL_InitTick+0x9c>)
 8001272:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001274:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800127c:	f107 0210 	add.w	r2, r7, #16
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	4611      	mov	r1, r2
 8001286:	4618      	mov	r0, r3
 8001288:	f003 fbc8 	bl	8004a1c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800128c:	f003 fbb0 	bl	80049f0 <HAL_RCC_GetPCLK2Freq>
 8001290:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001294:	4a13      	ldr	r2, [pc, #76]	; (80012e4 <HAL_InitTick+0xa0>)
 8001296:	fba2 2303 	umull	r2, r3, r2, r3
 800129a:	0c9b      	lsrs	r3, r3, #18
 800129c:	3b01      	subs	r3, #1
 800129e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80012a0:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <HAL_InitTick+0xa4>)
 80012a2:	4a12      	ldr	r2, [pc, #72]	; (80012ec <HAL_InitTick+0xa8>)
 80012a4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80012a6:	4b10      	ldr	r3, [pc, #64]	; (80012e8 <HAL_InitTick+0xa4>)
 80012a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012ac:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80012ae:	4a0e      	ldr	r2, [pc, #56]	; (80012e8 <HAL_InitTick+0xa4>)
 80012b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012b2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80012b4:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <HAL_InitTick+0xa4>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ba:	4b0b      	ldr	r3, [pc, #44]	; (80012e8 <HAL_InitTick+0xa4>)
 80012bc:	2200      	movs	r2, #0
 80012be:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80012c0:	4809      	ldr	r0, [pc, #36]	; (80012e8 <HAL_InitTick+0xa4>)
 80012c2:	f004 fe11 	bl	8005ee8 <HAL_TIM_Base_Init>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d104      	bne.n	80012d6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80012cc:	4806      	ldr	r0, [pc, #24]	; (80012e8 <HAL_InitTick+0xa4>)
 80012ce:	f004 fe41 	bl	8005f54 <HAL_TIM_Base_Start_IT>
 80012d2:	4603      	mov	r3, r0
 80012d4:	e000      	b.n	80012d8 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3730      	adds	r7, #48	; 0x30
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40021000 	.word	0x40021000
 80012e4:	431bde83 	.word	0x431bde83
 80012e8:	2000275c 	.word	0x2000275c
 80012ec:	40012c00 	.word	0x40012c00

080012f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012fe:	b480      	push	{r7}
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001302:	e7fe      	b.n	8001302 <HardFault_Handler+0x4>

08001304 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001308:	e7fe      	b.n	8001308 <MemManage_Handler+0x4>

0800130a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800130a:	b480      	push	{r7}
 800130c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800130e:	e7fe      	b.n	800130e <BusFault_Handler+0x4>

08001310 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001314:	e7fe      	b.n	8001314 <UsageFault_Handler+0x4>

08001316 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001316:	b480      	push	{r7}
 8001318:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001328:	4802      	ldr	r0, [pc, #8]	; (8001334 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800132a:	f004 fe3d 	bl	8005fa8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	2000275c 	.word	0x2000275c

08001338 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800133c:	4802      	ldr	r0, [pc, #8]	; (8001348 <USB_IRQHandler+0x10>)
 800133e:	f001 ff3c 	bl	80031ba <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	2000344c 	.word	0x2000344c

0800134c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001350:	4b17      	ldr	r3, [pc, #92]	; (80013b0 <SystemInit+0x64>)
 8001352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001356:	4a16      	ldr	r2, [pc, #88]	; (80013b0 <SystemInit+0x64>)
 8001358:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800135c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001360:	4b14      	ldr	r3, [pc, #80]	; (80013b4 <SystemInit+0x68>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a13      	ldr	r2, [pc, #76]	; (80013b4 <SystemInit+0x68>)
 8001366:	f043 0301 	orr.w	r3, r3, #1
 800136a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800136c:	4b11      	ldr	r3, [pc, #68]	; (80013b4 <SystemInit+0x68>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001372:	4b10      	ldr	r3, [pc, #64]	; (80013b4 <SystemInit+0x68>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a0f      	ldr	r2, [pc, #60]	; (80013b4 <SystemInit+0x68>)
 8001378:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800137c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001380:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001382:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <SystemInit+0x68>)
 8001384:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001388:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800138a:	4b0a      	ldr	r3, [pc, #40]	; (80013b4 <SystemInit+0x68>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a09      	ldr	r2, [pc, #36]	; (80013b4 <SystemInit+0x68>)
 8001390:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001394:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001396:	4b07      	ldr	r3, [pc, #28]	; (80013b4 <SystemInit+0x68>)
 8001398:	2200      	movs	r2, #0
 800139a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800139c:	4b04      	ldr	r3, [pc, #16]	; (80013b0 <SystemInit+0x64>)
 800139e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013a2:	609a      	str	r2, [r3, #8]
#endif
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	e000ed00 	.word	0xe000ed00
 80013b4:	40021000 	.word	0x40021000

080013b8 <vinit_queue>:
 */

#include "typedef.h"

void vinit_queue(osMessageQueueId_t queue)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
	queue = osMessageQueueNew(QUEUE_SIZE, sizeof(imu_data), NULL);
 80013c0:	2200      	movs	r2, #0
 80013c2:	211c      	movs	r1, #28
 80013c4:	2020      	movs	r0, #32
 80013c6:	f007 ff15 	bl	80091f4 <osMessageQueueNew>
 80013ca:	6078      	str	r0, [r7, #4]
}
 80013cc:	bf00      	nop
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <vTaskBaroRead>:
/**
 * @brief Function implementing the task_baro_read thread.
 * @param argument: Not used
 * @retval None
 */
void vTaskBaroRead(void *argument) {
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08a      	sub	sp, #40	; 0x28
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
	int32_t temperature;
	int32_t pressure;
	/* needed for calculation of temperature and pressure. Is read out in initialisation */
	uint16_t coefficients[6];

	vInitBaroRead(coefficients);
 80013dc:	f107 030c 	add.w	r3, r7, #12
 80013e0:	4618      	mov	r0, r3
 80013e2:	f000 f839 	bl	8001458 <vInitBaroRead>

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 80013e6:	f007 fc7f 	bl	8008ce8 <osKernelGetTickCount>
 80013ea:	6278      	str	r0, [r7, #36]	; 0x24
	tick_update = osKernelGetTickFreq() / BARO_SAMPLING_FREQ;
 80013ec:	f007 fca4 	bl	8008d38 <osKernelGetTickFreq>
 80013f0:	4602      	mov	r2, r0
 80013f2:	4b16      	ldr	r3, [pc, #88]	; (800144c <vTaskBaroRead+0x78>)
 80013f4:	fba3 2302 	umull	r2, r3, r3, r2
 80013f8:	099b      	lsrs	r3, r3, #6
 80013fa:	623b      	str	r3, [r7, #32]
	for (;;) {
		tick_count += tick_update;
 80013fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013fe:	6a3b      	ldr	r3, [r7, #32]
 8001400:	4413      	add	r3, r2
 8001402:	627b      	str	r3, [r7, #36]	; 0x24
		vReadBaro(&temperature, &pressure, coefficients);
 8001404:	f107 020c 	add.w	r2, r7, #12
 8001408:	f107 0118 	add.w	r1, r7, #24
 800140c:	f107 031c 	add.w	r3, r7, #28
 8001410:	4618      	mov	r0, r3
 8001412:	f000 f901 	bl	8001618 <vReadBaro>
		/* If the Mutex is aquired we write the data into the right variable */
		if (osMutexAcquire(baro_mutex, BARO_MUTEX_TIMEOUT) == osOK) {
 8001416:	4b0e      	ldr	r3, [pc, #56]	; (8001450 <vTaskBaroRead+0x7c>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	211e      	movs	r1, #30
 800141c:	4618      	mov	r0, r3
 800141e:	f007 fe3b 	bl	8009098 <osMutexAcquire>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d10d      	bne.n	8001444 <vTaskBaroRead+0x70>
			baro_data_to_mb.temperature = temperature;
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	4a0a      	ldr	r2, [pc, #40]	; (8001454 <vTaskBaroRead+0x80>)
 800142c:	6053      	str	r3, [r2, #4]
			baro_data_to_mb.pressure = pressure;
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	4a08      	ldr	r2, [pc, #32]	; (8001454 <vTaskBaroRead+0x80>)
 8001432:	6013      	str	r3, [r2, #0]
			/* need to check this if the overflow is handled correctly */
			baro_data_to_mb.timestamp = tick_count;
 8001434:	4a07      	ldr	r2, [pc, #28]	; (8001454 <vTaskBaroRead+0x80>)
 8001436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001438:	6093      	str	r3, [r2, #8]
			osMutexRelease(baro_mutex);
 800143a:	4b05      	ldr	r3, [pc, #20]	; (8001450 <vTaskBaroRead+0x7c>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4618      	mov	r0, r3
 8001440:	f007 fe88 	bl	8009154 <osMutexRelease>
		}
		osDelayUntil(tick_count);
 8001444:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001446:	f007 fd59 	bl	8008efc <osDelayUntil>
		tick_count += tick_update;
 800144a:	e7d7      	b.n	80013fc <vTaskBaroRead+0x28>
 800144c:	51eb851f 	.word	0x51eb851f
 8001450:	20002758 	.word	0x20002758
 8001454:	20001cec 	.word	0x20001cec

08001458 <vInitBaroRead>:
	}
}

void vInitBaroRead(uint16_t coefficients[]) {
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af02      	add	r7, sp, #8
 800145e:	6078      	str	r0, [r7, #4]
	uint8_t command;
	uint8_t read_buffer[2];
	uint32_t wait_reset_time;
	wait_reset_time = 3 * osKernelGetTickFreq() / 1000;
 8001460:	f007 fc6a 	bl	8008d38 <osKernelGetTickFreq>
 8001464:	4602      	mov	r2, r0
 8001466:	4613      	mov	r3, r2
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	4413      	add	r3, r2
 800146c:	4a67      	ldr	r2, [pc, #412]	; (800160c <vInitBaroRead+0x1b4>)
 800146e:	fba2 2303 	umull	r2, r3, r2, r3
 8001472:	099b      	lsrs	r3, r3, #6
 8001474:	60fb      	str	r3, [r7, #12]

	/* Reset */
	command = BARO_COMMAND_RESET;
 8001476:	231e      	movs	r3, #30
 8001478:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, BARO_ADDRESS, &command, BARO_COMMAND_LENGTH,
 800147a:	f107 020b 	add.w	r2, r7, #11
 800147e:	231e      	movs	r3, #30
 8001480:	9300      	str	r3, [sp, #0]
 8001482:	2301      	movs	r3, #1
 8001484:	21ee      	movs	r1, #238	; 0xee
 8001486:	4862      	ldr	r0, [pc, #392]	; (8001610 <vInitBaroRead+0x1b8>)
 8001488:	f001 f92c 	bl	80026e4 <HAL_I2C_Master_Transmit>
	BARO_I2C_TIMEOUT);
	osDelay(wait_reset_time);
 800148c:	68f8      	ldr	r0, [r7, #12]
 800148e:	f007 fd07 	bl	8008ea0 <osDelay>

	/* PROM Read (Coefficients) */
	READ_BARO_COEFF(0, command, coefficients);
 8001492:	23a2      	movs	r3, #162	; 0xa2
 8001494:	72fb      	strb	r3, [r7, #11]
 8001496:	f107 020b 	add.w	r2, r7, #11
 800149a:	231e      	movs	r3, #30
 800149c:	9300      	str	r3, [sp, #0]
 800149e:	2301      	movs	r3, #1
 80014a0:	21ee      	movs	r1, #238	; 0xee
 80014a2:	485b      	ldr	r0, [pc, #364]	; (8001610 <vInitBaroRead+0x1b8>)
 80014a4:	f001 f91e 	bl	80026e4 <HAL_I2C_Master_Transmit>
 80014a8:	f107 0208 	add.w	r2, r7, #8
 80014ac:	231e      	movs	r3, #30
 80014ae:	9300      	str	r3, [sp, #0]
 80014b0:	2302      	movs	r3, #2
 80014b2:	21ee      	movs	r1, #238	; 0xee
 80014b4:	4856      	ldr	r0, [pc, #344]	; (8001610 <vInitBaroRead+0x1b8>)
 80014b6:	f001 fa09 	bl	80028cc <HAL_I2C_Master_Receive>
 80014ba:	7a3b      	ldrb	r3, [r7, #8]
 80014bc:	021b      	lsls	r3, r3, #8
 80014be:	b21a      	sxth	r2, r3
 80014c0:	7a7b      	ldrb	r3, [r7, #9]
 80014c2:	b21b      	sxth	r3, r3
 80014c4:	4313      	orrs	r3, r2
 80014c6:	b21b      	sxth	r3, r3
 80014c8:	b29a      	uxth	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	801a      	strh	r2, [r3, #0]

	READ_BARO_COEFF(1, command, coefficients);
 80014ce:	23a4      	movs	r3, #164	; 0xa4
 80014d0:	72fb      	strb	r3, [r7, #11]
 80014d2:	f107 020b 	add.w	r2, r7, #11
 80014d6:	231e      	movs	r3, #30
 80014d8:	9300      	str	r3, [sp, #0]
 80014da:	2301      	movs	r3, #1
 80014dc:	21ee      	movs	r1, #238	; 0xee
 80014de:	484c      	ldr	r0, [pc, #304]	; (8001610 <vInitBaroRead+0x1b8>)
 80014e0:	f001 f900 	bl	80026e4 <HAL_I2C_Master_Transmit>
 80014e4:	f107 0208 	add.w	r2, r7, #8
 80014e8:	231e      	movs	r3, #30
 80014ea:	9300      	str	r3, [sp, #0]
 80014ec:	2302      	movs	r3, #2
 80014ee:	21ee      	movs	r1, #238	; 0xee
 80014f0:	4847      	ldr	r0, [pc, #284]	; (8001610 <vInitBaroRead+0x1b8>)
 80014f2:	f001 f9eb 	bl	80028cc <HAL_I2C_Master_Receive>
 80014f6:	7a3b      	ldrb	r3, [r7, #8]
 80014f8:	021b      	lsls	r3, r3, #8
 80014fa:	b21a      	sxth	r2, r3
 80014fc:	7a7b      	ldrb	r3, [r7, #9]
 80014fe:	b21b      	sxth	r3, r3
 8001500:	4313      	orrs	r3, r2
 8001502:	b21a      	sxth	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	3302      	adds	r3, #2
 8001508:	b292      	uxth	r2, r2
 800150a:	801a      	strh	r2, [r3, #0]

	READ_BARO_COEFF(2, command, coefficients);
 800150c:	23a6      	movs	r3, #166	; 0xa6
 800150e:	72fb      	strb	r3, [r7, #11]
 8001510:	f107 020b 	add.w	r2, r7, #11
 8001514:	231e      	movs	r3, #30
 8001516:	9300      	str	r3, [sp, #0]
 8001518:	2301      	movs	r3, #1
 800151a:	21ee      	movs	r1, #238	; 0xee
 800151c:	483c      	ldr	r0, [pc, #240]	; (8001610 <vInitBaroRead+0x1b8>)
 800151e:	f001 f8e1 	bl	80026e4 <HAL_I2C_Master_Transmit>
 8001522:	f107 0208 	add.w	r2, r7, #8
 8001526:	231e      	movs	r3, #30
 8001528:	9300      	str	r3, [sp, #0]
 800152a:	2302      	movs	r3, #2
 800152c:	21ee      	movs	r1, #238	; 0xee
 800152e:	4838      	ldr	r0, [pc, #224]	; (8001610 <vInitBaroRead+0x1b8>)
 8001530:	f001 f9cc 	bl	80028cc <HAL_I2C_Master_Receive>
 8001534:	7a3b      	ldrb	r3, [r7, #8]
 8001536:	021b      	lsls	r3, r3, #8
 8001538:	b21a      	sxth	r2, r3
 800153a:	7a7b      	ldrb	r3, [r7, #9]
 800153c:	b21b      	sxth	r3, r3
 800153e:	4313      	orrs	r3, r2
 8001540:	b21a      	sxth	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	3304      	adds	r3, #4
 8001546:	b292      	uxth	r2, r2
 8001548:	801a      	strh	r2, [r3, #0]

	READ_BARO_COEFF(3, command, coefficients);
 800154a:	23a8      	movs	r3, #168	; 0xa8
 800154c:	72fb      	strb	r3, [r7, #11]
 800154e:	f107 020b 	add.w	r2, r7, #11
 8001552:	231e      	movs	r3, #30
 8001554:	9300      	str	r3, [sp, #0]
 8001556:	2301      	movs	r3, #1
 8001558:	21ee      	movs	r1, #238	; 0xee
 800155a:	482d      	ldr	r0, [pc, #180]	; (8001610 <vInitBaroRead+0x1b8>)
 800155c:	f001 f8c2 	bl	80026e4 <HAL_I2C_Master_Transmit>
 8001560:	f107 0208 	add.w	r2, r7, #8
 8001564:	231e      	movs	r3, #30
 8001566:	9300      	str	r3, [sp, #0]
 8001568:	2302      	movs	r3, #2
 800156a:	21ee      	movs	r1, #238	; 0xee
 800156c:	4828      	ldr	r0, [pc, #160]	; (8001610 <vInitBaroRead+0x1b8>)
 800156e:	f001 f9ad 	bl	80028cc <HAL_I2C_Master_Receive>
 8001572:	7a3b      	ldrb	r3, [r7, #8]
 8001574:	021b      	lsls	r3, r3, #8
 8001576:	b21a      	sxth	r2, r3
 8001578:	7a7b      	ldrb	r3, [r7, #9]
 800157a:	b21b      	sxth	r3, r3
 800157c:	4313      	orrs	r3, r2
 800157e:	b21a      	sxth	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3306      	adds	r3, #6
 8001584:	b292      	uxth	r2, r2
 8001586:	801a      	strh	r2, [r3, #0]

	READ_BARO_COEFF(4, command, coefficients);
 8001588:	23aa      	movs	r3, #170	; 0xaa
 800158a:	72fb      	strb	r3, [r7, #11]
 800158c:	f107 020b 	add.w	r2, r7, #11
 8001590:	231e      	movs	r3, #30
 8001592:	9300      	str	r3, [sp, #0]
 8001594:	2301      	movs	r3, #1
 8001596:	21ee      	movs	r1, #238	; 0xee
 8001598:	481d      	ldr	r0, [pc, #116]	; (8001610 <vInitBaroRead+0x1b8>)
 800159a:	f001 f8a3 	bl	80026e4 <HAL_I2C_Master_Transmit>
 800159e:	f107 0208 	add.w	r2, r7, #8
 80015a2:	231e      	movs	r3, #30
 80015a4:	9300      	str	r3, [sp, #0]
 80015a6:	2302      	movs	r3, #2
 80015a8:	21ee      	movs	r1, #238	; 0xee
 80015aa:	4819      	ldr	r0, [pc, #100]	; (8001610 <vInitBaroRead+0x1b8>)
 80015ac:	f001 f98e 	bl	80028cc <HAL_I2C_Master_Receive>
 80015b0:	7a3b      	ldrb	r3, [r7, #8]
 80015b2:	021b      	lsls	r3, r3, #8
 80015b4:	b21a      	sxth	r2, r3
 80015b6:	7a7b      	ldrb	r3, [r7, #9]
 80015b8:	b21b      	sxth	r3, r3
 80015ba:	4313      	orrs	r3, r2
 80015bc:	b21a      	sxth	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	3308      	adds	r3, #8
 80015c2:	b292      	uxth	r2, r2
 80015c4:	801a      	strh	r2, [r3, #0]

	READ_BARO_COEFF(5, command, coefficients);
 80015c6:	23ac      	movs	r3, #172	; 0xac
 80015c8:	72fb      	strb	r3, [r7, #11]
 80015ca:	f107 020b 	add.w	r2, r7, #11
 80015ce:	231e      	movs	r3, #30
 80015d0:	9300      	str	r3, [sp, #0]
 80015d2:	2301      	movs	r3, #1
 80015d4:	21ee      	movs	r1, #238	; 0xee
 80015d6:	480e      	ldr	r0, [pc, #56]	; (8001610 <vInitBaroRead+0x1b8>)
 80015d8:	f001 f884 	bl	80026e4 <HAL_I2C_Master_Transmit>
 80015dc:	f107 0208 	add.w	r2, r7, #8
 80015e0:	231e      	movs	r3, #30
 80015e2:	9300      	str	r3, [sp, #0]
 80015e4:	2302      	movs	r3, #2
 80015e6:	21ee      	movs	r1, #238	; 0xee
 80015e8:	4809      	ldr	r0, [pc, #36]	; (8001610 <vInitBaroRead+0x1b8>)
 80015ea:	f001 f96f 	bl	80028cc <HAL_I2C_Master_Receive>
 80015ee:	7a3b      	ldrb	r3, [r7, #8]
 80015f0:	021b      	lsls	r3, r3, #8
 80015f2:	b21a      	sxth	r2, r3
 80015f4:	7a7b      	ldrb	r3, [r7, #9]
 80015f6:	b21b      	sxth	r3, r3
 80015f8:	4313      	orrs	r3, r2
 80015fa:	b21a      	sxth	r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	330a      	adds	r3, #10
 8001600:	b292      	uxth	r2, r2
 8001602:	801a      	strh	r2, [r3, #0]
}
 8001604:	bf00      	nop
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	10624dd3 	.word	0x10624dd3
 8001610:	20001e78 	.word	0x20001e78
 8001614:	00000000 	.word	0x00000000

08001618 <vReadBaro>:

void vReadBaro(int32_t *temperature, int32_t *pressure, uint16_t *coefficients) {
 8001618:	b590      	push	{r4, r7, lr}
 800161a:	b08d      	sub	sp, #52	; 0x34
 800161c:	af02      	add	r7, sp, #8
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
	uint8_t read_buffer[3];
	uint32_t wait_time_OSR;

	switch (BARO_OSR) {
	case 0:
		CALC_TEMP_PRESS(256, wait_time_OSR, command, pressure_raw,
 8001624:	f007 fb88 	bl	8008d38 <osKernelGetTickFreq>
 8001628:	4603      	mov	r3, r0
 800162a:	4618      	mov	r0, r3
 800162c:	f7fe ff12 	bl	8000454 <__aeabi_ui2d>
 8001630:	a341      	add	r3, pc, #260	; (adr r3, 8001738 <vReadBaro+0x120>)
 8001632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001636:	f7fe ff87 	bl	8000548 <__aeabi_dmul>
 800163a:	4603      	mov	r3, r0
 800163c:	460c      	mov	r4, r1
 800163e:	4618      	mov	r0, r3
 8001640:	4621      	mov	r1, r4
 8001642:	f04f 0200 	mov.w	r2, #0
 8001646:	4b3a      	ldr	r3, [pc, #232]	; (8001730 <vReadBaro+0x118>)
 8001648:	f7ff f8a8 	bl	800079c <__aeabi_ddiv>
 800164c:	4603      	mov	r3, r0
 800164e:	460c      	mov	r4, r1
 8001650:	4618      	mov	r0, r3
 8001652:	4621      	mov	r1, r4
 8001654:	f7ff fa3a 	bl	8000acc <__aeabi_d2uiz>
 8001658:	4603      	mov	r3, r0
 800165a:	627b      	str	r3, [r7, #36]	; 0x24
 800165c:	2340      	movs	r3, #64	; 0x40
 800165e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001662:	f107 0223 	add.w	r2, r7, #35	; 0x23
 8001666:	231e      	movs	r3, #30
 8001668:	9300      	str	r3, [sp, #0]
 800166a:	2301      	movs	r3, #1
 800166c:	21ee      	movs	r1, #238	; 0xee
 800166e:	4831      	ldr	r0, [pc, #196]	; (8001734 <vReadBaro+0x11c>)
 8001670:	f001 f838 	bl	80026e4 <HAL_I2C_Master_Transmit>
 8001674:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001676:	f007 fc13 	bl	8008ea0 <osDelay>
 800167a:	2300      	movs	r3, #0
 800167c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001680:	f107 0223 	add.w	r2, r7, #35	; 0x23
 8001684:	231e      	movs	r3, #30
 8001686:	9300      	str	r3, [sp, #0]
 8001688:	2301      	movs	r3, #1
 800168a:	21ee      	movs	r1, #238	; 0xee
 800168c:	4829      	ldr	r0, [pc, #164]	; (8001734 <vReadBaro+0x11c>)
 800168e:	f001 f829 	bl	80026e4 <HAL_I2C_Master_Transmit>
 8001692:	f107 0214 	add.w	r2, r7, #20
 8001696:	231e      	movs	r3, #30
 8001698:	9300      	str	r3, [sp, #0]
 800169a:	2303      	movs	r3, #3
 800169c:	21ee      	movs	r1, #238	; 0xee
 800169e:	4825      	ldr	r0, [pc, #148]	; (8001734 <vReadBaro+0x11c>)
 80016a0:	f001 f914 	bl	80028cc <HAL_I2C_Master_Receive>
 80016a4:	7d3b      	ldrb	r3, [r7, #20]
 80016a6:	041a      	lsls	r2, r3, #16
 80016a8:	7d7b      	ldrb	r3, [r7, #21]
 80016aa:	021b      	lsls	r3, r3, #8
 80016ac:	4313      	orrs	r3, r2
 80016ae:	7dba      	ldrb	r2, [r7, #22]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]
 80016b4:	2350      	movs	r3, #80	; 0x50
 80016b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80016ba:	f107 0223 	add.w	r2, r7, #35	; 0x23
 80016be:	231e      	movs	r3, #30
 80016c0:	9300      	str	r3, [sp, #0]
 80016c2:	2301      	movs	r3, #1
 80016c4:	21ee      	movs	r1, #238	; 0xee
 80016c6:	481b      	ldr	r0, [pc, #108]	; (8001734 <vReadBaro+0x11c>)
 80016c8:	f001 f80c 	bl	80026e4 <HAL_I2C_Master_Transmit>
 80016cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80016ce:	f007 fbe7 	bl	8008ea0 <osDelay>
 80016d2:	2300      	movs	r3, #0
 80016d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80016d8:	f107 0223 	add.w	r2, r7, #35	; 0x23
 80016dc:	231e      	movs	r3, #30
 80016de:	9300      	str	r3, [sp, #0]
 80016e0:	2301      	movs	r3, #1
 80016e2:	21ee      	movs	r1, #238	; 0xee
 80016e4:	4813      	ldr	r0, [pc, #76]	; (8001734 <vReadBaro+0x11c>)
 80016e6:	f000 fffd 	bl	80026e4 <HAL_I2C_Master_Transmit>
 80016ea:	f107 0214 	add.w	r2, r7, #20
 80016ee:	231e      	movs	r3, #30
 80016f0:	9300      	str	r3, [sp, #0]
 80016f2:	2303      	movs	r3, #3
 80016f4:	21ee      	movs	r1, #238	; 0xee
 80016f6:	480f      	ldr	r0, [pc, #60]	; (8001734 <vReadBaro+0x11c>)
 80016f8:	f001 f8e8 	bl	80028cc <HAL_I2C_Master_Receive>
 80016fc:	7d3b      	ldrb	r3, [r7, #20]
 80016fe:	041a      	lsls	r2, r3, #16
 8001700:	7d7b      	ldrb	r3, [r7, #21]
 8001702:	021b      	lsls	r3, r3, #8
 8001704:	4313      	orrs	r3, r2
 8001706:	7dba      	ldrb	r2, [r7, #22]
 8001708:	4313      	orrs	r3, r2
 800170a:	61fb      	str	r3, [r7, #28]
 800170c:	f107 0118 	add.w	r1, r7, #24
 8001710:	f107 021c 	add.w	r2, r7, #28
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	9300      	str	r3, [sp, #0]
 8001718:	460b      	mov	r3, r1
 800171a:	68b9      	ldr	r1, [r7, #8]
 800171c:	68f8      	ldr	r0, [r7, #12]
 800171e:	f000 f80f 	bl	8001740 <vCalculateTempPressure>
				temperature_raw, temperature, pressure, coefficients)
		;
		break;
 8001722:	bf00      	nop
		/* defaults to OSR 256 */
		CALC_TEMP_PRESS(256, wait_time_OSR, command, pressure_raw,
				temperature_raw, temperature, pressure, coefficients)
		;
	}
}
 8001724:	bf00      	nop
 8001726:	372c      	adds	r7, #44	; 0x2c
 8001728:	46bd      	mov	sp, r7
 800172a:	bd90      	pop	{r4, r7, pc}
 800172c:	f3af 8000 	nop.w
 8001730:	408f4000 	.word	0x408f4000
 8001734:	20001e78 	.word	0x20001e78
 8001738:	33333333 	.word	0x33333333
 800173c:	3fe33333 	.word	0x3fe33333

08001740 <vCalculateTempPressure>:

/* this is how we have to calculate temperature and Pressure which is written in the Datasheet */
void vCalculateTempPressure(int32_t *temperature, int32_t *pressure,
		uint32_t *temperature_raw, uint32_t *pressure_raw,
		uint16_t *coefficients) {
 8001740:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8001744:	b08b      	sub	sp, #44	; 0x2c
 8001746:	af00      	add	r7, sp, #0
 8001748:	60f8      	str	r0, [r7, #12]
 800174a:	60b9      	str	r1, [r7, #8]
 800174c:	607a      	str	r2, [r7, #4]
 800174e:	603b      	str	r3, [r7, #0]
	int32_t dT;
	int64_t OFF, SENS;

	dT = *temperature_raw - (coefficients[4] << 8);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001756:	3208      	adds	r2, #8
 8001758:	8812      	ldrh	r2, [r2, #0]
 800175a:	0212      	lsls	r2, r2, #8
 800175c:	1a9b      	subs	r3, r3, r2
 800175e:	627b      	str	r3, [r7, #36]	; 0x24
	/* Temperature in 2000  = 20.00° C */
	*temperature = (int32_t) 2000 + (dT * coefficients[5] >> 23);
 8001760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001762:	330a      	adds	r3, #10
 8001764:	881b      	ldrh	r3, [r3, #0]
 8001766:	461a      	mov	r2, r3
 8001768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176a:	fb03 f302 	mul.w	r3, r3, r2
 800176e:	15db      	asrs	r3, r3, #23
 8001770:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	601a      	str	r2, [r3, #0]

	OFF = (coefficients[1] << 17) + (coefficients[3] * dT >> 6);
 8001778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800177a:	3302      	adds	r3, #2
 800177c:	881b      	ldrh	r3, [r3, #0]
 800177e:	045a      	lsls	r2, r3, #17
 8001780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001782:	3306      	adds	r3, #6
 8001784:	881b      	ldrh	r3, [r3, #0]
 8001786:	4619      	mov	r1, r3
 8001788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178a:	fb03 f301 	mul.w	r3, r3, r1
 800178e:	119b      	asrs	r3, r3, #6
 8001790:	4413      	add	r3, r2
 8001792:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001796:	e9c7 3406 	strd	r3, r4, [r7, #24]
	SENS = (coefficients[0] << 16) + ((coefficients[2] + dT) >> 7);
 800179a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800179c:	881b      	ldrh	r3, [r3, #0]
 800179e:	041a      	lsls	r2, r3, #16
 80017a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017a2:	3304      	adds	r3, #4
 80017a4:	881b      	ldrh	r3, [r3, #0]
 80017a6:	4619      	mov	r1, r3
 80017a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017aa:	440b      	add	r3, r1
 80017ac:	11db      	asrs	r3, r3, #7
 80017ae:	4413      	add	r3, r2
 80017b0:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80017b4:	e9c7 3404 	strd	r3, r4, [r7, #16]
	/* Pressure in 110002 = 1100.02 mbar */
	*pressure = (int32_t) (((*pressure_raw * SENS >> 21) - OFF) >> 15);
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f04f 0400 	mov.w	r4, #0
 80017c0:	693a      	ldr	r2, [r7, #16]
 80017c2:	fb04 f102 	mul.w	r1, r4, r2
 80017c6:	697a      	ldr	r2, [r7, #20]
 80017c8:	fb03 f202 	mul.w	r2, r3, r2
 80017cc:	1888      	adds	r0, r1, r2
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	fba2 1203 	umull	r1, r2, r2, r3
 80017d4:	1883      	adds	r3, r0, r2
 80017d6:	461a      	mov	r2, r3
 80017d8:	f04f 0300 	mov.w	r3, #0
 80017dc:	f04f 0400 	mov.w	r4, #0
 80017e0:	0d4b      	lsrs	r3, r1, #21
 80017e2:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 80017e6:	1554      	asrs	r4, r2, #21
 80017e8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80017ec:	1a5b      	subs	r3, r3, r1
 80017ee:	eb64 0402 	sbc.w	r4, r4, r2
 80017f2:	469b      	mov	fp, r3
 80017f4:	46a4      	mov	ip, r4
 80017f6:	f04f 0300 	mov.w	r3, #0
 80017fa:	f04f 0400 	mov.w	r4, #0
 80017fe:	ea4f 33db 	mov.w	r3, fp, lsr #15
 8001802:	ea43 434c 	orr.w	r3, r3, ip, lsl #17
 8001806:	ea4f 34ec 	mov.w	r4, ip, asr #15
 800180a:	461a      	mov	r2, r3
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	601a      	str	r2, [r3, #0]
}
 8001810:	bf00      	nop
 8001812:	372c      	adds	r7, #44	; 0x2c
 8001814:	46bd      	mov	sp, r7
 8001816:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 800181a:	4770      	bx	lr

0800181c <vTaskImuRead>:
/**
 * @brief Function implementing the task_baro_read thread.
 * @param argument: Not used
 * @retval None
 */
void vTaskImuRead(void *argument) {
 800181c:	b580      	push	{r7, lr}
 800181e:	b092      	sub	sp, #72	; 0x48
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
	int32_t gyroscope_data[3]; /* 0 = x, 1 = y, 2 = z */
	int32_t acceleration[3]; /* 0 = x, 1 = y, 2 = z */

	/* initialise counter as we want to average over 4 samples every time */
	int8_t counter;
	counter = 0;
 8001824:	2300      	movs	r3, #0
 8001826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	/* Initialise queue message */
	imu_data queue_data = { 0 };
 800182a:	f107 0308 	add.w	r3, r7, #8
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	605a      	str	r2, [r3, #4]
 8001834:	609a      	str	r2, [r3, #8]
 8001836:	60da      	str	r2, [r3, #12]
 8001838:	611a      	str	r2, [r3, #16]
 800183a:	615a      	str	r2, [r3, #20]
 800183c:	619a      	str	r2, [r3, #24]

	/* The chip select line has to be held high for the slave that is not active! */
	HAL_GPIO_WritePin(GPIOA, GPIO_ICM_CS_Pin, 0);
 800183e:	2200      	movs	r2, #0
 8001840:	2110      	movs	r1, #16
 8001842:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001846:	f000 fea5 	bl	8002594 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_BMI_CS_Pin, 1);
 800184a:	2201      	movs	r2, #1
 800184c:	2120      	movs	r1, #32
 800184e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001852:	f000 fe9f 	bl	8002594 <HAL_GPIO_WritePin>

	vInitImu20600Read();
 8001856:	f000 f87d 	bl	8001954 <vInitImu20600Read>

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 800185a:	f007 fa45 	bl	8008ce8 <osKernelGetTickCount>
 800185e:	6478      	str	r0, [r7, #68]	; 0x44
	tick_update = osKernelGetTickFreq() / IMU20600_SAMPLING_FREQ;
 8001860:	f007 fa6a 	bl	8008d38 <osKernelGetTickFreq>
 8001864:	4602      	mov	r2, r0
 8001866:	4b39      	ldr	r3, [pc, #228]	; (800194c <vTaskImuRead+0x130>)
 8001868:	fba3 2302 	umull	r2, r3, r3, r2
 800186c:	0a1b      	lsrs	r3, r3, #8
 800186e:	63fb      	str	r3, [r7, #60]	; 0x3c
	for (;;) {
		tick_count += tick_update;
 8001870:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001874:	4413      	add	r3, r2
 8001876:	647b      	str	r3, [r7, #68]	; 0x44
		vReadImu20600(gyroscope_data, acceleration);
 8001878:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800187c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001880:	4611      	mov	r1, r2
 8001882:	4618      	mov	r0, r3
 8001884:	f000 f984 	bl	8001b90 <vReadImu20600>

		//TODO [nstojosk] : can this overflow?
		queue_data.gyro_data[0] += gyroscope_data[0];
 8001888:	68ba      	ldr	r2, [r7, #8]
 800188a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800188c:	4413      	add	r3, r2
 800188e:	60bb      	str	r3, [r7, #8]
		queue_data.gyro_data[1] += gyroscope_data[1];
 8001890:	68fa      	ldr	r2, [r7, #12]
 8001892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001894:	4413      	add	r3, r2
 8001896:	60fb      	str	r3, [r7, #12]
		queue_data.gyro_data[2] += gyroscope_data[2];
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800189c:	4413      	add	r3, r2
 800189e:	613b      	str	r3, [r7, #16]
		queue_data.acc_data[0] += acceleration[0];
 80018a0:	697a      	ldr	r2, [r7, #20]
 80018a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a4:	4413      	add	r3, r2
 80018a6:	617b      	str	r3, [r7, #20]
		queue_data.acc_data[1] += acceleration[1];
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018ac:	4413      	add	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]
		queue_data.acc_data[2] += acceleration[2];
 80018b0:	69fa      	ldr	r2, [r7, #28]
 80018b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018b4:	4413      	add	r3, r2
 80018b6:	61fb      	str	r3, [r7, #28]
		++counter;
 80018b8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80018bc:	3301      	adds	r3, #1
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		if (counter == 4) {
 80018c4:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 80018c8:	2b04      	cmp	r3, #4
 80018ca:	d13a      	bne.n	8001942 <vTaskImuRead+0x126>
			/* reset counter */
			counter = 0;
 80018cc:	2300      	movs	r3, #0
 80018ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

			/* Average Data */
			queue_data.gyro_data[0] /= 4;
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	da00      	bge.n	80018da <vTaskImuRead+0xbe>
 80018d8:	3303      	adds	r3, #3
 80018da:	109b      	asrs	r3, r3, #2
 80018dc:	60bb      	str	r3, [r7, #8]
			queue_data.gyro_data[1] /= 4;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	da00      	bge.n	80018e6 <vTaskImuRead+0xca>
 80018e4:	3303      	adds	r3, #3
 80018e6:	109b      	asrs	r3, r3, #2
 80018e8:	60fb      	str	r3, [r7, #12]
			queue_data.gyro_data[2] /= 4;
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	da00      	bge.n	80018f2 <vTaskImuRead+0xd6>
 80018f0:	3303      	adds	r3, #3
 80018f2:	109b      	asrs	r3, r3, #2
 80018f4:	613b      	str	r3, [r7, #16]
			queue_data.acc_data[0] /= 4;
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	da00      	bge.n	80018fe <vTaskImuRead+0xe2>
 80018fc:	3303      	adds	r3, #3
 80018fe:	109b      	asrs	r3, r3, #2
 8001900:	617b      	str	r3, [r7, #20]
			queue_data.acc_data[1] /= 4;
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	2b00      	cmp	r3, #0
 8001906:	da00      	bge.n	800190a <vTaskImuRead+0xee>
 8001908:	3303      	adds	r3, #3
 800190a:	109b      	asrs	r3, r3, #2
 800190c:	61bb      	str	r3, [r7, #24]
			queue_data.acc_data[2] /= 4;
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	2b00      	cmp	r3, #0
 8001912:	da00      	bge.n	8001916 <vTaskImuRead+0xfa>
 8001914:	3303      	adds	r3, #3
 8001916:	109b      	asrs	r3, r3, #2
 8001918:	61fb      	str	r3, [r7, #28]
			/* I dont know it this works with the overflow of the tick_count! */
			queue_data.timestamp = tick_count;
 800191a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800191c:	623b      	str	r3, [r7, #32]

			/* Send Data to Queue */
			osMessageQueuePut(preprocess_queue, &queue_data, 0U, 30U);
 800191e:	4b0c      	ldr	r3, [pc, #48]	; (8001950 <vTaskImuRead+0x134>)
 8001920:	6818      	ldr	r0, [r3, #0]
 8001922:	f107 0108 	add.w	r1, r7, #8
 8001926:	231e      	movs	r3, #30
 8001928:	2200      	movs	r2, #0
 800192a:	f007 fce9 	bl	8009300 <osMessageQueuePut>

			/* reset queue value */
			queue_data = EMPTY_IMU;
 800192e:	f107 0308 	add.w	r3, r7, #8
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	605a      	str	r2, [r3, #4]
 8001938:	609a      	str	r2, [r3, #8]
 800193a:	60da      	str	r2, [r3, #12]
 800193c:	611a      	str	r2, [r3, #16]
 800193e:	615a      	str	r2, [r3, #20]
 8001940:	619a      	str	r2, [r3, #24]
		}
		osDelayUntil(tick_count);
 8001942:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001944:	f007 fada 	bl	8008efc <osDelayUntil>
		tick_count += tick_update;
 8001948:	e792      	b.n	8001870 <vTaskImuRead+0x54>
 800194a:	bf00      	nop
 800194c:	10624dd3 	.word	0x10624dd3
 8001950:	20001d58 	.word	0x20001d58

08001954 <vInitImu20600Read>:
	}
}

void vInitImu20600Read() {
 8001954:	b590      	push	{r4, r7, lr}
 8001956:	b08b      	sub	sp, #44	; 0x2c
 8001958:	af00      	add	r7, sp, #0
	while (1) {
		HAL_StatusTypeDef Test = HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		/* Configure Gyroscope */
		/* we need to send two bytes: first bit: write 0 /read 1, 7 next bits register address, the next 8 bits are the message */
		uint8_t register_gyro_config = (0 << 15
				| IMU20600_COMMAND_GYROSCOPE_CONFIGURATION << 8
				| GYRO_SELFTEST << 5 | GYRO_RANGE << 3 | GYRO_FILTER);
 8001960:	2300      	movs	r3, #0
 8001962:	015b      	lsls	r3, r3, #5
 8001964:	b25a      	sxtb	r2, r3
 8001966:	2301      	movs	r3, #1
 8001968:	00db      	lsls	r3, r3, #3
 800196a:	b25b      	sxtb	r3, r3
 800196c:	4313      	orrs	r3, r2
 800196e:	b25a      	sxtb	r2, r3
 8001970:	2302      	movs	r3, #2
 8001972:	b25b      	sxtb	r3, r3
 8001974:	4313      	orrs	r3, r2
 8001976:	b25b      	sxtb	r3, r3
 8001978:	b2db      	uxtb	r3, r3
		uint8_t register_gyro_config = (0 << 15
 800197a:	77fb      	strb	r3, [r7, #31]
		while (Test != HAL_OK) {
 800197c:	e009      	b.n	8001992 <vInitImu20600Read+0x3e>
			Test = HAL_SPI_Transmit(&hspi1, &register_gyro_config,
 800197e:	f107 011f 	add.w	r1, r7, #31
 8001982:	231e      	movs	r3, #30
 8001984:	2202      	movs	r2, #2
 8001986:	487f      	ldr	r0, [pc, #508]	; (8001b84 <vInitImu20600Read+0x230>)
 8001988:	f003 fc98 	bl	80052bc <HAL_SPI_Transmit>
 800198c:	4603      	mov	r3, r0
 800198e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		while (Test != HAL_OK) {
 8001992:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001996:	2b00      	cmp	r3, #0
 8001998:	d1f1      	bne.n	800197e <vInitImu20600Read+0x2a>
			IMU20600_COMMAND_LENGTH, IMU20600_SPI_TIMEOUT);
		}
		Test = HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		/* Configure Accelerometer */
		uint8_t register_acc_config = (0 << 15
				| IMU20600_COMMAND_ACCELEROMETER_CONFIGURATION1 << 8
				| ACC_SELFTEST << 5 | ACC_RANGE << 3);
 80019a0:	2300      	movs	r3, #0
 80019a2:	015b      	lsls	r3, r3, #5
 80019a4:	b25a      	sxtb	r2, r3
 80019a6:	2303      	movs	r3, #3
 80019a8:	00db      	lsls	r3, r3, #3
 80019aa:	b25b      	sxtb	r3, r3
 80019ac:	4313      	orrs	r3, r2
 80019ae:	b25b      	sxtb	r3, r3
 80019b0:	b2db      	uxtb	r3, r3
		uint8_t register_acc_config = (0 << 15
 80019b2:	77bb      	strb	r3, [r7, #30]
		uint8_t register_acc_config2 = (0 << 15
				| IMU20600_COMMAND_ACCELEROMETER_CONFIGURATION2 << 8
				| ACC_FIFOSIZE << 6 | ACC_AVGFILTER << 4 | ACC_FILTER);
 80019b4:	2300      	movs	r3, #0
 80019b6:	019b      	lsls	r3, r3, #6
 80019b8:	b25a      	sxtb	r2, r3
 80019ba:	2300      	movs	r3, #0
 80019bc:	011b      	lsls	r3, r3, #4
 80019be:	b25b      	sxtb	r3, r3
 80019c0:	4313      	orrs	r3, r2
 80019c2:	b25a      	sxtb	r2, r3
 80019c4:	2302      	movs	r3, #2
 80019c6:	b25b      	sxtb	r3, r3
 80019c8:	4313      	orrs	r3, r2
 80019ca:	b25b      	sxtb	r3, r3
 80019cc:	b2db      	uxtb	r3, r3
		uint8_t register_acc_config2 = (0 << 15
 80019ce:	777b      	strb	r3, [r7, #29]
		while (Test != HAL_OK) {
 80019d0:	e006      	b.n	80019e0 <vInitImu20600Read+0x8c>
			HAL_SPI_Transmit(&hspi1, &register_acc_config,
 80019d2:	f107 011e 	add.w	r1, r7, #30
 80019d6:	231e      	movs	r3, #30
 80019d8:	2202      	movs	r2, #2
 80019da:	486a      	ldr	r0, [pc, #424]	; (8001b84 <vInitImu20600Read+0x230>)
 80019dc:	f003 fc6e 	bl	80052bc <HAL_SPI_Transmit>
		while (Test != HAL_OK) {
 80019e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d1f4      	bne.n	80019d2 <vInitImu20600Read+0x7e>
			IMU20600_COMMAND_LENGTH, IMU20600_SPI_TIMEOUT);
		}
		Test = HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		while (Test != HAL_OK) {
 80019ee:	e006      	b.n	80019fe <vInitImu20600Read+0xaa>
			HAL_SPI_Transmit(&hspi1, &register_acc_config2,
 80019f0:	f107 011d 	add.w	r1, r7, #29
 80019f4:	231e      	movs	r3, #30
 80019f6:	2202      	movs	r2, #2
 80019f8:	4862      	ldr	r0, [pc, #392]	; (8001b84 <vInitImu20600Read+0x230>)
 80019fa:	f003 fc5f 	bl	80052bc <HAL_SPI_Transmit>
		while (Test != HAL_OK) {
 80019fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1f4      	bne.n	80019f0 <vInitImu20600Read+0x9c>
			IMU20600_COMMAND_LENGTH, IMU20600_SPI_TIMEOUT);
		}
		Test = HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		/* FIFO disable */
		uint8_t register_FIFO = (0 << 15 | IMU20600_COMMAND_FIFO_ENABLE << 8
				| GYRO_FIFO_EN << 4 | ACC_FIFO_EN << 3);
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	011b      	lsls	r3, r3, #4
 8001a10:	b25a      	sxtb	r2, r3
 8001a12:	2300      	movs	r3, #0
 8001a14:	00db      	lsls	r3, r3, #3
 8001a16:	b25b      	sxtb	r3, r3
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	b25b      	sxtb	r3, r3
 8001a1c:	b2db      	uxtb	r3, r3
		uint8_t register_FIFO = (0 << 15 | IMU20600_COMMAND_FIFO_ENABLE << 8
 8001a1e:	773b      	strb	r3, [r7, #28]
		while (Test != HAL_OK) {
 8001a20:	e006      	b.n	8001a30 <vInitImu20600Read+0xdc>
			HAL_SPI_Transmit(&hspi1, &register_FIFO, IMU20600_COMMAND_LENGTH,
 8001a22:	f107 011c 	add.w	r1, r7, #28
 8001a26:	231e      	movs	r3, #30
 8001a28:	2202      	movs	r2, #2
 8001a2a:	4856      	ldr	r0, [pc, #344]	; (8001b84 <vInitImu20600Read+0x230>)
 8001a2c:	f003 fc46 	bl	80052bc <HAL_SPI_Transmit>
		while (Test != HAL_OK) {
 8001a30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d1f4      	bne.n	8001a22 <vInitImu20600Read+0xce>
			IMU20600_SPI_TIMEOUT);
		}
		Test = HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		/* sensor control - Heidi did this last year, don't really know why this is used */
		uint8_t register_sensor_control = (0 << 15
				| IMU20600_COMMAND_USER_CONTROL << 8 | SENS_FIFO_EN << 6
 8001a3e:	2300      	movs	r3, #0
 8001a40:	019b      	lsls	r3, r3, #6
				| SENS_FIFO_RST << 2);
 8001a42:	b25a      	sxtb	r2, r3
 8001a44:	2301      	movs	r3, #1
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	b25b      	sxtb	r3, r3
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	b25b      	sxtb	r3, r3
 8001a4e:	b2db      	uxtb	r3, r3
		uint8_t register_sensor_control = (0 << 15
 8001a50:	76fb      	strb	r3, [r7, #27]
		while (Test != HAL_OK) {
 8001a52:	e006      	b.n	8001a62 <vInitImu20600Read+0x10e>
			HAL_SPI_Transmit(&hspi1, &register_sensor_control,
 8001a54:	f107 011b 	add.w	r1, r7, #27
 8001a58:	231e      	movs	r3, #30
 8001a5a:	2202      	movs	r2, #2
 8001a5c:	4849      	ldr	r0, [pc, #292]	; (8001b84 <vInitImu20600Read+0x230>)
 8001a5e:	f003 fc2d 	bl	80052bc <HAL_SPI_Transmit>
		while (Test != HAL_OK) {
 8001a62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d1f4      	bne.n	8001a54 <vInitImu20600Read+0x100>
			IMU20600_COMMAND_LENGTH, IMU20600_SPI_TIMEOUT);
		}
		Test = HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		/* sensor management 1 */
		uint8_t register_sensor_powerMgmt1 = (0 << 15
				| IMU20600_COMMAND_POWER_MANAGMENT1 << 8 | SENS_sleep_EN << 6
 8001a70:	2300      	movs	r3, #0
 8001a72:	019b      	lsls	r3, r3, #6
				| SENS_clk_src << 0);
 8001a74:	b25a      	sxtb	r2, r3
 8001a76:	2301      	movs	r3, #1
 8001a78:	b25b      	sxtb	r3, r3
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	b25b      	sxtb	r3, r3
 8001a7e:	b2db      	uxtb	r3, r3
		uint8_t register_sensor_powerMgmt1 = (0 << 15
 8001a80:	76bb      	strb	r3, [r7, #26]
		while (Test != HAL_OK) {
 8001a82:	e006      	b.n	8001a92 <vInitImu20600Read+0x13e>
			HAL_SPI_Transmit(&hspi1, &register_sensor_powerMgmt1,
 8001a84:	f107 011a 	add.w	r1, r7, #26
 8001a88:	231e      	movs	r3, #30
 8001a8a:	2202      	movs	r2, #2
 8001a8c:	483d      	ldr	r0, [pc, #244]	; (8001b84 <vInitImu20600Read+0x230>)
 8001a8e:	f003 fc15 	bl	80052bc <HAL_SPI_Transmit>
		while (Test != HAL_OK) {
 8001a92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d1f4      	bne.n	8001a84 <vInitImu20600Read+0x130>
			IMU20600_COMMAND_LENGTH, IMU20600_SPI_TIMEOUT);
		}
		Test = HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		/* sensor management 2 */
		uint8_t register_sensor_powerMgmt2 = (0 << 15
				| IMU20600_COMMAND_POWER_MANAGMENT2 << 8 | SENS_acc_axis_EN << 3
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	00db      	lsls	r3, r3, #3
				| SENS_gyri_axis_EN << 0);
 8001aa4:	b25a      	sxtb	r2, r3
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	b25b      	sxtb	r3, r3
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	b25b      	sxtb	r3, r3
 8001aae:	b2db      	uxtb	r3, r3
		uint8_t register_sensor_powerMgmt2 = (0 << 15
 8001ab0:	767b      	strb	r3, [r7, #25]
		while (Test != HAL_OK) {
 8001ab2:	e006      	b.n	8001ac2 <vInitImu20600Read+0x16e>
			HAL_SPI_Transmit(&hspi1, &register_sensor_powerMgmt2,
 8001ab4:	f107 0119 	add.w	r1, r7, #25
 8001ab8:	231e      	movs	r3, #30
 8001aba:	2202      	movs	r2, #2
 8001abc:	4831      	ldr	r0, [pc, #196]	; (8001b84 <vInitImu20600Read+0x230>)
 8001abe:	f003 fbfd 	bl	80052bc <HAL_SPI_Transmit>
		while (Test != HAL_OK) {
 8001ac2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d1f4      	bne.n	8001ab4 <vInitImu20600Read+0x160>
			IMU20600_COMMAND_LENGTH, IMU20600_SPI_TIMEOUT);
		}
		Test = HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		/* Test if what we measure is possible */
		int32_t gyroscope_data[3]; /* 0 = x, 1 = y, 2 = z */
		int32_t acceleration[3]; /* 0 = x, 1 = y, 2 = z */
		vReadImu20600(gyroscope_data, acceleration);
 8001ad0:	463a      	mov	r2, r7
 8001ad2:	f107 030c 	add.w	r3, r7, #12
 8001ad6:	4611      	mov	r1, r2
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f000 f859 	bl	8001b90 <vReadImu20600>
		uint32_t abs_value = acceleration[0] * acceleration[0]
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	fb02 f203 	mul.w	r2, r2, r3
				+ acceleration[1] * acceleration[1]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6879      	ldr	r1, [r7, #4]
 8001aea:	fb01 f303 	mul.w	r3, r1, r3
 8001aee:	441a      	add	r2, r3
				+ acceleration[2] * acceleration[2];
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	68b9      	ldr	r1, [r7, #8]
 8001af4:	fb01 f303 	mul.w	r3, r1, r3
 8001af8:	4413      	add	r3, r2
		uint32_t abs_value = acceleration[0] * acceleration[0]
 8001afa:	623b      	str	r3, [r7, #32]
		if (!((abs_value > 0.25 && abs_value < 2.25)
 8001afc:	6a38      	ldr	r0, [r7, #32]
 8001afe:	f7fe fca9 	bl	8000454 <__aeabi_ui2d>
 8001b02:	2301      	movs	r3, #1
 8001b04:	461c      	mov	r4, r3
 8001b06:	f04f 0200 	mov.w	r2, #0
 8001b0a:	4b1f      	ldr	r3, [pc, #124]	; (8001b88 <vInitImu20600Read+0x234>)
 8001b0c:	f7fe ffac 	bl	8000a68 <__aeabi_dcmpgt>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d101      	bne.n	8001b1a <vInitImu20600Read+0x1c6>
 8001b16:	2300      	movs	r3, #0
 8001b18:	461c      	mov	r4, r3
 8001b1a:	b2e3      	uxtb	r3, r4
 8001b1c:	f083 0301 	eor.w	r3, r3, #1
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d12a      	bne.n	8001b7c <vInitImu20600Read+0x228>
 8001b26:	6a38      	ldr	r0, [r7, #32]
 8001b28:	f7fe fc94 	bl	8000454 <__aeabi_ui2d>
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	461c      	mov	r4, r3
 8001b30:	f04f 0200 	mov.w	r2, #0
 8001b34:	4b15      	ldr	r3, [pc, #84]	; (8001b8c <vInitImu20600Read+0x238>)
 8001b36:	f7fe ff79 	bl	8000a2c <__aeabi_dcmplt>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d101      	bne.n	8001b44 <vInitImu20600Read+0x1f0>
 8001b40:	2300      	movs	r3, #0
 8001b42:	461c      	mov	r4, r3
 8001b44:	b2e3      	uxtb	r3, r4
 8001b46:	f083 0301 	eor.w	r3, r3, #1
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d115      	bne.n	8001b7c <vInitImu20600Read+0x228>
				&& (gyroscope_data[0] > -50 && gyroscope_data[0] < 50
 8001b50:	68fb      	ldr	r3, [r7, #12]
		if (!((abs_value > 0.25 && abs_value < 2.25)
 8001b52:	f113 0f31 	cmn.w	r3, #49	; 0x31
 8001b56:	db11      	blt.n	8001b7c <vInitImu20600Read+0x228>
				&& (gyroscope_data[0] > -50 && gyroscope_data[0] < 50
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2b31      	cmp	r3, #49	; 0x31
 8001b5c:	dc0e      	bgt.n	8001b7c <vInitImu20600Read+0x228>
						&& gyroscope_data[1] > -50 && gyroscope_data[1] < 50
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	f113 0f31 	cmn.w	r3, #49	; 0x31
 8001b64:	db0a      	blt.n	8001b7c <vInitImu20600Read+0x228>
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	2b31      	cmp	r3, #49	; 0x31
 8001b6a:	dc07      	bgt.n	8001b7c <vInitImu20600Read+0x228>
						&& gyroscope_data[2] > -50 && gyroscope_data[2] < 50))) {
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	f113 0f31 	cmn.w	r3, #49	; 0x31
 8001b72:	db03      	blt.n	8001b7c <vInitImu20600Read+0x228>
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	2b31      	cmp	r3, #49	; 0x31
 8001b78:	dc00      	bgt.n	8001b7c <vInitImu20600Read+0x228>
	while (1) {
 8001b7a:	e6ee      	b.n	800195a <vInitImu20600Read+0x6>
			/* initialization unsuccessful */
			break;
		}
	}
}
 8001b7c:	bf00      	nop
 8001b7e:	372c      	adds	r7, #44	; 0x2c
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd90      	pop	{r4, r7, pc}
 8001b84:	200026d4 	.word	0x200026d4
 8001b88:	3fd00000 	.word	0x3fd00000
 8001b8c:	40020000 	.word	0x40020000

08001b90 <vReadImu20600>:

void vReadImu20600(int32_t *gyroscope_data, int32_t *acceleration) {
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
	/*Im not sure if this is the right way -> if the buffers are read in the right way
	 * or if the adress byte is overwritten by the data, have to check here*/

	uint8_t bufferAcc[7];

	bufferAcc[0] = 1 << 7 | IMU20600_COMMAND_ACC_READ;
 8001b9a:	23bb      	movs	r3, #187	; 0xbb
 8001b9c:	743b      	strb	r3, [r7, #16]

	HAL_SPI_Receive(&hspi1, bufferAcc, 7, IMU20600_SPI_TIMEOUT);
 8001b9e:	f107 0110 	add.w	r1, r7, #16
 8001ba2:	231e      	movs	r3, #30
 8001ba4:	2207      	movs	r2, #7
 8001ba6:	481e      	ldr	r0, [pc, #120]	; (8001c20 <vReadImu20600+0x90>)
 8001ba8:	f003 fcee 	bl	8005588 <HAL_SPI_Receive>

	acceleration[0] = bufferAcc[1] << 8 | bufferAcc[2];
 8001bac:	7c7b      	ldrb	r3, [r7, #17]
 8001bae:	021b      	lsls	r3, r3, #8
 8001bb0:	7cba      	ldrb	r2, [r7, #18]
 8001bb2:	431a      	orrs	r2, r3
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	601a      	str	r2, [r3, #0]
	acceleration[1] = bufferAcc[3] << 8 | bufferAcc[4];
 8001bb8:	7cfb      	ldrb	r3, [r7, #19]
 8001bba:	021a      	lsls	r2, r3, #8
 8001bbc:	7d3b      	ldrb	r3, [r7, #20]
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	3304      	adds	r3, #4
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	601a      	str	r2, [r3, #0]
	acceleration[2] = bufferAcc[5] << 8 | bufferAcc[6];
 8001bc8:	7d7b      	ldrb	r3, [r7, #21]
 8001bca:	021a      	lsls	r2, r3, #8
 8001bcc:	7dbb      	ldrb	r3, [r7, #22]
 8001bce:	4619      	mov	r1, r3
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	3308      	adds	r3, #8
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	601a      	str	r2, [r3, #0]

	/* Read Gyroscope Data */
	uint8_t bufferGyro[7];

	bufferGyro[0] = 1 << 7 | IMU20600_COMMAND_GYRO_READ;
 8001bd8:	23c3      	movs	r3, #195	; 0xc3
 8001bda:	723b      	strb	r3, [r7, #8]

	HAL_SPI_Receive(&hspi1, bufferGyro, 7, IMU20600_SPI_TIMEOUT);
 8001bdc:	f107 0108 	add.w	r1, r7, #8
 8001be0:	231e      	movs	r3, #30
 8001be2:	2207      	movs	r2, #7
 8001be4:	480e      	ldr	r0, [pc, #56]	; (8001c20 <vReadImu20600+0x90>)
 8001be6:	f003 fccf 	bl	8005588 <HAL_SPI_Receive>

	gyroscope_data[0] = bufferGyro[1] << 8 | bufferGyro[2];
 8001bea:	7a7b      	ldrb	r3, [r7, #9]
 8001bec:	021b      	lsls	r3, r3, #8
 8001bee:	7aba      	ldrb	r2, [r7, #10]
 8001bf0:	431a      	orrs	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	601a      	str	r2, [r3, #0]
	gyroscope_data[1] = bufferGyro[3] << 8 | bufferGyro[4];
 8001bf6:	7afb      	ldrb	r3, [r7, #11]
 8001bf8:	021a      	lsls	r2, r3, #8
 8001bfa:	7b3b      	ldrb	r3, [r7, #12]
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	3304      	adds	r3, #4
 8001c02:	430a      	orrs	r2, r1
 8001c04:	601a      	str	r2, [r3, #0]
	gyroscope_data[2] = bufferGyro[5] << 8 | bufferGyro[6];
 8001c06:	7b7b      	ldrb	r3, [r7, #13]
 8001c08:	021a      	lsls	r2, r3, #8
 8001c0a:	7bbb      	ldrb	r3, [r7, #14]
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	3308      	adds	r3, #8
 8001c12:	430a      	orrs	r2, r1
 8001c14:	601a      	str	r2, [r3, #0]

}
 8001c16:	bf00      	nop
 8001c18:	3718      	adds	r7, #24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	200026d4 	.word	0x200026d4
 8001c24:	00000000 	.word	0x00000000

08001c28 <vTaskPreprocess>:
 *      Author: Jonas
 */

#include "tasks/task_preprocess.h"

void vTaskPreprocess(void *argument) {
 8001c28:	b5b0      	push	{r4, r5, r7, lr}
 8001c2a:	b092      	sub	sp, #72	; 0x48
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
	/* registers for the Filter */
	int32_t registers[4] = { 0 };
 8001c30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
	imu_data queue_data;

	/* loop delay */
	/* For periodic update */
	uint32_t tick_count, tick_update;
	tick_count = osKernelGetTickCount();
 8001c3e:	f007 f853 	bl	8008ce8 <osKernelGetTickCount>
 8001c42:	6478      	str	r0, [r7, #68]	; 0x44
	tick_update = osKernelGetTickFreq() / 3000;
 8001c44:	f007 f878 	bl	8008d38 <osKernelGetTickFreq>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	4bad      	ldr	r3, [pc, #692]	; (8001f00 <vTaskPreprocess+0x2d8>)
 8001c4c:	fba3 2302 	umull	r2, r3, r3, r2
 8001c50:	099b      	lsrs	r3, r3, #6
 8001c52:	643b      	str	r3, [r7, #64]	; 0x40


	/* Infinite loop */
	for (;;) {
		tick_count += tick_update;
 8001c54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001c56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c58:	4413      	add	r3, r2
 8001c5a:	647b      	str	r3, [r7, #68]	; 0x44
		if (osMessageQueueGet(preprocess_queue, &queue_data, 0U, 30U) == osOK) {
 8001c5c:	4ba9      	ldr	r3, [pc, #676]	; (8001f04 <vTaskPreprocess+0x2dc>)
 8001c5e:	6818      	ldr	r0, [r3, #0]
 8001c60:	f107 010c 	add.w	r1, r7, #12
 8001c64:	231e      	movs	r3, #30
 8001c66:	2200      	movs	r2, #0
 8001c68:	f007 fbbe 	bl	80093e8 <osMessageQueueGet>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	f040 8124 	bne.w	8001ebc <vTaskPreprocess+0x294>
			raw_acc_z = queue_data.acc_data[2];
 8001c74:	6a3b      	ldr	r3, [r7, #32]
 8001c76:	63fb      	str	r3, [r7, #60]	; 0x3c
			filtered_acc_z = A0
					* (raw_acc_z + B1 * registers[0] + B2 * registers[1]
 8001c78:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001c7a:	f7fe fbfb 	bl	8000474 <__aeabi_i2d>
 8001c7e:	4604      	mov	r4, r0
 8001c80:	460d      	mov	r5, r1
 8001c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7fe fbf5 	bl	8000474 <__aeabi_i2d>
 8001c8a:	a38f      	add	r3, pc, #572	; (adr r3, 8001ec8 <vTaskPreprocess+0x2a0>)
 8001c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c90:	f7fe fc5a 	bl	8000548 <__aeabi_dmul>
 8001c94:	4602      	mov	r2, r0
 8001c96:	460b      	mov	r3, r1
 8001c98:	4620      	mov	r0, r4
 8001c9a:	4629      	mov	r1, r5
 8001c9c:	f7fe fa9e 	bl	80001dc <__adddf3>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	460c      	mov	r4, r1
 8001ca4:	4625      	mov	r5, r4
 8001ca6:	461c      	mov	r4, r3
 8001ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7fe fbe2 	bl	8000474 <__aeabi_i2d>
 8001cb0:	a387      	add	r3, pc, #540	; (adr r3, 8001ed0 <vTaskPreprocess+0x2a8>)
 8001cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb6:	f7fe fc47 	bl	8000548 <__aeabi_dmul>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	4620      	mov	r0, r4
 8001cc0:	4629      	mov	r1, r5
 8001cc2:	f7fe fa8b 	bl	80001dc <__adddf3>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	460c      	mov	r4, r1
 8001cca:	4625      	mov	r5, r4
 8001ccc:	461c      	mov	r4, r3
							+ B3 * registers[2] + B4 * registers[3]) +
 8001cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7fe fbcf 	bl	8000474 <__aeabi_i2d>
 8001cd6:	a380      	add	r3, pc, #512	; (adr r3, 8001ed8 <vTaskPreprocess+0x2b0>)
 8001cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cdc:	f7fe fc34 	bl	8000548 <__aeabi_dmul>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	4620      	mov	r0, r4
 8001ce6:	4629      	mov	r1, r5
 8001ce8:	f7fe fa78 	bl	80001dc <__adddf3>
 8001cec:	4603      	mov	r3, r0
 8001cee:	460c      	mov	r4, r1
 8001cf0:	4625      	mov	r5, r4
 8001cf2:	461c      	mov	r4, r3
 8001cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7fe fbbc 	bl	8000474 <__aeabi_i2d>
 8001cfc:	a378      	add	r3, pc, #480	; (adr r3, 8001ee0 <vTaskPreprocess+0x2b8>)
 8001cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d02:	f7fe fc21 	bl	8000548 <__aeabi_dmul>
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	4620      	mov	r0, r4
 8001d0c:	4629      	mov	r1, r5
 8001d0e:	f7fe fa65 	bl	80001dc <__adddf3>
 8001d12:	4603      	mov	r3, r0
 8001d14:	460c      	mov	r4, r1
 8001d16:	4618      	mov	r0, r3
 8001d18:	4621      	mov	r1, r4
					* (raw_acc_z + B1 * registers[0] + B2 * registers[1]
 8001d1a:	a373      	add	r3, pc, #460	; (adr r3, 8001ee8 <vTaskPreprocess+0x2c0>)
 8001d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d20:	f7fe fc12 	bl	8000548 <__aeabi_dmul>
 8001d24:	4603      	mov	r3, r0
 8001d26:	460c      	mov	r4, r1
 8001d28:	4625      	mov	r5, r4
 8001d2a:	461c      	mov	r4, r3
			A1 * registers[0] + A2 * registers[1] + A3 * registers[2]
 8001d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7fe fba0 	bl	8000474 <__aeabi_i2d>
 8001d34:	a36e      	add	r3, pc, #440	; (adr r3, 8001ef0 <vTaskPreprocess+0x2c8>)
 8001d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d3a:	f7fe fc05 	bl	8000548 <__aeabi_dmul>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	460b      	mov	r3, r1
							+ B3 * registers[2] + B4 * registers[3]) +
 8001d42:	4620      	mov	r0, r4
 8001d44:	4629      	mov	r1, r5
 8001d46:	f7fe fa49 	bl	80001dc <__adddf3>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	460c      	mov	r4, r1
 8001d4e:	4625      	mov	r5, r4
 8001d50:	461c      	mov	r4, r3
			A1 * registers[0] + A2 * registers[1] + A3 * registers[2]
 8001d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7fe fb8d 	bl	8000474 <__aeabi_i2d>
 8001d5a:	a367      	add	r3, pc, #412	; (adr r3, 8001ef8 <vTaskPreprocess+0x2d0>)
 8001d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d60:	f7fe fbf2 	bl	8000548 <__aeabi_dmul>
 8001d64:	4602      	mov	r2, r0
 8001d66:	460b      	mov	r3, r1
 8001d68:	4620      	mov	r0, r4
 8001d6a:	4629      	mov	r1, r5
 8001d6c:	f7fe fa36 	bl	80001dc <__adddf3>
 8001d70:	4603      	mov	r3, r0
 8001d72:	460c      	mov	r4, r1
 8001d74:	4625      	mov	r5, r4
 8001d76:	461c      	mov	r4, r3
 8001d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7fe fb7a 	bl	8000474 <__aeabi_i2d>
 8001d80:	a35b      	add	r3, pc, #364	; (adr r3, 8001ef0 <vTaskPreprocess+0x2c8>)
 8001d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d86:	f7fe fbdf 	bl	8000548 <__aeabi_dmul>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	4620      	mov	r0, r4
 8001d90:	4629      	mov	r1, r5
 8001d92:	f7fe fa23 	bl	80001dc <__adddf3>
 8001d96:	4603      	mov	r3, r0
 8001d98:	460c      	mov	r4, r1
 8001d9a:	4625      	mov	r5, r4
 8001d9c:	461c      	mov	r4, r3
					+ A4 * registers[3];
 8001d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7fe fb67 	bl	8000474 <__aeabi_i2d>
 8001da6:	a350      	add	r3, pc, #320	; (adr r3, 8001ee8 <vTaskPreprocess+0x2c0>)
 8001da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dac:	f7fe fbcc 	bl	8000548 <__aeabi_dmul>
 8001db0:	4602      	mov	r2, r0
 8001db2:	460b      	mov	r3, r1
 8001db4:	4620      	mov	r0, r4
 8001db6:	4629      	mov	r1, r5
 8001db8:	f7fe fa10 	bl	80001dc <__adddf3>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	460c      	mov	r4, r1
			filtered_acc_z = A0
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	4621      	mov	r1, r4
 8001dc4:	f7fe fe5a 	bl	8000a7c <__aeabi_d2iz>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	63bb      	str	r3, [r7, #56]	; 0x38
			registers[3] = registers[2];
 8001dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dce:	637b      	str	r3, [r7, #52]	; 0x34
			registers[2] = registers[1];
 8001dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dd2:	633b      	str	r3, [r7, #48]	; 0x30
			registers[1] = registers[0];
 8001dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
			registers[0] = raw_acc_z + B1 * registers[0] + B2 * registers[1]
 8001dd8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001dda:	f7fe fb4b 	bl	8000474 <__aeabi_i2d>
 8001dde:	4604      	mov	r4, r0
 8001de0:	460d      	mov	r5, r1
 8001de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7fe fb45 	bl	8000474 <__aeabi_i2d>
 8001dea:	a337      	add	r3, pc, #220	; (adr r3, 8001ec8 <vTaskPreprocess+0x2a0>)
 8001dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df0:	f7fe fbaa 	bl	8000548 <__aeabi_dmul>
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	4620      	mov	r0, r4
 8001dfa:	4629      	mov	r1, r5
 8001dfc:	f7fe f9ee 	bl	80001dc <__adddf3>
 8001e00:	4603      	mov	r3, r0
 8001e02:	460c      	mov	r4, r1
 8001e04:	4625      	mov	r5, r4
 8001e06:	461c      	mov	r4, r3
 8001e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7fe fb32 	bl	8000474 <__aeabi_i2d>
 8001e10:	a32f      	add	r3, pc, #188	; (adr r3, 8001ed0 <vTaskPreprocess+0x2a8>)
 8001e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e16:	f7fe fb97 	bl	8000548 <__aeabi_dmul>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	4620      	mov	r0, r4
 8001e20:	4629      	mov	r1, r5
 8001e22:	f7fe f9db 	bl	80001dc <__adddf3>
 8001e26:	4603      	mov	r3, r0
 8001e28:	460c      	mov	r4, r1
 8001e2a:	4625      	mov	r5, r4
 8001e2c:	461c      	mov	r4, r3
					+ B3 * registers[2] + B4 * registers[3];
 8001e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7fe fb1f 	bl	8000474 <__aeabi_i2d>
 8001e36:	a328      	add	r3, pc, #160	; (adr r3, 8001ed8 <vTaskPreprocess+0x2b0>)
 8001e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3c:	f7fe fb84 	bl	8000548 <__aeabi_dmul>
 8001e40:	4602      	mov	r2, r0
 8001e42:	460b      	mov	r3, r1
 8001e44:	4620      	mov	r0, r4
 8001e46:	4629      	mov	r1, r5
 8001e48:	f7fe f9c8 	bl	80001dc <__adddf3>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	460c      	mov	r4, r1
 8001e50:	4625      	mov	r5, r4
 8001e52:	461c      	mov	r4, r3
 8001e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7fe fb0c 	bl	8000474 <__aeabi_i2d>
 8001e5c:	a320      	add	r3, pc, #128	; (adr r3, 8001ee0 <vTaskPreprocess+0x2b8>)
 8001e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e62:	f7fe fb71 	bl	8000548 <__aeabi_dmul>
 8001e66:	4602      	mov	r2, r0
 8001e68:	460b      	mov	r3, r1
 8001e6a:	4620      	mov	r0, r4
 8001e6c:	4629      	mov	r1, r5
 8001e6e:	f7fe f9b5 	bl	80001dc <__adddf3>
 8001e72:	4603      	mov	r3, r0
 8001e74:	460c      	mov	r4, r1
			registers[0] = raw_acc_z + B1 * registers[0] + B2 * registers[1]
 8001e76:	4618      	mov	r0, r3
 8001e78:	4621      	mov	r1, r4
 8001e7a:	f7fe fdff 	bl	8000a7c <__aeabi_d2iz>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	62bb      	str	r3, [r7, #40]	; 0x28
			/* Write Result into Motherboard Variable if Mutex is available */
			if (osMutexAcquire(imu_mutex, IMU_MUTEX_TIMEOUT) == osOK) {
 8001e82:	4b21      	ldr	r3, [pc, #132]	; (8001f08 <vTaskPreprocess+0x2e0>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	211e      	movs	r1, #30
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f007 f905 	bl	8009098 <osMutexAcquire>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f47f aedf 	bne.w	8001c54 <vTaskPreprocess+0x2c>
				imu_data_to_mb = queue_data;
 8001e96:	4b1d      	ldr	r3, [pc, #116]	; (8001f0c <vTaskPreprocess+0x2e4>)
 8001e98:	461d      	mov	r5, r3
 8001e9a:	f107 040c 	add.w	r4, r7, #12
 8001e9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ea0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ea2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001ea6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
				imu_data_to_mb.acc_data[2] = filtered_acc_z; /* Insert filtered data */
 8001eaa:	4a18      	ldr	r2, [pc, #96]	; (8001f0c <vTaskPreprocess+0x2e4>)
 8001eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eae:	6153      	str	r3, [r2, #20]
				osMutexRelease(imu_mutex);
 8001eb0:	4b15      	ldr	r3, [pc, #84]	; (8001f08 <vTaskPreprocess+0x2e0>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f007 f94d 	bl	8009154 <osMutexRelease>
 8001eba:	e6cb      	b.n	8001c54 <vTaskPreprocess+0x2c>
			}
		} else {
			/* TODO: wait for half a sampling time or something like that */
			osDelayUntil(tick_count);
 8001ebc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001ebe:	f007 f81d 	bl	8008efc <osDelayUntil>
		tick_count += tick_update;
 8001ec2:	e6c7      	b.n	8001c54 <vTaskPreprocess+0x2c>
 8001ec4:	f3af 8000 	nop.w
 8001ec8:	1c708e5c 	.word	0x1c708e5c
 8001ecc:	bfdc71c7 	.word	0xbfdc71c7
 8001ed0:	bd4fbd69 	.word	0xbd4fbd69
 8001ed4:	bfb2f684 	.word	0xbfb2f684
 8001ed8:	80e71b2d 	.word	0x80e71b2d
 8001edc:	bf76796e 	.word	0xbf76796e
 8001ee0:	e17eb593 	.word	0xe17eb593
 8001ee4:	bf23fa32 	.word	0xbf23fa32
 8001ee8:	3a1a0235 	.word	0x3a1a0235
 8001eec:	3fee7bb0 	.word	0x3fee7bb0
 8001ef0:	3eeef58e 	.word	0x3eeef58e
 8001ef4:	400e7bb0 	.word	0x400e7bb0
 8001ef8:	2b9381a8 	.word	0x2b9381a8
 8001efc:	4016dcc4 	.word	0x4016dcc4
 8001f00:	057619f1 	.word	0x057619f1
 8001f04:	20001d58 	.word	0x20001d58
 8001f08:	200022c4 	.word	0x200022c4
 8001f0c:	2000273c 	.word	0x2000273c

08001f10 <vTaskSendToMb>:
/* include */
#include "tasks/task_send_to_mb.h"

void toArray(uint8_t* array, int number);

void vTaskSendToMb(void *argument) {
 8001f10:	b5b0      	push	{r4, r5, r7, lr}
 8001f12:	b092      	sub	sp, #72	; 0x48
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
	imu_data current_imu_data;
	baro_data current_baro_data;

	/* For periodic update */
	uint32_t tick_count, tick_update;
	tick_count = osKernelGetTickCount();
 8001f18:	f006 fee6 	bl	8008ce8 <osKernelGetTickCount>
 8001f1c:	6478      	str	r0, [r7, #68]	; 0x44
	tick_update = osKernelGetTickFreq() / MOTHERBOARD_SAMPLING_RATE;
 8001f1e:	f006 ff0b 	bl	8008d38 <osKernelGetTickFreq>
 8001f22:	4602      	mov	r2, r0
 8001f24:	4b22      	ldr	r3, [pc, #136]	; (8001fb0 <vTaskSendToMb+0xa0>)
 8001f26:	fba3 2302 	umull	r2, r3, r3, r2
 8001f2a:	099b      	lsrs	r3, r3, #6
 8001f2c:	643b      	str	r3, [r7, #64]	; 0x40

	for (;;) {
		tick_count += tick_update;
 8001f2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001f30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f32:	4413      	add	r3, r2
 8001f34:	647b      	str	r3, [r7, #68]	; 0x44
		if (osMutexAcquire(imu_mutex, IMU_MUTEX_TIMEOUT) == osOK) {
 8001f36:	4b1f      	ldr	r3, [pc, #124]	; (8001fb4 <vTaskSendToMb+0xa4>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	211e      	movs	r1, #30
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f007 f8ab 	bl	8009098 <osMutexAcquire>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d10e      	bne.n	8001f66 <vTaskSendToMb+0x56>
			current_imu_data = imu_data_to_mb;
 8001f48:	4b1b      	ldr	r3, [pc, #108]	; (8001fb8 <vTaskSendToMb+0xa8>)
 8001f4a:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8001f4e:	461d      	mov	r5, r3
 8001f50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f54:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001f58:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			osMutexRelease(imu_mutex);
 8001f5c:	4b15      	ldr	r3, [pc, #84]	; (8001fb4 <vTaskSendToMb+0xa4>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f007 f8f7 	bl	8009154 <osMutexRelease>
		}
		if (osMutexAcquire(baro_mutex, BARO_MUTEX_TIMEOUT) == osOK) {
 8001f66:	4b15      	ldr	r3, [pc, #84]	; (8001fbc <vTaskSendToMb+0xac>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	211e      	movs	r1, #30
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f007 f893 	bl	8009098 <osMutexAcquire>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d10a      	bne.n	8001f8e <vTaskSendToMb+0x7e>
			current_baro_data = baro_data_to_mb;
 8001f78:	4a11      	ldr	r2, [pc, #68]	; (8001fc0 <vTaskSendToMb+0xb0>)
 8001f7a:	f107 0318 	add.w	r3, r7, #24
 8001f7e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f80:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			osMutexRelease(baro_mutex);
 8001f84:	4b0d      	ldr	r3, [pc, #52]	; (8001fbc <vTaskSendToMb+0xac>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f007 f8e3 	bl	8009154 <osMutexRelease>
		 * - Need to go over some USB interface -  maybe UART is not the way to go
		 * - The _write function in main.c is not visible here (should be tough...)
		 * - UART is not Initialised correctly.
		 */
		uint8_t buffer [10];
		toArray(buffer, current_baro_data.pressure);
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	f107 030c 	add.w	r3, r7, #12
 8001f94:	4611      	mov	r1, r2
 8001f96:	4618      	mov	r0, r3
 8001f98:	f000 f814 	bl	8001fc4 <toArray>
		CDC_Transmit_FS(buffer, sizeof(buffer));
 8001f9c:	f107 030c 	add.w	r3, r7, #12
 8001fa0:	210a      	movs	r1, #10
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f00a fb48 	bl	800c638 <CDC_Transmit_FS>

		osDelayUntil(tick_count);
 8001fa8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001faa:	f006 ffa7 	bl	8008efc <osDelayUntil>
	for (;;) {
 8001fae:	e7be      	b.n	8001f2e <vTaskSendToMb+0x1e>
 8001fb0:	10624dd3 	.word	0x10624dd3
 8001fb4:	200022c4 	.word	0x200022c4
 8001fb8:	2000273c 	.word	0x2000273c
 8001fbc:	20002758 	.word	0x20002758
 8001fc0:	20001cec 	.word	0x20001cec

08001fc4 <toArray>:
	}

}

void toArray(uint8_t* array, int number)
    {
 8001fc4:	b480      	push	{r7}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
		int i = 0;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60fb      	str	r3, [r7, #12]
        while (number > 0){
 8001fd2:	e018      	b.n	8002006 <toArray+0x42>
        	array[i] = number%10;
 8001fd4:	683a      	ldr	r2, [r7, #0]
 8001fd6:	4b10      	ldr	r3, [pc, #64]	; (8002018 <toArray+0x54>)
 8001fd8:	fb83 1302 	smull	r1, r3, r3, r2
 8001fdc:	1099      	asrs	r1, r3, #2
 8001fde:	17d3      	asrs	r3, r2, #31
 8001fe0:	1ac9      	subs	r1, r1, r3
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	440b      	add	r3, r1
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	1ad1      	subs	r1, r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	b2ca      	uxtb	r2, r1
 8001ff4:	701a      	strb	r2, [r3, #0]
        	number/=10;
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	4a07      	ldr	r2, [pc, #28]	; (8002018 <toArray+0x54>)
 8001ffa:	fb82 1203 	smull	r1, r2, r2, r3
 8001ffe:	1092      	asrs	r2, r2, #2
 8002000:	17db      	asrs	r3, r3, #31
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	603b      	str	r3, [r7, #0]
        while (number > 0){
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	dce3      	bgt.n	8001fd4 <toArray+0x10>
        }
    }
 800200c:	bf00      	nop
 800200e:	3714      	adds	r7, #20
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr
 8002018:	66666667 	.word	0x66666667

0800201c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800201c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002054 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002020:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002022:	e003      	b.n	800202c <LoopCopyDataInit>

08002024 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002024:	4b0c      	ldr	r3, [pc, #48]	; (8002058 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002026:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002028:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800202a:	3104      	adds	r1, #4

0800202c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800202c:	480b      	ldr	r0, [pc, #44]	; (800205c <LoopForever+0xa>)
	ldr	r3, =_edata
 800202e:	4b0c      	ldr	r3, [pc, #48]	; (8002060 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002030:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002032:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002034:	d3f6      	bcc.n	8002024 <CopyDataInit>
	ldr	r2, =_sbss
 8002036:	4a0b      	ldr	r2, [pc, #44]	; (8002064 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002038:	e002      	b.n	8002040 <LoopFillZerobss>

0800203a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800203a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800203c:	f842 3b04 	str.w	r3, [r2], #4

08002040 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002040:	4b09      	ldr	r3, [pc, #36]	; (8002068 <LoopForever+0x16>)
	cmp	r2, r3
 8002042:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002044:	d3f9      	bcc.n	800203a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002046:	f7ff f981 	bl	800134c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800204a:	f00a ffb1 	bl	800cfb0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800204e:	f7fe fd5d 	bl	8000b0c <main>

08002052 <LoopForever>:

LoopForever:
    b LoopForever
 8002052:	e7fe      	b.n	8002052 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002054:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8002058:	0800d16c 	.word	0x0800d16c
	ldr	r0, =_sdata
 800205c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002060:	20000190 	.word	0x20000190
	ldr	r2, =_sbss
 8002064:	20000190 	.word	0x20000190
	ldr	r3, = _ebss
 8002068:	200036c0 	.word	0x200036c0

0800206c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800206c:	e7fe      	b.n	800206c <ADC1_IRQHandler>

0800206e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b082      	sub	sp, #8
 8002072:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002074:	2300      	movs	r3, #0
 8002076:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002078:	2003      	movs	r0, #3
 800207a:	f000 f8dc 	bl	8002236 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800207e:	2000      	movs	r0, #0
 8002080:	f7ff f8e0 	bl	8001244 <HAL_InitTick>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d002      	beq.n	8002090 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	71fb      	strb	r3, [r7, #7]
 800208e:	e001      	b.n	8002094 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002090:	f7fe fff6 	bl	8001080 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002094:	79fb      	ldrb	r3, [r7, #7]
}
 8002096:	4618      	mov	r0, r3
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
	...

080020a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020a4:	4b05      	ldr	r3, [pc, #20]	; (80020bc <HAL_IncTick+0x1c>)
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	4b05      	ldr	r3, [pc, #20]	; (80020c0 <HAL_IncTick+0x20>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4413      	add	r3, r2
 80020ae:	4a03      	ldr	r2, [pc, #12]	; (80020bc <HAL_IncTick+0x1c>)
 80020b0:	6013      	str	r3, [r2, #0]
}
 80020b2:	bf00      	nop
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr
 80020bc:	2000279c 	.word	0x2000279c
 80020c0:	20000008 	.word	0x20000008

080020c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  return uwTick;
 80020c8:	4b03      	ldr	r3, [pc, #12]	; (80020d8 <HAL_GetTick+0x14>)
 80020ca:	681b      	ldr	r3, [r3, #0]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	2000279c 	.word	0x2000279c

080020dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f003 0307 	and.w	r3, r3, #7
 80020ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020ec:	4b0c      	ldr	r3, [pc, #48]	; (8002120 <__NVIC_SetPriorityGrouping+0x44>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020f2:	68ba      	ldr	r2, [r7, #8]
 80020f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020f8:	4013      	ands	r3, r2
 80020fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002104:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002108:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800210c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800210e:	4a04      	ldr	r2, [pc, #16]	; (8002120 <__NVIC_SetPriorityGrouping+0x44>)
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	60d3      	str	r3, [r2, #12]
}
 8002114:	bf00      	nop
 8002116:	3714      	adds	r7, #20
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	e000ed00 	.word	0xe000ed00

08002124 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002128:	4b04      	ldr	r3, [pc, #16]	; (800213c <__NVIC_GetPriorityGrouping+0x18>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	0a1b      	lsrs	r3, r3, #8
 800212e:	f003 0307 	and.w	r3, r3, #7
}
 8002132:	4618      	mov	r0, r3
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr
 800213c:	e000ed00 	.word	0xe000ed00

08002140 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	4603      	mov	r3, r0
 8002148:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800214a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214e:	2b00      	cmp	r3, #0
 8002150:	db0b      	blt.n	800216a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002152:	79fb      	ldrb	r3, [r7, #7]
 8002154:	f003 021f 	and.w	r2, r3, #31
 8002158:	4907      	ldr	r1, [pc, #28]	; (8002178 <__NVIC_EnableIRQ+0x38>)
 800215a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215e:	095b      	lsrs	r3, r3, #5
 8002160:	2001      	movs	r0, #1
 8002162:	fa00 f202 	lsl.w	r2, r0, r2
 8002166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800216a:	bf00      	nop
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	e000e100 	.word	0xe000e100

0800217c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	4603      	mov	r3, r0
 8002184:	6039      	str	r1, [r7, #0]
 8002186:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218c:	2b00      	cmp	r3, #0
 800218e:	db0a      	blt.n	80021a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	b2da      	uxtb	r2, r3
 8002194:	490c      	ldr	r1, [pc, #48]	; (80021c8 <__NVIC_SetPriority+0x4c>)
 8002196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219a:	0112      	lsls	r2, r2, #4
 800219c:	b2d2      	uxtb	r2, r2
 800219e:	440b      	add	r3, r1
 80021a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021a4:	e00a      	b.n	80021bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	4908      	ldr	r1, [pc, #32]	; (80021cc <__NVIC_SetPriority+0x50>)
 80021ac:	79fb      	ldrb	r3, [r7, #7]
 80021ae:	f003 030f 	and.w	r3, r3, #15
 80021b2:	3b04      	subs	r3, #4
 80021b4:	0112      	lsls	r2, r2, #4
 80021b6:	b2d2      	uxtb	r2, r2
 80021b8:	440b      	add	r3, r1
 80021ba:	761a      	strb	r2, [r3, #24]
}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	e000e100 	.word	0xe000e100
 80021cc:	e000ed00 	.word	0xe000ed00

080021d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b089      	sub	sp, #36	; 0x24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f003 0307 	and.w	r3, r3, #7
 80021e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	f1c3 0307 	rsb	r3, r3, #7
 80021ea:	2b04      	cmp	r3, #4
 80021ec:	bf28      	it	cs
 80021ee:	2304      	movcs	r3, #4
 80021f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	3304      	adds	r3, #4
 80021f6:	2b06      	cmp	r3, #6
 80021f8:	d902      	bls.n	8002200 <NVIC_EncodePriority+0x30>
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	3b03      	subs	r3, #3
 80021fe:	e000      	b.n	8002202 <NVIC_EncodePriority+0x32>
 8002200:	2300      	movs	r3, #0
 8002202:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002204:	f04f 32ff 	mov.w	r2, #4294967295
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	43da      	mvns	r2, r3
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	401a      	ands	r2, r3
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002218:	f04f 31ff 	mov.w	r1, #4294967295
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	fa01 f303 	lsl.w	r3, r1, r3
 8002222:	43d9      	mvns	r1, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002228:	4313      	orrs	r3, r2
         );
}
 800222a:	4618      	mov	r0, r3
 800222c:	3724      	adds	r7, #36	; 0x24
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr

08002236 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b082      	sub	sp, #8
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f7ff ff4c 	bl	80020dc <__NVIC_SetPriorityGrouping>
}
 8002244:	bf00      	nop
 8002246:	3708      	adds	r7, #8
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af00      	add	r7, sp, #0
 8002252:	4603      	mov	r3, r0
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]
 8002258:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800225a:	2300      	movs	r3, #0
 800225c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800225e:	f7ff ff61 	bl	8002124 <__NVIC_GetPriorityGrouping>
 8002262:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	68b9      	ldr	r1, [r7, #8]
 8002268:	6978      	ldr	r0, [r7, #20]
 800226a:	f7ff ffb1 	bl	80021d0 <NVIC_EncodePriority>
 800226e:	4602      	mov	r2, r0
 8002270:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002274:	4611      	mov	r1, r2
 8002276:	4618      	mov	r0, r3
 8002278:	f7ff ff80 	bl	800217c <__NVIC_SetPriority>
}
 800227c:	bf00      	nop
 800227e:	3718      	adds	r7, #24
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	4603      	mov	r3, r0
 800228c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800228e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff ff54 	bl	8002140 <__NVIC_EnableIRQ>
}
 8002298:	bf00      	nop
 800229a:	3708      	adds	r7, #8
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b087      	sub	sp, #28
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022aa:	2300      	movs	r3, #0
 80022ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022ae:	e154      	b.n	800255a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	2101      	movs	r1, #1
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	fa01 f303 	lsl.w	r3, r1, r3
 80022bc:	4013      	ands	r3, r2
 80022be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f000 8146 	beq.w	8002554 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d003      	beq.n	80022d8 <HAL_GPIO_Init+0x38>
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	2b12      	cmp	r3, #18
 80022d6:	d123      	bne.n	8002320 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	08da      	lsrs	r2, r3, #3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	3208      	adds	r2, #8
 80022e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	f003 0307 	and.w	r3, r3, #7
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	220f      	movs	r2, #15
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	43db      	mvns	r3, r3
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	4013      	ands	r3, r2
 80022fa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	691a      	ldr	r2, [r3, #16]
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	693a      	ldr	r2, [r7, #16]
 800230e:	4313      	orrs	r3, r2
 8002310:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	08da      	lsrs	r2, r3, #3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	3208      	adds	r2, #8
 800231a:	6939      	ldr	r1, [r7, #16]
 800231c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	2203      	movs	r2, #3
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	43db      	mvns	r3, r3
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	4013      	ands	r3, r2
 8002336:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f003 0203 	and.w	r2, r3, #3
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	4313      	orrs	r3, r2
 800234c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d00b      	beq.n	8002374 <HAL_GPIO_Init+0xd4>
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	2b02      	cmp	r3, #2
 8002362:	d007      	beq.n	8002374 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002368:	2b11      	cmp	r3, #17
 800236a:	d003      	beq.n	8002374 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	2b12      	cmp	r3, #18
 8002372:	d130      	bne.n	80023d6 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	2203      	movs	r2, #3
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	43db      	mvns	r3, r3
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	4013      	ands	r3, r2
 800238a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	68da      	ldr	r2, [r3, #12]
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	693a      	ldr	r2, [r7, #16]
 800239a:	4313      	orrs	r3, r2
 800239c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	693a      	ldr	r2, [r7, #16]
 80023a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023aa:	2201      	movs	r2, #1
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	43db      	mvns	r3, r3
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	4013      	ands	r3, r2
 80023b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	091b      	lsrs	r3, r3, #4
 80023c0:	f003 0201 	and.w	r2, r3, #1
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	2203      	movs	r2, #3
 80023e2:	fa02 f303 	lsl.w	r3, r2, r3
 80023e6:	43db      	mvns	r3, r3
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	4013      	ands	r3, r2
 80023ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	689a      	ldr	r2, [r3, #8]
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	fa02 f303 	lsl.w	r3, r2, r3
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800240e:	2b00      	cmp	r3, #0
 8002410:	f000 80a0 	beq.w	8002554 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002414:	4b58      	ldr	r3, [pc, #352]	; (8002578 <HAL_GPIO_Init+0x2d8>)
 8002416:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002418:	4a57      	ldr	r2, [pc, #348]	; (8002578 <HAL_GPIO_Init+0x2d8>)
 800241a:	f043 0301 	orr.w	r3, r3, #1
 800241e:	6613      	str	r3, [r2, #96]	; 0x60
 8002420:	4b55      	ldr	r3, [pc, #340]	; (8002578 <HAL_GPIO_Init+0x2d8>)
 8002422:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002424:	f003 0301 	and.w	r3, r3, #1
 8002428:	60bb      	str	r3, [r7, #8]
 800242a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800242c:	4a53      	ldr	r2, [pc, #332]	; (800257c <HAL_GPIO_Init+0x2dc>)
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	089b      	lsrs	r3, r3, #2
 8002432:	3302      	adds	r3, #2
 8002434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002438:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	f003 0303 	and.w	r3, r3, #3
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	220f      	movs	r2, #15
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	43db      	mvns	r3, r3
 800244a:	693a      	ldr	r2, [r7, #16]
 800244c:	4013      	ands	r3, r2
 800244e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002456:	d019      	beq.n	800248c <HAL_GPIO_Init+0x1ec>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4a49      	ldr	r2, [pc, #292]	; (8002580 <HAL_GPIO_Init+0x2e0>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d013      	beq.n	8002488 <HAL_GPIO_Init+0x1e8>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a48      	ldr	r2, [pc, #288]	; (8002584 <HAL_GPIO_Init+0x2e4>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d00d      	beq.n	8002484 <HAL_GPIO_Init+0x1e4>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a47      	ldr	r2, [pc, #284]	; (8002588 <HAL_GPIO_Init+0x2e8>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d007      	beq.n	8002480 <HAL_GPIO_Init+0x1e0>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a46      	ldr	r2, [pc, #280]	; (800258c <HAL_GPIO_Init+0x2ec>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d101      	bne.n	800247c <HAL_GPIO_Init+0x1dc>
 8002478:	2304      	movs	r3, #4
 800247a:	e008      	b.n	800248e <HAL_GPIO_Init+0x1ee>
 800247c:	2307      	movs	r3, #7
 800247e:	e006      	b.n	800248e <HAL_GPIO_Init+0x1ee>
 8002480:	2303      	movs	r3, #3
 8002482:	e004      	b.n	800248e <HAL_GPIO_Init+0x1ee>
 8002484:	2302      	movs	r3, #2
 8002486:	e002      	b.n	800248e <HAL_GPIO_Init+0x1ee>
 8002488:	2301      	movs	r3, #1
 800248a:	e000      	b.n	800248e <HAL_GPIO_Init+0x1ee>
 800248c:	2300      	movs	r3, #0
 800248e:	697a      	ldr	r2, [r7, #20]
 8002490:	f002 0203 	and.w	r2, r2, #3
 8002494:	0092      	lsls	r2, r2, #2
 8002496:	4093      	lsls	r3, r2
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	4313      	orrs	r3, r2
 800249c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800249e:	4937      	ldr	r1, [pc, #220]	; (800257c <HAL_GPIO_Init+0x2dc>)
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	089b      	lsrs	r3, r3, #2
 80024a4:	3302      	adds	r3, #2
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80024ac:	4b38      	ldr	r3, [pc, #224]	; (8002590 <HAL_GPIO_Init+0x2f0>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	43db      	mvns	r3, r3
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	4013      	ands	r3, r2
 80024ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d003      	beq.n	80024d0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80024d0:	4a2f      	ldr	r2, [pc, #188]	; (8002590 <HAL_GPIO_Init+0x2f0>)
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80024d6:	4b2e      	ldr	r3, [pc, #184]	; (8002590 <HAL_GPIO_Init+0x2f0>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	43db      	mvns	r3, r3
 80024e0:	693a      	ldr	r2, [r7, #16]
 80024e2:	4013      	ands	r3, r2
 80024e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d003      	beq.n	80024fa <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024fa:	4a25      	ldr	r2, [pc, #148]	; (8002590 <HAL_GPIO_Init+0x2f0>)
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002500:	4b23      	ldr	r3, [pc, #140]	; (8002590 <HAL_GPIO_Init+0x2f0>)
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	43db      	mvns	r3, r3
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	4013      	ands	r3, r2
 800250e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d003      	beq.n	8002524 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800251c:	693a      	ldr	r2, [r7, #16]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	4313      	orrs	r3, r2
 8002522:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002524:	4a1a      	ldr	r2, [pc, #104]	; (8002590 <HAL_GPIO_Init+0x2f0>)
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800252a:	4b19      	ldr	r3, [pc, #100]	; (8002590 <HAL_GPIO_Init+0x2f0>)
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	43db      	mvns	r3, r3
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	4013      	ands	r3, r2
 8002538:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d003      	beq.n	800254e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	4313      	orrs	r3, r2
 800254c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800254e:	4a10      	ldr	r2, [pc, #64]	; (8002590 <HAL_GPIO_Init+0x2f0>)
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	3301      	adds	r3, #1
 8002558:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	fa22 f303 	lsr.w	r3, r2, r3
 8002564:	2b00      	cmp	r3, #0
 8002566:	f47f aea3 	bne.w	80022b0 <HAL_GPIO_Init+0x10>
  }
}
 800256a:	bf00      	nop
 800256c:	371c      	adds	r7, #28
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	40021000 	.word	0x40021000
 800257c:	40010000 	.word	0x40010000
 8002580:	48000400 	.word	0x48000400
 8002584:	48000800 	.word	0x48000800
 8002588:	48000c00 	.word	0x48000c00
 800258c:	48001000 	.word	0x48001000
 8002590:	40010400 	.word	0x40010400

08002594 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	460b      	mov	r3, r1
 800259e:	807b      	strh	r3, [r7, #2]
 80025a0:	4613      	mov	r3, r2
 80025a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025a4:	787b      	ldrb	r3, [r7, #1]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d003      	beq.n	80025b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025aa:	887a      	ldrh	r2, [r7, #2]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025b0:	e002      	b.n	80025b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025b2:	887a      	ldrh	r2, [r7, #2]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80025b8:	bf00      	nop
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d101      	bne.n	80025d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e081      	b.n	80026da <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d106      	bne.n	80025f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f7fe fd70 	bl	80010d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2224      	movs	r2, #36	; 0x24
 80025f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f022 0201 	bic.w	r2, r2, #1
 8002606:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685a      	ldr	r2, [r3, #4]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002614:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689a      	ldr	r2, [r3, #8]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002624:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d107      	bne.n	800263e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	689a      	ldr	r2, [r3, #8]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800263a:	609a      	str	r2, [r3, #8]
 800263c:	e006      	b.n	800264c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	689a      	ldr	r2, [r3, #8]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800264a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	2b02      	cmp	r3, #2
 8002652:	d104      	bne.n	800265e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800265c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	6812      	ldr	r2, [r2, #0]
 8002668:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800266c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002670:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68da      	ldr	r2, [r3, #12]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002680:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	691a      	ldr	r2, [r3, #16]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	ea42 0103 	orr.w	r1, r2, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	021a      	lsls	r2, r3, #8
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	430a      	orrs	r2, r1
 800269a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	69d9      	ldr	r1, [r3, #28]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a1a      	ldr	r2, [r3, #32]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	430a      	orrs	r2, r1
 80026aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f042 0201 	orr.w	r2, r2, #1
 80026ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2220      	movs	r2, #32
 80026c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
	...

080026e4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b088      	sub	sp, #32
 80026e8:	af02      	add	r7, sp, #8
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	607a      	str	r2, [r7, #4]
 80026ee:	461a      	mov	r2, r3
 80026f0:	460b      	mov	r3, r1
 80026f2:	817b      	strh	r3, [r7, #10]
 80026f4:	4613      	mov	r3, r2
 80026f6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	2b20      	cmp	r3, #32
 8002702:	f040 80da 	bne.w	80028ba <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800270c:	2b01      	cmp	r3, #1
 800270e:	d101      	bne.n	8002714 <HAL_I2C_Master_Transmit+0x30>
 8002710:	2302      	movs	r3, #2
 8002712:	e0d3      	b.n	80028bc <HAL_I2C_Master_Transmit+0x1d8>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800271c:	f7ff fcd2 	bl	80020c4 <HAL_GetTick>
 8002720:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	9300      	str	r3, [sp, #0]
 8002726:	2319      	movs	r3, #25
 8002728:	2201      	movs	r2, #1
 800272a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800272e:	68f8      	ldr	r0, [r7, #12]
 8002730:	f000 f9e6 	bl	8002b00 <I2C_WaitOnFlagUntilTimeout>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e0be      	b.n	80028bc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2221      	movs	r2, #33	; 0x21
 8002742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2210      	movs	r2, #16
 800274a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2200      	movs	r2, #0
 8002752:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	893a      	ldrh	r2, [r7, #8]
 800275e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2200      	movs	r2, #0
 8002764:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800276a:	b29b      	uxth	r3, r3
 800276c:	2bff      	cmp	r3, #255	; 0xff
 800276e:	d90e      	bls.n	800278e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	22ff      	movs	r2, #255	; 0xff
 8002774:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800277a:	b2da      	uxtb	r2, r3
 800277c:	8979      	ldrh	r1, [r7, #10]
 800277e:	4b51      	ldr	r3, [pc, #324]	; (80028c4 <HAL_I2C_Master_Transmit+0x1e0>)
 8002780:	9300      	str	r3, [sp, #0]
 8002782:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002786:	68f8      	ldr	r0, [r7, #12]
 8002788:	f000 fb48 	bl	8002e1c <I2C_TransferConfig>
 800278c:	e06c      	b.n	8002868 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002792:	b29a      	uxth	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800279c:	b2da      	uxtb	r2, r3
 800279e:	8979      	ldrh	r1, [r7, #10]
 80027a0:	4b48      	ldr	r3, [pc, #288]	; (80028c4 <HAL_I2C_Master_Transmit+0x1e0>)
 80027a2:	9300      	str	r3, [sp, #0]
 80027a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027a8:	68f8      	ldr	r0, [r7, #12]
 80027aa:	f000 fb37 	bl	8002e1c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80027ae:	e05b      	b.n	8002868 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027b0:	697a      	ldr	r2, [r7, #20]
 80027b2:	6a39      	ldr	r1, [r7, #32]
 80027b4:	68f8      	ldr	r0, [r7, #12]
 80027b6:	f000 f9e3 	bl	8002b80 <I2C_WaitOnTXISFlagUntilTimeout>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e07b      	b.n	80028bc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c8:	781a      	ldrb	r2, [r3, #0]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d4:	1c5a      	adds	r2, r3, #1
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027de:	b29b      	uxth	r3, r3
 80027e0:	3b01      	subs	r3, #1
 80027e2:	b29a      	uxth	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ec:	3b01      	subs	r3, #1
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d034      	beq.n	8002868 <HAL_I2C_Master_Transmit+0x184>
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002802:	2b00      	cmp	r3, #0
 8002804:	d130      	bne.n	8002868 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	9300      	str	r3, [sp, #0]
 800280a:	6a3b      	ldr	r3, [r7, #32]
 800280c:	2200      	movs	r2, #0
 800280e:	2180      	movs	r1, #128	; 0x80
 8002810:	68f8      	ldr	r0, [r7, #12]
 8002812:	f000 f975 	bl	8002b00 <I2C_WaitOnFlagUntilTimeout>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d001      	beq.n	8002820 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e04d      	b.n	80028bc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002824:	b29b      	uxth	r3, r3
 8002826:	2bff      	cmp	r3, #255	; 0xff
 8002828:	d90e      	bls.n	8002848 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	22ff      	movs	r2, #255	; 0xff
 800282e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002834:	b2da      	uxtb	r2, r3
 8002836:	8979      	ldrh	r1, [r7, #10]
 8002838:	2300      	movs	r3, #0
 800283a:	9300      	str	r3, [sp, #0]
 800283c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002840:	68f8      	ldr	r0, [r7, #12]
 8002842:	f000 faeb 	bl	8002e1c <I2C_TransferConfig>
 8002846:	e00f      	b.n	8002868 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800284c:	b29a      	uxth	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002856:	b2da      	uxtb	r2, r3
 8002858:	8979      	ldrh	r1, [r7, #10]
 800285a:	2300      	movs	r3, #0
 800285c:	9300      	str	r3, [sp, #0]
 800285e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002862:	68f8      	ldr	r0, [r7, #12]
 8002864:	f000 fada 	bl	8002e1c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800286c:	b29b      	uxth	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d19e      	bne.n	80027b0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	6a39      	ldr	r1, [r7, #32]
 8002876:	68f8      	ldr	r0, [r7, #12]
 8002878:	f000 f9c2 	bl	8002c00 <I2C_WaitOnSTOPFlagUntilTimeout>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e01a      	b.n	80028bc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2220      	movs	r2, #32
 800288c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	6859      	ldr	r1, [r3, #4]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	4b0b      	ldr	r3, [pc, #44]	; (80028c8 <HAL_I2C_Master_Transmit+0x1e4>)
 800289a:	400b      	ands	r3, r1
 800289c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2220      	movs	r2, #32
 80028a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80028b6:	2300      	movs	r3, #0
 80028b8:	e000      	b.n	80028bc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80028ba:	2302      	movs	r3, #2
  }
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3718      	adds	r7, #24
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	80002000 	.word	0x80002000
 80028c8:	fe00e800 	.word	0xfe00e800

080028cc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b088      	sub	sp, #32
 80028d0:	af02      	add	r7, sp, #8
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	607a      	str	r2, [r7, #4]
 80028d6:	461a      	mov	r2, r3
 80028d8:	460b      	mov	r3, r1
 80028da:	817b      	strh	r3, [r7, #10]
 80028dc:	4613      	mov	r3, r2
 80028de:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	2b20      	cmp	r3, #32
 80028ea:	f040 80db 	bne.w	8002aa4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d101      	bne.n	80028fc <HAL_I2C_Master_Receive+0x30>
 80028f8:	2302      	movs	r3, #2
 80028fa:	e0d4      	b.n	8002aa6 <HAL_I2C_Master_Receive+0x1da>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002904:	f7ff fbde 	bl	80020c4 <HAL_GetTick>
 8002908:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	9300      	str	r3, [sp, #0]
 800290e:	2319      	movs	r3, #25
 8002910:	2201      	movs	r2, #1
 8002912:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f000 f8f2 	bl	8002b00 <I2C_WaitOnFlagUntilTimeout>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e0bf      	b.n	8002aa6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2222      	movs	r2, #34	; 0x22
 800292a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2210      	movs	r2, #16
 8002932:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2200      	movs	r2, #0
 800293a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	893a      	ldrh	r2, [r7, #8]
 8002946:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2200      	movs	r2, #0
 800294c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002952:	b29b      	uxth	r3, r3
 8002954:	2bff      	cmp	r3, #255	; 0xff
 8002956:	d90e      	bls.n	8002976 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	22ff      	movs	r2, #255	; 0xff
 800295c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002962:	b2da      	uxtb	r2, r3
 8002964:	8979      	ldrh	r1, [r7, #10]
 8002966:	4b52      	ldr	r3, [pc, #328]	; (8002ab0 <HAL_I2C_Master_Receive+0x1e4>)
 8002968:	9300      	str	r3, [sp, #0]
 800296a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800296e:	68f8      	ldr	r0, [r7, #12]
 8002970:	f000 fa54 	bl	8002e1c <I2C_TransferConfig>
 8002974:	e06d      	b.n	8002a52 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800297a:	b29a      	uxth	r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002984:	b2da      	uxtb	r2, r3
 8002986:	8979      	ldrh	r1, [r7, #10]
 8002988:	4b49      	ldr	r3, [pc, #292]	; (8002ab0 <HAL_I2C_Master_Receive+0x1e4>)
 800298a:	9300      	str	r3, [sp, #0]
 800298c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002990:	68f8      	ldr	r0, [r7, #12]
 8002992:	f000 fa43 	bl	8002e1c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002996:	e05c      	b.n	8002a52 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002998:	697a      	ldr	r2, [r7, #20]
 800299a:	6a39      	ldr	r1, [r7, #32]
 800299c:	68f8      	ldr	r0, [r7, #12]
 800299e:	f000 f96b 	bl	8002c78 <I2C_WaitOnRXNEFlagUntilTimeout>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d001      	beq.n	80029ac <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e07c      	b.n	8002aa6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b6:	b2d2      	uxtb	r2, r2
 80029b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029be:	1c5a      	adds	r2, r3, #1
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c8:	3b01      	subs	r3, #1
 80029ca:	b29a      	uxth	r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	3b01      	subs	r3, #1
 80029d8:	b29a      	uxth	r2, r3
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d034      	beq.n	8002a52 <HAL_I2C_Master_Receive+0x186>
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d130      	bne.n	8002a52 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	9300      	str	r3, [sp, #0]
 80029f4:	6a3b      	ldr	r3, [r7, #32]
 80029f6:	2200      	movs	r2, #0
 80029f8:	2180      	movs	r1, #128	; 0x80
 80029fa:	68f8      	ldr	r0, [r7, #12]
 80029fc:	f000 f880 	bl	8002b00 <I2C_WaitOnFlagUntilTimeout>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e04d      	b.n	8002aa6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	2bff      	cmp	r3, #255	; 0xff
 8002a12:	d90e      	bls.n	8002a32 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	22ff      	movs	r2, #255	; 0xff
 8002a18:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a1e:	b2da      	uxtb	r2, r3
 8002a20:	8979      	ldrh	r1, [r7, #10]
 8002a22:	2300      	movs	r3, #0
 8002a24:	9300      	str	r3, [sp, #0]
 8002a26:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f000 f9f6 	bl	8002e1c <I2C_TransferConfig>
 8002a30:	e00f      	b.n	8002a52 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a40:	b2da      	uxtb	r2, r3
 8002a42:	8979      	ldrh	r1, [r7, #10]
 8002a44:	2300      	movs	r3, #0
 8002a46:	9300      	str	r3, [sp, #0]
 8002a48:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a4c:	68f8      	ldr	r0, [r7, #12]
 8002a4e:	f000 f9e5 	bl	8002e1c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d19d      	bne.n	8002998 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	6a39      	ldr	r1, [r7, #32]
 8002a60:	68f8      	ldr	r0, [r7, #12]
 8002a62:	f000 f8cd 	bl	8002c00 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e01a      	b.n	8002aa6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2220      	movs	r2, #32
 8002a76:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6859      	ldr	r1, [r3, #4]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	4b0c      	ldr	r3, [pc, #48]	; (8002ab4 <HAL_I2C_Master_Receive+0x1e8>)
 8002a84:	400b      	ands	r3, r1
 8002a86:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2220      	movs	r2, #32
 8002a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	e000      	b.n	8002aa6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002aa4:	2302      	movs	r3, #2
  }
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3718      	adds	r7, #24
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	80002400 	.word	0x80002400
 8002ab4:	fe00e800 	.word	0xfe00e800

08002ab8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d103      	bne.n	8002ad6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	f003 0301 	and.w	r3, r3, #1
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d007      	beq.n	8002af4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	699a      	ldr	r2, [r3, #24]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f042 0201 	orr.w	r2, r2, #1
 8002af2:	619a      	str	r2, [r3, #24]
  }
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	603b      	str	r3, [r7, #0]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b10:	e022      	b.n	8002b58 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b18:	d01e      	beq.n	8002b58 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b1a:	f7ff fad3 	bl	80020c4 <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d302      	bcc.n	8002b30 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d113      	bne.n	8002b58 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b34:	f043 0220 	orr.w	r2, r3, #32
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2220      	movs	r2, #32
 8002b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e00f      	b.n	8002b78 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	699a      	ldr	r2, [r3, #24]
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	4013      	ands	r3, r2
 8002b62:	68ba      	ldr	r2, [r7, #8]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	bf0c      	ite	eq
 8002b68:	2301      	moveq	r3, #1
 8002b6a:	2300      	movne	r3, #0
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	461a      	mov	r2, r3
 8002b70:	79fb      	ldrb	r3, [r7, #7]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d0cd      	beq.n	8002b12 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3710      	adds	r7, #16
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b8c:	e02c      	b.n	8002be8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	68b9      	ldr	r1, [r7, #8]
 8002b92:	68f8      	ldr	r0, [r7, #12]
 8002b94:	f000 f8dc 	bl	8002d50 <I2C_IsAcknowledgeFailed>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e02a      	b.n	8002bf8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba8:	d01e      	beq.n	8002be8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002baa:	f7ff fa8b 	bl	80020c4 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	68ba      	ldr	r2, [r7, #8]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d302      	bcc.n	8002bc0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d113      	bne.n	8002be8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc4:	f043 0220 	orr.w	r2, r3, #32
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2220      	movs	r2, #32
 8002bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e007      	b.n	8002bf8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d1cb      	bne.n	8002b8e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3710      	adds	r7, #16
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c0c:	e028      	b.n	8002c60 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	68b9      	ldr	r1, [r7, #8]
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f000 f89c 	bl	8002d50 <I2C_IsAcknowledgeFailed>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e026      	b.n	8002c70 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c22:	f7ff fa4f 	bl	80020c4 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	68ba      	ldr	r2, [r7, #8]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d302      	bcc.n	8002c38 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d113      	bne.n	8002c60 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c3c:	f043 0220 	orr.w	r2, r3, #32
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2220      	movs	r2, #32
 8002c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e007      	b.n	8002c70 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	f003 0320 	and.w	r3, r3, #32
 8002c6a:	2b20      	cmp	r3, #32
 8002c6c:	d1cf      	bne.n	8002c0e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3710      	adds	r7, #16
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c84:	e055      	b.n	8002d32 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	68b9      	ldr	r1, [r7, #8]
 8002c8a:	68f8      	ldr	r0, [r7, #12]
 8002c8c:	f000 f860 	bl	8002d50 <I2C_IsAcknowledgeFailed>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e053      	b.n	8002d42 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	f003 0320 	and.w	r3, r3, #32
 8002ca4:	2b20      	cmp	r3, #32
 8002ca6:	d129      	bne.n	8002cfc <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	f003 0304 	and.w	r3, r3, #4
 8002cb2:	2b04      	cmp	r3, #4
 8002cb4:	d105      	bne.n	8002cc2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	e03f      	b.n	8002d42 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2220      	movs	r2, #32
 8002cc8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	6859      	ldr	r1, [r3, #4]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	4b1d      	ldr	r3, [pc, #116]	; (8002d4c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8002cd6:	400b      	ands	r3, r1
 8002cd8:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2220      	movs	r2, #32
 8002ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e022      	b.n	8002d42 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cfc:	f7ff f9e2 	bl	80020c4 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	68ba      	ldr	r2, [r7, #8]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d302      	bcc.n	8002d12 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d10f      	bne.n	8002d32 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d16:	f043 0220 	orr.w	r2, r3, #32
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2220      	movs	r2, #32
 8002d22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e007      	b.n	8002d42 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	f003 0304 	and.w	r3, r3, #4
 8002d3c:	2b04      	cmp	r3, #4
 8002d3e:	d1a2      	bne.n	8002c86 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3710      	adds	r7, #16
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	fe00e800 	.word	0xfe00e800

08002d50 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	f003 0310 	and.w	r3, r3, #16
 8002d66:	2b10      	cmp	r3, #16
 8002d68:	d151      	bne.n	8002e0e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d6a:	e022      	b.n	8002db2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d72:	d01e      	beq.n	8002db2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d74:	f7ff f9a6 	bl	80020c4 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	68ba      	ldr	r2, [r7, #8]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d302      	bcc.n	8002d8a <I2C_IsAcknowledgeFailed+0x3a>
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d113      	bne.n	8002db2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8e:	f043 0220 	orr.w	r2, r3, #32
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2220      	movs	r2, #32
 8002d9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e02e      	b.n	8002e10 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	f003 0320 	and.w	r3, r3, #32
 8002dbc:	2b20      	cmp	r3, #32
 8002dbe:	d1d5      	bne.n	8002d6c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2210      	movs	r2, #16
 8002dc6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2220      	movs	r2, #32
 8002dce:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002dd0:	68f8      	ldr	r0, [r7, #12]
 8002dd2:	f7ff fe71 	bl	8002ab8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	6859      	ldr	r1, [r3, #4]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	4b0d      	ldr	r3, [pc, #52]	; (8002e18 <I2C_IsAcknowledgeFailed+0xc8>)
 8002de2:	400b      	ands	r3, r1
 8002de4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dea:	f043 0204 	orr.w	r2, r3, #4
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2220      	movs	r2, #32
 8002df6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e000      	b.n	8002e10 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3710      	adds	r7, #16
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	fe00e800 	.word	0xfe00e800

08002e1c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	607b      	str	r3, [r7, #4]
 8002e26:	460b      	mov	r3, r1
 8002e28:	817b      	strh	r3, [r7, #10]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	685a      	ldr	r2, [r3, #4]
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	0d5b      	lsrs	r3, r3, #21
 8002e38:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002e3c:	4b0d      	ldr	r3, [pc, #52]	; (8002e74 <I2C_TransferConfig+0x58>)
 8002e3e:	430b      	orrs	r3, r1
 8002e40:	43db      	mvns	r3, r3
 8002e42:	ea02 0103 	and.w	r1, r2, r3
 8002e46:	897b      	ldrh	r3, [r7, #10]
 8002e48:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002e4c:	7a7b      	ldrb	r3, [r7, #9]
 8002e4e:	041b      	lsls	r3, r3, #16
 8002e50:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002e54:	431a      	orrs	r2, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	431a      	orrs	r2, r3
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	431a      	orrs	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	430a      	orrs	r2, r1
 8002e64:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002e66:	bf00      	nop
 8002e68:	3714      	adds	r7, #20
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	03ff63ff 	.word	0x03ff63ff

08002e78 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b20      	cmp	r3, #32
 8002e8c:	d138      	bne.n	8002f00 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d101      	bne.n	8002e9c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002e98:	2302      	movs	r3, #2
 8002e9a:	e032      	b.n	8002f02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2224      	movs	r2, #36	; 0x24
 8002ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f022 0201 	bic.w	r2, r2, #1
 8002eba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002eca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	6819      	ldr	r1, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	683a      	ldr	r2, [r7, #0]
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f042 0201 	orr.w	r2, r2, #1
 8002eea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2220      	movs	r2, #32
 8002ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002efc:	2300      	movs	r3, #0
 8002efe:	e000      	b.n	8002f02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002f00:	2302      	movs	r3, #2
  }
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	370c      	adds	r7, #12
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr

08002f0e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002f0e:	b480      	push	{r7}
 8002f10:	b085      	sub	sp, #20
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
 8002f16:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	2b20      	cmp	r3, #32
 8002f22:	d139      	bne.n	8002f98 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d101      	bne.n	8002f32 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002f2e:	2302      	movs	r3, #2
 8002f30:	e033      	b.n	8002f9a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2201      	movs	r2, #1
 8002f36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2224      	movs	r2, #36	; 0x24
 8002f3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f022 0201 	bic.w	r2, r2, #1
 8002f50:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002f60:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	021b      	lsls	r3, r3, #8
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68fa      	ldr	r2, [r7, #12]
 8002f72:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f042 0201 	orr.w	r2, r2, #1
 8002f82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2220      	movs	r2, #32
 8002f88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f94:	2300      	movs	r3, #0
 8002f96:	e000      	b.n	8002f9a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002f98:	2302      	movs	r3, #2
  }
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3714      	adds	r7, #20
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr

08002fa6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002fa6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fa8:	b08b      	sub	sp, #44	; 0x2c
 8002faa:	af06      	add	r7, sp, #24
 8002fac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d101      	bne.n	8002fb8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e0da      	b.n	800316e <HAL_PCD_Init+0x1c8>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d106      	bne.n	8002fd2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f009 fc79 	bl	800c8c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2203      	movs	r2, #3
 8002fd6:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f003 f9d5 	bl	800638e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	603b      	str	r3, [r7, #0]
 8002fea:	687e      	ldr	r6, [r7, #4]
 8002fec:	466d      	mov	r5, sp
 8002fee:	f106 0410 	add.w	r4, r6, #16
 8002ff2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ff4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ff6:	6823      	ldr	r3, [r4, #0]
 8002ff8:	602b      	str	r3, [r5, #0]
 8002ffa:	1d33      	adds	r3, r6, #4
 8002ffc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ffe:	6838      	ldr	r0, [r7, #0]
 8003000:	f003 f99c 	bl	800633c <USB_CoreInit>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d005      	beq.n	8003016 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2202      	movs	r2, #2
 800300e:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e0ab      	b.n	800316e <HAL_PCD_Init+0x1c8>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2100      	movs	r1, #0
 800301c:	4618      	mov	r0, r3
 800301e:	f003 f9d3 	bl	80063c8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003022:	2300      	movs	r3, #0
 8003024:	73fb      	strb	r3, [r7, #15]
 8003026:	e035      	b.n	8003094 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003028:	7bfb      	ldrb	r3, [r7, #15]
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	015b      	lsls	r3, r3, #5
 800302e:	4413      	add	r3, r2
 8003030:	3329      	adds	r3, #41	; 0x29
 8003032:	2201      	movs	r2, #1
 8003034:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003036:	7bfb      	ldrb	r3, [r7, #15]
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	015b      	lsls	r3, r3, #5
 800303c:	4413      	add	r3, r2
 800303e:	3328      	adds	r3, #40	; 0x28
 8003040:	7bfa      	ldrb	r2, [r7, #15]
 8003042:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003044:	7bfb      	ldrb	r3, [r7, #15]
 8003046:	7bfa      	ldrb	r2, [r7, #15]
 8003048:	b291      	uxth	r1, r2
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	015b      	lsls	r3, r3, #5
 800304e:	4413      	add	r3, r2
 8003050:	3336      	adds	r3, #54	; 0x36
 8003052:	460a      	mov	r2, r1
 8003054:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003056:	7bfb      	ldrb	r3, [r7, #15]
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	015b      	lsls	r3, r3, #5
 800305c:	4413      	add	r3, r2
 800305e:	332b      	adds	r3, #43	; 0x2b
 8003060:	2200      	movs	r2, #0
 8003062:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003064:	7bfb      	ldrb	r3, [r7, #15]
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	015b      	lsls	r3, r3, #5
 800306a:	4413      	add	r3, r2
 800306c:	3338      	adds	r3, #56	; 0x38
 800306e:	2200      	movs	r2, #0
 8003070:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003072:	7bfb      	ldrb	r3, [r7, #15]
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	015b      	lsls	r3, r3, #5
 8003078:	4413      	add	r3, r2
 800307a:	333c      	adds	r3, #60	; 0x3c
 800307c:	2200      	movs	r2, #0
 800307e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003080:	7bfb      	ldrb	r3, [r7, #15]
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	3302      	adds	r3, #2
 8003086:	015b      	lsls	r3, r3, #5
 8003088:	4413      	add	r3, r2
 800308a:	2200      	movs	r2, #0
 800308c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800308e:	7bfb      	ldrb	r3, [r7, #15]
 8003090:	3301      	adds	r3, #1
 8003092:	73fb      	strb	r3, [r7, #15]
 8003094:	7bfa      	ldrb	r2, [r7, #15]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	429a      	cmp	r2, r3
 800309c:	d3c4      	bcc.n	8003028 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800309e:	2300      	movs	r3, #0
 80030a0:	73fb      	strb	r3, [r7, #15]
 80030a2:	e031      	b.n	8003108 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80030a4:	7bfb      	ldrb	r3, [r7, #15]
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	015b      	lsls	r3, r3, #5
 80030aa:	4413      	add	r3, r2
 80030ac:	f203 1329 	addw	r3, r3, #297	; 0x129
 80030b0:	2200      	movs	r2, #0
 80030b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80030b4:	7bfb      	ldrb	r3, [r7, #15]
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	015b      	lsls	r3, r3, #5
 80030ba:	4413      	add	r3, r2
 80030bc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80030c0:	7bfa      	ldrb	r2, [r7, #15]
 80030c2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80030c4:	7bfb      	ldrb	r3, [r7, #15]
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	015b      	lsls	r3, r3, #5
 80030ca:	4413      	add	r3, r2
 80030cc:	f203 132b 	addw	r3, r3, #299	; 0x12b
 80030d0:	2200      	movs	r2, #0
 80030d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80030d4:	7bfb      	ldrb	r3, [r7, #15]
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	015b      	lsls	r3, r3, #5
 80030da:	4413      	add	r3, r2
 80030dc:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80030e0:	2200      	movs	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80030e4:	7bfb      	ldrb	r3, [r7, #15]
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	015b      	lsls	r3, r3, #5
 80030ea:	4413      	add	r3, r2
 80030ec:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80030f0:	2200      	movs	r2, #0
 80030f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80030f4:	7bfb      	ldrb	r3, [r7, #15]
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	330a      	adds	r3, #10
 80030fa:	015b      	lsls	r3, r3, #5
 80030fc:	4413      	add	r3, r2
 80030fe:	2200      	movs	r2, #0
 8003100:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003102:	7bfb      	ldrb	r3, [r7, #15]
 8003104:	3301      	adds	r3, #1
 8003106:	73fb      	strb	r3, [r7, #15]
 8003108:	7bfa      	ldrb	r2, [r7, #15]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	429a      	cmp	r2, r3
 8003110:	d3c8      	bcc.n	80030a4 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	603b      	str	r3, [r7, #0]
 8003118:	687e      	ldr	r6, [r7, #4]
 800311a:	466d      	mov	r5, sp
 800311c:	f106 0410 	add.w	r4, r6, #16
 8003120:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003122:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003124:	6823      	ldr	r3, [r4, #0]
 8003126:	602b      	str	r3, [r5, #0]
 8003128:	1d33      	adds	r3, r6, #4
 800312a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800312c:	6838      	ldr	r0, [r7, #0]
 800312e:	f003 f958 	bl	80063e2 <USB_DevInit>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d005      	beq.n	8003144 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2202      	movs	r2, #2
 800313c:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e014      	b.n	800316e <HAL_PCD_Init+0x1c8>
  }

  hpcd->USB_Address = 0U;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	69db      	ldr	r3, [r3, #28]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d102      	bne.n	8003162 <HAL_PCD_Init+0x1bc>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f000 fe42 	bl	8003de6 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4618      	mov	r0, r3
 8003168:	f004 f98d 	bl	8007486 <USB_DevDisconnect>

  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3714      	adds	r7, #20
 8003172:	46bd      	mov	sp, r7
 8003174:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003176 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003176:	b580      	push	{r7, lr}
 8003178:	b082      	sub	sp, #8
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003184:	2b01      	cmp	r3, #1
 8003186:	d101      	bne.n	800318c <HAL_PCD_Start+0x16>
 8003188:	2302      	movs	r3, #2
 800318a:	e012      	b.n	80031b2 <HAL_PCD_Start+0x3c>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  (void)USB_DevConnect(hpcd->Instance);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4618      	mov	r0, r3
 800319a:	f004 f95d 	bl	8007458 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f003 f8db 	bl	800635e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}

080031ba <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80031ba:	b580      	push	{r7, lr}
 80031bc:	b082      	sub	sp, #8
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f004 f972 	bl	80074b0 <USB_ReadInterrupts>
 80031cc:	4603      	mov	r3, r0
 80031ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031d6:	d102      	bne.n	80031de <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f000 fb3f 	bl	800385c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f004 f964 	bl	80074b0 <USB_ReadInterrupts>
 80031e8:	4603      	mov	r3, r0
 80031ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031f2:	d112      	bne.n	800321a <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80031fc:	b29a      	uxth	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003206:	b292      	uxth	r2, r2
 8003208:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f009 fbce 	bl	800c9ae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003212:	2100      	movs	r1, #0
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f000 f929 	bl	800346c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4618      	mov	r0, r3
 8003220:	f004 f946 	bl	80074b0 <USB_ReadInterrupts>
 8003224:	4603      	mov	r3, r0
 8003226:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800322a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800322e:	d10b      	bne.n	8003248 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003238:	b29a      	uxth	r2, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003242:	b292      	uxth	r2, r2
 8003244:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4618      	mov	r0, r3
 800324e:	f004 f92f 	bl	80074b0 <USB_ReadInterrupts>
 8003252:	4603      	mov	r3, r0
 8003254:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003258:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800325c:	d10b      	bne.n	8003276 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003266:	b29a      	uxth	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003270:	b292      	uxth	r2, r2
 8003272:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4618      	mov	r0, r3
 800327c:	f004 f918 	bl	80074b0 <USB_ReadInterrupts>
 8003280:	4603      	mov	r3, r0
 8003282:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003286:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800328a:	d133      	bne.n	80032f4 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003294:	b29a      	uxth	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f022 0204 	bic.w	r2, r2, #4
 800329e:	b292      	uxth	r2, r2
 80032a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80032ac:	b29a      	uxth	r2, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f022 0208 	bic.w	r2, r2, #8
 80032b6:	b292      	uxth	r2, r2
 80032b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d107      	bne.n	80032d6 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80032ce:	2100      	movs	r1, #0
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f009 fe19 	bl	800cf08 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f009 fba2 	bl	800ca20 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80032e4:	b29a      	uxth	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80032ee:	b292      	uxth	r2, r2
 80032f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f004 f8d9 	bl	80074b0 <USB_ReadInterrupts>
 80032fe:	4603      	mov	r3, r0
 8003300:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003304:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003308:	d131      	bne.n	800336e <HAL_PCD_IRQHandler+0x1b4>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003312:	b29a      	uxth	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f042 0208 	orr.w	r2, r2, #8
 800331c:	b292      	uxth	r2, r2
 800331e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800332a:	b29a      	uxth	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003334:	b292      	uxth	r2, r2
 8003336:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003342:	b29a      	uxth	r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f042 0204 	orr.w	r2, r2, #4
 800334c:	b292      	uxth	r2, r2
 800334e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4618      	mov	r0, r3
 8003358:	f004 f8aa 	bl	80074b0 <USB_ReadInterrupts>
 800335c:	4603      	mov	r3, r0
 800335e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003366:	d002      	beq.n	800336e <HAL_PCD_IRQHandler+0x1b4>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f009 fb3f 	bl	800c9ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4618      	mov	r0, r3
 8003374:	f004 f89c 	bl	80074b0 <USB_ReadInterrupts>
 8003378:	4603      	mov	r3, r0
 800337a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800337e:	2b80      	cmp	r3, #128	; 0x80
 8003380:	d13f      	bne.n	8003402 <HAL_PCD_IRQHandler+0x248>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800338a:	b29a      	uxth	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003394:	b292      	uxth	r2, r2
 8003396:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d12b      	bne.n	80033fc <HAL_PCD_IRQHandler+0x242>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80033ac:	b29a      	uxth	r2, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f042 0204 	orr.w	r2, r2, #4
 80033b6:	b292      	uxth	r2, r2
 80033b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80033c4:	b29a      	uxth	r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f042 0208 	orr.w	r2, r2, #8
 80033ce:	b292      	uxth	r2, r2
 80033d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	089b      	lsrs	r3, r3, #2
 80033e8:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80033f2:	2101      	movs	r1, #1
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f009 fd87 	bl	800cf08 <HAL_PCDEx_LPM_Callback>
 80033fa:	e002      	b.n	8003402 <HAL_PCD_IRQHandler+0x248>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f009 faf5 	bl	800c9ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4618      	mov	r0, r3
 8003408:	f004 f852 	bl	80074b0 <USB_ReadInterrupts>
 800340c:	4603      	mov	r3, r0
 800340e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003412:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003416:	d10e      	bne.n	8003436 <HAL_PCD_IRQHandler+0x27c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003420:	b29a      	uxth	r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800342a:	b292      	uxth	r2, r2
 800342c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f009 faae 	bl	800c992 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4618      	mov	r0, r3
 800343c:	f004 f838 	bl	80074b0 <USB_ReadInterrupts>
 8003440:	4603      	mov	r3, r0
 8003442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003446:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800344a:	d10b      	bne.n	8003464 <HAL_PCD_IRQHandler+0x2aa>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003454:	b29a      	uxth	r2, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800345e:	b292      	uxth	r2, r2
 8003460:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8003464:	bf00      	nop
 8003466:	3708      	adds	r7, #8
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	460b      	mov	r3, r1
 8003476:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800347e:	2b01      	cmp	r3, #1
 8003480:	d101      	bne.n	8003486 <HAL_PCD_SetAddress+0x1a>
 8003482:	2302      	movs	r3, #2
 8003484:	e013      	b.n	80034ae <HAL_PCD_SetAddress+0x42>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	78fa      	ldrb	r2, [r7, #3]
 8003492:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	78fa      	ldrb	r2, [r7, #3]
 800349c:	4611      	mov	r1, r2
 800349e:	4618      	mov	r0, r3
 80034a0:	f003 ffc6 	bl	8007430 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b084      	sub	sp, #16
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
 80034be:	4608      	mov	r0, r1
 80034c0:	4611      	mov	r1, r2
 80034c2:	461a      	mov	r2, r3
 80034c4:	4603      	mov	r3, r0
 80034c6:	70fb      	strb	r3, [r7, #3]
 80034c8:	460b      	mov	r3, r1
 80034ca:	803b      	strh	r3, [r7, #0]
 80034cc:	4613      	mov	r3, r2
 80034ce:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80034d0:	2300      	movs	r3, #0
 80034d2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80034d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	da0b      	bge.n	80034f4 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034dc:	78fb      	ldrb	r3, [r7, #3]
 80034de:	f003 0307 	and.w	r3, r3, #7
 80034e2:	015b      	lsls	r3, r3, #5
 80034e4:	3328      	adds	r3, #40	; 0x28
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	4413      	add	r3, r2
 80034ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2201      	movs	r2, #1
 80034f0:	705a      	strb	r2, [r3, #1]
 80034f2:	e00b      	b.n	800350c <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034f4:	78fb      	ldrb	r3, [r7, #3]
 80034f6:	f003 0307 	and.w	r3, r3, #7
 80034fa:	015b      	lsls	r3, r3, #5
 80034fc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	4413      	add	r3, r2
 8003504:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800350c:	78fb      	ldrb	r3, [r7, #3]
 800350e:	f003 0307 	and.w	r3, r3, #7
 8003512:	b2da      	uxtb	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003518:	883a      	ldrh	r2, [r7, #0]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	78ba      	ldrb	r2, [r7, #2]
 8003522:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	785b      	ldrb	r3, [r3, #1]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d004      	beq.n	8003536 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	b29a      	uxth	r2, r3
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003536:	78bb      	ldrb	r3, [r7, #2]
 8003538:	2b02      	cmp	r3, #2
 800353a:	d102      	bne.n	8003542 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2200      	movs	r2, #0
 8003540:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003548:	2b01      	cmp	r3, #1
 800354a:	d101      	bne.n	8003550 <HAL_PCD_EP_Open+0x9a>
 800354c:	2302      	movs	r3, #2
 800354e:	e00e      	b.n	800356e <HAL_PCD_EP_Open+0xb8>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68f9      	ldr	r1, [r7, #12]
 800355e:	4618      	mov	r0, r3
 8003560:	f002 ff64 	bl	800642c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 800356c:	7afb      	ldrb	r3, [r7, #11]
}
 800356e:	4618      	mov	r0, r3
 8003570:	3710      	adds	r7, #16
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b084      	sub	sp, #16
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
 800357e:	460b      	mov	r3, r1
 8003580:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003582:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003586:	2b00      	cmp	r3, #0
 8003588:	da0b      	bge.n	80035a2 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800358a:	78fb      	ldrb	r3, [r7, #3]
 800358c:	f003 0307 	and.w	r3, r3, #7
 8003590:	015b      	lsls	r3, r3, #5
 8003592:	3328      	adds	r3, #40	; 0x28
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	4413      	add	r3, r2
 8003598:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2201      	movs	r2, #1
 800359e:	705a      	strb	r2, [r3, #1]
 80035a0:	e00b      	b.n	80035ba <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035a2:	78fb      	ldrb	r3, [r7, #3]
 80035a4:	f003 0307 	and.w	r3, r3, #7
 80035a8:	015b      	lsls	r3, r3, #5
 80035aa:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	4413      	add	r3, r2
 80035b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80035ba:	78fb      	ldrb	r3, [r7, #3]
 80035bc:	f003 0307 	and.w	r3, r3, #7
 80035c0:	b2da      	uxtb	r2, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d101      	bne.n	80035d4 <HAL_PCD_EP_Close+0x5e>
 80035d0:	2302      	movs	r3, #2
 80035d2:	e00e      	b.n	80035f2 <HAL_PCD_EP_Close+0x7c>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68f9      	ldr	r1, [r7, #12]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f003 fa0c 	bl	8006a00 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3710      	adds	r7, #16
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b086      	sub	sp, #24
 80035fe:	af00      	add	r7, sp, #0
 8003600:	60f8      	str	r0, [r7, #12]
 8003602:	607a      	str	r2, [r7, #4]
 8003604:	603b      	str	r3, [r7, #0]
 8003606:	460b      	mov	r3, r1
 8003608:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800360a:	7afb      	ldrb	r3, [r7, #11]
 800360c:	f003 0307 	and.w	r3, r3, #7
 8003610:	015b      	lsls	r3, r3, #5
 8003612:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	4413      	add	r3, r2
 800361a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	683a      	ldr	r2, [r7, #0]
 8003626:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	2200      	movs	r2, #0
 800362c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	2200      	movs	r2, #0
 8003632:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003634:	7afb      	ldrb	r3, [r7, #11]
 8003636:	f003 0307 	and.w	r3, r3, #7
 800363a:	b2da      	uxtb	r2, r3
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003640:	7afb      	ldrb	r3, [r7, #11]
 8003642:	f003 0307 	and.w	r3, r3, #7
 8003646:	2b00      	cmp	r3, #0
 8003648:	d106      	bne.n	8003658 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	6979      	ldr	r1, [r7, #20]
 8003650:	4618      	mov	r0, r3
 8003652:	f003 fb6b 	bl	8006d2c <USB_EPStartXfer>
 8003656:	e005      	b.n	8003664 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	6979      	ldr	r1, [r7, #20]
 800365e:	4618      	mov	r0, r3
 8003660:	f003 fb64 	bl	8006d2c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3718      	adds	r7, #24
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800366e:	b480      	push	{r7}
 8003670:	b083      	sub	sp, #12
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
 8003676:	460b      	mov	r3, r1
 8003678:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800367a:	78fb      	ldrb	r3, [r7, #3]
 800367c:	f003 0307 	and.w	r3, r3, #7
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	330a      	adds	r3, #10
 8003684:	015b      	lsls	r3, r3, #5
 8003686:	4413      	add	r3, r2
 8003688:	3304      	adds	r3, #4
 800368a:	681b      	ldr	r3, [r3, #0]
}
 800368c:	4618      	mov	r0, r3
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b086      	sub	sp, #24
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	607a      	str	r2, [r7, #4]
 80036a2:	603b      	str	r3, [r7, #0]
 80036a4:	460b      	mov	r3, r1
 80036a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036a8:	7afb      	ldrb	r3, [r7, #11]
 80036aa:	f003 0307 	and.w	r3, r3, #7
 80036ae:	015b      	lsls	r3, r3, #5
 80036b0:	3328      	adds	r3, #40	; 0x28
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	4413      	add	r3, r2
 80036b6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	683a      	ldr	r2, [r7, #0]
 80036c2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	2200      	movs	r2, #0
 80036c8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	2201      	movs	r2, #1
 80036ce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036d0:	7afb      	ldrb	r3, [r7, #11]
 80036d2:	f003 0307 	and.w	r3, r3, #7
 80036d6:	b2da      	uxtb	r2, r3
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80036dc:	7afb      	ldrb	r3, [r7, #11]
 80036de:	f003 0307 	and.w	r3, r3, #7
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d106      	bne.n	80036f4 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	6979      	ldr	r1, [r7, #20]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f003 fb1d 	bl	8006d2c <USB_EPStartXfer>
 80036f2:	e005      	b.n	8003700 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	6979      	ldr	r1, [r7, #20]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f003 fb16 	bl	8006d2c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3718      	adds	r7, #24
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}

0800370a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800370a:	b580      	push	{r7, lr}
 800370c:	b084      	sub	sp, #16
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
 8003712:	460b      	mov	r3, r1
 8003714:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003716:	78fb      	ldrb	r3, [r7, #3]
 8003718:	f003 0207 	and.w	r2, r3, #7
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	429a      	cmp	r2, r3
 8003722:	d901      	bls.n	8003728 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e046      	b.n	80037b6 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003728:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800372c:	2b00      	cmp	r3, #0
 800372e:	da0b      	bge.n	8003748 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003730:	78fb      	ldrb	r3, [r7, #3]
 8003732:	f003 0307 	and.w	r3, r3, #7
 8003736:	015b      	lsls	r3, r3, #5
 8003738:	3328      	adds	r3, #40	; 0x28
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	4413      	add	r3, r2
 800373e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2201      	movs	r2, #1
 8003744:	705a      	strb	r2, [r3, #1]
 8003746:	e009      	b.n	800375c <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003748:	78fb      	ldrb	r3, [r7, #3]
 800374a:	015b      	lsls	r3, r3, #5
 800374c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	4413      	add	r3, r2
 8003754:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2201      	movs	r2, #1
 8003760:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003762:	78fb      	ldrb	r3, [r7, #3]
 8003764:	f003 0307 	and.w	r3, r3, #7
 8003768:	b2da      	uxtb	r2, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003774:	2b01      	cmp	r3, #1
 8003776:	d101      	bne.n	800377c <HAL_PCD_EP_SetStall+0x72>
 8003778:	2302      	movs	r3, #2
 800377a:	e01c      	b.n	80037b6 <HAL_PCD_EP_SetStall+0xac>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68f9      	ldr	r1, [r7, #12]
 800378a:	4618      	mov	r0, r3
 800378c:	f003 fd7a 	bl	8007284 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003790:	78fb      	ldrb	r3, [r7, #3]
 8003792:	f003 0307 	and.w	r3, r3, #7
 8003796:	2b00      	cmp	r3, #0
 8003798:	d108      	bne.n	80037ac <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80037a4:	4619      	mov	r1, r3
 80037a6:	4610      	mov	r0, r2
 80037a8:	f003 fe92 	bl	80074d0 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3710      	adds	r7, #16
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}

080037be <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037be:	b580      	push	{r7, lr}
 80037c0:	b084      	sub	sp, #16
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
 80037c6:	460b      	mov	r3, r1
 80037c8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80037ca:	78fb      	ldrb	r3, [r7, #3]
 80037cc:	f003 020f 	and.w	r2, r3, #15
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d901      	bls.n	80037dc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e03a      	b.n	8003852 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80037dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	da0b      	bge.n	80037fc <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037e4:	78fb      	ldrb	r3, [r7, #3]
 80037e6:	f003 0307 	and.w	r3, r3, #7
 80037ea:	015b      	lsls	r3, r3, #5
 80037ec:	3328      	adds	r3, #40	; 0x28
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	4413      	add	r3, r2
 80037f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2201      	movs	r2, #1
 80037f8:	705a      	strb	r2, [r3, #1]
 80037fa:	e00b      	b.n	8003814 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037fc:	78fb      	ldrb	r3, [r7, #3]
 80037fe:	f003 0307 	and.w	r3, r3, #7
 8003802:	015b      	lsls	r3, r3, #5
 8003804:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	4413      	add	r3, r2
 800380c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800381a:	78fb      	ldrb	r3, [r7, #3]
 800381c:	f003 0307 	and.w	r3, r3, #7
 8003820:	b2da      	uxtb	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800382c:	2b01      	cmp	r3, #1
 800382e:	d101      	bne.n	8003834 <HAL_PCD_EP_ClrStall+0x76>
 8003830:	2302      	movs	r3, #2
 8003832:	e00e      	b.n	8003852 <HAL_PCD_EP_ClrStall+0x94>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68f9      	ldr	r1, [r7, #12]
 8003842:	4618      	mov	r0, r3
 8003844:	f003 fd60 	bl	8007308 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
	...

0800385c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800385c:	b590      	push	{r4, r7, lr}
 800385e:	b089      	sub	sp, #36	; 0x24
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003864:	e26f      	b.n	8003d46 <PCD_EP_ISR_Handler+0x4ea>
  {
    wIstr = hpcd->Instance->ISTR;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800386e:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003870:	8afb      	ldrh	r3, [r7, #22]
 8003872:	b2db      	uxtb	r3, r3
 8003874:	f003 030f 	and.w	r3, r3, #15
 8003878:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 800387a:	7d7b      	ldrb	r3, [r7, #21]
 800387c:	2b00      	cmp	r3, #0
 800387e:	f040 8137 	bne.w	8003af0 <PCD_EP_ISR_Handler+0x294>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003882:	8afb      	ldrh	r3, [r7, #22]
 8003884:	f003 0310 	and.w	r3, r3, #16
 8003888:	2b00      	cmp	r3, #0
 800388a:	d14f      	bne.n	800392c <PCD_EP_ISR_Handler+0xd0>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	881b      	ldrh	r3, [r3, #0]
 8003892:	b29b      	uxth	r3, r3
 8003894:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003898:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800389c:	b29c      	uxth	r4, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80038a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	3328      	adds	r3, #40	; 0x28
 80038b2:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038bc:	b29b      	uxth	r3, r3
 80038be:	461a      	mov	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	00db      	lsls	r3, r3, #3
 80038c6:	4413      	add	r3, r2
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	6812      	ldr	r2, [r2, #0]
 80038cc:	4413      	add	r3, r2
 80038ce:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80038d2:	881b      	ldrh	r3, [r3, #0]
 80038d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	695a      	ldr	r2, [r3, #20]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	69db      	ldr	r3, [r3, #28]
 80038e4:	441a      	add	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80038ea:	2100      	movs	r1, #0
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f009 f839 	bl	800c964 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	f000 8223 	beq.w	8003d46 <PCD_EP_ISR_Handler+0x4ea>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	2b00      	cmp	r3, #0
 8003906:	f040 821e 	bne.w	8003d46 <PCD_EP_ISR_Handler+0x4ea>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003910:	b2db      	uxtb	r3, r3
 8003912:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003916:	b2da      	uxtb	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	b292      	uxth	r2, r2
 800391e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800392a:	e20c      	b.n	8003d46 <PCD_EP_ISR_Handler+0x4ea>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003932:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	881b      	ldrh	r3, [r3, #0]
 800393a:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800393c:	8a7b      	ldrh	r3, [r7, #18]
 800393e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003942:	2b00      	cmp	r3, #0
 8003944:	d031      	beq.n	80039aa <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800394e:	b29b      	uxth	r3, r3
 8003950:	461a      	mov	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	4413      	add	r3, r2
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	6812      	ldr	r2, [r2, #0]
 800395e:	4413      	add	r3, r2
 8003960:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003964:	881b      	ldrh	r3, [r3, #0]
 8003966:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6818      	ldr	r0, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003980:	b29b      	uxth	r3, r3
 8003982:	f003 fdf2 	bl	800756a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	881b      	ldrh	r3, [r3, #0]
 800398c:	b29a      	uxth	r2, r3
 800398e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003992:	4013      	ands	r3, r2
 8003994:	b29c      	uxth	r4, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800399e:	b292      	uxth	r2, r2
 80039a0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f008 ffb4 	bl	800c910 <HAL_PCD_SetupStageCallback>
 80039a8:	e1cd      	b.n	8003d46 <PCD_EP_ISR_Handler+0x4ea>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80039aa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	f280 81c9 	bge.w	8003d46 <PCD_EP_ISR_Handler+0x4ea>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	881b      	ldrh	r3, [r3, #0]
 80039ba:	b29a      	uxth	r2, r3
 80039bc:	f640 738f 	movw	r3, #3983	; 0xf8f
 80039c0:	4013      	ands	r3, r2
 80039c2:	b29c      	uxth	r4, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80039cc:	b292      	uxth	r2, r2
 80039ce:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039d8:	b29b      	uxth	r3, r3
 80039da:	461a      	mov	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	00db      	lsls	r3, r3, #3
 80039e2:	4413      	add	r3, r2
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	6812      	ldr	r2, [r2, #0]
 80039e8:	4413      	add	r3, r2
 80039ea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80039ee:	881b      	ldrh	r3, [r3, #0]
 80039f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	69db      	ldr	r3, [r3, #28]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d019      	beq.n	8003a34 <PCD_EP_ISR_Handler+0x1d8>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	695b      	ldr	r3, [r3, #20]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d015      	beq.n	8003a34 <PCD_EP_ISR_Handler+0x1d8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6818      	ldr	r0, [r3, #0]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6959      	ldr	r1, [r3, #20]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	f003 fda6 	bl	800756a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	695a      	ldr	r2, [r3, #20]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	69db      	ldr	r3, [r3, #28]
 8003a26:	441a      	add	r2, r3
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003a2c:	2100      	movs	r1, #0
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f008 ff80 	bl	800c934 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	461c      	mov	r4, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	441c      	add	r4, r3
 8003a46:	f204 4306 	addw	r3, r4, #1030	; 0x406
 8003a4a:	60bb      	str	r3, [r7, #8]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d110      	bne.n	8003a76 <PCD_EP_ISR_Handler+0x21a>
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	881b      	ldrh	r3, [r3, #0]
 8003a58:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003a5c:	b29a      	uxth	r2, r3
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	801a      	strh	r2, [r3, #0]
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	881b      	ldrh	r3, [r3, #0]
 8003a66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	801a      	strh	r2, [r3, #0]
 8003a74:	e026      	b.n	8003ac4 <PCD_EP_ISR_Handler+0x268>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	2b3d      	cmp	r3, #61	; 0x3d
 8003a7c:	d813      	bhi.n	8003aa6 <PCD_EP_ISR_Handler+0x24a>
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	085b      	lsrs	r3, r3, #1
 8003a84:	61bb      	str	r3, [r7, #24]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	f003 0301 	and.w	r3, r3, #1
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d002      	beq.n	8003a98 <PCD_EP_ISR_Handler+0x23c>
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	3301      	adds	r3, #1
 8003a96:	61bb      	str	r3, [r7, #24]
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	029b      	lsls	r3, r3, #10
 8003a9e:	b29a      	uxth	r2, r3
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	801a      	strh	r2, [r3, #0]
 8003aa4:	e00e      	b.n	8003ac4 <PCD_EP_ISR_Handler+0x268>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	095b      	lsrs	r3, r3, #5
 8003aac:	61bb      	str	r3, [r7, #24]
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	029b      	lsls	r3, r3, #10
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003aba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	881b      	ldrh	r3, [r3, #0]
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ad0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ad4:	b29c      	uxth	r4, r3
 8003ad6:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003ada:	b29c      	uxth	r4, r3
 8003adc:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003ae0:	b29c      	uxth	r4, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	4b9f      	ldr	r3, [pc, #636]	; (8003d64 <PCD_EP_ISR_Handler+0x508>)
 8003ae8:	4323      	orrs	r3, r4
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	8013      	strh	r3, [r2, #0]
 8003aee:	e12a      	b.n	8003d46 <PCD_EP_ISR_Handler+0x4ea>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	461a      	mov	r2, r3
 8003af6:	7d7b      	ldrb	r3, [r7, #21]
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	4413      	add	r3, r2
 8003afc:	881b      	ldrh	r3, [r3, #0]
 8003afe:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003b00:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f280 80cb 	bge.w	8003ca0 <PCD_EP_ISR_Handler+0x444>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	461a      	mov	r2, r3
 8003b10:	7d7b      	ldrb	r3, [r7, #21]
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	4413      	add	r3, r2
 8003b16:	881b      	ldrh	r3, [r3, #0]
 8003b18:	b29a      	uxth	r2, r3
 8003b1a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003b1e:	4013      	ands	r3, r2
 8003b20:	b29c      	uxth	r4, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	461a      	mov	r2, r3
 8003b28:	7d7b      	ldrb	r3, [r7, #21]
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	4413      	add	r3, r2
 8003b2e:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8003b32:	b292      	uxth	r2, r2
 8003b34:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003b36:	7d7b      	ldrb	r3, [r7, #21]
 8003b38:	015b      	lsls	r3, r3, #5
 8003b3a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	4413      	add	r3, r2
 8003b42:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	7b1b      	ldrb	r3, [r3, #12]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d11f      	bne.n	8003b8c <PCD_EP_ISR_Handler+0x330>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	461a      	mov	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	00db      	lsls	r3, r3, #3
 8003b5e:	4413      	add	r3, r2
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	6812      	ldr	r2, [r2, #0]
 8003b64:	4413      	add	r3, r2
 8003b66:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003b6a:	881b      	ldrh	r3, [r3, #0]
 8003b6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b70:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8003b72:	8bfb      	ldrh	r3, [r7, #30]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d06e      	beq.n	8003c56 <PCD_EP_ISR_Handler+0x3fa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6818      	ldr	r0, [r3, #0]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6959      	ldr	r1, [r3, #20]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	88da      	ldrh	r2, [r3, #6]
 8003b84:	8bfb      	ldrh	r3, [r7, #30]
 8003b86:	f003 fcf0 	bl	800756a <USB_ReadPMA>
 8003b8a:	e064      	b.n	8003c56 <PCD_EP_ISR_Handler+0x3fa>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	461a      	mov	r2, r3
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	4413      	add	r3, r2
 8003b9a:	881b      	ldrh	r3, [r3, #0]
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d01f      	beq.n	8003be6 <PCD_EP_ISR_Handler+0x38a>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	00db      	lsls	r3, r3, #3
 8003bb8:	4413      	add	r3, r2
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	6812      	ldr	r2, [r2, #0]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003bc4:	881b      	ldrh	r3, [r3, #0]
 8003bc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bca:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8003bcc:	8bfb      	ldrh	r3, [r7, #30]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d028      	beq.n	8003c24 <PCD_EP_ISR_Handler+0x3c8>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6818      	ldr	r0, [r3, #0]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6959      	ldr	r1, [r3, #20]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	891a      	ldrh	r2, [r3, #8]
 8003bde:	8bfb      	ldrh	r3, [r7, #30]
 8003be0:	f003 fcc3 	bl	800756a <USB_ReadPMA>
 8003be4:	e01e      	b.n	8003c24 <PCD_EP_ISR_Handler+0x3c8>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	00db      	lsls	r3, r3, #3
 8003bf8:	4413      	add	r3, r2
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	6812      	ldr	r2, [r2, #0]
 8003bfe:	4413      	add	r3, r2
 8003c00:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003c04:	881b      	ldrh	r3, [r3, #0]
 8003c06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c0a:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8003c0c:	8bfb      	ldrh	r3, [r7, #30]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d008      	beq.n	8003c24 <PCD_EP_ISR_Handler+0x3c8>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6818      	ldr	r0, [r3, #0]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6959      	ldr	r1, [r3, #20]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	895a      	ldrh	r2, [r3, #10]
 8003c1e:	8bfb      	ldrh	r3, [r7, #30]
 8003c20:	f003 fca3 	bl	800756a <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	461a      	mov	r2, r3
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	4413      	add	r3, r2
 8003c32:	881b      	ldrh	r3, [r3, #0]
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c3e:	b29c      	uxth	r4, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	461a      	mov	r2, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	441a      	add	r2, r3
 8003c4e:	4b46      	ldr	r3, [pc, #280]	; (8003d68 <PCD_EP_ISR_Handler+0x50c>)
 8003c50:	4323      	orrs	r3, r4
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	69da      	ldr	r2, [r3, #28]
 8003c5a:	8bfb      	ldrh	r3, [r7, #30]
 8003c5c:	441a      	add	r2, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	695a      	ldr	r2, [r3, #20]
 8003c66:	8bfb      	ldrh	r3, [r7, #30]
 8003c68:	441a      	add	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d004      	beq.n	8003c80 <PCD_EP_ISR_Handler+0x424>
 8003c76:	8bfa      	ldrh	r2, [r7, #30]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	691b      	ldr	r3, [r3, #16]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d206      	bcs.n	8003c8e <PCD_EP_ISR_Handler+0x432>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	4619      	mov	r1, r3
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f008 fe54 	bl	800c934 <HAL_PCD_DataOutStageCallback>
 8003c8c:	e008      	b.n	8003ca0 <PCD_EP_ISR_Handler+0x444>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	7819      	ldrb	r1, [r3, #0]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	695a      	ldr	r2, [r3, #20]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f7ff fcad 	bl	80035fa <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003ca0:	8a7b      	ldrh	r3, [r7, #18]
 8003ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d04d      	beq.n	8003d46 <PCD_EP_ISR_Handler+0x4ea>
      {
        ep = &hpcd->IN_ep[epindex];
 8003caa:	7d7b      	ldrb	r3, [r7, #21]
 8003cac:	015b      	lsls	r3, r3, #5
 8003cae:	3328      	adds	r3, #40	; 0x28
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	461a      	mov	r2, r3
 8003cbc:	7d7b      	ldrb	r3, [r7, #21]
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	4413      	add	r3, r2
 8003cc2:	881b      	ldrh	r3, [r3, #0]
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cce:	b29c      	uxth	r4, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	7d7b      	ldrb	r3, [r7, #21]
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	441a      	add	r2, r3
 8003cdc:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8003ce0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	00db      	lsls	r3, r3, #3
 8003cfa:	4413      	add	r3, r2
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	6812      	ldr	r2, [r2, #0]
 8003d00:	4413      	add	r3, r2
 8003d02:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003d06:	881b      	ldrh	r3, [r3, #0]
 8003d08:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	695a      	ldr	r2, [r3, #20]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	69db      	ldr	r3, [r3, #28]
 8003d18:	441a      	add	r2, r3
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d106      	bne.n	8003d34 <PCD_EP_ISR_Handler+0x4d8>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f008 fe19 	bl	800c964 <HAL_PCD_DataInStageCallback>
 8003d32:	e008      	b.n	8003d46 <PCD_EP_ISR_Handler+0x4ea>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	7819      	ldrb	r1, [r3, #0]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	695a      	ldr	r2, [r3, #20]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f7ff fca9 	bl	8003698 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	b21b      	sxth	r3, r3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	f6ff ad87 	blt.w	8003866 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3724      	adds	r7, #36	; 0x24
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd90      	pop	{r4, r7, pc}
 8003d62:	bf00      	nop
 8003d64:	ffff8080 	.word	0xffff8080
 8003d68:	ffff80c0 	.word	0xffff80c0

08003d6c <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b087      	sub	sp, #28
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	607b      	str	r3, [r7, #4]
 8003d76:	460b      	mov	r3, r1
 8003d78:	817b      	strh	r3, [r7, #10]
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003d7e:	897b      	ldrh	r3, [r7, #10]
 8003d80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d008      	beq.n	8003d9c <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d8a:	897b      	ldrh	r3, [r7, #10]
 8003d8c:	f003 0307 	and.w	r3, r3, #7
 8003d90:	015b      	lsls	r3, r3, #5
 8003d92:	3328      	adds	r3, #40	; 0x28
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	4413      	add	r3, r2
 8003d98:	617b      	str	r3, [r7, #20]
 8003d9a:	e006      	b.n	8003daa <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003d9c:	897b      	ldrh	r3, [r7, #10]
 8003d9e:	015b      	lsls	r3, r3, #5
 8003da0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003da4:	68fa      	ldr	r2, [r7, #12]
 8003da6:	4413      	add	r3, r2
 8003da8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003daa:	893b      	ldrh	r3, [r7, #8]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d107      	bne.n	8003dc0 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	2200      	movs	r2, #0
 8003db4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	b29a      	uxth	r2, r3
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	80da      	strh	r2, [r3, #6]
 8003dbe:	e00b      	b.n	8003dd8 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	b29a      	uxth	r2, r3
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	0c1b      	lsrs	r3, r3, #16
 8003dd2:	b29a      	uxth	r2, r3
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	371c      	adds	r7, #28
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr

08003de6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003de6:	b480      	push	{r7}
 8003de8:	b085      	sub	sp, #20
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	f043 0301 	orr.w	r3, r3, #1
 8003e10:	b29a      	uxth	r2, r3
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	f043 0302 	orr.w	r3, r3, #2
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3714      	adds	r7, #20
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
	...

08003e3c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003e40:	4b04      	ldr	r3, [pc, #16]	; (8003e54 <HAL_PWREx_GetVoltageRange+0x18>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	40007000 	.word	0x40007000

08003e58 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e66:	d130      	bne.n	8003eca <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e68:	4b23      	ldr	r3, [pc, #140]	; (8003ef8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e74:	d038      	beq.n	8003ee8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e76:	4b20      	ldr	r3, [pc, #128]	; (8003ef8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e7e:	4a1e      	ldr	r2, [pc, #120]	; (8003ef8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e84:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003e86:	4b1d      	ldr	r3, [pc, #116]	; (8003efc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2232      	movs	r2, #50	; 0x32
 8003e8c:	fb02 f303 	mul.w	r3, r2, r3
 8003e90:	4a1b      	ldr	r2, [pc, #108]	; (8003f00 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003e92:	fba2 2303 	umull	r2, r3, r2, r3
 8003e96:	0c9b      	lsrs	r3, r3, #18
 8003e98:	3301      	adds	r3, #1
 8003e9a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e9c:	e002      	b.n	8003ea4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ea4:	4b14      	ldr	r3, [pc, #80]	; (8003ef8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ea6:	695b      	ldr	r3, [r3, #20]
 8003ea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eb0:	d102      	bne.n	8003eb8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d1f2      	bne.n	8003e9e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003eb8:	4b0f      	ldr	r3, [pc, #60]	; (8003ef8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003eba:	695b      	ldr	r3, [r3, #20]
 8003ebc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ec0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ec4:	d110      	bne.n	8003ee8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e00f      	b.n	8003eea <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003eca:	4b0b      	ldr	r3, [pc, #44]	; (8003ef8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ed2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ed6:	d007      	beq.n	8003ee8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003ed8:	4b07      	ldr	r3, [pc, #28]	; (8003ef8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ee0:	4a05      	ldr	r2, [pc, #20]	; (8003ef8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ee2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ee6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3714      	adds	r7, #20
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop
 8003ef8:	40007000 	.word	0x40007000
 8003efc:	20000000 	.word	0x20000000
 8003f00:	431bde83 	.word	0x431bde83

08003f04 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003f04:	b480      	push	{r7}
 8003f06:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003f08:	4b05      	ldr	r3, [pc, #20]	; (8003f20 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	4a04      	ldr	r2, [pc, #16]	; (8003f20 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003f0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f12:	6053      	str	r3, [r2, #4]
}
 8003f14:	bf00      	nop
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	40007000 	.word	0x40007000

08003f24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b088      	sub	sp, #32
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d101      	bne.n	8003f36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e3db      	b.n	80046ee <HAL_RCC_OscConfig+0x7ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f36:	4ba4      	ldr	r3, [pc, #656]	; (80041c8 <HAL_RCC_OscConfig+0x2a4>)
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f003 030c 	and.w	r3, r3, #12
 8003f3e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f40:	4ba1      	ldr	r3, [pc, #644]	; (80041c8 <HAL_RCC_OscConfig+0x2a4>)
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	f003 0303 	and.w	r3, r3, #3
 8003f48:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0310 	and.w	r3, r3, #16
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	f000 80e1 	beq.w	800411a <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d007      	beq.n	8003f6e <HAL_RCC_OscConfig+0x4a>
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	2b0c      	cmp	r3, #12
 8003f62:	f040 8088 	bne.w	8004076 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	f040 8084 	bne.w	8004076 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f6e:	4b96      	ldr	r3, [pc, #600]	; (80041c8 <HAL_RCC_OscConfig+0x2a4>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d005      	beq.n	8003f86 <HAL_RCC_OscConfig+0x62>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e3b3      	b.n	80046ee <HAL_RCC_OscConfig+0x7ca>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a1a      	ldr	r2, [r3, #32]
 8003f8a:	4b8f      	ldr	r3, [pc, #572]	; (80041c8 <HAL_RCC_OscConfig+0x2a4>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0308 	and.w	r3, r3, #8
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d004      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x7c>
 8003f96:	4b8c      	ldr	r3, [pc, #560]	; (80041c8 <HAL_RCC_OscConfig+0x2a4>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f9e:	e005      	b.n	8003fac <HAL_RCC_OscConfig+0x88>
 8003fa0:	4b89      	ldr	r3, [pc, #548]	; (80041c8 <HAL_RCC_OscConfig+0x2a4>)
 8003fa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fa6:	091b      	lsrs	r3, r3, #4
 8003fa8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d223      	bcs.n	8003ff8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a1b      	ldr	r3, [r3, #32]
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f000 fd63 	bl	8004a80 <RCC_SetFlashLatencyFromMSIRange>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d001      	beq.n	8003fc4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e394      	b.n	80046ee <HAL_RCC_OscConfig+0x7ca>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003fc4:	4b80      	ldr	r3, [pc, #512]	; (80041c8 <HAL_RCC_OscConfig+0x2a4>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a7f      	ldr	r2, [pc, #508]	; (80041c8 <HAL_RCC_OscConfig+0x2a4>)
 8003fca:	f043 0308 	orr.w	r3, r3, #8
 8003fce:	6013      	str	r3, [r2, #0]
 8003fd0:	4b7d      	ldr	r3, [pc, #500]	; (80041c8 <HAL_RCC_OscConfig+0x2a4>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a1b      	ldr	r3, [r3, #32]
 8003fdc:	497a      	ldr	r1, [pc, #488]	; (80041c8 <HAL_RCC_OscConfig+0x2a4>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fe2:	4b79      	ldr	r3, [pc, #484]	; (80041c8 <HAL_RCC_OscConfig+0x2a4>)
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	69db      	ldr	r3, [r3, #28]
 8003fee:	021b      	lsls	r3, r3, #8
 8003ff0:	4975      	ldr	r1, [pc, #468]	; (80041c8 <HAL_RCC_OscConfig+0x2a4>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	604b      	str	r3, [r1, #4]
 8003ff6:	e022      	b.n	800403e <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ff8:	4b73      	ldr	r3, [pc, #460]	; (80041c8 <HAL_RCC_OscConfig+0x2a4>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a72      	ldr	r2, [pc, #456]	; (80041c8 <HAL_RCC_OscConfig+0x2a4>)
 8003ffe:	f043 0308 	orr.w	r3, r3, #8
 8004002:	6013      	str	r3, [r2, #0]
 8004004:	4b70      	ldr	r3, [pc, #448]	; (80041c8 <HAL_RCC_OscConfig+0x2a4>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a1b      	ldr	r3, [r3, #32]
 8004010:	496d      	ldr	r1, [pc, #436]	; (80041c8 <HAL_RCC_OscConfig+0x2a4>)
 8004012:	4313      	orrs	r3, r2
 8004014:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004016:	4b6c      	ldr	r3, [pc, #432]	; (80041c8 <HAL_RCC_OscConfig+0x2a4>)
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	69db      	ldr	r3, [r3, #28]
 8004022:	021b      	lsls	r3, r3, #8
 8004024:	4968      	ldr	r1, [pc, #416]	; (80041c8 <HAL_RCC_OscConfig+0x2a4>)
 8004026:	4313      	orrs	r3, r2
 8004028:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a1b      	ldr	r3, [r3, #32]
 800402e:	4618      	mov	r0, r3
 8004030:	f000 fd26 	bl	8004a80 <RCC_SetFlashLatencyFromMSIRange>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d001      	beq.n	800403e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e357      	b.n	80046ee <HAL_RCC_OscConfig+0x7ca>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800403e:	f000 fc41 	bl	80048c4 <HAL_RCC_GetSysClockFreq>
 8004042:	4601      	mov	r1, r0
 8004044:	4b60      	ldr	r3, [pc, #384]	; (80041c8 <HAL_RCC_OscConfig+0x2a4>)
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	091b      	lsrs	r3, r3, #4
 800404a:	f003 030f 	and.w	r3, r3, #15
 800404e:	4a5f      	ldr	r2, [pc, #380]	; (80041cc <HAL_RCC_OscConfig+0x2a8>)
 8004050:	5cd3      	ldrb	r3, [r2, r3]
 8004052:	f003 031f 	and.w	r3, r3, #31
 8004056:	fa21 f303 	lsr.w	r3, r1, r3
 800405a:	4a5d      	ldr	r2, [pc, #372]	; (80041d0 <HAL_RCC_OscConfig+0x2ac>)
 800405c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800405e:	4b5d      	ldr	r3, [pc, #372]	; (80041d4 <HAL_RCC_OscConfig+0x2b0>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4618      	mov	r0, r3
 8004064:	f7fd f8ee 	bl	8001244 <HAL_InitTick>
 8004068:	4603      	mov	r3, r0
 800406a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800406c:	7bfb      	ldrb	r3, [r7, #15]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d052      	beq.n	8004118 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8004072:	7bfb      	ldrb	r3, [r7, #15]
 8004074:	e33b      	b.n	80046ee <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d032      	beq.n	80040e4 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800407e:	4b52      	ldr	r3, [pc, #328]	; (80041c8 <HAL_RCC_OscConfig+0x2a4>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a51      	ldr	r2, [pc, #324]	; (80041c8 <HAL_RCC_OscConfig+0x2a4>)
 8004084:	f043 0301 	orr.w	r3, r3, #1
 8004088:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800408a:	f7fe f81b 	bl	80020c4 <HAL_GetTick>
 800408e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004090:	e008      	b.n	80040a4 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004092:	f7fe f817 	bl	80020c4 <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	2b02      	cmp	r3, #2
 800409e:	d901      	bls.n	80040a4 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e324      	b.n	80046ee <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80040a4:	4b48      	ldr	r3, [pc, #288]	; (80041c8 <HAL_RCC_OscConfig+0x2a4>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0302 	and.w	r3, r3, #2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d0f0      	beq.n	8004092 <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040b0:	4b45      	ldr	r3, [pc, #276]	; (80041c8 <HAL_RCC_OscConfig+0x2a4>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a44      	ldr	r2, [pc, #272]	; (80041c8 <HAL_RCC_OscConfig+0x2a4>)
 80040b6:	f043 0308 	orr.w	r3, r3, #8
 80040ba:	6013      	str	r3, [r2, #0]
 80040bc:	4b42      	ldr	r3, [pc, #264]	; (80041c8 <HAL_RCC_OscConfig+0x2a4>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a1b      	ldr	r3, [r3, #32]
 80040c8:	493f      	ldr	r1, [pc, #252]	; (80041c8 <HAL_RCC_OscConfig+0x2a4>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040ce:	4b3e      	ldr	r3, [pc, #248]	; (80041c8 <HAL_RCC_OscConfig+0x2a4>)
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	69db      	ldr	r3, [r3, #28]
 80040da:	021b      	lsls	r3, r3, #8
 80040dc:	493a      	ldr	r1, [pc, #232]	; (80041c8 <HAL_RCC_OscConfig+0x2a4>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	604b      	str	r3, [r1, #4]
 80040e2:	e01a      	b.n	800411a <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80040e4:	4b38      	ldr	r3, [pc, #224]	; (80041c8 <HAL_RCC_OscConfig+0x2a4>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a37      	ldr	r2, [pc, #220]	; (80041c8 <HAL_RCC_OscConfig+0x2a4>)
 80040ea:	f023 0301 	bic.w	r3, r3, #1
 80040ee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80040f0:	f7fd ffe8 	bl	80020c4 <HAL_GetTick>
 80040f4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80040f6:	e008      	b.n	800410a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80040f8:	f7fd ffe4 	bl	80020c4 <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	2b02      	cmp	r3, #2
 8004104:	d901      	bls.n	800410a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e2f1      	b.n	80046ee <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800410a:	4b2f      	ldr	r3, [pc, #188]	; (80041c8 <HAL_RCC_OscConfig+0x2a4>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1f0      	bne.n	80040f8 <HAL_RCC_OscConfig+0x1d4>
 8004116:	e000      	b.n	800411a <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004118:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	2b00      	cmp	r3, #0
 8004124:	d074      	beq.n	8004210 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	2b08      	cmp	r3, #8
 800412a:	d005      	beq.n	8004138 <HAL_RCC_OscConfig+0x214>
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	2b0c      	cmp	r3, #12
 8004130:	d10e      	bne.n	8004150 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	2b03      	cmp	r3, #3
 8004136:	d10b      	bne.n	8004150 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004138:	4b23      	ldr	r3, [pc, #140]	; (80041c8 <HAL_RCC_OscConfig+0x2a4>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d064      	beq.n	800420e <HAL_RCC_OscConfig+0x2ea>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d160      	bne.n	800420e <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e2ce      	b.n	80046ee <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004158:	d106      	bne.n	8004168 <HAL_RCC_OscConfig+0x244>
 800415a:	4b1b      	ldr	r3, [pc, #108]	; (80041c8 <HAL_RCC_OscConfig+0x2a4>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a1a      	ldr	r2, [pc, #104]	; (80041c8 <HAL_RCC_OscConfig+0x2a4>)
 8004160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004164:	6013      	str	r3, [r2, #0]
 8004166:	e01d      	b.n	80041a4 <HAL_RCC_OscConfig+0x280>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004170:	d10c      	bne.n	800418c <HAL_RCC_OscConfig+0x268>
 8004172:	4b15      	ldr	r3, [pc, #84]	; (80041c8 <HAL_RCC_OscConfig+0x2a4>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a14      	ldr	r2, [pc, #80]	; (80041c8 <HAL_RCC_OscConfig+0x2a4>)
 8004178:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800417c:	6013      	str	r3, [r2, #0]
 800417e:	4b12      	ldr	r3, [pc, #72]	; (80041c8 <HAL_RCC_OscConfig+0x2a4>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a11      	ldr	r2, [pc, #68]	; (80041c8 <HAL_RCC_OscConfig+0x2a4>)
 8004184:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004188:	6013      	str	r3, [r2, #0]
 800418a:	e00b      	b.n	80041a4 <HAL_RCC_OscConfig+0x280>
 800418c:	4b0e      	ldr	r3, [pc, #56]	; (80041c8 <HAL_RCC_OscConfig+0x2a4>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a0d      	ldr	r2, [pc, #52]	; (80041c8 <HAL_RCC_OscConfig+0x2a4>)
 8004192:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004196:	6013      	str	r3, [r2, #0]
 8004198:	4b0b      	ldr	r3, [pc, #44]	; (80041c8 <HAL_RCC_OscConfig+0x2a4>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a0a      	ldr	r2, [pc, #40]	; (80041c8 <HAL_RCC_OscConfig+0x2a4>)
 800419e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d01c      	beq.n	80041e6 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ac:	f7fd ff8a 	bl	80020c4 <HAL_GetTick>
 80041b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041b2:	e011      	b.n	80041d8 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041b4:	f7fd ff86 	bl	80020c4 <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	2b64      	cmp	r3, #100	; 0x64
 80041c0:	d90a      	bls.n	80041d8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e293      	b.n	80046ee <HAL_RCC_OscConfig+0x7ca>
 80041c6:	bf00      	nop
 80041c8:	40021000 	.word	0x40021000
 80041cc:	0800d11c 	.word	0x0800d11c
 80041d0:	20000000 	.word	0x20000000
 80041d4:	20000004 	.word	0x20000004
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041d8:	4bae      	ldr	r3, [pc, #696]	; (8004494 <HAL_RCC_OscConfig+0x570>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d0e7      	beq.n	80041b4 <HAL_RCC_OscConfig+0x290>
 80041e4:	e014      	b.n	8004210 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e6:	f7fd ff6d 	bl	80020c4 <HAL_GetTick>
 80041ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041ec:	e008      	b.n	8004200 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041ee:	f7fd ff69 	bl	80020c4 <HAL_GetTick>
 80041f2:	4602      	mov	r2, r0
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	2b64      	cmp	r3, #100	; 0x64
 80041fa:	d901      	bls.n	8004200 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e276      	b.n	80046ee <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004200:	4ba4      	ldr	r3, [pc, #656]	; (8004494 <HAL_RCC_OscConfig+0x570>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d1f0      	bne.n	80041ee <HAL_RCC_OscConfig+0x2ca>
 800420c:	e000      	b.n	8004210 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800420e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0302 	and.w	r3, r3, #2
 8004218:	2b00      	cmp	r3, #0
 800421a:	d060      	beq.n	80042de <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	2b04      	cmp	r3, #4
 8004220:	d005      	beq.n	800422e <HAL_RCC_OscConfig+0x30a>
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	2b0c      	cmp	r3, #12
 8004226:	d119      	bne.n	800425c <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	2b02      	cmp	r3, #2
 800422c:	d116      	bne.n	800425c <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800422e:	4b99      	ldr	r3, [pc, #612]	; (8004494 <HAL_RCC_OscConfig+0x570>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004236:	2b00      	cmp	r3, #0
 8004238:	d005      	beq.n	8004246 <HAL_RCC_OscConfig+0x322>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d101      	bne.n	8004246 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e253      	b.n	80046ee <HAL_RCC_OscConfig+0x7ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004246:	4b93      	ldr	r3, [pc, #588]	; (8004494 <HAL_RCC_OscConfig+0x570>)
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	061b      	lsls	r3, r3, #24
 8004254:	498f      	ldr	r1, [pc, #572]	; (8004494 <HAL_RCC_OscConfig+0x570>)
 8004256:	4313      	orrs	r3, r2
 8004258:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800425a:	e040      	b.n	80042de <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d023      	beq.n	80042ac <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004264:	4b8b      	ldr	r3, [pc, #556]	; (8004494 <HAL_RCC_OscConfig+0x570>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a8a      	ldr	r2, [pc, #552]	; (8004494 <HAL_RCC_OscConfig+0x570>)
 800426a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800426e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004270:	f7fd ff28 	bl	80020c4 <HAL_GetTick>
 8004274:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004276:	e008      	b.n	800428a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004278:	f7fd ff24 	bl	80020c4 <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	2b02      	cmp	r3, #2
 8004284:	d901      	bls.n	800428a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e231      	b.n	80046ee <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800428a:	4b82      	ldr	r3, [pc, #520]	; (8004494 <HAL_RCC_OscConfig+0x570>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004292:	2b00      	cmp	r3, #0
 8004294:	d0f0      	beq.n	8004278 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004296:	4b7f      	ldr	r3, [pc, #508]	; (8004494 <HAL_RCC_OscConfig+0x570>)
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	061b      	lsls	r3, r3, #24
 80042a4:	497b      	ldr	r1, [pc, #492]	; (8004494 <HAL_RCC_OscConfig+0x570>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	604b      	str	r3, [r1, #4]
 80042aa:	e018      	b.n	80042de <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042ac:	4b79      	ldr	r3, [pc, #484]	; (8004494 <HAL_RCC_OscConfig+0x570>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a78      	ldr	r2, [pc, #480]	; (8004494 <HAL_RCC_OscConfig+0x570>)
 80042b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b8:	f7fd ff04 	bl	80020c4 <HAL_GetTick>
 80042bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80042be:	e008      	b.n	80042d2 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042c0:	f7fd ff00 	bl	80020c4 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d901      	bls.n	80042d2 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e20d      	b.n	80046ee <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80042d2:	4b70      	ldr	r3, [pc, #448]	; (8004494 <HAL_RCC_OscConfig+0x570>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d1f0      	bne.n	80042c0 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0308 	and.w	r3, r3, #8
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d03c      	beq.n	8004364 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	695b      	ldr	r3, [r3, #20]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d01c      	beq.n	800432c <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042f2:	4b68      	ldr	r3, [pc, #416]	; (8004494 <HAL_RCC_OscConfig+0x570>)
 80042f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042f8:	4a66      	ldr	r2, [pc, #408]	; (8004494 <HAL_RCC_OscConfig+0x570>)
 80042fa:	f043 0301 	orr.w	r3, r3, #1
 80042fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004302:	f7fd fedf 	bl	80020c4 <HAL_GetTick>
 8004306:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004308:	e008      	b.n	800431c <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800430a:	f7fd fedb 	bl	80020c4 <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	2b02      	cmp	r3, #2
 8004316:	d901      	bls.n	800431c <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e1e8      	b.n	80046ee <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800431c:	4b5d      	ldr	r3, [pc, #372]	; (8004494 <HAL_RCC_OscConfig+0x570>)
 800431e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004322:	f003 0302 	and.w	r3, r3, #2
 8004326:	2b00      	cmp	r3, #0
 8004328:	d0ef      	beq.n	800430a <HAL_RCC_OscConfig+0x3e6>
 800432a:	e01b      	b.n	8004364 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800432c:	4b59      	ldr	r3, [pc, #356]	; (8004494 <HAL_RCC_OscConfig+0x570>)
 800432e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004332:	4a58      	ldr	r2, [pc, #352]	; (8004494 <HAL_RCC_OscConfig+0x570>)
 8004334:	f023 0301 	bic.w	r3, r3, #1
 8004338:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800433c:	f7fd fec2 	bl	80020c4 <HAL_GetTick>
 8004340:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004342:	e008      	b.n	8004356 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004344:	f7fd febe 	bl	80020c4 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	2b02      	cmp	r3, #2
 8004350:	d901      	bls.n	8004356 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e1cb      	b.n	80046ee <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004356:	4b4f      	ldr	r3, [pc, #316]	; (8004494 <HAL_RCC_OscConfig+0x570>)
 8004358:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800435c:	f003 0302 	and.w	r3, r3, #2
 8004360:	2b00      	cmp	r3, #0
 8004362:	d1ef      	bne.n	8004344 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0304 	and.w	r3, r3, #4
 800436c:	2b00      	cmp	r3, #0
 800436e:	f000 80a5 	beq.w	80044bc <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004372:	2300      	movs	r3, #0
 8004374:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004376:	4b47      	ldr	r3, [pc, #284]	; (8004494 <HAL_RCC_OscConfig+0x570>)
 8004378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800437a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d10d      	bne.n	800439e <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004382:	4b44      	ldr	r3, [pc, #272]	; (8004494 <HAL_RCC_OscConfig+0x570>)
 8004384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004386:	4a43      	ldr	r2, [pc, #268]	; (8004494 <HAL_RCC_OscConfig+0x570>)
 8004388:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800438c:	6593      	str	r3, [r2, #88]	; 0x58
 800438e:	4b41      	ldr	r3, [pc, #260]	; (8004494 <HAL_RCC_OscConfig+0x570>)
 8004390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004396:	60bb      	str	r3, [r7, #8]
 8004398:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800439a:	2301      	movs	r3, #1
 800439c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800439e:	4b3e      	ldr	r3, [pc, #248]	; (8004498 <HAL_RCC_OscConfig+0x574>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d118      	bne.n	80043dc <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043aa:	4b3b      	ldr	r3, [pc, #236]	; (8004498 <HAL_RCC_OscConfig+0x574>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a3a      	ldr	r2, [pc, #232]	; (8004498 <HAL_RCC_OscConfig+0x574>)
 80043b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043b6:	f7fd fe85 	bl	80020c4 <HAL_GetTick>
 80043ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043bc:	e008      	b.n	80043d0 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043be:	f7fd fe81 	bl	80020c4 <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d901      	bls.n	80043d0 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e18e      	b.n	80046ee <HAL_RCC_OscConfig+0x7ca>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043d0:	4b31      	ldr	r3, [pc, #196]	; (8004498 <HAL_RCC_OscConfig+0x574>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d0f0      	beq.n	80043be <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d108      	bne.n	80043f6 <HAL_RCC_OscConfig+0x4d2>
 80043e4:	4b2b      	ldr	r3, [pc, #172]	; (8004494 <HAL_RCC_OscConfig+0x570>)
 80043e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ea:	4a2a      	ldr	r2, [pc, #168]	; (8004494 <HAL_RCC_OscConfig+0x570>)
 80043ec:	f043 0301 	orr.w	r3, r3, #1
 80043f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043f4:	e024      	b.n	8004440 <HAL_RCC_OscConfig+0x51c>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	2b05      	cmp	r3, #5
 80043fc:	d110      	bne.n	8004420 <HAL_RCC_OscConfig+0x4fc>
 80043fe:	4b25      	ldr	r3, [pc, #148]	; (8004494 <HAL_RCC_OscConfig+0x570>)
 8004400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004404:	4a23      	ldr	r2, [pc, #140]	; (8004494 <HAL_RCC_OscConfig+0x570>)
 8004406:	f043 0304 	orr.w	r3, r3, #4
 800440a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800440e:	4b21      	ldr	r3, [pc, #132]	; (8004494 <HAL_RCC_OscConfig+0x570>)
 8004410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004414:	4a1f      	ldr	r2, [pc, #124]	; (8004494 <HAL_RCC_OscConfig+0x570>)
 8004416:	f043 0301 	orr.w	r3, r3, #1
 800441a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800441e:	e00f      	b.n	8004440 <HAL_RCC_OscConfig+0x51c>
 8004420:	4b1c      	ldr	r3, [pc, #112]	; (8004494 <HAL_RCC_OscConfig+0x570>)
 8004422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004426:	4a1b      	ldr	r2, [pc, #108]	; (8004494 <HAL_RCC_OscConfig+0x570>)
 8004428:	f023 0301 	bic.w	r3, r3, #1
 800442c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004430:	4b18      	ldr	r3, [pc, #96]	; (8004494 <HAL_RCC_OscConfig+0x570>)
 8004432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004436:	4a17      	ldr	r2, [pc, #92]	; (8004494 <HAL_RCC_OscConfig+0x570>)
 8004438:	f023 0304 	bic.w	r3, r3, #4
 800443c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d016      	beq.n	8004476 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004448:	f7fd fe3c 	bl	80020c4 <HAL_GetTick>
 800444c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800444e:	e00a      	b.n	8004466 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004450:	f7fd fe38 	bl	80020c4 <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	f241 3288 	movw	r2, #5000	; 0x1388
 800445e:	4293      	cmp	r3, r2
 8004460:	d901      	bls.n	8004466 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e143      	b.n	80046ee <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004466:	4b0b      	ldr	r3, [pc, #44]	; (8004494 <HAL_RCC_OscConfig+0x570>)
 8004468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800446c:	f003 0302 	and.w	r3, r3, #2
 8004470:	2b00      	cmp	r3, #0
 8004472:	d0ed      	beq.n	8004450 <HAL_RCC_OscConfig+0x52c>
 8004474:	e019      	b.n	80044aa <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004476:	f7fd fe25 	bl	80020c4 <HAL_GetTick>
 800447a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800447c:	e00e      	b.n	800449c <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800447e:	f7fd fe21 	bl	80020c4 <HAL_GetTick>
 8004482:	4602      	mov	r2, r0
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	f241 3288 	movw	r2, #5000	; 0x1388
 800448c:	4293      	cmp	r3, r2
 800448e:	d905      	bls.n	800449c <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e12c      	b.n	80046ee <HAL_RCC_OscConfig+0x7ca>
 8004494:	40021000 	.word	0x40021000
 8004498:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800449c:	4b96      	ldr	r3, [pc, #600]	; (80046f8 <HAL_RCC_OscConfig+0x7d4>)
 800449e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d1e9      	bne.n	800447e <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044aa:	7ffb      	ldrb	r3, [r7, #31]
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d105      	bne.n	80044bc <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044b0:	4b91      	ldr	r3, [pc, #580]	; (80046f8 <HAL_RCC_OscConfig+0x7d4>)
 80044b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044b4:	4a90      	ldr	r2, [pc, #576]	; (80046f8 <HAL_RCC_OscConfig+0x7d4>)
 80044b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044ba:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0320 	and.w	r3, r3, #32
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d03c      	beq.n	8004542 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d01c      	beq.n	800450a <HAL_RCC_OscConfig+0x5e6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80044d0:	4b89      	ldr	r3, [pc, #548]	; (80046f8 <HAL_RCC_OscConfig+0x7d4>)
 80044d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044d6:	4a88      	ldr	r2, [pc, #544]	; (80046f8 <HAL_RCC_OscConfig+0x7d4>)
 80044d8:	f043 0301 	orr.w	r3, r3, #1
 80044dc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044e0:	f7fd fdf0 	bl	80020c4 <HAL_GetTick>
 80044e4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80044e6:	e008      	b.n	80044fa <HAL_RCC_OscConfig+0x5d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044e8:	f7fd fdec 	bl	80020c4 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d901      	bls.n	80044fa <HAL_RCC_OscConfig+0x5d6>
        {
          return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e0f9      	b.n	80046ee <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80044fa:	4b7f      	ldr	r3, [pc, #508]	; (80046f8 <HAL_RCC_OscConfig+0x7d4>)
 80044fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004500:	f003 0302 	and.w	r3, r3, #2
 8004504:	2b00      	cmp	r3, #0
 8004506:	d0ef      	beq.n	80044e8 <HAL_RCC_OscConfig+0x5c4>
 8004508:	e01b      	b.n	8004542 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800450a:	4b7b      	ldr	r3, [pc, #492]	; (80046f8 <HAL_RCC_OscConfig+0x7d4>)
 800450c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004510:	4a79      	ldr	r2, [pc, #484]	; (80046f8 <HAL_RCC_OscConfig+0x7d4>)
 8004512:	f023 0301 	bic.w	r3, r3, #1
 8004516:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800451a:	f7fd fdd3 	bl	80020c4 <HAL_GetTick>
 800451e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004520:	e008      	b.n	8004534 <HAL_RCC_OscConfig+0x610>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004522:	f7fd fdcf 	bl	80020c4 <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	2b02      	cmp	r3, #2
 800452e:	d901      	bls.n	8004534 <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e0dc      	b.n	80046ee <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004534:	4b70      	ldr	r3, [pc, #448]	; (80046f8 <HAL_RCC_OscConfig+0x7d4>)
 8004536:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1ef      	bne.n	8004522 <HAL_RCC_OscConfig+0x5fe>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004546:	2b00      	cmp	r3, #0
 8004548:	f000 80d0 	beq.w	80046ec <HAL_RCC_OscConfig+0x7c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	2b0c      	cmp	r3, #12
 8004550:	f000 808d 	beq.w	800466e <HAL_RCC_OscConfig+0x74a>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004558:	2b02      	cmp	r3, #2
 800455a:	d15a      	bne.n	8004612 <HAL_RCC_OscConfig+0x6ee>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800455c:	4b66      	ldr	r3, [pc, #408]	; (80046f8 <HAL_RCC_OscConfig+0x7d4>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a65      	ldr	r2, [pc, #404]	; (80046f8 <HAL_RCC_OscConfig+0x7d4>)
 8004562:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004566:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004568:	f7fd fdac 	bl	80020c4 <HAL_GetTick>
 800456c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800456e:	e008      	b.n	8004582 <HAL_RCC_OscConfig+0x65e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004570:	f7fd fda8 	bl	80020c4 <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	2b02      	cmp	r3, #2
 800457c:	d901      	bls.n	8004582 <HAL_RCC_OscConfig+0x65e>
          {
            return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e0b5      	b.n	80046ee <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004582:	4b5d      	ldr	r3, [pc, #372]	; (80046f8 <HAL_RCC_OscConfig+0x7d4>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1f0      	bne.n	8004570 <HAL_RCC_OscConfig+0x64c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800458e:	4b5a      	ldr	r3, [pc, #360]	; (80046f8 <HAL_RCC_OscConfig+0x7d4>)
 8004590:	68da      	ldr	r2, [r3, #12]
 8004592:	4b5a      	ldr	r3, [pc, #360]	; (80046fc <HAL_RCC_OscConfig+0x7d8>)
 8004594:	4013      	ands	r3, r2
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800459e:	3a01      	subs	r2, #1
 80045a0:	0112      	lsls	r2, r2, #4
 80045a2:	4311      	orrs	r1, r2
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80045a8:	0212      	lsls	r2, r2, #8
 80045aa:	4311      	orrs	r1, r2
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80045b0:	0852      	lsrs	r2, r2, #1
 80045b2:	3a01      	subs	r2, #1
 80045b4:	0552      	lsls	r2, r2, #21
 80045b6:	4311      	orrs	r1, r2
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80045bc:	0852      	lsrs	r2, r2, #1
 80045be:	3a01      	subs	r2, #1
 80045c0:	0652      	lsls	r2, r2, #25
 80045c2:	4311      	orrs	r1, r2
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80045c8:	06d2      	lsls	r2, r2, #27
 80045ca:	430a      	orrs	r2, r1
 80045cc:	494a      	ldr	r1, [pc, #296]	; (80046f8 <HAL_RCC_OscConfig+0x7d4>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045d2:	4b49      	ldr	r3, [pc, #292]	; (80046f8 <HAL_RCC_OscConfig+0x7d4>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a48      	ldr	r2, [pc, #288]	; (80046f8 <HAL_RCC_OscConfig+0x7d4>)
 80045d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045dc:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80045de:	4b46      	ldr	r3, [pc, #280]	; (80046f8 <HAL_RCC_OscConfig+0x7d4>)
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	4a45      	ldr	r2, [pc, #276]	; (80046f8 <HAL_RCC_OscConfig+0x7d4>)
 80045e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045e8:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ea:	f7fd fd6b 	bl	80020c4 <HAL_GetTick>
 80045ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045f0:	e008      	b.n	8004604 <HAL_RCC_OscConfig+0x6e0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045f2:	f7fd fd67 	bl	80020c4 <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d901      	bls.n	8004604 <HAL_RCC_OscConfig+0x6e0>
          {
            return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e074      	b.n	80046ee <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004604:	4b3c      	ldr	r3, [pc, #240]	; (80046f8 <HAL_RCC_OscConfig+0x7d4>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d0f0      	beq.n	80045f2 <HAL_RCC_OscConfig+0x6ce>
 8004610:	e06c      	b.n	80046ec <HAL_RCC_OscConfig+0x7c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004612:	4b39      	ldr	r3, [pc, #228]	; (80046f8 <HAL_RCC_OscConfig+0x7d4>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a38      	ldr	r2, [pc, #224]	; (80046f8 <HAL_RCC_OscConfig+0x7d4>)
 8004618:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800461c:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800461e:	4b36      	ldr	r3, [pc, #216]	; (80046f8 <HAL_RCC_OscConfig+0x7d4>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d105      	bne.n	8004636 <HAL_RCC_OscConfig+0x712>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800462a:	4b33      	ldr	r3, [pc, #204]	; (80046f8 <HAL_RCC_OscConfig+0x7d4>)
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	4a32      	ldr	r2, [pc, #200]	; (80046f8 <HAL_RCC_OscConfig+0x7d4>)
 8004630:	f023 0303 	bic.w	r3, r3, #3
 8004634:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004636:	4b30      	ldr	r3, [pc, #192]	; (80046f8 <HAL_RCC_OscConfig+0x7d4>)
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	4a2f      	ldr	r2, [pc, #188]	; (80046f8 <HAL_RCC_OscConfig+0x7d4>)
 800463c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004640:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004644:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004646:	f7fd fd3d 	bl	80020c4 <HAL_GetTick>
 800464a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800464c:	e008      	b.n	8004660 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800464e:	f7fd fd39 	bl	80020c4 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	2b02      	cmp	r3, #2
 800465a:	d901      	bls.n	8004660 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e046      	b.n	80046ee <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004660:	4b25      	ldr	r3, [pc, #148]	; (80046f8 <HAL_RCC_OscConfig+0x7d4>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1f0      	bne.n	800464e <HAL_RCC_OscConfig+0x72a>
 800466c:	e03e      	b.n	80046ec <HAL_RCC_OscConfig+0x7c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004672:	2b01      	cmp	r3, #1
 8004674:	d101      	bne.n	800467a <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e039      	b.n	80046ee <HAL_RCC_OscConfig+0x7ca>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 800467a:	4b1f      	ldr	r3, [pc, #124]	; (80046f8 <HAL_RCC_OscConfig+0x7d4>)
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	f003 0203 	and.w	r2, r3, #3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468a:	429a      	cmp	r2, r3
 800468c:	d12c      	bne.n	80046e8 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004698:	3b01      	subs	r3, #1
 800469a:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800469c:	429a      	cmp	r2, r3
 800469e:	d123      	bne.n	80046e8 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046aa:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d11b      	bne.n	80046e8 <HAL_RCC_OscConfig+0x7c4>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ba:	06db      	lsls	r3, r3, #27
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046bc:	429a      	cmp	r2, r3
 80046be:	d113      	bne.n	80046e8 <HAL_RCC_OscConfig+0x7c4>
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ca:	085b      	lsrs	r3, r3, #1
 80046cc:	3b01      	subs	r3, #1
 80046ce:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d109      	bne.n	80046e8 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046de:	085b      	lsrs	r3, r3, #1
 80046e0:	3b01      	subs	r3, #1
 80046e2:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d001      	beq.n	80046ec <HAL_RCC_OscConfig+0x7c8>
        {
          return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e000      	b.n	80046ee <HAL_RCC_OscConfig+0x7ca>
        }
      }
    }
  }
  return HAL_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3720      	adds	r7, #32
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	40021000 	.word	0x40021000
 80046fc:	019d808c 	.word	0x019d808c

08004700 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d101      	bne.n	8004714 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e0c8      	b.n	80048a6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004714:	4b66      	ldr	r3, [pc, #408]	; (80048b0 <HAL_RCC_ClockConfig+0x1b0>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0307 	and.w	r3, r3, #7
 800471c:	683a      	ldr	r2, [r7, #0]
 800471e:	429a      	cmp	r2, r3
 8004720:	d910      	bls.n	8004744 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004722:	4b63      	ldr	r3, [pc, #396]	; (80048b0 <HAL_RCC_ClockConfig+0x1b0>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f023 0207 	bic.w	r2, r3, #7
 800472a:	4961      	ldr	r1, [pc, #388]	; (80048b0 <HAL_RCC_ClockConfig+0x1b0>)
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	4313      	orrs	r3, r2
 8004730:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004732:	4b5f      	ldr	r3, [pc, #380]	; (80048b0 <HAL_RCC_ClockConfig+0x1b0>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0307 	and.w	r3, r3, #7
 800473a:	683a      	ldr	r2, [r7, #0]
 800473c:	429a      	cmp	r2, r3
 800473e:	d001      	beq.n	8004744 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e0b0      	b.n	80048a6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0301 	and.w	r3, r3, #1
 800474c:	2b00      	cmp	r3, #0
 800474e:	d04c      	beq.n	80047ea <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	2b03      	cmp	r3, #3
 8004756:	d107      	bne.n	8004768 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004758:	4b56      	ldr	r3, [pc, #344]	; (80048b4 <HAL_RCC_ClockConfig+0x1b4>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d121      	bne.n	80047a8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e09e      	b.n	80048a6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	2b02      	cmp	r3, #2
 800476e:	d107      	bne.n	8004780 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004770:	4b50      	ldr	r3, [pc, #320]	; (80048b4 <HAL_RCC_ClockConfig+0x1b4>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d115      	bne.n	80047a8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e092      	b.n	80048a6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d107      	bne.n	8004798 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004788:	4b4a      	ldr	r3, [pc, #296]	; (80048b4 <HAL_RCC_ClockConfig+0x1b4>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0302 	and.w	r3, r3, #2
 8004790:	2b00      	cmp	r3, #0
 8004792:	d109      	bne.n	80047a8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e086      	b.n	80048a6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004798:	4b46      	ldr	r3, [pc, #280]	; (80048b4 <HAL_RCC_ClockConfig+0x1b4>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d101      	bne.n	80047a8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e07e      	b.n	80048a6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80047a8:	4b42      	ldr	r3, [pc, #264]	; (80048b4 <HAL_RCC_ClockConfig+0x1b4>)
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f023 0203 	bic.w	r2, r3, #3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	493f      	ldr	r1, [pc, #252]	; (80048b4 <HAL_RCC_ClockConfig+0x1b4>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047ba:	f7fd fc83 	bl	80020c4 <HAL_GetTick>
 80047be:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047c0:	e00a      	b.n	80047d8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047c2:	f7fd fc7f 	bl	80020c4 <HAL_GetTick>
 80047c6:	4602      	mov	r2, r0
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d901      	bls.n	80047d8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80047d4:	2303      	movs	r3, #3
 80047d6:	e066      	b.n	80048a6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047d8:	4b36      	ldr	r3, [pc, #216]	; (80048b4 <HAL_RCC_ClockConfig+0x1b4>)
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f003 020c 	and.w	r2, r3, #12
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d1eb      	bne.n	80047c2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0302 	and.w	r3, r3, #2
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d008      	beq.n	8004808 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047f6:	4b2f      	ldr	r3, [pc, #188]	; (80048b4 <HAL_RCC_ClockConfig+0x1b4>)
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	492c      	ldr	r1, [pc, #176]	; (80048b4 <HAL_RCC_ClockConfig+0x1b4>)
 8004804:	4313      	orrs	r3, r2
 8004806:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004808:	4b29      	ldr	r3, [pc, #164]	; (80048b0 <HAL_RCC_ClockConfig+0x1b0>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0307 	and.w	r3, r3, #7
 8004810:	683a      	ldr	r2, [r7, #0]
 8004812:	429a      	cmp	r2, r3
 8004814:	d210      	bcs.n	8004838 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004816:	4b26      	ldr	r3, [pc, #152]	; (80048b0 <HAL_RCC_ClockConfig+0x1b0>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f023 0207 	bic.w	r2, r3, #7
 800481e:	4924      	ldr	r1, [pc, #144]	; (80048b0 <HAL_RCC_ClockConfig+0x1b0>)
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	4313      	orrs	r3, r2
 8004824:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004826:	4b22      	ldr	r3, [pc, #136]	; (80048b0 <HAL_RCC_ClockConfig+0x1b0>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0307 	and.w	r3, r3, #7
 800482e:	683a      	ldr	r2, [r7, #0]
 8004830:	429a      	cmp	r2, r3
 8004832:	d001      	beq.n	8004838 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e036      	b.n	80048a6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0304 	and.w	r3, r3, #4
 8004840:	2b00      	cmp	r3, #0
 8004842:	d008      	beq.n	8004856 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004844:	4b1b      	ldr	r3, [pc, #108]	; (80048b4 <HAL_RCC_ClockConfig+0x1b4>)
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	4918      	ldr	r1, [pc, #96]	; (80048b4 <HAL_RCC_ClockConfig+0x1b4>)
 8004852:	4313      	orrs	r3, r2
 8004854:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0308 	and.w	r3, r3, #8
 800485e:	2b00      	cmp	r3, #0
 8004860:	d009      	beq.n	8004876 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004862:	4b14      	ldr	r3, [pc, #80]	; (80048b4 <HAL_RCC_ClockConfig+0x1b4>)
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	00db      	lsls	r3, r3, #3
 8004870:	4910      	ldr	r1, [pc, #64]	; (80048b4 <HAL_RCC_ClockConfig+0x1b4>)
 8004872:	4313      	orrs	r3, r2
 8004874:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004876:	f000 f825 	bl	80048c4 <HAL_RCC_GetSysClockFreq>
 800487a:	4601      	mov	r1, r0
 800487c:	4b0d      	ldr	r3, [pc, #52]	; (80048b4 <HAL_RCC_ClockConfig+0x1b4>)
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	091b      	lsrs	r3, r3, #4
 8004882:	f003 030f 	and.w	r3, r3, #15
 8004886:	4a0c      	ldr	r2, [pc, #48]	; (80048b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004888:	5cd3      	ldrb	r3, [r2, r3]
 800488a:	f003 031f 	and.w	r3, r3, #31
 800488e:	fa21 f303 	lsr.w	r3, r1, r3
 8004892:	4a0a      	ldr	r2, [pc, #40]	; (80048bc <HAL_RCC_ClockConfig+0x1bc>)
 8004894:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004896:	4b0a      	ldr	r3, [pc, #40]	; (80048c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4618      	mov	r0, r3
 800489c:	f7fc fcd2 	bl	8001244 <HAL_InitTick>
 80048a0:	4603      	mov	r3, r0
 80048a2:	72fb      	strb	r3, [r7, #11]

  return status;
 80048a4:	7afb      	ldrb	r3, [r7, #11]
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3710      	adds	r7, #16
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	40022000 	.word	0x40022000
 80048b4:	40021000 	.word	0x40021000
 80048b8:	0800d11c 	.word	0x0800d11c
 80048bc:	20000000 	.word	0x20000000
 80048c0:	20000004 	.word	0x20000004

080048c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b089      	sub	sp, #36	; 0x24
 80048c8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80048ca:	2300      	movs	r3, #0
 80048cc:	61fb      	str	r3, [r7, #28]
 80048ce:	2300      	movs	r3, #0
 80048d0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048d2:	4b3d      	ldr	r3, [pc, #244]	; (80049c8 <HAL_RCC_GetSysClockFreq+0x104>)
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f003 030c 	and.w	r3, r3, #12
 80048da:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048dc:	4b3a      	ldr	r3, [pc, #232]	; (80049c8 <HAL_RCC_GetSysClockFreq+0x104>)
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	f003 0303 	and.w	r3, r3, #3
 80048e4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d005      	beq.n	80048f8 <HAL_RCC_GetSysClockFreq+0x34>
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	2b0c      	cmp	r3, #12
 80048f0:	d121      	bne.n	8004936 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d11e      	bne.n	8004936 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80048f8:	4b33      	ldr	r3, [pc, #204]	; (80049c8 <HAL_RCC_GetSysClockFreq+0x104>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0308 	and.w	r3, r3, #8
 8004900:	2b00      	cmp	r3, #0
 8004902:	d107      	bne.n	8004914 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004904:	4b30      	ldr	r3, [pc, #192]	; (80049c8 <HAL_RCC_GetSysClockFreq+0x104>)
 8004906:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800490a:	0a1b      	lsrs	r3, r3, #8
 800490c:	f003 030f 	and.w	r3, r3, #15
 8004910:	61fb      	str	r3, [r7, #28]
 8004912:	e005      	b.n	8004920 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004914:	4b2c      	ldr	r3, [pc, #176]	; (80049c8 <HAL_RCC_GetSysClockFreq+0x104>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	091b      	lsrs	r3, r3, #4
 800491a:	f003 030f 	and.w	r3, r3, #15
 800491e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004920:	4a2a      	ldr	r2, [pc, #168]	; (80049cc <HAL_RCC_GetSysClockFreq+0x108>)
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004928:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d10d      	bne.n	800494c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004934:	e00a      	b.n	800494c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	2b04      	cmp	r3, #4
 800493a:	d102      	bne.n	8004942 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800493c:	4b24      	ldr	r3, [pc, #144]	; (80049d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800493e:	61bb      	str	r3, [r7, #24]
 8004940:	e004      	b.n	800494c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	2b08      	cmp	r3, #8
 8004946:	d101      	bne.n	800494c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004948:	4b22      	ldr	r3, [pc, #136]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800494a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	2b0c      	cmp	r3, #12
 8004950:	d133      	bne.n	80049ba <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004952:	4b1d      	ldr	r3, [pc, #116]	; (80049c8 <HAL_RCC_GetSysClockFreq+0x104>)
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	f003 0303 	and.w	r3, r3, #3
 800495a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	2b02      	cmp	r3, #2
 8004960:	d002      	beq.n	8004968 <HAL_RCC_GetSysClockFreq+0xa4>
 8004962:	2b03      	cmp	r3, #3
 8004964:	d003      	beq.n	800496e <HAL_RCC_GetSysClockFreq+0xaa>
 8004966:	e005      	b.n	8004974 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004968:	4b19      	ldr	r3, [pc, #100]	; (80049d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800496a:	617b      	str	r3, [r7, #20]
      break;
 800496c:	e005      	b.n	800497a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800496e:	4b19      	ldr	r3, [pc, #100]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004970:	617b      	str	r3, [r7, #20]
      break;
 8004972:	e002      	b.n	800497a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	617b      	str	r3, [r7, #20]
      break;
 8004978:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800497a:	4b13      	ldr	r3, [pc, #76]	; (80049c8 <HAL_RCC_GetSysClockFreq+0x104>)
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	091b      	lsrs	r3, r3, #4
 8004980:	f003 0307 	and.w	r3, r3, #7
 8004984:	3301      	adds	r3, #1
 8004986:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004988:	4b0f      	ldr	r3, [pc, #60]	; (80049c8 <HAL_RCC_GetSysClockFreq+0x104>)
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	0a1b      	lsrs	r3, r3, #8
 800498e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004992:	697a      	ldr	r2, [r7, #20]
 8004994:	fb02 f203 	mul.w	r2, r2, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	fbb2 f3f3 	udiv	r3, r2, r3
 800499e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80049a0:	4b09      	ldr	r3, [pc, #36]	; (80049c8 <HAL_RCC_GetSysClockFreq+0x104>)
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	0e5b      	lsrs	r3, r3, #25
 80049a6:	f003 0303 	and.w	r3, r3, #3
 80049aa:	3301      	adds	r3, #1
 80049ac:	005b      	lsls	r3, r3, #1
 80049ae:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80049b0:	697a      	ldr	r2, [r7, #20]
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049b8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80049ba:	69bb      	ldr	r3, [r7, #24]
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3724      	adds	r7, #36	; 0x24
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr
 80049c8:	40021000 	.word	0x40021000
 80049cc:	0800d134 	.word	0x0800d134
 80049d0:	00f42400 	.word	0x00f42400
 80049d4:	007a1200 	.word	0x007a1200

080049d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049d8:	b480      	push	{r7}
 80049da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049dc:	4b03      	ldr	r3, [pc, #12]	; (80049ec <HAL_RCC_GetHCLKFreq+0x14>)
 80049de:	681b      	ldr	r3, [r3, #0]
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr
 80049ea:	bf00      	nop
 80049ec:	20000000 	.word	0x20000000

080049f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80049f4:	f7ff fff0 	bl	80049d8 <HAL_RCC_GetHCLKFreq>
 80049f8:	4601      	mov	r1, r0
 80049fa:	4b06      	ldr	r3, [pc, #24]	; (8004a14 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	0adb      	lsrs	r3, r3, #11
 8004a00:	f003 0307 	and.w	r3, r3, #7
 8004a04:	4a04      	ldr	r2, [pc, #16]	; (8004a18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a06:	5cd3      	ldrb	r3, [r2, r3]
 8004a08:	f003 031f 	and.w	r3, r3, #31
 8004a0c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	40021000 	.word	0x40021000
 8004a18:	0800d12c 	.word	0x0800d12c

08004a1c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	220f      	movs	r2, #15
 8004a2a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004a2c:	4b12      	ldr	r3, [pc, #72]	; (8004a78 <HAL_RCC_GetClockConfig+0x5c>)
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	f003 0203 	and.w	r2, r3, #3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004a38:	4b0f      	ldr	r3, [pc, #60]	; (8004a78 <HAL_RCC_GetClockConfig+0x5c>)
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004a44:	4b0c      	ldr	r3, [pc, #48]	; (8004a78 <HAL_RCC_GetClockConfig+0x5c>)
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004a50:	4b09      	ldr	r3, [pc, #36]	; (8004a78 <HAL_RCC_GetClockConfig+0x5c>)
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	08db      	lsrs	r3, r3, #3
 8004a56:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004a5e:	4b07      	ldr	r3, [pc, #28]	; (8004a7c <HAL_RCC_GetClockConfig+0x60>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0207 	and.w	r2, r3, #7
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	601a      	str	r2, [r3, #0]
}
 8004a6a:	bf00      	nop
 8004a6c:	370c      	adds	r7, #12
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	40021000 	.word	0x40021000
 8004a7c:	40022000 	.word	0x40022000

08004a80 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b086      	sub	sp, #24
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004a88:	2300      	movs	r3, #0
 8004a8a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004a8c:	4b2a      	ldr	r3, [pc, #168]	; (8004b38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d003      	beq.n	8004aa0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004a98:	f7ff f9d0 	bl	8003e3c <HAL_PWREx_GetVoltageRange>
 8004a9c:	6178      	str	r0, [r7, #20]
 8004a9e:	e014      	b.n	8004aca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004aa0:	4b25      	ldr	r3, [pc, #148]	; (8004b38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aa4:	4a24      	ldr	r2, [pc, #144]	; (8004b38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004aa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aaa:	6593      	str	r3, [r2, #88]	; 0x58
 8004aac:	4b22      	ldr	r3, [pc, #136]	; (8004b38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ab4:	60fb      	str	r3, [r7, #12]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004ab8:	f7ff f9c0 	bl	8003e3c <HAL_PWREx_GetVoltageRange>
 8004abc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004abe:	4b1e      	ldr	r3, [pc, #120]	; (8004b38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ac2:	4a1d      	ldr	r2, [pc, #116]	; (8004b38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ac4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ac8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ad0:	d10b      	bne.n	8004aea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2b80      	cmp	r3, #128	; 0x80
 8004ad6:	d919      	bls.n	8004b0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2ba0      	cmp	r3, #160	; 0xa0
 8004adc:	d902      	bls.n	8004ae4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ade:	2302      	movs	r3, #2
 8004ae0:	613b      	str	r3, [r7, #16]
 8004ae2:	e013      	b.n	8004b0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	613b      	str	r3, [r7, #16]
 8004ae8:	e010      	b.n	8004b0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2b80      	cmp	r3, #128	; 0x80
 8004aee:	d902      	bls.n	8004af6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004af0:	2303      	movs	r3, #3
 8004af2:	613b      	str	r3, [r7, #16]
 8004af4:	e00a      	b.n	8004b0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2b80      	cmp	r3, #128	; 0x80
 8004afa:	d102      	bne.n	8004b02 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004afc:	2302      	movs	r3, #2
 8004afe:	613b      	str	r3, [r7, #16]
 8004b00:	e004      	b.n	8004b0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2b70      	cmp	r3, #112	; 0x70
 8004b06:	d101      	bne.n	8004b0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004b08:	2301      	movs	r3, #1
 8004b0a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004b0c:	4b0b      	ldr	r3, [pc, #44]	; (8004b3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f023 0207 	bic.w	r2, r3, #7
 8004b14:	4909      	ldr	r1, [pc, #36]	; (8004b3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004b1c:	4b07      	ldr	r3, [pc, #28]	; (8004b3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0307 	and.w	r3, r3, #7
 8004b24:	693a      	ldr	r2, [r7, #16]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d001      	beq.n	8004b2e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e000      	b.n	8004b30 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004b2e:	2300      	movs	r3, #0
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3718      	adds	r7, #24
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	40021000 	.word	0x40021000
 8004b3c:	40022000 	.word	0x40022000

08004b40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b086      	sub	sp, #24
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004b48:	2300      	movs	r3, #0
 8004b4a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d02f      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b60:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b64:	d005      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004b66:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004b6a:	d015      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d007      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004b70:	e00f      	b.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004b72:	4b5d      	ldr	r3, [pc, #372]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	4a5c      	ldr	r2, [pc, #368]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004b78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b7c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b7e:	e00c      	b.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	3304      	adds	r3, #4
 8004b84:	2100      	movs	r1, #0
 8004b86:	4618      	mov	r0, r3
 8004b88:	f000 fa1e 	bl	8004fc8 <RCCEx_PLLSAI1_Config>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b90:	e003      	b.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	74fb      	strb	r3, [r7, #19]
      break;
 8004b96:	e000      	b.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8004b98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b9a:	7cfb      	ldrb	r3, [r7, #19]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d10b      	bne.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ba0:	4b51      	ldr	r3, [pc, #324]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ba6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bae:	494e      	ldr	r1, [pc, #312]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004bb6:	e001      	b.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bb8:	7cfb      	ldrb	r3, [r7, #19]
 8004bba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	f000 809e 	beq.w	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004bce:	4b46      	ldr	r3, [pc, #280]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d101      	bne.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e000      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8004bde:	2300      	movs	r3, #0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d00d      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004be4:	4b40      	ldr	r3, [pc, #256]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004be8:	4a3f      	ldr	r2, [pc, #252]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004bea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bee:	6593      	str	r3, [r2, #88]	; 0x58
 8004bf0:	4b3d      	ldr	r3, [pc, #244]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bf8:	60bb      	str	r3, [r7, #8]
 8004bfa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c00:	4b3a      	ldr	r3, [pc, #232]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a39      	ldr	r2, [pc, #228]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c0a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c0c:	f7fd fa5a 	bl	80020c4 <HAL_GetTick>
 8004c10:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004c12:	e009      	b.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c14:	f7fd fa56 	bl	80020c4 <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d902      	bls.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	74fb      	strb	r3, [r7, #19]
        break;
 8004c26:	e005      	b.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004c28:	4b30      	ldr	r3, [pc, #192]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d0ef      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8004c34:	7cfb      	ldrb	r3, [r7, #19]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d15a      	bne.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c3a:	4b2b      	ldr	r3, [pc, #172]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c44:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d01e      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c50:	697a      	ldr	r2, [r7, #20]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d019      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c56:	4b24      	ldr	r3, [pc, #144]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c60:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c62:	4b21      	ldr	r3, [pc, #132]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c68:	4a1f      	ldr	r2, [pc, #124]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004c6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c72:	4b1d      	ldr	r3, [pc, #116]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c78:	4a1b      	ldr	r2, [pc, #108]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004c7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c82:	4a19      	ldr	r2, [pc, #100]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	f003 0301 	and.w	r3, r3, #1
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d016      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c94:	f7fd fa16 	bl	80020c4 <HAL_GetTick>
 8004c98:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c9a:	e00b      	b.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c9c:	f7fd fa12 	bl	80020c4 <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d902      	bls.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	74fb      	strb	r3, [r7, #19]
            break;
 8004cb2:	e006      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cb4:	4b0c      	ldr	r3, [pc, #48]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cba:	f003 0302 	and.w	r3, r3, #2
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d0ec      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8004cc2:	7cfb      	ldrb	r3, [r7, #19]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d10b      	bne.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cc8:	4b07      	ldr	r3, [pc, #28]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cd6:	4904      	ldr	r1, [pc, #16]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004cde:	e009      	b.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004ce0:	7cfb      	ldrb	r3, [r7, #19]
 8004ce2:	74bb      	strb	r3, [r7, #18]
 8004ce4:	e006      	b.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8004ce6:	bf00      	nop
 8004ce8:	40021000 	.word	0x40021000
 8004cec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cf0:	7cfb      	ldrb	r3, [r7, #19]
 8004cf2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004cf4:	7c7b      	ldrb	r3, [r7, #17]
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d105      	bne.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cfa:	4bb2      	ldr	r3, [pc, #712]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cfe:	4ab1      	ldr	r2, [pc, #708]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004d00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d04:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0301 	and.w	r3, r3, #1
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d00a      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d12:	4bac      	ldr	r3, [pc, #688]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d18:	f023 0203 	bic.w	r2, r3, #3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a1b      	ldr	r3, [r3, #32]
 8004d20:	49a8      	ldr	r1, [pc, #672]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0302 	and.w	r3, r3, #2
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d00a      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d34:	4ba3      	ldr	r3, [pc, #652]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d3a:	f023 020c 	bic.w	r2, r3, #12
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d42:	49a0      	ldr	r1, [pc, #640]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004d44:	4313      	orrs	r3, r2
 8004d46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0304 	and.w	r3, r3, #4
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d00a      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d56:	4b9b      	ldr	r3, [pc, #620]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d5c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d64:	4997      	ldr	r1, [pc, #604]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 0320 	and.w	r3, r3, #32
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d00a      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d78:	4b92      	ldr	r3, [pc, #584]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d7e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d86:	498f      	ldr	r1, [pc, #572]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00a      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d9a:	4b8a      	ldr	r3, [pc, #552]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004da0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004da8:	4986      	ldr	r1, [pc, #536]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004daa:	4313      	orrs	r3, r2
 8004dac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d00a      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004dbc:	4b81      	ldr	r3, [pc, #516]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dca:	497e      	ldr	r1, [pc, #504]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00a      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004dde:	4b79      	ldr	r3, [pc, #484]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004de4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dec:	4975      	ldr	r1, [pc, #468]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d00a      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e00:	4b70      	ldr	r3, [pc, #448]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e06:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e0e:	496d      	ldr	r1, [pc, #436]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004e10:	4313      	orrs	r3, r2
 8004e12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00a      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e22:	4b68      	ldr	r3, [pc, #416]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e28:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e30:	4964      	ldr	r1, [pc, #400]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d028      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x356>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e44:	4b5f      	ldr	r3, [pc, #380]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e4a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e52:	495c      	ldr	r1, [pc, #368]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004e54:	4313      	orrs	r3, r2
 8004e56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e62:	d106      	bne.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x332>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e64:	4b57      	ldr	r3, [pc, #348]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	4a56      	ldr	r2, [pc, #344]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004e6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e6e:	60d3      	str	r3, [r2, #12]
 8004e70:	e011      	b.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x356>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e76:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e7a:	d10c      	bne.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x356>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	3304      	adds	r3, #4
 8004e80:	2101      	movs	r1, #1
 8004e82:	4618      	mov	r0, r3
 8004e84:	f000 f8a0 	bl	8004fc8 <RCCEx_PLLSAI1_Config>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004e8c:	7cfb      	ldrb	r3, [r7, #19]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d001      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x356>
        {
          /* set overall return value */
          status = ret;
 8004e92:	7cfb      	ldrb	r3, [r7, #19]
 8004e94:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d028      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004ea2:	4b48      	ldr	r3, [pc, #288]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ea8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eb0:	4944      	ldr	r1, [pc, #272]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ebc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ec0:	d106      	bne.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x390>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ec2:	4b40      	ldr	r3, [pc, #256]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	4a3f      	ldr	r2, [pc, #252]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004ec8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ecc:	60d3      	str	r3, [r2, #12]
 8004ece:	e011      	b.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ed4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ed8:	d10c      	bne.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	3304      	adds	r3, #4
 8004ede:	2101      	movs	r1, #1
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f000 f871 	bl	8004fc8 <RCCEx_PLLSAI1_Config>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004eea:	7cfb      	ldrb	r3, [r7, #19]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d001      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8004ef0:	7cfb      	ldrb	r3, [r7, #19]
 8004ef2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d028      	beq.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f00:	4b30      	ldr	r3, [pc, #192]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f06:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f0e:	492d      	ldr	r1, [pc, #180]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004f10:	4313      	orrs	r3, r2
 8004f12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f1e:	d106      	bne.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x3ee>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f20:	4b28      	ldr	r3, [pc, #160]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	4a27      	ldr	r2, [pc, #156]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004f26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f2a:	60d3      	str	r3, [r2, #12]
 8004f2c:	e011      	b.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x412>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f32:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f36:	d10c      	bne.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	3304      	adds	r3, #4
 8004f3c:	2101      	movs	r1, #1
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f000 f842 	bl	8004fc8 <RCCEx_PLLSAI1_Config>
 8004f44:	4603      	mov	r3, r0
 8004f46:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f48:	7cfb      	ldrb	r3, [r7, #19]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d001      	beq.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x412>
      {
        /* set overall return value */
        status = ret;
 8004f4e:	7cfb      	ldrb	r3, [r7, #19]
 8004f50:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d01c      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f5e:	4b19      	ldr	r3, [pc, #100]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f64:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f6c:	4915      	ldr	r1, [pc, #84]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f7c:	d10c      	bne.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	3304      	adds	r3, #4
 8004f82:	2102      	movs	r1, #2
 8004f84:	4618      	mov	r0, r3
 8004f86:	f000 f81f 	bl	8004fc8 <RCCEx_PLLSAI1_Config>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f8e:	7cfb      	ldrb	r3, [r7, #19]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d001      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x458>
      {
        /* set overall return value */
        status = ret;
 8004f94:	7cfb      	ldrb	r3, [r7, #19]
 8004f96:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d00a      	beq.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x47a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004fa4:	4b07      	ldr	r3, [pc, #28]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004faa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fb2:	4904      	ldr	r1, [pc, #16]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004fba:	7cbb      	ldrb	r3, [r7, #18]
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3718      	adds	r7, #24
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	40021000 	.word	0x40021000

08004fc8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004fd6:	4b73      	ldr	r3, [pc, #460]	; (80051a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	f003 0303 	and.w	r3, r3, #3
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d018      	beq.n	8005014 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004fe2:	4b70      	ldr	r3, [pc, #448]	; (80051a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	f003 0203 	and.w	r2, r3, #3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d10d      	bne.n	800500e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
       ||
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d009      	beq.n	800500e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004ffa:	4b6a      	ldr	r3, [pc, #424]	; (80051a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	091b      	lsrs	r3, r3, #4
 8005000:	f003 0307 	and.w	r3, r3, #7
 8005004:	1c5a      	adds	r2, r3, #1
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	685b      	ldr	r3, [r3, #4]
       ||
 800500a:	429a      	cmp	r2, r3
 800500c:	d044      	beq.n	8005098 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	73fb      	strb	r3, [r7, #15]
 8005012:	e041      	b.n	8005098 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2b02      	cmp	r3, #2
 800501a:	d00c      	beq.n	8005036 <RCCEx_PLLSAI1_Config+0x6e>
 800501c:	2b03      	cmp	r3, #3
 800501e:	d013      	beq.n	8005048 <RCCEx_PLLSAI1_Config+0x80>
 8005020:	2b01      	cmp	r3, #1
 8005022:	d120      	bne.n	8005066 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005024:	4b5f      	ldr	r3, [pc, #380]	; (80051a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0302 	and.w	r3, r3, #2
 800502c:	2b00      	cmp	r3, #0
 800502e:	d11d      	bne.n	800506c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005034:	e01a      	b.n	800506c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005036:	4b5b      	ldr	r3, [pc, #364]	; (80051a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800503e:	2b00      	cmp	r3, #0
 8005040:	d116      	bne.n	8005070 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005046:	e013      	b.n	8005070 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005048:	4b56      	ldr	r3, [pc, #344]	; (80051a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d10f      	bne.n	8005074 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005054:	4b53      	ldr	r3, [pc, #332]	; (80051a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d109      	bne.n	8005074 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005064:	e006      	b.n	8005074 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	73fb      	strb	r3, [r7, #15]
      break;
 800506a:	e004      	b.n	8005076 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800506c:	bf00      	nop
 800506e:	e002      	b.n	8005076 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005070:	bf00      	nop
 8005072:	e000      	b.n	8005076 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005074:	bf00      	nop
    }

    if(status == HAL_OK)
 8005076:	7bfb      	ldrb	r3, [r7, #15]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d10d      	bne.n	8005098 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800507c:	4b49      	ldr	r3, [pc, #292]	; (80051a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6819      	ldr	r1, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	3b01      	subs	r3, #1
 800508e:	011b      	lsls	r3, r3, #4
 8005090:	430b      	orrs	r3, r1
 8005092:	4944      	ldr	r1, [pc, #272]	; (80051a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005094:	4313      	orrs	r3, r2
 8005096:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005098:	7bfb      	ldrb	r3, [r7, #15]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d17c      	bne.n	8005198 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800509e:	4b41      	ldr	r3, [pc, #260]	; (80051a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a40      	ldr	r2, [pc, #256]	; (80051a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80050a4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80050a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050aa:	f7fd f80b 	bl	80020c4 <HAL_GetTick>
 80050ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80050b0:	e009      	b.n	80050c6 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80050b2:	f7fd f807 	bl	80020c4 <HAL_GetTick>
 80050b6:	4602      	mov	r2, r0
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	1ad3      	subs	r3, r2, r3
 80050bc:	2b02      	cmp	r3, #2
 80050be:	d902      	bls.n	80050c6 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80050c0:	2303      	movs	r3, #3
 80050c2:	73fb      	strb	r3, [r7, #15]
        break;
 80050c4:	e005      	b.n	80050d2 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80050c6:	4b37      	ldr	r3, [pc, #220]	; (80051a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d1ef      	bne.n	80050b2 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80050d2:	7bfb      	ldrb	r3, [r7, #15]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d15f      	bne.n	8005198 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d110      	bne.n	8005100 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80050de:	4b31      	ldr	r3, [pc, #196]	; (80051a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80050e6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	6892      	ldr	r2, [r2, #8]
 80050ee:	0211      	lsls	r1, r2, #8
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	68d2      	ldr	r2, [r2, #12]
 80050f4:	06d2      	lsls	r2, r2, #27
 80050f6:	430a      	orrs	r2, r1
 80050f8:	492a      	ldr	r1, [pc, #168]	; (80051a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80050fa:	4313      	orrs	r3, r2
 80050fc:	610b      	str	r3, [r1, #16]
 80050fe:	e027      	b.n	8005150 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	2b01      	cmp	r3, #1
 8005104:	d112      	bne.n	800512c <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005106:	4b27      	ldr	r3, [pc, #156]	; (80051a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800510e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	6892      	ldr	r2, [r2, #8]
 8005116:	0211      	lsls	r1, r2, #8
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	6912      	ldr	r2, [r2, #16]
 800511c:	0852      	lsrs	r2, r2, #1
 800511e:	3a01      	subs	r2, #1
 8005120:	0552      	lsls	r2, r2, #21
 8005122:	430a      	orrs	r2, r1
 8005124:	491f      	ldr	r1, [pc, #124]	; (80051a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005126:	4313      	orrs	r3, r2
 8005128:	610b      	str	r3, [r1, #16]
 800512a:	e011      	b.n	8005150 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800512c:	4b1d      	ldr	r3, [pc, #116]	; (80051a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005134:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	6892      	ldr	r2, [r2, #8]
 800513c:	0211      	lsls	r1, r2, #8
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	6952      	ldr	r2, [r2, #20]
 8005142:	0852      	lsrs	r2, r2, #1
 8005144:	3a01      	subs	r2, #1
 8005146:	0652      	lsls	r2, r2, #25
 8005148:	430a      	orrs	r2, r1
 800514a:	4916      	ldr	r1, [pc, #88]	; (80051a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800514c:	4313      	orrs	r3, r2
 800514e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005150:	4b14      	ldr	r3, [pc, #80]	; (80051a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a13      	ldr	r2, [pc, #76]	; (80051a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005156:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800515a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800515c:	f7fc ffb2 	bl	80020c4 <HAL_GetTick>
 8005160:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005162:	e009      	b.n	8005178 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005164:	f7fc ffae 	bl	80020c4 <HAL_GetTick>
 8005168:	4602      	mov	r2, r0
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	2b02      	cmp	r3, #2
 8005170:	d902      	bls.n	8005178 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	73fb      	strb	r3, [r7, #15]
          break;
 8005176:	e005      	b.n	8005184 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005178:	4b0a      	ldr	r3, [pc, #40]	; (80051a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005180:	2b00      	cmp	r3, #0
 8005182:	d0ef      	beq.n	8005164 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8005184:	7bfb      	ldrb	r3, [r7, #15]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d106      	bne.n	8005198 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800518a:	4b06      	ldr	r3, [pc, #24]	; (80051a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800518c:	691a      	ldr	r2, [r3, #16]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	699b      	ldr	r3, [r3, #24]
 8005192:	4904      	ldr	r1, [pc, #16]	; (80051a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005194:	4313      	orrs	r3, r2
 8005196:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005198:	7bfb      	ldrb	r3, [r7, #15]
}
 800519a:	4618      	mov	r0, r3
 800519c:	3710      	adds	r7, #16
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	40021000 	.word	0x40021000

080051a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d101      	bne.n	80051ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e07c      	b.n	80052b4 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d106      	bne.n	80051da <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f7fb ffbf 	bl	8001158 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2202      	movs	r2, #2
 80051de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051f0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80051fa:	d902      	bls.n	8005202 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80051fc:	2300      	movs	r3, #0
 80051fe:	60fb      	str	r3, [r7, #12]
 8005200:	e002      	b.n	8005208 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005202:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005206:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005210:	d007      	beq.n	8005222 <HAL_SPI_Init+0x7a>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800521a:	d002      	beq.n	8005222 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005226:	2b00      	cmp	r3, #0
 8005228:	d10b      	bne.n	8005242 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005232:	d903      	bls.n	800523c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2202      	movs	r2, #2
 8005238:	631a      	str	r2, [r3, #48]	; 0x30
 800523a:	e002      	b.n	8005242 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685a      	ldr	r2, [r3, #4]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	431a      	orrs	r2, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	691b      	ldr	r3, [r3, #16]
 8005250:	431a      	orrs	r2, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	695b      	ldr	r3, [r3, #20]
 8005256:	431a      	orrs	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	699b      	ldr	r3, [r3, #24]
 800525c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005260:	431a      	orrs	r2, r3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	69db      	ldr	r3, [r3, #28]
 8005266:	431a      	orrs	r2, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a1b      	ldr	r3, [r3, #32]
 800526c:	ea42 0103 	orr.w	r1, r2, r3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	430a      	orrs	r2, r1
 800527a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	699b      	ldr	r3, [r3, #24]
 8005280:	0c1b      	lsrs	r3, r3, #16
 8005282:	f003 0204 	and.w	r2, r3, #4
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528a:	431a      	orrs	r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005290:	431a      	orrs	r2, r3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	ea42 0103 	orr.w	r1, r2, r3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	430a      	orrs	r2, r1
 80052a2:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2201      	movs	r2, #1
 80052ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80052b2:	2300      	movs	r3, #0
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3710      	adds	r7, #16
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b088      	sub	sp, #32
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	603b      	str	r3, [r7, #0]
 80052c8:	4613      	mov	r3, r2
 80052ca:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80052cc:	2300      	movs	r3, #0
 80052ce:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d101      	bne.n	80052de <HAL_SPI_Transmit+0x22>
 80052da:	2302      	movs	r3, #2
 80052dc:	e150      	b.n	8005580 <HAL_SPI_Transmit+0x2c4>
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80052e6:	f7fc feed 	bl	80020c4 <HAL_GetTick>
 80052ea:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80052ec:	88fb      	ldrh	r3, [r7, #6]
 80052ee:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d002      	beq.n	8005302 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80052fc:	2302      	movs	r3, #2
 80052fe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005300:	e135      	b.n	800556e <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d002      	beq.n	800530e <HAL_SPI_Transmit+0x52>
 8005308:	88fb      	ldrh	r3, [r7, #6]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d102      	bne.n	8005314 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005312:	e12c      	b.n	800556e <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2203      	movs	r2, #3
 8005318:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2200      	movs	r2, #0
 8005320:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	68ba      	ldr	r2, [r7, #8]
 8005326:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	88fa      	ldrh	r2, [r7, #6]
 800532c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	88fa      	ldrh	r2, [r7, #6]
 8005332:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2200      	movs	r2, #0
 8005338:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2200      	movs	r2, #0
 800533e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2200      	movs	r2, #0
 8005346:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2200      	movs	r2, #0
 800534e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2200      	movs	r2, #0
 8005354:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800535e:	d107      	bne.n	8005370 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800536e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800537a:	2b40      	cmp	r3, #64	; 0x40
 800537c:	d007      	beq.n	800538e <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800538c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005396:	d94b      	bls.n	8005430 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d002      	beq.n	80053a6 <HAL_SPI_Transmit+0xea>
 80053a0:	8afb      	ldrh	r3, [r7, #22]
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d13e      	bne.n	8005424 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053aa:	881a      	ldrh	r2, [r3, #0]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b6:	1c9a      	adds	r2, r3, #2
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	3b01      	subs	r3, #1
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80053ca:	e02b      	b.n	8005424 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	f003 0302 	and.w	r3, r3, #2
 80053d6:	2b02      	cmp	r3, #2
 80053d8:	d112      	bne.n	8005400 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053de:	881a      	ldrh	r2, [r3, #0]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ea:	1c9a      	adds	r2, r3, #2
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	3b01      	subs	r3, #1
 80053f8:	b29a      	uxth	r2, r3
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80053fe:	e011      	b.n	8005424 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005400:	f7fc fe60 	bl	80020c4 <HAL_GetTick>
 8005404:	4602      	mov	r2, r0
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	683a      	ldr	r2, [r7, #0]
 800540c:	429a      	cmp	r2, r3
 800540e:	d803      	bhi.n	8005418 <HAL_SPI_Transmit+0x15c>
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005416:	d102      	bne.n	800541e <HAL_SPI_Transmit+0x162>
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d102      	bne.n	8005424 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 800541e:	2303      	movs	r3, #3
 8005420:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005422:	e0a4      	b.n	800556e <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005428:	b29b      	uxth	r3, r3
 800542a:	2b00      	cmp	r3, #0
 800542c:	d1ce      	bne.n	80053cc <HAL_SPI_Transmit+0x110>
 800542e:	e07c      	b.n	800552a <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d002      	beq.n	800543e <HAL_SPI_Transmit+0x182>
 8005438:	8afb      	ldrh	r3, [r7, #22]
 800543a:	2b01      	cmp	r3, #1
 800543c:	d170      	bne.n	8005520 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005442:	b29b      	uxth	r3, r3
 8005444:	2b01      	cmp	r3, #1
 8005446:	d912      	bls.n	800546e <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800544c:	881a      	ldrh	r2, [r3, #0]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005458:	1c9a      	adds	r2, r3, #2
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005462:	b29b      	uxth	r3, r3
 8005464:	3b02      	subs	r3, #2
 8005466:	b29a      	uxth	r2, r3
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800546c:	e058      	b.n	8005520 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	330c      	adds	r3, #12
 8005478:	7812      	ldrb	r2, [r2, #0]
 800547a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005480:	1c5a      	adds	r2, r3, #1
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800548a:	b29b      	uxth	r3, r3
 800548c:	3b01      	subs	r3, #1
 800548e:	b29a      	uxth	r2, r3
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005494:	e044      	b.n	8005520 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	f003 0302 	and.w	r3, r3, #2
 80054a0:	2b02      	cmp	r3, #2
 80054a2:	d12b      	bne.n	80054fc <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d912      	bls.n	80054d4 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b2:	881a      	ldrh	r2, [r3, #0]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054be:	1c9a      	adds	r2, r3, #2
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	3b02      	subs	r3, #2
 80054cc:	b29a      	uxth	r2, r3
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80054d2:	e025      	b.n	8005520 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	330c      	adds	r3, #12
 80054de:	7812      	ldrb	r2, [r2, #0]
 80054e0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e6:	1c5a      	adds	r2, r3, #1
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	3b01      	subs	r3, #1
 80054f4:	b29a      	uxth	r2, r3
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80054fa:	e011      	b.n	8005520 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054fc:	f7fc fde2 	bl	80020c4 <HAL_GetTick>
 8005500:	4602      	mov	r2, r0
 8005502:	69bb      	ldr	r3, [r7, #24]
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	683a      	ldr	r2, [r7, #0]
 8005508:	429a      	cmp	r2, r3
 800550a:	d803      	bhi.n	8005514 <HAL_SPI_Transmit+0x258>
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005512:	d102      	bne.n	800551a <HAL_SPI_Transmit+0x25e>
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d102      	bne.n	8005520 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800551e:	e026      	b.n	800556e <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005524:	b29b      	uxth	r3, r3
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1b5      	bne.n	8005496 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800552a:	69ba      	ldr	r2, [r7, #24]
 800552c:	6839      	ldr	r1, [r7, #0]
 800552e:	68f8      	ldr	r0, [r7, #12]
 8005530:	f000 fc94 	bl	8005e5c <SPI_EndRxTxTransaction>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d002      	beq.n	8005540 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2220      	movs	r2, #32
 800553e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d10a      	bne.n	800555e <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005548:	2300      	movs	r3, #0
 800554a:	613b      	str	r3, [r7, #16]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	613b      	str	r3, [r7, #16]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	613b      	str	r3, [r7, #16]
 800555c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005562:	2b00      	cmp	r3, #0
 8005564:	d002      	beq.n	800556c <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	77fb      	strb	r3, [r7, #31]
 800556a:	e000      	b.n	800556e <HAL_SPI_Transmit+0x2b2>
  }

error:
 800556c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2201      	movs	r2, #1
 8005572:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800557e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005580:	4618      	mov	r0, r3
 8005582:	3720      	adds	r7, #32
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b088      	sub	sp, #32
 800558c:	af02      	add	r7, sp, #8
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	603b      	str	r3, [r7, #0]
 8005594:	4613      	mov	r3, r2
 8005596:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005598:	2300      	movs	r3, #0
 800559a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055a4:	d112      	bne.n	80055cc <HAL_SPI_Receive+0x44>
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d10e      	bne.n	80055cc <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2204      	movs	r2, #4
 80055b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80055b6:	88fa      	ldrh	r2, [r7, #6]
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	9300      	str	r3, [sp, #0]
 80055bc:	4613      	mov	r3, r2
 80055be:	68ba      	ldr	r2, [r7, #8]
 80055c0:	68b9      	ldr	r1, [r7, #8]
 80055c2:	68f8      	ldr	r0, [r7, #12]
 80055c4:	f000 f908 	bl	80057d8 <HAL_SPI_TransmitReceive>
 80055c8:	4603      	mov	r3, r0
 80055ca:	e101      	b.n	80057d0 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d101      	bne.n	80055da <HAL_SPI_Receive+0x52>
 80055d6:	2302      	movs	r3, #2
 80055d8:	e0fa      	b.n	80057d0 <HAL_SPI_Receive+0x248>
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2201      	movs	r2, #1
 80055de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055e2:	f7fc fd6f 	bl	80020c4 <HAL_GetTick>
 80055e6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d002      	beq.n	80055fa <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80055f4:	2302      	movs	r3, #2
 80055f6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80055f8:	e0e1      	b.n	80057be <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d002      	beq.n	8005606 <HAL_SPI_Receive+0x7e>
 8005600:	88fb      	ldrh	r3, [r7, #6]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d102      	bne.n	800560c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	75fb      	strb	r3, [r7, #23]
    goto error;
 800560a:	e0d8      	b.n	80057be <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2204      	movs	r2, #4
 8005610:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2200      	movs	r2, #0
 8005618:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	68ba      	ldr	r2, [r7, #8]
 800561e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	88fa      	ldrh	r2, [r7, #6]
 8005624:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	88fa      	ldrh	r2, [r7, #6]
 800562c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2200      	movs	r2, #0
 8005634:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2200      	movs	r2, #0
 800563a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2200      	movs	r2, #0
 8005640:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2200      	movs	r2, #0
 8005646:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2200      	movs	r2, #0
 800564c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005656:	d908      	bls.n	800566a <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	685a      	ldr	r2, [r3, #4]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005666:	605a      	str	r2, [r3, #4]
 8005668:	e007      	b.n	800567a <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	685a      	ldr	r2, [r3, #4]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005678:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005682:	d107      	bne.n	8005694 <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005692:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800569e:	2b40      	cmp	r3, #64	; 0x40
 80056a0:	d007      	beq.n	80056b2 <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056b0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80056ba:	d867      	bhi.n	800578c <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80056bc:	e030      	b.n	8005720 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	f003 0301 	and.w	r3, r3, #1
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d117      	bne.n	80056fc <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f103 020c 	add.w	r2, r3, #12
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d8:	7812      	ldrb	r2, [r2, #0]
 80056da:	b2d2      	uxtb	r2, r2
 80056dc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e2:	1c5a      	adds	r2, r3, #1
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	3b01      	subs	r3, #1
 80056f2:	b29a      	uxth	r2, r3
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80056fa:	e011      	b.n	8005720 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056fc:	f7fc fce2 	bl	80020c4 <HAL_GetTick>
 8005700:	4602      	mov	r2, r0
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	683a      	ldr	r2, [r7, #0]
 8005708:	429a      	cmp	r2, r3
 800570a:	d803      	bhi.n	8005714 <HAL_SPI_Receive+0x18c>
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005712:	d102      	bne.n	800571a <HAL_SPI_Receive+0x192>
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d102      	bne.n	8005720 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 800571a:	2303      	movs	r3, #3
 800571c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800571e:	e04e      	b.n	80057be <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005726:	b29b      	uxth	r3, r3
 8005728:	2b00      	cmp	r3, #0
 800572a:	d1c8      	bne.n	80056be <HAL_SPI_Receive+0x136>
 800572c:	e034      	b.n	8005798 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	f003 0301 	and.w	r3, r3, #1
 8005738:	2b01      	cmp	r3, #1
 800573a:	d115      	bne.n	8005768 <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68da      	ldr	r2, [r3, #12]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005746:	b292      	uxth	r2, r2
 8005748:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574e:	1c9a      	adds	r2, r3, #2
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800575a:	b29b      	uxth	r3, r3
 800575c:	3b01      	subs	r3, #1
 800575e:	b29a      	uxth	r2, r3
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005766:	e011      	b.n	800578c <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005768:	f7fc fcac 	bl	80020c4 <HAL_GetTick>
 800576c:	4602      	mov	r2, r0
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	683a      	ldr	r2, [r7, #0]
 8005774:	429a      	cmp	r2, r3
 8005776:	d803      	bhi.n	8005780 <HAL_SPI_Receive+0x1f8>
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800577e:	d102      	bne.n	8005786 <HAL_SPI_Receive+0x1fe>
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d102      	bne.n	800578c <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	75fb      	strb	r3, [r7, #23]
          goto error;
 800578a:	e018      	b.n	80057be <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005792:	b29b      	uxth	r3, r3
 8005794:	2b00      	cmp	r3, #0
 8005796:	d1ca      	bne.n	800572e <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005798:	693a      	ldr	r2, [r7, #16]
 800579a:	6839      	ldr	r1, [r7, #0]
 800579c:	68f8      	ldr	r0, [r7, #12]
 800579e:	f000 fb05 	bl	8005dac <SPI_EndRxTransaction>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d002      	beq.n	80057ae <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2220      	movs	r2, #32
 80057ac:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d002      	beq.n	80057bc <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	75fb      	strb	r3, [r7, #23]
 80057ba:	e000      	b.n	80057be <HAL_SPI_Receive+0x236>
  }

error :
 80057bc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2201      	movs	r2, #1
 80057c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2200      	movs	r2, #0
 80057ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80057ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3718      	adds	r7, #24
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b08a      	sub	sp, #40	; 0x28
 80057dc:	af00      	add	r7, sp, #0
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	607a      	str	r2, [r7, #4]
 80057e4:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80057e6:	2301      	movs	r3, #1
 80057e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80057ea:	2300      	movs	r3, #0
 80057ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d101      	bne.n	80057fe <HAL_SPI_TransmitReceive+0x26>
 80057fa:	2302      	movs	r3, #2
 80057fc:	e1fb      	b.n	8005bf6 <HAL_SPI_TransmitReceive+0x41e>
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2201      	movs	r2, #1
 8005802:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005806:	f7fc fc5d 	bl	80020c4 <HAL_GetTick>
 800580a:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005812:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800581a:	887b      	ldrh	r3, [r7, #2]
 800581c:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800581e:	887b      	ldrh	r3, [r7, #2]
 8005820:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005822:	7efb      	ldrb	r3, [r7, #27]
 8005824:	2b01      	cmp	r3, #1
 8005826:	d00e      	beq.n	8005846 <HAL_SPI_TransmitReceive+0x6e>
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800582e:	d106      	bne.n	800583e <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d102      	bne.n	800583e <HAL_SPI_TransmitReceive+0x66>
 8005838:	7efb      	ldrb	r3, [r7, #27]
 800583a:	2b04      	cmp	r3, #4
 800583c:	d003      	beq.n	8005846 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800583e:	2302      	movs	r3, #2
 8005840:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005844:	e1cd      	b.n	8005be2 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d005      	beq.n	8005858 <HAL_SPI_TransmitReceive+0x80>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d002      	beq.n	8005858 <HAL_SPI_TransmitReceive+0x80>
 8005852:	887b      	ldrh	r3, [r7, #2]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d103      	bne.n	8005860 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800585e:	e1c0      	b.n	8005be2 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005866:	b2db      	uxtb	r3, r3
 8005868:	2b04      	cmp	r3, #4
 800586a:	d003      	beq.n	8005874 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2205      	movs	r2, #5
 8005870:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2200      	movs	r2, #0
 8005878:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	887a      	ldrh	r2, [r7, #2]
 8005884:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	887a      	ldrh	r2, [r7, #2]
 800588c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	68ba      	ldr	r2, [r7, #8]
 8005894:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	887a      	ldrh	r2, [r7, #2]
 800589a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	887a      	ldrh	r2, [r7, #2]
 80058a0:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2200      	movs	r2, #0
 80058a6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2200      	movs	r2, #0
 80058ac:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058b6:	d802      	bhi.n	80058be <HAL_SPI_TransmitReceive+0xe6>
 80058b8:	8a3b      	ldrh	r3, [r7, #16]
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d908      	bls.n	80058d0 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	685a      	ldr	r2, [r3, #4]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80058cc:	605a      	str	r2, [r3, #4]
 80058ce:	e007      	b.n	80058e0 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	685a      	ldr	r2, [r3, #4]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80058de:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ea:	2b40      	cmp	r3, #64	; 0x40
 80058ec:	d007      	beq.n	80058fe <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058fc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005906:	d97c      	bls.n	8005a02 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d002      	beq.n	8005916 <HAL_SPI_TransmitReceive+0x13e>
 8005910:	8a7b      	ldrh	r3, [r7, #18]
 8005912:	2b01      	cmp	r3, #1
 8005914:	d169      	bne.n	80059ea <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800591a:	881a      	ldrh	r2, [r3, #0]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005926:	1c9a      	adds	r2, r3, #2
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005930:	b29b      	uxth	r3, r3
 8005932:	3b01      	subs	r3, #1
 8005934:	b29a      	uxth	r2, r3
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800593a:	e056      	b.n	80059ea <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	f003 0302 	and.w	r3, r3, #2
 8005946:	2b02      	cmp	r3, #2
 8005948:	d11b      	bne.n	8005982 <HAL_SPI_TransmitReceive+0x1aa>
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800594e:	b29b      	uxth	r3, r3
 8005950:	2b00      	cmp	r3, #0
 8005952:	d016      	beq.n	8005982 <HAL_SPI_TransmitReceive+0x1aa>
 8005954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005956:	2b01      	cmp	r3, #1
 8005958:	d113      	bne.n	8005982 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800595e:	881a      	ldrh	r2, [r3, #0]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800596a:	1c9a      	adds	r2, r3, #2
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005974:	b29b      	uxth	r3, r3
 8005976:	3b01      	subs	r3, #1
 8005978:	b29a      	uxth	r2, r3
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800597e:	2300      	movs	r3, #0
 8005980:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	f003 0301 	and.w	r3, r3, #1
 800598c:	2b01      	cmp	r3, #1
 800598e:	d11c      	bne.n	80059ca <HAL_SPI_TransmitReceive+0x1f2>
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005996:	b29b      	uxth	r3, r3
 8005998:	2b00      	cmp	r3, #0
 800599a:	d016      	beq.n	80059ca <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68da      	ldr	r2, [r3, #12]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a6:	b292      	uxth	r2, r2
 80059a8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ae:	1c9a      	adds	r2, r3, #2
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	3b01      	subs	r3, #1
 80059be:	b29a      	uxth	r2, r3
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80059c6:	2301      	movs	r3, #1
 80059c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80059ca:	f7fc fb7b 	bl	80020c4 <HAL_GetTick>
 80059ce:	4602      	mov	r2, r0
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d807      	bhi.n	80059ea <HAL_SPI_TransmitReceive+0x212>
 80059da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059e0:	d003      	beq.n	80059ea <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80059e8:	e0fb      	b.n	8005be2 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d1a3      	bne.n	800593c <HAL_SPI_TransmitReceive+0x164>
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d19d      	bne.n	800593c <HAL_SPI_TransmitReceive+0x164>
 8005a00:	e0df      	b.n	8005bc2 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d003      	beq.n	8005a12 <HAL_SPI_TransmitReceive+0x23a>
 8005a0a:	8a7b      	ldrh	r3, [r7, #18]
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	f040 80cb 	bne.w	8005ba8 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d912      	bls.n	8005a42 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a20:	881a      	ldrh	r2, [r3, #0]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a2c:	1c9a      	adds	r2, r3, #2
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	3b02      	subs	r3, #2
 8005a3a:	b29a      	uxth	r2, r3
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a40:	e0b2      	b.n	8005ba8 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	330c      	adds	r3, #12
 8005a4c:	7812      	ldrb	r2, [r2, #0]
 8005a4e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a54:	1c5a      	adds	r2, r3, #1
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	3b01      	subs	r3, #1
 8005a62:	b29a      	uxth	r2, r3
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a68:	e09e      	b.n	8005ba8 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	f003 0302 	and.w	r3, r3, #2
 8005a74:	2b02      	cmp	r3, #2
 8005a76:	d134      	bne.n	8005ae2 <HAL_SPI_TransmitReceive+0x30a>
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d02f      	beq.n	8005ae2 <HAL_SPI_TransmitReceive+0x30a>
 8005a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d12c      	bne.n	8005ae2 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d912      	bls.n	8005ab8 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a96:	881a      	ldrh	r2, [r3, #0]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa2:	1c9a      	adds	r2, r3, #2
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	3b02      	subs	r3, #2
 8005ab0:	b29a      	uxth	r2, r3
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ab6:	e012      	b.n	8005ade <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	330c      	adds	r3, #12
 8005ac2:	7812      	ldrb	r2, [r2, #0]
 8005ac4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aca:	1c5a      	adds	r2, r3, #1
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	b29a      	uxth	r2, r3
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	f003 0301 	and.w	r3, r3, #1
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d148      	bne.n	8005b82 <HAL_SPI_TransmitReceive+0x3aa>
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d042      	beq.n	8005b82 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d923      	bls.n	8005b50 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68da      	ldr	r2, [r3, #12]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b12:	b292      	uxth	r2, r2
 8005b14:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1a:	1c9a      	adds	r2, r3, #2
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	3b02      	subs	r3, #2
 8005b2a:	b29a      	uxth	r2, r3
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d81f      	bhi.n	8005b7e <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	685a      	ldr	r2, [r3, #4]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005b4c:	605a      	str	r2, [r3, #4]
 8005b4e:	e016      	b.n	8005b7e <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f103 020c 	add.w	r2, r3, #12
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b5c:	7812      	ldrb	r2, [r2, #0]
 8005b5e:	b2d2      	uxtb	r2, r2
 8005b60:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b66:	1c5a      	adds	r2, r3, #1
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	3b01      	subs	r3, #1
 8005b76:	b29a      	uxth	r2, r3
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005b82:	f7fc fa9f 	bl	80020c4 <HAL_GetTick>
 8005b86:	4602      	mov	r2, r0
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	1ad3      	subs	r3, r2, r3
 8005b8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d803      	bhi.n	8005b9a <HAL_SPI_TransmitReceive+0x3c2>
 8005b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b98:	d102      	bne.n	8005ba0 <HAL_SPI_TransmitReceive+0x3c8>
 8005b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d103      	bne.n	8005ba8 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005ba0:	2303      	movs	r3, #3
 8005ba2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005ba6:	e01c      	b.n	8005be2 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	f47f af5b 	bne.w	8005a6a <HAL_SPI_TransmitReceive+0x292>
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	f47f af54 	bne.w	8005a6a <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005bc2:	69fa      	ldr	r2, [r7, #28]
 8005bc4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005bc6:	68f8      	ldr	r0, [r7, #12]
 8005bc8:	f000 f948 	bl	8005e5c <SPI_EndRxTxTransaction>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d006      	beq.n	8005be0 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2220      	movs	r2, #32
 8005bdc:	661a      	str	r2, [r3, #96]	; 0x60
 8005bde:	e000      	b.n	8005be2 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005be0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2201      	movs	r2, #1
 8005be6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005bf2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3728      	adds	r7, #40	; 0x28
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}

08005bfe <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005bfe:	b580      	push	{r7, lr}
 8005c00:	b084      	sub	sp, #16
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	60f8      	str	r0, [r7, #12]
 8005c06:	60b9      	str	r1, [r7, #8]
 8005c08:	603b      	str	r3, [r7, #0]
 8005c0a:	4613      	mov	r3, r2
 8005c0c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c0e:	e04c      	b.n	8005caa <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c16:	d048      	beq.n	8005caa <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005c18:	f7fc fa54 	bl	80020c4 <HAL_GetTick>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	69bb      	ldr	r3, [r7, #24]
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	683a      	ldr	r2, [r7, #0]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d902      	bls.n	8005c2e <SPI_WaitFlagStateUntilTimeout+0x30>
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d13d      	bne.n	8005caa <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	685a      	ldr	r2, [r3, #4]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005c3c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c46:	d111      	bne.n	8005c6c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c50:	d004      	beq.n	8005c5c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c5a:	d107      	bne.n	8005c6c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c6a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c74:	d10f      	bne.n	8005c96 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c84:	601a      	str	r2, [r3, #0]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c94:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2201      	movs	r2, #1
 8005c9a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	e00f      	b.n	8005cca <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	689a      	ldr	r2, [r3, #8]
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	4013      	ands	r3, r2
 8005cb4:	68ba      	ldr	r2, [r7, #8]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	bf0c      	ite	eq
 8005cba:	2301      	moveq	r3, #1
 8005cbc:	2300      	movne	r3, #0
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	79fb      	ldrb	r3, [r7, #7]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d1a3      	bne.n	8005c10 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3710      	adds	r7, #16
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}

08005cd2 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005cd2:	b580      	push	{r7, lr}
 8005cd4:	b084      	sub	sp, #16
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	60f8      	str	r0, [r7, #12]
 8005cda:	60b9      	str	r1, [r7, #8]
 8005cdc:	607a      	str	r2, [r7, #4]
 8005cde:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8005ce0:	e057      	b.n	8005d92 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005ce8:	d106      	bne.n	8005cf8 <SPI_WaitFifoStateUntilTimeout+0x26>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d103      	bne.n	8005cf8 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	330c      	adds	r3, #12
 8005cf6:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cfe:	d048      	beq.n	8005d92 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005d00:	f7fc f9e0 	bl	80020c4 <HAL_GetTick>
 8005d04:	4602      	mov	r2, r0
 8005d06:	69bb      	ldr	r3, [r7, #24]
 8005d08:	1ad3      	subs	r3, r2, r3
 8005d0a:	683a      	ldr	r2, [r7, #0]
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d902      	bls.n	8005d16 <SPI_WaitFifoStateUntilTimeout+0x44>
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d13d      	bne.n	8005d92 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	685a      	ldr	r2, [r3, #4]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005d24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d2e:	d111      	bne.n	8005d54 <SPI_WaitFifoStateUntilTimeout+0x82>
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d38:	d004      	beq.n	8005d44 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d42:	d107      	bne.n	8005d54 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d5c:	d10f      	bne.n	8005d7e <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d6c:	601a      	str	r2, [r3, #0]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2201      	movs	r2, #1
 8005d82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005d8e:	2303      	movs	r3, #3
 8005d90:	e008      	b.n	8005da4 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	689a      	ldr	r2, [r3, #8]
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d19f      	bne.n	8005ce2 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8005da2:	2300      	movs	r3, #0
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3710      	adds	r7, #16
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b086      	sub	sp, #24
 8005db0:	af02      	add	r7, sp, #8
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	60b9      	str	r1, [r7, #8]
 8005db6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005dc0:	d111      	bne.n	8005de6 <SPI_EndRxTransaction+0x3a>
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dca:	d004      	beq.n	8005dd6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dd4:	d107      	bne.n	8005de6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005de4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	9300      	str	r3, [sp, #0]
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	2200      	movs	r2, #0
 8005dee:	2180      	movs	r1, #128	; 0x80
 8005df0:	68f8      	ldr	r0, [r7, #12]
 8005df2:	f7ff ff04 	bl	8005bfe <SPI_WaitFlagStateUntilTimeout>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d007      	beq.n	8005e0c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e00:	f043 0220 	orr.w	r2, r3, #32
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005e08:	2303      	movs	r3, #3
 8005e0a:	e023      	b.n	8005e54 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e14:	d11d      	bne.n	8005e52 <SPI_EndRxTransaction+0xa6>
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e1e:	d004      	beq.n	8005e2a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e28:	d113      	bne.n	8005e52 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	9300      	str	r3, [sp, #0]
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	2200      	movs	r2, #0
 8005e32:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005e36:	68f8      	ldr	r0, [r7, #12]
 8005e38:	f7ff ff4b 	bl	8005cd2 <SPI_WaitFifoStateUntilTimeout>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d007      	beq.n	8005e52 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e46:	f043 0220 	orr.w	r2, r3, #32
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005e4e:	2303      	movs	r3, #3
 8005e50:	e000      	b.n	8005e54 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005e52:	2300      	movs	r3, #0
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3710      	adds	r7, #16
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b086      	sub	sp, #24
 8005e60:	af02      	add	r7, sp, #8
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	9300      	str	r3, [sp, #0]
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005e74:	68f8      	ldr	r0, [r7, #12]
 8005e76:	f7ff ff2c 	bl	8005cd2 <SPI_WaitFifoStateUntilTimeout>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d007      	beq.n	8005e90 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e84:	f043 0220 	orr.w	r2, r3, #32
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005e8c:	2303      	movs	r3, #3
 8005e8e:	e027      	b.n	8005ee0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	9300      	str	r3, [sp, #0]
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	2200      	movs	r2, #0
 8005e98:	2180      	movs	r1, #128	; 0x80
 8005e9a:	68f8      	ldr	r0, [r7, #12]
 8005e9c:	f7ff feaf 	bl	8005bfe <SPI_WaitFlagStateUntilTimeout>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d007      	beq.n	8005eb6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005eaa:	f043 0220 	orr.w	r2, r3, #32
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005eb2:	2303      	movs	r3, #3
 8005eb4:	e014      	b.n	8005ee0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	9300      	str	r3, [sp, #0]
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005ec2:	68f8      	ldr	r0, [r7, #12]
 8005ec4:	f7ff ff05 	bl	8005cd2 <SPI_WaitFifoStateUntilTimeout>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d007      	beq.n	8005ede <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ed2:	f043 0220 	orr.w	r2, r3, #32
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005eda:	2303      	movs	r3, #3
 8005edc:	e000      	b.n	8005ee0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005ede:	2300      	movs	r3, #0
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3710      	adds	r7, #16
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}

08005ee8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b082      	sub	sp, #8
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d101      	bne.n	8005efa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e01d      	b.n	8005f36 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d106      	bne.n	8005f14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f000 f815 	bl	8005f3e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2202      	movs	r2, #2
 8005f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	3304      	adds	r3, #4
 8005f24:	4619      	mov	r1, r3
 8005f26:	4610      	mov	r0, r2
 8005f28:	f000 f986 	bl	8006238 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f34:	2300      	movs	r3, #0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3708      	adds	r7, #8
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}

08005f3e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005f3e:	b480      	push	{r7}
 8005f40:	b083      	sub	sp, #12
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005f46:	bf00      	nop
 8005f48:	370c      	adds	r7, #12
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr
	...

08005f54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b085      	sub	sp, #20
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	68da      	ldr	r2, [r3, #12]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f042 0201 	orr.w	r2, r2, #1
 8005f6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	689a      	ldr	r2, [r3, #8]
 8005f72:	4b0c      	ldr	r3, [pc, #48]	; (8005fa4 <HAL_TIM_Base_Start_IT+0x50>)
 8005f74:	4013      	ands	r3, r2
 8005f76:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2b06      	cmp	r3, #6
 8005f7c:	d00b      	beq.n	8005f96 <HAL_TIM_Base_Start_IT+0x42>
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f84:	d007      	beq.n	8005f96 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f042 0201 	orr.w	r2, r2, #1
 8005f94:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f96:	2300      	movs	r3, #0
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3714      	adds	r7, #20
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr
 8005fa4:	00010007 	.word	0x00010007

08005fa8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b082      	sub	sp, #8
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	f003 0302 	and.w	r3, r3, #2
 8005fba:	2b02      	cmp	r3, #2
 8005fbc:	d122      	bne.n	8006004 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	f003 0302 	and.w	r3, r3, #2
 8005fc8:	2b02      	cmp	r3, #2
 8005fca:	d11b      	bne.n	8006004 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f06f 0202 	mvn.w	r2, #2
 8005fd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2201      	movs	r2, #1
 8005fda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	699b      	ldr	r3, [r3, #24]
 8005fe2:	f003 0303 	and.w	r3, r3, #3
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d003      	beq.n	8005ff2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f000 f905 	bl	80061fa <HAL_TIM_IC_CaptureCallback>
 8005ff0:	e005      	b.n	8005ffe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 f8f7 	bl	80061e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f000 f908 	bl	800620e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	f003 0304 	and.w	r3, r3, #4
 800600e:	2b04      	cmp	r3, #4
 8006010:	d122      	bne.n	8006058 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	f003 0304 	and.w	r3, r3, #4
 800601c:	2b04      	cmp	r3, #4
 800601e:	d11b      	bne.n	8006058 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f06f 0204 	mvn.w	r2, #4
 8006028:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2202      	movs	r2, #2
 800602e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	699b      	ldr	r3, [r3, #24]
 8006036:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800603a:	2b00      	cmp	r3, #0
 800603c:	d003      	beq.n	8006046 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 f8db 	bl	80061fa <HAL_TIM_IC_CaptureCallback>
 8006044:	e005      	b.n	8006052 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 f8cd 	bl	80061e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f000 f8de 	bl	800620e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	691b      	ldr	r3, [r3, #16]
 800605e:	f003 0308 	and.w	r3, r3, #8
 8006062:	2b08      	cmp	r3, #8
 8006064:	d122      	bne.n	80060ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	f003 0308 	and.w	r3, r3, #8
 8006070:	2b08      	cmp	r3, #8
 8006072:	d11b      	bne.n	80060ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f06f 0208 	mvn.w	r2, #8
 800607c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2204      	movs	r2, #4
 8006082:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	69db      	ldr	r3, [r3, #28]
 800608a:	f003 0303 	and.w	r3, r3, #3
 800608e:	2b00      	cmp	r3, #0
 8006090:	d003      	beq.n	800609a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 f8b1 	bl	80061fa <HAL_TIM_IC_CaptureCallback>
 8006098:	e005      	b.n	80060a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 f8a3 	bl	80061e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f000 f8b4 	bl	800620e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	f003 0310 	and.w	r3, r3, #16
 80060b6:	2b10      	cmp	r3, #16
 80060b8:	d122      	bne.n	8006100 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	68db      	ldr	r3, [r3, #12]
 80060c0:	f003 0310 	and.w	r3, r3, #16
 80060c4:	2b10      	cmp	r3, #16
 80060c6:	d11b      	bne.n	8006100 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f06f 0210 	mvn.w	r2, #16
 80060d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2208      	movs	r2, #8
 80060d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	69db      	ldr	r3, [r3, #28]
 80060de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d003      	beq.n	80060ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 f887 	bl	80061fa <HAL_TIM_IC_CaptureCallback>
 80060ec:	e005      	b.n	80060fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 f879 	bl	80061e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f000 f88a 	bl	800620e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	f003 0301 	and.w	r3, r3, #1
 800610a:	2b01      	cmp	r3, #1
 800610c:	d10e      	bne.n	800612c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	f003 0301 	and.w	r3, r3, #1
 8006118:	2b01      	cmp	r3, #1
 800611a:	d107      	bne.n	800612c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f06f 0201 	mvn.w	r2, #1
 8006124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f7fa ff90 	bl	800104c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006136:	2b80      	cmp	r3, #128	; 0x80
 8006138:	d10e      	bne.n	8006158 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006144:	2b80      	cmp	r3, #128	; 0x80
 8006146:	d107      	bne.n	8006158 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 f8de 	bl	8006314 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	691b      	ldr	r3, [r3, #16]
 800615e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006162:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006166:	d10e      	bne.n	8006186 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	68db      	ldr	r3, [r3, #12]
 800616e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006172:	2b80      	cmp	r3, #128	; 0x80
 8006174:	d107      	bne.n	8006186 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800617e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f000 f8d1 	bl	8006328 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	691b      	ldr	r3, [r3, #16]
 800618c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006190:	2b40      	cmp	r3, #64	; 0x40
 8006192:	d10e      	bne.n	80061b2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800619e:	2b40      	cmp	r3, #64	; 0x40
 80061a0:	d107      	bne.n	80061b2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80061aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f000 f838 	bl	8006222 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	f003 0320 	and.w	r3, r3, #32
 80061bc:	2b20      	cmp	r3, #32
 80061be:	d10e      	bne.n	80061de <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	f003 0320 	and.w	r3, r3, #32
 80061ca:	2b20      	cmp	r3, #32
 80061cc:	d107      	bne.n	80061de <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f06f 0220 	mvn.w	r2, #32
 80061d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f000 f891 	bl	8006300 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80061de:	bf00      	nop
 80061e0:	3708      	adds	r7, #8
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}

080061e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061e6:	b480      	push	{r7}
 80061e8:	b083      	sub	sp, #12
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80061ee:	bf00      	nop
 80061f0:	370c      	adds	r7, #12
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr

080061fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80061fa:	b480      	push	{r7}
 80061fc:	b083      	sub	sp, #12
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006202:	bf00      	nop
 8006204:	370c      	adds	r7, #12
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr

0800620e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800620e:	b480      	push	{r7}
 8006210:	b083      	sub	sp, #12
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006216:	bf00      	nop
 8006218:	370c      	adds	r7, #12
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr

08006222 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006222:	b480      	push	{r7}
 8006224:	b083      	sub	sp, #12
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800622a:	bf00      	nop
 800622c:	370c      	adds	r7, #12
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr
	...

08006238 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006238:	b480      	push	{r7}
 800623a:	b085      	sub	sp, #20
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4a2a      	ldr	r2, [pc, #168]	; (80062f4 <TIM_Base_SetConfig+0xbc>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d003      	beq.n	8006258 <TIM_Base_SetConfig+0x20>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006256:	d108      	bne.n	800626a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800625e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	68fa      	ldr	r2, [r7, #12]
 8006266:	4313      	orrs	r3, r2
 8006268:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a21      	ldr	r2, [pc, #132]	; (80062f4 <TIM_Base_SetConfig+0xbc>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d00b      	beq.n	800628a <TIM_Base_SetConfig+0x52>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006278:	d007      	beq.n	800628a <TIM_Base_SetConfig+0x52>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a1e      	ldr	r2, [pc, #120]	; (80062f8 <TIM_Base_SetConfig+0xc0>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d003      	beq.n	800628a <TIM_Base_SetConfig+0x52>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a1d      	ldr	r2, [pc, #116]	; (80062fc <TIM_Base_SetConfig+0xc4>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d108      	bne.n	800629c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006290:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	4313      	orrs	r3, r2
 800629a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	695b      	ldr	r3, [r3, #20]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	68fa      	ldr	r2, [r7, #12]
 80062ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	689a      	ldr	r2, [r3, #8]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	4a0c      	ldr	r2, [pc, #48]	; (80062f4 <TIM_Base_SetConfig+0xbc>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d007      	beq.n	80062d8 <TIM_Base_SetConfig+0xa0>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	4a0b      	ldr	r2, [pc, #44]	; (80062f8 <TIM_Base_SetConfig+0xc0>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d003      	beq.n	80062d8 <TIM_Base_SetConfig+0xa0>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	4a0a      	ldr	r2, [pc, #40]	; (80062fc <TIM_Base_SetConfig+0xc4>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d103      	bne.n	80062e0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	691a      	ldr	r2, [r3, #16]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2201      	movs	r2, #1
 80062e4:	615a      	str	r2, [r3, #20]
}
 80062e6:	bf00      	nop
 80062e8:	3714      	adds	r7, #20
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr
 80062f2:	bf00      	nop
 80062f4:	40012c00 	.word	0x40012c00
 80062f8:	40014000 	.word	0x40014000
 80062fc:	40014400 	.word	0x40014400

08006300 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006300:	b480      	push	{r7}
 8006302:	b083      	sub	sp, #12
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006308:	bf00      	nop
 800630a:	370c      	adds	r7, #12
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr

08006314 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800631c:	bf00      	nop
 800631e:	370c      	adds	r7, #12
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr

08006328 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006328:	b480      	push	{r7}
 800632a:	b083      	sub	sp, #12
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006330:	bf00      	nop
 8006332:	370c      	adds	r7, #12
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800633c:	b084      	sub	sp, #16
 800633e:	b480      	push	{r7}
 8006340:	b083      	sub	sp, #12
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
 8006346:	f107 0014 	add.w	r0, r7, #20
 800634a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800634e:	2300      	movs	r3, #0
}
 8006350:	4618      	mov	r0, r3
 8006352:	370c      	adds	r7, #12
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	b004      	add	sp, #16
 800635c:	4770      	bx	lr

0800635e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800635e:	b480      	push	{r7}
 8006360:	b085      	sub	sp, #20
 8006362:	af00      	add	r7, sp, #0
 8006364:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006366:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800636a:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006372:	b29a      	uxth	r2, r3
 8006374:	89fb      	ldrh	r3, [r7, #14]
 8006376:	4313      	orrs	r3, r2
 8006378:	b29a      	uxth	r2, r3
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	3714      	adds	r7, #20
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr

0800638e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800638e:	b480      	push	{r7}
 8006390:	b085      	sub	sp, #20
 8006392:	af00      	add	r7, sp, #0
 8006394:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006396:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800639a:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	b21a      	sxth	r2, r3
 80063a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80063aa:	43db      	mvns	r3, r3
 80063ac:	b21b      	sxth	r3, r3
 80063ae:	4013      	ands	r3, r2
 80063b0:	b21b      	sxth	r3, r3
 80063b2:	b29a      	uxth	r2, r3
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80063ba:	2300      	movs	r3, #0
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3714      	adds	r7, #20
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b083      	sub	sp, #12
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	460b      	mov	r3, r1
 80063d2:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80063d4:	2300      	movs	r3, #0
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	370c      	adds	r7, #12
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr

080063e2 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80063e2:	b084      	sub	sp, #16
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b082      	sub	sp, #8
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	f107 0014 	add.w	r0, r7, #20
 80063f0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2201      	movs	r2, #1
 80063f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f7ff ffa2 	bl	800635e <USB_EnableGlobalInt>

  return HAL_OK;
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	3708      	adds	r7, #8
 8006420:	46bd      	mov	sp, r7
 8006422:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006426:	b004      	add	sp, #16
 8006428:	4770      	bx	lr
	...

0800642c <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800642c:	b490      	push	{r4, r7}
 800642e:	b086      	sub	sp, #24
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006436:	2300      	movs	r3, #0
 8006438:	75fb      	strb	r3, [r7, #23]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	4413      	add	r3, r2
 8006444:	881b      	ldrh	r3, [r3, #0]
 8006446:	b29b      	uxth	r3, r3
 8006448:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800644c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006450:	82bb      	strh	r3, [r7, #20]

  /* initialize Endpoint */
  switch (ep->type)
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	78db      	ldrb	r3, [r3, #3]
 8006456:	2b03      	cmp	r3, #3
 8006458:	d819      	bhi.n	800648e <USB_ActivateEndpoint+0x62>
 800645a:	a201      	add	r2, pc, #4	; (adr r2, 8006460 <USB_ActivateEndpoint+0x34>)
 800645c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006460:	08006471 	.word	0x08006471
 8006464:	08006485 	.word	0x08006485
 8006468:	08006495 	.word	0x08006495
 800646c:	0800647b 	.word	0x0800647b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006470:	8abb      	ldrh	r3, [r7, #20]
 8006472:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006476:	82bb      	strh	r3, [r7, #20]
      break;
 8006478:	e00d      	b.n	8006496 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800647a:	8abb      	ldrh	r3, [r7, #20]
 800647c:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006480:	82bb      	strh	r3, [r7, #20]
      break;
 8006482:	e008      	b.n	8006496 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006484:	8abb      	ldrh	r3, [r7, #20]
 8006486:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800648a:	82bb      	strh	r3, [r7, #20]
      break;
 800648c:	e003      	b.n	8006496 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	75fb      	strb	r3, [r7, #23]
      break;
 8006492:	e000      	b.n	8006496 <USB_ActivateEndpoint+0x6a>
      break;
 8006494:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	009b      	lsls	r3, r3, #2
 800649e:	441a      	add	r2, r3
 80064a0:	8abb      	ldrh	r3, [r7, #20]
 80064a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	009b      	lsls	r3, r3, #2
 80064be:	4413      	add	r3, r2
 80064c0:	881b      	ldrh	r3, [r3, #0]
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	b21b      	sxth	r3, r3
 80064c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ce:	b21a      	sxth	r2, r3
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	b21b      	sxth	r3, r3
 80064d6:	4313      	orrs	r3, r2
 80064d8:	b21b      	sxth	r3, r3
 80064da:	b29c      	uxth	r4, r3
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	009b      	lsls	r3, r3, #2
 80064e4:	441a      	add	r2, r3
 80064e6:	4b87      	ldr	r3, [pc, #540]	; (8006704 <USB_ActivateEndpoint+0x2d8>)
 80064e8:	4323      	orrs	r3, r4
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	7b1b      	ldrb	r3, [r3, #12]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	f040 810c 	bne.w	8006710 <USB_ActivateEndpoint+0x2e4>
  {
    if (ep->is_in != 0U)
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	785b      	ldrb	r3, [r3, #1]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d067      	beq.n	80065d0 <USB_ActivateEndpoint+0x1a4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006500:	687c      	ldr	r4, [r7, #4]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006508:	b29b      	uxth	r3, r3
 800650a:	441c      	add	r4, r3
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	00db      	lsls	r3, r3, #3
 8006512:	4423      	add	r3, r4
 8006514:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006518:	461c      	mov	r4, r3
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	88db      	ldrh	r3, [r3, #6]
 800651e:	085b      	lsrs	r3, r3, #1
 8006520:	b29b      	uxth	r3, r3
 8006522:	005b      	lsls	r3, r3, #1
 8006524:	b29b      	uxth	r3, r3
 8006526:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	4413      	add	r3, r2
 8006532:	881b      	ldrh	r3, [r3, #0]
 8006534:	b29c      	uxth	r4, r3
 8006536:	4623      	mov	r3, r4
 8006538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800653c:	2b00      	cmp	r3, #0
 800653e:	d014      	beq.n	800656a <USB_ActivateEndpoint+0x13e>
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	4413      	add	r3, r2
 800654a:	881b      	ldrh	r3, [r3, #0]
 800654c:	b29b      	uxth	r3, r3
 800654e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006556:	b29c      	uxth	r4, r3
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	441a      	add	r2, r3
 8006562:	4b69      	ldr	r3, [pc, #420]	; (8006708 <USB_ActivateEndpoint+0x2dc>)
 8006564:	4323      	orrs	r3, r4
 8006566:	b29b      	uxth	r3, r3
 8006568:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	78db      	ldrb	r3, [r3, #3]
 800656e:	2b01      	cmp	r3, #1
 8006570:	d018      	beq.n	80065a4 <USB_ActivateEndpoint+0x178>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	4413      	add	r3, r2
 800657c:	881b      	ldrh	r3, [r3, #0]
 800657e:	b29b      	uxth	r3, r3
 8006580:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006584:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006588:	b29c      	uxth	r4, r3
 800658a:	f084 0320 	eor.w	r3, r4, #32
 800658e:	b29c      	uxth	r4, r3
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	441a      	add	r2, r3
 800659a:	4b5a      	ldr	r3, [pc, #360]	; (8006704 <USB_ActivateEndpoint+0x2d8>)
 800659c:	4323      	orrs	r3, r4
 800659e:	b29b      	uxth	r3, r3
 80065a0:	8013      	strh	r3, [r2, #0]
 80065a2:	e225      	b.n	80069f0 <USB_ActivateEndpoint+0x5c4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	4413      	add	r3, r2
 80065ae:	881b      	ldrh	r3, [r3, #0]
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065ba:	b29c      	uxth	r4, r3
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	441a      	add	r2, r3
 80065c6:	4b4f      	ldr	r3, [pc, #316]	; (8006704 <USB_ActivateEndpoint+0x2d8>)
 80065c8:	4323      	orrs	r3, r4
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	8013      	strh	r3, [r2, #0]
 80065ce:	e20f      	b.n	80069f0 <USB_ActivateEndpoint+0x5c4>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80065d0:	687c      	ldr	r4, [r7, #4]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065d8:	b29b      	uxth	r3, r3
 80065da:	441c      	add	r4, r3
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	00db      	lsls	r3, r3, #3
 80065e2:	4423      	add	r3, r4
 80065e4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80065e8:	461c      	mov	r4, r3
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	88db      	ldrh	r3, [r3, #6]
 80065ee:	085b      	lsrs	r3, r3, #1
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	005b      	lsls	r3, r3, #1
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80065f8:	687c      	ldr	r4, [r7, #4]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006600:	b29b      	uxth	r3, r3
 8006602:	441c      	add	r4, r3
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	00db      	lsls	r3, r3, #3
 800660a:	4423      	add	r3, r4
 800660c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006610:	60fb      	str	r3, [r7, #12]
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	691b      	ldr	r3, [r3, #16]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d110      	bne.n	800663c <USB_ActivateEndpoint+0x210>
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	881b      	ldrh	r3, [r3, #0]
 800661e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006622:	b29a      	uxth	r2, r3
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	801a      	strh	r2, [r3, #0]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	881b      	ldrh	r3, [r3, #0]
 800662c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006630:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006634:	b29a      	uxth	r2, r3
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	801a      	strh	r2, [r3, #0]
 800663a:	e026      	b.n	800668a <USB_ActivateEndpoint+0x25e>
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	691b      	ldr	r3, [r3, #16]
 8006640:	2b3d      	cmp	r3, #61	; 0x3d
 8006642:	d813      	bhi.n	800666c <USB_ActivateEndpoint+0x240>
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	691b      	ldr	r3, [r3, #16]
 8006648:	085b      	lsrs	r3, r3, #1
 800664a:	613b      	str	r3, [r7, #16]
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	691b      	ldr	r3, [r3, #16]
 8006650:	f003 0301 	and.w	r3, r3, #1
 8006654:	2b00      	cmp	r3, #0
 8006656:	d002      	beq.n	800665e <USB_ActivateEndpoint+0x232>
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	3301      	adds	r3, #1
 800665c:	613b      	str	r3, [r7, #16]
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	b29b      	uxth	r3, r3
 8006662:	029b      	lsls	r3, r3, #10
 8006664:	b29a      	uxth	r2, r3
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	801a      	strh	r2, [r3, #0]
 800666a:	e00e      	b.n	800668a <USB_ActivateEndpoint+0x25e>
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	691b      	ldr	r3, [r3, #16]
 8006670:	095b      	lsrs	r3, r3, #5
 8006672:	613b      	str	r3, [r7, #16]
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	b29b      	uxth	r3, r3
 8006678:	029b      	lsls	r3, r3, #10
 800667a:	b29b      	uxth	r3, r3
 800667c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006680:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006684:	b29a      	uxth	r2, r3
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	4413      	add	r3, r2
 8006694:	881b      	ldrh	r3, [r3, #0]
 8006696:	b29c      	uxth	r4, r3
 8006698:	4623      	mov	r3, r4
 800669a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d014      	beq.n	80066cc <USB_ActivateEndpoint+0x2a0>
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	4413      	add	r3, r2
 80066ac:	881b      	ldrh	r3, [r3, #0]
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066b8:	b29c      	uxth	r4, r3
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	441a      	add	r2, r3
 80066c4:	4b11      	ldr	r3, [pc, #68]	; (800670c <USB_ActivateEndpoint+0x2e0>)
 80066c6:	4323      	orrs	r3, r4
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	4413      	add	r3, r2
 80066d6:	881b      	ldrh	r3, [r3, #0]
 80066d8:	b29b      	uxth	r3, r3
 80066da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066e2:	b29c      	uxth	r4, r3
 80066e4:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80066e8:	b29c      	uxth	r4, r3
 80066ea:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80066ee:	b29c      	uxth	r4, r3
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	441a      	add	r2, r3
 80066fa:	4b02      	ldr	r3, [pc, #8]	; (8006704 <USB_ActivateEndpoint+0x2d8>)
 80066fc:	4323      	orrs	r3, r4
 80066fe:	b29b      	uxth	r3, r3
 8006700:	8013      	strh	r3, [r2, #0]
 8006702:	e175      	b.n	80069f0 <USB_ActivateEndpoint+0x5c4>
 8006704:	ffff8080 	.word	0xffff8080
 8006708:	ffff80c0 	.word	0xffff80c0
 800670c:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	4413      	add	r3, r2
 800671a:	881b      	ldrh	r3, [r3, #0]
 800671c:	b29b      	uxth	r3, r3
 800671e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006726:	b29c      	uxth	r4, r3
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	441a      	add	r2, r3
 8006732:	4b96      	ldr	r3, [pc, #600]	; (800698c <USB_ActivateEndpoint+0x560>)
 8006734:	4323      	orrs	r3, r4
 8006736:	b29b      	uxth	r3, r3
 8006738:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800673a:	687c      	ldr	r4, [r7, #4]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006742:	b29b      	uxth	r3, r3
 8006744:	441c      	add	r4, r3
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	00db      	lsls	r3, r3, #3
 800674c:	4423      	add	r3, r4
 800674e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006752:	461c      	mov	r4, r3
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	891b      	ldrh	r3, [r3, #8]
 8006758:	085b      	lsrs	r3, r3, #1
 800675a:	b29b      	uxth	r3, r3
 800675c:	005b      	lsls	r3, r3, #1
 800675e:	b29b      	uxth	r3, r3
 8006760:	8023      	strh	r3, [r4, #0]
 8006762:	687c      	ldr	r4, [r7, #4]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800676a:	b29b      	uxth	r3, r3
 800676c:	441c      	add	r4, r3
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	00db      	lsls	r3, r3, #3
 8006774:	4423      	add	r3, r4
 8006776:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800677a:	461c      	mov	r4, r3
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	895b      	ldrh	r3, [r3, #10]
 8006780:	085b      	lsrs	r3, r3, #1
 8006782:	b29b      	uxth	r3, r3
 8006784:	005b      	lsls	r3, r3, #1
 8006786:	b29b      	uxth	r3, r3
 8006788:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	785b      	ldrb	r3, [r3, #1]
 800678e:	2b00      	cmp	r3, #0
 8006790:	f040 8088 	bne.w	80068a4 <USB_ActivateEndpoint+0x478>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	781b      	ldrb	r3, [r3, #0]
 800679a:	009b      	lsls	r3, r3, #2
 800679c:	4413      	add	r3, r2
 800679e:	881b      	ldrh	r3, [r3, #0]
 80067a0:	b29c      	uxth	r4, r3
 80067a2:	4623      	mov	r3, r4
 80067a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d014      	beq.n	80067d6 <USB_ActivateEndpoint+0x3aa>
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	4413      	add	r3, r2
 80067b6:	881b      	ldrh	r3, [r3, #0]
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067c2:	b29c      	uxth	r4, r3
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	441a      	add	r2, r3
 80067ce:	4b70      	ldr	r3, [pc, #448]	; (8006990 <USB_ActivateEndpoint+0x564>)
 80067d0:	4323      	orrs	r3, r4
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	4413      	add	r3, r2
 80067e0:	881b      	ldrh	r3, [r3, #0]
 80067e2:	b29c      	uxth	r4, r3
 80067e4:	4623      	mov	r3, r4
 80067e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d014      	beq.n	8006818 <USB_ActivateEndpoint+0x3ec>
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	4413      	add	r3, r2
 80067f8:	881b      	ldrh	r3, [r3, #0]
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006800:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006804:	b29c      	uxth	r4, r3
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	441a      	add	r2, r3
 8006810:	4b60      	ldr	r3, [pc, #384]	; (8006994 <USB_ActivateEndpoint+0x568>)
 8006812:	4323      	orrs	r3, r4
 8006814:	b29b      	uxth	r3, r3
 8006816:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	4413      	add	r3, r2
 8006822:	881b      	ldrh	r3, [r3, #0]
 8006824:	b29b      	uxth	r3, r3
 8006826:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800682a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800682e:	b29c      	uxth	r4, r3
 8006830:	687a      	ldr	r2, [r7, #4]
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	441a      	add	r2, r3
 800683a:	4b56      	ldr	r3, [pc, #344]	; (8006994 <USB_ActivateEndpoint+0x568>)
 800683c:	4323      	orrs	r3, r4
 800683e:	b29b      	uxth	r3, r3
 8006840:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	4413      	add	r3, r2
 800684c:	881b      	ldrh	r3, [r3, #0]
 800684e:	b29b      	uxth	r3, r3
 8006850:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006854:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006858:	b29c      	uxth	r4, r3
 800685a:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800685e:	b29c      	uxth	r4, r3
 8006860:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8006864:	b29c      	uxth	r4, r3
 8006866:	687a      	ldr	r2, [r7, #4]
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	009b      	lsls	r3, r3, #2
 800686e:	441a      	add	r2, r3
 8006870:	4b49      	ldr	r3, [pc, #292]	; (8006998 <USB_ActivateEndpoint+0x56c>)
 8006872:	4323      	orrs	r3, r4
 8006874:	b29b      	uxth	r3, r3
 8006876:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006878:	687a      	ldr	r2, [r7, #4]
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	4413      	add	r3, r2
 8006882:	881b      	ldrh	r3, [r3, #0]
 8006884:	b29b      	uxth	r3, r3
 8006886:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800688a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800688e:	b29c      	uxth	r4, r3
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	441a      	add	r2, r3
 800689a:	4b3f      	ldr	r3, [pc, #252]	; (8006998 <USB_ActivateEndpoint+0x56c>)
 800689c:	4323      	orrs	r3, r4
 800689e:	b29b      	uxth	r3, r3
 80068a0:	8013      	strh	r3, [r2, #0]
 80068a2:	e0a5      	b.n	80069f0 <USB_ActivateEndpoint+0x5c4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	4413      	add	r3, r2
 80068ae:	881b      	ldrh	r3, [r3, #0]
 80068b0:	b29c      	uxth	r4, r3
 80068b2:	4623      	mov	r3, r4
 80068b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d014      	beq.n	80068e6 <USB_ActivateEndpoint+0x4ba>
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	4413      	add	r3, r2
 80068c6:	881b      	ldrh	r3, [r3, #0]
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068d2:	b29c      	uxth	r4, r3
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	441a      	add	r2, r3
 80068de:	4b2c      	ldr	r3, [pc, #176]	; (8006990 <USB_ActivateEndpoint+0x564>)
 80068e0:	4323      	orrs	r3, r4
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	4413      	add	r3, r2
 80068f0:	881b      	ldrh	r3, [r3, #0]
 80068f2:	b29c      	uxth	r4, r3
 80068f4:	4623      	mov	r3, r4
 80068f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d014      	beq.n	8006928 <USB_ActivateEndpoint+0x4fc>
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	4413      	add	r3, r2
 8006908:	881b      	ldrh	r3, [r3, #0]
 800690a:	b29b      	uxth	r3, r3
 800690c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006910:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006914:	b29c      	uxth	r4, r3
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	441a      	add	r2, r3
 8006920:	4b1c      	ldr	r3, [pc, #112]	; (8006994 <USB_ActivateEndpoint+0x568>)
 8006922:	4323      	orrs	r3, r4
 8006924:	b29b      	uxth	r3, r3
 8006926:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	4413      	add	r3, r2
 8006932:	881b      	ldrh	r3, [r3, #0]
 8006934:	b29b      	uxth	r3, r3
 8006936:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800693a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800693e:	b29c      	uxth	r4, r3
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	441a      	add	r2, r3
 800694a:	4b11      	ldr	r3, [pc, #68]	; (8006990 <USB_ActivateEndpoint+0x564>)
 800694c:	4323      	orrs	r3, r4
 800694e:	b29b      	uxth	r3, r3
 8006950:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	78db      	ldrb	r3, [r3, #3]
 8006956:	2b01      	cmp	r3, #1
 8006958:	d020      	beq.n	800699c <USB_ActivateEndpoint+0x570>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	4413      	add	r3, r2
 8006964:	881b      	ldrh	r3, [r3, #0]
 8006966:	b29b      	uxth	r3, r3
 8006968:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800696c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006970:	b29c      	uxth	r4, r3
 8006972:	f084 0320 	eor.w	r3, r4, #32
 8006976:	b29c      	uxth	r4, r3
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	441a      	add	r2, r3
 8006982:	4b05      	ldr	r3, [pc, #20]	; (8006998 <USB_ActivateEndpoint+0x56c>)
 8006984:	4323      	orrs	r3, r4
 8006986:	b29b      	uxth	r3, r3
 8006988:	8013      	strh	r3, [r2, #0]
 800698a:	e01c      	b.n	80069c6 <USB_ActivateEndpoint+0x59a>
 800698c:	ffff8180 	.word	0xffff8180
 8006990:	ffffc080 	.word	0xffffc080
 8006994:	ffff80c0 	.word	0xffff80c0
 8006998:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	009b      	lsls	r3, r3, #2
 80069a4:	4413      	add	r3, r2
 80069a6:	881b      	ldrh	r3, [r3, #0]
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069b2:	b29c      	uxth	r4, r3
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	009b      	lsls	r3, r3, #2
 80069bc:	441a      	add	r2, r3
 80069be:	4b0f      	ldr	r3, [pc, #60]	; (80069fc <USB_ActivateEndpoint+0x5d0>)
 80069c0:	4323      	orrs	r3, r4
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	4413      	add	r3, r2
 80069d0:	881b      	ldrh	r3, [r3, #0]
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069dc:	b29c      	uxth	r4, r3
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	441a      	add	r2, r3
 80069e8:	4b04      	ldr	r3, [pc, #16]	; (80069fc <USB_ActivateEndpoint+0x5d0>)
 80069ea:	4323      	orrs	r3, r4
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80069f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3718      	adds	r7, #24
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bc90      	pop	{r4, r7}
 80069fa:	4770      	bx	lr
 80069fc:	ffff8080 	.word	0xffff8080

08006a00 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006a00:	b490      	push	{r4, r7}
 8006a02:	b082      	sub	sp, #8
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	7b1b      	ldrb	r3, [r3, #12]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d171      	bne.n	8006af6 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	785b      	ldrb	r3, [r3, #1]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d036      	beq.n	8006a88 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	4413      	add	r3, r2
 8006a24:	881b      	ldrh	r3, [r3, #0]
 8006a26:	b29c      	uxth	r4, r3
 8006a28:	4623      	mov	r3, r4
 8006a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d014      	beq.n	8006a5c <USB_DeactivateEndpoint+0x5c>
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	4413      	add	r3, r2
 8006a3c:	881b      	ldrh	r3, [r3, #0]
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a48:	b29c      	uxth	r4, r3
 8006a4a:	687a      	ldr	r2, [r7, #4]
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	781b      	ldrb	r3, [r3, #0]
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	441a      	add	r2, r3
 8006a54:	4b6b      	ldr	r3, [pc, #428]	; (8006c04 <USB_DeactivateEndpoint+0x204>)
 8006a56:	4323      	orrs	r3, r4
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	4413      	add	r3, r2
 8006a66:	881b      	ldrh	r3, [r3, #0]
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a72:	b29c      	uxth	r4, r3
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	441a      	add	r2, r3
 8006a7e:	4b62      	ldr	r3, [pc, #392]	; (8006c08 <USB_DeactivateEndpoint+0x208>)
 8006a80:	4323      	orrs	r3, r4
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	8013      	strh	r3, [r2, #0]
 8006a86:	e144      	b.n	8006d12 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	4413      	add	r3, r2
 8006a92:	881b      	ldrh	r3, [r3, #0]
 8006a94:	b29c      	uxth	r4, r3
 8006a96:	4623      	mov	r3, r4
 8006a98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d014      	beq.n	8006aca <USB_DeactivateEndpoint+0xca>
 8006aa0:	687a      	ldr	r2, [r7, #4]
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	4413      	add	r3, r2
 8006aaa:	881b      	ldrh	r3, [r3, #0]
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ab6:	b29c      	uxth	r4, r3
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	441a      	add	r2, r3
 8006ac2:	4b52      	ldr	r3, [pc, #328]	; (8006c0c <USB_DeactivateEndpoint+0x20c>)
 8006ac4:	4323      	orrs	r3, r4
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	781b      	ldrb	r3, [r3, #0]
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	4413      	add	r3, r2
 8006ad4:	881b      	ldrh	r3, [r3, #0]
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006adc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ae0:	b29c      	uxth	r4, r3
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	009b      	lsls	r3, r3, #2
 8006aea:	441a      	add	r2, r3
 8006aec:	4b46      	ldr	r3, [pc, #280]	; (8006c08 <USB_DeactivateEndpoint+0x208>)
 8006aee:	4323      	orrs	r3, r4
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	8013      	strh	r3, [r2, #0]
 8006af4:	e10d      	b.n	8006d12 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	785b      	ldrb	r3, [r3, #1]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	f040 8088 	bne.w	8006c10 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	009b      	lsls	r3, r3, #2
 8006b08:	4413      	add	r3, r2
 8006b0a:	881b      	ldrh	r3, [r3, #0]
 8006b0c:	b29c      	uxth	r4, r3
 8006b0e:	4623      	mov	r3, r4
 8006b10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d014      	beq.n	8006b42 <USB_DeactivateEndpoint+0x142>
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	4413      	add	r3, r2
 8006b22:	881b      	ldrh	r3, [r3, #0]
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b2e:	b29c      	uxth	r4, r3
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	441a      	add	r2, r3
 8006b3a:	4b34      	ldr	r3, [pc, #208]	; (8006c0c <USB_DeactivateEndpoint+0x20c>)
 8006b3c:	4323      	orrs	r3, r4
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	4413      	add	r3, r2
 8006b4c:	881b      	ldrh	r3, [r3, #0]
 8006b4e:	b29c      	uxth	r4, r3
 8006b50:	4623      	mov	r3, r4
 8006b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d014      	beq.n	8006b84 <USB_DeactivateEndpoint+0x184>
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	4413      	add	r3, r2
 8006b64:	881b      	ldrh	r3, [r3, #0]
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b70:	b29c      	uxth	r4, r3
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	441a      	add	r2, r3
 8006b7c:	4b21      	ldr	r3, [pc, #132]	; (8006c04 <USB_DeactivateEndpoint+0x204>)
 8006b7e:	4323      	orrs	r3, r4
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	4413      	add	r3, r2
 8006b8e:	881b      	ldrh	r3, [r3, #0]
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b9a:	b29c      	uxth	r4, r3
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	441a      	add	r2, r3
 8006ba6:	4b17      	ldr	r3, [pc, #92]	; (8006c04 <USB_DeactivateEndpoint+0x204>)
 8006ba8:	4323      	orrs	r3, r4
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	4413      	add	r3, r2
 8006bb8:	881b      	ldrh	r3, [r3, #0]
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bc4:	b29c      	uxth	r4, r3
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	441a      	add	r2, r3
 8006bd0:	4b0d      	ldr	r3, [pc, #52]	; (8006c08 <USB_DeactivateEndpoint+0x208>)
 8006bd2:	4323      	orrs	r3, r4
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	009b      	lsls	r3, r3, #2
 8006be0:	4413      	add	r3, r2
 8006be2:	881b      	ldrh	r3, [r3, #0]
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bee:	b29c      	uxth	r4, r3
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	441a      	add	r2, r3
 8006bfa:	4b03      	ldr	r3, [pc, #12]	; (8006c08 <USB_DeactivateEndpoint+0x208>)
 8006bfc:	4323      	orrs	r3, r4
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	8013      	strh	r3, [r2, #0]
 8006c02:	e086      	b.n	8006d12 <USB_DeactivateEndpoint+0x312>
 8006c04:	ffff80c0 	.word	0xffff80c0
 8006c08:	ffff8080 	.word	0xffff8080
 8006c0c:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	4413      	add	r3, r2
 8006c1a:	881b      	ldrh	r3, [r3, #0]
 8006c1c:	b29c      	uxth	r4, r3
 8006c1e:	4623      	mov	r3, r4
 8006c20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d014      	beq.n	8006c52 <USB_DeactivateEndpoint+0x252>
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	4413      	add	r3, r2
 8006c32:	881b      	ldrh	r3, [r3, #0]
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c3e:	b29c      	uxth	r4, r3
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	441a      	add	r2, r3
 8006c4a:	4b35      	ldr	r3, [pc, #212]	; (8006d20 <USB_DeactivateEndpoint+0x320>)
 8006c4c:	4323      	orrs	r3, r4
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c52:	687a      	ldr	r2, [r7, #4]
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	4413      	add	r3, r2
 8006c5c:	881b      	ldrh	r3, [r3, #0]
 8006c5e:	b29c      	uxth	r4, r3
 8006c60:	4623      	mov	r3, r4
 8006c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d014      	beq.n	8006c94 <USB_DeactivateEndpoint+0x294>
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	4413      	add	r3, r2
 8006c74:	881b      	ldrh	r3, [r3, #0]
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c80:	b29c      	uxth	r4, r3
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	441a      	add	r2, r3
 8006c8c:	4b25      	ldr	r3, [pc, #148]	; (8006d24 <USB_DeactivateEndpoint+0x324>)
 8006c8e:	4323      	orrs	r3, r4
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	4413      	add	r3, r2
 8006c9e:	881b      	ldrh	r3, [r3, #0]
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006caa:	b29c      	uxth	r4, r3
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	441a      	add	r2, r3
 8006cb6:	4b1a      	ldr	r3, [pc, #104]	; (8006d20 <USB_DeactivateEndpoint+0x320>)
 8006cb8:	4323      	orrs	r3, r4
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	4413      	add	r3, r2
 8006cc8:	881b      	ldrh	r3, [r3, #0]
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cd4:	b29c      	uxth	r4, r3
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	441a      	add	r2, r3
 8006ce0:	4b11      	ldr	r3, [pc, #68]	; (8006d28 <USB_DeactivateEndpoint+0x328>)
 8006ce2:	4323      	orrs	r3, r4
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	4413      	add	r3, r2
 8006cf2:	881b      	ldrh	r3, [r3, #0]
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cfe:	b29c      	uxth	r4, r3
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	009b      	lsls	r3, r3, #2
 8006d08:	441a      	add	r2, r3
 8006d0a:	4b07      	ldr	r3, [pc, #28]	; (8006d28 <USB_DeactivateEndpoint+0x328>)
 8006d0c:	4323      	orrs	r3, r4
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006d12:	2300      	movs	r3, #0
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3708      	adds	r7, #8
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bc90      	pop	{r4, r7}
 8006d1c:	4770      	bx	lr
 8006d1e:	bf00      	nop
 8006d20:	ffffc080 	.word	0xffffc080
 8006d24:	ffff80c0 	.word	0xffff80c0
 8006d28:	ffff8080 	.word	0xffff8080

08006d2c <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006d2c:	b590      	push	{r4, r7, lr}
 8006d2e:	b095      	sub	sp, #84	; 0x54
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	785b      	ldrb	r3, [r3, #1]
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	f040 815d 	bne.w	8006ffa <USB_EPStartXfer+0x2ce>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	699a      	ldr	r2, [r3, #24]
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	691b      	ldr	r3, [r3, #16]
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d909      	bls.n	8006d60 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	691b      	ldr	r3, [r3, #16]
 8006d50:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	699a      	ldr	r2, [r3, #24]
 8006d56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d58:	1ad2      	subs	r2, r2, r3
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	619a      	str	r2, [r3, #24]
 8006d5e:	e005      	b.n	8006d6c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	699b      	ldr	r3, [r3, #24]
 8006d64:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	7b1b      	ldrb	r3, [r3, #12]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d11a      	bne.n	8006daa <USB_EPStartXfer+0x7e>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	6959      	ldr	r1, [r3, #20]
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	88da      	ldrh	r2, [r3, #6]
 8006d7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f000 fbb1 	bl	80074e8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006d86:	687c      	ldr	r4, [r7, #4]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	441c      	add	r4, r3
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	00db      	lsls	r3, r3, #3
 8006d98:	4423      	add	r3, r4
 8006d9a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006d9e:	60fb      	str	r3, [r7, #12]
 8006da0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006da2:	b29a      	uxth	r2, r3
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	801a      	strh	r2, [r3, #0]
 8006da8:	e10b      	b.n	8006fc2 <USB_EPStartXfer+0x296>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	4413      	add	r3, r2
 8006db4:	881b      	ldrh	r3, [r3, #0]
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d062      	beq.n	8006e86 <USB_EPStartXfer+0x15a>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006dc0:	687c      	ldr	r4, [r7, #4]
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	785b      	ldrb	r3, [r3, #1]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d144      	bne.n	8006e54 <USB_EPStartXfer+0x128>
 8006dca:	687c      	ldr	r4, [r7, #4]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	441c      	add	r4, r3
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	00db      	lsls	r3, r3, #3
 8006ddc:	4423      	add	r3, r4
 8006dde:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006de2:	613b      	str	r3, [r7, #16]
 8006de4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d110      	bne.n	8006e0c <USB_EPStartXfer+0xe0>
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	881b      	ldrh	r3, [r3, #0]
 8006dee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006df2:	b29a      	uxth	r2, r3
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	801a      	strh	r2, [r3, #0]
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	881b      	ldrh	r3, [r3, #0]
 8006dfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e04:	b29a      	uxth	r2, r3
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	801a      	strh	r2, [r3, #0]
 8006e0a:	e037      	b.n	8006e7c <USB_EPStartXfer+0x150>
 8006e0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e0e:	2b3d      	cmp	r3, #61	; 0x3d
 8006e10:	d811      	bhi.n	8006e36 <USB_EPStartXfer+0x10a>
 8006e12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e14:	085b      	lsrs	r3, r3, #1
 8006e16:	647b      	str	r3, [r7, #68]	; 0x44
 8006e18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e1a:	f003 0301 	and.w	r3, r3, #1
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d002      	beq.n	8006e28 <USB_EPStartXfer+0xfc>
 8006e22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e24:	3301      	adds	r3, #1
 8006e26:	647b      	str	r3, [r7, #68]	; 0x44
 8006e28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	029b      	lsls	r3, r3, #10
 8006e2e:	b29a      	uxth	r2, r3
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	801a      	strh	r2, [r3, #0]
 8006e34:	e022      	b.n	8006e7c <USB_EPStartXfer+0x150>
 8006e36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e38:	095b      	lsrs	r3, r3, #5
 8006e3a:	647b      	str	r3, [r7, #68]	; 0x44
 8006e3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	029b      	lsls	r3, r3, #10
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e4c:	b29a      	uxth	r2, r3
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	801a      	strh	r2, [r3, #0]
 8006e52:	e013      	b.n	8006e7c <USB_EPStartXfer+0x150>
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	785b      	ldrb	r3, [r3, #1]
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d10f      	bne.n	8006e7c <USB_EPStartXfer+0x150>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	441c      	add	r4, r3
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	00db      	lsls	r3, r3, #3
 8006e6c:	4423      	add	r3, r4
 8006e6e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e72:	617b      	str	r3, [r7, #20]
 8006e74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e76:	b29a      	uxth	r2, r3
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	895b      	ldrh	r3, [r3, #10]
 8006e80:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006e84:	e061      	b.n	8006f4a <USB_EPStartXfer+0x21e>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	785b      	ldrb	r3, [r3, #1]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d144      	bne.n	8006f18 <USB_EPStartXfer+0x1ec>
 8006e8e:	687c      	ldr	r4, [r7, #4]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	441c      	add	r4, r3
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	781b      	ldrb	r3, [r3, #0]
 8006e9e:	00db      	lsls	r3, r3, #3
 8006ea0:	4423      	add	r3, r4
 8006ea2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006ea6:	61bb      	str	r3, [r7, #24]
 8006ea8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d110      	bne.n	8006ed0 <USB_EPStartXfer+0x1a4>
 8006eae:	69bb      	ldr	r3, [r7, #24]
 8006eb0:	881b      	ldrh	r3, [r3, #0]
 8006eb2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006eb6:	b29a      	uxth	r2, r3
 8006eb8:	69bb      	ldr	r3, [r7, #24]
 8006eba:	801a      	strh	r2, [r3, #0]
 8006ebc:	69bb      	ldr	r3, [r7, #24]
 8006ebe:	881b      	ldrh	r3, [r3, #0]
 8006ec0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ec4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ec8:	b29a      	uxth	r2, r3
 8006eca:	69bb      	ldr	r3, [r7, #24]
 8006ecc:	801a      	strh	r2, [r3, #0]
 8006ece:	e038      	b.n	8006f42 <USB_EPStartXfer+0x216>
 8006ed0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ed2:	2b3d      	cmp	r3, #61	; 0x3d
 8006ed4:	d811      	bhi.n	8006efa <USB_EPStartXfer+0x1ce>
 8006ed6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ed8:	085b      	lsrs	r3, r3, #1
 8006eda:	643b      	str	r3, [r7, #64]	; 0x40
 8006edc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ede:	f003 0301 	and.w	r3, r3, #1
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d002      	beq.n	8006eec <USB_EPStartXfer+0x1c0>
 8006ee6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ee8:	3301      	adds	r3, #1
 8006eea:	643b      	str	r3, [r7, #64]	; 0x40
 8006eec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	029b      	lsls	r3, r3, #10
 8006ef2:	b29a      	uxth	r2, r3
 8006ef4:	69bb      	ldr	r3, [r7, #24]
 8006ef6:	801a      	strh	r2, [r3, #0]
 8006ef8:	e023      	b.n	8006f42 <USB_EPStartXfer+0x216>
 8006efa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006efc:	095b      	lsrs	r3, r3, #5
 8006efe:	643b      	str	r3, [r7, #64]	; 0x40
 8006f00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	029b      	lsls	r3, r3, #10
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f10:	b29a      	uxth	r2, r3
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	801a      	strh	r2, [r3, #0]
 8006f16:	e014      	b.n	8006f42 <USB_EPStartXfer+0x216>
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	785b      	ldrb	r3, [r3, #1]
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d110      	bne.n	8006f42 <USB_EPStartXfer+0x216>
 8006f20:	687c      	ldr	r4, [r7, #4]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	441c      	add	r4, r3
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	00db      	lsls	r3, r3, #3
 8006f32:	4423      	add	r3, r4
 8006f34:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f38:	61fb      	str	r3, [r7, #28]
 8006f3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f3c:	b29a      	uxth	r2, r3
 8006f3e:	69fb      	ldr	r3, [r7, #28]
 8006f40:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr0;
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	891b      	ldrh	r3, [r3, #8]
 8006f46:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	6959      	ldr	r1, [r3, #20]
 8006f4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 fac6 	bl	80074e8 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	785b      	ldrb	r3, [r3, #1]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d115      	bne.n	8006f90 <USB_EPStartXfer+0x264>
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	4413      	add	r3, r2
 8006f6e:	881b      	ldrh	r3, [r3, #0]
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f7a:	b29c      	uxth	r4, r3
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	009b      	lsls	r3, r3, #2
 8006f84:	441a      	add	r2, r3
 8006f86:	4b99      	ldr	r3, [pc, #612]	; (80071ec <USB_EPStartXfer+0x4c0>)
 8006f88:	4323      	orrs	r3, r4
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	8013      	strh	r3, [r2, #0]
 8006f8e:	e018      	b.n	8006fc2 <USB_EPStartXfer+0x296>
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	785b      	ldrb	r3, [r3, #1]
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d114      	bne.n	8006fc2 <USB_EPStartXfer+0x296>
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	009b      	lsls	r3, r3, #2
 8006fa0:	4413      	add	r3, r2
 8006fa2:	881b      	ldrh	r3, [r3, #0]
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fae:	b29c      	uxth	r4, r3
 8006fb0:	687a      	ldr	r2, [r7, #4]
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	781b      	ldrb	r3, [r3, #0]
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	441a      	add	r2, r3
 8006fba:	4b8d      	ldr	r3, [pc, #564]	; (80071f0 <USB_EPStartXfer+0x4c4>)
 8006fbc:	4323      	orrs	r3, r4
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	009b      	lsls	r3, r3, #2
 8006fca:	4413      	add	r3, r2
 8006fcc:	881b      	ldrh	r3, [r3, #0]
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fd8:	b29c      	uxth	r4, r3
 8006fda:	f084 0310 	eor.w	r3, r4, #16
 8006fde:	b29c      	uxth	r4, r3
 8006fe0:	f084 0320 	eor.w	r3, r4, #32
 8006fe4:	b29c      	uxth	r4, r3
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	781b      	ldrb	r3, [r3, #0]
 8006fec:	009b      	lsls	r3, r3, #2
 8006fee:	441a      	add	r2, r3
 8006ff0:	4b80      	ldr	r3, [pc, #512]	; (80071f4 <USB_EPStartXfer+0x4c8>)
 8006ff2:	4323      	orrs	r3, r4
 8006ff4:	b29b      	uxth	r3, r3
 8006ff6:	8013      	strh	r3, [r2, #0]
 8006ff8:	e13c      	b.n	8007274 <USB_EPStartXfer+0x548>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	699a      	ldr	r2, [r3, #24]
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	691b      	ldr	r3, [r3, #16]
 8007002:	429a      	cmp	r2, r3
 8007004:	d909      	bls.n	800701a <USB_EPStartXfer+0x2ee>
    {
      len = ep->maxpacket;
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	691b      	ldr	r3, [r3, #16]
 800700a:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	699a      	ldr	r2, [r3, #24]
 8007010:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007012:	1ad2      	subs	r2, r2, r3
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	619a      	str	r2, [r3, #24]
 8007018:	e005      	b.n	8007026 <USB_EPStartXfer+0x2fa>
    }
    else
    {
      len = ep->xfer_len;
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	699b      	ldr	r3, [r3, #24]
 800701e:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	2200      	movs	r2, #0
 8007024:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	7b1b      	ldrb	r3, [r3, #12]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d144      	bne.n	80070b8 <USB_EPStartXfer+0x38c>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800702e:	687c      	ldr	r4, [r7, #4]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007036:	b29b      	uxth	r3, r3
 8007038:	441c      	add	r4, r3
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	00db      	lsls	r3, r3, #3
 8007040:	4423      	add	r3, r4
 8007042:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007046:	623b      	str	r3, [r7, #32]
 8007048:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800704a:	2b00      	cmp	r3, #0
 800704c:	d110      	bne.n	8007070 <USB_EPStartXfer+0x344>
 800704e:	6a3b      	ldr	r3, [r7, #32]
 8007050:	881b      	ldrh	r3, [r3, #0]
 8007052:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007056:	b29a      	uxth	r2, r3
 8007058:	6a3b      	ldr	r3, [r7, #32]
 800705a:	801a      	strh	r2, [r3, #0]
 800705c:	6a3b      	ldr	r3, [r7, #32]
 800705e:	881b      	ldrh	r3, [r3, #0]
 8007060:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007064:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007068:	b29a      	uxth	r2, r3
 800706a:	6a3b      	ldr	r3, [r7, #32]
 800706c:	801a      	strh	r2, [r3, #0]
 800706e:	e0e6      	b.n	800723e <USB_EPStartXfer+0x512>
 8007070:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007072:	2b3d      	cmp	r3, #61	; 0x3d
 8007074:	d811      	bhi.n	800709a <USB_EPStartXfer+0x36e>
 8007076:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007078:	085b      	lsrs	r3, r3, #1
 800707a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800707c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800707e:	f003 0301 	and.w	r3, r3, #1
 8007082:	2b00      	cmp	r3, #0
 8007084:	d002      	beq.n	800708c <USB_EPStartXfer+0x360>
 8007086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007088:	3301      	adds	r3, #1
 800708a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800708c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800708e:	b29b      	uxth	r3, r3
 8007090:	029b      	lsls	r3, r3, #10
 8007092:	b29a      	uxth	r2, r3
 8007094:	6a3b      	ldr	r3, [r7, #32]
 8007096:	801a      	strh	r2, [r3, #0]
 8007098:	e0d1      	b.n	800723e <USB_EPStartXfer+0x512>
 800709a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800709c:	095b      	lsrs	r3, r3, #5
 800709e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	029b      	lsls	r3, r3, #10
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070b0:	b29a      	uxth	r2, r3
 80070b2:	6a3b      	ldr	r3, [r7, #32]
 80070b4:	801a      	strh	r2, [r3, #0]
 80070b6:	e0c2      	b.n	800723e <USB_EPStartXfer+0x512>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	785b      	ldrb	r3, [r3, #1]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d144      	bne.n	800714a <USB_EPStartXfer+0x41e>
 80070c0:	687c      	ldr	r4, [r7, #4]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	441c      	add	r4, r3
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	781b      	ldrb	r3, [r3, #0]
 80070d0:	00db      	lsls	r3, r3, #3
 80070d2:	4423      	add	r3, r4
 80070d4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80070d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d110      	bne.n	8007102 <USB_EPStartXfer+0x3d6>
 80070e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e2:	881b      	ldrh	r3, [r3, #0]
 80070e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80070e8:	b29a      	uxth	r2, r3
 80070ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ec:	801a      	strh	r2, [r3, #0]
 80070ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f0:	881b      	ldrh	r3, [r3, #0]
 80070f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070fa:	b29a      	uxth	r2, r3
 80070fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070fe:	801a      	strh	r2, [r3, #0]
 8007100:	e038      	b.n	8007174 <USB_EPStartXfer+0x448>
 8007102:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007104:	2b3d      	cmp	r3, #61	; 0x3d
 8007106:	d811      	bhi.n	800712c <USB_EPStartXfer+0x400>
 8007108:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800710a:	085b      	lsrs	r3, r3, #1
 800710c:	63bb      	str	r3, [r7, #56]	; 0x38
 800710e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007110:	f003 0301 	and.w	r3, r3, #1
 8007114:	2b00      	cmp	r3, #0
 8007116:	d002      	beq.n	800711e <USB_EPStartXfer+0x3f2>
 8007118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800711a:	3301      	adds	r3, #1
 800711c:	63bb      	str	r3, [r7, #56]	; 0x38
 800711e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007120:	b29b      	uxth	r3, r3
 8007122:	029b      	lsls	r3, r3, #10
 8007124:	b29a      	uxth	r2, r3
 8007126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007128:	801a      	strh	r2, [r3, #0]
 800712a:	e023      	b.n	8007174 <USB_EPStartXfer+0x448>
 800712c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800712e:	095b      	lsrs	r3, r3, #5
 8007130:	63bb      	str	r3, [r7, #56]	; 0x38
 8007132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007134:	b29b      	uxth	r3, r3
 8007136:	029b      	lsls	r3, r3, #10
 8007138:	b29b      	uxth	r3, r3
 800713a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800713e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007142:	b29a      	uxth	r2, r3
 8007144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007146:	801a      	strh	r2, [r3, #0]
 8007148:	e014      	b.n	8007174 <USB_EPStartXfer+0x448>
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	785b      	ldrb	r3, [r3, #1]
 800714e:	2b01      	cmp	r3, #1
 8007150:	d110      	bne.n	8007174 <USB_EPStartXfer+0x448>
 8007152:	687c      	ldr	r4, [r7, #4]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800715a:	b29b      	uxth	r3, r3
 800715c:	441c      	add	r4, r3
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	00db      	lsls	r3, r3, #3
 8007164:	4423      	add	r3, r4
 8007166:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800716a:	633b      	str	r3, [r7, #48]	; 0x30
 800716c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800716e:	b29a      	uxth	r2, r3
 8007170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007172:	801a      	strh	r2, [r3, #0]
 8007174:	687c      	ldr	r4, [r7, #4]
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	785b      	ldrb	r3, [r3, #1]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d14b      	bne.n	8007216 <USB_EPStartXfer+0x4ea>
 800717e:	687c      	ldr	r4, [r7, #4]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007186:	b29b      	uxth	r3, r3
 8007188:	441c      	add	r4, r3
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	00db      	lsls	r3, r3, #3
 8007190:	4423      	add	r3, r4
 8007192:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007196:	627b      	str	r3, [r7, #36]	; 0x24
 8007198:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800719a:	2b00      	cmp	r3, #0
 800719c:	d110      	bne.n	80071c0 <USB_EPStartXfer+0x494>
 800719e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a0:	881b      	ldrh	r3, [r3, #0]
 80071a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80071a6:	b29a      	uxth	r2, r3
 80071a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071aa:	801a      	strh	r2, [r3, #0]
 80071ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ae:	881b      	ldrh	r3, [r3, #0]
 80071b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071b8:	b29a      	uxth	r2, r3
 80071ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071bc:	801a      	strh	r2, [r3, #0]
 80071be:	e03e      	b.n	800723e <USB_EPStartXfer+0x512>
 80071c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071c2:	2b3d      	cmp	r3, #61	; 0x3d
 80071c4:	d818      	bhi.n	80071f8 <USB_EPStartXfer+0x4cc>
 80071c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071c8:	085b      	lsrs	r3, r3, #1
 80071ca:	637b      	str	r3, [r7, #52]	; 0x34
 80071cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071ce:	f003 0301 	and.w	r3, r3, #1
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d002      	beq.n	80071dc <USB_EPStartXfer+0x4b0>
 80071d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071d8:	3301      	adds	r3, #1
 80071da:	637b      	str	r3, [r7, #52]	; 0x34
 80071dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071de:	b29b      	uxth	r3, r3
 80071e0:	029b      	lsls	r3, r3, #10
 80071e2:	b29a      	uxth	r2, r3
 80071e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e6:	801a      	strh	r2, [r3, #0]
 80071e8:	e029      	b.n	800723e <USB_EPStartXfer+0x512>
 80071ea:	bf00      	nop
 80071ec:	ffff80c0 	.word	0xffff80c0
 80071f0:	ffffc080 	.word	0xffffc080
 80071f4:	ffff8080 	.word	0xffff8080
 80071f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071fa:	095b      	lsrs	r3, r3, #5
 80071fc:	637b      	str	r3, [r7, #52]	; 0x34
 80071fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007200:	b29b      	uxth	r3, r3
 8007202:	029b      	lsls	r3, r3, #10
 8007204:	b29b      	uxth	r3, r3
 8007206:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800720a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800720e:	b29a      	uxth	r2, r3
 8007210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007212:	801a      	strh	r2, [r3, #0]
 8007214:	e013      	b.n	800723e <USB_EPStartXfer+0x512>
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	785b      	ldrb	r3, [r3, #1]
 800721a:	2b01      	cmp	r3, #1
 800721c:	d10f      	bne.n	800723e <USB_EPStartXfer+0x512>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007224:	b29b      	uxth	r3, r3
 8007226:	441c      	add	r4, r3
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	00db      	lsls	r3, r3, #3
 800722e:	4423      	add	r3, r4
 8007230:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007234:	62bb      	str	r3, [r7, #40]	; 0x28
 8007236:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007238:	b29a      	uxth	r2, r3
 800723a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800723c:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	781b      	ldrb	r3, [r3, #0]
 8007244:	009b      	lsls	r3, r3, #2
 8007246:	4413      	add	r3, r2
 8007248:	881b      	ldrh	r3, [r3, #0]
 800724a:	b29b      	uxth	r3, r3
 800724c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007250:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007254:	b29c      	uxth	r4, r3
 8007256:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800725a:	b29c      	uxth	r4, r3
 800725c:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8007260:	b29c      	uxth	r4, r3
 8007262:	687a      	ldr	r2, [r7, #4]
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	781b      	ldrb	r3, [r3, #0]
 8007268:	009b      	lsls	r3, r3, #2
 800726a:	441a      	add	r2, r3
 800726c:	4b04      	ldr	r3, [pc, #16]	; (8007280 <USB_EPStartXfer+0x554>)
 800726e:	4323      	orrs	r3, r4
 8007270:	b29b      	uxth	r3, r3
 8007272:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007274:	2300      	movs	r3, #0
}
 8007276:	4618      	mov	r0, r3
 8007278:	3754      	adds	r7, #84	; 0x54
 800727a:	46bd      	mov	sp, r7
 800727c:	bd90      	pop	{r4, r7, pc}
 800727e:	bf00      	nop
 8007280:	ffff8080 	.word	0xffff8080

08007284 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007284:	b490      	push	{r4, r7}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	785b      	ldrb	r3, [r3, #1]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d018      	beq.n	80072c8 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	009b      	lsls	r3, r3, #2
 800729e:	4413      	add	r3, r2
 80072a0:	881b      	ldrh	r3, [r3, #0]
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072ac:	b29c      	uxth	r4, r3
 80072ae:	f084 0310 	eor.w	r3, r4, #16
 80072b2:	b29c      	uxth	r4, r3
 80072b4:	687a      	ldr	r2, [r7, #4]
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	781b      	ldrb	r3, [r3, #0]
 80072ba:	009b      	lsls	r3, r3, #2
 80072bc:	441a      	add	r2, r3
 80072be:	4b11      	ldr	r3, [pc, #68]	; (8007304 <USB_EPSetStall+0x80>)
 80072c0:	4323      	orrs	r3, r4
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	8013      	strh	r3, [r2, #0]
 80072c6:	e017      	b.n	80072f8 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	009b      	lsls	r3, r3, #2
 80072d0:	4413      	add	r3, r2
 80072d2:	881b      	ldrh	r3, [r3, #0]
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072de:	b29c      	uxth	r4, r3
 80072e0:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80072e4:	b29c      	uxth	r4, r3
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	009b      	lsls	r3, r3, #2
 80072ee:	441a      	add	r2, r3
 80072f0:	4b04      	ldr	r3, [pc, #16]	; (8007304 <USB_EPSetStall+0x80>)
 80072f2:	4323      	orrs	r3, r4
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80072f8:	2300      	movs	r3, #0
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3708      	adds	r7, #8
 80072fe:	46bd      	mov	sp, r7
 8007300:	bc90      	pop	{r4, r7}
 8007302:	4770      	bx	lr
 8007304:	ffff8080 	.word	0xffff8080

08007308 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007308:	b490      	push	{r4, r7}
 800730a:	b082      	sub	sp, #8
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	7b1b      	ldrb	r3, [r3, #12]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d17d      	bne.n	8007416 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	785b      	ldrb	r3, [r3, #1]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d03d      	beq.n	800739e <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	009b      	lsls	r3, r3, #2
 800732a:	4413      	add	r3, r2
 800732c:	881b      	ldrh	r3, [r3, #0]
 800732e:	b29c      	uxth	r4, r3
 8007330:	4623      	mov	r3, r4
 8007332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007336:	2b00      	cmp	r3, #0
 8007338:	d014      	beq.n	8007364 <USB_EPClearStall+0x5c>
 800733a:	687a      	ldr	r2, [r7, #4]
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	4413      	add	r3, r2
 8007344:	881b      	ldrh	r3, [r3, #0]
 8007346:	b29b      	uxth	r3, r3
 8007348:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800734c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007350:	b29c      	uxth	r4, r3
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	781b      	ldrb	r3, [r3, #0]
 8007358:	009b      	lsls	r3, r3, #2
 800735a:	441a      	add	r2, r3
 800735c:	4b31      	ldr	r3, [pc, #196]	; (8007424 <USB_EPClearStall+0x11c>)
 800735e:	4323      	orrs	r3, r4
 8007360:	b29b      	uxth	r3, r3
 8007362:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	78db      	ldrb	r3, [r3, #3]
 8007368:	2b01      	cmp	r3, #1
 800736a:	d054      	beq.n	8007416 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800736c:	687a      	ldr	r2, [r7, #4]
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	781b      	ldrb	r3, [r3, #0]
 8007372:	009b      	lsls	r3, r3, #2
 8007374:	4413      	add	r3, r2
 8007376:	881b      	ldrh	r3, [r3, #0]
 8007378:	b29b      	uxth	r3, r3
 800737a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800737e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007382:	b29c      	uxth	r4, r3
 8007384:	f084 0320 	eor.w	r3, r4, #32
 8007388:	b29c      	uxth	r4, r3
 800738a:	687a      	ldr	r2, [r7, #4]
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	441a      	add	r2, r3
 8007394:	4b24      	ldr	r3, [pc, #144]	; (8007428 <USB_EPClearStall+0x120>)
 8007396:	4323      	orrs	r3, r4
 8007398:	b29b      	uxth	r3, r3
 800739a:	8013      	strh	r3, [r2, #0]
 800739c:	e03b      	b.n	8007416 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800739e:	687a      	ldr	r2, [r7, #4]
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	781b      	ldrb	r3, [r3, #0]
 80073a4:	009b      	lsls	r3, r3, #2
 80073a6:	4413      	add	r3, r2
 80073a8:	881b      	ldrh	r3, [r3, #0]
 80073aa:	b29c      	uxth	r4, r3
 80073ac:	4623      	mov	r3, r4
 80073ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d014      	beq.n	80073e0 <USB_EPClearStall+0xd8>
 80073b6:	687a      	ldr	r2, [r7, #4]
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	009b      	lsls	r3, r3, #2
 80073be:	4413      	add	r3, r2
 80073c0:	881b      	ldrh	r3, [r3, #0]
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073cc:	b29c      	uxth	r4, r3
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	009b      	lsls	r3, r3, #2
 80073d6:	441a      	add	r2, r3
 80073d8:	4b14      	ldr	r3, [pc, #80]	; (800742c <USB_EPClearStall+0x124>)
 80073da:	4323      	orrs	r3, r4
 80073dc:	b29b      	uxth	r3, r3
 80073de:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	009b      	lsls	r3, r3, #2
 80073e8:	4413      	add	r3, r2
 80073ea:	881b      	ldrh	r3, [r3, #0]
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073f6:	b29c      	uxth	r4, r3
 80073f8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80073fc:	b29c      	uxth	r4, r3
 80073fe:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8007402:	b29c      	uxth	r4, r3
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	781b      	ldrb	r3, [r3, #0]
 800740a:	009b      	lsls	r3, r3, #2
 800740c:	441a      	add	r2, r3
 800740e:	4b06      	ldr	r3, [pc, #24]	; (8007428 <USB_EPClearStall+0x120>)
 8007410:	4323      	orrs	r3, r4
 8007412:	b29b      	uxth	r3, r3
 8007414:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007416:	2300      	movs	r3, #0
}
 8007418:	4618      	mov	r0, r3
 800741a:	3708      	adds	r7, #8
 800741c:	46bd      	mov	sp, r7
 800741e:	bc90      	pop	{r4, r7}
 8007420:	4770      	bx	lr
 8007422:	bf00      	nop
 8007424:	ffff80c0 	.word	0xffff80c0
 8007428:	ffff8080 	.word	0xffff8080
 800742c:	ffffc080 	.word	0xffffc080

08007430 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007430:	b480      	push	{r7}
 8007432:	b083      	sub	sp, #12
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	460b      	mov	r3, r1
 800743a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800743c:	78fb      	ldrb	r3, [r7, #3]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d103      	bne.n	800744a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2280      	movs	r2, #128	; 0x80
 8007446:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800744a:	2300      	movs	r3, #0
}
 800744c:	4618      	mov	r0, r3
 800744e:	370c      	adds	r7, #12
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr

08007458 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007458:	b480      	push	{r7}
 800745a:	b083      	sub	sp, #12
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007466:	b29b      	uxth	r3, r3
 8007468:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800746c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007470:	b29a      	uxth	r2, r3
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007478:	2300      	movs	r3, #0
}
 800747a:	4618      	mov	r0, r3
 800747c:	370c      	adds	r7, #12
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr

08007486 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007486:	b480      	push	{r7}
 8007488:	b083      	sub	sp, #12
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007494:	b29b      	uxth	r3, r3
 8007496:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800749a:	b29a      	uxth	r2, r3
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80074a2:	2300      	movs	r3, #0
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	370c      	adds	r7, #12
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr

080074b0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b085      	sub	sp, #20
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80074be:	b29b      	uxth	r3, r3
 80074c0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80074c2:	68fb      	ldr	r3, [r7, #12]
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3714      	adds	r7, #20
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr

080074d0 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b083      	sub	sp, #12
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80074da:	2300      	movs	r3, #0
}
 80074dc:	4618      	mov	r0, r3
 80074de:	370c      	adds	r7, #12
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b08d      	sub	sp, #52	; 0x34
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	60b9      	str	r1, [r7, #8]
 80074f2:	4611      	mov	r1, r2
 80074f4:	461a      	mov	r2, r3
 80074f6:	460b      	mov	r3, r1
 80074f8:	80fb      	strh	r3, [r7, #6]
 80074fa:	4613      	mov	r3, r2
 80074fc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80074fe:	88bb      	ldrh	r3, [r7, #4]
 8007500:	3301      	adds	r3, #1
 8007502:	085b      	lsrs	r3, r3, #1
 8007504:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800750e:	88fa      	ldrh	r2, [r7, #6]
 8007510:	69fb      	ldr	r3, [r7, #28]
 8007512:	4413      	add	r3, r2
 8007514:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007518:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800751a:	6a3b      	ldr	r3, [r7, #32]
 800751c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800751e:	e01b      	b.n	8007558 <USB_WritePMA+0x70>
  {
    temp1 = (uint16_t) * pBuf;
 8007520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007522:	781b      	ldrb	r3, [r3, #0]
 8007524:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007528:	3301      	adds	r3, #1
 800752a:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) * pBuf << 8));
 800752c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	b29b      	uxth	r3, r3
 8007532:	021b      	lsls	r3, r3, #8
 8007534:	b29b      	uxth	r3, r3
 8007536:	461a      	mov	r2, r3
 8007538:	69bb      	ldr	r3, [r7, #24]
 800753a:	4313      	orrs	r3, r2
 800753c:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	b29a      	uxth	r2, r3
 8007542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007544:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007548:	3302      	adds	r3, #2
 800754a:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800754c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754e:	3301      	adds	r3, #1
 8007550:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007554:	3b01      	subs	r3, #1
 8007556:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800755a:	2b00      	cmp	r3, #0
 800755c:	d1e0      	bne.n	8007520 <USB_WritePMA+0x38>
  }
}
 800755e:	bf00      	nop
 8007560:	3734      	adds	r7, #52	; 0x34
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr

0800756a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800756a:	b480      	push	{r7}
 800756c:	b08b      	sub	sp, #44	; 0x2c
 800756e:	af00      	add	r7, sp, #0
 8007570:	60f8      	str	r0, [r7, #12]
 8007572:	60b9      	str	r1, [r7, #8]
 8007574:	4611      	mov	r1, r2
 8007576:	461a      	mov	r2, r3
 8007578:	460b      	mov	r3, r1
 800757a:	80fb      	strh	r3, [r7, #6]
 800757c:	4613      	mov	r3, r2
 800757e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007580:	88bb      	ldrh	r3, [r7, #4]
 8007582:	085b      	lsrs	r3, r3, #1
 8007584:	b29b      	uxth	r3, r3
 8007586:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	61fb      	str	r3, [r7, #28]

  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007590:	88fa      	ldrh	r2, [r7, #6]
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	4413      	add	r3, r2
 8007596:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800759a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800759c:	69bb      	ldr	r3, [r7, #24]
 800759e:	627b      	str	r3, [r7, #36]	; 0x24
 80075a0:	e017      	b.n	80075d2 <USB_ReadPMA+0x68>
  {
    temp = *pdwVal;
 80075a2:	6a3b      	ldr	r3, [r7, #32]
 80075a4:	881b      	ldrh	r3, [r3, #0]
 80075a6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80075a8:	6a3b      	ldr	r3, [r7, #32]
 80075aa:	3302      	adds	r3, #2
 80075ac:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	b2da      	uxtb	r2, r3
 80075b2:	69fb      	ldr	r3, [r7, #28]
 80075b4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80075b6:	69fb      	ldr	r3, [r7, #28]
 80075b8:	3301      	adds	r3, #1
 80075ba:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	0a1b      	lsrs	r3, r3, #8
 80075c0:	b2da      	uxtb	r2, r3
 80075c2:	69fb      	ldr	r3, [r7, #28]
 80075c4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80075c6:	69fb      	ldr	r3, [r7, #28]
 80075c8:	3301      	adds	r3, #1
 80075ca:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80075cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ce:	3b01      	subs	r3, #1
 80075d0:	627b      	str	r3, [r7, #36]	; 0x24
 80075d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d1e4      	bne.n	80075a2 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80075d8:	88bb      	ldrh	r3, [r7, #4]
 80075da:	f003 0301 	and.w	r3, r3, #1
 80075de:	b29b      	uxth	r3, r3
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d006      	beq.n	80075f2 <USB_ReadPMA+0x88>
  {
    temp = *pdwVal;
 80075e4:	6a3b      	ldr	r3, [r7, #32]
 80075e6:	881b      	ldrh	r3, [r3, #0]
 80075e8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	b2da      	uxtb	r2, r3
 80075ee:	69fb      	ldr	r3, [r7, #28]
 80075f0:	701a      	strb	r2, [r3, #0]
  }
}
 80075f2:	bf00      	nop
 80075f4:	372c      	adds	r7, #44	; 0x2c
 80075f6:	46bd      	mov	sp, r7
 80075f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fc:	4770      	bx	lr

080075fe <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80075fe:	b580      	push	{r7, lr}
 8007600:	b084      	sub	sp, #16
 8007602:	af00      	add	r7, sp, #0
 8007604:	6078      	str	r0, [r7, #4]
 8007606:	460b      	mov	r3, r1
 8007608:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800760a:	2300      	movs	r3, #0
 800760c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	7c1b      	ldrb	r3, [r3, #16]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d115      	bne.n	8007642 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007616:	f44f 7300 	mov.w	r3, #512	; 0x200
 800761a:	2202      	movs	r2, #2
 800761c:	2181      	movs	r1, #129	; 0x81
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f005 faae 	bl	800cb80 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2201      	movs	r2, #1
 8007628:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800762a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800762e:	2202      	movs	r2, #2
 8007630:	2101      	movs	r1, #1
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f005 faa4 	bl	800cb80 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2201      	movs	r2, #1
 800763c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8007640:	e012      	b.n	8007668 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007642:	2340      	movs	r3, #64	; 0x40
 8007644:	2202      	movs	r2, #2
 8007646:	2181      	movs	r1, #129	; 0x81
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f005 fa99 	bl	800cb80 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2201      	movs	r2, #1
 8007652:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007654:	2340      	movs	r3, #64	; 0x40
 8007656:	2202      	movs	r2, #2
 8007658:	2101      	movs	r1, #1
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f005 fa90 	bl	800cb80 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2201      	movs	r2, #1
 8007664:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007668:	2308      	movs	r3, #8
 800766a:	2203      	movs	r2, #3
 800766c:	2182      	movs	r1, #130	; 0x82
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f005 fa86 	bl	800cb80 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2201      	movs	r2, #1
 8007678:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800767a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800767e:	f005 fc79 	bl	800cf74 <USBD_static_malloc>
 8007682:	4602      	mov	r2, r0
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007690:	2b00      	cmp	r3, #0
 8007692:	d102      	bne.n	800769a <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007694:	2301      	movs	r3, #1
 8007696:	73fb      	strb	r3, [r7, #15]
 8007698:	e026      	b.n	80076e8 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80076a0:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	2200      	movs	r2, #0
 80076b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	2200      	movs	r2, #0
 80076b8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	7c1b      	ldrb	r3, [r3, #16]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d109      	bne.n	80076d8 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80076ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80076ce:	2101      	movs	r1, #1
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f005 fbcb 	bl	800ce6c <USBD_LL_PrepareReceive>
 80076d6:	e007      	b.n	80076e8 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80076de:	2340      	movs	r3, #64	; 0x40
 80076e0:	2101      	movs	r1, #1
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f005 fbc2 	bl	800ce6c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80076e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3710      	adds	r7, #16
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}

080076f2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80076f2:	b580      	push	{r7, lr}
 80076f4:	b084      	sub	sp, #16
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
 80076fa:	460b      	mov	r3, r1
 80076fc:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80076fe:	2300      	movs	r3, #0
 8007700:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007702:	2181      	movs	r1, #129	; 0x81
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f005 fa79 	bl	800cbfc <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007710:	2101      	movs	r1, #1
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f005 fa72 	bl	800cbfc <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2200      	movs	r2, #0
 800771c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007720:	2182      	movs	r1, #130	; 0x82
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f005 fa6a 	bl	800cbfc <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2200      	movs	r2, #0
 800772c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007734:	2b00      	cmp	r3, #0
 8007736:	d00e      	beq.n	8007756 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007748:	4618      	mov	r0, r3
 800774a:	f005 fc21 	bl	800cf90 <USBD_static_free>
    pdev->pClassData = NULL;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2200      	movs	r2, #0
 8007752:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8007756:	7bfb      	ldrb	r3, [r7, #15]
}
 8007758:	4618      	mov	r0, r3
 800775a:	3710      	adds	r7, #16
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b086      	sub	sp, #24
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007770:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007772:	2300      	movs	r3, #0
 8007774:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007776:	2300      	movs	r3, #0
 8007778:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800777a:	2300      	movs	r3, #0
 800777c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007786:	2b00      	cmp	r3, #0
 8007788:	d039      	beq.n	80077fe <USBD_CDC_Setup+0x9e>
 800778a:	2b20      	cmp	r3, #32
 800778c:	d17c      	bne.n	8007888 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	88db      	ldrh	r3, [r3, #6]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d029      	beq.n	80077ea <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	b25b      	sxtb	r3, r3
 800779c:	2b00      	cmp	r3, #0
 800779e:	da11      	bge.n	80077c4 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80077a6:	689b      	ldr	r3, [r3, #8]
 80077a8:	683a      	ldr	r2, [r7, #0]
 80077aa:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 80077ac:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80077ae:	683a      	ldr	r2, [r7, #0]
 80077b0:	88d2      	ldrh	r2, [r2, #6]
 80077b2:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80077b4:	6939      	ldr	r1, [r7, #16]
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	88db      	ldrh	r3, [r3, #6]
 80077ba:	461a      	mov	r2, r3
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f001 f9a7 	bl	8008b10 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 80077c2:	e068      	b.n	8007896 <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	785a      	ldrb	r2, [r3, #1]
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	88db      	ldrh	r3, [r3, #6]
 80077d2:	b2da      	uxtb	r2, r3
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80077da:	6939      	ldr	r1, [r7, #16]
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	88db      	ldrh	r3, [r3, #6]
 80077e0:	461a      	mov	r2, r3
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f001 f9c2 	bl	8008b6c <USBD_CtlPrepareRx>
    break;
 80077e8:	e055      	b.n	8007896 <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	683a      	ldr	r2, [r7, #0]
 80077f4:	7850      	ldrb	r0, [r2, #1]
 80077f6:	2200      	movs	r2, #0
 80077f8:	6839      	ldr	r1, [r7, #0]
 80077fa:	4798      	blx	r3
    break;
 80077fc:	e04b      	b.n	8007896 <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	785b      	ldrb	r3, [r3, #1]
 8007802:	2b0a      	cmp	r3, #10
 8007804:	d017      	beq.n	8007836 <USBD_CDC_Setup+0xd6>
 8007806:	2b0b      	cmp	r3, #11
 8007808:	d029      	beq.n	800785e <USBD_CDC_Setup+0xfe>
 800780a:	2b00      	cmp	r3, #0
 800780c:	d133      	bne.n	8007876 <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007814:	2b03      	cmp	r3, #3
 8007816:	d107      	bne.n	8007828 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8007818:	f107 030c 	add.w	r3, r7, #12
 800781c:	2202      	movs	r2, #2
 800781e:	4619      	mov	r1, r3
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f001 f975 	bl	8008b10 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8007826:	e02e      	b.n	8007886 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8007828:	6839      	ldr	r1, [r7, #0]
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f001 f905 	bl	8008a3a <USBD_CtlError>
			  ret = USBD_FAIL;
 8007830:	2302      	movs	r3, #2
 8007832:	75fb      	strb	r3, [r7, #23]
      break;
 8007834:	e027      	b.n	8007886 <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800783c:	2b03      	cmp	r3, #3
 800783e:	d107      	bne.n	8007850 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8007840:	f107 030f 	add.w	r3, r7, #15
 8007844:	2201      	movs	r2, #1
 8007846:	4619      	mov	r1, r3
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f001 f961 	bl	8008b10 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800784e:	e01a      	b.n	8007886 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8007850:	6839      	ldr	r1, [r7, #0]
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f001 f8f1 	bl	8008a3a <USBD_CtlError>
			  ret = USBD_FAIL;
 8007858:	2302      	movs	r3, #2
 800785a:	75fb      	strb	r3, [r7, #23]
      break;
 800785c:	e013      	b.n	8007886 <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007864:	2b03      	cmp	r3, #3
 8007866:	d00d      	beq.n	8007884 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 8007868:	6839      	ldr	r1, [r7, #0]
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f001 f8e5 	bl	8008a3a <USBD_CtlError>
			  ret = USBD_FAIL;
 8007870:	2302      	movs	r3, #2
 8007872:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007874:	e006      	b.n	8007884 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 8007876:	6839      	ldr	r1, [r7, #0]
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f001 f8de 	bl	8008a3a <USBD_CtlError>
      ret = USBD_FAIL;
 800787e:	2302      	movs	r3, #2
 8007880:	75fb      	strb	r3, [r7, #23]
      break;
 8007882:	e000      	b.n	8007886 <USBD_CDC_Setup+0x126>
      break;
 8007884:	bf00      	nop
    }
    break;
 8007886:	e006      	b.n	8007896 <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 8007888:	6839      	ldr	r1, [r7, #0]
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f001 f8d5 	bl	8008a3a <USBD_CtlError>
    ret = USBD_FAIL;
 8007890:	2302      	movs	r3, #2
 8007892:	75fb      	strb	r3, [r7, #23]
    break;
 8007894:	bf00      	nop
  }

  return ret;
 8007896:	7dfb      	ldrb	r3, [r7, #23]
}
 8007898:	4618      	mov	r0, r3
 800789a:	3718      	adds	r7, #24
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}

080078a0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b084      	sub	sp, #16
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	460b      	mov	r3, r1
 80078aa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80078b2:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80078ba:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d037      	beq.n	8007936 <USBD_CDC_DataIn+0x96>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80078c6:	78fa      	ldrb	r2, [r7, #3]
 80078c8:	6879      	ldr	r1, [r7, #4]
 80078ca:	4613      	mov	r3, r2
 80078cc:	009b      	lsls	r3, r3, #2
 80078ce:	4413      	add	r3, r2
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	440b      	add	r3, r1
 80078d4:	331c      	adds	r3, #28
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d026      	beq.n	800792a <USBD_CDC_DataIn+0x8a>
 80078dc:	78fa      	ldrb	r2, [r7, #3]
 80078de:	6879      	ldr	r1, [r7, #4]
 80078e0:	4613      	mov	r3, r2
 80078e2:	009b      	lsls	r3, r3, #2
 80078e4:	4413      	add	r3, r2
 80078e6:	009b      	lsls	r3, r3, #2
 80078e8:	440b      	add	r3, r1
 80078ea:	331c      	adds	r3, #28
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	78fa      	ldrb	r2, [r7, #3]
 80078f0:	68b9      	ldr	r1, [r7, #8]
 80078f2:	0152      	lsls	r2, r2, #5
 80078f4:	440a      	add	r2, r1
 80078f6:	3238      	adds	r2, #56	; 0x38
 80078f8:	6812      	ldr	r2, [r2, #0]
 80078fa:	fbb3 f1f2 	udiv	r1, r3, r2
 80078fe:	fb02 f201 	mul.w	r2, r2, r1
 8007902:	1a9b      	subs	r3, r3, r2
 8007904:	2b00      	cmp	r3, #0
 8007906:	d110      	bne.n	800792a <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007908:	78fa      	ldrb	r2, [r7, #3]
 800790a:	6879      	ldr	r1, [r7, #4]
 800790c:	4613      	mov	r3, r2
 800790e:	009b      	lsls	r3, r3, #2
 8007910:	4413      	add	r3, r2
 8007912:	009b      	lsls	r3, r3, #2
 8007914:	440b      	add	r3, r1
 8007916:	331c      	adds	r3, #28
 8007918:	2200      	movs	r2, #0
 800791a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800791c:	78f9      	ldrb	r1, [r7, #3]
 800791e:	2300      	movs	r3, #0
 8007920:	2200      	movs	r2, #0
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f005 fa68 	bl	800cdf8 <USBD_LL_Transmit>
 8007928:	e003      	b.n	8007932 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2200      	movs	r2, #0
 800792e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007932:	2300      	movs	r3, #0
 8007934:	e000      	b.n	8007938 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8007936:	2302      	movs	r3, #2
  }
}
 8007938:	4618      	mov	r0, r3
 800793a:	3710      	adds	r7, #16
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b084      	sub	sp, #16
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	460b      	mov	r3, r1
 800794a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007952:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8007954:	78fb      	ldrb	r3, [r7, #3]
 8007956:	4619      	mov	r1, r3
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f005 fac1 	bl	800cee0 <USBD_LL_GetRxDataSize>
 800795e:	4602      	mov	r2, r0
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800796c:	2b00      	cmp	r3, #0
 800796e:	d00d      	beq.n	800798c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007976:	68db      	ldr	r3, [r3, #12]
 8007978:	68fa      	ldr	r2, [r7, #12]
 800797a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800797e:	68fa      	ldr	r2, [r7, #12]
 8007980:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007984:	4611      	mov	r1, r2
 8007986:	4798      	blx	r3

    return USBD_OK;
 8007988:	2300      	movs	r3, #0
 800798a:	e000      	b.n	800798e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800798c:	2302      	movs	r3, #2
  }
}
 800798e:	4618      	mov	r0, r3
 8007990:	3710      	adds	r7, #16
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}

08007996 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8007996:	b580      	push	{r7, lr}
 8007998:	b084      	sub	sp, #16
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80079a4:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d015      	beq.n	80079dc <USBD_CDC_EP0_RxReady+0x46>
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80079b6:	2bff      	cmp	r3, #255	; 0xff
 80079b8:	d010      	beq.n	80079dc <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	68fa      	ldr	r2, [r7, #12]
 80079c4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80079c8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80079ca:	68fa      	ldr	r2, [r7, #12]
 80079cc:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80079d0:	b292      	uxth	r2, r2
 80079d2:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	22ff      	movs	r2, #255	; 0xff
 80079d8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80079dc:	2300      	movs	r3, #0
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3710      	adds	r7, #16
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}
	...

080079e8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b083      	sub	sp, #12
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2243      	movs	r2, #67	; 0x43
 80079f4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80079f6:	4b03      	ldr	r3, [pc, #12]	; (8007a04 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	370c      	adds	r7, #12
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr
 8007a04:	20000094 	.word	0x20000094

08007a08 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b083      	sub	sp, #12
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2243      	movs	r2, #67	; 0x43
 8007a14:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007a16:	4b03      	ldr	r3, [pc, #12]	; (8007a24 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	370c      	adds	r7, #12
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr
 8007a24:	20000050 	.word	0x20000050

08007a28 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b083      	sub	sp, #12
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2243      	movs	r2, #67	; 0x43
 8007a34:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007a36:	4b03      	ldr	r3, [pc, #12]	; (8007a44 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	370c      	adds	r7, #12
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr
 8007a44:	200000d8 	.word	0x200000d8

08007a48 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b083      	sub	sp, #12
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	220a      	movs	r2, #10
 8007a54:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007a56:	4b03      	ldr	r3, [pc, #12]	; (8007a64 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	370c      	adds	r7, #12
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a62:	4770      	bx	lr
 8007a64:	2000000c 	.word	0x2000000c

08007a68 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b085      	sub	sp, #20
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007a72:	2302      	movs	r3, #2
 8007a74:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d005      	beq.n	8007a88 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	683a      	ldr	r2, [r7, #0]
 8007a80:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8007a84:	2300      	movs	r3, #0
 8007a86:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3714      	adds	r7, #20
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a94:	4770      	bx	lr

08007a96 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8007a96:	b480      	push	{r7}
 8007a98:	b087      	sub	sp, #28
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	60f8      	str	r0, [r7, #12]
 8007a9e:	60b9      	str	r1, [r7, #8]
 8007aa0:	4613      	mov	r3, r2
 8007aa2:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007aaa:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	68ba      	ldr	r2, [r7, #8]
 8007ab0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007ab4:	88fa      	ldrh	r2, [r7, #6]
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007abc:	2300      	movs	r3, #0
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	371c      	adds	r7, #28
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac8:	4770      	bx	lr

08007aca <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8007aca:	b480      	push	{r7}
 8007acc:	b085      	sub	sp, #20
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	6078      	str	r0, [r7, #4]
 8007ad2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007ada:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	683a      	ldr	r2, [r7, #0]
 8007ae0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007ae4:	2300      	movs	r3, #0
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3714      	adds	r7, #20
 8007aea:	46bd      	mov	sp, r7
 8007aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af0:	4770      	bx	lr

08007af2 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007af2:	b580      	push	{r7, lr}
 8007af4:	b084      	sub	sp, #16
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007b00:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d01c      	beq.n	8007b46 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d115      	bne.n	8007b42 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2201      	movs	r2, #1
 8007b1a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	2181      	movs	r1, #129	; 0x81
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f005 f95d 	bl	800cdf8 <USBD_LL_Transmit>

      return USBD_OK;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	e002      	b.n	8007b48 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007b42:	2301      	movs	r3, #1
 8007b44:	e000      	b.n	8007b48 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007b46:	2302      	movs	r3, #2
  }
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3710      	adds	r7, #16
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b084      	sub	sp, #16
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007b5e:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d017      	beq.n	8007b9a <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	7c1b      	ldrb	r3, [r3, #16]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d109      	bne.n	8007b86 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007b78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b7c:	2101      	movs	r1, #1
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f005 f974 	bl	800ce6c <USBD_LL_PrepareReceive>
 8007b84:	e007      	b.n	8007b96 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007b8c:	2340      	movs	r3, #64	; 0x40
 8007b8e:	2101      	movs	r1, #1
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f005 f96b 	bl	800ce6c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007b96:	2300      	movs	r3, #0
 8007b98:	e000      	b.n	8007b9c <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007b9a:	2302      	movs	r3, #2
  }
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3710      	adds	r7, #16
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b084      	sub	sp, #16
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	60f8      	str	r0, [r7, #12]
 8007bac:	60b9      	str	r1, [r7, #8]
 8007bae:	4613      	mov	r3, r2
 8007bb0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d101      	bne.n	8007bbc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007bb8:	2302      	movs	r3, #2
 8007bba:	e01a      	b.n	8007bf2 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d003      	beq.n	8007bce <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d003      	beq.n	8007bdc <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	68ba      	ldr	r2, [r7, #8]
 8007bd8:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2201      	movs	r2, #1
 8007be0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	79fa      	ldrb	r2, [r7, #7]
 8007be8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007bea:	68f8      	ldr	r0, [r7, #12]
 8007bec:	f004 ff34 	bl	800ca58 <USBD_LL_Init>

  return USBD_OK;
 8007bf0:	2300      	movs	r3, #0
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3710      	adds	r7, #16
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}

08007bfa <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007bfa:	b480      	push	{r7}
 8007bfc:	b085      	sub	sp, #20
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	6078      	str	r0, [r7, #4]
 8007c02:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8007c04:	2300      	movs	r3, #0
 8007c06:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d006      	beq.n	8007c1c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	683a      	ldr	r2, [r7, #0]
 8007c12:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8007c16:	2300      	movs	r3, #0
 8007c18:	73fb      	strb	r3, [r7, #15]
 8007c1a:	e001      	b.n	8007c20 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007c1c:	2302      	movs	r3, #2
 8007c1e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3714      	adds	r7, #20
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr

08007c2e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8007c2e:	b580      	push	{r7, lr}
 8007c30:	b082      	sub	sp, #8
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f004 ff70 	bl	800cb1c <USBD_LL_Start>

  return USBD_OK;
 8007c3c:	2300      	movs	r3, #0
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3708      	adds	r7, #8
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}

08007c46 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8007c46:	b480      	push	{r7}
 8007c48:	b083      	sub	sp, #12
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007c4e:	2300      	movs	r3, #0
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	370c      	adds	r7, #12
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr

08007c5c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b084      	sub	sp, #16
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	460b      	mov	r3, r1
 8007c66:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8007c68:	2302      	movs	r3, #2
 8007c6a:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d00c      	beq.n	8007c90 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	78fa      	ldrb	r2, [r7, #3]
 8007c80:	4611      	mov	r1, r2
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	4798      	blx	r3
 8007c86:	4603      	mov	r3, r0
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d101      	bne.n	8007c90 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3710      	adds	r7, #16
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}

08007c9a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007c9a:	b580      	push	{r7, lr}
 8007c9c:	b082      	sub	sp, #8
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	6078      	str	r0, [r7, #4]
 8007ca2:	460b      	mov	r3, r1
 8007ca4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	78fa      	ldrb	r2, [r7, #3]
 8007cb0:	4611      	mov	r1, r2
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	4798      	blx	r3
  return USBD_OK;
 8007cb6:	2300      	movs	r3, #0
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3708      	adds	r7, #8
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b082      	sub	sp, #8
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007cd0:	6839      	ldr	r1, [r7, #0]
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f000 fe74 	bl	80089c0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2201      	movs	r2, #1
 8007cdc:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8007cf4:	f003 031f 	and.w	r3, r3, #31
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d00c      	beq.n	8007d16 <USBD_LL_SetupStage+0x56>
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d302      	bcc.n	8007d06 <USBD_LL_SetupStage+0x46>
 8007d00:	2b02      	cmp	r3, #2
 8007d02:	d010      	beq.n	8007d26 <USBD_LL_SetupStage+0x66>
 8007d04:	e017      	b.n	8007d36 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007d0c:	4619      	mov	r1, r3
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 f9c8 	bl	80080a4 <USBD_StdDevReq>
    break;
 8007d14:	e01a      	b.n	8007d4c <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007d1c:	4619      	mov	r1, r3
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 fa2a 	bl	8008178 <USBD_StdItfReq>
    break;
 8007d24:	e012      	b.n	8007d4c <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007d2c:	4619      	mov	r1, r3
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 fa68 	bl	8008204 <USBD_StdEPReq>
    break;
 8007d34:	e00a      	b.n	8007d4c <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8007d3c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007d40:	b2db      	uxtb	r3, r3
 8007d42:	4619      	mov	r1, r3
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f004 ff8f 	bl	800cc68 <USBD_LL_StallEP>
    break;
 8007d4a:	bf00      	nop
  }

  return USBD_OK;
 8007d4c:	2300      	movs	r3, #0
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3708      	adds	r7, #8
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}

08007d56 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007d56:	b580      	push	{r7, lr}
 8007d58:	b086      	sub	sp, #24
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	60f8      	str	r0, [r7, #12]
 8007d5e:	460b      	mov	r3, r1
 8007d60:	607a      	str	r2, [r7, #4]
 8007d62:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8007d64:	7afb      	ldrb	r3, [r7, #11]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d14b      	bne.n	8007e02 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007d70:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007d78:	2b03      	cmp	r3, #3
 8007d7a:	d134      	bne.n	8007de6 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	68da      	ldr	r2, [r3, #12]
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	691b      	ldr	r3, [r3, #16]
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d919      	bls.n	8007dbc <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	68da      	ldr	r2, [r3, #12]
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	691b      	ldr	r3, [r3, #16]
 8007d90:	1ad2      	subs	r2, r2, r3
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	68da      	ldr	r2, [r3, #12]
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	d203      	bcs.n	8007daa <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	e002      	b.n	8007db0 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	461a      	mov	r2, r3
 8007db2:	6879      	ldr	r1, [r7, #4]
 8007db4:	68f8      	ldr	r0, [r7, #12]
 8007db6:	f000 fef7 	bl	8008ba8 <USBD_CtlContinueRx>
 8007dba:	e038      	b.n	8007e2e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007dc2:	691b      	ldr	r3, [r3, #16]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d00a      	beq.n	8007dde <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8007dce:	2b03      	cmp	r3, #3
 8007dd0:	d105      	bne.n	8007dde <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007dd8:	691b      	ldr	r3, [r3, #16]
 8007dda:	68f8      	ldr	r0, [r7, #12]
 8007ddc:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007dde:	68f8      	ldr	r0, [r7, #12]
 8007de0:	f000 fef4 	bl	8008bcc <USBD_CtlSendStatus>
 8007de4:	e023      	b.n	8007e2e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007dec:	2b05      	cmp	r3, #5
 8007dee:	d11e      	bne.n	8007e2e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2200      	movs	r2, #0
 8007df4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8007df8:	2100      	movs	r1, #0
 8007dfa:	68f8      	ldr	r0, [r7, #12]
 8007dfc:	f004 ff34 	bl	800cc68 <USBD_LL_StallEP>
 8007e00:	e015      	b.n	8007e2e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007e08:	699b      	ldr	r3, [r3, #24]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d00d      	beq.n	8007e2a <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8007e14:	2b03      	cmp	r3, #3
 8007e16:	d108      	bne.n	8007e2a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007e1e:	699b      	ldr	r3, [r3, #24]
 8007e20:	7afa      	ldrb	r2, [r7, #11]
 8007e22:	4611      	mov	r1, r2
 8007e24:	68f8      	ldr	r0, [r7, #12]
 8007e26:	4798      	blx	r3
 8007e28:	e001      	b.n	8007e2e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007e2a:	2302      	movs	r3, #2
 8007e2c:	e000      	b.n	8007e30 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007e2e:	2300      	movs	r3, #0
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3718      	adds	r7, #24
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}

08007e38 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b086      	sub	sp, #24
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	60f8      	str	r0, [r7, #12]
 8007e40:	460b      	mov	r3, r1
 8007e42:	607a      	str	r2, [r7, #4]
 8007e44:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8007e46:	7afb      	ldrb	r3, [r7, #11]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d17f      	bne.n	8007f4c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	3314      	adds	r3, #20
 8007e50:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007e58:	2b02      	cmp	r3, #2
 8007e5a:	d15c      	bne.n	8007f16 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	68da      	ldr	r2, [r3, #12]
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	691b      	ldr	r3, [r3, #16]
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d915      	bls.n	8007e94 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	68da      	ldr	r2, [r3, #12]
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	691b      	ldr	r3, [r3, #16]
 8007e70:	1ad2      	subs	r2, r2, r3
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	68db      	ldr	r3, [r3, #12]
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	6879      	ldr	r1, [r7, #4]
 8007e80:	68f8      	ldr	r0, [r7, #12]
 8007e82:	f000 fe61 	bl	8008b48 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007e86:	2300      	movs	r3, #0
 8007e88:	2200      	movs	r2, #0
 8007e8a:	2100      	movs	r1, #0
 8007e8c:	68f8      	ldr	r0, [r7, #12]
 8007e8e:	f004 ffed 	bl	800ce6c <USBD_LL_PrepareReceive>
 8007e92:	e04e      	b.n	8007f32 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	697a      	ldr	r2, [r7, #20]
 8007e9a:	6912      	ldr	r2, [r2, #16]
 8007e9c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007ea0:	fb02 f201 	mul.w	r2, r2, r1
 8007ea4:	1a9b      	subs	r3, r3, r2
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d11c      	bne.n	8007ee4 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	689a      	ldr	r2, [r3, #8]
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d316      	bcc.n	8007ee4 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	689a      	ldr	r2, [r3, #8]
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d20f      	bcs.n	8007ee4 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	2100      	movs	r1, #0
 8007ec8:	68f8      	ldr	r0, [r7, #12]
 8007eca:	f000 fe3d 	bl	8008b48 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	2200      	movs	r2, #0
 8007eda:	2100      	movs	r1, #0
 8007edc:	68f8      	ldr	r0, [r7, #12]
 8007ede:	f004 ffc5 	bl	800ce6c <USBD_LL_PrepareReceive>
 8007ee2:	e026      	b.n	8007f32 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007eea:	68db      	ldr	r3, [r3, #12]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d00a      	beq.n	8007f06 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8007ef6:	2b03      	cmp	r3, #3
 8007ef8:	d105      	bne.n	8007f06 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007f00:	68db      	ldr	r3, [r3, #12]
 8007f02:	68f8      	ldr	r0, [r7, #12]
 8007f04:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007f06:	2180      	movs	r1, #128	; 0x80
 8007f08:	68f8      	ldr	r0, [r7, #12]
 8007f0a:	f004 fead 	bl	800cc68 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007f0e:	68f8      	ldr	r0, [r7, #12]
 8007f10:	f000 fe6f 	bl	8008bf2 <USBD_CtlReceiveStatus>
 8007f14:	e00d      	b.n	8007f32 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007f1c:	2b04      	cmp	r3, #4
 8007f1e:	d004      	beq.n	8007f2a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d103      	bne.n	8007f32 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007f2a:	2180      	movs	r1, #128	; 0x80
 8007f2c:	68f8      	ldr	r0, [r7, #12]
 8007f2e:	f004 fe9b 	bl	800cc68 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	d11d      	bne.n	8007f78 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007f3c:	68f8      	ldr	r0, [r7, #12]
 8007f3e:	f7ff fe82 	bl	8007c46 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2200      	movs	r2, #0
 8007f46:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8007f4a:	e015      	b.n	8007f78 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007f52:	695b      	ldr	r3, [r3, #20]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d00d      	beq.n	8007f74 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8007f5e:	2b03      	cmp	r3, #3
 8007f60:	d108      	bne.n	8007f74 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007f68:	695b      	ldr	r3, [r3, #20]
 8007f6a:	7afa      	ldrb	r2, [r7, #11]
 8007f6c:	4611      	mov	r1, r2
 8007f6e:	68f8      	ldr	r0, [r7, #12]
 8007f70:	4798      	blx	r3
 8007f72:	e001      	b.n	8007f78 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007f74:	2302      	movs	r3, #2
 8007f76:	e000      	b.n	8007f7a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007f78:	2300      	movs	r3, #0
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3718      	adds	r7, #24
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}

08007f82 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8007f82:	b580      	push	{r7, lr}
 8007f84:	b082      	sub	sp, #8
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f8a:	2340      	movs	r3, #64	; 0x40
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	2100      	movs	r1, #0
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f004 fdf5 	bl	800cb80 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2201      	movs	r2, #1
 8007f9a:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2240      	movs	r2, #64	; 0x40
 8007fa2:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007fa6:	2340      	movs	r3, #64	; 0x40
 8007fa8:	2200      	movs	r2, #0
 8007faa:	2180      	movs	r1, #128	; 0x80
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f004 fde7 	bl	800cb80 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2240      	movs	r2, #64	; 0x40
 8007fbc:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d009      	beq.n	8007ffa <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	687a      	ldr	r2, [r7, #4]
 8007ff0:	6852      	ldr	r2, [r2, #4]
 8007ff2:	b2d2      	uxtb	r2, r2
 8007ff4:	4611      	mov	r1, r2
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	4798      	blx	r3
  }

  return USBD_OK;
 8007ffa:	2300      	movs	r3, #0
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3708      	adds	r7, #8
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}

08008004 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8008004:	b480      	push	{r7}
 8008006:	b083      	sub	sp, #12
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	460b      	mov	r3, r1
 800800e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	78fa      	ldrb	r2, [r7, #3]
 8008014:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8008016:	2300      	movs	r3, #0
}
 8008018:	4618      	mov	r0, r3
 800801a:	370c      	adds	r7, #12
 800801c:	46bd      	mov	sp, r7
 800801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008022:	4770      	bx	lr

08008024 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8008024:	b480      	push	{r7}
 8008026:	b083      	sub	sp, #12
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2204      	movs	r2, #4
 800803c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8008040:	2300      	movs	r3, #0
}
 8008042:	4618      	mov	r0, r3
 8008044:	370c      	adds	r7, #12
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr

0800804e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800804e:	b480      	push	{r7}
 8008050:	b083      	sub	sp, #12
 8008052:	af00      	add	r7, sp, #0
 8008054:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8008062:	2300      	movs	r3, #0
}
 8008064:	4618      	mov	r0, r3
 8008066:	370c      	adds	r7, #12
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr

08008070 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b082      	sub	sp, #8
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800807e:	2b03      	cmp	r3, #3
 8008080:	d10b      	bne.n	800809a <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008088:	69db      	ldr	r3, [r3, #28]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d005      	beq.n	800809a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008094:	69db      	ldr	r3, [r3, #28]
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800809a:	2300      	movs	r3, #0
}
 800809c:	4618      	mov	r0, r3
 800809e:	3708      	adds	r7, #8
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b084      	sub	sp, #16
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80080ae:	2300      	movs	r3, #0
 80080b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	781b      	ldrb	r3, [r3, #0]
 80080b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80080ba:	2b20      	cmp	r3, #32
 80080bc:	d004      	beq.n	80080c8 <USBD_StdDevReq+0x24>
 80080be:	2b40      	cmp	r3, #64	; 0x40
 80080c0:	d002      	beq.n	80080c8 <USBD_StdDevReq+0x24>
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d008      	beq.n	80080d8 <USBD_StdDevReq+0x34>
 80080c6:	e04c      	b.n	8008162 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80080ce:	689b      	ldr	r3, [r3, #8]
 80080d0:	6839      	ldr	r1, [r7, #0]
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	4798      	blx	r3
    break;
 80080d6:	e049      	b.n	800816c <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	785b      	ldrb	r3, [r3, #1]
 80080dc:	2b09      	cmp	r3, #9
 80080de:	d83a      	bhi.n	8008156 <USBD_StdDevReq+0xb2>
 80080e0:	a201      	add	r2, pc, #4	; (adr r2, 80080e8 <USBD_StdDevReq+0x44>)
 80080e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080e6:	bf00      	nop
 80080e8:	08008139 	.word	0x08008139
 80080ec:	0800814d 	.word	0x0800814d
 80080f0:	08008157 	.word	0x08008157
 80080f4:	08008143 	.word	0x08008143
 80080f8:	08008157 	.word	0x08008157
 80080fc:	0800811b 	.word	0x0800811b
 8008100:	08008111 	.word	0x08008111
 8008104:	08008157 	.word	0x08008157
 8008108:	0800812f 	.word	0x0800812f
 800810c:	08008125 	.word	0x08008125
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8008110:	6839      	ldr	r1, [r7, #0]
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 f9d2 	bl	80084bc <USBD_GetDescriptor>
      break;
 8008118:	e022      	b.n	8008160 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800811a:	6839      	ldr	r1, [r7, #0]
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f000 fae3 	bl	80086e8 <USBD_SetAddress>
      break;
 8008122:	e01d      	b.n	8008160 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8008124:	6839      	ldr	r1, [r7, #0]
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f000 fb20 	bl	800876c <USBD_SetConfig>
      break;
 800812c:	e018      	b.n	8008160 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800812e:	6839      	ldr	r1, [r7, #0]
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f000 fba9 	bl	8008888 <USBD_GetConfig>
      break;
 8008136:	e013      	b.n	8008160 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8008138:	6839      	ldr	r1, [r7, #0]
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 fbd8 	bl	80088f0 <USBD_GetStatus>
      break;
 8008140:	e00e      	b.n	8008160 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8008142:	6839      	ldr	r1, [r7, #0]
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f000 fc06 	bl	8008956 <USBD_SetFeature>
      break;
 800814a:	e009      	b.n	8008160 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800814c:	6839      	ldr	r1, [r7, #0]
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 fc15 	bl	800897e <USBD_ClrFeature>
      break;
 8008154:	e004      	b.n	8008160 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8008156:	6839      	ldr	r1, [r7, #0]
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f000 fc6e 	bl	8008a3a <USBD_CtlError>
      break;
 800815e:	bf00      	nop
    }
    break;
 8008160:	e004      	b.n	800816c <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8008162:	6839      	ldr	r1, [r7, #0]
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f000 fc68 	bl	8008a3a <USBD_CtlError>
    break;
 800816a:	bf00      	nop
  }

  return ret;
 800816c:	7bfb      	ldrb	r3, [r7, #15]
}
 800816e:	4618      	mov	r0, r3
 8008170:	3710      	adds	r7, #16
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}
 8008176:	bf00      	nop

08008178 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b084      	sub	sp, #16
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008182:	2300      	movs	r3, #0
 8008184:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	781b      	ldrb	r3, [r3, #0]
 800818a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800818e:	2b20      	cmp	r3, #32
 8008190:	d003      	beq.n	800819a <USBD_StdItfReq+0x22>
 8008192:	2b40      	cmp	r3, #64	; 0x40
 8008194:	d001      	beq.n	800819a <USBD_StdItfReq+0x22>
 8008196:	2b00      	cmp	r3, #0
 8008198:	d12a      	bne.n	80081f0 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80081a0:	3b01      	subs	r3, #1
 80081a2:	2b02      	cmp	r3, #2
 80081a4:	d81d      	bhi.n	80081e2 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	889b      	ldrh	r3, [r3, #4]
 80081aa:	b2db      	uxtb	r3, r3
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d813      	bhi.n	80081d8 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80081b6:	689b      	ldr	r3, [r3, #8]
 80081b8:	6839      	ldr	r1, [r7, #0]
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	4798      	blx	r3
 80081be:	4603      	mov	r3, r0
 80081c0:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	88db      	ldrh	r3, [r3, #6]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d110      	bne.n	80081ec <USBD_StdItfReq+0x74>
 80081ca:	7bfb      	ldrb	r3, [r7, #15]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d10d      	bne.n	80081ec <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f000 fcfb 	bl	8008bcc <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80081d6:	e009      	b.n	80081ec <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80081d8:	6839      	ldr	r1, [r7, #0]
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 fc2d 	bl	8008a3a <USBD_CtlError>
      break;
 80081e0:	e004      	b.n	80081ec <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80081e2:	6839      	ldr	r1, [r7, #0]
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f000 fc28 	bl	8008a3a <USBD_CtlError>
      break;
 80081ea:	e000      	b.n	80081ee <USBD_StdItfReq+0x76>
      break;
 80081ec:	bf00      	nop
    }
    break;
 80081ee:	e004      	b.n	80081fa <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80081f0:	6839      	ldr	r1, [r7, #0]
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f000 fc21 	bl	8008a3a <USBD_CtlError>
    break;
 80081f8:	bf00      	nop
  }

  return USBD_OK;
 80081fa:	2300      	movs	r3, #0
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3710      	adds	r7, #16
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}

08008204 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b084      	sub	sp, #16
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
 800820c:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800820e:	2300      	movs	r3, #0
 8008210:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	889b      	ldrh	r3, [r3, #4]
 8008216:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	781b      	ldrb	r3, [r3, #0]
 800821c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008220:	2b20      	cmp	r3, #32
 8008222:	d004      	beq.n	800822e <USBD_StdEPReq+0x2a>
 8008224:	2b40      	cmp	r3, #64	; 0x40
 8008226:	d002      	beq.n	800822e <USBD_StdEPReq+0x2a>
 8008228:	2b00      	cmp	r3, #0
 800822a:	d008      	beq.n	800823e <USBD_StdEPReq+0x3a>
 800822c:	e13b      	b.n	80084a6 <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008234:	689b      	ldr	r3, [r3, #8]
 8008236:	6839      	ldr	r1, [r7, #0]
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	4798      	blx	r3
    break;
 800823c:	e138      	b.n	80084b0 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	781b      	ldrb	r3, [r3, #0]
 8008242:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008246:	2b20      	cmp	r3, #32
 8008248:	d10a      	bne.n	8008260 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008250:	689b      	ldr	r3, [r3, #8]
 8008252:	6839      	ldr	r1, [r7, #0]
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	4798      	blx	r3
 8008258:	4603      	mov	r3, r0
 800825a:	73fb      	strb	r3, [r7, #15]

      return ret;
 800825c:	7bfb      	ldrb	r3, [r7, #15]
 800825e:	e128      	b.n	80084b2 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	785b      	ldrb	r3, [r3, #1]
 8008264:	2b01      	cmp	r3, #1
 8008266:	d03e      	beq.n	80082e6 <USBD_StdEPReq+0xe2>
 8008268:	2b03      	cmp	r3, #3
 800826a:	d002      	beq.n	8008272 <USBD_StdEPReq+0x6e>
 800826c:	2b00      	cmp	r3, #0
 800826e:	d070      	beq.n	8008352 <USBD_StdEPReq+0x14e>
 8008270:	e113      	b.n	800849a <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008278:	2b02      	cmp	r3, #2
 800827a:	d002      	beq.n	8008282 <USBD_StdEPReq+0x7e>
 800827c:	2b03      	cmp	r3, #3
 800827e:	d015      	beq.n	80082ac <USBD_StdEPReq+0xa8>
 8008280:	e02b      	b.n	80082da <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008282:	7bbb      	ldrb	r3, [r7, #14]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d00c      	beq.n	80082a2 <USBD_StdEPReq+0x9e>
 8008288:	7bbb      	ldrb	r3, [r7, #14]
 800828a:	2b80      	cmp	r3, #128	; 0x80
 800828c:	d009      	beq.n	80082a2 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800828e:	7bbb      	ldrb	r3, [r7, #14]
 8008290:	4619      	mov	r1, r3
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f004 fce8 	bl	800cc68 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8008298:	2180      	movs	r1, #128	; 0x80
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f004 fce4 	bl	800cc68 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80082a0:	e020      	b.n	80082e4 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 80082a2:	6839      	ldr	r1, [r7, #0]
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f000 fbc8 	bl	8008a3a <USBD_CtlError>
        break;
 80082aa:	e01b      	b.n	80082e4 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	885b      	ldrh	r3, [r3, #2]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d10e      	bne.n	80082d2 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80082b4:	7bbb      	ldrb	r3, [r7, #14]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d00b      	beq.n	80082d2 <USBD_StdEPReq+0xce>
 80082ba:	7bbb      	ldrb	r3, [r7, #14]
 80082bc:	2b80      	cmp	r3, #128	; 0x80
 80082be:	d008      	beq.n	80082d2 <USBD_StdEPReq+0xce>
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	88db      	ldrh	r3, [r3, #6]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d104      	bne.n	80082d2 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 80082c8:	7bbb      	ldrb	r3, [r7, #14]
 80082ca:	4619      	mov	r1, r3
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f004 fccb 	bl	800cc68 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f000 fc7a 	bl	8008bcc <USBD_CtlSendStatus>

        break;
 80082d8:	e004      	b.n	80082e4 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 80082da:	6839      	ldr	r1, [r7, #0]
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f000 fbac 	bl	8008a3a <USBD_CtlError>
        break;
 80082e2:	bf00      	nop
      }
      break;
 80082e4:	e0de      	b.n	80084a4 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80082ec:	2b02      	cmp	r3, #2
 80082ee:	d002      	beq.n	80082f6 <USBD_StdEPReq+0xf2>
 80082f0:	2b03      	cmp	r3, #3
 80082f2:	d015      	beq.n	8008320 <USBD_StdEPReq+0x11c>
 80082f4:	e026      	b.n	8008344 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80082f6:	7bbb      	ldrb	r3, [r7, #14]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d00c      	beq.n	8008316 <USBD_StdEPReq+0x112>
 80082fc:	7bbb      	ldrb	r3, [r7, #14]
 80082fe:	2b80      	cmp	r3, #128	; 0x80
 8008300:	d009      	beq.n	8008316 <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8008302:	7bbb      	ldrb	r3, [r7, #14]
 8008304:	4619      	mov	r1, r3
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f004 fcae 	bl	800cc68 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800830c:	2180      	movs	r1, #128	; 0x80
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f004 fcaa 	bl	800cc68 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008314:	e01c      	b.n	8008350 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8008316:	6839      	ldr	r1, [r7, #0]
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f000 fb8e 	bl	8008a3a <USBD_CtlError>
        break;
 800831e:	e017      	b.n	8008350 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	885b      	ldrh	r3, [r3, #2]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d112      	bne.n	800834e <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8008328:	7bbb      	ldrb	r3, [r7, #14]
 800832a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800832e:	2b00      	cmp	r3, #0
 8008330:	d004      	beq.n	800833c <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8008332:	7bbb      	ldrb	r3, [r7, #14]
 8008334:	4619      	mov	r1, r3
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f004 fccc 	bl	800ccd4 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f000 fc45 	bl	8008bcc <USBD_CtlSendStatus>
        }
        break;
 8008342:	e004      	b.n	800834e <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8008344:	6839      	ldr	r1, [r7, #0]
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f000 fb77 	bl	8008a3a <USBD_CtlError>
        break;
 800834c:	e000      	b.n	8008350 <USBD_StdEPReq+0x14c>
        break;
 800834e:	bf00      	nop
      }
      break;
 8008350:	e0a8      	b.n	80084a4 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008358:	2b02      	cmp	r3, #2
 800835a:	d002      	beq.n	8008362 <USBD_StdEPReq+0x15e>
 800835c:	2b03      	cmp	r3, #3
 800835e:	d031      	beq.n	80083c4 <USBD_StdEPReq+0x1c0>
 8008360:	e095      	b.n	800848e <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008362:	7bbb      	ldrb	r3, [r7, #14]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d007      	beq.n	8008378 <USBD_StdEPReq+0x174>
 8008368:	7bbb      	ldrb	r3, [r7, #14]
 800836a:	2b80      	cmp	r3, #128	; 0x80
 800836c:	d004      	beq.n	8008378 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 800836e:	6839      	ldr	r1, [r7, #0]
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f000 fb62 	bl	8008a3a <USBD_CtlError>
          break;
 8008376:	e08f      	b.n	8008498 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8008378:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800837c:	2b00      	cmp	r3, #0
 800837e:	da0b      	bge.n	8008398 <USBD_StdEPReq+0x194>
 8008380:	7bbb      	ldrb	r3, [r7, #14]
 8008382:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008386:	4613      	mov	r3, r2
 8008388:	009b      	lsls	r3, r3, #2
 800838a:	4413      	add	r3, r2
 800838c:	009b      	lsls	r3, r3, #2
 800838e:	3310      	adds	r3, #16
 8008390:	687a      	ldr	r2, [r7, #4]
 8008392:	4413      	add	r3, r2
 8008394:	3304      	adds	r3, #4
 8008396:	e00a      	b.n	80083ae <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 8008398:	7bbb      	ldrb	r3, [r7, #14]
 800839a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800839e:	4613      	mov	r3, r2
 80083a0:	009b      	lsls	r3, r3, #2
 80083a2:	4413      	add	r3, r2
 80083a4:	009b      	lsls	r3, r3, #2
 80083a6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80083aa:	687a      	ldr	r2, [r7, #4]
 80083ac:	4413      	add	r3, r2
 80083ae:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	2200      	movs	r2, #0
 80083b4:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	2202      	movs	r2, #2
 80083ba:	4619      	mov	r1, r3
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f000 fba7 	bl	8008b10 <USBD_CtlSendData>
          break;
 80083c2:	e069      	b.n	8008498 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 80083c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	da11      	bge.n	80083f0 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80083cc:	7bbb      	ldrb	r3, [r7, #14]
 80083ce:	f003 020f 	and.w	r2, r3, #15
 80083d2:	6879      	ldr	r1, [r7, #4]
 80083d4:	4613      	mov	r3, r2
 80083d6:	009b      	lsls	r3, r3, #2
 80083d8:	4413      	add	r3, r2
 80083da:	009b      	lsls	r3, r3, #2
 80083dc:	440b      	add	r3, r1
 80083de:	3318      	adds	r3, #24
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d117      	bne.n	8008416 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 80083e6:	6839      	ldr	r1, [r7, #0]
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f000 fb26 	bl	8008a3a <USBD_CtlError>
            break;
 80083ee:	e053      	b.n	8008498 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80083f0:	7bbb      	ldrb	r3, [r7, #14]
 80083f2:	f003 020f 	and.w	r2, r3, #15
 80083f6:	6879      	ldr	r1, [r7, #4]
 80083f8:	4613      	mov	r3, r2
 80083fa:	009b      	lsls	r3, r3, #2
 80083fc:	4413      	add	r3, r2
 80083fe:	009b      	lsls	r3, r3, #2
 8008400:	440b      	add	r3, r1
 8008402:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d104      	bne.n	8008416 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800840c:	6839      	ldr	r1, [r7, #0]
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f000 fb13 	bl	8008a3a <USBD_CtlError>
            break;
 8008414:	e040      	b.n	8008498 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8008416:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800841a:	2b00      	cmp	r3, #0
 800841c:	da0b      	bge.n	8008436 <USBD_StdEPReq+0x232>
 800841e:	7bbb      	ldrb	r3, [r7, #14]
 8008420:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008424:	4613      	mov	r3, r2
 8008426:	009b      	lsls	r3, r3, #2
 8008428:	4413      	add	r3, r2
 800842a:	009b      	lsls	r3, r3, #2
 800842c:	3310      	adds	r3, #16
 800842e:	687a      	ldr	r2, [r7, #4]
 8008430:	4413      	add	r3, r2
 8008432:	3304      	adds	r3, #4
 8008434:	e00a      	b.n	800844c <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 8008436:	7bbb      	ldrb	r3, [r7, #14]
 8008438:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800843c:	4613      	mov	r3, r2
 800843e:	009b      	lsls	r3, r3, #2
 8008440:	4413      	add	r3, r2
 8008442:	009b      	lsls	r3, r3, #2
 8008444:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8008448:	687a      	ldr	r2, [r7, #4]
 800844a:	4413      	add	r3, r2
 800844c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800844e:	7bbb      	ldrb	r3, [r7, #14]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d002      	beq.n	800845a <USBD_StdEPReq+0x256>
 8008454:	7bbb      	ldrb	r3, [r7, #14]
 8008456:	2b80      	cmp	r3, #128	; 0x80
 8008458:	d103      	bne.n	8008462 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	2200      	movs	r2, #0
 800845e:	601a      	str	r2, [r3, #0]
 8008460:	e00e      	b.n	8008480 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8008462:	7bbb      	ldrb	r3, [r7, #14]
 8008464:	4619      	mov	r1, r3
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f004 fc6a 	bl	800cd40 <USBD_LL_IsStallEP>
 800846c:	4603      	mov	r3, r0
 800846e:	2b00      	cmp	r3, #0
 8008470:	d003      	beq.n	800847a <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	2201      	movs	r2, #1
 8008476:	601a      	str	r2, [r3, #0]
 8008478:	e002      	b.n	8008480 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	2200      	movs	r2, #0
 800847e:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	2202      	movs	r2, #2
 8008484:	4619      	mov	r1, r3
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f000 fb42 	bl	8008b10 <USBD_CtlSendData>
          break;
 800848c:	e004      	b.n	8008498 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 800848e:	6839      	ldr	r1, [r7, #0]
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f000 fad2 	bl	8008a3a <USBD_CtlError>
        break;
 8008496:	bf00      	nop
      }
      break;
 8008498:	e004      	b.n	80084a4 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 800849a:	6839      	ldr	r1, [r7, #0]
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f000 facc 	bl	8008a3a <USBD_CtlError>
      break;
 80084a2:	bf00      	nop
    }
    break;
 80084a4:	e004      	b.n	80084b0 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 80084a6:	6839      	ldr	r1, [r7, #0]
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f000 fac6 	bl	8008a3a <USBD_CtlError>
    break;
 80084ae:	bf00      	nop
  }

  return ret;
 80084b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3710      	adds	r7, #16
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}
	...

080084bc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b084      	sub	sp, #16
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	885b      	ldrh	r3, [r3, #2]
 80084ca:	0a1b      	lsrs	r3, r3, #8
 80084cc:	b29b      	uxth	r3, r3
 80084ce:	3b01      	subs	r3, #1
 80084d0:	2b0e      	cmp	r3, #14
 80084d2:	f200 80e5 	bhi.w	80086a0 <USBD_GetDescriptor+0x1e4>
 80084d6:	a201      	add	r2, pc, #4	; (adr r2, 80084dc <USBD_GetDescriptor+0x20>)
 80084d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084dc:	08008531 	.word	0x08008531
 80084e0:	08008549 	.word	0x08008549
 80084e4:	08008589 	.word	0x08008589
 80084e8:	080086a1 	.word	0x080086a1
 80084ec:	080086a1 	.word	0x080086a1
 80084f0:	0800864d 	.word	0x0800864d
 80084f4:	08008673 	.word	0x08008673
 80084f8:	080086a1 	.word	0x080086a1
 80084fc:	080086a1 	.word	0x080086a1
 8008500:	080086a1 	.word	0x080086a1
 8008504:	080086a1 	.word	0x080086a1
 8008508:	080086a1 	.word	0x080086a1
 800850c:	080086a1 	.word	0x080086a1
 8008510:	080086a1 	.word	0x080086a1
 8008514:	08008519 	.word	0x08008519
  {
#if (USBD_LPM_ENABLED == 1U)
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800851e:	69db      	ldr	r3, [r3, #28]
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	7c12      	ldrb	r2, [r2, #16]
 8008524:	f107 010a 	add.w	r1, r7, #10
 8008528:	4610      	mov	r0, r2
 800852a:	4798      	blx	r3
 800852c:	60f8      	str	r0, [r7, #12]
    break;
 800852e:	e0bc      	b.n	80086aa <USBD_GetDescriptor+0x1ee>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	687a      	ldr	r2, [r7, #4]
 800853a:	7c12      	ldrb	r2, [r2, #16]
 800853c:	f107 010a 	add.w	r1, r7, #10
 8008540:	4610      	mov	r0, r2
 8008542:	4798      	blx	r3
 8008544:	60f8      	str	r0, [r7, #12]
    break;
 8008546:	e0b0      	b.n	80086aa <USBD_GetDescriptor+0x1ee>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	7c1b      	ldrb	r3, [r3, #16]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d10d      	bne.n	800856c <USBD_GetDescriptor+0xb0>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008558:	f107 020a 	add.w	r2, r7, #10
 800855c:	4610      	mov	r0, r2
 800855e:	4798      	blx	r3
 8008560:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	3301      	adds	r3, #1
 8008566:	2202      	movs	r2, #2
 8008568:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800856a:	e09e      	b.n	80086aa <USBD_GetDescriptor+0x1ee>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008574:	f107 020a 	add.w	r2, r7, #10
 8008578:	4610      	mov	r0, r2
 800857a:	4798      	blx	r3
 800857c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	3301      	adds	r3, #1
 8008582:	2202      	movs	r2, #2
 8008584:	701a      	strb	r2, [r3, #0]
    break;
 8008586:	e090      	b.n	80086aa <USBD_GetDescriptor+0x1ee>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	885b      	ldrh	r3, [r3, #2]
 800858c:	b2db      	uxtb	r3, r3
 800858e:	2b05      	cmp	r3, #5
 8008590:	d856      	bhi.n	8008640 <USBD_GetDescriptor+0x184>
 8008592:	a201      	add	r2, pc, #4	; (adr r2, 8008598 <USBD_GetDescriptor+0xdc>)
 8008594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008598:	080085b1 	.word	0x080085b1
 800859c:	080085c9 	.word	0x080085c9
 80085a0:	080085e1 	.word	0x080085e1
 80085a4:	080085f9 	.word	0x080085f9
 80085a8:	08008611 	.word	0x08008611
 80085ac:	08008629 	.word	0x08008629
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	687a      	ldr	r2, [r7, #4]
 80085ba:	7c12      	ldrb	r2, [r2, #16]
 80085bc:	f107 010a 	add.w	r1, r7, #10
 80085c0:	4610      	mov	r0, r2
 80085c2:	4798      	blx	r3
 80085c4:	60f8      	str	r0, [r7, #12]
      break;
 80085c6:	e040      	b.n	800864a <USBD_GetDescriptor+0x18e>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80085ce:	689b      	ldr	r3, [r3, #8]
 80085d0:	687a      	ldr	r2, [r7, #4]
 80085d2:	7c12      	ldrb	r2, [r2, #16]
 80085d4:	f107 010a 	add.w	r1, r7, #10
 80085d8:	4610      	mov	r0, r2
 80085da:	4798      	blx	r3
 80085dc:	60f8      	str	r0, [r7, #12]
      break;
 80085de:	e034      	b.n	800864a <USBD_GetDescriptor+0x18e>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80085e6:	68db      	ldr	r3, [r3, #12]
 80085e8:	687a      	ldr	r2, [r7, #4]
 80085ea:	7c12      	ldrb	r2, [r2, #16]
 80085ec:	f107 010a 	add.w	r1, r7, #10
 80085f0:	4610      	mov	r0, r2
 80085f2:	4798      	blx	r3
 80085f4:	60f8      	str	r0, [r7, #12]
      break;
 80085f6:	e028      	b.n	800864a <USBD_GetDescriptor+0x18e>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80085fe:	691b      	ldr	r3, [r3, #16]
 8008600:	687a      	ldr	r2, [r7, #4]
 8008602:	7c12      	ldrb	r2, [r2, #16]
 8008604:	f107 010a 	add.w	r1, r7, #10
 8008608:	4610      	mov	r0, r2
 800860a:	4798      	blx	r3
 800860c:	60f8      	str	r0, [r7, #12]
      break;
 800860e:	e01c      	b.n	800864a <USBD_GetDescriptor+0x18e>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008616:	695b      	ldr	r3, [r3, #20]
 8008618:	687a      	ldr	r2, [r7, #4]
 800861a:	7c12      	ldrb	r2, [r2, #16]
 800861c:	f107 010a 	add.w	r1, r7, #10
 8008620:	4610      	mov	r0, r2
 8008622:	4798      	blx	r3
 8008624:	60f8      	str	r0, [r7, #12]
      break;
 8008626:	e010      	b.n	800864a <USBD_GetDescriptor+0x18e>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800862e:	699b      	ldr	r3, [r3, #24]
 8008630:	687a      	ldr	r2, [r7, #4]
 8008632:	7c12      	ldrb	r2, [r2, #16]
 8008634:	f107 010a 	add.w	r1, r7, #10
 8008638:	4610      	mov	r0, r2
 800863a:	4798      	blx	r3
 800863c:	60f8      	str	r0, [r7, #12]
      break;
 800863e:	e004      	b.n	800864a <USBD_GetDescriptor+0x18e>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8008640:	6839      	ldr	r1, [r7, #0]
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f000 f9f9 	bl	8008a3a <USBD_CtlError>
      return;
 8008648:	e04b      	b.n	80086e2 <USBD_GetDescriptor+0x226>
#endif
    }
    break;
 800864a:	e02e      	b.n	80086aa <USBD_GetDescriptor+0x1ee>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	7c1b      	ldrb	r3, [r3, #16]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d109      	bne.n	8008668 <USBD_GetDescriptor+0x1ac>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800865a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800865c:	f107 020a 	add.w	r2, r7, #10
 8008660:	4610      	mov	r0, r2
 8008662:	4798      	blx	r3
 8008664:	60f8      	str	r0, [r7, #12]
      break;
 8008666:	e020      	b.n	80086aa <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8008668:	6839      	ldr	r1, [r7, #0]
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 f9e5 	bl	8008a3a <USBD_CtlError>
      return;
 8008670:	e037      	b.n	80086e2 <USBD_GetDescriptor+0x226>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	7c1b      	ldrb	r3, [r3, #16]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d10d      	bne.n	8008696 <USBD_GetDescriptor+0x1da>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008682:	f107 020a 	add.w	r2, r7, #10
 8008686:	4610      	mov	r0, r2
 8008688:	4798      	blx	r3
 800868a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	3301      	adds	r3, #1
 8008690:	2207      	movs	r2, #7
 8008692:	701a      	strb	r2, [r3, #0]
      break;
 8008694:	e009      	b.n	80086aa <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8008696:	6839      	ldr	r1, [r7, #0]
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f000 f9ce 	bl	8008a3a <USBD_CtlError>
      return;
 800869e:	e020      	b.n	80086e2 <USBD_GetDescriptor+0x226>
    }

  default:
     USBD_CtlError(pdev , req);
 80086a0:	6839      	ldr	r1, [r7, #0]
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f000 f9c9 	bl	8008a3a <USBD_CtlError>
    return;
 80086a8:	e01b      	b.n	80086e2 <USBD_GetDescriptor+0x226>
  }

  if((len != 0U) && (req->wLength != 0U))
 80086aa:	897b      	ldrh	r3, [r7, #10]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d011      	beq.n	80086d4 <USBD_GetDescriptor+0x218>
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	88db      	ldrh	r3, [r3, #6]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d00d      	beq.n	80086d4 <USBD_GetDescriptor+0x218>
  {

    len = MIN(len, req->wLength);
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	88da      	ldrh	r2, [r3, #6]
 80086bc:	897b      	ldrh	r3, [r7, #10]
 80086be:	4293      	cmp	r3, r2
 80086c0:	bf28      	it	cs
 80086c2:	4613      	movcs	r3, r2
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 80086c8:	897b      	ldrh	r3, [r7, #10]
 80086ca:	461a      	mov	r2, r3
 80086cc:	68f9      	ldr	r1, [r7, #12]
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f000 fa1e 	bl	8008b10 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	88db      	ldrh	r3, [r3, #6]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d102      	bne.n	80086e2 <USBD_GetDescriptor+0x226>
  {
   USBD_CtlSendStatus(pdev);
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f000 fa75 	bl	8008bcc <USBD_CtlSendStatus>
  }
}
 80086e2:	3710      	adds	r7, #16
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}

080086e8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b084      	sub	sp, #16
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
 80086f0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	889b      	ldrh	r3, [r3, #4]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d130      	bne.n	800875c <USBD_SetAddress+0x74>
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	88db      	ldrh	r3, [r3, #6]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d12c      	bne.n	800875c <USBD_SetAddress+0x74>
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	885b      	ldrh	r3, [r3, #2]
 8008706:	2b7f      	cmp	r3, #127	; 0x7f
 8008708:	d828      	bhi.n	800875c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	885b      	ldrh	r3, [r3, #2]
 800870e:	b2db      	uxtb	r3, r3
 8008710:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008714:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800871c:	2b03      	cmp	r3, #3
 800871e:	d104      	bne.n	800872a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8008720:	6839      	ldr	r1, [r7, #0]
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f000 f989 	bl	8008a3a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008728:	e01c      	b.n	8008764 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	7bfa      	ldrb	r2, [r7, #15]
 800872e:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008732:	7bfb      	ldrb	r3, [r7, #15]
 8008734:	4619      	mov	r1, r3
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f004 fb28 	bl	800cd8c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f000 fa45 	bl	8008bcc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008742:	7bfb      	ldrb	r3, [r7, #15]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d004      	beq.n	8008752 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2202      	movs	r2, #2
 800874c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008750:	e008      	b.n	8008764 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2201      	movs	r2, #1
 8008756:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800875a:	e003      	b.n	8008764 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800875c:	6839      	ldr	r1, [r7, #0]
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f000 f96b 	bl	8008a3a <USBD_CtlError>
  }
}
 8008764:	bf00      	nop
 8008766:	3710      	adds	r7, #16
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b082      	sub	sp, #8
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	885b      	ldrh	r3, [r3, #2]
 800877a:	b2da      	uxtb	r2, r3
 800877c:	4b41      	ldr	r3, [pc, #260]	; (8008884 <USBD_SetConfig+0x118>)
 800877e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008780:	4b40      	ldr	r3, [pc, #256]	; (8008884 <USBD_SetConfig+0x118>)
 8008782:	781b      	ldrb	r3, [r3, #0]
 8008784:	2b01      	cmp	r3, #1
 8008786:	d904      	bls.n	8008792 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008788:	6839      	ldr	r1, [r7, #0]
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f000 f955 	bl	8008a3a <USBD_CtlError>
 8008790:	e075      	b.n	800887e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008798:	2b02      	cmp	r3, #2
 800879a:	d002      	beq.n	80087a2 <USBD_SetConfig+0x36>
 800879c:	2b03      	cmp	r3, #3
 800879e:	d023      	beq.n	80087e8 <USBD_SetConfig+0x7c>
 80087a0:	e062      	b.n	8008868 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 80087a2:	4b38      	ldr	r3, [pc, #224]	; (8008884 <USBD_SetConfig+0x118>)
 80087a4:	781b      	ldrb	r3, [r3, #0]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d01a      	beq.n	80087e0 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 80087aa:	4b36      	ldr	r3, [pc, #216]	; (8008884 <USBD_SetConfig+0x118>)
 80087ac:	781b      	ldrb	r3, [r3, #0]
 80087ae:	461a      	mov	r2, r3
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2203      	movs	r2, #3
 80087b8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80087bc:	4b31      	ldr	r3, [pc, #196]	; (8008884 <USBD_SetConfig+0x118>)
 80087be:	781b      	ldrb	r3, [r3, #0]
 80087c0:	4619      	mov	r1, r3
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f7ff fa4a 	bl	8007c5c <USBD_SetClassConfig>
 80087c8:	4603      	mov	r3, r0
 80087ca:	2b02      	cmp	r3, #2
 80087cc:	d104      	bne.n	80087d8 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 80087ce:	6839      	ldr	r1, [r7, #0]
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f000 f932 	bl	8008a3a <USBD_CtlError>
          return;
 80087d6:	e052      	b.n	800887e <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f000 f9f7 	bl	8008bcc <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80087de:	e04e      	b.n	800887e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f000 f9f3 	bl	8008bcc <USBD_CtlSendStatus>
      break;
 80087e6:	e04a      	b.n	800887e <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80087e8:	4b26      	ldr	r3, [pc, #152]	; (8008884 <USBD_SetConfig+0x118>)
 80087ea:	781b      	ldrb	r3, [r3, #0]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d112      	bne.n	8008816 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2202      	movs	r2, #2
 80087f4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 80087f8:	4b22      	ldr	r3, [pc, #136]	; (8008884 <USBD_SetConfig+0x118>)
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	461a      	mov	r2, r3
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8008802:	4b20      	ldr	r3, [pc, #128]	; (8008884 <USBD_SetConfig+0x118>)
 8008804:	781b      	ldrb	r3, [r3, #0]
 8008806:	4619      	mov	r1, r3
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f7ff fa46 	bl	8007c9a <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f000 f9dc 	bl	8008bcc <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8008814:	e033      	b.n	800887e <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8008816:	4b1b      	ldr	r3, [pc, #108]	; (8008884 <USBD_SetConfig+0x118>)
 8008818:	781b      	ldrb	r3, [r3, #0]
 800881a:	461a      	mov	r2, r3
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	429a      	cmp	r2, r3
 8008822:	d01d      	beq.n	8008860 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	b2db      	uxtb	r3, r3
 800882a:	4619      	mov	r1, r3
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f7ff fa34 	bl	8007c9a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008832:	4b14      	ldr	r3, [pc, #80]	; (8008884 <USBD_SetConfig+0x118>)
 8008834:	781b      	ldrb	r3, [r3, #0]
 8008836:	461a      	mov	r2, r3
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800883c:	4b11      	ldr	r3, [pc, #68]	; (8008884 <USBD_SetConfig+0x118>)
 800883e:	781b      	ldrb	r3, [r3, #0]
 8008840:	4619      	mov	r1, r3
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f7ff fa0a 	bl	8007c5c <USBD_SetClassConfig>
 8008848:	4603      	mov	r3, r0
 800884a:	2b02      	cmp	r3, #2
 800884c:	d104      	bne.n	8008858 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800884e:	6839      	ldr	r1, [r7, #0]
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f000 f8f2 	bl	8008a3a <USBD_CtlError>
          return;
 8008856:	e012      	b.n	800887e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 f9b7 	bl	8008bcc <USBD_CtlSendStatus>
      break;
 800885e:	e00e      	b.n	800887e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f000 f9b3 	bl	8008bcc <USBD_CtlSendStatus>
      break;
 8008866:	e00a      	b.n	800887e <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8008868:	6839      	ldr	r1, [r7, #0]
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f000 f8e5 	bl	8008a3a <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8008870:	4b04      	ldr	r3, [pc, #16]	; (8008884 <USBD_SetConfig+0x118>)
 8008872:	781b      	ldrb	r3, [r3, #0]
 8008874:	4619      	mov	r1, r3
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f7ff fa0f 	bl	8007c9a <USBD_ClrClassConfig>
      break;
 800887c:	bf00      	nop
    }
  }
}
 800887e:	3708      	adds	r7, #8
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}
 8008884:	200001ac 	.word	0x200001ac

08008888 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b082      	sub	sp, #8
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	88db      	ldrh	r3, [r3, #6]
 8008896:	2b01      	cmp	r3, #1
 8008898:	d004      	beq.n	80088a4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800889a:	6839      	ldr	r1, [r7, #0]
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f000 f8cc 	bl	8008a3a <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 80088a2:	e021      	b.n	80088e8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80088aa:	2b01      	cmp	r3, #1
 80088ac:	db17      	blt.n	80088de <USBD_GetConfig+0x56>
 80088ae:	2b02      	cmp	r3, #2
 80088b0:	dd02      	ble.n	80088b8 <USBD_GetConfig+0x30>
 80088b2:	2b03      	cmp	r3, #3
 80088b4:	d00b      	beq.n	80088ce <USBD_GetConfig+0x46>
 80088b6:	e012      	b.n	80088de <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2200      	movs	r2, #0
 80088bc:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	3308      	adds	r3, #8
 80088c2:	2201      	movs	r2, #1
 80088c4:	4619      	mov	r1, r3
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 f922 	bl	8008b10 <USBD_CtlSendData>
      break;
 80088cc:	e00c      	b.n	80088e8 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	3304      	adds	r3, #4
 80088d2:	2201      	movs	r2, #1
 80088d4:	4619      	mov	r1, r3
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f000 f91a 	bl	8008b10 <USBD_CtlSendData>
      break;
 80088dc:	e004      	b.n	80088e8 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 80088de:	6839      	ldr	r1, [r7, #0]
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f000 f8aa 	bl	8008a3a <USBD_CtlError>
      break;
 80088e6:	bf00      	nop
}
 80088e8:	bf00      	nop
 80088ea:	3708      	adds	r7, #8
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}

080088f0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b082      	sub	sp, #8
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008900:	3b01      	subs	r3, #1
 8008902:	2b02      	cmp	r3, #2
 8008904:	d81e      	bhi.n	8008944 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	88db      	ldrh	r3, [r3, #6]
 800890a:	2b02      	cmp	r3, #2
 800890c:	d004      	beq.n	8008918 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800890e:	6839      	ldr	r1, [r7, #0]
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f000 f892 	bl	8008a3a <USBD_CtlError>
      break;
 8008916:	e01a      	b.n	800894e <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2201      	movs	r2, #1
 800891c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8008924:	2b00      	cmp	r3, #0
 8008926:	d005      	beq.n	8008934 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	68db      	ldr	r3, [r3, #12]
 800892c:	f043 0202 	orr.w	r2, r3, #2
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	330c      	adds	r3, #12
 8008938:	2202      	movs	r2, #2
 800893a:	4619      	mov	r1, r3
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f000 f8e7 	bl	8008b10 <USBD_CtlSendData>
    break;
 8008942:	e004      	b.n	800894e <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8008944:	6839      	ldr	r1, [r7, #0]
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f000 f877 	bl	8008a3a <USBD_CtlError>
    break;
 800894c:	bf00      	nop
  }
}
 800894e:	bf00      	nop
 8008950:	3708      	adds	r7, #8
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}

08008956 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8008956:	b580      	push	{r7, lr}
 8008958:	b082      	sub	sp, #8
 800895a:	af00      	add	r7, sp, #0
 800895c:	6078      	str	r0, [r7, #4]
 800895e:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	885b      	ldrh	r3, [r3, #2]
 8008964:	2b01      	cmp	r3, #1
 8008966:	d106      	bne.n	8008976 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2201      	movs	r2, #1
 800896c:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f000 f92b 	bl	8008bcc <USBD_CtlSendStatus>
  }

}
 8008976:	bf00      	nop
 8008978:	3708      	adds	r7, #8
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}

0800897e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800897e:	b580      	push	{r7, lr}
 8008980:	b082      	sub	sp, #8
 8008982:	af00      	add	r7, sp, #0
 8008984:	6078      	str	r0, [r7, #4]
 8008986:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800898e:	3b01      	subs	r3, #1
 8008990:	2b02      	cmp	r3, #2
 8008992:	d80b      	bhi.n	80089ac <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	885b      	ldrh	r3, [r3, #2]
 8008998:	2b01      	cmp	r3, #1
 800899a:	d10c      	bne.n	80089b6 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2200      	movs	r2, #0
 80089a0:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f000 f911 	bl	8008bcc <USBD_CtlSendStatus>
    }
    break;
 80089aa:	e004      	b.n	80089b6 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 80089ac:	6839      	ldr	r1, [r7, #0]
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f000 f843 	bl	8008a3a <USBD_CtlError>
    break;
 80089b4:	e000      	b.n	80089b8 <USBD_ClrFeature+0x3a>
    break;
 80089b6:	bf00      	nop
  }
}
 80089b8:	bf00      	nop
 80089ba:	3708      	adds	r7, #8
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}

080089c0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b083      	sub	sp, #12
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
 80089c8:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	781a      	ldrb	r2, [r3, #0]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	785a      	ldrb	r2, [r3, #1]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	3302      	adds	r3, #2
 80089de:	781b      	ldrb	r3, [r3, #0]
 80089e0:	b29a      	uxth	r2, r3
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	3303      	adds	r3, #3
 80089e6:	781b      	ldrb	r3, [r3, #0]
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	021b      	lsls	r3, r3, #8
 80089ec:	b29b      	uxth	r3, r3
 80089ee:	4413      	add	r3, r2
 80089f0:	b29a      	uxth	r2, r3
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	3304      	adds	r3, #4
 80089fa:	781b      	ldrb	r3, [r3, #0]
 80089fc:	b29a      	uxth	r2, r3
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	3305      	adds	r3, #5
 8008a02:	781b      	ldrb	r3, [r3, #0]
 8008a04:	b29b      	uxth	r3, r3
 8008a06:	021b      	lsls	r3, r3, #8
 8008a08:	b29b      	uxth	r3, r3
 8008a0a:	4413      	add	r3, r2
 8008a0c:	b29a      	uxth	r2, r3
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	3306      	adds	r3, #6
 8008a16:	781b      	ldrb	r3, [r3, #0]
 8008a18:	b29a      	uxth	r2, r3
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	3307      	adds	r3, #7
 8008a1e:	781b      	ldrb	r3, [r3, #0]
 8008a20:	b29b      	uxth	r3, r3
 8008a22:	021b      	lsls	r3, r3, #8
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	4413      	add	r3, r2
 8008a28:	b29a      	uxth	r2, r3
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	80da      	strh	r2, [r3, #6]

}
 8008a2e:	bf00      	nop
 8008a30:	370c      	adds	r7, #12
 8008a32:	46bd      	mov	sp, r7
 8008a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a38:	4770      	bx	lr

08008a3a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8008a3a:	b580      	push	{r7, lr}
 8008a3c:	b082      	sub	sp, #8
 8008a3e:	af00      	add	r7, sp, #0
 8008a40:	6078      	str	r0, [r7, #4]
 8008a42:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8008a44:	2180      	movs	r1, #128	; 0x80
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f004 f90e 	bl	800cc68 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8008a4c:	2100      	movs	r1, #0
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f004 f90a 	bl	800cc68 <USBD_LL_StallEP>
}
 8008a54:	bf00      	nop
 8008a56:	3708      	adds	r7, #8
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}

08008a5c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b086      	sub	sp, #24
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	60f8      	str	r0, [r7, #12]
 8008a64:	60b9      	str	r1, [r7, #8]
 8008a66:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d032      	beq.n	8008ad8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008a72:	68f8      	ldr	r0, [r7, #12]
 8008a74:	f000 f834 	bl	8008ae0 <USBD_GetLen>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	3301      	adds	r3, #1
 8008a7c:	b29b      	uxth	r3, r3
 8008a7e:	005b      	lsls	r3, r3, #1
 8008a80:	b29a      	uxth	r2, r3
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008a86:	7dfb      	ldrb	r3, [r7, #23]
 8008a88:	1c5a      	adds	r2, r3, #1
 8008a8a:	75fa      	strb	r2, [r7, #23]
 8008a8c:	461a      	mov	r2, r3
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	4413      	add	r3, r2
 8008a92:	687a      	ldr	r2, [r7, #4]
 8008a94:	7812      	ldrb	r2, [r2, #0]
 8008a96:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008a98:	7dfb      	ldrb	r3, [r7, #23]
 8008a9a:	1c5a      	adds	r2, r3, #1
 8008a9c:	75fa      	strb	r2, [r7, #23]
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	4413      	add	r3, r2
 8008aa4:	2203      	movs	r2, #3
 8008aa6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008aa8:	e012      	b.n	8008ad0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	1c5a      	adds	r2, r3, #1
 8008aae:	60fa      	str	r2, [r7, #12]
 8008ab0:	7dfa      	ldrb	r2, [r7, #23]
 8008ab2:	1c51      	adds	r1, r2, #1
 8008ab4:	75f9      	strb	r1, [r7, #23]
 8008ab6:	4611      	mov	r1, r2
 8008ab8:	68ba      	ldr	r2, [r7, #8]
 8008aba:	440a      	add	r2, r1
 8008abc:	781b      	ldrb	r3, [r3, #0]
 8008abe:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008ac0:	7dfb      	ldrb	r3, [r7, #23]
 8008ac2:	1c5a      	adds	r2, r3, #1
 8008ac4:	75fa      	strb	r2, [r7, #23]
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	4413      	add	r3, r2
 8008acc:	2200      	movs	r2, #0
 8008ace:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	781b      	ldrb	r3, [r3, #0]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d1e8      	bne.n	8008aaa <USBD_GetString+0x4e>
    }
  }
}
 8008ad8:	bf00      	nop
 8008ada:	3718      	adds	r7, #24
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}

08008ae0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b085      	sub	sp, #20
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8008aec:	e005      	b.n	8008afa <USBD_GetLen+0x1a>
    {
        len++;
 8008aee:	7bfb      	ldrb	r3, [r7, #15]
 8008af0:	3301      	adds	r3, #1
 8008af2:	73fb      	strb	r3, [r7, #15]
        buf++;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	3301      	adds	r3, #1
 8008af8:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	781b      	ldrb	r3, [r3, #0]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d1f5      	bne.n	8008aee <USBD_GetLen+0xe>
    }

    return len;
 8008b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3714      	adds	r7, #20
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0e:	4770      	bx	lr

08008b10 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b084      	sub	sp, #16
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	60f8      	str	r0, [r7, #12]
 8008b18:	60b9      	str	r1, [r7, #8]
 8008b1a:	4613      	mov	r3, r2
 8008b1c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	2202      	movs	r2, #2
 8008b22:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8008b26:	88fa      	ldrh	r2, [r7, #6]
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008b2c:	88fa      	ldrh	r2, [r7, #6]
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8008b32:	88fb      	ldrh	r3, [r7, #6]
 8008b34:	68ba      	ldr	r2, [r7, #8]
 8008b36:	2100      	movs	r1, #0
 8008b38:	68f8      	ldr	r0, [r7, #12]
 8008b3a:	f004 f95d 	bl	800cdf8 <USBD_LL_Transmit>

  return USBD_OK;
 8008b3e:	2300      	movs	r3, #0
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	3710      	adds	r7, #16
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}

08008b48 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b084      	sub	sp, #16
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	60f8      	str	r0, [r7, #12]
 8008b50:	60b9      	str	r1, [r7, #8]
 8008b52:	4613      	mov	r3, r2
 8008b54:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8008b56:	88fb      	ldrh	r3, [r7, #6]
 8008b58:	68ba      	ldr	r2, [r7, #8]
 8008b5a:	2100      	movs	r1, #0
 8008b5c:	68f8      	ldr	r0, [r7, #12]
 8008b5e:	f004 f94b 	bl	800cdf8 <USBD_LL_Transmit>

  return USBD_OK;
 8008b62:	2300      	movs	r3, #0
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3710      	adds	r7, #16
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}

08008b6c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b084      	sub	sp, #16
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	60f8      	str	r0, [r7, #12]
 8008b74:	60b9      	str	r1, [r7, #8]
 8008b76:	4613      	mov	r3, r2
 8008b78:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	2203      	movs	r2, #3
 8008b7e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8008b82:	88fa      	ldrh	r2, [r7, #6]
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8008b8a:	88fa      	ldrh	r2, [r7, #6]
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8008b92:	88fb      	ldrh	r3, [r7, #6]
 8008b94:	68ba      	ldr	r2, [r7, #8]
 8008b96:	2100      	movs	r1, #0
 8008b98:	68f8      	ldr	r0, [r7, #12]
 8008b9a:	f004 f967 	bl	800ce6c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b9e:	2300      	movs	r3, #0
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3710      	adds	r7, #16
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}

08008ba8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b084      	sub	sp, #16
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	60f8      	str	r0, [r7, #12]
 8008bb0:	60b9      	str	r1, [r7, #8]
 8008bb2:	4613      	mov	r3, r2
 8008bb4:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008bb6:	88fb      	ldrh	r3, [r7, #6]
 8008bb8:	68ba      	ldr	r2, [r7, #8]
 8008bba:	2100      	movs	r1, #0
 8008bbc:	68f8      	ldr	r0, [r7, #12]
 8008bbe:	f004 f955 	bl	800ce6c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008bc2:	2300      	movs	r3, #0
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3710      	adds	r7, #16
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}

08008bcc <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b082      	sub	sp, #8
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2204      	movs	r2, #4
 8008bd8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008bdc:	2300      	movs	r3, #0
 8008bde:	2200      	movs	r2, #0
 8008be0:	2100      	movs	r1, #0
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f004 f908 	bl	800cdf8 <USBD_LL_Transmit>

  return USBD_OK;
 8008be8:	2300      	movs	r3, #0
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3708      	adds	r7, #8
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}

08008bf2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8008bf2:	b580      	push	{r7, lr}
 8008bf4:	b082      	sub	sp, #8
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2205      	movs	r2, #5
 8008bfe:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008c02:	2300      	movs	r3, #0
 8008c04:	2200      	movs	r2, #0
 8008c06:	2100      	movs	r1, #0
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f004 f92f 	bl	800ce6c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c0e:	2300      	movs	r3, #0
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	3708      	adds	r7, #8
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}

08008c18 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008c18:	b480      	push	{r7}
 8008c1a:	b085      	sub	sp, #20
 8008c1c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c1e:	f3ef 8305 	mrs	r3, IPSR
 8008c22:	60bb      	str	r3, [r7, #8]
  return(result);
 8008c24:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d10f      	bne.n	8008c4a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c2a:	f3ef 8310 	mrs	r3, PRIMASK
 8008c2e:	607b      	str	r3, [r7, #4]
  return(result);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d109      	bne.n	8008c4a <osKernelInitialize+0x32>
 8008c36:	4b11      	ldr	r3, [pc, #68]	; (8008c7c <osKernelInitialize+0x64>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	2b02      	cmp	r3, #2
 8008c3c:	d109      	bne.n	8008c52 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008c3e:	f3ef 8311 	mrs	r3, BASEPRI
 8008c42:	603b      	str	r3, [r7, #0]
  return(result);
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d003      	beq.n	8008c52 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8008c4a:	f06f 0305 	mvn.w	r3, #5
 8008c4e:	60fb      	str	r3, [r7, #12]
 8008c50:	e00c      	b.n	8008c6c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008c52:	4b0a      	ldr	r3, [pc, #40]	; (8008c7c <osKernelInitialize+0x64>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d105      	bne.n	8008c66 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8008c5a:	4b08      	ldr	r3, [pc, #32]	; (8008c7c <osKernelInitialize+0x64>)
 8008c5c:	2201      	movs	r2, #1
 8008c5e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008c60:	2300      	movs	r3, #0
 8008c62:	60fb      	str	r3, [r7, #12]
 8008c64:	e002      	b.n	8008c6c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8008c66:	f04f 33ff 	mov.w	r3, #4294967295
 8008c6a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008c6c:	68fb      	ldr	r3, [r7, #12]
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3714      	adds	r7, #20
 8008c72:	46bd      	mov	sp, r7
 8008c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c78:	4770      	bx	lr
 8008c7a:	bf00      	nop
 8008c7c:	200001b0 	.word	0x200001b0

08008c80 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b084      	sub	sp, #16
 8008c84:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c86:	f3ef 8305 	mrs	r3, IPSR
 8008c8a:	60bb      	str	r3, [r7, #8]
  return(result);
 8008c8c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d10f      	bne.n	8008cb2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c92:	f3ef 8310 	mrs	r3, PRIMASK
 8008c96:	607b      	str	r3, [r7, #4]
  return(result);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d109      	bne.n	8008cb2 <osKernelStart+0x32>
 8008c9e:	4b11      	ldr	r3, [pc, #68]	; (8008ce4 <osKernelStart+0x64>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	2b02      	cmp	r3, #2
 8008ca4:	d109      	bne.n	8008cba <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008ca6:	f3ef 8311 	mrs	r3, BASEPRI
 8008caa:	603b      	str	r3, [r7, #0]
  return(result);
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d003      	beq.n	8008cba <osKernelStart+0x3a>
    stat = osErrorISR;
 8008cb2:	f06f 0305 	mvn.w	r3, #5
 8008cb6:	60fb      	str	r3, [r7, #12]
 8008cb8:	e00e      	b.n	8008cd8 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8008cba:	4b0a      	ldr	r3, [pc, #40]	; (8008ce4 <osKernelStart+0x64>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	2b01      	cmp	r3, #1
 8008cc0:	d107      	bne.n	8008cd2 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8008cc2:	4b08      	ldr	r3, [pc, #32]	; (8008ce4 <osKernelStart+0x64>)
 8008cc4:	2202      	movs	r2, #2
 8008cc6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8008cc8:	f001 fe8e 	bl	800a9e8 <vTaskStartScheduler>
      stat = osOK;
 8008ccc:	2300      	movs	r3, #0
 8008cce:	60fb      	str	r3, [r7, #12]
 8008cd0:	e002      	b.n	8008cd8 <osKernelStart+0x58>
    } else {
      stat = osError;
 8008cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8008cd6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008cd8:	68fb      	ldr	r3, [r7, #12]
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3710      	adds	r7, #16
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}
 8008ce2:	bf00      	nop
 8008ce4:	200001b0 	.word	0x200001b0

08008ce8 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b084      	sub	sp, #16
 8008cec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008cee:	f3ef 8305 	mrs	r3, IPSR
 8008cf2:	60bb      	str	r3, [r7, #8]
  return(result);
 8008cf4:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d10f      	bne.n	8008d1a <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008cfa:	f3ef 8310 	mrs	r3, PRIMASK
 8008cfe:	607b      	str	r3, [r7, #4]
  return(result);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d109      	bne.n	8008d1a <osKernelGetTickCount+0x32>
 8008d06:	4b0b      	ldr	r3, [pc, #44]	; (8008d34 <osKernelGetTickCount+0x4c>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	2b02      	cmp	r3, #2
 8008d0c:	d109      	bne.n	8008d22 <osKernelGetTickCount+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008d0e:	f3ef 8311 	mrs	r3, BASEPRI
 8008d12:	603b      	str	r3, [r7, #0]
  return(result);
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d003      	beq.n	8008d22 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8008d1a:	f001 ff83 	bl	800ac24 <xTaskGetTickCountFromISR>
 8008d1e:	60f8      	str	r0, [r7, #12]
 8008d20:	e002      	b.n	8008d28 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8008d22:	f001 ff6f 	bl	800ac04 <xTaskGetTickCount>
 8008d26:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8008d28:	68fb      	ldr	r3, [r7, #12]
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3710      	adds	r7, #16
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}
 8008d32:	bf00      	nop
 8008d34:	200001b0 	.word	0x200001b0

08008d38 <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 8008d38:	b480      	push	{r7}
 8008d3a:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 8008d3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	46bd      	mov	sp, r7
 8008d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d48:	4770      	bx	lr
	...

08008d4c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b092      	sub	sp, #72	; 0x48
 8008d50:	af04      	add	r7, sp, #16
 8008d52:	60f8      	str	r0, [r7, #12]
 8008d54:	60b9      	str	r1, [r7, #8]
 8008d56:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d5c:	f3ef 8305 	mrs	r3, IPSR
 8008d60:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8008d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	f040 8094 	bne.w	8008e92 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d6a:	f3ef 8310 	mrs	r3, PRIMASK
 8008d6e:	623b      	str	r3, [r7, #32]
  return(result);
 8008d70:	6a3b      	ldr	r3, [r7, #32]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	f040 808d 	bne.w	8008e92 <osThreadNew+0x146>
 8008d78:	4b48      	ldr	r3, [pc, #288]	; (8008e9c <osThreadNew+0x150>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	2b02      	cmp	r3, #2
 8008d7e:	d106      	bne.n	8008d8e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008d80:	f3ef 8311 	mrs	r3, BASEPRI
 8008d84:	61fb      	str	r3, [r7, #28]
  return(result);
 8008d86:	69fb      	ldr	r3, [r7, #28]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	f040 8082 	bne.w	8008e92 <osThreadNew+0x146>
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d07e      	beq.n	8008e92 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8008d94:	2380      	movs	r3, #128	; 0x80
 8008d96:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8008d98:	2318      	movs	r3, #24
 8008d9a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8008da0:	f107 031b 	add.w	r3, r7, #27
 8008da4:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8008da6:	f04f 33ff 	mov.w	r3, #4294967295
 8008daa:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d045      	beq.n	8008e3e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d002      	beq.n	8008dc0 <osThreadNew+0x74>
        name = attr->name;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	699b      	ldr	r3, [r3, #24]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d002      	beq.n	8008dce <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	699b      	ldr	r3, [r3, #24]
 8008dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d008      	beq.n	8008de6 <osThreadNew+0x9a>
 8008dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dd6:	2b38      	cmp	r3, #56	; 0x38
 8008dd8:	d805      	bhi.n	8008de6 <osThreadNew+0x9a>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	685b      	ldr	r3, [r3, #4]
 8008dde:	f003 0301 	and.w	r3, r3, #1
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d001      	beq.n	8008dea <osThreadNew+0x9e>
        return (NULL);
 8008de6:	2300      	movs	r3, #0
 8008de8:	e054      	b.n	8008e94 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	695b      	ldr	r3, [r3, #20]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d003      	beq.n	8008dfa <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	695b      	ldr	r3, [r3, #20]
 8008df6:	089b      	lsrs	r3, r3, #2
 8008df8:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	689b      	ldr	r3, [r3, #8]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d00e      	beq.n	8008e20 <osThreadNew+0xd4>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	68db      	ldr	r3, [r3, #12]
 8008e06:	2b5b      	cmp	r3, #91	; 0x5b
 8008e08:	d90a      	bls.n	8008e20 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d006      	beq.n	8008e20 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	695b      	ldr	r3, [r3, #20]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d002      	beq.n	8008e20 <osThreadNew+0xd4>
        mem = 1;
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e1e:	e010      	b.n	8008e42 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	689b      	ldr	r3, [r3, #8]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d10c      	bne.n	8008e42 <osThreadNew+0xf6>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	68db      	ldr	r3, [r3, #12]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d108      	bne.n	8008e42 <osThreadNew+0xf6>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	691b      	ldr	r3, [r3, #16]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d104      	bne.n	8008e42 <osThreadNew+0xf6>
          mem = 0;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e3c:	e001      	b.n	8008e42 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8008e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e44:	2b01      	cmp	r3, #1
 8008e46:	d110      	bne.n	8008e6a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008e4c:	687a      	ldr	r2, [r7, #4]
 8008e4e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008e50:	9202      	str	r2, [sp, #8]
 8008e52:	9301      	str	r3, [sp, #4]
 8008e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e56:	9300      	str	r3, [sp, #0]
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e5c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008e5e:	68f8      	ldr	r0, [r7, #12]
 8008e60:	f001 fb80 	bl	800a564 <xTaskCreateStatic>
 8008e64:	4603      	mov	r3, r0
 8008e66:	617b      	str	r3, [r7, #20]
 8008e68:	e013      	b.n	8008e92 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8008e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d110      	bne.n	8008e92 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e72:	b29a      	uxth	r2, r3
 8008e74:	f107 0314 	add.w	r3, r7, #20
 8008e78:	9301      	str	r3, [sp, #4]
 8008e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e7c:	9300      	str	r3, [sp, #0]
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008e82:	68f8      	ldr	r0, [r7, #12]
 8008e84:	f001 fbc7 	bl	800a616 <xTaskCreate>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	d001      	beq.n	8008e92 <osThreadNew+0x146>
          hTask = NULL;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008e92:	697b      	ldr	r3, [r7, #20]
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3738      	adds	r7, #56	; 0x38
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}
 8008e9c:	200001b0 	.word	0x200001b0

08008ea0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b086      	sub	sp, #24
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ea8:	f3ef 8305 	mrs	r3, IPSR
 8008eac:	613b      	str	r3, [r7, #16]
  return(result);
 8008eae:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d10f      	bne.n	8008ed4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008eb4:	f3ef 8310 	mrs	r3, PRIMASK
 8008eb8:	60fb      	str	r3, [r7, #12]
  return(result);
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d109      	bne.n	8008ed4 <osDelay+0x34>
 8008ec0:	4b0d      	ldr	r3, [pc, #52]	; (8008ef8 <osDelay+0x58>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	2b02      	cmp	r3, #2
 8008ec6:	d109      	bne.n	8008edc <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008ec8:	f3ef 8311 	mrs	r3, BASEPRI
 8008ecc:	60bb      	str	r3, [r7, #8]
  return(result);
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d003      	beq.n	8008edc <osDelay+0x3c>
    stat = osErrorISR;
 8008ed4:	f06f 0305 	mvn.w	r3, #5
 8008ed8:	617b      	str	r3, [r7, #20]
 8008eda:	e007      	b.n	8008eec <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8008edc:	2300      	movs	r3, #0
 8008ede:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d002      	beq.n	8008eec <osDelay+0x4c>
      vTaskDelay(ticks);
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f001 fd4a 	bl	800a980 <vTaskDelay>
    }
  }

  return (stat);
 8008eec:	697b      	ldr	r3, [r7, #20]
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3718      	adds	r7, #24
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}
 8008ef6:	bf00      	nop
 8008ef8:	200001b0 	.word	0x200001b0

08008efc <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b088      	sub	sp, #32
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f04:	f3ef 8305 	mrs	r3, IPSR
 8008f08:	61bb      	str	r3, [r7, #24]
  return(result);
 8008f0a:	69bb      	ldr	r3, [r7, #24]
  TickType_t tcnt;
  osStatus_t stat;

  if (IS_IRQ()) {
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d10f      	bne.n	8008f30 <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f10:	f3ef 8310 	mrs	r3, PRIMASK
 8008f14:	617b      	str	r3, [r7, #20]
  return(result);
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d109      	bne.n	8008f30 <osDelayUntil+0x34>
 8008f1c:	4b10      	ldr	r3, [pc, #64]	; (8008f60 <osDelayUntil+0x64>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	2b02      	cmp	r3, #2
 8008f22:	d109      	bne.n	8008f38 <osDelayUntil+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008f24:	f3ef 8311 	mrs	r3, BASEPRI
 8008f28:	613b      	str	r3, [r7, #16]
  return(result);
 8008f2a:	693b      	ldr	r3, [r7, #16]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d003      	beq.n	8008f38 <osDelayUntil+0x3c>
    stat = osErrorISR;
 8008f30:	f06f 0305 	mvn.w	r3, #5
 8008f34:	61fb      	str	r3, [r7, #28]
 8008f36:	e00e      	b.n	8008f56 <osDelayUntil+0x5a>
  }
  else {
    stat = osOK;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 8008f3c:	f001 fe62 	bl	800ac04 <xTaskGetTickCount>
 8008f40:	4603      	mov	r3, r0
 8008f42:	60fb      	str	r3, [r7, #12]

    vTaskDelayUntil (&tcnt, (TickType_t)(ticks - tcnt));
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	687a      	ldr	r2, [r7, #4]
 8008f48:	1ad2      	subs	r2, r2, r3
 8008f4a:	f107 030c 	add.w	r3, r7, #12
 8008f4e:	4611      	mov	r1, r2
 8008f50:	4618      	mov	r0, r3
 8008f52:	f001 fc9b 	bl	800a88c <vTaskDelayUntil>
  }

  return (stat);
 8008f56:	69fb      	ldr	r3, [r7, #28]
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3720      	adds	r7, #32
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}
 8008f60:	200001b0 	.word	0x200001b0

08008f64 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b08a      	sub	sp, #40	; 0x28
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f70:	f3ef 8305 	mrs	r3, IPSR
 8008f74:	613b      	str	r3, [r7, #16]
  return(result);
 8008f76:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	f040 8085 	bne.w	8009088 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f7e:	f3ef 8310 	mrs	r3, PRIMASK
 8008f82:	60fb      	str	r3, [r7, #12]
  return(result);
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d17e      	bne.n	8009088 <osMutexNew+0x124>
 8008f8a:	4b42      	ldr	r3, [pc, #264]	; (8009094 <osMutexNew+0x130>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	2b02      	cmp	r3, #2
 8008f90:	d105      	bne.n	8008f9e <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008f92:	f3ef 8311 	mrs	r3, BASEPRI
 8008f96:	60bb      	str	r3, [r7, #8]
  return(result);
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d174      	bne.n	8009088 <osMutexNew+0x124>
    if (attr != NULL) {
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d003      	beq.n	8008fac <osMutexNew+0x48>
      type = attr->attr_bits;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	623b      	str	r3, [r7, #32]
 8008faa:	e001      	b.n	8008fb0 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8008fac:	2300      	movs	r3, #0
 8008fae:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8008fb0:	6a3b      	ldr	r3, [r7, #32]
 8008fb2:	f003 0301 	and.w	r3, r3, #1
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d002      	beq.n	8008fc0 <osMutexNew+0x5c>
      rmtx = 1U;
 8008fba:	2301      	movs	r3, #1
 8008fbc:	61fb      	str	r3, [r7, #28]
 8008fbe:	e001      	b.n	8008fc4 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8008fc4:	6a3b      	ldr	r3, [r7, #32]
 8008fc6:	f003 0308 	and.w	r3, r3, #8
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d15c      	bne.n	8009088 <osMutexNew+0x124>
      mem = -1;
 8008fce:	f04f 33ff 	mov.w	r3, #4294967295
 8008fd2:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d015      	beq.n	8009006 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	689b      	ldr	r3, [r3, #8]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d006      	beq.n	8008ff0 <osMutexNew+0x8c>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	68db      	ldr	r3, [r3, #12]
 8008fe6:	2b4f      	cmp	r3, #79	; 0x4f
 8008fe8:	d902      	bls.n	8008ff0 <osMutexNew+0x8c>
          mem = 1;
 8008fea:	2301      	movs	r3, #1
 8008fec:	61bb      	str	r3, [r7, #24]
 8008fee:	e00c      	b.n	800900a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	689b      	ldr	r3, [r3, #8]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d108      	bne.n	800900a <osMutexNew+0xa6>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	68db      	ldr	r3, [r3, #12]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d104      	bne.n	800900a <osMutexNew+0xa6>
            mem = 0;
 8009000:	2300      	movs	r3, #0
 8009002:	61bb      	str	r3, [r7, #24]
 8009004:	e001      	b.n	800900a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8009006:	2300      	movs	r3, #0
 8009008:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800900a:	69bb      	ldr	r3, [r7, #24]
 800900c:	2b01      	cmp	r3, #1
 800900e:	d112      	bne.n	8009036 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8009010:	69fb      	ldr	r3, [r7, #28]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d007      	beq.n	8009026 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	689b      	ldr	r3, [r3, #8]
 800901a:	4619      	mov	r1, r3
 800901c:	2004      	movs	r0, #4
 800901e:	f000 fca9 	bl	8009974 <xQueueCreateMutexStatic>
 8009022:	6278      	str	r0, [r7, #36]	; 0x24
 8009024:	e016      	b.n	8009054 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	689b      	ldr	r3, [r3, #8]
 800902a:	4619      	mov	r1, r3
 800902c:	2001      	movs	r0, #1
 800902e:	f000 fca1 	bl	8009974 <xQueueCreateMutexStatic>
 8009032:	6278      	str	r0, [r7, #36]	; 0x24
 8009034:	e00e      	b.n	8009054 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8009036:	69bb      	ldr	r3, [r7, #24]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d10b      	bne.n	8009054 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800903c:	69fb      	ldr	r3, [r7, #28]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d004      	beq.n	800904c <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8009042:	2004      	movs	r0, #4
 8009044:	f000 fc7e 	bl	8009944 <xQueueCreateMutex>
 8009048:	6278      	str	r0, [r7, #36]	; 0x24
 800904a:	e003      	b.n	8009054 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800904c:	2001      	movs	r0, #1
 800904e:	f000 fc79 	bl	8009944 <xQueueCreateMutex>
 8009052:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8009054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009056:	2b00      	cmp	r3, #0
 8009058:	d00c      	beq.n	8009074 <osMutexNew+0x110>
        if (attr != NULL) {
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d003      	beq.n	8009068 <osMutexNew+0x104>
          name = attr->name;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	617b      	str	r3, [r7, #20]
 8009066:	e001      	b.n	800906c <osMutexNew+0x108>
        } else {
          name = NULL;
 8009068:	2300      	movs	r3, #0
 800906a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800906c:	6979      	ldr	r1, [r7, #20]
 800906e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009070:	f001 fa1c 	bl	800a4ac <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8009074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009076:	2b00      	cmp	r3, #0
 8009078:	d006      	beq.n	8009088 <osMutexNew+0x124>
 800907a:	69fb      	ldr	r3, [r7, #28]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d003      	beq.n	8009088 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8009080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009082:	f043 0301 	orr.w	r3, r3, #1
 8009086:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8009088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800908a:	4618      	mov	r0, r3
 800908c:	3728      	adds	r7, #40	; 0x28
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}
 8009092:	bf00      	nop
 8009094:	200001b0 	.word	0x200001b0

08009098 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8009098:	b580      	push	{r7, lr}
 800909a:	b088      	sub	sp, #32
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
 80090a0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f023 0301 	bic.w	r3, r3, #1
 80090a8:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f003 0301 	and.w	r3, r3, #1
 80090b0:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80090b2:	2300      	movs	r3, #0
 80090b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80090b6:	f3ef 8305 	mrs	r3, IPSR
 80090ba:	613b      	str	r3, [r7, #16]
  return(result);
 80090bc:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d10f      	bne.n	80090e2 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090c2:	f3ef 8310 	mrs	r3, PRIMASK
 80090c6:	60fb      	str	r3, [r7, #12]
  return(result);
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d109      	bne.n	80090e2 <osMutexAcquire+0x4a>
 80090ce:	4b20      	ldr	r3, [pc, #128]	; (8009150 <osMutexAcquire+0xb8>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	2b02      	cmp	r3, #2
 80090d4:	d109      	bne.n	80090ea <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80090d6:	f3ef 8311 	mrs	r3, BASEPRI
 80090da:	60bb      	str	r3, [r7, #8]
  return(result);
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d003      	beq.n	80090ea <osMutexAcquire+0x52>
    stat = osErrorISR;
 80090e2:	f06f 0305 	mvn.w	r3, #5
 80090e6:	61fb      	str	r3, [r7, #28]
 80090e8:	e02c      	b.n	8009144 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 80090ea:	69bb      	ldr	r3, [r7, #24]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d103      	bne.n	80090f8 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 80090f0:	f06f 0303 	mvn.w	r3, #3
 80090f4:	61fb      	str	r3, [r7, #28]
 80090f6:	e025      	b.n	8009144 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d011      	beq.n	8009122 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80090fe:	6839      	ldr	r1, [r7, #0]
 8009100:	69b8      	ldr	r0, [r7, #24]
 8009102:	f000 fc85 	bl	8009a10 <xQueueTakeMutexRecursive>
 8009106:	4603      	mov	r3, r0
 8009108:	2b01      	cmp	r3, #1
 800910a:	d01b      	beq.n	8009144 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d003      	beq.n	800911a <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8009112:	f06f 0301 	mvn.w	r3, #1
 8009116:	61fb      	str	r3, [r7, #28]
 8009118:	e014      	b.n	8009144 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800911a:	f06f 0302 	mvn.w	r3, #2
 800911e:	61fb      	str	r3, [r7, #28]
 8009120:	e010      	b.n	8009144 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8009122:	6839      	ldr	r1, [r7, #0]
 8009124:	69b8      	ldr	r0, [r7, #24]
 8009126:	f000 ff13 	bl	8009f50 <xQueueSemaphoreTake>
 800912a:	4603      	mov	r3, r0
 800912c:	2b01      	cmp	r3, #1
 800912e:	d009      	beq.n	8009144 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d003      	beq.n	800913e <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8009136:	f06f 0301 	mvn.w	r3, #1
 800913a:	61fb      	str	r3, [r7, #28]
 800913c:	e002      	b.n	8009144 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800913e:	f06f 0302 	mvn.w	r3, #2
 8009142:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009144:	69fb      	ldr	r3, [r7, #28]
}
 8009146:	4618      	mov	r0, r3
 8009148:	3720      	adds	r7, #32
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}
 800914e:	bf00      	nop
 8009150:	200001b0 	.word	0x200001b0

08009154 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8009154:	b580      	push	{r7, lr}
 8009156:	b088      	sub	sp, #32
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f023 0301 	bic.w	r3, r3, #1
 8009162:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f003 0301 	and.w	r3, r3, #1
 800916a:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800916c:	2300      	movs	r3, #0
 800916e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009170:	f3ef 8305 	mrs	r3, IPSR
 8009174:	613b      	str	r3, [r7, #16]
  return(result);
 8009176:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8009178:	2b00      	cmp	r3, #0
 800917a:	d10f      	bne.n	800919c <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800917c:	f3ef 8310 	mrs	r3, PRIMASK
 8009180:	60fb      	str	r3, [r7, #12]
  return(result);
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d109      	bne.n	800919c <osMutexRelease+0x48>
 8009188:	4b19      	ldr	r3, [pc, #100]	; (80091f0 <osMutexRelease+0x9c>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	2b02      	cmp	r3, #2
 800918e:	d109      	bne.n	80091a4 <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009190:	f3ef 8311 	mrs	r3, BASEPRI
 8009194:	60bb      	str	r3, [r7, #8]
  return(result);
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d003      	beq.n	80091a4 <osMutexRelease+0x50>
    stat = osErrorISR;
 800919c:	f06f 0305 	mvn.w	r3, #5
 80091a0:	61fb      	str	r3, [r7, #28]
 80091a2:	e01f      	b.n	80091e4 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 80091a4:	69bb      	ldr	r3, [r7, #24]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d103      	bne.n	80091b2 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 80091aa:	f06f 0303 	mvn.w	r3, #3
 80091ae:	61fb      	str	r3, [r7, #28]
 80091b0:	e018      	b.n	80091e4 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d009      	beq.n	80091cc <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80091b8:	69b8      	ldr	r0, [r7, #24]
 80091ba:	f000 fbf6 	bl	80099aa <xQueueGiveMutexRecursive>
 80091be:	4603      	mov	r3, r0
 80091c0:	2b01      	cmp	r3, #1
 80091c2:	d00f      	beq.n	80091e4 <osMutexRelease+0x90>
        stat = osErrorResource;
 80091c4:	f06f 0302 	mvn.w	r3, #2
 80091c8:	61fb      	str	r3, [r7, #28]
 80091ca:	e00b      	b.n	80091e4 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80091cc:	2300      	movs	r3, #0
 80091ce:	2200      	movs	r2, #0
 80091d0:	2100      	movs	r1, #0
 80091d2:	69b8      	ldr	r0, [r7, #24]
 80091d4:	f000 fc52 	bl	8009a7c <xQueueGenericSend>
 80091d8:	4603      	mov	r3, r0
 80091da:	2b01      	cmp	r3, #1
 80091dc:	d002      	beq.n	80091e4 <osMutexRelease+0x90>
        stat = osErrorResource;
 80091de:	f06f 0302 	mvn.w	r3, #2
 80091e2:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 80091e4:	69fb      	ldr	r3, [r7, #28]
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3720      	adds	r7, #32
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}
 80091ee:	bf00      	nop
 80091f0:	200001b0 	.word	0x200001b0

080091f4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b08c      	sub	sp, #48	; 0x30
 80091f8:	af02      	add	r7, sp, #8
 80091fa:	60f8      	str	r0, [r7, #12]
 80091fc:	60b9      	str	r1, [r7, #8]
 80091fe:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009200:	2300      	movs	r3, #0
 8009202:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009204:	f3ef 8305 	mrs	r3, IPSR
 8009208:	61bb      	str	r3, [r7, #24]
  return(result);
 800920a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800920c:	2b00      	cmp	r3, #0
 800920e:	d170      	bne.n	80092f2 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009210:	f3ef 8310 	mrs	r3, PRIMASK
 8009214:	617b      	str	r3, [r7, #20]
  return(result);
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d16a      	bne.n	80092f2 <osMessageQueueNew+0xfe>
 800921c:	4b37      	ldr	r3, [pc, #220]	; (80092fc <osMessageQueueNew+0x108>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	2b02      	cmp	r3, #2
 8009222:	d105      	bne.n	8009230 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009224:	f3ef 8311 	mrs	r3, BASEPRI
 8009228:	613b      	str	r3, [r7, #16]
  return(result);
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d160      	bne.n	80092f2 <osMessageQueueNew+0xfe>
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d05d      	beq.n	80092f2 <osMessageQueueNew+0xfe>
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d05a      	beq.n	80092f2 <osMessageQueueNew+0xfe>
    mem = -1;
 800923c:	f04f 33ff 	mov.w	r3, #4294967295
 8009240:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d029      	beq.n	800929c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	689b      	ldr	r3, [r3, #8]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d012      	beq.n	8009276 <osMessageQueueNew+0x82>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	68db      	ldr	r3, [r3, #12]
 8009254:	2b4f      	cmp	r3, #79	; 0x4f
 8009256:	d90e      	bls.n	8009276 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800925c:	2b00      	cmp	r3, #0
 800925e:	d00a      	beq.n	8009276 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	695a      	ldr	r2, [r3, #20]
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	68b9      	ldr	r1, [r7, #8]
 8009268:	fb01 f303 	mul.w	r3, r1, r3
 800926c:	429a      	cmp	r2, r3
 800926e:	d302      	bcc.n	8009276 <osMessageQueueNew+0x82>
        mem = 1;
 8009270:	2301      	movs	r3, #1
 8009272:	623b      	str	r3, [r7, #32]
 8009274:	e014      	b.n	80092a0 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	689b      	ldr	r3, [r3, #8]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d110      	bne.n	80092a0 <osMessageQueueNew+0xac>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	68db      	ldr	r3, [r3, #12]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d10c      	bne.n	80092a0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800928a:	2b00      	cmp	r3, #0
 800928c:	d108      	bne.n	80092a0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	695b      	ldr	r3, [r3, #20]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d104      	bne.n	80092a0 <osMessageQueueNew+0xac>
          mem = 0;
 8009296:	2300      	movs	r3, #0
 8009298:	623b      	str	r3, [r7, #32]
 800929a:	e001      	b.n	80092a0 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800929c:	2300      	movs	r3, #0
 800929e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80092a0:	6a3b      	ldr	r3, [r7, #32]
 80092a2:	2b01      	cmp	r3, #1
 80092a4:	d10c      	bne.n	80092c0 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	691a      	ldr	r2, [r3, #16]
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6899      	ldr	r1, [r3, #8]
 80092ae:	2300      	movs	r3, #0
 80092b0:	9300      	str	r3, [sp, #0]
 80092b2:	460b      	mov	r3, r1
 80092b4:	68b9      	ldr	r1, [r7, #8]
 80092b6:	68f8      	ldr	r0, [r7, #12]
 80092b8:	f000 fa58 	bl	800976c <xQueueGenericCreateStatic>
 80092bc:	6278      	str	r0, [r7, #36]	; 0x24
 80092be:	e008      	b.n	80092d2 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 80092c0:	6a3b      	ldr	r3, [r7, #32]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d105      	bne.n	80092d2 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 80092c6:	2200      	movs	r2, #0
 80092c8:	68b9      	ldr	r1, [r7, #8]
 80092ca:	68f8      	ldr	r0, [r7, #12]
 80092cc:	f000 fac0 	bl	8009850 <xQueueGenericCreate>
 80092d0:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80092d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d00c      	beq.n	80092f2 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d003      	beq.n	80092e6 <osMessageQueueNew+0xf2>
        name = attr->name;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	61fb      	str	r3, [r7, #28]
 80092e4:	e001      	b.n	80092ea <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 80092e6:	2300      	movs	r3, #0
 80092e8:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80092ea:	69f9      	ldr	r1, [r7, #28]
 80092ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80092ee:	f001 f8dd 	bl	800a4ac <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80092f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	3728      	adds	r7, #40	; 0x28
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}
 80092fc:	200001b0 	.word	0x200001b0

08009300 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009300:	b580      	push	{r7, lr}
 8009302:	b08a      	sub	sp, #40	; 0x28
 8009304:	af00      	add	r7, sp, #0
 8009306:	60f8      	str	r0, [r7, #12]
 8009308:	60b9      	str	r1, [r7, #8]
 800930a:	603b      	str	r3, [r7, #0]
 800930c:	4613      	mov	r3, r2
 800930e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009314:	2300      	movs	r3, #0
 8009316:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009318:	f3ef 8305 	mrs	r3, IPSR
 800931c:	61fb      	str	r3, [r7, #28]
  return(result);
 800931e:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8009320:	2b00      	cmp	r3, #0
 8009322:	d10f      	bne.n	8009344 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009324:	f3ef 8310 	mrs	r3, PRIMASK
 8009328:	61bb      	str	r3, [r7, #24]
  return(result);
 800932a:	69bb      	ldr	r3, [r7, #24]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d109      	bne.n	8009344 <osMessageQueuePut+0x44>
 8009330:	4b2b      	ldr	r3, [pc, #172]	; (80093e0 <osMessageQueuePut+0xe0>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	2b02      	cmp	r3, #2
 8009336:	d12e      	bne.n	8009396 <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009338:	f3ef 8311 	mrs	r3, BASEPRI
 800933c:	617b      	str	r3, [r7, #20]
  return(result);
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d028      	beq.n	8009396 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009344:	6a3b      	ldr	r3, [r7, #32]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d005      	beq.n	8009356 <osMessageQueuePut+0x56>
 800934a:	68bb      	ldr	r3, [r7, #8]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d002      	beq.n	8009356 <osMessageQueuePut+0x56>
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d003      	beq.n	800935e <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8009356:	f06f 0303 	mvn.w	r3, #3
 800935a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800935c:	e039      	b.n	80093d2 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800935e:	2300      	movs	r3, #0
 8009360:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009362:	f107 0210 	add.w	r2, r7, #16
 8009366:	2300      	movs	r3, #0
 8009368:	68b9      	ldr	r1, [r7, #8]
 800936a:	6a38      	ldr	r0, [r7, #32]
 800936c:	f000 fc80 	bl	8009c70 <xQueueGenericSendFromISR>
 8009370:	4603      	mov	r3, r0
 8009372:	2b01      	cmp	r3, #1
 8009374:	d003      	beq.n	800937e <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8009376:	f06f 0302 	mvn.w	r3, #2
 800937a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800937c:	e029      	b.n	80093d2 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d026      	beq.n	80093d2 <osMessageQueuePut+0xd2>
 8009384:	4b17      	ldr	r3, [pc, #92]	; (80093e4 <osMessageQueuePut+0xe4>)
 8009386:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800938a:	601a      	str	r2, [r3, #0]
 800938c:	f3bf 8f4f 	dsb	sy
 8009390:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009394:	e01d      	b.n	80093d2 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009396:	6a3b      	ldr	r3, [r7, #32]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d002      	beq.n	80093a2 <osMessageQueuePut+0xa2>
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d103      	bne.n	80093aa <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 80093a2:	f06f 0303 	mvn.w	r3, #3
 80093a6:	627b      	str	r3, [r7, #36]	; 0x24
 80093a8:	e014      	b.n	80093d4 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80093aa:	2300      	movs	r3, #0
 80093ac:	683a      	ldr	r2, [r7, #0]
 80093ae:	68b9      	ldr	r1, [r7, #8]
 80093b0:	6a38      	ldr	r0, [r7, #32]
 80093b2:	f000 fb63 	bl	8009a7c <xQueueGenericSend>
 80093b6:	4603      	mov	r3, r0
 80093b8:	2b01      	cmp	r3, #1
 80093ba:	d00b      	beq.n	80093d4 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d003      	beq.n	80093ca <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 80093c2:	f06f 0301 	mvn.w	r3, #1
 80093c6:	627b      	str	r3, [r7, #36]	; 0x24
 80093c8:	e004      	b.n	80093d4 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 80093ca:	f06f 0302 	mvn.w	r3, #2
 80093ce:	627b      	str	r3, [r7, #36]	; 0x24
 80093d0:	e000      	b.n	80093d4 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80093d2:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80093d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3728      	adds	r7, #40	; 0x28
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}
 80093de:	bf00      	nop
 80093e0:	200001b0 	.word	0x200001b0
 80093e4:	e000ed04 	.word	0xe000ed04

080093e8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b08a      	sub	sp, #40	; 0x28
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	60f8      	str	r0, [r7, #12]
 80093f0:	60b9      	str	r1, [r7, #8]
 80093f2:	607a      	str	r2, [r7, #4]
 80093f4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80093fa:	2300      	movs	r3, #0
 80093fc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80093fe:	f3ef 8305 	mrs	r3, IPSR
 8009402:	61fb      	str	r3, [r7, #28]
  return(result);
 8009404:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8009406:	2b00      	cmp	r3, #0
 8009408:	d10f      	bne.n	800942a <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800940a:	f3ef 8310 	mrs	r3, PRIMASK
 800940e:	61bb      	str	r3, [r7, #24]
  return(result);
 8009410:	69bb      	ldr	r3, [r7, #24]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d109      	bne.n	800942a <osMessageQueueGet+0x42>
 8009416:	4b2b      	ldr	r3, [pc, #172]	; (80094c4 <osMessageQueueGet+0xdc>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	2b02      	cmp	r3, #2
 800941c:	d12e      	bne.n	800947c <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800941e:	f3ef 8311 	mrs	r3, BASEPRI
 8009422:	617b      	str	r3, [r7, #20]
  return(result);
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d028      	beq.n	800947c <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800942a:	6a3b      	ldr	r3, [r7, #32]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d005      	beq.n	800943c <osMessageQueueGet+0x54>
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d002      	beq.n	800943c <osMessageQueueGet+0x54>
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d003      	beq.n	8009444 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800943c:	f06f 0303 	mvn.w	r3, #3
 8009440:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009442:	e038      	b.n	80094b6 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8009444:	2300      	movs	r3, #0
 8009446:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009448:	f107 0310 	add.w	r3, r7, #16
 800944c:	461a      	mov	r2, r3
 800944e:	68b9      	ldr	r1, [r7, #8]
 8009450:	6a38      	ldr	r0, [r7, #32]
 8009452:	f000 fe85 	bl	800a160 <xQueueReceiveFromISR>
 8009456:	4603      	mov	r3, r0
 8009458:	2b01      	cmp	r3, #1
 800945a:	d003      	beq.n	8009464 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800945c:	f06f 0302 	mvn.w	r3, #2
 8009460:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009462:	e028      	b.n	80094b6 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8009464:	693b      	ldr	r3, [r7, #16]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d025      	beq.n	80094b6 <osMessageQueueGet+0xce>
 800946a:	4b17      	ldr	r3, [pc, #92]	; (80094c8 <osMessageQueueGet+0xe0>)
 800946c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009470:	601a      	str	r2, [r3, #0]
 8009472:	f3bf 8f4f 	dsb	sy
 8009476:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800947a:	e01c      	b.n	80094b6 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800947c:	6a3b      	ldr	r3, [r7, #32]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d002      	beq.n	8009488 <osMessageQueueGet+0xa0>
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d103      	bne.n	8009490 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8009488:	f06f 0303 	mvn.w	r3, #3
 800948c:	627b      	str	r3, [r7, #36]	; 0x24
 800948e:	e013      	b.n	80094b8 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009490:	683a      	ldr	r2, [r7, #0]
 8009492:	68b9      	ldr	r1, [r7, #8]
 8009494:	6a38      	ldr	r0, [r7, #32]
 8009496:	f000 fc7f 	bl	8009d98 <xQueueReceive>
 800949a:	4603      	mov	r3, r0
 800949c:	2b01      	cmp	r3, #1
 800949e:	d00b      	beq.n	80094b8 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d003      	beq.n	80094ae <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 80094a6:	f06f 0301 	mvn.w	r3, #1
 80094aa:	627b      	str	r3, [r7, #36]	; 0x24
 80094ac:	e004      	b.n	80094b8 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 80094ae:	f06f 0302 	mvn.w	r3, #2
 80094b2:	627b      	str	r3, [r7, #36]	; 0x24
 80094b4:	e000      	b.n	80094b8 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80094b6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80094b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	3728      	adds	r7, #40	; 0x28
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}
 80094c2:	bf00      	nop
 80094c4:	200001b0 	.word	0x200001b0
 80094c8:	e000ed04 	.word	0xe000ed04

080094cc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80094cc:	b480      	push	{r7}
 80094ce:	b085      	sub	sp, #20
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	60f8      	str	r0, [r7, #12]
 80094d4:	60b9      	str	r1, [r7, #8]
 80094d6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	4a07      	ldr	r2, [pc, #28]	; (80094f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80094dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	4a06      	ldr	r2, [pc, #24]	; (80094fc <vApplicationGetIdleTaskMemory+0x30>)
 80094e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2280      	movs	r2, #128	; 0x80
 80094e8:	601a      	str	r2, [r3, #0]
}
 80094ea:	bf00      	nop
 80094ec:	3714      	adds	r7, #20
 80094ee:	46bd      	mov	sp, r7
 80094f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f4:	4770      	bx	lr
 80094f6:	bf00      	nop
 80094f8:	200001b4 	.word	0x200001b4
 80094fc:	20000210 	.word	0x20000210

08009500 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009500:	b480      	push	{r7}
 8009502:	b085      	sub	sp, #20
 8009504:	af00      	add	r7, sp, #0
 8009506:	60f8      	str	r0, [r7, #12]
 8009508:	60b9      	str	r1, [r7, #8]
 800950a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	4a07      	ldr	r2, [pc, #28]	; (800952c <vApplicationGetTimerTaskMemory+0x2c>)
 8009510:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	4a06      	ldr	r2, [pc, #24]	; (8009530 <vApplicationGetTimerTaskMemory+0x30>)
 8009516:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800951e:	601a      	str	r2, [r3, #0]
}
 8009520:	bf00      	nop
 8009522:	3714      	adds	r7, #20
 8009524:	46bd      	mov	sp, r7
 8009526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952a:	4770      	bx	lr
 800952c:	20000410 	.word	0x20000410
 8009530:	2000046c 	.word	0x2000046c

08009534 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009534:	b480      	push	{r7}
 8009536:	b083      	sub	sp, #12
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f103 0208 	add.w	r2, r3, #8
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f04f 32ff 	mov.w	r2, #4294967295
 800954c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f103 0208 	add.w	r2, r3, #8
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f103 0208 	add.w	r2, r3, #8
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2200      	movs	r2, #0
 8009566:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009568:	bf00      	nop
 800956a:	370c      	adds	r7, #12
 800956c:	46bd      	mov	sp, r7
 800956e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009572:	4770      	bx	lr

08009574 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009574:	b480      	push	{r7}
 8009576:	b083      	sub	sp, #12
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2200      	movs	r2, #0
 8009580:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009582:	bf00      	nop
 8009584:	370c      	adds	r7, #12
 8009586:	46bd      	mov	sp, r7
 8009588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958c:	4770      	bx	lr

0800958e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800958e:	b480      	push	{r7}
 8009590:	b085      	sub	sp, #20
 8009592:	af00      	add	r7, sp, #0
 8009594:	6078      	str	r0, [r7, #4]
 8009596:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	68fa      	ldr	r2, [r7, #12]
 80095a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	689a      	ldr	r2, [r3, #8]
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	689b      	ldr	r3, [r3, #8]
 80095b0:	683a      	ldr	r2, [r7, #0]
 80095b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	683a      	ldr	r2, [r7, #0]
 80095b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	687a      	ldr	r2, [r7, #4]
 80095be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	1c5a      	adds	r2, r3, #1
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	601a      	str	r2, [r3, #0]
}
 80095ca:	bf00      	nop
 80095cc:	3714      	adds	r7, #20
 80095ce:	46bd      	mov	sp, r7
 80095d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d4:	4770      	bx	lr

080095d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80095d6:	b480      	push	{r7}
 80095d8:	b085      	sub	sp, #20
 80095da:	af00      	add	r7, sp, #0
 80095dc:	6078      	str	r0, [r7, #4]
 80095de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095ec:	d103      	bne.n	80095f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	691b      	ldr	r3, [r3, #16]
 80095f2:	60fb      	str	r3, [r7, #12]
 80095f4:	e00c      	b.n	8009610 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	3308      	adds	r3, #8
 80095fa:	60fb      	str	r3, [r7, #12]
 80095fc:	e002      	b.n	8009604 <vListInsert+0x2e>
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	685b      	ldr	r3, [r3, #4]
 8009602:	60fb      	str	r3, [r7, #12]
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	685b      	ldr	r3, [r3, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	68ba      	ldr	r2, [r7, #8]
 800960c:	429a      	cmp	r2, r3
 800960e:	d2f6      	bcs.n	80095fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	685a      	ldr	r2, [r3, #4]
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	683a      	ldr	r2, [r7, #0]
 800961e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	68fa      	ldr	r2, [r7, #12]
 8009624:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	683a      	ldr	r2, [r7, #0]
 800962a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	687a      	ldr	r2, [r7, #4]
 8009630:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	1c5a      	adds	r2, r3, #1
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	601a      	str	r2, [r3, #0]
}
 800963c:	bf00      	nop
 800963e:	3714      	adds	r7, #20
 8009640:	46bd      	mov	sp, r7
 8009642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009646:	4770      	bx	lr

08009648 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009648:	b480      	push	{r7}
 800964a:	b085      	sub	sp, #20
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	691b      	ldr	r3, [r3, #16]
 8009654:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	685b      	ldr	r3, [r3, #4]
 800965a:	687a      	ldr	r2, [r7, #4]
 800965c:	6892      	ldr	r2, [r2, #8]
 800965e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	689b      	ldr	r3, [r3, #8]
 8009664:	687a      	ldr	r2, [r7, #4]
 8009666:	6852      	ldr	r2, [r2, #4]
 8009668:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	685b      	ldr	r3, [r3, #4]
 800966e:	687a      	ldr	r2, [r7, #4]
 8009670:	429a      	cmp	r2, r3
 8009672:	d103      	bne.n	800967c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	689a      	ldr	r2, [r3, #8]
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2200      	movs	r2, #0
 8009680:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	1e5a      	subs	r2, r3, #1
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
}
 8009690:	4618      	mov	r0, r3
 8009692:	3714      	adds	r7, #20
 8009694:	46bd      	mov	sp, r7
 8009696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969a:	4770      	bx	lr

0800969c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b084      	sub	sp, #16
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
 80096a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d109      	bne.n	80096c4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80096b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b4:	f383 8811 	msr	BASEPRI, r3
 80096b8:	f3bf 8f6f 	isb	sy
 80096bc:	f3bf 8f4f 	dsb	sy
 80096c0:	60bb      	str	r3, [r7, #8]
 80096c2:	e7fe      	b.n	80096c2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80096c4:	f002 fc0a 	bl	800bedc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	681a      	ldr	r2, [r3, #0]
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096d0:	68f9      	ldr	r1, [r7, #12]
 80096d2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80096d4:	fb01 f303 	mul.w	r3, r1, r3
 80096d8:	441a      	add	r2, r3
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	2200      	movs	r2, #0
 80096e2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681a      	ldr	r2, [r3, #0]
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681a      	ldr	r2, [r3, #0]
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096f4:	3b01      	subs	r3, #1
 80096f6:	68f9      	ldr	r1, [r7, #12]
 80096f8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80096fa:	fb01 f303 	mul.w	r3, r1, r3
 80096fe:	441a      	add	r2, r3
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	22ff      	movs	r2, #255	; 0xff
 8009708:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	22ff      	movs	r2, #255	; 0xff
 8009710:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d114      	bne.n	8009744 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	691b      	ldr	r3, [r3, #16]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d01a      	beq.n	8009758 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	3310      	adds	r3, #16
 8009726:	4618      	mov	r0, r3
 8009728:	f001 fbf6 	bl	800af18 <xTaskRemoveFromEventList>
 800972c:	4603      	mov	r3, r0
 800972e:	2b00      	cmp	r3, #0
 8009730:	d012      	beq.n	8009758 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009732:	4b0d      	ldr	r3, [pc, #52]	; (8009768 <xQueueGenericReset+0xcc>)
 8009734:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009738:	601a      	str	r2, [r3, #0]
 800973a:	f3bf 8f4f 	dsb	sy
 800973e:	f3bf 8f6f 	isb	sy
 8009742:	e009      	b.n	8009758 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	3310      	adds	r3, #16
 8009748:	4618      	mov	r0, r3
 800974a:	f7ff fef3 	bl	8009534 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	3324      	adds	r3, #36	; 0x24
 8009752:	4618      	mov	r0, r3
 8009754:	f7ff feee 	bl	8009534 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009758:	f002 fbee 	bl	800bf38 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800975c:	2301      	movs	r3, #1
}
 800975e:	4618      	mov	r0, r3
 8009760:	3710      	adds	r7, #16
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}
 8009766:	bf00      	nop
 8009768:	e000ed04 	.word	0xe000ed04

0800976c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800976c:	b580      	push	{r7, lr}
 800976e:	b08e      	sub	sp, #56	; 0x38
 8009770:	af02      	add	r7, sp, #8
 8009772:	60f8      	str	r0, [r7, #12]
 8009774:	60b9      	str	r1, [r7, #8]
 8009776:	607a      	str	r2, [r7, #4]
 8009778:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d109      	bne.n	8009794 <xQueueGenericCreateStatic+0x28>
 8009780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009784:	f383 8811 	msr	BASEPRI, r3
 8009788:	f3bf 8f6f 	isb	sy
 800978c:	f3bf 8f4f 	dsb	sy
 8009790:	62bb      	str	r3, [r7, #40]	; 0x28
 8009792:	e7fe      	b.n	8009792 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d109      	bne.n	80097ae <xQueueGenericCreateStatic+0x42>
 800979a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800979e:	f383 8811 	msr	BASEPRI, r3
 80097a2:	f3bf 8f6f 	isb	sy
 80097a6:	f3bf 8f4f 	dsb	sy
 80097aa:	627b      	str	r3, [r7, #36]	; 0x24
 80097ac:	e7fe      	b.n	80097ac <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d002      	beq.n	80097ba <xQueueGenericCreateStatic+0x4e>
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d001      	beq.n	80097be <xQueueGenericCreateStatic+0x52>
 80097ba:	2301      	movs	r3, #1
 80097bc:	e000      	b.n	80097c0 <xQueueGenericCreateStatic+0x54>
 80097be:	2300      	movs	r3, #0
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d109      	bne.n	80097d8 <xQueueGenericCreateStatic+0x6c>
 80097c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c8:	f383 8811 	msr	BASEPRI, r3
 80097cc:	f3bf 8f6f 	isb	sy
 80097d0:	f3bf 8f4f 	dsb	sy
 80097d4:	623b      	str	r3, [r7, #32]
 80097d6:	e7fe      	b.n	80097d6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d102      	bne.n	80097e4 <xQueueGenericCreateStatic+0x78>
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d101      	bne.n	80097e8 <xQueueGenericCreateStatic+0x7c>
 80097e4:	2301      	movs	r3, #1
 80097e6:	e000      	b.n	80097ea <xQueueGenericCreateStatic+0x7e>
 80097e8:	2300      	movs	r3, #0
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d109      	bne.n	8009802 <xQueueGenericCreateStatic+0x96>
 80097ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f2:	f383 8811 	msr	BASEPRI, r3
 80097f6:	f3bf 8f6f 	isb	sy
 80097fa:	f3bf 8f4f 	dsb	sy
 80097fe:	61fb      	str	r3, [r7, #28]
 8009800:	e7fe      	b.n	8009800 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009802:	2350      	movs	r3, #80	; 0x50
 8009804:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	2b50      	cmp	r3, #80	; 0x50
 800980a:	d009      	beq.n	8009820 <xQueueGenericCreateStatic+0xb4>
 800980c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009810:	f383 8811 	msr	BASEPRI, r3
 8009814:	f3bf 8f6f 	isb	sy
 8009818:	f3bf 8f4f 	dsb	sy
 800981c:	61bb      	str	r3, [r7, #24]
 800981e:	e7fe      	b.n	800981e <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009826:	2b00      	cmp	r3, #0
 8009828:	d00d      	beq.n	8009846 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800982a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800982c:	2201      	movs	r2, #1
 800982e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009832:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009838:	9300      	str	r3, [sp, #0]
 800983a:	4613      	mov	r3, r2
 800983c:	687a      	ldr	r2, [r7, #4]
 800983e:	68b9      	ldr	r1, [r7, #8]
 8009840:	68f8      	ldr	r0, [r7, #12]
 8009842:	f000 f842 	bl	80098ca <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8009846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009848:	4618      	mov	r0, r3
 800984a:	3730      	adds	r7, #48	; 0x30
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}

08009850 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009850:	b580      	push	{r7, lr}
 8009852:	b08a      	sub	sp, #40	; 0x28
 8009854:	af02      	add	r7, sp, #8
 8009856:	60f8      	str	r0, [r7, #12]
 8009858:	60b9      	str	r1, [r7, #8]
 800985a:	4613      	mov	r3, r2
 800985c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d109      	bne.n	8009878 <xQueueGenericCreate+0x28>
 8009864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009868:	f383 8811 	msr	BASEPRI, r3
 800986c:	f3bf 8f6f 	isb	sy
 8009870:	f3bf 8f4f 	dsb	sy
 8009874:	613b      	str	r3, [r7, #16]
 8009876:	e7fe      	b.n	8009876 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d102      	bne.n	8009884 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800987e:	2300      	movs	r3, #0
 8009880:	61fb      	str	r3, [r7, #28]
 8009882:	e004      	b.n	800988e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	68ba      	ldr	r2, [r7, #8]
 8009888:	fb02 f303 	mul.w	r3, r2, r3
 800988c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800988e:	69fb      	ldr	r3, [r7, #28]
 8009890:	3350      	adds	r3, #80	; 0x50
 8009892:	4618      	mov	r0, r3
 8009894:	f002 fc3c 	bl	800c110 <pvPortMalloc>
 8009898:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800989a:	69bb      	ldr	r3, [r7, #24]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d00f      	beq.n	80098c0 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80098a0:	69bb      	ldr	r3, [r7, #24]
 80098a2:	3350      	adds	r3, #80	; 0x50
 80098a4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80098a6:	69bb      	ldr	r3, [r7, #24]
 80098a8:	2200      	movs	r2, #0
 80098aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80098ae:	79fa      	ldrb	r2, [r7, #7]
 80098b0:	69bb      	ldr	r3, [r7, #24]
 80098b2:	9300      	str	r3, [sp, #0]
 80098b4:	4613      	mov	r3, r2
 80098b6:	697a      	ldr	r2, [r7, #20]
 80098b8:	68b9      	ldr	r1, [r7, #8]
 80098ba:	68f8      	ldr	r0, [r7, #12]
 80098bc:	f000 f805 	bl	80098ca <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80098c0:	69bb      	ldr	r3, [r7, #24]
	}
 80098c2:	4618      	mov	r0, r3
 80098c4:	3720      	adds	r7, #32
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd80      	pop	{r7, pc}

080098ca <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80098ca:	b580      	push	{r7, lr}
 80098cc:	b084      	sub	sp, #16
 80098ce:	af00      	add	r7, sp, #0
 80098d0:	60f8      	str	r0, [r7, #12]
 80098d2:	60b9      	str	r1, [r7, #8]
 80098d4:	607a      	str	r2, [r7, #4]
 80098d6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d103      	bne.n	80098e6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80098de:	69bb      	ldr	r3, [r7, #24]
 80098e0:	69ba      	ldr	r2, [r7, #24]
 80098e2:	601a      	str	r2, [r3, #0]
 80098e4:	e002      	b.n	80098ec <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80098e6:	69bb      	ldr	r3, [r7, #24]
 80098e8:	687a      	ldr	r2, [r7, #4]
 80098ea:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80098ec:	69bb      	ldr	r3, [r7, #24]
 80098ee:	68fa      	ldr	r2, [r7, #12]
 80098f0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80098f2:	69bb      	ldr	r3, [r7, #24]
 80098f4:	68ba      	ldr	r2, [r7, #8]
 80098f6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80098f8:	2101      	movs	r1, #1
 80098fa:	69b8      	ldr	r0, [r7, #24]
 80098fc:	f7ff fece 	bl	800969c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009900:	69bb      	ldr	r3, [r7, #24]
 8009902:	78fa      	ldrb	r2, [r7, #3]
 8009904:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009908:	bf00      	nop
 800990a:	3710      	adds	r7, #16
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}

08009910 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009910:	b580      	push	{r7, lr}
 8009912:	b082      	sub	sp, #8
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d00e      	beq.n	800993c <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2200      	movs	r2, #0
 8009922:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2200      	movs	r2, #0
 8009928:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2200      	movs	r2, #0
 800992e:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009930:	2300      	movs	r3, #0
 8009932:	2200      	movs	r2, #0
 8009934:	2100      	movs	r1, #0
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f000 f8a0 	bl	8009a7c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800993c:	bf00      	nop
 800993e:	3708      	adds	r7, #8
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}

08009944 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8009944:	b580      	push	{r7, lr}
 8009946:	b086      	sub	sp, #24
 8009948:	af00      	add	r7, sp, #0
 800994a:	4603      	mov	r3, r0
 800994c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800994e:	2301      	movs	r3, #1
 8009950:	617b      	str	r3, [r7, #20]
 8009952:	2300      	movs	r3, #0
 8009954:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009956:	79fb      	ldrb	r3, [r7, #7]
 8009958:	461a      	mov	r2, r3
 800995a:	6939      	ldr	r1, [r7, #16]
 800995c:	6978      	ldr	r0, [r7, #20]
 800995e:	f7ff ff77 	bl	8009850 <xQueueGenericCreate>
 8009962:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8009964:	68f8      	ldr	r0, [r7, #12]
 8009966:	f7ff ffd3 	bl	8009910 <prvInitialiseMutex>

		return pxNewQueue;
 800996a:	68fb      	ldr	r3, [r7, #12]
	}
 800996c:	4618      	mov	r0, r3
 800996e:	3718      	adds	r7, #24
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}

08009974 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8009974:	b580      	push	{r7, lr}
 8009976:	b088      	sub	sp, #32
 8009978:	af02      	add	r7, sp, #8
 800997a:	4603      	mov	r3, r0
 800997c:	6039      	str	r1, [r7, #0]
 800997e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009980:	2301      	movs	r3, #1
 8009982:	617b      	str	r3, [r7, #20]
 8009984:	2300      	movs	r3, #0
 8009986:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009988:	79fb      	ldrb	r3, [r7, #7]
 800998a:	9300      	str	r3, [sp, #0]
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	2200      	movs	r2, #0
 8009990:	6939      	ldr	r1, [r7, #16]
 8009992:	6978      	ldr	r0, [r7, #20]
 8009994:	f7ff feea 	bl	800976c <xQueueGenericCreateStatic>
 8009998:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800999a:	68f8      	ldr	r0, [r7, #12]
 800999c:	f7ff ffb8 	bl	8009910 <prvInitialiseMutex>

		return pxNewQueue;
 80099a0:	68fb      	ldr	r3, [r7, #12]
	}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3718      	adds	r7, #24
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}

080099aa <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80099aa:	b590      	push	{r4, r7, lr}
 80099ac:	b087      	sub	sp, #28
 80099ae:	af00      	add	r7, sp, #0
 80099b0:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80099b6:	693b      	ldr	r3, [r7, #16]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d109      	bne.n	80099d0 <xQueueGiveMutexRecursive+0x26>
 80099bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099c0:	f383 8811 	msr	BASEPRI, r3
 80099c4:	f3bf 8f6f 	isb	sy
 80099c8:	f3bf 8f4f 	dsb	sy
 80099cc:	60fb      	str	r3, [r7, #12]
 80099ce:	e7fe      	b.n	80099ce <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 80099d0:	693b      	ldr	r3, [r7, #16]
 80099d2:	685c      	ldr	r4, [r3, #4]
 80099d4:	f001 fc5c 	bl	800b290 <xTaskGetCurrentTaskHandle>
 80099d8:	4603      	mov	r3, r0
 80099da:	429c      	cmp	r4, r3
 80099dc:	d111      	bne.n	8009a02 <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 80099de:	693b      	ldr	r3, [r7, #16]
 80099e0:	68db      	ldr	r3, [r3, #12]
 80099e2:	1e5a      	subs	r2, r3, #1
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80099e8:	693b      	ldr	r3, [r7, #16]
 80099ea:	68db      	ldr	r3, [r3, #12]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d105      	bne.n	80099fc <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80099f0:	2300      	movs	r3, #0
 80099f2:	2200      	movs	r2, #0
 80099f4:	2100      	movs	r1, #0
 80099f6:	6938      	ldr	r0, [r7, #16]
 80099f8:	f000 f840 	bl	8009a7c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80099fc:	2301      	movs	r3, #1
 80099fe:	617b      	str	r3, [r7, #20]
 8009a00:	e001      	b.n	8009a06 <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8009a02:	2300      	movs	r3, #0
 8009a04:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8009a06:	697b      	ldr	r3, [r7, #20]
	}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	371c      	adds	r7, #28
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd90      	pop	{r4, r7, pc}

08009a10 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8009a10:	b590      	push	{r4, r7, lr}
 8009a12:	b087      	sub	sp, #28
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
 8009a18:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009a1e:	693b      	ldr	r3, [r7, #16]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d109      	bne.n	8009a38 <xQueueTakeMutexRecursive+0x28>
 8009a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a28:	f383 8811 	msr	BASEPRI, r3
 8009a2c:	f3bf 8f6f 	isb	sy
 8009a30:	f3bf 8f4f 	dsb	sy
 8009a34:	60fb      	str	r3, [r7, #12]
 8009a36:	e7fe      	b.n	8009a36 <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8009a38:	693b      	ldr	r3, [r7, #16]
 8009a3a:	685c      	ldr	r4, [r3, #4]
 8009a3c:	f001 fc28 	bl	800b290 <xTaskGetCurrentTaskHandle>
 8009a40:	4603      	mov	r3, r0
 8009a42:	429c      	cmp	r4, r3
 8009a44:	d107      	bne.n	8009a56 <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	68db      	ldr	r3, [r3, #12]
 8009a4a:	1c5a      	adds	r2, r3, #1
 8009a4c:	693b      	ldr	r3, [r7, #16]
 8009a4e:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8009a50:	2301      	movs	r3, #1
 8009a52:	617b      	str	r3, [r7, #20]
 8009a54:	e00c      	b.n	8009a70 <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8009a56:	6839      	ldr	r1, [r7, #0]
 8009a58:	6938      	ldr	r0, [r7, #16]
 8009a5a:	f000 fa79 	bl	8009f50 <xQueueSemaphoreTake>
 8009a5e:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8009a60:	697b      	ldr	r3, [r7, #20]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d004      	beq.n	8009a70 <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	68db      	ldr	r3, [r3, #12]
 8009a6a:	1c5a      	adds	r2, r3, #1
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8009a70:	697b      	ldr	r3, [r7, #20]
	}
 8009a72:	4618      	mov	r0, r3
 8009a74:	371c      	adds	r7, #28
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd90      	pop	{r4, r7, pc}
	...

08009a7c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b08e      	sub	sp, #56	; 0x38
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	60f8      	str	r0, [r7, #12]
 8009a84:	60b9      	str	r1, [r7, #8]
 8009a86:	607a      	str	r2, [r7, #4]
 8009a88:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d109      	bne.n	8009aac <xQueueGenericSend+0x30>
 8009a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a9c:	f383 8811 	msr	BASEPRI, r3
 8009aa0:	f3bf 8f6f 	isb	sy
 8009aa4:	f3bf 8f4f 	dsb	sy
 8009aa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8009aaa:	e7fe      	b.n	8009aaa <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d103      	bne.n	8009aba <xQueueGenericSend+0x3e>
 8009ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d101      	bne.n	8009abe <xQueueGenericSend+0x42>
 8009aba:	2301      	movs	r3, #1
 8009abc:	e000      	b.n	8009ac0 <xQueueGenericSend+0x44>
 8009abe:	2300      	movs	r3, #0
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d109      	bne.n	8009ad8 <xQueueGenericSend+0x5c>
 8009ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ac8:	f383 8811 	msr	BASEPRI, r3
 8009acc:	f3bf 8f6f 	isb	sy
 8009ad0:	f3bf 8f4f 	dsb	sy
 8009ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8009ad6:	e7fe      	b.n	8009ad6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	2b02      	cmp	r3, #2
 8009adc:	d103      	bne.n	8009ae6 <xQueueGenericSend+0x6a>
 8009ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ae2:	2b01      	cmp	r3, #1
 8009ae4:	d101      	bne.n	8009aea <xQueueGenericSend+0x6e>
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	e000      	b.n	8009aec <xQueueGenericSend+0x70>
 8009aea:	2300      	movs	r3, #0
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d109      	bne.n	8009b04 <xQueueGenericSend+0x88>
 8009af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009af4:	f383 8811 	msr	BASEPRI, r3
 8009af8:	f3bf 8f6f 	isb	sy
 8009afc:	f3bf 8f4f 	dsb	sy
 8009b00:	623b      	str	r3, [r7, #32]
 8009b02:	e7fe      	b.n	8009b02 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009b04:	f001 fbd4 	bl	800b2b0 <xTaskGetSchedulerState>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d102      	bne.n	8009b14 <xQueueGenericSend+0x98>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d101      	bne.n	8009b18 <xQueueGenericSend+0x9c>
 8009b14:	2301      	movs	r3, #1
 8009b16:	e000      	b.n	8009b1a <xQueueGenericSend+0x9e>
 8009b18:	2300      	movs	r3, #0
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d109      	bne.n	8009b32 <xQueueGenericSend+0xb6>
 8009b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b22:	f383 8811 	msr	BASEPRI, r3
 8009b26:	f3bf 8f6f 	isb	sy
 8009b2a:	f3bf 8f4f 	dsb	sy
 8009b2e:	61fb      	str	r3, [r7, #28]
 8009b30:	e7fe      	b.n	8009b30 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009b32:	f002 f9d3 	bl	800bedc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b3e:	429a      	cmp	r2, r3
 8009b40:	d302      	bcc.n	8009b48 <xQueueGenericSend+0xcc>
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	2b02      	cmp	r3, #2
 8009b46:	d129      	bne.n	8009b9c <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009b48:	683a      	ldr	r2, [r7, #0]
 8009b4a:	68b9      	ldr	r1, [r7, #8]
 8009b4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009b4e:	f000 fb9c 	bl	800a28a <prvCopyDataToQueue>
 8009b52:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d010      	beq.n	8009b7e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b5e:	3324      	adds	r3, #36	; 0x24
 8009b60:	4618      	mov	r0, r3
 8009b62:	f001 f9d9 	bl	800af18 <xTaskRemoveFromEventList>
 8009b66:	4603      	mov	r3, r0
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d013      	beq.n	8009b94 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009b6c:	4b3f      	ldr	r3, [pc, #252]	; (8009c6c <xQueueGenericSend+0x1f0>)
 8009b6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b72:	601a      	str	r2, [r3, #0]
 8009b74:	f3bf 8f4f 	dsb	sy
 8009b78:	f3bf 8f6f 	isb	sy
 8009b7c:	e00a      	b.n	8009b94 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d007      	beq.n	8009b94 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009b84:	4b39      	ldr	r3, [pc, #228]	; (8009c6c <xQueueGenericSend+0x1f0>)
 8009b86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b8a:	601a      	str	r2, [r3, #0]
 8009b8c:	f3bf 8f4f 	dsb	sy
 8009b90:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009b94:	f002 f9d0 	bl	800bf38 <vPortExitCritical>
				return pdPASS;
 8009b98:	2301      	movs	r3, #1
 8009b9a:	e063      	b.n	8009c64 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d103      	bne.n	8009baa <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009ba2:	f002 f9c9 	bl	800bf38 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	e05c      	b.n	8009c64 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d106      	bne.n	8009bbe <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009bb0:	f107 0314 	add.w	r3, r7, #20
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	f001 fa11 	bl	800afdc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009bba:	2301      	movs	r3, #1
 8009bbc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009bbe:	f002 f9bb 	bl	800bf38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009bc2:	f000 ff75 	bl	800aab0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009bc6:	f002 f989 	bl	800bedc <vPortEnterCritical>
 8009bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bcc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009bd0:	b25b      	sxtb	r3, r3
 8009bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bd6:	d103      	bne.n	8009be0 <xQueueGenericSend+0x164>
 8009bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bda:	2200      	movs	r2, #0
 8009bdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009be2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009be6:	b25b      	sxtb	r3, r3
 8009be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bec:	d103      	bne.n	8009bf6 <xQueueGenericSend+0x17a>
 8009bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009bf6:	f002 f99f 	bl	800bf38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009bfa:	1d3a      	adds	r2, r7, #4
 8009bfc:	f107 0314 	add.w	r3, r7, #20
 8009c00:	4611      	mov	r1, r2
 8009c02:	4618      	mov	r0, r3
 8009c04:	f001 fa00 	bl	800b008 <xTaskCheckForTimeOut>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d124      	bne.n	8009c58 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009c0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c10:	f000 fc33 	bl	800a47a <prvIsQueueFull>
 8009c14:	4603      	mov	r3, r0
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d018      	beq.n	8009c4c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c1c:	3310      	adds	r3, #16
 8009c1e:	687a      	ldr	r2, [r7, #4]
 8009c20:	4611      	mov	r1, r2
 8009c22:	4618      	mov	r0, r3
 8009c24:	f001 f92a 	bl	800ae7c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009c28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c2a:	f000 fbbe 	bl	800a3aa <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009c2e:	f000 ff4d 	bl	800aacc <xTaskResumeAll>
 8009c32:	4603      	mov	r3, r0
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	f47f af7c 	bne.w	8009b32 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8009c3a:	4b0c      	ldr	r3, [pc, #48]	; (8009c6c <xQueueGenericSend+0x1f0>)
 8009c3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c40:	601a      	str	r2, [r3, #0]
 8009c42:	f3bf 8f4f 	dsb	sy
 8009c46:	f3bf 8f6f 	isb	sy
 8009c4a:	e772      	b.n	8009b32 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009c4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c4e:	f000 fbac 	bl	800a3aa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009c52:	f000 ff3b 	bl	800aacc <xTaskResumeAll>
 8009c56:	e76c      	b.n	8009b32 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009c58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c5a:	f000 fba6 	bl	800a3aa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009c5e:	f000 ff35 	bl	800aacc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009c62:	2300      	movs	r3, #0
		}
	}
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3738      	adds	r7, #56	; 0x38
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}
 8009c6c:	e000ed04 	.word	0xe000ed04

08009c70 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b08e      	sub	sp, #56	; 0x38
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	60f8      	str	r0, [r7, #12]
 8009c78:	60b9      	str	r1, [r7, #8]
 8009c7a:	607a      	str	r2, [r7, #4]
 8009c7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d109      	bne.n	8009c9c <xQueueGenericSendFromISR+0x2c>
 8009c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c8c:	f383 8811 	msr	BASEPRI, r3
 8009c90:	f3bf 8f6f 	isb	sy
 8009c94:	f3bf 8f4f 	dsb	sy
 8009c98:	627b      	str	r3, [r7, #36]	; 0x24
 8009c9a:	e7fe      	b.n	8009c9a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d103      	bne.n	8009caa <xQueueGenericSendFromISR+0x3a>
 8009ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d101      	bne.n	8009cae <xQueueGenericSendFromISR+0x3e>
 8009caa:	2301      	movs	r3, #1
 8009cac:	e000      	b.n	8009cb0 <xQueueGenericSendFromISR+0x40>
 8009cae:	2300      	movs	r3, #0
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d109      	bne.n	8009cc8 <xQueueGenericSendFromISR+0x58>
 8009cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cb8:	f383 8811 	msr	BASEPRI, r3
 8009cbc:	f3bf 8f6f 	isb	sy
 8009cc0:	f3bf 8f4f 	dsb	sy
 8009cc4:	623b      	str	r3, [r7, #32]
 8009cc6:	e7fe      	b.n	8009cc6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	2b02      	cmp	r3, #2
 8009ccc:	d103      	bne.n	8009cd6 <xQueueGenericSendFromISR+0x66>
 8009cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cd2:	2b01      	cmp	r3, #1
 8009cd4:	d101      	bne.n	8009cda <xQueueGenericSendFromISR+0x6a>
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	e000      	b.n	8009cdc <xQueueGenericSendFromISR+0x6c>
 8009cda:	2300      	movs	r3, #0
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d109      	bne.n	8009cf4 <xQueueGenericSendFromISR+0x84>
 8009ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce4:	f383 8811 	msr	BASEPRI, r3
 8009ce8:	f3bf 8f6f 	isb	sy
 8009cec:	f3bf 8f4f 	dsb	sy
 8009cf0:	61fb      	str	r3, [r7, #28]
 8009cf2:	e7fe      	b.n	8009cf2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009cf4:	f002 f9ce 	bl	800c094 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009cf8:	f3ef 8211 	mrs	r2, BASEPRI
 8009cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d00:	f383 8811 	msr	BASEPRI, r3
 8009d04:	f3bf 8f6f 	isb	sy
 8009d08:	f3bf 8f4f 	dsb	sy
 8009d0c:	61ba      	str	r2, [r7, #24]
 8009d0e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009d10:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009d12:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d1c:	429a      	cmp	r2, r3
 8009d1e:	d302      	bcc.n	8009d26 <xQueueGenericSendFromISR+0xb6>
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	2b02      	cmp	r3, #2
 8009d24:	d12c      	bne.n	8009d80 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009d30:	683a      	ldr	r2, [r7, #0]
 8009d32:	68b9      	ldr	r1, [r7, #8]
 8009d34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d36:	f000 faa8 	bl	800a28a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009d3a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d42:	d112      	bne.n	8009d6a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d016      	beq.n	8009d7a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d4e:	3324      	adds	r3, #36	; 0x24
 8009d50:	4618      	mov	r0, r3
 8009d52:	f001 f8e1 	bl	800af18 <xTaskRemoveFromEventList>
 8009d56:	4603      	mov	r3, r0
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d00e      	beq.n	8009d7a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d00b      	beq.n	8009d7a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2201      	movs	r2, #1
 8009d66:	601a      	str	r2, [r3, #0]
 8009d68:	e007      	b.n	8009d7a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009d6a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009d6e:	3301      	adds	r3, #1
 8009d70:	b2db      	uxtb	r3, r3
 8009d72:	b25a      	sxtb	r2, r3
 8009d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8009d7e:	e001      	b.n	8009d84 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009d80:	2300      	movs	r3, #0
 8009d82:	637b      	str	r3, [r7, #52]	; 0x34
 8009d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d86:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009d88:	693b      	ldr	r3, [r7, #16]
 8009d8a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009d90:	4618      	mov	r0, r3
 8009d92:	3738      	adds	r7, #56	; 0x38
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}

08009d98 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b08c      	sub	sp, #48	; 0x30
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	60f8      	str	r0, [r7, #12]
 8009da0:	60b9      	str	r1, [r7, #8]
 8009da2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009da4:	2300      	movs	r3, #0
 8009da6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d109      	bne.n	8009dc6 <xQueueReceive+0x2e>
	__asm volatile
 8009db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db6:	f383 8811 	msr	BASEPRI, r3
 8009dba:	f3bf 8f6f 	isb	sy
 8009dbe:	f3bf 8f4f 	dsb	sy
 8009dc2:	623b      	str	r3, [r7, #32]
 8009dc4:	e7fe      	b.n	8009dc4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d103      	bne.n	8009dd4 <xQueueReceive+0x3c>
 8009dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d101      	bne.n	8009dd8 <xQueueReceive+0x40>
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	e000      	b.n	8009dda <xQueueReceive+0x42>
 8009dd8:	2300      	movs	r3, #0
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d109      	bne.n	8009df2 <xQueueReceive+0x5a>
 8009dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de2:	f383 8811 	msr	BASEPRI, r3
 8009de6:	f3bf 8f6f 	isb	sy
 8009dea:	f3bf 8f4f 	dsb	sy
 8009dee:	61fb      	str	r3, [r7, #28]
 8009df0:	e7fe      	b.n	8009df0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009df2:	f001 fa5d 	bl	800b2b0 <xTaskGetSchedulerState>
 8009df6:	4603      	mov	r3, r0
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d102      	bne.n	8009e02 <xQueueReceive+0x6a>
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d101      	bne.n	8009e06 <xQueueReceive+0x6e>
 8009e02:	2301      	movs	r3, #1
 8009e04:	e000      	b.n	8009e08 <xQueueReceive+0x70>
 8009e06:	2300      	movs	r3, #0
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d109      	bne.n	8009e20 <xQueueReceive+0x88>
 8009e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e10:	f383 8811 	msr	BASEPRI, r3
 8009e14:	f3bf 8f6f 	isb	sy
 8009e18:	f3bf 8f4f 	dsb	sy
 8009e1c:	61bb      	str	r3, [r7, #24]
 8009e1e:	e7fe      	b.n	8009e1e <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8009e20:	f002 f85c 	bl	800bedc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e28:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d01f      	beq.n	8009e70 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009e30:	68b9      	ldr	r1, [r7, #8]
 8009e32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e34:	f000 fa93 	bl	800a35e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e3a:	1e5a      	subs	r2, r3, #1
 8009e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e3e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e42:	691b      	ldr	r3, [r3, #16]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d00f      	beq.n	8009e68 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e4a:	3310      	adds	r3, #16
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f001 f863 	bl	800af18 <xTaskRemoveFromEventList>
 8009e52:	4603      	mov	r3, r0
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d007      	beq.n	8009e68 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009e58:	4b3c      	ldr	r3, [pc, #240]	; (8009f4c <xQueueReceive+0x1b4>)
 8009e5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e5e:	601a      	str	r2, [r3, #0]
 8009e60:	f3bf 8f4f 	dsb	sy
 8009e64:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009e68:	f002 f866 	bl	800bf38 <vPortExitCritical>
				return pdPASS;
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	e069      	b.n	8009f44 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d103      	bne.n	8009e7e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009e76:	f002 f85f 	bl	800bf38 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	e062      	b.n	8009f44 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d106      	bne.n	8009e92 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009e84:	f107 0310 	add.w	r3, r7, #16
 8009e88:	4618      	mov	r0, r3
 8009e8a:	f001 f8a7 	bl	800afdc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009e8e:	2301      	movs	r3, #1
 8009e90:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009e92:	f002 f851 	bl	800bf38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009e96:	f000 fe0b 	bl	800aab0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009e9a:	f002 f81f 	bl	800bedc <vPortEnterCritical>
 8009e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ea0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009ea4:	b25b      	sxtb	r3, r3
 8009ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eaa:	d103      	bne.n	8009eb4 <xQueueReceive+0x11c>
 8009eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eae:	2200      	movs	r2, #0
 8009eb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009eba:	b25b      	sxtb	r3, r3
 8009ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ec0:	d103      	bne.n	8009eca <xQueueReceive+0x132>
 8009ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009eca:	f002 f835 	bl	800bf38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009ece:	1d3a      	adds	r2, r7, #4
 8009ed0:	f107 0310 	add.w	r3, r7, #16
 8009ed4:	4611      	mov	r1, r2
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f001 f896 	bl	800b008 <xTaskCheckForTimeOut>
 8009edc:	4603      	mov	r3, r0
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d123      	bne.n	8009f2a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009ee2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ee4:	f000 fab3 	bl	800a44e <prvIsQueueEmpty>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d017      	beq.n	8009f1e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ef0:	3324      	adds	r3, #36	; 0x24
 8009ef2:	687a      	ldr	r2, [r7, #4]
 8009ef4:	4611      	mov	r1, r2
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f000 ffc0 	bl	800ae7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009efc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009efe:	f000 fa54 	bl	800a3aa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009f02:	f000 fde3 	bl	800aacc <xTaskResumeAll>
 8009f06:	4603      	mov	r3, r0
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d189      	bne.n	8009e20 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8009f0c:	4b0f      	ldr	r3, [pc, #60]	; (8009f4c <xQueueReceive+0x1b4>)
 8009f0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f12:	601a      	str	r2, [r3, #0]
 8009f14:	f3bf 8f4f 	dsb	sy
 8009f18:	f3bf 8f6f 	isb	sy
 8009f1c:	e780      	b.n	8009e20 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009f1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f20:	f000 fa43 	bl	800a3aa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009f24:	f000 fdd2 	bl	800aacc <xTaskResumeAll>
 8009f28:	e77a      	b.n	8009e20 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009f2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f2c:	f000 fa3d 	bl	800a3aa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009f30:	f000 fdcc 	bl	800aacc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009f34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f36:	f000 fa8a 	bl	800a44e <prvIsQueueEmpty>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	f43f af6f 	beq.w	8009e20 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009f42:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8009f44:	4618      	mov	r0, r3
 8009f46:	3730      	adds	r7, #48	; 0x30
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	bd80      	pop	{r7, pc}
 8009f4c:	e000ed04 	.word	0xe000ed04

08009f50 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b08e      	sub	sp, #56	; 0x38
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
 8009f58:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009f62:	2300      	movs	r3, #0
 8009f64:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d109      	bne.n	8009f80 <xQueueSemaphoreTake+0x30>
 8009f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f70:	f383 8811 	msr	BASEPRI, r3
 8009f74:	f3bf 8f6f 	isb	sy
 8009f78:	f3bf 8f4f 	dsb	sy
 8009f7c:	623b      	str	r3, [r7, #32]
 8009f7e:	e7fe      	b.n	8009f7e <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d009      	beq.n	8009f9c <xQueueSemaphoreTake+0x4c>
 8009f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f8c:	f383 8811 	msr	BASEPRI, r3
 8009f90:	f3bf 8f6f 	isb	sy
 8009f94:	f3bf 8f4f 	dsb	sy
 8009f98:	61fb      	str	r3, [r7, #28]
 8009f9a:	e7fe      	b.n	8009f9a <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009f9c:	f001 f988 	bl	800b2b0 <xTaskGetSchedulerState>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d102      	bne.n	8009fac <xQueueSemaphoreTake+0x5c>
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d101      	bne.n	8009fb0 <xQueueSemaphoreTake+0x60>
 8009fac:	2301      	movs	r3, #1
 8009fae:	e000      	b.n	8009fb2 <xQueueSemaphoreTake+0x62>
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d109      	bne.n	8009fca <xQueueSemaphoreTake+0x7a>
 8009fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fba:	f383 8811 	msr	BASEPRI, r3
 8009fbe:	f3bf 8f6f 	isb	sy
 8009fc2:	f3bf 8f4f 	dsb	sy
 8009fc6:	61bb      	str	r3, [r7, #24]
 8009fc8:	e7fe      	b.n	8009fc8 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8009fca:	f001 ff87 	bl	800bedc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fd2:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d024      	beq.n	800a024 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fdc:	1e5a      	subs	r2, r3, #1
 8009fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fe0:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d104      	bne.n	8009ff4 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8009fea:	f001 fadd 	bl	800b5a8 <pvTaskIncrementMutexHeldCount>
 8009fee:	4602      	mov	r2, r0
 8009ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ff2:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ff6:	691b      	ldr	r3, [r3, #16]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d00f      	beq.n	800a01c <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ffe:	3310      	adds	r3, #16
 800a000:	4618      	mov	r0, r3
 800a002:	f000 ff89 	bl	800af18 <xTaskRemoveFromEventList>
 800a006:	4603      	mov	r3, r0
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d007      	beq.n	800a01c <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a00c:	4b53      	ldr	r3, [pc, #332]	; (800a15c <xQueueSemaphoreTake+0x20c>)
 800a00e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a012:	601a      	str	r2, [r3, #0]
 800a014:	f3bf 8f4f 	dsb	sy
 800a018:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a01c:	f001 ff8c 	bl	800bf38 <vPortExitCritical>
				return pdPASS;
 800a020:	2301      	movs	r3, #1
 800a022:	e096      	b.n	800a152 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d110      	bne.n	800a04c <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a02a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d009      	beq.n	800a044 <xQueueSemaphoreTake+0xf4>
 800a030:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a034:	f383 8811 	msr	BASEPRI, r3
 800a038:	f3bf 8f6f 	isb	sy
 800a03c:	f3bf 8f4f 	dsb	sy
 800a040:	617b      	str	r3, [r7, #20]
 800a042:	e7fe      	b.n	800a042 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a044:	f001 ff78 	bl	800bf38 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a048:	2300      	movs	r3, #0
 800a04a:	e082      	b.n	800a152 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a04c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d106      	bne.n	800a060 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a052:	f107 030c 	add.w	r3, r7, #12
 800a056:	4618      	mov	r0, r3
 800a058:	f000 ffc0 	bl	800afdc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a05c:	2301      	movs	r3, #1
 800a05e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a060:	f001 ff6a 	bl	800bf38 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a064:	f000 fd24 	bl	800aab0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a068:	f001 ff38 	bl	800bedc <vPortEnterCritical>
 800a06c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a06e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a072:	b25b      	sxtb	r3, r3
 800a074:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a078:	d103      	bne.n	800a082 <xQueueSemaphoreTake+0x132>
 800a07a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a07c:	2200      	movs	r2, #0
 800a07e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a084:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a088:	b25b      	sxtb	r3, r3
 800a08a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a08e:	d103      	bne.n	800a098 <xQueueSemaphoreTake+0x148>
 800a090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a092:	2200      	movs	r2, #0
 800a094:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a098:	f001 ff4e 	bl	800bf38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a09c:	463a      	mov	r2, r7
 800a09e:	f107 030c 	add.w	r3, r7, #12
 800a0a2:	4611      	mov	r1, r2
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f000 ffaf 	bl	800b008 <xTaskCheckForTimeOut>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d132      	bne.n	800a116 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a0b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a0b2:	f000 f9cc 	bl	800a44e <prvIsQueueEmpty>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d026      	beq.n	800a10a <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a0bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d109      	bne.n	800a0d8 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800a0c4:	f001 ff0a 	bl	800bedc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800a0c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ca:	685b      	ldr	r3, [r3, #4]
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f001 f90d 	bl	800b2ec <xTaskPriorityInherit>
 800a0d2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a0d4:	f001 ff30 	bl	800bf38 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a0d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0da:	3324      	adds	r3, #36	; 0x24
 800a0dc:	683a      	ldr	r2, [r7, #0]
 800a0de:	4611      	mov	r1, r2
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	f000 fecb 	bl	800ae7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a0e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a0e8:	f000 f95f 	bl	800a3aa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a0ec:	f000 fcee 	bl	800aacc <xTaskResumeAll>
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	f47f af69 	bne.w	8009fca <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800a0f8:	4b18      	ldr	r3, [pc, #96]	; (800a15c <xQueueSemaphoreTake+0x20c>)
 800a0fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0fe:	601a      	str	r2, [r3, #0]
 800a100:	f3bf 8f4f 	dsb	sy
 800a104:	f3bf 8f6f 	isb	sy
 800a108:	e75f      	b.n	8009fca <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a10a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a10c:	f000 f94d 	bl	800a3aa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a110:	f000 fcdc 	bl	800aacc <xTaskResumeAll>
 800a114:	e759      	b.n	8009fca <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a116:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a118:	f000 f947 	bl	800a3aa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a11c:	f000 fcd6 	bl	800aacc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a120:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a122:	f000 f994 	bl	800a44e <prvIsQueueEmpty>
 800a126:	4603      	mov	r3, r0
 800a128:	2b00      	cmp	r3, #0
 800a12a:	f43f af4e 	beq.w	8009fca <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a12e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a130:	2b00      	cmp	r3, #0
 800a132:	d00d      	beq.n	800a150 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800a134:	f001 fed2 	bl	800bedc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a138:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a13a:	f000 f88e 	bl	800a25a <prvGetDisinheritPriorityAfterTimeout>
 800a13e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800a140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a142:	685b      	ldr	r3, [r3, #4]
 800a144:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a146:	4618      	mov	r0, r3
 800a148:	f001 f9aa 	bl	800b4a0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a14c:	f001 fef4 	bl	800bf38 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a150:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800a152:	4618      	mov	r0, r3
 800a154:	3738      	adds	r7, #56	; 0x38
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}
 800a15a:	bf00      	nop
 800a15c:	e000ed04 	.word	0xe000ed04

0800a160 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b08e      	sub	sp, #56	; 0x38
 800a164:	af00      	add	r7, sp, #0
 800a166:	60f8      	str	r0, [r7, #12]
 800a168:	60b9      	str	r1, [r7, #8]
 800a16a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a172:	2b00      	cmp	r3, #0
 800a174:	d109      	bne.n	800a18a <xQueueReceiveFromISR+0x2a>
 800a176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a17a:	f383 8811 	msr	BASEPRI, r3
 800a17e:	f3bf 8f6f 	isb	sy
 800a182:	f3bf 8f4f 	dsb	sy
 800a186:	623b      	str	r3, [r7, #32]
 800a188:	e7fe      	b.n	800a188 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a18a:	68bb      	ldr	r3, [r7, #8]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d103      	bne.n	800a198 <xQueueReceiveFromISR+0x38>
 800a190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a194:	2b00      	cmp	r3, #0
 800a196:	d101      	bne.n	800a19c <xQueueReceiveFromISR+0x3c>
 800a198:	2301      	movs	r3, #1
 800a19a:	e000      	b.n	800a19e <xQueueReceiveFromISR+0x3e>
 800a19c:	2300      	movs	r3, #0
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d109      	bne.n	800a1b6 <xQueueReceiveFromISR+0x56>
 800a1a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1a6:	f383 8811 	msr	BASEPRI, r3
 800a1aa:	f3bf 8f6f 	isb	sy
 800a1ae:	f3bf 8f4f 	dsb	sy
 800a1b2:	61fb      	str	r3, [r7, #28]
 800a1b4:	e7fe      	b.n	800a1b4 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a1b6:	f001 ff6d 	bl	800c094 <vPortValidateInterruptPriority>
	__asm volatile
 800a1ba:	f3ef 8211 	mrs	r2, BASEPRI
 800a1be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c2:	f383 8811 	msr	BASEPRI, r3
 800a1c6:	f3bf 8f6f 	isb	sy
 800a1ca:	f3bf 8f4f 	dsb	sy
 800a1ce:	61ba      	str	r2, [r7, #24]
 800a1d0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a1d2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a1d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a1d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1da:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a1dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d02f      	beq.n	800a242 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a1e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a1e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a1ec:	68b9      	ldr	r1, [r7, #8]
 800a1ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a1f0:	f000 f8b5 	bl	800a35e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1f6:	1e5a      	subs	r2, r3, #1
 800a1f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1fa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a1fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a200:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a204:	d112      	bne.n	800a22c <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a208:	691b      	ldr	r3, [r3, #16]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d016      	beq.n	800a23c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a20e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a210:	3310      	adds	r3, #16
 800a212:	4618      	mov	r0, r3
 800a214:	f000 fe80 	bl	800af18 <xTaskRemoveFromEventList>
 800a218:	4603      	mov	r3, r0
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d00e      	beq.n	800a23c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d00b      	beq.n	800a23c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2201      	movs	r2, #1
 800a228:	601a      	str	r2, [r3, #0]
 800a22a:	e007      	b.n	800a23c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a22c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a230:	3301      	adds	r3, #1
 800a232:	b2db      	uxtb	r3, r3
 800a234:	b25a      	sxtb	r2, r3
 800a236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a238:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a23c:	2301      	movs	r3, #1
 800a23e:	637b      	str	r3, [r7, #52]	; 0x34
 800a240:	e001      	b.n	800a246 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800a242:	2300      	movs	r3, #0
 800a244:	637b      	str	r3, [r7, #52]	; 0x34
 800a246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a248:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a24a:	693b      	ldr	r3, [r7, #16]
 800a24c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a252:	4618      	mov	r0, r3
 800a254:	3738      	adds	r7, #56	; 0x38
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}

0800a25a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a25a:	b480      	push	{r7}
 800a25c:	b085      	sub	sp, #20
 800a25e:	af00      	add	r7, sp, #0
 800a260:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a266:	2b00      	cmp	r3, #0
 800a268:	d006      	beq.n	800a278 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800a274:	60fb      	str	r3, [r7, #12]
 800a276:	e001      	b.n	800a27c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a278:	2300      	movs	r3, #0
 800a27a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a27c:	68fb      	ldr	r3, [r7, #12]
	}
 800a27e:	4618      	mov	r0, r3
 800a280:	3714      	adds	r7, #20
 800a282:	46bd      	mov	sp, r7
 800a284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a288:	4770      	bx	lr

0800a28a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a28a:	b580      	push	{r7, lr}
 800a28c:	b086      	sub	sp, #24
 800a28e:	af00      	add	r7, sp, #0
 800a290:	60f8      	str	r0, [r7, #12]
 800a292:	60b9      	str	r1, [r7, #8]
 800a294:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a296:	2300      	movs	r3, #0
 800a298:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a29e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d10d      	bne.n	800a2c4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d14d      	bne.n	800a34c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	685b      	ldr	r3, [r3, #4]
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	f001 f887 	bl	800b3c8 <xTaskPriorityDisinherit>
 800a2ba:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	605a      	str	r2, [r3, #4]
 800a2c2:	e043      	b.n	800a34c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d119      	bne.n	800a2fe <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	6898      	ldr	r0, [r3, #8]
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2d2:	461a      	mov	r2, r3
 800a2d4:	68b9      	ldr	r1, [r7, #8]
 800a2d6:	f002 fe8f 	bl	800cff8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	689a      	ldr	r2, [r3, #8]
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2e2:	441a      	add	r2, r3
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	689a      	ldr	r2, [r3, #8]
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	685b      	ldr	r3, [r3, #4]
 800a2f0:	429a      	cmp	r2, r3
 800a2f2:	d32b      	bcc.n	800a34c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	681a      	ldr	r2, [r3, #0]
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	609a      	str	r2, [r3, #8]
 800a2fc:	e026      	b.n	800a34c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	68d8      	ldr	r0, [r3, #12]
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a306:	461a      	mov	r2, r3
 800a308:	68b9      	ldr	r1, [r7, #8]
 800a30a:	f002 fe75 	bl	800cff8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	68da      	ldr	r2, [r3, #12]
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a316:	425b      	negs	r3, r3
 800a318:	441a      	add	r2, r3
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	68da      	ldr	r2, [r3, #12]
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	429a      	cmp	r2, r3
 800a328:	d207      	bcs.n	800a33a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	685a      	ldr	r2, [r3, #4]
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a332:	425b      	negs	r3, r3
 800a334:	441a      	add	r2, r3
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2b02      	cmp	r3, #2
 800a33e:	d105      	bne.n	800a34c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a340:	693b      	ldr	r3, [r7, #16]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d002      	beq.n	800a34c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a346:	693b      	ldr	r3, [r7, #16]
 800a348:	3b01      	subs	r3, #1
 800a34a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	1c5a      	adds	r2, r3, #1
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a354:	697b      	ldr	r3, [r7, #20]
}
 800a356:	4618      	mov	r0, r3
 800a358:	3718      	adds	r7, #24
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}

0800a35e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a35e:	b580      	push	{r7, lr}
 800a360:	b082      	sub	sp, #8
 800a362:	af00      	add	r7, sp, #0
 800a364:	6078      	str	r0, [r7, #4]
 800a366:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d018      	beq.n	800a3a2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	68da      	ldr	r2, [r3, #12]
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a378:	441a      	add	r2, r3
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	68da      	ldr	r2, [r3, #12]
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	685b      	ldr	r3, [r3, #4]
 800a386:	429a      	cmp	r2, r3
 800a388:	d303      	bcc.n	800a392 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681a      	ldr	r2, [r3, #0]
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	68d9      	ldr	r1, [r3, #12]
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a39a:	461a      	mov	r2, r3
 800a39c:	6838      	ldr	r0, [r7, #0]
 800a39e:	f002 fe2b 	bl	800cff8 <memcpy>
	}
}
 800a3a2:	bf00      	nop
 800a3a4:	3708      	adds	r7, #8
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}

0800a3aa <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a3aa:	b580      	push	{r7, lr}
 800a3ac:	b084      	sub	sp, #16
 800a3ae:	af00      	add	r7, sp, #0
 800a3b0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a3b2:	f001 fd93 	bl	800bedc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a3bc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a3be:	e011      	b.n	800a3e4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d012      	beq.n	800a3ee <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	3324      	adds	r3, #36	; 0x24
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f000 fda3 	bl	800af18 <xTaskRemoveFromEventList>
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d001      	beq.n	800a3dc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a3d8:	f000 fe76 	bl	800b0c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a3dc:	7bfb      	ldrb	r3, [r7, #15]
 800a3de:	3b01      	subs	r3, #1
 800a3e0:	b2db      	uxtb	r3, r3
 800a3e2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a3e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	dce9      	bgt.n	800a3c0 <prvUnlockQueue+0x16>
 800a3ec:	e000      	b.n	800a3f0 <prvUnlockQueue+0x46>
					break;
 800a3ee:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	22ff      	movs	r2, #255	; 0xff
 800a3f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a3f8:	f001 fd9e 	bl	800bf38 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a3fc:	f001 fd6e 	bl	800bedc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a406:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a408:	e011      	b.n	800a42e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	691b      	ldr	r3, [r3, #16]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d012      	beq.n	800a438 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	3310      	adds	r3, #16
 800a416:	4618      	mov	r0, r3
 800a418:	f000 fd7e 	bl	800af18 <xTaskRemoveFromEventList>
 800a41c:	4603      	mov	r3, r0
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d001      	beq.n	800a426 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a422:	f000 fe51 	bl	800b0c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a426:	7bbb      	ldrb	r3, [r7, #14]
 800a428:	3b01      	subs	r3, #1
 800a42a:	b2db      	uxtb	r3, r3
 800a42c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a42e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a432:	2b00      	cmp	r3, #0
 800a434:	dce9      	bgt.n	800a40a <prvUnlockQueue+0x60>
 800a436:	e000      	b.n	800a43a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a438:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	22ff      	movs	r2, #255	; 0xff
 800a43e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a442:	f001 fd79 	bl	800bf38 <vPortExitCritical>
}
 800a446:	bf00      	nop
 800a448:	3710      	adds	r7, #16
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd80      	pop	{r7, pc}

0800a44e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a44e:	b580      	push	{r7, lr}
 800a450:	b084      	sub	sp, #16
 800a452:	af00      	add	r7, sp, #0
 800a454:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a456:	f001 fd41 	bl	800bedc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d102      	bne.n	800a468 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a462:	2301      	movs	r3, #1
 800a464:	60fb      	str	r3, [r7, #12]
 800a466:	e001      	b.n	800a46c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a468:	2300      	movs	r3, #0
 800a46a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a46c:	f001 fd64 	bl	800bf38 <vPortExitCritical>

	return xReturn;
 800a470:	68fb      	ldr	r3, [r7, #12]
}
 800a472:	4618      	mov	r0, r3
 800a474:	3710      	adds	r7, #16
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}

0800a47a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a47a:	b580      	push	{r7, lr}
 800a47c:	b084      	sub	sp, #16
 800a47e:	af00      	add	r7, sp, #0
 800a480:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a482:	f001 fd2b 	bl	800bedc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a48e:	429a      	cmp	r2, r3
 800a490:	d102      	bne.n	800a498 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a492:	2301      	movs	r3, #1
 800a494:	60fb      	str	r3, [r7, #12]
 800a496:	e001      	b.n	800a49c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a498:	2300      	movs	r3, #0
 800a49a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a49c:	f001 fd4c 	bl	800bf38 <vPortExitCritical>

	return xReturn;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	3710      	adds	r7, #16
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}
	...

0800a4ac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a4ac:	b480      	push	{r7}
 800a4ae:	b085      	sub	sp, #20
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
 800a4b4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	60fb      	str	r3, [r7, #12]
 800a4ba:	e014      	b.n	800a4e6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a4bc:	4a0e      	ldr	r2, [pc, #56]	; (800a4f8 <vQueueAddToRegistry+0x4c>)
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d10b      	bne.n	800a4e0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a4c8:	490b      	ldr	r1, [pc, #44]	; (800a4f8 <vQueueAddToRegistry+0x4c>)
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	683a      	ldr	r2, [r7, #0]
 800a4ce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a4d2:	4a09      	ldr	r2, [pc, #36]	; (800a4f8 <vQueueAddToRegistry+0x4c>)
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	00db      	lsls	r3, r3, #3
 800a4d8:	4413      	add	r3, r2
 800a4da:	687a      	ldr	r2, [r7, #4]
 800a4dc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a4de:	e005      	b.n	800a4ec <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	3301      	adds	r3, #1
 800a4e4:	60fb      	str	r3, [r7, #12]
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	2b07      	cmp	r3, #7
 800a4ea:	d9e7      	bls.n	800a4bc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a4ec:	bf00      	nop
 800a4ee:	3714      	adds	r7, #20
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f6:	4770      	bx	lr
 800a4f8:	200027a0 	.word	0x200027a0

0800a4fc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b086      	sub	sp, #24
 800a500:	af00      	add	r7, sp, #0
 800a502:	60f8      	str	r0, [r7, #12]
 800a504:	60b9      	str	r1, [r7, #8]
 800a506:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a50c:	f001 fce6 	bl	800bedc <vPortEnterCritical>
 800a510:	697b      	ldr	r3, [r7, #20]
 800a512:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a516:	b25b      	sxtb	r3, r3
 800a518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a51c:	d103      	bne.n	800a526 <vQueueWaitForMessageRestricted+0x2a>
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	2200      	movs	r2, #0
 800a522:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a526:	697b      	ldr	r3, [r7, #20]
 800a528:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a52c:	b25b      	sxtb	r3, r3
 800a52e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a532:	d103      	bne.n	800a53c <vQueueWaitForMessageRestricted+0x40>
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	2200      	movs	r2, #0
 800a538:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a53c:	f001 fcfc 	bl	800bf38 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a540:	697b      	ldr	r3, [r7, #20]
 800a542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a544:	2b00      	cmp	r3, #0
 800a546:	d106      	bne.n	800a556 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a548:	697b      	ldr	r3, [r7, #20]
 800a54a:	3324      	adds	r3, #36	; 0x24
 800a54c:	687a      	ldr	r2, [r7, #4]
 800a54e:	68b9      	ldr	r1, [r7, #8]
 800a550:	4618      	mov	r0, r3
 800a552:	f000 fcb7 	bl	800aec4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a556:	6978      	ldr	r0, [r7, #20]
 800a558:	f7ff ff27 	bl	800a3aa <prvUnlockQueue>
	}
 800a55c:	bf00      	nop
 800a55e:	3718      	adds	r7, #24
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}

0800a564 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a564:	b580      	push	{r7, lr}
 800a566:	b08e      	sub	sp, #56	; 0x38
 800a568:	af04      	add	r7, sp, #16
 800a56a:	60f8      	str	r0, [r7, #12]
 800a56c:	60b9      	str	r1, [r7, #8]
 800a56e:	607a      	str	r2, [r7, #4]
 800a570:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a574:	2b00      	cmp	r3, #0
 800a576:	d109      	bne.n	800a58c <xTaskCreateStatic+0x28>
	__asm volatile
 800a578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a57c:	f383 8811 	msr	BASEPRI, r3
 800a580:	f3bf 8f6f 	isb	sy
 800a584:	f3bf 8f4f 	dsb	sy
 800a588:	623b      	str	r3, [r7, #32]
 800a58a:	e7fe      	b.n	800a58a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800a58c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d109      	bne.n	800a5a6 <xTaskCreateStatic+0x42>
 800a592:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a596:	f383 8811 	msr	BASEPRI, r3
 800a59a:	f3bf 8f6f 	isb	sy
 800a59e:	f3bf 8f4f 	dsb	sy
 800a5a2:	61fb      	str	r3, [r7, #28]
 800a5a4:	e7fe      	b.n	800a5a4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a5a6:	235c      	movs	r3, #92	; 0x5c
 800a5a8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a5aa:	693b      	ldr	r3, [r7, #16]
 800a5ac:	2b5c      	cmp	r3, #92	; 0x5c
 800a5ae:	d009      	beq.n	800a5c4 <xTaskCreateStatic+0x60>
 800a5b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5b4:	f383 8811 	msr	BASEPRI, r3
 800a5b8:	f3bf 8f6f 	isb	sy
 800a5bc:	f3bf 8f4f 	dsb	sy
 800a5c0:	61bb      	str	r3, [r7, #24]
 800a5c2:	e7fe      	b.n	800a5c2 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a5c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d01e      	beq.n	800a608 <xTaskCreateStatic+0xa4>
 800a5ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d01b      	beq.n	800a608 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5d2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a5d8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5dc:	2202      	movs	r2, #2
 800a5de:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	9303      	str	r3, [sp, #12]
 800a5e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5e8:	9302      	str	r3, [sp, #8]
 800a5ea:	f107 0314 	add.w	r3, r7, #20
 800a5ee:	9301      	str	r3, [sp, #4]
 800a5f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5f2:	9300      	str	r3, [sp, #0]
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	687a      	ldr	r2, [r7, #4]
 800a5f8:	68b9      	ldr	r1, [r7, #8]
 800a5fa:	68f8      	ldr	r0, [r7, #12]
 800a5fc:	f000 f850 	bl	800a6a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a600:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a602:	f000 f8d3 	bl	800a7ac <prvAddNewTaskToReadyList>
 800a606:	e001      	b.n	800a60c <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800a608:	2300      	movs	r3, #0
 800a60a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a60c:	697b      	ldr	r3, [r7, #20]
	}
 800a60e:	4618      	mov	r0, r3
 800a610:	3728      	adds	r7, #40	; 0x28
 800a612:	46bd      	mov	sp, r7
 800a614:	bd80      	pop	{r7, pc}

0800a616 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a616:	b580      	push	{r7, lr}
 800a618:	b08c      	sub	sp, #48	; 0x30
 800a61a:	af04      	add	r7, sp, #16
 800a61c:	60f8      	str	r0, [r7, #12]
 800a61e:	60b9      	str	r1, [r7, #8]
 800a620:	603b      	str	r3, [r7, #0]
 800a622:	4613      	mov	r3, r2
 800a624:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a626:	88fb      	ldrh	r3, [r7, #6]
 800a628:	009b      	lsls	r3, r3, #2
 800a62a:	4618      	mov	r0, r3
 800a62c:	f001 fd70 	bl	800c110 <pvPortMalloc>
 800a630:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a632:	697b      	ldr	r3, [r7, #20]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d00e      	beq.n	800a656 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800a638:	205c      	movs	r0, #92	; 0x5c
 800a63a:	f001 fd69 	bl	800c110 <pvPortMalloc>
 800a63e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a640:	69fb      	ldr	r3, [r7, #28]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d003      	beq.n	800a64e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a646:	69fb      	ldr	r3, [r7, #28]
 800a648:	697a      	ldr	r2, [r7, #20]
 800a64a:	631a      	str	r2, [r3, #48]	; 0x30
 800a64c:	e005      	b.n	800a65a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a64e:	6978      	ldr	r0, [r7, #20]
 800a650:	f001 fe20 	bl	800c294 <vPortFree>
 800a654:	e001      	b.n	800a65a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a656:	2300      	movs	r3, #0
 800a658:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a65a:	69fb      	ldr	r3, [r7, #28]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d017      	beq.n	800a690 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a660:	69fb      	ldr	r3, [r7, #28]
 800a662:	2200      	movs	r2, #0
 800a664:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a668:	88fa      	ldrh	r2, [r7, #6]
 800a66a:	2300      	movs	r3, #0
 800a66c:	9303      	str	r3, [sp, #12]
 800a66e:	69fb      	ldr	r3, [r7, #28]
 800a670:	9302      	str	r3, [sp, #8]
 800a672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a674:	9301      	str	r3, [sp, #4]
 800a676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a678:	9300      	str	r3, [sp, #0]
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	68b9      	ldr	r1, [r7, #8]
 800a67e:	68f8      	ldr	r0, [r7, #12]
 800a680:	f000 f80e 	bl	800a6a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a684:	69f8      	ldr	r0, [r7, #28]
 800a686:	f000 f891 	bl	800a7ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a68a:	2301      	movs	r3, #1
 800a68c:	61bb      	str	r3, [r7, #24]
 800a68e:	e002      	b.n	800a696 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a690:	f04f 33ff 	mov.w	r3, #4294967295
 800a694:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a696:	69bb      	ldr	r3, [r7, #24]
	}
 800a698:	4618      	mov	r0, r3
 800a69a:	3720      	adds	r7, #32
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}

0800a6a0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b088      	sub	sp, #32
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	60f8      	str	r0, [r7, #12]
 800a6a8:	60b9      	str	r1, [r7, #8]
 800a6aa:	607a      	str	r2, [r7, #4]
 800a6ac:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a6ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	009b      	lsls	r3, r3, #2
 800a6b6:	461a      	mov	r2, r3
 800a6b8:	21a5      	movs	r1, #165	; 0xa5
 800a6ba:	f002 fca8 	bl	800d00e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800a6be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a6c8:	3b01      	subs	r3, #1
 800a6ca:	009b      	lsls	r3, r3, #2
 800a6cc:	4413      	add	r3, r2
 800a6ce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800a6d0:	69bb      	ldr	r3, [r7, #24]
 800a6d2:	f023 0307 	bic.w	r3, r3, #7
 800a6d6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a6d8:	69bb      	ldr	r3, [r7, #24]
 800a6da:	f003 0307 	and.w	r3, r3, #7
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d009      	beq.n	800a6f6 <prvInitialiseNewTask+0x56>
 800a6e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6e6:	f383 8811 	msr	BASEPRI, r3
 800a6ea:	f3bf 8f6f 	isb	sy
 800a6ee:	f3bf 8f4f 	dsb	sy
 800a6f2:	617b      	str	r3, [r7, #20]
 800a6f4:	e7fe      	b.n	800a6f4 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	61fb      	str	r3, [r7, #28]
 800a6fa:	e012      	b.n	800a722 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a6fc:	68ba      	ldr	r2, [r7, #8]
 800a6fe:	69fb      	ldr	r3, [r7, #28]
 800a700:	4413      	add	r3, r2
 800a702:	7819      	ldrb	r1, [r3, #0]
 800a704:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a706:	69fb      	ldr	r3, [r7, #28]
 800a708:	4413      	add	r3, r2
 800a70a:	3334      	adds	r3, #52	; 0x34
 800a70c:	460a      	mov	r2, r1
 800a70e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800a710:	68ba      	ldr	r2, [r7, #8]
 800a712:	69fb      	ldr	r3, [r7, #28]
 800a714:	4413      	add	r3, r2
 800a716:	781b      	ldrb	r3, [r3, #0]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d006      	beq.n	800a72a <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a71c:	69fb      	ldr	r3, [r7, #28]
 800a71e:	3301      	adds	r3, #1
 800a720:	61fb      	str	r3, [r7, #28]
 800a722:	69fb      	ldr	r3, [r7, #28]
 800a724:	2b0f      	cmp	r3, #15
 800a726:	d9e9      	bls.n	800a6fc <prvInitialiseNewTask+0x5c>
 800a728:	e000      	b.n	800a72c <prvInitialiseNewTask+0x8c>
		{
			break;
 800a72a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a72c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a72e:	2200      	movs	r2, #0
 800a730:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a736:	2b37      	cmp	r3, #55	; 0x37
 800a738:	d901      	bls.n	800a73e <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a73a:	2337      	movs	r3, #55	; 0x37
 800a73c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a73e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a740:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a742:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a746:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a748:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a74a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a74c:	2200      	movs	r2, #0
 800a74e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a752:	3304      	adds	r3, #4
 800a754:	4618      	mov	r0, r3
 800a756:	f7fe ff0d 	bl	8009574 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a75c:	3318      	adds	r3, #24
 800a75e:	4618      	mov	r0, r3
 800a760:	f7fe ff08 	bl	8009574 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a766:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a768:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a76a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a76c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a772:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a776:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a778:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a77a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a77c:	2200      	movs	r2, #0
 800a77e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a782:	2200      	movs	r2, #0
 800a784:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a788:	683a      	ldr	r2, [r7, #0]
 800a78a:	68f9      	ldr	r1, [r7, #12]
 800a78c:	69b8      	ldr	r0, [r7, #24]
 800a78e:	f001 fa7d 	bl	800bc8c <pxPortInitialiseStack>
 800a792:	4602      	mov	r2, r0
 800a794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a796:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800a798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d002      	beq.n	800a7a4 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a79e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7a2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a7a4:	bf00      	nop
 800a7a6:	3720      	adds	r7, #32
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}

0800a7ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b082      	sub	sp, #8
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a7b4:	f001 fb92 	bl	800bedc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a7b8:	4b2d      	ldr	r3, [pc, #180]	; (800a870 <prvAddNewTaskToReadyList+0xc4>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	3301      	adds	r3, #1
 800a7be:	4a2c      	ldr	r2, [pc, #176]	; (800a870 <prvAddNewTaskToReadyList+0xc4>)
 800a7c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a7c2:	4b2c      	ldr	r3, [pc, #176]	; (800a874 <prvAddNewTaskToReadyList+0xc8>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d109      	bne.n	800a7de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a7ca:	4a2a      	ldr	r2, [pc, #168]	; (800a874 <prvAddNewTaskToReadyList+0xc8>)
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a7d0:	4b27      	ldr	r3, [pc, #156]	; (800a870 <prvAddNewTaskToReadyList+0xc4>)
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	2b01      	cmp	r3, #1
 800a7d6:	d110      	bne.n	800a7fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a7d8:	f000 fc9a 	bl	800b110 <prvInitialiseTaskLists>
 800a7dc:	e00d      	b.n	800a7fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a7de:	4b26      	ldr	r3, [pc, #152]	; (800a878 <prvAddNewTaskToReadyList+0xcc>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d109      	bne.n	800a7fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a7e6:	4b23      	ldr	r3, [pc, #140]	; (800a874 <prvAddNewTaskToReadyList+0xc8>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7f0:	429a      	cmp	r2, r3
 800a7f2:	d802      	bhi.n	800a7fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a7f4:	4a1f      	ldr	r2, [pc, #124]	; (800a874 <prvAddNewTaskToReadyList+0xc8>)
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a7fa:	4b20      	ldr	r3, [pc, #128]	; (800a87c <prvAddNewTaskToReadyList+0xd0>)
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	3301      	adds	r3, #1
 800a800:	4a1e      	ldr	r2, [pc, #120]	; (800a87c <prvAddNewTaskToReadyList+0xd0>)
 800a802:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a804:	4b1d      	ldr	r3, [pc, #116]	; (800a87c <prvAddNewTaskToReadyList+0xd0>)
 800a806:	681a      	ldr	r2, [r3, #0]
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a810:	4b1b      	ldr	r3, [pc, #108]	; (800a880 <prvAddNewTaskToReadyList+0xd4>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	429a      	cmp	r2, r3
 800a816:	d903      	bls.n	800a820 <prvAddNewTaskToReadyList+0x74>
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a81c:	4a18      	ldr	r2, [pc, #96]	; (800a880 <prvAddNewTaskToReadyList+0xd4>)
 800a81e:	6013      	str	r3, [r2, #0]
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a824:	4613      	mov	r3, r2
 800a826:	009b      	lsls	r3, r3, #2
 800a828:	4413      	add	r3, r2
 800a82a:	009b      	lsls	r3, r3, #2
 800a82c:	4a15      	ldr	r2, [pc, #84]	; (800a884 <prvAddNewTaskToReadyList+0xd8>)
 800a82e:	441a      	add	r2, r3
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	3304      	adds	r3, #4
 800a834:	4619      	mov	r1, r3
 800a836:	4610      	mov	r0, r2
 800a838:	f7fe fea9 	bl	800958e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a83c:	f001 fb7c 	bl	800bf38 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a840:	4b0d      	ldr	r3, [pc, #52]	; (800a878 <prvAddNewTaskToReadyList+0xcc>)
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d00e      	beq.n	800a866 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a848:	4b0a      	ldr	r3, [pc, #40]	; (800a874 <prvAddNewTaskToReadyList+0xc8>)
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a852:	429a      	cmp	r2, r3
 800a854:	d207      	bcs.n	800a866 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a856:	4b0c      	ldr	r3, [pc, #48]	; (800a888 <prvAddNewTaskToReadyList+0xdc>)
 800a858:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a85c:	601a      	str	r2, [r3, #0]
 800a85e:	f3bf 8f4f 	dsb	sy
 800a862:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a866:	bf00      	nop
 800a868:	3708      	adds	r7, #8
 800a86a:	46bd      	mov	sp, r7
 800a86c:	bd80      	pop	{r7, pc}
 800a86e:	bf00      	nop
 800a870:	20000d40 	.word	0x20000d40
 800a874:	2000086c 	.word	0x2000086c
 800a878:	20000d4c 	.word	0x20000d4c
 800a87c:	20000d5c 	.word	0x20000d5c
 800a880:	20000d48 	.word	0x20000d48
 800a884:	20000870 	.word	0x20000870
 800a888:	e000ed04 	.word	0xe000ed04

0800a88c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b08a      	sub	sp, #40	; 0x28
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
 800a894:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800a896:	2300      	movs	r3, #0
 800a898:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d109      	bne.n	800a8b4 <vTaskDelayUntil+0x28>
 800a8a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8a4:	f383 8811 	msr	BASEPRI, r3
 800a8a8:	f3bf 8f6f 	isb	sy
 800a8ac:	f3bf 8f4f 	dsb	sy
 800a8b0:	617b      	str	r3, [r7, #20]
 800a8b2:	e7fe      	b.n	800a8b2 <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d109      	bne.n	800a8ce <vTaskDelayUntil+0x42>
 800a8ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8be:	f383 8811 	msr	BASEPRI, r3
 800a8c2:	f3bf 8f6f 	isb	sy
 800a8c6:	f3bf 8f4f 	dsb	sy
 800a8ca:	613b      	str	r3, [r7, #16]
 800a8cc:	e7fe      	b.n	800a8cc <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 800a8ce:	4b29      	ldr	r3, [pc, #164]	; (800a974 <vTaskDelayUntil+0xe8>)
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d009      	beq.n	800a8ea <vTaskDelayUntil+0x5e>
 800a8d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8da:	f383 8811 	msr	BASEPRI, r3
 800a8de:	f3bf 8f6f 	isb	sy
 800a8e2:	f3bf 8f4f 	dsb	sy
 800a8e6:	60fb      	str	r3, [r7, #12]
 800a8e8:	e7fe      	b.n	800a8e8 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 800a8ea:	f000 f8e1 	bl	800aab0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800a8ee:	4b22      	ldr	r3, [pc, #136]	; (800a978 <vTaskDelayUntil+0xec>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	683a      	ldr	r2, [r7, #0]
 800a8fa:	4413      	add	r3, r2
 800a8fc:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	6a3a      	ldr	r2, [r7, #32]
 800a904:	429a      	cmp	r2, r3
 800a906:	d20b      	bcs.n	800a920 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	69fa      	ldr	r2, [r7, #28]
 800a90e:	429a      	cmp	r2, r3
 800a910:	d211      	bcs.n	800a936 <vTaskDelayUntil+0xaa>
 800a912:	69fa      	ldr	r2, [r7, #28]
 800a914:	6a3b      	ldr	r3, [r7, #32]
 800a916:	429a      	cmp	r2, r3
 800a918:	d90d      	bls.n	800a936 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800a91a:	2301      	movs	r3, #1
 800a91c:	627b      	str	r3, [r7, #36]	; 0x24
 800a91e:	e00a      	b.n	800a936 <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	69fa      	ldr	r2, [r7, #28]
 800a926:	429a      	cmp	r2, r3
 800a928:	d303      	bcc.n	800a932 <vTaskDelayUntil+0xa6>
 800a92a:	69fa      	ldr	r2, [r7, #28]
 800a92c:	6a3b      	ldr	r3, [r7, #32]
 800a92e:	429a      	cmp	r2, r3
 800a930:	d901      	bls.n	800a936 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800a932:	2301      	movs	r3, #1
 800a934:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	69fa      	ldr	r2, [r7, #28]
 800a93a:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800a93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d006      	beq.n	800a950 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800a942:	69fa      	ldr	r2, [r7, #28]
 800a944:	6a3b      	ldr	r3, [r7, #32]
 800a946:	1ad3      	subs	r3, r2, r3
 800a948:	2100      	movs	r1, #0
 800a94a:	4618      	mov	r0, r3
 800a94c:	f000 fe40 	bl	800b5d0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800a950:	f000 f8bc 	bl	800aacc <xTaskResumeAll>
 800a954:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a956:	69bb      	ldr	r3, [r7, #24]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d107      	bne.n	800a96c <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 800a95c:	4b07      	ldr	r3, [pc, #28]	; (800a97c <vTaskDelayUntil+0xf0>)
 800a95e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a962:	601a      	str	r2, [r3, #0]
 800a964:	f3bf 8f4f 	dsb	sy
 800a968:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a96c:	bf00      	nop
 800a96e:	3728      	adds	r7, #40	; 0x28
 800a970:	46bd      	mov	sp, r7
 800a972:	bd80      	pop	{r7, pc}
 800a974:	20000d68 	.word	0x20000d68
 800a978:	20000d44 	.word	0x20000d44
 800a97c:	e000ed04 	.word	0xe000ed04

0800a980 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a980:	b580      	push	{r7, lr}
 800a982:	b084      	sub	sp, #16
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a988:	2300      	movs	r3, #0
 800a98a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d016      	beq.n	800a9c0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a992:	4b13      	ldr	r3, [pc, #76]	; (800a9e0 <vTaskDelay+0x60>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d009      	beq.n	800a9ae <vTaskDelay+0x2e>
 800a99a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a99e:	f383 8811 	msr	BASEPRI, r3
 800a9a2:	f3bf 8f6f 	isb	sy
 800a9a6:	f3bf 8f4f 	dsb	sy
 800a9aa:	60bb      	str	r3, [r7, #8]
 800a9ac:	e7fe      	b.n	800a9ac <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800a9ae:	f000 f87f 	bl	800aab0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a9b2:	2100      	movs	r1, #0
 800a9b4:	6878      	ldr	r0, [r7, #4]
 800a9b6:	f000 fe0b 	bl	800b5d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a9ba:	f000 f887 	bl	800aacc <xTaskResumeAll>
 800a9be:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d107      	bne.n	800a9d6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800a9c6:	4b07      	ldr	r3, [pc, #28]	; (800a9e4 <vTaskDelay+0x64>)
 800a9c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9cc:	601a      	str	r2, [r3, #0]
 800a9ce:	f3bf 8f4f 	dsb	sy
 800a9d2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a9d6:	bf00      	nop
 800a9d8:	3710      	adds	r7, #16
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	bd80      	pop	{r7, pc}
 800a9de:	bf00      	nop
 800a9e0:	20000d68 	.word	0x20000d68
 800a9e4:	e000ed04 	.word	0xe000ed04

0800a9e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b08a      	sub	sp, #40	; 0x28
 800a9ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a9f6:	463a      	mov	r2, r7
 800a9f8:	1d39      	adds	r1, r7, #4
 800a9fa:	f107 0308 	add.w	r3, r7, #8
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f7fe fd64 	bl	80094cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800aa04:	6839      	ldr	r1, [r7, #0]
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	68ba      	ldr	r2, [r7, #8]
 800aa0a:	9202      	str	r2, [sp, #8]
 800aa0c:	9301      	str	r3, [sp, #4]
 800aa0e:	2300      	movs	r3, #0
 800aa10:	9300      	str	r3, [sp, #0]
 800aa12:	2300      	movs	r3, #0
 800aa14:	460a      	mov	r2, r1
 800aa16:	4920      	ldr	r1, [pc, #128]	; (800aa98 <vTaskStartScheduler+0xb0>)
 800aa18:	4820      	ldr	r0, [pc, #128]	; (800aa9c <vTaskStartScheduler+0xb4>)
 800aa1a:	f7ff fda3 	bl	800a564 <xTaskCreateStatic>
 800aa1e:	4602      	mov	r2, r0
 800aa20:	4b1f      	ldr	r3, [pc, #124]	; (800aaa0 <vTaskStartScheduler+0xb8>)
 800aa22:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800aa24:	4b1e      	ldr	r3, [pc, #120]	; (800aaa0 <vTaskStartScheduler+0xb8>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d002      	beq.n	800aa32 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800aa2c:	2301      	movs	r3, #1
 800aa2e:	617b      	str	r3, [r7, #20]
 800aa30:	e001      	b.n	800aa36 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800aa32:	2300      	movs	r3, #0
 800aa34:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	2b01      	cmp	r3, #1
 800aa3a:	d102      	bne.n	800aa42 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800aa3c:	f000 fe1c 	bl	800b678 <xTimerCreateTimerTask>
 800aa40:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800aa42:	697b      	ldr	r3, [r7, #20]
 800aa44:	2b01      	cmp	r3, #1
 800aa46:	d115      	bne.n	800aa74 <vTaskStartScheduler+0x8c>
 800aa48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa4c:	f383 8811 	msr	BASEPRI, r3
 800aa50:	f3bf 8f6f 	isb	sy
 800aa54:	f3bf 8f4f 	dsb	sy
 800aa58:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800aa5a:	4b12      	ldr	r3, [pc, #72]	; (800aaa4 <vTaskStartScheduler+0xbc>)
 800aa5c:	f04f 32ff 	mov.w	r2, #4294967295
 800aa60:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800aa62:	4b11      	ldr	r3, [pc, #68]	; (800aaa8 <vTaskStartScheduler+0xc0>)
 800aa64:	2201      	movs	r2, #1
 800aa66:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800aa68:	4b10      	ldr	r3, [pc, #64]	; (800aaac <vTaskStartScheduler+0xc4>)
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800aa6e:	f001 f997 	bl	800bda0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800aa72:	e00d      	b.n	800aa90 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800aa74:	697b      	ldr	r3, [r7, #20]
 800aa76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa7a:	d109      	bne.n	800aa90 <vTaskStartScheduler+0xa8>
 800aa7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa80:	f383 8811 	msr	BASEPRI, r3
 800aa84:	f3bf 8f6f 	isb	sy
 800aa88:	f3bf 8f4f 	dsb	sy
 800aa8c:	60fb      	str	r3, [r7, #12]
 800aa8e:	e7fe      	b.n	800aa8e <vTaskStartScheduler+0xa6>
}
 800aa90:	bf00      	nop
 800aa92:	3718      	adds	r7, #24
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}
 800aa98:	0800d0bc 	.word	0x0800d0bc
 800aa9c:	0800b0e1 	.word	0x0800b0e1
 800aaa0:	20000d64 	.word	0x20000d64
 800aaa4:	20000d60 	.word	0x20000d60
 800aaa8:	20000d4c 	.word	0x20000d4c
 800aaac:	20000d44 	.word	0x20000d44

0800aab0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800aab0:	b480      	push	{r7}
 800aab2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800aab4:	4b04      	ldr	r3, [pc, #16]	; (800aac8 <vTaskSuspendAll+0x18>)
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	3301      	adds	r3, #1
 800aaba:	4a03      	ldr	r2, [pc, #12]	; (800aac8 <vTaskSuspendAll+0x18>)
 800aabc:	6013      	str	r3, [r2, #0]
}
 800aabe:	bf00      	nop
 800aac0:	46bd      	mov	sp, r7
 800aac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac6:	4770      	bx	lr
 800aac8:	20000d68 	.word	0x20000d68

0800aacc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b084      	sub	sp, #16
 800aad0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800aad2:	2300      	movs	r3, #0
 800aad4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800aad6:	2300      	movs	r3, #0
 800aad8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800aada:	4b41      	ldr	r3, [pc, #260]	; (800abe0 <xTaskResumeAll+0x114>)
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d109      	bne.n	800aaf6 <xTaskResumeAll+0x2a>
 800aae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aae6:	f383 8811 	msr	BASEPRI, r3
 800aaea:	f3bf 8f6f 	isb	sy
 800aaee:	f3bf 8f4f 	dsb	sy
 800aaf2:	603b      	str	r3, [r7, #0]
 800aaf4:	e7fe      	b.n	800aaf4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800aaf6:	f001 f9f1 	bl	800bedc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800aafa:	4b39      	ldr	r3, [pc, #228]	; (800abe0 <xTaskResumeAll+0x114>)
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	3b01      	subs	r3, #1
 800ab00:	4a37      	ldr	r2, [pc, #220]	; (800abe0 <xTaskResumeAll+0x114>)
 800ab02:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab04:	4b36      	ldr	r3, [pc, #216]	; (800abe0 <xTaskResumeAll+0x114>)
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d162      	bne.n	800abd2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ab0c:	4b35      	ldr	r3, [pc, #212]	; (800abe4 <xTaskResumeAll+0x118>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d05e      	beq.n	800abd2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ab14:	e02f      	b.n	800ab76 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800ab16:	4b34      	ldr	r3, [pc, #208]	; (800abe8 <xTaskResumeAll+0x11c>)
 800ab18:	68db      	ldr	r3, [r3, #12]
 800ab1a:	68db      	ldr	r3, [r3, #12]
 800ab1c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	3318      	adds	r3, #24
 800ab22:	4618      	mov	r0, r3
 800ab24:	f7fe fd90 	bl	8009648 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	3304      	adds	r3, #4
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	f7fe fd8b 	bl	8009648 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab36:	4b2d      	ldr	r3, [pc, #180]	; (800abec <xTaskResumeAll+0x120>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	429a      	cmp	r2, r3
 800ab3c:	d903      	bls.n	800ab46 <xTaskResumeAll+0x7a>
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab42:	4a2a      	ldr	r2, [pc, #168]	; (800abec <xTaskResumeAll+0x120>)
 800ab44:	6013      	str	r3, [r2, #0]
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab4a:	4613      	mov	r3, r2
 800ab4c:	009b      	lsls	r3, r3, #2
 800ab4e:	4413      	add	r3, r2
 800ab50:	009b      	lsls	r3, r3, #2
 800ab52:	4a27      	ldr	r2, [pc, #156]	; (800abf0 <xTaskResumeAll+0x124>)
 800ab54:	441a      	add	r2, r3
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	3304      	adds	r3, #4
 800ab5a:	4619      	mov	r1, r3
 800ab5c:	4610      	mov	r0, r2
 800ab5e:	f7fe fd16 	bl	800958e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab66:	4b23      	ldr	r3, [pc, #140]	; (800abf4 <xTaskResumeAll+0x128>)
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab6c:	429a      	cmp	r2, r3
 800ab6e:	d302      	bcc.n	800ab76 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800ab70:	4b21      	ldr	r3, [pc, #132]	; (800abf8 <xTaskResumeAll+0x12c>)
 800ab72:	2201      	movs	r2, #1
 800ab74:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ab76:	4b1c      	ldr	r3, [pc, #112]	; (800abe8 <xTaskResumeAll+0x11c>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d1cb      	bne.n	800ab16 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d001      	beq.n	800ab88 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ab84:	f000 fb5e 	bl	800b244 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800ab88:	4b1c      	ldr	r3, [pc, #112]	; (800abfc <xTaskResumeAll+0x130>)
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d010      	beq.n	800abb6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ab94:	f000 f858 	bl	800ac48 <xTaskIncrementTick>
 800ab98:	4603      	mov	r3, r0
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d002      	beq.n	800aba4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800ab9e:	4b16      	ldr	r3, [pc, #88]	; (800abf8 <xTaskResumeAll+0x12c>)
 800aba0:	2201      	movs	r2, #1
 800aba2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	3b01      	subs	r3, #1
 800aba8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d1f1      	bne.n	800ab94 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800abb0:	4b12      	ldr	r3, [pc, #72]	; (800abfc <xTaskResumeAll+0x130>)
 800abb2:	2200      	movs	r2, #0
 800abb4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800abb6:	4b10      	ldr	r3, [pc, #64]	; (800abf8 <xTaskResumeAll+0x12c>)
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d009      	beq.n	800abd2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800abbe:	2301      	movs	r3, #1
 800abc0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800abc2:	4b0f      	ldr	r3, [pc, #60]	; (800ac00 <xTaskResumeAll+0x134>)
 800abc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abc8:	601a      	str	r2, [r3, #0]
 800abca:	f3bf 8f4f 	dsb	sy
 800abce:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800abd2:	f001 f9b1 	bl	800bf38 <vPortExitCritical>

	return xAlreadyYielded;
 800abd6:	68bb      	ldr	r3, [r7, #8]
}
 800abd8:	4618      	mov	r0, r3
 800abda:	3710      	adds	r7, #16
 800abdc:	46bd      	mov	sp, r7
 800abde:	bd80      	pop	{r7, pc}
 800abe0:	20000d68 	.word	0x20000d68
 800abe4:	20000d40 	.word	0x20000d40
 800abe8:	20000d00 	.word	0x20000d00
 800abec:	20000d48 	.word	0x20000d48
 800abf0:	20000870 	.word	0x20000870
 800abf4:	2000086c 	.word	0x2000086c
 800abf8:	20000d54 	.word	0x20000d54
 800abfc:	20000d50 	.word	0x20000d50
 800ac00:	e000ed04 	.word	0xe000ed04

0800ac04 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ac04:	b480      	push	{r7}
 800ac06:	b083      	sub	sp, #12
 800ac08:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ac0a:	4b05      	ldr	r3, [pc, #20]	; (800ac20 <xTaskGetTickCount+0x1c>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ac10:	687b      	ldr	r3, [r7, #4]
}
 800ac12:	4618      	mov	r0, r3
 800ac14:	370c      	adds	r7, #12
 800ac16:	46bd      	mov	sp, r7
 800ac18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1c:	4770      	bx	lr
 800ac1e:	bf00      	nop
 800ac20:	20000d44 	.word	0x20000d44

0800ac24 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b082      	sub	sp, #8
 800ac28:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ac2a:	f001 fa33 	bl	800c094 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800ac2e:	2300      	movs	r3, #0
 800ac30:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800ac32:	4b04      	ldr	r3, [pc, #16]	; (800ac44 <xTaskGetTickCountFromISR+0x20>)
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ac38:	683b      	ldr	r3, [r7, #0]
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	3708      	adds	r7, #8
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}
 800ac42:	bf00      	nop
 800ac44:	20000d44 	.word	0x20000d44

0800ac48 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b086      	sub	sp, #24
 800ac4c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac52:	4b51      	ldr	r3, [pc, #324]	; (800ad98 <xTaskIncrementTick+0x150>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	f040 808d 	bne.w	800ad76 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ac5c:	4b4f      	ldr	r3, [pc, #316]	; (800ad9c <xTaskIncrementTick+0x154>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	3301      	adds	r3, #1
 800ac62:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ac64:	4a4d      	ldr	r2, [pc, #308]	; (800ad9c <xTaskIncrementTick+0x154>)
 800ac66:	693b      	ldr	r3, [r7, #16]
 800ac68:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ac6a:	693b      	ldr	r3, [r7, #16]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d11f      	bne.n	800acb0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800ac70:	4b4b      	ldr	r3, [pc, #300]	; (800ada0 <xTaskIncrementTick+0x158>)
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d009      	beq.n	800ac8e <xTaskIncrementTick+0x46>
 800ac7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac7e:	f383 8811 	msr	BASEPRI, r3
 800ac82:	f3bf 8f6f 	isb	sy
 800ac86:	f3bf 8f4f 	dsb	sy
 800ac8a:	603b      	str	r3, [r7, #0]
 800ac8c:	e7fe      	b.n	800ac8c <xTaskIncrementTick+0x44>
 800ac8e:	4b44      	ldr	r3, [pc, #272]	; (800ada0 <xTaskIncrementTick+0x158>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	60fb      	str	r3, [r7, #12]
 800ac94:	4b43      	ldr	r3, [pc, #268]	; (800ada4 <xTaskIncrementTick+0x15c>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	4a41      	ldr	r2, [pc, #260]	; (800ada0 <xTaskIncrementTick+0x158>)
 800ac9a:	6013      	str	r3, [r2, #0]
 800ac9c:	4a41      	ldr	r2, [pc, #260]	; (800ada4 <xTaskIncrementTick+0x15c>)
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	6013      	str	r3, [r2, #0]
 800aca2:	4b41      	ldr	r3, [pc, #260]	; (800ada8 <xTaskIncrementTick+0x160>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	3301      	adds	r3, #1
 800aca8:	4a3f      	ldr	r2, [pc, #252]	; (800ada8 <xTaskIncrementTick+0x160>)
 800acaa:	6013      	str	r3, [r2, #0]
 800acac:	f000 faca 	bl	800b244 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800acb0:	4b3e      	ldr	r3, [pc, #248]	; (800adac <xTaskIncrementTick+0x164>)
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	693a      	ldr	r2, [r7, #16]
 800acb6:	429a      	cmp	r2, r3
 800acb8:	d34e      	bcc.n	800ad58 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800acba:	4b39      	ldr	r3, [pc, #228]	; (800ada0 <xTaskIncrementTick+0x158>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d101      	bne.n	800acc8 <xTaskIncrementTick+0x80>
 800acc4:	2301      	movs	r3, #1
 800acc6:	e000      	b.n	800acca <xTaskIncrementTick+0x82>
 800acc8:	2300      	movs	r3, #0
 800acca:	2b00      	cmp	r3, #0
 800accc:	d004      	beq.n	800acd8 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acce:	4b37      	ldr	r3, [pc, #220]	; (800adac <xTaskIncrementTick+0x164>)
 800acd0:	f04f 32ff 	mov.w	r2, #4294967295
 800acd4:	601a      	str	r2, [r3, #0]
					break;
 800acd6:	e03f      	b.n	800ad58 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800acd8:	4b31      	ldr	r3, [pc, #196]	; (800ada0 <xTaskIncrementTick+0x158>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	68db      	ldr	r3, [r3, #12]
 800acde:	68db      	ldr	r3, [r3, #12]
 800ace0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ace2:	68bb      	ldr	r3, [r7, #8]
 800ace4:	685b      	ldr	r3, [r3, #4]
 800ace6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ace8:	693a      	ldr	r2, [r7, #16]
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	429a      	cmp	r2, r3
 800acee:	d203      	bcs.n	800acf8 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800acf0:	4a2e      	ldr	r2, [pc, #184]	; (800adac <xTaskIncrementTick+0x164>)
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	6013      	str	r3, [r2, #0]
						break;
 800acf6:	e02f      	b.n	800ad58 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800acf8:	68bb      	ldr	r3, [r7, #8]
 800acfa:	3304      	adds	r3, #4
 800acfc:	4618      	mov	r0, r3
 800acfe:	f7fe fca3 	bl	8009648 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ad02:	68bb      	ldr	r3, [r7, #8]
 800ad04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d004      	beq.n	800ad14 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ad0a:	68bb      	ldr	r3, [r7, #8]
 800ad0c:	3318      	adds	r3, #24
 800ad0e:	4618      	mov	r0, r3
 800ad10:	f7fe fc9a 	bl	8009648 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ad14:	68bb      	ldr	r3, [r7, #8]
 800ad16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad18:	4b25      	ldr	r3, [pc, #148]	; (800adb0 <xTaskIncrementTick+0x168>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	429a      	cmp	r2, r3
 800ad1e:	d903      	bls.n	800ad28 <xTaskIncrementTick+0xe0>
 800ad20:	68bb      	ldr	r3, [r7, #8]
 800ad22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad24:	4a22      	ldr	r2, [pc, #136]	; (800adb0 <xTaskIncrementTick+0x168>)
 800ad26:	6013      	str	r3, [r2, #0]
 800ad28:	68bb      	ldr	r3, [r7, #8]
 800ad2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad2c:	4613      	mov	r3, r2
 800ad2e:	009b      	lsls	r3, r3, #2
 800ad30:	4413      	add	r3, r2
 800ad32:	009b      	lsls	r3, r3, #2
 800ad34:	4a1f      	ldr	r2, [pc, #124]	; (800adb4 <xTaskIncrementTick+0x16c>)
 800ad36:	441a      	add	r2, r3
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	3304      	adds	r3, #4
 800ad3c:	4619      	mov	r1, r3
 800ad3e:	4610      	mov	r0, r2
 800ad40:	f7fe fc25 	bl	800958e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ad44:	68bb      	ldr	r3, [r7, #8]
 800ad46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad48:	4b1b      	ldr	r3, [pc, #108]	; (800adb8 <xTaskIncrementTick+0x170>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad4e:	429a      	cmp	r2, r3
 800ad50:	d3b3      	bcc.n	800acba <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800ad52:	2301      	movs	r3, #1
 800ad54:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ad56:	e7b0      	b.n	800acba <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ad58:	4b17      	ldr	r3, [pc, #92]	; (800adb8 <xTaskIncrementTick+0x170>)
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad5e:	4915      	ldr	r1, [pc, #84]	; (800adb4 <xTaskIncrementTick+0x16c>)
 800ad60:	4613      	mov	r3, r2
 800ad62:	009b      	lsls	r3, r3, #2
 800ad64:	4413      	add	r3, r2
 800ad66:	009b      	lsls	r3, r3, #2
 800ad68:	440b      	add	r3, r1
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	2b01      	cmp	r3, #1
 800ad6e:	d907      	bls.n	800ad80 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800ad70:	2301      	movs	r3, #1
 800ad72:	617b      	str	r3, [r7, #20]
 800ad74:	e004      	b.n	800ad80 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800ad76:	4b11      	ldr	r3, [pc, #68]	; (800adbc <xTaskIncrementTick+0x174>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	3301      	adds	r3, #1
 800ad7c:	4a0f      	ldr	r2, [pc, #60]	; (800adbc <xTaskIncrementTick+0x174>)
 800ad7e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800ad80:	4b0f      	ldr	r3, [pc, #60]	; (800adc0 <xTaskIncrementTick+0x178>)
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d001      	beq.n	800ad8c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800ad88:	2301      	movs	r3, #1
 800ad8a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800ad8c:	697b      	ldr	r3, [r7, #20]
}
 800ad8e:	4618      	mov	r0, r3
 800ad90:	3718      	adds	r7, #24
 800ad92:	46bd      	mov	sp, r7
 800ad94:	bd80      	pop	{r7, pc}
 800ad96:	bf00      	nop
 800ad98:	20000d68 	.word	0x20000d68
 800ad9c:	20000d44 	.word	0x20000d44
 800ada0:	20000cf8 	.word	0x20000cf8
 800ada4:	20000cfc 	.word	0x20000cfc
 800ada8:	20000d58 	.word	0x20000d58
 800adac:	20000d60 	.word	0x20000d60
 800adb0:	20000d48 	.word	0x20000d48
 800adb4:	20000870 	.word	0x20000870
 800adb8:	2000086c 	.word	0x2000086c
 800adbc:	20000d50 	.word	0x20000d50
 800adc0:	20000d54 	.word	0x20000d54

0800adc4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800adc4:	b480      	push	{r7}
 800adc6:	b085      	sub	sp, #20
 800adc8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800adca:	4b27      	ldr	r3, [pc, #156]	; (800ae68 <vTaskSwitchContext+0xa4>)
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d003      	beq.n	800adda <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800add2:	4b26      	ldr	r3, [pc, #152]	; (800ae6c <vTaskSwitchContext+0xa8>)
 800add4:	2201      	movs	r2, #1
 800add6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800add8:	e040      	b.n	800ae5c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800adda:	4b24      	ldr	r3, [pc, #144]	; (800ae6c <vTaskSwitchContext+0xa8>)
 800addc:	2200      	movs	r2, #0
 800adde:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800ade0:	4b23      	ldr	r3, [pc, #140]	; (800ae70 <vTaskSwitchContext+0xac>)
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	60fb      	str	r3, [r7, #12]
 800ade6:	e00f      	b.n	800ae08 <vTaskSwitchContext+0x44>
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d109      	bne.n	800ae02 <vTaskSwitchContext+0x3e>
 800adee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adf2:	f383 8811 	msr	BASEPRI, r3
 800adf6:	f3bf 8f6f 	isb	sy
 800adfa:	f3bf 8f4f 	dsb	sy
 800adfe:	607b      	str	r3, [r7, #4]
 800ae00:	e7fe      	b.n	800ae00 <vTaskSwitchContext+0x3c>
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	3b01      	subs	r3, #1
 800ae06:	60fb      	str	r3, [r7, #12]
 800ae08:	491a      	ldr	r1, [pc, #104]	; (800ae74 <vTaskSwitchContext+0xb0>)
 800ae0a:	68fa      	ldr	r2, [r7, #12]
 800ae0c:	4613      	mov	r3, r2
 800ae0e:	009b      	lsls	r3, r3, #2
 800ae10:	4413      	add	r3, r2
 800ae12:	009b      	lsls	r3, r3, #2
 800ae14:	440b      	add	r3, r1
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d0e5      	beq.n	800ade8 <vTaskSwitchContext+0x24>
 800ae1c:	68fa      	ldr	r2, [r7, #12]
 800ae1e:	4613      	mov	r3, r2
 800ae20:	009b      	lsls	r3, r3, #2
 800ae22:	4413      	add	r3, r2
 800ae24:	009b      	lsls	r3, r3, #2
 800ae26:	4a13      	ldr	r2, [pc, #76]	; (800ae74 <vTaskSwitchContext+0xb0>)
 800ae28:	4413      	add	r3, r2
 800ae2a:	60bb      	str	r3, [r7, #8]
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	685b      	ldr	r3, [r3, #4]
 800ae30:	685a      	ldr	r2, [r3, #4]
 800ae32:	68bb      	ldr	r3, [r7, #8]
 800ae34:	605a      	str	r2, [r3, #4]
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	685a      	ldr	r2, [r3, #4]
 800ae3a:	68bb      	ldr	r3, [r7, #8]
 800ae3c:	3308      	adds	r3, #8
 800ae3e:	429a      	cmp	r2, r3
 800ae40:	d104      	bne.n	800ae4c <vTaskSwitchContext+0x88>
 800ae42:	68bb      	ldr	r3, [r7, #8]
 800ae44:	685b      	ldr	r3, [r3, #4]
 800ae46:	685a      	ldr	r2, [r3, #4]
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	605a      	str	r2, [r3, #4]
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	685b      	ldr	r3, [r3, #4]
 800ae50:	68db      	ldr	r3, [r3, #12]
 800ae52:	4a09      	ldr	r2, [pc, #36]	; (800ae78 <vTaskSwitchContext+0xb4>)
 800ae54:	6013      	str	r3, [r2, #0]
 800ae56:	4a06      	ldr	r2, [pc, #24]	; (800ae70 <vTaskSwitchContext+0xac>)
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	6013      	str	r3, [r2, #0]
}
 800ae5c:	bf00      	nop
 800ae5e:	3714      	adds	r7, #20
 800ae60:	46bd      	mov	sp, r7
 800ae62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae66:	4770      	bx	lr
 800ae68:	20000d68 	.word	0x20000d68
 800ae6c:	20000d54 	.word	0x20000d54
 800ae70:	20000d48 	.word	0x20000d48
 800ae74:	20000870 	.word	0x20000870
 800ae78:	2000086c 	.word	0x2000086c

0800ae7c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b084      	sub	sp, #16
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
 800ae84:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d109      	bne.n	800aea0 <vTaskPlaceOnEventList+0x24>
 800ae8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae90:	f383 8811 	msr	BASEPRI, r3
 800ae94:	f3bf 8f6f 	isb	sy
 800ae98:	f3bf 8f4f 	dsb	sy
 800ae9c:	60fb      	str	r3, [r7, #12]
 800ae9e:	e7fe      	b.n	800ae9e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aea0:	4b07      	ldr	r3, [pc, #28]	; (800aec0 <vTaskPlaceOnEventList+0x44>)
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	3318      	adds	r3, #24
 800aea6:	4619      	mov	r1, r3
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	f7fe fb94 	bl	80095d6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800aeae:	2101      	movs	r1, #1
 800aeb0:	6838      	ldr	r0, [r7, #0]
 800aeb2:	f000 fb8d 	bl	800b5d0 <prvAddCurrentTaskToDelayedList>
}
 800aeb6:	bf00      	nop
 800aeb8:	3710      	adds	r7, #16
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}
 800aebe:	bf00      	nop
 800aec0:	2000086c 	.word	0x2000086c

0800aec4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b086      	sub	sp, #24
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	60f8      	str	r0, [r7, #12]
 800aecc:	60b9      	str	r1, [r7, #8]
 800aece:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d109      	bne.n	800aeea <vTaskPlaceOnEventListRestricted+0x26>
 800aed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeda:	f383 8811 	msr	BASEPRI, r3
 800aede:	f3bf 8f6f 	isb	sy
 800aee2:	f3bf 8f4f 	dsb	sy
 800aee6:	617b      	str	r3, [r7, #20]
 800aee8:	e7fe      	b.n	800aee8 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aeea:	4b0a      	ldr	r3, [pc, #40]	; (800af14 <vTaskPlaceOnEventListRestricted+0x50>)
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	3318      	adds	r3, #24
 800aef0:	4619      	mov	r1, r3
 800aef2:	68f8      	ldr	r0, [r7, #12]
 800aef4:	f7fe fb4b 	bl	800958e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d002      	beq.n	800af04 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800aefe:	f04f 33ff 	mov.w	r3, #4294967295
 800af02:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800af04:	6879      	ldr	r1, [r7, #4]
 800af06:	68b8      	ldr	r0, [r7, #8]
 800af08:	f000 fb62 	bl	800b5d0 <prvAddCurrentTaskToDelayedList>
	}
 800af0c:	bf00      	nop
 800af0e:	3718      	adds	r7, #24
 800af10:	46bd      	mov	sp, r7
 800af12:	bd80      	pop	{r7, pc}
 800af14:	2000086c 	.word	0x2000086c

0800af18 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b086      	sub	sp, #24
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	68db      	ldr	r3, [r3, #12]
 800af24:	68db      	ldr	r3, [r3, #12]
 800af26:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800af28:	693b      	ldr	r3, [r7, #16]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d109      	bne.n	800af42 <xTaskRemoveFromEventList+0x2a>
 800af2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af32:	f383 8811 	msr	BASEPRI, r3
 800af36:	f3bf 8f6f 	isb	sy
 800af3a:	f3bf 8f4f 	dsb	sy
 800af3e:	60fb      	str	r3, [r7, #12]
 800af40:	e7fe      	b.n	800af40 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800af42:	693b      	ldr	r3, [r7, #16]
 800af44:	3318      	adds	r3, #24
 800af46:	4618      	mov	r0, r3
 800af48:	f7fe fb7e 	bl	8009648 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af4c:	4b1d      	ldr	r3, [pc, #116]	; (800afc4 <xTaskRemoveFromEventList+0xac>)
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d11d      	bne.n	800af90 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800af54:	693b      	ldr	r3, [r7, #16]
 800af56:	3304      	adds	r3, #4
 800af58:	4618      	mov	r0, r3
 800af5a:	f7fe fb75 	bl	8009648 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800af5e:	693b      	ldr	r3, [r7, #16]
 800af60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af62:	4b19      	ldr	r3, [pc, #100]	; (800afc8 <xTaskRemoveFromEventList+0xb0>)
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	429a      	cmp	r2, r3
 800af68:	d903      	bls.n	800af72 <xTaskRemoveFromEventList+0x5a>
 800af6a:	693b      	ldr	r3, [r7, #16]
 800af6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af6e:	4a16      	ldr	r2, [pc, #88]	; (800afc8 <xTaskRemoveFromEventList+0xb0>)
 800af70:	6013      	str	r3, [r2, #0]
 800af72:	693b      	ldr	r3, [r7, #16]
 800af74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af76:	4613      	mov	r3, r2
 800af78:	009b      	lsls	r3, r3, #2
 800af7a:	4413      	add	r3, r2
 800af7c:	009b      	lsls	r3, r3, #2
 800af7e:	4a13      	ldr	r2, [pc, #76]	; (800afcc <xTaskRemoveFromEventList+0xb4>)
 800af80:	441a      	add	r2, r3
 800af82:	693b      	ldr	r3, [r7, #16]
 800af84:	3304      	adds	r3, #4
 800af86:	4619      	mov	r1, r3
 800af88:	4610      	mov	r0, r2
 800af8a:	f7fe fb00 	bl	800958e <vListInsertEnd>
 800af8e:	e005      	b.n	800af9c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800af90:	693b      	ldr	r3, [r7, #16]
 800af92:	3318      	adds	r3, #24
 800af94:	4619      	mov	r1, r3
 800af96:	480e      	ldr	r0, [pc, #56]	; (800afd0 <xTaskRemoveFromEventList+0xb8>)
 800af98:	f7fe faf9 	bl	800958e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800af9c:	693b      	ldr	r3, [r7, #16]
 800af9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afa0:	4b0c      	ldr	r3, [pc, #48]	; (800afd4 <xTaskRemoveFromEventList+0xbc>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afa6:	429a      	cmp	r2, r3
 800afa8:	d905      	bls.n	800afb6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800afaa:	2301      	movs	r3, #1
 800afac:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800afae:	4b0a      	ldr	r3, [pc, #40]	; (800afd8 <xTaskRemoveFromEventList+0xc0>)
 800afb0:	2201      	movs	r2, #1
 800afb2:	601a      	str	r2, [r3, #0]
 800afb4:	e001      	b.n	800afba <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800afb6:	2300      	movs	r3, #0
 800afb8:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800afba:	697b      	ldr	r3, [r7, #20]
}
 800afbc:	4618      	mov	r0, r3
 800afbe:	3718      	adds	r7, #24
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bd80      	pop	{r7, pc}
 800afc4:	20000d68 	.word	0x20000d68
 800afc8:	20000d48 	.word	0x20000d48
 800afcc:	20000870 	.word	0x20000870
 800afd0:	20000d00 	.word	0x20000d00
 800afd4:	2000086c 	.word	0x2000086c
 800afd8:	20000d54 	.word	0x20000d54

0800afdc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800afdc:	b480      	push	{r7}
 800afde:	b083      	sub	sp, #12
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800afe4:	4b06      	ldr	r3, [pc, #24]	; (800b000 <vTaskInternalSetTimeOutState+0x24>)
 800afe6:	681a      	ldr	r2, [r3, #0]
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800afec:	4b05      	ldr	r3, [pc, #20]	; (800b004 <vTaskInternalSetTimeOutState+0x28>)
 800afee:	681a      	ldr	r2, [r3, #0]
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	605a      	str	r2, [r3, #4]
}
 800aff4:	bf00      	nop
 800aff6:	370c      	adds	r7, #12
 800aff8:	46bd      	mov	sp, r7
 800affa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affe:	4770      	bx	lr
 800b000:	20000d58 	.word	0x20000d58
 800b004:	20000d44 	.word	0x20000d44

0800b008 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b088      	sub	sp, #32
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
 800b010:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d109      	bne.n	800b02c <xTaskCheckForTimeOut+0x24>
 800b018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b01c:	f383 8811 	msr	BASEPRI, r3
 800b020:	f3bf 8f6f 	isb	sy
 800b024:	f3bf 8f4f 	dsb	sy
 800b028:	613b      	str	r3, [r7, #16]
 800b02a:	e7fe      	b.n	800b02a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d109      	bne.n	800b046 <xTaskCheckForTimeOut+0x3e>
 800b032:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b036:	f383 8811 	msr	BASEPRI, r3
 800b03a:	f3bf 8f6f 	isb	sy
 800b03e:	f3bf 8f4f 	dsb	sy
 800b042:	60fb      	str	r3, [r7, #12]
 800b044:	e7fe      	b.n	800b044 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800b046:	f000 ff49 	bl	800bedc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b04a:	4b1d      	ldr	r3, [pc, #116]	; (800b0c0 <xTaskCheckForTimeOut+0xb8>)
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	685b      	ldr	r3, [r3, #4]
 800b054:	69ba      	ldr	r2, [r7, #24]
 800b056:	1ad3      	subs	r3, r2, r3
 800b058:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b062:	d102      	bne.n	800b06a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b064:	2300      	movs	r3, #0
 800b066:	61fb      	str	r3, [r7, #28]
 800b068:	e023      	b.n	800b0b2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681a      	ldr	r2, [r3, #0]
 800b06e:	4b15      	ldr	r3, [pc, #84]	; (800b0c4 <xTaskCheckForTimeOut+0xbc>)
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	429a      	cmp	r2, r3
 800b074:	d007      	beq.n	800b086 <xTaskCheckForTimeOut+0x7e>
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	685b      	ldr	r3, [r3, #4]
 800b07a:	69ba      	ldr	r2, [r7, #24]
 800b07c:	429a      	cmp	r2, r3
 800b07e:	d302      	bcc.n	800b086 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b080:	2301      	movs	r3, #1
 800b082:	61fb      	str	r3, [r7, #28]
 800b084:	e015      	b.n	800b0b2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b086:	683b      	ldr	r3, [r7, #0]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	697a      	ldr	r2, [r7, #20]
 800b08c:	429a      	cmp	r2, r3
 800b08e:	d20b      	bcs.n	800b0a8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	681a      	ldr	r2, [r3, #0]
 800b094:	697b      	ldr	r3, [r7, #20]
 800b096:	1ad2      	subs	r2, r2, r3
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b09c:	6878      	ldr	r0, [r7, #4]
 800b09e:	f7ff ff9d 	bl	800afdc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	61fb      	str	r3, [r7, #28]
 800b0a6:	e004      	b.n	800b0b2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b0b2:	f000 ff41 	bl	800bf38 <vPortExitCritical>

	return xReturn;
 800b0b6:	69fb      	ldr	r3, [r7, #28]
}
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	3720      	adds	r7, #32
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	bd80      	pop	{r7, pc}
 800b0c0:	20000d44 	.word	0x20000d44
 800b0c4:	20000d58 	.word	0x20000d58

0800b0c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b0c8:	b480      	push	{r7}
 800b0ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b0cc:	4b03      	ldr	r3, [pc, #12]	; (800b0dc <vTaskMissedYield+0x14>)
 800b0ce:	2201      	movs	r2, #1
 800b0d0:	601a      	str	r2, [r3, #0]
}
 800b0d2:	bf00      	nop
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0da:	4770      	bx	lr
 800b0dc:	20000d54 	.word	0x20000d54

0800b0e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b082      	sub	sp, #8
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b0e8:	f000 f852 	bl	800b190 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b0ec:	4b06      	ldr	r3, [pc, #24]	; (800b108 <prvIdleTask+0x28>)
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	2b01      	cmp	r3, #1
 800b0f2:	d9f9      	bls.n	800b0e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b0f4:	4b05      	ldr	r3, [pc, #20]	; (800b10c <prvIdleTask+0x2c>)
 800b0f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0fa:	601a      	str	r2, [r3, #0]
 800b0fc:	f3bf 8f4f 	dsb	sy
 800b100:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b104:	e7f0      	b.n	800b0e8 <prvIdleTask+0x8>
 800b106:	bf00      	nop
 800b108:	20000870 	.word	0x20000870
 800b10c:	e000ed04 	.word	0xe000ed04

0800b110 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b082      	sub	sp, #8
 800b114:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b116:	2300      	movs	r3, #0
 800b118:	607b      	str	r3, [r7, #4]
 800b11a:	e00c      	b.n	800b136 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b11c:	687a      	ldr	r2, [r7, #4]
 800b11e:	4613      	mov	r3, r2
 800b120:	009b      	lsls	r3, r3, #2
 800b122:	4413      	add	r3, r2
 800b124:	009b      	lsls	r3, r3, #2
 800b126:	4a12      	ldr	r2, [pc, #72]	; (800b170 <prvInitialiseTaskLists+0x60>)
 800b128:	4413      	add	r3, r2
 800b12a:	4618      	mov	r0, r3
 800b12c:	f7fe fa02 	bl	8009534 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	3301      	adds	r3, #1
 800b134:	607b      	str	r3, [r7, #4]
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	2b37      	cmp	r3, #55	; 0x37
 800b13a:	d9ef      	bls.n	800b11c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b13c:	480d      	ldr	r0, [pc, #52]	; (800b174 <prvInitialiseTaskLists+0x64>)
 800b13e:	f7fe f9f9 	bl	8009534 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b142:	480d      	ldr	r0, [pc, #52]	; (800b178 <prvInitialiseTaskLists+0x68>)
 800b144:	f7fe f9f6 	bl	8009534 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b148:	480c      	ldr	r0, [pc, #48]	; (800b17c <prvInitialiseTaskLists+0x6c>)
 800b14a:	f7fe f9f3 	bl	8009534 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b14e:	480c      	ldr	r0, [pc, #48]	; (800b180 <prvInitialiseTaskLists+0x70>)
 800b150:	f7fe f9f0 	bl	8009534 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b154:	480b      	ldr	r0, [pc, #44]	; (800b184 <prvInitialiseTaskLists+0x74>)
 800b156:	f7fe f9ed 	bl	8009534 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b15a:	4b0b      	ldr	r3, [pc, #44]	; (800b188 <prvInitialiseTaskLists+0x78>)
 800b15c:	4a05      	ldr	r2, [pc, #20]	; (800b174 <prvInitialiseTaskLists+0x64>)
 800b15e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b160:	4b0a      	ldr	r3, [pc, #40]	; (800b18c <prvInitialiseTaskLists+0x7c>)
 800b162:	4a05      	ldr	r2, [pc, #20]	; (800b178 <prvInitialiseTaskLists+0x68>)
 800b164:	601a      	str	r2, [r3, #0]
}
 800b166:	bf00      	nop
 800b168:	3708      	adds	r7, #8
 800b16a:	46bd      	mov	sp, r7
 800b16c:	bd80      	pop	{r7, pc}
 800b16e:	bf00      	nop
 800b170:	20000870 	.word	0x20000870
 800b174:	20000cd0 	.word	0x20000cd0
 800b178:	20000ce4 	.word	0x20000ce4
 800b17c:	20000d00 	.word	0x20000d00
 800b180:	20000d14 	.word	0x20000d14
 800b184:	20000d2c 	.word	0x20000d2c
 800b188:	20000cf8 	.word	0x20000cf8
 800b18c:	20000cfc 	.word	0x20000cfc

0800b190 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b082      	sub	sp, #8
 800b194:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b196:	e019      	b.n	800b1cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b198:	f000 fea0 	bl	800bedc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800b19c:	4b0f      	ldr	r3, [pc, #60]	; (800b1dc <prvCheckTasksWaitingTermination+0x4c>)
 800b19e:	68db      	ldr	r3, [r3, #12]
 800b1a0:	68db      	ldr	r3, [r3, #12]
 800b1a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	3304      	adds	r3, #4
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	f7fe fa4d 	bl	8009648 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b1ae:	4b0c      	ldr	r3, [pc, #48]	; (800b1e0 <prvCheckTasksWaitingTermination+0x50>)
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	3b01      	subs	r3, #1
 800b1b4:	4a0a      	ldr	r2, [pc, #40]	; (800b1e0 <prvCheckTasksWaitingTermination+0x50>)
 800b1b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b1b8:	4b0a      	ldr	r3, [pc, #40]	; (800b1e4 <prvCheckTasksWaitingTermination+0x54>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	3b01      	subs	r3, #1
 800b1be:	4a09      	ldr	r2, [pc, #36]	; (800b1e4 <prvCheckTasksWaitingTermination+0x54>)
 800b1c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b1c2:	f000 feb9 	bl	800bf38 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b1c6:	6878      	ldr	r0, [r7, #4]
 800b1c8:	f000 f80e 	bl	800b1e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b1cc:	4b05      	ldr	r3, [pc, #20]	; (800b1e4 <prvCheckTasksWaitingTermination+0x54>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d1e1      	bne.n	800b198 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b1d4:	bf00      	nop
 800b1d6:	3708      	adds	r7, #8
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	bd80      	pop	{r7, pc}
 800b1dc:	20000d14 	.word	0x20000d14
 800b1e0:	20000d40 	.word	0x20000d40
 800b1e4:	20000d28 	.word	0x20000d28

0800b1e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b084      	sub	sp, #16
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d108      	bne.n	800b20c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1fe:	4618      	mov	r0, r3
 800b200:	f001 f848 	bl	800c294 <vPortFree>
				vPortFree( pxTCB );
 800b204:	6878      	ldr	r0, [r7, #4]
 800b206:	f001 f845 	bl	800c294 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b20a:	e017      	b.n	800b23c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b212:	2b01      	cmp	r3, #1
 800b214:	d103      	bne.n	800b21e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b216:	6878      	ldr	r0, [r7, #4]
 800b218:	f001 f83c 	bl	800c294 <vPortFree>
	}
 800b21c:	e00e      	b.n	800b23c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b224:	2b02      	cmp	r3, #2
 800b226:	d009      	beq.n	800b23c <prvDeleteTCB+0x54>
 800b228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b22c:	f383 8811 	msr	BASEPRI, r3
 800b230:	f3bf 8f6f 	isb	sy
 800b234:	f3bf 8f4f 	dsb	sy
 800b238:	60fb      	str	r3, [r7, #12]
 800b23a:	e7fe      	b.n	800b23a <prvDeleteTCB+0x52>
	}
 800b23c:	bf00      	nop
 800b23e:	3710      	adds	r7, #16
 800b240:	46bd      	mov	sp, r7
 800b242:	bd80      	pop	{r7, pc}

0800b244 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b244:	b480      	push	{r7}
 800b246:	b083      	sub	sp, #12
 800b248:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b24a:	4b0f      	ldr	r3, [pc, #60]	; (800b288 <prvResetNextTaskUnblockTime+0x44>)
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d101      	bne.n	800b258 <prvResetNextTaskUnblockTime+0x14>
 800b254:	2301      	movs	r3, #1
 800b256:	e000      	b.n	800b25a <prvResetNextTaskUnblockTime+0x16>
 800b258:	2300      	movs	r3, #0
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d004      	beq.n	800b268 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b25e:	4b0b      	ldr	r3, [pc, #44]	; (800b28c <prvResetNextTaskUnblockTime+0x48>)
 800b260:	f04f 32ff 	mov.w	r2, #4294967295
 800b264:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b266:	e008      	b.n	800b27a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b268:	4b07      	ldr	r3, [pc, #28]	; (800b288 <prvResetNextTaskUnblockTime+0x44>)
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	68db      	ldr	r3, [r3, #12]
 800b26e:	68db      	ldr	r3, [r3, #12]
 800b270:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	685b      	ldr	r3, [r3, #4]
 800b276:	4a05      	ldr	r2, [pc, #20]	; (800b28c <prvResetNextTaskUnblockTime+0x48>)
 800b278:	6013      	str	r3, [r2, #0]
}
 800b27a:	bf00      	nop
 800b27c:	370c      	adds	r7, #12
 800b27e:	46bd      	mov	sp, r7
 800b280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b284:	4770      	bx	lr
 800b286:	bf00      	nop
 800b288:	20000cf8 	.word	0x20000cf8
 800b28c:	20000d60 	.word	0x20000d60

0800b290 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800b290:	b480      	push	{r7}
 800b292:	b083      	sub	sp, #12
 800b294:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800b296:	4b05      	ldr	r3, [pc, #20]	; (800b2ac <xTaskGetCurrentTaskHandle+0x1c>)
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800b29c:	687b      	ldr	r3, [r7, #4]
	}
 800b29e:	4618      	mov	r0, r3
 800b2a0:	370c      	adds	r7, #12
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a8:	4770      	bx	lr
 800b2aa:	bf00      	nop
 800b2ac:	2000086c 	.word	0x2000086c

0800b2b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b2b0:	b480      	push	{r7}
 800b2b2:	b083      	sub	sp, #12
 800b2b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b2b6:	4b0b      	ldr	r3, [pc, #44]	; (800b2e4 <xTaskGetSchedulerState+0x34>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d102      	bne.n	800b2c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b2be:	2301      	movs	r3, #1
 800b2c0:	607b      	str	r3, [r7, #4]
 800b2c2:	e008      	b.n	800b2d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b2c4:	4b08      	ldr	r3, [pc, #32]	; (800b2e8 <xTaskGetSchedulerState+0x38>)
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d102      	bne.n	800b2d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b2cc:	2302      	movs	r3, #2
 800b2ce:	607b      	str	r3, [r7, #4]
 800b2d0:	e001      	b.n	800b2d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b2d6:	687b      	ldr	r3, [r7, #4]
	}
 800b2d8:	4618      	mov	r0, r3
 800b2da:	370c      	adds	r7, #12
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e2:	4770      	bx	lr
 800b2e4:	20000d4c 	.word	0x20000d4c
 800b2e8:	20000d68 	.word	0x20000d68

0800b2ec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b084      	sub	sp, #16
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d056      	beq.n	800b3b0 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b302:	68bb      	ldr	r3, [r7, #8]
 800b304:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b306:	4b2d      	ldr	r3, [pc, #180]	; (800b3bc <xTaskPriorityInherit+0xd0>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b30c:	429a      	cmp	r2, r3
 800b30e:	d246      	bcs.n	800b39e <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b310:	68bb      	ldr	r3, [r7, #8]
 800b312:	699b      	ldr	r3, [r3, #24]
 800b314:	2b00      	cmp	r3, #0
 800b316:	db06      	blt.n	800b326 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b318:	4b28      	ldr	r3, [pc, #160]	; (800b3bc <xTaskPriorityInherit+0xd0>)
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b31e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b322:	68bb      	ldr	r3, [r7, #8]
 800b324:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b326:	68bb      	ldr	r3, [r7, #8]
 800b328:	6959      	ldr	r1, [r3, #20]
 800b32a:	68bb      	ldr	r3, [r7, #8]
 800b32c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b32e:	4613      	mov	r3, r2
 800b330:	009b      	lsls	r3, r3, #2
 800b332:	4413      	add	r3, r2
 800b334:	009b      	lsls	r3, r3, #2
 800b336:	4a22      	ldr	r2, [pc, #136]	; (800b3c0 <xTaskPriorityInherit+0xd4>)
 800b338:	4413      	add	r3, r2
 800b33a:	4299      	cmp	r1, r3
 800b33c:	d101      	bne.n	800b342 <xTaskPriorityInherit+0x56>
 800b33e:	2301      	movs	r3, #1
 800b340:	e000      	b.n	800b344 <xTaskPriorityInherit+0x58>
 800b342:	2300      	movs	r3, #0
 800b344:	2b00      	cmp	r3, #0
 800b346:	d022      	beq.n	800b38e <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b348:	68bb      	ldr	r3, [r7, #8]
 800b34a:	3304      	adds	r3, #4
 800b34c:	4618      	mov	r0, r3
 800b34e:	f7fe f97b 	bl	8009648 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b352:	4b1a      	ldr	r3, [pc, #104]	; (800b3bc <xTaskPriorityInherit+0xd0>)
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b358:	68bb      	ldr	r3, [r7, #8]
 800b35a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b35c:	68bb      	ldr	r3, [r7, #8]
 800b35e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b360:	4b18      	ldr	r3, [pc, #96]	; (800b3c4 <xTaskPriorityInherit+0xd8>)
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	429a      	cmp	r2, r3
 800b366:	d903      	bls.n	800b370 <xTaskPriorityInherit+0x84>
 800b368:	68bb      	ldr	r3, [r7, #8]
 800b36a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b36c:	4a15      	ldr	r2, [pc, #84]	; (800b3c4 <xTaskPriorityInherit+0xd8>)
 800b36e:	6013      	str	r3, [r2, #0]
 800b370:	68bb      	ldr	r3, [r7, #8]
 800b372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b374:	4613      	mov	r3, r2
 800b376:	009b      	lsls	r3, r3, #2
 800b378:	4413      	add	r3, r2
 800b37a:	009b      	lsls	r3, r3, #2
 800b37c:	4a10      	ldr	r2, [pc, #64]	; (800b3c0 <xTaskPriorityInherit+0xd4>)
 800b37e:	441a      	add	r2, r3
 800b380:	68bb      	ldr	r3, [r7, #8]
 800b382:	3304      	adds	r3, #4
 800b384:	4619      	mov	r1, r3
 800b386:	4610      	mov	r0, r2
 800b388:	f7fe f901 	bl	800958e <vListInsertEnd>
 800b38c:	e004      	b.n	800b398 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b38e:	4b0b      	ldr	r3, [pc, #44]	; (800b3bc <xTaskPriorityInherit+0xd0>)
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b394:	68bb      	ldr	r3, [r7, #8]
 800b396:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b398:	2301      	movs	r3, #1
 800b39a:	60fb      	str	r3, [r7, #12]
 800b39c:	e008      	b.n	800b3b0 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b39e:	68bb      	ldr	r3, [r7, #8]
 800b3a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b3a2:	4b06      	ldr	r3, [pc, #24]	; (800b3bc <xTaskPriorityInherit+0xd0>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3a8:	429a      	cmp	r2, r3
 800b3aa:	d201      	bcs.n	800b3b0 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b3ac:	2301      	movs	r3, #1
 800b3ae:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
	}
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	3710      	adds	r7, #16
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	bd80      	pop	{r7, pc}
 800b3ba:	bf00      	nop
 800b3bc:	2000086c 	.word	0x2000086c
 800b3c0:	20000870 	.word	0x20000870
 800b3c4:	20000d48 	.word	0x20000d48

0800b3c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b086      	sub	sp, #24
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d054      	beq.n	800b488 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b3de:	4b2d      	ldr	r3, [pc, #180]	; (800b494 <xTaskPriorityDisinherit+0xcc>)
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	693a      	ldr	r2, [r7, #16]
 800b3e4:	429a      	cmp	r2, r3
 800b3e6:	d009      	beq.n	800b3fc <xTaskPriorityDisinherit+0x34>
 800b3e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3ec:	f383 8811 	msr	BASEPRI, r3
 800b3f0:	f3bf 8f6f 	isb	sy
 800b3f4:	f3bf 8f4f 	dsb	sy
 800b3f8:	60fb      	str	r3, [r7, #12]
 800b3fa:	e7fe      	b.n	800b3fa <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800b3fc:	693b      	ldr	r3, [r7, #16]
 800b3fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b400:	2b00      	cmp	r3, #0
 800b402:	d109      	bne.n	800b418 <xTaskPriorityDisinherit+0x50>
 800b404:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b408:	f383 8811 	msr	BASEPRI, r3
 800b40c:	f3bf 8f6f 	isb	sy
 800b410:	f3bf 8f4f 	dsb	sy
 800b414:	60bb      	str	r3, [r7, #8]
 800b416:	e7fe      	b.n	800b416 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800b418:	693b      	ldr	r3, [r7, #16]
 800b41a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b41c:	1e5a      	subs	r2, r3, #1
 800b41e:	693b      	ldr	r3, [r7, #16]
 800b420:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b422:	693b      	ldr	r3, [r7, #16]
 800b424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b426:	693b      	ldr	r3, [r7, #16]
 800b428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b42a:	429a      	cmp	r2, r3
 800b42c:	d02c      	beq.n	800b488 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b42e:	693b      	ldr	r3, [r7, #16]
 800b430:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b432:	2b00      	cmp	r3, #0
 800b434:	d128      	bne.n	800b488 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b436:	693b      	ldr	r3, [r7, #16]
 800b438:	3304      	adds	r3, #4
 800b43a:	4618      	mov	r0, r3
 800b43c:	f7fe f904 	bl	8009648 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b440:	693b      	ldr	r3, [r7, #16]
 800b442:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b444:	693b      	ldr	r3, [r7, #16]
 800b446:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b448:	693b      	ldr	r3, [r7, #16]
 800b44a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b44c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b450:	693b      	ldr	r3, [r7, #16]
 800b452:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b454:	693b      	ldr	r3, [r7, #16]
 800b456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b458:	4b0f      	ldr	r3, [pc, #60]	; (800b498 <xTaskPriorityDisinherit+0xd0>)
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	429a      	cmp	r2, r3
 800b45e:	d903      	bls.n	800b468 <xTaskPriorityDisinherit+0xa0>
 800b460:	693b      	ldr	r3, [r7, #16]
 800b462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b464:	4a0c      	ldr	r2, [pc, #48]	; (800b498 <xTaskPriorityDisinherit+0xd0>)
 800b466:	6013      	str	r3, [r2, #0]
 800b468:	693b      	ldr	r3, [r7, #16]
 800b46a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b46c:	4613      	mov	r3, r2
 800b46e:	009b      	lsls	r3, r3, #2
 800b470:	4413      	add	r3, r2
 800b472:	009b      	lsls	r3, r3, #2
 800b474:	4a09      	ldr	r2, [pc, #36]	; (800b49c <xTaskPriorityDisinherit+0xd4>)
 800b476:	441a      	add	r2, r3
 800b478:	693b      	ldr	r3, [r7, #16]
 800b47a:	3304      	adds	r3, #4
 800b47c:	4619      	mov	r1, r3
 800b47e:	4610      	mov	r0, r2
 800b480:	f7fe f885 	bl	800958e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b484:	2301      	movs	r3, #1
 800b486:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b488:	697b      	ldr	r3, [r7, #20]
	}
 800b48a:	4618      	mov	r0, r3
 800b48c:	3718      	adds	r7, #24
 800b48e:	46bd      	mov	sp, r7
 800b490:	bd80      	pop	{r7, pc}
 800b492:	bf00      	nop
 800b494:	2000086c 	.word	0x2000086c
 800b498:	20000d48 	.word	0x20000d48
 800b49c:	20000870 	.word	0x20000870

0800b4a0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b088      	sub	sp, #32
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
 800b4a8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b4ae:	2301      	movs	r3, #1
 800b4b0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d06d      	beq.n	800b594 <vTaskPriorityDisinheritAfterTimeout+0xf4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b4b8:	69bb      	ldr	r3, [r7, #24]
 800b4ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d109      	bne.n	800b4d4 <vTaskPriorityDisinheritAfterTimeout+0x34>
 800b4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4c4:	f383 8811 	msr	BASEPRI, r3
 800b4c8:	f3bf 8f6f 	isb	sy
 800b4cc:	f3bf 8f4f 	dsb	sy
 800b4d0:	60fb      	str	r3, [r7, #12]
 800b4d2:	e7fe      	b.n	800b4d2 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b4d4:	69bb      	ldr	r3, [r7, #24]
 800b4d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4d8:	683a      	ldr	r2, [r7, #0]
 800b4da:	429a      	cmp	r2, r3
 800b4dc:	d902      	bls.n	800b4e4 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	61fb      	str	r3, [r7, #28]
 800b4e2:	e002      	b.n	800b4ea <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b4e4:	69bb      	ldr	r3, [r7, #24]
 800b4e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4e8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b4ea:	69bb      	ldr	r3, [r7, #24]
 800b4ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4ee:	69fa      	ldr	r2, [r7, #28]
 800b4f0:	429a      	cmp	r2, r3
 800b4f2:	d04f      	beq.n	800b594 <vTaskPriorityDisinheritAfterTimeout+0xf4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b4f4:	69bb      	ldr	r3, [r7, #24]
 800b4f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4f8:	697a      	ldr	r2, [r7, #20]
 800b4fa:	429a      	cmp	r2, r3
 800b4fc:	d14a      	bne.n	800b594 <vTaskPriorityDisinheritAfterTimeout+0xf4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b4fe:	4b27      	ldr	r3, [pc, #156]	; (800b59c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	69ba      	ldr	r2, [r7, #24]
 800b504:	429a      	cmp	r2, r3
 800b506:	d109      	bne.n	800b51c <vTaskPriorityDisinheritAfterTimeout+0x7c>
 800b508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b50c:	f383 8811 	msr	BASEPRI, r3
 800b510:	f3bf 8f6f 	isb	sy
 800b514:	f3bf 8f4f 	dsb	sy
 800b518:	60bb      	str	r3, [r7, #8]
 800b51a:	e7fe      	b.n	800b51a <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b51c:	69bb      	ldr	r3, [r7, #24]
 800b51e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b520:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b522:	69bb      	ldr	r3, [r7, #24]
 800b524:	69fa      	ldr	r2, [r7, #28]
 800b526:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b528:	69bb      	ldr	r3, [r7, #24]
 800b52a:	699b      	ldr	r3, [r3, #24]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	db04      	blt.n	800b53a <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b530:	69fb      	ldr	r3, [r7, #28]
 800b532:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b536:	69bb      	ldr	r3, [r7, #24]
 800b538:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b53a:	69bb      	ldr	r3, [r7, #24]
 800b53c:	6959      	ldr	r1, [r3, #20]
 800b53e:	693a      	ldr	r2, [r7, #16]
 800b540:	4613      	mov	r3, r2
 800b542:	009b      	lsls	r3, r3, #2
 800b544:	4413      	add	r3, r2
 800b546:	009b      	lsls	r3, r3, #2
 800b548:	4a15      	ldr	r2, [pc, #84]	; (800b5a0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b54a:	4413      	add	r3, r2
 800b54c:	4299      	cmp	r1, r3
 800b54e:	d101      	bne.n	800b554 <vTaskPriorityDisinheritAfterTimeout+0xb4>
 800b550:	2301      	movs	r3, #1
 800b552:	e000      	b.n	800b556 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 800b554:	2300      	movs	r3, #0
 800b556:	2b00      	cmp	r3, #0
 800b558:	d01c      	beq.n	800b594 <vTaskPriorityDisinheritAfterTimeout+0xf4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b55a:	69bb      	ldr	r3, [r7, #24]
 800b55c:	3304      	adds	r3, #4
 800b55e:	4618      	mov	r0, r3
 800b560:	f7fe f872 	bl	8009648 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b564:	69bb      	ldr	r3, [r7, #24]
 800b566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b568:	4b0e      	ldr	r3, [pc, #56]	; (800b5a4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	429a      	cmp	r2, r3
 800b56e:	d903      	bls.n	800b578 <vTaskPriorityDisinheritAfterTimeout+0xd8>
 800b570:	69bb      	ldr	r3, [r7, #24]
 800b572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b574:	4a0b      	ldr	r2, [pc, #44]	; (800b5a4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800b576:	6013      	str	r3, [r2, #0]
 800b578:	69bb      	ldr	r3, [r7, #24]
 800b57a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b57c:	4613      	mov	r3, r2
 800b57e:	009b      	lsls	r3, r3, #2
 800b580:	4413      	add	r3, r2
 800b582:	009b      	lsls	r3, r3, #2
 800b584:	4a06      	ldr	r2, [pc, #24]	; (800b5a0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b586:	441a      	add	r2, r3
 800b588:	69bb      	ldr	r3, [r7, #24]
 800b58a:	3304      	adds	r3, #4
 800b58c:	4619      	mov	r1, r3
 800b58e:	4610      	mov	r0, r2
 800b590:	f7fd fffd 	bl	800958e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b594:	bf00      	nop
 800b596:	3720      	adds	r7, #32
 800b598:	46bd      	mov	sp, r7
 800b59a:	bd80      	pop	{r7, pc}
 800b59c:	2000086c 	.word	0x2000086c
 800b5a0:	20000870 	.word	0x20000870
 800b5a4:	20000d48 	.word	0x20000d48

0800b5a8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800b5a8:	b480      	push	{r7}
 800b5aa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b5ac:	4b07      	ldr	r3, [pc, #28]	; (800b5cc <pvTaskIncrementMutexHeldCount+0x24>)
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d004      	beq.n	800b5be <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b5b4:	4b05      	ldr	r3, [pc, #20]	; (800b5cc <pvTaskIncrementMutexHeldCount+0x24>)
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b5ba:	3201      	adds	r2, #1
 800b5bc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800b5be:	4b03      	ldr	r3, [pc, #12]	; (800b5cc <pvTaskIncrementMutexHeldCount+0x24>)
 800b5c0:	681b      	ldr	r3, [r3, #0]
	}
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ca:	4770      	bx	lr
 800b5cc:	2000086c 	.word	0x2000086c

0800b5d0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b084      	sub	sp, #16
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
 800b5d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b5da:	4b21      	ldr	r3, [pc, #132]	; (800b660 <prvAddCurrentTaskToDelayedList+0x90>)
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b5e0:	4b20      	ldr	r3, [pc, #128]	; (800b664 <prvAddCurrentTaskToDelayedList+0x94>)
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	3304      	adds	r3, #4
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	f7fe f82e 	bl	8009648 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5f2:	d10a      	bne.n	800b60a <prvAddCurrentTaskToDelayedList+0x3a>
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d007      	beq.n	800b60a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b5fa:	4b1a      	ldr	r3, [pc, #104]	; (800b664 <prvAddCurrentTaskToDelayedList+0x94>)
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	3304      	adds	r3, #4
 800b600:	4619      	mov	r1, r3
 800b602:	4819      	ldr	r0, [pc, #100]	; (800b668 <prvAddCurrentTaskToDelayedList+0x98>)
 800b604:	f7fd ffc3 	bl	800958e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b608:	e026      	b.n	800b658 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b60a:	68fa      	ldr	r2, [r7, #12]
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	4413      	add	r3, r2
 800b610:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b612:	4b14      	ldr	r3, [pc, #80]	; (800b664 <prvAddCurrentTaskToDelayedList+0x94>)
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	68ba      	ldr	r2, [r7, #8]
 800b618:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b61a:	68ba      	ldr	r2, [r7, #8]
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	429a      	cmp	r2, r3
 800b620:	d209      	bcs.n	800b636 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b622:	4b12      	ldr	r3, [pc, #72]	; (800b66c <prvAddCurrentTaskToDelayedList+0x9c>)
 800b624:	681a      	ldr	r2, [r3, #0]
 800b626:	4b0f      	ldr	r3, [pc, #60]	; (800b664 <prvAddCurrentTaskToDelayedList+0x94>)
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	3304      	adds	r3, #4
 800b62c:	4619      	mov	r1, r3
 800b62e:	4610      	mov	r0, r2
 800b630:	f7fd ffd1 	bl	80095d6 <vListInsert>
}
 800b634:	e010      	b.n	800b658 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b636:	4b0e      	ldr	r3, [pc, #56]	; (800b670 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b638:	681a      	ldr	r2, [r3, #0]
 800b63a:	4b0a      	ldr	r3, [pc, #40]	; (800b664 <prvAddCurrentTaskToDelayedList+0x94>)
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	3304      	adds	r3, #4
 800b640:	4619      	mov	r1, r3
 800b642:	4610      	mov	r0, r2
 800b644:	f7fd ffc7 	bl	80095d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b648:	4b0a      	ldr	r3, [pc, #40]	; (800b674 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	68ba      	ldr	r2, [r7, #8]
 800b64e:	429a      	cmp	r2, r3
 800b650:	d202      	bcs.n	800b658 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b652:	4a08      	ldr	r2, [pc, #32]	; (800b674 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b654:	68bb      	ldr	r3, [r7, #8]
 800b656:	6013      	str	r3, [r2, #0]
}
 800b658:	bf00      	nop
 800b65a:	3710      	adds	r7, #16
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bd80      	pop	{r7, pc}
 800b660:	20000d44 	.word	0x20000d44
 800b664:	2000086c 	.word	0x2000086c
 800b668:	20000d2c 	.word	0x20000d2c
 800b66c:	20000cfc 	.word	0x20000cfc
 800b670:	20000cf8 	.word	0x20000cf8
 800b674:	20000d60 	.word	0x20000d60

0800b678 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b08a      	sub	sp, #40	; 0x28
 800b67c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b67e:	2300      	movs	r3, #0
 800b680:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b682:	f000 fac3 	bl	800bc0c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b686:	4b1c      	ldr	r3, [pc, #112]	; (800b6f8 <xTimerCreateTimerTask+0x80>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d021      	beq.n	800b6d2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b68e:	2300      	movs	r3, #0
 800b690:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b692:	2300      	movs	r3, #0
 800b694:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b696:	1d3a      	adds	r2, r7, #4
 800b698:	f107 0108 	add.w	r1, r7, #8
 800b69c:	f107 030c 	add.w	r3, r7, #12
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	f7fd ff2d 	bl	8009500 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b6a6:	6879      	ldr	r1, [r7, #4]
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	68fa      	ldr	r2, [r7, #12]
 800b6ac:	9202      	str	r2, [sp, #8]
 800b6ae:	9301      	str	r3, [sp, #4]
 800b6b0:	2302      	movs	r3, #2
 800b6b2:	9300      	str	r3, [sp, #0]
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	460a      	mov	r2, r1
 800b6b8:	4910      	ldr	r1, [pc, #64]	; (800b6fc <xTimerCreateTimerTask+0x84>)
 800b6ba:	4811      	ldr	r0, [pc, #68]	; (800b700 <xTimerCreateTimerTask+0x88>)
 800b6bc:	f7fe ff52 	bl	800a564 <xTaskCreateStatic>
 800b6c0:	4602      	mov	r2, r0
 800b6c2:	4b10      	ldr	r3, [pc, #64]	; (800b704 <xTimerCreateTimerTask+0x8c>)
 800b6c4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b6c6:	4b0f      	ldr	r3, [pc, #60]	; (800b704 <xTimerCreateTimerTask+0x8c>)
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d001      	beq.n	800b6d2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b6d2:	697b      	ldr	r3, [r7, #20]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d109      	bne.n	800b6ec <xTimerCreateTimerTask+0x74>
 800b6d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6dc:	f383 8811 	msr	BASEPRI, r3
 800b6e0:	f3bf 8f6f 	isb	sy
 800b6e4:	f3bf 8f4f 	dsb	sy
 800b6e8:	613b      	str	r3, [r7, #16]
 800b6ea:	e7fe      	b.n	800b6ea <xTimerCreateTimerTask+0x72>
	return xReturn;
 800b6ec:	697b      	ldr	r3, [r7, #20]
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	3718      	adds	r7, #24
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}
 800b6f6:	bf00      	nop
 800b6f8:	20000d9c 	.word	0x20000d9c
 800b6fc:	0800d0c4 	.word	0x0800d0c4
 800b700:	0800b821 	.word	0x0800b821
 800b704:	20000da0 	.word	0x20000da0

0800b708 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b08a      	sub	sp, #40	; 0x28
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	60f8      	str	r0, [r7, #12]
 800b710:	60b9      	str	r1, [r7, #8]
 800b712:	607a      	str	r2, [r7, #4]
 800b714:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b716:	2300      	movs	r3, #0
 800b718:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d109      	bne.n	800b734 <xTimerGenericCommand+0x2c>
 800b720:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b724:	f383 8811 	msr	BASEPRI, r3
 800b728:	f3bf 8f6f 	isb	sy
 800b72c:	f3bf 8f4f 	dsb	sy
 800b730:	623b      	str	r3, [r7, #32]
 800b732:	e7fe      	b.n	800b732 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b734:	4b19      	ldr	r3, [pc, #100]	; (800b79c <xTimerGenericCommand+0x94>)
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d02a      	beq.n	800b792 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b73c:	68bb      	ldr	r3, [r7, #8]
 800b73e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b748:	68bb      	ldr	r3, [r7, #8]
 800b74a:	2b05      	cmp	r3, #5
 800b74c:	dc18      	bgt.n	800b780 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b74e:	f7ff fdaf 	bl	800b2b0 <xTaskGetSchedulerState>
 800b752:	4603      	mov	r3, r0
 800b754:	2b02      	cmp	r3, #2
 800b756:	d109      	bne.n	800b76c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b758:	4b10      	ldr	r3, [pc, #64]	; (800b79c <xTimerGenericCommand+0x94>)
 800b75a:	6818      	ldr	r0, [r3, #0]
 800b75c:	f107 0110 	add.w	r1, r7, #16
 800b760:	2300      	movs	r3, #0
 800b762:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b764:	f7fe f98a 	bl	8009a7c <xQueueGenericSend>
 800b768:	6278      	str	r0, [r7, #36]	; 0x24
 800b76a:	e012      	b.n	800b792 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b76c:	4b0b      	ldr	r3, [pc, #44]	; (800b79c <xTimerGenericCommand+0x94>)
 800b76e:	6818      	ldr	r0, [r3, #0]
 800b770:	f107 0110 	add.w	r1, r7, #16
 800b774:	2300      	movs	r3, #0
 800b776:	2200      	movs	r2, #0
 800b778:	f7fe f980 	bl	8009a7c <xQueueGenericSend>
 800b77c:	6278      	str	r0, [r7, #36]	; 0x24
 800b77e:	e008      	b.n	800b792 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b780:	4b06      	ldr	r3, [pc, #24]	; (800b79c <xTimerGenericCommand+0x94>)
 800b782:	6818      	ldr	r0, [r3, #0]
 800b784:	f107 0110 	add.w	r1, r7, #16
 800b788:	2300      	movs	r3, #0
 800b78a:	683a      	ldr	r2, [r7, #0]
 800b78c:	f7fe fa70 	bl	8009c70 <xQueueGenericSendFromISR>
 800b790:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b794:	4618      	mov	r0, r3
 800b796:	3728      	adds	r7, #40	; 0x28
 800b798:	46bd      	mov	sp, r7
 800b79a:	bd80      	pop	{r7, pc}
 800b79c:	20000d9c 	.word	0x20000d9c

0800b7a0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b088      	sub	sp, #32
 800b7a4:	af02      	add	r7, sp, #8
 800b7a6:	6078      	str	r0, [r7, #4]
 800b7a8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b7aa:	4b1c      	ldr	r3, [pc, #112]	; (800b81c <prvProcessExpiredTimer+0x7c>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	68db      	ldr	r3, [r3, #12]
 800b7b0:	68db      	ldr	r3, [r3, #12]
 800b7b2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b7b4:	697b      	ldr	r3, [r7, #20]
 800b7b6:	3304      	adds	r3, #4
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	f7fd ff45 	bl	8009648 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800b7be:	697b      	ldr	r3, [r7, #20]
 800b7c0:	69db      	ldr	r3, [r3, #28]
 800b7c2:	2b01      	cmp	r3, #1
 800b7c4:	d121      	bne.n	800b80a <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b7c6:	697b      	ldr	r3, [r7, #20]
 800b7c8:	699a      	ldr	r2, [r3, #24]
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	18d1      	adds	r1, r2, r3
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	683a      	ldr	r2, [r7, #0]
 800b7d2:	6978      	ldr	r0, [r7, #20]
 800b7d4:	f000 f8c8 	bl	800b968 <prvInsertTimerInActiveList>
 800b7d8:	4603      	mov	r3, r0
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d015      	beq.n	800b80a <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b7de:	2300      	movs	r3, #0
 800b7e0:	9300      	str	r3, [sp, #0]
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	687a      	ldr	r2, [r7, #4]
 800b7e6:	2100      	movs	r1, #0
 800b7e8:	6978      	ldr	r0, [r7, #20]
 800b7ea:	f7ff ff8d 	bl	800b708 <xTimerGenericCommand>
 800b7ee:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b7f0:	693b      	ldr	r3, [r7, #16]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d109      	bne.n	800b80a <prvProcessExpiredTimer+0x6a>
 800b7f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7fa:	f383 8811 	msr	BASEPRI, r3
 800b7fe:	f3bf 8f6f 	isb	sy
 800b802:	f3bf 8f4f 	dsb	sy
 800b806:	60fb      	str	r3, [r7, #12]
 800b808:	e7fe      	b.n	800b808 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b80a:	697b      	ldr	r3, [r7, #20]
 800b80c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b80e:	6978      	ldr	r0, [r7, #20]
 800b810:	4798      	blx	r3
}
 800b812:	bf00      	nop
 800b814:	3718      	adds	r7, #24
 800b816:	46bd      	mov	sp, r7
 800b818:	bd80      	pop	{r7, pc}
 800b81a:	bf00      	nop
 800b81c:	20000d94 	.word	0x20000d94

0800b820 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b084      	sub	sp, #16
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b828:	f107 0308 	add.w	r3, r7, #8
 800b82c:	4618      	mov	r0, r3
 800b82e:	f000 f857 	bl	800b8e0 <prvGetNextExpireTime>
 800b832:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b834:	68bb      	ldr	r3, [r7, #8]
 800b836:	4619      	mov	r1, r3
 800b838:	68f8      	ldr	r0, [r7, #12]
 800b83a:	f000 f803 	bl	800b844 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b83e:	f000 f8d5 	bl	800b9ec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b842:	e7f1      	b.n	800b828 <prvTimerTask+0x8>

0800b844 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b084      	sub	sp, #16
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
 800b84c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b84e:	f7ff f92f 	bl	800aab0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b852:	f107 0308 	add.w	r3, r7, #8
 800b856:	4618      	mov	r0, r3
 800b858:	f000 f866 	bl	800b928 <prvSampleTimeNow>
 800b85c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b85e:	68bb      	ldr	r3, [r7, #8]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d130      	bne.n	800b8c6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d10a      	bne.n	800b880 <prvProcessTimerOrBlockTask+0x3c>
 800b86a:	687a      	ldr	r2, [r7, #4]
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	429a      	cmp	r2, r3
 800b870:	d806      	bhi.n	800b880 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b872:	f7ff f92b 	bl	800aacc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b876:	68f9      	ldr	r1, [r7, #12]
 800b878:	6878      	ldr	r0, [r7, #4]
 800b87a:	f7ff ff91 	bl	800b7a0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b87e:	e024      	b.n	800b8ca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d008      	beq.n	800b898 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b886:	4b13      	ldr	r3, [pc, #76]	; (800b8d4 <prvProcessTimerOrBlockTask+0x90>)
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	bf0c      	ite	eq
 800b890:	2301      	moveq	r3, #1
 800b892:	2300      	movne	r3, #0
 800b894:	b2db      	uxtb	r3, r3
 800b896:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b898:	4b0f      	ldr	r3, [pc, #60]	; (800b8d8 <prvProcessTimerOrBlockTask+0x94>)
 800b89a:	6818      	ldr	r0, [r3, #0]
 800b89c:	687a      	ldr	r2, [r7, #4]
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	1ad3      	subs	r3, r2, r3
 800b8a2:	683a      	ldr	r2, [r7, #0]
 800b8a4:	4619      	mov	r1, r3
 800b8a6:	f7fe fe29 	bl	800a4fc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b8aa:	f7ff f90f 	bl	800aacc <xTaskResumeAll>
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d10a      	bne.n	800b8ca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b8b4:	4b09      	ldr	r3, [pc, #36]	; (800b8dc <prvProcessTimerOrBlockTask+0x98>)
 800b8b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8ba:	601a      	str	r2, [r3, #0]
 800b8bc:	f3bf 8f4f 	dsb	sy
 800b8c0:	f3bf 8f6f 	isb	sy
}
 800b8c4:	e001      	b.n	800b8ca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b8c6:	f7ff f901 	bl	800aacc <xTaskResumeAll>
}
 800b8ca:	bf00      	nop
 800b8cc:	3710      	adds	r7, #16
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bd80      	pop	{r7, pc}
 800b8d2:	bf00      	nop
 800b8d4:	20000d98 	.word	0x20000d98
 800b8d8:	20000d9c 	.word	0x20000d9c
 800b8dc:	e000ed04 	.word	0xe000ed04

0800b8e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b8e0:	b480      	push	{r7}
 800b8e2:	b085      	sub	sp, #20
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b8e8:	4b0e      	ldr	r3, [pc, #56]	; (800b924 <prvGetNextExpireTime+0x44>)
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	bf0c      	ite	eq
 800b8f2:	2301      	moveq	r3, #1
 800b8f4:	2300      	movne	r3, #0
 800b8f6:	b2db      	uxtb	r3, r3
 800b8f8:	461a      	mov	r2, r3
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d105      	bne.n	800b912 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b906:	4b07      	ldr	r3, [pc, #28]	; (800b924 <prvGetNextExpireTime+0x44>)
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	68db      	ldr	r3, [r3, #12]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	60fb      	str	r3, [r7, #12]
 800b910:	e001      	b.n	800b916 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b912:	2300      	movs	r3, #0
 800b914:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b916:	68fb      	ldr	r3, [r7, #12]
}
 800b918:	4618      	mov	r0, r3
 800b91a:	3714      	adds	r7, #20
 800b91c:	46bd      	mov	sp, r7
 800b91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b922:	4770      	bx	lr
 800b924:	20000d94 	.word	0x20000d94

0800b928 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b084      	sub	sp, #16
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b930:	f7ff f968 	bl	800ac04 <xTaskGetTickCount>
 800b934:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b936:	4b0b      	ldr	r3, [pc, #44]	; (800b964 <prvSampleTimeNow+0x3c>)
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	68fa      	ldr	r2, [r7, #12]
 800b93c:	429a      	cmp	r2, r3
 800b93e:	d205      	bcs.n	800b94c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b940:	f000 f904 	bl	800bb4c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2201      	movs	r2, #1
 800b948:	601a      	str	r2, [r3, #0]
 800b94a:	e002      	b.n	800b952 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2200      	movs	r2, #0
 800b950:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b952:	4a04      	ldr	r2, [pc, #16]	; (800b964 <prvSampleTimeNow+0x3c>)
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b958:	68fb      	ldr	r3, [r7, #12]
}
 800b95a:	4618      	mov	r0, r3
 800b95c:	3710      	adds	r7, #16
 800b95e:	46bd      	mov	sp, r7
 800b960:	bd80      	pop	{r7, pc}
 800b962:	bf00      	nop
 800b964:	20000da4 	.word	0x20000da4

0800b968 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b086      	sub	sp, #24
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	60f8      	str	r0, [r7, #12]
 800b970:	60b9      	str	r1, [r7, #8]
 800b972:	607a      	str	r2, [r7, #4]
 800b974:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b976:	2300      	movs	r3, #0
 800b978:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	68ba      	ldr	r2, [r7, #8]
 800b97e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	68fa      	ldr	r2, [r7, #12]
 800b984:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b986:	68ba      	ldr	r2, [r7, #8]
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	429a      	cmp	r2, r3
 800b98c:	d812      	bhi.n	800b9b4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b98e:	687a      	ldr	r2, [r7, #4]
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	1ad2      	subs	r2, r2, r3
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	699b      	ldr	r3, [r3, #24]
 800b998:	429a      	cmp	r2, r3
 800b99a:	d302      	bcc.n	800b9a2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b99c:	2301      	movs	r3, #1
 800b99e:	617b      	str	r3, [r7, #20]
 800b9a0:	e01b      	b.n	800b9da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b9a2:	4b10      	ldr	r3, [pc, #64]	; (800b9e4 <prvInsertTimerInActiveList+0x7c>)
 800b9a4:	681a      	ldr	r2, [r3, #0]
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	3304      	adds	r3, #4
 800b9aa:	4619      	mov	r1, r3
 800b9ac:	4610      	mov	r0, r2
 800b9ae:	f7fd fe12 	bl	80095d6 <vListInsert>
 800b9b2:	e012      	b.n	800b9da <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b9b4:	687a      	ldr	r2, [r7, #4]
 800b9b6:	683b      	ldr	r3, [r7, #0]
 800b9b8:	429a      	cmp	r2, r3
 800b9ba:	d206      	bcs.n	800b9ca <prvInsertTimerInActiveList+0x62>
 800b9bc:	68ba      	ldr	r2, [r7, #8]
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	429a      	cmp	r2, r3
 800b9c2:	d302      	bcc.n	800b9ca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b9c4:	2301      	movs	r3, #1
 800b9c6:	617b      	str	r3, [r7, #20]
 800b9c8:	e007      	b.n	800b9da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b9ca:	4b07      	ldr	r3, [pc, #28]	; (800b9e8 <prvInsertTimerInActiveList+0x80>)
 800b9cc:	681a      	ldr	r2, [r3, #0]
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	3304      	adds	r3, #4
 800b9d2:	4619      	mov	r1, r3
 800b9d4:	4610      	mov	r0, r2
 800b9d6:	f7fd fdfe 	bl	80095d6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b9da:	697b      	ldr	r3, [r7, #20]
}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	3718      	adds	r7, #24
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	bd80      	pop	{r7, pc}
 800b9e4:	20000d98 	.word	0x20000d98
 800b9e8:	20000d94 	.word	0x20000d94

0800b9ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b08e      	sub	sp, #56	; 0x38
 800b9f0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b9f2:	e099      	b.n	800bb28 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	da17      	bge.n	800ba2a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b9fa:	1d3b      	adds	r3, r7, #4
 800b9fc:	3304      	adds	r3, #4
 800b9fe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ba00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d109      	bne.n	800ba1a <prvProcessReceivedCommands+0x2e>
 800ba06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba0a:	f383 8811 	msr	BASEPRI, r3
 800ba0e:	f3bf 8f6f 	isb	sy
 800ba12:	f3bf 8f4f 	dsb	sy
 800ba16:	61fb      	str	r3, [r7, #28]
 800ba18:	e7fe      	b.n	800ba18 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ba1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ba20:	6850      	ldr	r0, [r2, #4]
 800ba22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ba24:	6892      	ldr	r2, [r2, #8]
 800ba26:	4611      	mov	r1, r2
 800ba28:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	db7a      	blt.n	800bb26 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ba34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba36:	695b      	ldr	r3, [r3, #20]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d004      	beq.n	800ba46 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ba3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba3e:	3304      	adds	r3, #4
 800ba40:	4618      	mov	r0, r3
 800ba42:	f7fd fe01 	bl	8009648 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ba46:	463b      	mov	r3, r7
 800ba48:	4618      	mov	r0, r3
 800ba4a:	f7ff ff6d 	bl	800b928 <prvSampleTimeNow>
 800ba4e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2b09      	cmp	r3, #9
 800ba54:	d868      	bhi.n	800bb28 <prvProcessReceivedCommands+0x13c>
 800ba56:	a201      	add	r2, pc, #4	; (adr r2, 800ba5c <prvProcessReceivedCommands+0x70>)
 800ba58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba5c:	0800ba85 	.word	0x0800ba85
 800ba60:	0800ba85 	.word	0x0800ba85
 800ba64:	0800ba85 	.word	0x0800ba85
 800ba68:	0800bb29 	.word	0x0800bb29
 800ba6c:	0800badf 	.word	0x0800badf
 800ba70:	0800bb15 	.word	0x0800bb15
 800ba74:	0800ba85 	.word	0x0800ba85
 800ba78:	0800ba85 	.word	0x0800ba85
 800ba7c:	0800bb29 	.word	0x0800bb29
 800ba80:	0800badf 	.word	0x0800badf
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ba84:	68ba      	ldr	r2, [r7, #8]
 800ba86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba88:	699b      	ldr	r3, [r3, #24]
 800ba8a:	18d1      	adds	r1, r2, r3
 800ba8c:	68bb      	ldr	r3, [r7, #8]
 800ba8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba92:	f7ff ff69 	bl	800b968 <prvInsertTimerInActiveList>
 800ba96:	4603      	mov	r3, r0
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d045      	beq.n	800bb28 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ba9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800baa2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800baa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baa6:	69db      	ldr	r3, [r3, #28]
 800baa8:	2b01      	cmp	r3, #1
 800baaa:	d13d      	bne.n	800bb28 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800baac:	68ba      	ldr	r2, [r7, #8]
 800baae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bab0:	699b      	ldr	r3, [r3, #24]
 800bab2:	441a      	add	r2, r3
 800bab4:	2300      	movs	r3, #0
 800bab6:	9300      	str	r3, [sp, #0]
 800bab8:	2300      	movs	r3, #0
 800baba:	2100      	movs	r1, #0
 800babc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800babe:	f7ff fe23 	bl	800b708 <xTimerGenericCommand>
 800bac2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bac4:	6a3b      	ldr	r3, [r7, #32]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d12e      	bne.n	800bb28 <prvProcessReceivedCommands+0x13c>
 800baca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bace:	f383 8811 	msr	BASEPRI, r3
 800bad2:	f3bf 8f6f 	isb	sy
 800bad6:	f3bf 8f4f 	dsb	sy
 800bada:	61bb      	str	r3, [r7, #24]
 800badc:	e7fe      	b.n	800badc <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bade:	68ba      	ldr	r2, [r7, #8]
 800bae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bae2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bae6:	699b      	ldr	r3, [r3, #24]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d109      	bne.n	800bb00 <prvProcessReceivedCommands+0x114>
 800baec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baf0:	f383 8811 	msr	BASEPRI, r3
 800baf4:	f3bf 8f6f 	isb	sy
 800baf8:	f3bf 8f4f 	dsb	sy
 800bafc:	617b      	str	r3, [r7, #20]
 800bafe:	e7fe      	b.n	800bafe <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bb00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb02:	699a      	ldr	r2, [r3, #24]
 800bb04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb06:	18d1      	adds	r1, r2, r3
 800bb08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb0e:	f7ff ff2b 	bl	800b968 <prvInsertTimerInActiveList>
					break;
 800bb12:	e009      	b.n	800bb28 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800bb14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb16:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d104      	bne.n	800bb28 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 800bb1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb20:	f000 fbb8 	bl	800c294 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bb24:	e000      	b.n	800bb28 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800bb26:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bb28:	4b07      	ldr	r3, [pc, #28]	; (800bb48 <prvProcessReceivedCommands+0x15c>)
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	1d39      	adds	r1, r7, #4
 800bb2e:	2200      	movs	r2, #0
 800bb30:	4618      	mov	r0, r3
 800bb32:	f7fe f931 	bl	8009d98 <xQueueReceive>
 800bb36:	4603      	mov	r3, r0
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	f47f af5b 	bne.w	800b9f4 <prvProcessReceivedCommands+0x8>
	}
}
 800bb3e:	bf00      	nop
 800bb40:	3730      	adds	r7, #48	; 0x30
 800bb42:	46bd      	mov	sp, r7
 800bb44:	bd80      	pop	{r7, pc}
 800bb46:	bf00      	nop
 800bb48:	20000d9c 	.word	0x20000d9c

0800bb4c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b088      	sub	sp, #32
 800bb50:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bb52:	e044      	b.n	800bbde <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bb54:	4b2b      	ldr	r3, [pc, #172]	; (800bc04 <prvSwitchTimerLists+0xb8>)
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	68db      	ldr	r3, [r3, #12]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bb5e:	4b29      	ldr	r3, [pc, #164]	; (800bc04 <prvSwitchTimerLists+0xb8>)
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	68db      	ldr	r3, [r3, #12]
 800bb64:	68db      	ldr	r3, [r3, #12]
 800bb66:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	3304      	adds	r3, #4
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	f7fd fd6b 	bl	8009648 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb76:	68f8      	ldr	r0, [r7, #12]
 800bb78:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	69db      	ldr	r3, [r3, #28]
 800bb7e:	2b01      	cmp	r3, #1
 800bb80:	d12d      	bne.n	800bbde <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	699b      	ldr	r3, [r3, #24]
 800bb86:	693a      	ldr	r2, [r7, #16]
 800bb88:	4413      	add	r3, r2
 800bb8a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bb8c:	68ba      	ldr	r2, [r7, #8]
 800bb8e:	693b      	ldr	r3, [r7, #16]
 800bb90:	429a      	cmp	r2, r3
 800bb92:	d90e      	bls.n	800bbb2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	68ba      	ldr	r2, [r7, #8]
 800bb98:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	68fa      	ldr	r2, [r7, #12]
 800bb9e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bba0:	4b18      	ldr	r3, [pc, #96]	; (800bc04 <prvSwitchTimerLists+0xb8>)
 800bba2:	681a      	ldr	r2, [r3, #0]
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	3304      	adds	r3, #4
 800bba8:	4619      	mov	r1, r3
 800bbaa:	4610      	mov	r0, r2
 800bbac:	f7fd fd13 	bl	80095d6 <vListInsert>
 800bbb0:	e015      	b.n	800bbde <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	9300      	str	r3, [sp, #0]
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	693a      	ldr	r2, [r7, #16]
 800bbba:	2100      	movs	r1, #0
 800bbbc:	68f8      	ldr	r0, [r7, #12]
 800bbbe:	f7ff fda3 	bl	800b708 <xTimerGenericCommand>
 800bbc2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d109      	bne.n	800bbde <prvSwitchTimerLists+0x92>
 800bbca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbce:	f383 8811 	msr	BASEPRI, r3
 800bbd2:	f3bf 8f6f 	isb	sy
 800bbd6:	f3bf 8f4f 	dsb	sy
 800bbda:	603b      	str	r3, [r7, #0]
 800bbdc:	e7fe      	b.n	800bbdc <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bbde:	4b09      	ldr	r3, [pc, #36]	; (800bc04 <prvSwitchTimerLists+0xb8>)
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d1b5      	bne.n	800bb54 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bbe8:	4b06      	ldr	r3, [pc, #24]	; (800bc04 <prvSwitchTimerLists+0xb8>)
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bbee:	4b06      	ldr	r3, [pc, #24]	; (800bc08 <prvSwitchTimerLists+0xbc>)
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	4a04      	ldr	r2, [pc, #16]	; (800bc04 <prvSwitchTimerLists+0xb8>)
 800bbf4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bbf6:	4a04      	ldr	r2, [pc, #16]	; (800bc08 <prvSwitchTimerLists+0xbc>)
 800bbf8:	697b      	ldr	r3, [r7, #20]
 800bbfa:	6013      	str	r3, [r2, #0]
}
 800bbfc:	bf00      	nop
 800bbfe:	3718      	adds	r7, #24
 800bc00:	46bd      	mov	sp, r7
 800bc02:	bd80      	pop	{r7, pc}
 800bc04:	20000d94 	.word	0x20000d94
 800bc08:	20000d98 	.word	0x20000d98

0800bc0c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b082      	sub	sp, #8
 800bc10:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bc12:	f000 f963 	bl	800bedc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bc16:	4b15      	ldr	r3, [pc, #84]	; (800bc6c <prvCheckForValidListAndQueue+0x60>)
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d120      	bne.n	800bc60 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bc1e:	4814      	ldr	r0, [pc, #80]	; (800bc70 <prvCheckForValidListAndQueue+0x64>)
 800bc20:	f7fd fc88 	bl	8009534 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bc24:	4813      	ldr	r0, [pc, #76]	; (800bc74 <prvCheckForValidListAndQueue+0x68>)
 800bc26:	f7fd fc85 	bl	8009534 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bc2a:	4b13      	ldr	r3, [pc, #76]	; (800bc78 <prvCheckForValidListAndQueue+0x6c>)
 800bc2c:	4a10      	ldr	r2, [pc, #64]	; (800bc70 <prvCheckForValidListAndQueue+0x64>)
 800bc2e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bc30:	4b12      	ldr	r3, [pc, #72]	; (800bc7c <prvCheckForValidListAndQueue+0x70>)
 800bc32:	4a10      	ldr	r2, [pc, #64]	; (800bc74 <prvCheckForValidListAndQueue+0x68>)
 800bc34:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bc36:	2300      	movs	r3, #0
 800bc38:	9300      	str	r3, [sp, #0]
 800bc3a:	4b11      	ldr	r3, [pc, #68]	; (800bc80 <prvCheckForValidListAndQueue+0x74>)
 800bc3c:	4a11      	ldr	r2, [pc, #68]	; (800bc84 <prvCheckForValidListAndQueue+0x78>)
 800bc3e:	2110      	movs	r1, #16
 800bc40:	200a      	movs	r0, #10
 800bc42:	f7fd fd93 	bl	800976c <xQueueGenericCreateStatic>
 800bc46:	4602      	mov	r2, r0
 800bc48:	4b08      	ldr	r3, [pc, #32]	; (800bc6c <prvCheckForValidListAndQueue+0x60>)
 800bc4a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bc4c:	4b07      	ldr	r3, [pc, #28]	; (800bc6c <prvCheckForValidListAndQueue+0x60>)
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d005      	beq.n	800bc60 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bc54:	4b05      	ldr	r3, [pc, #20]	; (800bc6c <prvCheckForValidListAndQueue+0x60>)
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	490b      	ldr	r1, [pc, #44]	; (800bc88 <prvCheckForValidListAndQueue+0x7c>)
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	f7fe fc26 	bl	800a4ac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bc60:	f000 f96a 	bl	800bf38 <vPortExitCritical>
}
 800bc64:	bf00      	nop
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bd80      	pop	{r7, pc}
 800bc6a:	bf00      	nop
 800bc6c:	20000d9c 	.word	0x20000d9c
 800bc70:	20000d6c 	.word	0x20000d6c
 800bc74:	20000d80 	.word	0x20000d80
 800bc78:	20000d94 	.word	0x20000d94
 800bc7c:	20000d98 	.word	0x20000d98
 800bc80:	20000e48 	.word	0x20000e48
 800bc84:	20000da8 	.word	0x20000da8
 800bc88:	0800d0cc 	.word	0x0800d0cc

0800bc8c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bc8c:	b480      	push	{r7}
 800bc8e:	b085      	sub	sp, #20
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	60f8      	str	r0, [r7, #12]
 800bc94:	60b9      	str	r1, [r7, #8]
 800bc96:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	3b04      	subs	r3, #4
 800bc9c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bca4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	3b04      	subs	r3, #4
 800bcaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bcac:	68bb      	ldr	r3, [r7, #8]
 800bcae:	f023 0201 	bic.w	r2, r3, #1
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	3b04      	subs	r3, #4
 800bcba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bcbc:	4a0c      	ldr	r2, [pc, #48]	; (800bcf0 <pxPortInitialiseStack+0x64>)
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	3b14      	subs	r3, #20
 800bcc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bcc8:	687a      	ldr	r2, [r7, #4]
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	3b04      	subs	r3, #4
 800bcd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	f06f 0202 	mvn.w	r2, #2
 800bcda:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	3b20      	subs	r3, #32
 800bce0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bce2:	68fb      	ldr	r3, [r7, #12]
}
 800bce4:	4618      	mov	r0, r3
 800bce6:	3714      	adds	r7, #20
 800bce8:	46bd      	mov	sp, r7
 800bcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcee:	4770      	bx	lr
 800bcf0:	0800bcf5 	.word	0x0800bcf5

0800bcf4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bcf4:	b480      	push	{r7}
 800bcf6:	b085      	sub	sp, #20
 800bcf8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bcfe:	4b11      	ldr	r3, [pc, #68]	; (800bd44 <prvTaskExitError+0x50>)
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd06:	d009      	beq.n	800bd1c <prvTaskExitError+0x28>
 800bd08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd0c:	f383 8811 	msr	BASEPRI, r3
 800bd10:	f3bf 8f6f 	isb	sy
 800bd14:	f3bf 8f4f 	dsb	sy
 800bd18:	60fb      	str	r3, [r7, #12]
 800bd1a:	e7fe      	b.n	800bd1a <prvTaskExitError+0x26>
 800bd1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd20:	f383 8811 	msr	BASEPRI, r3
 800bd24:	f3bf 8f6f 	isb	sy
 800bd28:	f3bf 8f4f 	dsb	sy
 800bd2c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bd2e:	bf00      	nop
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d0fc      	beq.n	800bd30 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bd36:	bf00      	nop
 800bd38:	3714      	adds	r7, #20
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd40:	4770      	bx	lr
 800bd42:	bf00      	nop
 800bd44:	2000011c 	.word	0x2000011c
	...

0800bd50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bd50:	4b07      	ldr	r3, [pc, #28]	; (800bd70 <pxCurrentTCBConst2>)
 800bd52:	6819      	ldr	r1, [r3, #0]
 800bd54:	6808      	ldr	r0, [r1, #0]
 800bd56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd5a:	f380 8809 	msr	PSP, r0
 800bd5e:	f3bf 8f6f 	isb	sy
 800bd62:	f04f 0000 	mov.w	r0, #0
 800bd66:	f380 8811 	msr	BASEPRI, r0
 800bd6a:	4770      	bx	lr
 800bd6c:	f3af 8000 	nop.w

0800bd70 <pxCurrentTCBConst2>:
 800bd70:	2000086c 	.word	0x2000086c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bd74:	bf00      	nop
 800bd76:	bf00      	nop

0800bd78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bd78:	4808      	ldr	r0, [pc, #32]	; (800bd9c <prvPortStartFirstTask+0x24>)
 800bd7a:	6800      	ldr	r0, [r0, #0]
 800bd7c:	6800      	ldr	r0, [r0, #0]
 800bd7e:	f380 8808 	msr	MSP, r0
 800bd82:	f04f 0000 	mov.w	r0, #0
 800bd86:	f380 8814 	msr	CONTROL, r0
 800bd8a:	b662      	cpsie	i
 800bd8c:	b661      	cpsie	f
 800bd8e:	f3bf 8f4f 	dsb	sy
 800bd92:	f3bf 8f6f 	isb	sy
 800bd96:	df00      	svc	0
 800bd98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bd9a:	bf00      	nop
 800bd9c:	e000ed08 	.word	0xe000ed08

0800bda0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b086      	sub	sp, #24
 800bda4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bda6:	4b44      	ldr	r3, [pc, #272]	; (800beb8 <xPortStartScheduler+0x118>)
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	4a44      	ldr	r2, [pc, #272]	; (800bebc <xPortStartScheduler+0x11c>)
 800bdac:	4293      	cmp	r3, r2
 800bdae:	d109      	bne.n	800bdc4 <xPortStartScheduler+0x24>
 800bdb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdb4:	f383 8811 	msr	BASEPRI, r3
 800bdb8:	f3bf 8f6f 	isb	sy
 800bdbc:	f3bf 8f4f 	dsb	sy
 800bdc0:	613b      	str	r3, [r7, #16]
 800bdc2:	e7fe      	b.n	800bdc2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bdc4:	4b3c      	ldr	r3, [pc, #240]	; (800beb8 <xPortStartScheduler+0x118>)
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	4a3d      	ldr	r2, [pc, #244]	; (800bec0 <xPortStartScheduler+0x120>)
 800bdca:	4293      	cmp	r3, r2
 800bdcc:	d109      	bne.n	800bde2 <xPortStartScheduler+0x42>
 800bdce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdd2:	f383 8811 	msr	BASEPRI, r3
 800bdd6:	f3bf 8f6f 	isb	sy
 800bdda:	f3bf 8f4f 	dsb	sy
 800bdde:	60fb      	str	r3, [r7, #12]
 800bde0:	e7fe      	b.n	800bde0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bde2:	4b38      	ldr	r3, [pc, #224]	; (800bec4 <xPortStartScheduler+0x124>)
 800bde4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bde6:	697b      	ldr	r3, [r7, #20]
 800bde8:	781b      	ldrb	r3, [r3, #0]
 800bdea:	b2db      	uxtb	r3, r3
 800bdec:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bdee:	697b      	ldr	r3, [r7, #20]
 800bdf0:	22ff      	movs	r2, #255	; 0xff
 800bdf2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bdf4:	697b      	ldr	r3, [r7, #20]
 800bdf6:	781b      	ldrb	r3, [r3, #0]
 800bdf8:	b2db      	uxtb	r3, r3
 800bdfa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bdfc:	78fb      	ldrb	r3, [r7, #3]
 800bdfe:	b2db      	uxtb	r3, r3
 800be00:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800be04:	b2da      	uxtb	r2, r3
 800be06:	4b30      	ldr	r3, [pc, #192]	; (800bec8 <xPortStartScheduler+0x128>)
 800be08:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800be0a:	4b30      	ldr	r3, [pc, #192]	; (800becc <xPortStartScheduler+0x12c>)
 800be0c:	2207      	movs	r2, #7
 800be0e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800be10:	e009      	b.n	800be26 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800be12:	4b2e      	ldr	r3, [pc, #184]	; (800becc <xPortStartScheduler+0x12c>)
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	3b01      	subs	r3, #1
 800be18:	4a2c      	ldr	r2, [pc, #176]	; (800becc <xPortStartScheduler+0x12c>)
 800be1a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800be1c:	78fb      	ldrb	r3, [r7, #3]
 800be1e:	b2db      	uxtb	r3, r3
 800be20:	005b      	lsls	r3, r3, #1
 800be22:	b2db      	uxtb	r3, r3
 800be24:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800be26:	78fb      	ldrb	r3, [r7, #3]
 800be28:	b2db      	uxtb	r3, r3
 800be2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be2e:	2b80      	cmp	r3, #128	; 0x80
 800be30:	d0ef      	beq.n	800be12 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800be32:	4b26      	ldr	r3, [pc, #152]	; (800becc <xPortStartScheduler+0x12c>)
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	f1c3 0307 	rsb	r3, r3, #7
 800be3a:	2b04      	cmp	r3, #4
 800be3c:	d009      	beq.n	800be52 <xPortStartScheduler+0xb2>
 800be3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be42:	f383 8811 	msr	BASEPRI, r3
 800be46:	f3bf 8f6f 	isb	sy
 800be4a:	f3bf 8f4f 	dsb	sy
 800be4e:	60bb      	str	r3, [r7, #8]
 800be50:	e7fe      	b.n	800be50 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800be52:	4b1e      	ldr	r3, [pc, #120]	; (800becc <xPortStartScheduler+0x12c>)
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	021b      	lsls	r3, r3, #8
 800be58:	4a1c      	ldr	r2, [pc, #112]	; (800becc <xPortStartScheduler+0x12c>)
 800be5a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800be5c:	4b1b      	ldr	r3, [pc, #108]	; (800becc <xPortStartScheduler+0x12c>)
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800be64:	4a19      	ldr	r2, [pc, #100]	; (800becc <xPortStartScheduler+0x12c>)
 800be66:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	b2da      	uxtb	r2, r3
 800be6c:	697b      	ldr	r3, [r7, #20]
 800be6e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800be70:	4b17      	ldr	r3, [pc, #92]	; (800bed0 <xPortStartScheduler+0x130>)
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	4a16      	ldr	r2, [pc, #88]	; (800bed0 <xPortStartScheduler+0x130>)
 800be76:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800be7a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800be7c:	4b14      	ldr	r3, [pc, #80]	; (800bed0 <xPortStartScheduler+0x130>)
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	4a13      	ldr	r2, [pc, #76]	; (800bed0 <xPortStartScheduler+0x130>)
 800be82:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800be86:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800be88:	f000 f8d6 	bl	800c038 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800be8c:	4b11      	ldr	r3, [pc, #68]	; (800bed4 <xPortStartScheduler+0x134>)
 800be8e:	2200      	movs	r2, #0
 800be90:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800be92:	f000 f8f5 	bl	800c080 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800be96:	4b10      	ldr	r3, [pc, #64]	; (800bed8 <xPortStartScheduler+0x138>)
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	4a0f      	ldr	r2, [pc, #60]	; (800bed8 <xPortStartScheduler+0x138>)
 800be9c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bea0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bea2:	f7ff ff69 	bl	800bd78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bea6:	f7fe ff8d 	bl	800adc4 <vTaskSwitchContext>
	prvTaskExitError();
 800beaa:	f7ff ff23 	bl	800bcf4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800beae:	2300      	movs	r3, #0
}
 800beb0:	4618      	mov	r0, r3
 800beb2:	3718      	adds	r7, #24
 800beb4:	46bd      	mov	sp, r7
 800beb6:	bd80      	pop	{r7, pc}
 800beb8:	e000ed00 	.word	0xe000ed00
 800bebc:	410fc271 	.word	0x410fc271
 800bec0:	410fc270 	.word	0x410fc270
 800bec4:	e000e400 	.word	0xe000e400
 800bec8:	20000e98 	.word	0x20000e98
 800becc:	20000e9c 	.word	0x20000e9c
 800bed0:	e000ed20 	.word	0xe000ed20
 800bed4:	2000011c 	.word	0x2000011c
 800bed8:	e000ef34 	.word	0xe000ef34

0800bedc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bedc:	b480      	push	{r7}
 800bede:	b083      	sub	sp, #12
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bee6:	f383 8811 	msr	BASEPRI, r3
 800beea:	f3bf 8f6f 	isb	sy
 800beee:	f3bf 8f4f 	dsb	sy
 800bef2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bef4:	4b0e      	ldr	r3, [pc, #56]	; (800bf30 <vPortEnterCritical+0x54>)
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	3301      	adds	r3, #1
 800befa:	4a0d      	ldr	r2, [pc, #52]	; (800bf30 <vPortEnterCritical+0x54>)
 800befc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800befe:	4b0c      	ldr	r3, [pc, #48]	; (800bf30 <vPortEnterCritical+0x54>)
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	2b01      	cmp	r3, #1
 800bf04:	d10e      	bne.n	800bf24 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bf06:	4b0b      	ldr	r3, [pc, #44]	; (800bf34 <vPortEnterCritical+0x58>)
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	b2db      	uxtb	r3, r3
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d009      	beq.n	800bf24 <vPortEnterCritical+0x48>
 800bf10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf14:	f383 8811 	msr	BASEPRI, r3
 800bf18:	f3bf 8f6f 	isb	sy
 800bf1c:	f3bf 8f4f 	dsb	sy
 800bf20:	603b      	str	r3, [r7, #0]
 800bf22:	e7fe      	b.n	800bf22 <vPortEnterCritical+0x46>
	}
}
 800bf24:	bf00      	nop
 800bf26:	370c      	adds	r7, #12
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2e:	4770      	bx	lr
 800bf30:	2000011c 	.word	0x2000011c
 800bf34:	e000ed04 	.word	0xe000ed04

0800bf38 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bf38:	b480      	push	{r7}
 800bf3a:	b083      	sub	sp, #12
 800bf3c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bf3e:	4b11      	ldr	r3, [pc, #68]	; (800bf84 <vPortExitCritical+0x4c>)
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d109      	bne.n	800bf5a <vPortExitCritical+0x22>
 800bf46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf4a:	f383 8811 	msr	BASEPRI, r3
 800bf4e:	f3bf 8f6f 	isb	sy
 800bf52:	f3bf 8f4f 	dsb	sy
 800bf56:	607b      	str	r3, [r7, #4]
 800bf58:	e7fe      	b.n	800bf58 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800bf5a:	4b0a      	ldr	r3, [pc, #40]	; (800bf84 <vPortExitCritical+0x4c>)
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	3b01      	subs	r3, #1
 800bf60:	4a08      	ldr	r2, [pc, #32]	; (800bf84 <vPortExitCritical+0x4c>)
 800bf62:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bf64:	4b07      	ldr	r3, [pc, #28]	; (800bf84 <vPortExitCritical+0x4c>)
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d104      	bne.n	800bf76 <vPortExitCritical+0x3e>
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800bf76:	bf00      	nop
 800bf78:	370c      	adds	r7, #12
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf80:	4770      	bx	lr
 800bf82:	bf00      	nop
 800bf84:	2000011c 	.word	0x2000011c
	...

0800bf90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bf90:	f3ef 8009 	mrs	r0, PSP
 800bf94:	f3bf 8f6f 	isb	sy
 800bf98:	4b15      	ldr	r3, [pc, #84]	; (800bff0 <pxCurrentTCBConst>)
 800bf9a:	681a      	ldr	r2, [r3, #0]
 800bf9c:	f01e 0f10 	tst.w	lr, #16
 800bfa0:	bf08      	it	eq
 800bfa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bfa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfaa:	6010      	str	r0, [r2, #0]
 800bfac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bfb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bfb4:	f380 8811 	msr	BASEPRI, r0
 800bfb8:	f3bf 8f4f 	dsb	sy
 800bfbc:	f3bf 8f6f 	isb	sy
 800bfc0:	f7fe ff00 	bl	800adc4 <vTaskSwitchContext>
 800bfc4:	f04f 0000 	mov.w	r0, #0
 800bfc8:	f380 8811 	msr	BASEPRI, r0
 800bfcc:	bc09      	pop	{r0, r3}
 800bfce:	6819      	ldr	r1, [r3, #0]
 800bfd0:	6808      	ldr	r0, [r1, #0]
 800bfd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfd6:	f01e 0f10 	tst.w	lr, #16
 800bfda:	bf08      	it	eq
 800bfdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bfe0:	f380 8809 	msr	PSP, r0
 800bfe4:	f3bf 8f6f 	isb	sy
 800bfe8:	4770      	bx	lr
 800bfea:	bf00      	nop
 800bfec:	f3af 8000 	nop.w

0800bff0 <pxCurrentTCBConst>:
 800bff0:	2000086c 	.word	0x2000086c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bff4:	bf00      	nop
 800bff6:	bf00      	nop

0800bff8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b082      	sub	sp, #8
 800bffc:	af00      	add	r7, sp, #0
	__asm volatile
 800bffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c002:	f383 8811 	msr	BASEPRI, r3
 800c006:	f3bf 8f6f 	isb	sy
 800c00a:	f3bf 8f4f 	dsb	sy
 800c00e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c010:	f7fe fe1a 	bl	800ac48 <xTaskIncrementTick>
 800c014:	4603      	mov	r3, r0
 800c016:	2b00      	cmp	r3, #0
 800c018:	d003      	beq.n	800c022 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c01a:	4b06      	ldr	r3, [pc, #24]	; (800c034 <SysTick_Handler+0x3c>)
 800c01c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c020:	601a      	str	r2, [r3, #0]
 800c022:	2300      	movs	r3, #0
 800c024:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c026:	683b      	ldr	r3, [r7, #0]
 800c028:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800c02c:	bf00      	nop
 800c02e:	3708      	adds	r7, #8
 800c030:	46bd      	mov	sp, r7
 800c032:	bd80      	pop	{r7, pc}
 800c034:	e000ed04 	.word	0xe000ed04

0800c038 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c038:	b480      	push	{r7}
 800c03a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c03c:	4b0b      	ldr	r3, [pc, #44]	; (800c06c <vPortSetupTimerInterrupt+0x34>)
 800c03e:	2200      	movs	r2, #0
 800c040:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c042:	4b0b      	ldr	r3, [pc, #44]	; (800c070 <vPortSetupTimerInterrupt+0x38>)
 800c044:	2200      	movs	r2, #0
 800c046:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c048:	4b0a      	ldr	r3, [pc, #40]	; (800c074 <vPortSetupTimerInterrupt+0x3c>)
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	4a0a      	ldr	r2, [pc, #40]	; (800c078 <vPortSetupTimerInterrupt+0x40>)
 800c04e:	fba2 2303 	umull	r2, r3, r2, r3
 800c052:	099b      	lsrs	r3, r3, #6
 800c054:	4a09      	ldr	r2, [pc, #36]	; (800c07c <vPortSetupTimerInterrupt+0x44>)
 800c056:	3b01      	subs	r3, #1
 800c058:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c05a:	4b04      	ldr	r3, [pc, #16]	; (800c06c <vPortSetupTimerInterrupt+0x34>)
 800c05c:	2207      	movs	r2, #7
 800c05e:	601a      	str	r2, [r3, #0]
}
 800c060:	bf00      	nop
 800c062:	46bd      	mov	sp, r7
 800c064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c068:	4770      	bx	lr
 800c06a:	bf00      	nop
 800c06c:	e000e010 	.word	0xe000e010
 800c070:	e000e018 	.word	0xe000e018
 800c074:	20000000 	.word	0x20000000
 800c078:	10624dd3 	.word	0x10624dd3
 800c07c:	e000e014 	.word	0xe000e014

0800c080 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c080:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c090 <vPortEnableVFP+0x10>
 800c084:	6801      	ldr	r1, [r0, #0]
 800c086:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c08a:	6001      	str	r1, [r0, #0]
 800c08c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c08e:	bf00      	nop
 800c090:	e000ed88 	.word	0xe000ed88

0800c094 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c094:	b480      	push	{r7}
 800c096:	b085      	sub	sp, #20
 800c098:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c09a:	f3ef 8305 	mrs	r3, IPSR
 800c09e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	2b0f      	cmp	r3, #15
 800c0a4:	d913      	bls.n	800c0ce <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c0a6:	4a16      	ldr	r2, [pc, #88]	; (800c100 <vPortValidateInterruptPriority+0x6c>)
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	4413      	add	r3, r2
 800c0ac:	781b      	ldrb	r3, [r3, #0]
 800c0ae:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c0b0:	4b14      	ldr	r3, [pc, #80]	; (800c104 <vPortValidateInterruptPriority+0x70>)
 800c0b2:	781b      	ldrb	r3, [r3, #0]
 800c0b4:	7afa      	ldrb	r2, [r7, #11]
 800c0b6:	429a      	cmp	r2, r3
 800c0b8:	d209      	bcs.n	800c0ce <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800c0ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0be:	f383 8811 	msr	BASEPRI, r3
 800c0c2:	f3bf 8f6f 	isb	sy
 800c0c6:	f3bf 8f4f 	dsb	sy
 800c0ca:	607b      	str	r3, [r7, #4]
 800c0cc:	e7fe      	b.n	800c0cc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c0ce:	4b0e      	ldr	r3, [pc, #56]	; (800c108 <vPortValidateInterruptPriority+0x74>)
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c0d6:	4b0d      	ldr	r3, [pc, #52]	; (800c10c <vPortValidateInterruptPriority+0x78>)
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	429a      	cmp	r2, r3
 800c0dc:	d909      	bls.n	800c0f2 <vPortValidateInterruptPriority+0x5e>
 800c0de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0e2:	f383 8811 	msr	BASEPRI, r3
 800c0e6:	f3bf 8f6f 	isb	sy
 800c0ea:	f3bf 8f4f 	dsb	sy
 800c0ee:	603b      	str	r3, [r7, #0]
 800c0f0:	e7fe      	b.n	800c0f0 <vPortValidateInterruptPriority+0x5c>
	}
 800c0f2:	bf00      	nop
 800c0f4:	3714      	adds	r7, #20
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fc:	4770      	bx	lr
 800c0fe:	bf00      	nop
 800c100:	e000e3f0 	.word	0xe000e3f0
 800c104:	20000e98 	.word	0x20000e98
 800c108:	e000ed0c 	.word	0xe000ed0c
 800c10c:	20000e9c 	.word	0x20000e9c

0800c110 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c110:	b580      	push	{r7, lr}
 800c112:	b08a      	sub	sp, #40	; 0x28
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c118:	2300      	movs	r3, #0
 800c11a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c11c:	f7fe fcc8 	bl	800aab0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c120:	4b57      	ldr	r3, [pc, #348]	; (800c280 <pvPortMalloc+0x170>)
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d101      	bne.n	800c12c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c128:	f000 f90c 	bl	800c344 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c12c:	4b55      	ldr	r3, [pc, #340]	; (800c284 <pvPortMalloc+0x174>)
 800c12e:	681a      	ldr	r2, [r3, #0]
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	4013      	ands	r3, r2
 800c134:	2b00      	cmp	r3, #0
 800c136:	f040 808c 	bne.w	800c252 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d01c      	beq.n	800c17a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800c140:	2208      	movs	r2, #8
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	4413      	add	r3, r2
 800c146:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	f003 0307 	and.w	r3, r3, #7
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d013      	beq.n	800c17a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	f023 0307 	bic.w	r3, r3, #7
 800c158:	3308      	adds	r3, #8
 800c15a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f003 0307 	and.w	r3, r3, #7
 800c162:	2b00      	cmp	r3, #0
 800c164:	d009      	beq.n	800c17a <pvPortMalloc+0x6a>
 800c166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c16a:	f383 8811 	msr	BASEPRI, r3
 800c16e:	f3bf 8f6f 	isb	sy
 800c172:	f3bf 8f4f 	dsb	sy
 800c176:	617b      	str	r3, [r7, #20]
 800c178:	e7fe      	b.n	800c178 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d068      	beq.n	800c252 <pvPortMalloc+0x142>
 800c180:	4b41      	ldr	r3, [pc, #260]	; (800c288 <pvPortMalloc+0x178>)
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	687a      	ldr	r2, [r7, #4]
 800c186:	429a      	cmp	r2, r3
 800c188:	d863      	bhi.n	800c252 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c18a:	4b40      	ldr	r3, [pc, #256]	; (800c28c <pvPortMalloc+0x17c>)
 800c18c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c18e:	4b3f      	ldr	r3, [pc, #252]	; (800c28c <pvPortMalloc+0x17c>)
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c194:	e004      	b.n	800c1a0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800c196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c198:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1a2:	685b      	ldr	r3, [r3, #4]
 800c1a4:	687a      	ldr	r2, [r7, #4]
 800c1a6:	429a      	cmp	r2, r3
 800c1a8:	d903      	bls.n	800c1b2 <pvPortMalloc+0xa2>
 800c1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d1f1      	bne.n	800c196 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c1b2:	4b33      	ldr	r3, [pc, #204]	; (800c280 <pvPortMalloc+0x170>)
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1b8:	429a      	cmp	r2, r3
 800c1ba:	d04a      	beq.n	800c252 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c1bc:	6a3b      	ldr	r3, [r7, #32]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	2208      	movs	r2, #8
 800c1c2:	4413      	add	r3, r2
 800c1c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1c8:	681a      	ldr	r2, [r3, #0]
 800c1ca:	6a3b      	ldr	r3, [r7, #32]
 800c1cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1d0:	685a      	ldr	r2, [r3, #4]
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	1ad2      	subs	r2, r2, r3
 800c1d6:	2308      	movs	r3, #8
 800c1d8:	005b      	lsls	r3, r3, #1
 800c1da:	429a      	cmp	r2, r3
 800c1dc:	d91e      	bls.n	800c21c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c1de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	4413      	add	r3, r2
 800c1e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c1e6:	69bb      	ldr	r3, [r7, #24]
 800c1e8:	f003 0307 	and.w	r3, r3, #7
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d009      	beq.n	800c204 <pvPortMalloc+0xf4>
 800c1f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1f4:	f383 8811 	msr	BASEPRI, r3
 800c1f8:	f3bf 8f6f 	isb	sy
 800c1fc:	f3bf 8f4f 	dsb	sy
 800c200:	613b      	str	r3, [r7, #16]
 800c202:	e7fe      	b.n	800c202 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c206:	685a      	ldr	r2, [r3, #4]
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	1ad2      	subs	r2, r2, r3
 800c20c:	69bb      	ldr	r3, [r7, #24]
 800c20e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c212:	687a      	ldr	r2, [r7, #4]
 800c214:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c216:	69b8      	ldr	r0, [r7, #24]
 800c218:	f000 f8f6 	bl	800c408 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c21c:	4b1a      	ldr	r3, [pc, #104]	; (800c288 <pvPortMalloc+0x178>)
 800c21e:	681a      	ldr	r2, [r3, #0]
 800c220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c222:	685b      	ldr	r3, [r3, #4]
 800c224:	1ad3      	subs	r3, r2, r3
 800c226:	4a18      	ldr	r2, [pc, #96]	; (800c288 <pvPortMalloc+0x178>)
 800c228:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c22a:	4b17      	ldr	r3, [pc, #92]	; (800c288 <pvPortMalloc+0x178>)
 800c22c:	681a      	ldr	r2, [r3, #0]
 800c22e:	4b18      	ldr	r3, [pc, #96]	; (800c290 <pvPortMalloc+0x180>)
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	429a      	cmp	r2, r3
 800c234:	d203      	bcs.n	800c23e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c236:	4b14      	ldr	r3, [pc, #80]	; (800c288 <pvPortMalloc+0x178>)
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	4a15      	ldr	r2, [pc, #84]	; (800c290 <pvPortMalloc+0x180>)
 800c23c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c23e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c240:	685a      	ldr	r2, [r3, #4]
 800c242:	4b10      	ldr	r3, [pc, #64]	; (800c284 <pvPortMalloc+0x174>)
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	431a      	orrs	r2, r3
 800c248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c24a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c24e:	2200      	movs	r2, #0
 800c250:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c252:	f7fe fc3b 	bl	800aacc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c256:	69fb      	ldr	r3, [r7, #28]
 800c258:	f003 0307 	and.w	r3, r3, #7
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d009      	beq.n	800c274 <pvPortMalloc+0x164>
 800c260:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c264:	f383 8811 	msr	BASEPRI, r3
 800c268:	f3bf 8f6f 	isb	sy
 800c26c:	f3bf 8f4f 	dsb	sy
 800c270:	60fb      	str	r3, [r7, #12]
 800c272:	e7fe      	b.n	800c272 <pvPortMalloc+0x162>
	return pvReturn;
 800c274:	69fb      	ldr	r3, [r7, #28]
}
 800c276:	4618      	mov	r0, r3
 800c278:	3728      	adds	r7, #40	; 0x28
 800c27a:	46bd      	mov	sp, r7
 800c27c:	bd80      	pop	{r7, pc}
 800c27e:	bf00      	nop
 800c280:	20001a60 	.word	0x20001a60
 800c284:	20001a6c 	.word	0x20001a6c
 800c288:	20001a64 	.word	0x20001a64
 800c28c:	20001a58 	.word	0x20001a58
 800c290:	20001a68 	.word	0x20001a68

0800c294 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b086      	sub	sp, #24
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d046      	beq.n	800c334 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c2a6:	2308      	movs	r3, #8
 800c2a8:	425b      	negs	r3, r3
 800c2aa:	697a      	ldr	r2, [r7, #20]
 800c2ac:	4413      	add	r3, r2
 800c2ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c2b0:	697b      	ldr	r3, [r7, #20]
 800c2b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c2b4:	693b      	ldr	r3, [r7, #16]
 800c2b6:	685a      	ldr	r2, [r3, #4]
 800c2b8:	4b20      	ldr	r3, [pc, #128]	; (800c33c <vPortFree+0xa8>)
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	4013      	ands	r3, r2
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d109      	bne.n	800c2d6 <vPortFree+0x42>
 800c2c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2c6:	f383 8811 	msr	BASEPRI, r3
 800c2ca:	f3bf 8f6f 	isb	sy
 800c2ce:	f3bf 8f4f 	dsb	sy
 800c2d2:	60fb      	str	r3, [r7, #12]
 800c2d4:	e7fe      	b.n	800c2d4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c2d6:	693b      	ldr	r3, [r7, #16]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d009      	beq.n	800c2f2 <vPortFree+0x5e>
 800c2de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2e2:	f383 8811 	msr	BASEPRI, r3
 800c2e6:	f3bf 8f6f 	isb	sy
 800c2ea:	f3bf 8f4f 	dsb	sy
 800c2ee:	60bb      	str	r3, [r7, #8]
 800c2f0:	e7fe      	b.n	800c2f0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c2f2:	693b      	ldr	r3, [r7, #16]
 800c2f4:	685a      	ldr	r2, [r3, #4]
 800c2f6:	4b11      	ldr	r3, [pc, #68]	; (800c33c <vPortFree+0xa8>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	4013      	ands	r3, r2
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d019      	beq.n	800c334 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c300:	693b      	ldr	r3, [r7, #16]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d115      	bne.n	800c334 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c308:	693b      	ldr	r3, [r7, #16]
 800c30a:	685a      	ldr	r2, [r3, #4]
 800c30c:	4b0b      	ldr	r3, [pc, #44]	; (800c33c <vPortFree+0xa8>)
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	43db      	mvns	r3, r3
 800c312:	401a      	ands	r2, r3
 800c314:	693b      	ldr	r3, [r7, #16]
 800c316:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c318:	f7fe fbca 	bl	800aab0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c31c:	693b      	ldr	r3, [r7, #16]
 800c31e:	685a      	ldr	r2, [r3, #4]
 800c320:	4b07      	ldr	r3, [pc, #28]	; (800c340 <vPortFree+0xac>)
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	4413      	add	r3, r2
 800c326:	4a06      	ldr	r2, [pc, #24]	; (800c340 <vPortFree+0xac>)
 800c328:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c32a:	6938      	ldr	r0, [r7, #16]
 800c32c:	f000 f86c 	bl	800c408 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c330:	f7fe fbcc 	bl	800aacc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c334:	bf00      	nop
 800c336:	3718      	adds	r7, #24
 800c338:	46bd      	mov	sp, r7
 800c33a:	bd80      	pop	{r7, pc}
 800c33c:	20001a6c 	.word	0x20001a6c
 800c340:	20001a64 	.word	0x20001a64

0800c344 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c344:	b480      	push	{r7}
 800c346:	b085      	sub	sp, #20
 800c348:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c34a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800c34e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c350:	4b27      	ldr	r3, [pc, #156]	; (800c3f0 <prvHeapInit+0xac>)
 800c352:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	f003 0307 	and.w	r3, r3, #7
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d00c      	beq.n	800c378 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	3307      	adds	r3, #7
 800c362:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	f023 0307 	bic.w	r3, r3, #7
 800c36a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c36c:	68ba      	ldr	r2, [r7, #8]
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	1ad3      	subs	r3, r2, r3
 800c372:	4a1f      	ldr	r2, [pc, #124]	; (800c3f0 <prvHeapInit+0xac>)
 800c374:	4413      	add	r3, r2
 800c376:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c37c:	4a1d      	ldr	r2, [pc, #116]	; (800c3f4 <prvHeapInit+0xb0>)
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c382:	4b1c      	ldr	r3, [pc, #112]	; (800c3f4 <prvHeapInit+0xb0>)
 800c384:	2200      	movs	r2, #0
 800c386:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	68ba      	ldr	r2, [r7, #8]
 800c38c:	4413      	add	r3, r2
 800c38e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c390:	2208      	movs	r2, #8
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	1a9b      	subs	r3, r3, r2
 800c396:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	f023 0307 	bic.w	r3, r3, #7
 800c39e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	4a15      	ldr	r2, [pc, #84]	; (800c3f8 <prvHeapInit+0xb4>)
 800c3a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c3a6:	4b14      	ldr	r3, [pc, #80]	; (800c3f8 <prvHeapInit+0xb4>)
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c3ae:	4b12      	ldr	r3, [pc, #72]	; (800c3f8 <prvHeapInit+0xb4>)
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c3ba:	683b      	ldr	r3, [r7, #0]
 800c3bc:	68fa      	ldr	r2, [r7, #12]
 800c3be:	1ad2      	subs	r2, r2, r3
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c3c4:	4b0c      	ldr	r3, [pc, #48]	; (800c3f8 <prvHeapInit+0xb4>)
 800c3c6:	681a      	ldr	r2, [r3, #0]
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	685b      	ldr	r3, [r3, #4]
 800c3d0:	4a0a      	ldr	r2, [pc, #40]	; (800c3fc <prvHeapInit+0xb8>)
 800c3d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	685b      	ldr	r3, [r3, #4]
 800c3d8:	4a09      	ldr	r2, [pc, #36]	; (800c400 <prvHeapInit+0xbc>)
 800c3da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c3dc:	4b09      	ldr	r3, [pc, #36]	; (800c404 <prvHeapInit+0xc0>)
 800c3de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c3e2:	601a      	str	r2, [r3, #0]
}
 800c3e4:	bf00      	nop
 800c3e6:	3714      	adds	r7, #20
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ee:	4770      	bx	lr
 800c3f0:	20000ea0 	.word	0x20000ea0
 800c3f4:	20001a58 	.word	0x20001a58
 800c3f8:	20001a60 	.word	0x20001a60
 800c3fc:	20001a68 	.word	0x20001a68
 800c400:	20001a64 	.word	0x20001a64
 800c404:	20001a6c 	.word	0x20001a6c

0800c408 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c408:	b480      	push	{r7}
 800c40a:	b085      	sub	sp, #20
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c410:	4b28      	ldr	r3, [pc, #160]	; (800c4b4 <prvInsertBlockIntoFreeList+0xac>)
 800c412:	60fb      	str	r3, [r7, #12]
 800c414:	e002      	b.n	800c41c <prvInsertBlockIntoFreeList+0x14>
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	60fb      	str	r3, [r7, #12]
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	687a      	ldr	r2, [r7, #4]
 800c422:	429a      	cmp	r2, r3
 800c424:	d8f7      	bhi.n	800c416 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	685b      	ldr	r3, [r3, #4]
 800c42e:	68ba      	ldr	r2, [r7, #8]
 800c430:	4413      	add	r3, r2
 800c432:	687a      	ldr	r2, [r7, #4]
 800c434:	429a      	cmp	r2, r3
 800c436:	d108      	bne.n	800c44a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	685a      	ldr	r2, [r3, #4]
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	685b      	ldr	r3, [r3, #4]
 800c440:	441a      	add	r2, r3
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	685b      	ldr	r3, [r3, #4]
 800c452:	68ba      	ldr	r2, [r7, #8]
 800c454:	441a      	add	r2, r3
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	429a      	cmp	r2, r3
 800c45c:	d118      	bne.n	800c490 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	681a      	ldr	r2, [r3, #0]
 800c462:	4b15      	ldr	r3, [pc, #84]	; (800c4b8 <prvInsertBlockIntoFreeList+0xb0>)
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	429a      	cmp	r2, r3
 800c468:	d00d      	beq.n	800c486 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	685a      	ldr	r2, [r3, #4]
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	685b      	ldr	r3, [r3, #4]
 800c474:	441a      	add	r2, r3
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	681a      	ldr	r2, [r3, #0]
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	601a      	str	r2, [r3, #0]
 800c484:	e008      	b.n	800c498 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c486:	4b0c      	ldr	r3, [pc, #48]	; (800c4b8 <prvInsertBlockIntoFreeList+0xb0>)
 800c488:	681a      	ldr	r2, [r3, #0]
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	601a      	str	r2, [r3, #0]
 800c48e:	e003      	b.n	800c498 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	681a      	ldr	r2, [r3, #0]
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c498:	68fa      	ldr	r2, [r7, #12]
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	429a      	cmp	r2, r3
 800c49e:	d002      	beq.n	800c4a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	687a      	ldr	r2, [r7, #4]
 800c4a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c4a6:	bf00      	nop
 800c4a8:	3714      	adds	r7, #20
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b0:	4770      	bx	lr
 800c4b2:	bf00      	nop
 800c4b4:	20001a58 	.word	0x20001a58
 800c4b8:	20001a60 	.word	0x20001a60

0800c4bc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	4912      	ldr	r1, [pc, #72]	; (800c50c <MX_USB_DEVICE_Init+0x50>)
 800c4c4:	4812      	ldr	r0, [pc, #72]	; (800c510 <MX_USB_DEVICE_Init+0x54>)
 800c4c6:	f7fb fb6d 	bl	8007ba4 <USBD_Init>
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d001      	beq.n	800c4d4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c4d0:	f7f4 fdce 	bl	8001070 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c4d4:	490f      	ldr	r1, [pc, #60]	; (800c514 <MX_USB_DEVICE_Init+0x58>)
 800c4d6:	480e      	ldr	r0, [pc, #56]	; (800c510 <MX_USB_DEVICE_Init+0x54>)
 800c4d8:	f7fb fb8f 	bl	8007bfa <USBD_RegisterClass>
 800c4dc:	4603      	mov	r3, r0
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d001      	beq.n	800c4e6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c4e2:	f7f4 fdc5 	bl	8001070 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c4e6:	490c      	ldr	r1, [pc, #48]	; (800c518 <MX_USB_DEVICE_Init+0x5c>)
 800c4e8:	4809      	ldr	r0, [pc, #36]	; (800c510 <MX_USB_DEVICE_Init+0x54>)
 800c4ea:	f7fb fabd 	bl	8007a68 <USBD_CDC_RegisterInterface>
 800c4ee:	4603      	mov	r3, r0
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d001      	beq.n	800c4f8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c4f4:	f7f4 fdbc 	bl	8001070 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c4f8:	4805      	ldr	r0, [pc, #20]	; (800c510 <MX_USB_DEVICE_Init+0x54>)
 800c4fa:	f7fb fb98 	bl	8007c2e <USBD_Start>
 800c4fe:	4603      	mov	r3, r0
 800c500:	2b00      	cmp	r3, #0
 800c502:	d001      	beq.n	800c508 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c504:	f7f4 fdb4 	bl	8001070 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c508:	bf00      	nop
 800c50a:	bd80      	pop	{r7, pc}
 800c50c:	20000130 	.word	0x20000130
 800c510:	200027e0 	.word	0x200027e0
 800c514:	20000018 	.word	0x20000018
 800c518:	20000120 	.word	0x20000120

0800c51c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c520:	2200      	movs	r2, #0
 800c522:	4905      	ldr	r1, [pc, #20]	; (800c538 <CDC_Init_FS+0x1c>)
 800c524:	4805      	ldr	r0, [pc, #20]	; (800c53c <CDC_Init_FS+0x20>)
 800c526:	f7fb fab6 	bl	8007a96 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c52a:	4905      	ldr	r1, [pc, #20]	; (800c540 <CDC_Init_FS+0x24>)
 800c52c:	4803      	ldr	r0, [pc, #12]	; (800c53c <CDC_Init_FS+0x20>)
 800c52e:	f7fb facc 	bl	8007aca <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c532:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c534:	4618      	mov	r0, r3
 800c536:	bd80      	pop	{r7, pc}
 800c538:	20002e64 	.word	0x20002e64
 800c53c:	200027e0 	.word	0x200027e0
 800c540:	20002a7c 	.word	0x20002a7c

0800c544 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c544:	b480      	push	{r7}
 800c546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c548:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c54a:	4618      	mov	r0, r3
 800c54c:	46bd      	mov	sp, r7
 800c54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c552:	4770      	bx	lr

0800c554 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c554:	b480      	push	{r7}
 800c556:	b083      	sub	sp, #12
 800c558:	af00      	add	r7, sp, #0
 800c55a:	4603      	mov	r3, r0
 800c55c:	6039      	str	r1, [r7, #0]
 800c55e:	71fb      	strb	r3, [r7, #7]
 800c560:	4613      	mov	r3, r2
 800c562:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c564:	79fb      	ldrb	r3, [r7, #7]
 800c566:	2b23      	cmp	r3, #35	; 0x23
 800c568:	d84a      	bhi.n	800c600 <CDC_Control_FS+0xac>
 800c56a:	a201      	add	r2, pc, #4	; (adr r2, 800c570 <CDC_Control_FS+0x1c>)
 800c56c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c570:	0800c601 	.word	0x0800c601
 800c574:	0800c601 	.word	0x0800c601
 800c578:	0800c601 	.word	0x0800c601
 800c57c:	0800c601 	.word	0x0800c601
 800c580:	0800c601 	.word	0x0800c601
 800c584:	0800c601 	.word	0x0800c601
 800c588:	0800c601 	.word	0x0800c601
 800c58c:	0800c601 	.word	0x0800c601
 800c590:	0800c601 	.word	0x0800c601
 800c594:	0800c601 	.word	0x0800c601
 800c598:	0800c601 	.word	0x0800c601
 800c59c:	0800c601 	.word	0x0800c601
 800c5a0:	0800c601 	.word	0x0800c601
 800c5a4:	0800c601 	.word	0x0800c601
 800c5a8:	0800c601 	.word	0x0800c601
 800c5ac:	0800c601 	.word	0x0800c601
 800c5b0:	0800c601 	.word	0x0800c601
 800c5b4:	0800c601 	.word	0x0800c601
 800c5b8:	0800c601 	.word	0x0800c601
 800c5bc:	0800c601 	.word	0x0800c601
 800c5c0:	0800c601 	.word	0x0800c601
 800c5c4:	0800c601 	.word	0x0800c601
 800c5c8:	0800c601 	.word	0x0800c601
 800c5cc:	0800c601 	.word	0x0800c601
 800c5d0:	0800c601 	.word	0x0800c601
 800c5d4:	0800c601 	.word	0x0800c601
 800c5d8:	0800c601 	.word	0x0800c601
 800c5dc:	0800c601 	.word	0x0800c601
 800c5e0:	0800c601 	.word	0x0800c601
 800c5e4:	0800c601 	.word	0x0800c601
 800c5e8:	0800c601 	.word	0x0800c601
 800c5ec:	0800c601 	.word	0x0800c601
 800c5f0:	0800c601 	.word	0x0800c601
 800c5f4:	0800c601 	.word	0x0800c601
 800c5f8:	0800c601 	.word	0x0800c601
 800c5fc:	0800c601 	.word	0x0800c601
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c600:	bf00      	nop
  }

  return (USBD_OK);
 800c602:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c604:	4618      	mov	r0, r3
 800c606:	370c      	adds	r7, #12
 800c608:	46bd      	mov	sp, r7
 800c60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60e:	4770      	bx	lr

0800c610 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b082      	sub	sp, #8
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
 800c618:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c61a:	6879      	ldr	r1, [r7, #4]
 800c61c:	4805      	ldr	r0, [pc, #20]	; (800c634 <CDC_Receive_FS+0x24>)
 800c61e:	f7fb fa54 	bl	8007aca <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c622:	4804      	ldr	r0, [pc, #16]	; (800c634 <CDC_Receive_FS+0x24>)
 800c624:	f7fb fa94 	bl	8007b50 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c628:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c62a:	4618      	mov	r0, r3
 800c62c:	3708      	adds	r7, #8
 800c62e:	46bd      	mov	sp, r7
 800c630:	bd80      	pop	{r7, pc}
 800c632:	bf00      	nop
 800c634:	200027e0 	.word	0x200027e0

0800c638 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b084      	sub	sp, #16
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
 800c640:	460b      	mov	r3, r1
 800c642:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c644:	2300      	movs	r3, #0
 800c646:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c648:	4b0d      	ldr	r3, [pc, #52]	; (800c680 <CDC_Transmit_FS+0x48>)
 800c64a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c64e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c650:	68bb      	ldr	r3, [r7, #8]
 800c652:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c656:	2b00      	cmp	r3, #0
 800c658:	d001      	beq.n	800c65e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c65a:	2301      	movs	r3, #1
 800c65c:	e00b      	b.n	800c676 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c65e:	887b      	ldrh	r3, [r7, #2]
 800c660:	461a      	mov	r2, r3
 800c662:	6879      	ldr	r1, [r7, #4]
 800c664:	4806      	ldr	r0, [pc, #24]	; (800c680 <CDC_Transmit_FS+0x48>)
 800c666:	f7fb fa16 	bl	8007a96 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c66a:	4805      	ldr	r0, [pc, #20]	; (800c680 <CDC_Transmit_FS+0x48>)
 800c66c:	f7fb fa41 	bl	8007af2 <USBD_CDC_TransmitPacket>
 800c670:	4603      	mov	r3, r0
 800c672:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c674:	7bfb      	ldrb	r3, [r7, #15]
}
 800c676:	4618      	mov	r0, r3
 800c678:	3710      	adds	r7, #16
 800c67a:	46bd      	mov	sp, r7
 800c67c:	bd80      	pop	{r7, pc}
 800c67e:	bf00      	nop
 800c680:	200027e0 	.word	0x200027e0

0800c684 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c684:	b480      	push	{r7}
 800c686:	b083      	sub	sp, #12
 800c688:	af00      	add	r7, sp, #0
 800c68a:	4603      	mov	r3, r0
 800c68c:	6039      	str	r1, [r7, #0]
 800c68e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c690:	683b      	ldr	r3, [r7, #0]
 800c692:	2212      	movs	r2, #18
 800c694:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c696:	4b03      	ldr	r3, [pc, #12]	; (800c6a4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c698:	4618      	mov	r0, r3
 800c69a:	370c      	adds	r7, #12
 800c69c:	46bd      	mov	sp, r7
 800c69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a2:	4770      	bx	lr
 800c6a4:	20000150 	.word	0x20000150

0800c6a8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c6a8:	b480      	push	{r7}
 800c6aa:	b083      	sub	sp, #12
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	4603      	mov	r3, r0
 800c6b0:	6039      	str	r1, [r7, #0]
 800c6b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c6b4:	683b      	ldr	r3, [r7, #0]
 800c6b6:	2204      	movs	r2, #4
 800c6b8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c6ba:	4b03      	ldr	r3, [pc, #12]	; (800c6c8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c6bc:	4618      	mov	r0, r3
 800c6be:	370c      	adds	r7, #12
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c6:	4770      	bx	lr
 800c6c8:	20000170 	.word	0x20000170

0800c6cc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b082      	sub	sp, #8
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	4603      	mov	r3, r0
 800c6d4:	6039      	str	r1, [r7, #0]
 800c6d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c6d8:	79fb      	ldrb	r3, [r7, #7]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d105      	bne.n	800c6ea <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c6de:	683a      	ldr	r2, [r7, #0]
 800c6e0:	4907      	ldr	r1, [pc, #28]	; (800c700 <USBD_FS_ProductStrDescriptor+0x34>)
 800c6e2:	4808      	ldr	r0, [pc, #32]	; (800c704 <USBD_FS_ProductStrDescriptor+0x38>)
 800c6e4:	f7fc f9ba 	bl	8008a5c <USBD_GetString>
 800c6e8:	e004      	b.n	800c6f4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c6ea:	683a      	ldr	r2, [r7, #0]
 800c6ec:	4904      	ldr	r1, [pc, #16]	; (800c700 <USBD_FS_ProductStrDescriptor+0x34>)
 800c6ee:	4805      	ldr	r0, [pc, #20]	; (800c704 <USBD_FS_ProductStrDescriptor+0x38>)
 800c6f0:	f7fc f9b4 	bl	8008a5c <USBD_GetString>
  }
  return USBD_StrDesc;
 800c6f4:	4b02      	ldr	r3, [pc, #8]	; (800c700 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	3708      	adds	r7, #8
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	bd80      	pop	{r7, pc}
 800c6fe:	bf00      	nop
 800c700:	2000324c 	.word	0x2000324c
 800c704:	0800d0d4 	.word	0x0800d0d4

0800c708 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b082      	sub	sp, #8
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	4603      	mov	r3, r0
 800c710:	6039      	str	r1, [r7, #0]
 800c712:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c714:	683a      	ldr	r2, [r7, #0]
 800c716:	4904      	ldr	r1, [pc, #16]	; (800c728 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c718:	4804      	ldr	r0, [pc, #16]	; (800c72c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c71a:	f7fc f99f 	bl	8008a5c <USBD_GetString>
  return USBD_StrDesc;
 800c71e:	4b02      	ldr	r3, [pc, #8]	; (800c728 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c720:	4618      	mov	r0, r3
 800c722:	3708      	adds	r7, #8
 800c724:	46bd      	mov	sp, r7
 800c726:	bd80      	pop	{r7, pc}
 800c728:	2000324c 	.word	0x2000324c
 800c72c:	0800d0ec 	.word	0x0800d0ec

0800c730 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b082      	sub	sp, #8
 800c734:	af00      	add	r7, sp, #0
 800c736:	4603      	mov	r3, r0
 800c738:	6039      	str	r1, [r7, #0]
 800c73a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	221a      	movs	r2, #26
 800c740:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c742:	f000 f855 	bl	800c7f0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c746:	4b02      	ldr	r3, [pc, #8]	; (800c750 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c748:	4618      	mov	r0, r3
 800c74a:	3708      	adds	r7, #8
 800c74c:	46bd      	mov	sp, r7
 800c74e:	bd80      	pop	{r7, pc}
 800c750:	20000174 	.word	0x20000174

0800c754 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b082      	sub	sp, #8
 800c758:	af00      	add	r7, sp, #0
 800c75a:	4603      	mov	r3, r0
 800c75c:	6039      	str	r1, [r7, #0]
 800c75e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c760:	79fb      	ldrb	r3, [r7, #7]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d105      	bne.n	800c772 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c766:	683a      	ldr	r2, [r7, #0]
 800c768:	4907      	ldr	r1, [pc, #28]	; (800c788 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c76a:	4808      	ldr	r0, [pc, #32]	; (800c78c <USBD_FS_ConfigStrDescriptor+0x38>)
 800c76c:	f7fc f976 	bl	8008a5c <USBD_GetString>
 800c770:	e004      	b.n	800c77c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c772:	683a      	ldr	r2, [r7, #0]
 800c774:	4904      	ldr	r1, [pc, #16]	; (800c788 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c776:	4805      	ldr	r0, [pc, #20]	; (800c78c <USBD_FS_ConfigStrDescriptor+0x38>)
 800c778:	f7fc f970 	bl	8008a5c <USBD_GetString>
  }
  return USBD_StrDesc;
 800c77c:	4b02      	ldr	r3, [pc, #8]	; (800c788 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c77e:	4618      	mov	r0, r3
 800c780:	3708      	adds	r7, #8
 800c782:	46bd      	mov	sp, r7
 800c784:	bd80      	pop	{r7, pc}
 800c786:	bf00      	nop
 800c788:	2000324c 	.word	0x2000324c
 800c78c:	0800d100 	.word	0x0800d100

0800c790 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c790:	b580      	push	{r7, lr}
 800c792:	b082      	sub	sp, #8
 800c794:	af00      	add	r7, sp, #0
 800c796:	4603      	mov	r3, r0
 800c798:	6039      	str	r1, [r7, #0]
 800c79a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c79c:	79fb      	ldrb	r3, [r7, #7]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d105      	bne.n	800c7ae <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c7a2:	683a      	ldr	r2, [r7, #0]
 800c7a4:	4907      	ldr	r1, [pc, #28]	; (800c7c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c7a6:	4808      	ldr	r0, [pc, #32]	; (800c7c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c7a8:	f7fc f958 	bl	8008a5c <USBD_GetString>
 800c7ac:	e004      	b.n	800c7b8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c7ae:	683a      	ldr	r2, [r7, #0]
 800c7b0:	4904      	ldr	r1, [pc, #16]	; (800c7c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c7b2:	4805      	ldr	r0, [pc, #20]	; (800c7c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c7b4:	f7fc f952 	bl	8008a5c <USBD_GetString>
  }
  return USBD_StrDesc;
 800c7b8:	4b02      	ldr	r3, [pc, #8]	; (800c7c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	3708      	adds	r7, #8
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	bd80      	pop	{r7, pc}
 800c7c2:	bf00      	nop
 800c7c4:	2000324c 	.word	0x2000324c
 800c7c8:	0800d10c 	.word	0x0800d10c

0800c7cc <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c7cc:	b480      	push	{r7}
 800c7ce:	b083      	sub	sp, #12
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	4603      	mov	r3, r0
 800c7d4:	6039      	str	r1, [r7, #0]
 800c7d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800c7d8:	683b      	ldr	r3, [r7, #0]
 800c7da:	220c      	movs	r2, #12
 800c7dc:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800c7de:	4b03      	ldr	r3, [pc, #12]	; (800c7ec <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	370c      	adds	r7, #12
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ea:	4770      	bx	lr
 800c7ec:	20000164 	.word	0x20000164

0800c7f0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b084      	sub	sp, #16
 800c7f4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c7f6:	4b0f      	ldr	r3, [pc, #60]	; (800c834 <Get_SerialNum+0x44>)
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c7fc:	4b0e      	ldr	r3, [pc, #56]	; (800c838 <Get_SerialNum+0x48>)
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c802:	4b0e      	ldr	r3, [pc, #56]	; (800c83c <Get_SerialNum+0x4c>)
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c808:	68fa      	ldr	r2, [r7, #12]
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	4413      	add	r3, r2
 800c80e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d009      	beq.n	800c82a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c816:	2208      	movs	r2, #8
 800c818:	4909      	ldr	r1, [pc, #36]	; (800c840 <Get_SerialNum+0x50>)
 800c81a:	68f8      	ldr	r0, [r7, #12]
 800c81c:	f000 f814 	bl	800c848 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c820:	2204      	movs	r2, #4
 800c822:	4908      	ldr	r1, [pc, #32]	; (800c844 <Get_SerialNum+0x54>)
 800c824:	68b8      	ldr	r0, [r7, #8]
 800c826:	f000 f80f 	bl	800c848 <IntToUnicode>
  }
}
 800c82a:	bf00      	nop
 800c82c:	3710      	adds	r7, #16
 800c82e:	46bd      	mov	sp, r7
 800c830:	bd80      	pop	{r7, pc}
 800c832:	bf00      	nop
 800c834:	1fff7590 	.word	0x1fff7590
 800c838:	1fff7594 	.word	0x1fff7594
 800c83c:	1fff7598 	.word	0x1fff7598
 800c840:	20000176 	.word	0x20000176
 800c844:	20000186 	.word	0x20000186

0800c848 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c848:	b480      	push	{r7}
 800c84a:	b087      	sub	sp, #28
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	60f8      	str	r0, [r7, #12]
 800c850:	60b9      	str	r1, [r7, #8]
 800c852:	4613      	mov	r3, r2
 800c854:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c856:	2300      	movs	r3, #0
 800c858:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c85a:	2300      	movs	r3, #0
 800c85c:	75fb      	strb	r3, [r7, #23]
 800c85e:	e027      	b.n	800c8b0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	0f1b      	lsrs	r3, r3, #28
 800c864:	2b09      	cmp	r3, #9
 800c866:	d80b      	bhi.n	800c880 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	0f1b      	lsrs	r3, r3, #28
 800c86c:	b2da      	uxtb	r2, r3
 800c86e:	7dfb      	ldrb	r3, [r7, #23]
 800c870:	005b      	lsls	r3, r3, #1
 800c872:	4619      	mov	r1, r3
 800c874:	68bb      	ldr	r3, [r7, #8]
 800c876:	440b      	add	r3, r1
 800c878:	3230      	adds	r2, #48	; 0x30
 800c87a:	b2d2      	uxtb	r2, r2
 800c87c:	701a      	strb	r2, [r3, #0]
 800c87e:	e00a      	b.n	800c896 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	0f1b      	lsrs	r3, r3, #28
 800c884:	b2da      	uxtb	r2, r3
 800c886:	7dfb      	ldrb	r3, [r7, #23]
 800c888:	005b      	lsls	r3, r3, #1
 800c88a:	4619      	mov	r1, r3
 800c88c:	68bb      	ldr	r3, [r7, #8]
 800c88e:	440b      	add	r3, r1
 800c890:	3237      	adds	r2, #55	; 0x37
 800c892:	b2d2      	uxtb	r2, r2
 800c894:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	011b      	lsls	r3, r3, #4
 800c89a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c89c:	7dfb      	ldrb	r3, [r7, #23]
 800c89e:	005b      	lsls	r3, r3, #1
 800c8a0:	3301      	adds	r3, #1
 800c8a2:	68ba      	ldr	r2, [r7, #8]
 800c8a4:	4413      	add	r3, r2
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c8aa:	7dfb      	ldrb	r3, [r7, #23]
 800c8ac:	3301      	adds	r3, #1
 800c8ae:	75fb      	strb	r3, [r7, #23]
 800c8b0:	7dfa      	ldrb	r2, [r7, #23]
 800c8b2:	79fb      	ldrb	r3, [r7, #7]
 800c8b4:	429a      	cmp	r2, r3
 800c8b6:	d3d3      	bcc.n	800c860 <IntToUnicode+0x18>
  }
}
 800c8b8:	bf00      	nop
 800c8ba:	371c      	adds	r7, #28
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c2:	4770      	bx	lr

0800c8c4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b084      	sub	sp, #16
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	4a0d      	ldr	r2, [pc, #52]	; (800c908 <HAL_PCD_MspInit+0x44>)
 800c8d2:	4293      	cmp	r3, r2
 800c8d4:	d113      	bne.n	800c8fe <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c8d6:	4b0d      	ldr	r3, [pc, #52]	; (800c90c <HAL_PCD_MspInit+0x48>)
 800c8d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8da:	4a0c      	ldr	r2, [pc, #48]	; (800c90c <HAL_PCD_MspInit+0x48>)
 800c8dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c8e0:	6593      	str	r3, [r2, #88]	; 0x58
 800c8e2:	4b0a      	ldr	r3, [pc, #40]	; (800c90c <HAL_PCD_MspInit+0x48>)
 800c8e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c8ea:	60fb      	str	r3, [r7, #12]
 800c8ec:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 5, 0);
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	2105      	movs	r1, #5
 800c8f2:	2043      	movs	r0, #67	; 0x43
 800c8f4:	f7f5 fcaa 	bl	800224c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800c8f8:	2043      	movs	r0, #67	; 0x43
 800c8fa:	f7f5 fcc3 	bl	8002284 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c8fe:	bf00      	nop
 800c900:	3710      	adds	r7, #16
 800c902:	46bd      	mov	sp, r7
 800c904:	bd80      	pop	{r7, pc}
 800c906:	bf00      	nop
 800c908:	40006800 	.word	0x40006800
 800c90c:	40021000 	.word	0x40021000

0800c910 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b082      	sub	sp, #8
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800c924:	4619      	mov	r1, r3
 800c926:	4610      	mov	r0, r2
 800c928:	f7fb f9ca 	bl	8007cc0 <USBD_LL_SetupStage>
}
 800c92c:	bf00      	nop
 800c92e:	3708      	adds	r7, #8
 800c930:	46bd      	mov	sp, r7
 800c932:	bd80      	pop	{r7, pc}

0800c934 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c934:	b580      	push	{r7, lr}
 800c936:	b082      	sub	sp, #8
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
 800c93c:	460b      	mov	r3, r1
 800c93e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 800c946:	78fb      	ldrb	r3, [r7, #3]
 800c948:	687a      	ldr	r2, [r7, #4]
 800c94a:	015b      	lsls	r3, r3, #5
 800c94c:	4413      	add	r3, r2
 800c94e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800c952:	681a      	ldr	r2, [r3, #0]
 800c954:	78fb      	ldrb	r3, [r7, #3]
 800c956:	4619      	mov	r1, r3
 800c958:	f7fb f9fd 	bl	8007d56 <USBD_LL_DataOutStage>
}
 800c95c:	bf00      	nop
 800c95e:	3708      	adds	r7, #8
 800c960:	46bd      	mov	sp, r7
 800c962:	bd80      	pop	{r7, pc}

0800c964 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c964:	b580      	push	{r7, lr}
 800c966:	b082      	sub	sp, #8
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
 800c96c:	460b      	mov	r3, r1
 800c96e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 800c976:	78fb      	ldrb	r3, [r7, #3]
 800c978:	687a      	ldr	r2, [r7, #4]
 800c97a:	015b      	lsls	r3, r3, #5
 800c97c:	4413      	add	r3, r2
 800c97e:	333c      	adds	r3, #60	; 0x3c
 800c980:	681a      	ldr	r2, [r3, #0]
 800c982:	78fb      	ldrb	r3, [r7, #3]
 800c984:	4619      	mov	r1, r3
 800c986:	f7fb fa57 	bl	8007e38 <USBD_LL_DataInStage>
}
 800c98a:	bf00      	nop
 800c98c:	3708      	adds	r7, #8
 800c98e:	46bd      	mov	sp, r7
 800c990:	bd80      	pop	{r7, pc}

0800c992 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c992:	b580      	push	{r7, lr}
 800c994:	b082      	sub	sp, #8
 800c996:	af00      	add	r7, sp, #0
 800c998:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	f7fb fb65 	bl	8008070 <USBD_LL_SOF>
}
 800c9a6:	bf00      	nop
 800c9a8:	3708      	adds	r7, #8
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	bd80      	pop	{r7, pc}

0800c9ae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800c9ae:	b580      	push	{r7, lr}
 800c9b0:	b084      	sub	sp, #16
 800c9b2:	af00      	add	r7, sp, #0
 800c9b4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c9b6:	2301      	movs	r3, #1
 800c9b8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	689b      	ldr	r3, [r3, #8]
 800c9be:	2b02      	cmp	r3, #2
 800c9c0:	d001      	beq.n	800c9c6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c9c2:	f7f4 fb55 	bl	8001070 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800c9cc:	7bfa      	ldrb	r2, [r7, #15]
 800c9ce:	4611      	mov	r1, r2
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	f7fb fb17 	bl	8008004 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800c9dc:	4618      	mov	r0, r3
 800c9de:	f7fb fad0 	bl	8007f82 <USBD_LL_Reset>
}
 800c9e2:	bf00      	nop
 800c9e4:	3710      	adds	r7, #16
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	bd80      	pop	{r7, pc}
	...

0800c9ec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b082      	sub	sp, #8
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	f7fb fb12 	bl	8008024 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	699b      	ldr	r3, [r3, #24]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d005      	beq.n	800ca14 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ca08:	4b04      	ldr	r3, [pc, #16]	; (800ca1c <HAL_PCD_SuspendCallback+0x30>)
 800ca0a:	691b      	ldr	r3, [r3, #16]
 800ca0c:	4a03      	ldr	r2, [pc, #12]	; (800ca1c <HAL_PCD_SuspendCallback+0x30>)
 800ca0e:	f043 0306 	orr.w	r3, r3, #6
 800ca12:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ca14:	bf00      	nop
 800ca16:	3708      	adds	r7, #8
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	bd80      	pop	{r7, pc}
 800ca1c:	e000ed00 	.word	0xe000ed00

0800ca20 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b082      	sub	sp, #8
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	699b      	ldr	r3, [r3, #24]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d007      	beq.n	800ca40 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ca30:	4b08      	ldr	r3, [pc, #32]	; (800ca54 <HAL_PCD_ResumeCallback+0x34>)
 800ca32:	691b      	ldr	r3, [r3, #16]
 800ca34:	4a07      	ldr	r2, [pc, #28]	; (800ca54 <HAL_PCD_ResumeCallback+0x34>)
 800ca36:	f023 0306 	bic.w	r3, r3, #6
 800ca3a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800ca3c:	f000 fab2 	bl	800cfa4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800ca46:	4618      	mov	r0, r3
 800ca48:	f7fb fb01 	bl	800804e <USBD_LL_Resume>
}
 800ca4c:	bf00      	nop
 800ca4e:	3708      	adds	r7, #8
 800ca50:	46bd      	mov	sp, r7
 800ca52:	bd80      	pop	{r7, pc}
 800ca54:	e000ed00 	.word	0xe000ed00

0800ca58 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b082      	sub	sp, #8
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800ca60:	f7f7 fa50 	bl	8003f04 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800ca64:	4a2b      	ldr	r2, [pc, #172]	; (800cb14 <USBD_LL_Init+0xbc>)
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
  pdev->pData = &hpcd_USB_FS;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	4a29      	ldr	r2, [pc, #164]	; (800cb14 <USBD_LL_Init+0xbc>)
 800ca70:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 800ca74:	4b27      	ldr	r3, [pc, #156]	; (800cb14 <USBD_LL_Init+0xbc>)
 800ca76:	4a28      	ldr	r2, [pc, #160]	; (800cb18 <USBD_LL_Init+0xc0>)
 800ca78:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ca7a:	4b26      	ldr	r3, [pc, #152]	; (800cb14 <USBD_LL_Init+0xbc>)
 800ca7c:	2208      	movs	r2, #8
 800ca7e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ca80:	4b24      	ldr	r3, [pc, #144]	; (800cb14 <USBD_LL_Init+0xbc>)
 800ca82:	2202      	movs	r2, #2
 800ca84:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ca86:	4b23      	ldr	r3, [pc, #140]	; (800cb14 <USBD_LL_Init+0xbc>)
 800ca88:	2202      	movs	r2, #2
 800ca8a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800ca8c:	4b21      	ldr	r3, [pc, #132]	; (800cb14 <USBD_LL_Init+0xbc>)
 800ca8e:	2200      	movs	r2, #0
 800ca90:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ca92:	4b20      	ldr	r3, [pc, #128]	; (800cb14 <USBD_LL_Init+0xbc>)
 800ca94:	2200      	movs	r2, #0
 800ca96:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ca98:	4b1e      	ldr	r3, [pc, #120]	; (800cb14 <USBD_LL_Init+0xbc>)
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ca9e:	4b1d      	ldr	r3, [pc, #116]	; (800cb14 <USBD_LL_Init+0xbc>)
 800caa0:	2200      	movs	r2, #0
 800caa2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800caa4:	481b      	ldr	r0, [pc, #108]	; (800cb14 <USBD_LL_Init+0xbc>)
 800caa6:	f7f6 fa7e 	bl	8002fa6 <HAL_PCD_Init>
 800caaa:	4603      	mov	r3, r0
 800caac:	2b00      	cmp	r3, #0
 800caae:	d001      	beq.n	800cab4 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800cab0:	f7f4 fade 	bl	8001070 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800caba:	2318      	movs	r3, #24
 800cabc:	2200      	movs	r2, #0
 800cabe:	2100      	movs	r1, #0
 800cac0:	f7f7 f954 	bl	8003d6c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800caca:	2358      	movs	r3, #88	; 0x58
 800cacc:	2200      	movs	r2, #0
 800cace:	2180      	movs	r1, #128	; 0x80
 800cad0:	f7f7 f94c 	bl	8003d6c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800cada:	23c0      	movs	r3, #192	; 0xc0
 800cadc:	2200      	movs	r2, #0
 800cade:	2181      	movs	r1, #129	; 0x81
 800cae0:	f7f7 f944 	bl	8003d6c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800caea:	f44f 7388 	mov.w	r3, #272	; 0x110
 800caee:	2200      	movs	r2, #0
 800caf0:	2101      	movs	r1, #1
 800caf2:	f7f7 f93b 	bl	8003d6c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800cafc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cb00:	2200      	movs	r2, #0
 800cb02:	2182      	movs	r1, #130	; 0x82
 800cb04:	f7f7 f932 	bl	8003d6c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800cb08:	2300      	movs	r3, #0
}
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	3708      	adds	r7, #8
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	bd80      	pop	{r7, pc}
 800cb12:	bf00      	nop
 800cb14:	2000344c 	.word	0x2000344c
 800cb18:	40006800 	.word	0x40006800

0800cb1c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b084      	sub	sp, #16
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb24:	2300      	movs	r3, #0
 800cb26:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb28:	2300      	movs	r3, #0
 800cb2a:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800cb32:	4618      	mov	r0, r3
 800cb34:	f7f6 fb1f 	bl	8003176 <HAL_PCD_Start>
 800cb38:	4603      	mov	r3, r0
 800cb3a:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800cb3c:	7bbb      	ldrb	r3, [r7, #14]
 800cb3e:	2b03      	cmp	r3, #3
 800cb40:	d816      	bhi.n	800cb70 <USBD_LL_Start+0x54>
 800cb42:	a201      	add	r2, pc, #4	; (adr r2, 800cb48 <USBD_LL_Start+0x2c>)
 800cb44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb48:	0800cb59 	.word	0x0800cb59
 800cb4c:	0800cb5f 	.word	0x0800cb5f
 800cb50:	0800cb65 	.word	0x0800cb65
 800cb54:	0800cb6b 	.word	0x0800cb6b
    case HAL_OK :
      usb_status = USBD_OK;
 800cb58:	2300      	movs	r3, #0
 800cb5a:	73fb      	strb	r3, [r7, #15]
    break;
 800cb5c:	e00b      	b.n	800cb76 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cb5e:	2302      	movs	r3, #2
 800cb60:	73fb      	strb	r3, [r7, #15]
    break;
 800cb62:	e008      	b.n	800cb76 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cb64:	2301      	movs	r3, #1
 800cb66:	73fb      	strb	r3, [r7, #15]
    break;
 800cb68:	e005      	b.n	800cb76 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cb6a:	2302      	movs	r3, #2
 800cb6c:	73fb      	strb	r3, [r7, #15]
    break;
 800cb6e:	e002      	b.n	800cb76 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800cb70:	2302      	movs	r3, #2
 800cb72:	73fb      	strb	r3, [r7, #15]
    break;
 800cb74:	bf00      	nop
  }
  return usb_status;
 800cb76:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb78:	4618      	mov	r0, r3
 800cb7a:	3710      	adds	r7, #16
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	bd80      	pop	{r7, pc}

0800cb80 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b084      	sub	sp, #16
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
 800cb88:	4608      	mov	r0, r1
 800cb8a:	4611      	mov	r1, r2
 800cb8c:	461a      	mov	r2, r3
 800cb8e:	4603      	mov	r3, r0
 800cb90:	70fb      	strb	r3, [r7, #3]
 800cb92:	460b      	mov	r3, r1
 800cb94:	70bb      	strb	r3, [r7, #2]
 800cb96:	4613      	mov	r3, r2
 800cb98:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb9e:	2300      	movs	r3, #0
 800cba0:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800cba8:	78bb      	ldrb	r3, [r7, #2]
 800cbaa:	883a      	ldrh	r2, [r7, #0]
 800cbac:	78f9      	ldrb	r1, [r7, #3]
 800cbae:	f7f6 fc82 	bl	80034b6 <HAL_PCD_EP_Open>
 800cbb2:	4603      	mov	r3, r0
 800cbb4:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cbb6:	7bbb      	ldrb	r3, [r7, #14]
 800cbb8:	2b03      	cmp	r3, #3
 800cbba:	d817      	bhi.n	800cbec <USBD_LL_OpenEP+0x6c>
 800cbbc:	a201      	add	r2, pc, #4	; (adr r2, 800cbc4 <USBD_LL_OpenEP+0x44>)
 800cbbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbc2:	bf00      	nop
 800cbc4:	0800cbd5 	.word	0x0800cbd5
 800cbc8:	0800cbdb 	.word	0x0800cbdb
 800cbcc:	0800cbe1 	.word	0x0800cbe1
 800cbd0:	0800cbe7 	.word	0x0800cbe7
    case HAL_OK :
      usb_status = USBD_OK;
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	73fb      	strb	r3, [r7, #15]
    break;
 800cbd8:	e00b      	b.n	800cbf2 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cbda:	2302      	movs	r3, #2
 800cbdc:	73fb      	strb	r3, [r7, #15]
    break;
 800cbde:	e008      	b.n	800cbf2 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cbe0:	2301      	movs	r3, #1
 800cbe2:	73fb      	strb	r3, [r7, #15]
    break;
 800cbe4:	e005      	b.n	800cbf2 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cbe6:	2302      	movs	r3, #2
 800cbe8:	73fb      	strb	r3, [r7, #15]
    break;
 800cbea:	e002      	b.n	800cbf2 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800cbec:	2302      	movs	r3, #2
 800cbee:	73fb      	strb	r3, [r7, #15]
    break;
 800cbf0:	bf00      	nop
  }
  return usb_status;
 800cbf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	3710      	adds	r7, #16
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	bd80      	pop	{r7, pc}

0800cbfc <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b084      	sub	sp, #16
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]
 800cc04:	460b      	mov	r3, r1
 800cc06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc08:	2300      	movs	r3, #0
 800cc0a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800cc16:	78fa      	ldrb	r2, [r7, #3]
 800cc18:	4611      	mov	r1, r2
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	f7f6 fcab 	bl	8003576 <HAL_PCD_EP_Close>
 800cc20:	4603      	mov	r3, r0
 800cc22:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 800cc24:	7bbb      	ldrb	r3, [r7, #14]
 800cc26:	2b03      	cmp	r3, #3
 800cc28:	d816      	bhi.n	800cc58 <USBD_LL_CloseEP+0x5c>
 800cc2a:	a201      	add	r2, pc, #4	; (adr r2, 800cc30 <USBD_LL_CloseEP+0x34>)
 800cc2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc30:	0800cc41 	.word	0x0800cc41
 800cc34:	0800cc47 	.word	0x0800cc47
 800cc38:	0800cc4d 	.word	0x0800cc4d
 800cc3c:	0800cc53 	.word	0x0800cc53
    case HAL_OK :
      usb_status = USBD_OK;
 800cc40:	2300      	movs	r3, #0
 800cc42:	73fb      	strb	r3, [r7, #15]
    break;
 800cc44:	e00b      	b.n	800cc5e <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cc46:	2302      	movs	r3, #2
 800cc48:	73fb      	strb	r3, [r7, #15]
    break;
 800cc4a:	e008      	b.n	800cc5e <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cc4c:	2301      	movs	r3, #1
 800cc4e:	73fb      	strb	r3, [r7, #15]
    break;
 800cc50:	e005      	b.n	800cc5e <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cc52:	2302      	movs	r3, #2
 800cc54:	73fb      	strb	r3, [r7, #15]
    break;
 800cc56:	e002      	b.n	800cc5e <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800cc58:	2302      	movs	r3, #2
 800cc5a:	73fb      	strb	r3, [r7, #15]
    break;
 800cc5c:	bf00      	nop
  }
  return usb_status;  
 800cc5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc60:	4618      	mov	r0, r3
 800cc62:	3710      	adds	r7, #16
 800cc64:	46bd      	mov	sp, r7
 800cc66:	bd80      	pop	{r7, pc}

0800cc68 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b084      	sub	sp, #16
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
 800cc70:	460b      	mov	r3, r1
 800cc72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc74:	2300      	movs	r3, #0
 800cc76:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc78:	2300      	movs	r3, #0
 800cc7a:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800cc82:	78fa      	ldrb	r2, [r7, #3]
 800cc84:	4611      	mov	r1, r2
 800cc86:	4618      	mov	r0, r3
 800cc88:	f7f6 fd3f 	bl	800370a <HAL_PCD_EP_SetStall>
 800cc8c:	4603      	mov	r3, r0
 800cc8e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cc90:	7bbb      	ldrb	r3, [r7, #14]
 800cc92:	2b03      	cmp	r3, #3
 800cc94:	d816      	bhi.n	800ccc4 <USBD_LL_StallEP+0x5c>
 800cc96:	a201      	add	r2, pc, #4	; (adr r2, 800cc9c <USBD_LL_StallEP+0x34>)
 800cc98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc9c:	0800ccad 	.word	0x0800ccad
 800cca0:	0800ccb3 	.word	0x0800ccb3
 800cca4:	0800ccb9 	.word	0x0800ccb9
 800cca8:	0800ccbf 	.word	0x0800ccbf
    case HAL_OK :
      usb_status = USBD_OK;
 800ccac:	2300      	movs	r3, #0
 800ccae:	73fb      	strb	r3, [r7, #15]
    break;
 800ccb0:	e00b      	b.n	800ccca <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ccb2:	2302      	movs	r3, #2
 800ccb4:	73fb      	strb	r3, [r7, #15]
    break;
 800ccb6:	e008      	b.n	800ccca <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ccb8:	2301      	movs	r3, #1
 800ccba:	73fb      	strb	r3, [r7, #15]
    break;
 800ccbc:	e005      	b.n	800ccca <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ccbe:	2302      	movs	r3, #2
 800ccc0:	73fb      	strb	r3, [r7, #15]
    break;
 800ccc2:	e002      	b.n	800ccca <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800ccc4:	2302      	movs	r3, #2
 800ccc6:	73fb      	strb	r3, [r7, #15]
    break;
 800ccc8:	bf00      	nop
  }
  return usb_status;  
 800ccca:	7bfb      	ldrb	r3, [r7, #15]
}
 800cccc:	4618      	mov	r0, r3
 800ccce:	3710      	adds	r7, #16
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	bd80      	pop	{r7, pc}

0800ccd4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b084      	sub	sp, #16
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
 800ccdc:	460b      	mov	r3, r1
 800ccde:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cce0:	2300      	movs	r3, #0
 800cce2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cce4:	2300      	movs	r3, #0
 800cce6:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800ccee:	78fa      	ldrb	r2, [r7, #3]
 800ccf0:	4611      	mov	r1, r2
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	f7f6 fd63 	bl	80037be <HAL_PCD_EP_ClrStall>
 800ccf8:	4603      	mov	r3, r0
 800ccfa:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800ccfc:	7bbb      	ldrb	r3, [r7, #14]
 800ccfe:	2b03      	cmp	r3, #3
 800cd00:	d816      	bhi.n	800cd30 <USBD_LL_ClearStallEP+0x5c>
 800cd02:	a201      	add	r2, pc, #4	; (adr r2, 800cd08 <USBD_LL_ClearStallEP+0x34>)
 800cd04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd08:	0800cd19 	.word	0x0800cd19
 800cd0c:	0800cd1f 	.word	0x0800cd1f
 800cd10:	0800cd25 	.word	0x0800cd25
 800cd14:	0800cd2b 	.word	0x0800cd2b
    case HAL_OK :
      usb_status = USBD_OK;
 800cd18:	2300      	movs	r3, #0
 800cd1a:	73fb      	strb	r3, [r7, #15]
    break;
 800cd1c:	e00b      	b.n	800cd36 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cd1e:	2302      	movs	r3, #2
 800cd20:	73fb      	strb	r3, [r7, #15]
    break;
 800cd22:	e008      	b.n	800cd36 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cd24:	2301      	movs	r3, #1
 800cd26:	73fb      	strb	r3, [r7, #15]
    break;
 800cd28:	e005      	b.n	800cd36 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cd2a:	2302      	movs	r3, #2
 800cd2c:	73fb      	strb	r3, [r7, #15]
    break;
 800cd2e:	e002      	b.n	800cd36 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800cd30:	2302      	movs	r3, #2
 800cd32:	73fb      	strb	r3, [r7, #15]
    break;
 800cd34:	bf00      	nop
  }
  return usb_status; 
 800cd36:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd38:	4618      	mov	r0, r3
 800cd3a:	3710      	adds	r7, #16
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	bd80      	pop	{r7, pc}

0800cd40 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd40:	b480      	push	{r7}
 800cd42:	b085      	sub	sp, #20
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
 800cd48:	460b      	mov	r3, r1
 800cd4a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800cd52:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800cd54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	da08      	bge.n	800cd6e <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800cd5c:	78fb      	ldrb	r3, [r7, #3]
 800cd5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd62:	68fa      	ldr	r2, [r7, #12]
 800cd64:	015b      	lsls	r3, r3, #5
 800cd66:	4413      	add	r3, r2
 800cd68:	332a      	adds	r3, #42	; 0x2a
 800cd6a:	781b      	ldrb	r3, [r3, #0]
 800cd6c:	e008      	b.n	800cd80 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800cd6e:	78fb      	ldrb	r3, [r7, #3]
 800cd70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd74:	68fa      	ldr	r2, [r7, #12]
 800cd76:	015b      	lsls	r3, r3, #5
 800cd78:	4413      	add	r3, r2
 800cd7a:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800cd7e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cd80:	4618      	mov	r0, r3
 800cd82:	3714      	adds	r7, #20
 800cd84:	46bd      	mov	sp, r7
 800cd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8a:	4770      	bx	lr

0800cd8c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b084      	sub	sp, #16
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	6078      	str	r0, [r7, #4]
 800cd94:	460b      	mov	r3, r1
 800cd96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd98:	2300      	movs	r3, #0
 800cd9a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800cda6:	78fa      	ldrb	r2, [r7, #3]
 800cda8:	4611      	mov	r1, r2
 800cdaa:	4618      	mov	r0, r3
 800cdac:	f7f6 fb5e 	bl	800346c <HAL_PCD_SetAddress>
 800cdb0:	4603      	mov	r3, r0
 800cdb2:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800cdb4:	7bbb      	ldrb	r3, [r7, #14]
 800cdb6:	2b03      	cmp	r3, #3
 800cdb8:	d816      	bhi.n	800cde8 <USBD_LL_SetUSBAddress+0x5c>
 800cdba:	a201      	add	r2, pc, #4	; (adr r2, 800cdc0 <USBD_LL_SetUSBAddress+0x34>)
 800cdbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdc0:	0800cdd1 	.word	0x0800cdd1
 800cdc4:	0800cdd7 	.word	0x0800cdd7
 800cdc8:	0800cddd 	.word	0x0800cddd
 800cdcc:	0800cde3 	.word	0x0800cde3
    case HAL_OK :
      usb_status = USBD_OK;
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	73fb      	strb	r3, [r7, #15]
    break;
 800cdd4:	e00b      	b.n	800cdee <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cdd6:	2302      	movs	r3, #2
 800cdd8:	73fb      	strb	r3, [r7, #15]
    break;
 800cdda:	e008      	b.n	800cdee <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cddc:	2301      	movs	r3, #1
 800cdde:	73fb      	strb	r3, [r7, #15]
    break;
 800cde0:	e005      	b.n	800cdee <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cde2:	2302      	movs	r3, #2
 800cde4:	73fb      	strb	r3, [r7, #15]
    break;
 800cde6:	e002      	b.n	800cdee <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800cde8:	2302      	movs	r3, #2
 800cdea:	73fb      	strb	r3, [r7, #15]
    break;
 800cdec:	bf00      	nop
  }
  return usb_status;  
 800cdee:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	3710      	adds	r7, #16
 800cdf4:	46bd      	mov	sp, r7
 800cdf6:	bd80      	pop	{r7, pc}

0800cdf8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	b086      	sub	sp, #24
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	60f8      	str	r0, [r7, #12]
 800ce00:	607a      	str	r2, [r7, #4]
 800ce02:	461a      	mov	r2, r3
 800ce04:	460b      	mov	r3, r1
 800ce06:	72fb      	strb	r3, [r7, #11]
 800ce08:	4613      	mov	r3, r2
 800ce0a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce10:	2300      	movs	r3, #0
 800ce12:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800ce1a:	893b      	ldrh	r3, [r7, #8]
 800ce1c:	7af9      	ldrb	r1, [r7, #11]
 800ce1e:	687a      	ldr	r2, [r7, #4]
 800ce20:	f7f6 fc3a 	bl	8003698 <HAL_PCD_EP_Transmit>
 800ce24:	4603      	mov	r3, r0
 800ce26:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800ce28:	7dbb      	ldrb	r3, [r7, #22]
 800ce2a:	2b03      	cmp	r3, #3
 800ce2c:	d816      	bhi.n	800ce5c <USBD_LL_Transmit+0x64>
 800ce2e:	a201      	add	r2, pc, #4	; (adr r2, 800ce34 <USBD_LL_Transmit+0x3c>)
 800ce30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce34:	0800ce45 	.word	0x0800ce45
 800ce38:	0800ce4b 	.word	0x0800ce4b
 800ce3c:	0800ce51 	.word	0x0800ce51
 800ce40:	0800ce57 	.word	0x0800ce57
    case HAL_OK :
      usb_status = USBD_OK;
 800ce44:	2300      	movs	r3, #0
 800ce46:	75fb      	strb	r3, [r7, #23]
    break;
 800ce48:	e00b      	b.n	800ce62 <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ce4a:	2302      	movs	r3, #2
 800ce4c:	75fb      	strb	r3, [r7, #23]
    break;
 800ce4e:	e008      	b.n	800ce62 <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ce50:	2301      	movs	r3, #1
 800ce52:	75fb      	strb	r3, [r7, #23]
    break;
 800ce54:	e005      	b.n	800ce62 <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ce56:	2302      	movs	r3, #2
 800ce58:	75fb      	strb	r3, [r7, #23]
    break;
 800ce5a:	e002      	b.n	800ce62 <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 800ce5c:	2302      	movs	r3, #2
 800ce5e:	75fb      	strb	r3, [r7, #23]
    break;
 800ce60:	bf00      	nop
  }
  return usb_status;    
 800ce62:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce64:	4618      	mov	r0, r3
 800ce66:	3718      	adds	r7, #24
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd80      	pop	{r7, pc}

0800ce6c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b086      	sub	sp, #24
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	60f8      	str	r0, [r7, #12]
 800ce74:	607a      	str	r2, [r7, #4]
 800ce76:	461a      	mov	r2, r3
 800ce78:	460b      	mov	r3, r1
 800ce7a:	72fb      	strb	r3, [r7, #11]
 800ce7c:	4613      	mov	r3, r2
 800ce7e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce80:	2300      	movs	r3, #0
 800ce82:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce84:	2300      	movs	r3, #0
 800ce86:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800ce8e:	893b      	ldrh	r3, [r7, #8]
 800ce90:	7af9      	ldrb	r1, [r7, #11]
 800ce92:	687a      	ldr	r2, [r7, #4]
 800ce94:	f7f6 fbb1 	bl	80035fa <HAL_PCD_EP_Receive>
 800ce98:	4603      	mov	r3, r0
 800ce9a:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800ce9c:	7dbb      	ldrb	r3, [r7, #22]
 800ce9e:	2b03      	cmp	r3, #3
 800cea0:	d816      	bhi.n	800ced0 <USBD_LL_PrepareReceive+0x64>
 800cea2:	a201      	add	r2, pc, #4	; (adr r2, 800cea8 <USBD_LL_PrepareReceive+0x3c>)
 800cea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cea8:	0800ceb9 	.word	0x0800ceb9
 800ceac:	0800cebf 	.word	0x0800cebf
 800ceb0:	0800cec5 	.word	0x0800cec5
 800ceb4:	0800cecb 	.word	0x0800cecb
    case HAL_OK :
      usb_status = USBD_OK;
 800ceb8:	2300      	movs	r3, #0
 800ceba:	75fb      	strb	r3, [r7, #23]
    break;
 800cebc:	e00b      	b.n	800ced6 <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cebe:	2302      	movs	r3, #2
 800cec0:	75fb      	strb	r3, [r7, #23]
    break;
 800cec2:	e008      	b.n	800ced6 <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cec4:	2301      	movs	r3, #1
 800cec6:	75fb      	strb	r3, [r7, #23]
    break;
 800cec8:	e005      	b.n	800ced6 <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ceca:	2302      	movs	r3, #2
 800cecc:	75fb      	strb	r3, [r7, #23]
    break;
 800cece:	e002      	b.n	800ced6 <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 800ced0:	2302      	movs	r3, #2
 800ced2:	75fb      	strb	r3, [r7, #23]
    break;
 800ced4:	bf00      	nop
  }
  return usb_status; 
 800ced6:	7dfb      	ldrb	r3, [r7, #23]
}
 800ced8:	4618      	mov	r0, r3
 800ceda:	3718      	adds	r7, #24
 800cedc:	46bd      	mov	sp, r7
 800cede:	bd80      	pop	{r7, pc}

0800cee0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b082      	sub	sp, #8
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	6078      	str	r0, [r7, #4]
 800cee8:	460b      	mov	r3, r1
 800ceea:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800cef2:	78fa      	ldrb	r2, [r7, #3]
 800cef4:	4611      	mov	r1, r2
 800cef6:	4618      	mov	r0, r3
 800cef8:	f7f6 fbb9 	bl	800366e <HAL_PCD_EP_GetRxCount>
 800cefc:	4603      	mov	r3, r0
}
 800cefe:	4618      	mov	r0, r3
 800cf00:	3708      	adds	r7, #8
 800cf02:	46bd      	mov	sp, r7
 800cf04:	bd80      	pop	{r7, pc}
	...

0800cf08 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b082      	sub	sp, #8
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
 800cf10:	460b      	mov	r3, r1
 800cf12:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800cf14:	78fb      	ldrb	r3, [r7, #3]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d002      	beq.n	800cf20 <HAL_PCDEx_LPM_Callback+0x18>
 800cf1a:	2b01      	cmp	r3, #1
 800cf1c:	d013      	beq.n	800cf46 <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 800cf1e:	e023      	b.n	800cf68 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	699b      	ldr	r3, [r3, #24]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d007      	beq.n	800cf38 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800cf28:	f000 f83c 	bl	800cfa4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cf2c:	4b10      	ldr	r3, [pc, #64]	; (800cf70 <HAL_PCDEx_LPM_Callback+0x68>)
 800cf2e:	691b      	ldr	r3, [r3, #16]
 800cf30:	4a0f      	ldr	r2, [pc, #60]	; (800cf70 <HAL_PCDEx_LPM_Callback+0x68>)
 800cf32:	f023 0306 	bic.w	r3, r3, #6
 800cf36:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800cf3e:	4618      	mov	r0, r3
 800cf40:	f7fb f885 	bl	800804e <USBD_LL_Resume>
    break;
 800cf44:	e010      	b.n	800cf68 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	f7fb f869 	bl	8008024 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	699b      	ldr	r3, [r3, #24]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d005      	beq.n	800cf66 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cf5a:	4b05      	ldr	r3, [pc, #20]	; (800cf70 <HAL_PCDEx_LPM_Callback+0x68>)
 800cf5c:	691b      	ldr	r3, [r3, #16]
 800cf5e:	4a04      	ldr	r2, [pc, #16]	; (800cf70 <HAL_PCDEx_LPM_Callback+0x68>)
 800cf60:	f043 0306 	orr.w	r3, r3, #6
 800cf64:	6113      	str	r3, [r2, #16]
    break;   
 800cf66:	bf00      	nop
}
 800cf68:	bf00      	nop
 800cf6a:	3708      	adds	r7, #8
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	bd80      	pop	{r7, pc}
 800cf70:	e000ed00 	.word	0xe000ed00

0800cf74 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cf74:	b480      	push	{r7}
 800cf76:	b083      	sub	sp, #12
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800cf7c:	4b03      	ldr	r3, [pc, #12]	; (800cf8c <USBD_static_malloc+0x18>)
}
 800cf7e:	4618      	mov	r0, r3
 800cf80:	370c      	adds	r7, #12
 800cf82:	46bd      	mov	sp, r7
 800cf84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf88:	4770      	bx	lr
 800cf8a:	bf00      	nop
 800cf8c:	20001a70 	.word	0x20001a70

0800cf90 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cf90:	b480      	push	{r7}
 800cf92:	b083      	sub	sp, #12
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]

}
 800cf98:	bf00      	nop
 800cf9a:	370c      	adds	r7, #12
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa2:	4770      	bx	lr

0800cfa4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800cfa8:	f7f3 feb2 	bl	8000d10 <SystemClock_Config>
}
 800cfac:	bf00      	nop
 800cfae:	bd80      	pop	{r7, pc}

0800cfb0 <__libc_init_array>:
 800cfb0:	b570      	push	{r4, r5, r6, lr}
 800cfb2:	4e0d      	ldr	r6, [pc, #52]	; (800cfe8 <__libc_init_array+0x38>)
 800cfb4:	4c0d      	ldr	r4, [pc, #52]	; (800cfec <__libc_init_array+0x3c>)
 800cfb6:	1ba4      	subs	r4, r4, r6
 800cfb8:	10a4      	asrs	r4, r4, #2
 800cfba:	2500      	movs	r5, #0
 800cfbc:	42a5      	cmp	r5, r4
 800cfbe:	d109      	bne.n	800cfd4 <__libc_init_array+0x24>
 800cfc0:	4e0b      	ldr	r6, [pc, #44]	; (800cff0 <__libc_init_array+0x40>)
 800cfc2:	4c0c      	ldr	r4, [pc, #48]	; (800cff4 <__libc_init_array+0x44>)
 800cfc4:	f000 f82c 	bl	800d020 <_init>
 800cfc8:	1ba4      	subs	r4, r4, r6
 800cfca:	10a4      	asrs	r4, r4, #2
 800cfcc:	2500      	movs	r5, #0
 800cfce:	42a5      	cmp	r5, r4
 800cfd0:	d105      	bne.n	800cfde <__libc_init_array+0x2e>
 800cfd2:	bd70      	pop	{r4, r5, r6, pc}
 800cfd4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cfd8:	4798      	blx	r3
 800cfda:	3501      	adds	r5, #1
 800cfdc:	e7ee      	b.n	800cfbc <__libc_init_array+0xc>
 800cfde:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cfe2:	4798      	blx	r3
 800cfe4:	3501      	adds	r5, #1
 800cfe6:	e7f2      	b.n	800cfce <__libc_init_array+0x1e>
 800cfe8:	0800d164 	.word	0x0800d164
 800cfec:	0800d164 	.word	0x0800d164
 800cff0:	0800d164 	.word	0x0800d164
 800cff4:	0800d168 	.word	0x0800d168

0800cff8 <memcpy>:
 800cff8:	b510      	push	{r4, lr}
 800cffa:	1e43      	subs	r3, r0, #1
 800cffc:	440a      	add	r2, r1
 800cffe:	4291      	cmp	r1, r2
 800d000:	d100      	bne.n	800d004 <memcpy+0xc>
 800d002:	bd10      	pop	{r4, pc}
 800d004:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d008:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d00c:	e7f7      	b.n	800cffe <memcpy+0x6>

0800d00e <memset>:
 800d00e:	4402      	add	r2, r0
 800d010:	4603      	mov	r3, r0
 800d012:	4293      	cmp	r3, r2
 800d014:	d100      	bne.n	800d018 <memset+0xa>
 800d016:	4770      	bx	lr
 800d018:	f803 1b01 	strb.w	r1, [r3], #1
 800d01c:	e7f9      	b.n	800d012 <memset+0x4>
	...

0800d020 <_init>:
 800d020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d022:	bf00      	nop
 800d024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d026:	bc08      	pop	{r3}
 800d028:	469e      	mov	lr, r3
 800d02a:	4770      	bx	lr

0800d02c <_fini>:
 800d02c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d02e:	bf00      	nop
 800d030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d032:	bc08      	pop	{r3}
 800d034:	469e      	mov	lr, r3
 800d036:	4770      	bx	lr
