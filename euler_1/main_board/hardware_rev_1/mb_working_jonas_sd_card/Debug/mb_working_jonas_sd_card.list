
mb_working_jonas_sd_card.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000196b0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c00  08019880  08019880  00029880  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a480  0801a480  000301fc  2**0
                  CONTENTS
  4 .ARM          00000008  0801a480  0801a480  0002a480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a488  0801a488  000301fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a488  0801a488  0002a488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a48c  0801a48c  0002a48c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0801a490  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00016e04  200001fc  0801a68c  000301fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20017000  0801a68c  00037000  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000400d8  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007ca6  00000000  00000000  00070304  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000027c0  00000000  00000000  00077fb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002428  00000000  00000000  0007a770  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00031c6d  00000000  00000000  0007cb98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002a801  00000000  00000000  000ae805  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00104f41  00000000  00000000  000d9006  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001ddf47  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000aeb8  00000000  00000000  001ddfc4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001fc 	.word	0x200001fc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08019868 	.word	0x08019868

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000200 	.word	0x20000200
 800020c:	08019868 	.word	0x08019868

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2uiz>:
 8000b98:	004a      	lsls	r2, r1, #1
 8000b9a:	d211      	bcs.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d211      	bcs.n	8000bc6 <__aeabi_d2uiz+0x2e>
 8000ba2:	d50d      	bpl.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d40e      	bmi.n	8000bcc <__aeabi_d2uiz+0x34>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	fa23 f002 	lsr.w	r0, r3, r2
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_d2uiz+0x3a>
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b972 	b.w	8000f74 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9e08      	ldr	r6, [sp, #32]
 8000cae:	4604      	mov	r4, r0
 8000cb0:	4688      	mov	r8, r1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d14b      	bne.n	8000d4e <__udivmoddi4+0xa6>
 8000cb6:	428a      	cmp	r2, r1
 8000cb8:	4615      	mov	r5, r2
 8000cba:	d967      	bls.n	8000d8c <__udivmoddi4+0xe4>
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	b14a      	cbz	r2, 8000cd6 <__udivmoddi4+0x2e>
 8000cc2:	f1c2 0720 	rsb	r7, r2, #32
 8000cc6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cca:	fa20 f707 	lsr.w	r7, r0, r7
 8000cce:	4095      	lsls	r5, r2
 8000cd0:	ea47 0803 	orr.w	r8, r7, r3
 8000cd4:	4094      	lsls	r4, r2
 8000cd6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ce0:	fa1f fc85 	uxth.w	ip, r5
 8000ce4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ce8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cec:	fb07 f10c 	mul.w	r1, r7, ip
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	d909      	bls.n	8000d08 <__udivmoddi4+0x60>
 8000cf4:	18eb      	adds	r3, r5, r3
 8000cf6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cfa:	f080 811b 	bcs.w	8000f34 <__udivmoddi4+0x28c>
 8000cfe:	4299      	cmp	r1, r3
 8000d00:	f240 8118 	bls.w	8000f34 <__udivmoddi4+0x28c>
 8000d04:	3f02      	subs	r7, #2
 8000d06:	442b      	add	r3, r5
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d10:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d18:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d1c:	45a4      	cmp	ip, r4
 8000d1e:	d909      	bls.n	8000d34 <__udivmoddi4+0x8c>
 8000d20:	192c      	adds	r4, r5, r4
 8000d22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d26:	f080 8107 	bcs.w	8000f38 <__udivmoddi4+0x290>
 8000d2a:	45a4      	cmp	ip, r4
 8000d2c:	f240 8104 	bls.w	8000f38 <__udivmoddi4+0x290>
 8000d30:	3802      	subs	r0, #2
 8000d32:	442c      	add	r4, r5
 8000d34:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d38:	eba4 040c 	sub.w	r4, r4, ip
 8000d3c:	2700      	movs	r7, #0
 8000d3e:	b11e      	cbz	r6, 8000d48 <__udivmoddi4+0xa0>
 8000d40:	40d4      	lsrs	r4, r2
 8000d42:	2300      	movs	r3, #0
 8000d44:	e9c6 4300 	strd	r4, r3, [r6]
 8000d48:	4639      	mov	r1, r7
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d909      	bls.n	8000d66 <__udivmoddi4+0xbe>
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	f000 80eb 	beq.w	8000f2e <__udivmoddi4+0x286>
 8000d58:	2700      	movs	r7, #0
 8000d5a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d5e:	4638      	mov	r0, r7
 8000d60:	4639      	mov	r1, r7
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	fab3 f783 	clz	r7, r3
 8000d6a:	2f00      	cmp	r7, #0
 8000d6c:	d147      	bne.n	8000dfe <__udivmoddi4+0x156>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d302      	bcc.n	8000d78 <__udivmoddi4+0xd0>
 8000d72:	4282      	cmp	r2, r0
 8000d74:	f200 80fa 	bhi.w	8000f6c <__udivmoddi4+0x2c4>
 8000d78:	1a84      	subs	r4, r0, r2
 8000d7a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d7e:	2001      	movs	r0, #1
 8000d80:	4698      	mov	r8, r3
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	d0e0      	beq.n	8000d48 <__udivmoddi4+0xa0>
 8000d86:	e9c6 4800 	strd	r4, r8, [r6]
 8000d8a:	e7dd      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000d8c:	b902      	cbnz	r2, 8000d90 <__udivmoddi4+0xe8>
 8000d8e:	deff      	udf	#255	; 0xff
 8000d90:	fab2 f282 	clz	r2, r2
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	f040 808f 	bne.w	8000eb8 <__udivmoddi4+0x210>
 8000d9a:	1b49      	subs	r1, r1, r5
 8000d9c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000da0:	fa1f f885 	uxth.w	r8, r5
 8000da4:	2701      	movs	r7, #1
 8000da6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000daa:	0c23      	lsrs	r3, r4, #16
 8000dac:	fb0e 111c 	mls	r1, lr, ip, r1
 8000db0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db4:	fb08 f10c 	mul.w	r1, r8, ip
 8000db8:	4299      	cmp	r1, r3
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x124>
 8000dbc:	18eb      	adds	r3, r5, r3
 8000dbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x122>
 8000dc4:	4299      	cmp	r1, r3
 8000dc6:	f200 80cd 	bhi.w	8000f64 <__udivmoddi4+0x2bc>
 8000dca:	4684      	mov	ip, r0
 8000dcc:	1a59      	subs	r1, r3, r1
 8000dce:	b2a3      	uxth	r3, r4
 8000dd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dd4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000dd8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ddc:	fb08 f800 	mul.w	r8, r8, r0
 8000de0:	45a0      	cmp	r8, r4
 8000de2:	d907      	bls.n	8000df4 <__udivmoddi4+0x14c>
 8000de4:	192c      	adds	r4, r5, r4
 8000de6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x14a>
 8000dec:	45a0      	cmp	r8, r4
 8000dee:	f200 80b6 	bhi.w	8000f5e <__udivmoddi4+0x2b6>
 8000df2:	4618      	mov	r0, r3
 8000df4:	eba4 0408 	sub.w	r4, r4, r8
 8000df8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dfc:	e79f      	b.n	8000d3e <__udivmoddi4+0x96>
 8000dfe:	f1c7 0c20 	rsb	ip, r7, #32
 8000e02:	40bb      	lsls	r3, r7
 8000e04:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e08:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e0c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e10:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e14:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e18:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e1c:	4325      	orrs	r5, r4
 8000e1e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e22:	0c2c      	lsrs	r4, r5, #16
 8000e24:	fb08 3319 	mls	r3, r8, r9, r3
 8000e28:	fa1f fa8e 	uxth.w	sl, lr
 8000e2c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e30:	fb09 f40a 	mul.w	r4, r9, sl
 8000e34:	429c      	cmp	r4, r3
 8000e36:	fa02 f207 	lsl.w	r2, r2, r7
 8000e3a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e3e:	d90b      	bls.n	8000e58 <__udivmoddi4+0x1b0>
 8000e40:	eb1e 0303 	adds.w	r3, lr, r3
 8000e44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e48:	f080 8087 	bcs.w	8000f5a <__udivmoddi4+0x2b2>
 8000e4c:	429c      	cmp	r4, r3
 8000e4e:	f240 8084 	bls.w	8000f5a <__udivmoddi4+0x2b2>
 8000e52:	f1a9 0902 	sub.w	r9, r9, #2
 8000e56:	4473      	add	r3, lr
 8000e58:	1b1b      	subs	r3, r3, r4
 8000e5a:	b2ad      	uxth	r5, r5
 8000e5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e60:	fb08 3310 	mls	r3, r8, r0, r3
 8000e64:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e68:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e6c:	45a2      	cmp	sl, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x1da>
 8000e70:	eb1e 0404 	adds.w	r4, lr, r4
 8000e74:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e78:	d26b      	bcs.n	8000f52 <__udivmoddi4+0x2aa>
 8000e7a:	45a2      	cmp	sl, r4
 8000e7c:	d969      	bls.n	8000f52 <__udivmoddi4+0x2aa>
 8000e7e:	3802      	subs	r0, #2
 8000e80:	4474      	add	r4, lr
 8000e82:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e86:	fba0 8902 	umull	r8, r9, r0, r2
 8000e8a:	eba4 040a 	sub.w	r4, r4, sl
 8000e8e:	454c      	cmp	r4, r9
 8000e90:	46c2      	mov	sl, r8
 8000e92:	464b      	mov	r3, r9
 8000e94:	d354      	bcc.n	8000f40 <__udivmoddi4+0x298>
 8000e96:	d051      	beq.n	8000f3c <__udivmoddi4+0x294>
 8000e98:	2e00      	cmp	r6, #0
 8000e9a:	d069      	beq.n	8000f70 <__udivmoddi4+0x2c8>
 8000e9c:	ebb1 050a 	subs.w	r5, r1, sl
 8000ea0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ea4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ea8:	40fd      	lsrs	r5, r7
 8000eaa:	40fc      	lsrs	r4, r7
 8000eac:	ea4c 0505 	orr.w	r5, ip, r5
 8000eb0:	e9c6 5400 	strd	r5, r4, [r6]
 8000eb4:	2700      	movs	r7, #0
 8000eb6:	e747      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000eb8:	f1c2 0320 	rsb	r3, r2, #32
 8000ebc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ec0:	4095      	lsls	r5, r2
 8000ec2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ec6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ece:	4338      	orrs	r0, r7
 8000ed0:	0c01      	lsrs	r1, r0, #16
 8000ed2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ed6:	fa1f f885 	uxth.w	r8, r5
 8000eda:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ede:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee2:	fb07 f308 	mul.w	r3, r7, r8
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	fa04 f402 	lsl.w	r4, r4, r2
 8000eec:	d907      	bls.n	8000efe <__udivmoddi4+0x256>
 8000eee:	1869      	adds	r1, r5, r1
 8000ef0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ef4:	d22f      	bcs.n	8000f56 <__udivmoddi4+0x2ae>
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	d92d      	bls.n	8000f56 <__udivmoddi4+0x2ae>
 8000efa:	3f02      	subs	r7, #2
 8000efc:	4429      	add	r1, r5
 8000efe:	1acb      	subs	r3, r1, r3
 8000f00:	b281      	uxth	r1, r0
 8000f02:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f06:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f0a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f0e:	fb00 f308 	mul.w	r3, r0, r8
 8000f12:	428b      	cmp	r3, r1
 8000f14:	d907      	bls.n	8000f26 <__udivmoddi4+0x27e>
 8000f16:	1869      	adds	r1, r5, r1
 8000f18:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f1c:	d217      	bcs.n	8000f4e <__udivmoddi4+0x2a6>
 8000f1e:	428b      	cmp	r3, r1
 8000f20:	d915      	bls.n	8000f4e <__udivmoddi4+0x2a6>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4429      	add	r1, r5
 8000f26:	1ac9      	subs	r1, r1, r3
 8000f28:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f2c:	e73b      	b.n	8000da6 <__udivmoddi4+0xfe>
 8000f2e:	4637      	mov	r7, r6
 8000f30:	4630      	mov	r0, r6
 8000f32:	e709      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000f34:	4607      	mov	r7, r0
 8000f36:	e6e7      	b.n	8000d08 <__udivmoddi4+0x60>
 8000f38:	4618      	mov	r0, r3
 8000f3a:	e6fb      	b.n	8000d34 <__udivmoddi4+0x8c>
 8000f3c:	4541      	cmp	r1, r8
 8000f3e:	d2ab      	bcs.n	8000e98 <__udivmoddi4+0x1f0>
 8000f40:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f44:	eb69 020e 	sbc.w	r2, r9, lr
 8000f48:	3801      	subs	r0, #1
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	e7a4      	b.n	8000e98 <__udivmoddi4+0x1f0>
 8000f4e:	4660      	mov	r0, ip
 8000f50:	e7e9      	b.n	8000f26 <__udivmoddi4+0x27e>
 8000f52:	4618      	mov	r0, r3
 8000f54:	e795      	b.n	8000e82 <__udivmoddi4+0x1da>
 8000f56:	4667      	mov	r7, ip
 8000f58:	e7d1      	b.n	8000efe <__udivmoddi4+0x256>
 8000f5a:	4681      	mov	r9, r0
 8000f5c:	e77c      	b.n	8000e58 <__udivmoddi4+0x1b0>
 8000f5e:	3802      	subs	r0, #2
 8000f60:	442c      	add	r4, r5
 8000f62:	e747      	b.n	8000df4 <__udivmoddi4+0x14c>
 8000f64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f68:	442b      	add	r3, r5
 8000f6a:	e72f      	b.n	8000dcc <__udivmoddi4+0x124>
 8000f6c:	4638      	mov	r0, r7
 8000f6e:	e708      	b.n	8000d82 <__udivmoddi4+0xda>
 8000f70:	4637      	mov	r7, r6
 8000f72:	e6e9      	b.n	8000d48 <__udivmoddi4+0xa0>

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <calculateCRC>:
 *      Author: Jonas
 */
#include "EPOS4/epos4.h"


uint16_t calculateCRC(uint8_t *data, uint8_t len) {
 8000f78:	b480      	push	{r7}
 8000f7a:	b087      	sub	sp, #28
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	460b      	mov	r3, r1
 8000f82:	70fb      	strb	r3, [r7, #3]
  uint16_t shifter, c;
  uint16_t carry;
  uint16_t crc = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	827b      	strh	r3, [r7, #18]

  for (int i = 0; i < len + 2; i += 2) {
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	e03c      	b.n	8001008 <calculateCRC+0x90>
    shifter = 0x8000;
 8000f8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f92:	82fb      	strh	r3, [r7, #22]
    if (i == len) {
 8000f94:	78fb      	ldrb	r3, [r7, #3]
 8000f96:	68fa      	ldr	r2, [r7, #12]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d102      	bne.n	8000fa2 <calculateCRC+0x2a>
      c = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	82bb      	strh	r3, [r7, #20]
 8000fa0:	e00e      	b.n	8000fc0 <calculateCRC+0x48>
    } else {
      c = data[i+1] << 8 | data[i];
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	4413      	add	r3, r2
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	021b      	lsls	r3, r3, #8
 8000fae:	b21a      	sxth	r2, r3
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	440b      	add	r3, r1
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	b21b      	sxth	r3, r3
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	b21b      	sxth	r3, r3
 8000fbe:	82bb      	strh	r3, [r7, #20]
    }
    do {
      carry = crc & 0x8000;
 8000fc0:	8a7b      	ldrh	r3, [r7, #18]
 8000fc2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000fc6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000fca:	817b      	strh	r3, [r7, #10]
      crc <<= 1;
 8000fcc:	8a7b      	ldrh	r3, [r7, #18]
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	827b      	strh	r3, [r7, #18]
      if(c & shifter) crc++;
 8000fd2:	8aba      	ldrh	r2, [r7, #20]
 8000fd4:	8afb      	ldrh	r3, [r7, #22]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d002      	beq.n	8000fe4 <calculateCRC+0x6c>
 8000fde:	8a7b      	ldrh	r3, [r7, #18]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	827b      	strh	r3, [r7, #18]
      if(carry) crc ^= 0x1021;
 8000fe4:	897b      	ldrh	r3, [r7, #10]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d005      	beq.n	8000ff6 <calculateCRC+0x7e>
 8000fea:	8a7b      	ldrh	r3, [r7, #18]
 8000fec:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8000ff0:	f083 0301 	eor.w	r3, r3, #1
 8000ff4:	827b      	strh	r3, [r7, #18]
      shifter >>= 1;
 8000ff6:	8afb      	ldrh	r3, [r7, #22]
 8000ff8:	085b      	lsrs	r3, r3, #1
 8000ffa:	82fb      	strh	r3, [r7, #22]
    } while(shifter);
 8000ffc:	8afb      	ldrh	r3, [r7, #22]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d1de      	bne.n	8000fc0 <calculateCRC+0x48>
  for (int i = 0; i < len + 2; i += 2) {
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	3302      	adds	r3, #2
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	78fb      	ldrb	r3, [r7, #3]
 800100a:	3302      	adds	r3, #2
 800100c:	68fa      	ldr	r2, [r7, #12]
 800100e:	429a      	cmp	r2, r3
 8001010:	dbbd      	blt.n	8000f8e <calculateCRC+0x16>
  }
  return crc;
 8001012:	8a7b      	ldrh	r3, [r7, #18]
}
 8001014:	4618      	mov	r0, r3
 8001016:	371c      	adds	r7, #28
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <EnableMotor>:

osStatus_t EnableMotor(){
 8001020:	b580      	push	{r7, lr}
 8001022:	b08a      	sub	sp, #40	; 0x28
 8001024:	af00      	add	r7, sp, #0

	osStatus_t status = osError;
 8001026:	f04f 33ff 	mov.w	r3, #4294967295
 800102a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t command[2];
	uint8_t data[4];
	uint8_t rx_buffer_write[10];

	/* Register for Motor Control */
	command[0] = 0x60;
 800102c:	2360      	movs	r3, #96	; 0x60
 800102e:	f887 3020 	strb.w	r3, [r7, #32]
	command[1] = 0x40;
 8001032:	2340      	movs	r3, #64	; 0x40
 8001034:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	data[0] = 0x00;
 8001038:	2300      	movs	r3, #0
 800103a:	773b      	strb	r3, [r7, #28]
	data[1] = 0x00;
 800103c:	2300      	movs	r3, #0
 800103e:	777b      	strb	r3, [r7, #29]
	data[2] = 0x00;
 8001040:	2300      	movs	r3, #0
 8001042:	77bb      	strb	r3, [r7, #30]
	data[3] = 0x06;
 8001044:	2306      	movs	r3, #6
 8001046:	77fb      	strb	r3, [r7, #31]

	status = WriteCommand(command, data, rx_buffer_write);
 8001048:	f107 0210 	add.w	r2, r7, #16
 800104c:	f107 011c 	add.w	r1, r7, #28
 8001050:	f107 0320 	add.w	r3, r7, #32
 8001054:	4618      	mov	r0, r3
 8001056:	f000 f8a3 	bl	80011a0 <WriteCommand>
 800105a:	6278      	str	r0, [r7, #36]	; 0x24

	/* Register for Motor Control */
	command[0] = 0x60;
 800105c:	2360      	movs	r3, #96	; 0x60
 800105e:	f887 3020 	strb.w	r3, [r7, #32]
	command[1] = 0x40;
 8001062:	2340      	movs	r3, #64	; 0x40
 8001064:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	/* Fully Enable Controller */
	data[0] = 0x00;
 8001068:	2300      	movs	r3, #0
 800106a:	773b      	strb	r3, [r7, #28]
	data[1] = 0x00;
 800106c:	2300      	movs	r3, #0
 800106e:	777b      	strb	r3, [r7, #29]
	data[2] = 0x00;
 8001070:	2300      	movs	r3, #0
 8001072:	77bb      	strb	r3, [r7, #30]
	data[3] = 0x0F;
 8001074:	230f      	movs	r3, #15
 8001076:	77fb      	strb	r3, [r7, #31]

	status = WriteCommand(command, data, rx_buffer_write);
 8001078:	f107 0210 	add.w	r2, r7, #16
 800107c:	f107 011c 	add.w	r1, r7, #28
 8001080:	f107 0320 	add.w	r3, r7, #32
 8001084:	4618      	mov	r0, r3
 8001086:	f000 f88b 	bl	80011a0 <WriteCommand>
 800108a:	6278      	str	r0, [r7, #36]	; 0x24


	/* Check if Motor is enabled */
	uint8_t rx_buffer_read[14];

	command[0] = 0x60;
 800108c:	2360      	movs	r3, #96	; 0x60
 800108e:	f887 3020 	strb.w	r3, [r7, #32]
	command[1] = 0x41;
 8001092:	2341      	movs	r3, #65	; 0x41
 8001094:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	status = ReadCommand(command, rx_buffer_read);
 8001098:	463a      	mov	r2, r7
 800109a:	f107 0320 	add.w	r3, r7, #32
 800109e:	4611      	mov	r1, r2
 80010a0:	4618      	mov	r0, r3
 80010a2:	f000 f901 	bl	80012a8 <ReadCommand>
 80010a6:	6278      	str	r0, [r7, #36]	; 0x24

	if(rx_buffer_read[8] == 0x37 && rx_buffer_read[9] == 0x04 ){
 80010a8:	7a3b      	ldrb	r3, [r7, #8]
 80010aa:	2b37      	cmp	r3, #55	; 0x37
 80010ac:	d104      	bne.n	80010b8 <EnableMotor+0x98>
 80010ae:	7a7b      	ldrb	r3, [r7, #9]
 80010b0:	2b04      	cmp	r3, #4
 80010b2:	d101      	bne.n	80010b8 <EnableMotor+0x98>
		status = osOK;
 80010b4:	2300      	movs	r3, #0
 80010b6:	627b      	str	r3, [r7, #36]	; 0x24
	}

	return status;
 80010b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3728      	adds	r7, #40	; 0x28
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <SetPositionMode>:

osStatus_t SetPositionMode(){
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b086      	sub	sp, #24
 80010c6:	af00      	add	r7, sp, #0
	osStatus_t status = osError;
 80010c8:	f04f 33ff 	mov.w	r3, #4294967295
 80010cc:	617b      	str	r3, [r7, #20]
	uint8_t data[4];
	uint8_t rx_buffer_write[10];


	/* Position Mode Register */
	command[0] = 0x60;
 80010ce:	2360      	movs	r3, #96	; 0x60
 80010d0:	743b      	strb	r3, [r7, #16]
	command[1] = 0x60;
 80010d2:	2360      	movs	r3, #96	; 0x60
 80010d4:	747b      	strb	r3, [r7, #17]


	/* Enable Cyclic Sync Position Mode */
	data[0] = 0x00;
 80010d6:	2300      	movs	r3, #0
 80010d8:	733b      	strb	r3, [r7, #12]
	data[1] = 0x00;
 80010da:	2300      	movs	r3, #0
 80010dc:	737b      	strb	r3, [r7, #13]
	data[2] = 0x00;
 80010de:	2300      	movs	r3, #0
 80010e0:	73bb      	strb	r3, [r7, #14]
	data[3] = 0x08;
 80010e2:	2308      	movs	r3, #8
 80010e4:	73fb      	strb	r3, [r7, #15]

	status = WriteCommand(command, data, rx_buffer_write);
 80010e6:	463a      	mov	r2, r7
 80010e8:	f107 010c 	add.w	r1, r7, #12
 80010ec:	f107 0310 	add.w	r3, r7, #16
 80010f0:	4618      	mov	r0, r3
 80010f2:	f000 f855 	bl	80011a0 <WriteCommand>
 80010f6:	6178      	str	r0, [r7, #20]

	return status;
 80010f8:	697b      	ldr	r3, [r7, #20]
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3718      	adds	r7, #24
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <MoveToPosition>:

osStatus_t MoveToPosition(uint32_t position){
 8001102:	b580      	push	{r7, lr}
 8001104:	b088      	sub	sp, #32
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
	osStatus_t status = osError;
 800110a:	f04f 33ff 	mov.w	r3, #4294967295
 800110e:	61fb      	str	r3, [r7, #28]
	uint8_t command[2];
	uint8_t data[4];
	uint8_t rx_buffer_write[10];

	/* Register for Desired Position */
	command[0] = 0x60;
 8001110:	2360      	movs	r3, #96	; 0x60
 8001112:	763b      	strb	r3, [r7, #24]
	command[1] = 0x7A;
 8001114:	237a      	movs	r3, #122	; 0x7a
 8001116:	767b      	strb	r3, [r7, #25]

	data[0] = (position >> 24) & 0xFF;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	0e1b      	lsrs	r3, r3, #24
 800111c:	b2db      	uxtb	r3, r3
 800111e:	753b      	strb	r3, [r7, #20]
	data[1] = (position >> 16) & 0xFF;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	0c1b      	lsrs	r3, r3, #16
 8001124:	b2db      	uxtb	r3, r3
 8001126:	757b      	strb	r3, [r7, #21]
	data[2] = (position >> 8) & 0xFF;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	0a1b      	lsrs	r3, r3, #8
 800112c:	b2db      	uxtb	r3, r3
 800112e:	75bb      	strb	r3, [r7, #22]
	data[3] = position & 0xFF;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	b2db      	uxtb	r3, r3
 8001134:	75fb      	strb	r3, [r7, #23]

	status = WriteCommand(command, data, rx_buffer_write);
 8001136:	f107 0208 	add.w	r2, r7, #8
 800113a:	f107 0114 	add.w	r1, r7, #20
 800113e:	f107 0318 	add.w	r3, r7, #24
 8001142:	4618      	mov	r0, r3
 8001144:	f000 f82c 	bl	80011a0 <WriteCommand>
 8001148:	61f8      	str	r0, [r7, #28]

	return status;
 800114a:	69fb      	ldr	r3, [r7, #28]

}
 800114c:	4618      	mov	r0, r3
 800114e:	3720      	adds	r7, #32
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <GetPosition>:

osStatus_t GetPosition(int32_t *position){
 8001154:	b580      	push	{r7, lr}
 8001156:	b088      	sub	sp, #32
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]

	osStatus_t status = osError;
 800115c:	f04f 33ff 	mov.w	r3, #4294967295
 8001160:	61fb      	str	r3, [r7, #28]

	uint8_t command[2];
	uint8_t rx_buffer_read[14];

	/* Register where the Current Position is written */
	command[0] = 0x60;
 8001162:	2360      	movs	r3, #96	; 0x60
 8001164:	763b      	strb	r3, [r7, #24]
	command[1] = 0x64;
 8001166:	2364      	movs	r3, #100	; 0x64
 8001168:	767b      	strb	r3, [r7, #25]

	status = ReadCommand(command, rx_buffer_read);
 800116a:	f107 0208 	add.w	r2, r7, #8
 800116e:	f107 0318 	add.w	r3, r7, #24
 8001172:	4611      	mov	r1, r2
 8001174:	4618      	mov	r0, r3
 8001176:	f000 f897 	bl	80012a8 <ReadCommand>
 800117a:	61f8      	str	r0, [r7, #28]

	*position = rx_buffer_read[8] +
 800117c:	7c3b      	ldrb	r3, [r7, #16]
 800117e:	461a      	mov	r2, r3
			(rx_buffer_read[9] << 8) +
 8001180:	7c7b      	ldrb	r3, [r7, #17]
 8001182:	021b      	lsls	r3, r3, #8
	*position = rx_buffer_read[8] +
 8001184:	441a      	add	r2, r3
			(rx_buffer_read[10] << 16) +
 8001186:	7cbb      	ldrb	r3, [r7, #18]
 8001188:	041b      	lsls	r3, r3, #16
			(rx_buffer_read[9] << 8) +
 800118a:	441a      	add	r2, r3
			(rx_buffer_read[11] << 24);
 800118c:	7cfb      	ldrb	r3, [r7, #19]
 800118e:	061b      	lsls	r3, r3, #24
			(rx_buffer_read[10] << 16) +
 8001190:	441a      	add	r2, r3
	*position = rx_buffer_read[8] +
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	601a      	str	r2, [r3, #0]

	return status;
 8001196:	69fb      	ldr	r3, [r7, #28]


}
 8001198:	4618      	mov	r0, r3
 800119a:	3720      	adds	r7, #32
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <WriteCommand>:

osStatus_t WriteCommand(uint8_t *command, uint8_t *data, uint8_t *rx_buffer){
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08c      	sub	sp, #48	; 0x30
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
	osStatus_t status = osError;
 80011ac:	f04f 33ff 	mov.w	r3, #4294967295
 80011b0:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t byte_stream_write[14] = { 0 };
 80011b2:	f107 031c 	add.w	r3, r7, #28
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	819a      	strh	r2, [r3, #12]

	byte_stream_write[0] = 0x90;			// DLE
 80011c0:	2390      	movs	r3, #144	; 0x90
 80011c2:	773b      	strb	r3, [r7, #28]
	byte_stream_write[1] = 0x02;			// STX
 80011c4:	2302      	movs	r3, #2
 80011c6:	777b      	strb	r3, [r7, #29]
	byte_stream_write[2] = 0x68;			// Write Object
 80011c8:	2368      	movs	r3, #104	; 0x68
 80011ca:	77bb      	strb	r3, [r7, #30]
	byte_stream_write[3] = 0x04;			// Length of Data in Words
 80011cc:	2304      	movs	r3, #4
 80011ce:	77fb      	strb	r3, [r7, #31]
	byte_stream_write[4] = 0x01;			// Node ID
 80011d0:	2301      	movs	r3, #1
 80011d2:	f887 3020 	strb.w	r3, [r7, #32]
	byte_stream_write[5] = command[1];		// Index Low Byte
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	785b      	ldrb	r3, [r3, #1]
 80011da:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	byte_stream_write[6] = command[0];		// Index High byte
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	byte_stream_write[7] = 0x00;			// Subindex of object
 80011e6:	2300      	movs	r3, #0
 80011e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	byte_stream_write[8] = data[3];			// Data - low byte
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	78db      	ldrb	r3, [r3, #3]
 80011f0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	byte_stream_write[9] = data[2];			// Data
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	789b      	ldrb	r3, [r3, #2]
 80011f8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	byte_stream_write[10] = data[1];		// Data
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	785b      	ldrb	r3, [r3, #1]
 8001200:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	byte_stream_write[11] = data[0];		// Data - high byte
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	/* CRC Calculation */
	uint8_t crc_data_array[10] = { 0 };
 800120c:	f107 0310 	add.w	r3, r7, #16
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	811a      	strh	r2, [r3, #8]
	memcpy(crc_data_array, &byte_stream_write[2], 10*sizeof(*byte_stream_write));
 8001218:	f107 0310 	add.w	r3, r7, #16
 800121c:	f107 021e 	add.w	r2, r7, #30
 8001220:	6810      	ldr	r0, [r2, #0]
 8001222:	6851      	ldr	r1, [r2, #4]
 8001224:	c303      	stmia	r3!, {r0, r1}
 8001226:	8912      	ldrh	r2, [r2, #8]
 8001228:	801a      	strh	r2, [r3, #0]

	uint16_t crc_calc = 0;
 800122a:	2300      	movs	r3, #0
 800122c:	857b      	strh	r3, [r7, #42]	; 0x2a
	crc_calc = calculateCRC(crc_data_array, 10);
 800122e:	f107 0310 	add.w	r3, r7, #16
 8001232:	210a      	movs	r1, #10
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff fe9f 	bl	8000f78 <calculateCRC>
 800123a:	4603      	mov	r3, r0
 800123c:	857b      	strh	r3, [r7, #42]	; 0x2a

	byte_stream_write[12] = crc_calc & 0xFF;;				// CRC low byte
 800123e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001240:	b2db      	uxtb	r3, r3
 8001242:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	byte_stream_write[13] = (crc_calc >> 8) & 0xFF;;		// CRC high byte
 8001246:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001248:	0a1b      	lsrs	r3, r3, #8
 800124a:	b29b      	uxth	r3, r3
 800124c:	b2db      	uxtb	r3, r3
 800124e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29


	HAL_UART_Transmit(&huart7, byte_stream_write, 14, 10);
 8001252:	f107 011c 	add.w	r1, r7, #28
 8001256:	230a      	movs	r3, #10
 8001258:	220e      	movs	r2, #14
 800125a:	4812      	ldr	r0, [pc, #72]	; (80012a4 <WriteCommand+0x104>)
 800125c:	f009 fd9c 	bl	800ad98 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart7, rx_buffer, 10, 10);
 8001260:	230a      	movs	r3, #10
 8001262:	220a      	movs	r2, #10
 8001264:	6879      	ldr	r1, [r7, #4]
 8001266:	480f      	ldr	r0, [pc, #60]	; (80012a4 <WriteCommand+0x104>)
 8001268:	f009 fe27 	bl	800aeba <HAL_UART_Receive>

	/* Check if we have an error code */
	if((rx_buffer[7] | rx_buffer[6] | rx_buffer[5] | rx_buffer[4]) == 0){
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	3307      	adds	r3, #7
 8001270:	781a      	ldrb	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	3306      	adds	r3, #6
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	4313      	orrs	r3, r2
 800127a:	b2da      	uxtb	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	3305      	adds	r3, #5
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	4313      	orrs	r3, r2
 8001284:	b2da      	uxtb	r2, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	3304      	adds	r3, #4
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	4313      	orrs	r3, r2
 800128e:	b2db      	uxtb	r3, r3
 8001290:	2b00      	cmp	r3, #0
 8001292:	d101      	bne.n	8001298 <WriteCommand+0xf8>
		status = osOK;
 8001294:	2300      	movs	r3, #0
 8001296:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	return status;
 8001298:	6afb      	ldr	r3, [r7, #44]	; 0x2c

}
 800129a:	4618      	mov	r0, r3
 800129c:	3730      	adds	r7, #48	; 0x30
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	200088f0 	.word	0x200088f0

080012a8 <ReadCommand>:

osStatus_t ReadCommand(uint8_t *command, uint8_t *rx_buffer){
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b088      	sub	sp, #32
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
	osStatus_t status = osError;
 80012b2:	f04f 33ff 	mov.w	r3, #4294967295
 80012b6:	61fb      	str	r3, [r7, #28]

	uint8_t byte_stream_read[10];

	byte_stream_read[0] = 0x90;				// DLE
 80012b8:	2390      	movs	r3, #144	; 0x90
 80012ba:	743b      	strb	r3, [r7, #16]
	byte_stream_read[1] = 0x02;				// STX
 80012bc:	2302      	movs	r3, #2
 80012be:	747b      	strb	r3, [r7, #17]
	byte_stream_read[2] = 0x60;				// Read Object
 80012c0:	2360      	movs	r3, #96	; 0x60
 80012c2:	74bb      	strb	r3, [r7, #18]
	byte_stream_read[3] = 0x02;				// Length of stuff sent
 80012c4:	2302      	movs	r3, #2
 80012c6:	74fb      	strb	r3, [r7, #19]
	byte_stream_read[4] = 0x01;				// Node ID
 80012c8:	2301      	movs	r3, #1
 80012ca:	753b      	strb	r3, [r7, #20]
	byte_stream_read[5] = command[1];		// Index Low Byte
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	785b      	ldrb	r3, [r3, #1]
 80012d0:	757b      	strb	r3, [r7, #21]
	byte_stream_read[6] = command[0];		// Index High byte
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	75bb      	strb	r3, [r7, #22]
	byte_stream_read[7] = 0x00;				// Subindex of object
 80012d8:	2300      	movs	r3, #0
 80012da:	75fb      	strb	r3, [r7, #23]

	/* CRC data array */
	uint8_t crc_data_array[6] = { 0 };
 80012dc:	f107 0308 	add.w	r3, r7, #8
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	809a      	strh	r2, [r3, #4]
	memcpy(crc_data_array, &byte_stream_read[2], 6*sizeof(*byte_stream_read));
 80012e6:	f107 0308 	add.w	r3, r7, #8
 80012ea:	f107 0212 	add.w	r2, r7, #18
 80012ee:	6810      	ldr	r0, [r2, #0]
 80012f0:	6018      	str	r0, [r3, #0]
 80012f2:	8892      	ldrh	r2, [r2, #4]
 80012f4:	809a      	strh	r2, [r3, #4]

	uint16_t crc_calc = 0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	837b      	strh	r3, [r7, #26]
	crc_calc = calculateCRC(crc_data_array, 6);
 80012fa:	f107 0308 	add.w	r3, r7, #8
 80012fe:	2106      	movs	r1, #6
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff fe39 	bl	8000f78 <calculateCRC>
 8001306:	4603      	mov	r3, r0
 8001308:	837b      	strh	r3, [r7, #26]

	byte_stream_read[8] = crc_calc & 0xFF;;				// CRC low byte
 800130a:	8b7b      	ldrh	r3, [r7, #26]
 800130c:	b2db      	uxtb	r3, r3
 800130e:	763b      	strb	r3, [r7, #24]
	byte_stream_read[9] = (crc_calc >> 8) & 0xFF;;		// CRC high byte
 8001310:	8b7b      	ldrh	r3, [r7, #26]
 8001312:	0a1b      	lsrs	r3, r3, #8
 8001314:	b29b      	uxth	r3, r3
 8001316:	b2db      	uxtb	r3, r3
 8001318:	767b      	strb	r3, [r7, #25]

	HAL_UART_Transmit(&huart7, byte_stream_read, 10, 10);
 800131a:	f107 0110 	add.w	r1, r7, #16
 800131e:	230a      	movs	r3, #10
 8001320:	220a      	movs	r2, #10
 8001322:	4812      	ldr	r0, [pc, #72]	; (800136c <ReadCommand+0xc4>)
 8001324:	f009 fd38 	bl	800ad98 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart7, rx_buffer, 14, 10);
 8001328:	230a      	movs	r3, #10
 800132a:	220e      	movs	r2, #14
 800132c:	6839      	ldr	r1, [r7, #0]
 800132e:	480f      	ldr	r0, [pc, #60]	; (800136c <ReadCommand+0xc4>)
 8001330:	f009 fdc3 	bl	800aeba <HAL_UART_Receive>

	/* check if we have an error code */
	if((rx_buffer[7] | rx_buffer[6] | rx_buffer[5] | rx_buffer[4]) == 0){
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	3307      	adds	r3, #7
 8001338:	781a      	ldrb	r2, [r3, #0]
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	3306      	adds	r3, #6
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	4313      	orrs	r3, r2
 8001342:	b2da      	uxtb	r2, r3
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	3305      	adds	r3, #5
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	4313      	orrs	r3, r2
 800134c:	b2da      	uxtb	r2, r3
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	3304      	adds	r3, #4
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	4313      	orrs	r3, r2
 8001356:	b2db      	uxtb	r3, r3
 8001358:	2b00      	cmp	r3, #0
 800135a:	d101      	bne.n	8001360 <ReadCommand+0xb8>
		status = osOK;
 800135c:	2300      	movs	r3, #0
 800135e:	61fb      	str	r3, [r7, #28]
	}
	return status;
 8001360:	69fb      	ldr	r3, [r7, #28]

}
 8001362:	4618      	mov	r0, r3
 8001364:	3720      	adds	r7, #32
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	200088f0 	.word	0x200088f0

08001370 <init_coeff>:

#include "Sim_Con/controller.h"

/* In this file, all the controller related function as the controller itself will be defined */

void init_coeff(control_data_t *control_data){
 8001370:	b580      	push	{r7, lr}
 8001372:	f5ad 7d7a 	sub.w	sp, sp, #1000	; 0x3e8
 8001376:	af00      	add	r7, sp, #0
 8001378:	1d3b      	adds	r3, r7, #4
 800137a:	6018      	str	r0, [r3, #0]

    const double coeff0[POLY_DEG+1] = {};
 800137c:	4a27      	ldr	r2, [pc, #156]	; (800141c <init_coeff+0xac>)
 800137e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8001382:	4611      	mov	r1, r2
 8001384:	22f8      	movs	r2, #248	; 0xf8
 8001386:	4618      	mov	r0, r3
 8001388:	f015 fff4 	bl	8017374 <memcpy>
    const double coeff1[POLY_DEG+1] = {};
 800138c:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8001390:	4a23      	ldr	r2, [pc, #140]	; (8001420 <init_coeff+0xb0>)
 8001392:	4618      	mov	r0, r3
 8001394:	4611      	mov	r1, r2
 8001396:	23f8      	movs	r3, #248	; 0xf8
 8001398:	461a      	mov	r2, r3
 800139a:	f015 ffeb 	bl	8017374 <memcpy>
    const double coeff2[POLY_DEG+1] = {};
 800139e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80013a2:	4a20      	ldr	r2, [pc, #128]	; (8001424 <init_coeff+0xb4>)
 80013a4:	4618      	mov	r0, r3
 80013a6:	4611      	mov	r1, r2
 80013a8:	23f8      	movs	r3, #248	; 0xf8
 80013aa:	461a      	mov	r2, r3
 80013ac:	f015 ffe2 	bl	8017374 <memcpy>
    const double coeff3[POLY_DEG+1] = {};
 80013b0:	f107 0308 	add.w	r3, r7, #8
 80013b4:	4a1c      	ldr	r2, [pc, #112]	; (8001428 <init_coeff+0xb8>)
 80013b6:	4618      	mov	r0, r3
 80013b8:	4611      	mov	r1, r2
 80013ba:	23f8      	movs	r3, #248	; 0xf8
 80013bc:	461a      	mov	r2, r3
 80013be:	f015 ffd9 	bl	8017374 <memcpy>

    memcpy(control_data->poly_coeff[0], coeff0, sizeof(coeff0));
 80013c2:	1d3b      	adds	r3, r7, #4
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	3340      	adds	r3, #64	; 0x40
 80013c8:	f507 713c 	add.w	r1, r7, #752	; 0x2f0
 80013cc:	22f8      	movs	r2, #248	; 0xf8
 80013ce:	4618      	mov	r0, r3
 80013d0:	f015 ffd0 	bl	8017374 <memcpy>
    memcpy(control_data->poly_coeff[1], coeff1, sizeof(coeff1));
 80013d4:	1d3b      	adds	r3, r7, #4
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80013dc:	f507 71fc 	add.w	r1, r7, #504	; 0x1f8
 80013e0:	22f8      	movs	r2, #248	; 0xf8
 80013e2:	4618      	mov	r0, r3
 80013e4:	f015 ffc6 	bl	8017374 <memcpy>
    memcpy(control_data->poly_coeff[2], coeff2, sizeof(coeff2));
 80013e8:	1d3b      	adds	r3, r7, #4
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80013f0:	f507 7180 	add.w	r1, r7, #256	; 0x100
 80013f4:	22f8      	movs	r2, #248	; 0xf8
 80013f6:	4618      	mov	r0, r3
 80013f8:	f015 ffbc 	bl	8017374 <memcpy>
    memcpy(control_data->poly_coeff[3], coeff3, sizeof(coeff3));
 80013fc:	1d3b      	adds	r3, r7, #4
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8001404:	f107 0108 	add.w	r1, r7, #8
 8001408:	22f8      	movs	r2, #248	; 0xf8
 800140a:	4618      	mov	r0, r3
 800140c:	f015 ffb2 	bl	8017374 <memcpy>
}
 8001410:	bf00      	nop
 8001412:	f507 777a 	add.w	r7, r7, #1000	; 0x3e8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	08019880 	.word	0x08019880
 8001420:	08019978 	.word	0x08019978
 8001424:	08019a70 	.word	0x08019a70
 8001428:	08019b68 	.word	0x08019b68
 800142c:	00000000 	.word	0x00000000

08001430 <compute_control_input>:

void compute_control_input(control_data_t *control_data, flight_phase_detection_t *flight_phase_detection){
 8001430:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001434:	ed2d 8b02 	vpush	{d8}
 8001438:	b083      	sub	sp, #12
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
 800143e:	6039      	str	r1, [r7, #0]
    if ((flight_phase_detection->flight_phase == COASTING) &&
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	2b04      	cmp	r3, #4
 8001446:	f040 80cd 	bne.w	80015e4 <compute_control_input+0x1b4>
        ((flight_phase_detection->mach_regime == SUBSONIC) || (flight_phase_detection->mach_regime == TRANSONIC)) &&
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	785b      	ldrb	r3, [r3, #1]
    if ((flight_phase_detection->flight_phase == COASTING) &&
 800144e:	2b01      	cmp	r3, #1
 8001450:	d004      	beq.n	800145c <compute_control_input+0x2c>
        ((flight_phase_detection->mach_regime == SUBSONIC) || (flight_phase_detection->mach_regime == TRANSONIC)) &&
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	785b      	ldrb	r3, [r3, #1]
 8001456:	2b02      	cmp	r3, #2
 8001458:	f040 80c4 	bne.w	80015e4 <compute_control_input+0x1b4>
        (flight_phase_detection->mach_number < CONTROL_ACTIVATION_MACH_NUMBER) && (!control_data->apogee_approach_phase)) {
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff f891 	bl	8000588 <__aeabi_f2d>
        ((flight_phase_detection->mach_regime == SUBSONIC) || (flight_phase_detection->mach_regime == TRANSONIC)) &&
 8001466:	a36c      	add	r3, pc, #432	; (adr r3, 8001618 <compute_control_input+0x1e8>)
 8001468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800146c:	f7ff fb56 	bl	8000b1c <__aeabi_dcmplt>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	f000 80b6 	beq.w	80015e4 <compute_control_input+0x1b4>
        (flight_phase_detection->mach_number < CONTROL_ACTIVATION_MACH_NUMBER) && (!control_data->apogee_approach_phase)) {
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800147e:	f083 0301 	eor.w	r3, r3, #1
 8001482:	b2db      	uxtb	r3, r3
 8001484:	2b00      	cmp	r3, #0
 8001486:	f000 80ad 	beq.w	80015e4 <compute_control_input+0x1b4>

        /* caluclate Gains and Reference velocity for given altitude AGL */
        evaluate_polyfit(control_data);
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f000 f913 	bl	80016b6 <evaluate_polyfit>

        /* Calculate Velocity Error */
        compute_reference_error(control_data);
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f000 fa15 	bl	80018c0 <compute_reference_error>

        /* Calculate Control Input */
        control_data->control_input = (float)(-control_data->gains[0] * control_data->reference_error
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 800149c:	461d      	mov	r5, r3
 800149e:	f084 4600 	eor.w	r6, r4, #2147483648	; 0x80000000
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff f86e 	bl	8000588 <__aeabi_f2d>
 80014ac:	4603      	mov	r3, r0
 80014ae:	460c      	mov	r4, r1
 80014b0:	461a      	mov	r2, r3
 80014b2:	4623      	mov	r3, r4
 80014b4:	4628      	mov	r0, r5
 80014b6:	4631      	mov	r1, r6
 80014b8:	f7ff f8be 	bl	8000638 <__aeabi_dmul>
 80014bc:	4603      	mov	r3, r0
 80014be:	460c      	mov	r4, r1
 80014c0:	4698      	mov	r8, r3
 80014c2:	46a1      	mov	r9, r4
                - control_data->gains[1] * control_data->integrated_error
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff f85a 	bl	8000588 <__aeabi_f2d>
 80014d4:	4602      	mov	r2, r0
 80014d6:	460b      	mov	r3, r1
 80014d8:	4620      	mov	r0, r4
 80014da:	4629      	mov	r1, r5
 80014dc:	f7ff f8ac 	bl	8000638 <__aeabi_dmul>
 80014e0:	4603      	mov	r3, r0
 80014e2:	460c      	mov	r4, r1
 80014e4:	461a      	mov	r2, r3
 80014e6:	4623      	mov	r3, r4
 80014e8:	4640      	mov	r0, r8
 80014ea:	4649      	mov	r1, r9
 80014ec:	f7fe feec 	bl	80002c8 <__aeabi_dsub>
 80014f0:	4603      	mov	r3, r0
 80014f2:	460c      	mov	r4, r1
 80014f4:	4698      	mov	r8, r3
 80014f6:	46a1      	mov	r9, r4
                - control_data->gains[2] * (control_data->control_input - OPT_TRAJ_CONTROL_INPUT)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff f840 	bl	8000588 <__aeabi_f2d>
 8001508:	a345      	add	r3, pc, #276	; (adr r3, 8001620 <compute_control_input+0x1f0>)
 800150a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150e:	f7fe fedb 	bl	80002c8 <__aeabi_dsub>
 8001512:	4602      	mov	r2, r0
 8001514:	460b      	mov	r3, r1
 8001516:	4620      	mov	r0, r4
 8001518:	4629      	mov	r1, r5
 800151a:	f7ff f88d 	bl	8000638 <__aeabi_dmul>
 800151e:	4603      	mov	r3, r0
 8001520:	460c      	mov	r4, r1
 8001522:	461a      	mov	r2, r3
 8001524:	4623      	mov	r3, r4
 8001526:	4640      	mov	r0, r8
 8001528:	4649      	mov	r1, r9
 800152a:	f7fe fecd 	bl	80002c8 <__aeabi_dsub>
 800152e:	4603      	mov	r3, r0
 8001530:	460c      	mov	r4, r1
 8001532:	4625      	mov	r5, r4
 8001534:	461c      	mov	r4, r3
                + control_data->control_input);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff f824 	bl	8000588 <__aeabi_f2d>
 8001540:	4602      	mov	r2, r0
 8001542:	460b      	mov	r3, r1
 8001544:	4620      	mov	r0, r4
 8001546:	4629      	mov	r1, r5
 8001548:	f7fe fec0 	bl	80002cc <__adddf3>
 800154c:	4603      	mov	r3, r0
 800154e:	460c      	mov	r4, r1
        control_data->control_input = (float)(-control_data->gains[0] * control_data->reference_error
 8001550:	4618      	mov	r0, r3
 8001552:	4621      	mov	r1, r4
 8001554:	f7ff fb40 	bl	8000bd8 <__aeabi_d2f>
 8001558:	4602      	mov	r2, r0
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	601a      	str	r2, [r3, #0]

        /* Check that the control input is between 0 and 1 */
        control_data->control_input = fmaxf(0, fminf(control_data->control_input, 1));
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	edd3 7a00 	vldr	s15, [r3]
 8001564:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001568:	eeb0 0a67 	vmov.f32	s0, s15
 800156c:	f016 fb40 	bl	8017bf0 <fminf>
 8001570:	eef0 7a40 	vmov.f32	s15, s0
 8001574:	eef0 0a67 	vmov.f32	s1, s15
 8001578:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8001610 <compute_control_input+0x1e0>
 800157c:	f016 fb1d 	bl	8017bba <fmaxf>
 8001580:	eef0 7a40 	vmov.f32	s15, s0
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	edc3 7a00 	vstr	s15, [r3]

        /* Compute boundaries for the antiwindup */
        compute_antiwindup_boundaries(control_data);
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f000 f944 	bl	8001818 <compute_antiwindup_boundaries>

        /* Compute the integrated error */
        control_data->integrated_error = fmaxf(control_data->lowerboundary_aw, fminf(control_data->integrated_error
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	ed93 8a06 	vldr	s16, [r3, #24]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	ed93 7a02 	vldr	s14, [r3, #8]
        + DELTA_T * control_data->reference_error, control_data->upperboundary_aw));
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	edd3 7a01 	vldr	s15, [r3, #4]
 80015a2:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8001614 <compute_control_input+0x1e4>
 80015a6:	ee67 7aa6 	vmul.f32	s15, s15, s13
        control_data->integrated_error = fmaxf(control_data->lowerboundary_aw, fminf(control_data->integrated_error
 80015aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	ed93 7a07 	vldr	s14, [r3, #28]
 80015b4:	eef0 0a47 	vmov.f32	s1, s14
 80015b8:	eeb0 0a67 	vmov.f32	s0, s15
 80015bc:	f016 fb18 	bl	8017bf0 <fminf>
 80015c0:	eef0 7a40 	vmov.f32	s15, s0
 80015c4:	eef0 0a67 	vmov.f32	s1, s15
 80015c8:	eeb0 0a48 	vmov.f32	s0, s16
 80015cc:	f016 faf5 	bl	8017bba <fmaxf>
 80015d0:	eef0 7a40 	vmov.f32	s15, s0
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	edc3 7a02 	vstr	s15, [r3, #8]

        /* Check if the apogee approach phase was entered */
        check_apogee_approach_phase(control_data, flight_phase_detection);
 80015da:	6839      	ldr	r1, [r7, #0]
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f000 f993 	bl	8001908 <check_apogee_approach_phase>
        if (control_data->apogee_approach_phase == true) {
            evaluate_polyfit(control_data);
            compute_reference_error(control_data);
        }
    }
}
 80015e2:	e00d      	b.n	8001600 <compute_control_input+0x1d0>
        control_data_reset(control_data);
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f000 f81f 	bl	8001628 <control_data_reset>
        if (control_data->apogee_approach_phase == true) {
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d005      	beq.n	8001600 <compute_control_input+0x1d0>
            evaluate_polyfit(control_data);
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f000 f85e 	bl	80016b6 <evaluate_polyfit>
            compute_reference_error(control_data);
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f000 f960 	bl	80018c0 <compute_reference_error>
}
 8001600:	bf00      	nop
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	ecbd 8b02 	vpop	{d8}
 800160a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800160e:	bf00      	nop
 8001610:	00000000 	.word	0x00000000
 8001614:	3c23d70a 	.word	0x3c23d70a
 8001618:	9999999a 	.word	0x9999999a
 800161c:	3fe19999 	.word	0x3fe19999
 8001620:	e41d1d5e 	.word	0xe41d1d5e
 8001624:	3fdfc917 	.word	0x3fdfc917

08001628 <control_data_reset>:


void control_data_reset(control_data_t *control_data){
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
    control_data->control_input = 0;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f04f 0200 	mov.w	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
    control_data->reference_error = 0;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f04f 0200 	mov.w	r2, #0
 800163e:	605a      	str	r2, [r3, #4]
    control_data->integrated_error = 0;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f04f 0200 	mov.w	r2, #0
 8001646:	609a      	str	r2, [r3, #8]
}
 8001648:	bf00      	nop
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <control_data_init>:

void control_data_init(control_data_t *control_data){
 8001654:	b590      	push	{r4, r7, lr}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
    control_data_reset(control_data);
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f7ff ffe3 	bl	8001628 <control_data_reset>

    control_data->lowerboundary_aw = 0;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f04f 0200 	mov.w	r2, #0
 8001668:	619a      	str	r2, [r3, #24]
    control_data->upperboundary_aw = 0;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f04f 0200 	mov.w	r2, #0
 8001670:	61da      	str	r2, [r3, #28]

    control_data->safety_counter = 0;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	841a      	strh	r2, [r3, #32]
    control_data->apogee_approach_phase = false;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

    init_coeff(control_data);
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f7ff fe75 	bl	8001370 <init_coeff>

    for(int i = 0; i < NUM_GAINS; i++){
 8001686:	2300      	movs	r3, #0
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	e00d      	b.n	80016a8 <control_data_init+0x54>
        control_data->gains[i] = 0;
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	3305      	adds	r3, #5
 8001692:	00db      	lsls	r3, r3, #3
 8001694:	441a      	add	r2, r3
 8001696:	f04f 0300 	mov.w	r3, #0
 800169a:	f04f 0400 	mov.w	r4, #0
 800169e:	e9c2 3400 	strd	r3, r4, [r2]
    for(int i = 0; i < NUM_GAINS; i++){
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	3301      	adds	r3, #1
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	ddee      	ble.n	800168c <control_data_init+0x38>
    }
}
 80016ae:	bf00      	nop
 80016b0:	3714      	adds	r7, #20
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd90      	pop	{r4, r7, pc}

080016b6 <evaluate_polyfit>:

/* Does the Polynomial Calculation of the reference velocity */
void evaluate_polyfit(control_data_t *control_data) {
 80016b6:	b5b0      	push	{r4, r5, r7, lr}
 80016b8:	b08a      	sub	sp, #40	; 0x28
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
    /* For Speed */
    double x_placeholder = 0;
 80016be:	f04f 0300 	mov.w	r3, #0
 80016c2:	f04f 0400 	mov.w	r4, #0
 80016c6:	e9c7 3402 	strd	r3, r4, [r7, #8]

    /* Reset gains */
    for (int i = 0; i < NUM_GAINS; i++) {
 80016ca:	2300      	movs	r3, #0
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24
 80016ce:	e00d      	b.n	80016ec <evaluate_polyfit+0x36>
        control_data->gains[i] = 0;
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d4:	3305      	adds	r3, #5
 80016d6:	00db      	lsls	r3, r3, #3
 80016d8:	441a      	add	r2, r3
 80016da:	f04f 0300 	mov.w	r3, #0
 80016de:	f04f 0400 	mov.w	r4, #0
 80016e2:	e9c2 3400 	strd	r3, r4, [r2]
    for (int i = 0; i < NUM_GAINS; i++) {
 80016e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e8:	3301      	adds	r3, #1
 80016ea:	627b      	str	r3, [r7, #36]	; 0x24
 80016ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	ddee      	ble.n	80016d0 <evaluate_polyfit+0x1a>
    }

    /* Reset ref_velocity_placeholder*/
    double ref_velocity_placeholder = 0;
 80016f2:	f04f 0300 	mov.w	r3, #0
 80016f6:	f04f 0400 	mov.w	r4, #0
 80016fa:	e9c7 3406 	strd	r3, r4, [r7, #24]

    /* For loop */
    for (int i = 0; i < POLY_DEG + 1; ++i) {
 80016fe:	2300      	movs	r3, #0
 8001700:	617b      	str	r3, [r7, #20]
 8001702:	e07b      	b.n	80017fc <evaluate_polyfit+0x146>
        x_placeholder = pow(control_data->sf_ref_altitude_AGL, (double)(POLY_DEG - i));
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	4618      	mov	r0, r3
 800170a:	f7fe ff3d 	bl	8000588 <__aeabi_f2d>
 800170e:	4604      	mov	r4, r0
 8001710:	460d      	mov	r5, r1
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	f1c3 031e 	rsb	r3, r3, #30
 8001718:	4618      	mov	r0, r3
 800171a:	f7fe ff23 	bl	8000564 <__aeabi_i2d>
 800171e:	4602      	mov	r2, r0
 8001720:	460b      	mov	r3, r1
 8001722:	ec43 2b11 	vmov	d1, r2, r3
 8001726:	ec45 4b10 	vmov	d0, r4, r5
 800172a:	f016 fa99 	bl	8017c60 <pow>
 800172e:	ed87 0b02 	vstr	d0, [r7, #8]
        control_data->gains[0] += control_data->poly_coeff[0][i] * x_placeholder;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	3308      	adds	r3, #8
 800173e:	00db      	lsls	r3, r3, #3
 8001740:	4413      	add	r3, r2
 8001742:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001746:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800174a:	f7fe ff75 	bl	8000638 <__aeabi_dmul>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	4620      	mov	r0, r4
 8001754:	4629      	mov	r1, r5
 8001756:	f7fe fdb9 	bl	80002cc <__adddf3>
 800175a:	4603      	mov	r3, r0
 800175c:	460c      	mov	r4, r1
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
        control_data->gains[1] += control_data->poly_coeff[1][i] * x_placeholder;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	3327      	adds	r3, #39	; 0x27
 8001770:	00db      	lsls	r3, r3, #3
 8001772:	4413      	add	r3, r2
 8001774:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001778:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800177c:	f7fe ff5c 	bl	8000638 <__aeabi_dmul>
 8001780:	4602      	mov	r2, r0
 8001782:	460b      	mov	r3, r1
 8001784:	4620      	mov	r0, r4
 8001786:	4629      	mov	r1, r5
 8001788:	f7fe fda0 	bl	80002cc <__adddf3>
 800178c:	4603      	mov	r3, r0
 800178e:	460c      	mov	r4, r1
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
        control_data->gains[2] += control_data->poly_coeff[2][i] * x_placeholder;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	3346      	adds	r3, #70	; 0x46
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	4413      	add	r3, r2
 80017a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80017ae:	f7fe ff43 	bl	8000638 <__aeabi_dmul>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	4620      	mov	r0, r4
 80017b8:	4629      	mov	r1, r5
 80017ba:	f7fe fd87 	bl	80002cc <__adddf3>
 80017be:	4603      	mov	r3, r0
 80017c0:	460c      	mov	r4, r1
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
        ref_velocity_placeholder += (control_data->poly_coeff[3][i] * x_placeholder);
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	3365      	adds	r3, #101	; 0x65
 80017ce:	00db      	lsls	r3, r3, #3
 80017d0:	4413      	add	r3, r2
 80017d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80017da:	f7fe ff2d 	bl	8000638 <__aeabi_dmul>
 80017de:	4603      	mov	r3, r0
 80017e0:	460c      	mov	r4, r1
 80017e2:	461a      	mov	r2, r3
 80017e4:	4623      	mov	r3, r4
 80017e6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80017ea:	f7fe fd6f 	bl	80002cc <__adddf3>
 80017ee:	4603      	mov	r3, r0
 80017f0:	460c      	mov	r4, r1
 80017f2:	e9c7 3406 	strd	r3, r4, [r7, #24]
    for (int i = 0; i < POLY_DEG + 1; ++i) {
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	3301      	adds	r3, #1
 80017fa:	617b      	str	r3, [r7, #20]
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	2b1e      	cmp	r3, #30
 8001800:	dd80      	ble.n	8001704 <evaluate_polyfit+0x4e>
    }
    control_data->ref_velocity = (float)ref_velocity_placeholder;
 8001802:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001806:	f7ff f9e7 	bl	8000bd8 <__aeabi_d2f>
 800180a:	4602      	mov	r2, r0
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	615a      	str	r2, [r3, #20]
}
 8001810:	bf00      	nop
 8001812:	3728      	adds	r7, #40	; 0x28
 8001814:	46bd      	mov	sp, r7
 8001816:	bdb0      	pop	{r4, r5, r7, pc}

08001818 <compute_antiwindup_boundaries>:

void compute_antiwindup_boundaries(control_data_t *control_data) {
 8001818:	b590      	push	{r4, r7, lr}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
    control_data->upperboundary_aw = fmaxf(M_AW *
            (CONTROL_DEACTIVATION_ALTITUDE_AGL - control_data->sf_ref_altitude_AGL), MIN_BOUNDARAY_AW);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	4618      	mov	r0, r3
 8001826:	f7fe feaf 	bl	8000588 <__aeabi_f2d>
 800182a:	4603      	mov	r3, r0
 800182c:	460c      	mov	r4, r1
 800182e:	461a      	mov	r2, r3
 8001830:	4623      	mov	r3, r4
 8001832:	a11f      	add	r1, pc, #124	; (adr r1, 80018b0 <compute_antiwindup_boundaries+0x98>)
 8001834:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001838:	f7fe fd46 	bl	80002c8 <__aeabi_dsub>
 800183c:	4603      	mov	r3, r0
 800183e:	460c      	mov	r4, r1
 8001840:	4618      	mov	r0, r3
 8001842:	4621      	mov	r1, r4
    control_data->upperboundary_aw = fmaxf(M_AW *
 8001844:	a31c      	add	r3, pc, #112	; (adr r3, 80018b8 <compute_antiwindup_boundaries+0xa0>)
 8001846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184a:	f7fe fef5 	bl	8000638 <__aeabi_dmul>
 800184e:	4603      	mov	r3, r0
 8001850:	460c      	mov	r4, r1
 8001852:	4618      	mov	r0, r3
 8001854:	4621      	mov	r1, r4
 8001856:	f7ff f9bf 	bl	8000bd8 <__aeabi_d2f>
 800185a:	4603      	mov	r3, r0
 800185c:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8001860:	ee00 3a10 	vmov	s0, r3
 8001864:	f016 f9a9 	bl	8017bba <fmaxf>
 8001868:	eef0 7a40 	vmov.f32	s15, s0
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	edc3 7a07 	vstr	s15, [r3, #28]
    if (CONTROL_DEACTIVATION_ALTITUDE_AGL < control_data->sf_ref_altitude_AGL) {
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	4618      	mov	r0, r3
 8001878:	f7fe fe86 	bl	8000588 <__aeabi_f2d>
 800187c:	a30c      	add	r3, pc, #48	; (adr r3, 80018b0 <compute_antiwindup_boundaries+0x98>)
 800187e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001882:	f7ff f969 	bl	8000b58 <__aeabi_dcmpgt>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d003      	beq.n	8001894 <compute_antiwindup_boundaries+0x7c>
        control_data->upperboundary_aw = 0;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f04f 0200 	mov.w	r2, #0
 8001892:	61da      	str	r2, [r3, #28]
    }
    control_data->lowerboundary_aw = - control_data->upperboundary_aw;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	edd3 7a07 	vldr	s15, [r3, #28]
 800189a:	eef1 7a67 	vneg.f32	s15, s15
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	edc3 7a06 	vstr	s15, [r3, #24]
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd90      	pop	{r4, r7, pc}
 80018ac:	f3af 8000 	nop.w
 80018b0:	7417f6de 	.word	0x7417f6de
 80018b4:	4095dc93 	.word	0x4095dc93
 80018b8:	47ae147b 	.word	0x47ae147b
 80018bc:	3f747ae1 	.word	0x3f747ae1

080018c0 <compute_reference_error>:

void compute_reference_error(control_data_t *control_data) {
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
    if (control_data->ref_velocity < 0) {
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	edd3 7a05 	vldr	s15, [r3, #20]
 80018ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d6:	d504      	bpl.n	80018e2 <compute_reference_error+0x22>
        control_data->reference_error = control_data->sf_velocity;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	691a      	ldr	r2, [r3, #16]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	605a      	str	r2, [r3, #4]
    }
    else{
        control_data->reference_error = control_data->sf_velocity - control_data->ref_velocity;
    }
}
 80018e0:	e00a      	b.n	80018f8 <compute_reference_error+0x38>
        control_data->reference_error = control_data->sf_velocity - control_data->ref_velocity;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	ed93 7a04 	vldr	s14, [r3, #16]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	edd3 7a05 	vldr	s15, [r3, #20]
 80018ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80018f8:	bf00      	nop
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	0000      	movs	r0, r0
	...

08001908 <check_apogee_approach_phase>:

void check_apogee_approach_phase(control_data_t *control_data, flight_phase_detection_t *flight_phase_detection){
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
    /* if n positive samples are counted, the apogee approach phase is entered */
    if (flight_phase_detection->mach_number < CONTROL_DEACTIVATION_MACH_NUMBER) {
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	4618      	mov	r0, r3
 8001918:	f7fe fe36 	bl	8000588 <__aeabi_f2d>
 800191c:	a30c      	add	r3, pc, #48	; (adr r3, 8001950 <check_apogee_approach_phase+0x48>)
 800191e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001922:	f7ff f8fb 	bl	8000b1c <__aeabi_dcmplt>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d005      	beq.n	8001938 <check_apogee_approach_phase+0x30>
        control_data->safety_counter += 1;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	8c1b      	ldrh	r3, [r3, #32]
 8001930:	3301      	adds	r3, #1
 8001932:	b29a      	uxth	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	841a      	strh	r2, [r3, #32]
    }

    /* Check if the apogee approach phase should be entered*/
    if (control_data->safety_counter >= SAFETY_COUNTER_THRESHOLD) {
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	8c1b      	ldrh	r3, [r3, #32]
 800193c:	2b04      	cmp	r3, #4
 800193e:	d903      	bls.n	8001948 <check_apogee_approach_phase+0x40>
        control_data->apogee_approach_phase = true;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2201      	movs	r2, #1
 8001944:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    }
}
 8001948:	bf00      	nop
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	9999999a 	.word	0x9999999a
 8001954:	3fb99999 	.word	0x3fb99999

08001958 <init_env>:
#include "Sim_Con/env.h"

void init_env(env_t *env) {
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
	/* init constants */
	calibrate_env(env, TEMPERATURE_REFERENCE, PRESSURE_REFERENCE);
 8001960:	eddf 0a07 	vldr	s1, [pc, #28]	; 8001980 <init_env+0x28>
 8001964:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f000 f80d 	bl	8001988 <calibrate_env>
	update_env(env, TEMPERATURE_REFERENCE);
 800196e:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f000 f82c 	bl	80019d0 <update_env>
}
 8001978:	bf00      	nop
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	47c5e680 	.word	0x47c5e680
 8001984:	00000000 	.word	0x00000000

08001988 <calibrate_env>:

void calibrate_env(env_t *env, float p_g, float T_g) {
 8001988:	b590      	push	{r4, r7, lr}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	ed87 0a02 	vstr	s0, [r7, #8]
 8001994:	edc7 0a01 	vstr	s1, [r7, #4]
	env->T_g = T_g + T_0; // input is temperature in °C
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f7fe fdf5 	bl	8000588 <__aeabi_f2d>
 800199e:	a30a      	add	r3, pc, #40	; (adr r3, 80019c8 <calibrate_env+0x40>)
 80019a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a4:	f7fe fc92 	bl	80002cc <__adddf3>
 80019a8:	4603      	mov	r3, r0
 80019aa:	460c      	mov	r4, r1
 80019ac:	4618      	mov	r0, r3
 80019ae:	4621      	mov	r1, r4
 80019b0:	f7ff f912 	bl	8000bd8 <__aeabi_d2f>
 80019b4:	4602      	mov	r2, r0
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	605a      	str	r2, [r3, #4]
	env->p_g = p_g; //
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	68ba      	ldr	r2, [r7, #8]
 80019be:	601a      	str	r2, [r3, #0]
}
 80019c0:	bf00      	nop
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd90      	pop	{r4, r7, pc}
 80019c8:	66666666 	.word	0x66666666
 80019cc:	40711266 	.word	0x40711266

080019d0 <update_env>:

void update_env(env_t *env, float T) {
 80019d0:	b590      	push	{r4, r7, lr}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	ed87 0a00 	vstr	s0, [r7]
	env->T = T + T_0; // input is temperature in °C and property is temperature in °K
 80019dc:	6838      	ldr	r0, [r7, #0]
 80019de:	f7fe fdd3 	bl	8000588 <__aeabi_f2d>
 80019e2:	a317      	add	r3, pc, #92	; (adr r3, 8001a40 <update_env+0x70>)
 80019e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e8:	f7fe fc70 	bl	80002cc <__adddf3>
 80019ec:	4603      	mov	r3, r0
 80019ee:	460c      	mov	r4, r1
 80019f0:	4618      	mov	r0, r3
 80019f2:	4621      	mov	r1, r4
 80019f4:	f7ff f8f0 	bl	8000bd8 <__aeabi_d2f>
 80019f8:	4602      	mov	r2, r0
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	609a      	str	r2, [r3, #8]
	env->C = powf(GAMMA * R_0 * env->T, 0.5);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7fe fdc0 	bl	8000588 <__aeabi_f2d>
 8001a08:	a30f      	add	r3, pc, #60	; (adr r3, 8001a48 <update_env+0x78>)
 8001a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a0e:	f7fe fe13 	bl	8000638 <__aeabi_dmul>
 8001a12:	4603      	mov	r3, r0
 8001a14:	460c      	mov	r4, r1
 8001a16:	4618      	mov	r0, r3
 8001a18:	4621      	mov	r1, r4
 8001a1a:	f7ff f8dd 	bl	8000bd8 <__aeabi_d2f>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8001a24:	ee00 3a10 	vmov	s0, r3
 8001a28:	f016 fae4 	bl	8017ff4 <powf>
 8001a2c:	eef0 7a40 	vmov.f32	s15, s0
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8001a36:	bf00      	nop
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd90      	pop	{r4, r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	66666666 	.word	0x66666666
 8001a44:	40711266 	.word	0x40711266
 8001a48:	8c1557b7 	.word	0x8c1557b7
 8001a4c:	40791e2f 	.word	0x40791e2f

08001a50 <mach_number>:

float mach_number(env_t *env, float V_x) {
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	ed87 0a00 	vstr	s0, [r7]
	float mach_number = fabsf(V_x) / env->C;
 8001a5c:	edd7 7a00 	vldr	s15, [r7]
 8001a60:	eef0 6ae7 	vabs.f32	s13, s15
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	ed93 7a03 	vldr	s14, [r3, #12]
 8001a6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a6e:	edc7 7a03 	vstr	s15, [r7, #12]
	return mach_number;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	ee07 3a90 	vmov	s15, r3
}
 8001a78:	eeb0 0a67 	vmov.f32	s0, s15
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
	...

08001a88 <pressure2altitudeAGL>:

void pressure2altitudeAGL(env_t *env, int n, float p[n], bool p_active[n], float h[n]) {
 8001a88:	b5b0      	push	{r4, r5, r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
 8001a94:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < n; i++) {
 8001a96:	2300      	movs	r3, #0
 8001a98:	617b      	str	r3, [r7, #20]
 8001a9a:	e043      	b.n	8001b24 <pressure2altitudeAGL+0x9c>
		if (p_active[i]) {
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	683a      	ldr	r2, [r7, #0]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d03a      	beq.n	8001b1e <pressure2altitudeAGL+0x96>
			/* original implementation */
			h[i] = env->T_g / T_GRAD * (1 - powf(p[i] / env->p_g, R_0 * T_GRAD / GRAVITATION));
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7fe fd6b 	bl	8000588 <__aeabi_f2d>
 8001ab2:	a322      	add	r3, pc, #136	; (adr r3, 8001b3c <pressure2altitudeAGL+0xb4>)
 8001ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab8:	f7fe fee8 	bl	800088c <__aeabi_ddiv>
 8001abc:	4603      	mov	r3, r0
 8001abe:	460c      	mov	r4, r1
 8001ac0:	4625      	mov	r5, r4
 8001ac2:	461c      	mov	r4, r3
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	4413      	add	r3, r2
 8001acc:	ed93 7a00 	vldr	s14, [r3]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	edd3 7a00 	vldr	s15, [r3]
 8001ad6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001ada:	eddf 0a17 	vldr	s1, [pc, #92]	; 8001b38 <pressure2altitudeAGL+0xb0>
 8001ade:	eeb0 0a66 	vmov.f32	s0, s13
 8001ae2:	f016 fa87 	bl	8017ff4 <powf>
 8001ae6:	eeb0 7a40 	vmov.f32	s14, s0
 8001aea:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001aee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001af2:	ee17 0a90 	vmov	r0, s15
 8001af6:	f7fe fd47 	bl	8000588 <__aeabi_f2d>
 8001afa:	4602      	mov	r2, r0
 8001afc:	460b      	mov	r3, r1
 8001afe:	4620      	mov	r0, r4
 8001b00:	4629      	mov	r1, r5
 8001b02:	f7fe fd99 	bl	8000638 <__aeabi_dmul>
 8001b06:	4603      	mov	r3, r0
 8001b08:	460c      	mov	r4, r1
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	4621      	mov	r1, r4
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b14:	18d4      	adds	r4, r2, r3
 8001b16:	f7ff f85f 	bl	8000bd8 <__aeabi_d2f>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < n; i++) {
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	3301      	adds	r3, #1
 8001b22:	617b      	str	r3, [r7, #20]
 8001b24:	697a      	ldr	r2, [r7, #20]
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	dbb7      	blt.n	8001a9c <pressure2altitudeAGL+0x14>
			/* adapted implementation which can possibly speed up calculation and should have the same results */
			// h[i] = env->T_g / T_GRAD * (1 - expf(logf(p[i] / env->p_g) * R_0 * env->T_grad / GRAVITATION);
		}
	}
}
 8001b2c:	bf00      	nop
 8001b2e:	3718      	adds	r7, #24
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bdb0      	pop	{r4, r5, r7, pc}
 8001b34:	f3af 8000 	nop.w
 8001b38:	3e42c4dc 	.word	0x3e42c4dc
 8001b3c:	76c8b439 	.word	0x76c8b439
 8001b40:	3f7a9fbe 	.word	0x3f7a9fbe
 8001b44:	00000000 	.word	0x00000000

08001b48 <altitudeAGL2pressure>:

void altitudeAGL2pressure(env_t *env, int n, float h[n], bool h_active[n], float p[n]) {
 8001b48:	b5b0      	push	{r4, r5, r7, lr}
 8001b4a:	ed2d 8b02 	vpush	{d8}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
 8001b58:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < n; i++) {
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	617b      	str	r3, [r7, #20]
 8001b5e:	e047      	b.n	8001bf0 <altitudeAGL2pressure+0xa8>
		if (h_active[i]) {
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	683a      	ldr	r2, [r7, #0]
 8001b64:	4413      	add	r3, r2
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d03e      	beq.n	8001bea <altitudeAGL2pressure+0xa2>
			/* original implementation */
			p[i] = env->p_g * powf((1 - T_GRAD * h[i] / env->T_g), GRAVITATION / (R_0 * T_GRAD));
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	ed93 8a00 	vldr	s16, [r3]
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	4413      	add	r3, r2
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7fe fd03 	bl	8000588 <__aeabi_f2d>
 8001b82:	a323      	add	r3, pc, #140	; (adr r3, 8001c10 <altitudeAGL2pressure+0xc8>)
 8001b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b88:	f7fe fd56 	bl	8000638 <__aeabi_dmul>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	460c      	mov	r4, r1
 8001b90:	4625      	mov	r5, r4
 8001b92:	461c      	mov	r4, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7fe fcf5 	bl	8000588 <__aeabi_f2d>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	4620      	mov	r0, r4
 8001ba4:	4629      	mov	r1, r5
 8001ba6:	f7fe fe71 	bl	800088c <__aeabi_ddiv>
 8001baa:	4603      	mov	r3, r0
 8001bac:	460c      	mov	r4, r1
 8001bae:	461a      	mov	r2, r3
 8001bb0:	4623      	mov	r3, r4
 8001bb2:	f04f 0000 	mov.w	r0, #0
 8001bb6:	4914      	ldr	r1, [pc, #80]	; (8001c08 <altitudeAGL2pressure+0xc0>)
 8001bb8:	f7fe fb86 	bl	80002c8 <__aeabi_dsub>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	460c      	mov	r4, r1
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	4621      	mov	r1, r4
 8001bc4:	f7ff f808 	bl	8000bd8 <__aeabi_d2f>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	eddf 0a10 	vldr	s1, [pc, #64]	; 8001c0c <altitudeAGL2pressure+0xc4>
 8001bce:	ee00 3a10 	vmov	s0, r3
 8001bd2:	f016 fa0f 	bl	8017ff4 <powf>
 8001bd6:	eef0 7a40 	vmov.f32	s15, s0
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001be0:	4413      	add	r3, r2
 8001be2:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001be6:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < n; i++) {
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	3301      	adds	r3, #1
 8001bee:	617b      	str	r3, [r7, #20]
 8001bf0:	697a      	ldr	r2, [r7, #20]
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	dbb3      	blt.n	8001b60 <altitudeAGL2pressure+0x18>
			/* adapted implementation which can possibly speed up calculation and should have the same results */
			// p[i] = env->p_g * expf(logf(1 - env->T_grad * h[i] / env->T_g) * GRAVITATION / (R_0 * env->T_grad));
		}
	}
}
 8001bf8:	bf00      	nop
 8001bfa:	3718      	adds	r7, #24
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	ecbd 8b02 	vpop	{d8}
 8001c02:	bdb0      	pop	{r4, r5, r7, pc}
 8001c04:	f3af 8000 	nop.w
 8001c08:	3ff00000 	.word	0x3ff00000
 8001c0c:	40a83d87 	.word	0x40a83d87
 8001c10:	76c8b439 	.word	0x76c8b439
 8001c14:	3f7a9fbe 	.word	0x3f7a9fbe

08001c18 <altitude_gradient>:

float altitude_gradient(env_t *env, float p) {
 8001c18:	b5b0      	push	{r4, r5, r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	ed87 0a00 	vstr	s0, [r7]
	/* computes the altitude gradient per infitesimal change in pressure (dh/dp) at a specified pressure */
	/* original implementation */
	float h_grad = -R_0 * env->T_g / (GRAVITATION * env->p_g) * powf(p / env->p_g, R_0 * T_GRAD / GRAVITATION - 1);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7fe fcad 	bl	8000588 <__aeabi_f2d>
 8001c2e:	a323      	add	r3, pc, #140	; (adr r3, 8001cbc <altitude_gradient+0xa4>)
 8001c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c34:	f7fe fd00 	bl	8000638 <__aeabi_dmul>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	460c      	mov	r4, r1
 8001c3c:	4625      	mov	r5, r4
 8001c3e:	461c      	mov	r4, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7fe fc9f 	bl	8000588 <__aeabi_f2d>
 8001c4a:	a31e      	add	r3, pc, #120	; (adr r3, 8001cc4 <altitude_gradient+0xac>)
 8001c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c50:	f7fe fcf2 	bl	8000638 <__aeabi_dmul>
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	4620      	mov	r0, r4
 8001c5a:	4629      	mov	r1, r5
 8001c5c:	f7fe fe16 	bl	800088c <__aeabi_ddiv>
 8001c60:	4603      	mov	r3, r0
 8001c62:	460c      	mov	r4, r1
 8001c64:	4625      	mov	r5, r4
 8001c66:	461c      	mov	r4, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	edd3 7a00 	vldr	s15, [r3]
 8001c6e:	ed97 7a00 	vldr	s14, [r7]
 8001c72:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001c76:	eddf 0a10 	vldr	s1, [pc, #64]	; 8001cb8 <altitude_gradient+0xa0>
 8001c7a:	eeb0 0a66 	vmov.f32	s0, s13
 8001c7e:	f016 f9b9 	bl	8017ff4 <powf>
 8001c82:	ee10 3a10 	vmov	r3, s0
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7fe fc7e 	bl	8000588 <__aeabi_f2d>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	460b      	mov	r3, r1
 8001c90:	4620      	mov	r0, r4
 8001c92:	4629      	mov	r1, r5
 8001c94:	f7fe fcd0 	bl	8000638 <__aeabi_dmul>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	460c      	mov	r4, r1
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	4621      	mov	r1, r4
 8001ca0:	f7fe ff9a 	bl	8000bd8 <__aeabi_d2f>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	60fb      	str	r3, [r7, #12]
	/* adapted implementation which can possibly speed up calculation and should have the same results */
	// float h_grad = - R_0 * env->T_g / (GRAVITATION * env->p_g) * expf(logf(p / env->p_g) * (R_0 * env->T_grad / GRAVITATION - 1));
	return h_grad;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	ee07 3a90 	vmov	s15, r3
}
 8001cae:	eeb0 0a67 	vmov.f32	s0, s15
 8001cb2:	3710      	adds	r7, #16
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bdb0      	pop	{r4, r5, r7, pc}
 8001cb8:	bf4f4ec9 	.word	0xbf4f4ec9
 8001cbc:	640f3ea7 	.word	0x640f3ea7
 8001cc0:	c071f0fd 	.word	0xc071f0fd
 8001cc4:	51eb851f 	.word	0x51eb851f
 8001cc8:	40239eb8 	.word	0x40239eb8
 8001ccc:	00000000 	.word	0x00000000

08001cd0 <detect_flight_phase>:
#include "Sim_Con/flight_phase_detection.h"

void detect_flight_phase(flight_phase_detection_t *flight_phase_detection, state_est_data_t *state_est_data, env_t *env)
{   
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]


    /* determine state transition events */
    switch (flight_phase_detection->flight_phase) {
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	2b04      	cmp	r3, #4
 8001ce4:	f200 80a6 	bhi.w	8001e34 <detect_flight_phase+0x164>
 8001ce8:	a201      	add	r2, pc, #4	; (adr r2, 8001cf0 <detect_flight_phase+0x20>)
 8001cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cee:	bf00      	nop
 8001cf0:	08001d05 	.word	0x08001d05
 8001cf4:	08001e35 	.word	0x08001e35
 8001cf8:	08001d53 	.word	0x08001d53
 8001cfc:	08001d9d 	.word	0x08001d9d
 8001d00:	08001de7 	.word	0x08001de7
        case IDLE:
            if (((float)(state_est_data->acceleration_rocket[0])) / 1000 > 20) {
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	ee07 3a90 	vmov	s15, r3
 8001d0c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d10:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8001ed0 <detect_flight_phase+0x200>
 8001d14:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d18:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001d1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d24:	dc00      	bgt.n	8001d28 <detect_flight_phase+0x58>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = THRUSTING;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 8001d26:	e087      	b.n	8001e38 <detect_flight_phase+0x168>
                flight_phase_detection->num_samples_positive += 1;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	3301      	adds	r3, #1
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	b25a      	sxtb	r2, r3
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001d40:	2b03      	cmp	r3, #3
 8001d42:	dd79      	ble.n	8001e38 <detect_flight_phase+0x168>
                    flight_phase_detection->flight_phase = THRUSTING;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2203      	movs	r2, #3
 8001d48:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	721a      	strb	r2, [r3, #8]
        break;
 8001d50:	e072      	b.n	8001e38 <detect_flight_phase+0x168>

        case THRUSTING:
            if (((float)(state_est_data->acceleration_rocket[0])) / 1000 < 0) {
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	ee07 3a90 	vmov	s15, r3
 8001d5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d5e:	eddf 6a5c 	vldr	s13, [pc, #368]	; 8001ed0 <detect_flight_phase+0x200>
 8001d62:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d66:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d6e:	d400      	bmi.n	8001d72 <detect_flight_phase+0xa2>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = COASTING;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 8001d70:	e064      	b.n	8001e3c <detect_flight_phase+0x16c>
                flight_phase_detection->num_samples_positive += 1;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	b25a      	sxtb	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001d8a:	2b03      	cmp	r3, #3
 8001d8c:	dd56      	ble.n	8001e3c <detect_flight_phase+0x16c>
                    flight_phase_detection->flight_phase = COASTING;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2204      	movs	r2, #4
 8001d92:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2200      	movs	r2, #0
 8001d98:	721a      	strb	r2, [r3, #8]
        break;
 8001d9a:	e04f      	b.n	8001e3c <detect_flight_phase+0x16c>
        
        case COASTING:
            if (((float)(state_est_data->velocity_world[2])) / 1000 < 0) {
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da0:	ee07 3a90 	vmov	s15, r3
 8001da4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001da8:	eddf 6a49 	vldr	s13, [pc, #292]	; 8001ed0 <detect_flight_phase+0x200>
 8001dac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001db0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001db8:	d400      	bmi.n	8001dbc <detect_flight_phase+0xec>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = DESCENT;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 8001dba:	e041      	b.n	8001e40 <detect_flight_phase+0x170>
                flight_phase_detection->num_samples_positive += 1;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	b25a      	sxtb	r2, r3
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001dd4:	2b03      	cmp	r3, #3
 8001dd6:	dd33      	ble.n	8001e40 <detect_flight_phase+0x170>
                    flight_phase_detection->flight_phase = DESCENT;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2205      	movs	r2, #5
 8001ddc:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2200      	movs	r2, #0
 8001de2:	721a      	strb	r2, [r3, #8]
        break;
 8001de4:	e02c      	b.n	8001e40 <detect_flight_phase+0x170>

        case DESCENT:
            if (((float)(state_est_data->position_world[2])) / 1000 < 20) {
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	ee07 3a90 	vmov	s15, r3
 8001dee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001df2:	eddf 6a37 	vldr	s13, [pc, #220]	; 8001ed0 <detect_flight_phase+0x200>
 8001df6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dfa:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001dfe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e06:	d400      	bmi.n	8001e0a <detect_flight_phase+0x13a>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = RECOVERY;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 8001e08:	e01c      	b.n	8001e44 <detect_flight_phase+0x174>
                flight_phase_detection->num_samples_positive += 1;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	3301      	adds	r3, #1
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	b25a      	sxtb	r2, r3
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001e22:	2b03      	cmp	r3, #3
 8001e24:	dd0e      	ble.n	8001e44 <detect_flight_phase+0x174>
                    flight_phase_detection->flight_phase = RECOVERY;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2206      	movs	r2, #6
 8001e2a:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	721a      	strb	r2, [r3, #8]
        break;
 8001e32:	e007      	b.n	8001e44 <detect_flight_phase+0x174>

        default:
        break;
 8001e34:	bf00      	nop
 8001e36:	e006      	b.n	8001e46 <detect_flight_phase+0x176>
        break;
 8001e38:	bf00      	nop
 8001e3a:	e004      	b.n	8001e46 <detect_flight_phase+0x176>
        break;
 8001e3c:	bf00      	nop
 8001e3e:	e002      	b.n	8001e46 <detect_flight_phase+0x176>
        break;
 8001e40:	bf00      	nop
 8001e42:	e000      	b.n	8001e46 <detect_flight_phase+0x176>
        break;
 8001e44:	bf00      	nop
    }

    flight_phase_detection->mach_number = mach_number(env, ((float) state_est_data->velocity_rocket[0]) / 1000);
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	ee07 3a90 	vmov	s15, r3
 8001e4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e52:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001ed0 <detect_flight_phase+0x200>
 8001e56:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001e5a:	eeb0 0a66 	vmov.f32	s0, s13
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f7ff fdf6 	bl	8001a50 <mach_number>
 8001e64:	eef0 7a40 	vmov.f32	s15, s0
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	edc3 7a01 	vstr	s15, [r3, #4]

    /* determine the mach regime */
    if (flight_phase_detection->mach_number >= 1.3) {
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7fe fb88 	bl	8000588 <__aeabi_f2d>
 8001e78:	a311      	add	r3, pc, #68	; (adr r3, 8001ec0 <detect_flight_phase+0x1f0>)
 8001e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e7e:	f7fe fe61 	bl	8000b44 <__aeabi_dcmpge>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d003      	beq.n	8001e90 <detect_flight_phase+0x1c0>
        flight_phase_detection->mach_regime = SUPERSONIC;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2203      	movs	r2, #3
 8001e8c:	705a      	strb	r2, [r3, #1]
    {
        flight_phase_detection->mach_regime = SUBSONIC;
    }
    
    
}
 8001e8e:	e013      	b.n	8001eb8 <detect_flight_phase+0x1e8>
    } else if (flight_phase_detection->mach_number >= 0.8)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7fe fb77 	bl	8000588 <__aeabi_f2d>
 8001e9a:	a30b      	add	r3, pc, #44	; (adr r3, 8001ec8 <detect_flight_phase+0x1f8>)
 8001e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea0:	f7fe fe50 	bl	8000b44 <__aeabi_dcmpge>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d003      	beq.n	8001eb2 <detect_flight_phase+0x1e2>
        flight_phase_detection->mach_regime = TRANSONIC;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2202      	movs	r2, #2
 8001eae:	705a      	strb	r2, [r3, #1]
}
 8001eb0:	e002      	b.n	8001eb8 <detect_flight_phase+0x1e8>
        flight_phase_detection->mach_regime = SUBSONIC;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	705a      	strb	r2, [r3, #1]
}
 8001eb8:	bf00      	nop
 8001eba:	3710      	adds	r7, #16
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	cccccccd 	.word	0xcccccccd
 8001ec4:	3ff4cccc 	.word	0x3ff4cccc
 8001ec8:	9999999a 	.word	0x9999999a
 8001ecc:	3fe99999 	.word	0x3fe99999
 8001ed0:	447a0000 	.word	0x447a0000

08001ed4 <reset_flight_phase_detection>:

void reset_flight_phase_detection(flight_phase_detection_t *flight_phase_detection){
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
    flight_phase_detection->flight_phase = IDLE;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	701a      	strb	r2, [r3, #0]
    flight_phase_detection->mach_regime = SUBSONIC;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	705a      	strb	r2, [r3, #1]
    flight_phase_detection->mach_number = 0.0;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f04f 0200 	mov.w	r2, #0
 8001eee:	605a      	str	r2, [r3, #4]
    flight_phase_detection->num_samples_positive = 0;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	721a      	strb	r2, [r3, #8]
}
 8001ef6:	bf00      	nop
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
	...

08001f04 <reset_kf_state>:
#include "Sim_Con/kf.h"

void reset_kf_state(kf_state_t *kf_state){
 8001f04:	b5b0      	push	{r4, r5, r7, lr}
 8001f06:	b0b0      	sub	sp, #192	; 0xc0
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
        float G_init[NUMBER_STATES][NUMBER_PROCESS_NOISE] = {{1.25E-5}, {5.0E-3}, {0.0}};
        memcpy(kf_state->Ad, A_init, sizeof(kf_state->Ad));
        memcpy(kf_state->Bd, B_init, sizeof(kf_state->Bd));
        memcpy(kf_state->Gd, G_init, sizeof(kf_state->Gd));
    } else if (STATE_ESTIMATION_FREQUENCY == 100) { 
        float A_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-0, 1.0E-2, 5.0E-5}, {0, 1.0E-0, 1.0E-2}, {0.0, 0.0, 1.0E-0}};
 8001f0c:	4b45      	ldr	r3, [pc, #276]	; (8002024 <reset_kf_state+0x120>)
 8001f0e:	f107 040c 	add.w	r4, r7, #12
 8001f12:	461d      	mov	r5, r3
 8001f14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f1c:	682b      	ldr	r3, [r5, #0]
 8001f1e:	6023      	str	r3, [r4, #0]
        float B_init[NUMBER_STATES][NUMBER_INPUTS] = {{5.0E-5}, {1.0E-2}, {0.0}};
 8001f20:	4a41      	ldr	r2, [pc, #260]	; (8002028 <reset_kf_state+0x124>)
 8001f22:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001f26:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f28:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        float G_init[NUMBER_STATES][NUMBER_PROCESS_NOISE] = {{5.0E-5}, {1.0E-2}, {0.0}};
 8001f2c:	4a3e      	ldr	r2, [pc, #248]	; (8002028 <reset_kf_state+0x124>)
 8001f2e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f32:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f34:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        memcpy(kf_state->Ad, A_init, sizeof(kf_state->Ad));
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f107 010c 	add.w	r1, r7, #12
 8001f3e:	2224      	movs	r2, #36	; 0x24
 8001f40:	4618      	mov	r0, r3
 8001f42:	f015 fa17 	bl	8017374 <memcpy>
        memcpy(kf_state->Bd, B_init, sizeof(kf_state->Bd));
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	3348      	adds	r3, #72	; 0x48
 8001f4a:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8001f4e:	220c      	movs	r2, #12
 8001f50:	4618      	mov	r0, r3
 8001f52:	f015 fa0f 	bl	8017374 <memcpy>
        memcpy(kf_state->Gd, G_init, sizeof(kf_state->Gd));
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	3354      	adds	r3, #84	; 0x54
 8001f5a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001f5e:	220c      	movs	r2, #12
 8001f60:	4618      	mov	r0, r3
 8001f62:	f015 fa07 	bl	8017374 <memcpy>
        memset(kf_state->Ad, 0, sizeof(kf_state->Ad));
        memset(kf_state->Bd, 0, sizeof(kf_state->Bd));
        memset(kf_state->Gd, 0, sizeof(kf_state->Gd));
    }

	float x_est_init[NUMBER_STATES] = {0, 0, 0};
 8001f66:	f04f 0300 	mov.w	r3, #0
 8001f6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001f6e:	f04f 0300 	mov.w	r3, #0
 8001f72:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001f76:	f04f 0300 	mov.w	r3, #0
 8001f7a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	float P_est_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-9, 0, 0}, {0, 1.0E-12, 0}, {0, 0, 0}};
 8001f7e:	4b2b      	ldr	r3, [pc, #172]	; (800202c <reset_kf_state+0x128>)
 8001f80:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8001f84:	461d      	mov	r5, r3
 8001f86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f8e:	682b      	ldr	r3, [r5, #0]
 8001f90:	6023      	str	r3, [r4, #0]

    memcpy(kf_state->x_est, x_est_init, sizeof(x_est_init));
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8001f98:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8001f9c:	220c      	movs	r2, #12
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f015 f9e8 	bl	8017374 <memcpy>
    memcpy(kf_state->P_est, P_est_init, sizeof(P_est_init));
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8001faa:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8001fae:	2224      	movs	r2, #36	; 0x24
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f015 f9df 	bl	8017374 <memcpy>

    memset(kf_state->Q, 0, NUMBER_PROCESS_NOISE*NUMBER_PROCESS_NOISE*sizeof(kf_state->Q[0][0]));
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	33b4      	adds	r3, #180	; 0xb4
 8001fba:	2204      	movs	r2, #4
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f015 f9e3 	bl	801738a <memset>
    memset(kf_state->R, 0, NUMBER_MEASUREMENTS*NUMBER_MEASUREMENTS*sizeof(kf_state->R[0][0]));
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	33b8      	adds	r3, #184	; 0xb8
 8001fc8:	2224      	movs	r2, #36	; 0x24
 8001fca:	2100      	movs	r1, #0
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f015 f9dc 	bl	801738a <memset>

    memset(kf_state->z, 0, NUMBER_MEASUREMENTS*sizeof(kf_state->z[0]));
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001fd8:	220c      	movs	r2, #12
 8001fda:	2100      	movs	r1, #0
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f015 f9d4 	bl	801738a <memset>
    memset(kf_state->z_active, false, NUMBER_MEASUREMENTS*sizeof(kf_state->z_active[0]));
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8001fe8:	2203      	movs	r2, #3
 8001fea:	2100      	movs	r1, #0
 8001fec:	4618      	mov	r0, r3
 8001fee:	f015 f9cc 	bl	801738a <memset>
    kf_state->num_z_active = 0;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

    transpose(NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->Ad_T);
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	3324      	adds	r3, #36	; 0x24
 8002000:	2103      	movs	r1, #3
 8002002:	2003      	movs	r0, #3
 8002004:	f000 fd48 	bl	8002a98 <transpose>
    transpose(NUMBER_STATES, NUMBER_PROCESS_NOISE, kf_state->Gd, kf_state->Gd_T);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	3360      	adds	r3, #96	; 0x60
 8002012:	2101      	movs	r1, #1
 8002014:	2003      	movs	r0, #3
 8002016:	f000 fd3f 	bl	8002a98 <transpose>
}
 800201a:	bf00      	nop
 800201c:	37c0      	adds	r7, #192	; 0xc0
 800201e:	46bd      	mov	sp, r7
 8002020:	bdb0      	pop	{r4, r5, r7, pc}
 8002022:	bf00      	nop
 8002024:	08019c60 	.word	0x08019c60
 8002028:	08019c84 	.word	0x08019c84
 800202c:	08019c90 	.word	0x08019c90

08002030 <kf_prediction>:

void kf_prediction(kf_state_t *kf_state){
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af04      	add	r7, sp, #16
 8002036:	6078      	str	r0, [r7, #4]
    /* Prediction Step */
    /* Calculation of x_priori */
    matvecprod(NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->x_est, kf_state->x_priori, true);
 8002038:	6879      	ldr	r1, [r7, #4]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f503 7082 	add.w	r0, r3, #260	; 0x104
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8002046:	2201      	movs	r2, #1
 8002048:	9201      	str	r2, [sp, #4]
 800204a:	9300      	str	r3, [sp, #0]
 800204c:	4603      	mov	r3, r0
 800204e:	460a      	mov	r2, r1
 8002050:	2103      	movs	r1, #3
 8002052:	2003      	movs	r0, #3
 8002054:	f000 ff4a 	bl	8002eec <matvecprod>
    matvecprod(NUMBER_STATES, NUMBER_INPUTS, kf_state->Bd, kf_state->u, kf_state->x_priori, false);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f103 0148 	add.w	r1, r3, #72	; 0x48
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f503 7080 	add.w	r0, r3, #256	; 0x100
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f503 739a 	add.w	r3, r3, #308	; 0x134
 800206a:	2200      	movs	r2, #0
 800206c:	9201      	str	r2, [sp, #4]
 800206e:	9300      	str	r3, [sp, #0]
 8002070:	4603      	mov	r3, r0
 8002072:	460a      	mov	r2, r1
 8002074:	2101      	movs	r1, #1
 8002076:	2003      	movs	r0, #3
 8002078:	f000 ff38 	bl	8002eec <matvecprod>

    /* Calculation of P_priori */
    /* P_priori = Ad * P_est_prior * Ad_T + Gd * Q * Gd_T */
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->P_est, kf_state->Placeholder_Ad_mult_P_est, true);
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	f502 7205 	add.w	r2, r2, #532	; 0x214
 800208a:	2101      	movs	r1, #1
 800208c:	9102      	str	r1, [sp, #8]
 800208e:	9201      	str	r2, [sp, #4]
 8002090:	9300      	str	r3, [sp, #0]
 8002092:	4603      	mov	r3, r0
 8002094:	2203      	movs	r2, #3
 8002096:	2103      	movs	r1, #3
 8002098:	2003      	movs	r0, #3
 800209a:	f000 fe8d 	bl	8002db8 <matmul>
    matmul(NUMBER_STATES, NUMBER_PROCESS_NOISE, NUMBER_PROCESS_NOISE, kf_state->Gd, kf_state->Q, kf_state->Placeholder_Gd_mult_Q, true);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f103 0054 	add.w	r0, r3, #84	; 0x54
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	33b4      	adds	r3, #180	; 0xb4
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	f502 720e 	add.w	r2, r2, #568	; 0x238
 80020ae:	2101      	movs	r1, #1
 80020b0:	9102      	str	r1, [sp, #8]
 80020b2:	9201      	str	r2, [sp, #4]
 80020b4:	9300      	str	r3, [sp, #0]
 80020b6:	4603      	mov	r3, r0
 80020b8:	2201      	movs	r2, #1
 80020ba:	2101      	movs	r1, #1
 80020bc:	2003      	movs	r0, #3
 80020be:	f000 fe7b 	bl	8002db8 <matmul>

    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, kf_state->Placeholder_Ad_mult_P_est, kf_state->Ad_T, kf_state->P_priori, true);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f503 7005 	add.w	r0, r3, #532	; 0x214
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	3324      	adds	r3, #36	; 0x24
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	f502 72a0 	add.w	r2, r2, #320	; 0x140
 80020d2:	2101      	movs	r1, #1
 80020d4:	9102      	str	r1, [sp, #8]
 80020d6:	9201      	str	r2, [sp, #4]
 80020d8:	9300      	str	r3, [sp, #0]
 80020da:	4603      	mov	r3, r0
 80020dc:	2203      	movs	r2, #3
 80020de:	2103      	movs	r1, #3
 80020e0:	2003      	movs	r0, #3
 80020e2:	f000 fe69 	bl	8002db8 <matmul>
    matmul(NUMBER_STATES, NUMBER_PROCESS_NOISE, NUMBER_STATES, kf_state->Placeholder_Gd_mult_Q, kf_state->Gd_T, kf_state->P_priori, false);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f503 700e 	add.w	r0, r3, #568	; 0x238
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	3360      	adds	r3, #96	; 0x60
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	f502 72a0 	add.w	r2, r2, #320	; 0x140
 80020f6:	2100      	movs	r1, #0
 80020f8:	9102      	str	r1, [sp, #8]
 80020fa:	9201      	str	r2, [sp, #4]
 80020fc:	9300      	str	r3, [sp, #0]
 80020fe:	4603      	mov	r3, r0
 8002100:	2203      	movs	r2, #3
 8002102:	2101      	movs	r1, #1
 8002104:	2003      	movs	r0, #3
 8002106:	f000 fe57 	bl	8002db8 <matmul>
}
 800210a:	bf00      	nop
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <select_kf_observation_matrices>:

void select_kf_observation_matrices(kf_state_t *kf_state){
 8002112:	b580      	push	{r7, lr}
 8002114:	b084      	sub	sp, #16
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
    memset(kf_state->H, 0, NUMBER_MEASUREMENTS*NUMBER_STATES*sizeof(kf_state->H[0][0]));
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	336c      	adds	r3, #108	; 0x6c
 800211e:	2224      	movs	r2, #36	; 0x24
 8002120:	2100      	movs	r1, #0
 8002122:	4618      	mov	r0, r3
 8002124:	f015 f931 	bl	801738a <memset>

    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8002128:	2300      	movs	r3, #0
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	e01e      	b.n	800216c <select_kf_observation_matrices+0x5a>
        if (kf_state->z_active[i]) {
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	4413      	add	r3, r2
 8002134:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00b      	beq.n	8002156 <select_kf_observation_matrices+0x44>
             /* activate contribution of measurement in measurement matrix */
            kf_state->H[i][0] = 1;
 800213e:	6879      	ldr	r1, [r7, #4]
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	4613      	mov	r3, r2
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	4413      	add	r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	440b      	add	r3, r1
 800214c:	336c      	adds	r3, #108	; 0x6c
 800214e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	e007      	b.n	8002166 <select_kf_observation_matrices+0x54>
        } else {
            /* set contributed measurement covariance to zero */
            kf_state->R[i][i] = 0;
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	011b      	lsls	r3, r3, #4
 800215c:	4413      	add	r3, r2
 800215e:	33b8      	adds	r3, #184	; 0xb8
 8002160:	f04f 0200 	mov.w	r2, #0
 8002164:	601a      	str	r2, [r3, #0]
    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	3301      	adds	r3, #1
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2b02      	cmp	r3, #2
 8002170:	dddd      	ble.n	800212e <select_kf_observation_matrices+0x1c>
        }
    }

    transpose(NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->H, kf_state->H_T);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3390      	adds	r3, #144	; 0x90
 800217c:	2103      	movs	r1, #3
 800217e:	2003      	movs	r0, #3
 8002180:	f000 fc8a 	bl	8002a98 <transpose>
}
 8002184:	bf00      	nop
 8002186:	3710      	adds	r7, #16
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <kf_update>:

void kf_update(kf_state_t *kf_state) {
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af04      	add	r7, sp, #16
 8002192:	6078      	str	r0, [r7, #4]
    /* Update Step */
    /* y = z - H * x_priori */
    matvecprod(NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->H, kf_state->x_priori, kf_state->y, true);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f103 016c 	add.w	r1, r3, #108	; 0x6c
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f503 709a 	add.w	r0, r3, #308	; 0x134
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 80021a6:	2201      	movs	r2, #1
 80021a8:	9201      	str	r2, [sp, #4]
 80021aa:	9300      	str	r3, [sp, #0]
 80021ac:	4603      	mov	r3, r0
 80021ae:	460a      	mov	r2, r1
 80021b0:	2103      	movs	r1, #3
 80021b2:	2003      	movs	r0, #3
 80021b4:	f000 fe9a 	bl	8002eec <matvecprod>
    vecsub(NUMBER_MEASUREMENTS, kf_state->z, kf_state->y, kf_state->y);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f503 71c4 	add.w	r1, r3, #392	; 0x188
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f503 72ca 	add.w	r2, r3, #404	; 0x194
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 80021ca:	2003      	movs	r0, #3
 80021cc:	f000 fce3 	bl	8002b96 <vecsub>

    /* S = H * P_priori * H_T + R */
    matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_STATES, kf_state->H, kf_state->P_priori, kf_state->Placeholder_H_mult_P_priori, true);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	f502 7211 	add.w	r2, r2, #580	; 0x244
 80021e2:	2101      	movs	r1, #1
 80021e4:	9102      	str	r1, [sp, #8]
 80021e6:	9201      	str	r2, [sp, #4]
 80021e8:	9300      	str	r3, [sp, #0]
 80021ea:	4603      	mov	r3, r0
 80021ec:	2203      	movs	r2, #3
 80021ee:	2103      	movs	r1, #3
 80021f0:	2003      	movs	r0, #3
 80021f2:	f000 fde1 	bl	8002db8 <matmul>
    matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->Placeholder_H_mult_P_priori, kf_state->H_T, kf_state->S, true);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f503 7011 	add.w	r0, r3, #580	; 0x244
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	3390      	adds	r3, #144	; 0x90
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	f502 72d0 	add.w	r2, r2, #416	; 0x1a0
 8002206:	2101      	movs	r1, #1
 8002208:	9102      	str	r1, [sp, #8]
 800220a:	9201      	str	r2, [sp, #4]
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	4603      	mov	r3, r0
 8002210:	2203      	movs	r2, #3
 8002212:	2103      	movs	r1, #3
 8002214:	2003      	movs	r0, #3
 8002216:	f000 fdcf 	bl	8002db8 <matmul>
    matadd(NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->S, kf_state->R, kf_state->S);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f503 72d0 	add.w	r2, r3, #416	; 0x1a0
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f103 01b8 	add.w	r1, r3, #184	; 0xb8
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800222c:	9300      	str	r3, [sp, #0]
 800222e:	460b      	mov	r3, r1
 8002230:	2103      	movs	r1, #3
 8002232:	2003      	movs	r0, #3
 8002234:	f000 fcda 	bl	8002bec <matadd>

    /* Calculate Pseudoinverse of covariance innovation */
    memset(kf_state->S_inv, 0, NUMBER_MEASUREMENTS*NUMBER_MEASUREMENTS*sizeof(kf_state->S_inv[0][0]));
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 800223e:	2224      	movs	r2, #36	; 0x24
 8002240:	2100      	movs	r1, #0
 8002242:	4618      	mov	r0, r3
 8002244:	f015 f8a1 	bl	801738a <memset>
        matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->Placeholder_S_inv_3, kf_state->Placeholder_H_T_mult_R_inv, kf_state->S_inv, true);
        matsub(NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->R_inv, kf_state->S_inv, kf_state->S_inv);
    } else {
        /* we use the regular inverse when the state dimension is larger than the number of measurements */
        /* the cholvesky inverse has a big O complexity of n^3 */
        cholesky_inverse(NUMBER_MEASUREMENTS, kf_state->S, kf_state->S_inv, LAMBDA);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f503 71d0 	add.w	r1, r3, #416	; 0x1a0
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8002254:	ed9f 0a43 	vldr	s0, [pc, #268]	; 8002364 <kf_update+0x1d8>
 8002258:	461a      	mov	r2, r3
 800225a:	2003      	movs	r0, #3
 800225c:	f001 f812 	bl	8003284 <cholesky_inverse>
    }

    /* K  = P_priori * H_T * S_inv */
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->P_priori, kf_state->H_T, kf_state->Placeholder_P_priori_mult_H_T, true);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f503 70a0 	add.w	r0, r3, #320	; 0x140
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	3390      	adds	r3, #144	; 0x90
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8002270:	2101      	movs	r1, #1
 8002272:	9102      	str	r1, [sp, #8]
 8002274:	9201      	str	r2, [sp, #4]
 8002276:	9300      	str	r3, [sp, #0]
 8002278:	4603      	mov	r3, r0
 800227a:	2203      	movs	r2, #3
 800227c:	2103      	movs	r1, #3
 800227e:	2003      	movs	r0, #3
 8002280:	f000 fd9a 	bl	8002db8 <matmul>
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->Placeholder_P_priori_mult_H_T, kf_state->S_inv, kf_state->K, true);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f503 701a 	add.w	r0, r3, #616	; 0x268
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	f502 72f4 	add.w	r2, r2, #488	; 0x1e8
 8002296:	2101      	movs	r1, #1
 8002298:	9102      	str	r1, [sp, #8]
 800229a:	9201      	str	r2, [sp, #4]
 800229c:	9300      	str	r3, [sp, #0]
 800229e:	4603      	mov	r3, r0
 80022a0:	2203      	movs	r2, #3
 80022a2:	2103      	movs	r1, #3
 80022a4:	2003      	movs	r0, #3
 80022a6:	f000 fd87 	bl	8002db8 <matmul>

    /* x_est = x_priori + K*y */
    matvecprod(NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->K, kf_state->y, kf_state->x_est, true);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f503 71f4 	add.w	r1, r3, #488	; 0x1e8
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f503 70ca 	add.w	r0, r3, #404	; 0x194
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80022bc:	2201      	movs	r2, #1
 80022be:	9201      	str	r2, [sp, #4]
 80022c0:	9300      	str	r3, [sp, #0]
 80022c2:	4603      	mov	r3, r0
 80022c4:	460a      	mov	r2, r1
 80022c6:	2103      	movs	r1, #3
 80022c8:	2003      	movs	r0, #3
 80022ca:	f000 fe0f 	bl	8002eec <matvecprod>
    vecadd(NUMBER_STATES, kf_state->x_priori, kf_state->x_est, kf_state->x_est);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f503 719a 	add.w	r1, r3, #308	; 0x134
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f503 7282 	add.w	r2, r3, #260	; 0x104
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80022e0:	2003      	movs	r0, #3
 80022e2:	f000 fc2d 	bl	8002b40 <vecadd>


    /* P_est = (eye(NUMBER_STATES) - K*H)*P_priori */
    eye(NUMBER_STATES, kf_state->Placeholder_eye);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80022ec:	4619      	mov	r1, r3
 80022ee:	2003      	movs	r0, #3
 80022f0:	f000 fb86 	bl	8002a00 <eye>
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->K, kf_state->H, kf_state->Placeholder_K_mult_H, true);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f503 70f4 	add.w	r0, r3, #488	; 0x1e8
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	336c      	adds	r3, #108	; 0x6c
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	f502 7235 	add.w	r2, r2, #724	; 0x2d4
 8002304:	2101      	movs	r1, #1
 8002306:	9102      	str	r1, [sp, #8]
 8002308:	9201      	str	r2, [sp, #4]
 800230a:	9300      	str	r3, [sp, #0]
 800230c:	4603      	mov	r3, r0
 800230e:	2203      	movs	r2, #3
 8002310:	2103      	movs	r1, #3
 8002312:	2003      	movs	r0, #3
 8002314:	f000 fd50 	bl	8002db8 <matmul>
    matsub(NUMBER_STATES, NUMBER_STATES, kf_state->Placeholder_eye, kf_state->Placeholder_K_mult_H, kf_state->Placeholder_P_est);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f503 722c 	add.w	r2, r3, #688	; 0x2b0
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f503 7135 	add.w	r1, r3, #724	; 0x2d4
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800232a:	9300      	str	r3, [sp, #0]
 800232c:	460b      	mov	r3, r1
 800232e:	2103      	movs	r1, #3
 8002330:	2003      	movs	r0, #3
 8002332:	f000 fcce 	bl	8002cd2 <matsub>
    matmul(NUMBER_STATES, NUMBER_STATES,  NUMBER_STATES, kf_state->Placeholder_P_est, kf_state->P_priori, kf_state->P_est, true);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f503 7023 	add.w	r0, r3, #652	; 0x28c
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	f502 7288 	add.w	r2, r2, #272	; 0x110
 8002348:	2101      	movs	r1, #1
 800234a:	9102      	str	r1, [sp, #8]
 800234c:	9201      	str	r2, [sp, #4]
 800234e:	9300      	str	r3, [sp, #0]
 8002350:	4603      	mov	r3, r0
 8002352:	2203      	movs	r2, #3
 8002354:	2103      	movs	r1, #3
 8002356:	2003      	movs	r0, #3
 8002358:	f000 fd2e 	bl	8002db8 <matmul>
}
 800235c:	bf00      	nop
 800235e:	3708      	adds	r7, #8
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	38d1b717 	.word	0x38d1b717

08002368 <update_state_est_data>:
#include "Sim_Con/state_est.h"
#include "Sim_Con/state_est_settings.h"

void update_state_est_data(state_est_data_t *state_est_data, kf_state_t *kf_state) {
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
    state_est_data->position_world[2] = (int32_t)(kf_state->x_est[0] * 1000);
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
 8002378:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002400 <update_state_est_data+0x98>
 800237c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002380:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002384:	ee17 2a90 	vmov	r2, s15
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	609a      	str	r2, [r3, #8]
    state_est_data->velocity_rocket[0] = (int32_t)(kf_state->x_est[1] * 1000);
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	edd3 7a42 	vldr	s15, [r3, #264]	; 0x108
 8002392:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002400 <update_state_est_data+0x98>
 8002396:	ee67 7a87 	vmul.f32	s15, s15, s14
 800239a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800239e:	ee17 2a90 	vmov	r2, s15
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	60da      	str	r2, [r3, #12]
    state_est_data->velocity_world[2] = (int32_t)(kf_state->x_est[1] * 1000);
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	edd3 7a42 	vldr	s15, [r3, #264]	; 0x108
 80023ac:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002400 <update_state_est_data+0x98>
 80023b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023b8:	ee17 2a90 	vmov	r2, s15
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	62da      	str	r2, [r3, #44]	; 0x2c
    state_est_data->acceleration_rocket[0] = (int32_t)(kf_state->u[0] * 1000);
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	edd3 7a40 	vldr	s15, [r3, #256]	; 0x100
 80023c6:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002400 <update_state_est_data+0x98>
 80023ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023d2:	ee17 2a90 	vmov	r2, s15
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	619a      	str	r2, [r3, #24]
    state_est_data->acceleration_world[2] = (int32_t)(kf_state->u[0] * 1000);
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	edd3 7a40 	vldr	s15, [r3, #256]	; 0x100
 80023e0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002400 <update_state_est_data+0x98>
 80023e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023ec:	ee17 2a90 	vmov	r2, s15
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	639a      	str	r2, [r3, #56]	; 0x38
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr
 8002400:	447a0000 	.word	0x447a0000
 8002404:	00000000 	.word	0x00000000

08002408 <process_measurements>:

void process_measurements(timestamp_t t, kf_state_t *kf_state, state_est_meas_t *state_est_meas, state_est_meas_t *state_est_meas_prior,
                          env_t *env, extrapolation_rolling_memory_t *baro_roll_mem) {
 8002408:	b590      	push	{r4, r7, lr}
 800240a:	b095      	sub	sp, #84	; 0x54
 800240c:	af02      	add	r7, sp, #8
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]
 8002414:	603b      	str	r3, [r7, #0]
    float temp_meas[NUM_SENSORBOARDS];
    bool temp_meas_active[NUM_SENSORBOARDS];
    float acc_x_meas[NUM_SENSORBOARDS];
    bool acc_x_meas_active[NUM_SENSORBOARDS];

    for (int i = 0; i < NUM_SENSORBOARDS; i++){
 8002416:	2300      	movs	r3, #0
 8002418:	647b      	str	r3, [r7, #68]	; 0x44
 800241a:	e09a      	b.n	8002552 <process_measurements+0x14a>
        /* barometer */
        if (state_est_meas->baro_data[i].ts > state_est_meas_prior->baro_data[i].ts) {
 800241c:	6879      	ldr	r1, [r7, #4]
 800241e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002420:	4613      	mov	r3, r2
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	4413      	add	r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	440b      	add	r3, r1
 800242a:	3308      	adds	r3, #8
 800242c:	6819      	ldr	r1, [r3, #0]
 800242e:	6838      	ldr	r0, [r7, #0]
 8002430:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002432:	4613      	mov	r3, r2
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	4413      	add	r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	4403      	add	r3, r0
 800243c:	3308      	adds	r3, #8
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4299      	cmp	r1, r3
 8002442:	d92b      	bls.n	800249c <process_measurements+0x94>
            kf_state->z[i] = state_est_meas->baro_data[i].pressure;
 8002444:	6879      	ldr	r1, [r7, #4]
 8002446:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002448:	4613      	mov	r3, r2
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	4413      	add	r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	440b      	add	r3, r1
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	68b9      	ldr	r1, [r7, #8]
 8002456:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002458:	3362      	adds	r3, #98	; 0x62
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	440b      	add	r3, r1
 800245e:	601a      	str	r2, [r3, #0]
            kf_state->z_active[i] = true;
 8002460:	68ba      	ldr	r2, [r7, #8]
 8002462:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002464:	4413      	add	r3, r2
 8002466:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 800246a:	2201      	movs	r2, #1
 800246c:	701a      	strb	r2, [r3, #0]

            temp_meas[i] = state_est_meas->baro_data[i].temperature;
 800246e:	6879      	ldr	r1, [r7, #4]
 8002470:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002472:	4613      	mov	r3, r2
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	4413      	add	r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	440b      	add	r3, r1
 800247c:	3304      	adds	r3, #4
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002488:	440b      	add	r3, r1
 800248a:	3b20      	subs	r3, #32
 800248c:	601a      	str	r2, [r3, #0]
            temp_meas_active[i] = true;
 800248e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002492:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002494:	4413      	add	r3, r2
 8002496:	2201      	movs	r2, #1
 8002498:	701a      	strb	r2, [r3, #0]
 800249a:	e01d      	b.n	80024d8 <process_measurements+0xd0>
        } else {
            kf_state->z[i] = 0;
 800249c:	68ba      	ldr	r2, [r7, #8]
 800249e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024a0:	3362      	adds	r3, #98	; 0x62
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	4413      	add	r3, r2
 80024a6:	f04f 0200 	mov.w	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
            kf_state->z_active[i] = false;
 80024ac:	68ba      	ldr	r2, [r7, #8]
 80024ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024b0:	4413      	add	r3, r2
 80024b2:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 80024b6:	2200      	movs	r2, #0
 80024b8:	701a      	strb	r2, [r3, #0]

            temp_meas[i] = 0;
 80024ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80024c2:	4413      	add	r3, r2
 80024c4:	3b20      	subs	r3, #32
 80024c6:	f04f 0200 	mov.w	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
            temp_meas_active[i] = false;
 80024cc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80024d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024d2:	4413      	add	r3, r2
 80024d4:	2200      	movs	r2, #0
 80024d6:	701a      	strb	r2, [r3, #0]
        }

        /* imu */
        if (state_est_meas->imu_data[i].ts > state_est_meas_prior->imu_data[i].ts) {
 80024d8:	6879      	ldr	r1, [r7, #4]
 80024da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80024dc:	4613      	mov	r3, r2
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	1a9b      	subs	r3, r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	440b      	add	r3, r1
 80024e6:	333c      	adds	r3, #60	; 0x3c
 80024e8:	6819      	ldr	r1, [r3, #0]
 80024ea:	6838      	ldr	r0, [r7, #0]
 80024ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80024ee:	4613      	mov	r3, r2
 80024f0:	00db      	lsls	r3, r3, #3
 80024f2:	1a9b      	subs	r3, r3, r2
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	4403      	add	r3, r0
 80024f8:	333c      	adds	r3, #60	; 0x3c
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4299      	cmp	r1, r3
 80024fe:	d916      	bls.n	800252e <process_measurements+0x126>
            acc_x_meas[i] = state_est_meas->imu_data[i].acc_x;
 8002500:	6879      	ldr	r1, [r7, #4]
 8002502:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002504:	4613      	mov	r3, r2
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	1a9b      	subs	r3, r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	440b      	add	r3, r1
 800250e:	3330      	adds	r3, #48	; 0x30
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800251a:	440b      	add	r3, r1
 800251c:	3b30      	subs	r3, #48	; 0x30
 800251e:	601a      	str	r2, [r3, #0]
            acc_x_meas_active[i] = true;
 8002520:	f107 0214 	add.w	r2, r7, #20
 8002524:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002526:	4413      	add	r3, r2
 8002528:	2201      	movs	r2, #1
 800252a:	701a      	strb	r2, [r3, #0]
 800252c:	e00e      	b.n	800254c <process_measurements+0x144>
        } else {
            acc_x_meas[i] = 0;
 800252e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002536:	4413      	add	r3, r2
 8002538:	3b30      	subs	r3, #48	; 0x30
 800253a:	f04f 0200 	mov.w	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
            acc_x_meas_active[i] = false;
 8002540:	f107 0214 	add.w	r2, r7, #20
 8002544:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002546:	4413      	add	r3, r2
 8002548:	2200      	movs	r2, #0
 800254a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < NUM_SENSORBOARDS; i++){
 800254c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800254e:	3301      	adds	r3, #1
 8002550:	647b      	str	r3, [r7, #68]	; 0x44
 8002552:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002554:	2b02      	cmp	r3, #2
 8002556:	f77f af61 	ble.w	800241c <process_measurements+0x14>
        if (baro_roll_mem->memory_length < MAX_LENGTH_ROLLING_MEMORY) {
            sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, kf_state->z, kf_state->z_active);
        }
        sensor_elimination_by_extrapolation(t, NUMBER_MEASUREMENTS, kf_state->z, kf_state->z_active, baro_roll_mem);
    } else {
        sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, kf_state->z, kf_state->z_active);
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	f503 71c4 	add.w	r1, r3, #392	; 0x188
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8002566:	461a      	mov	r2, r3
 8002568:	2003      	movs	r0, #3
 800256a:	f000 f975 	bl	8002858 <sensor_elimination_by_stdev>
    }

    /* eliminate temperature measurements */
    sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, temp_meas, temp_meas_active);
 800256e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002572:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002576:	4619      	mov	r1, r3
 8002578:	2003      	movs	r0, #3
 800257a:	f000 f96d 	bl	8002858 <sensor_elimination_by_stdev>

    /* eliminate accelerometer in rocket x-dir measurements */
    sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, acc_x_meas, acc_x_meas_active);
 800257e:	f107 0214 	add.w	r2, r7, #20
 8002582:	f107 0318 	add.w	r3, r7, #24
 8002586:	4619      	mov	r1, r3
 8002588:	2003      	movs	r0, #3
 800258a:	f000 f965 	bl	8002858 <sensor_elimination_by_stdev>

    /* update num_z_active */
    kf_state->num_z_active = 0;
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	2200      	movs	r2, #0
 8002592:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    /* take the average of the active accelerometers in rocket-x dir as the state estimation input */
    kf_state->u[0] = 0;
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	f04f 0200 	mov.w	r2, #0
 800259c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    int32_t num_acc_x_meas_active = 0;
 80025a0:	2300      	movs	r3, #0
 80025a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* take the average of the temperature measurement  */
    float temp_meas_mean = 0;
 80025a4:	f04f 0300 	mov.w	r3, #0
 80025a8:	643b      	str	r3, [r7, #64]	; 0x40
    int32_t num_temp_meas_active = 0;
 80025aa:	2300      	movs	r3, #0
 80025ac:	63bb      	str	r3, [r7, #56]	; 0x38
    for (int i = 0; i < NUMBER_MEASUREMENTS; i++){
 80025ae:	2300      	movs	r3, #0
 80025b0:	637b      	str	r3, [r7, #52]	; 0x34
 80025b2:	e049      	b.n	8002648 <process_measurements+0x240>
        if (kf_state->z_active[i]){
 80025b4:	68ba      	ldr	r2, [r7, #8]
 80025b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025b8:	4413      	add	r3, r2
 80025ba:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d006      	beq.n	80025d2 <process_measurements+0x1ca>
            kf_state->num_z_active += 1;
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80025ca:	1c5a      	adds	r2, r3, #1
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
        }
        if (acc_x_meas_active[i]) {
 80025d2:	f107 0214 	add.w	r2, r7, #20
 80025d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025d8:	4413      	add	r3, r2
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d012      	beq.n	8002606 <process_measurements+0x1fe>
            kf_state->u[0] += acc_x_meas[i];
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	ed93 7a40 	vldr	s14, [r3, #256]	; 0x100
 80025e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80025ee:	4413      	add	r3, r2
 80025f0:	3b30      	subs	r3, #48	; 0x30
 80025f2:	edd3 7a00 	vldr	s15, [r3]
 80025f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	edc3 7a40 	vstr	s15, [r3, #256]	; 0x100
            num_acc_x_meas_active += 1;
 8002600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002602:	3301      	adds	r3, #1
 8002604:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        if (temp_meas[i]) {
 8002606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800260e:	4413      	add	r3, r2
 8002610:	3b20      	subs	r3, #32
 8002612:	edd3 7a00 	vldr	s15, [r3]
 8002616:	eef5 7a40 	vcmp.f32	s15, #0.0
 800261a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800261e:	d010      	beq.n	8002642 <process_measurements+0x23a>
            temp_meas_mean += temp_meas[i];
 8002620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002628:	4413      	add	r3, r2
 800262a:	3b20      	subs	r3, #32
 800262c:	edd3 7a00 	vldr	s15, [r3]
 8002630:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002634:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002638:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            num_temp_meas_active += 1;
 800263c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800263e:	3301      	adds	r3, #1
 8002640:	63bb      	str	r3, [r7, #56]	; 0x38
    for (int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8002642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002644:	3301      	adds	r3, #1
 8002646:	637b      	str	r3, [r7, #52]	; 0x34
 8002648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800264a:	2b02      	cmp	r3, #2
 800264c:	ddb2      	ble.n	80025b4 <process_measurements+0x1ac>
        }
    }

    pressure2altitudeAGL(env, NUMBER_MEASUREMENTS, kf_state->z, kf_state->z_active, kf_state->z);
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	f503 7103 	add.w	r1, r3, #524	; 0x20c
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	460b      	mov	r3, r1
 8002664:	2103      	movs	r1, #3
 8002666:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002668:	f7ff fa0e 	bl	8001a88 <pressure2altitudeAGL>

    if (num_acc_x_meas_active > 0){
 800266c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800266e:	2b00      	cmp	r3, #0
 8002670:	dd21      	ble.n	80026b6 <process_measurements+0x2ae>
        kf_state->u[0] /= num_acc_x_meas_active;
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	edd3 6a40 	vldr	s13, [r3, #256]	; 0x100
 8002678:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800267a:	ee07 3a90 	vmov	s15, r3
 800267e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002682:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	edc3 7a40 	vstr	s15, [r3, #256]	; 0x100
        /* gravity compensation for accelerometer */
        kf_state->u[0] -= GRAVITATION;
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002692:	4618      	mov	r0, r3
 8002694:	f7fd ff78 	bl	8000588 <__aeabi_f2d>
 8002698:	a313      	add	r3, pc, #76	; (adr r3, 80026e8 <process_measurements+0x2e0>)
 800269a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800269e:	f7fd fe13 	bl	80002c8 <__aeabi_dsub>
 80026a2:	4603      	mov	r3, r0
 80026a4:	460c      	mov	r4, r1
 80026a6:	4618      	mov	r0, r3
 80026a8:	4621      	mov	r1, r4
 80026aa:	f7fe fa95 	bl	8000bd8 <__aeabi_d2f>
 80026ae:	4602      	mov	r2, r0
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    if (num_temp_meas_active > 0){
 80026b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	dd0f      	ble.n	80026dc <process_measurements+0x2d4>
        temp_meas_mean /= num_temp_meas_active;
 80026bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026be:	ee07 3a90 	vmov	s15, r3
 80026c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026c6:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 80026ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026ce:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        update_env(env, temp_meas_mean);
 80026d2:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 80026d6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80026d8:	f7ff f97a 	bl	80019d0 <update_env>
    }
} 
 80026dc:	bf00      	nop
 80026de:	374c      	adds	r7, #76	; 0x4c
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd90      	pop	{r4, r7, pc}
 80026e4:	f3af 8000 	nop.w
 80026e8:	51eb851f 	.word	0x51eb851f
 80026ec:	40239eb8 	.word	0x40239eb8

080026f0 <select_noise_models>:

void select_noise_models(kf_state_t *kf_state, flight_phase_detection_t *flight_phase_detection, env_t *env,
                        extrapolation_rolling_memory_t *baro_roll_mem){
 80026f0:	b590      	push	{r4, r7, lr}
 80026f2:	b091      	sub	sp, #68	; 0x44
 80026f4:	af02      	add	r7, sp, #8
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
 80026fc:	603b      	str	r3, [r7, #0]
    float accelerometer_x_stdev;
    float barometer_stdev;

    // TODO @maxi: add different noise models for each mach regime
    switch (flight_phase_detection->flight_phase) {
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	3b01      	subs	r3, #1
 8002704:	2b05      	cmp	r3, #5
 8002706:	d823      	bhi.n	8002750 <select_noise_models+0x60>
 8002708:	a201      	add	r2, pc, #4	; (adr r2, 8002710 <select_noise_models+0x20>)
 800270a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800270e:	bf00      	nop
 8002710:	08002729 	.word	0x08002729
 8002714:	08002729 	.word	0x08002729
 8002718:	08002733 	.word	0x08002733
 800271c:	0800273d 	.word	0x0800273d
 8002720:	08002747 	.word	0x08002747
 8002724:	08002729 	.word	0x08002729
        case AIRBRAKE_TEST:
        case RECOVERY:
        case IDLE:
            accelerometer_x_stdev = 0.0185409;
 8002728:	4b43      	ldr	r3, [pc, #268]	; (8002838 <select_noise_models+0x148>)
 800272a:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 1.869;
 800272c:	4b43      	ldr	r3, [pc, #268]	; (800283c <select_noise_models+0x14c>)
 800272e:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8002730:	e00e      	b.n	8002750 <select_noise_models+0x60>
        case THRUSTING:
            accelerometer_x_stdev = 1.250775;
 8002732:	4b43      	ldr	r3, [pc, #268]	; (8002840 <select_noise_models+0x150>)
 8002734:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 13.000;
 8002736:	4b43      	ldr	r3, [pc, #268]	; (8002844 <select_noise_models+0x154>)
 8002738:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 800273a:	e009      	b.n	8002750 <select_noise_models+0x60>
        case COASTING:
            accelerometer_x_stdev = 0.61803;
 800273c:	4b42      	ldr	r3, [pc, #264]	; (8002848 <select_noise_models+0x158>)
 800273e:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 7.380;
 8002740:	4b42      	ldr	r3, [pc, #264]	; (800284c <select_noise_models+0x15c>)
 8002742:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8002744:	e004      	b.n	8002750 <select_noise_models+0x60>
        case DESCENT:
            accelerometer_x_stdev = 1.955133;
 8002746:	4b42      	ldr	r3, [pc, #264]	; (8002850 <select_noise_models+0x160>)
 8002748:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 3.896;
 800274a:	4b42      	ldr	r3, [pc, #264]	; (8002854 <select_noise_models+0x164>)
 800274c:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 800274e:	bf00      	nop
    }

    for(int i = 0; i < NUMBER_PROCESS_NOISE; i++){
 8002750:	2300      	movs	r3, #0
 8002752:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002754:	e01b      	b.n	800278e <select_noise_models+0x9e>
        kf_state->Q[i][i] = pow(accelerometer_x_stdev, 2);
 8002756:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002758:	f7fd ff16 	bl	8000588 <__aeabi_f2d>
 800275c:	4603      	mov	r3, r0
 800275e:	460c      	mov	r4, r1
 8002760:	ed9f 1b33 	vldr	d1, [pc, #204]	; 8002830 <select_noise_models+0x140>
 8002764:	ec44 3b10 	vmov	d0, r3, r4
 8002768:	f015 fa7a 	bl	8017c60 <pow>
 800276c:	ec54 3b10 	vmov	r3, r4, d0
 8002770:	4618      	mov	r0, r3
 8002772:	4621      	mov	r1, r4
 8002774:	f7fe fa30 	bl	8000bd8 <__aeabi_d2f>
 8002778:	4601      	mov	r1, r0
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800277e:	3316      	adds	r3, #22
 8002780:	00db      	lsls	r3, r3, #3
 8002782:	4413      	add	r3, r2
 8002784:	3304      	adds	r3, #4
 8002786:	6019      	str	r1, [r3, #0]
    for(int i = 0; i < NUMBER_PROCESS_NOISE; i++){
 8002788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800278a:	3301      	adds	r3, #1
 800278c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800278e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002790:	2b00      	cmp	r3, #0
 8002792:	dde0      	ble.n	8002756 <select_noise_models+0x66>
    }

    float p[1];
    float h[1] = {kf_state->x_est[0]};
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800279a:	61bb      	str	r3, [r7, #24]
    bool h_active[1] = {true};
 800279c:	2301      	movs	r3, #1
 800279e:	753b      	strb	r3, [r7, #20]
    altitudeAGL2pressure(env, 1, h, h_active, p);
 80027a0:	f107 0114 	add.w	r1, r7, #20
 80027a4:	f107 0218 	add.w	r2, r7, #24
 80027a8:	f107 031c 	add.w	r3, r7, #28
 80027ac:	9300      	str	r3, [sp, #0]
 80027ae:	460b      	mov	r3, r1
 80027b0:	2101      	movs	r1, #1
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f7ff f9c8 	bl	8001b48 <altitudeAGL2pressure>
    float h_grad = altitude_gradient(env, p[0]);
 80027b8:	edd7 7a07 	vldr	s15, [r7, #28]
 80027bc:	eeb0 0a67 	vmov.f32	s0, s15
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f7ff fa29 	bl	8001c18 <altitude_gradient>
 80027c6:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
    float altitude_stdev = fabsf(barometer_stdev * h_grad);
 80027ca:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80027ce:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80027d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027d6:	eef0 7ae7 	vabs.f32	s15, s15
 80027da:	edc7 7a08 	vstr	s15, [r7, #32]

    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 80027de:	2300      	movs	r3, #0
 80027e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80027e2:	e01a      	b.n	800281a <select_noise_models+0x12a>
        kf_state->R[i][i] = pow(altitude_stdev, 2);
 80027e4:	6a38      	ldr	r0, [r7, #32]
 80027e6:	f7fd fecf 	bl	8000588 <__aeabi_f2d>
 80027ea:	4603      	mov	r3, r0
 80027ec:	460c      	mov	r4, r1
 80027ee:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8002830 <select_noise_models+0x140>
 80027f2:	ec44 3b10 	vmov	d0, r3, r4
 80027f6:	f015 fa33 	bl	8017c60 <pow>
 80027fa:	ec54 3b10 	vmov	r3, r4, d0
 80027fe:	4618      	mov	r0, r3
 8002800:	4621      	mov	r1, r4
 8002802:	f7fe f9e9 	bl	8000bd8 <__aeabi_d2f>
 8002806:	4601      	mov	r1, r0
 8002808:	68fa      	ldr	r2, [r7, #12]
 800280a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800280c:	011b      	lsls	r3, r3, #4
 800280e:	4413      	add	r3, r2
 8002810:	33b8      	adds	r3, #184	; 0xb8
 8002812:	6019      	str	r1, [r3, #0]
    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8002814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002816:	3301      	adds	r3, #1
 8002818:	62bb      	str	r3, [r7, #40]	; 0x28
 800281a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800281c:	2b02      	cmp	r3, #2
 800281e:	dde1      	ble.n	80027e4 <select_noise_models+0xf4>
    }

    baro_roll_mem->noise_stdev = barometer_stdev;
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002824:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8002828:	bf00      	nop
 800282a:	373c      	adds	r7, #60	; 0x3c
 800282c:	46bd      	mov	sp, r7
 800282e:	bd90      	pop	{r4, r7, pc}
 8002830:	00000000 	.word	0x00000000
 8002834:	40000000 	.word	0x40000000
 8002838:	3c97e316 	.word	0x3c97e316
 800283c:	3fef3b64 	.word	0x3fef3b64
 8002840:	3fa01965 	.word	0x3fa01965
 8002844:	41500000 	.word	0x41500000
 8002848:	3f1e3737 	.word	0x3f1e3737
 800284c:	40ec28f6 	.word	0x40ec28f6
 8002850:	3ffa41cc 	.word	0x3ffa41cc
 8002854:	40795810 	.word	0x40795810

08002858 <sensor_elimination_by_stdev>:

void sensor_elimination_by_stdev(int32_t n, float measurements[n], bool measurement_active[n]) {
 8002858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800285a:	b08b      	sub	sp, #44	; 0x2c
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
    /* calculate mean of the sample */
    int32_t num_active = 0;
 8002864:	2300      	movs	r3, #0
 8002866:	627b      	str	r3, [r7, #36]	; 0x24
    float mean = 0;
 8002868:	f04f 0300 	mov.w	r3, #0
 800286c:	623b      	str	r3, [r7, #32]
    for (int i = 0; i < n; i++){
 800286e:	2300      	movs	r3, #0
 8002870:	61fb      	str	r3, [r7, #28]
 8002872:	e017      	b.n	80028a4 <sensor_elimination_by_stdev+0x4c>
        if (measurement_active[i]) {
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	4413      	add	r3, r2
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d00e      	beq.n	800289e <sensor_elimination_by_stdev+0x46>
            num_active += 1;
 8002880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002882:	3301      	adds	r3, #1
 8002884:	627b      	str	r3, [r7, #36]	; 0x24
            mean += measurements[i];
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	68ba      	ldr	r2, [r7, #8]
 800288c:	4413      	add	r3, r2
 800288e:	edd3 7a00 	vldr	s15, [r3]
 8002892:	ed97 7a08 	vldr	s14, [r7, #32]
 8002896:	ee77 7a27 	vadd.f32	s15, s14, s15
 800289a:	edc7 7a08 	vstr	s15, [r7, #32]
    for (int i = 0; i < n; i++){
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	3301      	adds	r3, #1
 80028a2:	61fb      	str	r3, [r7, #28]
 80028a4:	69fa      	ldr	r2, [r7, #28]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	dbe3      	blt.n	8002874 <sensor_elimination_by_stdev+0x1c>
        }
    }
    if (num_active > 0){
 80028ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	dd0a      	ble.n	80028c8 <sensor_elimination_by_stdev+0x70>
        mean /= num_active;
 80028b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b4:	ee07 3a90 	vmov	s15, r3
 80028b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028bc:	edd7 6a08 	vldr	s13, [r7, #32]
 80028c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028c4:	edc7 7a08 	vstr	s15, [r7, #32]
    }

    /* calculate the standard deviation of the sample */
    float stdev = 0;
 80028c8:	f04f 0300 	mov.w	r3, #0
 80028cc:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < n; ++i) {
 80028ce:	2300      	movs	r3, #0
 80028d0:	617b      	str	r3, [r7, #20]
 80028d2:	e033      	b.n	800293c <sensor_elimination_by_stdev+0xe4>
        if (measurement_active[i]) {
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	4413      	add	r3, r2
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d02a      	beq.n	8002936 <sensor_elimination_by_stdev+0xde>
            stdev += pow(measurements[i] - mean, 2);
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	68ba      	ldr	r2, [r7, #8]
 80028e6:	4413      	add	r3, r2
 80028e8:	ed93 7a00 	vldr	s14, [r3]
 80028ec:	edd7 7a08 	vldr	s15, [r7, #32]
 80028f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028f4:	ee17 0a90 	vmov	r0, s15
 80028f8:	f7fd fe46 	bl	8000588 <__aeabi_f2d>
 80028fc:	4603      	mov	r3, r0
 80028fe:	460c      	mov	r4, r1
 8002900:	ed9f 1b3d 	vldr	d1, [pc, #244]	; 80029f8 <sensor_elimination_by_stdev+0x1a0>
 8002904:	ec44 3b10 	vmov	d0, r3, r4
 8002908:	f015 f9aa 	bl	8017c60 <pow>
 800290c:	ec56 5b10 	vmov	r5, r6, d0
 8002910:	69b8      	ldr	r0, [r7, #24]
 8002912:	f7fd fe39 	bl	8000588 <__aeabi_f2d>
 8002916:	4603      	mov	r3, r0
 8002918:	460c      	mov	r4, r1
 800291a:	461a      	mov	r2, r3
 800291c:	4623      	mov	r3, r4
 800291e:	4628      	mov	r0, r5
 8002920:	4631      	mov	r1, r6
 8002922:	f7fd fcd3 	bl	80002cc <__adddf3>
 8002926:	4603      	mov	r3, r0
 8002928:	460c      	mov	r4, r1
 800292a:	4618      	mov	r0, r3
 800292c:	4621      	mov	r1, r4
 800292e:	f7fe f953 	bl	8000bd8 <__aeabi_d2f>
 8002932:	4603      	mov	r3, r0
 8002934:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < n; ++i) {
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	3301      	adds	r3, #1
 800293a:	617b      	str	r3, [r7, #20]
 800293c:	697a      	ldr	r2, [r7, #20]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	429a      	cmp	r2, r3
 8002942:	dbc7      	blt.n	80028d4 <sensor_elimination_by_stdev+0x7c>
        }
    }
    if (num_active > 0){
 8002944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002946:	2b00      	cmp	r3, #0
 8002948:	dd1a      	ble.n	8002980 <sensor_elimination_by_stdev+0x128>
        stdev = sqrt(stdev / num_active);
 800294a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294c:	ee07 3a90 	vmov	s15, r3
 8002950:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002954:	ed97 7a06 	vldr	s14, [r7, #24]
 8002958:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800295c:	ee16 0a90 	vmov	r0, s13
 8002960:	f7fd fe12 	bl	8000588 <__aeabi_f2d>
 8002964:	4603      	mov	r3, r0
 8002966:	460c      	mov	r4, r1
 8002968:	ec44 3b10 	vmov	d0, r3, r4
 800296c:	f015 fae8 	bl	8017f40 <sqrt>
 8002970:	ec54 3b10 	vmov	r3, r4, d0
 8002974:	4618      	mov	r0, r3
 8002976:	4621      	mov	r1, r4
 8002978:	f7fe f92e 	bl	8000bd8 <__aeabi_d2f>
 800297c:	4603      	mov	r3, r0
 800297e:	61bb      	str	r3, [r7, #24]
    }

    /* deactivate measurements if they are too far off the mean */
    for (int i = 0; i < n; ++i) {
 8002980:	2300      	movs	r3, #0
 8002982:	613b      	str	r3, [r7, #16]
 8002984:	e02f      	b.n	80029e6 <sensor_elimination_by_stdev+0x18e>
        if (measurement_active[i]) {
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	4413      	add	r3, r2
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d026      	beq.n	80029e0 <sensor_elimination_by_stdev+0x188>
            if (fabsf(measurements[i] - mean) > 2.0 * stdev) {
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	68ba      	ldr	r2, [r7, #8]
 8002998:	4413      	add	r3, r2
 800299a:	ed93 7a00 	vldr	s14, [r3]
 800299e:	edd7 7a08 	vldr	s15, [r7, #32]
 80029a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029a6:	eef0 7ae7 	vabs.f32	s15, s15
 80029aa:	ee17 0a90 	vmov	r0, s15
 80029ae:	f7fd fdeb 	bl	8000588 <__aeabi_f2d>
 80029b2:	4604      	mov	r4, r0
 80029b4:	460d      	mov	r5, r1
 80029b6:	69b8      	ldr	r0, [r7, #24]
 80029b8:	f7fd fde6 	bl	8000588 <__aeabi_f2d>
 80029bc:	4602      	mov	r2, r0
 80029be:	460b      	mov	r3, r1
 80029c0:	f7fd fc84 	bl	80002cc <__adddf3>
 80029c4:	4602      	mov	r2, r0
 80029c6:	460b      	mov	r3, r1
 80029c8:	4620      	mov	r0, r4
 80029ca:	4629      	mov	r1, r5
 80029cc:	f7fe f8c4 	bl	8000b58 <__aeabi_dcmpgt>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d004      	beq.n	80029e0 <sensor_elimination_by_stdev+0x188>
                measurement_active[i] = false;
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	4413      	add	r3, r2
 80029dc:	2200      	movs	r2, #0
 80029de:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < n; ++i) {
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	3301      	adds	r3, #1
 80029e4:	613b      	str	r3, [r7, #16]
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	dbcb      	blt.n	8002986 <sensor_elimination_by_stdev+0x12e>
            }
        }
    }
}
 80029ee:	bf00      	nop
 80029f0:	372c      	adds	r7, #44	; 0x2c
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029f6:	bf00      	nop
 80029f8:	00000000 	.word	0x00000000
 80029fc:	40000000 	.word	0x40000000

08002a00 <eye>:
#include "Util/math_utils.h"


void eye(int32_t dim, float A[dim][dim]) {
 8002a00:	b490      	push	{r4, r7}
 8002a02:	b086      	sub	sp, #24
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	1e43      	subs	r3, r0, #1
 8002a0e:	60fb      	str	r3, [r7, #12]
 8002a10:	4603      	mov	r3, r0
 8002a12:	4619      	mov	r1, r3
 8002a14:	f04f 0200 	mov.w	r2, #0
 8002a18:	f04f 0300 	mov.w	r3, #0
 8002a1c:	f04f 0400 	mov.w	r4, #0
 8002a20:	0154      	lsls	r4, r2, #5
 8002a22:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a26:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < dim; i++){
 8002a28:	2300      	movs	r3, #0
 8002a2a:	613b      	str	r3, [r7, #16]
 8002a2c:	e02b      	b.n	8002a86 <eye+0x86>
        for(int j = 0; j < dim; j++){
 8002a2e:	2300      	movs	r3, #0
 8002a30:	617b      	str	r3, [r7, #20]
 8002a32:	e021      	b.n	8002a78 <eye+0x78>
            if (i == j){
 8002a34:	693a      	ldr	r2, [r7, #16]
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d10d      	bne.n	8002a58 <eye+0x58>
				A[i][j] = 1;
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	fb03 f302 	mul.w	r3, r3, r2
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	683a      	ldr	r2, [r7, #0]
 8002a48:	441a      	add	r2, r3
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	4413      	add	r3, r2
 8002a50:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002a54:	601a      	str	r2, [r3, #0]
 8002a56:	e00c      	b.n	8002a72 <eye+0x72>
			} else {
				A[i][j] = 0;
 8002a58:	4602      	mov	r2, r0
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	fb03 f302 	mul.w	r3, r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	683a      	ldr	r2, [r7, #0]
 8002a64:	441a      	add	r2, r3
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	4413      	add	r3, r2
 8002a6c:	f04f 0200 	mov.w	r2, #0
 8002a70:	601a      	str	r2, [r3, #0]
        for(int j = 0; j < dim; j++){
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	3301      	adds	r3, #1
 8002a76:	617b      	str	r3, [r7, #20]
 8002a78:	697a      	ldr	r2, [r7, #20]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	dbd9      	blt.n	8002a34 <eye+0x34>
	for(int i = 0; i < dim; i++){
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	3301      	adds	r3, #1
 8002a84:	613b      	str	r3, [r7, #16]
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	dbcf      	blt.n	8002a2e <eye+0x2e>
			}
        }
    }
}
 8002a8e:	bf00      	nop
 8002a90:	3718      	adds	r7, #24
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bc90      	pop	{r4, r7}
 8002a96:	4770      	bx	lr

08002a98 <transpose>:

void transpose(int32_t m, int32_t n, float A[m][n], float A_T[n][m]) {
 8002a98:	b4b0      	push	{r4, r5, r7}
 8002a9a:	b089      	sub	sp, #36	; 0x24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
 8002aa4:	603b      	str	r3, [r7, #0]
 8002aa6:	68b8      	ldr	r0, [r7, #8]
 8002aa8:	1e43      	subs	r3, r0, #1
 8002aaa:	617b      	str	r3, [r7, #20]
 8002aac:	4603      	mov	r3, r0
 8002aae:	4619      	mov	r1, r3
 8002ab0:	f04f 0200 	mov.w	r2, #0
 8002ab4:	f04f 0300 	mov.w	r3, #0
 8002ab8:	f04f 0400 	mov.w	r4, #0
 8002abc:	0154      	lsls	r4, r2, #5
 8002abe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002ac2:	014b      	lsls	r3, r1, #5
 8002ac4:	68fd      	ldr	r5, [r7, #12]
 8002ac6:	1e6b      	subs	r3, r5, #1
 8002ac8:	613b      	str	r3, [r7, #16]
 8002aca:	462b      	mov	r3, r5
 8002acc:	4619      	mov	r1, r3
 8002ace:	f04f 0200 	mov.w	r2, #0
 8002ad2:	f04f 0300 	mov.w	r3, #0
 8002ad6:	f04f 0400 	mov.w	r4, #0
 8002ada:	0154      	lsls	r4, r2, #5
 8002adc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002ae0:	014b      	lsls	r3, r1, #5
	/* Get Transpose */
	for(int i = 0; i < m; i++){
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	61bb      	str	r3, [r7, #24]
 8002ae6:	e022      	b.n	8002b2e <transpose+0x96>
		for(int j = 0; j < n; j++){
 8002ae8:	2300      	movs	r3, #0
 8002aea:	61fb      	str	r3, [r7, #28]
 8002aec:	e018      	b.n	8002b20 <transpose+0x88>
			A_T[j][i] = A[i][j];
 8002aee:	4602      	mov	r2, r0
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	fb03 f302 	mul.w	r3, r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	441a      	add	r2, r3
 8002afc:	4629      	mov	r1, r5
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	fb03 f301 	mul.w	r3, r3, r1
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	6839      	ldr	r1, [r7, #0]
 8002b08:	4419      	add	r1, r3
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	4413      	add	r3, r2
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	440b      	add	r3, r1
 8002b18:	601a      	str	r2, [r3, #0]
		for(int j = 0; j < n; j++){
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	61fb      	str	r3, [r7, #28]
 8002b20:	69fa      	ldr	r2, [r7, #28]
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	dbe2      	blt.n	8002aee <transpose+0x56>
	for(int i = 0; i < m; i++){
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	61bb      	str	r3, [r7, #24]
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	dbd8      	blt.n	8002ae8 <transpose+0x50>
		}
	}
}
 8002b36:	bf00      	nop
 8002b38:	3724      	adds	r7, #36	; 0x24
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bcb0      	pop	{r4, r5, r7}
 8002b3e:	4770      	bx	lr

08002b40 <vecadd>:

void vecadd(int32_t n, float a[n], float b[n], float c[n]) {
 8002b40:	b480      	push	{r7}
 8002b42:	b087      	sub	sp, #28
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
 8002b4c:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < n; i++){
 8002b4e:	2300      	movs	r3, #0
 8002b50:	617b      	str	r3, [r7, #20]
 8002b52:	e016      	b.n	8002b82 <vecadd+0x42>
		c[i] = a[i] + b[i];
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	68ba      	ldr	r2, [r7, #8]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	ed93 7a00 	vldr	s14, [r3]
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	4413      	add	r3, r2
 8002b68:	edd3 7a00 	vldr	s15, [r3]
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	4413      	add	r3, r2
 8002b74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b78:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < n; i++){
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	3301      	adds	r3, #1
 8002b80:	617b      	str	r3, [r7, #20]
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	dbe4      	blt.n	8002b54 <vecadd+0x14>
	}
}
 8002b8a:	bf00      	nop
 8002b8c:	371c      	adds	r7, #28
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr

08002b96 <vecsub>:

void vecsub(int32_t n, float a[n], float b[n], float c[n]) {
 8002b96:	b480      	push	{r7}
 8002b98:	b087      	sub	sp, #28
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	60f8      	str	r0, [r7, #12]
 8002b9e:	60b9      	str	r1, [r7, #8]
 8002ba0:	607a      	str	r2, [r7, #4]
 8002ba2:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < n; i++){
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	617b      	str	r3, [r7, #20]
 8002ba8:	e016      	b.n	8002bd8 <vecsub+0x42>
		c[i] = a[i] - b[i];
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	68ba      	ldr	r2, [r7, #8]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	ed93 7a00 	vldr	s14, [r3]
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	edd3 7a00 	vldr	s15, [r3]
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	683a      	ldr	r2, [r7, #0]
 8002bc8:	4413      	add	r3, r2
 8002bca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bce:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < n; i++){
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	617b      	str	r3, [r7, #20]
 8002bd8:	697a      	ldr	r2, [r7, #20]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	dbe4      	blt.n	8002baa <vecsub+0x14>
	}
}
 8002be0:	bf00      	nop
 8002be2:	371c      	adds	r7, #28
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <matadd>:

void matadd(int32_t m, int32_t n, float A[m][n], float B[m][n], float C[m][n]) {
 8002bec:	b4f0      	push	{r4, r5, r6, r7}
 8002bee:	b08a      	sub	sp, #40	; 0x28
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	607a      	str	r2, [r7, #4]
 8002bf8:	603b      	str	r3, [r7, #0]
 8002bfa:	68b8      	ldr	r0, [r7, #8]
 8002bfc:	1e43      	subs	r3, r0, #1
 8002bfe:	627b      	str	r3, [r7, #36]	; 0x24
 8002c00:	4603      	mov	r3, r0
 8002c02:	4619      	mov	r1, r3
 8002c04:	f04f 0200 	mov.w	r2, #0
 8002c08:	f04f 0300 	mov.w	r3, #0
 8002c0c:	f04f 0400 	mov.w	r4, #0
 8002c10:	0154      	lsls	r4, r2, #5
 8002c12:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002c16:	014b      	lsls	r3, r1, #5
 8002c18:	68bd      	ldr	r5, [r7, #8]
 8002c1a:	1e6b      	subs	r3, r5, #1
 8002c1c:	61bb      	str	r3, [r7, #24]
 8002c1e:	462b      	mov	r3, r5
 8002c20:	4619      	mov	r1, r3
 8002c22:	f04f 0200 	mov.w	r2, #0
 8002c26:	f04f 0300 	mov.w	r3, #0
 8002c2a:	f04f 0400 	mov.w	r4, #0
 8002c2e:	0154      	lsls	r4, r2, #5
 8002c30:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002c34:	014b      	lsls	r3, r1, #5
 8002c36:	68be      	ldr	r6, [r7, #8]
 8002c38:	1e73      	subs	r3, r6, #1
 8002c3a:	617b      	str	r3, [r7, #20]
 8002c3c:	4633      	mov	r3, r6
 8002c3e:	4619      	mov	r1, r3
 8002c40:	f04f 0200 	mov.w	r2, #0
 8002c44:	f04f 0300 	mov.w	r3, #0
 8002c48:	f04f 0400 	mov.w	r4, #0
 8002c4c:	0154      	lsls	r4, r2, #5
 8002c4e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002c52:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < m; i++){
 8002c54:	2300      	movs	r3, #0
 8002c56:	61fb      	str	r3, [r7, #28]
 8002c58:	e032      	b.n	8002cc0 <matadd+0xd4>
        for(int j = 0; j < n; j++){
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	623b      	str	r3, [r7, #32]
 8002c5e:	e028      	b.n	8002cb2 <matadd+0xc6>
            C[i][j] =  A[i][j] + B[i][j];
 8002c60:	4602      	mov	r2, r0
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	fb03 f302 	mul.w	r3, r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	441a      	add	r2, r3
 8002c6e:	6a3b      	ldr	r3, [r7, #32]
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	4413      	add	r3, r2
 8002c74:	ed93 7a00 	vldr	s14, [r3]
 8002c78:	462a      	mov	r2, r5
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	fb03 f302 	mul.w	r3, r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	683a      	ldr	r2, [r7, #0]
 8002c84:	441a      	add	r2, r3
 8002c86:	6a3b      	ldr	r3, [r7, #32]
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	4413      	add	r3, r2
 8002c8c:	edd3 7a00 	vldr	s15, [r3]
 8002c90:	4632      	mov	r2, r6
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	fb03 f302 	mul.w	r3, r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c9c:	441a      	add	r2, r3
 8002c9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ca2:	6a3b      	ldr	r3, [r7, #32]
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	4413      	add	r3, r2
 8002ca8:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 8002cac:	6a3b      	ldr	r3, [r7, #32]
 8002cae:	3301      	adds	r3, #1
 8002cb0:	623b      	str	r3, [r7, #32]
 8002cb2:	6a3a      	ldr	r2, [r7, #32]
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	dbd2      	blt.n	8002c60 <matadd+0x74>
	for(int i = 0; i < m; i++){
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	61fb      	str	r3, [r7, #28]
 8002cc0:	69fa      	ldr	r2, [r7, #28]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	dbc8      	blt.n	8002c5a <matadd+0x6e>
        }
    }
}
 8002cc8:	bf00      	nop
 8002cca:	3728      	adds	r7, #40	; 0x28
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bcf0      	pop	{r4, r5, r6, r7}
 8002cd0:	4770      	bx	lr

08002cd2 <matsub>:

void matsub(int32_t m, int32_t n, float A[m][n], float B[m][n], float C[m][n]) {
 8002cd2:	b4f0      	push	{r4, r5, r6, r7}
 8002cd4:	b08a      	sub	sp, #40	; 0x28
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	60f8      	str	r0, [r7, #12]
 8002cda:	60b9      	str	r1, [r7, #8]
 8002cdc:	607a      	str	r2, [r7, #4]
 8002cde:	603b      	str	r3, [r7, #0]
 8002ce0:	68b8      	ldr	r0, [r7, #8]
 8002ce2:	1e43      	subs	r3, r0, #1
 8002ce4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	4619      	mov	r1, r3
 8002cea:	f04f 0200 	mov.w	r2, #0
 8002cee:	f04f 0300 	mov.w	r3, #0
 8002cf2:	f04f 0400 	mov.w	r4, #0
 8002cf6:	0154      	lsls	r4, r2, #5
 8002cf8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002cfc:	014b      	lsls	r3, r1, #5
 8002cfe:	68bd      	ldr	r5, [r7, #8]
 8002d00:	1e6b      	subs	r3, r5, #1
 8002d02:	61bb      	str	r3, [r7, #24]
 8002d04:	462b      	mov	r3, r5
 8002d06:	4619      	mov	r1, r3
 8002d08:	f04f 0200 	mov.w	r2, #0
 8002d0c:	f04f 0300 	mov.w	r3, #0
 8002d10:	f04f 0400 	mov.w	r4, #0
 8002d14:	0154      	lsls	r4, r2, #5
 8002d16:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d1a:	014b      	lsls	r3, r1, #5
 8002d1c:	68be      	ldr	r6, [r7, #8]
 8002d1e:	1e73      	subs	r3, r6, #1
 8002d20:	617b      	str	r3, [r7, #20]
 8002d22:	4633      	mov	r3, r6
 8002d24:	4619      	mov	r1, r3
 8002d26:	f04f 0200 	mov.w	r2, #0
 8002d2a:	f04f 0300 	mov.w	r3, #0
 8002d2e:	f04f 0400 	mov.w	r4, #0
 8002d32:	0154      	lsls	r4, r2, #5
 8002d34:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d38:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < m; i++){
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	61fb      	str	r3, [r7, #28]
 8002d3e:	e032      	b.n	8002da6 <matsub+0xd4>
        for(int j = 0; j < n; j++){
 8002d40:	2300      	movs	r3, #0
 8002d42:	623b      	str	r3, [r7, #32]
 8002d44:	e028      	b.n	8002d98 <matsub+0xc6>
            C[i][j] =  A[i][j] - B[i][j];
 8002d46:	4602      	mov	r2, r0
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	fb03 f302 	mul.w	r3, r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	441a      	add	r2, r3
 8002d54:	6a3b      	ldr	r3, [r7, #32]
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	4413      	add	r3, r2
 8002d5a:	ed93 7a00 	vldr	s14, [r3]
 8002d5e:	462a      	mov	r2, r5
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	fb03 f302 	mul.w	r3, r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	441a      	add	r2, r3
 8002d6c:	6a3b      	ldr	r3, [r7, #32]
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	4413      	add	r3, r2
 8002d72:	edd3 7a00 	vldr	s15, [r3]
 8002d76:	4632      	mov	r2, r6
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	fb03 f302 	mul.w	r3, r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d82:	441a      	add	r2, r3
 8002d84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d88:	6a3b      	ldr	r3, [r7, #32]
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	4413      	add	r3, r2
 8002d8e:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 8002d92:	6a3b      	ldr	r3, [r7, #32]
 8002d94:	3301      	adds	r3, #1
 8002d96:	623b      	str	r3, [r7, #32]
 8002d98:	6a3a      	ldr	r2, [r7, #32]
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	dbd2      	blt.n	8002d46 <matsub+0x74>
	for(int i = 0; i < m; i++){
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	3301      	adds	r3, #1
 8002da4:	61fb      	str	r3, [r7, #28]
 8002da6:	69fa      	ldr	r2, [r7, #28]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	dbc8      	blt.n	8002d40 <matsub+0x6e>
        }
    }
}
 8002dae:	bf00      	nop
 8002db0:	3728      	adds	r7, #40	; 0x28
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bcf0      	pop	{r4, r5, r6, r7}
 8002db6:	4770      	bx	lr

08002db8 <matmul>:

void matmul(int32_t m, int32_t n, int32_t o, float A[m][n], float B[n][o], float C[m][o], bool reset) {
 8002db8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dba:	b08d      	sub	sp, #52	; 0x34
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6178      	str	r0, [r7, #20]
 8002dc0:	6139      	str	r1, [r7, #16]
 8002dc2:	60fa      	str	r2, [r7, #12]
 8002dc4:	60bb      	str	r3, [r7, #8]
 8002dc6:	693e      	ldr	r6, [r7, #16]
 8002dc8:	1e73      	subs	r3, r6, #1
 8002dca:	623b      	str	r3, [r7, #32]
 8002dcc:	4633      	mov	r3, r6
 8002dce:	4619      	mov	r1, r3
 8002dd0:	f04f 0200 	mov.w	r2, #0
 8002dd4:	f04f 0300 	mov.w	r3, #0
 8002dd8:	f04f 0400 	mov.w	r4, #0
 8002ddc:	0154      	lsls	r4, r2, #5
 8002dde:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002de2:	014b      	lsls	r3, r1, #5
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	607a      	str	r2, [r7, #4]
 8002de8:	4613      	mov	r3, r2
 8002dea:	3b01      	subs	r3, #1
 8002dec:	61fb      	str	r3, [r7, #28]
 8002dee:	4613      	mov	r3, r2
 8002df0:	4619      	mov	r1, r3
 8002df2:	f04f 0200 	mov.w	r2, #0
 8002df6:	f04f 0300 	mov.w	r3, #0
 8002dfa:	f04f 0400 	mov.w	r4, #0
 8002dfe:	0154      	lsls	r4, r2, #5
 8002e00:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002e04:	014b      	lsls	r3, r1, #5
 8002e06:	68fd      	ldr	r5, [r7, #12]
 8002e08:	1e6b      	subs	r3, r5, #1
 8002e0a:	61bb      	str	r3, [r7, #24]
 8002e0c:	462b      	mov	r3, r5
 8002e0e:	4619      	mov	r1, r3
 8002e10:	f04f 0200 	mov.w	r2, #0
 8002e14:	f04f 0300 	mov.w	r3, #0
 8002e18:	f04f 0400 	mov.w	r4, #0
 8002e1c:	0154      	lsls	r4, r2, #5
 8002e1e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002e22:	014b      	lsls	r3, r1, #5
	if (reset) {
 8002e24:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d009      	beq.n	8002e40 <matmul+0x88>
		memset(C, 0, m * o * sizeof(C[0][0]));
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	fb02 f303 	mul.w	r3, r2, r3
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	461a      	mov	r2, r3
 8002e38:	2100      	movs	r1, #0
 8002e3a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002e3c:	f014 faa5 	bl	801738a <memset>
	}
	for(int i = 0; i < m; i++){
 8002e40:	2300      	movs	r3, #0
 8002e42:	627b      	str	r3, [r7, #36]	; 0x24
 8002e44:	e04a      	b.n	8002edc <matmul+0x124>
        for(int j = 0; j < o; j++){
 8002e46:	2300      	movs	r3, #0
 8002e48:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e4a:	e040      	b.n	8002ece <matmul+0x116>
            for(int k = 0; k < n; k++){
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e50:	e036      	b.n	8002ec0 <matmul+0x108>
                C[i][j] +=  A[i][k] * B[k][j];
 8002e52:	4632      	mov	r2, r6
 8002e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e56:	fb03 f302 	mul.w	r3, r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	68ba      	ldr	r2, [r7, #8]
 8002e5e:	441a      	add	r2, r3
 8002e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	4413      	add	r3, r2
 8002e66:	ed93 7a00 	vldr	s14, [r3]
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e6e:	fb03 f302 	mul.w	r3, r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e76:	441a      	add	r2, r3
 8002e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4413      	add	r3, r2
 8002e7e:	edd3 7a00 	vldr	s15, [r3]
 8002e82:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e86:	462a      	mov	r2, r5
 8002e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8a:	fb03 f302 	mul.w	r3, r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e92:	441a      	add	r2, r3
 8002e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	4413      	add	r3, r2
 8002e9a:	edd3 7a00 	vldr	s15, [r3]
 8002e9e:	462a      	mov	r2, r5
 8002ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea2:	fb03 f302 	mul.w	r3, r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002eaa:	441a      	add	r2, r3
 8002eac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	4413      	add	r3, r2
 8002eb6:	edc3 7a00 	vstr	s15, [r3]
            for(int k = 0; k < n; k++){
 8002eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ec0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	dbc4      	blt.n	8002e52 <matmul+0x9a>
        for(int j = 0; j < o; j++){
 8002ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eca:	3301      	adds	r3, #1
 8002ecc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ece:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	dbba      	blt.n	8002e4c <matmul+0x94>
	for(int i = 0; i < m; i++){
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed8:	3301      	adds	r3, #1
 8002eda:	627b      	str	r3, [r7, #36]	; 0x24
 8002edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	dbb0      	blt.n	8002e46 <matmul+0x8e>
            }
        }
    }
}
 8002ee4:	bf00      	nop
 8002ee6:	3734      	adds	r7, #52	; 0x34
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002eec <matvecprod>:

void matvecprod(int32_t m, int32_t n, float A[m][n], float b[n], float c[m], bool reset) {
 8002eec:	b5b0      	push	{r4, r5, r7, lr}
 8002eee:	b088      	sub	sp, #32
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	607a      	str	r2, [r7, #4]
 8002ef8:	603b      	str	r3, [r7, #0]
 8002efa:	68bd      	ldr	r5, [r7, #8]
 8002efc:	1e6b      	subs	r3, r5, #1
 8002efe:	617b      	str	r3, [r7, #20]
 8002f00:	462b      	mov	r3, r5
 8002f02:	4619      	mov	r1, r3
 8002f04:	f04f 0200 	mov.w	r2, #0
 8002f08:	f04f 0300 	mov.w	r3, #0
 8002f0c:	f04f 0400 	mov.w	r4, #0
 8002f10:	0154      	lsls	r4, r2, #5
 8002f12:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002f16:	014b      	lsls	r3, r1, #5
	if (reset) {
 8002f18:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d006      	beq.n	8002f2e <matvecprod+0x42>
		memset(c, 0, m * sizeof(c[0]));
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	461a      	mov	r2, r3
 8002f26:	2100      	movs	r1, #0
 8002f28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f2a:	f014 fa2e 	bl	801738a <memset>
	}
	for(int i = 0; i < m; i++){
 8002f2e:	2300      	movs	r3, #0
 8002f30:	61bb      	str	r3, [r7, #24]
 8002f32:	e02e      	b.n	8002f92 <matvecprod+0xa6>
        for(int j = 0; j < n; j++){
 8002f34:	2300      	movs	r3, #0
 8002f36:	61fb      	str	r3, [r7, #28]
 8002f38:	e024      	b.n	8002f84 <matvecprod+0x98>
            c[i] += A[i][j] * b[j];
 8002f3a:	462a      	mov	r2, r5
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	fb03 f302 	mul.w	r3, r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	441a      	add	r2, r3
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	4413      	add	r3, r2
 8002f4e:	ed93 7a00 	vldr	s14, [r3]
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	683a      	ldr	r2, [r7, #0]
 8002f58:	4413      	add	r3, r2
 8002f5a:	edd3 7a00 	vldr	s15, [r3]
 8002f5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f68:	4413      	add	r3, r2
 8002f6a:	edd3 7a00 	vldr	s15, [r3]
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f74:	4413      	add	r3, r2
 8002f76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f7a:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	3301      	adds	r3, #1
 8002f82:	61fb      	str	r3, [r7, #28]
 8002f84:	69fa      	ldr	r2, [r7, #28]
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	dbd6      	blt.n	8002f3a <matvecprod+0x4e>
	for(int i = 0; i < m; i++){
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	3301      	adds	r3, #1
 8002f90:	61bb      	str	r3, [r7, #24]
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	dbcc      	blt.n	8002f34 <matvecprod+0x48>
        }
    }
}
 8002f9a:	bf00      	nop
 8002f9c:	3720      	adds	r7, #32
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bdb0      	pop	{r4, r5, r7, pc}

08002fa2 <lower_triangular_inverse>:
	}
}

/* computes in-place the inverse of the lower triangular matrix L */
/* http://www.mymathlib.com/matrices/linearsystems/triangular.html */
int32_t lower_triangular_inverse(int32_t n, float *L) {
 8002fa2:	b480      	push	{r7}
 8002fa4:	b08b      	sub	sp, #44	; 0x2c
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
 8002faa:	6039      	str	r1, [r7, #0]
   int32_t i, j, k;
   float *p_i, *p_j, *p_k;
   float sum;

    /* Invert the diagonal elements of the lower triangular matrix L. */
    for (k = 0, p_k = L; k < n; p_k += (n + 1), k++) {
 8002fac:	2300      	movs	r3, #0
 8002fae:	61fb      	str	r3, [r7, #28]
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	613b      	str	r3, [r7, #16]
 8002fb4:	e01d      	b.n	8002ff2 <lower_triangular_inverse+0x50>
        if (*p_k == 0.0) return -1;
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	edd3 7a00 	vldr	s15, [r3]
 8002fbc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fc4:	d102      	bne.n	8002fcc <lower_triangular_inverse+0x2a>
 8002fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8002fca:	e076      	b.n	80030ba <lower_triangular_inverse+0x118>
        else *p_k = 1.0 / *p_k;
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	ed93 7a00 	vldr	s14, [r3]
 8002fd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002fd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	edc3 7a00 	vstr	s15, [r3]
    for (k = 0, p_k = L; k < n; p_k += (n + 1), k++) {
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	693a      	ldr	r2, [r7, #16]
 8002fe8:	4413      	add	r3, r2
 8002fea:	613b      	str	r3, [r7, #16]
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	3301      	adds	r3, #1
 8002ff0:	61fb      	str	r3, [r7, #28]
 8002ff2:	69fa      	ldr	r2, [r7, #28]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	dbdd      	blt.n	8002fb6 <lower_triangular_inverse+0x14>
    }

    /* Invert the remaining lower triangular matrix L row by row. */
    for (i = 1, p_i = L + n; i < n; i++, p_i += n) {
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	627b      	str	r3, [r7, #36]	; 0x24
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	683a      	ldr	r2, [r7, #0]
 8003004:	4413      	add	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
 8003008:	e052      	b.n	80030b0 <lower_triangular_inverse+0x10e>
        for (j = 0, p_j = L; j < i; p_j += n, j++) {
 800300a:	2300      	movs	r3, #0
 800300c:	623b      	str	r3, [r7, #32]
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	617b      	str	r3, [r7, #20]
 8003012:	e041      	b.n	8003098 <lower_triangular_inverse+0xf6>
            sum = 0.0;
 8003014:	f04f 0300 	mov.w	r3, #0
 8003018:	60fb      	str	r3, [r7, #12]
            for (k = j, p_k = p_j; k < i; k++, p_k += n)
 800301a:	6a3b      	ldr	r3, [r7, #32]
 800301c:	61fb      	str	r3, [r7, #28]
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	613b      	str	r3, [r7, #16]
 8003022:	e01b      	b.n	800305c <lower_triangular_inverse+0xba>
                sum += *(p_i + k) * *(p_k + j);
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	4413      	add	r3, r2
 800302c:	ed93 7a00 	vldr	s14, [r3]
 8003030:	6a3b      	ldr	r3, [r7, #32]
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	4413      	add	r3, r2
 8003038:	edd3 7a00 	vldr	s15, [r3]
 800303c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003040:	ed97 7a03 	vldr	s14, [r7, #12]
 8003044:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003048:	edc7 7a03 	vstr	s15, [r7, #12]
            for (k = j, p_k = p_j; k < i; k++, p_k += n)
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	3301      	adds	r3, #1
 8003050:	61fb      	str	r3, [r7, #28]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	4413      	add	r3, r2
 800305a:	613b      	str	r3, [r7, #16]
 800305c:	69fa      	ldr	r2, [r7, #28]
 800305e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003060:	429a      	cmp	r2, r3
 8003062:	dbdf      	blt.n	8003024 <lower_triangular_inverse+0x82>
            *(p_i + j) = - *(p_i + i) * sum;
 8003064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	4413      	add	r3, r2
 800306c:	edd3 7a00 	vldr	s15, [r3]
 8003070:	eeb1 7a67 	vneg.f32	s14, s15
 8003074:	6a3b      	ldr	r3, [r7, #32]
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	4413      	add	r3, r2
 800307c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003080:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003084:	edc3 7a00 	vstr	s15, [r3]
        for (j = 0, p_j = L; j < i; p_j += n, j++) {
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	697a      	ldr	r2, [r7, #20]
 800308e:	4413      	add	r3, r2
 8003090:	617b      	str	r3, [r7, #20]
 8003092:	6a3b      	ldr	r3, [r7, #32]
 8003094:	3301      	adds	r3, #1
 8003096:	623b      	str	r3, [r7, #32]
 8003098:	6a3a      	ldr	r2, [r7, #32]
 800309a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309c:	429a      	cmp	r2, r3
 800309e:	dbb9      	blt.n	8003014 <lower_triangular_inverse+0x72>
    for (i = 1, p_i = L + n; i < n; i++, p_i += n) {
 80030a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a2:	3301      	adds	r3, #1
 80030a4:	627b      	str	r3, [r7, #36]	; 0x24
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	69ba      	ldr	r2, [r7, #24]
 80030ac:	4413      	add	r3, r2
 80030ae:	61bb      	str	r3, [r7, #24]
 80030b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	dba8      	blt.n	800300a <lower_triangular_inverse+0x68>
        }
    }

    return 0;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	372c      	adds	r7, #44	; 0x2c
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
	...

080030c8 <cholesky>:

/* computes the cholesky decomposition */
/* https://rosettacode.org/wiki/Cholesky_decomposition#C */
void cholesky(int32_t n, float A[n][n], float L[n][n]) {
 80030c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80030cc:	b08b      	sub	sp, #44	; 0x2c
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	60f8      	str	r0, [r7, #12]
 80030d2:	60b9      	str	r1, [r7, #8]
 80030d4:	607a      	str	r2, [r7, #4]
 80030d6:	68fe      	ldr	r6, [r7, #12]
 80030d8:	1e73      	subs	r3, r6, #1
 80030da:	617b      	str	r3, [r7, #20]
 80030dc:	4633      	mov	r3, r6
 80030de:	4619      	mov	r1, r3
 80030e0:	f04f 0200 	mov.w	r2, #0
 80030e4:	f04f 0300 	mov.w	r3, #0
 80030e8:	f04f 0400 	mov.w	r4, #0
 80030ec:	0154      	lsls	r4, r2, #5
 80030ee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80030f2:	014b      	lsls	r3, r1, #5
 80030f4:	68fd      	ldr	r5, [r7, #12]
 80030f6:	1e6b      	subs	r3, r5, #1
 80030f8:	613b      	str	r3, [r7, #16]
 80030fa:	462b      	mov	r3, r5
 80030fc:	4619      	mov	r1, r3
 80030fe:	f04f 0200 	mov.w	r2, #0
 8003102:	f04f 0300 	mov.w	r3, #0
 8003106:	f04f 0400 	mov.w	r4, #0
 800310a:	0154      	lsls	r4, r2, #5
 800310c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003110:	014b      	lsls	r3, r1, #5
    memset(L, 0, n * n * sizeof(L[0][0]));
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	fb02 f303 	mul.w	r3, r2, r3
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	461a      	mov	r2, r3
 800311e:	2100      	movs	r1, #0
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f014 f932 	bl	801738a <memset>
    for (int i = 0; i < n; i++)
 8003126:	2300      	movs	r3, #0
 8003128:	61bb      	str	r3, [r7, #24]
 800312a:	e09f      	b.n	800326c <cholesky+0x1a4>
        for (int j = 0; j < (i+1); j++) {
 800312c:	2300      	movs	r3, #0
 800312e:	61fb      	str	r3, [r7, #28]
 8003130:	e093      	b.n	800325a <cholesky+0x192>
            float s = 0;
 8003132:	f04f 0300 	mov.w	r3, #0
 8003136:	623b      	str	r3, [r7, #32]
            for (int k = 0; k < j; k++)
 8003138:	2300      	movs	r3, #0
 800313a:	627b      	str	r3, [r7, #36]	; 0x24
 800313c:	e022      	b.n	8003184 <cholesky+0xbc>
                s += L[i][k] * L[j][k];
 800313e:	462a      	mov	r2, r5
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	fb03 f302 	mul.w	r3, r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	441a      	add	r2, r3
 800314c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	4413      	add	r3, r2
 8003152:	ed93 7a00 	vldr	s14, [r3]
 8003156:	462a      	mov	r2, r5
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	fb03 f302 	mul.w	r3, r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	441a      	add	r2, r3
 8003164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	4413      	add	r3, r2
 800316a:	edd3 7a00 	vldr	s15, [r3]
 800316e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003172:	ed97 7a08 	vldr	s14, [r7, #32]
 8003176:	ee77 7a27 	vadd.f32	s15, s14, s15
 800317a:	edc7 7a08 	vstr	s15, [r7, #32]
            for (int k = 0; k < j; k++)
 800317e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003180:	3301      	adds	r3, #1
 8003182:	627b      	str	r3, [r7, #36]	; 0x24
 8003184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	429a      	cmp	r2, r3
 800318a:	dbd8      	blt.n	800313e <cholesky+0x76>
            L[i][j] = (i == j) ? sqrtf(A[i][i] - s) : (1.0 / L[j][j] * (A[i][j] - s));
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	429a      	cmp	r2, r3
 8003192:	d116      	bne.n	80031c2 <cholesky+0xfa>
 8003194:	4632      	mov	r2, r6
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	fb03 f302 	mul.w	r3, r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	68ba      	ldr	r2, [r7, #8]
 80031a0:	441a      	add	r2, r3
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	4413      	add	r3, r2
 80031a8:	ed93 7a00 	vldr	s14, [r3]
 80031ac:	edd7 7a08 	vldr	s15, [r7, #32]
 80031b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031b4:	eeb0 0a67 	vmov.f32	s0, s15
 80031b8:	f015 f880 	bl	80182bc <sqrtf>
 80031bc:	ee10 1a10 	vmov	r1, s0
 80031c0:	e03d      	b.n	800323e <cholesky+0x176>
 80031c2:	462a      	mov	r2, r5
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	fb03 f302 	mul.w	r3, r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	441a      	add	r2, r3
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	4413      	add	r3, r2
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4618      	mov	r0, r3
 80031da:	f7fd f9d5 	bl	8000588 <__aeabi_f2d>
 80031de:	4603      	mov	r3, r0
 80031e0:	460c      	mov	r4, r1
 80031e2:	461a      	mov	r2, r3
 80031e4:	4623      	mov	r3, r4
 80031e6:	f04f 0000 	mov.w	r0, #0
 80031ea:	4925      	ldr	r1, [pc, #148]	; (8003280 <cholesky+0x1b8>)
 80031ec:	f7fd fb4e 	bl	800088c <__aeabi_ddiv>
 80031f0:	4603      	mov	r3, r0
 80031f2:	460c      	mov	r4, r1
 80031f4:	4698      	mov	r8, r3
 80031f6:	46a1      	mov	r9, r4
 80031f8:	4632      	mov	r2, r6
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	fb03 f302 	mul.w	r3, r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	68ba      	ldr	r2, [r7, #8]
 8003204:	441a      	add	r2, r3
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	4413      	add	r3, r2
 800320c:	ed93 7a00 	vldr	s14, [r3]
 8003210:	edd7 7a08 	vldr	s15, [r7, #32]
 8003214:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003218:	ee17 0a90 	vmov	r0, s15
 800321c:	f7fd f9b4 	bl	8000588 <__aeabi_f2d>
 8003220:	4603      	mov	r3, r0
 8003222:	460c      	mov	r4, r1
 8003224:	461a      	mov	r2, r3
 8003226:	4623      	mov	r3, r4
 8003228:	4640      	mov	r0, r8
 800322a:	4649      	mov	r1, r9
 800322c:	f7fd fa04 	bl	8000638 <__aeabi_dmul>
 8003230:	4603      	mov	r3, r0
 8003232:	460c      	mov	r4, r1
 8003234:	4618      	mov	r0, r3
 8003236:	4621      	mov	r1, r4
 8003238:	f7fd fcce 	bl	8000bd8 <__aeabi_d2f>
 800323c:	4601      	mov	r1, r0
 800323e:	462a      	mov	r2, r5
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	fb03 f302 	mul.w	r3, r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	441a      	add	r2, r3
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4413      	add	r3, r2
 8003252:	6019      	str	r1, [r3, #0]
        for (int j = 0; j < (i+1); j++) {
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	3301      	adds	r3, #1
 8003258:	61fb      	str	r3, [r7, #28]
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	3301      	adds	r3, #1
 800325e:	69fa      	ldr	r2, [r7, #28]
 8003260:	429a      	cmp	r2, r3
 8003262:	f6ff af66 	blt.w	8003132 <cholesky+0x6a>
    for (int i = 0; i < n; i++)
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	3301      	adds	r3, #1
 800326a:	61bb      	str	r3, [r7, #24]
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	429a      	cmp	r2, r3
 8003272:	f6ff af5b 	blt.w	800312c <cholesky+0x64>
        }
}
 8003276:	bf00      	nop
 8003278:	372c      	adds	r7, #44	; 0x2c
 800327a:	46bd      	mov	sp, r7
 800327c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003280:	3ff00000 	.word	0x3ff00000

08003284 <cholesky_inverse>:

/* computes the inverse of a Hermitian, positive-definite matrix of dimension n x n using cholesky decomposition*/
/* Krishnamoorthy, Aravindh, and Deepak Menon. "Matrix inversion using Cholesky decomposition." */
/* 2013 signal processing: Algorithms, architectures, arrangements, and applications (SPA). IEEE, 2013. */
/* the inverse has a big O complexity of n^3 */
void cholesky_inverse(int32_t n, float A[n][n], float inverse[n][n], float lambda) {
 8003284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003288:	b090      	sub	sp, #64	; 0x40
 800328a:	af00      	add	r7, sp, #0
 800328c:	60f8      	str	r0, [r7, #12]
 800328e:	60b9      	str	r1, [r7, #8]
 8003290:	607a      	str	r2, [r7, #4]
 8003292:	ed87 0a00 	vstr	s0, [r7]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	1e5a      	subs	r2, r3, #1
 800329a:	63ba      	str	r2, [r7, #56]	; 0x38
 800329c:	4619      	mov	r1, r3
 800329e:	f04f 0200 	mov.w	r2, #0
 80032a2:	f04f 0300 	mov.w	r3, #0
 80032a6:	f04f 0400 	mov.w	r4, #0
 80032aa:	0154      	lsls	r4, r2, #5
 80032ac:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80032b0:	014b      	lsls	r3, r1, #5
 80032b2:	68fd      	ldr	r5, [r7, #12]
 80032b4:	1e6b      	subs	r3, r5, #1
 80032b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032b8:	462b      	mov	r3, r5
 80032ba:	4619      	mov	r1, r3
 80032bc:	f04f 0200 	mov.w	r2, #0
 80032c0:	f04f 0300 	mov.w	r3, #0
 80032c4:	f04f 0400 	mov.w	r4, #0
 80032c8:	0154      	lsls	r4, r2, #5
 80032ca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80032ce:	014b      	lsls	r3, r1, #5
 80032d0:	466b      	mov	r3, sp
 80032d2:	4699      	mov	r9, r3
    /* add damping factor to avoid singularities. */
	/* if no damping is required set lambda to 0.0 */
	float A_dash[n][n];
 80032d4:	68f8      	ldr	r0, [r7, #12]
 80032d6:	68fe      	ldr	r6, [r7, #12]
 80032d8:	1e43      	subs	r3, r0, #1
 80032da:	627b      	str	r3, [r7, #36]	; 0x24
 80032dc:	4603      	mov	r3, r0
 80032de:	4619      	mov	r1, r3
 80032e0:	f04f 0200 	mov.w	r2, #0
 80032e4:	f04f 0300 	mov.w	r3, #0
 80032e8:	f04f 0400 	mov.w	r4, #0
 80032ec:	0154      	lsls	r4, r2, #5
 80032ee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80032f2:	014b      	lsls	r3, r1, #5
 80032f4:	4603      	mov	r3, r0
 80032f6:	ea4f 0883 	mov.w	r8, r3, lsl #2
 80032fa:	1e73      	subs	r3, r6, #1
 80032fc:	623b      	str	r3, [r7, #32]
 80032fe:	4603      	mov	r3, r0
 8003300:	4619      	mov	r1, r3
 8003302:	f04f 0200 	mov.w	r2, #0
 8003306:	4633      	mov	r3, r6
 8003308:	f04f 0400 	mov.w	r4, #0
 800330c:	fb03 fe02 	mul.w	lr, r3, r2
 8003310:	fb01 fc04 	mul.w	ip, r1, r4
 8003314:	44f4      	add	ip, lr
 8003316:	fba1 3403 	umull	r3, r4, r1, r3
 800331a:	eb0c 0204 	add.w	r2, ip, r4
 800331e:	4614      	mov	r4, r2
 8003320:	f04f 0100 	mov.w	r1, #0
 8003324:	f04f 0200 	mov.w	r2, #0
 8003328:	0162      	lsls	r2, r4, #5
 800332a:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 800332e:	0159      	lsls	r1, r3, #5
 8003330:	4603      	mov	r3, r0
 8003332:	4619      	mov	r1, r3
 8003334:	f04f 0200 	mov.w	r2, #0
 8003338:	4633      	mov	r3, r6
 800333a:	f04f 0400 	mov.w	r4, #0
 800333e:	fb03 fe02 	mul.w	lr, r3, r2
 8003342:	fb01 fc04 	mul.w	ip, r1, r4
 8003346:	44f4      	add	ip, lr
 8003348:	fba1 3403 	umull	r3, r4, r1, r3
 800334c:	eb0c 0204 	add.w	r2, ip, r4
 8003350:	4614      	mov	r4, r2
 8003352:	f04f 0100 	mov.w	r1, #0
 8003356:	f04f 0200 	mov.w	r2, #0
 800335a:	0162      	lsls	r2, r4, #5
 800335c:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8003360:	0159      	lsls	r1, r3, #5
 8003362:	4603      	mov	r3, r0
 8003364:	4632      	mov	r2, r6
 8003366:	fb02 f303 	mul.w	r3, r2, r3
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	3303      	adds	r3, #3
 800336e:	3307      	adds	r3, #7
 8003370:	08db      	lsrs	r3, r3, #3
 8003372:	00db      	lsls	r3, r3, #3
 8003374:	ebad 0d03 	sub.w	sp, sp, r3
 8003378:	466b      	mov	r3, sp
 800337a:	3303      	adds	r3, #3
 800337c:	089b      	lsrs	r3, r3, #2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	61fb      	str	r3, [r7, #28]
    memcpy(A_dash, A, n * n * sizeof(A[0][0]));
 8003382:	69f8      	ldr	r0, [r7, #28]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	fb02 f303 	mul.w	r3, r2, r3
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	461a      	mov	r2, r3
 8003390:	68b9      	ldr	r1, [r7, #8]
 8003392:	f013 ffef 	bl	8017374 <memcpy>
    for (int i = 0; i < n; i++) {
 8003396:	2300      	movs	r3, #0
 8003398:	62bb      	str	r3, [r7, #40]	; 0x28
 800339a:	e022      	b.n	80033e2 <cholesky_inverse+0x15e>
        A_dash[i][i] = A_dash[i][i] + lambda * lambda;
 800339c:	ea4f 0398 	mov.w	r3, r8, lsr #2
 80033a0:	69fa      	ldr	r2, [r7, #28]
 80033a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033a4:	fb01 f103 	mul.w	r1, r1, r3
 80033a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033aa:	440b      	add	r3, r1
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	4413      	add	r3, r2
 80033b0:	ed93 7a00 	vldr	s14, [r3]
 80033b4:	edd7 6a00 	vldr	s13, [r7]
 80033b8:	edd7 7a00 	vldr	s15, [r7]
 80033bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033c0:	ea4f 0398 	mov.w	r3, r8, lsr #2
 80033c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033c8:	69fa      	ldr	r2, [r7, #28]
 80033ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033cc:	fb01 f103 	mul.w	r1, r1, r3
 80033d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d2:	440b      	add	r3, r1
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	4413      	add	r3, r2
 80033d8:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < n; i++) {
 80033dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033de:	3301      	adds	r3, #1
 80033e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80033e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	dbd8      	blt.n	800339c <cholesky_inverse+0x118>
	}

    /* call cholesky decomposition to get lower triangular matrix L */
    float L[n][n];
 80033ea:	68f8      	ldr	r0, [r7, #12]
 80033ec:	68fe      	ldr	r6, [r7, #12]
 80033ee:	466b      	mov	r3, sp
 80033f0:	469a      	mov	sl, r3
 80033f2:	1e43      	subs	r3, r0, #1
 80033f4:	61bb      	str	r3, [r7, #24]
 80033f6:	4603      	mov	r3, r0
 80033f8:	4619      	mov	r1, r3
 80033fa:	f04f 0200 	mov.w	r2, #0
 80033fe:	f04f 0300 	mov.w	r3, #0
 8003402:	f04f 0400 	mov.w	r4, #0
 8003406:	0154      	lsls	r4, r2, #5
 8003408:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800340c:	014b      	lsls	r3, r1, #5
 800340e:	4603      	mov	r3, r0
 8003410:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8003414:	1e73      	subs	r3, r6, #1
 8003416:	617b      	str	r3, [r7, #20]
 8003418:	4603      	mov	r3, r0
 800341a:	4619      	mov	r1, r3
 800341c:	f04f 0200 	mov.w	r2, #0
 8003420:	4633      	mov	r3, r6
 8003422:	f04f 0400 	mov.w	r4, #0
 8003426:	fb03 fe02 	mul.w	lr, r3, r2
 800342a:	fb01 fc04 	mul.w	ip, r1, r4
 800342e:	44f4      	add	ip, lr
 8003430:	fba1 3403 	umull	r3, r4, r1, r3
 8003434:	eb0c 0204 	add.w	r2, ip, r4
 8003438:	4614      	mov	r4, r2
 800343a:	f04f 0100 	mov.w	r1, #0
 800343e:	f04f 0200 	mov.w	r2, #0
 8003442:	0162      	lsls	r2, r4, #5
 8003444:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8003448:	0159      	lsls	r1, r3, #5
 800344a:	4603      	mov	r3, r0
 800344c:	4619      	mov	r1, r3
 800344e:	f04f 0200 	mov.w	r2, #0
 8003452:	4633      	mov	r3, r6
 8003454:	f04f 0400 	mov.w	r4, #0
 8003458:	fb03 fe02 	mul.w	lr, r3, r2
 800345c:	fb01 fc04 	mul.w	ip, r1, r4
 8003460:	44f4      	add	ip, lr
 8003462:	fba1 3403 	umull	r3, r4, r1, r3
 8003466:	eb0c 0204 	add.w	r2, ip, r4
 800346a:	4614      	mov	r4, r2
 800346c:	f04f 0100 	mov.w	r1, #0
 8003470:	f04f 0200 	mov.w	r2, #0
 8003474:	0162      	lsls	r2, r4, #5
 8003476:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 800347a:	0159      	lsls	r1, r3, #5
 800347c:	4603      	mov	r3, r0
 800347e:	4632      	mov	r2, r6
 8003480:	fb02 f303 	mul.w	r3, r2, r3
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	3303      	adds	r3, #3
 8003488:	3307      	adds	r3, #7
 800348a:	08db      	lsrs	r3, r3, #3
 800348c:	00db      	lsls	r3, r3, #3
 800348e:	ebad 0d03 	sub.w	sp, sp, r3
 8003492:	466b      	mov	r3, sp
 8003494:	3303      	adds	r3, #3
 8003496:	089b      	lsrs	r3, r3, #2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	613b      	str	r3, [r7, #16]
    cholesky(n, A_dash, L);
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	4619      	mov	r1, r3
 80034a2:	68f8      	ldr	r0, [r7, #12]
 80034a4:	f7ff fe10 	bl	80030c8 <cholesky>

    /* compute lower triangular inverse in-place */
    lower_triangular_inverse(n, &L[0][0]);
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	4619      	mov	r1, r3
 80034ac:	68f8      	ldr	r0, [r7, #12]
 80034ae:	f7ff fd78 	bl	8002fa2 <lower_triangular_inverse>

    /* compute matrix inverse A_inv = L_T^(-1) * L^(-1) */
    memset(inverse, 0, n * n * sizeof(inverse[0][0]));
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	fb02 f303 	mul.w	r3, r2, r3
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	461a      	mov	r2, r3
 80034be:	2100      	movs	r1, #0
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f013 ff62 	bl	801738a <memset>
    for(int i = 0; i < n; i++){
 80034c6:	2300      	movs	r3, #0
 80034c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034ca:	e04e      	b.n	800356a <cholesky_inverse+0x2e6>
        for(int j = 0; j < n; j++){
 80034cc:	2300      	movs	r3, #0
 80034ce:	633b      	str	r3, [r7, #48]	; 0x30
 80034d0:	e044      	b.n	800355c <cholesky_inverse+0x2d8>
            for(int k = max(i, j); k < n; k++){
 80034d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d6:	4293      	cmp	r3, r2
 80034d8:	bfb8      	it	lt
 80034da:	4613      	movlt	r3, r2
 80034dc:	637b      	str	r3, [r7, #52]	; 0x34
 80034de:	e036      	b.n	800354e <cholesky_inverse+0x2ca>
                inverse[i][j] +=  L[k][i] * L[k][j];
 80034e0:	462a      	mov	r2, r5
 80034e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034e4:	fb03 f302 	mul.w	r3, r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	441a      	add	r2, r3
 80034ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	4413      	add	r3, r2
 80034f4:	ed93 7a00 	vldr	s14, [r3]
 80034f8:	ea4f 0398 	mov.w	r3, r8, lsr #2
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003500:	fb01 f103 	mul.w	r1, r1, r3
 8003504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003506:	440b      	add	r3, r1
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	4413      	add	r3, r2
 800350c:	edd3 6a00 	vldr	s13, [r3]
 8003510:	ea4f 0398 	mov.w	r3, r8, lsr #2
 8003514:	693a      	ldr	r2, [r7, #16]
 8003516:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003518:	fb01 f103 	mul.w	r1, r1, r3
 800351c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800351e:	440b      	add	r3, r1
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	4413      	add	r3, r2
 8003524:	edd3 7a00 	vldr	s15, [r3]
 8003528:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800352c:	462a      	mov	r2, r5
 800352e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003530:	fb03 f302 	mul.w	r3, r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	441a      	add	r2, r3
 800353a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800353e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	4413      	add	r3, r2
 8003544:	edc3 7a00 	vstr	s15, [r3]
            for(int k = max(i, j); k < n; k++){
 8003548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800354a:	3301      	adds	r3, #1
 800354c:	637b      	str	r3, [r7, #52]	; 0x34
 800354e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	429a      	cmp	r2, r3
 8003554:	dbc4      	blt.n	80034e0 <cholesky_inverse+0x25c>
        for(int j = 0; j < n; j++){
 8003556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003558:	3301      	adds	r3, #1
 800355a:	633b      	str	r3, [r7, #48]	; 0x30
 800355c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	429a      	cmp	r2, r3
 8003562:	dbb6      	blt.n	80034d2 <cholesky_inverse+0x24e>
    for(int i = 0; i < n; i++){
 8003564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003566:	3301      	adds	r3, #1
 8003568:	62fb      	str	r3, [r7, #44]	; 0x2c
 800356a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	429a      	cmp	r2, r3
 8003570:	dbac      	blt.n	80034cc <cholesky_inverse+0x248>
 8003572:	46d5      	mov	sp, sl
 8003574:	46cd      	mov	sp, r9
            }
        }
    }
}
 8003576:	bf00      	nop
 8003578:	3740      	adds	r7, #64	; 0x40
 800357a:	46bd      	mov	sp, r7
 800357c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003580 <logSensor>:
 %%	print a percent sign
 \%	print a percent sign
 */

osStatus_t logSensor(timestamp_t ts, board_id_t sensor_board_id,
		sensor_type_e sensor_type, void *sensor_data) {
 8003580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003582:	b0b3      	sub	sp, #204	; 0xcc
 8003584:	af06      	add	r7, sp, #24
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	607b      	str	r3, [r7, #4]
 800358a:	460b      	mov	r3, r1
 800358c:	72fb      	strb	r3, [r7, #11]
 800358e:	4613      	mov	r3, r2
 8003590:	72bb      	strb	r3, [r7, #10]
	log_entry_t log_entry = { 0 };
 8003592:	f107 0310 	add.w	r3, r7, #16
 8003596:	2296      	movs	r2, #150	; 0x96
 8003598:	2100      	movs	r1, #0
 800359a:	4618      	mov	r0, r3
 800359c:	f013 fef5 	bl	801738a <memset>

	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%hi,%d,", ts, SENSOR,
 80035a0:	7afb      	ldrb	r3, [r7, #11]
 80035a2:	7aba      	ldrb	r2, [r7, #10]
 80035a4:	f107 0010 	add.w	r0, r7, #16
 80035a8:	9202      	str	r2, [sp, #8]
 80035aa:	9301      	str	r3, [sp, #4]
 80035ac:	2301      	movs	r3, #1
 80035ae:	9300      	str	r3, [sp, #0]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	4a41      	ldr	r2, [pc, #260]	; (80036b8 <logSensor+0x138>)
 80035b4:	2196      	movs	r1, #150	; 0x96
 80035b6:	f013 ffa9 	bl	801750c <sniprintf>
			sensor_board_id, sensor_type);

	switch (sensor_type) {
 80035ba:	7abb      	ldrb	r3, [r7, #10]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d002      	beq.n	80035c6 <logSensor+0x46>
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d01d      	beq.n	8003600 <logSensor+0x80>
 80035c4:	e055      	b.n	8003672 <logSensor+0xf2>
	case BARO: {
		baro_data_t *baro_data_ptr = (baro_data_t*) sensor_data;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		snprintf(log_entry.str + strlen(log_entry.str),
 80035cc:	f107 0310 	add.w	r3, r7, #16
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7fc fe1d 	bl	8000210 <strlen>
 80035d6:	4602      	mov	r2, r0
 80035d8:	f107 0310 	add.w	r3, r7, #16
 80035dc:	1898      	adds	r0, r3, r2
 80035de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80035e2:	6819      	ldr	r1, [r3, #0]
 80035e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80035ee:	6892      	ldr	r2, [r2, #8]
 80035f0:	9201      	str	r2, [sp, #4]
 80035f2:	9300      	str	r3, [sp, #0]
 80035f4:	460b      	mov	r3, r1
 80035f6:	4a31      	ldr	r2, [pc, #196]	; (80036bc <logSensor+0x13c>)
 80035f8:	2196      	movs	r1, #150	; 0x96
 80035fa:	f013 ff87 	bl	801750c <sniprintf>
		LOG_BUFFER_LEN, "%ld,%ld,%lu\n", baro_data_ptr->pressure,
				baro_data_ptr->temperature, baro_data_ptr->ts);
	}
		break;
 80035fe:	e04e      	b.n	800369e <logSensor+0x11e>
	case IMU: {
		imu_data_t *imu_data_ptr = (imu_data_t*) sensor_data;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		snprintf(log_entry.str + strlen(log_entry.str),
 8003606:	f107 0310 	add.w	r3, r7, #16
 800360a:	4618      	mov	r0, r3
 800360c:	f7fc fe00 	bl	8000210 <strlen>
 8003610:	4602      	mov	r2, r0
 8003612:	f107 0310 	add.w	r3, r7, #16
 8003616:	1898      	adds	r0, r3, r2
		LOG_BUFFER_LEN, "%ld,%ld,%ld,%ld,%ld,%ld,%lu\n", imu_data_ptr->acc_x,
 8003618:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800361c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
		snprintf(log_entry.str + strlen(log_entry.str),
 8003620:	469c      	mov	ip, r3
				imu_data_ptr->acc_y, imu_data_ptr->acc_z, imu_data_ptr->gyro_x,
 8003622:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003626:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
		snprintf(log_entry.str + strlen(log_entry.str),
 800362a:	461a      	mov	r2, r3
				imu_data_ptr->acc_y, imu_data_ptr->acc_z, imu_data_ptr->gyro_x,
 800362c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003630:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
		snprintf(log_entry.str + strlen(log_entry.str),
 8003634:	4619      	mov	r1, r3
				imu_data_ptr->acc_y, imu_data_ptr->acc_z, imu_data_ptr->gyro_x,
 8003636:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800363a:	f9b3 3000 	ldrsh.w	r3, [r3]
		snprintf(log_entry.str + strlen(log_entry.str),
 800363e:	461c      	mov	r4, r3
				imu_data_ptr->gyro_y, imu_data_ptr->gyro_z, imu_data_ptr->ts);
 8003640:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003644:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
		snprintf(log_entry.str + strlen(log_entry.str),
 8003648:	461d      	mov	r5, r3
				imu_data_ptr->gyro_y, imu_data_ptr->gyro_z, imu_data_ptr->ts);
 800364a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800364e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
		snprintf(log_entry.str + strlen(log_entry.str),
 8003652:	461e      	mov	r6, r3
 8003654:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	9305      	str	r3, [sp, #20]
 800365c:	9604      	str	r6, [sp, #16]
 800365e:	9503      	str	r5, [sp, #12]
 8003660:	9402      	str	r4, [sp, #8]
 8003662:	9101      	str	r1, [sp, #4]
 8003664:	9200      	str	r2, [sp, #0]
 8003666:	4663      	mov	r3, ip
 8003668:	4a15      	ldr	r2, [pc, #84]	; (80036c0 <logSensor+0x140>)
 800366a:	2196      	movs	r1, #150	; 0x96
 800366c:	f013 ff4e 	bl	801750c <sniprintf>
	}
		break;
 8003670:	e015      	b.n	800369e <logSensor+0x11e>
	default:
		snprintf(log_entry.str + strlen(log_entry.str),
 8003672:	f107 0310 	add.w	r3, r7, #16
 8003676:	4618      	mov	r0, r3
 8003678:	f7fc fdca 	bl	8000210 <strlen>
 800367c:	4602      	mov	r2, r0
 800367e:	f107 0310 	add.w	r3, r7, #16
 8003682:	4413      	add	r3, r2
 8003684:	4a0f      	ldr	r2, [pc, #60]	; (80036c4 <logSensor+0x144>)
 8003686:	461d      	mov	r5, r3
 8003688:	4614      	mov	r4, r2
 800368a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800368c:	6028      	str	r0, [r5, #0]
 800368e:	6069      	str	r1, [r5, #4]
 8003690:	60aa      	str	r2, [r5, #8]
 8003692:	60eb      	str	r3, [r5, #12]
 8003694:	6820      	ldr	r0, [r4, #0]
 8003696:	6128      	str	r0, [r5, #16]
 8003698:	7923      	ldrb	r3, [r4, #4]
 800369a:	752b      	strb	r3, [r5, #20]
		LOG_BUFFER_LEN, "Unknown sensor type\n");
		break;
 800369c:	bf00      	nop
	}

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 800369e:	4b0a      	ldr	r3, [pc, #40]	; (80036c8 <logSensor+0x148>)
 80036a0:	6818      	ldr	r0, [r3, #0]
 80036a2:	f107 0110 	add.w	r1, r7, #16
 80036a6:	2300      	movs	r3, #0
 80036a8:	2200      	movs	r2, #0
 80036aa:	f00f fe0d 	bl	80132c8 <osMessageQueuePut>
 80036ae:	4603      	mov	r3, r0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	37b4      	adds	r7, #180	; 0xb4
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036b8:	08019cb4 	.word	0x08019cb4
 80036bc:	08019cc4 	.word	0x08019cc4
 80036c0:	08019cd4 	.word	0x08019cd4
 80036c4:	08019cf4 	.word	0x08019cf4
 80036c8:	20010cb0 	.word	0x20010cb0

080036cc <logEstimatorVar>:
			flight_phase);

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
}

osStatus_t logEstimatorVar(timestamp_t ts, state_est_data_t estimator_data) {
 80036cc:	b084      	sub	sp, #16
 80036ce:	b580      	push	{r7, lr}
 80036d0:	b0ac      	sub	sp, #176	; 0xb0
 80036d2:	af04      	add	r7, sp, #16
 80036d4:	6078      	str	r0, [r7, #4]
 80036d6:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 80036da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	log_entry_t log_entry = { 0 };
 80036de:	f107 0308 	add.w	r3, r7, #8
 80036e2:	2296      	movs	r2, #150	; 0x96
 80036e4:	2100      	movs	r1, #0
 80036e6:	4618      	mov	r0, r3
 80036e8:	f013 fe4f 	bl	801738a <memset>
	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%ld;%ld\n", ts, ESTIMATOR_VAR,
 80036ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80036f0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80036f4:	f107 0008 	add.w	r0, r7, #8
 80036f8:	9202      	str	r2, [sp, #8]
 80036fa:	9301      	str	r3, [sp, #4]
 80036fc:	2303      	movs	r3, #3
 80036fe:	9300      	str	r3, [sp, #0]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a0a      	ldr	r2, [pc, #40]	; (800372c <logEstimatorVar+0x60>)
 8003704:	2196      	movs	r1, #150	; 0x96
 8003706:	f013 ff01 	bl	801750c <sniprintf>
			estimator_data.position_world[2], estimator_data.velocity_rocket[0]);

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 800370a:	4b09      	ldr	r3, [pc, #36]	; (8003730 <logEstimatorVar+0x64>)
 800370c:	6818      	ldr	r0, [r3, #0]
 800370e:	f107 0108 	add.w	r1, r7, #8
 8003712:	2300      	movs	r3, #0
 8003714:	2200      	movs	r2, #0
 8003716:	f00f fdd7 	bl	80132c8 <osMessageQueuePut>
 800371a:	4603      	mov	r3, r0
}
 800371c:	4618      	mov	r0, r3
 800371e:	37a0      	adds	r7, #160	; 0xa0
 8003720:	46bd      	mov	sp, r7
 8003722:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003726:	b004      	add	sp, #16
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	08019d18 	.word	0x08019d18
 8003730:	20010cb0 	.word	0x20010cb0

08003734 <logControllerOutput>:

osStatus_t logControllerOutput(timestamp_t ts, int32_t controller_output) {
 8003734:	b580      	push	{r7, lr}
 8003736:	b0aa      	sub	sp, #168	; 0xa8
 8003738:	af02      	add	r7, sp, #8
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
	log_entry_t log_entry = { 0 };
 800373e:	f107 0308 	add.w	r3, r7, #8
 8003742:	2296      	movs	r2, #150	; 0x96
 8003744:	2100      	movs	r1, #0
 8003746:	4618      	mov	r0, r3
 8003748:	f013 fe1f 	bl	801738a <memset>
	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%ld\n", ts, CONTROLLER_OUTPUT,
 800374c:	f107 0008 	add.w	r0, r7, #8
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	9301      	str	r3, [sp, #4]
 8003754:	2304      	movs	r3, #4
 8003756:	9300      	str	r3, [sp, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a08      	ldr	r2, [pc, #32]	; (800377c <logControllerOutput+0x48>)
 800375c:	2196      	movs	r1, #150	; 0x96
 800375e:	f013 fed5 	bl	801750c <sniprintf>
			controller_output);

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 8003762:	4b07      	ldr	r3, [pc, #28]	; (8003780 <logControllerOutput+0x4c>)
 8003764:	6818      	ldr	r0, [r3, #0]
 8003766:	f107 0108 	add.w	r1, r7, #8
 800376a:	2300      	movs	r3, #0
 800376c:	2200      	movs	r2, #0
 800376e:	f00f fdab 	bl	80132c8 <osMessageQueuePut>
 8003772:	4603      	mov	r3, r0
}
 8003774:	4618      	mov	r0, r3
 8003776:	37a0      	adds	r7, #160	; 0xa0
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	08019d28 	.word	0x08019d28
 8003780:	20010cb0 	.word	0x20010cb0

08003784 <UsbPrint>:
	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
}

/** USB DEBUGGING SECTION **/

uint8_t UsbPrint(const char *format, ...) {
 8003784:	b40f      	push	{r0, r1, r2, r3}
 8003786:	b480      	push	{r7}
 8003788:	b083      	sub	sp, #12
 800378a:	af00      	add	r7, sp, #0
	uint8_t ret = 1;
 800378c:	2301      	movs	r3, #1
 800378e:	71fb      	strb	r3, [r7, #7]
		va_end(argptr);
		ret = CDC_Transmit_FS((uint8_t*) print_buffer, strlen(print_buffer));
		osMutexRelease(print_mutex);
	}
#endif
	return ret;
 8003790:	79fb      	ldrb	r3, [r7, #7]
}
 8003792:	4618      	mov	r0, r3
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	b004      	add	sp, #16
 800379e:	4770      	bx	lr

080037a0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80037a0:	b590      	push	{r4, r7, lr}
 80037a2:	b0a1      	sub	sp, #132	; 0x84
 80037a4:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80037a6:	f001 fe06 	bl	80053b6 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80037aa:	f000 f927 	bl	80039fc <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	(DBGMCU)->APB1FZ = 0x7E01BFF;
 80037ae:	4b68      	ldr	r3, [pc, #416]	; (8003950 <main+0x1b0>)
 80037b0:	4a68      	ldr	r2, [pc, #416]	; (8003954 <main+0x1b4>)
 80037b2:	609a      	str	r2, [r3, #8]
	(DBGMCU)->APB2FZ = 0x70003;
 80037b4:	4b66      	ldr	r3, [pc, #408]	; (8003950 <main+0x1b0>)
 80037b6:	4a68      	ldr	r2, [pc, #416]	; (8003958 <main+0x1b8>)
 80037b8:	60da      	str	r2, [r3, #12]
	init_env(&global_env);
 80037ba:	4868      	ldr	r0, [pc, #416]	; (800395c <main+0x1bc>)
 80037bc:	f7fe f8cc 	bl	8001958 <init_env>
	reset_flight_phase_detection(&global_flight_phase_detection);
 80037c0:	4867      	ldr	r0, [pc, #412]	; (8003960 <main+0x1c0>)
 80037c2:	f7fe fb87 	bl	8001ed4 <reset_flight_phase_detection>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80037c6:	f000 fad1 	bl	8003d6c <MX_GPIO_Init>
	MX_DMA_Init();
 80037ca:	f000 faa9 	bl	8003d20 <MX_DMA_Init>
	MX_SPI3_Init();
 80037ce:	f000 fa37 	bl	8003c40 <MX_SPI3_Init>
	MX_SPI1_Init();
 80037d2:	f000 f9c5 	bl	8003b60 <MX_SPI1_Init>
	MX_SDMMC1_SD_Init();
 80037d6:	f000 f9a3 	bl	8003b20 <MX_SDMMC1_SD_Init>
	MX_SPI2_Init();
 80037da:	f000 f9f9 	bl	8003bd0 <MX_SPI2_Init>
	MX_FATFS_Init();
 80037de:	f00a fa4f 	bl	800dc80 <MX_FATFS_Init>
	MX_UART7_Init();
 80037e2:	f000 fa65 	bl	8003cb0 <MX_UART7_Init>
	/* USER CODE BEGIN 2 */
	MX_USB_DEVICE_Init();
 80037e6:	f013 f849 	bl	801687c <MX_USB_DEVICE_Init>
	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 80037ea:	f00f f80b 	bl	8012804 <osKernelInitialize>

	/* USER CODE BEGIN RTOS_MUTEX */
	/* Sensor Board 1 Mutex */
	const osMutexAttr_t sb1_mutex_attr = {
 80037ee:	4b5d      	ldr	r3, [pc, #372]	; (8003964 <main+0x1c4>)
 80037f0:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80037f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80037f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,                       // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	sb1_mutex = osMutexNew(&sb1_mutex_attr);
 80037fa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80037fe:	4618      	mov	r0, r3
 8003800:	f00f f9d2 	bl	8012ba8 <osMutexNew>
 8003804:	4602      	mov	r2, r0
 8003806:	4b58      	ldr	r3, [pc, #352]	; (8003968 <main+0x1c8>)
 8003808:	601a      	str	r2, [r3, #0]

	/* Sensor Board 2 Mutex */
	const osMutexAttr_t sb2_mutex_attr = {
 800380a:	4b58      	ldr	r3, [pc, #352]	; (800396c <main+0x1cc>)
 800380c:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8003810:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003812:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,                       // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	sb2_mutex = osMutexNew(&sb2_mutex_attr);
 8003816:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800381a:	4618      	mov	r0, r3
 800381c:	f00f f9c4 	bl	8012ba8 <osMutexNew>
 8003820:	4602      	mov	r2, r0
 8003822:	4b53      	ldr	r3, [pc, #332]	; (8003970 <main+0x1d0>)
 8003824:	601a      	str	r2, [r3, #0]

	/* Sensor Board 3 Mutex */
	const osMutexAttr_t sb3_mutex_attr = {
 8003826:	4b53      	ldr	r3, [pc, #332]	; (8003974 <main+0x1d4>)
 8003828:	f107 0450 	add.w	r4, r7, #80	; 0x50
 800382c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800382e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	sb3_mutex = osMutexNew(&sb3_mutex_attr);
 8003832:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003836:	4618      	mov	r0, r3
 8003838:	f00f f9b6 	bl	8012ba8 <osMutexNew>
 800383c:	4602      	mov	r2, r0
 800383e:	4b4e      	ldr	r3, [pc, #312]	; (8003978 <main+0x1d8>)
 8003840:	601a      	str	r2, [r3, #0]

	/* State Estimation Output Mutex */
	const osMutexAttr_t state_est_mutex_attr = {
 8003842:	4b4e      	ldr	r3, [pc, #312]	; (800397c <main+0x1dc>)
 8003844:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8003848:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800384a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	state_est_mutex = osMutexNew(&state_est_mutex_attr);
 800384e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003852:	4618      	mov	r0, r3
 8003854:	f00f f9a8 	bl	8012ba8 <osMutexNew>
 8003858:	4602      	mov	r2, r0
 800385a:	4b49      	ldr	r3, [pc, #292]	; (8003980 <main+0x1e0>)
 800385c:	601a      	str	r2, [r3, #0]

	/* Controller Output Mutex */
	const osMutexAttr_t controller_mutex_attr = {
 800385e:	4b49      	ldr	r3, [pc, #292]	; (8003984 <main+0x1e4>)
 8003860:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8003864:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003866:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	controller_mutex = osMutexNew(&controller_mutex_attr);
 800386a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800386e:	4618      	mov	r0, r3
 8003870:	f00f f99a 	bl	8012ba8 <osMutexNew>
 8003874:	4602      	mov	r2, r0
 8003876:	4b44      	ldr	r3, [pc, #272]	; (8003988 <main+0x1e8>)
 8003878:	601a      	str	r2, [r3, #0]

	/* FSM Output Mutex */
	const osMutexAttr_t fsm_mutex_attr = {
 800387a:	4b44      	ldr	r3, [pc, #272]	; (800398c <main+0x1ec>)
 800387c:	f107 0420 	add.w	r4, r7, #32
 8003880:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003882:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	fsm_mutex = osMutexNew(&fsm_mutex_attr);
 8003886:	f107 0320 	add.w	r3, r7, #32
 800388a:	4618      	mov	r0, r3
 800388c:	f00f f98c 	bl	8012ba8 <osMutexNew>
 8003890:	4602      	mov	r2, r0
 8003892:	4b3f      	ldr	r3, [pc, #252]	; (8003990 <main+0x1f0>)
 8003894:	601a      	str	r2, [r3, #0]

	/* Environment Mutex */
	const osMutexAttr_t environment_mutex_attr = {
 8003896:	4b3f      	ldr	r3, [pc, #252]	; (8003994 <main+0x1f4>)
 8003898:	f107 0410 	add.w	r4, r7, #16
 800389c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800389e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	environment_mutex = osMutexNew(&environment_mutex_attr);
 80038a2:	f107 0310 	add.w	r3, r7, #16
 80038a6:	4618      	mov	r0, r3
 80038a8:	f00f f97e 	bl	8012ba8 <osMutexNew>
 80038ac:	4602      	mov	r2, r0
 80038ae:	4b3a      	ldr	r3, [pc, #232]	; (8003998 <main+0x1f8>)
 80038b0:	601a      	str	r2, [r3, #0]

	/* Motor Controller Mutex */
	const osMutexAttr_t motor_cont_mutex_attr = {
 80038b2:	4b3a      	ldr	r3, [pc, #232]	; (800399c <main+0x1fc>)
 80038b4:	463c      	mov	r4, r7
 80038b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	motor_controller_mutex = osMutexNew(&motor_cont_mutex_attr);
 80038bc:	463b      	mov	r3, r7
 80038be:	4618      	mov	r0, r3
 80038c0:	f00f f972 	bl	8012ba8 <osMutexNew>
 80038c4:	4602      	mov	r2, r0
 80038c6:	4b36      	ldr	r3, [pc, #216]	; (80039a0 <main+0x200>)
 80038c8:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN RTOS_TIMERS */
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* USER CODE BEGIN RTOS_QUEUES */
	log_queue = osMessageQueueNew(LOG_QUEUE_SIZE, sizeof(log_entry_t), NULL);
 80038ca:	2200      	movs	r2, #0
 80038cc:	2196      	movs	r1, #150	; 0x96
 80038ce:	2080      	movs	r0, #128	; 0x80
 80038d0:	f00f fc74 	bl	80131bc <osMessageQueueNew>
 80038d4:	4602      	mov	r2, r0
 80038d6:	4b33      	ldr	r3, [pc, #204]	; (80039a4 <main+0x204>)
 80038d8:	601a      	str	r2, [r3, #0]
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80038da:	4a33      	ldr	r2, [pc, #204]	; (80039a8 <main+0x208>)
 80038dc:	2100      	movs	r1, #0
 80038de:	4833      	ldr	r0, [pc, #204]	; (80039ac <main+0x20c>)
 80038e0:	f00f f84e 	bl	8012980 <osThreadNew>
 80038e4:	4602      	mov	r2, r0
 80038e6:	4b32      	ldr	r3, [pc, #200]	; (80039b0 <main+0x210>)
 80038e8:	601a      	str	r2, [r3, #0]

	/* creation of task_state_est */
	task_state_estHandle = osThreadNew(vTaskStateEst, NULL, &task_state_est_attributes);
 80038ea:	4a32      	ldr	r2, [pc, #200]	; (80039b4 <main+0x214>)
 80038ec:	2100      	movs	r1, #0
 80038ee:	4832      	ldr	r0, [pc, #200]	; (80039b8 <main+0x218>)
 80038f0:	f00f f846 	bl	8012980 <osThreadNew>
 80038f4:	4602      	mov	r2, r0
 80038f6:	4b31      	ldr	r3, [pc, #196]	; (80039bc <main+0x21c>)
 80038f8:	601a      	str	r2, [r3, #0]

	/* creation of task_controller */
	task_controllerHandle = osThreadNew(vTaskController, NULL, &task_controller_attributes);
 80038fa:	4a31      	ldr	r2, [pc, #196]	; (80039c0 <main+0x220>)
 80038fc:	2100      	movs	r1, #0
 80038fe:	4831      	ldr	r0, [pc, #196]	; (80039c4 <main+0x224>)
 8003900:	f00f f83e 	bl	8012980 <osThreadNew>
 8003904:	4602      	mov	r2, r0
 8003906:	4b30      	ldr	r3, [pc, #192]	; (80039c8 <main+0x228>)
 8003908:	601a      	str	r2, [r3, #0]

	/* creation of task_sens_read */
	task_sens_readHandle = osThreadNew(vTaskSensRead, NULL, &task_sens_read_attributes);
 800390a:	4a30      	ldr	r2, [pc, #192]	; (80039cc <main+0x22c>)
 800390c:	2100      	movs	r1, #0
 800390e:	4830      	ldr	r0, [pc, #192]	; (80039d0 <main+0x230>)
 8003910:	f00f f836 	bl	8012980 <osThreadNew>
 8003914:	4602      	mov	r2, r0
 8003916:	4b2f      	ldr	r3, [pc, #188]	; (80039d4 <main+0x234>)
 8003918:	601a      	str	r2, [r3, #0]

	/* creation of task_sd_card */
	task_sd_cardHandle = osThreadNew(vTaskSdCard, NULL, &task_sd_card_attributes);
 800391a:	4a2f      	ldr	r2, [pc, #188]	; (80039d8 <main+0x238>)
 800391c:	2100      	movs	r1, #0
 800391e:	482f      	ldr	r0, [pc, #188]	; (80039dc <main+0x23c>)
 8003920:	f00f f82e 	bl	8012980 <osThreadNew>
 8003924:	4602      	mov	r2, r0
 8003926:	4b2e      	ldr	r3, [pc, #184]	; (80039e0 <main+0x240>)
 8003928:	601a      	str	r2, [r3, #0]

	/* creation of task_motor_cont */
	task_motor_contHandle = osThreadNew(vTaskMotorCont, NULL, &task_motor_cont_attributes);
 800392a:	4a2e      	ldr	r2, [pc, #184]	; (80039e4 <main+0x244>)
 800392c:	2100      	movs	r1, #0
 800392e:	482e      	ldr	r0, [pc, #184]	; (80039e8 <main+0x248>)
 8003930:	f00f f826 	bl	8012980 <osThreadNew>
 8003934:	4602      	mov	r2, r0
 8003936:	4b2d      	ldr	r3, [pc, #180]	; (80039ec <main+0x24c>)
 8003938:	601a      	str	r2, [r3, #0]

	/* creation of tas_fsm */
	tas_fsmHandle = osThreadNew(vTaskFSM, NULL, &tas_fsm_attributes);
 800393a:	4a2d      	ldr	r2, [pc, #180]	; (80039f0 <main+0x250>)
 800393c:	2100      	movs	r1, #0
 800393e:	482d      	ldr	r0, [pc, #180]	; (80039f4 <main+0x254>)
 8003940:	f00f f81e 	bl	8012980 <osThreadNew>
 8003944:	4602      	mov	r2, r0
 8003946:	4b2c      	ldr	r3, [pc, #176]	; (80039f8 <main+0x258>)
 8003948:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 800394a:	f00e ffb1 	bl	80128b0 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 800394e:	e7fe      	b.n	800394e <main+0x1ae>
 8003950:	e0042000 	.word	0xe0042000
 8003954:	07e01bff 	.word	0x07e01bff
 8003958:	00070003 	.word	0x00070003
 800395c:	2000030c 	.word	0x2000030c
 8003960:	2000031c 	.word	0x2000031c
 8003964:	08019db0 	.word	0x08019db0
 8003968:	20008878 	.word	0x20008878
 800396c:	08019dcc 	.word	0x08019dcc
 8003970:	20008880 	.word	0x20008880
 8003974:	08019de8 	.word	0x08019de8
 8003978:	2000887c 	.word	0x2000887c
 800397c:	08019e08 	.word	0x08019e08
 8003980:	2000ab30 	.word	0x2000ab30
 8003984:	08019e2c 	.word	0x08019e2c
 8003988:	2000aac4 	.word	0x2000aac4
 800398c:	08019e48 	.word	0x08019e48
 8003990:	20008888 	.word	0x20008888
 8003994:	08019e6c 	.word	0x08019e6c
 8003998:	200089d0 	.word	0x200089d0
 800399c:	08019e94 	.word	0x08019e94
 80039a0:	200089d4 	.word	0x200089d4
 80039a4:	20010cb0 	.word	0x20010cb0
 80039a8:	0801a228 	.word	0x0801a228
 80039ac:	08003e49 	.word	0x08003e49
 80039b0:	20008884 	.word	0x20008884
 80039b4:	0801a24c 	.word	0x0801a24c
 80039b8:	08004e79 	.word	0x08004e79
 80039bc:	2000aacc 	.word	0x2000aacc
 80039c0:	0801a270 	.word	0x0801a270
 80039c4:	08004581 	.word	0x08004581
 80039c8:	20014dcc 	.word	0x20014dcc
 80039cc:	0801a294 	.word	0x0801a294
 80039d0:	08004cc1 	.word	0x08004cc1
 80039d4:	20008a5c 	.word	0x20008a5c
 80039d8:	0801a2b8 	.word	0x0801a2b8
 80039dc:	0800492d 	.word	0x0800492d
 80039e0:	20008970 	.word	0x20008970
 80039e4:	0801a2dc 	.word	0x0801a2dc
 80039e8:	08004899 	.word	0x08004899
 80039ec:	2000aac8 	.word	0x2000aac8
 80039f0:	0801a300 	.word	0x0801a300
 80039f4:	0800472d 	.word	0x0800472d
 80039f8:	2000aad0 	.word	0x2000aad0

080039fc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b0b4      	sub	sp, #208	; 0xd0
 8003a00:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a02:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003a06:	2230      	movs	r2, #48	; 0x30
 8003a08:	2100      	movs	r1, #0
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f013 fcbd 	bl	801738a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003a10:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003a14:	2200      	movs	r2, #0
 8003a16:	601a      	str	r2, [r3, #0]
 8003a18:	605a      	str	r2, [r3, #4]
 8003a1a:	609a      	str	r2, [r3, #8]
 8003a1c:	60da      	str	r2, [r3, #12]
 8003a1e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003a20:	f107 0308 	add.w	r3, r7, #8
 8003a24:	2284      	movs	r2, #132	; 0x84
 8003a26:	2100      	movs	r1, #0
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f013 fcae 	bl	801738a <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8003a2e:	4b39      	ldr	r3, [pc, #228]	; (8003b14 <SystemClock_Config+0x118>)
 8003a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a32:	4a38      	ldr	r2, [pc, #224]	; (8003b14 <SystemClock_Config+0x118>)
 8003a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a38:	6413      	str	r3, [r2, #64]	; 0x40
 8003a3a:	4b36      	ldr	r3, [pc, #216]	; (8003b14 <SystemClock_Config+0x118>)
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a42:	607b      	str	r3, [r7, #4]
 8003a44:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003a46:	4b34      	ldr	r3, [pc, #208]	; (8003b18 <SystemClock_Config+0x11c>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003a4e:	4a32      	ldr	r2, [pc, #200]	; (8003b18 <SystemClock_Config+0x11c>)
 8003a50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a54:	6013      	str	r3, [r2, #0]
 8003a56:	4b30      	ldr	r3, [pc, #192]	; (8003b18 <SystemClock_Config+0x11c>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003a5e:	603b      	str	r3, [r7, #0]
 8003a60:	683b      	ldr	r3, [r7, #0]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003a62:	2301      	movs	r3, #1
 8003a64:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003a68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a6c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003a70:	2302      	movs	r3, #2
 8003a72:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003a76:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003a7a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLM = 4;
 8003a7e:	2304      	movs	r3, #4
 8003a80:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	RCC_OscInitStruct.PLL.PLLN = 168;
 8003a84:	23a8      	movs	r3, #168	; 0xa8
 8003a86:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8003a90:	2307      	movs	r3, #7
 8003a92:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a96:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f003 fcfc 	bl	8007498 <HAL_RCC_OscConfig>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <SystemClock_Config+0xae>
	{
		Error_Handler();
 8003aa6:	f000 f9eb 	bl	8003e80 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003aaa:	230f      	movs	r3, #15
 8003aac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003abc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003ac0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003ac4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ac8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003acc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003ad0:	2105      	movs	r1, #5
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f003 ff84 	bl	80079e0 <HAL_RCC_ClockConfig>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d001      	beq.n	8003ae2 <SystemClock_Config+0xe6>
	{
		Error_Handler();
 8003ade:	f000 f9cf 	bl	8003e80 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7|RCC_PERIPHCLK_SDMMC1
 8003ae2:	4b0e      	ldr	r3, [pc, #56]	; (8003b1c <SystemClock_Config+0x120>)
 8003ae4:	60bb      	str	r3, [r7, #8]
			|RCC_PERIPHCLK_CLK48;
	PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	667b      	str	r3, [r7, #100]	; 0x64
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8003aea:	2300      	movs	r3, #0
 8003aec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8003af0:	2300      	movs	r3, #0
 8003af2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003af6:	f107 0308 	add.w	r3, r7, #8
 8003afa:	4618      	mov	r0, r3
 8003afc:	f004 f99a 	bl	8007e34 <HAL_RCCEx_PeriphCLKConfig>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d001      	beq.n	8003b0a <SystemClock_Config+0x10e>
	{
		Error_Handler();
 8003b06:	f000 f9bb 	bl	8003e80 <Error_Handler>
	}
}
 8003b0a:	bf00      	nop
 8003b0c:	37d0      	adds	r7, #208	; 0xd0
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	40023800 	.word	0x40023800
 8003b18:	40007000 	.word	0x40007000
 8003b1c:	00a01000 	.word	0x00a01000

08003b20 <MX_SDMMC1_SD_Init>:
 * @brief SDMMC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDMMC1_SD_Init(void)
{
 8003b20:	b480      	push	{r7}
 8003b22:	af00      	add	r7, sp, #0
	/* USER CODE END SDMMC1_Init 0 */

	/* USER CODE BEGIN SDMMC1_Init 1 */

	/* USER CODE END SDMMC1_Init 1 */
	hsd1.Instance = SDMMC1;
 8003b24:	4b0c      	ldr	r3, [pc, #48]	; (8003b58 <MX_SDMMC1_SD_Init+0x38>)
 8003b26:	4a0d      	ldr	r2, [pc, #52]	; (8003b5c <MX_SDMMC1_SD_Init+0x3c>)
 8003b28:	601a      	str	r2, [r3, #0]
	hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8003b2a:	4b0b      	ldr	r3, [pc, #44]	; (8003b58 <MX_SDMMC1_SD_Init+0x38>)
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	605a      	str	r2, [r3, #4]
	hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8003b30:	4b09      	ldr	r3, [pc, #36]	; (8003b58 <MX_SDMMC1_SD_Init+0x38>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	609a      	str	r2, [r3, #8]
	hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003b36:	4b08      	ldr	r3, [pc, #32]	; (8003b58 <MX_SDMMC1_SD_Init+0x38>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	60da      	str	r2, [r3, #12]
	hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8003b3c:	4b06      	ldr	r3, [pc, #24]	; (8003b58 <MX_SDMMC1_SD_Init+0x38>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	611a      	str	r2, [r3, #16]
	hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8003b42:	4b05      	ldr	r3, [pc, #20]	; (8003b58 <MX_SDMMC1_SD_Init+0x38>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	615a      	str	r2, [r3, #20]
	hsd1.Init.ClockDiv = 0;
 8003b48:	4b03      	ldr	r3, [pc, #12]	; (8003b58 <MX_SDMMC1_SD_Init+0x38>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	619a      	str	r2, [r3, #24]
	/* USER CODE BEGIN SDMMC1_Init 2 */

	/* USER CODE END SDMMC1_Init 2 */

}
 8003b4e:	bf00      	nop
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr
 8003b58:	200089d8 	.word	0x200089d8
 8003b5c:	40012c00 	.word	0x40012c00

08003b60 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8003b64:	4b18      	ldr	r3, [pc, #96]	; (8003bc8 <MX_SPI1_Init+0x68>)
 8003b66:	4a19      	ldr	r2, [pc, #100]	; (8003bcc <MX_SPI1_Init+0x6c>)
 8003b68:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_SLAVE;
 8003b6a:	4b17      	ldr	r3, [pc, #92]	; (8003bc8 <MX_SPI1_Init+0x68>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003b70:	4b15      	ldr	r3, [pc, #84]	; (8003bc8 <MX_SPI1_Init+0x68>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003b76:	4b14      	ldr	r3, [pc, #80]	; (8003bc8 <MX_SPI1_Init+0x68>)
 8003b78:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003b7c:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b7e:	4b12      	ldr	r3, [pc, #72]	; (8003bc8 <MX_SPI1_Init+0x68>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003b84:	4b10      	ldr	r3, [pc, #64]	; (8003bc8 <MX_SPI1_Init+0x68>)
 8003b86:	2200      	movs	r2, #0
 8003b88:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8003b8a:	4b0f      	ldr	r3, [pc, #60]	; (8003bc8 <MX_SPI1_Init+0x68>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	619a      	str	r2, [r3, #24]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003b90:	4b0d      	ldr	r3, [pc, #52]	; (8003bc8 <MX_SPI1_Init+0x68>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003b96:	4b0c      	ldr	r3, [pc, #48]	; (8003bc8 <MX_SPI1_Init+0x68>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b9c:	4b0a      	ldr	r3, [pc, #40]	; (8003bc8 <MX_SPI1_Init+0x68>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8003ba2:	4b09      	ldr	r3, [pc, #36]	; (8003bc8 <MX_SPI1_Init+0x68>)
 8003ba4:	2207      	movs	r2, #7
 8003ba6:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003ba8:	4b07      	ldr	r3, [pc, #28]	; (8003bc8 <MX_SPI1_Init+0x68>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003bae:	4b06      	ldr	r3, [pc, #24]	; (8003bc8 <MX_SPI1_Init+0x68>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003bb4:	4804      	ldr	r0, [pc, #16]	; (8003bc8 <MX_SPI1_Init+0x68>)
 8003bb6:	f005 ffe9 	bl	8009b8c <HAL_SPI_Init>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d001      	beq.n	8003bc4 <MX_SPI1_Init+0x64>
	{
		Error_Handler();
 8003bc0:	f000 f95e 	bl	8003e80 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8003bc4:	bf00      	nop
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	20010c4c 	.word	0x20010c4c
 8003bcc:	40013000 	.word	0x40013000

08003bd0 <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8003bd4:	4b18      	ldr	r3, [pc, #96]	; (8003c38 <MX_SPI2_Init+0x68>)
 8003bd6:	4a19      	ldr	r2, [pc, #100]	; (8003c3c <MX_SPI2_Init+0x6c>)
 8003bd8:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_SLAVE;
 8003bda:	4b17      	ldr	r3, [pc, #92]	; (8003c38 <MX_SPI2_Init+0x68>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003be0:	4b15      	ldr	r3, [pc, #84]	; (8003c38 <MX_SPI2_Init+0x68>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003be6:	4b14      	ldr	r3, [pc, #80]	; (8003c38 <MX_SPI2_Init+0x68>)
 8003be8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003bec:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bee:	4b12      	ldr	r3, [pc, #72]	; (8003c38 <MX_SPI2_Init+0x68>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003bf4:	4b10      	ldr	r3, [pc, #64]	; (8003c38 <MX_SPI2_Init+0x68>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8003bfa:	4b0f      	ldr	r3, [pc, #60]	; (8003c38 <MX_SPI2_Init+0x68>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	619a      	str	r2, [r3, #24]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003c00:	4b0d      	ldr	r3, [pc, #52]	; (8003c38 <MX_SPI2_Init+0x68>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003c06:	4b0c      	ldr	r3, [pc, #48]	; (8003c38 <MX_SPI2_Init+0x68>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c0c:	4b0a      	ldr	r3, [pc, #40]	; (8003c38 <MX_SPI2_Init+0x68>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 7;
 8003c12:	4b09      	ldr	r3, [pc, #36]	; (8003c38 <MX_SPI2_Init+0x68>)
 8003c14:	2207      	movs	r2, #7
 8003c16:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003c18:	4b07      	ldr	r3, [pc, #28]	; (8003c38 <MX_SPI2_Init+0x68>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	631a      	str	r2, [r3, #48]	; 0x30
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003c1e:	4b06      	ldr	r3, [pc, #24]	; (8003c38 <MX_SPI2_Init+0x68>)
 8003c20:	2200      	movs	r2, #0
 8003c22:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003c24:	4804      	ldr	r0, [pc, #16]	; (8003c38 <MX_SPI2_Init+0x68>)
 8003c26:	f005 ffb1 	bl	8009b8c <HAL_SPI_Init>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d001      	beq.n	8003c34 <MX_SPI2_Init+0x64>
	{
		Error_Handler();
 8003c30:	f000 f926 	bl	8003e80 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8003c34:	bf00      	nop
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	2000888c 	.word	0x2000888c
 8003c3c:	40003800 	.word	0x40003800

08003c40 <MX_SPI3_Init>:
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI3_Init 1 */

	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 8003c44:	4b18      	ldr	r3, [pc, #96]	; (8003ca8 <MX_SPI3_Init+0x68>)
 8003c46:	4a19      	ldr	r2, [pc, #100]	; (8003cac <MX_SPI3_Init+0x6c>)
 8003c48:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_SLAVE;
 8003c4a:	4b17      	ldr	r3, [pc, #92]	; (8003ca8 <MX_SPI3_Init+0x68>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003c50:	4b15      	ldr	r3, [pc, #84]	; (8003ca8 <MX_SPI3_Init+0x68>)
 8003c52:	2200      	movs	r2, #0
 8003c54:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003c56:	4b14      	ldr	r3, [pc, #80]	; (8003ca8 <MX_SPI3_Init+0x68>)
 8003c58:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003c5c:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c5e:	4b12      	ldr	r3, [pc, #72]	; (8003ca8 <MX_SPI3_Init+0x68>)
 8003c60:	2200      	movs	r2, #0
 8003c62:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003c64:	4b10      	ldr	r3, [pc, #64]	; (8003ca8 <MX_SPI3_Init+0x68>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 8003c6a:	4b0f      	ldr	r3, [pc, #60]	; (8003ca8 <MX_SPI3_Init+0x68>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	619a      	str	r2, [r3, #24]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003c70:	4b0d      	ldr	r3, [pc, #52]	; (8003ca8 <MX_SPI3_Init+0x68>)
 8003c72:	2200      	movs	r2, #0
 8003c74:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003c76:	4b0c      	ldr	r3, [pc, #48]	; (8003ca8 <MX_SPI3_Init+0x68>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c7c:	4b0a      	ldr	r3, [pc, #40]	; (8003ca8 <MX_SPI3_Init+0x68>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	629a      	str	r2, [r3, #40]	; 0x28
	hspi3.Init.CRCPolynomial = 7;
 8003c82:	4b09      	ldr	r3, [pc, #36]	; (8003ca8 <MX_SPI3_Init+0x68>)
 8003c84:	2207      	movs	r2, #7
 8003c86:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003c88:	4b07      	ldr	r3, [pc, #28]	; (8003ca8 <MX_SPI3_Init+0x68>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	631a      	str	r2, [r3, #48]	; 0x30
	hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003c8e:	4b06      	ldr	r3, [pc, #24]	; (8003ca8 <MX_SPI3_Init+0x68>)
 8003c90:	2200      	movs	r2, #0
 8003c92:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003c94:	4804      	ldr	r0, [pc, #16]	; (8003ca8 <MX_SPI3_Init+0x68>)
 8003c96:	f005 ff79 	bl	8009b8c <HAL_SPI_Init>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d001      	beq.n	8003ca4 <MX_SPI3_Init+0x64>
	{
		Error_Handler();
 8003ca0:	f000 f8ee 	bl	8003e80 <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */

	/* USER CODE END SPI3_Init 2 */

}
 8003ca4:	bf00      	nop
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	2000aa60 	.word	0x2000aa60
 8003cac:	40003c00 	.word	0x40003c00

08003cb0 <MX_UART7_Init>:
 * @brief UART7 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART7_Init(void)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	af00      	add	r7, sp, #0
	/* USER CODE END UART7_Init 0 */

	/* USER CODE BEGIN UART7_Init 1 */

	/* USER CODE END UART7_Init 1 */
	huart7.Instance = UART7;
 8003cb4:	4b18      	ldr	r3, [pc, #96]	; (8003d18 <MX_UART7_Init+0x68>)
 8003cb6:	4a19      	ldr	r2, [pc, #100]	; (8003d1c <MX_UART7_Init+0x6c>)
 8003cb8:	601a      	str	r2, [r3, #0]
	huart7.Init.BaudRate = 115200;
 8003cba:	4b17      	ldr	r3, [pc, #92]	; (8003d18 <MX_UART7_Init+0x68>)
 8003cbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003cc0:	605a      	str	r2, [r3, #4]
	huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8003cc2:	4b15      	ldr	r3, [pc, #84]	; (8003d18 <MX_UART7_Init+0x68>)
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	609a      	str	r2, [r3, #8]
	huart7.Init.StopBits = UART_STOPBITS_1;
 8003cc8:	4b13      	ldr	r3, [pc, #76]	; (8003d18 <MX_UART7_Init+0x68>)
 8003cca:	2200      	movs	r2, #0
 8003ccc:	60da      	str	r2, [r3, #12]
	huart7.Init.Parity = UART_PARITY_NONE;
 8003cce:	4b12      	ldr	r3, [pc, #72]	; (8003d18 <MX_UART7_Init+0x68>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	611a      	str	r2, [r3, #16]
	huart7.Init.Mode = UART_MODE_TX_RX;
 8003cd4:	4b10      	ldr	r3, [pc, #64]	; (8003d18 <MX_UART7_Init+0x68>)
 8003cd6:	220c      	movs	r2, #12
 8003cd8:	615a      	str	r2, [r3, #20]
	huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003cda:	4b0f      	ldr	r3, [pc, #60]	; (8003d18 <MX_UART7_Init+0x68>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	619a      	str	r2, [r3, #24]
	huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ce0:	4b0d      	ldr	r3, [pc, #52]	; (8003d18 <MX_UART7_Init+0x68>)
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	61da      	str	r2, [r3, #28]
	huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003ce6:	4b0c      	ldr	r3, [pc, #48]	; (8003d18 <MX_UART7_Init+0x68>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	621a      	str	r2, [r3, #32]
	huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8003cec:	4b0a      	ldr	r3, [pc, #40]	; (8003d18 <MX_UART7_Init+0x68>)
 8003cee:	2230      	movs	r2, #48	; 0x30
 8003cf0:	625a      	str	r2, [r3, #36]	; 0x24
	huart7.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8003cf2:	4b09      	ldr	r3, [pc, #36]	; (8003d18 <MX_UART7_Init+0x68>)
 8003cf4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003cf8:	639a      	str	r2, [r3, #56]	; 0x38
	huart7.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8003cfa:	4b07      	ldr	r3, [pc, #28]	; (8003d18 <MX_UART7_Init+0x68>)
 8003cfc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d00:	63da      	str	r2, [r3, #60]	; 0x3c
	if (HAL_UART_Init(&huart7) != HAL_OK)
 8003d02:	4805      	ldr	r0, [pc, #20]	; (8003d18 <MX_UART7_Init+0x68>)
 8003d04:	f006 fffa 	bl	800acfc <HAL_UART_Init>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d001      	beq.n	8003d12 <MX_UART7_Init+0x62>
	{
		Error_Handler();
 8003d0e:	f000 f8b7 	bl	8003e80 <Error_Handler>
	}
	/* USER CODE BEGIN UART7_Init 2 */

	/* USER CODE END UART7_Init 2 */

}
 8003d12:	bf00      	nop
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	200088f0 	.word	0x200088f0
 8003d1c:	40007800 	.word	0x40007800

08003d20 <MX_DMA_Init>:

/** 
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) 
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8003d26:	4b10      	ldr	r3, [pc, #64]	; (8003d68 <MX_DMA_Init+0x48>)
 8003d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2a:	4a0f      	ldr	r2, [pc, #60]	; (8003d68 <MX_DMA_Init+0x48>)
 8003d2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003d30:	6313      	str	r3, [r2, #48]	; 0x30
 8003d32:	4b0d      	ldr	r3, [pc, #52]	; (8003d68 <MX_DMA_Init+0x48>)
 8003d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d3a:	607b      	str	r3, [r7, #4]
 8003d3c:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8003d3e:	2200      	movs	r2, #0
 8003d40:	2105      	movs	r1, #5
 8003d42:	203b      	movs	r0, #59	; 0x3b
 8003d44:	f001 fc3e 	bl	80055c4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8003d48:	203b      	movs	r0, #59	; 0x3b
 8003d4a:	f001 fc57 	bl	80055fc <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8003d4e:	2200      	movs	r2, #0
 8003d50:	2105      	movs	r1, #5
 8003d52:	2045      	movs	r0, #69	; 0x45
 8003d54:	f001 fc36 	bl	80055c4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8003d58:	2045      	movs	r0, #69	; 0x45
 8003d5a:	f001 fc4f 	bl	80055fc <HAL_NVIC_EnableIRQ>

}
 8003d5e:	bf00      	nop
 8003d60:	3708      	adds	r7, #8
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	40023800 	.word	0x40023800

08003d6c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b08c      	sub	sp, #48	; 0x30
 8003d70:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d72:	f107 031c 	add.w	r3, r7, #28
 8003d76:	2200      	movs	r2, #0
 8003d78:	601a      	str	r2, [r3, #0]
 8003d7a:	605a      	str	r2, [r3, #4]
 8003d7c:	609a      	str	r2, [r3, #8]
 8003d7e:	60da      	str	r2, [r3, #12]
 8003d80:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8003d82:	4b2f      	ldr	r3, [pc, #188]	; (8003e40 <MX_GPIO_Init+0xd4>)
 8003d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d86:	4a2e      	ldr	r2, [pc, #184]	; (8003e40 <MX_GPIO_Init+0xd4>)
 8003d88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d8e:	4b2c      	ldr	r3, [pc, #176]	; (8003e40 <MX_GPIO_Init+0xd4>)
 8003d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d96:	61bb      	str	r3, [r7, #24]
 8003d98:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003d9a:	4b29      	ldr	r3, [pc, #164]	; (8003e40 <MX_GPIO_Init+0xd4>)
 8003d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9e:	4a28      	ldr	r2, [pc, #160]	; (8003e40 <MX_GPIO_Init+0xd4>)
 8003da0:	f043 0304 	orr.w	r3, r3, #4
 8003da4:	6313      	str	r3, [r2, #48]	; 0x30
 8003da6:	4b26      	ldr	r3, [pc, #152]	; (8003e40 <MX_GPIO_Init+0xd4>)
 8003da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003daa:	f003 0304 	and.w	r3, r3, #4
 8003dae:	617b      	str	r3, [r7, #20]
 8003db0:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003db2:	4b23      	ldr	r3, [pc, #140]	; (8003e40 <MX_GPIO_Init+0xd4>)
 8003db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db6:	4a22      	ldr	r2, [pc, #136]	; (8003e40 <MX_GPIO_Init+0xd4>)
 8003db8:	f043 0301 	orr.w	r3, r3, #1
 8003dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8003dbe:	4b20      	ldr	r3, [pc, #128]	; (8003e40 <MX_GPIO_Init+0xd4>)
 8003dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	613b      	str	r3, [r7, #16]
 8003dc8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003dca:	4b1d      	ldr	r3, [pc, #116]	; (8003e40 <MX_GPIO_Init+0xd4>)
 8003dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dce:	4a1c      	ldr	r2, [pc, #112]	; (8003e40 <MX_GPIO_Init+0xd4>)
 8003dd0:	f043 0302 	orr.w	r3, r3, #2
 8003dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8003dd6:	4b1a      	ldr	r3, [pc, #104]	; (8003e40 <MX_GPIO_Init+0xd4>)
 8003dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dda:	f003 0302 	and.w	r3, r3, #2
 8003dde:	60fb      	str	r3, [r7, #12]
 8003de0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8003de2:	4b17      	ldr	r3, [pc, #92]	; (8003e40 <MX_GPIO_Init+0xd4>)
 8003de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de6:	4a16      	ldr	r2, [pc, #88]	; (8003e40 <MX_GPIO_Init+0xd4>)
 8003de8:	f043 0310 	orr.w	r3, r3, #16
 8003dec:	6313      	str	r3, [r2, #48]	; 0x30
 8003dee:	4b14      	ldr	r3, [pc, #80]	; (8003e40 <MX_GPIO_Init+0xd4>)
 8003df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df2:	f003 0310 	and.w	r3, r3, #16
 8003df6:	60bb      	str	r3, [r7, #8]
 8003df8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8003dfa:	4b11      	ldr	r3, [pc, #68]	; (8003e40 <MX_GPIO_Init+0xd4>)
 8003dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfe:	4a10      	ldr	r2, [pc, #64]	; (8003e40 <MX_GPIO_Init+0xd4>)
 8003e00:	f043 0308 	orr.w	r3, r3, #8
 8003e04:	6313      	str	r3, [r2, #48]	; 0x30
 8003e06:	4b0e      	ldr	r3, [pc, #56]	; (8003e40 <MX_GPIO_Init+0xd4>)
 8003e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0a:	f003 0308 	and.w	r3, r3, #8
 8003e0e:	607b      	str	r3, [r7, #4]
 8003e10:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003e12:	2200      	movs	r2, #0
 8003e14:	2108      	movs	r1, #8
 8003e16:	480b      	ldr	r0, [pc, #44]	; (8003e44 <MX_GPIO_Init+0xd8>)
 8003e18:	f002 f94c 	bl	80060b4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 8003e1c:	2308      	movs	r3, #8
 8003e1e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e20:	2301      	movs	r3, #1
 8003e22:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e24:	2300      	movs	r3, #0
 8003e26:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8003e2c:	f107 031c 	add.w	r3, r7, #28
 8003e30:	4619      	mov	r1, r3
 8003e32:	4804      	ldr	r0, [pc, #16]	; (8003e44 <MX_GPIO_Init+0xd8>)
 8003e34:	f001 ff94 	bl	8005d60 <HAL_GPIO_Init>

}
 8003e38:	bf00      	nop
 8003e3a:	3730      	adds	r7, #48	; 0x30
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	40023800 	.word	0x40023800
 8003e44:	40020800 	.word	0x40020800

08003e48 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
	/* init code for USB_DEVICE */
	MX_USB_DEVICE_Init();
 8003e50:	f012 fd14 	bl	801687c <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8003e54:	2001      	movs	r0, #1
 8003e56:	f00e fe39 	bl	8012acc <osDelay>
 8003e5a:	e7fb      	b.n	8003e54 <StartDefaultTask+0xc>

08003e5c <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a04      	ldr	r2, [pc, #16]	; (8003e7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d101      	bne.n	8003e72 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8003e6e:	f001 faaf 	bl	80053d0 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8003e72:	bf00      	nop
 8003e74:	3708      	adds	r7, #8
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	40010000 	.word	0x40010000

08003e80 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8003e80:	b480      	push	{r7}
 8003e82:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8003e84:	bf00      	nop
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
	...

08003e90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003e96:	4b11      	ldr	r3, [pc, #68]	; (8003edc <HAL_MspInit+0x4c>)
 8003e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9a:	4a10      	ldr	r2, [pc, #64]	; (8003edc <HAL_MspInit+0x4c>)
 8003e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ea0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ea2:	4b0e      	ldr	r3, [pc, #56]	; (8003edc <HAL_MspInit+0x4c>)
 8003ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eaa:	607b      	str	r3, [r7, #4]
 8003eac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003eae:	4b0b      	ldr	r3, [pc, #44]	; (8003edc <HAL_MspInit+0x4c>)
 8003eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb2:	4a0a      	ldr	r2, [pc, #40]	; (8003edc <HAL_MspInit+0x4c>)
 8003eb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003eb8:	6453      	str	r3, [r2, #68]	; 0x44
 8003eba:	4b08      	ldr	r3, [pc, #32]	; (8003edc <HAL_MspInit+0x4c>)
 8003ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ebe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ec2:	603b      	str	r3, [r7, #0]
 8003ec4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	210f      	movs	r1, #15
 8003eca:	f06f 0001 	mvn.w	r0, #1
 8003ece:	f001 fb79 	bl	80055c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ed2:	bf00      	nop
 8003ed4:	3708      	adds	r7, #8
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	40023800 	.word	0x40023800

08003ee0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b08a      	sub	sp, #40	; 0x28
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ee8:	f107 0314 	add.w	r3, r7, #20
 8003eec:	2200      	movs	r2, #0
 8003eee:	601a      	str	r2, [r3, #0]
 8003ef0:	605a      	str	r2, [r3, #4]
 8003ef2:	609a      	str	r2, [r3, #8]
 8003ef4:	60da      	str	r2, [r3, #12]
 8003ef6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a65      	ldr	r2, [pc, #404]	; (8004094 <HAL_SD_MspInit+0x1b4>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	f040 80c3 	bne.w	800408a <HAL_SD_MspInit+0x1aa>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003f04:	4b64      	ldr	r3, [pc, #400]	; (8004098 <HAL_SD_MspInit+0x1b8>)
 8003f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f08:	4a63      	ldr	r2, [pc, #396]	; (8004098 <HAL_SD_MspInit+0x1b8>)
 8003f0a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003f0e:	6453      	str	r3, [r2, #68]	; 0x44
 8003f10:	4b61      	ldr	r3, [pc, #388]	; (8004098 <HAL_SD_MspInit+0x1b8>)
 8003f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f18:	613b      	str	r3, [r7, #16]
 8003f1a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f1c:	4b5e      	ldr	r3, [pc, #376]	; (8004098 <HAL_SD_MspInit+0x1b8>)
 8003f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f20:	4a5d      	ldr	r2, [pc, #372]	; (8004098 <HAL_SD_MspInit+0x1b8>)
 8003f22:	f043 0304 	orr.w	r3, r3, #4
 8003f26:	6313      	str	r3, [r2, #48]	; 0x30
 8003f28:	4b5b      	ldr	r3, [pc, #364]	; (8004098 <HAL_SD_MspInit+0x1b8>)
 8003f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2c:	f003 0304 	and.w	r3, r3, #4
 8003f30:	60fb      	str	r3, [r7, #12]
 8003f32:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f34:	4b58      	ldr	r3, [pc, #352]	; (8004098 <HAL_SD_MspInit+0x1b8>)
 8003f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f38:	4a57      	ldr	r2, [pc, #348]	; (8004098 <HAL_SD_MspInit+0x1b8>)
 8003f3a:	f043 0308 	orr.w	r3, r3, #8
 8003f3e:	6313      	str	r3, [r2, #48]	; 0x30
 8003f40:	4b55      	ldr	r3, [pc, #340]	; (8004098 <HAL_SD_MspInit+0x1b8>)
 8003f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f44:	f003 0308 	and.w	r3, r3, #8
 8003f48:	60bb      	str	r3, [r7, #8]
 8003f4a:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8003f4c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8003f50:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f52:	2302      	movs	r3, #2
 8003f54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f56:	2300      	movs	r3, #0
 8003f58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003f5e:	230c      	movs	r3, #12
 8003f60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f62:	f107 0314 	add.w	r3, r7, #20
 8003f66:	4619      	mov	r1, r3
 8003f68:	484c      	ldr	r0, [pc, #304]	; (800409c <HAL_SD_MspInit+0x1bc>)
 8003f6a:	f001 fef9 	bl	8005d60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003f6e:	2304      	movs	r3, #4
 8003f70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f72:	2302      	movs	r3, #2
 8003f74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f76:	2300      	movs	r3, #0
 8003f78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003f7e:	230c      	movs	r3, #12
 8003f80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f82:	f107 0314 	add.w	r3, r7, #20
 8003f86:	4619      	mov	r1, r3
 8003f88:	4845      	ldr	r0, [pc, #276]	; (80040a0 <HAL_SD_MspInit+0x1c0>)
 8003f8a:	f001 fee9 	bl	8005d60 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8003f8e:	4b45      	ldr	r3, [pc, #276]	; (80040a4 <HAL_SD_MspInit+0x1c4>)
 8003f90:	4a45      	ldr	r2, [pc, #276]	; (80040a8 <HAL_SD_MspInit+0x1c8>)
 8003f92:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8003f94:	4b43      	ldr	r3, [pc, #268]	; (80040a4 <HAL_SD_MspInit+0x1c4>)
 8003f96:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003f9a:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f9c:	4b41      	ldr	r3, [pc, #260]	; (80040a4 <HAL_SD_MspInit+0x1c4>)
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003fa2:	4b40      	ldr	r3, [pc, #256]	; (80040a4 <HAL_SD_MspInit+0x1c4>)
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003fa8:	4b3e      	ldr	r3, [pc, #248]	; (80040a4 <HAL_SD_MspInit+0x1c4>)
 8003faa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003fae:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003fb0:	4b3c      	ldr	r3, [pc, #240]	; (80040a4 <HAL_SD_MspInit+0x1c4>)
 8003fb2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003fb6:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003fb8:	4b3a      	ldr	r3, [pc, #232]	; (80040a4 <HAL_SD_MspInit+0x1c4>)
 8003fba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003fbe:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8003fc0:	4b38      	ldr	r3, [pc, #224]	; (80040a4 <HAL_SD_MspInit+0x1c4>)
 8003fc2:	2220      	movs	r2, #32
 8003fc4:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003fc6:	4b37      	ldr	r3, [pc, #220]	; (80040a4 <HAL_SD_MspInit+0x1c4>)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003fcc:	4b35      	ldr	r3, [pc, #212]	; (80040a4 <HAL_SD_MspInit+0x1c4>)
 8003fce:	2204      	movs	r2, #4
 8003fd0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003fd2:	4b34      	ldr	r3, [pc, #208]	; (80040a4 <HAL_SD_MspInit+0x1c4>)
 8003fd4:	2203      	movs	r2, #3
 8003fd6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8003fd8:	4b32      	ldr	r3, [pc, #200]	; (80040a4 <HAL_SD_MspInit+0x1c4>)
 8003fda:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003fde:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8003fe0:	4b30      	ldr	r3, [pc, #192]	; (80040a4 <HAL_SD_MspInit+0x1c4>)
 8003fe2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003fe6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8003fe8:	482e      	ldr	r0, [pc, #184]	; (80040a4 <HAL_SD_MspInit+0x1c4>)
 8003fea:	f001 fb15 	bl	8005618 <HAL_DMA_Init>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d001      	beq.n	8003ff8 <HAL_SD_MspInit+0x118>
    {
      Error_Handler();
 8003ff4:	f7ff ff44 	bl	8003e80 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a2a      	ldr	r2, [pc, #168]	; (80040a4 <HAL_SD_MspInit+0x1c4>)
 8003ffc:	641a      	str	r2, [r3, #64]	; 0x40
 8003ffe:	4a29      	ldr	r2, [pc, #164]	; (80040a4 <HAL_SD_MspInit+0x1c4>)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8004004:	4b29      	ldr	r3, [pc, #164]	; (80040ac <HAL_SD_MspInit+0x1cc>)
 8004006:	4a2a      	ldr	r2, [pc, #168]	; (80040b0 <HAL_SD_MspInit+0x1d0>)
 8004008:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 800400a:	4b28      	ldr	r3, [pc, #160]	; (80040ac <HAL_SD_MspInit+0x1cc>)
 800400c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004010:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004012:	4b26      	ldr	r3, [pc, #152]	; (80040ac <HAL_SD_MspInit+0x1cc>)
 8004014:	2240      	movs	r2, #64	; 0x40
 8004016:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004018:	4b24      	ldr	r3, [pc, #144]	; (80040ac <HAL_SD_MspInit+0x1cc>)
 800401a:	2200      	movs	r2, #0
 800401c:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800401e:	4b23      	ldr	r3, [pc, #140]	; (80040ac <HAL_SD_MspInit+0x1cc>)
 8004020:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004024:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004026:	4b21      	ldr	r3, [pc, #132]	; (80040ac <HAL_SD_MspInit+0x1cc>)
 8004028:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800402c:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800402e:	4b1f      	ldr	r3, [pc, #124]	; (80040ac <HAL_SD_MspInit+0x1cc>)
 8004030:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004034:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8004036:	4b1d      	ldr	r3, [pc, #116]	; (80040ac <HAL_SD_MspInit+0x1cc>)
 8004038:	2220      	movs	r2, #32
 800403a:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800403c:	4b1b      	ldr	r3, [pc, #108]	; (80040ac <HAL_SD_MspInit+0x1cc>)
 800403e:	2200      	movs	r2, #0
 8004040:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004042:	4b1a      	ldr	r3, [pc, #104]	; (80040ac <HAL_SD_MspInit+0x1cc>)
 8004044:	2204      	movs	r2, #4
 8004046:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004048:	4b18      	ldr	r3, [pc, #96]	; (80040ac <HAL_SD_MspInit+0x1cc>)
 800404a:	2203      	movs	r2, #3
 800404c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 800404e:	4b17      	ldr	r3, [pc, #92]	; (80040ac <HAL_SD_MspInit+0x1cc>)
 8004050:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004054:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8004056:	4b15      	ldr	r3, [pc, #84]	; (80040ac <HAL_SD_MspInit+0x1cc>)
 8004058:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800405c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 800405e:	4813      	ldr	r0, [pc, #76]	; (80040ac <HAL_SD_MspInit+0x1cc>)
 8004060:	f001 fada 	bl	8005618 <HAL_DMA_Init>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <HAL_SD_MspInit+0x18e>
    {
      Error_Handler();
 800406a:	f7ff ff09 	bl	8003e80 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a0e      	ldr	r2, [pc, #56]	; (80040ac <HAL_SD_MspInit+0x1cc>)
 8004072:	63da      	str	r2, [r3, #60]	; 0x3c
 8004074:	4a0d      	ldr	r2, [pc, #52]	; (80040ac <HAL_SD_MspInit+0x1cc>)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 800407a:	2200      	movs	r2, #0
 800407c:	2105      	movs	r1, #5
 800407e:	2031      	movs	r0, #49	; 0x31
 8004080:	f001 faa0 	bl	80055c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8004084:	2031      	movs	r0, #49	; 0x31
 8004086:	f001 fab9 	bl	80055fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800408a:	bf00      	nop
 800408c:	3728      	adds	r7, #40	; 0x28
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	40012c00 	.word	0x40012c00
 8004098:	40023800 	.word	0x40023800
 800409c:	40020800 	.word	0x40020800
 80040a0:	40020c00 	.word	0x40020c00
 80040a4:	2000cbec 	.word	0x2000cbec
 80040a8:	40026458 	.word	0x40026458
 80040ac:	20014d6c 	.word	0x20014d6c
 80040b0:	400264a0 	.word	0x400264a0

080040b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b08e      	sub	sp, #56	; 0x38
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040c0:	2200      	movs	r2, #0
 80040c2:	601a      	str	r2, [r3, #0]
 80040c4:	605a      	str	r2, [r3, #4]
 80040c6:	609a      	str	r2, [r3, #8]
 80040c8:	60da      	str	r2, [r3, #12]
 80040ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a68      	ldr	r2, [pc, #416]	; (8004274 <HAL_SPI_MspInit+0x1c0>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d131      	bne.n	800413a <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80040d6:	4b68      	ldr	r3, [pc, #416]	; (8004278 <HAL_SPI_MspInit+0x1c4>)
 80040d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040da:	4a67      	ldr	r2, [pc, #412]	; (8004278 <HAL_SPI_MspInit+0x1c4>)
 80040dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80040e0:	6453      	str	r3, [r2, #68]	; 0x44
 80040e2:	4b65      	ldr	r3, [pc, #404]	; (8004278 <HAL_SPI_MspInit+0x1c4>)
 80040e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040ea:	623b      	str	r3, [r7, #32]
 80040ec:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040ee:	4b62      	ldr	r3, [pc, #392]	; (8004278 <HAL_SPI_MspInit+0x1c4>)
 80040f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f2:	4a61      	ldr	r2, [pc, #388]	; (8004278 <HAL_SPI_MspInit+0x1c4>)
 80040f4:	f043 0301 	orr.w	r3, r3, #1
 80040f8:	6313      	str	r3, [r2, #48]	; 0x30
 80040fa:	4b5f      	ldr	r3, [pc, #380]	; (8004278 <HAL_SPI_MspInit+0x1c4>)
 80040fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fe:	f003 0301 	and.w	r3, r3, #1
 8004102:	61fb      	str	r3, [r7, #28]
 8004104:	69fb      	ldr	r3, [r7, #28]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA15     ------> SPI1_NSS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_15;
 8004106:	f248 03e0 	movw	r3, #32992	; 0x80e0
 800410a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800410c:	2302      	movs	r3, #2
 800410e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004110:	2300      	movs	r3, #0
 8004112:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004114:	2303      	movs	r3, #3
 8004116:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004118:	2305      	movs	r3, #5
 800411a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800411c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004120:	4619      	mov	r1, r3
 8004122:	4856      	ldr	r0, [pc, #344]	; (800427c <HAL_SPI_MspInit+0x1c8>)
 8004124:	f001 fe1c 	bl	8005d60 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8004128:	2200      	movs	r2, #0
 800412a:	2105      	movs	r1, #5
 800412c:	2023      	movs	r0, #35	; 0x23
 800412e:	f001 fa49 	bl	80055c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8004132:	2023      	movs	r0, #35	; 0x23
 8004134:	f001 fa62 	bl	80055fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8004138:	e097      	b.n	800426a <HAL_SPI_MspInit+0x1b6>
  else if(hspi->Instance==SPI2)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a50      	ldr	r2, [pc, #320]	; (8004280 <HAL_SPI_MspInit+0x1cc>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d131      	bne.n	80041a8 <HAL_SPI_MspInit+0xf4>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004144:	4b4c      	ldr	r3, [pc, #304]	; (8004278 <HAL_SPI_MspInit+0x1c4>)
 8004146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004148:	4a4b      	ldr	r2, [pc, #300]	; (8004278 <HAL_SPI_MspInit+0x1c4>)
 800414a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800414e:	6413      	str	r3, [r2, #64]	; 0x40
 8004150:	4b49      	ldr	r3, [pc, #292]	; (8004278 <HAL_SPI_MspInit+0x1c4>)
 8004152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004154:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004158:	61bb      	str	r3, [r7, #24]
 800415a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800415c:	4b46      	ldr	r3, [pc, #280]	; (8004278 <HAL_SPI_MspInit+0x1c4>)
 800415e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004160:	4a45      	ldr	r2, [pc, #276]	; (8004278 <HAL_SPI_MspInit+0x1c4>)
 8004162:	f043 0302 	orr.w	r3, r3, #2
 8004166:	6313      	str	r3, [r2, #48]	; 0x30
 8004168:	4b43      	ldr	r3, [pc, #268]	; (8004278 <HAL_SPI_MspInit+0x1c4>)
 800416a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416c:	f003 0302 	and.w	r3, r3, #2
 8004170:	617b      	str	r3, [r7, #20]
 8004172:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004174:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8004178:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800417a:	2302      	movs	r3, #2
 800417c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800417e:	2300      	movs	r3, #0
 8004180:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004182:	2303      	movs	r3, #3
 8004184:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004186:	2305      	movs	r3, #5
 8004188:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800418a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800418e:	4619      	mov	r1, r3
 8004190:	483c      	ldr	r0, [pc, #240]	; (8004284 <HAL_SPI_MspInit+0x1d0>)
 8004192:	f001 fde5 	bl	8005d60 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8004196:	2200      	movs	r2, #0
 8004198:	2105      	movs	r1, #5
 800419a:	2024      	movs	r0, #36	; 0x24
 800419c:	f001 fa12 	bl	80055c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80041a0:	2024      	movs	r0, #36	; 0x24
 80041a2:	f001 fa2b 	bl	80055fc <HAL_NVIC_EnableIRQ>
}
 80041a6:	e060      	b.n	800426a <HAL_SPI_MspInit+0x1b6>
  else if(hspi->Instance==SPI3)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a36      	ldr	r2, [pc, #216]	; (8004288 <HAL_SPI_MspInit+0x1d4>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d15b      	bne.n	800426a <HAL_SPI_MspInit+0x1b6>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80041b2:	4b31      	ldr	r3, [pc, #196]	; (8004278 <HAL_SPI_MspInit+0x1c4>)
 80041b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b6:	4a30      	ldr	r2, [pc, #192]	; (8004278 <HAL_SPI_MspInit+0x1c4>)
 80041b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041bc:	6413      	str	r3, [r2, #64]	; 0x40
 80041be:	4b2e      	ldr	r3, [pc, #184]	; (8004278 <HAL_SPI_MspInit+0x1c4>)
 80041c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041c6:	613b      	str	r3, [r7, #16]
 80041c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041ca:	4b2b      	ldr	r3, [pc, #172]	; (8004278 <HAL_SPI_MspInit+0x1c4>)
 80041cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ce:	4a2a      	ldr	r2, [pc, #168]	; (8004278 <HAL_SPI_MspInit+0x1c4>)
 80041d0:	f043 0301 	orr.w	r3, r3, #1
 80041d4:	6313      	str	r3, [r2, #48]	; 0x30
 80041d6:	4b28      	ldr	r3, [pc, #160]	; (8004278 <HAL_SPI_MspInit+0x1c4>)
 80041d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041da:	f003 0301 	and.w	r3, r3, #1
 80041de:	60fb      	str	r3, [r7, #12]
 80041e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041e2:	4b25      	ldr	r3, [pc, #148]	; (8004278 <HAL_SPI_MspInit+0x1c4>)
 80041e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e6:	4a24      	ldr	r2, [pc, #144]	; (8004278 <HAL_SPI_MspInit+0x1c4>)
 80041e8:	f043 0302 	orr.w	r3, r3, #2
 80041ec:	6313      	str	r3, [r2, #48]	; 0x30
 80041ee:	4b22      	ldr	r3, [pc, #136]	; (8004278 <HAL_SPI_MspInit+0x1c4>)
 80041f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f2:	f003 0302 	and.w	r3, r3, #2
 80041f6:	60bb      	str	r3, [r7, #8]
 80041f8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80041fa:	2310      	movs	r3, #16
 80041fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041fe:	2302      	movs	r3, #2
 8004200:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004202:	2300      	movs	r3, #0
 8004204:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004206:	2303      	movs	r3, #3
 8004208:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800420a:	2306      	movs	r3, #6
 800420c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800420e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004212:	4619      	mov	r1, r3
 8004214:	4819      	ldr	r0, [pc, #100]	; (800427c <HAL_SPI_MspInit+0x1c8>)
 8004216:	f001 fda3 	bl	8005d60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800421a:	2304      	movs	r3, #4
 800421c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800421e:	2302      	movs	r3, #2
 8004220:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004222:	2300      	movs	r3, #0
 8004224:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004226:	2303      	movs	r3, #3
 8004228:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800422a:	2307      	movs	r3, #7
 800422c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800422e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004232:	4619      	mov	r1, r3
 8004234:	4813      	ldr	r0, [pc, #76]	; (8004284 <HAL_SPI_MspInit+0x1d0>)
 8004236:	f001 fd93 	bl	8005d60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800423a:	2318      	movs	r3, #24
 800423c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800423e:	2302      	movs	r3, #2
 8004240:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004242:	2300      	movs	r3, #0
 8004244:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004246:	2303      	movs	r3, #3
 8004248:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800424a:	2306      	movs	r3, #6
 800424c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800424e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004252:	4619      	mov	r1, r3
 8004254:	480b      	ldr	r0, [pc, #44]	; (8004284 <HAL_SPI_MspInit+0x1d0>)
 8004256:	f001 fd83 	bl	8005d60 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 800425a:	2200      	movs	r2, #0
 800425c:	2105      	movs	r1, #5
 800425e:	2033      	movs	r0, #51	; 0x33
 8004260:	f001 f9b0 	bl	80055c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8004264:	2033      	movs	r0, #51	; 0x33
 8004266:	f001 f9c9 	bl	80055fc <HAL_NVIC_EnableIRQ>
}
 800426a:	bf00      	nop
 800426c:	3738      	adds	r7, #56	; 0x38
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	40013000 	.word	0x40013000
 8004278:	40023800 	.word	0x40023800
 800427c:	40020000 	.word	0x40020000
 8004280:	40003800 	.word	0x40003800
 8004284:	40020400 	.word	0x40020400
 8004288:	40003c00 	.word	0x40003c00

0800428c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b08a      	sub	sp, #40	; 0x28
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004294:	f107 0314 	add.w	r3, r7, #20
 8004298:	2200      	movs	r2, #0
 800429a:	601a      	str	r2, [r3, #0]
 800429c:	605a      	str	r2, [r3, #4]
 800429e:	609a      	str	r2, [r3, #8]
 80042a0:	60da      	str	r2, [r3, #12]
 80042a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a1b      	ldr	r2, [pc, #108]	; (8004318 <HAL_UART_MspInit+0x8c>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d130      	bne.n	8004310 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80042ae:	4b1b      	ldr	r3, [pc, #108]	; (800431c <HAL_UART_MspInit+0x90>)
 80042b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b2:	4a1a      	ldr	r2, [pc, #104]	; (800431c <HAL_UART_MspInit+0x90>)
 80042b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80042b8:	6413      	str	r3, [r2, #64]	; 0x40
 80042ba:	4b18      	ldr	r3, [pc, #96]	; (800431c <HAL_UART_MspInit+0x90>)
 80042bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042be:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80042c2:	613b      	str	r3, [r7, #16]
 80042c4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80042c6:	4b15      	ldr	r3, [pc, #84]	; (800431c <HAL_UART_MspInit+0x90>)
 80042c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ca:	4a14      	ldr	r2, [pc, #80]	; (800431c <HAL_UART_MspInit+0x90>)
 80042cc:	f043 0310 	orr.w	r3, r3, #16
 80042d0:	6313      	str	r3, [r2, #48]	; 0x30
 80042d2:	4b12      	ldr	r3, [pc, #72]	; (800431c <HAL_UART_MspInit+0x90>)
 80042d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d6:	f003 0310 	and.w	r3, r3, #16
 80042da:	60fb      	str	r3, [r7, #12]
 80042dc:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration    
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80042de:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80042e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042e4:	2302      	movs	r3, #2
 80042e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042e8:	2300      	movs	r3, #0
 80042ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042ec:	2303      	movs	r3, #3
 80042ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80042f0:	2308      	movs	r3, #8
 80042f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80042f4:	f107 0314 	add.w	r3, r7, #20
 80042f8:	4619      	mov	r1, r3
 80042fa:	4809      	ldr	r0, [pc, #36]	; (8004320 <HAL_UART_MspInit+0x94>)
 80042fc:	f001 fd30 	bl	8005d60 <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 8004300:	2200      	movs	r2, #0
 8004302:	2105      	movs	r1, #5
 8004304:	2052      	movs	r0, #82	; 0x52
 8004306:	f001 f95d 	bl	80055c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 800430a:	2052      	movs	r0, #82	; 0x52
 800430c:	f001 f976 	bl	80055fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8004310:	bf00      	nop
 8004312:	3728      	adds	r7, #40	; 0x28
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}
 8004318:	40007800 	.word	0x40007800
 800431c:	40023800 	.word	0x40023800
 8004320:	40021000 	.word	0x40021000

08004324 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b08c      	sub	sp, #48	; 0x30
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800432c:	2300      	movs	r3, #0
 800432e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004330:	2300      	movs	r3, #0
 8004332:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8004334:	2200      	movs	r2, #0
 8004336:	6879      	ldr	r1, [r7, #4]
 8004338:	2019      	movs	r0, #25
 800433a:	f001 f943 	bl	80055c4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800433e:	2019      	movs	r0, #25
 8004340:	f001 f95c 	bl	80055fc <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004344:	4b1f      	ldr	r3, [pc, #124]	; (80043c4 <HAL_InitTick+0xa0>)
 8004346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004348:	4a1e      	ldr	r2, [pc, #120]	; (80043c4 <HAL_InitTick+0xa0>)
 800434a:	f043 0301 	orr.w	r3, r3, #1
 800434e:	6453      	str	r3, [r2, #68]	; 0x44
 8004350:	4b1c      	ldr	r3, [pc, #112]	; (80043c4 <HAL_InitTick+0xa0>)
 8004352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004354:	f003 0301 	and.w	r3, r3, #1
 8004358:	60fb      	str	r3, [r7, #12]
 800435a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800435c:	f107 0210 	add.w	r2, r7, #16
 8004360:	f107 0314 	add.w	r3, r7, #20
 8004364:	4611      	mov	r1, r2
 8004366:	4618      	mov	r0, r3
 8004368:	f003 fd32 	bl	8007dd0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800436c:	f003 fd1c 	bl	8007da8 <HAL_RCC_GetPCLK2Freq>
 8004370:	4603      	mov	r3, r0
 8004372:	005b      	lsls	r3, r3, #1
 8004374:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8004376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004378:	4a13      	ldr	r2, [pc, #76]	; (80043c8 <HAL_InitTick+0xa4>)
 800437a:	fba2 2303 	umull	r2, r3, r2, r3
 800437e:	0c9b      	lsrs	r3, r3, #18
 8004380:	3b01      	subs	r3, #1
 8004382:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8004384:	4b11      	ldr	r3, [pc, #68]	; (80043cc <HAL_InitTick+0xa8>)
 8004386:	4a12      	ldr	r2, [pc, #72]	; (80043d0 <HAL_InitTick+0xac>)
 8004388:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800438a:	4b10      	ldr	r3, [pc, #64]	; (80043cc <HAL_InitTick+0xa8>)
 800438c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004390:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8004392:	4a0e      	ldr	r2, [pc, #56]	; (80043cc <HAL_InitTick+0xa8>)
 8004394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004396:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8004398:	4b0c      	ldr	r3, [pc, #48]	; (80043cc <HAL_InitTick+0xa8>)
 800439a:	2200      	movs	r2, #0
 800439c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800439e:	4b0b      	ldr	r3, [pc, #44]	; (80043cc <HAL_InitTick+0xa8>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80043a4:	4809      	ldr	r0, [pc, #36]	; (80043cc <HAL_InitTick+0xa8>)
 80043a6:	f006 fa44 	bl	800a832 <HAL_TIM_Base_Init>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d104      	bne.n	80043ba <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80043b0:	4806      	ldr	r0, [pc, #24]	; (80043cc <HAL_InitTick+0xa8>)
 80043b2:	f006 fa73 	bl	800a89c <HAL_TIM_Base_Start_IT>
 80043b6:	4603      	mov	r3, r0
 80043b8:	e000      	b.n	80043bc <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3730      	adds	r7, #48	; 0x30
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	40023800 	.word	0x40023800
 80043c8:	431bde83 	.word	0x431bde83
 80043cc:	20014dd0 	.word	0x20014dd0
 80043d0:	40010000 	.word	0x40010000

080043d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80043d4:	b480      	push	{r7}
 80043d6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80043d8:	bf00      	nop
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr

080043e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80043e2:	b480      	push	{r7}
 80043e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80043e6:	e7fe      	b.n	80043e6 <HardFault_Handler+0x4>

080043e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80043e8:	b480      	push	{r7}
 80043ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80043ec:	e7fe      	b.n	80043ec <MemManage_Handler+0x4>

080043ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80043ee:	b480      	push	{r7}
 80043f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80043f2:	e7fe      	b.n	80043f2 <BusFault_Handler+0x4>

080043f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80043f4:	b480      	push	{r7}
 80043f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80043f8:	e7fe      	b.n	80043f8 <UsageFault_Handler+0x4>

080043fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80043fa:	b480      	push	{r7}
 80043fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80043fe:	bf00      	nop
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800440c:	4802      	ldr	r0, [pc, #8]	; (8004418 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800440e:	f006 fa6f 	bl	800a8f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004412:	bf00      	nop
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	20014dd0 	.word	0x20014dd0

0800441c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8004420:	4802      	ldr	r0, [pc, #8]	; (800442c <SPI1_IRQHandler+0x10>)
 8004422:	f005 fd9d 	bl	8009f60 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8004426:	bf00      	nop
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	20010c4c 	.word	0x20010c4c

08004430 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8004434:	4802      	ldr	r0, [pc, #8]	; (8004440 <SPI2_IRQHandler+0x10>)
 8004436:	f005 fd93 	bl	8009f60 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800443a:	bf00      	nop
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	2000888c 	.word	0x2000888c

08004444 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8004448:	4802      	ldr	r0, [pc, #8]	; (8004454 <SDMMC1_IRQHandler+0x10>)
 800444a:	f004 fb1b 	bl	8008a84 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800444e:	bf00      	nop
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	200089d8 	.word	0x200089d8

08004458 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 800445c:	4802      	ldr	r0, [pc, #8]	; (8004468 <SPI3_IRQHandler+0x10>)
 800445e:	f005 fd7f 	bl	8009f60 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8004462:	bf00      	nop
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	2000aa60 	.word	0x2000aa60

0800446c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8004470:	4802      	ldr	r0, [pc, #8]	; (800447c <DMA2_Stream3_IRQHandler+0x10>)
 8004472:	f001 fa01 	bl	8005878 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8004476:	bf00      	nop
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	2000cbec 	.word	0x2000cbec

08004480 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004484:	4802      	ldr	r0, [pc, #8]	; (8004490 <OTG_FS_IRQHandler+0x10>)
 8004486:	f001 ff8e 	bl	80063a6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800448a:	bf00      	nop
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	20016bf8 	.word	0x20016bf8

08004494 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8004498:	4802      	ldr	r0, [pc, #8]	; (80044a4 <DMA2_Stream6_IRQHandler+0x10>)
 800449a:	f001 f9ed 	bl	8005878 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800449e:	bf00      	nop
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	20014d6c 	.word	0x20014d6c

080044a8 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 80044ac:	4802      	ldr	r0, [pc, #8]	; (80044b8 <UART7_IRQHandler+0x10>)
 80044ae:	f006 fdd1 	bl	800b054 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 80044b2:	bf00      	nop
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	200088f0 	.word	0x200088f0

080044bc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80044c4:	4b11      	ldr	r3, [pc, #68]	; (800450c <_sbrk+0x50>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d102      	bne.n	80044d2 <_sbrk+0x16>
		heap_end = &end;
 80044cc:	4b0f      	ldr	r3, [pc, #60]	; (800450c <_sbrk+0x50>)
 80044ce:	4a10      	ldr	r2, [pc, #64]	; (8004510 <_sbrk+0x54>)
 80044d0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80044d2:	4b0e      	ldr	r3, [pc, #56]	; (800450c <_sbrk+0x50>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80044d8:	4b0c      	ldr	r3, [pc, #48]	; (800450c <_sbrk+0x50>)
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4413      	add	r3, r2
 80044e0:	466a      	mov	r2, sp
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d907      	bls.n	80044f6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80044e6:	f012 ff0b 	bl	8017300 <__errno>
 80044ea:	4602      	mov	r2, r0
 80044ec:	230c      	movs	r3, #12
 80044ee:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80044f0:	f04f 33ff 	mov.w	r3, #4294967295
 80044f4:	e006      	b.n	8004504 <_sbrk+0x48>
	}

	heap_end += incr;
 80044f6:	4b05      	ldr	r3, [pc, #20]	; (800450c <_sbrk+0x50>)
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4413      	add	r3, r2
 80044fe:	4a03      	ldr	r2, [pc, #12]	; (800450c <_sbrk+0x50>)
 8004500:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004502:	68fb      	ldr	r3, [r7, #12]
}
 8004504:	4618      	mov	r0, r3
 8004506:	3710      	adds	r7, #16
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}
 800450c:	20000328 	.word	0x20000328
 8004510:	20017000 	.word	0x20017000

08004514 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004514:	b480      	push	{r7}
 8004516:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004518:	4b15      	ldr	r3, [pc, #84]	; (8004570 <SystemInit+0x5c>)
 800451a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800451e:	4a14      	ldr	r2, [pc, #80]	; (8004570 <SystemInit+0x5c>)
 8004520:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004524:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004528:	4b12      	ldr	r3, [pc, #72]	; (8004574 <SystemInit+0x60>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a11      	ldr	r2, [pc, #68]	; (8004574 <SystemInit+0x60>)
 800452e:	f043 0301 	orr.w	r3, r3, #1
 8004532:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004534:	4b0f      	ldr	r3, [pc, #60]	; (8004574 <SystemInit+0x60>)
 8004536:	2200      	movs	r2, #0
 8004538:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800453a:	4b0e      	ldr	r3, [pc, #56]	; (8004574 <SystemInit+0x60>)
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	490d      	ldr	r1, [pc, #52]	; (8004574 <SystemInit+0x60>)
 8004540:	4b0d      	ldr	r3, [pc, #52]	; (8004578 <SystemInit+0x64>)
 8004542:	4013      	ands	r3, r2
 8004544:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004546:	4b0b      	ldr	r3, [pc, #44]	; (8004574 <SystemInit+0x60>)
 8004548:	4a0c      	ldr	r2, [pc, #48]	; (800457c <SystemInit+0x68>)
 800454a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800454c:	4b09      	ldr	r3, [pc, #36]	; (8004574 <SystemInit+0x60>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a08      	ldr	r2, [pc, #32]	; (8004574 <SystemInit+0x60>)
 8004552:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004556:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004558:	4b06      	ldr	r3, [pc, #24]	; (8004574 <SystemInit+0x60>)
 800455a:	2200      	movs	r2, #0
 800455c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800455e:	4b04      	ldr	r3, [pc, #16]	; (8004570 <SystemInit+0x5c>)
 8004560:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004564:	609a      	str	r2, [r3, #8]
#endif
}
 8004566:	bf00      	nop
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr
 8004570:	e000ed00 	.word	0xe000ed00
 8004574:	40023800 	.word	0x40023800
 8004578:	fef6ffff 	.word	0xfef6ffff
 800457c:	24003010 	.word	0x24003010

08004580 <vTaskController>:
#include "tasks/task_controller.h"

/* Abbreviation 'aw' is used to described everything related to the antiwindup */


void vTaskController(void *argument) {
 8004580:	b580      	push	{r7, lr}
 8004582:	f5ad 6d91 	sub.w	sp, sp, #1160	; 0x488
 8004586:	af00      	add	r7, sp, #0
 8004588:	1d3b      	adds	r3, r7, #4
 800458a:	6018      	str	r0, [r3, #0]
	/* For periodic update */
	uint32_t tick_count, tick_update;

	state_est_data_t state_placeholder;
    flight_phase_detection_t flight_phase_detection_placeholder = { 0 };
 800458c:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8004590:	2200      	movs	r2, #0
 8004592:	601a      	str	r2, [r3, #0]
 8004594:	605a      	str	r2, [r3, #4]
 8004596:	609a      	str	r2, [r3, #8]
    flight_phase_detection_t current_flight_phase_detection = { 0 };
 8004598:	f207 432c 	addw	r3, r7, #1068	; 0x42c
 800459c:	2200      	movs	r2, #0
 800459e:	601a      	str	r2, [r3, #0]
 80045a0:	605a      	str	r2, [r3, #4]
 80045a2:	609a      	str	r2, [r3, #8]

    /* Initialize the control_data struct */
    control_data_t control_data = { 0 };
 80045a4:	f107 0308 	add.w	r3, r7, #8
 80045a8:	4618      	mov	r0, r3
 80045aa:	f44f 6384 	mov.w	r3, #1056	; 0x420
 80045ae:	461a      	mov	r2, r3
 80045b0:	2100      	movs	r1, #0
 80045b2:	f012 feea 	bl	801738a <memset>
    control_data_init(&control_data);
 80045b6:	f107 0308 	add.w	r3, r7, #8
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7fd f84a 	bl	8001654 <control_data_init>

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 80045c0:	f00e f9ac 	bl	801291c <osKernelGetTickCount>
 80045c4:	f8c7 0484 	str.w	r0, [r7, #1156]	; 0x484
	tick_update = osKernelGetTickFreq() / CONTROLLER_SAMPLING_FREQ;
 80045c8:	f00e f9d0 	bl	801296c <osKernelGetTickFreq>
 80045cc:	4602      	mov	r2, r0
 80045ce:	4b4f      	ldr	r3, [pc, #316]	; (800470c <vTaskController+0x18c>)
 80045d0:	fba3 2302 	umull	r2, r3, r3, r2
 80045d4:	095b      	lsrs	r3, r3, #5
 80045d6:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480

	while (1) {
		/* Tick Update */
		tick_count += tick_update;
 80045da:	f8d7 2484 	ldr.w	r2, [r7, #1156]	; 0x484
 80045de:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 80045e2:	4413      	add	r3, r2
 80045e4:	f8c7 3484 	str.w	r3, [r7, #1156]	; 0x484

		/* Update Sensor Fusion Variables */
		if (osMutexGetOwner(state_est_mutex) == NULL) {
 80045e8:	4b49      	ldr	r3, [pc, #292]	; (8004710 <vTaskController+0x190>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4618      	mov	r0, r3
 80045ee:	f00e fc23 	bl	8012e38 <osMutexGetOwner>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d12b      	bne.n	8004650 <vTaskController+0xd0>
			state_placeholder.position_world[2] = state_est_data_global.position_world[2];
 80045f8:	4b46      	ldr	r3, [pc, #280]	; (8004714 <vTaskController+0x194>)
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
			state_placeholder.velocity_world[2] = state_est_data_global.velocity_world[2];
 8004600:	4b44      	ldr	r3, [pc, #272]	; (8004714 <vTaskController+0x194>)
 8004602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004604:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
			if (osMutexGetOwner(state_est_mutex) == NULL) {
 8004608:	4b41      	ldr	r3, [pc, #260]	; (8004710 <vTaskController+0x190>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4618      	mov	r0, r3
 800460e:	f00e fc13 	bl	8012e38 <osMutexGetOwner>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d11b      	bne.n	8004650 <vTaskController+0xd0>
				control_data.sf_velocity = ((float)state_placeholder.position_world[2]) / 1000;
 8004618:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 800461c:	ee07 3a90 	vmov	s15, r3
 8004620:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004624:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8004718 <vTaskController+0x198>
 8004628:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800462c:	f107 0308 	add.w	r3, r7, #8
 8004630:	edc3 7a04 	vstr	s15, [r3, #16]
				control_data.sf_ref_altitude_AGL = ((float)state_placeholder.velocity_world[2]) / 1000;
 8004634:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 8004638:	ee07 3a90 	vmov	s15, r3
 800463c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004640:	eddf 6a35 	vldr	s13, [pc, #212]	; 8004718 <vTaskController+0x198>
 8004644:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004648:	f107 0308 	add.w	r3, r7, #8
 800464c:	edc3 7a03 	vstr	s15, [r3, #12]
			}
		}

		/* update flight Phase */
		if (osMutexGetOwner(fsm_mutex) == NULL) {
 8004650:	4b32      	ldr	r3, [pc, #200]	; (800471c <vTaskController+0x19c>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4618      	mov	r0, r3
 8004656:	f00e fbef 	bl	8012e38 <osMutexGetOwner>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d122      	bne.n	80046a6 <vTaskController+0x126>
			flight_phase_detection_placeholder.flight_phase = global_flight_phase_detection.flight_phase;
 8004660:	4b2f      	ldr	r3, [pc, #188]	; (8004720 <vTaskController+0x1a0>)
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	f887 3438 	strb.w	r3, [r7, #1080]	; 0x438
			flight_phase_detection_placeholder.mach_regime = global_flight_phase_detection.mach_regime;
 8004668:	4b2d      	ldr	r3, [pc, #180]	; (8004720 <vTaskController+0x1a0>)
 800466a:	785b      	ldrb	r3, [r3, #1]
 800466c:	f887 3439 	strb.w	r3, [r7, #1081]	; 0x439
			flight_phase_detection_placeholder.mach_number = global_flight_phase_detection.mach_number;
 8004670:	4b2b      	ldr	r3, [pc, #172]	; (8004720 <vTaskController+0x1a0>)
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f207 423c 	addw	r2, r7, #1084	; 0x43c
 8004678:	6013      	str	r3, [r2, #0]
			if (osMutexGetOwner(fsm_mutex) == NULL) {
 800467a:	4b28      	ldr	r3, [pc, #160]	; (800471c <vTaskController+0x19c>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4618      	mov	r0, r3
 8004680:	f00e fbda 	bl	8012e38 <osMutexGetOwner>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d10d      	bne.n	80046a6 <vTaskController+0x126>
				current_flight_phase_detection.flight_phase = flight_phase_detection_placeholder.flight_phase;
 800468a:	f897 3438 	ldrb.w	r3, [r7, #1080]	; 0x438
 800468e:	f887 342c 	strb.w	r3, [r7, #1068]	; 0x42c
				current_flight_phase_detection.mach_regime = flight_phase_detection_placeholder.mach_regime;
 8004692:	f897 3439 	ldrb.w	r3, [r7, #1081]	; 0x439
 8004696:	f887 342d 	strb.w	r3, [r7, #1069]	; 0x42d
				current_flight_phase_detection.mach_number = flight_phase_detection_placeholder.mach_number;
 800469a:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f507 6286 	add.w	r2, r7, #1072	; 0x430
 80046a4:	6013      	str	r3, [r2, #0]
			}
		}

		/** MAKE SURE THE RIGHT CONTROLLER IS ACTIVE IS ACTIVE!!!!! **/
        if(LQR_ACTIVE) {
            compute_control_input(&control_data, &current_flight_phase_detection);
 80046a6:	f207 422c 	addw	r2, r7, #1068	; 0x42c
 80046aa:	f107 0308 	add.w	r3, r7, #8
 80046ae:	4611      	mov	r1, r2
 80046b0:	4618      	mov	r0, r3
 80046b2:	f7fc febd 	bl	8001430 <compute_control_input>
        }
        else {
            compute_test_control_input(&control_data);
        }
		/* Write Control Input into Global Variable */
		if (osMutexAcquire(controller_mutex, 10) == osOK) {
 80046b6:	4b1b      	ldr	r3, [pc, #108]	; (8004724 <vTaskController+0x1a4>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	210a      	movs	r1, #10
 80046bc:	4618      	mov	r0, r3
 80046be:	f00e fb0d 	bl	8012cdc <osMutexAcquire>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d112      	bne.n	80046ee <vTaskController+0x16e>
			controller_output_global = (int32_t)(control_data.control_input * 1000);
 80046c8:	f107 0308 	add.w	r3, r7, #8
 80046cc:	edd3 7a00 	vldr	s15, [r3]
 80046d0:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8004718 <vTaskController+0x198>
 80046d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80046d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046dc:	ee17 2a90 	vmov	r2, s15
 80046e0:	4b11      	ldr	r3, [pc, #68]	; (8004728 <vTaskController+0x1a8>)
 80046e2:	601a      	str	r2, [r3, #0]
			osMutexRelease(controller_mutex);
 80046e4:	4b0f      	ldr	r3, [pc, #60]	; (8004724 <vTaskController+0x1a4>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4618      	mov	r0, r3
 80046ea:	f00e fb55 	bl	8012d98 <osMutexRelease>
		}

		/* Log to SD Card */

		logControllerOutput(osKernelGetTickCount(), controller_output_global);
 80046ee:	f00e f915 	bl	801291c <osKernelGetTickCount>
 80046f2:	4602      	mov	r2, r0
 80046f4:	4b0c      	ldr	r3, [pc, #48]	; (8004728 <vTaskController+0x1a8>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4619      	mov	r1, r3
 80046fa:	4610      	mov	r0, r2
 80046fc:	f7ff f81a 	bl	8003734 <logControllerOutput>


		/* Sleep */
		osDelayUntil(tick_count);
 8004700:	f8d7 0484 	ldr.w	r0, [r7, #1156]	; 0x484
 8004704:	f00e fa10 	bl	8012b28 <osDelayUntil>
		tick_count += tick_update;
 8004708:	e767      	b.n	80045da <vTaskController+0x5a>
 800470a:	bf00      	nop
 800470c:	51eb851f 	.word	0x51eb851f
 8004710:	2000ab30 	.word	0x2000ab30
 8004714:	200002cc 	.word	0x200002cc
 8004718:	447a0000 	.word	0x447a0000
 800471c:	20008888 	.word	0x20008888
 8004720:	2000031c 	.word	0x2000031c
 8004724:	2000aac4 	.word	0x2000aac4
 8004728:	20000308 	.word	0x20000308

0800472c <vTaskFSM>:
 */

#include "tasks/task_fsm.h"


void vTaskFSM(void *argument) {
 800472c:	b5b0      	push	{r4, r5, r7, lr}
 800472e:	b0ae      	sub	sp, #184	; 0xb8
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
	/* For periodic update */
	uint32_t tick_count, tick_update;

	/* Phase detection struct */
	flight_phase_detection_t flight_phase_detection = { 0 };
 8004734:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004738:	2200      	movs	r2, #0
 800473a:	601a      	str	r2, [r3, #0]
 800473c:	605a      	str	r2, [r3, #4]
 800473e:	609a      	str	r2, [r3, #8]
	reset_flight_phase_detection(&flight_phase_detection);
 8004740:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004744:	4618      	mov	r0, r3
 8004746:	f7fd fbc5 	bl	8001ed4 <reset_flight_phase_detection>

	/*State Estimation data */
	state_est_data_t state_est_data_fsm = { 0 };
 800474a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800474e:	223c      	movs	r2, #60	; 0x3c
 8004750:	2100      	movs	r1, #0
 8004752:	4618      	mov	r0, r3
 8004754:	f012 fe19 	bl	801738a <memset>
	state_est_data_t state_est_data_fsm_dummy = { 0 };
 8004758:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800475c:	223c      	movs	r2, #60	; 0x3c
 800475e:	2100      	movs	r1, #0
 8004760:	4618      	mov	r0, r3
 8004762:	f012 fe12 	bl	801738a <memset>

	/* environment data */
	env_t environment;
	env_t dummy_env;
	init_env(&dummy_env);
 8004766:	f107 030c 	add.w	r3, r7, #12
 800476a:	4618      	mov	r0, r3
 800476c:	f7fd f8f4 	bl	8001958 <init_env>
	init_env(&environment);
 8004770:	f107 031c 	add.w	r3, r7, #28
 8004774:	4618      	mov	r0, r3
 8004776:	f7fd f8ef 	bl	8001958 <init_env>


	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 800477a:	f00e f8cf 	bl	801291c <osKernelGetTickCount>
 800477e:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
	tick_update = osKernelGetTickFreq() / FSM_SAMPLING_FREQ;
 8004782:	f00e f8f3 	bl	801296c <osKernelGetTickFreq>
 8004786:	4602      	mov	r2, r0
 8004788:	4b3c      	ldr	r3, [pc, #240]	; (800487c <vTaskFSM+0x150>)
 800478a:	fba3 2302 	umull	r2, r3, r3, r2
 800478e:	095b      	lsrs	r3, r3, #5
 8004790:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

	while (1) {
		/* Tick Update */
		tick_count += tick_update;
 8004794:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004798:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800479c:	4413      	add	r3, r2
 800479e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

		/* update state estimation data */
		if(osMutexGetOwner(state_est_mutex) == NULL){
 80047a2:	4b37      	ldr	r3, [pc, #220]	; (8004880 <vTaskFSM+0x154>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f00e fb46 	bl	8012e38 <osMutexGetOwner>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d123      	bne.n	80047fa <vTaskFSM+0xce>
			/* TODO: Check correct indexing */
			/* the value is multiplied by 1000 for conversion to int datatype for easy transport
			 * careful in other tasks!
			 */
			state_est_data_fsm_dummy = state_est_data_global;
 80047b2:	4b34      	ldr	r3, [pc, #208]	; (8004884 <vTaskFSM+0x158>)
 80047b4:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80047b8:	461d      	mov	r5, r3
 80047ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80047be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80047c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80047c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80047ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			if(osMutexGetOwner(state_est_mutex) == NULL){
 80047ce:	4b2c      	ldr	r3, [pc, #176]	; (8004880 <vTaskFSM+0x154>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4618      	mov	r0, r3
 80047d4:	f00e fb30 	bl	8012e38 <osMutexGetOwner>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d10d      	bne.n	80047fa <vTaskFSM+0xce>
				state_est_data_fsm = state_est_data_fsm_dummy;
 80047de:	f107 0468 	add.w	r4, r7, #104	; 0x68
 80047e2:	f107 052c 	add.w	r5, r7, #44	; 0x2c
 80047e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80047ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80047ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80047f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80047f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			}
		}
		/* Update Environment */
		if(osMutexGetOwner(environment_mutex) == NULL){
 80047fa:	4b23      	ldr	r3, [pc, #140]	; (8004888 <vTaskFSM+0x15c>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4618      	mov	r0, r3
 8004800:	f00e fb1a 	bl	8012e38 <osMutexGetOwner>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d114      	bne.n	8004834 <vTaskFSM+0x108>
			dummy_env = global_env;
 800480a:	4b20      	ldr	r3, [pc, #128]	; (800488c <vTaskFSM+0x160>)
 800480c:	f107 040c 	add.w	r4, r7, #12
 8004810:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004812:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			if(osMutexGetOwner(state_est_mutex) == NULL){
 8004816:	4b1a      	ldr	r3, [pc, #104]	; (8004880 <vTaskFSM+0x154>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4618      	mov	r0, r3
 800481c:	f00e fb0c 	bl	8012e38 <osMutexGetOwner>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d106      	bne.n	8004834 <vTaskFSM+0x108>
				environment = dummy_env;
 8004826:	f107 041c 	add.w	r4, r7, #28
 800482a:	f107 030c 	add.w	r3, r7, #12
 800482e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004830:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			}
		}

		/* get Flight Phase update */
		detect_flight_phase(&flight_phase_detection, &state_est_data_fsm, &environment);
 8004834:	f107 021c 	add.w	r2, r7, #28
 8004838:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800483c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004840:	4618      	mov	r0, r3
 8004842:	f7fd fa45 	bl	8001cd0 <detect_flight_phase>

		/* TODO Write NEW State in GLobal Variable */
		if(osMutexAcquire(fsm_mutex, 10) == osOK){
 8004846:	4b12      	ldr	r3, [pc, #72]	; (8004890 <vTaskFSM+0x164>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	210a      	movs	r1, #10
 800484c:	4618      	mov	r0, r3
 800484e:	f00e fa45 	bl	8012cdc <osMutexAcquire>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d10c      	bne.n	8004872 <vTaskFSM+0x146>
			global_flight_phase_detection = flight_phase_detection;
 8004858:	4b0e      	ldr	r3, [pc, #56]	; (8004894 <vTaskFSM+0x168>)
 800485a:	461c      	mov	r4, r3
 800485c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004860:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004864:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			osMutexRelease(fsm_mutex);
 8004868:	4b09      	ldr	r3, [pc, #36]	; (8004890 <vTaskFSM+0x164>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4618      	mov	r0, r3
 800486e:	f00e fa93 	bl	8012d98 <osMutexRelease>
		}

		/* Sleep */
		osDelayUntil(tick_count);
 8004872:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8004876:	f00e f957 	bl	8012b28 <osDelayUntil>
		tick_count += tick_update;
 800487a:	e78b      	b.n	8004794 <vTaskFSM+0x68>
 800487c:	51eb851f 	.word	0x51eb851f
 8004880:	2000ab30 	.word	0x2000ab30
 8004884:	200002cc 	.word	0x200002cc
 8004888:	200089d0 	.word	0x200089d0
 800488c:	2000030c 	.word	0x2000030c
 8004890:	20008888 	.word	0x20008888
 8004894:	2000031c 	.word	0x2000031c

08004898 <vTaskMotorCont>:
 */

#include "tasks/task_motor_control.h"


void vTaskMotorCont(void *argument) {
 8004898:	b590      	push	{r4, r7, lr}
 800489a:	b089      	sub	sp, #36	; 0x24
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]

	/* For periodic update */
	uint32_t tick_count, tick_update;

	osStatus_t motor_status = osOK;
 80048a0:	2300      	movs	r3, #0
 80048a2:	617b      	str	r3, [r7, #20]

	uint32_t desired_position = 0;
 80048a4:	2300      	movs	r3, #0
 80048a6:	61bb      	str	r3, [r7, #24]
	int32_t measured_position = 0;
 80048a8:	2300      	movs	r3, #0
 80048aa:	60fb      	str	r3, [r7, #12]

	while(EnableMotor() != osOK){};
 80048ac:	bf00      	nop
 80048ae:	f7fc fbb7 	bl	8001020 <EnableMotor>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d1fa      	bne.n	80048ae <vTaskMotorCont+0x16>

	while(SetPositionMode() != osOK){};
 80048b8:	bf00      	nop
 80048ba:	f7fc fc02 	bl	80010c2 <SetPositionMode>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d1fa      	bne.n	80048ba <vTaskMotorCont+0x22>


	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 80048c4:	f00e f82a 	bl	801291c <osKernelGetTickCount>
 80048c8:	61f8      	str	r0, [r7, #28]
	tick_update = osKernelGetTickFreq() / MOTOR_TASK_FREQUENCY;
 80048ca:	f00e f84f 	bl	801296c <osKernelGetTickFreq>
 80048ce:	4603      	mov	r3, r0
 80048d0:	4618      	mov	r0, r3
 80048d2:	f7fb fe37 	bl	8000544 <__aeabi_ui2d>
 80048d6:	f04f 0200 	mov.w	r2, #0
 80048da:	4b13      	ldr	r3, [pc, #76]	; (8004928 <vTaskMotorCont+0x90>)
 80048dc:	f7fb ffd6 	bl	800088c <__aeabi_ddiv>
 80048e0:	4603      	mov	r3, r0
 80048e2:	460c      	mov	r4, r1
 80048e4:	4618      	mov	r0, r3
 80048e6:	4621      	mov	r1, r4
 80048e8:	f7fc f956 	bl	8000b98 <__aeabi_d2uiz>
 80048ec:	4603      	mov	r3, r0
 80048ee:	613b      	str	r3, [r7, #16]

	for (;;) {
		tick_count += tick_update;
 80048f0:	69fa      	ldr	r2, [r7, #28]
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	4413      	add	r3, r2
 80048f6:	61fb      	str	r3, [r7, #28]
		motor_status = GetPosition(&measured_position);
 80048f8:	f107 030c 	add.w	r3, r7, #12
 80048fc:	4618      	mov	r0, r3
 80048fe:	f7fc fc29 	bl	8001154 <GetPosition>
 8004902:	6178      	str	r0, [r7, #20]
		motor_status = MoveToPosition(desired_position);
 8004904:	69b8      	ldr	r0, [r7, #24]
 8004906:	f7fc fbfc 	bl	8001102 <MoveToPosition>
 800490a:	6178      	str	r0, [r7, #20]
		desired_position = desired_position + 50;
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	3332      	adds	r3, #50	; 0x32
 8004910:	61bb      	str	r3, [r7, #24]
		if(desired_position > 500){
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004918:	d901      	bls.n	800491e <vTaskMotorCont+0x86>
			desired_position = 0;
 800491a:	2300      	movs	r3, #0
 800491c:	61bb      	str	r3, [r7, #24]
		}

		osDelayUntil(tick_count);
 800491e:	69f8      	ldr	r0, [r7, #28]
 8004920:	f00e f902 	bl	8012b28 <osDelayUntil>
		tick_count += tick_update;
 8004924:	e7e4      	b.n	80048f0 <vTaskMotorCont+0x58>
 8004926:	bf00      	nop
 8004928:	3fe00000 	.word	0x3fe00000

0800492c <vTaskSdCard>:
		break;
	}
	return 20;
}

void vTaskSdCard(void *argument) {
 800492c:	b5b0      	push	{r4, r5, r7, lr}
 800492e:	b0cc      	sub	sp, #304	; 0x130
 8004930:	af00      	add	r7, sp, #0
 8004932:	1d3b      	adds	r3, r7, #4
 8004934:	6018      	str	r0, [r3, #0]
	FRESULT res;
	char EULER_LOG_FILE_NAME[13] = "";
 8004936:	2300      	movs	r3, #0
 8004938:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800493c:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8004940:	2200      	movs	r2, #0
 8004942:	601a      	str	r2, [r3, #0]
 8004944:	605a      	str	r2, [r3, #4]
 8004946:	721a      	strb	r2, [r3, #8]
	UsbPrint("[STORAGE TASK] Starting SD Card Task..\n");
 8004948:	48c3      	ldr	r0, [pc, #780]	; (8004c58 <vTaskSdCard+0x32c>)
 800494a:	f7fe ff1b 	bl	8003784 <UsbPrint>

	resetSDCard: UsbPrint("[STORAGE TASK] Mounting SD card\n");
 800494e:	48c3      	ldr	r0, [pc, #780]	; (8004c5c <vTaskSdCard+0x330>)
 8004950:	f7fe ff18 	bl	8003784 <UsbPrint>
	do {
		res = f_mount(&EULER_FatFS, "", 1);
 8004954:	2201      	movs	r2, #1
 8004956:	49c2      	ldr	r1, [pc, #776]	; (8004c60 <vTaskSdCard+0x334>)
 8004958:	48c2      	ldr	r0, [pc, #776]	; (8004c64 <vTaskSdCard+0x338>)
 800495a:	f00c fed3 	bl	8011704 <f_mount>
 800495e:	4603      	mov	r3, r0
 8004960:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		if (res != FR_OK) {
 8004964:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004968:	2b00      	cmp	r3, #0
 800496a:	d00b      	beq.n	8004984 <vTaskSdCard+0x58>
			UsbPrint("[STORAGE TASK] Failed mounting SD card: %d\n", res);
 800496c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004970:	4619      	mov	r1, r3
 8004972:	48bd      	ldr	r0, [pc, #756]	; (8004c68 <vTaskSdCard+0x33c>)
 8004974:	f7fe ff06 	bl	8003784 <UsbPrint>
			// force sd card to be reinitialized
			disk.is_initialized[0] = 0;
 8004978:	4bbc      	ldr	r3, [pc, #752]	; (8004c6c <vTaskSdCard+0x340>)
 800497a:	2200      	movs	r2, #0
 800497c:	701a      	strb	r2, [r3, #0]
			osDelay(100);
 800497e:	2064      	movs	r0, #100	; 0x64
 8004980:	f00e f8a4 	bl	8012acc <osDelay>
		}
	} while (res != FR_OK);
 8004984:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004988:	2b00      	cmp	r3, #0
 800498a:	d1e3      	bne.n	8004954 <vTaskSdCard+0x28>

	if (!EULER_LOG_FILE_NAME[0]) {
 800498c:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 8004990:	2b00      	cmp	r3, #0
 8004992:	f040 80a9 	bne.w	8004ae8 <vTaskSdCard+0x1bc>
		UsbPrint("[STORAGE TASK] Creating file name\n");
 8004996:	48b6      	ldr	r0, [pc, #728]	; (8004c70 <vTaskSdCard+0x344>)
 8004998:	f7fe fef4 	bl	8003784 <UsbPrint>

		unsigned int file_number = 1;
 800499c:	2301      	movs	r3, #1
 800499e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

		DIR dj;
		FILINFO fno;
		res = f_findfirst(&dj, &fno, "", "LOG_???.CSV");
 80049a2:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80049a6:	f107 0008 	add.w	r0, r7, #8
 80049aa:	4bb2      	ldr	r3, [pc, #712]	; (8004c74 <vTaskSdCard+0x348>)
 80049ac:	4aac      	ldr	r2, [pc, #688]	; (8004c60 <vTaskSdCard+0x334>)
 80049ae:	f00d fe61 	bl	8012674 <f_findfirst>
 80049b2:	4603      	mov	r3, r0
 80049b4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		while (res == FR_OK && fno.fname[0]) {
 80049b8:	e02b      	b.n	8004a12 <vTaskSdCard+0xe6>
			unsigned int current_file_number = (fno.fname[4] - '0') * 100
 80049ba:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80049be:	3b30      	subs	r3, #48	; 0x30
 80049c0:	2264      	movs	r2, #100	; 0x64
 80049c2:	fb02 f103 	mul.w	r1, r2, r3
					+ (fno.fname[5] - '0') * 10 + (fno.fname[6] - '0');
 80049c6:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80049ca:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80049ce:	4613      	mov	r3, r2
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	4413      	add	r3, r2
 80049d4:	005b      	lsls	r3, r3, #1
 80049d6:	18ca      	adds	r2, r1, r3
 80049d8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80049dc:	3b30      	subs	r3, #48	; 0x30
 80049de:	4413      	add	r3, r2
			unsigned int current_file_number = (fno.fname[4] - '0') * 100
 80049e0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
			if (current_file_number + 1 > file_number) {
 80049e4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80049e8:	3301      	adds	r3, #1
 80049ea:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d204      	bcs.n	80049fc <vTaskSdCard+0xd0>
				file_number = current_file_number + 1;
 80049f2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80049f6:	3301      	adds	r3, #1
 80049f8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
			}
			res = f_findnext(&dj, &fno);
 80049fc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004a00:	f107 0308 	add.w	r3, r7, #8
 8004a04:	4611      	mov	r1, r2
 8004a06:	4618      	mov	r0, r3
 8004a08:	f00d fe0c 	bl	8012624 <f_findnext>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		while (res == FR_OK && fno.fname[0]) {
 8004a12:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d103      	bne.n	8004a22 <vTaskSdCard+0xf6>
 8004a1a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d1cb      	bne.n	80049ba <vTaskSdCard+0x8e>
		}
		if (res != FR_OK) {
 8004a22:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d006      	beq.n	8004a38 <vTaskSdCard+0x10c>
			UsbPrint("[STORAGE TASK] Failed finding first or next file: %d\n",
 8004a2a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004a2e:	4619      	mov	r1, r3
 8004a30:	4891      	ldr	r0, [pc, #580]	; (8004c78 <vTaskSdCard+0x34c>)
 8004a32:	f7fe fea7 	bl	8003784 <UsbPrint>
					res);
			goto resetSDCard;
 8004a36:	e78a      	b.n	800494e <vTaskSdCard+0x22>
		}

		strcpy(EULER_LOG_FILE_NAME, "LOG_000.CSV");
 8004a38:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004a3c:	4a8f      	ldr	r2, [pc, #572]	; (8004c7c <vTaskSdCard+0x350>)
 8004a3e:	ca07      	ldmia	r2, {r0, r1, r2}
 8004a40:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		EULER_LOG_FILE_NAME[6] = '0' + file_number % 10;
 8004a44:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8004a48:	4b8d      	ldr	r3, [pc, #564]	; (8004c80 <vTaskSdCard+0x354>)
 8004a4a:	fba3 2301 	umull	r2, r3, r3, r1
 8004a4e:	08da      	lsrs	r2, r3, #3
 8004a50:	4613      	mov	r3, r2
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	4413      	add	r3, r2
 8004a56:	005b      	lsls	r3, r3, #1
 8004a58:	1aca      	subs	r2, r1, r3
 8004a5a:	b2d3      	uxtb	r3, r2
 8004a5c:	3330      	adds	r3, #48	; 0x30
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
		EULER_LOG_FILE_NAME[5] = '0' + (file_number / 10) % 10;
 8004a64:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004a68:	4a85      	ldr	r2, [pc, #532]	; (8004c80 <vTaskSdCard+0x354>)
 8004a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a6e:	08d9      	lsrs	r1, r3, #3
 8004a70:	4b83      	ldr	r3, [pc, #524]	; (8004c80 <vTaskSdCard+0x354>)
 8004a72:	fba3 2301 	umull	r2, r3, r3, r1
 8004a76:	08da      	lsrs	r2, r3, #3
 8004a78:	4613      	mov	r3, r2
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	4413      	add	r3, r2
 8004a7e:	005b      	lsls	r3, r3, #1
 8004a80:	1aca      	subs	r2, r1, r3
 8004a82:	b2d3      	uxtb	r3, r2
 8004a84:	3330      	adds	r3, #48	; 0x30
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		EULER_LOG_FILE_NAME[4] = '0' + (file_number / 100) % 10;
 8004a8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004a90:	4a7c      	ldr	r2, [pc, #496]	; (8004c84 <vTaskSdCard+0x358>)
 8004a92:	fba2 2303 	umull	r2, r3, r2, r3
 8004a96:	0959      	lsrs	r1, r3, #5
 8004a98:	4b79      	ldr	r3, [pc, #484]	; (8004c80 <vTaskSdCard+0x354>)
 8004a9a:	fba3 2301 	umull	r2, r3, r3, r1
 8004a9e:	08da      	lsrs	r2, r3, #3
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	4413      	add	r3, r2
 8004aa6:	005b      	lsls	r3, r3, #1
 8004aa8:	1aca      	subs	r2, r1, r3
 8004aaa:	b2d3      	uxtb	r3, r2
 8004aac:	3330      	adds	r3, #48	; 0x30
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114

		UsbPrint("[STORAGE TASK] Using file name: %s\n", EULER_LOG_FILE_NAME);
 8004ab4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004ab8:	4619      	mov	r1, r3
 8004aba:	4873      	ldr	r0, [pc, #460]	; (8004c88 <vTaskSdCard+0x35c>)
 8004abc:	f7fe fe62 	bl	8003784 <UsbPrint>

		res = f_closedir(&dj);
 8004ac0:	f107 0308 	add.w	r3, r7, #8
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f00d fd3f 	bl	8012548 <f_closedir>
 8004aca:	4603      	mov	r3, r0
 8004acc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		if (res != FR_OK) {
 8004ad0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d007      	beq.n	8004ae8 <vTaskSdCard+0x1bc>
			UsbPrint("[STORAGE TASK] Failed closing directory: %d\n", res);
 8004ad8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004adc:	4619      	mov	r1, r3
 8004ade:	486b      	ldr	r0, [pc, #428]	; (8004c8c <vTaskSdCard+0x360>)
 8004ae0:	f7fe fe50 	bl	8003784 <UsbPrint>
			goto resetSDCard;
 8004ae4:	bf00      	nop
 8004ae6:	e732      	b.n	800494e <vTaskSdCard+0x22>
		}
	}

	UsbPrint("[STORAGE TASK] Opening log file\n");
 8004ae8:	4869      	ldr	r0, [pc, #420]	; (8004c90 <vTaskSdCard+0x364>)
 8004aea:	f7fe fe4b 	bl	8003784 <UsbPrint>
	res = f_open(&EULER_LOG_FILE, EULER_LOG_FILE_NAME,
 8004aee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004af2:	2212      	movs	r2, #18
 8004af4:	4619      	mov	r1, r3
 8004af6:	4867      	ldr	r0, [pc, #412]	; (8004c94 <vTaskSdCard+0x368>)
 8004af8:	f00c fe68 	bl	80117cc <f_open>
 8004afc:	4603      	mov	r3, r0
 8004afe:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
	FA_OPEN_ALWAYS | FA_WRITE);
	if (res != FR_OK) {
 8004b02:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d006      	beq.n	8004b18 <vTaskSdCard+0x1ec>
		UsbPrint("[STORAGE TASK] Failed opening log file: %d\n", res);
 8004b0a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004b0e:	4619      	mov	r1, r3
 8004b10:	4861      	ldr	r0, [pc, #388]	; (8004c98 <vTaskSdCard+0x36c>)
 8004b12:	f7fe fe37 	bl	8003784 <UsbPrint>
		goto resetSDCard;
 8004b16:	e71a      	b.n	800494e <vTaskSdCard+0x22>
	}

	UsbPrint("[STORAGE TASK] Going to end of file\n");
 8004b18:	4860      	ldr	r0, [pc, #384]	; (8004c9c <vTaskSdCard+0x370>)
 8004b1a:	f7fe fe33 	bl	8003784 <UsbPrint>
	res = f_lseek(&EULER_LOG_FILE, f_size(&EULER_LOG_FILE));
 8004b1e:	4b5d      	ldr	r3, [pc, #372]	; (8004c94 <vTaskSdCard+0x368>)
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	4619      	mov	r1, r3
 8004b24:	485b      	ldr	r0, [pc, #364]	; (8004c94 <vTaskSdCard+0x368>)
 8004b26:	f00d fa43 	bl	8011fb0 <f_lseek>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
	if (res != FR_OK) {
 8004b30:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d006      	beq.n	8004b46 <vTaskSdCard+0x21a>
		UsbPrint("[STORAGE TASK] Failed going to end of file: %d\n", res);
 8004b38:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	4858      	ldr	r0, [pc, #352]	; (8004ca0 <vTaskSdCard+0x374>)
 8004b40:	f7fe fe20 	bl	8003784 <UsbPrint>
		goto resetSDCard;
 8004b44:	e703      	b.n	800494e <vTaskSdCard+0x22>
	}

	volatile int32_t msgCounter = 0;
 8004b46:	2300      	movs	r3, #0
 8004b48:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	char log_header[32] = "Timestamp;Log Entry Type;Data\n";
 8004b4c:	4b55      	ldr	r3, [pc, #340]	; (8004ca4 <vTaskSdCard+0x378>)
 8004b4e:	f107 04ec 	add.w	r4, r7, #236	; 0xec
 8004b52:	461d      	mov	r5, r3
 8004b54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b58:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004b5c:	c407      	stmia	r4!, {r0, r1, r2}
 8004b5e:	8023      	strh	r3, [r4, #0]
 8004b60:	3402      	adds	r4, #2
 8004b62:	0c1b      	lsrs	r3, r3, #16
 8004b64:	7023      	strb	r3, [r4, #0]
 8004b66:	2300      	movs	r3, #0
 8004b68:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
	uint32_t num_bytes = 0;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	res = f_write(&EULER_LOG_FILE, log_header, strlen(log_header),
 8004b72:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004b76:	4618      	mov	r0, r3
 8004b78:	f7fb fb4a 	bl	8000210 <strlen>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 8004b82:	4b49      	ldr	r3, [pc, #292]	; (8004ca8 <vTaskSdCard+0x37c>)
 8004b84:	4843      	ldr	r0, [pc, #268]	; (8004c94 <vTaskSdCard+0x368>)
 8004b86:	f00c ffe6 	bl	8011b56 <f_write>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
			&EULER_bytesSD);
	if (res != FR_OK) {
 8004b90:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d006      	beq.n	8004ba6 <vTaskSdCard+0x27a>
		UsbPrint("[STORAGE TASK] Failed writing to file: %d\n", res);
 8004b98:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	4843      	ldr	r0, [pc, #268]	; (8004cac <vTaskSdCard+0x380>)
 8004ba0:	f7fe fdf0 	bl	8003784 <UsbPrint>
		goto resetSDCard;
 8004ba4:	e6d3      	b.n	800494e <vTaskSdCard+0x22>
	}
	log_entry_t log_entry = { 0 };
 8004ba6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004baa:	2296      	movs	r2, #150	; 0x96
 8004bac:	2100      	movs	r1, #0
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f012 fbeb 	bl	801738a <memset>
	for (;;) {
		if (osMessageQueueGet(log_queue, &log_entry, NULL,
 8004bb4:	4b3e      	ldr	r3, [pc, #248]	; (8004cb0 <vTaskSdCard+0x384>)
 8004bb6:	6818      	ldr	r0, [r3, #0]
 8004bb8:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8004bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f00e fbf5 	bl	80133b0 <osMessageQueueGet>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d1f3      	bne.n	8004bb4 <vTaskSdCard+0x288>
		osWaitForever) == osOK) {
			num_bytes = strlen(log_entry.str);
 8004bcc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f7fb fb1d 	bl	8000210 <strlen>
 8004bd6:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
			if (num_bytes > 0) {
 8004bda:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d015      	beq.n	8004c0e <vTaskSdCard+0x2e2>
				res = f_write(&EULER_LOG_FILE, log_entry.str, num_bytes,
 8004be2:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8004be6:	4b30      	ldr	r3, [pc, #192]	; (8004ca8 <vTaskSdCard+0x37c>)
 8004be8:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8004bec:	4829      	ldr	r0, [pc, #164]	; (8004c94 <vTaskSdCard+0x368>)
 8004bee:	f00c ffb2 	bl	8011b56 <f_write>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
						&EULER_bytesSD);
				if (res != FR_OK) {
 8004bf8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d006      	beq.n	8004c0e <vTaskSdCard+0x2e2>
					UsbPrint("[STORAGE TASK] Failed writing to file: %d\n",
 8004c00:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004c04:	4619      	mov	r1, r3
 8004c06:	4829      	ldr	r0, [pc, #164]	; (8004cac <vTaskSdCard+0x380>)
 8004c08:	f7fe fdbc 	bl	8003784 <UsbPrint>
							res);
					goto resetSDCard;
 8004c0c:	e69f      	b.n	800494e <vTaskSdCard+0x22>
				}
			}

			msgCounter++;
 8004c0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c12:	3301      	adds	r3, #1
 8004c14:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

			if (msgCounter >= SYNC_AFTER_COUNT) {
 8004c18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c1c:	2b7f      	cmp	r3, #127	; 0x7f
 8004c1e:	ddc9      	ble.n	8004bb4 <vTaskSdCard+0x288>
				msgCounter = 0;
 8004c20:	2300      	movs	r3, #0
 8004c22:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

				UsbPrint("[STORAGE TASK] Syncing file..\n");
 8004c26:	4823      	ldr	r0, [pc, #140]	; (8004cb4 <vTaskSdCard+0x388>)
 8004c28:	f7fe fdac 	bl	8003784 <UsbPrint>
				HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8004c2c:	2108      	movs	r1, #8
 8004c2e:	4822      	ldr	r0, [pc, #136]	; (8004cb8 <vTaskSdCard+0x38c>)
 8004c30:	f001 fa59 	bl	80060e6 <HAL_GPIO_TogglePin>
				res = f_sync(&EULER_LOG_FILE);
 8004c34:	4817      	ldr	r0, [pc, #92]	; (8004c94 <vTaskSdCard+0x368>)
 8004c36:	f00d f932 	bl	8011e9e <f_sync>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
				if (res != FR_OK) {
 8004c40:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d0b5      	beq.n	8004bb4 <vTaskSdCard+0x288>
					UsbPrint("[STORAGE TASK] Failed syncing file: %d\n", res);
 8004c48:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	481b      	ldr	r0, [pc, #108]	; (8004cbc <vTaskSdCard+0x390>)
 8004c50:	f7fe fd98 	bl	8003784 <UsbPrint>
					goto resetSDCard;
 8004c54:	e67b      	b.n	800494e <vTaskSdCard+0x22>
 8004c56:	bf00      	nop
 8004c58:	08019ea4 	.word	0x08019ea4
 8004c5c:	08019ecc 	.word	0x08019ecc
 8004c60:	08019ef0 	.word	0x08019ef0
 8004c64:	20015040 	.word	0x20015040
 8004c68:	08019ef4 	.word	0x08019ef4
 8004c6c:	2000035c 	.word	0x2000035c
 8004c70:	08019f20 	.word	0x08019f20
 8004c74:	08019f44 	.word	0x08019f44
 8004c78:	08019f50 	.word	0x08019f50
 8004c7c:	08019f88 	.word	0x08019f88
 8004c80:	cccccccd 	.word	0xcccccccd
 8004c84:	51eb851f 	.word	0x51eb851f
 8004c88:	08019f94 	.word	0x08019f94
 8004c8c:	08019fb8 	.word	0x08019fb8
 8004c90:	08019fe8 	.word	0x08019fe8
 8004c94:	20014e10 	.word	0x20014e10
 8004c98:	0801a00c 	.word	0x0801a00c
 8004c9c:	0801a038 	.word	0x0801a038
 8004ca0:	0801a060 	.word	0x0801a060
 8004ca4:	0801a104 	.word	0x0801a104
 8004ca8:	20015274 	.word	0x20015274
 8004cac:	0801a090 	.word	0x0801a090
 8004cb0:	20010cb0 	.word	0x20010cb0
 8004cb4:	0801a0bc 	.word	0x0801a0bc
 8004cb8:	40020800 	.word	0x40020800
 8004cbc:	0801a0dc 	.word	0x0801a0dc

08004cc0 <vTaskSensRead>:
 *      Author: Jonas
 */

#include "tasks/task_sens_read.h"

void vTaskSensRead(void *argument) {
 8004cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cc2:	b08b      	sub	sp, #44	; 0x2c
 8004cc4:	af04      	add	r7, sp, #16
 8004cc6:	6078      	str	r0, [r7, #4]

	/* For periodic update */
	uint32_t tick_count, tick_update;

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8004cc8:	f00d fe28 	bl	801291c <osKernelGetTickCount>
 8004ccc:	6178      	str	r0, [r7, #20]
	tick_update = osKernelGetTickFreq() / SENSOR_READ_FREQUENCY;
 8004cce:	f00d fe4d 	bl	801296c <osKernelGetTickFreq>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	4b50      	ldr	r3, [pc, #320]	; (8004e18 <vTaskSensRead+0x158>)
 8004cd6:	fba3 2302 	umull	r2, r3, r3, r2
 8004cda:	099b      	lsrs	r3, r3, #6
 8004cdc:	613b      	str	r3, [r7, #16]
	uint8_t checksum = 0;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	73fb      	strb	r3, [r7, #15]
	//HAL_SPI_Receive_IT(&hspi3, (uint8_t*) &sb3_data, sizeof(sb3_data));

	for (;;) {
		tick_count += tick_update;
 8004ce2:	697a      	ldr	r2, [r7, #20]
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	4413      	add	r3, r2
 8004ce8:	617b      	str	r3, [r7, #20]


		if (HAL_SPI_Receive_IT(&hspi3, (uint8_t*) &sb3_data, sizeof(sb3_data)) == HAL_OK){
 8004cea:	2220      	movs	r2, #32
 8004cec:	494b      	ldr	r1, [pc, #300]	; (8004e1c <vTaskSensRead+0x15c>)
 8004cee:	484c      	ldr	r0, [pc, #304]	; (8004e20 <vTaskSensRead+0x160>)
 8004cf0:	f004 ffde 	bl	8009cb0 <HAL_SPI_Receive_IT>
			//HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
		}

		if(osMutexAcquire(sb3_mutex, SB_MUTEX_TIMEOUT) == osOK) {
 8004cf4:	4b4b      	ldr	r3, [pc, #300]	; (8004e24 <vTaskSensRead+0x164>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	211e      	movs	r1, #30
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f00d ffee 	bl	8012cdc <osMutexAcquire>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d113      	bne.n	8004d2e <vTaskSensRead+0x6e>
			sb3_baro = sb3_data.baro;
 8004d06:	4b48      	ldr	r3, [pc, #288]	; (8004e28 <vTaskSensRead+0x168>)
 8004d08:	4a44      	ldr	r2, [pc, #272]	; (8004e1c <vTaskSensRead+0x15c>)
 8004d0a:	ca07      	ldmia	r2, {r0, r1, r2}
 8004d0c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			sb3_imu = sb3_data.imu;
 8004d10:	4a46      	ldr	r2, [pc, #280]	; (8004e2c <vTaskSensRead+0x16c>)
 8004d12:	4b42      	ldr	r3, [pc, #264]	; (8004e1c <vTaskSensRead+0x15c>)
 8004d14:	4614      	mov	r4, r2
 8004d16:	330c      	adds	r3, #12
 8004d18:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004d1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			checksum = sb3_data.checksum;
 8004d1e:	4b3f      	ldr	r3, [pc, #252]	; (8004e1c <vTaskSensRead+0x15c>)
 8004d20:	7f1b      	ldrb	r3, [r3, #28]
 8004d22:	73fb      	strb	r3, [r7, #15]

//			sb3_baro.timestamp = tick_count;
//			sb3_imu.timestamp = tick_count;
			osMutexRelease(sb3_mutex);
 8004d24:	4b3f      	ldr	r3, [pc, #252]	; (8004e24 <vTaskSensRead+0x164>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f00e f835 	bl	8012d98 <osMutexRelease>
		}

		if(osMutexAcquire(sb2_mutex, SB_MUTEX_TIMEOUT) == osOK) {
 8004d2e:	4b40      	ldr	r3, [pc, #256]	; (8004e30 <vTaskSensRead+0x170>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	211e      	movs	r1, #30
 8004d34:	4618      	mov	r0, r3
 8004d36:	f00d ffd1 	bl	8012cdc <osMutexAcquire>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d113      	bne.n	8004d68 <vTaskSensRead+0xa8>
			sb2_baro = sb3_data.baro;
 8004d40:	4b3c      	ldr	r3, [pc, #240]	; (8004e34 <vTaskSensRead+0x174>)
 8004d42:	4a36      	ldr	r2, [pc, #216]	; (8004e1c <vTaskSensRead+0x15c>)
 8004d44:	ca07      	ldmia	r2, {r0, r1, r2}
 8004d46:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			sb2_imu = sb3_data.imu;
 8004d4a:	4a3b      	ldr	r2, [pc, #236]	; (8004e38 <vTaskSensRead+0x178>)
 8004d4c:	4b33      	ldr	r3, [pc, #204]	; (8004e1c <vTaskSensRead+0x15c>)
 8004d4e:	4614      	mov	r4, r2
 8004d50:	330c      	adds	r3, #12
 8004d52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004d54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			checksum = sb3_data.checksum;
 8004d58:	4b30      	ldr	r3, [pc, #192]	; (8004e1c <vTaskSensRead+0x15c>)
 8004d5a:	7f1b      	ldrb	r3, [r3, #28]
 8004d5c:	73fb      	strb	r3, [r7, #15]
//			sb2_baro.timestamp = tick_count;
//			sb2_imu.timestamp = tick_count;
			osMutexRelease(sb2_mutex);
 8004d5e:	4b34      	ldr	r3, [pc, #208]	; (8004e30 <vTaskSensRead+0x170>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4618      	mov	r0, r3
 8004d64:	f00e f818 	bl	8012d98 <osMutexRelease>
		}

		if(osMutexAcquire(sb1_mutex, SB_MUTEX_TIMEOUT) == osOK) {
 8004d68:	4b34      	ldr	r3, [pc, #208]	; (8004e3c <vTaskSensRead+0x17c>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	211e      	movs	r1, #30
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f00d ffb4 	bl	8012cdc <osMutexAcquire>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d113      	bne.n	8004da2 <vTaskSensRead+0xe2>
			sb1_baro = sb3_data.baro;
 8004d7a:	4b31      	ldr	r3, [pc, #196]	; (8004e40 <vTaskSensRead+0x180>)
 8004d7c:	4a27      	ldr	r2, [pc, #156]	; (8004e1c <vTaskSensRead+0x15c>)
 8004d7e:	ca07      	ldmia	r2, {r0, r1, r2}
 8004d80:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			sb1_imu = sb3_data.imu;
 8004d84:	4a2f      	ldr	r2, [pc, #188]	; (8004e44 <vTaskSensRead+0x184>)
 8004d86:	4b25      	ldr	r3, [pc, #148]	; (8004e1c <vTaskSensRead+0x15c>)
 8004d88:	4614      	mov	r4, r2
 8004d8a:	330c      	adds	r3, #12
 8004d8c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004d8e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			checksum = sb3_data.checksum;
 8004d92:	4b22      	ldr	r3, [pc, #136]	; (8004e1c <vTaskSensRead+0x15c>)
 8004d94:	7f1b      	ldrb	r3, [r3, #28]
 8004d96:	73fb      	strb	r3, [r7, #15]
//			sb1_baro.timestamp = tick_count;
//			sb1_imu.timestamp = tick_count;
			osMutexRelease(sb1_mutex);
 8004d98:	4b28      	ldr	r3, [pc, #160]	; (8004e3c <vTaskSensRead+0x17c>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f00d fffb 	bl	8012d98 <osMutexRelease>
		}

		UsbPrint("[DBG] P: %ld; T: %ld; t: %lu\n", sb3_baro.pressure,
 8004da2:	4b21      	ldr	r3, [pc, #132]	; (8004e28 <vTaskSensRead+0x168>)
 8004da4:	6819      	ldr	r1, [r3, #0]
 8004da6:	4b20      	ldr	r3, [pc, #128]	; (8004e28 <vTaskSensRead+0x168>)
 8004da8:	685a      	ldr	r2, [r3, #4]
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	4826      	ldr	r0, [pc, #152]	; (8004e48 <vTaskSensRead+0x188>)
 8004dae:	f7fe fce9 	bl	8003784 <UsbPrint>
				sb3_baro.temperature, tick_count);

		UsbPrint(
				"[DBG] Gx: %ld, Gy:%ld, Gz:%ld; Ax: %ld, Ay:%ld, Az:%ld; t: %lu\n",
				sb3_imu.gyro_x, sb3_imu.gyro_y,
 8004db2:	4b1e      	ldr	r3, [pc, #120]	; (8004e2c <vTaskSensRead+0x16c>)
 8004db4:	f9b3 3000 	ldrsh.w	r3, [r3]
		UsbPrint(
 8004db8:	461c      	mov	r4, r3
				sb3_imu.gyro_x, sb3_imu.gyro_y,
 8004dba:	4b1c      	ldr	r3, [pc, #112]	; (8004e2c <vTaskSensRead+0x16c>)
 8004dbc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
		UsbPrint(
 8004dc0:	461d      	mov	r5, r3
				sb3_imu.gyro_z, sb3_imu.acc_x, sb3_imu.acc_y,
 8004dc2:	4b1a      	ldr	r3, [pc, #104]	; (8004e2c <vTaskSensRead+0x16c>)
 8004dc4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
		UsbPrint(
 8004dc8:	461e      	mov	r6, r3
				sb3_imu.gyro_z, sb3_imu.acc_x, sb3_imu.acc_y,
 8004dca:	4b18      	ldr	r3, [pc, #96]	; (8004e2c <vTaskSensRead+0x16c>)
 8004dcc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
		UsbPrint(
 8004dd0:	461a      	mov	r2, r3
				sb3_imu.gyro_z, sb3_imu.acc_x, sb3_imu.acc_y,
 8004dd2:	4b16      	ldr	r3, [pc, #88]	; (8004e2c <vTaskSensRead+0x16c>)
 8004dd4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
		UsbPrint(
 8004dd8:	4619      	mov	r1, r3
				sb3_imu.acc_z, tick_count);
 8004dda:	4b14      	ldr	r3, [pc, #80]	; (8004e2c <vTaskSensRead+0x16c>)
 8004ddc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
		UsbPrint(
 8004de0:	4618      	mov	r0, r3
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	9303      	str	r3, [sp, #12]
 8004de6:	9002      	str	r0, [sp, #8]
 8004de8:	9101      	str	r1, [sp, #4]
 8004dea:	9200      	str	r2, [sp, #0]
 8004dec:	4633      	mov	r3, r6
 8004dee:	462a      	mov	r2, r5
 8004df0:	4621      	mov	r1, r4
 8004df2:	4816      	ldr	r0, [pc, #88]	; (8004e4c <vTaskSensRead+0x18c>)
 8004df4:	f7fe fcc6 	bl	8003784 <UsbPrint>

		logSensor(tick_count, 3, BARO, &sb3_baro);
 8004df8:	4b0b      	ldr	r3, [pc, #44]	; (8004e28 <vTaskSensRead+0x168>)
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	2103      	movs	r1, #3
 8004dfe:	6978      	ldr	r0, [r7, #20]
 8004e00:	f7fe fbbe 	bl	8003580 <logSensor>
		logSensor(tick_count, 3, IMU, &sb3_imu);
 8004e04:	4b09      	ldr	r3, [pc, #36]	; (8004e2c <vTaskSensRead+0x16c>)
 8004e06:	2202      	movs	r2, #2
 8004e08:	2103      	movs	r1, #3
 8004e0a:	6978      	ldr	r0, [r7, #20]
 8004e0c:	f7fe fbb8 	bl	8003580 <logSensor>

		osDelayUntil(tick_count);
 8004e10:	6978      	ldr	r0, [r7, #20]
 8004e12:	f00d fe89 	bl	8012b28 <osDelayUntil>
		tick_count += tick_update;
 8004e16:	e764      	b.n	8004ce2 <vTaskSensRead+0x22>
 8004e18:	10624dd3 	.word	0x10624dd3
 8004e1c:	200002ac 	.word	0x200002ac
 8004e20:	2000aa60 	.word	0x2000aa60
 8004e24:	2000887c 	.word	0x2000887c
 8004e28:	20000290 	.word	0x20000290
 8004e2c:	2000029c 	.word	0x2000029c
 8004e30:	20008880 	.word	0x20008880
 8004e34:	20000254 	.word	0x20000254
 8004e38:	20000260 	.word	0x20000260
 8004e3c:	20008878 	.word	0x20008878
 8004e40:	20000218 	.word	0x20000218
 8004e44:	20000224 	.word	0x20000224
 8004e48:	0801a124 	.word	0x0801a124
 8004e4c:	0801a144 	.word	0x0801a144

08004e50 <HAL_SPI_RxCpltCallback>:
	}
}

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi){
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b082      	sub	sp, #8
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
	HAL_SPI_Receive_IT(&hspi3, (uint8_t*) &sb3_data, sizeof(sb3_data));
 8004e58:	2220      	movs	r2, #32
 8004e5a:	4904      	ldr	r1, [pc, #16]	; (8004e6c <HAL_SPI_RxCpltCallback+0x1c>)
 8004e5c:	4804      	ldr	r0, [pc, #16]	; (8004e70 <HAL_SPI_RxCpltCallback+0x20>)
 8004e5e:	f004 ff27 	bl	8009cb0 <HAL_SPI_Receive_IT>

}
 8004e62:	bf00      	nop
 8004e64:	3708      	adds	r7, #8
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	200002ac 	.word	0x200002ac
 8004e70:	2000aa60 	.word	0x2000aa60
 8004e74:	00000000 	.word	0x00000000

08004e78 <vTaskStateEst>:
 */

#include "tasks/task_state_est.h"


void vTaskStateEst(void *argument) {
 8004e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e7a:	f2ad 5dcc 	subw	sp, sp, #1484	; 0x5cc
 8004e7e:	af0c      	add	r7, sp, #48	; 0x30
 8004e80:	1d3b      	adds	r3, r7, #4
 8004e82:	6018      	str	r0, [r3, #0]
	uint32_t tick_count, tick_update;


	/* Initialise Variables */
	env_t env;
	init_env(&env);
 8004e84:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f7fc fd65 	bl	8001958 <init_env>

	state_est_meas_t state_est_meas = { 0 };
 8004e8e:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 8004e92:	2278      	movs	r2, #120	; 0x78
 8004e94:	2100      	movs	r1, #0
 8004e96:	4618      	mov	r0, r3
 8004e98:	f012 fa77 	bl	801738a <memset>
	state_est_meas_t state_est_meas_prior = { 0 };
 8004e9c:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	2378      	movs	r3, #120	; 0x78
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	2100      	movs	r1, #0
 8004ea8:	f012 fa6f 	bl	801738a <memset>
	uint32_t Placeholder_timestamps[3] = { 0 };
 8004eac:	f207 4384 	addw	r3, r7, #1156	; 0x484
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	6013      	str	r3, [r2, #0]
 8004eb6:	6053      	str	r3, [r2, #4]
 8004eb8:	6093      	str	r3, [r2, #8]
	float Placeholder_measurement[2] = { 0 };
 8004eba:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	6013      	str	r3, [r2, #0]
 8004ec4:	6053      	str	r3, [r2, #4]

	kf_state_t kf_state;
	reset_kf_state(&kf_state);
 8004ec6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f7fd f81a 	bl	8001f04 <reset_kf_state>

	extrapolation_rolling_memory_t extrapolation_rolling_memory = {0};
 8004ed0:	f107 0320 	add.w	r3, r7, #32
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	23b0      	movs	r3, #176	; 0xb0
 8004ed8:	461a      	mov	r2, r3
 8004eda:	2100      	movs	r1, #0
 8004edc:	f012 fa55 	bl	801738a <memset>
	extrapolation_rolling_memory.memory_length = 0;
 8004ee0:	f107 0320 	add.w	r3, r7, #32
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	601a      	str	r2, [r3, #0]

	flight_phase_detection_t dummy_flight_phase_detection = { 0 };
 8004ee8:	f107 0314 	add.w	r3, r7, #20
 8004eec:	461a      	mov	r2, r3
 8004eee:	2300      	movs	r3, #0
 8004ef0:	6013      	str	r3, [r2, #0]
 8004ef2:	6053      	str	r3, [r2, #4]
 8004ef4:	6093      	str	r3, [r2, #8]
	flight_phase_detection_t flight_phase_detection = { 0 };
 8004ef6:	f107 0308 	add.w	r3, r7, #8
 8004efa:	461a      	mov	r2, r3
 8004efc:	2300      	movs	r3, #0
 8004efe:	6013      	str	r3, [r2, #0]
 8004f00:	6053      	str	r3, [r2, #4]
 8004f02:	6093      	str	r3, [r2, #8]
	reset_flight_phase_detection(&flight_phase_detection);
 8004f04:	f107 0308 	add.w	r3, r7, #8
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f7fc ffe3 	bl	8001ed4 <reset_flight_phase_detection>
	reset_flight_phase_detection(&dummy_flight_phase_detection);
 8004f0e:	f107 0314 	add.w	r3, r7, #20
 8004f12:	4618      	mov	r0, r3
 8004f14:	f7fc ffde 	bl	8001ed4 <reset_flight_phase_detection>

	select_noise_models(&kf_state, &flight_phase_detection, &env, &extrapolation_rolling_memory);
 8004f18:	f107 0320 	add.w	r3, r7, #32
 8004f1c:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8004f20:	f107 0108 	add.w	r1, r7, #8
 8004f24:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 8004f28:	f7fd fbe2 	bl	80026f0 <select_noise_models>


	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8004f2c:	f00d fcf6 	bl	801291c <osKernelGetTickCount>
 8004f30:	f8c7 0594 	str.w	r0, [r7, #1428]	; 0x594
	tick_update = osKernelGetTickFreq() / STATE_ESTIMATION_FREQUENCY;
 8004f34:	f00d fd1a 	bl	801296c <osKernelGetTickFreq>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	4bb9      	ldr	r3, [pc, #740]	; (8005220 <vTaskStateEst+0x3a8>)
 8004f3c:	fba3 2302 	umull	r2, r3, r3, r2
 8004f40:	095b      	lsrs	r3, r3, #5
 8004f42:	f8c7 3590 	str.w	r3, [r7, #1424]	; 0x590
	for (;;) {
		tick_count += tick_update;
 8004f46:	f8d7 2594 	ldr.w	r2, [r7, #1428]	; 0x594
 8004f4a:	f8d7 3590 	ldr.w	r3, [r7, #1424]	; 0x590
 8004f4e:	4413      	add	r3, r2
 8004f50:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594

		/* Acquire the Sensor data */
		/* Sensor Board 1 */
		if (osMutexGetOwner(sb1_mutex) == NULL) {
 8004f54:	4bb3      	ldr	r3, [pc, #716]	; (8005224 <vTaskStateEst+0x3ac>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f00d ff6d 	bl	8012e38 <osMutexGetOwner>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d163      	bne.n	800502c <vTaskStateEst+0x1b4>
			Placeholder_measurement[0] = (float) (sb1_data.baro.pressure);
 8004f64:	4bb0      	ldr	r3, [pc, #704]	; (8005228 <vTaskStateEst+0x3b0>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	ee07 3a90 	vmov	s15, r3
 8004f6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f70:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 8004f74:	edc3 7a00 	vstr	s15, [r3]
			Placeholder_timestamps[0] = sb1_data.baro.ts;
 8004f78:	4bab      	ldr	r3, [pc, #684]	; (8005228 <vTaskStateEst+0x3b0>)
 8004f7a:	689a      	ldr	r2, [r3, #8]
 8004f7c:	f207 4384 	addw	r3, r7, #1156	; 0x484
 8004f80:	601a      	str	r2, [r3, #0]
			Placeholder_measurement[1] = ((float) (sb1_data.imu.acc_z)) / 1024;
 8004f82:	4ba9      	ldr	r3, [pc, #676]	; (8005228 <vTaskStateEst+0x3b0>)
 8004f84:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8004f88:	ee07 3a90 	vmov	s15, r3
 8004f8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f90:	eddf 6aa6 	vldr	s13, [pc, #664]	; 800522c <vTaskStateEst+0x3b4>
 8004f94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004f98:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 8004f9c:	edc3 7a01 	vstr	s15, [r3, #4]
			Placeholder_timestamps[1] = sb1_data.imu.ts;
 8004fa0:	4ba1      	ldr	r3, [pc, #644]	; (8005228 <vTaskStateEst+0x3b0>)
 8004fa2:	699a      	ldr	r2, [r3, #24]
 8004fa4:	f207 4384 	addw	r3, r7, #1156	; 0x484
 8004fa8:	605a      	str	r2, [r3, #4]
			Placeholder_measurement[2] = ((float) (sb1_data.baro.temperature)) / 100;
 8004faa:	4b9f      	ldr	r3, [pc, #636]	; (8005228 <vTaskStateEst+0x3b0>)
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	ee07 3a90 	vmov	s15, r3
 8004fb2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004fb6:	eddf 6a9e 	vldr	s13, [pc, #632]	; 8005230 <vTaskStateEst+0x3b8>
 8004fba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004fbe:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 8004fc2:	edc3 7a02 	vstr	s15, [r3, #8]

			if (osMutexGetOwner(sb1_mutex) == NULL) {
 8004fc6:	4b97      	ldr	r3, [pc, #604]	; (8005224 <vTaskStateEst+0x3ac>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f00d ff34 	bl	8012e38 <osMutexGetOwner>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d12a      	bne.n	800502c <vTaskStateEst+0x1b4>
				state_est_meas.baro_data[0].pressure = Placeholder_measurement[0];
 8004fd6:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f507 62a1 	add.w	r2, r7, #1288	; 0x508
 8004fe0:	6013      	str	r3, [r2, #0]
				state_est_meas.baro_data[0].temperature = Placeholder_measurement[2];
 8004fe2:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	f207 520c 	addw	r2, r7, #1292	; 0x50c
 8004fec:	6013      	str	r3, [r2, #0]
				state_est_meas.baro_data[0].ts = Placeholder_timestamps[0];
 8004fee:	f207 4384 	addw	r3, r7, #1156	; 0x484
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510

				state_est_meas.imu_data[0].acc_x = Placeholder_measurement[1] * GRAVITATION;
 8004ff8:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7fb fac2 	bl	8000588 <__aeabi_f2d>
 8005004:	a384      	add	r3, pc, #528	; (adr r3, 8005218 <vTaskStateEst+0x3a0>)
 8005006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800500a:	f7fb fb15 	bl	8000638 <__aeabi_dmul>
 800500e:	4603      	mov	r3, r0
 8005010:	460c      	mov	r4, r1
 8005012:	4618      	mov	r0, r3
 8005014:	4621      	mov	r1, r4
 8005016:	f7fb fddf 	bl	8000bd8 <__aeabi_d2f>
 800501a:	4603      	mov	r3, r0
 800501c:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8005020:	6013      	str	r3, [r2, #0]
				state_est_meas.imu_data[0].ts = Placeholder_timestamps[1];
 8005022:	f207 4384 	addw	r3, r7, #1156	; 0x484
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
			}
		}

		/* Sensor Board 2 */
		if (osMutexGetOwner(sb1_mutex) == NULL) {
 800502c:	4b7d      	ldr	r3, [pc, #500]	; (8005224 <vTaskStateEst+0x3ac>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4618      	mov	r0, r3
 8005032:	f00d ff01 	bl	8012e38 <osMutexGetOwner>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d163      	bne.n	8005104 <vTaskStateEst+0x28c>
			Placeholder_measurement[0] = (float) (sb2_data.baro.pressure);
 800503c:	4b7d      	ldr	r3, [pc, #500]	; (8005234 <vTaskStateEst+0x3bc>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	ee07 3a90 	vmov	s15, r3
 8005044:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005048:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 800504c:	edc3 7a00 	vstr	s15, [r3]
			Placeholder_timestamps[0] = sb2_data.baro.ts;
 8005050:	4b78      	ldr	r3, [pc, #480]	; (8005234 <vTaskStateEst+0x3bc>)
 8005052:	689a      	ldr	r2, [r3, #8]
 8005054:	f207 4384 	addw	r3, r7, #1156	; 0x484
 8005058:	601a      	str	r2, [r3, #0]
			Placeholder_measurement[1] = ((float) (sb2_data.imu.acc_z)) / 1024;
 800505a:	4b76      	ldr	r3, [pc, #472]	; (8005234 <vTaskStateEst+0x3bc>)
 800505c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8005060:	ee07 3a90 	vmov	s15, r3
 8005064:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005068:	eddf 6a70 	vldr	s13, [pc, #448]	; 800522c <vTaskStateEst+0x3b4>
 800506c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005070:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 8005074:	edc3 7a01 	vstr	s15, [r3, #4]
			Placeholder_timestamps[1] = sb2_data.imu.ts;
 8005078:	4b6e      	ldr	r3, [pc, #440]	; (8005234 <vTaskStateEst+0x3bc>)
 800507a:	699a      	ldr	r2, [r3, #24]
 800507c:	f207 4384 	addw	r3, r7, #1156	; 0x484
 8005080:	605a      	str	r2, [r3, #4]
			Placeholder_measurement[2] = ((float) (sb2_data.baro.temperature)) / 100;
 8005082:	4b6c      	ldr	r3, [pc, #432]	; (8005234 <vTaskStateEst+0x3bc>)
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	ee07 3a90 	vmov	s15, r3
 800508a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800508e:	eddf 6a68 	vldr	s13, [pc, #416]	; 8005230 <vTaskStateEst+0x3b8>
 8005092:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005096:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 800509a:	edc3 7a02 	vstr	s15, [r3, #8]

			if (osMutexGetOwner(sb1_mutex) == NULL) {
 800509e:	4b61      	ldr	r3, [pc, #388]	; (8005224 <vTaskStateEst+0x3ac>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4618      	mov	r0, r3
 80050a4:	f00d fec8 	bl	8012e38 <osMutexGetOwner>
 80050a8:	4603      	mov	r3, r0
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d12a      	bne.n	8005104 <vTaskStateEst+0x28c>
				state_est_meas.baro_data[1].pressure = Placeholder_measurement[0];
 80050ae:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f207 5214 	addw	r2, r7, #1300	; 0x514
 80050b8:	6013      	str	r3, [r2, #0]
				state_est_meas.baro_data[1].temperature = Placeholder_measurement[2];
 80050ba:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	f507 62a3 	add.w	r2, r7, #1304	; 0x518
 80050c4:	6013      	str	r3, [r2, #0]
				state_est_meas.baro_data[1].ts = Placeholder_timestamps[0];
 80050c6:	f207 4384 	addw	r3, r7, #1156	; 0x484
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c

				state_est_meas.imu_data[1].acc_x = Placeholder_measurement[1] * GRAVITATION;
 80050d0:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	4618      	mov	r0, r3
 80050d8:	f7fb fa56 	bl	8000588 <__aeabi_f2d>
 80050dc:	a34e      	add	r3, pc, #312	; (adr r3, 8005218 <vTaskStateEst+0x3a0>)
 80050de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e2:	f7fb faa9 	bl	8000638 <__aeabi_dmul>
 80050e6:	4603      	mov	r3, r0
 80050e8:	460c      	mov	r4, r1
 80050ea:	4618      	mov	r0, r3
 80050ec:	4621      	mov	r1, r4
 80050ee:	f7fb fd73 	bl	8000bd8 <__aeabi_d2f>
 80050f2:	4603      	mov	r3, r0
 80050f4:	f207 5254 	addw	r2, r7, #1364	; 0x554
 80050f8:	6013      	str	r3, [r2, #0]
				state_est_meas.imu_data[1].ts = Placeholder_timestamps[1];
 80050fa:	f207 4384 	addw	r3, r7, #1156	; 0x484
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
			}
		}

		/* Sensor Board 3 */
		if (osMutexGetOwner(sb1_mutex) == NULL) {
 8005104:	4b47      	ldr	r3, [pc, #284]	; (8005224 <vTaskStateEst+0x3ac>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4618      	mov	r0, r3
 800510a:	f00d fe95 	bl	8012e38 <osMutexGetOwner>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d163      	bne.n	80051dc <vTaskStateEst+0x364>
			Placeholder_measurement[0] = (float)(sb3_data.baro.pressure);
 8005114:	4b48      	ldr	r3, [pc, #288]	; (8005238 <vTaskStateEst+0x3c0>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	ee07 3a90 	vmov	s15, r3
 800511c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005120:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 8005124:	edc3 7a00 	vstr	s15, [r3]
			Placeholder_timestamps[0] = sb3_data.baro.ts;
 8005128:	4b43      	ldr	r3, [pc, #268]	; (8005238 <vTaskStateEst+0x3c0>)
 800512a:	689a      	ldr	r2, [r3, #8]
 800512c:	f207 4384 	addw	r3, r7, #1156	; 0x484
 8005130:	601a      	str	r2, [r3, #0]
			Placeholder_measurement[1] = ((float)(sb3_data.imu.acc_z)) / 1024;
 8005132:	4b41      	ldr	r3, [pc, #260]	; (8005238 <vTaskStateEst+0x3c0>)
 8005134:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8005138:	ee07 3a90 	vmov	s15, r3
 800513c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005140:	eddf 6a3a 	vldr	s13, [pc, #232]	; 800522c <vTaskStateEst+0x3b4>
 8005144:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005148:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 800514c:	edc3 7a01 	vstr	s15, [r3, #4]
			Placeholder_timestamps[1] = sb3_data.imu.ts;
 8005150:	4b39      	ldr	r3, [pc, #228]	; (8005238 <vTaskStateEst+0x3c0>)
 8005152:	699a      	ldr	r2, [r3, #24]
 8005154:	f207 4384 	addw	r3, r7, #1156	; 0x484
 8005158:	605a      	str	r2, [r3, #4]
			Placeholder_measurement[2] = ((float)(sb3_data.baro.temperature)) / 100;
 800515a:	4b37      	ldr	r3, [pc, #220]	; (8005238 <vTaskStateEst+0x3c0>)
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	ee07 3a90 	vmov	s15, r3
 8005162:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005166:	eddf 6a32 	vldr	s13, [pc, #200]	; 8005230 <vTaskStateEst+0x3b8>
 800516a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800516e:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 8005172:	edc3 7a02 	vstr	s15, [r3, #8]

			if (osMutexGetOwner(sb1_mutex) == NULL) {
 8005176:	4b2b      	ldr	r3, [pc, #172]	; (8005224 <vTaskStateEst+0x3ac>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4618      	mov	r0, r3
 800517c:	f00d fe5c 	bl	8012e38 <osMutexGetOwner>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d12a      	bne.n	80051dc <vTaskStateEst+0x364>
				state_est_meas.baro_data[2].pressure = Placeholder_measurement[0];
 8005186:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f507 62a4 	add.w	r2, r7, #1312	; 0x520
 8005190:	6013      	str	r3, [r2, #0]
				state_est_meas.baro_data[2].temperature = Placeholder_measurement[2];
 8005192:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	f207 5224 	addw	r2, r7, #1316	; 0x524
 800519c:	6013      	str	r3, [r2, #0]
				state_est_meas.baro_data[2].ts = Placeholder_timestamps[0];
 800519e:	f207 4384 	addw	r3, r7, #1156	; 0x484
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528

				state_est_meas.imu_data[2].acc_x = Placeholder_measurement[1] * GRAVITATION;
 80051a8:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	4618      	mov	r0, r3
 80051b0:	f7fb f9ea 	bl	8000588 <__aeabi_f2d>
 80051b4:	a318      	add	r3, pc, #96	; (adr r3, 8005218 <vTaskStateEst+0x3a0>)
 80051b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ba:	f7fb fa3d 	bl	8000638 <__aeabi_dmul>
 80051be:	4603      	mov	r3, r0
 80051c0:	460c      	mov	r4, r1
 80051c2:	4618      	mov	r0, r3
 80051c4:	4621      	mov	r1, r4
 80051c6:	f7fb fd07 	bl	8000bd8 <__aeabi_d2f>
 80051ca:	4603      	mov	r3, r0
 80051cc:	f507 62ae 	add.w	r2, r7, #1392	; 0x570
 80051d0:	6013      	str	r3, [r2, #0]
				state_est_meas.imu_data[2].ts = Placeholder_timestamps[1];
 80051d2:	f207 4384 	addw	r3, r7, #1156	; 0x484
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
			}
		}

		/* get new Phase Detection*/
		if(osMutexGetOwner(fsm_mutex) == NULL){
 80051dc:	4b17      	ldr	r3, [pc, #92]	; (800523c <vTaskStateEst+0x3c4>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4618      	mov	r0, r3
 80051e2:	f00d fe29 	bl	8012e38 <osMutexGetOwner>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d12b      	bne.n	8005244 <vTaskStateEst+0x3cc>
			dummy_flight_phase_detection = global_flight_phase_detection;
 80051ec:	f107 0314 	add.w	r3, r7, #20
 80051f0:	4a13      	ldr	r2, [pc, #76]	; (8005240 <vTaskStateEst+0x3c8>)
 80051f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80051f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			if(osMutexGetOwner(fsm_mutex) == NULL){
 80051f8:	4b10      	ldr	r3, [pc, #64]	; (800523c <vTaskStateEst+0x3c4>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4618      	mov	r0, r3
 80051fe:	f00d fe1b 	bl	8012e38 <osMutexGetOwner>
 8005202:	4603      	mov	r3, r0
 8005204:	2b00      	cmp	r3, #0
 8005206:	d11d      	bne.n	8005244 <vTaskStateEst+0x3cc>
				flight_phase_detection = dummy_flight_phase_detection;
 8005208:	f107 0308 	add.w	r3, r7, #8
 800520c:	f107 0214 	add.w	r2, r7, #20
 8005210:	ca07      	ldmia	r2, {r0, r1, r2}
 8005212:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005216:	e015      	b.n	8005244 <vTaskStateEst+0x3cc>
 8005218:	51eb851f 	.word	0x51eb851f
 800521c:	40239eb8 	.word	0x40239eb8
 8005220:	51eb851f 	.word	0x51eb851f
 8005224:	20008878 	.word	0x20008878
 8005228:	20000234 	.word	0x20000234
 800522c:	44800000 	.word	0x44800000
 8005230:	42c80000 	.word	0x42c80000
 8005234:	20000270 	.word	0x20000270
 8005238:	200002ac 	.word	0x200002ac
 800523c:	20008888 	.word	0x20008888
 8005240:	2000031c 	.word	0x2000031c
			}
		}

		/* process measurements */
		process_measurements(tick_count, &kf_state, &state_est_meas, &state_est_meas_prior, &env, &extrapolation_rolling_memory);
 8005244:	f507 6092 	add.w	r0, r7, #1168	; 0x490
 8005248:	f507 62a1 	add.w	r2, r7, #1288	; 0x508
 800524c:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8005250:	f107 0320 	add.w	r3, r7, #32
 8005254:	9301      	str	r3, [sp, #4]
 8005256:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 800525a:	9300      	str	r3, [sp, #0]
 800525c:	4603      	mov	r3, r0
 800525e:	f8d7 0594 	ldr.w	r0, [r7, #1428]	; 0x594
 8005262:	f7fd f8d1 	bl	8002408 <process_measurements>

		/* select noise models (dependent on detected flight phase and updated temperature in environment) */
		select_noise_models(&kf_state, &flight_phase_detection, &env, &extrapolation_rolling_memory);
 8005266:	f107 0320 	add.w	r3, r7, #32
 800526a:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 800526e:	f107 0108 	add.w	r1, r7, #8
 8005272:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 8005276:	f7fd fa3b 	bl	80026f0 <select_noise_models>

		/* Start Kalman Update */

		/* Prediction Step */
		kf_prediction(&kf_state);
 800527a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800527e:	4618      	mov	r0, r3
 8005280:	f7fc fed6 	bl	8002030 <kf_prediction>

		/* update Step */
		if (kf_state.num_z_active > 0) {
 8005284:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005288:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800528c:	2b00      	cmp	r3, #0
 800528e:	dd0a      	ble.n	80052a6 <vTaskStateEst+0x42e>
			select_kf_observation_matrices(&kf_state);
 8005290:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005294:	4618      	mov	r0, r3
 8005296:	f7fc ff3c 	bl	8002112 <select_kf_observation_matrices>
			kf_update(&kf_state);
 800529a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800529e:	4618      	mov	r0, r3
 80052a0:	f7fc ff74 	bl	800218c <kf_update>
 80052a4:	e00a      	b.n	80052bc <vTaskStateEst+0x444>
		}
		else
		{
			memcpy(kf_state.x_est, kf_state.x_priori, sizeof(kf_state.x_priori));
 80052a6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80052aa:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 80052ae:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80052b2:	f502 729a 	add.w	r2, r2, #308	; 0x134
 80052b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80052b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}

		/* set measurement prior to measurements from completed state estimation step */
		memcpy(&state_est_meas_prior, &state_est_meas, sizeof(state_est_meas));
 80052bc:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 80052c0:	4618      	mov	r0, r3
 80052c2:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 80052c6:	2278      	movs	r2, #120	; 0x78
 80052c8:	4619      	mov	r1, r3
 80052ca:	f012 f853 	bl	8017374 <memcpy>


		/* KALMAN UPDATE FINISHED */
		/* OUTPUT IS x_est */
		if(osMutexAcquire(state_est_mutex, 10) == osOK){
 80052ce:	4b21      	ldr	r3, [pc, #132]	; (8005354 <vTaskStateEst+0x4dc>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	210a      	movs	r1, #10
 80052d4:	4618      	mov	r0, r3
 80052d6:	f00d fd01 	bl	8012cdc <osMutexAcquire>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d10a      	bne.n	80052f6 <vTaskStateEst+0x47e>
			/* Write into global variable */
			/* TODO: Check correct indexing */
			/* the value is multiplied by 1000 for conversion to int datatype for easy transport
			 * careful in other tasks!
			 */
			update_state_est_data(&state_est_data_global, &kf_state);
 80052e0:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80052e4:	4619      	mov	r1, r3
 80052e6:	481c      	ldr	r0, [pc, #112]	; (8005358 <vTaskStateEst+0x4e0>)
 80052e8:	f7fd f83e 	bl	8002368 <update_state_est_data>
			osMutexRelease(state_est_mutex);
 80052ec:	4b19      	ldr	r3, [pc, #100]	; (8005354 <vTaskStateEst+0x4dc>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4618      	mov	r0, r3
 80052f2:	f00d fd51 	bl	8012d98 <osMutexRelease>
		}

		/* Update env for FSM */
		if(osMutexAcquire(environment_mutex, 10) == osOK){
 80052f6:	4b19      	ldr	r3, [pc, #100]	; (800535c <vTaskStateEst+0x4e4>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	210a      	movs	r1, #10
 80052fc:	4618      	mov	r0, r3
 80052fe:	f00d fced 	bl	8012cdc <osMutexAcquire>
 8005302:	4603      	mov	r3, r0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d10b      	bne.n	8005320 <vTaskStateEst+0x4a8>
			global_env = env;
 8005308:	4b15      	ldr	r3, [pc, #84]	; (8005360 <vTaskStateEst+0x4e8>)
 800530a:	461c      	mov	r4, r3
 800530c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8005310:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005312:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexRelease(environment_mutex);
 8005316:	4b11      	ldr	r3, [pc, #68]	; (800535c <vTaskStateEst+0x4e4>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4618      	mov	r0, r3
 800531c:	f00d fd3c 	bl	8012d98 <osMutexRelease>
		}

		/* Write to logging system */
		logEstimatorVar(osKernelGetTickCount(), state_est_data_global);
 8005320:	f00d fafc 	bl	801291c <osKernelGetTickCount>
 8005324:	4684      	mov	ip, r0
 8005326:	4e0c      	ldr	r6, [pc, #48]	; (8005358 <vTaskStateEst+0x4e0>)
 8005328:	466d      	mov	r5, sp
 800532a:	f106 040c 	add.w	r4, r6, #12
 800532e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005330:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005332:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005334:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005336:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800533a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800533e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8005342:	4660      	mov	r0, ip
 8005344:	f7fe f9c2 	bl	80036cc <logEstimatorVar>

		/* TODO: Check if the state estimation can do this for the given frequency */

		osDelayUntil(tick_count);
 8005348:	f8d7 0594 	ldr.w	r0, [r7, #1428]	; 0x594
 800534c:	f00d fbec 	bl	8012b28 <osDelayUntil>
		tick_count += tick_update;
 8005350:	e5f9      	b.n	8004f46 <vTaskStateEst+0xce>
 8005352:	bf00      	nop
 8005354:	2000ab30 	.word	0x2000ab30
 8005358:	200002cc 	.word	0x200002cc
 800535c:	200089d0 	.word	0x200089d0
 8005360:	2000030c 	.word	0x2000030c

08005364 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005364:	f8df d034 	ldr.w	sp, [pc, #52]	; 800539c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005368:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800536a:	e003      	b.n	8005374 <LoopCopyDataInit>

0800536c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800536c:	4b0c      	ldr	r3, [pc, #48]	; (80053a0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800536e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005370:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005372:	3104      	adds	r1, #4

08005374 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005374:	480b      	ldr	r0, [pc, #44]	; (80053a4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005376:	4b0c      	ldr	r3, [pc, #48]	; (80053a8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005378:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800537a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800537c:	d3f6      	bcc.n	800536c <CopyDataInit>
  ldr  r2, =_sbss
 800537e:	4a0b      	ldr	r2, [pc, #44]	; (80053ac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005380:	e002      	b.n	8005388 <LoopFillZerobss>

08005382 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005382:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005384:	f842 3b04 	str.w	r3, [r2], #4

08005388 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005388:	4b09      	ldr	r3, [pc, #36]	; (80053b0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800538a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800538c:	d3f9      	bcc.n	8005382 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800538e:	f7ff f8c1 	bl	8004514 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005392:	f011 ffbb 	bl	801730c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005396:	f7fe fa03 	bl	80037a0 <main>
  bx  lr    
 800539a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800539c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80053a0:	0801a490 	.word	0x0801a490
  ldr  r0, =_sdata
 80053a4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80053a8:	200001fc 	.word	0x200001fc
  ldr  r2, =_sbss
 80053ac:	200001fc 	.word	0x200001fc
  ldr  r3, = _ebss
 80053b0:	20017000 	.word	0x20017000

080053b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80053b4:	e7fe      	b.n	80053b4 <ADC_IRQHandler>

080053b6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80053b6:	b580      	push	{r7, lr}
 80053b8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80053ba:	2003      	movs	r0, #3
 80053bc:	f000 f8f7 	bl	80055ae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80053c0:	2000      	movs	r0, #0
 80053c2:	f7fe ffaf 	bl	8004324 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80053c6:	f7fe fd63 	bl	8003e90 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80053ca:	2300      	movs	r3, #0
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80053d0:	b480      	push	{r7}
 80053d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80053d4:	4b06      	ldr	r3, [pc, #24]	; (80053f0 <HAL_IncTick+0x20>)
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	461a      	mov	r2, r3
 80053da:	4b06      	ldr	r3, [pc, #24]	; (80053f4 <HAL_IncTick+0x24>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4413      	add	r3, r2
 80053e0:	4a04      	ldr	r2, [pc, #16]	; (80053f4 <HAL_IncTick+0x24>)
 80053e2:	6013      	str	r3, [r2, #0]
}
 80053e4:	bf00      	nop
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	20000008 	.word	0x20000008
 80053f4:	20015278 	.word	0x20015278

080053f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80053f8:	b480      	push	{r7}
 80053fa:	af00      	add	r7, sp, #0
  return uwTick;
 80053fc:	4b03      	ldr	r3, [pc, #12]	; (800540c <HAL_GetTick+0x14>)
 80053fe:	681b      	ldr	r3, [r3, #0]
}
 8005400:	4618      	mov	r0, r3
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	20015278 	.word	0x20015278

08005410 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005418:	f7ff ffee 	bl	80053f8 <HAL_GetTick>
 800541c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005428:	d005      	beq.n	8005436 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800542a:	4b09      	ldr	r3, [pc, #36]	; (8005450 <HAL_Delay+0x40>)
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	461a      	mov	r2, r3
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	4413      	add	r3, r2
 8005434:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005436:	bf00      	nop
 8005438:	f7ff ffde 	bl	80053f8 <HAL_GetTick>
 800543c:	4602      	mov	r2, r0
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	1ad3      	subs	r3, r2, r3
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	429a      	cmp	r2, r3
 8005446:	d8f7      	bhi.n	8005438 <HAL_Delay+0x28>
  {
  }
}
 8005448:	bf00      	nop
 800544a:	3710      	adds	r7, #16
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}
 8005450:	20000008 	.word	0x20000008

08005454 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005454:	b480      	push	{r7}
 8005456:	b085      	sub	sp, #20
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f003 0307 	and.w	r3, r3, #7
 8005462:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005464:	4b0b      	ldr	r3, [pc, #44]	; (8005494 <__NVIC_SetPriorityGrouping+0x40>)
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800546a:	68ba      	ldr	r2, [r7, #8]
 800546c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005470:	4013      	ands	r3, r2
 8005472:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800547c:	4b06      	ldr	r3, [pc, #24]	; (8005498 <__NVIC_SetPriorityGrouping+0x44>)
 800547e:	4313      	orrs	r3, r2
 8005480:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005482:	4a04      	ldr	r2, [pc, #16]	; (8005494 <__NVIC_SetPriorityGrouping+0x40>)
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	60d3      	str	r3, [r2, #12]
}
 8005488:	bf00      	nop
 800548a:	3714      	adds	r7, #20
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr
 8005494:	e000ed00 	.word	0xe000ed00
 8005498:	05fa0000 	.word	0x05fa0000

0800549c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800549c:	b480      	push	{r7}
 800549e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80054a0:	4b04      	ldr	r3, [pc, #16]	; (80054b4 <__NVIC_GetPriorityGrouping+0x18>)
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	0a1b      	lsrs	r3, r3, #8
 80054a6:	f003 0307 	and.w	r3, r3, #7
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr
 80054b4:	e000ed00 	.word	0xe000ed00

080054b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	4603      	mov	r3, r0
 80054c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	db0b      	blt.n	80054e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80054ca:	79fb      	ldrb	r3, [r7, #7]
 80054cc:	f003 021f 	and.w	r2, r3, #31
 80054d0:	4907      	ldr	r1, [pc, #28]	; (80054f0 <__NVIC_EnableIRQ+0x38>)
 80054d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054d6:	095b      	lsrs	r3, r3, #5
 80054d8:	2001      	movs	r0, #1
 80054da:	fa00 f202 	lsl.w	r2, r0, r2
 80054de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80054e2:	bf00      	nop
 80054e4:	370c      	adds	r7, #12
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr
 80054ee:	bf00      	nop
 80054f0:	e000e100 	.word	0xe000e100

080054f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	4603      	mov	r3, r0
 80054fc:	6039      	str	r1, [r7, #0]
 80054fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005504:	2b00      	cmp	r3, #0
 8005506:	db0a      	blt.n	800551e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	b2da      	uxtb	r2, r3
 800550c:	490c      	ldr	r1, [pc, #48]	; (8005540 <__NVIC_SetPriority+0x4c>)
 800550e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005512:	0112      	lsls	r2, r2, #4
 8005514:	b2d2      	uxtb	r2, r2
 8005516:	440b      	add	r3, r1
 8005518:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800551c:	e00a      	b.n	8005534 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	b2da      	uxtb	r2, r3
 8005522:	4908      	ldr	r1, [pc, #32]	; (8005544 <__NVIC_SetPriority+0x50>)
 8005524:	79fb      	ldrb	r3, [r7, #7]
 8005526:	f003 030f 	and.w	r3, r3, #15
 800552a:	3b04      	subs	r3, #4
 800552c:	0112      	lsls	r2, r2, #4
 800552e:	b2d2      	uxtb	r2, r2
 8005530:	440b      	add	r3, r1
 8005532:	761a      	strb	r2, [r3, #24]
}
 8005534:	bf00      	nop
 8005536:	370c      	adds	r7, #12
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr
 8005540:	e000e100 	.word	0xe000e100
 8005544:	e000ed00 	.word	0xe000ed00

08005548 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005548:	b480      	push	{r7}
 800554a:	b089      	sub	sp, #36	; 0x24
 800554c:	af00      	add	r7, sp, #0
 800554e:	60f8      	str	r0, [r7, #12]
 8005550:	60b9      	str	r1, [r7, #8]
 8005552:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f003 0307 	and.w	r3, r3, #7
 800555a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	f1c3 0307 	rsb	r3, r3, #7
 8005562:	2b04      	cmp	r3, #4
 8005564:	bf28      	it	cs
 8005566:	2304      	movcs	r3, #4
 8005568:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	3304      	adds	r3, #4
 800556e:	2b06      	cmp	r3, #6
 8005570:	d902      	bls.n	8005578 <NVIC_EncodePriority+0x30>
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	3b03      	subs	r3, #3
 8005576:	e000      	b.n	800557a <NVIC_EncodePriority+0x32>
 8005578:	2300      	movs	r3, #0
 800557a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800557c:	f04f 32ff 	mov.w	r2, #4294967295
 8005580:	69bb      	ldr	r3, [r7, #24]
 8005582:	fa02 f303 	lsl.w	r3, r2, r3
 8005586:	43da      	mvns	r2, r3
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	401a      	ands	r2, r3
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005590:	f04f 31ff 	mov.w	r1, #4294967295
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	fa01 f303 	lsl.w	r3, r1, r3
 800559a:	43d9      	mvns	r1, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055a0:	4313      	orrs	r3, r2
         );
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3724      	adds	r7, #36	; 0x24
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr

080055ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055ae:	b580      	push	{r7, lr}
 80055b0:	b082      	sub	sp, #8
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f7ff ff4c 	bl	8005454 <__NVIC_SetPriorityGrouping>
}
 80055bc:	bf00      	nop
 80055be:	3708      	adds	r7, #8
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b086      	sub	sp, #24
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	4603      	mov	r3, r0
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	607a      	str	r2, [r7, #4]
 80055d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80055d2:	2300      	movs	r3, #0
 80055d4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80055d6:	f7ff ff61 	bl	800549c <__NVIC_GetPriorityGrouping>
 80055da:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	68b9      	ldr	r1, [r7, #8]
 80055e0:	6978      	ldr	r0, [r7, #20]
 80055e2:	f7ff ffb1 	bl	8005548 <NVIC_EncodePriority>
 80055e6:	4602      	mov	r2, r0
 80055e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055ec:	4611      	mov	r1, r2
 80055ee:	4618      	mov	r0, r3
 80055f0:	f7ff ff80 	bl	80054f4 <__NVIC_SetPriority>
}
 80055f4:	bf00      	nop
 80055f6:	3718      	adds	r7, #24
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
 8005602:	4603      	mov	r3, r0
 8005604:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800560a:	4618      	mov	r0, r3
 800560c:	f7ff ff54 	bl	80054b8 <__NVIC_EnableIRQ>
}
 8005610:	bf00      	nop
 8005612:	3708      	adds	r7, #8
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}

08005618 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b086      	sub	sp, #24
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005620:	2300      	movs	r3, #0
 8005622:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005624:	f7ff fee8 	bl	80053f8 <HAL_GetTick>
 8005628:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d101      	bne.n	8005634 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e099      	b.n	8005768 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2202      	movs	r2, #2
 8005640:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f022 0201 	bic.w	r2, r2, #1
 8005652:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005654:	e00f      	b.n	8005676 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005656:	f7ff fecf 	bl	80053f8 <HAL_GetTick>
 800565a:	4602      	mov	r2, r0
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	2b05      	cmp	r3, #5
 8005662:	d908      	bls.n	8005676 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2220      	movs	r2, #32
 8005668:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2203      	movs	r2, #3
 800566e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	e078      	b.n	8005768 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 0301 	and.w	r3, r3, #1
 8005680:	2b00      	cmp	r3, #0
 8005682:	d1e8      	bne.n	8005656 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800568c:	697a      	ldr	r2, [r7, #20]
 800568e:	4b38      	ldr	r3, [pc, #224]	; (8005770 <HAL_DMA_Init+0x158>)
 8005690:	4013      	ands	r3, r2
 8005692:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	685a      	ldr	r2, [r3, #4]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80056a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	691b      	ldr	r3, [r3, #16]
 80056a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	699b      	ldr	r3, [r3, #24]
 80056b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6a1b      	ldr	r3, [r3, #32]
 80056c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80056c2:	697a      	ldr	r2, [r7, #20]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056cc:	2b04      	cmp	r3, #4
 80056ce:	d107      	bne.n	80056e0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d8:	4313      	orrs	r3, r2
 80056da:	697a      	ldr	r2, [r7, #20]
 80056dc:	4313      	orrs	r3, r2
 80056de:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	697a      	ldr	r2, [r7, #20]
 80056e6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	695b      	ldr	r3, [r3, #20]
 80056ee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	f023 0307 	bic.w	r3, r3, #7
 80056f6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fc:	697a      	ldr	r2, [r7, #20]
 80056fe:	4313      	orrs	r3, r2
 8005700:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005706:	2b04      	cmp	r3, #4
 8005708:	d117      	bne.n	800573a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800570e:	697a      	ldr	r2, [r7, #20]
 8005710:	4313      	orrs	r3, r2
 8005712:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005718:	2b00      	cmp	r3, #0
 800571a:	d00e      	beq.n	800573a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f000 faa5 	bl	8005c6c <DMA_CheckFifoParam>
 8005722:	4603      	mov	r3, r0
 8005724:	2b00      	cmp	r3, #0
 8005726:	d008      	beq.n	800573a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2240      	movs	r2, #64	; 0x40
 800572c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2201      	movs	r2, #1
 8005732:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005736:	2301      	movs	r3, #1
 8005738:	e016      	b.n	8005768 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	697a      	ldr	r2, [r7, #20]
 8005740:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 fa5c 	bl	8005c00 <DMA_CalcBaseAndBitshift>
 8005748:	4603      	mov	r3, r0
 800574a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005750:	223f      	movs	r2, #63	; 0x3f
 8005752:	409a      	lsls	r2, r3
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2201      	movs	r2, #1
 8005762:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005766:	2300      	movs	r3, #0
}
 8005768:	4618      	mov	r0, r3
 800576a:	3718      	adds	r7, #24
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}
 8005770:	f010803f 	.word	0xf010803f

08005774 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b086      	sub	sp, #24
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	607a      	str	r2, [r7, #4]
 8005780:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005782:	2300      	movs	r3, #0
 8005784:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800578a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005792:	2b01      	cmp	r3, #1
 8005794:	d101      	bne.n	800579a <HAL_DMA_Start_IT+0x26>
 8005796:	2302      	movs	r3, #2
 8005798:	e048      	b.n	800582c <HAL_DMA_Start_IT+0xb8>
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2201      	movs	r2, #1
 800579e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d137      	bne.n	800581e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2202      	movs	r2, #2
 80057b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2200      	movs	r2, #0
 80057ba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	68b9      	ldr	r1, [r7, #8]
 80057c2:	68f8      	ldr	r0, [r7, #12]
 80057c4:	f000 f9ee 	bl	8005ba4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057cc:	223f      	movs	r2, #63	; 0x3f
 80057ce:	409a      	lsls	r2, r3
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f042 0216 	orr.w	r2, r2, #22
 80057e2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	695a      	ldr	r2, [r3, #20]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80057f2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d007      	beq.n	800580c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f042 0208 	orr.w	r2, r2, #8
 800580a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f042 0201 	orr.w	r2, r2, #1
 800581a:	601a      	str	r2, [r3, #0]
 800581c:	e005      	b.n	800582a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005826:	2302      	movs	r3, #2
 8005828:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800582a:	7dfb      	ldrb	r3, [r7, #23]
}
 800582c:	4618      	mov	r0, r3
 800582e:	3718      	adds	r7, #24
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005842:	b2db      	uxtb	r3, r3
 8005844:	2b02      	cmp	r3, #2
 8005846:	d004      	beq.n	8005852 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2280      	movs	r2, #128	; 0x80
 800584c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e00c      	b.n	800586c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2205      	movs	r2, #5
 8005856:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f022 0201 	bic.w	r2, r2, #1
 8005868:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800586a:	2300      	movs	r3, #0
}
 800586c:	4618      	mov	r0, r3
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b086      	sub	sp, #24
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8005880:	2300      	movs	r3, #0
 8005882:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8005884:	4b92      	ldr	r3, [pc, #584]	; (8005ad0 <HAL_DMA_IRQHandler+0x258>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a92      	ldr	r2, [pc, #584]	; (8005ad4 <HAL_DMA_IRQHandler+0x25c>)
 800588a:	fba2 2303 	umull	r2, r3, r2, r3
 800588e:	0a9b      	lsrs	r3, r3, #10
 8005890:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005896:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058a2:	2208      	movs	r2, #8
 80058a4:	409a      	lsls	r2, r3
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	4013      	ands	r3, r2
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d01a      	beq.n	80058e4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 0304 	and.w	r3, r3, #4
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d013      	beq.n	80058e4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f022 0204 	bic.w	r2, r2, #4
 80058ca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058d0:	2208      	movs	r2, #8
 80058d2:	409a      	lsls	r2, r3
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058dc:	f043 0201 	orr.w	r2, r3, #1
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058e8:	2201      	movs	r2, #1
 80058ea:	409a      	lsls	r2, r3
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	4013      	ands	r3, r2
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d012      	beq.n	800591a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	695b      	ldr	r3, [r3, #20]
 80058fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00b      	beq.n	800591a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005906:	2201      	movs	r2, #1
 8005908:	409a      	lsls	r2, r3
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005912:	f043 0202 	orr.w	r2, r3, #2
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800591e:	2204      	movs	r2, #4
 8005920:	409a      	lsls	r2, r3
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	4013      	ands	r3, r2
 8005926:	2b00      	cmp	r3, #0
 8005928:	d012      	beq.n	8005950 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 0302 	and.w	r3, r3, #2
 8005934:	2b00      	cmp	r3, #0
 8005936:	d00b      	beq.n	8005950 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800593c:	2204      	movs	r2, #4
 800593e:	409a      	lsls	r2, r3
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005948:	f043 0204 	orr.w	r2, r3, #4
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005954:	2210      	movs	r2, #16
 8005956:	409a      	lsls	r2, r3
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	4013      	ands	r3, r2
 800595c:	2b00      	cmp	r3, #0
 800595e:	d043      	beq.n	80059e8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 0308 	and.w	r3, r3, #8
 800596a:	2b00      	cmp	r3, #0
 800596c:	d03c      	beq.n	80059e8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005972:	2210      	movs	r2, #16
 8005974:	409a      	lsls	r2, r3
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005984:	2b00      	cmp	r3, #0
 8005986:	d018      	beq.n	80059ba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005992:	2b00      	cmp	r3, #0
 8005994:	d108      	bne.n	80059a8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599a:	2b00      	cmp	r3, #0
 800599c:	d024      	beq.n	80059e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	4798      	blx	r3
 80059a6:	e01f      	b.n	80059e8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d01b      	beq.n	80059e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	4798      	blx	r3
 80059b8:	e016      	b.n	80059e8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d107      	bne.n	80059d8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f022 0208 	bic.w	r2, r2, #8
 80059d6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d003      	beq.n	80059e8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059ec:	2220      	movs	r2, #32
 80059ee:	409a      	lsls	r2, r3
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	4013      	ands	r3, r2
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	f000 808e 	beq.w	8005b16 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 0310 	and.w	r3, r3, #16
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	f000 8086 	beq.w	8005b16 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a0e:	2220      	movs	r2, #32
 8005a10:	409a      	lsls	r2, r3
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	2b05      	cmp	r3, #5
 8005a20:	d136      	bne.n	8005a90 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f022 0216 	bic.w	r2, r2, #22
 8005a30:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	695a      	ldr	r2, [r3, #20]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a40:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d103      	bne.n	8005a52 <HAL_DMA_IRQHandler+0x1da>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d007      	beq.n	8005a62 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f022 0208 	bic.w	r2, r2, #8
 8005a60:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a66:	223f      	movs	r2, #63	; 0x3f
 8005a68:	409a      	lsls	r2, r3
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2201      	movs	r2, #1
 8005a7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d07d      	beq.n	8005b82 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	4798      	blx	r3
        }
        return;
 8005a8e:	e078      	b.n	8005b82 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d01c      	beq.n	8005ad8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d108      	bne.n	8005abe <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d030      	beq.n	8005b16 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	4798      	blx	r3
 8005abc:	e02b      	b.n	8005b16 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d027      	beq.n	8005b16 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	4798      	blx	r3
 8005ace:	e022      	b.n	8005b16 <HAL_DMA_IRQHandler+0x29e>
 8005ad0:	20000000 	.word	0x20000000
 8005ad4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d10f      	bne.n	8005b06 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f022 0210 	bic.w	r2, r2, #16
 8005af4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2201      	movs	r2, #1
 8005b02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d003      	beq.n	8005b16 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d032      	beq.n	8005b84 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b22:	f003 0301 	and.w	r3, r3, #1
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d022      	beq.n	8005b70 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2205      	movs	r2, #5
 8005b2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f022 0201 	bic.w	r2, r2, #1
 8005b40:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	3301      	adds	r3, #1
 8005b46:	60bb      	str	r3, [r7, #8]
 8005b48:	697a      	ldr	r2, [r7, #20]
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d307      	bcc.n	8005b5e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 0301 	and.w	r3, r3, #1
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d1f2      	bne.n	8005b42 <HAL_DMA_IRQHandler+0x2ca>
 8005b5c:	e000      	b.n	8005b60 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005b5e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d005      	beq.n	8005b84 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	4798      	blx	r3
 8005b80:	e000      	b.n	8005b84 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005b82:	bf00      	nop
    }
  }
}
 8005b84:	3718      	adds	r7, #24
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop

08005b8c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	370c      	adds	r7, #12
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b085      	sub	sp, #20
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	607a      	str	r2, [r7, #4]
 8005bb0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005bc0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	683a      	ldr	r2, [r7, #0]
 8005bc8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	2b40      	cmp	r3, #64	; 0x40
 8005bd0:	d108      	bne.n	8005be4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	68ba      	ldr	r2, [r7, #8]
 8005be0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005be2:	e007      	b.n	8005bf4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	68ba      	ldr	r2, [r7, #8]
 8005bea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	60da      	str	r2, [r3, #12]
}
 8005bf4:	bf00      	nop
 8005bf6:	3714      	adds	r7, #20
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b085      	sub	sp, #20
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	3b10      	subs	r3, #16
 8005c10:	4a13      	ldr	r2, [pc, #76]	; (8005c60 <DMA_CalcBaseAndBitshift+0x60>)
 8005c12:	fba2 2303 	umull	r2, r3, r2, r3
 8005c16:	091b      	lsrs	r3, r3, #4
 8005c18:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005c1a:	4a12      	ldr	r2, [pc, #72]	; (8005c64 <DMA_CalcBaseAndBitshift+0x64>)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	4413      	add	r3, r2
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	461a      	mov	r2, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2b03      	cmp	r3, #3
 8005c2c:	d908      	bls.n	8005c40 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	461a      	mov	r2, r3
 8005c34:	4b0c      	ldr	r3, [pc, #48]	; (8005c68 <DMA_CalcBaseAndBitshift+0x68>)
 8005c36:	4013      	ands	r3, r2
 8005c38:	1d1a      	adds	r2, r3, #4
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	659a      	str	r2, [r3, #88]	; 0x58
 8005c3e:	e006      	b.n	8005c4e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	461a      	mov	r2, r3
 8005c46:	4b08      	ldr	r3, [pc, #32]	; (8005c68 <DMA_CalcBaseAndBitshift+0x68>)
 8005c48:	4013      	ands	r3, r2
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3714      	adds	r7, #20
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr
 8005c5e:	bf00      	nop
 8005c60:	aaaaaaab 	.word	0xaaaaaaab
 8005c64:	0801a33c 	.word	0x0801a33c
 8005c68:	fffffc00 	.word	0xfffffc00

08005c6c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b085      	sub	sp, #20
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c74:	2300      	movs	r3, #0
 8005c76:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c7c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	699b      	ldr	r3, [r3, #24]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d11f      	bne.n	8005cc6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	2b03      	cmp	r3, #3
 8005c8a:	d855      	bhi.n	8005d38 <DMA_CheckFifoParam+0xcc>
 8005c8c:	a201      	add	r2, pc, #4	; (adr r2, 8005c94 <DMA_CheckFifoParam+0x28>)
 8005c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c92:	bf00      	nop
 8005c94:	08005ca5 	.word	0x08005ca5
 8005c98:	08005cb7 	.word	0x08005cb7
 8005c9c:	08005ca5 	.word	0x08005ca5
 8005ca0:	08005d39 	.word	0x08005d39
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d045      	beq.n	8005d3c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005cb4:	e042      	b.n	8005d3c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005cbe:	d13f      	bne.n	8005d40 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005cc4:	e03c      	b.n	8005d40 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	699b      	ldr	r3, [r3, #24]
 8005cca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cce:	d121      	bne.n	8005d14 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	2b03      	cmp	r3, #3
 8005cd4:	d836      	bhi.n	8005d44 <DMA_CheckFifoParam+0xd8>
 8005cd6:	a201      	add	r2, pc, #4	; (adr r2, 8005cdc <DMA_CheckFifoParam+0x70>)
 8005cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cdc:	08005ced 	.word	0x08005ced
 8005ce0:	08005cf3 	.word	0x08005cf3
 8005ce4:	08005ced 	.word	0x08005ced
 8005ce8:	08005d05 	.word	0x08005d05
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	73fb      	strb	r3, [r7, #15]
      break;
 8005cf0:	e02f      	b.n	8005d52 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d024      	beq.n	8005d48 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d02:	e021      	b.n	8005d48 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d08:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005d0c:	d11e      	bne.n	8005d4c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005d12:	e01b      	b.n	8005d4c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	2b02      	cmp	r3, #2
 8005d18:	d902      	bls.n	8005d20 <DMA_CheckFifoParam+0xb4>
 8005d1a:	2b03      	cmp	r3, #3
 8005d1c:	d003      	beq.n	8005d26 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005d1e:	e018      	b.n	8005d52 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	73fb      	strb	r3, [r7, #15]
      break;
 8005d24:	e015      	b.n	8005d52 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d00e      	beq.n	8005d50 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	73fb      	strb	r3, [r7, #15]
      break;
 8005d36:	e00b      	b.n	8005d50 <DMA_CheckFifoParam+0xe4>
      break;
 8005d38:	bf00      	nop
 8005d3a:	e00a      	b.n	8005d52 <DMA_CheckFifoParam+0xe6>
      break;
 8005d3c:	bf00      	nop
 8005d3e:	e008      	b.n	8005d52 <DMA_CheckFifoParam+0xe6>
      break;
 8005d40:	bf00      	nop
 8005d42:	e006      	b.n	8005d52 <DMA_CheckFifoParam+0xe6>
      break;
 8005d44:	bf00      	nop
 8005d46:	e004      	b.n	8005d52 <DMA_CheckFifoParam+0xe6>
      break;
 8005d48:	bf00      	nop
 8005d4a:	e002      	b.n	8005d52 <DMA_CheckFifoParam+0xe6>
      break;   
 8005d4c:	bf00      	nop
 8005d4e:	e000      	b.n	8005d52 <DMA_CheckFifoParam+0xe6>
      break;
 8005d50:	bf00      	nop
    }
  } 
  
  return status; 
 8005d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3714      	adds	r7, #20
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b089      	sub	sp, #36	; 0x24
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005d72:	2300      	movs	r3, #0
 8005d74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005d76:	2300      	movs	r3, #0
 8005d78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	61fb      	str	r3, [r7, #28]
 8005d7e:	e175      	b.n	800606c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005d80:	2201      	movs	r2, #1
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	fa02 f303 	lsl.w	r3, r2, r3
 8005d88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	697a      	ldr	r2, [r7, #20]
 8005d90:	4013      	ands	r3, r2
 8005d92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005d94:	693a      	ldr	r2, [r7, #16]
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	f040 8164 	bne.w	8006066 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d00b      	beq.n	8005dbe <HAL_GPIO_Init+0x5e>
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d007      	beq.n	8005dbe <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005db2:	2b11      	cmp	r3, #17
 8005db4:	d003      	beq.n	8005dbe <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	2b12      	cmp	r3, #18
 8005dbc:	d130      	bne.n	8005e20 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	005b      	lsls	r3, r3, #1
 8005dc8:	2203      	movs	r2, #3
 8005dca:	fa02 f303 	lsl.w	r3, r2, r3
 8005dce:	43db      	mvns	r3, r3
 8005dd0:	69ba      	ldr	r2, [r7, #24]
 8005dd2:	4013      	ands	r3, r2
 8005dd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	68da      	ldr	r2, [r3, #12]
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	005b      	lsls	r3, r3, #1
 8005dde:	fa02 f303 	lsl.w	r3, r2, r3
 8005de2:	69ba      	ldr	r2, [r7, #24]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	69ba      	ldr	r2, [r7, #24]
 8005dec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005df4:	2201      	movs	r2, #1
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dfc:	43db      	mvns	r3, r3
 8005dfe:	69ba      	ldr	r2, [r7, #24]
 8005e00:	4013      	ands	r3, r2
 8005e02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	091b      	lsrs	r3, r3, #4
 8005e0a:	f003 0201 	and.w	r2, r3, #1
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	fa02 f303 	lsl.w	r3, r2, r3
 8005e14:	69ba      	ldr	r2, [r7, #24]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	69ba      	ldr	r2, [r7, #24]
 8005e1e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	005b      	lsls	r3, r3, #1
 8005e2a:	2203      	movs	r2, #3
 8005e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e30:	43db      	mvns	r3, r3
 8005e32:	69ba      	ldr	r2, [r7, #24]
 8005e34:	4013      	ands	r3, r2
 8005e36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	689a      	ldr	r2, [r3, #8]
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	005b      	lsls	r3, r3, #1
 8005e40:	fa02 f303 	lsl.w	r3, r2, r3
 8005e44:	69ba      	ldr	r2, [r7, #24]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	69ba      	ldr	r2, [r7, #24]
 8005e4e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	2b02      	cmp	r3, #2
 8005e56:	d003      	beq.n	8005e60 <HAL_GPIO_Init+0x100>
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	2b12      	cmp	r3, #18
 8005e5e:	d123      	bne.n	8005ea8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	08da      	lsrs	r2, r3, #3
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	3208      	adds	r2, #8
 8005e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	f003 0307 	and.w	r3, r3, #7
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	220f      	movs	r2, #15
 8005e78:	fa02 f303 	lsl.w	r3, r2, r3
 8005e7c:	43db      	mvns	r3, r3
 8005e7e:	69ba      	ldr	r2, [r7, #24]
 8005e80:	4013      	ands	r3, r2
 8005e82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	691a      	ldr	r2, [r3, #16]
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	f003 0307 	and.w	r3, r3, #7
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	fa02 f303 	lsl.w	r3, r2, r3
 8005e94:	69ba      	ldr	r2, [r7, #24]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	08da      	lsrs	r2, r3, #3
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	3208      	adds	r2, #8
 8005ea2:	69b9      	ldr	r1, [r7, #24]
 8005ea4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	005b      	lsls	r3, r3, #1
 8005eb2:	2203      	movs	r2, #3
 8005eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb8:	43db      	mvns	r3, r3
 8005eba:	69ba      	ldr	r2, [r7, #24]
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	f003 0203 	and.w	r2, r3, #3
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	005b      	lsls	r3, r3, #1
 8005ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed0:	69ba      	ldr	r2, [r7, #24]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	69ba      	ldr	r2, [r7, #24]
 8005eda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	f000 80be 	beq.w	8006066 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005eea:	4b65      	ldr	r3, [pc, #404]	; (8006080 <HAL_GPIO_Init+0x320>)
 8005eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eee:	4a64      	ldr	r2, [pc, #400]	; (8006080 <HAL_GPIO_Init+0x320>)
 8005ef0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005ef4:	6453      	str	r3, [r2, #68]	; 0x44
 8005ef6:	4b62      	ldr	r3, [pc, #392]	; (8006080 <HAL_GPIO_Init+0x320>)
 8005ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005efa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005efe:	60fb      	str	r3, [r7, #12]
 8005f00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005f02:	4a60      	ldr	r2, [pc, #384]	; (8006084 <HAL_GPIO_Init+0x324>)
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	089b      	lsrs	r3, r3, #2
 8005f08:	3302      	adds	r3, #2
 8005f0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	f003 0303 	and.w	r3, r3, #3
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	220f      	movs	r2, #15
 8005f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f1e:	43db      	mvns	r3, r3
 8005f20:	69ba      	ldr	r2, [r7, #24]
 8005f22:	4013      	ands	r3, r2
 8005f24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a57      	ldr	r2, [pc, #348]	; (8006088 <HAL_GPIO_Init+0x328>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d037      	beq.n	8005f9e <HAL_GPIO_Init+0x23e>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a56      	ldr	r2, [pc, #344]	; (800608c <HAL_GPIO_Init+0x32c>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d031      	beq.n	8005f9a <HAL_GPIO_Init+0x23a>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a55      	ldr	r2, [pc, #340]	; (8006090 <HAL_GPIO_Init+0x330>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d02b      	beq.n	8005f96 <HAL_GPIO_Init+0x236>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a54      	ldr	r2, [pc, #336]	; (8006094 <HAL_GPIO_Init+0x334>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d025      	beq.n	8005f92 <HAL_GPIO_Init+0x232>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a53      	ldr	r2, [pc, #332]	; (8006098 <HAL_GPIO_Init+0x338>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d01f      	beq.n	8005f8e <HAL_GPIO_Init+0x22e>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a52      	ldr	r2, [pc, #328]	; (800609c <HAL_GPIO_Init+0x33c>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d019      	beq.n	8005f8a <HAL_GPIO_Init+0x22a>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a51      	ldr	r2, [pc, #324]	; (80060a0 <HAL_GPIO_Init+0x340>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d013      	beq.n	8005f86 <HAL_GPIO_Init+0x226>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a50      	ldr	r2, [pc, #320]	; (80060a4 <HAL_GPIO_Init+0x344>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d00d      	beq.n	8005f82 <HAL_GPIO_Init+0x222>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4a4f      	ldr	r2, [pc, #316]	; (80060a8 <HAL_GPIO_Init+0x348>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d007      	beq.n	8005f7e <HAL_GPIO_Init+0x21e>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4a4e      	ldr	r2, [pc, #312]	; (80060ac <HAL_GPIO_Init+0x34c>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d101      	bne.n	8005f7a <HAL_GPIO_Init+0x21a>
 8005f76:	2309      	movs	r3, #9
 8005f78:	e012      	b.n	8005fa0 <HAL_GPIO_Init+0x240>
 8005f7a:	230a      	movs	r3, #10
 8005f7c:	e010      	b.n	8005fa0 <HAL_GPIO_Init+0x240>
 8005f7e:	2308      	movs	r3, #8
 8005f80:	e00e      	b.n	8005fa0 <HAL_GPIO_Init+0x240>
 8005f82:	2307      	movs	r3, #7
 8005f84:	e00c      	b.n	8005fa0 <HAL_GPIO_Init+0x240>
 8005f86:	2306      	movs	r3, #6
 8005f88:	e00a      	b.n	8005fa0 <HAL_GPIO_Init+0x240>
 8005f8a:	2305      	movs	r3, #5
 8005f8c:	e008      	b.n	8005fa0 <HAL_GPIO_Init+0x240>
 8005f8e:	2304      	movs	r3, #4
 8005f90:	e006      	b.n	8005fa0 <HAL_GPIO_Init+0x240>
 8005f92:	2303      	movs	r3, #3
 8005f94:	e004      	b.n	8005fa0 <HAL_GPIO_Init+0x240>
 8005f96:	2302      	movs	r3, #2
 8005f98:	e002      	b.n	8005fa0 <HAL_GPIO_Init+0x240>
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e000      	b.n	8005fa0 <HAL_GPIO_Init+0x240>
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	69fa      	ldr	r2, [r7, #28]
 8005fa2:	f002 0203 	and.w	r2, r2, #3
 8005fa6:	0092      	lsls	r2, r2, #2
 8005fa8:	4093      	lsls	r3, r2
 8005faa:	69ba      	ldr	r2, [r7, #24]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005fb0:	4934      	ldr	r1, [pc, #208]	; (8006084 <HAL_GPIO_Init+0x324>)
 8005fb2:	69fb      	ldr	r3, [r7, #28]
 8005fb4:	089b      	lsrs	r3, r3, #2
 8005fb6:	3302      	adds	r3, #2
 8005fb8:	69ba      	ldr	r2, [r7, #24]
 8005fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005fbe:	4b3c      	ldr	r3, [pc, #240]	; (80060b0 <HAL_GPIO_Init+0x350>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	43db      	mvns	r3, r3
 8005fc8:	69ba      	ldr	r2, [r7, #24]
 8005fca:	4013      	ands	r3, r2
 8005fcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d003      	beq.n	8005fe2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005fda:	69ba      	ldr	r2, [r7, #24]
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005fe2:	4a33      	ldr	r2, [pc, #204]	; (80060b0 <HAL_GPIO_Init+0x350>)
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005fe8:	4b31      	ldr	r3, [pc, #196]	; (80060b0 <HAL_GPIO_Init+0x350>)
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	43db      	mvns	r3, r3
 8005ff2:	69ba      	ldr	r2, [r7, #24]
 8005ff4:	4013      	ands	r3, r2
 8005ff6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006000:	2b00      	cmp	r3, #0
 8006002:	d003      	beq.n	800600c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006004:	69ba      	ldr	r2, [r7, #24]
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	4313      	orrs	r3, r2
 800600a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800600c:	4a28      	ldr	r2, [pc, #160]	; (80060b0 <HAL_GPIO_Init+0x350>)
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006012:	4b27      	ldr	r3, [pc, #156]	; (80060b0 <HAL_GPIO_Init+0x350>)
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	43db      	mvns	r3, r3
 800601c:	69ba      	ldr	r2, [r7, #24]
 800601e:	4013      	ands	r3, r2
 8006020:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800602a:	2b00      	cmp	r3, #0
 800602c:	d003      	beq.n	8006036 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800602e:	69ba      	ldr	r2, [r7, #24]
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	4313      	orrs	r3, r2
 8006034:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006036:	4a1e      	ldr	r2, [pc, #120]	; (80060b0 <HAL_GPIO_Init+0x350>)
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800603c:	4b1c      	ldr	r3, [pc, #112]	; (80060b0 <HAL_GPIO_Init+0x350>)
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	43db      	mvns	r3, r3
 8006046:	69ba      	ldr	r2, [r7, #24]
 8006048:	4013      	ands	r3, r2
 800604a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006054:	2b00      	cmp	r3, #0
 8006056:	d003      	beq.n	8006060 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006058:	69ba      	ldr	r2, [r7, #24]
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	4313      	orrs	r3, r2
 800605e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006060:	4a13      	ldr	r2, [pc, #76]	; (80060b0 <HAL_GPIO_Init+0x350>)
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	3301      	adds	r3, #1
 800606a:	61fb      	str	r3, [r7, #28]
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	2b0f      	cmp	r3, #15
 8006070:	f67f ae86 	bls.w	8005d80 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006074:	bf00      	nop
 8006076:	3724      	adds	r7, #36	; 0x24
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr
 8006080:	40023800 	.word	0x40023800
 8006084:	40013800 	.word	0x40013800
 8006088:	40020000 	.word	0x40020000
 800608c:	40020400 	.word	0x40020400
 8006090:	40020800 	.word	0x40020800
 8006094:	40020c00 	.word	0x40020c00
 8006098:	40021000 	.word	0x40021000
 800609c:	40021400 	.word	0x40021400
 80060a0:	40021800 	.word	0x40021800
 80060a4:	40021c00 	.word	0x40021c00
 80060a8:	40022000 	.word	0x40022000
 80060ac:	40022400 	.word	0x40022400
 80060b0:	40013c00 	.word	0x40013c00

080060b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	460b      	mov	r3, r1
 80060be:	807b      	strh	r3, [r7, #2]
 80060c0:	4613      	mov	r3, r2
 80060c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80060c4:	787b      	ldrb	r3, [r7, #1]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d003      	beq.n	80060d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80060ca:	887a      	ldrh	r2, [r7, #2]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80060d0:	e003      	b.n	80060da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80060d2:	887b      	ldrh	r3, [r7, #2]
 80060d4:	041a      	lsls	r2, r3, #16
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	619a      	str	r2, [r3, #24]
}
 80060da:	bf00      	nop
 80060dc:	370c      	adds	r7, #12
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr

080060e6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80060e6:	b480      	push	{r7}
 80060e8:	b083      	sub	sp, #12
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	6078      	str	r0, [r7, #4]
 80060ee:	460b      	mov	r3, r1
 80060f0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	695a      	ldr	r2, [r3, #20]
 80060f6:	887b      	ldrh	r3, [r7, #2]
 80060f8:	4013      	ands	r3, r2
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d004      	beq.n	8006108 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80060fe:	887b      	ldrh	r3, [r7, #2]
 8006100:	041a      	lsls	r2, r3, #16
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8006106:	e002      	b.n	800610e <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006108:	887a      	ldrh	r2, [r7, #2]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	619a      	str	r2, [r3, #24]
}
 800610e:	bf00      	nop
 8006110:	370c      	adds	r7, #12
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr

0800611a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800611a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800611c:	b08f      	sub	sp, #60	; 0x3c
 800611e:	af0a      	add	r7, sp, #40	; 0x28
 8006120:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d101      	bne.n	800612c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	e116      	b.n	800635a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8006138:	b2db      	uxtb	r3, r3
 800613a:	2b00      	cmp	r3, #0
 800613c:	d106      	bne.n	800614c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2200      	movs	r2, #0
 8006142:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f010 fd88 	bl	8016c5c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2203      	movs	r2, #3
 8006150:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800615c:	2b00      	cmp	r3, #0
 800615e:	d102      	bne.n	8006166 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4618      	mov	r0, r3
 800616c:	f006 fb71 	bl	800c852 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	603b      	str	r3, [r7, #0]
 8006176:	687e      	ldr	r6, [r7, #4]
 8006178:	466d      	mov	r5, sp
 800617a:	f106 0410 	add.w	r4, r6, #16
 800617e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006180:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006182:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006184:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006186:	e894 0003 	ldmia.w	r4, {r0, r1}
 800618a:	e885 0003 	stmia.w	r5, {r0, r1}
 800618e:	1d33      	adds	r3, r6, #4
 8006190:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006192:	6838      	ldr	r0, [r7, #0]
 8006194:	f006 fa52 	bl	800c63c <USB_CoreInit>
 8006198:	4603      	mov	r3, r0
 800619a:	2b00      	cmp	r3, #0
 800619c:	d005      	beq.n	80061aa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2202      	movs	r2, #2
 80061a2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	e0d7      	b.n	800635a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2100      	movs	r1, #0
 80061b0:	4618      	mov	r0, r3
 80061b2:	f006 fb5f 	bl	800c874 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80061b6:	2300      	movs	r3, #0
 80061b8:	73fb      	strb	r3, [r7, #15]
 80061ba:	e04a      	b.n	8006252 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80061bc:	7bfa      	ldrb	r2, [r7, #15]
 80061be:	6879      	ldr	r1, [r7, #4]
 80061c0:	4613      	mov	r3, r2
 80061c2:	00db      	lsls	r3, r3, #3
 80061c4:	1a9b      	subs	r3, r3, r2
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	440b      	add	r3, r1
 80061ca:	333d      	adds	r3, #61	; 0x3d
 80061cc:	2201      	movs	r2, #1
 80061ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80061d0:	7bfa      	ldrb	r2, [r7, #15]
 80061d2:	6879      	ldr	r1, [r7, #4]
 80061d4:	4613      	mov	r3, r2
 80061d6:	00db      	lsls	r3, r3, #3
 80061d8:	1a9b      	subs	r3, r3, r2
 80061da:	009b      	lsls	r3, r3, #2
 80061dc:	440b      	add	r3, r1
 80061de:	333c      	adds	r3, #60	; 0x3c
 80061e0:	7bfa      	ldrb	r2, [r7, #15]
 80061e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80061e4:	7bfa      	ldrb	r2, [r7, #15]
 80061e6:	7bfb      	ldrb	r3, [r7, #15]
 80061e8:	b298      	uxth	r0, r3
 80061ea:	6879      	ldr	r1, [r7, #4]
 80061ec:	4613      	mov	r3, r2
 80061ee:	00db      	lsls	r3, r3, #3
 80061f0:	1a9b      	subs	r3, r3, r2
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	440b      	add	r3, r1
 80061f6:	3342      	adds	r3, #66	; 0x42
 80061f8:	4602      	mov	r2, r0
 80061fa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80061fc:	7bfa      	ldrb	r2, [r7, #15]
 80061fe:	6879      	ldr	r1, [r7, #4]
 8006200:	4613      	mov	r3, r2
 8006202:	00db      	lsls	r3, r3, #3
 8006204:	1a9b      	subs	r3, r3, r2
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	440b      	add	r3, r1
 800620a:	333f      	adds	r3, #63	; 0x3f
 800620c:	2200      	movs	r2, #0
 800620e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006210:	7bfa      	ldrb	r2, [r7, #15]
 8006212:	6879      	ldr	r1, [r7, #4]
 8006214:	4613      	mov	r3, r2
 8006216:	00db      	lsls	r3, r3, #3
 8006218:	1a9b      	subs	r3, r3, r2
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	440b      	add	r3, r1
 800621e:	3344      	adds	r3, #68	; 0x44
 8006220:	2200      	movs	r2, #0
 8006222:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006224:	7bfa      	ldrb	r2, [r7, #15]
 8006226:	6879      	ldr	r1, [r7, #4]
 8006228:	4613      	mov	r3, r2
 800622a:	00db      	lsls	r3, r3, #3
 800622c:	1a9b      	subs	r3, r3, r2
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	440b      	add	r3, r1
 8006232:	3348      	adds	r3, #72	; 0x48
 8006234:	2200      	movs	r2, #0
 8006236:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006238:	7bfa      	ldrb	r2, [r7, #15]
 800623a:	6879      	ldr	r1, [r7, #4]
 800623c:	4613      	mov	r3, r2
 800623e:	00db      	lsls	r3, r3, #3
 8006240:	1a9b      	subs	r3, r3, r2
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	440b      	add	r3, r1
 8006246:	3350      	adds	r3, #80	; 0x50
 8006248:	2200      	movs	r2, #0
 800624a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800624c:	7bfb      	ldrb	r3, [r7, #15]
 800624e:	3301      	adds	r3, #1
 8006250:	73fb      	strb	r3, [r7, #15]
 8006252:	7bfa      	ldrb	r2, [r7, #15]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	429a      	cmp	r2, r3
 800625a:	d3af      	bcc.n	80061bc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800625c:	2300      	movs	r3, #0
 800625e:	73fb      	strb	r3, [r7, #15]
 8006260:	e044      	b.n	80062ec <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006262:	7bfa      	ldrb	r2, [r7, #15]
 8006264:	6879      	ldr	r1, [r7, #4]
 8006266:	4613      	mov	r3, r2
 8006268:	00db      	lsls	r3, r3, #3
 800626a:	1a9b      	subs	r3, r3, r2
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	440b      	add	r3, r1
 8006270:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8006274:	2200      	movs	r2, #0
 8006276:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006278:	7bfa      	ldrb	r2, [r7, #15]
 800627a:	6879      	ldr	r1, [r7, #4]
 800627c:	4613      	mov	r3, r2
 800627e:	00db      	lsls	r3, r3, #3
 8006280:	1a9b      	subs	r3, r3, r2
 8006282:	009b      	lsls	r3, r3, #2
 8006284:	440b      	add	r3, r1
 8006286:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800628a:	7bfa      	ldrb	r2, [r7, #15]
 800628c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800628e:	7bfa      	ldrb	r2, [r7, #15]
 8006290:	6879      	ldr	r1, [r7, #4]
 8006292:	4613      	mov	r3, r2
 8006294:	00db      	lsls	r3, r3, #3
 8006296:	1a9b      	subs	r3, r3, r2
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	440b      	add	r3, r1
 800629c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80062a0:	2200      	movs	r2, #0
 80062a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80062a4:	7bfa      	ldrb	r2, [r7, #15]
 80062a6:	6879      	ldr	r1, [r7, #4]
 80062a8:	4613      	mov	r3, r2
 80062aa:	00db      	lsls	r3, r3, #3
 80062ac:	1a9b      	subs	r3, r3, r2
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	440b      	add	r3, r1
 80062b2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80062b6:	2200      	movs	r2, #0
 80062b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80062ba:	7bfa      	ldrb	r2, [r7, #15]
 80062bc:	6879      	ldr	r1, [r7, #4]
 80062be:	4613      	mov	r3, r2
 80062c0:	00db      	lsls	r3, r3, #3
 80062c2:	1a9b      	subs	r3, r3, r2
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	440b      	add	r3, r1
 80062c8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80062cc:	2200      	movs	r2, #0
 80062ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80062d0:	7bfa      	ldrb	r2, [r7, #15]
 80062d2:	6879      	ldr	r1, [r7, #4]
 80062d4:	4613      	mov	r3, r2
 80062d6:	00db      	lsls	r3, r3, #3
 80062d8:	1a9b      	subs	r3, r3, r2
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	440b      	add	r3, r1
 80062de:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80062e2:	2200      	movs	r2, #0
 80062e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80062e6:	7bfb      	ldrb	r3, [r7, #15]
 80062e8:	3301      	adds	r3, #1
 80062ea:	73fb      	strb	r3, [r7, #15]
 80062ec:	7bfa      	ldrb	r2, [r7, #15]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d3b5      	bcc.n	8006262 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	603b      	str	r3, [r7, #0]
 80062fc:	687e      	ldr	r6, [r7, #4]
 80062fe:	466d      	mov	r5, sp
 8006300:	f106 0410 	add.w	r4, r6, #16
 8006304:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006306:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006308:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800630a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800630c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006310:	e885 0003 	stmia.w	r5, {r0, r1}
 8006314:	1d33      	adds	r3, r6, #4
 8006316:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006318:	6838      	ldr	r0, [r7, #0]
 800631a:	f006 fad5 	bl	800c8c8 <USB_DevInit>
 800631e:	4603      	mov	r3, r0
 8006320:	2b00      	cmp	r3, #0
 8006322:	d005      	beq.n	8006330 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2202      	movs	r2, #2
 8006328:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	e014      	b.n	800635a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006344:	2b01      	cmp	r3, #1
 8006346:	d102      	bne.n	800634e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f001 f881 	bl	8007450 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4618      	mov	r0, r3
 8006354:	f007 fb24 	bl	800d9a0 <USB_DevDisconnect>

  return HAL_OK;
 8006358:	2300      	movs	r3, #0
}
 800635a:	4618      	mov	r0, r3
 800635c:	3714      	adds	r7, #20
 800635e:	46bd      	mov	sp, r7
 8006360:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006362 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006362:	b580      	push	{r7, lr}
 8006364:	b082      	sub	sp, #8
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006370:	2b01      	cmp	r3, #1
 8006372:	d101      	bne.n	8006378 <HAL_PCD_Start+0x16>
 8006374:	2302      	movs	r3, #2
 8006376:	e012      	b.n	800639e <HAL_PCD_Start+0x3c>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DevConnect(hpcd->Instance);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4618      	mov	r0, r3
 8006386:	f007 faf3 	bl	800d970 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4618      	mov	r0, r3
 8006390:	f006 fa4e 	bl	800c830 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3708      	adds	r7, #8
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}

080063a6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80063a6:	b590      	push	{r4, r7, lr}
 80063a8:	b08d      	sub	sp, #52	; 0x34
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063b4:	6a3b      	ldr	r3, [r7, #32]
 80063b6:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4618      	mov	r0, r3
 80063be:	f007 fb9a 	bl	800daf6 <USB_GetMode>
 80063c2:	4603      	mov	r3, r0
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	f040 83ca 	bne.w	8006b5e <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4618      	mov	r0, r3
 80063d0:	f007 fafe 	bl	800d9d0 <USB_ReadInterrupts>
 80063d4:	4603      	mov	r3, r0
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	f000 83c0 	beq.w	8006b5c <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4618      	mov	r0, r3
 80063e2:	f007 faf5 	bl	800d9d0 <USB_ReadInterrupts>
 80063e6:	4603      	mov	r3, r0
 80063e8:	f003 0302 	and.w	r3, r3, #2
 80063ec:	2b02      	cmp	r3, #2
 80063ee:	d107      	bne.n	8006400 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	695a      	ldr	r2, [r3, #20]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f002 0202 	and.w	r2, r2, #2
 80063fe:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4618      	mov	r0, r3
 8006406:	f007 fae3 	bl	800d9d0 <USB_ReadInterrupts>
 800640a:	4603      	mov	r3, r0
 800640c:	f003 0310 	and.w	r3, r3, #16
 8006410:	2b10      	cmp	r3, #16
 8006412:	d161      	bne.n	80064d8 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	699a      	ldr	r2, [r3, #24]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f022 0210 	bic.w	r2, r2, #16
 8006422:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8006424:	6a3b      	ldr	r3, [r7, #32]
 8006426:	6a1b      	ldr	r3, [r3, #32]
 8006428:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	f003 020f 	and.w	r2, r3, #15
 8006430:	4613      	mov	r3, r2
 8006432:	00db      	lsls	r3, r3, #3
 8006434:	1a9b      	subs	r3, r3, r2
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	4413      	add	r3, r2
 8006440:	3304      	adds	r3, #4
 8006442:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006444:	69bb      	ldr	r3, [r7, #24]
 8006446:	0c5b      	lsrs	r3, r3, #17
 8006448:	f003 030f 	and.w	r3, r3, #15
 800644c:	2b02      	cmp	r3, #2
 800644e:	d124      	bne.n	800649a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006450:	69ba      	ldr	r2, [r7, #24]
 8006452:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006456:	4013      	ands	r3, r2
 8006458:	2b00      	cmp	r3, #0
 800645a:	d035      	beq.n	80064c8 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006460:	69bb      	ldr	r3, [r7, #24]
 8006462:	091b      	lsrs	r3, r3, #4
 8006464:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006466:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800646a:	b29b      	uxth	r3, r3
 800646c:	461a      	mov	r2, r3
 800646e:	6a38      	ldr	r0, [r7, #32]
 8006470:	f007 f95b 	bl	800d72a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	68da      	ldr	r2, [r3, #12]
 8006478:	69bb      	ldr	r3, [r7, #24]
 800647a:	091b      	lsrs	r3, r3, #4
 800647c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006480:	441a      	add	r2, r3
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	699a      	ldr	r2, [r3, #24]
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	091b      	lsrs	r3, r3, #4
 800648e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006492:	441a      	add	r2, r3
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	619a      	str	r2, [r3, #24]
 8006498:	e016      	b.n	80064c8 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	0c5b      	lsrs	r3, r3, #17
 800649e:	f003 030f 	and.w	r3, r3, #15
 80064a2:	2b06      	cmp	r3, #6
 80064a4:	d110      	bne.n	80064c8 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80064ac:	2208      	movs	r2, #8
 80064ae:	4619      	mov	r1, r3
 80064b0:	6a38      	ldr	r0, [r7, #32]
 80064b2:	f007 f93a 	bl	800d72a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	699a      	ldr	r2, [r3, #24]
 80064ba:	69bb      	ldr	r3, [r7, #24]
 80064bc:	091b      	lsrs	r3, r3, #4
 80064be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80064c2:	441a      	add	r2, r3
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	699a      	ldr	r2, [r3, #24]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f042 0210 	orr.w	r2, r2, #16
 80064d6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4618      	mov	r0, r3
 80064de:	f007 fa77 	bl	800d9d0 <USB_ReadInterrupts>
 80064e2:	4603      	mov	r3, r0
 80064e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80064e8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80064ec:	d16e      	bne.n	80065cc <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80064ee:	2300      	movs	r3, #0
 80064f0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4618      	mov	r0, r3
 80064f8:	f007 fa7d 	bl	800d9f6 <USB_ReadDevAllOutEpInterrupt>
 80064fc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80064fe:	e062      	b.n	80065c6 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006502:	f003 0301 	and.w	r3, r3, #1
 8006506:	2b00      	cmp	r3, #0
 8006508:	d057      	beq.n	80065ba <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006510:	b2d2      	uxtb	r2, r2
 8006512:	4611      	mov	r1, r2
 8006514:	4618      	mov	r0, r3
 8006516:	f007 faa2 	bl	800da5e <USB_ReadDevOutEPInterrupt>
 800651a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	f003 0301 	and.w	r3, r3, #1
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00c      	beq.n	8006540 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006528:	015a      	lsls	r2, r3, #5
 800652a:	69fb      	ldr	r3, [r7, #28]
 800652c:	4413      	add	r3, r2
 800652e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006532:	461a      	mov	r2, r3
 8006534:	2301      	movs	r3, #1
 8006536:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006538:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 fdde 	bl	80070fc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	f003 0308 	and.w	r3, r3, #8
 8006546:	2b00      	cmp	r3, #0
 8006548:	d00c      	beq.n	8006564 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800654a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654c:	015a      	lsls	r2, r3, #5
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	4413      	add	r3, r2
 8006552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006556:	461a      	mov	r2, r3
 8006558:	2308      	movs	r3, #8
 800655a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800655c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 fed8 	bl	8007314 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	f003 0310 	and.w	r3, r3, #16
 800656a:	2b00      	cmp	r3, #0
 800656c:	d008      	beq.n	8006580 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800656e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006570:	015a      	lsls	r2, r3, #5
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	4413      	add	r3, r2
 8006576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800657a:	461a      	mov	r2, r3
 800657c:	2310      	movs	r3, #16
 800657e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	f003 0320 	and.w	r3, r3, #32
 8006586:	2b00      	cmp	r3, #0
 8006588:	d008      	beq.n	800659c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800658a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658c:	015a      	lsls	r2, r3, #5
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	4413      	add	r3, r2
 8006592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006596:	461a      	mov	r2, r3
 8006598:	2320      	movs	r3, #32
 800659a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d009      	beq.n	80065ba <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80065a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a8:	015a      	lsls	r2, r3, #5
 80065aa:	69fb      	ldr	r3, [r7, #28]
 80065ac:	4413      	add	r3, r2
 80065ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065b2:	461a      	mov	r2, r3
 80065b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80065b8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80065ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065bc:	3301      	adds	r3, #1
 80065be:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80065c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c2:	085b      	lsrs	r3, r3, #1
 80065c4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80065c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d199      	bne.n	8006500 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4618      	mov	r0, r3
 80065d2:	f007 f9fd 	bl	800d9d0 <USB_ReadInterrupts>
 80065d6:	4603      	mov	r3, r0
 80065d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80065e0:	f040 80c0 	bne.w	8006764 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4618      	mov	r0, r3
 80065ea:	f007 fa1e 	bl	800da2a <USB_ReadDevAllInEpInterrupt>
 80065ee:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80065f0:	2300      	movs	r3, #0
 80065f2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80065f4:	e0b2      	b.n	800675c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80065f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f8:	f003 0301 	and.w	r3, r3, #1
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	f000 80a7 	beq.w	8006750 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006608:	b2d2      	uxtb	r2, r2
 800660a:	4611      	mov	r1, r2
 800660c:	4618      	mov	r0, r3
 800660e:	f007 fa44 	bl	800da9a <USB_ReadDevInEPInterrupt>
 8006612:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	f003 0301 	and.w	r3, r3, #1
 800661a:	2b00      	cmp	r3, #0
 800661c:	d057      	beq.n	80066ce <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800661e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006620:	f003 030f 	and.w	r3, r3, #15
 8006624:	2201      	movs	r2, #1
 8006626:	fa02 f303 	lsl.w	r3, r2, r3
 800662a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800662c:	69fb      	ldr	r3, [r7, #28]
 800662e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006632:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	43db      	mvns	r3, r3
 8006638:	69f9      	ldr	r1, [r7, #28]
 800663a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800663e:	4013      	ands	r3, r2
 8006640:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006644:	015a      	lsls	r2, r3, #5
 8006646:	69fb      	ldr	r3, [r7, #28]
 8006648:	4413      	add	r3, r2
 800664a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800664e:	461a      	mov	r2, r3
 8006650:	2301      	movs	r3, #1
 8006652:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	2b01      	cmp	r3, #1
 800665a:	d132      	bne.n	80066c2 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800665c:	6879      	ldr	r1, [r7, #4]
 800665e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006660:	4613      	mov	r3, r2
 8006662:	00db      	lsls	r3, r3, #3
 8006664:	1a9b      	subs	r3, r3, r2
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	440b      	add	r3, r1
 800666a:	3348      	adds	r3, #72	; 0x48
 800666c:	6819      	ldr	r1, [r3, #0]
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006672:	4613      	mov	r3, r2
 8006674:	00db      	lsls	r3, r3, #3
 8006676:	1a9b      	subs	r3, r3, r2
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	4403      	add	r3, r0
 800667c:	3344      	adds	r3, #68	; 0x44
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4419      	add	r1, r3
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006686:	4613      	mov	r3, r2
 8006688:	00db      	lsls	r3, r3, #3
 800668a:	1a9b      	subs	r3, r3, r2
 800668c:	009b      	lsls	r3, r3, #2
 800668e:	4403      	add	r3, r0
 8006690:	3348      	adds	r3, #72	; 0x48
 8006692:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006696:	2b00      	cmp	r3, #0
 8006698:	d113      	bne.n	80066c2 <HAL_PCD_IRQHandler+0x31c>
 800669a:	6879      	ldr	r1, [r7, #4]
 800669c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800669e:	4613      	mov	r3, r2
 80066a0:	00db      	lsls	r3, r3, #3
 80066a2:	1a9b      	subs	r3, r3, r2
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	440b      	add	r3, r1
 80066a8:	3350      	adds	r3, #80	; 0x50
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d108      	bne.n	80066c2 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6818      	ldr	r0, [r3, #0]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80066ba:	461a      	mov	r2, r3
 80066bc:	2101      	movs	r1, #1
 80066be:	f007 fa4d 	bl	800db5c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80066c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	4619      	mov	r1, r3
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f010 fb4a 	bl	8016d62 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	f003 0308 	and.w	r3, r3, #8
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d008      	beq.n	80066ea <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80066d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066da:	015a      	lsls	r2, r3, #5
 80066dc:	69fb      	ldr	r3, [r7, #28]
 80066de:	4413      	add	r3, r2
 80066e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066e4:	461a      	mov	r2, r3
 80066e6:	2308      	movs	r3, #8
 80066e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	f003 0310 	and.w	r3, r3, #16
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d008      	beq.n	8006706 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80066f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f6:	015a      	lsls	r2, r3, #5
 80066f8:	69fb      	ldr	r3, [r7, #28]
 80066fa:	4413      	add	r3, r2
 80066fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006700:	461a      	mov	r2, r3
 8006702:	2310      	movs	r3, #16
 8006704:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800670c:	2b00      	cmp	r3, #0
 800670e:	d008      	beq.n	8006722 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006712:	015a      	lsls	r2, r3, #5
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	4413      	add	r3, r2
 8006718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800671c:	461a      	mov	r2, r3
 800671e:	2340      	movs	r3, #64	; 0x40
 8006720:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	f003 0302 	and.w	r3, r3, #2
 8006728:	2b00      	cmp	r3, #0
 800672a:	d008      	beq.n	800673e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800672c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672e:	015a      	lsls	r2, r3, #5
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	4413      	add	r3, r2
 8006734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006738:	461a      	mov	r2, r3
 800673a:	2302      	movs	r3, #2
 800673c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006744:	2b00      	cmp	r3, #0
 8006746:	d003      	beq.n	8006750 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006748:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 fc48 	bl	8006fe0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006752:	3301      	adds	r3, #1
 8006754:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006758:	085b      	lsrs	r3, r3, #1
 800675a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800675c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800675e:	2b00      	cmp	r3, #0
 8006760:	f47f af49 	bne.w	80065f6 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4618      	mov	r0, r3
 800676a:	f007 f931 	bl	800d9d0 <USB_ReadInterrupts>
 800676e:	4603      	mov	r3, r0
 8006770:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006774:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006778:	d122      	bne.n	80067c0 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800677a:	69fb      	ldr	r3, [r7, #28]
 800677c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	69fa      	ldr	r2, [r7, #28]
 8006784:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006788:	f023 0301 	bic.w	r3, r3, #1
 800678c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8006794:	2b01      	cmp	r3, #1
 8006796:	d108      	bne.n	80067aa <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80067a0:	2100      	movs	r1, #0
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f010 fd2c 	bl	8017200 <HAL_PCDEx_LPM_Callback>
 80067a8:	e002      	b.n	80067b0 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f010 fb50 	bl	8016e50 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	695a      	ldr	r2, [r3, #20]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80067be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4618      	mov	r0, r3
 80067c6:	f007 f903 	bl	800d9d0 <USB_ReadInterrupts>
 80067ca:	4603      	mov	r3, r0
 80067cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067d4:	d112      	bne.n	80067fc <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80067d6:	69fb      	ldr	r3, [r7, #28]
 80067d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	f003 0301 	and.w	r3, r3, #1
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d102      	bne.n	80067ec <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f010 fb0c 	bl	8016e04 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	695a      	ldr	r2, [r3, #20]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80067fa:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4618      	mov	r0, r3
 8006802:	f007 f8e5 	bl	800d9d0 <USB_ReadInterrupts>
 8006806:	4603      	mov	r3, r0
 8006808:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800680c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006810:	d121      	bne.n	8006856 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	695a      	ldr	r2, [r3, #20]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8006820:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8006828:	2b00      	cmp	r3, #0
 800682a:	d111      	bne.n	8006850 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800683a:	089b      	lsrs	r3, r3, #2
 800683c:	f003 020f 	and.w	r2, r3, #15
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006846:	2101      	movs	r1, #1
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f010 fcd9 	bl	8017200 <HAL_PCDEx_LPM_Callback>
 800684e:	e002      	b.n	8006856 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f010 fad7 	bl	8016e04 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4618      	mov	r0, r3
 800685c:	f007 f8b8 	bl	800d9d0 <USB_ReadInterrupts>
 8006860:	4603      	mov	r3, r0
 8006862:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006866:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800686a:	f040 80c7 	bne.w	80069fc <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800686e:	69fb      	ldr	r3, [r7, #28]
 8006870:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	69fa      	ldr	r2, [r7, #28]
 8006878:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800687c:	f023 0301 	bic.w	r3, r3, #1
 8006880:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	2110      	movs	r1, #16
 8006888:	4618      	mov	r0, r3
 800688a:	f006 f98b 	bl	800cba4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800688e:	2300      	movs	r3, #0
 8006890:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006892:	e056      	b.n	8006942 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006896:	015a      	lsls	r2, r3, #5
 8006898:	69fb      	ldr	r3, [r7, #28]
 800689a:	4413      	add	r3, r2
 800689c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068a0:	461a      	mov	r2, r3
 80068a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80068a6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80068a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068aa:	015a      	lsls	r2, r3, #5
 80068ac:	69fb      	ldr	r3, [r7, #28]
 80068ae:	4413      	add	r3, r2
 80068b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068b8:	0151      	lsls	r1, r2, #5
 80068ba:	69fa      	ldr	r2, [r7, #28]
 80068bc:	440a      	add	r2, r1
 80068be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80068c6:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80068c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ca:	015a      	lsls	r2, r3, #5
 80068cc:	69fb      	ldr	r3, [r7, #28]
 80068ce:	4413      	add	r3, r2
 80068d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068d8:	0151      	lsls	r1, r2, #5
 80068da:	69fa      	ldr	r2, [r7, #28]
 80068dc:	440a      	add	r2, r1
 80068de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80068e6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80068e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ea:	015a      	lsls	r2, r3, #5
 80068ec:	69fb      	ldr	r3, [r7, #28]
 80068ee:	4413      	add	r3, r2
 80068f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068f4:	461a      	mov	r2, r3
 80068f6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80068fa:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80068fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068fe:	015a      	lsls	r2, r3, #5
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	4413      	add	r3, r2
 8006904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800690c:	0151      	lsls	r1, r2, #5
 800690e:	69fa      	ldr	r2, [r7, #28]
 8006910:	440a      	add	r2, r1
 8006912:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006916:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800691a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800691c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800691e:	015a      	lsls	r2, r3, #5
 8006920:	69fb      	ldr	r3, [r7, #28]
 8006922:	4413      	add	r3, r2
 8006924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800692c:	0151      	lsls	r1, r2, #5
 800692e:	69fa      	ldr	r2, [r7, #28]
 8006930:	440a      	add	r2, r1
 8006932:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006936:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800693a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800693c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800693e:	3301      	adds	r3, #1
 8006940:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006948:	429a      	cmp	r2, r3
 800694a:	d3a3      	bcc.n	8006894 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800694c:	69fb      	ldr	r3, [r7, #28]
 800694e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006952:	69db      	ldr	r3, [r3, #28]
 8006954:	69fa      	ldr	r2, [r7, #28]
 8006956:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800695a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800695e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006964:	2b00      	cmp	r3, #0
 8006966:	d016      	beq.n	8006996 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006968:	69fb      	ldr	r3, [r7, #28]
 800696a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800696e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006972:	69fa      	ldr	r2, [r7, #28]
 8006974:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006978:	f043 030b 	orr.w	r3, r3, #11
 800697c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006988:	69fa      	ldr	r2, [r7, #28]
 800698a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800698e:	f043 030b 	orr.w	r3, r3, #11
 8006992:	6453      	str	r3, [r2, #68]	; 0x44
 8006994:	e015      	b.n	80069c2 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006996:	69fb      	ldr	r3, [r7, #28]
 8006998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800699c:	695a      	ldr	r2, [r3, #20]
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069a4:	4619      	mov	r1, r3
 80069a6:	f242 032b 	movw	r3, #8235	; 0x202b
 80069aa:	4313      	orrs	r3, r2
 80069ac:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069b4:	691b      	ldr	r3, [r3, #16]
 80069b6:	69fa      	ldr	r2, [r7, #28]
 80069b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069bc:	f043 030b 	orr.w	r3, r3, #11
 80069c0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80069c2:	69fb      	ldr	r3, [r7, #28]
 80069c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	69fa      	ldr	r2, [r7, #28]
 80069cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069d0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80069d4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6818      	ldr	r0, [r3, #0]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	691b      	ldr	r3, [r3, #16]
 80069de:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80069e6:	461a      	mov	r2, r3
 80069e8:	f007 f8b8 	bl	800db5c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	695a      	ldr	r2, [r3, #20]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80069fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4618      	mov	r0, r3
 8006a02:	f006 ffe5 	bl	800d9d0 <USB_ReadInterrupts>
 8006a06:	4603      	mov	r3, r0
 8006a08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a10:	d124      	bne.n	8006a5c <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4618      	mov	r0, r3
 8006a18:	f007 f87c 	bl	800db14 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4618      	mov	r0, r3
 8006a22:	f006 f920 	bl	800cc66 <USB_GetDevSpeed>
 8006a26:	4603      	mov	r3, r0
 8006a28:	461a      	mov	r2, r3
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681c      	ldr	r4, [r3, #0]
 8006a32:	f001 f999 	bl	8007d68 <HAL_RCC_GetHCLKFreq>
 8006a36:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	461a      	mov	r2, r3
 8006a40:	4620      	mov	r0, r4
 8006a42:	f005 fe53 	bl	800c6ec <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f010 f9b3 	bl	8016db2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	695a      	ldr	r2, [r3, #20]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006a5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4618      	mov	r0, r3
 8006a62:	f006 ffb5 	bl	800d9d0 <USB_ReadInterrupts>
 8006a66:	4603      	mov	r3, r0
 8006a68:	f003 0308 	and.w	r3, r3, #8
 8006a6c:	2b08      	cmp	r3, #8
 8006a6e:	d10a      	bne.n	8006a86 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f010 f990 	bl	8016d96 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	695a      	ldr	r2, [r3, #20]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f002 0208 	and.w	r2, r2, #8
 8006a84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f006 ffa0 	bl	800d9d0 <USB_ReadInterrupts>
 8006a90:	4603      	mov	r3, r0
 8006a92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a9a:	d10f      	bne.n	8006abc <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f010 f9f2 	bl	8016e90 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	695a      	ldr	r2, [r3, #20]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006aba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f006 ff85 	bl	800d9d0 <USB_ReadInterrupts>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006acc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ad0:	d10f      	bne.n	8006af2 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	4619      	mov	r1, r3
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f010 f9c5 	bl	8016e6c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	695a      	ldr	r2, [r3, #20]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006af0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4618      	mov	r0, r3
 8006af8:	f006 ff6a 	bl	800d9d0 <USB_ReadInterrupts>
 8006afc:	4603      	mov	r3, r0
 8006afe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006b02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b06:	d10a      	bne.n	8006b1e <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f010 f9d3 	bl	8016eb4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	695a      	ldr	r2, [r3, #20]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006b1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4618      	mov	r0, r3
 8006b24:	f006 ff54 	bl	800d9d0 <USB_ReadInterrupts>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	f003 0304 	and.w	r3, r3, #4
 8006b2e:	2b04      	cmp	r3, #4
 8006b30:	d115      	bne.n	8006b5e <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006b3a:	69bb      	ldr	r3, [r7, #24]
 8006b3c:	f003 0304 	and.w	r3, r3, #4
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d002      	beq.n	8006b4a <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f010 f9c3 	bl	8016ed0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	6859      	ldr	r1, [r3, #4]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	69ba      	ldr	r2, [r7, #24]
 8006b56:	430a      	orrs	r2, r1
 8006b58:	605a      	str	r2, [r3, #4]
 8006b5a:	e000      	b.n	8006b5e <HAL_PCD_IRQHandler+0x7b8>
      return;
 8006b5c:	bf00      	nop
    }
  }
}
 8006b5e:	3734      	adds	r7, #52	; 0x34
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd90      	pop	{r4, r7, pc}

08006b64 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b082      	sub	sp, #8
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	460b      	mov	r3, r1
 8006b6e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d101      	bne.n	8006b7e <HAL_PCD_SetAddress+0x1a>
 8006b7a:	2302      	movs	r3, #2
 8006b7c:	e013      	b.n	8006ba6 <HAL_PCD_SetAddress+0x42>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2201      	movs	r2, #1
 8006b82:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	78fa      	ldrb	r2, [r7, #3]
 8006b8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	78fa      	ldrb	r2, [r7, #3]
 8006b94:	4611      	mov	r1, r2
 8006b96:	4618      	mov	r0, r3
 8006b98:	f006 fec4 	bl	800d924 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006ba4:	2300      	movs	r3, #0
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3708      	adds	r7, #8
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}

08006bae <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8006bae:	b580      	push	{r7, lr}
 8006bb0:	b084      	sub	sp, #16
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
 8006bb6:	4608      	mov	r0, r1
 8006bb8:	4611      	mov	r1, r2
 8006bba:	461a      	mov	r2, r3
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	70fb      	strb	r3, [r7, #3]
 8006bc0:	460b      	mov	r3, r1
 8006bc2:	803b      	strh	r3, [r7, #0]
 8006bc4:	4613      	mov	r3, r2
 8006bc6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006bcc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	da0f      	bge.n	8006bf4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006bd4:	78fb      	ldrb	r3, [r7, #3]
 8006bd6:	f003 020f 	and.w	r2, r3, #15
 8006bda:	4613      	mov	r3, r2
 8006bdc:	00db      	lsls	r3, r3, #3
 8006bde:	1a9b      	subs	r3, r3, r2
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	3338      	adds	r3, #56	; 0x38
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	4413      	add	r3, r2
 8006be8:	3304      	adds	r3, #4
 8006bea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	705a      	strb	r2, [r3, #1]
 8006bf2:	e00f      	b.n	8006c14 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006bf4:	78fb      	ldrb	r3, [r7, #3]
 8006bf6:	f003 020f 	and.w	r2, r3, #15
 8006bfa:	4613      	mov	r3, r2
 8006bfc:	00db      	lsls	r3, r3, #3
 8006bfe:	1a9b      	subs	r3, r3, r2
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	4413      	add	r3, r2
 8006c0a:	3304      	adds	r3, #4
 8006c0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2200      	movs	r2, #0
 8006c12:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006c14:	78fb      	ldrb	r3, [r7, #3]
 8006c16:	f003 030f 	and.w	r3, r3, #15
 8006c1a:	b2da      	uxtb	r2, r3
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006c20:	883a      	ldrh	r2, [r7, #0]
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	78ba      	ldrb	r2, [r7, #2]
 8006c2a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	785b      	ldrb	r3, [r3, #1]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d004      	beq.n	8006c3e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	b29a      	uxth	r2, r3
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006c3e:	78bb      	ldrb	r3, [r7, #2]
 8006c40:	2b02      	cmp	r3, #2
 8006c42:	d102      	bne.n	8006c4a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2200      	movs	r2, #0
 8006c48:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d101      	bne.n	8006c58 <HAL_PCD_EP_Open+0xaa>
 8006c54:	2302      	movs	r3, #2
 8006c56:	e00e      	b.n	8006c76 <HAL_PCD_EP_Open+0xc8>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	68f9      	ldr	r1, [r7, #12]
 8006c66:	4618      	mov	r0, r3
 8006c68:	f006 f822 	bl	800ccb0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8006c74:	7afb      	ldrb	r3, [r7, #11]
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3710      	adds	r7, #16
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}

08006c7e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006c7e:	b580      	push	{r7, lr}
 8006c80:	b084      	sub	sp, #16
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
 8006c86:	460b      	mov	r3, r1
 8006c88:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006c8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	da0f      	bge.n	8006cb2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006c92:	78fb      	ldrb	r3, [r7, #3]
 8006c94:	f003 020f 	and.w	r2, r3, #15
 8006c98:	4613      	mov	r3, r2
 8006c9a:	00db      	lsls	r3, r3, #3
 8006c9c:	1a9b      	subs	r3, r3, r2
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	3338      	adds	r3, #56	; 0x38
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	4413      	add	r3, r2
 8006ca6:	3304      	adds	r3, #4
 8006ca8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2201      	movs	r2, #1
 8006cae:	705a      	strb	r2, [r3, #1]
 8006cb0:	e00f      	b.n	8006cd2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006cb2:	78fb      	ldrb	r3, [r7, #3]
 8006cb4:	f003 020f 	and.w	r2, r3, #15
 8006cb8:	4613      	mov	r3, r2
 8006cba:	00db      	lsls	r3, r3, #3
 8006cbc:	1a9b      	subs	r3, r3, r2
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	4413      	add	r3, r2
 8006cc8:	3304      	adds	r3, #4
 8006cca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006cd2:	78fb      	ldrb	r3, [r7, #3]
 8006cd4:	f003 030f 	and.w	r3, r3, #15
 8006cd8:	b2da      	uxtb	r2, r3
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d101      	bne.n	8006cec <HAL_PCD_EP_Close+0x6e>
 8006ce8:	2302      	movs	r3, #2
 8006cea:	e00e      	b.n	8006d0a <HAL_PCD_EP_Close+0x8c>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2201      	movs	r2, #1
 8006cf0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68f9      	ldr	r1, [r7, #12]
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f006 f860 	bl	800cdc0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3710      	adds	r7, #16
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}

08006d12 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006d12:	b580      	push	{r7, lr}
 8006d14:	b086      	sub	sp, #24
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	60f8      	str	r0, [r7, #12]
 8006d1a:	607a      	str	r2, [r7, #4]
 8006d1c:	603b      	str	r3, [r7, #0]
 8006d1e:	460b      	mov	r3, r1
 8006d20:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006d22:	7afb      	ldrb	r3, [r7, #11]
 8006d24:	f003 020f 	and.w	r2, r3, #15
 8006d28:	4613      	mov	r3, r2
 8006d2a:	00db      	lsls	r3, r3, #3
 8006d2c:	1a9b      	subs	r3, r3, r2
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006d34:	68fa      	ldr	r2, [r7, #12]
 8006d36:	4413      	add	r3, r2
 8006d38:	3304      	adds	r3, #4
 8006d3a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	683a      	ldr	r2, [r7, #0]
 8006d46:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	2200      	movs	r2, #0
 8006d52:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006d54:	7afb      	ldrb	r3, [r7, #11]
 8006d56:	f003 030f 	and.w	r3, r3, #15
 8006d5a:	b2da      	uxtb	r2, r3
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	691b      	ldr	r3, [r3, #16]
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d102      	bne.n	8006d6e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006d6e:	7afb      	ldrb	r3, [r7, #11]
 8006d70:	f003 030f 	and.w	r3, r3, #15
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d109      	bne.n	8006d8c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6818      	ldr	r0, [r3, #0]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	691b      	ldr	r3, [r3, #16]
 8006d80:	b2db      	uxtb	r3, r3
 8006d82:	461a      	mov	r2, r3
 8006d84:	6979      	ldr	r1, [r7, #20]
 8006d86:	f006 fb43 	bl	800d410 <USB_EP0StartXfer>
 8006d8a:	e008      	b.n	8006d9e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	6818      	ldr	r0, [r3, #0]
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	691b      	ldr	r3, [r3, #16]
 8006d94:	b2db      	uxtb	r3, r3
 8006d96:	461a      	mov	r2, r3
 8006d98:	6979      	ldr	r1, [r7, #20]
 8006d9a:	f006 f8ed 	bl	800cf78 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006d9e:	2300      	movs	r3, #0
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3718      	adds	r7, #24
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	460b      	mov	r3, r1
 8006db2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006db4:	78fb      	ldrb	r3, [r7, #3]
 8006db6:	f003 020f 	and.w	r2, r3, #15
 8006dba:	6879      	ldr	r1, [r7, #4]
 8006dbc:	4613      	mov	r3, r2
 8006dbe:	00db      	lsls	r3, r3, #3
 8006dc0:	1a9b      	subs	r3, r3, r2
 8006dc2:	009b      	lsls	r3, r3, #2
 8006dc4:	440b      	add	r3, r1
 8006dc6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006dca:	681b      	ldr	r3, [r3, #0]
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	370c      	adds	r7, #12
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b086      	sub	sp, #24
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	607a      	str	r2, [r7, #4]
 8006de2:	603b      	str	r3, [r7, #0]
 8006de4:	460b      	mov	r3, r1
 8006de6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006de8:	7afb      	ldrb	r3, [r7, #11]
 8006dea:	f003 020f 	and.w	r2, r3, #15
 8006dee:	4613      	mov	r3, r2
 8006df0:	00db      	lsls	r3, r3, #3
 8006df2:	1a9b      	subs	r3, r3, r2
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	3338      	adds	r3, #56	; 0x38
 8006df8:	68fa      	ldr	r2, [r7, #12]
 8006dfa:	4413      	add	r3, r2
 8006dfc:	3304      	adds	r3, #4
 8006dfe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	683a      	ldr	r2, [r7, #0]
 8006e0a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	2201      	movs	r2, #1
 8006e16:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006e18:	7afb      	ldrb	r3, [r7, #11]
 8006e1a:	f003 030f 	and.w	r3, r3, #15
 8006e1e:	b2da      	uxtb	r2, r3
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	691b      	ldr	r3, [r3, #16]
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d102      	bne.n	8006e32 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006e32:	7afb      	ldrb	r3, [r7, #11]
 8006e34:	f003 030f 	and.w	r3, r3, #15
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d109      	bne.n	8006e50 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6818      	ldr	r0, [r3, #0]
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	691b      	ldr	r3, [r3, #16]
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	461a      	mov	r2, r3
 8006e48:	6979      	ldr	r1, [r7, #20]
 8006e4a:	f006 fae1 	bl	800d410 <USB_EP0StartXfer>
 8006e4e:	e008      	b.n	8006e62 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	6818      	ldr	r0, [r3, #0]
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	691b      	ldr	r3, [r3, #16]
 8006e58:	b2db      	uxtb	r3, r3
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	6979      	ldr	r1, [r7, #20]
 8006e5e:	f006 f88b 	bl	800cf78 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006e62:	2300      	movs	r3, #0
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3718      	adds	r7, #24
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	460b      	mov	r3, r1
 8006e76:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006e78:	78fb      	ldrb	r3, [r7, #3]
 8006e7a:	f003 020f 	and.w	r2, r3, #15
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d901      	bls.n	8006e8a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	e050      	b.n	8006f2c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006e8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	da0f      	bge.n	8006eb2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006e92:	78fb      	ldrb	r3, [r7, #3]
 8006e94:	f003 020f 	and.w	r2, r3, #15
 8006e98:	4613      	mov	r3, r2
 8006e9a:	00db      	lsls	r3, r3, #3
 8006e9c:	1a9b      	subs	r3, r3, r2
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	3338      	adds	r3, #56	; 0x38
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	3304      	adds	r3, #4
 8006ea8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2201      	movs	r2, #1
 8006eae:	705a      	strb	r2, [r3, #1]
 8006eb0:	e00d      	b.n	8006ece <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006eb2:	78fa      	ldrb	r2, [r7, #3]
 8006eb4:	4613      	mov	r3, r2
 8006eb6:	00db      	lsls	r3, r3, #3
 8006eb8:	1a9b      	subs	r3, r3, r2
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	4413      	add	r3, r2
 8006ec4:	3304      	adds	r3, #4
 8006ec6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006ed4:	78fb      	ldrb	r3, [r7, #3]
 8006ed6:	f003 030f 	and.w	r3, r3, #15
 8006eda:	b2da      	uxtb	r2, r3
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d101      	bne.n	8006eee <HAL_PCD_EP_SetStall+0x82>
 8006eea:	2302      	movs	r3, #2
 8006eec:	e01e      	b.n	8006f2c <HAL_PCD_EP_SetStall+0xc0>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	68f9      	ldr	r1, [r7, #12]
 8006efc:	4618      	mov	r0, r3
 8006efe:	f006 fc3d 	bl	800d77c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006f02:	78fb      	ldrb	r3, [r7, #3]
 8006f04:	f003 030f 	and.w	r3, r3, #15
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d10a      	bne.n	8006f22 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6818      	ldr	r0, [r3, #0]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	691b      	ldr	r3, [r3, #16]
 8006f14:	b2d9      	uxtb	r1, r3
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	f006 fe1d 	bl	800db5c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2200      	movs	r2, #0
 8006f26:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006f2a:	2300      	movs	r3, #0
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3710      	adds	r7, #16
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	460b      	mov	r3, r1
 8006f3e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006f40:	78fb      	ldrb	r3, [r7, #3]
 8006f42:	f003 020f 	and.w	r2, r3, #15
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d901      	bls.n	8006f52 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e042      	b.n	8006fd8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006f52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	da0f      	bge.n	8006f7a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006f5a:	78fb      	ldrb	r3, [r7, #3]
 8006f5c:	f003 020f 	and.w	r2, r3, #15
 8006f60:	4613      	mov	r3, r2
 8006f62:	00db      	lsls	r3, r3, #3
 8006f64:	1a9b      	subs	r3, r3, r2
 8006f66:	009b      	lsls	r3, r3, #2
 8006f68:	3338      	adds	r3, #56	; 0x38
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	4413      	add	r3, r2
 8006f6e:	3304      	adds	r3, #4
 8006f70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2201      	movs	r2, #1
 8006f76:	705a      	strb	r2, [r3, #1]
 8006f78:	e00f      	b.n	8006f9a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006f7a:	78fb      	ldrb	r3, [r7, #3]
 8006f7c:	f003 020f 	and.w	r2, r3, #15
 8006f80:	4613      	mov	r3, r2
 8006f82:	00db      	lsls	r3, r3, #3
 8006f84:	1a9b      	subs	r3, r3, r2
 8006f86:	009b      	lsls	r3, r3, #2
 8006f88:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	4413      	add	r3, r2
 8006f90:	3304      	adds	r3, #4
 8006f92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2200      	movs	r2, #0
 8006f98:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006fa0:	78fb      	ldrb	r3, [r7, #3]
 8006fa2:	f003 030f 	and.w	r3, r3, #15
 8006fa6:	b2da      	uxtb	r2, r3
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d101      	bne.n	8006fba <HAL_PCD_EP_ClrStall+0x86>
 8006fb6:	2302      	movs	r3, #2
 8006fb8:	e00e      	b.n	8006fd8 <HAL_PCD_EP_ClrStall+0xa4>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	68f9      	ldr	r1, [r7, #12]
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f006 fc45 	bl	800d858 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006fd6:	2300      	movs	r3, #0
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3710      	adds	r7, #16
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b08a      	sub	sp, #40	; 0x28
 8006fe4:	af02      	add	r7, sp, #8
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006ff4:	683a      	ldr	r2, [r7, #0]
 8006ff6:	4613      	mov	r3, r2
 8006ff8:	00db      	lsls	r3, r3, #3
 8006ffa:	1a9b      	subs	r3, r3, r2
 8006ffc:	009b      	lsls	r3, r3, #2
 8006ffe:	3338      	adds	r3, #56	; 0x38
 8007000:	687a      	ldr	r2, [r7, #4]
 8007002:	4413      	add	r3, r2
 8007004:	3304      	adds	r3, #4
 8007006:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	699a      	ldr	r2, [r3, #24]
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	695b      	ldr	r3, [r3, #20]
 8007010:	429a      	cmp	r2, r3
 8007012:	d901      	bls.n	8007018 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	e06c      	b.n	80070f2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	695a      	ldr	r2, [r3, #20]
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	699b      	ldr	r3, [r3, #24]
 8007020:	1ad3      	subs	r3, r2, r3
 8007022:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	69fa      	ldr	r2, [r7, #28]
 800702a:	429a      	cmp	r2, r3
 800702c:	d902      	bls.n	8007034 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007034:	69fb      	ldr	r3, [r7, #28]
 8007036:	3303      	adds	r3, #3
 8007038:	089b      	lsrs	r3, r3, #2
 800703a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800703c:	e02b      	b.n	8007096 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	695a      	ldr	r2, [r3, #20]
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	699b      	ldr	r3, [r3, #24]
 8007046:	1ad3      	subs	r3, r2, r3
 8007048:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	69fa      	ldr	r2, [r7, #28]
 8007050:	429a      	cmp	r2, r3
 8007052:	d902      	bls.n	800705a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800705a:	69fb      	ldr	r3, [r7, #28]
 800705c:	3303      	adds	r3, #3
 800705e:	089b      	lsrs	r3, r3, #2
 8007060:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	68d9      	ldr	r1, [r3, #12]
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	b2da      	uxtb	r2, r3
 800706a:	69fb      	ldr	r3, [r7, #28]
 800706c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007072:	b2db      	uxtb	r3, r3
 8007074:	9300      	str	r3, [sp, #0]
 8007076:	4603      	mov	r3, r0
 8007078:	6978      	ldr	r0, [r7, #20]
 800707a:	f006 fb21 	bl	800d6c0 <USB_WritePacket>

    ep->xfer_buff  += len;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	68da      	ldr	r2, [r3, #12]
 8007082:	69fb      	ldr	r3, [r7, #28]
 8007084:	441a      	add	r2, r3
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	699a      	ldr	r2, [r3, #24]
 800708e:	69fb      	ldr	r3, [r7, #28]
 8007090:	441a      	add	r2, r3
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	015a      	lsls	r2, r3, #5
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	4413      	add	r3, r2
 800709e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070a2:	699b      	ldr	r3, [r3, #24]
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	69ba      	ldr	r2, [r7, #24]
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d809      	bhi.n	80070c0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	699a      	ldr	r2, [r3, #24]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d203      	bcs.n	80070c0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	695b      	ldr	r3, [r3, #20]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d1be      	bne.n	800703e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	695a      	ldr	r2, [r3, #20]
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	699b      	ldr	r3, [r3, #24]
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d811      	bhi.n	80070f0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	f003 030f 	and.w	r3, r3, #15
 80070d2:	2201      	movs	r2, #1
 80070d4:	fa02 f303 	lsl.w	r3, r2, r3
 80070d8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	43db      	mvns	r3, r3
 80070e6:	6939      	ldr	r1, [r7, #16]
 80070e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070ec:	4013      	ands	r3, r2
 80070ee:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80070f0:	2300      	movs	r3, #0
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3720      	adds	r7, #32
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
	...

080070fc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b086      	sub	sp, #24
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	333c      	adds	r3, #60	; 0x3c
 8007114:	3304      	adds	r3, #4
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	015a      	lsls	r2, r3, #5
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	4413      	add	r3, r2
 8007122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	691b      	ldr	r3, [r3, #16]
 800712e:	2b01      	cmp	r3, #1
 8007130:	f040 80a0 	bne.w	8007274 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	f003 0308 	and.w	r3, r3, #8
 800713a:	2b00      	cmp	r3, #0
 800713c:	d015      	beq.n	800716a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	4a72      	ldr	r2, [pc, #456]	; (800730c <PCD_EP_OutXfrComplete_int+0x210>)
 8007142:	4293      	cmp	r3, r2
 8007144:	f240 80dd 	bls.w	8007302 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800714e:	2b00      	cmp	r3, #0
 8007150:	f000 80d7 	beq.w	8007302 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	015a      	lsls	r2, r3, #5
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	4413      	add	r3, r2
 800715c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007160:	461a      	mov	r2, r3
 8007162:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007166:	6093      	str	r3, [r2, #8]
 8007168:	e0cb      	b.n	8007302 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	f003 0320 	and.w	r3, r3, #32
 8007170:	2b00      	cmp	r3, #0
 8007172:	d009      	beq.n	8007188 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	015a      	lsls	r2, r3, #5
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	4413      	add	r3, r2
 800717c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007180:	461a      	mov	r2, r3
 8007182:	2320      	movs	r3, #32
 8007184:	6093      	str	r3, [r2, #8]
 8007186:	e0bc      	b.n	8007302 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800718e:	2b00      	cmp	r3, #0
 8007190:	f040 80b7 	bne.w	8007302 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	4a5d      	ldr	r2, [pc, #372]	; (800730c <PCD_EP_OutXfrComplete_int+0x210>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d90f      	bls.n	80071bc <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d00a      	beq.n	80071bc <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	015a      	lsls	r2, r3, #5
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	4413      	add	r3, r2
 80071ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071b2:	461a      	mov	r2, r3
 80071b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071b8:	6093      	str	r3, [r2, #8]
 80071ba:	e0a2      	b.n	8007302 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80071bc:	6879      	ldr	r1, [r7, #4]
 80071be:	683a      	ldr	r2, [r7, #0]
 80071c0:	4613      	mov	r3, r2
 80071c2:	00db      	lsls	r3, r3, #3
 80071c4:	1a9b      	subs	r3, r3, r2
 80071c6:	009b      	lsls	r3, r3, #2
 80071c8:	440b      	add	r3, r1
 80071ca:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80071ce:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	0159      	lsls	r1, r3, #5
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	440b      	add	r3, r1
 80071d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071dc:	691b      	ldr	r3, [r3, #16]
 80071de:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80071e2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	683a      	ldr	r2, [r7, #0]
 80071e8:	4613      	mov	r3, r2
 80071ea:	00db      	lsls	r3, r3, #3
 80071ec:	1a9b      	subs	r3, r3, r2
 80071ee:	009b      	lsls	r3, r3, #2
 80071f0:	4403      	add	r3, r0
 80071f2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80071f6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80071f8:	6879      	ldr	r1, [r7, #4]
 80071fa:	683a      	ldr	r2, [r7, #0]
 80071fc:	4613      	mov	r3, r2
 80071fe:	00db      	lsls	r3, r3, #3
 8007200:	1a9b      	subs	r3, r3, r2
 8007202:	009b      	lsls	r3, r3, #2
 8007204:	440b      	add	r3, r1
 8007206:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800720a:	6819      	ldr	r1, [r3, #0]
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	683a      	ldr	r2, [r7, #0]
 8007210:	4613      	mov	r3, r2
 8007212:	00db      	lsls	r3, r3, #3
 8007214:	1a9b      	subs	r3, r3, r2
 8007216:	009b      	lsls	r3, r3, #2
 8007218:	4403      	add	r3, r0
 800721a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4419      	add	r1, r3
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	683a      	ldr	r2, [r7, #0]
 8007226:	4613      	mov	r3, r2
 8007228:	00db      	lsls	r3, r3, #3
 800722a:	1a9b      	subs	r3, r3, r2
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	4403      	add	r3, r0
 8007230:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007234:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d114      	bne.n	8007266 <PCD_EP_OutXfrComplete_int+0x16a>
 800723c:	6879      	ldr	r1, [r7, #4]
 800723e:	683a      	ldr	r2, [r7, #0]
 8007240:	4613      	mov	r3, r2
 8007242:	00db      	lsls	r3, r3, #3
 8007244:	1a9b      	subs	r3, r3, r2
 8007246:	009b      	lsls	r3, r3, #2
 8007248:	440b      	add	r3, r1
 800724a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d108      	bne.n	8007266 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6818      	ldr	r0, [r3, #0]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800725e:	461a      	mov	r2, r3
 8007260:	2101      	movs	r1, #1
 8007262:	f006 fc7b 	bl	800db5c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	b2db      	uxtb	r3, r3
 800726a:	4619      	mov	r1, r3
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f00f fd5d 	bl	8016d2c <HAL_PCD_DataOutStageCallback>
 8007272:	e046      	b.n	8007302 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	4a26      	ldr	r2, [pc, #152]	; (8007310 <PCD_EP_OutXfrComplete_int+0x214>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d124      	bne.n	80072c6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007282:	2b00      	cmp	r3, #0
 8007284:	d00a      	beq.n	800729c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	015a      	lsls	r2, r3, #5
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	4413      	add	r3, r2
 800728e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007292:	461a      	mov	r2, r3
 8007294:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007298:	6093      	str	r3, [r2, #8]
 800729a:	e032      	b.n	8007302 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	f003 0320 	and.w	r3, r3, #32
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d008      	beq.n	80072b8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	015a      	lsls	r2, r3, #5
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	4413      	add	r3, r2
 80072ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072b2:	461a      	mov	r2, r3
 80072b4:	2320      	movs	r3, #32
 80072b6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	4619      	mov	r1, r3
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f00f fd34 	bl	8016d2c <HAL_PCD_DataOutStageCallback>
 80072c4:	e01d      	b.n	8007302 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d114      	bne.n	80072f6 <PCD_EP_OutXfrComplete_int+0x1fa>
 80072cc:	6879      	ldr	r1, [r7, #4]
 80072ce:	683a      	ldr	r2, [r7, #0]
 80072d0:	4613      	mov	r3, r2
 80072d2:	00db      	lsls	r3, r3, #3
 80072d4:	1a9b      	subs	r3, r3, r2
 80072d6:	009b      	lsls	r3, r3, #2
 80072d8:	440b      	add	r3, r1
 80072da:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d108      	bne.n	80072f6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6818      	ldr	r0, [r3, #0]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80072ee:	461a      	mov	r2, r3
 80072f0:	2100      	movs	r1, #0
 80072f2:	f006 fc33 	bl	800db5c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	b2db      	uxtb	r3, r3
 80072fa:	4619      	mov	r1, r3
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f00f fd15 	bl	8016d2c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007302:	2300      	movs	r3, #0
}
 8007304:	4618      	mov	r0, r3
 8007306:	3718      	adds	r7, #24
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}
 800730c:	4f54300a 	.word	0x4f54300a
 8007310:	4f54310a 	.word	0x4f54310a

08007314 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b086      	sub	sp, #24
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	333c      	adds	r3, #60	; 0x3c
 800732c:	3304      	adds	r3, #4
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	015a      	lsls	r2, r3, #5
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	4413      	add	r3, r2
 800733a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	4a15      	ldr	r2, [pc, #84]	; (800739c <PCD_EP_OutSetupPacket_int+0x88>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d90e      	bls.n	8007368 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007350:	2b00      	cmp	r3, #0
 8007352:	d009      	beq.n	8007368 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	015a      	lsls	r2, r3, #5
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	4413      	add	r3, r2
 800735c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007360:	461a      	mov	r2, r3
 8007362:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007366:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f00f fccd 	bl	8016d08 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	4a0a      	ldr	r2, [pc, #40]	; (800739c <PCD_EP_OutSetupPacket_int+0x88>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d90c      	bls.n	8007390 <PCD_EP_OutSetupPacket_int+0x7c>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	691b      	ldr	r3, [r3, #16]
 800737a:	2b01      	cmp	r3, #1
 800737c:	d108      	bne.n	8007390 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6818      	ldr	r0, [r3, #0]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007388:	461a      	mov	r2, r3
 800738a:	2101      	movs	r1, #1
 800738c:	f006 fbe6 	bl	800db5c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007390:	2300      	movs	r3, #0
}
 8007392:	4618      	mov	r0, r3
 8007394:	3718      	adds	r7, #24
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
 800739a:	bf00      	nop
 800739c:	4f54300a 	.word	0x4f54300a

080073a0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b085      	sub	sp, #20
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	460b      	mov	r3, r1
 80073aa:	70fb      	strb	r3, [r7, #3]
 80073ac:	4613      	mov	r3, r2
 80073ae:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80073b8:	78fb      	ldrb	r3, [r7, #3]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d107      	bne.n	80073ce <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80073be:	883b      	ldrh	r3, [r7, #0]
 80073c0:	0419      	lsls	r1, r3, #16
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	68ba      	ldr	r2, [r7, #8]
 80073c8:	430a      	orrs	r2, r1
 80073ca:	629a      	str	r2, [r3, #40]	; 0x28
 80073cc:	e028      	b.n	8007420 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073d4:	0c1b      	lsrs	r3, r3, #16
 80073d6:	68ba      	ldr	r2, [r7, #8]
 80073d8:	4413      	add	r3, r2
 80073da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80073dc:	2300      	movs	r3, #0
 80073de:	73fb      	strb	r3, [r7, #15]
 80073e0:	e00d      	b.n	80073fe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681a      	ldr	r2, [r3, #0]
 80073e6:	7bfb      	ldrb	r3, [r7, #15]
 80073e8:	3340      	adds	r3, #64	; 0x40
 80073ea:	009b      	lsls	r3, r3, #2
 80073ec:	4413      	add	r3, r2
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	0c1b      	lsrs	r3, r3, #16
 80073f2:	68ba      	ldr	r2, [r7, #8]
 80073f4:	4413      	add	r3, r2
 80073f6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80073f8:	7bfb      	ldrb	r3, [r7, #15]
 80073fa:	3301      	adds	r3, #1
 80073fc:	73fb      	strb	r3, [r7, #15]
 80073fe:	7bfa      	ldrb	r2, [r7, #15]
 8007400:	78fb      	ldrb	r3, [r7, #3]
 8007402:	3b01      	subs	r3, #1
 8007404:	429a      	cmp	r2, r3
 8007406:	d3ec      	bcc.n	80073e2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007408:	883b      	ldrh	r3, [r7, #0]
 800740a:	0418      	lsls	r0, r3, #16
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6819      	ldr	r1, [r3, #0]
 8007410:	78fb      	ldrb	r3, [r7, #3]
 8007412:	3b01      	subs	r3, #1
 8007414:	68ba      	ldr	r2, [r7, #8]
 8007416:	4302      	orrs	r2, r0
 8007418:	3340      	adds	r3, #64	; 0x40
 800741a:	009b      	lsls	r3, r3, #2
 800741c:	440b      	add	r3, r1
 800741e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007420:	2300      	movs	r3, #0
}
 8007422:	4618      	mov	r0, r3
 8007424:	3714      	adds	r7, #20
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr

0800742e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800742e:	b480      	push	{r7}
 8007430:	b083      	sub	sp, #12
 8007432:	af00      	add	r7, sp, #0
 8007434:	6078      	str	r0, [r7, #4]
 8007436:	460b      	mov	r3, r1
 8007438:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	887a      	ldrh	r2, [r7, #2]
 8007440:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007442:	2300      	movs	r3, #0
}
 8007444:	4618      	mov	r0, r3
 8007446:	370c      	adds	r7, #12
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr

08007450 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007450:	b480      	push	{r7}
 8007452:	b085      	sub	sp, #20
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2201      	movs	r2, #1
 8007462:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	699b      	ldr	r3, [r3, #24]
 8007472:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800747e:	4b05      	ldr	r3, [pc, #20]	; (8007494 <HAL_PCDEx_ActivateLPM+0x44>)
 8007480:	4313      	orrs	r3, r2
 8007482:	68fa      	ldr	r2, [r7, #12]
 8007484:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8007486:	2300      	movs	r3, #0
}
 8007488:	4618      	mov	r0, r3
 800748a:	3714      	adds	r7, #20
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr
 8007494:	10000003 	.word	0x10000003

08007498 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b086      	sub	sp, #24
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80074a0:	2300      	movs	r3, #0
 80074a2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d101      	bne.n	80074ae <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80074aa:	2301      	movs	r3, #1
 80074ac:	e291      	b.n	80079d2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f003 0301 	and.w	r3, r3, #1
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	f000 8087 	beq.w	80075ca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80074bc:	4b96      	ldr	r3, [pc, #600]	; (8007718 <HAL_RCC_OscConfig+0x280>)
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	f003 030c 	and.w	r3, r3, #12
 80074c4:	2b04      	cmp	r3, #4
 80074c6:	d00c      	beq.n	80074e2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80074c8:	4b93      	ldr	r3, [pc, #588]	; (8007718 <HAL_RCC_OscConfig+0x280>)
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	f003 030c 	and.w	r3, r3, #12
 80074d0:	2b08      	cmp	r3, #8
 80074d2:	d112      	bne.n	80074fa <HAL_RCC_OscConfig+0x62>
 80074d4:	4b90      	ldr	r3, [pc, #576]	; (8007718 <HAL_RCC_OscConfig+0x280>)
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80074e0:	d10b      	bne.n	80074fa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074e2:	4b8d      	ldr	r3, [pc, #564]	; (8007718 <HAL_RCC_OscConfig+0x280>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d06c      	beq.n	80075c8 <HAL_RCC_OscConfig+0x130>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d168      	bne.n	80075c8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	e26b      	b.n	80079d2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007502:	d106      	bne.n	8007512 <HAL_RCC_OscConfig+0x7a>
 8007504:	4b84      	ldr	r3, [pc, #528]	; (8007718 <HAL_RCC_OscConfig+0x280>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a83      	ldr	r2, [pc, #524]	; (8007718 <HAL_RCC_OscConfig+0x280>)
 800750a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800750e:	6013      	str	r3, [r2, #0]
 8007510:	e02e      	b.n	8007570 <HAL_RCC_OscConfig+0xd8>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d10c      	bne.n	8007534 <HAL_RCC_OscConfig+0x9c>
 800751a:	4b7f      	ldr	r3, [pc, #508]	; (8007718 <HAL_RCC_OscConfig+0x280>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a7e      	ldr	r2, [pc, #504]	; (8007718 <HAL_RCC_OscConfig+0x280>)
 8007520:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007524:	6013      	str	r3, [r2, #0]
 8007526:	4b7c      	ldr	r3, [pc, #496]	; (8007718 <HAL_RCC_OscConfig+0x280>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a7b      	ldr	r2, [pc, #492]	; (8007718 <HAL_RCC_OscConfig+0x280>)
 800752c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007530:	6013      	str	r3, [r2, #0]
 8007532:	e01d      	b.n	8007570 <HAL_RCC_OscConfig+0xd8>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800753c:	d10c      	bne.n	8007558 <HAL_RCC_OscConfig+0xc0>
 800753e:	4b76      	ldr	r3, [pc, #472]	; (8007718 <HAL_RCC_OscConfig+0x280>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a75      	ldr	r2, [pc, #468]	; (8007718 <HAL_RCC_OscConfig+0x280>)
 8007544:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007548:	6013      	str	r3, [r2, #0]
 800754a:	4b73      	ldr	r3, [pc, #460]	; (8007718 <HAL_RCC_OscConfig+0x280>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a72      	ldr	r2, [pc, #456]	; (8007718 <HAL_RCC_OscConfig+0x280>)
 8007550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007554:	6013      	str	r3, [r2, #0]
 8007556:	e00b      	b.n	8007570 <HAL_RCC_OscConfig+0xd8>
 8007558:	4b6f      	ldr	r3, [pc, #444]	; (8007718 <HAL_RCC_OscConfig+0x280>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a6e      	ldr	r2, [pc, #440]	; (8007718 <HAL_RCC_OscConfig+0x280>)
 800755e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007562:	6013      	str	r3, [r2, #0]
 8007564:	4b6c      	ldr	r3, [pc, #432]	; (8007718 <HAL_RCC_OscConfig+0x280>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a6b      	ldr	r2, [pc, #428]	; (8007718 <HAL_RCC_OscConfig+0x280>)
 800756a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800756e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d013      	beq.n	80075a0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007578:	f7fd ff3e 	bl	80053f8 <HAL_GetTick>
 800757c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800757e:	e008      	b.n	8007592 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007580:	f7fd ff3a 	bl	80053f8 <HAL_GetTick>
 8007584:	4602      	mov	r2, r0
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	1ad3      	subs	r3, r2, r3
 800758a:	2b64      	cmp	r3, #100	; 0x64
 800758c:	d901      	bls.n	8007592 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800758e:	2303      	movs	r3, #3
 8007590:	e21f      	b.n	80079d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007592:	4b61      	ldr	r3, [pc, #388]	; (8007718 <HAL_RCC_OscConfig+0x280>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800759a:	2b00      	cmp	r3, #0
 800759c:	d0f0      	beq.n	8007580 <HAL_RCC_OscConfig+0xe8>
 800759e:	e014      	b.n	80075ca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075a0:	f7fd ff2a 	bl	80053f8 <HAL_GetTick>
 80075a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80075a6:	e008      	b.n	80075ba <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80075a8:	f7fd ff26 	bl	80053f8 <HAL_GetTick>
 80075ac:	4602      	mov	r2, r0
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	1ad3      	subs	r3, r2, r3
 80075b2:	2b64      	cmp	r3, #100	; 0x64
 80075b4:	d901      	bls.n	80075ba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80075b6:	2303      	movs	r3, #3
 80075b8:	e20b      	b.n	80079d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80075ba:	4b57      	ldr	r3, [pc, #348]	; (8007718 <HAL_RCC_OscConfig+0x280>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d1f0      	bne.n	80075a8 <HAL_RCC_OscConfig+0x110>
 80075c6:	e000      	b.n	80075ca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f003 0302 	and.w	r3, r3, #2
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d069      	beq.n	80076aa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80075d6:	4b50      	ldr	r3, [pc, #320]	; (8007718 <HAL_RCC_OscConfig+0x280>)
 80075d8:	689b      	ldr	r3, [r3, #8]
 80075da:	f003 030c 	and.w	r3, r3, #12
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d00b      	beq.n	80075fa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80075e2:	4b4d      	ldr	r3, [pc, #308]	; (8007718 <HAL_RCC_OscConfig+0x280>)
 80075e4:	689b      	ldr	r3, [r3, #8]
 80075e6:	f003 030c 	and.w	r3, r3, #12
 80075ea:	2b08      	cmp	r3, #8
 80075ec:	d11c      	bne.n	8007628 <HAL_RCC_OscConfig+0x190>
 80075ee:	4b4a      	ldr	r3, [pc, #296]	; (8007718 <HAL_RCC_OscConfig+0x280>)
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d116      	bne.n	8007628 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80075fa:	4b47      	ldr	r3, [pc, #284]	; (8007718 <HAL_RCC_OscConfig+0x280>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f003 0302 	and.w	r3, r3, #2
 8007602:	2b00      	cmp	r3, #0
 8007604:	d005      	beq.n	8007612 <HAL_RCC_OscConfig+0x17a>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	68db      	ldr	r3, [r3, #12]
 800760a:	2b01      	cmp	r3, #1
 800760c:	d001      	beq.n	8007612 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800760e:	2301      	movs	r3, #1
 8007610:	e1df      	b.n	80079d2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007612:	4b41      	ldr	r3, [pc, #260]	; (8007718 <HAL_RCC_OscConfig+0x280>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	691b      	ldr	r3, [r3, #16]
 800761e:	00db      	lsls	r3, r3, #3
 8007620:	493d      	ldr	r1, [pc, #244]	; (8007718 <HAL_RCC_OscConfig+0x280>)
 8007622:	4313      	orrs	r3, r2
 8007624:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007626:	e040      	b.n	80076aa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d023      	beq.n	8007678 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007630:	4b39      	ldr	r3, [pc, #228]	; (8007718 <HAL_RCC_OscConfig+0x280>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a38      	ldr	r2, [pc, #224]	; (8007718 <HAL_RCC_OscConfig+0x280>)
 8007636:	f043 0301 	orr.w	r3, r3, #1
 800763a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800763c:	f7fd fedc 	bl	80053f8 <HAL_GetTick>
 8007640:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007642:	e008      	b.n	8007656 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007644:	f7fd fed8 	bl	80053f8 <HAL_GetTick>
 8007648:	4602      	mov	r2, r0
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	1ad3      	subs	r3, r2, r3
 800764e:	2b02      	cmp	r3, #2
 8007650:	d901      	bls.n	8007656 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007652:	2303      	movs	r3, #3
 8007654:	e1bd      	b.n	80079d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007656:	4b30      	ldr	r3, [pc, #192]	; (8007718 <HAL_RCC_OscConfig+0x280>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f003 0302 	and.w	r3, r3, #2
 800765e:	2b00      	cmp	r3, #0
 8007660:	d0f0      	beq.n	8007644 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007662:	4b2d      	ldr	r3, [pc, #180]	; (8007718 <HAL_RCC_OscConfig+0x280>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	691b      	ldr	r3, [r3, #16]
 800766e:	00db      	lsls	r3, r3, #3
 8007670:	4929      	ldr	r1, [pc, #164]	; (8007718 <HAL_RCC_OscConfig+0x280>)
 8007672:	4313      	orrs	r3, r2
 8007674:	600b      	str	r3, [r1, #0]
 8007676:	e018      	b.n	80076aa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007678:	4b27      	ldr	r3, [pc, #156]	; (8007718 <HAL_RCC_OscConfig+0x280>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a26      	ldr	r2, [pc, #152]	; (8007718 <HAL_RCC_OscConfig+0x280>)
 800767e:	f023 0301 	bic.w	r3, r3, #1
 8007682:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007684:	f7fd feb8 	bl	80053f8 <HAL_GetTick>
 8007688:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800768a:	e008      	b.n	800769e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800768c:	f7fd feb4 	bl	80053f8 <HAL_GetTick>
 8007690:	4602      	mov	r2, r0
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	1ad3      	subs	r3, r2, r3
 8007696:	2b02      	cmp	r3, #2
 8007698:	d901      	bls.n	800769e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800769a:	2303      	movs	r3, #3
 800769c:	e199      	b.n	80079d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800769e:	4b1e      	ldr	r3, [pc, #120]	; (8007718 <HAL_RCC_OscConfig+0x280>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f003 0302 	and.w	r3, r3, #2
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d1f0      	bne.n	800768c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f003 0308 	and.w	r3, r3, #8
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d038      	beq.n	8007728 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	695b      	ldr	r3, [r3, #20]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d019      	beq.n	80076f2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80076be:	4b16      	ldr	r3, [pc, #88]	; (8007718 <HAL_RCC_OscConfig+0x280>)
 80076c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076c2:	4a15      	ldr	r2, [pc, #84]	; (8007718 <HAL_RCC_OscConfig+0x280>)
 80076c4:	f043 0301 	orr.w	r3, r3, #1
 80076c8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076ca:	f7fd fe95 	bl	80053f8 <HAL_GetTick>
 80076ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80076d0:	e008      	b.n	80076e4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80076d2:	f7fd fe91 	bl	80053f8 <HAL_GetTick>
 80076d6:	4602      	mov	r2, r0
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	1ad3      	subs	r3, r2, r3
 80076dc:	2b02      	cmp	r3, #2
 80076de:	d901      	bls.n	80076e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80076e0:	2303      	movs	r3, #3
 80076e2:	e176      	b.n	80079d2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80076e4:	4b0c      	ldr	r3, [pc, #48]	; (8007718 <HAL_RCC_OscConfig+0x280>)
 80076e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076e8:	f003 0302 	and.w	r3, r3, #2
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d0f0      	beq.n	80076d2 <HAL_RCC_OscConfig+0x23a>
 80076f0:	e01a      	b.n	8007728 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80076f2:	4b09      	ldr	r3, [pc, #36]	; (8007718 <HAL_RCC_OscConfig+0x280>)
 80076f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076f6:	4a08      	ldr	r2, [pc, #32]	; (8007718 <HAL_RCC_OscConfig+0x280>)
 80076f8:	f023 0301 	bic.w	r3, r3, #1
 80076fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076fe:	f7fd fe7b 	bl	80053f8 <HAL_GetTick>
 8007702:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007704:	e00a      	b.n	800771c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007706:	f7fd fe77 	bl	80053f8 <HAL_GetTick>
 800770a:	4602      	mov	r2, r0
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	1ad3      	subs	r3, r2, r3
 8007710:	2b02      	cmp	r3, #2
 8007712:	d903      	bls.n	800771c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007714:	2303      	movs	r3, #3
 8007716:	e15c      	b.n	80079d2 <HAL_RCC_OscConfig+0x53a>
 8007718:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800771c:	4b91      	ldr	r3, [pc, #580]	; (8007964 <HAL_RCC_OscConfig+0x4cc>)
 800771e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007720:	f003 0302 	and.w	r3, r3, #2
 8007724:	2b00      	cmp	r3, #0
 8007726:	d1ee      	bne.n	8007706 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f003 0304 	and.w	r3, r3, #4
 8007730:	2b00      	cmp	r3, #0
 8007732:	f000 80a4 	beq.w	800787e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007736:	4b8b      	ldr	r3, [pc, #556]	; (8007964 <HAL_RCC_OscConfig+0x4cc>)
 8007738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800773a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800773e:	2b00      	cmp	r3, #0
 8007740:	d10d      	bne.n	800775e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007742:	4b88      	ldr	r3, [pc, #544]	; (8007964 <HAL_RCC_OscConfig+0x4cc>)
 8007744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007746:	4a87      	ldr	r2, [pc, #540]	; (8007964 <HAL_RCC_OscConfig+0x4cc>)
 8007748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800774c:	6413      	str	r3, [r2, #64]	; 0x40
 800774e:	4b85      	ldr	r3, [pc, #532]	; (8007964 <HAL_RCC_OscConfig+0x4cc>)
 8007750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007756:	60bb      	str	r3, [r7, #8]
 8007758:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800775a:	2301      	movs	r3, #1
 800775c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800775e:	4b82      	ldr	r3, [pc, #520]	; (8007968 <HAL_RCC_OscConfig+0x4d0>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007766:	2b00      	cmp	r3, #0
 8007768:	d118      	bne.n	800779c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800776a:	4b7f      	ldr	r3, [pc, #508]	; (8007968 <HAL_RCC_OscConfig+0x4d0>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a7e      	ldr	r2, [pc, #504]	; (8007968 <HAL_RCC_OscConfig+0x4d0>)
 8007770:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007774:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007776:	f7fd fe3f 	bl	80053f8 <HAL_GetTick>
 800777a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800777c:	e008      	b.n	8007790 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800777e:	f7fd fe3b 	bl	80053f8 <HAL_GetTick>
 8007782:	4602      	mov	r2, r0
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	1ad3      	subs	r3, r2, r3
 8007788:	2b64      	cmp	r3, #100	; 0x64
 800778a:	d901      	bls.n	8007790 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800778c:	2303      	movs	r3, #3
 800778e:	e120      	b.n	80079d2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007790:	4b75      	ldr	r3, [pc, #468]	; (8007968 <HAL_RCC_OscConfig+0x4d0>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007798:	2b00      	cmp	r3, #0
 800779a:	d0f0      	beq.n	800777e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d106      	bne.n	80077b2 <HAL_RCC_OscConfig+0x31a>
 80077a4:	4b6f      	ldr	r3, [pc, #444]	; (8007964 <HAL_RCC_OscConfig+0x4cc>)
 80077a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077a8:	4a6e      	ldr	r2, [pc, #440]	; (8007964 <HAL_RCC_OscConfig+0x4cc>)
 80077aa:	f043 0301 	orr.w	r3, r3, #1
 80077ae:	6713      	str	r3, [r2, #112]	; 0x70
 80077b0:	e02d      	b.n	800780e <HAL_RCC_OscConfig+0x376>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d10c      	bne.n	80077d4 <HAL_RCC_OscConfig+0x33c>
 80077ba:	4b6a      	ldr	r3, [pc, #424]	; (8007964 <HAL_RCC_OscConfig+0x4cc>)
 80077bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077be:	4a69      	ldr	r2, [pc, #420]	; (8007964 <HAL_RCC_OscConfig+0x4cc>)
 80077c0:	f023 0301 	bic.w	r3, r3, #1
 80077c4:	6713      	str	r3, [r2, #112]	; 0x70
 80077c6:	4b67      	ldr	r3, [pc, #412]	; (8007964 <HAL_RCC_OscConfig+0x4cc>)
 80077c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077ca:	4a66      	ldr	r2, [pc, #408]	; (8007964 <HAL_RCC_OscConfig+0x4cc>)
 80077cc:	f023 0304 	bic.w	r3, r3, #4
 80077d0:	6713      	str	r3, [r2, #112]	; 0x70
 80077d2:	e01c      	b.n	800780e <HAL_RCC_OscConfig+0x376>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	689b      	ldr	r3, [r3, #8]
 80077d8:	2b05      	cmp	r3, #5
 80077da:	d10c      	bne.n	80077f6 <HAL_RCC_OscConfig+0x35e>
 80077dc:	4b61      	ldr	r3, [pc, #388]	; (8007964 <HAL_RCC_OscConfig+0x4cc>)
 80077de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077e0:	4a60      	ldr	r2, [pc, #384]	; (8007964 <HAL_RCC_OscConfig+0x4cc>)
 80077e2:	f043 0304 	orr.w	r3, r3, #4
 80077e6:	6713      	str	r3, [r2, #112]	; 0x70
 80077e8:	4b5e      	ldr	r3, [pc, #376]	; (8007964 <HAL_RCC_OscConfig+0x4cc>)
 80077ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077ec:	4a5d      	ldr	r2, [pc, #372]	; (8007964 <HAL_RCC_OscConfig+0x4cc>)
 80077ee:	f043 0301 	orr.w	r3, r3, #1
 80077f2:	6713      	str	r3, [r2, #112]	; 0x70
 80077f4:	e00b      	b.n	800780e <HAL_RCC_OscConfig+0x376>
 80077f6:	4b5b      	ldr	r3, [pc, #364]	; (8007964 <HAL_RCC_OscConfig+0x4cc>)
 80077f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077fa:	4a5a      	ldr	r2, [pc, #360]	; (8007964 <HAL_RCC_OscConfig+0x4cc>)
 80077fc:	f023 0301 	bic.w	r3, r3, #1
 8007800:	6713      	str	r3, [r2, #112]	; 0x70
 8007802:	4b58      	ldr	r3, [pc, #352]	; (8007964 <HAL_RCC_OscConfig+0x4cc>)
 8007804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007806:	4a57      	ldr	r2, [pc, #348]	; (8007964 <HAL_RCC_OscConfig+0x4cc>)
 8007808:	f023 0304 	bic.w	r3, r3, #4
 800780c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d015      	beq.n	8007842 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007816:	f7fd fdef 	bl	80053f8 <HAL_GetTick>
 800781a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800781c:	e00a      	b.n	8007834 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800781e:	f7fd fdeb 	bl	80053f8 <HAL_GetTick>
 8007822:	4602      	mov	r2, r0
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	1ad3      	subs	r3, r2, r3
 8007828:	f241 3288 	movw	r2, #5000	; 0x1388
 800782c:	4293      	cmp	r3, r2
 800782e:	d901      	bls.n	8007834 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007830:	2303      	movs	r3, #3
 8007832:	e0ce      	b.n	80079d2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007834:	4b4b      	ldr	r3, [pc, #300]	; (8007964 <HAL_RCC_OscConfig+0x4cc>)
 8007836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007838:	f003 0302 	and.w	r3, r3, #2
 800783c:	2b00      	cmp	r3, #0
 800783e:	d0ee      	beq.n	800781e <HAL_RCC_OscConfig+0x386>
 8007840:	e014      	b.n	800786c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007842:	f7fd fdd9 	bl	80053f8 <HAL_GetTick>
 8007846:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007848:	e00a      	b.n	8007860 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800784a:	f7fd fdd5 	bl	80053f8 <HAL_GetTick>
 800784e:	4602      	mov	r2, r0
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	1ad3      	subs	r3, r2, r3
 8007854:	f241 3288 	movw	r2, #5000	; 0x1388
 8007858:	4293      	cmp	r3, r2
 800785a:	d901      	bls.n	8007860 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800785c:	2303      	movs	r3, #3
 800785e:	e0b8      	b.n	80079d2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007860:	4b40      	ldr	r3, [pc, #256]	; (8007964 <HAL_RCC_OscConfig+0x4cc>)
 8007862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007864:	f003 0302 	and.w	r3, r3, #2
 8007868:	2b00      	cmp	r3, #0
 800786a:	d1ee      	bne.n	800784a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800786c:	7dfb      	ldrb	r3, [r7, #23]
 800786e:	2b01      	cmp	r3, #1
 8007870:	d105      	bne.n	800787e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007872:	4b3c      	ldr	r3, [pc, #240]	; (8007964 <HAL_RCC_OscConfig+0x4cc>)
 8007874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007876:	4a3b      	ldr	r2, [pc, #236]	; (8007964 <HAL_RCC_OscConfig+0x4cc>)
 8007878:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800787c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	699b      	ldr	r3, [r3, #24]
 8007882:	2b00      	cmp	r3, #0
 8007884:	f000 80a4 	beq.w	80079d0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007888:	4b36      	ldr	r3, [pc, #216]	; (8007964 <HAL_RCC_OscConfig+0x4cc>)
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	f003 030c 	and.w	r3, r3, #12
 8007890:	2b08      	cmp	r3, #8
 8007892:	d06b      	beq.n	800796c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	699b      	ldr	r3, [r3, #24]
 8007898:	2b02      	cmp	r3, #2
 800789a:	d149      	bne.n	8007930 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800789c:	4b31      	ldr	r3, [pc, #196]	; (8007964 <HAL_RCC_OscConfig+0x4cc>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a30      	ldr	r2, [pc, #192]	; (8007964 <HAL_RCC_OscConfig+0x4cc>)
 80078a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80078a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078a8:	f7fd fda6 	bl	80053f8 <HAL_GetTick>
 80078ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078ae:	e008      	b.n	80078c2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078b0:	f7fd fda2 	bl	80053f8 <HAL_GetTick>
 80078b4:	4602      	mov	r2, r0
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	1ad3      	subs	r3, r2, r3
 80078ba:	2b02      	cmp	r3, #2
 80078bc:	d901      	bls.n	80078c2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80078be:	2303      	movs	r3, #3
 80078c0:	e087      	b.n	80079d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078c2:	4b28      	ldr	r3, [pc, #160]	; (8007964 <HAL_RCC_OscConfig+0x4cc>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d1f0      	bne.n	80078b0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	69da      	ldr	r2, [r3, #28]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6a1b      	ldr	r3, [r3, #32]
 80078d6:	431a      	orrs	r2, r3
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078dc:	019b      	lsls	r3, r3, #6
 80078de:	431a      	orrs	r2, r3
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078e4:	085b      	lsrs	r3, r3, #1
 80078e6:	3b01      	subs	r3, #1
 80078e8:	041b      	lsls	r3, r3, #16
 80078ea:	431a      	orrs	r2, r3
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078f0:	061b      	lsls	r3, r3, #24
 80078f2:	4313      	orrs	r3, r2
 80078f4:	4a1b      	ldr	r2, [pc, #108]	; (8007964 <HAL_RCC_OscConfig+0x4cc>)
 80078f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80078fa:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80078fc:	4b19      	ldr	r3, [pc, #100]	; (8007964 <HAL_RCC_OscConfig+0x4cc>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a18      	ldr	r2, [pc, #96]	; (8007964 <HAL_RCC_OscConfig+0x4cc>)
 8007902:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007906:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007908:	f7fd fd76 	bl	80053f8 <HAL_GetTick>
 800790c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800790e:	e008      	b.n	8007922 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007910:	f7fd fd72 	bl	80053f8 <HAL_GetTick>
 8007914:	4602      	mov	r2, r0
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	1ad3      	subs	r3, r2, r3
 800791a:	2b02      	cmp	r3, #2
 800791c:	d901      	bls.n	8007922 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800791e:	2303      	movs	r3, #3
 8007920:	e057      	b.n	80079d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007922:	4b10      	ldr	r3, [pc, #64]	; (8007964 <HAL_RCC_OscConfig+0x4cc>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800792a:	2b00      	cmp	r3, #0
 800792c:	d0f0      	beq.n	8007910 <HAL_RCC_OscConfig+0x478>
 800792e:	e04f      	b.n	80079d0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007930:	4b0c      	ldr	r3, [pc, #48]	; (8007964 <HAL_RCC_OscConfig+0x4cc>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a0b      	ldr	r2, [pc, #44]	; (8007964 <HAL_RCC_OscConfig+0x4cc>)
 8007936:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800793a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800793c:	f7fd fd5c 	bl	80053f8 <HAL_GetTick>
 8007940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007942:	e008      	b.n	8007956 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007944:	f7fd fd58 	bl	80053f8 <HAL_GetTick>
 8007948:	4602      	mov	r2, r0
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	1ad3      	subs	r3, r2, r3
 800794e:	2b02      	cmp	r3, #2
 8007950:	d901      	bls.n	8007956 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007952:	2303      	movs	r3, #3
 8007954:	e03d      	b.n	80079d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007956:	4b03      	ldr	r3, [pc, #12]	; (8007964 <HAL_RCC_OscConfig+0x4cc>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800795e:	2b00      	cmp	r3, #0
 8007960:	d1f0      	bne.n	8007944 <HAL_RCC_OscConfig+0x4ac>
 8007962:	e035      	b.n	80079d0 <HAL_RCC_OscConfig+0x538>
 8007964:	40023800 	.word	0x40023800
 8007968:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800796c:	4b1b      	ldr	r3, [pc, #108]	; (80079dc <HAL_RCC_OscConfig+0x544>)
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	699b      	ldr	r3, [r3, #24]
 8007976:	2b01      	cmp	r3, #1
 8007978:	d028      	beq.n	80079cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007984:	429a      	cmp	r2, r3
 8007986:	d121      	bne.n	80079cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007992:	429a      	cmp	r2, r3
 8007994:	d11a      	bne.n	80079cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007996:	68fa      	ldr	r2, [r7, #12]
 8007998:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800799c:	4013      	ands	r3, r2
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80079a2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d111      	bne.n	80079cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079b2:	085b      	lsrs	r3, r3, #1
 80079b4:	3b01      	subs	r3, #1
 80079b6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d107      	bne.n	80079cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d001      	beq.n	80079d0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80079cc:	2301      	movs	r3, #1
 80079ce:	e000      	b.n	80079d2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80079d0:	2300      	movs	r3, #0
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3718      	adds	r7, #24
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
 80079da:	bf00      	nop
 80079dc:	40023800 	.word	0x40023800

080079e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b084      	sub	sp, #16
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80079ea:	2300      	movs	r3, #0
 80079ec:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d101      	bne.n	80079f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80079f4:	2301      	movs	r3, #1
 80079f6:	e0d0      	b.n	8007b9a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80079f8:	4b6a      	ldr	r3, [pc, #424]	; (8007ba4 <HAL_RCC_ClockConfig+0x1c4>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f003 030f 	and.w	r3, r3, #15
 8007a00:	683a      	ldr	r2, [r7, #0]
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d910      	bls.n	8007a28 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a06:	4b67      	ldr	r3, [pc, #412]	; (8007ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f023 020f 	bic.w	r2, r3, #15
 8007a0e:	4965      	ldr	r1, [pc, #404]	; (8007ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	4313      	orrs	r3, r2
 8007a14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a16:	4b63      	ldr	r3, [pc, #396]	; (8007ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f003 030f 	and.w	r3, r3, #15
 8007a1e:	683a      	ldr	r2, [r7, #0]
 8007a20:	429a      	cmp	r2, r3
 8007a22:	d001      	beq.n	8007a28 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007a24:	2301      	movs	r3, #1
 8007a26:	e0b8      	b.n	8007b9a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f003 0302 	and.w	r3, r3, #2
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d020      	beq.n	8007a76 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f003 0304 	and.w	r3, r3, #4
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d005      	beq.n	8007a4c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007a40:	4b59      	ldr	r3, [pc, #356]	; (8007ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	4a58      	ldr	r2, [pc, #352]	; (8007ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8007a46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007a4a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f003 0308 	and.w	r3, r3, #8
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d005      	beq.n	8007a64 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007a58:	4b53      	ldr	r3, [pc, #332]	; (8007ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8007a5a:	689b      	ldr	r3, [r3, #8]
 8007a5c:	4a52      	ldr	r2, [pc, #328]	; (8007ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8007a5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007a62:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a64:	4b50      	ldr	r3, [pc, #320]	; (8007ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8007a66:	689b      	ldr	r3, [r3, #8]
 8007a68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	494d      	ldr	r1, [pc, #308]	; (8007ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8007a72:	4313      	orrs	r3, r2
 8007a74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f003 0301 	and.w	r3, r3, #1
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d040      	beq.n	8007b04 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	2b01      	cmp	r3, #1
 8007a88:	d107      	bne.n	8007a9a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a8a:	4b47      	ldr	r3, [pc, #284]	; (8007ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d115      	bne.n	8007ac2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007a96:	2301      	movs	r3, #1
 8007a98:	e07f      	b.n	8007b9a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	2b02      	cmp	r3, #2
 8007aa0:	d107      	bne.n	8007ab2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007aa2:	4b41      	ldr	r3, [pc, #260]	; (8007ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d109      	bne.n	8007ac2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	e073      	b.n	8007b9a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ab2:	4b3d      	ldr	r3, [pc, #244]	; (8007ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f003 0302 	and.w	r3, r3, #2
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d101      	bne.n	8007ac2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007abe:	2301      	movs	r3, #1
 8007ac0:	e06b      	b.n	8007b9a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007ac2:	4b39      	ldr	r3, [pc, #228]	; (8007ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8007ac4:	689b      	ldr	r3, [r3, #8]
 8007ac6:	f023 0203 	bic.w	r2, r3, #3
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	4936      	ldr	r1, [pc, #216]	; (8007ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ad4:	f7fd fc90 	bl	80053f8 <HAL_GetTick>
 8007ad8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ada:	e00a      	b.n	8007af2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007adc:	f7fd fc8c 	bl	80053f8 <HAL_GetTick>
 8007ae0:	4602      	mov	r2, r0
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	1ad3      	subs	r3, r2, r3
 8007ae6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d901      	bls.n	8007af2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007aee:	2303      	movs	r3, #3
 8007af0:	e053      	b.n	8007b9a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007af2:	4b2d      	ldr	r3, [pc, #180]	; (8007ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8007af4:	689b      	ldr	r3, [r3, #8]
 8007af6:	f003 020c 	and.w	r2, r3, #12
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	009b      	lsls	r3, r3, #2
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d1eb      	bne.n	8007adc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007b04:	4b27      	ldr	r3, [pc, #156]	; (8007ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f003 030f 	and.w	r3, r3, #15
 8007b0c:	683a      	ldr	r2, [r7, #0]
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d210      	bcs.n	8007b34 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b12:	4b24      	ldr	r3, [pc, #144]	; (8007ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f023 020f 	bic.w	r2, r3, #15
 8007b1a:	4922      	ldr	r1, [pc, #136]	; (8007ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b22:	4b20      	ldr	r3, [pc, #128]	; (8007ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f003 030f 	and.w	r3, r3, #15
 8007b2a:	683a      	ldr	r2, [r7, #0]
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d001      	beq.n	8007b34 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007b30:	2301      	movs	r3, #1
 8007b32:	e032      	b.n	8007b9a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f003 0304 	and.w	r3, r3, #4
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d008      	beq.n	8007b52 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007b40:	4b19      	ldr	r3, [pc, #100]	; (8007ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8007b42:	689b      	ldr	r3, [r3, #8]
 8007b44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	68db      	ldr	r3, [r3, #12]
 8007b4c:	4916      	ldr	r1, [pc, #88]	; (8007ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f003 0308 	and.w	r3, r3, #8
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d009      	beq.n	8007b72 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007b5e:	4b12      	ldr	r3, [pc, #72]	; (8007ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8007b60:	689b      	ldr	r3, [r3, #8]
 8007b62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	691b      	ldr	r3, [r3, #16]
 8007b6a:	00db      	lsls	r3, r3, #3
 8007b6c:	490e      	ldr	r1, [pc, #56]	; (8007ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007b72:	f000 f821 	bl	8007bb8 <HAL_RCC_GetSysClockFreq>
 8007b76:	4601      	mov	r1, r0
 8007b78:	4b0b      	ldr	r3, [pc, #44]	; (8007ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8007b7a:	689b      	ldr	r3, [r3, #8]
 8007b7c:	091b      	lsrs	r3, r3, #4
 8007b7e:	f003 030f 	and.w	r3, r3, #15
 8007b82:	4a0a      	ldr	r2, [pc, #40]	; (8007bac <HAL_RCC_ClockConfig+0x1cc>)
 8007b84:	5cd3      	ldrb	r3, [r2, r3]
 8007b86:	fa21 f303 	lsr.w	r3, r1, r3
 8007b8a:	4a09      	ldr	r2, [pc, #36]	; (8007bb0 <HAL_RCC_ClockConfig+0x1d0>)
 8007b8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007b8e:	4b09      	ldr	r3, [pc, #36]	; (8007bb4 <HAL_RCC_ClockConfig+0x1d4>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4618      	mov	r0, r3
 8007b94:	f7fc fbc6 	bl	8004324 <HAL_InitTick>

  return HAL_OK;
 8007b98:	2300      	movs	r3, #0
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3710      	adds	r7, #16
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}
 8007ba2:	bf00      	nop
 8007ba4:	40023c00 	.word	0x40023c00
 8007ba8:	40023800 	.word	0x40023800
 8007bac:	0801a324 	.word	0x0801a324
 8007bb0:	20000000 	.word	0x20000000
 8007bb4:	20000004 	.word	0x20000004

08007bb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007bba:	b085      	sub	sp, #20
 8007bbc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	607b      	str	r3, [r7, #4]
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	60fb      	str	r3, [r7, #12]
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007bce:	4b63      	ldr	r3, [pc, #396]	; (8007d5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007bd0:	689b      	ldr	r3, [r3, #8]
 8007bd2:	f003 030c 	and.w	r3, r3, #12
 8007bd6:	2b04      	cmp	r3, #4
 8007bd8:	d007      	beq.n	8007bea <HAL_RCC_GetSysClockFreq+0x32>
 8007bda:	2b08      	cmp	r3, #8
 8007bdc:	d008      	beq.n	8007bf0 <HAL_RCC_GetSysClockFreq+0x38>
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	f040 80b4 	bne.w	8007d4c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007be4:	4b5e      	ldr	r3, [pc, #376]	; (8007d60 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007be6:	60bb      	str	r3, [r7, #8]
      break;
 8007be8:	e0b3      	b.n	8007d52 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007bea:	4b5e      	ldr	r3, [pc, #376]	; (8007d64 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8007bec:	60bb      	str	r3, [r7, #8]
      break;
 8007bee:	e0b0      	b.n	8007d52 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007bf0:	4b5a      	ldr	r3, [pc, #360]	; (8007d5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007bf8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007bfa:	4b58      	ldr	r3, [pc, #352]	; (8007d5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d04a      	beq.n	8007c9c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c06:	4b55      	ldr	r3, [pc, #340]	; (8007d5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	099b      	lsrs	r3, r3, #6
 8007c0c:	f04f 0400 	mov.w	r4, #0
 8007c10:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007c14:	f04f 0200 	mov.w	r2, #0
 8007c18:	ea03 0501 	and.w	r5, r3, r1
 8007c1c:	ea04 0602 	and.w	r6, r4, r2
 8007c20:	4629      	mov	r1, r5
 8007c22:	4632      	mov	r2, r6
 8007c24:	f04f 0300 	mov.w	r3, #0
 8007c28:	f04f 0400 	mov.w	r4, #0
 8007c2c:	0154      	lsls	r4, r2, #5
 8007c2e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007c32:	014b      	lsls	r3, r1, #5
 8007c34:	4619      	mov	r1, r3
 8007c36:	4622      	mov	r2, r4
 8007c38:	1b49      	subs	r1, r1, r5
 8007c3a:	eb62 0206 	sbc.w	r2, r2, r6
 8007c3e:	f04f 0300 	mov.w	r3, #0
 8007c42:	f04f 0400 	mov.w	r4, #0
 8007c46:	0194      	lsls	r4, r2, #6
 8007c48:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007c4c:	018b      	lsls	r3, r1, #6
 8007c4e:	1a5b      	subs	r3, r3, r1
 8007c50:	eb64 0402 	sbc.w	r4, r4, r2
 8007c54:	f04f 0100 	mov.w	r1, #0
 8007c58:	f04f 0200 	mov.w	r2, #0
 8007c5c:	00e2      	lsls	r2, r4, #3
 8007c5e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007c62:	00d9      	lsls	r1, r3, #3
 8007c64:	460b      	mov	r3, r1
 8007c66:	4614      	mov	r4, r2
 8007c68:	195b      	adds	r3, r3, r5
 8007c6a:	eb44 0406 	adc.w	r4, r4, r6
 8007c6e:	f04f 0100 	mov.w	r1, #0
 8007c72:	f04f 0200 	mov.w	r2, #0
 8007c76:	0262      	lsls	r2, r4, #9
 8007c78:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8007c7c:	0259      	lsls	r1, r3, #9
 8007c7e:	460b      	mov	r3, r1
 8007c80:	4614      	mov	r4, r2
 8007c82:	4618      	mov	r0, r3
 8007c84:	4621      	mov	r1, r4
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f04f 0400 	mov.w	r4, #0
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	4623      	mov	r3, r4
 8007c90:	f7f8 fff2 	bl	8000c78 <__aeabi_uldivmod>
 8007c94:	4603      	mov	r3, r0
 8007c96:	460c      	mov	r4, r1
 8007c98:	60fb      	str	r3, [r7, #12]
 8007c9a:	e049      	b.n	8007d30 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c9c:	4b2f      	ldr	r3, [pc, #188]	; (8007d5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	099b      	lsrs	r3, r3, #6
 8007ca2:	f04f 0400 	mov.w	r4, #0
 8007ca6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007caa:	f04f 0200 	mov.w	r2, #0
 8007cae:	ea03 0501 	and.w	r5, r3, r1
 8007cb2:	ea04 0602 	and.w	r6, r4, r2
 8007cb6:	4629      	mov	r1, r5
 8007cb8:	4632      	mov	r2, r6
 8007cba:	f04f 0300 	mov.w	r3, #0
 8007cbe:	f04f 0400 	mov.w	r4, #0
 8007cc2:	0154      	lsls	r4, r2, #5
 8007cc4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007cc8:	014b      	lsls	r3, r1, #5
 8007cca:	4619      	mov	r1, r3
 8007ccc:	4622      	mov	r2, r4
 8007cce:	1b49      	subs	r1, r1, r5
 8007cd0:	eb62 0206 	sbc.w	r2, r2, r6
 8007cd4:	f04f 0300 	mov.w	r3, #0
 8007cd8:	f04f 0400 	mov.w	r4, #0
 8007cdc:	0194      	lsls	r4, r2, #6
 8007cde:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007ce2:	018b      	lsls	r3, r1, #6
 8007ce4:	1a5b      	subs	r3, r3, r1
 8007ce6:	eb64 0402 	sbc.w	r4, r4, r2
 8007cea:	f04f 0100 	mov.w	r1, #0
 8007cee:	f04f 0200 	mov.w	r2, #0
 8007cf2:	00e2      	lsls	r2, r4, #3
 8007cf4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007cf8:	00d9      	lsls	r1, r3, #3
 8007cfa:	460b      	mov	r3, r1
 8007cfc:	4614      	mov	r4, r2
 8007cfe:	195b      	adds	r3, r3, r5
 8007d00:	eb44 0406 	adc.w	r4, r4, r6
 8007d04:	f04f 0100 	mov.w	r1, #0
 8007d08:	f04f 0200 	mov.w	r2, #0
 8007d0c:	02a2      	lsls	r2, r4, #10
 8007d0e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007d12:	0299      	lsls	r1, r3, #10
 8007d14:	460b      	mov	r3, r1
 8007d16:	4614      	mov	r4, r2
 8007d18:	4618      	mov	r0, r3
 8007d1a:	4621      	mov	r1, r4
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f04f 0400 	mov.w	r4, #0
 8007d22:	461a      	mov	r2, r3
 8007d24:	4623      	mov	r3, r4
 8007d26:	f7f8 ffa7 	bl	8000c78 <__aeabi_uldivmod>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	460c      	mov	r4, r1
 8007d2e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007d30:	4b0a      	ldr	r3, [pc, #40]	; (8007d5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	0c1b      	lsrs	r3, r3, #16
 8007d36:	f003 0303 	and.w	r3, r3, #3
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	005b      	lsls	r3, r3, #1
 8007d3e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8007d40:	68fa      	ldr	r2, [r7, #12]
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d48:	60bb      	str	r3, [r7, #8]
      break;
 8007d4a:	e002      	b.n	8007d52 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007d4c:	4b04      	ldr	r3, [pc, #16]	; (8007d60 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007d4e:	60bb      	str	r3, [r7, #8]
      break;
 8007d50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007d52:	68bb      	ldr	r3, [r7, #8]
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3714      	adds	r7, #20
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d5c:	40023800 	.word	0x40023800
 8007d60:	00f42400 	.word	0x00f42400
 8007d64:	007a1200 	.word	0x007a1200

08007d68 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007d6c:	4b03      	ldr	r3, [pc, #12]	; (8007d7c <HAL_RCC_GetHCLKFreq+0x14>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	46bd      	mov	sp, r7
 8007d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d78:	4770      	bx	lr
 8007d7a:	bf00      	nop
 8007d7c:	20000000 	.word	0x20000000

08007d80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007d84:	f7ff fff0 	bl	8007d68 <HAL_RCC_GetHCLKFreq>
 8007d88:	4601      	mov	r1, r0
 8007d8a:	4b05      	ldr	r3, [pc, #20]	; (8007da0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007d8c:	689b      	ldr	r3, [r3, #8]
 8007d8e:	0a9b      	lsrs	r3, r3, #10
 8007d90:	f003 0307 	and.w	r3, r3, #7
 8007d94:	4a03      	ldr	r2, [pc, #12]	; (8007da4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007d96:	5cd3      	ldrb	r3, [r2, r3]
 8007d98:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	bd80      	pop	{r7, pc}
 8007da0:	40023800 	.word	0x40023800
 8007da4:	0801a334 	.word	0x0801a334

08007da8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007dac:	f7ff ffdc 	bl	8007d68 <HAL_RCC_GetHCLKFreq>
 8007db0:	4601      	mov	r1, r0
 8007db2:	4b05      	ldr	r3, [pc, #20]	; (8007dc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007db4:	689b      	ldr	r3, [r3, #8]
 8007db6:	0b5b      	lsrs	r3, r3, #13
 8007db8:	f003 0307 	and.w	r3, r3, #7
 8007dbc:	4a03      	ldr	r2, [pc, #12]	; (8007dcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8007dbe:	5cd3      	ldrb	r3, [r2, r3]
 8007dc0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	bd80      	pop	{r7, pc}
 8007dc8:	40023800 	.word	0x40023800
 8007dcc:	0801a334 	.word	0x0801a334

08007dd0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b083      	sub	sp, #12
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	220f      	movs	r2, #15
 8007dde:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007de0:	4b12      	ldr	r3, [pc, #72]	; (8007e2c <HAL_RCC_GetClockConfig+0x5c>)
 8007de2:	689b      	ldr	r3, [r3, #8]
 8007de4:	f003 0203 	and.w	r2, r3, #3
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007dec:	4b0f      	ldr	r3, [pc, #60]	; (8007e2c <HAL_RCC_GetClockConfig+0x5c>)
 8007dee:	689b      	ldr	r3, [r3, #8]
 8007df0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007df8:	4b0c      	ldr	r3, [pc, #48]	; (8007e2c <HAL_RCC_GetClockConfig+0x5c>)
 8007dfa:	689b      	ldr	r3, [r3, #8]
 8007dfc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007e04:	4b09      	ldr	r3, [pc, #36]	; (8007e2c <HAL_RCC_GetClockConfig+0x5c>)
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	08db      	lsrs	r3, r3, #3
 8007e0a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007e12:	4b07      	ldr	r3, [pc, #28]	; (8007e30 <HAL_RCC_GetClockConfig+0x60>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f003 020f 	and.w	r2, r3, #15
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	601a      	str	r2, [r3, #0]
}
 8007e1e:	bf00      	nop
 8007e20:	370c      	adds	r7, #12
 8007e22:	46bd      	mov	sp, r7
 8007e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e28:	4770      	bx	lr
 8007e2a:	bf00      	nop
 8007e2c:	40023800 	.word	0x40023800
 8007e30:	40023c00 	.word	0x40023c00

08007e34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b088      	sub	sp, #32
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007e40:	2300      	movs	r3, #0
 8007e42:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007e44:	2300      	movs	r3, #0
 8007e46:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f003 0301 	and.w	r3, r3, #1
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d012      	beq.n	8007e82 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007e5c:	4b69      	ldr	r3, [pc, #420]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	4a68      	ldr	r2, [pc, #416]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e62:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007e66:	6093      	str	r3, [r2, #8]
 8007e68:	4b66      	ldr	r3, [pc, #408]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e6a:	689a      	ldr	r2, [r3, #8]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e70:	4964      	ldr	r1, [pc, #400]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e72:	4313      	orrs	r3, r2
 8007e74:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d101      	bne.n	8007e82 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d017      	beq.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007e8e:	4b5d      	ldr	r3, [pc, #372]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e94:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e9c:	4959      	ldr	r1, [pc, #356]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ea8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007eac:	d101      	bne.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d101      	bne.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007eba:	2301      	movs	r3, #1
 8007ebc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d017      	beq.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007eca:	4b4e      	ldr	r3, [pc, #312]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ecc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ed0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ed8:	494a      	ldr	r1, [pc, #296]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007eda:	4313      	orrs	r3, r2
 8007edc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ee4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ee8:	d101      	bne.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007eea:	2301      	movs	r3, #1
 8007eec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d101      	bne.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d001      	beq.n	8007f0a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007f06:	2301      	movs	r3, #1
 8007f08:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f003 0320 	and.w	r3, r3, #32
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	f000 808b 	beq.w	800802e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007f18:	4b3a      	ldr	r3, [pc, #232]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f1c:	4a39      	ldr	r2, [pc, #228]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f22:	6413      	str	r3, [r2, #64]	; 0x40
 8007f24:	4b37      	ldr	r3, [pc, #220]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f2c:	60bb      	str	r3, [r7, #8]
 8007f2e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007f30:	4b35      	ldr	r3, [pc, #212]	; (8008008 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4a34      	ldr	r2, [pc, #208]	; (8008008 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007f36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f3c:	f7fd fa5c 	bl	80053f8 <HAL_GetTick>
 8007f40:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007f42:	e008      	b.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f44:	f7fd fa58 	bl	80053f8 <HAL_GetTick>
 8007f48:	4602      	mov	r2, r0
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	1ad3      	subs	r3, r2, r3
 8007f4e:	2b64      	cmp	r3, #100	; 0x64
 8007f50:	d901      	bls.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007f52:	2303      	movs	r3, #3
 8007f54:	e31e      	b.n	8008594 <HAL_RCCEx_PeriphCLKConfig+0x760>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007f56:	4b2c      	ldr	r3, [pc, #176]	; (8008008 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d0f0      	beq.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007f62:	4b28      	ldr	r3, [pc, #160]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f6a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d035      	beq.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f7a:	693a      	ldr	r2, [r7, #16]
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	d02e      	beq.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007f80:	4b20      	ldr	r3, [pc, #128]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f88:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007f8a:	4b1e      	ldr	r3, [pc, #120]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f8e:	4a1d      	ldr	r2, [pc, #116]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f94:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007f96:	4b1b      	ldr	r3, [pc, #108]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f9a:	4a1a      	ldr	r2, [pc, #104]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007fa0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007fa2:	4a18      	ldr	r2, [pc, #96]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007fa8:	4b16      	ldr	r3, [pc, #88]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fac:	f003 0301 	and.w	r3, r3, #1
 8007fb0:	2b01      	cmp	r3, #1
 8007fb2:	d114      	bne.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fb4:	f7fd fa20 	bl	80053f8 <HAL_GetTick>
 8007fb8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007fba:	e00a      	b.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007fbc:	f7fd fa1c 	bl	80053f8 <HAL_GetTick>
 8007fc0:	4602      	mov	r2, r0
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	1ad3      	subs	r3, r2, r3
 8007fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d901      	bls.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007fce:	2303      	movs	r3, #3
 8007fd0:	e2e0      	b.n	8008594 <HAL_RCCEx_PeriphCLKConfig+0x760>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007fd2:	4b0c      	ldr	r3, [pc, #48]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fd6:	f003 0302 	and.w	r3, r3, #2
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d0ee      	beq.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fe2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fe6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007fea:	d111      	bne.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007fec:	4b05      	ldr	r3, [pc, #20]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fee:	689b      	ldr	r3, [r3, #8]
 8007ff0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007ff8:	4b04      	ldr	r3, [pc, #16]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007ffa:	400b      	ands	r3, r1
 8007ffc:	4901      	ldr	r1, [pc, #4]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ffe:	4313      	orrs	r3, r2
 8008000:	608b      	str	r3, [r1, #8]
 8008002:	e00b      	b.n	800801c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008004:	40023800 	.word	0x40023800
 8008008:	40007000 	.word	0x40007000
 800800c:	0ffffcff 	.word	0x0ffffcff
 8008010:	4bac      	ldr	r3, [pc, #688]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008012:	689b      	ldr	r3, [r3, #8]
 8008014:	4aab      	ldr	r2, [pc, #684]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008016:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800801a:	6093      	str	r3, [r2, #8]
 800801c:	4ba9      	ldr	r3, [pc, #676]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800801e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008024:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008028:	49a6      	ldr	r1, [pc, #664]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800802a:	4313      	orrs	r3, r2
 800802c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f003 0310 	and.w	r3, r3, #16
 8008036:	2b00      	cmp	r3, #0
 8008038:	d010      	beq.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800803a:	4ba2      	ldr	r3, [pc, #648]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800803c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008040:	4aa0      	ldr	r2, [pc, #640]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008042:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008046:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800804a:	4b9e      	ldr	r3, [pc, #632]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800804c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008054:	499b      	ldr	r1, [pc, #620]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008056:	4313      	orrs	r3, r2
 8008058:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008064:	2b00      	cmp	r3, #0
 8008066:	d00a      	beq.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008068:	4b96      	ldr	r3, [pc, #600]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800806a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800806e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008076:	4993      	ldr	r1, [pc, #588]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008078:	4313      	orrs	r3, r2
 800807a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008086:	2b00      	cmp	r3, #0
 8008088:	d00a      	beq.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800808a:	4b8e      	ldr	r3, [pc, #568]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800808c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008090:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008098:	498a      	ldr	r1, [pc, #552]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800809a:	4313      	orrs	r3, r2
 800809c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d00a      	beq.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80080ac:	4b85      	ldr	r3, [pc, #532]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80080ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080ba:	4982      	ldr	r1, [pc, #520]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80080bc:	4313      	orrs	r3, r2
 80080be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d00a      	beq.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80080ce:	4b7d      	ldr	r3, [pc, #500]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80080d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080dc:	4979      	ldr	r1, [pc, #484]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80080de:	4313      	orrs	r3, r2
 80080e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d00a      	beq.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80080f0:	4b74      	ldr	r3, [pc, #464]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80080f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080f6:	f023 0203 	bic.w	r2, r3, #3
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080fe:	4971      	ldr	r1, [pc, #452]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008100:	4313      	orrs	r3, r2
 8008102:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800810e:	2b00      	cmp	r3, #0
 8008110:	d00a      	beq.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008112:	4b6c      	ldr	r3, [pc, #432]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008118:	f023 020c 	bic.w	r2, r3, #12
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008120:	4968      	ldr	r1, [pc, #416]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008122:	4313      	orrs	r3, r2
 8008124:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008130:	2b00      	cmp	r3, #0
 8008132:	d00a      	beq.n	800814a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008134:	4b63      	ldr	r3, [pc, #396]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800813a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008142:	4960      	ldr	r1, [pc, #384]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008144:	4313      	orrs	r3, r2
 8008146:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008152:	2b00      	cmp	r3, #0
 8008154:	d00a      	beq.n	800816c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008156:	4b5b      	ldr	r3, [pc, #364]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800815c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008164:	4957      	ldr	r1, [pc, #348]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008166:	4313      	orrs	r3, r2
 8008168:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008174:	2b00      	cmp	r3, #0
 8008176:	d00a      	beq.n	800818e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008178:	4b52      	ldr	r3, [pc, #328]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800817a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800817e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008186:	494f      	ldr	r1, [pc, #316]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008188:	4313      	orrs	r3, r2
 800818a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008196:	2b00      	cmp	r3, #0
 8008198:	d00a      	beq.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800819a:	4b4a      	ldr	r3, [pc, #296]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800819c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081a0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081a8:	4946      	ldr	r1, [pc, #280]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80081aa:	4313      	orrs	r3, r2
 80081ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d00a      	beq.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80081bc:	4b41      	ldr	r3, [pc, #260]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80081be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081c2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081ca:	493e      	ldr	r1, [pc, #248]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80081cc:	4313      	orrs	r3, r2
 80081ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d00a      	beq.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80081de:	4b39      	ldr	r3, [pc, #228]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80081e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081ec:	4935      	ldr	r1, [pc, #212]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80081ee:	4313      	orrs	r3, r2
 80081f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d00a      	beq.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008200:	4b30      	ldr	r3, [pc, #192]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008206:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800820e:	492d      	ldr	r1, [pc, #180]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008210:	4313      	orrs	r3, r2
 8008212:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800821e:	2b00      	cmp	r3, #0
 8008220:	d011      	beq.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008222:	4b28      	ldr	r3, [pc, #160]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008228:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008230:	4924      	ldr	r1, [pc, #144]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008232:	4313      	orrs	r3, r2
 8008234:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800823c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008240:	d101      	bne.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8008242:	2301      	movs	r3, #1
 8008244:	61bb      	str	r3, [r7, #24]
    pllsaiused = 1;
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800824e:	2b00      	cmp	r3, #0
 8008250:	d00a      	beq.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0x434>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008252:	4b1c      	ldr	r3, [pc, #112]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008258:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008260:	4918      	ldr	r1, [pc, #96]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008262:	4313      	orrs	r3, r2
 8008264:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008270:	2b00      	cmp	r3, #0
 8008272:	d00b      	beq.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008274:	4b13      	ldr	r3, [pc, #76]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800827a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008284:	490f      	ldr	r1, [pc, #60]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008286:	4313      	orrs	r3, r2
 8008288:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800828c:	69fb      	ldr	r3, [r7, #28]
 800828e:	2b01      	cmp	r3, #1
 8008290:	d005      	beq.n	800829e <HAL_RCCEx_PeriphCLKConfig+0x46a>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800829a:	f040 80d8 	bne.w	800844e <HAL_RCCEx_PeriphCLKConfig+0x61a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800829e:	4b09      	ldr	r3, [pc, #36]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a08      	ldr	r2, [pc, #32]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80082a4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80082a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082aa:	f7fd f8a5 	bl	80053f8 <HAL_GetTick>
 80082ae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80082b0:	e00a      	b.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0x494>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80082b2:	f7fd f8a1 	bl	80053f8 <HAL_GetTick>
 80082b6:	4602      	mov	r2, r0
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	1ad3      	subs	r3, r2, r3
 80082bc:	2b64      	cmp	r3, #100	; 0x64
 80082be:	d903      	bls.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0x494>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80082c0:	2303      	movs	r3, #3
 80082c2:	e167      	b.n	8008594 <HAL_RCCEx_PeriphCLKConfig+0x760>
 80082c4:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80082c8:	4bad      	ldr	r3, [pc, #692]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d1ee      	bne.n	80082b2 <HAL_RCCEx_PeriphCLKConfig+0x47e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f003 0301 	and.w	r3, r3, #1
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d021      	beq.n	8008324 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d11d      	bne.n	8008324 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80082e8:	4ba5      	ldr	r3, [pc, #660]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80082ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082ee:	0c1b      	lsrs	r3, r3, #16
 80082f0:	f003 0303 	and.w	r3, r3, #3
 80082f4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80082f6:	4ba2      	ldr	r3, [pc, #648]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80082f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082fc:	0e1b      	lsrs	r3, r3, #24
 80082fe:	f003 030f 	and.w	r3, r3, #15
 8008302:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	685b      	ldr	r3, [r3, #4]
 8008308:	019a      	lsls	r2, r3, #6
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	041b      	lsls	r3, r3, #16
 800830e:	431a      	orrs	r2, r3
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	061b      	lsls	r3, r3, #24
 8008314:	431a      	orrs	r2, r3
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	689b      	ldr	r3, [r3, #8]
 800831a:	071b      	lsls	r3, r3, #28
 800831c:	4998      	ldr	r1, [pc, #608]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800831e:	4313      	orrs	r3, r2
 8008320:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800832c:	2b00      	cmp	r3, #0
 800832e:	d004      	beq.n	800833a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008334:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008338:	d00a      	beq.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x51c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008342:	2b00      	cmp	r3, #0
 8008344:	d02e      	beq.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0x570>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800834a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800834e:	d129      	bne.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0x570>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008350:	4b8b      	ldr	r3, [pc, #556]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008352:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008356:	0c1b      	lsrs	r3, r3, #16
 8008358:	f003 0303 	and.w	r3, r3, #3
 800835c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800835e:	4b88      	ldr	r3, [pc, #544]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008360:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008364:	0f1b      	lsrs	r3, r3, #28
 8008366:	f003 0307 	and.w	r3, r3, #7
 800836a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	019a      	lsls	r2, r3, #6
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	041b      	lsls	r3, r3, #16
 8008376:	431a      	orrs	r2, r3
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	68db      	ldr	r3, [r3, #12]
 800837c:	061b      	lsls	r3, r3, #24
 800837e:	431a      	orrs	r2, r3
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	071b      	lsls	r3, r3, #28
 8008384:	497e      	ldr	r1, [pc, #504]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008386:	4313      	orrs	r3, r2
 8008388:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800838c:	4b7c      	ldr	r3, [pc, #496]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800838e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008392:	f023 021f 	bic.w	r2, r3, #31
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800839a:	3b01      	subs	r3, #1
 800839c:	4978      	ldr	r1, [pc, #480]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800839e:	4313      	orrs	r3, r2
 80083a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d01d      	beq.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80083b0:	4b73      	ldr	r3, [pc, #460]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80083b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083b6:	0e1b      	lsrs	r3, r3, #24
 80083b8:	f003 030f 	and.w	r3, r3, #15
 80083bc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80083be:	4b70      	ldr	r3, [pc, #448]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80083c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083c4:	0f1b      	lsrs	r3, r3, #28
 80083c6:	f003 0307 	and.w	r3, r3, #7
 80083ca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	019a      	lsls	r2, r3, #6
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	691b      	ldr	r3, [r3, #16]
 80083d6:	041b      	lsls	r3, r3, #16
 80083d8:	431a      	orrs	r2, r3
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	061b      	lsls	r3, r3, #24
 80083de:	431a      	orrs	r2, r3
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	071b      	lsls	r3, r3, #28
 80083e4:	4966      	ldr	r1, [pc, #408]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80083e6:	4313      	orrs	r3, r2
 80083e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d011      	beq.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	019a      	lsls	r2, r3, #6
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	691b      	ldr	r3, [r3, #16]
 8008402:	041b      	lsls	r3, r3, #16
 8008404:	431a      	orrs	r2, r3
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	68db      	ldr	r3, [r3, #12]
 800840a:	061b      	lsls	r3, r3, #24
 800840c:	431a      	orrs	r2, r3
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	689b      	ldr	r3, [r3, #8]
 8008412:	071b      	lsls	r3, r3, #28
 8008414:	495a      	ldr	r1, [pc, #360]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008416:	4313      	orrs	r3, r2
 8008418:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800841c:	4b58      	ldr	r3, [pc, #352]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a57      	ldr	r2, [pc, #348]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008422:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008426:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008428:	f7fc ffe6 	bl	80053f8 <HAL_GetTick>
 800842c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800842e:	e008      	b.n	8008442 <HAL_RCCEx_PeriphCLKConfig+0x60e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008430:	f7fc ffe2 	bl	80053f8 <HAL_GetTick>
 8008434:	4602      	mov	r2, r0
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	1ad3      	subs	r3, r2, r3
 800843a:	2b64      	cmp	r3, #100	; 0x64
 800843c:	d901      	bls.n	8008442 <HAL_RCCEx_PeriphCLKConfig+0x60e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800843e:	2303      	movs	r3, #3
 8008440:	e0a8      	b.n	8008594 <HAL_RCCEx_PeriphCLKConfig+0x760>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008442:	4b4f      	ldr	r3, [pc, #316]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800844a:	2b00      	cmp	r3, #0
 800844c:	d0f0      	beq.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800844e:	69bb      	ldr	r3, [r7, #24]
 8008450:	2b01      	cmp	r3, #1
 8008452:	f040 809e 	bne.w	8008592 <HAL_RCCEx_PeriphCLKConfig+0x75e>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008456:	4b4a      	ldr	r3, [pc, #296]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4a49      	ldr	r2, [pc, #292]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800845c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008460:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008462:	f7fc ffc9 	bl	80053f8 <HAL_GetTick>
 8008466:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008468:	e008      	b.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800846a:	f7fc ffc5 	bl	80053f8 <HAL_GetTick>
 800846e:	4602      	mov	r2, r0
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	1ad3      	subs	r3, r2, r3
 8008474:	2b64      	cmp	r3, #100	; 0x64
 8008476:	d901      	bls.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008478:	2303      	movs	r3, #3
 800847a:	e08b      	b.n	8008594 <HAL_RCCEx_PeriphCLKConfig+0x760>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800847c:	4b40      	ldr	r3, [pc, #256]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008484:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008488:	d0ef      	beq.n	800846a <HAL_RCCEx_PeriphCLKConfig+0x636>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008492:	2b00      	cmp	r3, #0
 8008494:	d003      	beq.n	800849e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800849a:	2b00      	cmp	r3, #0
 800849c:	d009      	beq.n	80084b2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d02e      	beq.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d12a      	bne.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80084b2:	4b33      	ldr	r3, [pc, #204]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80084b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084b8:	0c1b      	lsrs	r3, r3, #16
 80084ba:	f003 0303 	and.w	r3, r3, #3
 80084be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80084c0:	4b2f      	ldr	r3, [pc, #188]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80084c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084c6:	0f1b      	lsrs	r3, r3, #28
 80084c8:	f003 0307 	and.w	r3, r3, #7
 80084cc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	695b      	ldr	r3, [r3, #20]
 80084d2:	019a      	lsls	r2, r3, #6
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	041b      	lsls	r3, r3, #16
 80084d8:	431a      	orrs	r2, r3
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	699b      	ldr	r3, [r3, #24]
 80084de:	061b      	lsls	r3, r3, #24
 80084e0:	431a      	orrs	r2, r3
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	071b      	lsls	r3, r3, #28
 80084e6:	4926      	ldr	r1, [pc, #152]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80084e8:	4313      	orrs	r3, r2
 80084ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80084ee:	4b24      	ldr	r3, [pc, #144]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80084f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084f4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084fc:	3b01      	subs	r3, #1
 80084fe:	021b      	lsls	r3, r3, #8
 8008500:	491f      	ldr	r1, [pc, #124]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008502:	4313      	orrs	r3, r2
 8008504:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008510:	2b00      	cmp	r3, #0
 8008512:	d022      	beq.n	800855a <HAL_RCCEx_PeriphCLKConfig+0x726>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008518:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800851c:	d11d      	bne.n	800855a <HAL_RCCEx_PeriphCLKConfig+0x726>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800851e:	4b18      	ldr	r3, [pc, #96]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008524:	0e1b      	lsrs	r3, r3, #24
 8008526:	f003 030f 	and.w	r3, r3, #15
 800852a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800852c:	4b14      	ldr	r3, [pc, #80]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800852e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008532:	0f1b      	lsrs	r3, r3, #28
 8008534:	f003 0307 	and.w	r3, r3, #7
 8008538:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	695b      	ldr	r3, [r3, #20]
 800853e:	019a      	lsls	r2, r3, #6
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6a1b      	ldr	r3, [r3, #32]
 8008544:	041b      	lsls	r3, r3, #16
 8008546:	431a      	orrs	r2, r3
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	061b      	lsls	r3, r3, #24
 800854c:	431a      	orrs	r2, r3
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	071b      	lsls	r3, r3, #28
 8008552:	490b      	ldr	r1, [pc, #44]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008554:	4313      	orrs	r3, r2
 8008556:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800855a:	4b09      	ldr	r3, [pc, #36]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4a08      	ldr	r2, [pc, #32]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008564:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008566:	f7fc ff47 	bl	80053f8 <HAL_GetTick>
 800856a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800856c:	e00a      	b.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x750>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800856e:	f7fc ff43 	bl	80053f8 <HAL_GetTick>
 8008572:	4602      	mov	r2, r0
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	1ad3      	subs	r3, r2, r3
 8008578:	2b64      	cmp	r3, #100	; 0x64
 800857a:	d903      	bls.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x750>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800857c:	2303      	movs	r3, #3
 800857e:	e009      	b.n	8008594 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8008580:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008584:	4b05      	ldr	r3, [pc, #20]	; (800859c <HAL_RCCEx_PeriphCLKConfig+0x768>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800858c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008590:	d1ed      	bne.n	800856e <HAL_RCCEx_PeriphCLKConfig+0x73a>
      }
    }
  }
  return HAL_OK;
 8008592:	2300      	movs	r3, #0
}
 8008594:	4618      	mov	r0, r3
 8008596:	3720      	adds	r7, #32
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}
 800859c:	40023800 	.word	0x40023800

080085a0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b082      	sub	sp, #8
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d101      	bne.n	80085b2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80085ae:	2301      	movs	r3, #1
 80085b0:	e022      	b.n	80085f8 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80085b8:	b2db      	uxtb	r3, r3
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d105      	bne.n	80085ca <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2200      	movs	r2, #0
 80085c2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f7fb fc8b 	bl	8003ee0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2203      	movs	r2, #3
 80085ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f000 f814 	bl	8008600 <HAL_SD_InitCard>
 80085d8:	4603      	mov	r3, r0
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d001      	beq.n	80085e2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80085de:	2301      	movs	r3, #1
 80085e0:	e00a      	b.n	80085f8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2200      	movs	r2, #0
 80085e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2200      	movs	r2, #0
 80085ec:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2201      	movs	r2, #1
 80085f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80085f6:	2300      	movs	r3, #0
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3708      	adds	r7, #8
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}

08008600 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008600:	b5b0      	push	{r4, r5, r7, lr}
 8008602:	b08e      	sub	sp, #56	; 0x38
 8008604:	af04      	add	r7, sp, #16
 8008606:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008608:	2300      	movs	r3, #0
 800860a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800860c:	2300      	movs	r3, #0
 800860e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008610:	2300      	movs	r3, #0
 8008612:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008614:	2300      	movs	r3, #0
 8008616:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008618:	2300      	movs	r3, #0
 800861a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800861c:	2376      	movs	r3, #118	; 0x76
 800861e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681d      	ldr	r5, [r3, #0]
 8008624:	466c      	mov	r4, sp
 8008626:	f107 0314 	add.w	r3, r7, #20
 800862a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800862e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008632:	f107 0308 	add.w	r3, r7, #8
 8008636:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008638:	4628      	mov	r0, r5
 800863a:	f003 fa97 	bl	800bb6c <SDMMC_Init>
 800863e:	4603      	mov	r3, r0
 8008640:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008644:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008648:	2b00      	cmp	r3, #0
 800864a:	d001      	beq.n	8008650 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800864c:	2301      	movs	r3, #1
 800864e:	e03b      	b.n	80086c8 <HAL_SD_InitCard+0xc8>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	685a      	ldr	r2, [r3, #4]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800865e:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4618      	mov	r0, r3
 8008666:	f003 facb 	bl	800bc00 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	685a      	ldr	r2, [r3, #4]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008678:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 ffca 	bl	8009614 <SD_PowerON>
 8008680:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008682:	6a3b      	ldr	r3, [r7, #32]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d00b      	beq.n	80086a0 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2201      	movs	r2, #1
 800868c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008694:	6a3b      	ldr	r3, [r7, #32]
 8008696:	431a      	orrs	r2, r3
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800869c:	2301      	movs	r3, #1
 800869e:	e013      	b.n	80086c8 <HAL_SD_InitCard+0xc8>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f000 fee9 	bl	8009478 <SD_InitCard>
 80086a6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80086a8:	6a3b      	ldr	r3, [r7, #32]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d00b      	beq.n	80086c6 <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2201      	movs	r2, #1
 80086b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086ba:	6a3b      	ldr	r3, [r7, #32]
 80086bc:	431a      	orrs	r2, r3
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80086c2:	2301      	movs	r3, #1
 80086c4:	e000      	b.n	80086c8 <HAL_SD_InitCard+0xc8>
  }

  return HAL_OK;
 80086c6:	2300      	movs	r3, #0
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3728      	adds	r7, #40	; 0x28
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bdb0      	pop	{r4, r5, r7, pc}

080086d0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b08c      	sub	sp, #48	; 0x30
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	60f8      	str	r0, [r7, #12]
 80086d8:	60b9      	str	r1, [r7, #8]
 80086da:	607a      	str	r2, [r7, #4]
 80086dc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d107      	bne.n	80086f8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ec:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80086f4:	2301      	movs	r3, #1
 80086f6:	e0cc      	b.n	8008892 <HAL_SD_ReadBlocks_DMA+0x1c2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80086fe:	b2db      	uxtb	r3, r3
 8008700:	2b01      	cmp	r3, #1
 8008702:	f040 80c5 	bne.w	8008890 <HAL_SD_ReadBlocks_DMA+0x1c0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2200      	movs	r2, #0
 800870a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800870c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	441a      	add	r2, r3
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008716:	429a      	cmp	r2, r3
 8008718:	d907      	bls.n	800872a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800871e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008726:	2301      	movs	r3, #1
 8008728:	e0b3      	b.n	8008892 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	2203      	movs	r2, #3
 800872e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	2200      	movs	r2, #0
 8008738:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8008748:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800874e:	4a53      	ldr	r2, [pc, #332]	; (800889c <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8008750:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008756:	4a52      	ldr	r2, [pc, #328]	; (80088a0 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8008758:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800875e:	2200      	movs	r2, #0
 8008760:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	3380      	adds	r3, #128	; 0x80
 800876c:	4619      	mov	r1, r3
 800876e:	68ba      	ldr	r2, [r7, #8]
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	025b      	lsls	r3, r3, #9
 8008774:	089b      	lsrs	r3, r3, #2
 8008776:	f7fc fffd 	bl	8005774 <HAL_DMA_Start_IT>
 800877a:	4603      	mov	r3, r0
 800877c:	2b00      	cmp	r3, #0
 800877e:	d017      	beq.n	80087b0 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800878e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a43      	ldr	r2, [pc, #268]	; (80088a4 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8008796:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800879c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2201      	movs	r2, #1
 80087a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80087ac:	2301      	movs	r3, #1
 80087ae:	e070      	b.n	8008892 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f042 0208 	orr.w	r2, r2, #8
 80087be:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	d002      	beq.n	80087ce <HAL_SD_ReadBlocks_DMA+0xfe>
      {
        add *= 512U;
 80087c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ca:	025b      	lsls	r3, r3, #9
 80087cc:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80087d6:	4618      	mov	r0, r3
 80087d8:	f003 faa6 	bl	800bd28 <SDMMC_CmdBlockLength>
 80087dc:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 80087de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d00f      	beq.n	8008804 <HAL_SD_ReadBlocks_DMA+0x134>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a2e      	ldr	r2, [pc, #184]	; (80088a4 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 80087ea:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087f2:	431a      	orrs	r2, r3
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	2201      	movs	r2, #1
 80087fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8008800:	2301      	movs	r3, #1
 8008802:	e046      	b.n	8008892 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008804:	f04f 33ff 	mov.w	r3, #4294967295
 8008808:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	025b      	lsls	r3, r3, #9
 800880e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008810:	2390      	movs	r3, #144	; 0x90
 8008812:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008814:	2302      	movs	r3, #2
 8008816:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008818:	2300      	movs	r3, #0
 800881a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800881c:	2301      	movs	r3, #1
 800881e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f107 0210 	add.w	r2, r7, #16
 8008828:	4611      	mov	r1, r2
 800882a:	4618      	mov	r0, r3
 800882c:	f003 fa50 	bl	800bcd0 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	2b01      	cmp	r3, #1
 8008834:	d90a      	bls.n	800884c <HAL_SD_ReadBlocks_DMA+0x17c>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2282      	movs	r2, #130	; 0x82
 800883a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008842:	4618      	mov	r0, r3
 8008844:	f003 fab4 	bl	800bdb0 <SDMMC_CmdReadMultiBlock>
 8008848:	62f8      	str	r0, [r7, #44]	; 0x2c
 800884a:	e009      	b.n	8008860 <HAL_SD_ReadBlocks_DMA+0x190>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2281      	movs	r2, #129	; 0x81
 8008850:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008858:	4618      	mov	r0, r3
 800885a:	f003 fa87 	bl	800bd6c <SDMMC_CmdReadSingleBlock>
 800885e:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8008860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008862:	2b00      	cmp	r3, #0
 8008864:	d012      	beq.n	800888c <HAL_SD_ReadBlocks_DMA+0x1bc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4a0e      	ldr	r2, [pc, #56]	; (80088a4 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 800886c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008874:	431a      	orrs	r2, r3
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2201      	movs	r2, #1
 800887e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2200      	movs	r2, #0
 8008886:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8008888:	2301      	movs	r3, #1
 800888a:	e002      	b.n	8008892 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      return HAL_OK;
 800888c:	2300      	movs	r3, #0
 800888e:	e000      	b.n	8008892 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
  }
  else
  {
    return HAL_BUSY;
 8008890:	2302      	movs	r3, #2
  }
}
 8008892:	4618      	mov	r0, r3
 8008894:	3730      	adds	r7, #48	; 0x30
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}
 800889a:	bf00      	nop
 800889c:	08009287 	.word	0x08009287
 80088a0:	080092f9 	.word	0x080092f9
 80088a4:	004005ff 	.word	0x004005ff

080088a8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b08c      	sub	sp, #48	; 0x30
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	60f8      	str	r0, [r7, #12]
 80088b0:	60b9      	str	r1, [r7, #8]
 80088b2:	607a      	str	r2, [r7, #4]
 80088b4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d107      	bne.n	80088d0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088c4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80088cc:	2301      	movs	r3, #1
 80088ce:	e0cf      	b.n	8008a70 <HAL_SD_WriteBlocks_DMA+0x1c8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80088d6:	b2db      	uxtb	r3, r3
 80088d8:	2b01      	cmp	r3, #1
 80088da:	f040 80c8 	bne.w	8008a6e <HAL_SD_WriteBlocks_DMA+0x1c6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2200      	movs	r2, #0
 80088e2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80088e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	441a      	add	r2, r3
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088ee:	429a      	cmp	r2, r3
 80088f0:	d907      	bls.n	8008902 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088f6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80088fe:	2301      	movs	r3, #1
 8008900:	e0b6      	b.n	8008a70 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	2203      	movs	r2, #3
 8008906:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	2200      	movs	r2, #0
 8008910:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f042 021a 	orr.w	r2, r2, #26
 8008920:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008926:	4a54      	ldr	r2, [pc, #336]	; (8008a78 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8008928:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800892e:	4a53      	ldr	r2, [pc, #332]	; (8008a7c <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8008930:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008936:	2200      	movs	r2, #0
 8008938:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800893e:	2b01      	cmp	r3, #1
 8008940:	d002      	beq.n	8008948 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8008942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008944:	025b      	lsls	r3, r3, #9
 8008946:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008950:	4618      	mov	r0, r3
 8008952:	f003 f9e9 	bl	800bd28 <SDMMC_CmdBlockLength>
 8008956:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800895a:	2b00      	cmp	r3, #0
 800895c:	d00f      	beq.n	800897e <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4a47      	ldr	r2, [pc, #284]	; (8008a80 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8008964:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800896a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800896c:	431a      	orrs	r2, r3
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	2201      	movs	r2, #1
 8008976:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800897a:	2301      	movs	r3, #1
 800897c:	e078      	b.n	8008a70 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	2b01      	cmp	r3, #1
 8008982:	d90a      	bls.n	800899a <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	22a0      	movs	r2, #160	; 0xa0
 8008988:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008990:	4618      	mov	r0, r3
 8008992:	f003 fa51 	bl	800be38 <SDMMC_CmdWriteMultiBlock>
 8008996:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008998:	e009      	b.n	80089ae <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	2290      	movs	r2, #144	; 0x90
 800899e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80089a6:	4618      	mov	r0, r3
 80089a8:	f003 fa24 	bl	800bdf4 <SDMMC_CmdWriteSingleBlock>
 80089ac:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80089ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d012      	beq.n	80089da <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	4a31      	ldr	r2, [pc, #196]	; (8008a80 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80089ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089c2:	431a      	orrs	r2, r3
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2201      	movs	r2, #1
 80089cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2200      	movs	r2, #0
 80089d4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80089d6:	2301      	movs	r3, #1
 80089d8:	e04a      	b.n	8008a70 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f042 0208 	orr.w	r2, r2, #8
 80089e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80089ee:	68b9      	ldr	r1, [r7, #8]
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	3380      	adds	r3, #128	; 0x80
 80089f6:	461a      	mov	r2, r3
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	025b      	lsls	r3, r3, #9
 80089fc:	089b      	lsrs	r3, r3, #2
 80089fe:	f7fc feb9 	bl	8005774 <HAL_DMA_Start_IT>
 8008a02:	4603      	mov	r3, r0
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d01a      	beq.n	8008a3e <HAL_SD_WriteBlocks_DMA+0x196>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f022 021a 	bic.w	r2, r2, #26
 8008a16:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4a18      	ldr	r2, [pc, #96]	; (8008a80 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8008a1e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a24:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	2201      	movs	r2, #1
 8008a30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	2200      	movs	r2, #0
 8008a38:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	e018      	b.n	8008a70 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8008a42:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	025b      	lsls	r3, r3, #9
 8008a48:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008a4a:	2390      	movs	r3, #144	; 0x90
 8008a4c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008a52:	2300      	movs	r3, #0
 8008a54:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008a56:	2301      	movs	r3, #1
 8008a58:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f107 0210 	add.w	r2, r7, #16
 8008a62:	4611      	mov	r1, r2
 8008a64:	4618      	mov	r0, r3
 8008a66:	f003 f933 	bl	800bcd0 <SDMMC_ConfigData>

      return HAL_OK;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	e000      	b.n	8008a70 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
  }
  else
  {
    return HAL_BUSY;
 8008a6e:	2302      	movs	r3, #2
  }
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3730      	adds	r7, #48	; 0x30
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}
 8008a78:	0800925d 	.word	0x0800925d
 8008a7c:	080092f9 	.word	0x080092f9
 8008a80:	004005ff 	.word	0x004005ff

08008a84 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b084      	sub	sp, #16
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a90:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d008      	beq.n	8008ab2 <HAL_SD_IRQHandler+0x2e>
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	f003 0308 	and.w	r3, r3, #8
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d003      	beq.n	8008ab2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f000 ffc8 	bl	8009a40 <SD_Read_IT>
 8008ab0:	e153      	b.n	8008d5a <HAL_SD_IRQHandler+0x2d6>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	f000 808d 	beq.w	8008bdc <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008aca:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681a      	ldr	r2, [r3, #0]
 8008ad6:	4ba3      	ldr	r3, [pc, #652]	; (8008d64 <HAL_SD_IRQHandler+0x2e0>)
 8008ad8:	400b      	ands	r3, r1
 8008ada:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f022 0201 	bic.w	r2, r2, #1
 8008aea:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	f003 0308 	and.w	r3, r3, #8
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d039      	beq.n	8008b6a <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	f003 0302 	and.w	r3, r3, #2
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d104      	bne.n	8008b0a <HAL_SD_IRQHandler+0x86>
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	f003 0320 	and.w	r3, r3, #32
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d011      	beq.n	8008b2e <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f003 f9b4 	bl	800be7c <SDMMC_CmdStopTransfer>
 8008b14:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d008      	beq.n	8008b2e <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	431a      	orrs	r2, r3
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f000 f921 	bl	8008d70 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f240 523a 	movw	r2, #1338	; 0x53a
 8008b36:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2200      	movs	r2, #0
 8008b44:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	f003 0301 	and.w	r3, r3, #1
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d104      	bne.n	8008b5a <HAL_SD_IRQHandler+0xd6>
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	f003 0302 	and.w	r3, r3, #2
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d003      	beq.n	8008b62 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f005 f936 	bl	800ddcc <HAL_SD_RxCpltCallback>
 8008b60:	e0fb      	b.n	8008d5a <HAL_SD_IRQHandler+0x2d6>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f005 f928 	bl	800ddb8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008b68:	e0f7      	b.n	8008d5a <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	f000 80f2 	beq.w	8008d5a <HAL_SD_IRQHandler+0x2d6>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	f003 0320 	and.w	r3, r3, #32
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d011      	beq.n	8008ba4 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	4618      	mov	r0, r3
 8008b86:	f003 f979 	bl	800be7c <SDMMC_CmdStopTransfer>
 8008b8a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d008      	beq.n	8008ba4 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	431a      	orrs	r2, r3
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f000 f8e6 	bl	8008d70 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	f003 0301 	and.w	r3, r3, #1
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	f040 80d5 	bne.w	8008d5a <HAL_SD_IRQHandler+0x2d6>
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f003 0302 	and.w	r3, r3, #2
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	f040 80cf 	bne.w	8008d5a <HAL_SD_IRQHandler+0x2d6>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f022 0208 	bic.w	r2, r2, #8
 8008bca:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2201      	movs	r2, #1
 8008bd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f005 f8ef 	bl	800ddb8 <HAL_SD_TxCpltCallback>
}
 8008bda:	e0be      	b.n	8008d5a <HAL_SD_IRQHandler+0x2d6>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008be2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d008      	beq.n	8008bfc <HAL_SD_IRQHandler+0x178>
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	f003 0308 	and.w	r3, r3, #8
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d003      	beq.n	8008bfc <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f000 ff74 	bl	8009ae2 <SD_Write_IT>
 8008bfa:	e0ae      	b.n	8008d5a <HAL_SD_IRQHandler+0x2d6>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c02:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	f000 80a7 	beq.w	8008d5a <HAL_SD_IRQHandler+0x2d6>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c12:	f003 0302 	and.w	r3, r3, #2
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d005      	beq.n	8008c26 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c1e:	f043 0202 	orr.w	r2, r3, #2
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c2c:	f003 0308 	and.w	r3, r3, #8
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d005      	beq.n	8008c40 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c38:	f043 0208 	orr.w	r2, r3, #8
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c46:	f003 0320 	and.w	r3, r3, #32
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d005      	beq.n	8008c5a <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c52:	f043 0220 	orr.w	r2, r3, #32
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c60:	f003 0310 	and.w	r3, r3, #16
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d005      	beq.n	8008c74 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c6c:	f043 0210 	orr.w	r2, r3, #16
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f240 523a 	movw	r2, #1338	; 0x53a
 8008c7c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008c8c:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4618      	mov	r0, r3
 8008c94:	f003 f8f2 	bl	800be7c <SDMMC_CmdStopTransfer>
 8008c98:	4602      	mov	r2, r0
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c9e:	431a      	orrs	r2, r3
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	f003 0308 	and.w	r3, r3, #8
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d00a      	beq.n	8008cc4 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2201      	movs	r2, #1
 8008cb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f000 f857 	bl	8008d70 <HAL_SD_ErrorCallback>
}
 8008cc2:	e04a      	b.n	8008d5a <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d045      	beq.n	8008d5a <HAL_SD_IRQHandler+0x2d6>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	f003 0310 	and.w	r3, r3, #16
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d104      	bne.n	8008ce2 <HAL_SD_IRQHandler+0x25e>
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	f003 0320 	and.w	r3, r3, #32
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d011      	beq.n	8008d06 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ce6:	4a20      	ldr	r2, [pc, #128]	; (8008d68 <HAL_SD_IRQHandler+0x2e4>)
 8008ce8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f7fc fda0 	bl	8005834 <HAL_DMA_Abort_IT>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d02f      	beq.n	8008d5a <HAL_SD_IRQHandler+0x2d6>
          SD_DMATxAbort(hsd->hdmatx);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f000 fb4c 	bl	800939c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008d04:	e029      	b.n	8008d5a <HAL_SD_IRQHandler+0x2d6>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	f003 0301 	and.w	r3, r3, #1
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d104      	bne.n	8008d1a <HAL_SD_IRQHandler+0x296>
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	f003 0302 	and.w	r3, r3, #2
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d011      	beq.n	8008d3e <HAL_SD_IRQHandler+0x2ba>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d1e:	4a13      	ldr	r2, [pc, #76]	; (8008d6c <HAL_SD_IRQHandler+0x2e8>)
 8008d20:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d26:	4618      	mov	r0, r3
 8008d28:	f7fc fd84 	bl	8005834 <HAL_DMA_Abort_IT>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d013      	beq.n	8008d5a <HAL_SD_IRQHandler+0x2d6>
          SD_DMARxAbort(hsd->hdmarx);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d36:	4618      	mov	r0, r3
 8008d38:	f000 fb67 	bl	800940a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8008d3c:	e00d      	b.n	8008d5a <HAL_SD_IRQHandler+0x2d6>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2200      	movs	r2, #0
 8008d42:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2201      	movs	r2, #1
 8008d48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f005 f826 	bl	800dda4 <HAL_SD_AbortCallback>
}
 8008d58:	e7ff      	b.n	8008d5a <HAL_SD_IRQHandler+0x2d6>
 8008d5a:	bf00      	nop
 8008d5c:	3710      	adds	r7, #16
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}
 8008d62:	bf00      	nop
 8008d64:	ffff3ec5 	.word	0xffff3ec5
 8008d68:	0800939d 	.word	0x0800939d
 8008d6c:	0800940b 	.word	0x0800940b

08008d70 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b083      	sub	sp, #12
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008d78:	bf00      	nop
 8008d7a:	370c      	adds	r7, #12
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d82:	4770      	bx	lr

08008d84 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b083      	sub	sp, #12
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d92:	0f9b      	lsrs	r3, r3, #30
 8008d94:	b2da      	uxtb	r2, r3
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d9e:	0e9b      	lsrs	r3, r3, #26
 8008da0:	b2db      	uxtb	r3, r3
 8008da2:	f003 030f 	and.w	r3, r3, #15
 8008da6:	b2da      	uxtb	r2, r3
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008db0:	0e1b      	lsrs	r3, r3, #24
 8008db2:	b2db      	uxtb	r3, r3
 8008db4:	f003 0303 	and.w	r3, r3, #3
 8008db8:	b2da      	uxtb	r2, r3
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008dc2:	0c1b      	lsrs	r3, r3, #16
 8008dc4:	b2da      	uxtb	r2, r3
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008dce:	0a1b      	lsrs	r3, r3, #8
 8008dd0:	b2da      	uxtb	r2, r3
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008dda:	b2da      	uxtb	r2, r3
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008de4:	0d1b      	lsrs	r3, r3, #20
 8008de6:	b29a      	uxth	r2, r3
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008df0:	0c1b      	lsrs	r3, r3, #16
 8008df2:	b2db      	uxtb	r3, r3
 8008df4:	f003 030f 	and.w	r3, r3, #15
 8008df8:	b2da      	uxtb	r2, r3
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e02:	0bdb      	lsrs	r3, r3, #15
 8008e04:	b2db      	uxtb	r3, r3
 8008e06:	f003 0301 	and.w	r3, r3, #1
 8008e0a:	b2da      	uxtb	r2, r3
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e14:	0b9b      	lsrs	r3, r3, #14
 8008e16:	b2db      	uxtb	r3, r3
 8008e18:	f003 0301 	and.w	r3, r3, #1
 8008e1c:	b2da      	uxtb	r2, r3
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e26:	0b5b      	lsrs	r3, r3, #13
 8008e28:	b2db      	uxtb	r3, r3
 8008e2a:	f003 0301 	and.w	r3, r3, #1
 8008e2e:	b2da      	uxtb	r2, r3
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e38:	0b1b      	lsrs	r3, r3, #12
 8008e3a:	b2db      	uxtb	r3, r3
 8008e3c:	f003 0301 	and.w	r3, r3, #1
 8008e40:	b2da      	uxtb	r2, r3
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d163      	bne.n	8008f1c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e58:	009a      	lsls	r2, r3, #2
 8008e5a:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008e5e:	4013      	ands	r3, r2
 8008e60:	687a      	ldr	r2, [r7, #4]
 8008e62:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008e64:	0f92      	lsrs	r2, r2, #30
 8008e66:	431a      	orrs	r2, r3
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e70:	0edb      	lsrs	r3, r3, #27
 8008e72:	b2db      	uxtb	r3, r3
 8008e74:	f003 0307 	and.w	r3, r3, #7
 8008e78:	b2da      	uxtb	r2, r3
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e82:	0e1b      	lsrs	r3, r3, #24
 8008e84:	b2db      	uxtb	r3, r3
 8008e86:	f003 0307 	and.w	r3, r3, #7
 8008e8a:	b2da      	uxtb	r2, r3
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e94:	0d5b      	lsrs	r3, r3, #21
 8008e96:	b2db      	uxtb	r3, r3
 8008e98:	f003 0307 	and.w	r3, r3, #7
 8008e9c:	b2da      	uxtb	r2, r3
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ea6:	0c9b      	lsrs	r3, r3, #18
 8008ea8:	b2db      	uxtb	r3, r3
 8008eaa:	f003 0307 	and.w	r3, r3, #7
 8008eae:	b2da      	uxtb	r2, r3
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008eb8:	0bdb      	lsrs	r3, r3, #15
 8008eba:	b2db      	uxtb	r3, r3
 8008ebc:	f003 0307 	and.w	r3, r3, #7
 8008ec0:	b2da      	uxtb	r2, r3
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	691b      	ldr	r3, [r3, #16]
 8008eca:	1c5a      	adds	r2, r3, #1
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	7e1b      	ldrb	r3, [r3, #24]
 8008ed4:	b2db      	uxtb	r3, r3
 8008ed6:	f003 0307 	and.w	r3, r3, #7
 8008eda:	3302      	adds	r3, #2
 8008edc:	2201      	movs	r2, #1
 8008ede:	fa02 f303 	lsl.w	r3, r2, r3
 8008ee2:	687a      	ldr	r2, [r7, #4]
 8008ee4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008ee6:	fb02 f203 	mul.w	r2, r2, r3
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	7a1b      	ldrb	r3, [r3, #8]
 8008ef2:	b2db      	uxtb	r3, r3
 8008ef4:	f003 030f 	and.w	r3, r3, #15
 8008ef8:	2201      	movs	r2, #1
 8008efa:	409a      	lsls	r2, r3
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f04:	687a      	ldr	r2, [r7, #4]
 8008f06:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008f08:	0a52      	lsrs	r2, r2, #9
 8008f0a:	fb02 f203 	mul.w	r2, r2, r3
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f18:	661a      	str	r2, [r3, #96]	; 0x60
 8008f1a:	e031      	b.n	8008f80 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	d11d      	bne.n	8008f60 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f28:	041b      	lsls	r3, r3, #16
 8008f2a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f32:	0c1b      	lsrs	r3, r3, #16
 8008f34:	431a      	orrs	r2, r3
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	691b      	ldr	r3, [r3, #16]
 8008f3e:	3301      	adds	r3, #1
 8008f40:	029a      	lsls	r2, r3, #10
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f54:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	661a      	str	r2, [r3, #96]	; 0x60
 8008f5e:	e00f      	b.n	8008f80 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	4a58      	ldr	r2, [pc, #352]	; (80090c8 <HAL_SD_GetCardCSD+0x344>)
 8008f66:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f6c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2201      	movs	r2, #1
 8008f78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	e09d      	b.n	80090bc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f84:	0b9b      	lsrs	r3, r3, #14
 8008f86:	b2db      	uxtb	r3, r3
 8008f88:	f003 0301 	and.w	r3, r3, #1
 8008f8c:	b2da      	uxtb	r2, r3
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f96:	09db      	lsrs	r3, r3, #7
 8008f98:	b2db      	uxtb	r3, r3
 8008f9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f9e:	b2da      	uxtb	r2, r3
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fa8:	b2db      	uxtb	r3, r3
 8008faa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fae:	b2da      	uxtb	r2, r3
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fb8:	0fdb      	lsrs	r3, r3, #31
 8008fba:	b2da      	uxtb	r2, r3
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fc4:	0f5b      	lsrs	r3, r3, #29
 8008fc6:	b2db      	uxtb	r3, r3
 8008fc8:	f003 0303 	and.w	r3, r3, #3
 8008fcc:	b2da      	uxtb	r2, r3
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fd6:	0e9b      	lsrs	r3, r3, #26
 8008fd8:	b2db      	uxtb	r3, r3
 8008fda:	f003 0307 	and.w	r3, r3, #7
 8008fde:	b2da      	uxtb	r2, r3
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fe8:	0d9b      	lsrs	r3, r3, #22
 8008fea:	b2db      	uxtb	r3, r3
 8008fec:	f003 030f 	and.w	r3, r3, #15
 8008ff0:	b2da      	uxtb	r2, r3
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ffa:	0d5b      	lsrs	r3, r3, #21
 8008ffc:	b2db      	uxtb	r3, r3
 8008ffe:	f003 0301 	and.w	r3, r3, #1
 8009002:	b2da      	uxtb	r2, r3
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	2200      	movs	r2, #0
 800900e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009016:	0c1b      	lsrs	r3, r3, #16
 8009018:	b2db      	uxtb	r3, r3
 800901a:	f003 0301 	and.w	r3, r3, #1
 800901e:	b2da      	uxtb	r2, r3
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800902a:	0bdb      	lsrs	r3, r3, #15
 800902c:	b2db      	uxtb	r3, r3
 800902e:	f003 0301 	and.w	r3, r3, #1
 8009032:	b2da      	uxtb	r2, r3
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800903e:	0b9b      	lsrs	r3, r3, #14
 8009040:	b2db      	uxtb	r3, r3
 8009042:	f003 0301 	and.w	r3, r3, #1
 8009046:	b2da      	uxtb	r2, r3
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009052:	0b5b      	lsrs	r3, r3, #13
 8009054:	b2db      	uxtb	r3, r3
 8009056:	f003 0301 	and.w	r3, r3, #1
 800905a:	b2da      	uxtb	r2, r3
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009066:	0b1b      	lsrs	r3, r3, #12
 8009068:	b2db      	uxtb	r3, r3
 800906a:	f003 0301 	and.w	r3, r3, #1
 800906e:	b2da      	uxtb	r2, r3
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800907a:	0a9b      	lsrs	r3, r3, #10
 800907c:	b2db      	uxtb	r3, r3
 800907e:	f003 0303 	and.w	r3, r3, #3
 8009082:	b2da      	uxtb	r2, r3
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800908e:	0a1b      	lsrs	r3, r3, #8
 8009090:	b2db      	uxtb	r3, r3
 8009092:	f003 0303 	and.w	r3, r3, #3
 8009096:	b2da      	uxtb	r2, r3
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090a2:	085b      	lsrs	r3, r3, #1
 80090a4:	b2db      	uxtb	r3, r3
 80090a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090aa:	b2da      	uxtb	r2, r3
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	2201      	movs	r2, #1
 80090b6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80090ba:	2300      	movs	r3, #0
}
 80090bc:	4618      	mov	r0, r3
 80090be:	370c      	adds	r7, #12
 80090c0:	46bd      	mov	sp, r7
 80090c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c6:	4770      	bx	lr
 80090c8:	004005ff 	.word	0x004005ff

080090cc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80090cc:	b480      	push	{r7}
 80090ce:	b083      	sub	sp, #12
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
 80090d4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009116:	2300      	movs	r3, #0
}
 8009118:	4618      	mov	r0, r3
 800911a:	370c      	adds	r7, #12
 800911c:	46bd      	mov	sp, r7
 800911e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009122:	4770      	bx	lr

08009124 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009124:	b5b0      	push	{r4, r5, r7, lr}
 8009126:	b08e      	sub	sp, #56	; 0x38
 8009128:	af04      	add	r7, sp, #16
 800912a:	6078      	str	r0, [r7, #4]
 800912c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2203      	movs	r2, #3
 8009132:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800913a:	2b03      	cmp	r3, #3
 800913c:	d02e      	beq.n	800919c <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009144:	d106      	bne.n	8009154 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800914a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	639a      	str	r2, [r3, #56]	; 0x38
 8009152:	e029      	b.n	80091a8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800915a:	d10a      	bne.n	8009172 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f000 fb0f 	bl	8009780 <SD_WideBus_Enable>
 8009162:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800916a:	431a      	orrs	r2, r3
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	639a      	str	r2, [r3, #56]	; 0x38
 8009170:	e01a      	b.n	80091a8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d10a      	bne.n	800918e <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f000 fb4c 	bl	8009816 <SD_WideBus_Disable>
 800917e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009186:	431a      	orrs	r2, r3
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	639a      	str	r2, [r3, #56]	; 0x38
 800918c:	e00c      	b.n	80091a8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009192:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	639a      	str	r2, [r3, #56]	; 0x38
 800919a:	e005      	b.n	80091a8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091a0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d009      	beq.n	80091c4 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	4a18      	ldr	r2, [pc, #96]	; (8009218 <HAL_SD_ConfigWideBusOperation+0xf4>)
 80091b6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2201      	movs	r2, #1
 80091bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80091c0:	2301      	movs	r3, #1
 80091c2:	e024      	b.n	800920e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	689b      	ldr	r3, [r3, #8]
 80091ce:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	68db      	ldr	r3, [r3, #12]
 80091d4:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	695b      	ldr	r3, [r3, #20]
 80091de:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	699b      	ldr	r3, [r3, #24]
 80091e4:	623b      	str	r3, [r7, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681d      	ldr	r5, [r3, #0]
 80091ea:	466c      	mov	r4, sp
 80091ec:	f107 0318 	add.w	r3, r7, #24
 80091f0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80091f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80091f8:	f107 030c 	add.w	r3, r7, #12
 80091fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80091fe:	4628      	mov	r0, r5
 8009200:	f002 fcb4 	bl	800bb6c <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2201      	movs	r2, #1
 8009208:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800920c:	2300      	movs	r3, #0
}
 800920e:	4618      	mov	r0, r3
 8009210:	3728      	adds	r7, #40	; 0x28
 8009212:	46bd      	mov	sp, r7
 8009214:	bdb0      	pop	{r4, r5, r7, pc}
 8009216:	bf00      	nop
 8009218:	004005ff 	.word	0x004005ff

0800921c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b086      	sub	sp, #24
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009224:	2300      	movs	r3, #0
 8009226:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009228:	f107 030c 	add.w	r3, r7, #12
 800922c:	4619      	mov	r1, r3
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f000 fa7e 	bl	8009730 <SD_SendStatus>
 8009234:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009236:	697b      	ldr	r3, [r7, #20]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d005      	beq.n	8009248 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	431a      	orrs	r2, r3
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	0a5b      	lsrs	r3, r3, #9
 800924c:	f003 030f 	and.w	r3, r3, #15
 8009250:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009252:	693b      	ldr	r3, [r7, #16]
}
 8009254:	4618      	mov	r0, r3
 8009256:	3718      	adds	r7, #24
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}

0800925c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800925c:	b480      	push	{r7}
 800925e:	b085      	sub	sp, #20
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009268:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009278:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800927a:	bf00      	nop
 800927c:	3714      	adds	r7, #20
 800927e:	46bd      	mov	sp, r7
 8009280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009284:	4770      	bx	lr

08009286 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009286:	b580      	push	{r7, lr}
 8009288:	b084      	sub	sp, #16
 800928a:	af00      	add	r7, sp, #0
 800928c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009292:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009298:	2b82      	cmp	r3, #130	; 0x82
 800929a:	d111      	bne.n	80092c0 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	4618      	mov	r0, r3
 80092a2:	f002 fdeb 	bl	800be7c <SDMMC_CmdStopTransfer>
 80092a6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d008      	beq.n	80092c0 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	431a      	orrs	r2, r3
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80092ba:	68f8      	ldr	r0, [r7, #12]
 80092bc:	f7ff fd58 	bl	8008d70 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f022 0208 	bic.w	r2, r2, #8
 80092ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f240 523a 	movw	r2, #1338	; 0x53a
 80092d8:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	2201      	movs	r2, #1
 80092de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	2200      	movs	r2, #0
 80092e6:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80092e8:	68f8      	ldr	r0, [r7, #12]
 80092ea:	f004 fd6f 	bl	800ddcc <HAL_SD_RxCpltCallback>
#endif
}
 80092ee:	bf00      	nop
 80092f0:	3710      	adds	r7, #16
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}
	...

080092f8 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b086      	sub	sp, #24
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009304:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f7fc fc40 	bl	8005b8c <HAL_DMA_GetError>
 800930c:	4603      	mov	r3, r0
 800930e:	2b02      	cmp	r3, #2
 8009310:	d03e      	beq.n	8009390 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009318:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800931e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009320:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	2b01      	cmp	r3, #1
 8009326:	d002      	beq.n	800932e <SD_DMAError+0x36>
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	2b01      	cmp	r3, #1
 800932c:	d12d      	bne.n	800938a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	4a19      	ldr	r2, [pc, #100]	; (8009398 <SD_DMAError+0xa0>)
 8009334:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009344:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800934a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800934e:	697b      	ldr	r3, [r7, #20]
 8009350:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8009352:	6978      	ldr	r0, [r7, #20]
 8009354:	f7ff ff62 	bl	800921c <HAL_SD_GetCardState>
 8009358:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	2b06      	cmp	r3, #6
 800935e:	d002      	beq.n	8009366 <SD_DMAError+0x6e>
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	2b05      	cmp	r3, #5
 8009364:	d10a      	bne.n	800937c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	4618      	mov	r0, r3
 800936c:	f002 fd86 	bl	800be7c <SDMMC_CmdStopTransfer>
 8009370:	4602      	mov	r2, r0
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009376:	431a      	orrs	r2, r3
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	2201      	movs	r2, #1
 8009380:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	2200      	movs	r2, #0
 8009388:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800938a:	6978      	ldr	r0, [r7, #20]
 800938c:	f7ff fcf0 	bl	8008d70 <HAL_SD_ErrorCallback>
#endif
  }
}
 8009390:	bf00      	nop
 8009392:	3718      	adds	r7, #24
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}
 8009398:	004005ff 	.word	0x004005ff

0800939c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b084      	sub	sp, #16
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093a8:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f240 523a 	movw	r2, #1338	; 0x53a
 80093b2:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80093b4:	68f8      	ldr	r0, [r7, #12]
 80093b6:	f7ff ff31 	bl	800921c <HAL_SD_GetCardState>
 80093ba:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	2201      	movs	r2, #1
 80093c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	2200      	movs	r2, #0
 80093c8:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	2b06      	cmp	r3, #6
 80093ce:	d002      	beq.n	80093d6 <SD_DMATxAbort+0x3a>
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	2b05      	cmp	r3, #5
 80093d4:	d10a      	bne.n	80093ec <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	4618      	mov	r0, r3
 80093dc:	f002 fd4e 	bl	800be7c <SDMMC_CmdStopTransfer>
 80093e0:	4602      	mov	r2, r0
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093e6:	431a      	orrs	r2, r3
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d103      	bne.n	80093fc <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80093f4:	68f8      	ldr	r0, [r7, #12]
 80093f6:	f004 fcd5 	bl	800dda4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80093fa:	e002      	b.n	8009402 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80093fc:	68f8      	ldr	r0, [r7, #12]
 80093fe:	f7ff fcb7 	bl	8008d70 <HAL_SD_ErrorCallback>
}
 8009402:	bf00      	nop
 8009404:	3710      	adds	r7, #16
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}

0800940a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800940a:	b580      	push	{r7, lr}
 800940c:	b084      	sub	sp, #16
 800940e:	af00      	add	r7, sp, #0
 8009410:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009416:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f240 523a 	movw	r2, #1338	; 0x53a
 8009420:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009422:	68f8      	ldr	r0, [r7, #12]
 8009424:	f7ff fefa 	bl	800921c <HAL_SD_GetCardState>
 8009428:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	2201      	movs	r2, #1
 800942e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	2200      	movs	r2, #0
 8009436:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	2b06      	cmp	r3, #6
 800943c:	d002      	beq.n	8009444 <SD_DMARxAbort+0x3a>
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	2b05      	cmp	r3, #5
 8009442:	d10a      	bne.n	800945a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	4618      	mov	r0, r3
 800944a:	f002 fd17 	bl	800be7c <SDMMC_CmdStopTransfer>
 800944e:	4602      	mov	r2, r0
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009454:	431a      	orrs	r2, r3
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800945e:	2b00      	cmp	r3, #0
 8009460:	d103      	bne.n	800946a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009462:	68f8      	ldr	r0, [r7, #12]
 8009464:	f004 fc9e 	bl	800dda4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009468:	e002      	b.n	8009470 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800946a:	68f8      	ldr	r0, [r7, #12]
 800946c:	f7ff fc80 	bl	8008d70 <HAL_SD_ErrorCallback>
}
 8009470:	bf00      	nop
 8009472:	3710      	adds	r7, #16
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}

08009478 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009478:	b5b0      	push	{r4, r5, r7, lr}
 800947a:	b094      	sub	sp, #80	; 0x50
 800947c:	af04      	add	r7, sp, #16
 800947e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009480:	2301      	movs	r3, #1
 8009482:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	4618      	mov	r0, r3
 800948a:	f002 fbc8 	bl	800bc1e <SDMMC_GetPowerState>
 800948e:	4603      	mov	r3, r0
 8009490:	2b00      	cmp	r3, #0
 8009492:	d102      	bne.n	800949a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009494:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009498:	e0b7      	b.n	800960a <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800949e:	2b03      	cmp	r3, #3
 80094a0:	d02f      	beq.n	8009502 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	4618      	mov	r0, r3
 80094a8:	f002 fdf3 	bl	800c092 <SDMMC_CmdSendCID>
 80094ac:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80094ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d001      	beq.n	80094b8 <SD_InitCard+0x40>
    {
      return errorstate;
 80094b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094b6:	e0a8      	b.n	800960a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	2100      	movs	r1, #0
 80094be:	4618      	mov	r0, r3
 80094c0:	f002 fbf3 	bl	800bcaa <SDMMC_GetResponse>
 80094c4:	4602      	mov	r2, r0
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	2104      	movs	r1, #4
 80094d0:	4618      	mov	r0, r3
 80094d2:	f002 fbea 	bl	800bcaa <SDMMC_GetResponse>
 80094d6:	4602      	mov	r2, r0
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	2108      	movs	r1, #8
 80094e2:	4618      	mov	r0, r3
 80094e4:	f002 fbe1 	bl	800bcaa <SDMMC_GetResponse>
 80094e8:	4602      	mov	r2, r0
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	210c      	movs	r1, #12
 80094f4:	4618      	mov	r0, r3
 80094f6:	f002 fbd8 	bl	800bcaa <SDMMC_GetResponse>
 80094fa:	4602      	mov	r2, r0
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009506:	2b03      	cmp	r3, #3
 8009508:	d00d      	beq.n	8009526 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f107 020e 	add.w	r2, r7, #14
 8009512:	4611      	mov	r1, r2
 8009514:	4618      	mov	r0, r3
 8009516:	f002 fdf9 	bl	800c10c <SDMMC_CmdSetRelAdd>
 800951a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800951c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800951e:	2b00      	cmp	r3, #0
 8009520:	d001      	beq.n	8009526 <SD_InitCard+0xae>
    {
      return errorstate;
 8009522:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009524:	e071      	b.n	800960a <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800952a:	2b03      	cmp	r3, #3
 800952c:	d036      	beq.n	800959c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800952e:	89fb      	ldrh	r3, [r7, #14]
 8009530:	461a      	mov	r2, r3
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681a      	ldr	r2, [r3, #0]
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800953e:	041b      	lsls	r3, r3, #16
 8009540:	4619      	mov	r1, r3
 8009542:	4610      	mov	r0, r2
 8009544:	f002 fdc3 	bl	800c0ce <SDMMC_CmdSendCSD>
 8009548:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800954a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800954c:	2b00      	cmp	r3, #0
 800954e:	d001      	beq.n	8009554 <SD_InitCard+0xdc>
    {
      return errorstate;
 8009550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009552:	e05a      	b.n	800960a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	2100      	movs	r1, #0
 800955a:	4618      	mov	r0, r3
 800955c:	f002 fba5 	bl	800bcaa <SDMMC_GetResponse>
 8009560:	4602      	mov	r2, r0
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	2104      	movs	r1, #4
 800956c:	4618      	mov	r0, r3
 800956e:	f002 fb9c 	bl	800bcaa <SDMMC_GetResponse>
 8009572:	4602      	mov	r2, r0
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	2108      	movs	r1, #8
 800957e:	4618      	mov	r0, r3
 8009580:	f002 fb93 	bl	800bcaa <SDMMC_GetResponse>
 8009584:	4602      	mov	r2, r0
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	210c      	movs	r1, #12
 8009590:	4618      	mov	r0, r3
 8009592:	f002 fb8a 	bl	800bcaa <SDMMC_GetResponse>
 8009596:	4602      	mov	r2, r0
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	2104      	movs	r1, #4
 80095a2:	4618      	mov	r0, r3
 80095a4:	f002 fb81 	bl	800bcaa <SDMMC_GetResponse>
 80095a8:	4603      	mov	r3, r0
 80095aa:	0d1a      	lsrs	r2, r3, #20
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80095b0:	f107 0310 	add.w	r3, r7, #16
 80095b4:	4619      	mov	r1, r3
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f7ff fbe4 	bl	8008d84 <HAL_SD_GetCardCSD>
 80095bc:	4603      	mov	r3, r0
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d002      	beq.n	80095c8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80095c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80095c6:	e020      	b.n	800960a <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6819      	ldr	r1, [r3, #0]
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095d0:	041b      	lsls	r3, r3, #16
 80095d2:	f04f 0400 	mov.w	r4, #0
 80095d6:	461a      	mov	r2, r3
 80095d8:	4623      	mov	r3, r4
 80095da:	4608      	mov	r0, r1
 80095dc:	f002 fc70 	bl	800bec0 <SDMMC_CmdSelDesel>
 80095e0:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80095e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d001      	beq.n	80095ec <SD_InitCard+0x174>
  {
    return errorstate;
 80095e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095ea:	e00e      	b.n	800960a <SD_InitCard+0x192>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681d      	ldr	r5, [r3, #0]
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	466c      	mov	r4, sp
 80095f4:	f103 0210 	add.w	r2, r3, #16
 80095f8:	ca07      	ldmia	r2, {r0, r1, r2}
 80095fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80095fe:	3304      	adds	r3, #4
 8009600:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009602:	4628      	mov	r0, r5
 8009604:	f002 fab2 	bl	800bb6c <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009608:	2300      	movs	r3, #0
}
 800960a:	4618      	mov	r0, r3
 800960c:	3740      	adds	r7, #64	; 0x40
 800960e:	46bd      	mov	sp, r7
 8009610:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009614 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b086      	sub	sp, #24
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800961c:	2300      	movs	r3, #0
 800961e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009620:	2300      	movs	r3, #0
 8009622:	617b      	str	r3, [r7, #20]
 8009624:	2300      	movs	r3, #0
 8009626:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	4618      	mov	r0, r3
 800962e:	f002 fc6a 	bl	800bf06 <SDMMC_CmdGoIdleState>
 8009632:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d001      	beq.n	800963e <SD_PowerON+0x2a>
  {
    return errorstate;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	e072      	b.n	8009724 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	4618      	mov	r0, r3
 8009644:	f002 fc7d 	bl	800bf42 <SDMMC_CmdOperCond>
 8009648:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d00d      	beq.n	800966c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2200      	movs	r2, #0
 8009654:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	4618      	mov	r0, r3
 800965c:	f002 fc53 	bl	800bf06 <SDMMC_CmdGoIdleState>
 8009660:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d004      	beq.n	8009672 <SD_PowerON+0x5e>
    {
      return errorstate;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	e05b      	b.n	8009724 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2201      	movs	r2, #1
 8009670:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009676:	2b01      	cmp	r3, #1
 8009678:	d137      	bne.n	80096ea <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	2100      	movs	r1, #0
 8009680:	4618      	mov	r0, r3
 8009682:	f002 fc7d 	bl	800bf80 <SDMMC_CmdAppCommand>
 8009686:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d02d      	beq.n	80096ea <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800968e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009692:	e047      	b.n	8009724 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	2100      	movs	r1, #0
 800969a:	4618      	mov	r0, r3
 800969c:	f002 fc70 	bl	800bf80 <SDMMC_CmdAppCommand>
 80096a0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d001      	beq.n	80096ac <SD_PowerON+0x98>
    {
      return errorstate;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	e03b      	b.n	8009724 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	491e      	ldr	r1, [pc, #120]	; (800972c <SD_PowerON+0x118>)
 80096b2:	4618      	mov	r0, r3
 80096b4:	f002 fc86 	bl	800bfc4 <SDMMC_CmdAppOperCommand>
 80096b8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d002      	beq.n	80096c6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80096c0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80096c4:	e02e      	b.n	8009724 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	2100      	movs	r1, #0
 80096cc:	4618      	mov	r0, r3
 80096ce:	f002 faec 	bl	800bcaa <SDMMC_GetResponse>
 80096d2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	0fdb      	lsrs	r3, r3, #31
 80096d8:	2b01      	cmp	r3, #1
 80096da:	d101      	bne.n	80096e0 <SD_PowerON+0xcc>
 80096dc:	2301      	movs	r3, #1
 80096de:	e000      	b.n	80096e2 <SD_PowerON+0xce>
 80096e0:	2300      	movs	r3, #0
 80096e2:	613b      	str	r3, [r7, #16]

    count++;
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	3301      	adds	r3, #1
 80096e8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80096ea:	68bb      	ldr	r3, [r7, #8]
 80096ec:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d802      	bhi.n	80096fa <SD_PowerON+0xe6>
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d0cc      	beq.n	8009694 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009700:	4293      	cmp	r3, r2
 8009702:	d902      	bls.n	800970a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009704:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009708:	e00c      	b.n	8009724 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009710:	2b00      	cmp	r3, #0
 8009712:	d003      	beq.n	800971c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2201      	movs	r2, #1
 8009718:	645a      	str	r2, [r3, #68]	; 0x44
 800971a:	e002      	b.n	8009722 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2200      	movs	r2, #0
 8009720:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009722:	2300      	movs	r3, #0
}
 8009724:	4618      	mov	r0, r3
 8009726:	3718      	adds	r7, #24
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}
 800972c:	c1100000 	.word	0xc1100000

08009730 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b084      	sub	sp, #16
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
 8009738:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d102      	bne.n	8009746 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009740:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009744:	e018      	b.n	8009778 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681a      	ldr	r2, [r3, #0]
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800974e:	041b      	lsls	r3, r3, #16
 8009750:	4619      	mov	r1, r3
 8009752:	4610      	mov	r0, r2
 8009754:	f002 fcfb 	bl	800c14e <SDMMC_CmdSendStatus>
 8009758:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d001      	beq.n	8009764 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	e009      	b.n	8009778 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	2100      	movs	r1, #0
 800976a:	4618      	mov	r0, r3
 800976c:	f002 fa9d 	bl	800bcaa <SDMMC_GetResponse>
 8009770:	4602      	mov	r2, r0
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009776:	2300      	movs	r3, #0
}
 8009778:	4618      	mov	r0, r3
 800977a:	3710      	adds	r7, #16
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}

08009780 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b086      	sub	sp, #24
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009788:	2300      	movs	r3, #0
 800978a:	60fb      	str	r3, [r7, #12]
 800978c:	2300      	movs	r3, #0
 800978e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	2100      	movs	r1, #0
 8009796:	4618      	mov	r0, r3
 8009798:	f002 fa87 	bl	800bcaa <SDMMC_GetResponse>
 800979c:	4603      	mov	r3, r0
 800979e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80097a6:	d102      	bne.n	80097ae <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80097a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80097ac:	e02f      	b.n	800980e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80097ae:	f107 030c 	add.w	r3, r7, #12
 80097b2:	4619      	mov	r1, r3
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f000 f879 	bl	80098ac <SD_FindSCR>
 80097ba:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80097bc:	697b      	ldr	r3, [r7, #20]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d001      	beq.n	80097c6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80097c2:	697b      	ldr	r3, [r7, #20]
 80097c4:	e023      	b.n	800980e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80097c6:	693b      	ldr	r3, [r7, #16]
 80097c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d01c      	beq.n	800980a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681a      	ldr	r2, [r3, #0]
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097d8:	041b      	lsls	r3, r3, #16
 80097da:	4619      	mov	r1, r3
 80097dc:	4610      	mov	r0, r2
 80097de:	f002 fbcf 	bl	800bf80 <SDMMC_CmdAppCommand>
 80097e2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d001      	beq.n	80097ee <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80097ea:	697b      	ldr	r3, [r7, #20]
 80097ec:	e00f      	b.n	800980e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	2102      	movs	r1, #2
 80097f4:	4618      	mov	r0, r3
 80097f6:	f002 fc09 	bl	800c00c <SDMMC_CmdBusWidth>
 80097fa:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80097fc:	697b      	ldr	r3, [r7, #20]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d001      	beq.n	8009806 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	e003      	b.n	800980e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009806:	2300      	movs	r3, #0
 8009808:	e001      	b.n	800980e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800980a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800980e:	4618      	mov	r0, r3
 8009810:	3718      	adds	r7, #24
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}

08009816 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009816:	b580      	push	{r7, lr}
 8009818:	b086      	sub	sp, #24
 800981a:	af00      	add	r7, sp, #0
 800981c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800981e:	2300      	movs	r3, #0
 8009820:	60fb      	str	r3, [r7, #12]
 8009822:	2300      	movs	r3, #0
 8009824:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	2100      	movs	r1, #0
 800982c:	4618      	mov	r0, r3
 800982e:	f002 fa3c 	bl	800bcaa <SDMMC_GetResponse>
 8009832:	4603      	mov	r3, r0
 8009834:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009838:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800983c:	d102      	bne.n	8009844 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800983e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009842:	e02f      	b.n	80098a4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009844:	f107 030c 	add.w	r3, r7, #12
 8009848:	4619      	mov	r1, r3
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f000 f82e 	bl	80098ac <SD_FindSCR>
 8009850:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009852:	697b      	ldr	r3, [r7, #20]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d001      	beq.n	800985c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	e023      	b.n	80098a4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800985c:	693b      	ldr	r3, [r7, #16]
 800985e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009862:	2b00      	cmp	r3, #0
 8009864:	d01c      	beq.n	80098a0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681a      	ldr	r2, [r3, #0]
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800986e:	041b      	lsls	r3, r3, #16
 8009870:	4619      	mov	r1, r3
 8009872:	4610      	mov	r0, r2
 8009874:	f002 fb84 	bl	800bf80 <SDMMC_CmdAppCommand>
 8009878:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d001      	beq.n	8009884 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009880:	697b      	ldr	r3, [r7, #20]
 8009882:	e00f      	b.n	80098a4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	2100      	movs	r1, #0
 800988a:	4618      	mov	r0, r3
 800988c:	f002 fbbe 	bl	800c00c <SDMMC_CmdBusWidth>
 8009890:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d001      	beq.n	800989c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009898:	697b      	ldr	r3, [r7, #20]
 800989a:	e003      	b.n	80098a4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800989c:	2300      	movs	r3, #0
 800989e:	e001      	b.n	80098a4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80098a0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	3718      	adds	r7, #24
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}

080098ac <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80098ac:	b590      	push	{r4, r7, lr}
 80098ae:	b08f      	sub	sp, #60	; 0x3c
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
 80098b4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80098b6:	f7fb fd9f 	bl	80053f8 <HAL_GetTick>
 80098ba:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80098bc:	2300      	movs	r3, #0
 80098be:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80098c0:	2300      	movs	r3, #0
 80098c2:	60bb      	str	r3, [r7, #8]
 80098c4:	2300      	movs	r3, #0
 80098c6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	2108      	movs	r1, #8
 80098d2:	4618      	mov	r0, r3
 80098d4:	f002 fa28 	bl	800bd28 <SDMMC_CmdBlockLength>
 80098d8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80098da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d001      	beq.n	80098e4 <SD_FindSCR+0x38>
  {
    return errorstate;
 80098e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098e2:	e0a9      	b.n	8009a38 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681a      	ldr	r2, [r3, #0]
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098ec:	041b      	lsls	r3, r3, #16
 80098ee:	4619      	mov	r1, r3
 80098f0:	4610      	mov	r0, r2
 80098f2:	f002 fb45 	bl	800bf80 <SDMMC_CmdAppCommand>
 80098f6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80098f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d001      	beq.n	8009902 <SD_FindSCR+0x56>
  {
    return errorstate;
 80098fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009900:	e09a      	b.n	8009a38 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009902:	f04f 33ff 	mov.w	r3, #4294967295
 8009906:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009908:	2308      	movs	r3, #8
 800990a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800990c:	2330      	movs	r3, #48	; 0x30
 800990e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009910:	2302      	movs	r3, #2
 8009912:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009914:	2300      	movs	r3, #0
 8009916:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009918:	2301      	movs	r3, #1
 800991a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f107 0210 	add.w	r2, r7, #16
 8009924:	4611      	mov	r1, r2
 8009926:	4618      	mov	r0, r3
 8009928:	f002 f9d2 	bl	800bcd0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	4618      	mov	r0, r3
 8009932:	f002 fb8d 	bl	800c050 <SDMMC_CmdSendSCR>
 8009936:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800993a:	2b00      	cmp	r3, #0
 800993c:	d022      	beq.n	8009984 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800993e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009940:	e07a      	b.n	8009a38 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009948:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800994c:	2b00      	cmp	r3, #0
 800994e:	d00e      	beq.n	800996e <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6819      	ldr	r1, [r3, #0]
 8009954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009956:	009b      	lsls	r3, r3, #2
 8009958:	f107 0208 	add.w	r2, r7, #8
 800995c:	18d4      	adds	r4, r2, r3
 800995e:	4608      	mov	r0, r1
 8009960:	f002 f930 	bl	800bbc4 <SDMMC_ReadFIFO>
 8009964:	4603      	mov	r3, r0
 8009966:	6023      	str	r3, [r4, #0]
      index++;
 8009968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800996a:	3301      	adds	r3, #1
 800996c:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800996e:	f7fb fd43 	bl	80053f8 <HAL_GetTick>
 8009972:	4602      	mov	r2, r0
 8009974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009976:	1ad3      	subs	r3, r2, r3
 8009978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800997c:	d102      	bne.n	8009984 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800997e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009982:	e059      	b.n	8009a38 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800998a:	f240 432a 	movw	r3, #1066	; 0x42a
 800998e:	4013      	ands	r3, r2
 8009990:	2b00      	cmp	r3, #0
 8009992:	d0d6      	beq.n	8009942 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800999a:	f003 0308 	and.w	r3, r3, #8
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d005      	beq.n	80099ae <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	2208      	movs	r2, #8
 80099a8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80099aa:	2308      	movs	r3, #8
 80099ac:	e044      	b.n	8009a38 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099b4:	f003 0302 	and.w	r3, r3, #2
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d005      	beq.n	80099c8 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	2202      	movs	r2, #2
 80099c2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80099c4:	2302      	movs	r3, #2
 80099c6:	e037      	b.n	8009a38 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099ce:	f003 0320 	and.w	r3, r3, #32
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d005      	beq.n	80099e2 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	2220      	movs	r2, #32
 80099dc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80099de:	2320      	movs	r3, #32
 80099e0:	e02a      	b.n	8009a38 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f240 523a 	movw	r2, #1338	; 0x53a
 80099ea:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	061a      	lsls	r2, r3, #24
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	021b      	lsls	r3, r3, #8
 80099f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80099f8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	0a1b      	lsrs	r3, r3, #8
 80099fe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009a02:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	0e1b      	lsrs	r3, r3, #24
 8009a08:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a0c:	601a      	str	r2, [r3, #0]
    scr++;
 8009a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a10:	3304      	adds	r3, #4
 8009a12:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	061a      	lsls	r2, r3, #24
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	021b      	lsls	r3, r3, #8
 8009a1c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009a20:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	0a1b      	lsrs	r3, r3, #8
 8009a26:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009a2a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	0e1b      	lsrs	r3, r3, #24
 8009a30:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a34:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009a36:	2300      	movs	r3, #0
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	373c      	adds	r7, #60	; 0x3c
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd90      	pop	{r4, r7, pc}

08009a40 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b086      	sub	sp, #24
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a4c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a52:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8009a54:	693b      	ldr	r3, [r7, #16]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d03f      	beq.n	8009ada <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	617b      	str	r3, [r7, #20]
 8009a5e:	e033      	b.n	8009ac8 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	4618      	mov	r0, r3
 8009a66:	f002 f8ad 	bl	800bbc4 <SDMMC_ReadFIFO>
 8009a6a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	b2da      	uxtb	r2, r3
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	3301      	adds	r3, #1
 8009a78:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	3b01      	subs	r3, #1
 8009a7e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	0a1b      	lsrs	r3, r3, #8
 8009a84:	b2da      	uxtb	r2, r3
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	3301      	adds	r3, #1
 8009a8e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009a90:	693b      	ldr	r3, [r7, #16]
 8009a92:	3b01      	subs	r3, #1
 8009a94:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	0c1b      	lsrs	r3, r3, #16
 8009a9a:	b2da      	uxtb	r2, r3
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	3301      	adds	r3, #1
 8009aa4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009aa6:	693b      	ldr	r3, [r7, #16]
 8009aa8:	3b01      	subs	r3, #1
 8009aaa:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	0e1b      	lsrs	r3, r3, #24
 8009ab0:	b2da      	uxtb	r2, r3
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	3301      	adds	r3, #1
 8009aba:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009abc:	693b      	ldr	r3, [r7, #16]
 8009abe:	3b01      	subs	r3, #1
 8009ac0:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	3301      	adds	r3, #1
 8009ac6:	617b      	str	r3, [r7, #20]
 8009ac8:	697b      	ldr	r3, [r7, #20]
 8009aca:	2b07      	cmp	r3, #7
 8009acc:	d9c8      	bls.n	8009a60 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	68fa      	ldr	r2, [r7, #12]
 8009ad2:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	693a      	ldr	r2, [r7, #16]
 8009ad8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8009ada:	bf00      	nop
 8009adc:	3718      	adds	r7, #24
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}

08009ae2 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8009ae2:	b580      	push	{r7, lr}
 8009ae4:	b086      	sub	sp, #24
 8009ae6:	af00      	add	r7, sp, #0
 8009ae8:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6a1b      	ldr	r3, [r3, #32]
 8009aee:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009af4:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d043      	beq.n	8009b84 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8009afc:	2300      	movs	r3, #0
 8009afe:	617b      	str	r3, [r7, #20]
 8009b00:	e037      	b.n	8009b72 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	781b      	ldrb	r3, [r3, #0]
 8009b06:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	3301      	adds	r3, #1
 8009b0c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009b0e:	693b      	ldr	r3, [r7, #16]
 8009b10:	3b01      	subs	r3, #1
 8009b12:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	781b      	ldrb	r3, [r3, #0]
 8009b18:	021a      	lsls	r2, r3, #8
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	4313      	orrs	r3, r2
 8009b1e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	3301      	adds	r3, #1
 8009b24:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009b26:	693b      	ldr	r3, [r7, #16]
 8009b28:	3b01      	subs	r3, #1
 8009b2a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	781b      	ldrb	r3, [r3, #0]
 8009b30:	041a      	lsls	r2, r3, #16
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	4313      	orrs	r3, r2
 8009b36:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	3301      	adds	r3, #1
 8009b3c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009b3e:	693b      	ldr	r3, [r7, #16]
 8009b40:	3b01      	subs	r3, #1
 8009b42:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	781b      	ldrb	r3, [r3, #0]
 8009b48:	061a      	lsls	r2, r3, #24
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	4313      	orrs	r3, r2
 8009b4e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	3301      	adds	r3, #1
 8009b54:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	3b01      	subs	r3, #1
 8009b5a:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f107 0208 	add.w	r2, r7, #8
 8009b64:	4611      	mov	r1, r2
 8009b66:	4618      	mov	r0, r3
 8009b68:	f002 f839 	bl	800bbde <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8009b6c:	697b      	ldr	r3, [r7, #20]
 8009b6e:	3301      	adds	r3, #1
 8009b70:	617b      	str	r3, [r7, #20]
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	2b07      	cmp	r3, #7
 8009b76:	d9c4      	bls.n	8009b02 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	68fa      	ldr	r2, [r7, #12]
 8009b7c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	693a      	ldr	r2, [r7, #16]
 8009b82:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8009b84:	bf00      	nop
 8009b86:	3718      	adds	r7, #24
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd80      	pop	{r7, pc}

08009b8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b084      	sub	sp, #16
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d101      	bne.n	8009b9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	e084      	b.n	8009ca8 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009baa:	b2db      	uxtb	r3, r3
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d106      	bne.n	8009bbe <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f7fa fa7b 	bl	80040b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2202      	movs	r2, #2
 8009bc2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	681a      	ldr	r2, [r3, #0]
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009bd4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	68db      	ldr	r3, [r3, #12]
 8009bda:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009bde:	d902      	bls.n	8009be6 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009be0:	2300      	movs	r3, #0
 8009be2:	60fb      	str	r3, [r7, #12]
 8009be4:	e002      	b.n	8009bec <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009be6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009bea:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	68db      	ldr	r3, [r3, #12]
 8009bf0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009bf4:	d007      	beq.n	8009c06 <HAL_SPI_Init+0x7a>
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	68db      	ldr	r3, [r3, #12]
 8009bfa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009bfe:	d002      	beq.n	8009c06 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2200      	movs	r2, #0
 8009c04:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d10b      	bne.n	8009c26 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	68db      	ldr	r3, [r3, #12]
 8009c12:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009c16:	d903      	bls.n	8009c20 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2202      	movs	r2, #2
 8009c1c:	631a      	str	r2, [r3, #48]	; 0x30
 8009c1e:	e002      	b.n	8009c26 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2201      	movs	r2, #1
 8009c24:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	685a      	ldr	r2, [r3, #4]
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	689b      	ldr	r3, [r3, #8]
 8009c2e:	431a      	orrs	r2, r3
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	691b      	ldr	r3, [r3, #16]
 8009c34:	431a      	orrs	r2, r3
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	695b      	ldr	r3, [r3, #20]
 8009c3a:	431a      	orrs	r2, r3
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	699b      	ldr	r3, [r3, #24]
 8009c40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009c44:	431a      	orrs	r2, r3
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	69db      	ldr	r3, [r3, #28]
 8009c4a:	431a      	orrs	r2, r3
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6a1b      	ldr	r3, [r3, #32]
 8009c50:	ea42 0103 	orr.w	r1, r2, r3
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	430a      	orrs	r2, r1
 8009c5e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	699b      	ldr	r3, [r3, #24]
 8009c64:	0c1b      	lsrs	r3, r3, #16
 8009c66:	f003 0204 	and.w	r2, r3, #4
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c6e:	431a      	orrs	r2, r3
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c74:	431a      	orrs	r2, r3
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	68db      	ldr	r3, [r3, #12]
 8009c7a:	ea42 0103 	orr.w	r1, r2, r3
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	68fa      	ldr	r2, [r7, #12]
 8009c84:	430a      	orrs	r2, r1
 8009c86:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	69da      	ldr	r2, [r3, #28]
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009c96:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2201      	movs	r2, #1
 8009ca2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009ca6:	2300      	movs	r3, #0
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3710      	adds	r7, #16
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}

08009cb0 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b086      	sub	sp, #24
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	60f8      	str	r0, [r7, #12]
 8009cb8:	60b9      	str	r1, [r7, #8]
 8009cba:	4613      	mov	r3, r2
 8009cbc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	689b      	ldr	r3, [r3, #8]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d110      	bne.n	8009cec <HAL_SPI_Receive_IT+0x3c>
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	685b      	ldr	r3, [r3, #4]
 8009cce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009cd2:	d10b      	bne.n	8009cec <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	2204      	movs	r2, #4
 8009cd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8009cdc:	88fb      	ldrh	r3, [r7, #6]
 8009cde:	68ba      	ldr	r2, [r7, #8]
 8009ce0:	68b9      	ldr	r1, [r7, #8]
 8009ce2:	68f8      	ldr	r0, [r7, #12]
 8009ce4:	f000 f88c 	bl	8009e00 <HAL_SPI_TransmitReceive_IT>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	e081      	b.n	8009df0 <HAL_SPI_Receive_IT+0x140>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009cf2:	2b01      	cmp	r3, #1
 8009cf4:	d101      	bne.n	8009cfa <HAL_SPI_Receive_IT+0x4a>
 8009cf6:	2302      	movs	r3, #2
 8009cf8:	e07a      	b.n	8009df0 <HAL_SPI_Receive_IT+0x140>
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	2201      	movs	r2, #1
 8009cfe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009d08:	b2db      	uxtb	r3, r3
 8009d0a:	2b01      	cmp	r3, #1
 8009d0c:	d002      	beq.n	8009d14 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8009d0e:	2302      	movs	r3, #2
 8009d10:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009d12:	e068      	b.n	8009de6 <HAL_SPI_Receive_IT+0x136>
  }

  if ((pData == NULL) || (Size == 0U))
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d002      	beq.n	8009d20 <HAL_SPI_Receive_IT+0x70>
 8009d1a:	88fb      	ldrh	r3, [r7, #6]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d102      	bne.n	8009d26 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8009d20:	2301      	movs	r3, #1
 8009d22:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009d24:	e05f      	b.n	8009de6 <HAL_SPI_Receive_IT+0x136>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	2204      	movs	r2, #4
 8009d2a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	2200      	movs	r2, #0
 8009d32:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	68ba      	ldr	r2, [r7, #8]
 8009d38:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	88fa      	ldrh	r2, [r7, #6]
 8009d3e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	88fa      	ldrh	r2, [r7, #6]
 8009d46:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	2200      	movs	r2, #0
 8009d54:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	2200      	movs	r2, #0
 8009d5a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	68db      	ldr	r3, [r3, #12]
 8009d66:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009d6a:	d90b      	bls.n	8009d84 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	685a      	ldr	r2, [r3, #4]
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009d7a:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	4a1e      	ldr	r2, [pc, #120]	; (8009df8 <HAL_SPI_Receive_IT+0x148>)
 8009d80:	64da      	str	r2, [r3, #76]	; 0x4c
 8009d82:	e00a      	b.n	8009d9a <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	685a      	ldr	r2, [r3, #4]
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009d92:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	4a19      	ldr	r2, [pc, #100]	; (8009dfc <HAL_SPI_Receive_IT+0x14c>)
 8009d98:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	689b      	ldr	r3, [r3, #8]
 8009d9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009da2:	d107      	bne.n	8009db4 <HAL_SPI_Receive_IT+0x104>
  {
    SPI_1LINE_RX(hspi);
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	681a      	ldr	r2, [r3, #0]
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009db2:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	685a      	ldr	r2, [r3, #4]
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8009dc2:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dce:	2b40      	cmp	r3, #64	; 0x40
 8009dd0:	d008      	beq.n	8009de4 <HAL_SPI_Receive_IT+0x134>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	681a      	ldr	r2, [r3, #0]
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009de0:	601a      	str	r2, [r3, #0]
 8009de2:	e000      	b.n	8009de6 <HAL_SPI_Receive_IT+0x136>
  }

error :
 8009de4:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	2200      	movs	r2, #0
 8009dea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009dee:	7dfb      	ldrb	r3, [r7, #23]
}
 8009df0:	4618      	mov	r0, r3
 8009df2:	3718      	adds	r7, #24
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}
 8009df8:	0800a419 	.word	0x0800a419
 8009dfc:	0800a3c9 	.word	0x0800a3c9

08009e00 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8009e00:	b480      	push	{r7}
 8009e02:	b087      	sub	sp, #28
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	60f8      	str	r0, [r7, #12]
 8009e08:	60b9      	str	r1, [r7, #8]
 8009e0a:	607a      	str	r2, [r7, #4]
 8009e0c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009e18:	2b01      	cmp	r3, #1
 8009e1a:	d101      	bne.n	8009e20 <HAL_SPI_TransmitReceive_IT+0x20>
 8009e1c:	2302      	movs	r3, #2
 8009e1e:	e091      	b.n	8009f44 <HAL_SPI_TransmitReceive_IT+0x144>
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	2201      	movs	r2, #1
 8009e24:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009e2e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	685b      	ldr	r3, [r3, #4]
 8009e34:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009e36:	7dbb      	ldrb	r3, [r7, #22]
 8009e38:	2b01      	cmp	r3, #1
 8009e3a:	d00d      	beq.n	8009e58 <HAL_SPI_TransmitReceive_IT+0x58>
 8009e3c:	693b      	ldr	r3, [r7, #16]
 8009e3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009e42:	d106      	bne.n	8009e52 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	689b      	ldr	r3, [r3, #8]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d102      	bne.n	8009e52 <HAL_SPI_TransmitReceive_IT+0x52>
 8009e4c:	7dbb      	ldrb	r3, [r7, #22]
 8009e4e:	2b04      	cmp	r3, #4
 8009e50:	d002      	beq.n	8009e58 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8009e52:	2302      	movs	r3, #2
 8009e54:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009e56:	e070      	b.n	8009f3a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d005      	beq.n	8009e6a <HAL_SPI_TransmitReceive_IT+0x6a>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d002      	beq.n	8009e6a <HAL_SPI_TransmitReceive_IT+0x6a>
 8009e64:	887b      	ldrh	r3, [r7, #2]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d102      	bne.n	8009e70 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009e6e:	e064      	b.n	8009f3a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009e76:	b2db      	uxtb	r3, r3
 8009e78:	2b04      	cmp	r3, #4
 8009e7a:	d003      	beq.n	8009e84 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	2205      	movs	r2, #5
 8009e80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	2200      	movs	r2, #0
 8009e88:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	68ba      	ldr	r2, [r7, #8]
 8009e8e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	887a      	ldrh	r2, [r7, #2]
 8009e94:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	887a      	ldrh	r2, [r7, #2]
 8009e9a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	687a      	ldr	r2, [r7, #4]
 8009ea0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	887a      	ldrh	r2, [r7, #2]
 8009ea6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	887a      	ldrh	r2, [r7, #2]
 8009eae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	68db      	ldr	r3, [r3, #12]
 8009eb6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009eba:	d906      	bls.n	8009eca <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	4a24      	ldr	r2, [pc, #144]	; (8009f50 <HAL_SPI_TransmitReceive_IT+0x150>)
 8009ec0:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	4a23      	ldr	r2, [pc, #140]	; (8009f54 <HAL_SPI_TransmitReceive_IT+0x154>)
 8009ec6:	651a      	str	r2, [r3, #80]	; 0x50
 8009ec8:	e005      	b.n	8009ed6 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	4a22      	ldr	r2, [pc, #136]	; (8009f58 <HAL_SPI_TransmitReceive_IT+0x158>)
 8009ece:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	4a22      	ldr	r2, [pc, #136]	; (8009f5c <HAL_SPI_TransmitReceive_IT+0x15c>)
 8009ed4:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	68db      	ldr	r3, [r3, #12]
 8009eda:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009ede:	d802      	bhi.n	8009ee6 <HAL_SPI_TransmitReceive_IT+0xe6>
 8009ee0:	887b      	ldrh	r3, [r7, #2]
 8009ee2:	2b01      	cmp	r3, #1
 8009ee4:	d908      	bls.n	8009ef8 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	685a      	ldr	r2, [r3, #4]
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009ef4:	605a      	str	r2, [r3, #4]
 8009ef6:	e007      	b.n	8009f08 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	685a      	ldr	r2, [r3, #4]
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009f06:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	685a      	ldr	r2, [r3, #4]
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8009f16:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f22:	2b40      	cmp	r3, #64	; 0x40
 8009f24:	d008      	beq.n	8009f38 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	681a      	ldr	r2, [r3, #0]
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009f34:	601a      	str	r2, [r3, #0]
 8009f36:	e000      	b.n	8009f3a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8009f38:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009f42:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f44:	4618      	mov	r0, r3
 8009f46:	371c      	adds	r7, #28
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4e:	4770      	bx	lr
 8009f50:	0800a303 	.word	0x0800a303
 8009f54:	0800a369 	.word	0x0800a369
 8009f58:	0800a1b3 	.word	0x0800a1b3
 8009f5c:	0800a271 	.word	0x0800a271

08009f60 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b088      	sub	sp, #32
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	685b      	ldr	r3, [r3, #4]
 8009f6e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	689b      	ldr	r3, [r3, #8]
 8009f76:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009f78:	69bb      	ldr	r3, [r7, #24]
 8009f7a:	099b      	lsrs	r3, r3, #6
 8009f7c:	f003 0301 	and.w	r3, r3, #1
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d10f      	bne.n	8009fa4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009f84:	69bb      	ldr	r3, [r7, #24]
 8009f86:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d00a      	beq.n	8009fa4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009f8e:	69fb      	ldr	r3, [r7, #28]
 8009f90:	099b      	lsrs	r3, r3, #6
 8009f92:	f003 0301 	and.w	r3, r3, #1
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d004      	beq.n	8009fa4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	4798      	blx	r3
    return;
 8009fa2:	e0d8      	b.n	800a156 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009fa4:	69bb      	ldr	r3, [r7, #24]
 8009fa6:	085b      	lsrs	r3, r3, #1
 8009fa8:	f003 0301 	and.w	r3, r3, #1
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d00a      	beq.n	8009fc6 <HAL_SPI_IRQHandler+0x66>
 8009fb0:	69fb      	ldr	r3, [r7, #28]
 8009fb2:	09db      	lsrs	r3, r3, #7
 8009fb4:	f003 0301 	and.w	r3, r3, #1
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d004      	beq.n	8009fc6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	4798      	blx	r3
    return;
 8009fc4:	e0c7      	b.n	800a156 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009fc6:	69bb      	ldr	r3, [r7, #24]
 8009fc8:	095b      	lsrs	r3, r3, #5
 8009fca:	f003 0301 	and.w	r3, r3, #1
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d10c      	bne.n	8009fec <HAL_SPI_IRQHandler+0x8c>
 8009fd2:	69bb      	ldr	r3, [r7, #24]
 8009fd4:	099b      	lsrs	r3, r3, #6
 8009fd6:	f003 0301 	and.w	r3, r3, #1
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d106      	bne.n	8009fec <HAL_SPI_IRQHandler+0x8c>
 8009fde:	69bb      	ldr	r3, [r7, #24]
 8009fe0:	0a1b      	lsrs	r3, r3, #8
 8009fe2:	f003 0301 	and.w	r3, r3, #1
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	f000 80b5 	beq.w	800a156 <HAL_SPI_IRQHandler+0x1f6>
 8009fec:	69fb      	ldr	r3, [r7, #28]
 8009fee:	095b      	lsrs	r3, r3, #5
 8009ff0:	f003 0301 	and.w	r3, r3, #1
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	f000 80ae 	beq.w	800a156 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009ffa:	69bb      	ldr	r3, [r7, #24]
 8009ffc:	099b      	lsrs	r3, r3, #6
 8009ffe:	f003 0301 	and.w	r3, r3, #1
 800a002:	2b00      	cmp	r3, #0
 800a004:	d023      	beq.n	800a04e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a00c:	b2db      	uxtb	r3, r3
 800a00e:	2b03      	cmp	r3, #3
 800a010:	d011      	beq.n	800a036 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a016:	f043 0204 	orr.w	r2, r3, #4
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a01e:	2300      	movs	r3, #0
 800a020:	617b      	str	r3, [r7, #20]
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	68db      	ldr	r3, [r3, #12]
 800a028:	617b      	str	r3, [r7, #20]
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	689b      	ldr	r3, [r3, #8]
 800a030:	617b      	str	r3, [r7, #20]
 800a032:	697b      	ldr	r3, [r7, #20]
 800a034:	e00b      	b.n	800a04e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a036:	2300      	movs	r3, #0
 800a038:	613b      	str	r3, [r7, #16]
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	68db      	ldr	r3, [r3, #12]
 800a040:	613b      	str	r3, [r7, #16]
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	689b      	ldr	r3, [r3, #8]
 800a048:	613b      	str	r3, [r7, #16]
 800a04a:	693b      	ldr	r3, [r7, #16]
        return;
 800a04c:	e083      	b.n	800a156 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800a04e:	69bb      	ldr	r3, [r7, #24]
 800a050:	095b      	lsrs	r3, r3, #5
 800a052:	f003 0301 	and.w	r3, r3, #1
 800a056:	2b00      	cmp	r3, #0
 800a058:	d014      	beq.n	800a084 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a05e:	f043 0201 	orr.w	r2, r3, #1
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a066:	2300      	movs	r3, #0
 800a068:	60fb      	str	r3, [r7, #12]
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	689b      	ldr	r3, [r3, #8]
 800a070:	60fb      	str	r3, [r7, #12]
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	681a      	ldr	r2, [r3, #0]
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a080:	601a      	str	r2, [r3, #0]
 800a082:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800a084:	69bb      	ldr	r3, [r7, #24]
 800a086:	0a1b      	lsrs	r3, r3, #8
 800a088:	f003 0301 	and.w	r3, r3, #1
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d00c      	beq.n	800a0aa <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a094:	f043 0208 	orr.w	r2, r3, #8
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a09c:	2300      	movs	r3, #0
 800a09e:	60bb      	str	r3, [r7, #8]
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	689b      	ldr	r3, [r3, #8]
 800a0a6:	60bb      	str	r3, [r7, #8]
 800a0a8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d050      	beq.n	800a154 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	685a      	ldr	r2, [r3, #4]
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a0c0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2201      	movs	r2, #1
 800a0c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800a0ca:	69fb      	ldr	r3, [r7, #28]
 800a0cc:	f003 0302 	and.w	r3, r3, #2
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d104      	bne.n	800a0de <HAL_SPI_IRQHandler+0x17e>
 800a0d4:	69fb      	ldr	r3, [r7, #28]
 800a0d6:	f003 0301 	and.w	r3, r3, #1
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d034      	beq.n	800a148 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	685a      	ldr	r2, [r3, #4]
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f022 0203 	bic.w	r2, r2, #3
 800a0ec:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d011      	beq.n	800a11a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0fa:	4a18      	ldr	r2, [pc, #96]	; (800a15c <HAL_SPI_IRQHandler+0x1fc>)
 800a0fc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a102:	4618      	mov	r0, r3
 800a104:	f7fb fb96 	bl	8005834 <HAL_DMA_Abort_IT>
 800a108:	4603      	mov	r3, r0
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d005      	beq.n	800a11a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a112:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d016      	beq.n	800a150 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a126:	4a0d      	ldr	r2, [pc, #52]	; (800a15c <HAL_SPI_IRQHandler+0x1fc>)
 800a128:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a12e:	4618      	mov	r0, r3
 800a130:	f7fb fb80 	bl	8005834 <HAL_DMA_Abort_IT>
 800a134:	4603      	mov	r3, r0
 800a136:	2b00      	cmp	r3, #0
 800a138:	d00a      	beq.n	800a150 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a13e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800a146:	e003      	b.n	800a150 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f000 f813 	bl	800a174 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a14e:	e000      	b.n	800a152 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800a150:	bf00      	nop
    return;
 800a152:	bf00      	nop
 800a154:	bf00      	nop
  }
}
 800a156:	3720      	adds	r7, #32
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}
 800a15c:	0800a189 	.word	0x0800a189

0800a160 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a160:	b480      	push	{r7}
 800a162:	b083      	sub	sp, #12
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800a168:	bf00      	nop
 800a16a:	370c      	adds	r7, #12
 800a16c:	46bd      	mov	sp, r7
 800a16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a172:	4770      	bx	lr

0800a174 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800a174:	b480      	push	{r7}
 800a176:	b083      	sub	sp, #12
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a17c:	bf00      	nop
 800a17e:	370c      	adds	r7, #12
 800a180:	46bd      	mov	sp, r7
 800a182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a186:	4770      	bx	lr

0800a188 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b084      	sub	sp, #16
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a194:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	2200      	movs	r2, #0
 800a19a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a1a4:	68f8      	ldr	r0, [r7, #12]
 800a1a6:	f7ff ffe5 	bl	800a174 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a1aa:	bf00      	nop
 800a1ac:	3710      	adds	r7, #16
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd80      	pop	{r7, pc}

0800a1b2 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a1b2:	b580      	push	{r7, lr}
 800a1b4:	b082      	sub	sp, #8
 800a1b6:	af00      	add	r7, sp, #0
 800a1b8:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a1c0:	b29b      	uxth	r3, r3
 800a1c2:	2b01      	cmp	r3, #1
 800a1c4:	d923      	bls.n	800a20e <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	68da      	ldr	r2, [r3, #12]
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1d0:	b292      	uxth	r2, r2
 800a1d2:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1d8:	1c9a      	adds	r2, r3, #2
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a1e4:	b29b      	uxth	r3, r3
 800a1e6:	3b02      	subs	r3, #2
 800a1e8:	b29a      	uxth	r2, r3
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a1f6:	b29b      	uxth	r3, r3
 800a1f8:	2b01      	cmp	r3, #1
 800a1fa:	d11f      	bne.n	800a23c <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	685a      	ldr	r2, [r3, #4]
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a20a:	605a      	str	r2, [r3, #4]
 800a20c:	e016      	b.n	800a23c <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	f103 020c 	add.w	r2, r3, #12
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a21a:	7812      	ldrb	r2, [r2, #0]
 800a21c:	b2d2      	uxtb	r2, r2
 800a21e:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a224:	1c5a      	adds	r2, r3, #1
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a230:	b29b      	uxth	r3, r3
 800a232:	3b01      	subs	r3, #1
 800a234:	b29a      	uxth	r2, r3
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a242:	b29b      	uxth	r3, r3
 800a244:	2b00      	cmp	r3, #0
 800a246:	d10f      	bne.n	800a268 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	685a      	ldr	r2, [r3, #4]
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a256:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a25c:	b29b      	uxth	r3, r3
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d102      	bne.n	800a268 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f000 fa73 	bl	800a74e <SPI_CloseRxTx_ISR>
    }
  }
}
 800a268:	bf00      	nop
 800a26a:	3708      	adds	r7, #8
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}

0800a270 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b082      	sub	sp, #8
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a27c:	b29b      	uxth	r3, r3
 800a27e:	2b01      	cmp	r3, #1
 800a280:	d912      	bls.n	800a2a8 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a286:	881a      	ldrh	r2, [r3, #0]
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a292:	1c9a      	adds	r2, r3, #2
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a29c:	b29b      	uxth	r3, r3
 800a29e:	3b02      	subs	r3, #2
 800a2a0:	b29a      	uxth	r2, r3
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a2a6:	e012      	b.n	800a2ce <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	330c      	adds	r3, #12
 800a2b2:	7812      	ldrb	r2, [r2, #0]
 800a2b4:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2ba:	1c5a      	adds	r2, r3, #1
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a2c4:	b29b      	uxth	r3, r3
 800a2c6:	3b01      	subs	r3, #1
 800a2c8:	b29a      	uxth	r2, r3
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a2d2:	b29b      	uxth	r3, r3
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d110      	bne.n	800a2fa <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	685a      	ldr	r2, [r3, #4]
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a2e6:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a2ee:	b29b      	uxth	r3, r3
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d102      	bne.n	800a2fa <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 800a2f4:	6878      	ldr	r0, [r7, #4]
 800a2f6:	f000 fa2a 	bl	800a74e <SPI_CloseRxTx_ISR>
    }
  }
}
 800a2fa:	bf00      	nop
 800a2fc:	3708      	adds	r7, #8
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}

0800a302 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a302:	b580      	push	{r7, lr}
 800a304:	b082      	sub	sp, #8
 800a306:	af00      	add	r7, sp, #0
 800a308:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	68da      	ldr	r2, [r3, #12]
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a314:	b292      	uxth	r2, r2
 800a316:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a31c:	1c9a      	adds	r2, r3, #2
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a328:	b29b      	uxth	r3, r3
 800a32a:	3b01      	subs	r3, #1
 800a32c:	b29a      	uxth	r2, r3
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a33a:	b29b      	uxth	r3, r3
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d10f      	bne.n	800a360 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	685a      	ldr	r2, [r3, #4]
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a34e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a354:	b29b      	uxth	r3, r3
 800a356:	2b00      	cmp	r3, #0
 800a358:	d102      	bne.n	800a360 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f000 f9f7 	bl	800a74e <SPI_CloseRxTx_ISR>
    }
  }
}
 800a360:	bf00      	nop
 800a362:	3708      	adds	r7, #8
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}

0800a368 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b082      	sub	sp, #8
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a374:	881a      	ldrh	r2, [r3, #0]
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a380:	1c9a      	adds	r2, r3, #2
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a38a:	b29b      	uxth	r3, r3
 800a38c:	3b01      	subs	r3, #1
 800a38e:	b29a      	uxth	r2, r3
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a398:	b29b      	uxth	r3, r3
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d110      	bne.n	800a3c0 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	685a      	ldr	r2, [r3, #4]
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a3ac:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a3b4:	b29b      	uxth	r3, r3
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d102      	bne.n	800a3c0 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f000 f9c7 	bl	800a74e <SPI_CloseRxTx_ISR>
    }
  }
}
 800a3c0:	bf00      	nop
 800a3c2:	3708      	adds	r7, #8
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bd80      	pop	{r7, pc}

0800a3c8 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b082      	sub	sp, #8
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f103 020c 	add.w	r2, r3, #12
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3dc:	7812      	ldrb	r2, [r2, #0]
 800a3de:	b2d2      	uxtb	r2, r2
 800a3e0:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3e6:	1c5a      	adds	r2, r3, #1
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a3f2:	b29b      	uxth	r3, r3
 800a3f4:	3b01      	subs	r3, #1
 800a3f6:	b29a      	uxth	r2, r3
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a404:	b29b      	uxth	r3, r3
 800a406:	2b00      	cmp	r3, #0
 800a408:	d102      	bne.n	800a410 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	f000 f9e1 	bl	800a7d2 <SPI_CloseRx_ISR>
  }
}
 800a410:	bf00      	nop
 800a412:	3708      	adds	r7, #8
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}

0800a418 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b082      	sub	sp, #8
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	68da      	ldr	r2, [r3, #12]
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a42a:	b292      	uxth	r2, r2
 800a42c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a432:	1c9a      	adds	r2, r3, #2
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a43e:	b29b      	uxth	r3, r3
 800a440:	3b01      	subs	r3, #1
 800a442:	b29a      	uxth	r2, r3
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a450:	b29b      	uxth	r3, r3
 800a452:	2b00      	cmp	r3, #0
 800a454:	d102      	bne.n	800a45c <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f000 f9bb 	bl	800a7d2 <SPI_CloseRx_ISR>
  }
}
 800a45c:	bf00      	nop
 800a45e:	3708      	adds	r7, #8
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}

0800a464 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b084      	sub	sp, #16
 800a468:	af00      	add	r7, sp, #0
 800a46a:	60f8      	str	r0, [r7, #12]
 800a46c:	60b9      	str	r1, [r7, #8]
 800a46e:	603b      	str	r3, [r7, #0]
 800a470:	4613      	mov	r3, r2
 800a472:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a474:	e04c      	b.n	800a510 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a47c:	d048      	beq.n	800a510 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800a47e:	f7fa ffbb 	bl	80053f8 <HAL_GetTick>
 800a482:	4602      	mov	r2, r0
 800a484:	69bb      	ldr	r3, [r7, #24]
 800a486:	1ad3      	subs	r3, r2, r3
 800a488:	683a      	ldr	r2, [r7, #0]
 800a48a:	429a      	cmp	r2, r3
 800a48c:	d902      	bls.n	800a494 <SPI_WaitFlagStateUntilTimeout+0x30>
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d13d      	bne.n	800a510 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	685a      	ldr	r2, [r3, #4]
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a4a2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	685b      	ldr	r3, [r3, #4]
 800a4a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a4ac:	d111      	bne.n	800a4d2 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	689b      	ldr	r3, [r3, #8]
 800a4b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a4b6:	d004      	beq.n	800a4c2 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	689b      	ldr	r3, [r3, #8]
 800a4bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a4c0:	d107      	bne.n	800a4d2 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	681a      	ldr	r2, [r3, #0]
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a4d0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a4da:	d10f      	bne.n	800a4fc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	681a      	ldr	r2, [r3, #0]
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a4ea:	601a      	str	r2, [r3, #0]
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	681a      	ldr	r2, [r3, #0]
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a4fa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	2201      	movs	r2, #1
 800a500:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	2200      	movs	r2, #0
 800a508:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a50c:	2303      	movs	r3, #3
 800a50e:	e00f      	b.n	800a530 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	689a      	ldr	r2, [r3, #8]
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	4013      	ands	r3, r2
 800a51a:	68ba      	ldr	r2, [r7, #8]
 800a51c:	429a      	cmp	r2, r3
 800a51e:	bf0c      	ite	eq
 800a520:	2301      	moveq	r3, #1
 800a522:	2300      	movne	r3, #0
 800a524:	b2db      	uxtb	r3, r3
 800a526:	461a      	mov	r2, r3
 800a528:	79fb      	ldrb	r3, [r7, #7]
 800a52a:	429a      	cmp	r2, r3
 800a52c:	d1a3      	bne.n	800a476 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800a52e:	2300      	movs	r3, #0
}
 800a530:	4618      	mov	r0, r3
 800a532:	3710      	adds	r7, #16
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}

0800a538 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b084      	sub	sp, #16
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	60f8      	str	r0, [r7, #12]
 800a540:	60b9      	str	r1, [r7, #8]
 800a542:	607a      	str	r2, [r7, #4]
 800a544:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800a546:	e057      	b.n	800a5f8 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a54e:	d106      	bne.n	800a55e <SPI_WaitFifoStateUntilTimeout+0x26>
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d103      	bne.n	800a55e <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	330c      	adds	r3, #12
 800a55c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a564:	d048      	beq.n	800a5f8 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800a566:	f7fa ff47 	bl	80053f8 <HAL_GetTick>
 800a56a:	4602      	mov	r2, r0
 800a56c:	69bb      	ldr	r3, [r7, #24]
 800a56e:	1ad3      	subs	r3, r2, r3
 800a570:	683a      	ldr	r2, [r7, #0]
 800a572:	429a      	cmp	r2, r3
 800a574:	d902      	bls.n	800a57c <SPI_WaitFifoStateUntilTimeout+0x44>
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d13d      	bne.n	800a5f8 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	685a      	ldr	r2, [r3, #4]
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a58a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	685b      	ldr	r3, [r3, #4]
 800a590:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a594:	d111      	bne.n	800a5ba <SPI_WaitFifoStateUntilTimeout+0x82>
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	689b      	ldr	r3, [r3, #8]
 800a59a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a59e:	d004      	beq.n	800a5aa <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	689b      	ldr	r3, [r3, #8]
 800a5a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a5a8:	d107      	bne.n	800a5ba <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	681a      	ldr	r2, [r3, #0]
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a5b8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5c2:	d10f      	bne.n	800a5e4 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	681a      	ldr	r2, [r3, #0]
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a5d2:	601a      	str	r2, [r3, #0]
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	681a      	ldr	r2, [r3, #0]
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a5e2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	2201      	movs	r2, #1
 800a5e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a5f4:	2303      	movs	r3, #3
 800a5f6:	e008      	b.n	800a60a <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	689a      	ldr	r2, [r3, #8]
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	4013      	ands	r3, r2
 800a602:	687a      	ldr	r2, [r7, #4]
 800a604:	429a      	cmp	r2, r3
 800a606:	d19f      	bne.n	800a548 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800a608:	2300      	movs	r3, #0
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	3710      	adds	r7, #16
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}

0800a612 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a612:	b580      	push	{r7, lr}
 800a614:	b086      	sub	sp, #24
 800a616:	af02      	add	r7, sp, #8
 800a618:	60f8      	str	r0, [r7, #12]
 800a61a:	60b9      	str	r1, [r7, #8]
 800a61c:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	685b      	ldr	r3, [r3, #4]
 800a622:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a626:	d111      	bne.n	800a64c <SPI_EndRxTransaction+0x3a>
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	689b      	ldr	r3, [r3, #8]
 800a62c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a630:	d004      	beq.n	800a63c <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	689b      	ldr	r3, [r3, #8]
 800a636:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a63a:	d107      	bne.n	800a64c <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	681a      	ldr	r2, [r3, #0]
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a64a:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	9300      	str	r3, [sp, #0]
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	2200      	movs	r2, #0
 800a654:	2180      	movs	r1, #128	; 0x80
 800a656:	68f8      	ldr	r0, [r7, #12]
 800a658:	f7ff ff04 	bl	800a464 <SPI_WaitFlagStateUntilTimeout>
 800a65c:	4603      	mov	r3, r0
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d007      	beq.n	800a672 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a666:	f043 0220 	orr.w	r2, r3, #32
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a66e:	2303      	movs	r3, #3
 800a670:	e023      	b.n	800a6ba <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	685b      	ldr	r3, [r3, #4]
 800a676:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a67a:	d11d      	bne.n	800a6b8 <SPI_EndRxTransaction+0xa6>
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	689b      	ldr	r3, [r3, #8]
 800a680:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a684:	d004      	beq.n	800a690 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	689b      	ldr	r3, [r3, #8]
 800a68a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a68e:	d113      	bne.n	800a6b8 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	9300      	str	r3, [sp, #0]
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	2200      	movs	r2, #0
 800a698:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a69c:	68f8      	ldr	r0, [r7, #12]
 800a69e:	f7ff ff4b 	bl	800a538 <SPI_WaitFifoStateUntilTimeout>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d007      	beq.n	800a6b8 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a6ac:	f043 0220 	orr.w	r2, r3, #32
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800a6b4:	2303      	movs	r3, #3
 800a6b6:	e000      	b.n	800a6ba <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800a6b8:	2300      	movs	r3, #0
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3710      	adds	r7, #16
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}

0800a6c2 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a6c2:	b580      	push	{r7, lr}
 800a6c4:	b086      	sub	sp, #24
 800a6c6:	af02      	add	r7, sp, #8
 800a6c8:	60f8      	str	r0, [r7, #12]
 800a6ca:	60b9      	str	r1, [r7, #8]
 800a6cc:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	9300      	str	r3, [sp, #0]
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800a6da:	68f8      	ldr	r0, [r7, #12]
 800a6dc:	f7ff ff2c 	bl	800a538 <SPI_WaitFifoStateUntilTimeout>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d007      	beq.n	800a6f6 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a6ea:	f043 0220 	orr.w	r2, r3, #32
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a6f2:	2303      	movs	r3, #3
 800a6f4:	e027      	b.n	800a746 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	9300      	str	r3, [sp, #0]
 800a6fa:	68bb      	ldr	r3, [r7, #8]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	2180      	movs	r1, #128	; 0x80
 800a700:	68f8      	ldr	r0, [r7, #12]
 800a702:	f7ff feaf 	bl	800a464 <SPI_WaitFlagStateUntilTimeout>
 800a706:	4603      	mov	r3, r0
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d007      	beq.n	800a71c <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a710:	f043 0220 	orr.w	r2, r3, #32
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a718:	2303      	movs	r3, #3
 800a71a:	e014      	b.n	800a746 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	9300      	str	r3, [sp, #0]
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	2200      	movs	r2, #0
 800a724:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a728:	68f8      	ldr	r0, [r7, #12]
 800a72a:	f7ff ff05 	bl	800a538 <SPI_WaitFifoStateUntilTimeout>
 800a72e:	4603      	mov	r3, r0
 800a730:	2b00      	cmp	r3, #0
 800a732:	d007      	beq.n	800a744 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a738:	f043 0220 	orr.w	r2, r3, #32
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a740:	2303      	movs	r3, #3
 800a742:	e000      	b.n	800a746 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a744:	2300      	movs	r3, #0
}
 800a746:	4618      	mov	r0, r3
 800a748:	3710      	adds	r7, #16
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}

0800a74e <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800a74e:	b580      	push	{r7, lr}
 800a750:	b084      	sub	sp, #16
 800a752:	af00      	add	r7, sp, #0
 800a754:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a756:	f7fa fe4f 	bl	80053f8 <HAL_GetTick>
 800a75a:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	685a      	ldr	r2, [r3, #4]
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f022 0220 	bic.w	r2, r2, #32
 800a76a:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a76c:	68fa      	ldr	r2, [r7, #12]
 800a76e:	2164      	movs	r1, #100	; 0x64
 800a770:	6878      	ldr	r0, [r7, #4]
 800a772:	f7ff ffa6 	bl	800a6c2 <SPI_EndRxTxTransaction>
 800a776:	4603      	mov	r3, r0
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d005      	beq.n	800a788 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a780:	f043 0220 	orr.w	r2, r3, #32
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d115      	bne.n	800a7bc <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a796:	b2db      	uxtb	r3, r3
 800a798:	2b04      	cmp	r3, #4
 800a79a:	d107      	bne.n	800a7ac <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2201      	movs	r2, #1
 800a7a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f7fa fb53 	bl	8004e50 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800a7aa:	e00e      	b.n	800a7ca <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2201      	movs	r2, #1
 800a7b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f7ff fcd3 	bl	800a160 <HAL_SPI_TxRxCpltCallback>
}
 800a7ba:	e006      	b.n	800a7ca <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2201      	movs	r2, #1
 800a7c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800a7c4:	6878      	ldr	r0, [r7, #4]
 800a7c6:	f7ff fcd5 	bl	800a174 <HAL_SPI_ErrorCallback>
}
 800a7ca:	bf00      	nop
 800a7cc:	3710      	adds	r7, #16
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}

0800a7d2 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 800a7d2:	b580      	push	{r7, lr}
 800a7d4:	b082      	sub	sp, #8
 800a7d6:	af00      	add	r7, sp, #0
 800a7d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	685a      	ldr	r2, [r3, #4]
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a7e8:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800a7ea:	f7fa fe05 	bl	80053f8 <HAL_GetTick>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	461a      	mov	r2, r3
 800a7f2:	2164      	movs	r1, #100	; 0x64
 800a7f4:	6878      	ldr	r0, [r7, #4]
 800a7f6:	f7ff ff0c 	bl	800a612 <SPI_EndRxTransaction>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d005      	beq.n	800a80c <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a804:	f043 0220 	orr.w	r2, r3, #32
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2201      	movs	r2, #1
 800a810:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d103      	bne.n	800a824 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f7fa fb17 	bl	8004e50 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800a822:	e002      	b.n	800a82a <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f7ff fca5 	bl	800a174 <HAL_SPI_ErrorCallback>
}
 800a82a:	bf00      	nop
 800a82c:	3708      	adds	r7, #8
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}

0800a832 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a832:	b580      	push	{r7, lr}
 800a834:	b082      	sub	sp, #8
 800a836:	af00      	add	r7, sp, #0
 800a838:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d101      	bne.n	800a844 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a840:	2301      	movs	r3, #1
 800a842:	e01d      	b.n	800a880 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a84a:	b2db      	uxtb	r3, r3
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d106      	bne.n	800a85e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2200      	movs	r2, #0
 800a854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a858:	6878      	ldr	r0, [r7, #4]
 800a85a:	f000 f815 	bl	800a888 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2202      	movs	r2, #2
 800a862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681a      	ldr	r2, [r3, #0]
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	3304      	adds	r3, #4
 800a86e:	4619      	mov	r1, r3
 800a870:	4610      	mov	r0, r2
 800a872:	f000 f985 	bl	800ab80 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2201      	movs	r2, #1
 800a87a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a87e:	2300      	movs	r3, #0
}
 800a880:	4618      	mov	r0, r3
 800a882:	3708      	adds	r7, #8
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}

0800a888 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a888:	b480      	push	{r7}
 800a88a:	b083      	sub	sp, #12
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a890:	bf00      	nop
 800a892:	370c      	adds	r7, #12
 800a894:	46bd      	mov	sp, r7
 800a896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89a:	4770      	bx	lr

0800a89c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a89c:	b480      	push	{r7}
 800a89e:	b085      	sub	sp, #20
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	68da      	ldr	r2, [r3, #12]
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	f042 0201 	orr.w	r2, r2, #1
 800a8b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	689a      	ldr	r2, [r3, #8]
 800a8ba:	4b0c      	ldr	r3, [pc, #48]	; (800a8ec <HAL_TIM_Base_Start_IT+0x50>)
 800a8bc:	4013      	ands	r3, r2
 800a8be:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	2b06      	cmp	r3, #6
 800a8c4:	d00b      	beq.n	800a8de <HAL_TIM_Base_Start_IT+0x42>
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8cc:	d007      	beq.n	800a8de <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	681a      	ldr	r2, [r3, #0]
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	f042 0201 	orr.w	r2, r2, #1
 800a8dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a8de:	2300      	movs	r3, #0
}
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	3714      	adds	r7, #20
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ea:	4770      	bx	lr
 800a8ec:	00010007 	.word	0x00010007

0800a8f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b082      	sub	sp, #8
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	691b      	ldr	r3, [r3, #16]
 800a8fe:	f003 0302 	and.w	r3, r3, #2
 800a902:	2b02      	cmp	r3, #2
 800a904:	d122      	bne.n	800a94c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	68db      	ldr	r3, [r3, #12]
 800a90c:	f003 0302 	and.w	r3, r3, #2
 800a910:	2b02      	cmp	r3, #2
 800a912:	d11b      	bne.n	800a94c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	f06f 0202 	mvn.w	r2, #2
 800a91c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	2201      	movs	r2, #1
 800a922:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	699b      	ldr	r3, [r3, #24]
 800a92a:	f003 0303 	and.w	r3, r3, #3
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d003      	beq.n	800a93a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f000 f905 	bl	800ab42 <HAL_TIM_IC_CaptureCallback>
 800a938:	e005      	b.n	800a946 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	f000 f8f7 	bl	800ab2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f000 f908 	bl	800ab56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2200      	movs	r2, #0
 800a94a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	691b      	ldr	r3, [r3, #16]
 800a952:	f003 0304 	and.w	r3, r3, #4
 800a956:	2b04      	cmp	r3, #4
 800a958:	d122      	bne.n	800a9a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	68db      	ldr	r3, [r3, #12]
 800a960:	f003 0304 	and.w	r3, r3, #4
 800a964:	2b04      	cmp	r3, #4
 800a966:	d11b      	bne.n	800a9a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	f06f 0204 	mvn.w	r2, #4
 800a970:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2202      	movs	r2, #2
 800a976:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	699b      	ldr	r3, [r3, #24]
 800a97e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a982:	2b00      	cmp	r3, #0
 800a984:	d003      	beq.n	800a98e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f000 f8db 	bl	800ab42 <HAL_TIM_IC_CaptureCallback>
 800a98c:	e005      	b.n	800a99a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	f000 f8cd 	bl	800ab2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a994:	6878      	ldr	r0, [r7, #4]
 800a996:	f000 f8de 	bl	800ab56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2200      	movs	r2, #0
 800a99e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	691b      	ldr	r3, [r3, #16]
 800a9a6:	f003 0308 	and.w	r3, r3, #8
 800a9aa:	2b08      	cmp	r3, #8
 800a9ac:	d122      	bne.n	800a9f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	68db      	ldr	r3, [r3, #12]
 800a9b4:	f003 0308 	and.w	r3, r3, #8
 800a9b8:	2b08      	cmp	r3, #8
 800a9ba:	d11b      	bne.n	800a9f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	f06f 0208 	mvn.w	r2, #8
 800a9c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2204      	movs	r2, #4
 800a9ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	69db      	ldr	r3, [r3, #28]
 800a9d2:	f003 0303 	and.w	r3, r3, #3
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d003      	beq.n	800a9e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f000 f8b1 	bl	800ab42 <HAL_TIM_IC_CaptureCallback>
 800a9e0:	e005      	b.n	800a9ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	f000 f8a3 	bl	800ab2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9e8:	6878      	ldr	r0, [r7, #4]
 800a9ea:	f000 f8b4 	bl	800ab56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	691b      	ldr	r3, [r3, #16]
 800a9fa:	f003 0310 	and.w	r3, r3, #16
 800a9fe:	2b10      	cmp	r3, #16
 800aa00:	d122      	bne.n	800aa48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	68db      	ldr	r3, [r3, #12]
 800aa08:	f003 0310 	and.w	r3, r3, #16
 800aa0c:	2b10      	cmp	r3, #16
 800aa0e:	d11b      	bne.n	800aa48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	f06f 0210 	mvn.w	r2, #16
 800aa18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2208      	movs	r2, #8
 800aa1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	69db      	ldr	r3, [r3, #28]
 800aa26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d003      	beq.n	800aa36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f000 f887 	bl	800ab42 <HAL_TIM_IC_CaptureCallback>
 800aa34:	e005      	b.n	800aa42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa36:	6878      	ldr	r0, [r7, #4]
 800aa38:	f000 f879 	bl	800ab2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	f000 f88a 	bl	800ab56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2200      	movs	r2, #0
 800aa46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	691b      	ldr	r3, [r3, #16]
 800aa4e:	f003 0301 	and.w	r3, r3, #1
 800aa52:	2b01      	cmp	r3, #1
 800aa54:	d10e      	bne.n	800aa74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	68db      	ldr	r3, [r3, #12]
 800aa5c:	f003 0301 	and.w	r3, r3, #1
 800aa60:	2b01      	cmp	r3, #1
 800aa62:	d107      	bne.n	800aa74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	f06f 0201 	mvn.w	r2, #1
 800aa6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f7f9 f9f4 	bl	8003e5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	691b      	ldr	r3, [r3, #16]
 800aa7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa7e:	2b80      	cmp	r3, #128	; 0x80
 800aa80:	d10e      	bne.n	800aaa0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	68db      	ldr	r3, [r3, #12]
 800aa88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa8c:	2b80      	cmp	r3, #128	; 0x80
 800aa8e:	d107      	bne.n	800aaa0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800aa98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f000 f91a 	bl	800acd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	691b      	ldr	r3, [r3, #16]
 800aaa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aaaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aaae:	d10e      	bne.n	800aace <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	68db      	ldr	r3, [r3, #12]
 800aab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aaba:	2b80      	cmp	r3, #128	; 0x80
 800aabc:	d107      	bne.n	800aace <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800aac6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f000 f90d 	bl	800ace8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	691b      	ldr	r3, [r3, #16]
 800aad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aad8:	2b40      	cmp	r3, #64	; 0x40
 800aada:	d10e      	bne.n	800aafa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	68db      	ldr	r3, [r3, #12]
 800aae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aae6:	2b40      	cmp	r3, #64	; 0x40
 800aae8:	d107      	bne.n	800aafa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800aaf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aaf4:	6878      	ldr	r0, [r7, #4]
 800aaf6:	f000 f838 	bl	800ab6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	691b      	ldr	r3, [r3, #16]
 800ab00:	f003 0320 	and.w	r3, r3, #32
 800ab04:	2b20      	cmp	r3, #32
 800ab06:	d10e      	bne.n	800ab26 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	68db      	ldr	r3, [r3, #12]
 800ab0e:	f003 0320 	and.w	r3, r3, #32
 800ab12:	2b20      	cmp	r3, #32
 800ab14:	d107      	bne.n	800ab26 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	f06f 0220 	mvn.w	r2, #32
 800ab1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	f000 f8cd 	bl	800acc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ab26:	bf00      	nop
 800ab28:	3708      	adds	r7, #8
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	bd80      	pop	{r7, pc}

0800ab2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ab2e:	b480      	push	{r7}
 800ab30:	b083      	sub	sp, #12
 800ab32:	af00      	add	r7, sp, #0
 800ab34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ab36:	bf00      	nop
 800ab38:	370c      	adds	r7, #12
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab40:	4770      	bx	lr

0800ab42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ab42:	b480      	push	{r7}
 800ab44:	b083      	sub	sp, #12
 800ab46:	af00      	add	r7, sp, #0
 800ab48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ab4a:	bf00      	nop
 800ab4c:	370c      	adds	r7, #12
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab54:	4770      	bx	lr

0800ab56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ab56:	b480      	push	{r7}
 800ab58:	b083      	sub	sp, #12
 800ab5a:	af00      	add	r7, sp, #0
 800ab5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ab5e:	bf00      	nop
 800ab60:	370c      	adds	r7, #12
 800ab62:	46bd      	mov	sp, r7
 800ab64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab68:	4770      	bx	lr

0800ab6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ab6a:	b480      	push	{r7}
 800ab6c:	b083      	sub	sp, #12
 800ab6e:	af00      	add	r7, sp, #0
 800ab70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ab72:	bf00      	nop
 800ab74:	370c      	adds	r7, #12
 800ab76:	46bd      	mov	sp, r7
 800ab78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7c:	4770      	bx	lr
	...

0800ab80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ab80:	b480      	push	{r7}
 800ab82:	b085      	sub	sp, #20
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
 800ab88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	4a40      	ldr	r2, [pc, #256]	; (800ac94 <TIM_Base_SetConfig+0x114>)
 800ab94:	4293      	cmp	r3, r2
 800ab96:	d013      	beq.n	800abc0 <TIM_Base_SetConfig+0x40>
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab9e:	d00f      	beq.n	800abc0 <TIM_Base_SetConfig+0x40>
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	4a3d      	ldr	r2, [pc, #244]	; (800ac98 <TIM_Base_SetConfig+0x118>)
 800aba4:	4293      	cmp	r3, r2
 800aba6:	d00b      	beq.n	800abc0 <TIM_Base_SetConfig+0x40>
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	4a3c      	ldr	r2, [pc, #240]	; (800ac9c <TIM_Base_SetConfig+0x11c>)
 800abac:	4293      	cmp	r3, r2
 800abae:	d007      	beq.n	800abc0 <TIM_Base_SetConfig+0x40>
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	4a3b      	ldr	r2, [pc, #236]	; (800aca0 <TIM_Base_SetConfig+0x120>)
 800abb4:	4293      	cmp	r3, r2
 800abb6:	d003      	beq.n	800abc0 <TIM_Base_SetConfig+0x40>
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	4a3a      	ldr	r2, [pc, #232]	; (800aca4 <TIM_Base_SetConfig+0x124>)
 800abbc:	4293      	cmp	r3, r2
 800abbe:	d108      	bne.n	800abd2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	685b      	ldr	r3, [r3, #4]
 800abcc:	68fa      	ldr	r2, [r7, #12]
 800abce:	4313      	orrs	r3, r2
 800abd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	4a2f      	ldr	r2, [pc, #188]	; (800ac94 <TIM_Base_SetConfig+0x114>)
 800abd6:	4293      	cmp	r3, r2
 800abd8:	d02b      	beq.n	800ac32 <TIM_Base_SetConfig+0xb2>
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abe0:	d027      	beq.n	800ac32 <TIM_Base_SetConfig+0xb2>
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	4a2c      	ldr	r2, [pc, #176]	; (800ac98 <TIM_Base_SetConfig+0x118>)
 800abe6:	4293      	cmp	r3, r2
 800abe8:	d023      	beq.n	800ac32 <TIM_Base_SetConfig+0xb2>
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	4a2b      	ldr	r2, [pc, #172]	; (800ac9c <TIM_Base_SetConfig+0x11c>)
 800abee:	4293      	cmp	r3, r2
 800abf0:	d01f      	beq.n	800ac32 <TIM_Base_SetConfig+0xb2>
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	4a2a      	ldr	r2, [pc, #168]	; (800aca0 <TIM_Base_SetConfig+0x120>)
 800abf6:	4293      	cmp	r3, r2
 800abf8:	d01b      	beq.n	800ac32 <TIM_Base_SetConfig+0xb2>
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	4a29      	ldr	r2, [pc, #164]	; (800aca4 <TIM_Base_SetConfig+0x124>)
 800abfe:	4293      	cmp	r3, r2
 800ac00:	d017      	beq.n	800ac32 <TIM_Base_SetConfig+0xb2>
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	4a28      	ldr	r2, [pc, #160]	; (800aca8 <TIM_Base_SetConfig+0x128>)
 800ac06:	4293      	cmp	r3, r2
 800ac08:	d013      	beq.n	800ac32 <TIM_Base_SetConfig+0xb2>
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	4a27      	ldr	r2, [pc, #156]	; (800acac <TIM_Base_SetConfig+0x12c>)
 800ac0e:	4293      	cmp	r3, r2
 800ac10:	d00f      	beq.n	800ac32 <TIM_Base_SetConfig+0xb2>
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	4a26      	ldr	r2, [pc, #152]	; (800acb0 <TIM_Base_SetConfig+0x130>)
 800ac16:	4293      	cmp	r3, r2
 800ac18:	d00b      	beq.n	800ac32 <TIM_Base_SetConfig+0xb2>
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	4a25      	ldr	r2, [pc, #148]	; (800acb4 <TIM_Base_SetConfig+0x134>)
 800ac1e:	4293      	cmp	r3, r2
 800ac20:	d007      	beq.n	800ac32 <TIM_Base_SetConfig+0xb2>
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	4a24      	ldr	r2, [pc, #144]	; (800acb8 <TIM_Base_SetConfig+0x138>)
 800ac26:	4293      	cmp	r3, r2
 800ac28:	d003      	beq.n	800ac32 <TIM_Base_SetConfig+0xb2>
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	4a23      	ldr	r2, [pc, #140]	; (800acbc <TIM_Base_SetConfig+0x13c>)
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	d108      	bne.n	800ac44 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	68db      	ldr	r3, [r3, #12]
 800ac3e:	68fa      	ldr	r2, [r7, #12]
 800ac40:	4313      	orrs	r3, r2
 800ac42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	695b      	ldr	r3, [r3, #20]
 800ac4e:	4313      	orrs	r3, r2
 800ac50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	68fa      	ldr	r2, [r7, #12]
 800ac56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	689a      	ldr	r2, [r3, #8]
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	681a      	ldr	r2, [r3, #0]
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	4a0a      	ldr	r2, [pc, #40]	; (800ac94 <TIM_Base_SetConfig+0x114>)
 800ac6c:	4293      	cmp	r3, r2
 800ac6e:	d003      	beq.n	800ac78 <TIM_Base_SetConfig+0xf8>
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	4a0c      	ldr	r2, [pc, #48]	; (800aca4 <TIM_Base_SetConfig+0x124>)
 800ac74:	4293      	cmp	r3, r2
 800ac76:	d103      	bne.n	800ac80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	691a      	ldr	r2, [r3, #16]
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2201      	movs	r2, #1
 800ac84:	615a      	str	r2, [r3, #20]
}
 800ac86:	bf00      	nop
 800ac88:	3714      	adds	r7, #20
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac90:	4770      	bx	lr
 800ac92:	bf00      	nop
 800ac94:	40010000 	.word	0x40010000
 800ac98:	40000400 	.word	0x40000400
 800ac9c:	40000800 	.word	0x40000800
 800aca0:	40000c00 	.word	0x40000c00
 800aca4:	40010400 	.word	0x40010400
 800aca8:	40014000 	.word	0x40014000
 800acac:	40014400 	.word	0x40014400
 800acb0:	40014800 	.word	0x40014800
 800acb4:	40001800 	.word	0x40001800
 800acb8:	40001c00 	.word	0x40001c00
 800acbc:	40002000 	.word	0x40002000

0800acc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800acc0:	b480      	push	{r7}
 800acc2:	b083      	sub	sp, #12
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800acc8:	bf00      	nop
 800acca:	370c      	adds	r7, #12
 800accc:	46bd      	mov	sp, r7
 800acce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd2:	4770      	bx	lr

0800acd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800acd4:	b480      	push	{r7}
 800acd6:	b083      	sub	sp, #12
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800acdc:	bf00      	nop
 800acde:	370c      	adds	r7, #12
 800ace0:	46bd      	mov	sp, r7
 800ace2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace6:	4770      	bx	lr

0800ace8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ace8:	b480      	push	{r7}
 800acea:	b083      	sub	sp, #12
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800acf0:	bf00      	nop
 800acf2:	370c      	adds	r7, #12
 800acf4:	46bd      	mov	sp, r7
 800acf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfa:	4770      	bx	lr

0800acfc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b082      	sub	sp, #8
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d101      	bne.n	800ad0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	e040      	b.n	800ad90 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d106      	bne.n	800ad24 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	2200      	movs	r2, #0
 800ad1a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f7f9 fab4 	bl	800428c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2224      	movs	r2, #36	; 0x24
 800ad28:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	681a      	ldr	r2, [r3, #0]
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	f022 0201 	bic.w	r2, r2, #1
 800ad38:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f000 fad0 	bl	800b2e0 <UART_SetConfig>
 800ad40:	4603      	mov	r3, r0
 800ad42:	2b01      	cmp	r3, #1
 800ad44:	d101      	bne.n	800ad4a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800ad46:	2301      	movs	r3, #1
 800ad48:	e022      	b.n	800ad90 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d002      	beq.n	800ad58 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f000 fd6e 	bl	800b834 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	685a      	ldr	r2, [r3, #4]
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ad66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	689a      	ldr	r2, [r3, #8]
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ad76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	681a      	ldr	r2, [r3, #0]
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	f042 0201 	orr.w	r2, r2, #1
 800ad86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ad88:	6878      	ldr	r0, [r7, #4]
 800ad8a:	f000 fdf5 	bl	800b978 <UART_CheckIdleState>
 800ad8e:	4603      	mov	r3, r0
}
 800ad90:	4618      	mov	r0, r3
 800ad92:	3708      	adds	r7, #8
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd80      	pop	{r7, pc}

0800ad98 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b08a      	sub	sp, #40	; 0x28
 800ad9c:	af02      	add	r7, sp, #8
 800ad9e:	60f8      	str	r0, [r7, #12]
 800ada0:	60b9      	str	r1, [r7, #8]
 800ada2:	603b      	str	r3, [r7, #0]
 800ada4:	4613      	mov	r3, r2
 800ada6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800adac:	2b20      	cmp	r3, #32
 800adae:	d17f      	bne.n	800aeb0 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d002      	beq.n	800adbc <HAL_UART_Transmit+0x24>
 800adb6:	88fb      	ldrh	r3, [r7, #6]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d101      	bne.n	800adc0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800adbc:	2301      	movs	r3, #1
 800adbe:	e078      	b.n	800aeb2 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800adc6:	2b01      	cmp	r3, #1
 800adc8:	d101      	bne.n	800adce <HAL_UART_Transmit+0x36>
 800adca:	2302      	movs	r3, #2
 800adcc:	e071      	b.n	800aeb2 <HAL_UART_Transmit+0x11a>
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	2201      	movs	r2, #1
 800add2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	2200      	movs	r2, #0
 800adda:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	2221      	movs	r2, #33	; 0x21
 800ade0:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800ade2:	f7fa fb09 	bl	80053f8 <HAL_GetTick>
 800ade6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	88fa      	ldrh	r2, [r7, #6]
 800adec:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	88fa      	ldrh	r2, [r7, #6]
 800adf4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	689b      	ldr	r3, [r3, #8]
 800adfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae00:	d108      	bne.n	800ae14 <HAL_UART_Transmit+0x7c>
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	691b      	ldr	r3, [r3, #16]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d104      	bne.n	800ae14 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ae0e:	68bb      	ldr	r3, [r7, #8]
 800ae10:	61bb      	str	r3, [r7, #24]
 800ae12:	e003      	b.n	800ae1c <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800ae14:	68bb      	ldr	r3, [r7, #8]
 800ae16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ae18:	2300      	movs	r3, #0
 800ae1a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	2200      	movs	r2, #0
 800ae20:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800ae24:	e02c      	b.n	800ae80 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	9300      	str	r3, [sp, #0]
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	2180      	movs	r1, #128	; 0x80
 800ae30:	68f8      	ldr	r0, [r7, #12]
 800ae32:	f000 fdd0 	bl	800b9d6 <UART_WaitOnFlagUntilTimeout>
 800ae36:	4603      	mov	r3, r0
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d001      	beq.n	800ae40 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800ae3c:	2303      	movs	r3, #3
 800ae3e:	e038      	b.n	800aeb2 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800ae40:	69fb      	ldr	r3, [r7, #28]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d10b      	bne.n	800ae5e <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ae46:	69bb      	ldr	r3, [r7, #24]
 800ae48:	881b      	ldrh	r3, [r3, #0]
 800ae4a:	461a      	mov	r2, r3
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ae54:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ae56:	69bb      	ldr	r3, [r7, #24]
 800ae58:	3302      	adds	r3, #2
 800ae5a:	61bb      	str	r3, [r7, #24]
 800ae5c:	e007      	b.n	800ae6e <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ae5e:	69fb      	ldr	r3, [r7, #28]
 800ae60:	781a      	ldrb	r2, [r3, #0]
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ae68:	69fb      	ldr	r3, [r7, #28]
 800ae6a:	3301      	adds	r3, #1
 800ae6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ae74:	b29b      	uxth	r3, r3
 800ae76:	3b01      	subs	r3, #1
 800ae78:	b29a      	uxth	r2, r3
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ae86:	b29b      	uxth	r3, r3
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d1cc      	bne.n	800ae26 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	9300      	str	r3, [sp, #0]
 800ae90:	697b      	ldr	r3, [r7, #20]
 800ae92:	2200      	movs	r2, #0
 800ae94:	2140      	movs	r1, #64	; 0x40
 800ae96:	68f8      	ldr	r0, [r7, #12]
 800ae98:	f000 fd9d 	bl	800b9d6 <UART_WaitOnFlagUntilTimeout>
 800ae9c:	4603      	mov	r3, r0
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d001      	beq.n	800aea6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800aea2:	2303      	movs	r3, #3
 800aea4:	e005      	b.n	800aeb2 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	2220      	movs	r2, #32
 800aeaa:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800aeac:	2300      	movs	r3, #0
 800aeae:	e000      	b.n	800aeb2 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800aeb0:	2302      	movs	r3, #2
  }
}
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	3720      	adds	r7, #32
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	bd80      	pop	{r7, pc}

0800aeba <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aeba:	b580      	push	{r7, lr}
 800aebc:	b08a      	sub	sp, #40	; 0x28
 800aebe:	af02      	add	r7, sp, #8
 800aec0:	60f8      	str	r0, [r7, #12]
 800aec2:	60b9      	str	r1, [r7, #8]
 800aec4:	603b      	str	r3, [r7, #0]
 800aec6:	4613      	mov	r3, r2
 800aec8:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aece:	2b20      	cmp	r3, #32
 800aed0:	f040 80ba 	bne.w	800b048 <HAL_UART_Receive+0x18e>
  {
    if ((pData == NULL) || (Size == 0U))
 800aed4:	68bb      	ldr	r3, [r7, #8]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d002      	beq.n	800aee0 <HAL_UART_Receive+0x26>
 800aeda:	88fb      	ldrh	r3, [r7, #6]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d101      	bne.n	800aee4 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800aee0:	2301      	movs	r3, #1
 800aee2:	e0b2      	b.n	800b04a <HAL_UART_Receive+0x190>
    }

    __HAL_LOCK(huart);
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800aeea:	2b01      	cmp	r3, #1
 800aeec:	d101      	bne.n	800aef2 <HAL_UART_Receive+0x38>
 800aeee:	2302      	movs	r3, #2
 800aef0:	e0ab      	b.n	800b04a <HAL_UART_Receive+0x190>
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	2201      	movs	r2, #1
 800aef6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	2200      	movs	r2, #0
 800aefe:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	2222      	movs	r2, #34	; 0x22
 800af04:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800af06:	f7fa fa77 	bl	80053f8 <HAL_GetTick>
 800af0a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	88fa      	ldrh	r2, [r7, #6]
 800af10:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	88fa      	ldrh	r2, [r7, #6]
 800af18:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	689b      	ldr	r3, [r3, #8]
 800af20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af24:	d10e      	bne.n	800af44 <HAL_UART_Receive+0x8a>
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	691b      	ldr	r3, [r3, #16]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d105      	bne.n	800af3a <HAL_UART_Receive+0x80>
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	f240 12ff 	movw	r2, #511	; 0x1ff
 800af34:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800af38:	e02d      	b.n	800af96 <HAL_UART_Receive+0xdc>
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	22ff      	movs	r2, #255	; 0xff
 800af3e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800af42:	e028      	b.n	800af96 <HAL_UART_Receive+0xdc>
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	689b      	ldr	r3, [r3, #8]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d10d      	bne.n	800af68 <HAL_UART_Receive+0xae>
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	691b      	ldr	r3, [r3, #16]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d104      	bne.n	800af5e <HAL_UART_Receive+0xa4>
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	22ff      	movs	r2, #255	; 0xff
 800af58:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800af5c:	e01b      	b.n	800af96 <HAL_UART_Receive+0xdc>
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	227f      	movs	r2, #127	; 0x7f
 800af62:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800af66:	e016      	b.n	800af96 <HAL_UART_Receive+0xdc>
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	689b      	ldr	r3, [r3, #8]
 800af6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800af70:	d10d      	bne.n	800af8e <HAL_UART_Receive+0xd4>
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	691b      	ldr	r3, [r3, #16]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d104      	bne.n	800af84 <HAL_UART_Receive+0xca>
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	227f      	movs	r2, #127	; 0x7f
 800af7e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800af82:	e008      	b.n	800af96 <HAL_UART_Receive+0xdc>
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	223f      	movs	r2, #63	; 0x3f
 800af88:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800af8c:	e003      	b.n	800af96 <HAL_UART_Receive+0xdc>
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	2200      	movs	r2, #0
 800af92:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800af9c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	689b      	ldr	r3, [r3, #8]
 800afa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800afa6:	d108      	bne.n	800afba <HAL_UART_Receive+0x100>
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	691b      	ldr	r3, [r3, #16]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d104      	bne.n	800afba <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 800afb0:	2300      	movs	r3, #0
 800afb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800afb4:	68bb      	ldr	r3, [r7, #8]
 800afb6:	61bb      	str	r3, [r7, #24]
 800afb8:	e003      	b.n	800afc2 <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 800afba:	68bb      	ldr	r3, [r7, #8]
 800afbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800afbe:	2300      	movs	r3, #0
 800afc0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	2200      	movs	r2, #0
 800afc6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800afca:	e032      	b.n	800b032 <HAL_UART_Receive+0x178>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	9300      	str	r3, [sp, #0]
 800afd0:	697b      	ldr	r3, [r7, #20]
 800afd2:	2200      	movs	r2, #0
 800afd4:	2120      	movs	r1, #32
 800afd6:	68f8      	ldr	r0, [r7, #12]
 800afd8:	f000 fcfd 	bl	800b9d6 <UART_WaitOnFlagUntilTimeout>
 800afdc:	4603      	mov	r3, r0
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d001      	beq.n	800afe6 <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 800afe2:	2303      	movs	r3, #3
 800afe4:	e031      	b.n	800b04a <HAL_UART_Receive+0x190>
      }
      if (pdata8bits == NULL)
 800afe6:	69fb      	ldr	r3, [r7, #28]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d10c      	bne.n	800b006 <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aff2:	b29a      	uxth	r2, r3
 800aff4:	8a7b      	ldrh	r3, [r7, #18]
 800aff6:	4013      	ands	r3, r2
 800aff8:	b29a      	uxth	r2, r3
 800affa:	69bb      	ldr	r3, [r7, #24]
 800affc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800affe:	69bb      	ldr	r3, [r7, #24]
 800b000:	3302      	adds	r3, #2
 800b002:	61bb      	str	r3, [r7, #24]
 800b004:	e00c      	b.n	800b020 <HAL_UART_Receive+0x166>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b00c:	b2da      	uxtb	r2, r3
 800b00e:	8a7b      	ldrh	r3, [r7, #18]
 800b010:	b2db      	uxtb	r3, r3
 800b012:	4013      	ands	r3, r2
 800b014:	b2da      	uxtb	r2, r3
 800b016:	69fb      	ldr	r3, [r7, #28]
 800b018:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800b01a:	69fb      	ldr	r3, [r7, #28]
 800b01c:	3301      	adds	r3, #1
 800b01e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b026:	b29b      	uxth	r3, r3
 800b028:	3b01      	subs	r3, #1
 800b02a:	b29a      	uxth	r2, r3
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b038:	b29b      	uxth	r3, r3
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d1c6      	bne.n	800afcc <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	2220      	movs	r2, #32
 800b042:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800b044:	2300      	movs	r3, #0
 800b046:	e000      	b.n	800b04a <HAL_UART_Receive+0x190>
  }
  else
  {
    return HAL_BUSY;
 800b048:	2302      	movs	r3, #2
  }
}
 800b04a:	4618      	mov	r0, r3
 800b04c:	3720      	adds	r7, #32
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}
	...

0800b054 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b088      	sub	sp, #32
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	69db      	ldr	r3, [r3, #28]
 800b062:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	689b      	ldr	r3, [r3, #8]
 800b072:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b074:	69fa      	ldr	r2, [r7, #28]
 800b076:	f640 030f 	movw	r3, #2063	; 0x80f
 800b07a:	4013      	ands	r3, r2
 800b07c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800b07e:	693b      	ldr	r3, [r7, #16]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d113      	bne.n	800b0ac <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800b084:	69fb      	ldr	r3, [r7, #28]
 800b086:	f003 0320 	and.w	r3, r3, #32
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d00e      	beq.n	800b0ac <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b08e:	69bb      	ldr	r3, [r7, #24]
 800b090:	f003 0320 	and.w	r3, r3, #32
 800b094:	2b00      	cmp	r3, #0
 800b096:	d009      	beq.n	800b0ac <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	f000 8100 	beq.w	800b2a2 <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	4798      	blx	r3
      }
      return;
 800b0aa:	e0fa      	b.n	800b2a2 <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b0ac:	693b      	ldr	r3, [r7, #16]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	f000 80d5 	beq.w	800b25e <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800b0b4:	697b      	ldr	r3, [r7, #20]
 800b0b6:	f003 0301 	and.w	r3, r3, #1
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d105      	bne.n	800b0ca <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800b0be:	69bb      	ldr	r3, [r7, #24]
 800b0c0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	f000 80ca 	beq.w	800b25e <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b0ca:	69fb      	ldr	r3, [r7, #28]
 800b0cc:	f003 0301 	and.w	r3, r3, #1
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d00e      	beq.n	800b0f2 <HAL_UART_IRQHandler+0x9e>
 800b0d4:	69bb      	ldr	r3, [r7, #24]
 800b0d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d009      	beq.n	800b0f2 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	2201      	movs	r2, #1
 800b0e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b0ea:	f043 0201 	orr.w	r2, r3, #1
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b0f2:	69fb      	ldr	r3, [r7, #28]
 800b0f4:	f003 0302 	and.w	r3, r3, #2
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d00e      	beq.n	800b11a <HAL_UART_IRQHandler+0xc6>
 800b0fc:	697b      	ldr	r3, [r7, #20]
 800b0fe:	f003 0301 	and.w	r3, r3, #1
 800b102:	2b00      	cmp	r3, #0
 800b104:	d009      	beq.n	800b11a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	2202      	movs	r2, #2
 800b10c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b112:	f043 0204 	orr.w	r2, r3, #4
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b11a:	69fb      	ldr	r3, [r7, #28]
 800b11c:	f003 0304 	and.w	r3, r3, #4
 800b120:	2b00      	cmp	r3, #0
 800b122:	d00e      	beq.n	800b142 <HAL_UART_IRQHandler+0xee>
 800b124:	697b      	ldr	r3, [r7, #20]
 800b126:	f003 0301 	and.w	r3, r3, #1
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d009      	beq.n	800b142 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	2204      	movs	r2, #4
 800b134:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b13a:	f043 0202 	orr.w	r2, r3, #2
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b142:	69fb      	ldr	r3, [r7, #28]
 800b144:	f003 0308 	and.w	r3, r3, #8
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d013      	beq.n	800b174 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b14c:	69bb      	ldr	r3, [r7, #24]
 800b14e:	f003 0320 	and.w	r3, r3, #32
 800b152:	2b00      	cmp	r3, #0
 800b154:	d104      	bne.n	800b160 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800b156:	697b      	ldr	r3, [r7, #20]
 800b158:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d009      	beq.n	800b174 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	2208      	movs	r2, #8
 800b166:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b16c:	f043 0208 	orr.w	r2, r3, #8
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b174:	69fb      	ldr	r3, [r7, #28]
 800b176:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d00f      	beq.n	800b19e <HAL_UART_IRQHandler+0x14a>
 800b17e:	69bb      	ldr	r3, [r7, #24]
 800b180:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b184:	2b00      	cmp	r3, #0
 800b186:	d00a      	beq.n	800b19e <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b190:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b196:	f043 0220 	orr.w	r2, r3, #32
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d07f      	beq.n	800b2a6 <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800b1a6:	69fb      	ldr	r3, [r7, #28]
 800b1a8:	f003 0320 	and.w	r3, r3, #32
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d00c      	beq.n	800b1ca <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b1b0:	69bb      	ldr	r3, [r7, #24]
 800b1b2:	f003 0320 	and.w	r3, r3, #32
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d007      	beq.n	800b1ca <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d003      	beq.n	800b1ca <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b1c6:	6878      	ldr	r0, [r7, #4]
 800b1c8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b1ce:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	689b      	ldr	r3, [r3, #8]
 800b1d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1da:	2b40      	cmp	r3, #64	; 0x40
 800b1dc:	d004      	beq.n	800b1e8 <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d031      	beq.n	800b24c <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b1e8:	6878      	ldr	r0, [r7, #4]
 800b1ea:	f000 fc6f 	bl	800bacc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	689b      	ldr	r3, [r3, #8]
 800b1f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1f8:	2b40      	cmp	r3, #64	; 0x40
 800b1fa:	d123      	bne.n	800b244 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	689a      	ldr	r2, [r3, #8]
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b20a:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b210:	2b00      	cmp	r3, #0
 800b212:	d013      	beq.n	800b23c <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b218:	4a26      	ldr	r2, [pc, #152]	; (800b2b4 <HAL_UART_IRQHandler+0x260>)
 800b21a:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b220:	4618      	mov	r0, r3
 800b222:	f7fa fb07 	bl	8005834 <HAL_DMA_Abort_IT>
 800b226:	4603      	mov	r3, r0
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d016      	beq.n	800b25a <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b230:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b232:	687a      	ldr	r2, [r7, #4]
 800b234:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800b236:	4610      	mov	r0, r2
 800b238:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b23a:	e00e      	b.n	800b25a <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	f000 f845 	bl	800b2cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b242:	e00a      	b.n	800b25a <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b244:	6878      	ldr	r0, [r7, #4]
 800b246:	f000 f841 	bl	800b2cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b24a:	e006      	b.n	800b25a <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b24c:	6878      	ldr	r0, [r7, #4]
 800b24e:	f000 f83d 	bl	800b2cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	2200      	movs	r2, #0
 800b256:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800b258:	e025      	b.n	800b2a6 <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b25a:	bf00      	nop
    return;
 800b25c:	e023      	b.n	800b2a6 <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800b25e:	69fb      	ldr	r3, [r7, #28]
 800b260:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b264:	2b00      	cmp	r3, #0
 800b266:	d00d      	beq.n	800b284 <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800b268:	69bb      	ldr	r3, [r7, #24]
 800b26a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d008      	beq.n	800b284 <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b276:	2b00      	cmp	r3, #0
 800b278:	d017      	beq.n	800b2aa <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	4798      	blx	r3
    }
    return;
 800b282:	e012      	b.n	800b2aa <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b284:	69fb      	ldr	r3, [r7, #28]
 800b286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d00e      	beq.n	800b2ac <HAL_UART_IRQHandler+0x258>
 800b28e:	69bb      	ldr	r3, [r7, #24]
 800b290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b294:	2b00      	cmp	r3, #0
 800b296:	d009      	beq.n	800b2ac <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	f000 fc4d 	bl	800bb38 <UART_EndTransmit_IT>
    return;
 800b29e:	bf00      	nop
 800b2a0:	e004      	b.n	800b2ac <HAL_UART_IRQHandler+0x258>
      return;
 800b2a2:	bf00      	nop
 800b2a4:	e002      	b.n	800b2ac <HAL_UART_IRQHandler+0x258>
    return;
 800b2a6:	bf00      	nop
 800b2a8:	e000      	b.n	800b2ac <HAL_UART_IRQHandler+0x258>
    return;
 800b2aa:	bf00      	nop
  }

}
 800b2ac:	3720      	adds	r7, #32
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bd80      	pop	{r7, pc}
 800b2b2:	bf00      	nop
 800b2b4:	0800bb0d 	.word	0x0800bb0d

0800b2b8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b2b8:	b480      	push	{r7}
 800b2ba:	b083      	sub	sp, #12
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b2c0:	bf00      	nop
 800b2c2:	370c      	adds	r7, #12
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ca:	4770      	bx	lr

0800b2cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b2cc:	b480      	push	{r7}
 800b2ce:	b083      	sub	sp, #12
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b2d4:	bf00      	nop
 800b2d6:	370c      	adds	r7, #12
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2de:	4770      	bx	lr

0800b2e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b088      	sub	sp, #32
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	689a      	ldr	r2, [r3, #8]
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	691b      	ldr	r3, [r3, #16]
 800b2f8:	431a      	orrs	r2, r3
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	695b      	ldr	r3, [r3, #20]
 800b2fe:	431a      	orrs	r2, r3
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	69db      	ldr	r3, [r3, #28]
 800b304:	4313      	orrs	r3, r2
 800b306:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	681a      	ldr	r2, [r3, #0]
 800b30e:	4bb1      	ldr	r3, [pc, #708]	; (800b5d4 <UART_SetConfig+0x2f4>)
 800b310:	4013      	ands	r3, r2
 800b312:	687a      	ldr	r2, [r7, #4]
 800b314:	6812      	ldr	r2, [r2, #0]
 800b316:	6939      	ldr	r1, [r7, #16]
 800b318:	430b      	orrs	r3, r1
 800b31a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	685b      	ldr	r3, [r3, #4]
 800b322:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	68da      	ldr	r2, [r3, #12]
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	430a      	orrs	r2, r1
 800b330:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	699b      	ldr	r3, [r3, #24]
 800b336:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	6a1b      	ldr	r3, [r3, #32]
 800b33c:	693a      	ldr	r2, [r7, #16]
 800b33e:	4313      	orrs	r3, r2
 800b340:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	689b      	ldr	r3, [r3, #8]
 800b348:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	693a      	ldr	r2, [r7, #16]
 800b352:	430a      	orrs	r2, r1
 800b354:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	4a9f      	ldr	r2, [pc, #636]	; (800b5d8 <UART_SetConfig+0x2f8>)
 800b35c:	4293      	cmp	r3, r2
 800b35e:	d121      	bne.n	800b3a4 <UART_SetConfig+0xc4>
 800b360:	4b9e      	ldr	r3, [pc, #632]	; (800b5dc <UART_SetConfig+0x2fc>)
 800b362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b366:	f003 0303 	and.w	r3, r3, #3
 800b36a:	2b03      	cmp	r3, #3
 800b36c:	d816      	bhi.n	800b39c <UART_SetConfig+0xbc>
 800b36e:	a201      	add	r2, pc, #4	; (adr r2, 800b374 <UART_SetConfig+0x94>)
 800b370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b374:	0800b385 	.word	0x0800b385
 800b378:	0800b391 	.word	0x0800b391
 800b37c:	0800b38b 	.word	0x0800b38b
 800b380:	0800b397 	.word	0x0800b397
 800b384:	2301      	movs	r3, #1
 800b386:	77fb      	strb	r3, [r7, #31]
 800b388:	e151      	b.n	800b62e <UART_SetConfig+0x34e>
 800b38a:	2302      	movs	r3, #2
 800b38c:	77fb      	strb	r3, [r7, #31]
 800b38e:	e14e      	b.n	800b62e <UART_SetConfig+0x34e>
 800b390:	2304      	movs	r3, #4
 800b392:	77fb      	strb	r3, [r7, #31]
 800b394:	e14b      	b.n	800b62e <UART_SetConfig+0x34e>
 800b396:	2308      	movs	r3, #8
 800b398:	77fb      	strb	r3, [r7, #31]
 800b39a:	e148      	b.n	800b62e <UART_SetConfig+0x34e>
 800b39c:	2310      	movs	r3, #16
 800b39e:	77fb      	strb	r3, [r7, #31]
 800b3a0:	bf00      	nop
 800b3a2:	e144      	b.n	800b62e <UART_SetConfig+0x34e>
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	4a8d      	ldr	r2, [pc, #564]	; (800b5e0 <UART_SetConfig+0x300>)
 800b3aa:	4293      	cmp	r3, r2
 800b3ac:	d134      	bne.n	800b418 <UART_SetConfig+0x138>
 800b3ae:	4b8b      	ldr	r3, [pc, #556]	; (800b5dc <UART_SetConfig+0x2fc>)
 800b3b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3b4:	f003 030c 	and.w	r3, r3, #12
 800b3b8:	2b0c      	cmp	r3, #12
 800b3ba:	d829      	bhi.n	800b410 <UART_SetConfig+0x130>
 800b3bc:	a201      	add	r2, pc, #4	; (adr r2, 800b3c4 <UART_SetConfig+0xe4>)
 800b3be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3c2:	bf00      	nop
 800b3c4:	0800b3f9 	.word	0x0800b3f9
 800b3c8:	0800b411 	.word	0x0800b411
 800b3cc:	0800b411 	.word	0x0800b411
 800b3d0:	0800b411 	.word	0x0800b411
 800b3d4:	0800b405 	.word	0x0800b405
 800b3d8:	0800b411 	.word	0x0800b411
 800b3dc:	0800b411 	.word	0x0800b411
 800b3e0:	0800b411 	.word	0x0800b411
 800b3e4:	0800b3ff 	.word	0x0800b3ff
 800b3e8:	0800b411 	.word	0x0800b411
 800b3ec:	0800b411 	.word	0x0800b411
 800b3f0:	0800b411 	.word	0x0800b411
 800b3f4:	0800b40b 	.word	0x0800b40b
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	77fb      	strb	r3, [r7, #31]
 800b3fc:	e117      	b.n	800b62e <UART_SetConfig+0x34e>
 800b3fe:	2302      	movs	r3, #2
 800b400:	77fb      	strb	r3, [r7, #31]
 800b402:	e114      	b.n	800b62e <UART_SetConfig+0x34e>
 800b404:	2304      	movs	r3, #4
 800b406:	77fb      	strb	r3, [r7, #31]
 800b408:	e111      	b.n	800b62e <UART_SetConfig+0x34e>
 800b40a:	2308      	movs	r3, #8
 800b40c:	77fb      	strb	r3, [r7, #31]
 800b40e:	e10e      	b.n	800b62e <UART_SetConfig+0x34e>
 800b410:	2310      	movs	r3, #16
 800b412:	77fb      	strb	r3, [r7, #31]
 800b414:	bf00      	nop
 800b416:	e10a      	b.n	800b62e <UART_SetConfig+0x34e>
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	4a71      	ldr	r2, [pc, #452]	; (800b5e4 <UART_SetConfig+0x304>)
 800b41e:	4293      	cmp	r3, r2
 800b420:	d120      	bne.n	800b464 <UART_SetConfig+0x184>
 800b422:	4b6e      	ldr	r3, [pc, #440]	; (800b5dc <UART_SetConfig+0x2fc>)
 800b424:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b428:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b42c:	2b10      	cmp	r3, #16
 800b42e:	d00f      	beq.n	800b450 <UART_SetConfig+0x170>
 800b430:	2b10      	cmp	r3, #16
 800b432:	d802      	bhi.n	800b43a <UART_SetConfig+0x15a>
 800b434:	2b00      	cmp	r3, #0
 800b436:	d005      	beq.n	800b444 <UART_SetConfig+0x164>
 800b438:	e010      	b.n	800b45c <UART_SetConfig+0x17c>
 800b43a:	2b20      	cmp	r3, #32
 800b43c:	d005      	beq.n	800b44a <UART_SetConfig+0x16a>
 800b43e:	2b30      	cmp	r3, #48	; 0x30
 800b440:	d009      	beq.n	800b456 <UART_SetConfig+0x176>
 800b442:	e00b      	b.n	800b45c <UART_SetConfig+0x17c>
 800b444:	2300      	movs	r3, #0
 800b446:	77fb      	strb	r3, [r7, #31]
 800b448:	e0f1      	b.n	800b62e <UART_SetConfig+0x34e>
 800b44a:	2302      	movs	r3, #2
 800b44c:	77fb      	strb	r3, [r7, #31]
 800b44e:	e0ee      	b.n	800b62e <UART_SetConfig+0x34e>
 800b450:	2304      	movs	r3, #4
 800b452:	77fb      	strb	r3, [r7, #31]
 800b454:	e0eb      	b.n	800b62e <UART_SetConfig+0x34e>
 800b456:	2308      	movs	r3, #8
 800b458:	77fb      	strb	r3, [r7, #31]
 800b45a:	e0e8      	b.n	800b62e <UART_SetConfig+0x34e>
 800b45c:	2310      	movs	r3, #16
 800b45e:	77fb      	strb	r3, [r7, #31]
 800b460:	bf00      	nop
 800b462:	e0e4      	b.n	800b62e <UART_SetConfig+0x34e>
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	4a5f      	ldr	r2, [pc, #380]	; (800b5e8 <UART_SetConfig+0x308>)
 800b46a:	4293      	cmp	r3, r2
 800b46c:	d120      	bne.n	800b4b0 <UART_SetConfig+0x1d0>
 800b46e:	4b5b      	ldr	r3, [pc, #364]	; (800b5dc <UART_SetConfig+0x2fc>)
 800b470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b474:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b478:	2b40      	cmp	r3, #64	; 0x40
 800b47a:	d00f      	beq.n	800b49c <UART_SetConfig+0x1bc>
 800b47c:	2b40      	cmp	r3, #64	; 0x40
 800b47e:	d802      	bhi.n	800b486 <UART_SetConfig+0x1a6>
 800b480:	2b00      	cmp	r3, #0
 800b482:	d005      	beq.n	800b490 <UART_SetConfig+0x1b0>
 800b484:	e010      	b.n	800b4a8 <UART_SetConfig+0x1c8>
 800b486:	2b80      	cmp	r3, #128	; 0x80
 800b488:	d005      	beq.n	800b496 <UART_SetConfig+0x1b6>
 800b48a:	2bc0      	cmp	r3, #192	; 0xc0
 800b48c:	d009      	beq.n	800b4a2 <UART_SetConfig+0x1c2>
 800b48e:	e00b      	b.n	800b4a8 <UART_SetConfig+0x1c8>
 800b490:	2300      	movs	r3, #0
 800b492:	77fb      	strb	r3, [r7, #31]
 800b494:	e0cb      	b.n	800b62e <UART_SetConfig+0x34e>
 800b496:	2302      	movs	r3, #2
 800b498:	77fb      	strb	r3, [r7, #31]
 800b49a:	e0c8      	b.n	800b62e <UART_SetConfig+0x34e>
 800b49c:	2304      	movs	r3, #4
 800b49e:	77fb      	strb	r3, [r7, #31]
 800b4a0:	e0c5      	b.n	800b62e <UART_SetConfig+0x34e>
 800b4a2:	2308      	movs	r3, #8
 800b4a4:	77fb      	strb	r3, [r7, #31]
 800b4a6:	e0c2      	b.n	800b62e <UART_SetConfig+0x34e>
 800b4a8:	2310      	movs	r3, #16
 800b4aa:	77fb      	strb	r3, [r7, #31]
 800b4ac:	bf00      	nop
 800b4ae:	e0be      	b.n	800b62e <UART_SetConfig+0x34e>
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	4a4d      	ldr	r2, [pc, #308]	; (800b5ec <UART_SetConfig+0x30c>)
 800b4b6:	4293      	cmp	r3, r2
 800b4b8:	d124      	bne.n	800b504 <UART_SetConfig+0x224>
 800b4ba:	4b48      	ldr	r3, [pc, #288]	; (800b5dc <UART_SetConfig+0x2fc>)
 800b4bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b4c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4c8:	d012      	beq.n	800b4f0 <UART_SetConfig+0x210>
 800b4ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4ce:	d802      	bhi.n	800b4d6 <UART_SetConfig+0x1f6>
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d007      	beq.n	800b4e4 <UART_SetConfig+0x204>
 800b4d4:	e012      	b.n	800b4fc <UART_SetConfig+0x21c>
 800b4d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b4da:	d006      	beq.n	800b4ea <UART_SetConfig+0x20a>
 800b4dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b4e0:	d009      	beq.n	800b4f6 <UART_SetConfig+0x216>
 800b4e2:	e00b      	b.n	800b4fc <UART_SetConfig+0x21c>
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	77fb      	strb	r3, [r7, #31]
 800b4e8:	e0a1      	b.n	800b62e <UART_SetConfig+0x34e>
 800b4ea:	2302      	movs	r3, #2
 800b4ec:	77fb      	strb	r3, [r7, #31]
 800b4ee:	e09e      	b.n	800b62e <UART_SetConfig+0x34e>
 800b4f0:	2304      	movs	r3, #4
 800b4f2:	77fb      	strb	r3, [r7, #31]
 800b4f4:	e09b      	b.n	800b62e <UART_SetConfig+0x34e>
 800b4f6:	2308      	movs	r3, #8
 800b4f8:	77fb      	strb	r3, [r7, #31]
 800b4fa:	e098      	b.n	800b62e <UART_SetConfig+0x34e>
 800b4fc:	2310      	movs	r3, #16
 800b4fe:	77fb      	strb	r3, [r7, #31]
 800b500:	bf00      	nop
 800b502:	e094      	b.n	800b62e <UART_SetConfig+0x34e>
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	4a39      	ldr	r2, [pc, #228]	; (800b5f0 <UART_SetConfig+0x310>)
 800b50a:	4293      	cmp	r3, r2
 800b50c:	d124      	bne.n	800b558 <UART_SetConfig+0x278>
 800b50e:	4b33      	ldr	r3, [pc, #204]	; (800b5dc <UART_SetConfig+0x2fc>)
 800b510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b514:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b518:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b51c:	d012      	beq.n	800b544 <UART_SetConfig+0x264>
 800b51e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b522:	d802      	bhi.n	800b52a <UART_SetConfig+0x24a>
 800b524:	2b00      	cmp	r3, #0
 800b526:	d007      	beq.n	800b538 <UART_SetConfig+0x258>
 800b528:	e012      	b.n	800b550 <UART_SetConfig+0x270>
 800b52a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b52e:	d006      	beq.n	800b53e <UART_SetConfig+0x25e>
 800b530:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b534:	d009      	beq.n	800b54a <UART_SetConfig+0x26a>
 800b536:	e00b      	b.n	800b550 <UART_SetConfig+0x270>
 800b538:	2301      	movs	r3, #1
 800b53a:	77fb      	strb	r3, [r7, #31]
 800b53c:	e077      	b.n	800b62e <UART_SetConfig+0x34e>
 800b53e:	2302      	movs	r3, #2
 800b540:	77fb      	strb	r3, [r7, #31]
 800b542:	e074      	b.n	800b62e <UART_SetConfig+0x34e>
 800b544:	2304      	movs	r3, #4
 800b546:	77fb      	strb	r3, [r7, #31]
 800b548:	e071      	b.n	800b62e <UART_SetConfig+0x34e>
 800b54a:	2308      	movs	r3, #8
 800b54c:	77fb      	strb	r3, [r7, #31]
 800b54e:	e06e      	b.n	800b62e <UART_SetConfig+0x34e>
 800b550:	2310      	movs	r3, #16
 800b552:	77fb      	strb	r3, [r7, #31]
 800b554:	bf00      	nop
 800b556:	e06a      	b.n	800b62e <UART_SetConfig+0x34e>
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	4a25      	ldr	r2, [pc, #148]	; (800b5f4 <UART_SetConfig+0x314>)
 800b55e:	4293      	cmp	r3, r2
 800b560:	d124      	bne.n	800b5ac <UART_SetConfig+0x2cc>
 800b562:	4b1e      	ldr	r3, [pc, #120]	; (800b5dc <UART_SetConfig+0x2fc>)
 800b564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b568:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800b56c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b570:	d012      	beq.n	800b598 <UART_SetConfig+0x2b8>
 800b572:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b576:	d802      	bhi.n	800b57e <UART_SetConfig+0x29e>
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d007      	beq.n	800b58c <UART_SetConfig+0x2ac>
 800b57c:	e012      	b.n	800b5a4 <UART_SetConfig+0x2c4>
 800b57e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b582:	d006      	beq.n	800b592 <UART_SetConfig+0x2b2>
 800b584:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b588:	d009      	beq.n	800b59e <UART_SetConfig+0x2be>
 800b58a:	e00b      	b.n	800b5a4 <UART_SetConfig+0x2c4>
 800b58c:	2300      	movs	r3, #0
 800b58e:	77fb      	strb	r3, [r7, #31]
 800b590:	e04d      	b.n	800b62e <UART_SetConfig+0x34e>
 800b592:	2302      	movs	r3, #2
 800b594:	77fb      	strb	r3, [r7, #31]
 800b596:	e04a      	b.n	800b62e <UART_SetConfig+0x34e>
 800b598:	2304      	movs	r3, #4
 800b59a:	77fb      	strb	r3, [r7, #31]
 800b59c:	e047      	b.n	800b62e <UART_SetConfig+0x34e>
 800b59e:	2308      	movs	r3, #8
 800b5a0:	77fb      	strb	r3, [r7, #31]
 800b5a2:	e044      	b.n	800b62e <UART_SetConfig+0x34e>
 800b5a4:	2310      	movs	r3, #16
 800b5a6:	77fb      	strb	r3, [r7, #31]
 800b5a8:	bf00      	nop
 800b5aa:	e040      	b.n	800b62e <UART_SetConfig+0x34e>
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	4a11      	ldr	r2, [pc, #68]	; (800b5f8 <UART_SetConfig+0x318>)
 800b5b2:	4293      	cmp	r3, r2
 800b5b4:	d139      	bne.n	800b62a <UART_SetConfig+0x34a>
 800b5b6:	4b09      	ldr	r3, [pc, #36]	; (800b5dc <UART_SetConfig+0x2fc>)
 800b5b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b5c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b5c4:	d027      	beq.n	800b616 <UART_SetConfig+0x336>
 800b5c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b5ca:	d817      	bhi.n	800b5fc <UART_SetConfig+0x31c>
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d01c      	beq.n	800b60a <UART_SetConfig+0x32a>
 800b5d0:	e027      	b.n	800b622 <UART_SetConfig+0x342>
 800b5d2:	bf00      	nop
 800b5d4:	efff69f3 	.word	0xefff69f3
 800b5d8:	40011000 	.word	0x40011000
 800b5dc:	40023800 	.word	0x40023800
 800b5e0:	40004400 	.word	0x40004400
 800b5e4:	40004800 	.word	0x40004800
 800b5e8:	40004c00 	.word	0x40004c00
 800b5ec:	40005000 	.word	0x40005000
 800b5f0:	40011400 	.word	0x40011400
 800b5f4:	40007800 	.word	0x40007800
 800b5f8:	40007c00 	.word	0x40007c00
 800b5fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b600:	d006      	beq.n	800b610 <UART_SetConfig+0x330>
 800b602:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b606:	d009      	beq.n	800b61c <UART_SetConfig+0x33c>
 800b608:	e00b      	b.n	800b622 <UART_SetConfig+0x342>
 800b60a:	2300      	movs	r3, #0
 800b60c:	77fb      	strb	r3, [r7, #31]
 800b60e:	e00e      	b.n	800b62e <UART_SetConfig+0x34e>
 800b610:	2302      	movs	r3, #2
 800b612:	77fb      	strb	r3, [r7, #31]
 800b614:	e00b      	b.n	800b62e <UART_SetConfig+0x34e>
 800b616:	2304      	movs	r3, #4
 800b618:	77fb      	strb	r3, [r7, #31]
 800b61a:	e008      	b.n	800b62e <UART_SetConfig+0x34e>
 800b61c:	2308      	movs	r3, #8
 800b61e:	77fb      	strb	r3, [r7, #31]
 800b620:	e005      	b.n	800b62e <UART_SetConfig+0x34e>
 800b622:	2310      	movs	r3, #16
 800b624:	77fb      	strb	r3, [r7, #31]
 800b626:	bf00      	nop
 800b628:	e001      	b.n	800b62e <UART_SetConfig+0x34e>
 800b62a:	2310      	movs	r3, #16
 800b62c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	69db      	ldr	r3, [r3, #28]
 800b632:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b636:	d17f      	bne.n	800b738 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800b638:	7ffb      	ldrb	r3, [r7, #31]
 800b63a:	2b08      	cmp	r3, #8
 800b63c:	d85c      	bhi.n	800b6f8 <UART_SetConfig+0x418>
 800b63e:	a201      	add	r2, pc, #4	; (adr r2, 800b644 <UART_SetConfig+0x364>)
 800b640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b644:	0800b669 	.word	0x0800b669
 800b648:	0800b689 	.word	0x0800b689
 800b64c:	0800b6a9 	.word	0x0800b6a9
 800b650:	0800b6f9 	.word	0x0800b6f9
 800b654:	0800b6c1 	.word	0x0800b6c1
 800b658:	0800b6f9 	.word	0x0800b6f9
 800b65c:	0800b6f9 	.word	0x0800b6f9
 800b660:	0800b6f9 	.word	0x0800b6f9
 800b664:	0800b6e1 	.word	0x0800b6e1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b668:	f7fc fb8a 	bl	8007d80 <HAL_RCC_GetPCLK1Freq>
 800b66c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	005a      	lsls	r2, r3, #1
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	685b      	ldr	r3, [r3, #4]
 800b676:	085b      	lsrs	r3, r3, #1
 800b678:	441a      	add	r2, r3
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	685b      	ldr	r3, [r3, #4]
 800b67e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b682:	b29b      	uxth	r3, r3
 800b684:	61bb      	str	r3, [r7, #24]
        break;
 800b686:	e03a      	b.n	800b6fe <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b688:	f7fc fb8e 	bl	8007da8 <HAL_RCC_GetPCLK2Freq>
 800b68c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	005a      	lsls	r2, r3, #1
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	685b      	ldr	r3, [r3, #4]
 800b696:	085b      	lsrs	r3, r3, #1
 800b698:	441a      	add	r2, r3
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	685b      	ldr	r3, [r3, #4]
 800b69e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6a2:	b29b      	uxth	r3, r3
 800b6a4:	61bb      	str	r3, [r7, #24]
        break;
 800b6a6:	e02a      	b.n	800b6fe <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	685b      	ldr	r3, [r3, #4]
 800b6ac:	085a      	lsrs	r2, r3, #1
 800b6ae:	4b5f      	ldr	r3, [pc, #380]	; (800b82c <UART_SetConfig+0x54c>)
 800b6b0:	4413      	add	r3, r2
 800b6b2:	687a      	ldr	r2, [r7, #4]
 800b6b4:	6852      	ldr	r2, [r2, #4]
 800b6b6:	fbb3 f3f2 	udiv	r3, r3, r2
 800b6ba:	b29b      	uxth	r3, r3
 800b6bc:	61bb      	str	r3, [r7, #24]
        break;
 800b6be:	e01e      	b.n	800b6fe <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b6c0:	f7fc fa7a 	bl	8007bb8 <HAL_RCC_GetSysClockFreq>
 800b6c4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	005a      	lsls	r2, r3, #1
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	685b      	ldr	r3, [r3, #4]
 800b6ce:	085b      	lsrs	r3, r3, #1
 800b6d0:	441a      	add	r2, r3
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	685b      	ldr	r3, [r3, #4]
 800b6d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6da:	b29b      	uxth	r3, r3
 800b6dc:	61bb      	str	r3, [r7, #24]
        break;
 800b6de:	e00e      	b.n	800b6fe <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	685b      	ldr	r3, [r3, #4]
 800b6e4:	085b      	lsrs	r3, r3, #1
 800b6e6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	685b      	ldr	r3, [r3, #4]
 800b6ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6f2:	b29b      	uxth	r3, r3
 800b6f4:	61bb      	str	r3, [r7, #24]
        break;
 800b6f6:	e002      	b.n	800b6fe <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800b6f8:	2301      	movs	r3, #1
 800b6fa:	75fb      	strb	r3, [r7, #23]
        break;
 800b6fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b6fe:	69bb      	ldr	r3, [r7, #24]
 800b700:	2b0f      	cmp	r3, #15
 800b702:	d916      	bls.n	800b732 <UART_SetConfig+0x452>
 800b704:	69bb      	ldr	r3, [r7, #24]
 800b706:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b70a:	d212      	bcs.n	800b732 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b70c:	69bb      	ldr	r3, [r7, #24]
 800b70e:	b29b      	uxth	r3, r3
 800b710:	f023 030f 	bic.w	r3, r3, #15
 800b714:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b716:	69bb      	ldr	r3, [r7, #24]
 800b718:	085b      	lsrs	r3, r3, #1
 800b71a:	b29b      	uxth	r3, r3
 800b71c:	f003 0307 	and.w	r3, r3, #7
 800b720:	b29a      	uxth	r2, r3
 800b722:	897b      	ldrh	r3, [r7, #10]
 800b724:	4313      	orrs	r3, r2
 800b726:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	897a      	ldrh	r2, [r7, #10]
 800b72e:	60da      	str	r2, [r3, #12]
 800b730:	e070      	b.n	800b814 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800b732:	2301      	movs	r3, #1
 800b734:	75fb      	strb	r3, [r7, #23]
 800b736:	e06d      	b.n	800b814 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800b738:	7ffb      	ldrb	r3, [r7, #31]
 800b73a:	2b08      	cmp	r3, #8
 800b73c:	d859      	bhi.n	800b7f2 <UART_SetConfig+0x512>
 800b73e:	a201      	add	r2, pc, #4	; (adr r2, 800b744 <UART_SetConfig+0x464>)
 800b740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b744:	0800b769 	.word	0x0800b769
 800b748:	0800b787 	.word	0x0800b787
 800b74c:	0800b7a5 	.word	0x0800b7a5
 800b750:	0800b7f3 	.word	0x0800b7f3
 800b754:	0800b7bd 	.word	0x0800b7bd
 800b758:	0800b7f3 	.word	0x0800b7f3
 800b75c:	0800b7f3 	.word	0x0800b7f3
 800b760:	0800b7f3 	.word	0x0800b7f3
 800b764:	0800b7db 	.word	0x0800b7db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b768:	f7fc fb0a 	bl	8007d80 <HAL_RCC_GetPCLK1Freq>
 800b76c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	685b      	ldr	r3, [r3, #4]
 800b772:	085a      	lsrs	r2, r3, #1
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	441a      	add	r2, r3
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	685b      	ldr	r3, [r3, #4]
 800b77c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b780:	b29b      	uxth	r3, r3
 800b782:	61bb      	str	r3, [r7, #24]
        break;
 800b784:	e038      	b.n	800b7f8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b786:	f7fc fb0f 	bl	8007da8 <HAL_RCC_GetPCLK2Freq>
 800b78a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	685b      	ldr	r3, [r3, #4]
 800b790:	085a      	lsrs	r2, r3, #1
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	441a      	add	r2, r3
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	685b      	ldr	r3, [r3, #4]
 800b79a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b79e:	b29b      	uxth	r3, r3
 800b7a0:	61bb      	str	r3, [r7, #24]
        break;
 800b7a2:	e029      	b.n	800b7f8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	685b      	ldr	r3, [r3, #4]
 800b7a8:	085a      	lsrs	r2, r3, #1
 800b7aa:	4b21      	ldr	r3, [pc, #132]	; (800b830 <UART_SetConfig+0x550>)
 800b7ac:	4413      	add	r3, r2
 800b7ae:	687a      	ldr	r2, [r7, #4]
 800b7b0:	6852      	ldr	r2, [r2, #4]
 800b7b2:	fbb3 f3f2 	udiv	r3, r3, r2
 800b7b6:	b29b      	uxth	r3, r3
 800b7b8:	61bb      	str	r3, [r7, #24]
        break;
 800b7ba:	e01d      	b.n	800b7f8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b7bc:	f7fc f9fc 	bl	8007bb8 <HAL_RCC_GetSysClockFreq>
 800b7c0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	685b      	ldr	r3, [r3, #4]
 800b7c6:	085a      	lsrs	r2, r3, #1
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	441a      	add	r2, r3
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	685b      	ldr	r3, [r3, #4]
 800b7d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7d4:	b29b      	uxth	r3, r3
 800b7d6:	61bb      	str	r3, [r7, #24]
        break;
 800b7d8:	e00e      	b.n	800b7f8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	685b      	ldr	r3, [r3, #4]
 800b7de:	085b      	lsrs	r3, r3, #1
 800b7e0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	685b      	ldr	r3, [r3, #4]
 800b7e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7ec:	b29b      	uxth	r3, r3
 800b7ee:	61bb      	str	r3, [r7, #24]
        break;
 800b7f0:	e002      	b.n	800b7f8 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800b7f2:	2301      	movs	r3, #1
 800b7f4:	75fb      	strb	r3, [r7, #23]
        break;
 800b7f6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b7f8:	69bb      	ldr	r3, [r7, #24]
 800b7fa:	2b0f      	cmp	r3, #15
 800b7fc:	d908      	bls.n	800b810 <UART_SetConfig+0x530>
 800b7fe:	69bb      	ldr	r3, [r7, #24]
 800b800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b804:	d204      	bcs.n	800b810 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	69ba      	ldr	r2, [r7, #24]
 800b80c:	60da      	str	r2, [r3, #12]
 800b80e:	e001      	b.n	800b814 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800b810:	2301      	movs	r3, #1
 800b812:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2200      	movs	r2, #0
 800b818:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	2200      	movs	r2, #0
 800b81e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800b820:	7dfb      	ldrb	r3, [r7, #23]
}
 800b822:	4618      	mov	r0, r3
 800b824:	3720      	adds	r7, #32
 800b826:	46bd      	mov	sp, r7
 800b828:	bd80      	pop	{r7, pc}
 800b82a:	bf00      	nop
 800b82c:	01e84800 	.word	0x01e84800
 800b830:	00f42400 	.word	0x00f42400

0800b834 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b834:	b480      	push	{r7}
 800b836:	b083      	sub	sp, #12
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b840:	f003 0301 	and.w	r3, r3, #1
 800b844:	2b00      	cmp	r3, #0
 800b846:	d00a      	beq.n	800b85e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	685b      	ldr	r3, [r3, #4]
 800b84e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	430a      	orrs	r2, r1
 800b85c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b862:	f003 0302 	and.w	r3, r3, #2
 800b866:	2b00      	cmp	r3, #0
 800b868:	d00a      	beq.n	800b880 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	685b      	ldr	r3, [r3, #4]
 800b870:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	430a      	orrs	r2, r1
 800b87e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b884:	f003 0304 	and.w	r3, r3, #4
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d00a      	beq.n	800b8a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	685b      	ldr	r3, [r3, #4]
 800b892:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	430a      	orrs	r2, r1
 800b8a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8a6:	f003 0308 	and.w	r3, r3, #8
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d00a      	beq.n	800b8c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	685b      	ldr	r3, [r3, #4]
 800b8b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	430a      	orrs	r2, r1
 800b8c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8c8:	f003 0310 	and.w	r3, r3, #16
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d00a      	beq.n	800b8e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	689b      	ldr	r3, [r3, #8]
 800b8d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	430a      	orrs	r2, r1
 800b8e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ea:	f003 0320 	and.w	r3, r3, #32
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d00a      	beq.n	800b908 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	689b      	ldr	r3, [r3, #8]
 800b8f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	430a      	orrs	r2, r1
 800b906:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b90c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b910:	2b00      	cmp	r3, #0
 800b912:	d01a      	beq.n	800b94a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	685b      	ldr	r3, [r3, #4]
 800b91a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	430a      	orrs	r2, r1
 800b928:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b92e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b932:	d10a      	bne.n	800b94a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	685b      	ldr	r3, [r3, #4]
 800b93a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	430a      	orrs	r2, r1
 800b948:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b94e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b952:	2b00      	cmp	r3, #0
 800b954:	d00a      	beq.n	800b96c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	685b      	ldr	r3, [r3, #4]
 800b95c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	430a      	orrs	r2, r1
 800b96a:	605a      	str	r2, [r3, #4]
  }
}
 800b96c:	bf00      	nop
 800b96e:	370c      	adds	r7, #12
 800b970:	46bd      	mov	sp, r7
 800b972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b976:	4770      	bx	lr

0800b978 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b086      	sub	sp, #24
 800b97c:	af02      	add	r7, sp, #8
 800b97e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2200      	movs	r2, #0
 800b984:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800b986:	f7f9 fd37 	bl	80053f8 <HAL_GetTick>
 800b98a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	f003 0308 	and.w	r3, r3, #8
 800b996:	2b08      	cmp	r3, #8
 800b998:	d10e      	bne.n	800b9b8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b99a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b99e:	9300      	str	r3, [sp, #0]
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b9a8:	6878      	ldr	r0, [r7, #4]
 800b9aa:	f000 f814 	bl	800b9d6 <UART_WaitOnFlagUntilTimeout>
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d001      	beq.n	800b9b8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b9b4:	2303      	movs	r3, #3
 800b9b6:	e00a      	b.n	800b9ce <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2220      	movs	r2, #32
 800b9bc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	2220      	movs	r2, #32
 800b9c2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800b9cc:	2300      	movs	r3, #0
}
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	3710      	adds	r7, #16
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	bd80      	pop	{r7, pc}

0800b9d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b9d6:	b580      	push	{r7, lr}
 800b9d8:	b084      	sub	sp, #16
 800b9da:	af00      	add	r7, sp, #0
 800b9dc:	60f8      	str	r0, [r7, #12]
 800b9de:	60b9      	str	r1, [r7, #8]
 800b9e0:	603b      	str	r3, [r7, #0]
 800b9e2:	4613      	mov	r3, r2
 800b9e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b9e6:	e05d      	b.n	800baa4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b9e8:	69bb      	ldr	r3, [r7, #24]
 800b9ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9ee:	d059      	beq.n	800baa4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b9f0:	f7f9 fd02 	bl	80053f8 <HAL_GetTick>
 800b9f4:	4602      	mov	r2, r0
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	1ad3      	subs	r3, r2, r3
 800b9fa:	69ba      	ldr	r2, [r7, #24]
 800b9fc:	429a      	cmp	r2, r3
 800b9fe:	d302      	bcc.n	800ba06 <UART_WaitOnFlagUntilTimeout+0x30>
 800ba00:	69bb      	ldr	r3, [r7, #24]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d11b      	bne.n	800ba3e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	681a      	ldr	r2, [r3, #0]
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ba14:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	689a      	ldr	r2, [r3, #8]
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	f022 0201 	bic.w	r2, r2, #1
 800ba24:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	2220      	movs	r2, #32
 800ba2a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	2220      	movs	r2, #32
 800ba30:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	2200      	movs	r2, #0
 800ba36:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800ba3a:	2303      	movs	r3, #3
 800ba3c:	e042      	b.n	800bac4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	f003 0304 	and.w	r3, r3, #4
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d02b      	beq.n	800baa4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	69db      	ldr	r3, [r3, #28]
 800ba52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ba56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ba5a:	d123      	bne.n	800baa4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ba64:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	681a      	ldr	r2, [r3, #0]
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ba74:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	689a      	ldr	r2, [r3, #8]
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	f022 0201 	bic.w	r2, r2, #1
 800ba84:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	2220      	movs	r2, #32
 800ba8a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	2220      	movs	r2, #32
 800ba90:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	2220      	movs	r2, #32
 800ba96:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800baa0:	2303      	movs	r3, #3
 800baa2:	e00f      	b.n	800bac4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	69da      	ldr	r2, [r3, #28]
 800baaa:	68bb      	ldr	r3, [r7, #8]
 800baac:	4013      	ands	r3, r2
 800baae:	68ba      	ldr	r2, [r7, #8]
 800bab0:	429a      	cmp	r2, r3
 800bab2:	bf0c      	ite	eq
 800bab4:	2301      	moveq	r3, #1
 800bab6:	2300      	movne	r3, #0
 800bab8:	b2db      	uxtb	r3, r3
 800baba:	461a      	mov	r2, r3
 800babc:	79fb      	ldrb	r3, [r7, #7]
 800babe:	429a      	cmp	r2, r3
 800bac0:	d092      	beq.n	800b9e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bac2:	2300      	movs	r3, #0
}
 800bac4:	4618      	mov	r0, r3
 800bac6:	3710      	adds	r7, #16
 800bac8:	46bd      	mov	sp, r7
 800baca:	bd80      	pop	{r7, pc}

0800bacc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bacc:	b480      	push	{r7}
 800bace:	b083      	sub	sp, #12
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	681a      	ldr	r2, [r3, #0]
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800bae2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	689a      	ldr	r2, [r3, #8]
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	f022 0201 	bic.w	r2, r2, #1
 800baf2:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2220      	movs	r2, #32
 800baf8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2200      	movs	r2, #0
 800bafe:	661a      	str	r2, [r3, #96]	; 0x60
}
 800bb00:	bf00      	nop
 800bb02:	370c      	adds	r7, #12
 800bb04:	46bd      	mov	sp, r7
 800bb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0a:	4770      	bx	lr

0800bb0c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b084      	sub	sp, #16
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb18:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	2200      	movs	r2, #0
 800bb26:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bb2a:	68f8      	ldr	r0, [r7, #12]
 800bb2c:	f7ff fbce 	bl	800b2cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bb30:	bf00      	nop
 800bb32:	3710      	adds	r7, #16
 800bb34:	46bd      	mov	sp, r7
 800bb36:	bd80      	pop	{r7, pc}

0800bb38 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b082      	sub	sp, #8
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	681a      	ldr	r2, [r3, #0]
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bb4e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	2220      	movs	r2, #32
 800bb54:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	2200      	movs	r2, #0
 800bb5a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bb5c:	6878      	ldr	r0, [r7, #4]
 800bb5e:	f7ff fbab 	bl	800b2b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bb62:	bf00      	nop
 800bb64:	3708      	adds	r7, #8
 800bb66:	46bd      	mov	sp, r7
 800bb68:	bd80      	pop	{r7, pc}
	...

0800bb6c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800bb6c:	b084      	sub	sp, #16
 800bb6e:	b480      	push	{r7}
 800bb70:	b085      	sub	sp, #20
 800bb72:	af00      	add	r7, sp, #0
 800bb74:	6078      	str	r0, [r7, #4]
 800bb76:	f107 001c 	add.w	r0, r7, #28
 800bb7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800bb7e:	2300      	movs	r3, #0
 800bb80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800bb82:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800bb84:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800bb86:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800bb88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800bb8a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800bb8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800bb8e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800bb90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800bb92:	431a      	orrs	r2, r3
             Init.ClockDiv
 800bb94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800bb96:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800bb98:	68fa      	ldr	r2, [r7, #12]
 800bb9a:	4313      	orrs	r3, r2
 800bb9c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	685a      	ldr	r2, [r3, #4]
 800bba2:	4b07      	ldr	r3, [pc, #28]	; (800bbc0 <SDMMC_Init+0x54>)
 800bba4:	4013      	ands	r3, r2
 800bba6:	68fa      	ldr	r2, [r7, #12]
 800bba8:	431a      	orrs	r2, r3
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800bbae:	2300      	movs	r3, #0
}
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	3714      	adds	r7, #20
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbba:	b004      	add	sp, #16
 800bbbc:	4770      	bx	lr
 800bbbe:	bf00      	nop
 800bbc0:	ffff8100 	.word	0xffff8100

0800bbc4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800bbc4:	b480      	push	{r7}
 800bbc6:	b083      	sub	sp, #12
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	370c      	adds	r7, #12
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbdc:	4770      	bx	lr

0800bbde <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800bbde:	b480      	push	{r7}
 800bbe0:	b083      	sub	sp, #12
 800bbe2:	af00      	add	r7, sp, #0
 800bbe4:	6078      	str	r0, [r7, #4]
 800bbe6:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800bbe8:	683b      	ldr	r3, [r7, #0]
 800bbea:	681a      	ldr	r2, [r3, #0]
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bbf2:	2300      	movs	r3, #0
}
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	370c      	adds	r7, #12
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfe:	4770      	bx	lr

0800bc00 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b082      	sub	sp, #8
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2203      	movs	r2, #3
 800bc0c:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800bc0e:	2002      	movs	r0, #2
 800bc10:	f7f9 fbfe 	bl	8005410 <HAL_Delay>
  
  return HAL_OK;
 800bc14:	2300      	movs	r3, #0
}
 800bc16:	4618      	mov	r0, r3
 800bc18:	3708      	adds	r7, #8
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	bd80      	pop	{r7, pc}

0800bc1e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800bc1e:	b480      	push	{r7}
 800bc20:	b083      	sub	sp, #12
 800bc22:	af00      	add	r7, sp, #0
 800bc24:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	f003 0303 	and.w	r3, r3, #3
}
 800bc2e:	4618      	mov	r0, r3
 800bc30:	370c      	adds	r7, #12
 800bc32:	46bd      	mov	sp, r7
 800bc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc38:	4770      	bx	lr
	...

0800bc3c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800bc3c:	b480      	push	{r7}
 800bc3e:	b085      	sub	sp, #20
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
 800bc44:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800bc46:	2300      	movs	r3, #0
 800bc48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	681a      	ldr	r2, [r3, #0]
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bc5a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800bc5c:	683b      	ldr	r3, [r7, #0]
 800bc5e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800bc60:	431a      	orrs	r2, r3
                       Command->CPSM);
 800bc62:	683b      	ldr	r3, [r7, #0]
 800bc64:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800bc66:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bc68:	68fa      	ldr	r2, [r7, #12]
 800bc6a:	4313      	orrs	r3, r2
 800bc6c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	68da      	ldr	r2, [r3, #12]
 800bc72:	4b06      	ldr	r3, [pc, #24]	; (800bc8c <SDMMC_SendCommand+0x50>)
 800bc74:	4013      	ands	r3, r2
 800bc76:	68fa      	ldr	r2, [r7, #12]
 800bc78:	431a      	orrs	r2, r3
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800bc7e:	2300      	movs	r3, #0
}
 800bc80:	4618      	mov	r0, r3
 800bc82:	3714      	adds	r7, #20
 800bc84:	46bd      	mov	sp, r7
 800bc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8a:	4770      	bx	lr
 800bc8c:	fffff000 	.word	0xfffff000

0800bc90 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800bc90:	b480      	push	{r7}
 800bc92:	b083      	sub	sp, #12
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	691b      	ldr	r3, [r3, #16]
 800bc9c:	b2db      	uxtb	r3, r3
}
 800bc9e:	4618      	mov	r0, r3
 800bca0:	370c      	adds	r7, #12
 800bca2:	46bd      	mov	sp, r7
 800bca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca8:	4770      	bx	lr

0800bcaa <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800bcaa:	b480      	push	{r7}
 800bcac:	b085      	sub	sp, #20
 800bcae:	af00      	add	r7, sp, #0
 800bcb0:	6078      	str	r0, [r7, #4]
 800bcb2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	3314      	adds	r3, #20
 800bcb8:	461a      	mov	r2, r3
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	4413      	add	r3, r2
 800bcbe:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	681b      	ldr	r3, [r3, #0]
}  
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	3714      	adds	r7, #20
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcce:	4770      	bx	lr

0800bcd0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800bcd0:	b480      	push	{r7}
 800bcd2:	b085      	sub	sp, #20
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
 800bcd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800bcda:	2300      	movs	r3, #0
 800bcdc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	681a      	ldr	r2, [r3, #0]
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	685a      	ldr	r2, [r3, #4]
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800bcf2:	683b      	ldr	r3, [r7, #0]
 800bcf4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800bcf6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800bcf8:	683b      	ldr	r3, [r7, #0]
 800bcfa:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800bcfc:	431a      	orrs	r2, r3
                       Data->DPSM);
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800bd02:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800bd04:	68fa      	ldr	r2, [r7, #12]
 800bd06:	4313      	orrs	r3, r2
 800bd08:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd0e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	431a      	orrs	r2, r3
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800bd1a:	2300      	movs	r3, #0

}
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	3714      	adds	r7, #20
 800bd20:	46bd      	mov	sp, r7
 800bd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd26:	4770      	bx	lr

0800bd28 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b088      	sub	sp, #32
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
 800bd30:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800bd36:	2310      	movs	r3, #16
 800bd38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bd3a:	2340      	movs	r3, #64	; 0x40
 800bd3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bd3e:	2300      	movs	r3, #0
 800bd40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bd42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd46:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bd48:	f107 0308 	add.w	r3, r7, #8
 800bd4c:	4619      	mov	r1, r3
 800bd4e:	6878      	ldr	r0, [r7, #4]
 800bd50:	f7ff ff74 	bl	800bc3c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800bd54:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd58:	2110      	movs	r1, #16
 800bd5a:	6878      	ldr	r0, [r7, #4]
 800bd5c:	f000 fa42 	bl	800c1e4 <SDMMC_GetCmdResp1>
 800bd60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd62:	69fb      	ldr	r3, [r7, #28]
}
 800bd64:	4618      	mov	r0, r3
 800bd66:	3720      	adds	r7, #32
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	bd80      	pop	{r7, pc}

0800bd6c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b088      	sub	sp, #32
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
 800bd74:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800bd7a:	2311      	movs	r3, #17
 800bd7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bd7e:	2340      	movs	r3, #64	; 0x40
 800bd80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bd82:	2300      	movs	r3, #0
 800bd84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bd86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd8a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bd8c:	f107 0308 	add.w	r3, r7, #8
 800bd90:	4619      	mov	r1, r3
 800bd92:	6878      	ldr	r0, [r7, #4]
 800bd94:	f7ff ff52 	bl	800bc3c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800bd98:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd9c:	2111      	movs	r1, #17
 800bd9e:	6878      	ldr	r0, [r7, #4]
 800bda0:	f000 fa20 	bl	800c1e4 <SDMMC_GetCmdResp1>
 800bda4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bda6:	69fb      	ldr	r3, [r7, #28]
}
 800bda8:	4618      	mov	r0, r3
 800bdaa:	3720      	adds	r7, #32
 800bdac:	46bd      	mov	sp, r7
 800bdae:	bd80      	pop	{r7, pc}

0800bdb0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b088      	sub	sp, #32
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
 800bdb8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800bdbe:	2312      	movs	r3, #18
 800bdc0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bdc2:	2340      	movs	r3, #64	; 0x40
 800bdc4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bdca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bdce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bdd0:	f107 0308 	add.w	r3, r7, #8
 800bdd4:	4619      	mov	r1, r3
 800bdd6:	6878      	ldr	r0, [r7, #4]
 800bdd8:	f7ff ff30 	bl	800bc3c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800bddc:	f241 3288 	movw	r2, #5000	; 0x1388
 800bde0:	2112      	movs	r1, #18
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	f000 f9fe 	bl	800c1e4 <SDMMC_GetCmdResp1>
 800bde8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bdea:	69fb      	ldr	r3, [r7, #28]
}
 800bdec:	4618      	mov	r0, r3
 800bdee:	3720      	adds	r7, #32
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	bd80      	pop	{r7, pc}

0800bdf4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b088      	sub	sp, #32
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
 800bdfc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800be02:	2318      	movs	r3, #24
 800be04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800be06:	2340      	movs	r3, #64	; 0x40
 800be08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800be0a:	2300      	movs	r3, #0
 800be0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800be0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be12:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be14:	f107 0308 	add.w	r3, r7, #8
 800be18:	4619      	mov	r1, r3
 800be1a:	6878      	ldr	r0, [r7, #4]
 800be1c:	f7ff ff0e 	bl	800bc3c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800be20:	f241 3288 	movw	r2, #5000	; 0x1388
 800be24:	2118      	movs	r1, #24
 800be26:	6878      	ldr	r0, [r7, #4]
 800be28:	f000 f9dc 	bl	800c1e4 <SDMMC_GetCmdResp1>
 800be2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be2e:	69fb      	ldr	r3, [r7, #28]
}
 800be30:	4618      	mov	r0, r3
 800be32:	3720      	adds	r7, #32
 800be34:	46bd      	mov	sp, r7
 800be36:	bd80      	pop	{r7, pc}

0800be38 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b088      	sub	sp, #32
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
 800be40:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800be46:	2319      	movs	r3, #25
 800be48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800be4a:	2340      	movs	r3, #64	; 0x40
 800be4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800be4e:	2300      	movs	r3, #0
 800be50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800be52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be56:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be58:	f107 0308 	add.w	r3, r7, #8
 800be5c:	4619      	mov	r1, r3
 800be5e:	6878      	ldr	r0, [r7, #4]
 800be60:	f7ff feec 	bl	800bc3c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800be64:	f241 3288 	movw	r2, #5000	; 0x1388
 800be68:	2119      	movs	r1, #25
 800be6a:	6878      	ldr	r0, [r7, #4]
 800be6c:	f000 f9ba 	bl	800c1e4 <SDMMC_GetCmdResp1>
 800be70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be72:	69fb      	ldr	r3, [r7, #28]
}
 800be74:	4618      	mov	r0, r3
 800be76:	3720      	adds	r7, #32
 800be78:	46bd      	mov	sp, r7
 800be7a:	bd80      	pop	{r7, pc}

0800be7c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b088      	sub	sp, #32
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800be84:	2300      	movs	r3, #0
 800be86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800be88:	230c      	movs	r3, #12
 800be8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800be8c:	2340      	movs	r3, #64	; 0x40
 800be8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800be90:	2300      	movs	r3, #0
 800be92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800be94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be98:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be9a:	f107 0308 	add.w	r3, r7, #8
 800be9e:	4619      	mov	r1, r3
 800bea0:	6878      	ldr	r0, [r7, #4]
 800bea2:	f7ff fecb 	bl	800bc3c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800bea6:	4a05      	ldr	r2, [pc, #20]	; (800bebc <SDMMC_CmdStopTransfer+0x40>)
 800bea8:	210c      	movs	r1, #12
 800beaa:	6878      	ldr	r0, [r7, #4]
 800beac:	f000 f99a 	bl	800c1e4 <SDMMC_GetCmdResp1>
 800beb0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800beb2:	69fb      	ldr	r3, [r7, #28]
}
 800beb4:	4618      	mov	r0, r3
 800beb6:	3720      	adds	r7, #32
 800beb8:	46bd      	mov	sp, r7
 800beba:	bd80      	pop	{r7, pc}
 800bebc:	05f5e100 	.word	0x05f5e100

0800bec0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b08a      	sub	sp, #40	; 0x28
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	60f8      	str	r0, [r7, #12]
 800bec8:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800bed0:	2307      	movs	r3, #7
 800bed2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bed4:	2340      	movs	r3, #64	; 0x40
 800bed6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bed8:	2300      	movs	r3, #0
 800beda:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bedc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bee0:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bee2:	f107 0310 	add.w	r3, r7, #16
 800bee6:	4619      	mov	r1, r3
 800bee8:	68f8      	ldr	r0, [r7, #12]
 800beea:	f7ff fea7 	bl	800bc3c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800beee:	f241 3288 	movw	r2, #5000	; 0x1388
 800bef2:	2107      	movs	r1, #7
 800bef4:	68f8      	ldr	r0, [r7, #12]
 800bef6:	f000 f975 	bl	800c1e4 <SDMMC_GetCmdResp1>
 800befa:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800befc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800befe:	4618      	mov	r0, r3
 800bf00:	3728      	adds	r7, #40	; 0x28
 800bf02:	46bd      	mov	sp, r7
 800bf04:	bd80      	pop	{r7, pc}

0800bf06 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800bf06:	b580      	push	{r7, lr}
 800bf08:	b088      	sub	sp, #32
 800bf0a:	af00      	add	r7, sp, #0
 800bf0c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800bf12:	2300      	movs	r3, #0
 800bf14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800bf16:	2300      	movs	r3, #0
 800bf18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf22:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf24:	f107 0308 	add.w	r3, r7, #8
 800bf28:	4619      	mov	r1, r3
 800bf2a:	6878      	ldr	r0, [r7, #4]
 800bf2c:	f7ff fe86 	bl	800bc3c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800bf30:	6878      	ldr	r0, [r7, #4]
 800bf32:	f000 f92f 	bl	800c194 <SDMMC_GetCmdError>
 800bf36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf38:	69fb      	ldr	r3, [r7, #28]
}
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	3720      	adds	r7, #32
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	bd80      	pop	{r7, pc}

0800bf42 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800bf42:	b580      	push	{r7, lr}
 800bf44:	b088      	sub	sp, #32
 800bf46:	af00      	add	r7, sp, #0
 800bf48:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800bf4a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800bf4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800bf50:	2308      	movs	r3, #8
 800bf52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf54:	2340      	movs	r3, #64	; 0x40
 800bf56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf58:	2300      	movs	r3, #0
 800bf5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf60:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf62:	f107 0308 	add.w	r3, r7, #8
 800bf66:	4619      	mov	r1, r3
 800bf68:	6878      	ldr	r0, [r7, #4]
 800bf6a:	f7ff fe67 	bl	800bc3c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	f000 fb18 	bl	800c5a4 <SDMMC_GetCmdResp7>
 800bf74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf76:	69fb      	ldr	r3, [r7, #28]
}
 800bf78:	4618      	mov	r0, r3
 800bf7a:	3720      	adds	r7, #32
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bd80      	pop	{r7, pc}

0800bf80 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b088      	sub	sp, #32
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
 800bf88:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800bf8e:	2337      	movs	r3, #55	; 0x37
 800bf90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf92:	2340      	movs	r3, #64	; 0x40
 800bf94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf96:	2300      	movs	r3, #0
 800bf98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf9e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bfa0:	f107 0308 	add.w	r3, r7, #8
 800bfa4:	4619      	mov	r1, r3
 800bfa6:	6878      	ldr	r0, [r7, #4]
 800bfa8:	f7ff fe48 	bl	800bc3c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800bfac:	f241 3288 	movw	r2, #5000	; 0x1388
 800bfb0:	2137      	movs	r1, #55	; 0x37
 800bfb2:	6878      	ldr	r0, [r7, #4]
 800bfb4:	f000 f916 	bl	800c1e4 <SDMMC_GetCmdResp1>
 800bfb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bfba:	69fb      	ldr	r3, [r7, #28]
}
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	3720      	adds	r7, #32
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd80      	pop	{r7, pc}

0800bfc4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b088      	sub	sp, #32
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
 800bfcc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800bfce:	683a      	ldr	r2, [r7, #0]
 800bfd0:	4b0d      	ldr	r3, [pc, #52]	; (800c008 <SDMMC_CmdAppOperCommand+0x44>)
 800bfd2:	4313      	orrs	r3, r2
 800bfd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800bfd6:	2329      	movs	r3, #41	; 0x29
 800bfd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bfda:	2340      	movs	r3, #64	; 0x40
 800bfdc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bfde:	2300      	movs	r3, #0
 800bfe0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bfe2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bfe6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bfe8:	f107 0308 	add.w	r3, r7, #8
 800bfec:	4619      	mov	r1, r3
 800bfee:	6878      	ldr	r0, [r7, #4]
 800bff0:	f7ff fe24 	bl	800bc3c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800bff4:	6878      	ldr	r0, [r7, #4]
 800bff6:	f000 fa27 	bl	800c448 <SDMMC_GetCmdResp3>
 800bffa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bffc:	69fb      	ldr	r3, [r7, #28]
}
 800bffe:	4618      	mov	r0, r3
 800c000:	3720      	adds	r7, #32
 800c002:	46bd      	mov	sp, r7
 800c004:	bd80      	pop	{r7, pc}
 800c006:	bf00      	nop
 800c008:	80100000 	.word	0x80100000

0800c00c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b088      	sub	sp, #32
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
 800c014:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800c01a:	2306      	movs	r3, #6
 800c01c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c01e:	2340      	movs	r3, #64	; 0x40
 800c020:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c022:	2300      	movs	r3, #0
 800c024:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c026:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c02a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c02c:	f107 0308 	add.w	r3, r7, #8
 800c030:	4619      	mov	r1, r3
 800c032:	6878      	ldr	r0, [r7, #4]
 800c034:	f7ff fe02 	bl	800bc3c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800c038:	f241 3288 	movw	r2, #5000	; 0x1388
 800c03c:	2106      	movs	r1, #6
 800c03e:	6878      	ldr	r0, [r7, #4]
 800c040:	f000 f8d0 	bl	800c1e4 <SDMMC_GetCmdResp1>
 800c044:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c046:	69fb      	ldr	r3, [r7, #28]
}
 800c048:	4618      	mov	r0, r3
 800c04a:	3720      	adds	r7, #32
 800c04c:	46bd      	mov	sp, r7
 800c04e:	bd80      	pop	{r7, pc}

0800c050 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b088      	sub	sp, #32
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800c058:	2300      	movs	r3, #0
 800c05a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800c05c:	2333      	movs	r3, #51	; 0x33
 800c05e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c060:	2340      	movs	r3, #64	; 0x40
 800c062:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c064:	2300      	movs	r3, #0
 800c066:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c068:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c06c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c06e:	f107 0308 	add.w	r3, r7, #8
 800c072:	4619      	mov	r1, r3
 800c074:	6878      	ldr	r0, [r7, #4]
 800c076:	f7ff fde1 	bl	800bc3c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800c07a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c07e:	2133      	movs	r1, #51	; 0x33
 800c080:	6878      	ldr	r0, [r7, #4]
 800c082:	f000 f8af 	bl	800c1e4 <SDMMC_GetCmdResp1>
 800c086:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c088:	69fb      	ldr	r3, [r7, #28]
}
 800c08a:	4618      	mov	r0, r3
 800c08c:	3720      	adds	r7, #32
 800c08e:	46bd      	mov	sp, r7
 800c090:	bd80      	pop	{r7, pc}

0800c092 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800c092:	b580      	push	{r7, lr}
 800c094:	b088      	sub	sp, #32
 800c096:	af00      	add	r7, sp, #0
 800c098:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c09a:	2300      	movs	r3, #0
 800c09c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c09e:	2302      	movs	r3, #2
 800c0a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c0a2:	23c0      	movs	r3, #192	; 0xc0
 800c0a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c0aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c0ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c0b0:	f107 0308 	add.w	r3, r7, #8
 800c0b4:	4619      	mov	r1, r3
 800c0b6:	6878      	ldr	r0, [r7, #4]
 800c0b8:	f7ff fdc0 	bl	800bc3c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c0bc:	6878      	ldr	r0, [r7, #4]
 800c0be:	f000 f97d 	bl	800c3bc <SDMMC_GetCmdResp2>
 800c0c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c0c4:	69fb      	ldr	r3, [r7, #28]
}
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	3720      	adds	r7, #32
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	bd80      	pop	{r7, pc}

0800c0ce <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c0ce:	b580      	push	{r7, lr}
 800c0d0:	b088      	sub	sp, #32
 800c0d2:	af00      	add	r7, sp, #0
 800c0d4:	6078      	str	r0, [r7, #4]
 800c0d6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c0dc:	2309      	movs	r3, #9
 800c0de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c0e0:	23c0      	movs	r3, #192	; 0xc0
 800c0e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c0e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c0ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c0ee:	f107 0308 	add.w	r3, r7, #8
 800c0f2:	4619      	mov	r1, r3
 800c0f4:	6878      	ldr	r0, [r7, #4]
 800c0f6:	f7ff fda1 	bl	800bc3c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c0fa:	6878      	ldr	r0, [r7, #4]
 800c0fc:	f000 f95e 	bl	800c3bc <SDMMC_GetCmdResp2>
 800c100:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c102:	69fb      	ldr	r3, [r7, #28]
}
 800c104:	4618      	mov	r0, r3
 800c106:	3720      	adds	r7, #32
 800c108:	46bd      	mov	sp, r7
 800c10a:	bd80      	pop	{r7, pc}

0800c10c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b088      	sub	sp, #32
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
 800c114:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c116:	2300      	movs	r3, #0
 800c118:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c11a:	2303      	movs	r3, #3
 800c11c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c11e:	2340      	movs	r3, #64	; 0x40
 800c120:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c122:	2300      	movs	r3, #0
 800c124:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c126:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c12a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c12c:	f107 0308 	add.w	r3, r7, #8
 800c130:	4619      	mov	r1, r3
 800c132:	6878      	ldr	r0, [r7, #4]
 800c134:	f7ff fd82 	bl	800bc3c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c138:	683a      	ldr	r2, [r7, #0]
 800c13a:	2103      	movs	r1, #3
 800c13c:	6878      	ldr	r0, [r7, #4]
 800c13e:	f000 f9bd 	bl	800c4bc <SDMMC_GetCmdResp6>
 800c142:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c144:	69fb      	ldr	r3, [r7, #28]
}
 800c146:	4618      	mov	r0, r3
 800c148:	3720      	adds	r7, #32
 800c14a:	46bd      	mov	sp, r7
 800c14c:	bd80      	pop	{r7, pc}

0800c14e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c14e:	b580      	push	{r7, lr}
 800c150:	b088      	sub	sp, #32
 800c152:	af00      	add	r7, sp, #0
 800c154:	6078      	str	r0, [r7, #4]
 800c156:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800c158:	683b      	ldr	r3, [r7, #0]
 800c15a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c15c:	230d      	movs	r3, #13
 800c15e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c160:	2340      	movs	r3, #64	; 0x40
 800c162:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c164:	2300      	movs	r3, #0
 800c166:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c168:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c16c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c16e:	f107 0308 	add.w	r3, r7, #8
 800c172:	4619      	mov	r1, r3
 800c174:	6878      	ldr	r0, [r7, #4]
 800c176:	f7ff fd61 	bl	800bc3c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800c17a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c17e:	210d      	movs	r1, #13
 800c180:	6878      	ldr	r0, [r7, #4]
 800c182:	f000 f82f 	bl	800c1e4 <SDMMC_GetCmdResp1>
 800c186:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c188:	69fb      	ldr	r3, [r7, #28]
}
 800c18a:	4618      	mov	r0, r3
 800c18c:	3720      	adds	r7, #32
 800c18e:	46bd      	mov	sp, r7
 800c190:	bd80      	pop	{r7, pc}
	...

0800c194 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800c194:	b490      	push	{r4, r7}
 800c196:	b082      	sub	sp, #8
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c19c:	4b0f      	ldr	r3, [pc, #60]	; (800c1dc <SDMMC_GetCmdError+0x48>)
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	4a0f      	ldr	r2, [pc, #60]	; (800c1e0 <SDMMC_GetCmdError+0x4c>)
 800c1a2:	fba2 2303 	umull	r2, r3, r2, r3
 800c1a6:	0a5b      	lsrs	r3, r3, #9
 800c1a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c1ac:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c1b0:	4623      	mov	r3, r4
 800c1b2:	1e5c      	subs	r4, r3, #1
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d102      	bne.n	800c1be <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c1b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c1bc:	e009      	b.n	800c1d2 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d0f2      	beq.n	800c1b0 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	22c5      	movs	r2, #197	; 0xc5
 800c1ce:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800c1d0:	2300      	movs	r3, #0
}
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	3708      	adds	r7, #8
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	bc90      	pop	{r4, r7}
 800c1da:	4770      	bx	lr
 800c1dc:	20000000 	.word	0x20000000
 800c1e0:	10624dd3 	.word	0x10624dd3

0800c1e4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c1e4:	b590      	push	{r4, r7, lr}
 800c1e6:	b087      	sub	sp, #28
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	60f8      	str	r0, [r7, #12]
 800c1ec:	460b      	mov	r3, r1
 800c1ee:	607a      	str	r2, [r7, #4]
 800c1f0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c1f2:	4b6f      	ldr	r3, [pc, #444]	; (800c3b0 <SDMMC_GetCmdResp1+0x1cc>)
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	4a6f      	ldr	r2, [pc, #444]	; (800c3b4 <SDMMC_GetCmdResp1+0x1d0>)
 800c1f8:	fba2 2303 	umull	r2, r3, r2, r3
 800c1fc:	0a5b      	lsrs	r3, r3, #9
 800c1fe:	687a      	ldr	r2, [r7, #4]
 800c200:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c204:	4623      	mov	r3, r4
 800c206:	1e5c      	subs	r4, r3, #1
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d102      	bne.n	800c212 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c20c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c210:	e0c9      	b.n	800c3a6 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c216:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c218:	697b      	ldr	r3, [r7, #20]
 800c21a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d0f0      	beq.n	800c204 <SDMMC_GetCmdResp1+0x20>
 800c222:	697b      	ldr	r3, [r7, #20]
 800c224:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d1eb      	bne.n	800c204 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c230:	f003 0304 	and.w	r3, r3, #4
 800c234:	2b00      	cmp	r3, #0
 800c236:	d004      	beq.n	800c242 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	2204      	movs	r2, #4
 800c23c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c23e:	2304      	movs	r3, #4
 800c240:	e0b1      	b.n	800c3a6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c246:	f003 0301 	and.w	r3, r3, #1
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d004      	beq.n	800c258 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	2201      	movs	r2, #1
 800c252:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c254:	2301      	movs	r3, #1
 800c256:	e0a6      	b.n	800c3a6 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	22c5      	movs	r2, #197	; 0xc5
 800c25c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c25e:	68f8      	ldr	r0, [r7, #12]
 800c260:	f7ff fd16 	bl	800bc90 <SDMMC_GetCommandResponse>
 800c264:	4603      	mov	r3, r0
 800c266:	461a      	mov	r2, r3
 800c268:	7afb      	ldrb	r3, [r7, #11]
 800c26a:	4293      	cmp	r3, r2
 800c26c:	d001      	beq.n	800c272 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c26e:	2301      	movs	r3, #1
 800c270:	e099      	b.n	800c3a6 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c272:	2100      	movs	r1, #0
 800c274:	68f8      	ldr	r0, [r7, #12]
 800c276:	f7ff fd18 	bl	800bcaa <SDMMC_GetResponse>
 800c27a:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c27c:	693a      	ldr	r2, [r7, #16]
 800c27e:	4b4e      	ldr	r3, [pc, #312]	; (800c3b8 <SDMMC_GetCmdResp1+0x1d4>)
 800c280:	4013      	ands	r3, r2
 800c282:	2b00      	cmp	r3, #0
 800c284:	d101      	bne.n	800c28a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800c286:	2300      	movs	r3, #0
 800c288:	e08d      	b.n	800c3a6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c28a:	693b      	ldr	r3, [r7, #16]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	da02      	bge.n	800c296 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c290:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c294:	e087      	b.n	800c3a6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c296:	693b      	ldr	r3, [r7, #16]
 800c298:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d001      	beq.n	800c2a4 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c2a0:	2340      	movs	r3, #64	; 0x40
 800c2a2:	e080      	b.n	800c3a6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c2a4:	693b      	ldr	r3, [r7, #16]
 800c2a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d001      	beq.n	800c2b2 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c2ae:	2380      	movs	r3, #128	; 0x80
 800c2b0:	e079      	b.n	800c3a6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c2b2:	693b      	ldr	r3, [r7, #16]
 800c2b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d002      	beq.n	800c2c2 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c2bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c2c0:	e071      	b.n	800c3a6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c2c2:	693b      	ldr	r3, [r7, #16]
 800c2c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d002      	beq.n	800c2d2 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c2cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c2d0:	e069      	b.n	800c3a6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c2d2:	693b      	ldr	r3, [r7, #16]
 800c2d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d002      	beq.n	800c2e2 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c2dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c2e0:	e061      	b.n	800c3a6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c2e2:	693b      	ldr	r3, [r7, #16]
 800c2e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d002      	beq.n	800c2f2 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c2ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c2f0:	e059      	b.n	800c3a6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c2f2:	693b      	ldr	r3, [r7, #16]
 800c2f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d002      	beq.n	800c302 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c2fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c300:	e051      	b.n	800c3a6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c302:	693b      	ldr	r3, [r7, #16]
 800c304:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d002      	beq.n	800c312 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c30c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c310:	e049      	b.n	800c3a6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c312:	693b      	ldr	r3, [r7, #16]
 800c314:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d002      	beq.n	800c322 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c31c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c320:	e041      	b.n	800c3a6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c322:	693b      	ldr	r3, [r7, #16]
 800c324:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d002      	beq.n	800c332 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800c32c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c330:	e039      	b.n	800c3a6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c332:	693b      	ldr	r3, [r7, #16]
 800c334:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d002      	beq.n	800c342 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c33c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c340:	e031      	b.n	800c3a6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c342:	693b      	ldr	r3, [r7, #16]
 800c344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d002      	beq.n	800c352 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c34c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c350:	e029      	b.n	800c3a6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c352:	693b      	ldr	r3, [r7, #16]
 800c354:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d002      	beq.n	800c362 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c35c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c360:	e021      	b.n	800c3a6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c362:	693b      	ldr	r3, [r7, #16]
 800c364:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d002      	beq.n	800c372 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c36c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c370:	e019      	b.n	800c3a6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c372:	693b      	ldr	r3, [r7, #16]
 800c374:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d002      	beq.n	800c382 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c37c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c380:	e011      	b.n	800c3a6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c382:	693b      	ldr	r3, [r7, #16]
 800c384:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d002      	beq.n	800c392 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c38c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c390:	e009      	b.n	800c3a6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c392:	693b      	ldr	r3, [r7, #16]
 800c394:	f003 0308 	and.w	r3, r3, #8
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d002      	beq.n	800c3a2 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c39c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c3a0:	e001      	b.n	800c3a6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c3a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	371c      	adds	r7, #28
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	bd90      	pop	{r4, r7, pc}
 800c3ae:	bf00      	nop
 800c3b0:	20000000 	.word	0x20000000
 800c3b4:	10624dd3 	.word	0x10624dd3
 800c3b8:	fdffe008 	.word	0xfdffe008

0800c3bc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800c3bc:	b490      	push	{r4, r7}
 800c3be:	b084      	sub	sp, #16
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c3c4:	4b1e      	ldr	r3, [pc, #120]	; (800c440 <SDMMC_GetCmdResp2+0x84>)
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	4a1e      	ldr	r2, [pc, #120]	; (800c444 <SDMMC_GetCmdResp2+0x88>)
 800c3ca:	fba2 2303 	umull	r2, r3, r2, r3
 800c3ce:	0a5b      	lsrs	r3, r3, #9
 800c3d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c3d4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c3d8:	4623      	mov	r3, r4
 800c3da:	1e5c      	subs	r4, r3, #1
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d102      	bne.n	800c3e6 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c3e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c3e4:	e026      	b.n	800c434 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3ea:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d0f0      	beq.n	800c3d8 <SDMMC_GetCmdResp2+0x1c>
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d1eb      	bne.n	800c3d8 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c404:	f003 0304 	and.w	r3, r3, #4
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d004      	beq.n	800c416 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	2204      	movs	r2, #4
 800c410:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c412:	2304      	movs	r3, #4
 800c414:	e00e      	b.n	800c434 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c41a:	f003 0301 	and.w	r3, r3, #1
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d004      	beq.n	800c42c <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	2201      	movs	r2, #1
 800c426:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c428:	2301      	movs	r3, #1
 800c42a:	e003      	b.n	800c434 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	22c5      	movs	r2, #197	; 0xc5
 800c430:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c432:	2300      	movs	r3, #0
}
 800c434:	4618      	mov	r0, r3
 800c436:	3710      	adds	r7, #16
 800c438:	46bd      	mov	sp, r7
 800c43a:	bc90      	pop	{r4, r7}
 800c43c:	4770      	bx	lr
 800c43e:	bf00      	nop
 800c440:	20000000 	.word	0x20000000
 800c444:	10624dd3 	.word	0x10624dd3

0800c448 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800c448:	b490      	push	{r4, r7}
 800c44a:	b084      	sub	sp, #16
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c450:	4b18      	ldr	r3, [pc, #96]	; (800c4b4 <SDMMC_GetCmdResp3+0x6c>)
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	4a18      	ldr	r2, [pc, #96]	; (800c4b8 <SDMMC_GetCmdResp3+0x70>)
 800c456:	fba2 2303 	umull	r2, r3, r2, r3
 800c45a:	0a5b      	lsrs	r3, r3, #9
 800c45c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c460:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c464:	4623      	mov	r3, r4
 800c466:	1e5c      	subs	r4, r3, #1
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d102      	bne.n	800c472 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c46c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c470:	e01b      	b.n	800c4aa <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c476:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d0f0      	beq.n	800c464 <SDMMC_GetCmdResp3+0x1c>
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d1eb      	bne.n	800c464 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c490:	f003 0304 	and.w	r3, r3, #4
 800c494:	2b00      	cmp	r3, #0
 800c496:	d004      	beq.n	800c4a2 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2204      	movs	r2, #4
 800c49c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c49e:	2304      	movs	r3, #4
 800c4a0:	e003      	b.n	800c4aa <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	22c5      	movs	r2, #197	; 0xc5
 800c4a6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c4a8:	2300      	movs	r3, #0
}
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	3710      	adds	r7, #16
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	bc90      	pop	{r4, r7}
 800c4b2:	4770      	bx	lr
 800c4b4:	20000000 	.word	0x20000000
 800c4b8:	10624dd3 	.word	0x10624dd3

0800c4bc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c4bc:	b590      	push	{r4, r7, lr}
 800c4be:	b087      	sub	sp, #28
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	60f8      	str	r0, [r7, #12]
 800c4c4:	460b      	mov	r3, r1
 800c4c6:	607a      	str	r2, [r7, #4]
 800c4c8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c4ca:	4b34      	ldr	r3, [pc, #208]	; (800c59c <SDMMC_GetCmdResp6+0xe0>)
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	4a34      	ldr	r2, [pc, #208]	; (800c5a0 <SDMMC_GetCmdResp6+0xe4>)
 800c4d0:	fba2 2303 	umull	r2, r3, r2, r3
 800c4d4:	0a5b      	lsrs	r3, r3, #9
 800c4d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c4da:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c4de:	4623      	mov	r3, r4
 800c4e0:	1e5c      	subs	r4, r3, #1
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d102      	bne.n	800c4ec <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c4e6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c4ea:	e052      	b.n	800c592 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4f0:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c4f2:	697b      	ldr	r3, [r7, #20]
 800c4f4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d0f0      	beq.n	800c4de <SDMMC_GetCmdResp6+0x22>
 800c4fc:	697b      	ldr	r3, [r7, #20]
 800c4fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c502:	2b00      	cmp	r3, #0
 800c504:	d1eb      	bne.n	800c4de <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c50a:	f003 0304 	and.w	r3, r3, #4
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d004      	beq.n	800c51c <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	2204      	movs	r2, #4
 800c516:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c518:	2304      	movs	r3, #4
 800c51a:	e03a      	b.n	800c592 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c520:	f003 0301 	and.w	r3, r3, #1
 800c524:	2b00      	cmp	r3, #0
 800c526:	d004      	beq.n	800c532 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	2201      	movs	r2, #1
 800c52c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c52e:	2301      	movs	r3, #1
 800c530:	e02f      	b.n	800c592 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c532:	68f8      	ldr	r0, [r7, #12]
 800c534:	f7ff fbac 	bl	800bc90 <SDMMC_GetCommandResponse>
 800c538:	4603      	mov	r3, r0
 800c53a:	461a      	mov	r2, r3
 800c53c:	7afb      	ldrb	r3, [r7, #11]
 800c53e:	4293      	cmp	r3, r2
 800c540:	d001      	beq.n	800c546 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c542:	2301      	movs	r3, #1
 800c544:	e025      	b.n	800c592 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	22c5      	movs	r2, #197	; 0xc5
 800c54a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c54c:	2100      	movs	r1, #0
 800c54e:	68f8      	ldr	r0, [r7, #12]
 800c550:	f7ff fbab 	bl	800bcaa <SDMMC_GetResponse>
 800c554:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800c556:	693b      	ldr	r3, [r7, #16]
 800c558:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d106      	bne.n	800c56e <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800c560:	693b      	ldr	r3, [r7, #16]
 800c562:	0c1b      	lsrs	r3, r3, #16
 800c564:	b29a      	uxth	r2, r3
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800c56a:	2300      	movs	r3, #0
 800c56c:	e011      	b.n	800c592 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c56e:	693b      	ldr	r3, [r7, #16]
 800c570:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c574:	2b00      	cmp	r3, #0
 800c576:	d002      	beq.n	800c57e <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c578:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c57c:	e009      	b.n	800c592 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c57e:	693b      	ldr	r3, [r7, #16]
 800c580:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c584:	2b00      	cmp	r3, #0
 800c586:	d002      	beq.n	800c58e <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c588:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c58c:	e001      	b.n	800c592 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c58e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c592:	4618      	mov	r0, r3
 800c594:	371c      	adds	r7, #28
 800c596:	46bd      	mov	sp, r7
 800c598:	bd90      	pop	{r4, r7, pc}
 800c59a:	bf00      	nop
 800c59c:	20000000 	.word	0x20000000
 800c5a0:	10624dd3 	.word	0x10624dd3

0800c5a4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800c5a4:	b490      	push	{r4, r7}
 800c5a6:	b084      	sub	sp, #16
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c5ac:	4b21      	ldr	r3, [pc, #132]	; (800c634 <SDMMC_GetCmdResp7+0x90>)
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	4a21      	ldr	r2, [pc, #132]	; (800c638 <SDMMC_GetCmdResp7+0x94>)
 800c5b2:	fba2 2303 	umull	r2, r3, r2, r3
 800c5b6:	0a5b      	lsrs	r3, r3, #9
 800c5b8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c5bc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c5c0:	4623      	mov	r3, r4
 800c5c2:	1e5c      	subs	r4, r3, #1
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d102      	bne.n	800c5ce <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c5c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c5cc:	e02c      	b.n	800c628 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5d2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d0f0      	beq.n	800c5c0 <SDMMC_GetCmdResp7+0x1c>
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d1eb      	bne.n	800c5c0 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5ec:	f003 0304 	and.w	r3, r3, #4
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d004      	beq.n	800c5fe <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	2204      	movs	r2, #4
 800c5f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c5fa:	2304      	movs	r3, #4
 800c5fc:	e014      	b.n	800c628 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c602:	f003 0301 	and.w	r3, r3, #1
 800c606:	2b00      	cmp	r3, #0
 800c608:	d004      	beq.n	800c614 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	2201      	movs	r2, #1
 800c60e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c610:	2301      	movs	r3, #1
 800c612:	e009      	b.n	800c628 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d002      	beq.n	800c626 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	2240      	movs	r2, #64	; 0x40
 800c624:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c626:	2300      	movs	r3, #0
  
}
 800c628:	4618      	mov	r0, r3
 800c62a:	3710      	adds	r7, #16
 800c62c:	46bd      	mov	sp, r7
 800c62e:	bc90      	pop	{r4, r7}
 800c630:	4770      	bx	lr
 800c632:	bf00      	nop
 800c634:	20000000 	.word	0x20000000
 800c638:	10624dd3 	.word	0x10624dd3

0800c63c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c63c:	b084      	sub	sp, #16
 800c63e:	b580      	push	{r7, lr}
 800c640:	b084      	sub	sp, #16
 800c642:	af00      	add	r7, sp, #0
 800c644:	6078      	str	r0, [r7, #4]
 800c646:	f107 001c 	add.w	r0, r7, #28
 800c64a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c650:	2b01      	cmp	r3, #1
 800c652:	d120      	bne.n	800c696 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c658:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	68da      	ldr	r2, [r3, #12]
 800c664:	4b20      	ldr	r3, [pc, #128]	; (800c6e8 <USB_CoreInit+0xac>)
 800c666:	4013      	ands	r3, r2
 800c668:	687a      	ldr	r2, [r7, #4]
 800c66a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	68db      	ldr	r3, [r3, #12]
 800c670:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c678:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c67a:	2b01      	cmp	r3, #1
 800c67c:	d105      	bne.n	800c68a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	68db      	ldr	r3, [r3, #12]
 800c682:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800c68a:	6878      	ldr	r0, [r7, #4]
 800c68c:	f001 fac4 	bl	800dc18 <USB_CoreReset>
 800c690:	4603      	mov	r3, r0
 800c692:	73fb      	strb	r3, [r7, #15]
 800c694:	e010      	b.n	800c6b8 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	68db      	ldr	r3, [r3, #12]
 800c69a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800c6a2:	6878      	ldr	r0, [r7, #4]
 800c6a4:	f001 fab8 	bl	800dc18 <USB_CoreReset>
 800c6a8:	4603      	mov	r3, r0
 800c6aa:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6b0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800c6b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ba:	2b01      	cmp	r3, #1
 800c6bc:	d10b      	bne.n	800c6d6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	689b      	ldr	r3, [r3, #8]
 800c6c2:	f043 0206 	orr.w	r2, r3, #6
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	689b      	ldr	r3, [r3, #8]
 800c6ce:	f043 0220 	orr.w	r2, r3, #32
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c6d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6d8:	4618      	mov	r0, r3
 800c6da:	3710      	adds	r7, #16
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c6e2:	b004      	add	sp, #16
 800c6e4:	4770      	bx	lr
 800c6e6:	bf00      	nop
 800c6e8:	ffbdffbf 	.word	0xffbdffbf

0800c6ec <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800c6ec:	b480      	push	{r7}
 800c6ee:	b087      	sub	sp, #28
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	60f8      	str	r0, [r7, #12]
 800c6f4:	60b9      	str	r1, [r7, #8]
 800c6f6:	4613      	mov	r3, r2
 800c6f8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800c6fa:	79fb      	ldrb	r3, [r7, #7]
 800c6fc:	2b02      	cmp	r3, #2
 800c6fe:	d165      	bne.n	800c7cc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800c700:	68bb      	ldr	r3, [r7, #8]
 800c702:	4a41      	ldr	r2, [pc, #260]	; (800c808 <USB_SetTurnaroundTime+0x11c>)
 800c704:	4293      	cmp	r3, r2
 800c706:	d906      	bls.n	800c716 <USB_SetTurnaroundTime+0x2a>
 800c708:	68bb      	ldr	r3, [r7, #8]
 800c70a:	4a40      	ldr	r2, [pc, #256]	; (800c80c <USB_SetTurnaroundTime+0x120>)
 800c70c:	4293      	cmp	r3, r2
 800c70e:	d802      	bhi.n	800c716 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800c710:	230f      	movs	r3, #15
 800c712:	617b      	str	r3, [r7, #20]
 800c714:	e062      	b.n	800c7dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800c716:	68bb      	ldr	r3, [r7, #8]
 800c718:	4a3c      	ldr	r2, [pc, #240]	; (800c80c <USB_SetTurnaroundTime+0x120>)
 800c71a:	4293      	cmp	r3, r2
 800c71c:	d906      	bls.n	800c72c <USB_SetTurnaroundTime+0x40>
 800c71e:	68bb      	ldr	r3, [r7, #8]
 800c720:	4a3b      	ldr	r2, [pc, #236]	; (800c810 <USB_SetTurnaroundTime+0x124>)
 800c722:	4293      	cmp	r3, r2
 800c724:	d802      	bhi.n	800c72c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800c726:	230e      	movs	r3, #14
 800c728:	617b      	str	r3, [r7, #20]
 800c72a:	e057      	b.n	800c7dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800c72c:	68bb      	ldr	r3, [r7, #8]
 800c72e:	4a38      	ldr	r2, [pc, #224]	; (800c810 <USB_SetTurnaroundTime+0x124>)
 800c730:	4293      	cmp	r3, r2
 800c732:	d906      	bls.n	800c742 <USB_SetTurnaroundTime+0x56>
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	4a37      	ldr	r2, [pc, #220]	; (800c814 <USB_SetTurnaroundTime+0x128>)
 800c738:	4293      	cmp	r3, r2
 800c73a:	d802      	bhi.n	800c742 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800c73c:	230d      	movs	r3, #13
 800c73e:	617b      	str	r3, [r7, #20]
 800c740:	e04c      	b.n	800c7dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800c742:	68bb      	ldr	r3, [r7, #8]
 800c744:	4a33      	ldr	r2, [pc, #204]	; (800c814 <USB_SetTurnaroundTime+0x128>)
 800c746:	4293      	cmp	r3, r2
 800c748:	d906      	bls.n	800c758 <USB_SetTurnaroundTime+0x6c>
 800c74a:	68bb      	ldr	r3, [r7, #8]
 800c74c:	4a32      	ldr	r2, [pc, #200]	; (800c818 <USB_SetTurnaroundTime+0x12c>)
 800c74e:	4293      	cmp	r3, r2
 800c750:	d802      	bhi.n	800c758 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800c752:	230c      	movs	r3, #12
 800c754:	617b      	str	r3, [r7, #20]
 800c756:	e041      	b.n	800c7dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800c758:	68bb      	ldr	r3, [r7, #8]
 800c75a:	4a2f      	ldr	r2, [pc, #188]	; (800c818 <USB_SetTurnaroundTime+0x12c>)
 800c75c:	4293      	cmp	r3, r2
 800c75e:	d906      	bls.n	800c76e <USB_SetTurnaroundTime+0x82>
 800c760:	68bb      	ldr	r3, [r7, #8]
 800c762:	4a2e      	ldr	r2, [pc, #184]	; (800c81c <USB_SetTurnaroundTime+0x130>)
 800c764:	4293      	cmp	r3, r2
 800c766:	d802      	bhi.n	800c76e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800c768:	230b      	movs	r3, #11
 800c76a:	617b      	str	r3, [r7, #20]
 800c76c:	e036      	b.n	800c7dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800c76e:	68bb      	ldr	r3, [r7, #8]
 800c770:	4a2a      	ldr	r2, [pc, #168]	; (800c81c <USB_SetTurnaroundTime+0x130>)
 800c772:	4293      	cmp	r3, r2
 800c774:	d906      	bls.n	800c784 <USB_SetTurnaroundTime+0x98>
 800c776:	68bb      	ldr	r3, [r7, #8]
 800c778:	4a29      	ldr	r2, [pc, #164]	; (800c820 <USB_SetTurnaroundTime+0x134>)
 800c77a:	4293      	cmp	r3, r2
 800c77c:	d802      	bhi.n	800c784 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800c77e:	230a      	movs	r3, #10
 800c780:	617b      	str	r3, [r7, #20]
 800c782:	e02b      	b.n	800c7dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800c784:	68bb      	ldr	r3, [r7, #8]
 800c786:	4a26      	ldr	r2, [pc, #152]	; (800c820 <USB_SetTurnaroundTime+0x134>)
 800c788:	4293      	cmp	r3, r2
 800c78a:	d906      	bls.n	800c79a <USB_SetTurnaroundTime+0xae>
 800c78c:	68bb      	ldr	r3, [r7, #8]
 800c78e:	4a25      	ldr	r2, [pc, #148]	; (800c824 <USB_SetTurnaroundTime+0x138>)
 800c790:	4293      	cmp	r3, r2
 800c792:	d802      	bhi.n	800c79a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800c794:	2309      	movs	r3, #9
 800c796:	617b      	str	r3, [r7, #20]
 800c798:	e020      	b.n	800c7dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800c79a:	68bb      	ldr	r3, [r7, #8]
 800c79c:	4a21      	ldr	r2, [pc, #132]	; (800c824 <USB_SetTurnaroundTime+0x138>)
 800c79e:	4293      	cmp	r3, r2
 800c7a0:	d906      	bls.n	800c7b0 <USB_SetTurnaroundTime+0xc4>
 800c7a2:	68bb      	ldr	r3, [r7, #8]
 800c7a4:	4a20      	ldr	r2, [pc, #128]	; (800c828 <USB_SetTurnaroundTime+0x13c>)
 800c7a6:	4293      	cmp	r3, r2
 800c7a8:	d802      	bhi.n	800c7b0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800c7aa:	2308      	movs	r3, #8
 800c7ac:	617b      	str	r3, [r7, #20]
 800c7ae:	e015      	b.n	800c7dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800c7b0:	68bb      	ldr	r3, [r7, #8]
 800c7b2:	4a1d      	ldr	r2, [pc, #116]	; (800c828 <USB_SetTurnaroundTime+0x13c>)
 800c7b4:	4293      	cmp	r3, r2
 800c7b6:	d906      	bls.n	800c7c6 <USB_SetTurnaroundTime+0xda>
 800c7b8:	68bb      	ldr	r3, [r7, #8]
 800c7ba:	4a1c      	ldr	r2, [pc, #112]	; (800c82c <USB_SetTurnaroundTime+0x140>)
 800c7bc:	4293      	cmp	r3, r2
 800c7be:	d802      	bhi.n	800c7c6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800c7c0:	2307      	movs	r3, #7
 800c7c2:	617b      	str	r3, [r7, #20]
 800c7c4:	e00a      	b.n	800c7dc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800c7c6:	2306      	movs	r3, #6
 800c7c8:	617b      	str	r3, [r7, #20]
 800c7ca:	e007      	b.n	800c7dc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800c7cc:	79fb      	ldrb	r3, [r7, #7]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d102      	bne.n	800c7d8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800c7d2:	2309      	movs	r3, #9
 800c7d4:	617b      	str	r3, [r7, #20]
 800c7d6:	e001      	b.n	800c7dc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800c7d8:	2309      	movs	r3, #9
 800c7da:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	68db      	ldr	r3, [r3, #12]
 800c7e0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	68da      	ldr	r2, [r3, #12]
 800c7ec:	697b      	ldr	r3, [r7, #20]
 800c7ee:	029b      	lsls	r3, r3, #10
 800c7f0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800c7f4:	431a      	orrs	r2, r3
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c7fa:	2300      	movs	r3, #0
}
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	371c      	adds	r7, #28
 800c800:	46bd      	mov	sp, r7
 800c802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c806:	4770      	bx	lr
 800c808:	00d8acbf 	.word	0x00d8acbf
 800c80c:	00e4e1bf 	.word	0x00e4e1bf
 800c810:	00f423ff 	.word	0x00f423ff
 800c814:	0106737f 	.word	0x0106737f
 800c818:	011a499f 	.word	0x011a499f
 800c81c:	01312cff 	.word	0x01312cff
 800c820:	014ca43f 	.word	0x014ca43f
 800c824:	016e35ff 	.word	0x016e35ff
 800c828:	01a6ab1f 	.word	0x01a6ab1f
 800c82c:	01e847ff 	.word	0x01e847ff

0800c830 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c830:	b480      	push	{r7}
 800c832:	b083      	sub	sp, #12
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	689b      	ldr	r3, [r3, #8]
 800c83c:	f043 0201 	orr.w	r2, r3, #1
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c844:	2300      	movs	r3, #0
}
 800c846:	4618      	mov	r0, r3
 800c848:	370c      	adds	r7, #12
 800c84a:	46bd      	mov	sp, r7
 800c84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c850:	4770      	bx	lr

0800c852 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c852:	b480      	push	{r7}
 800c854:	b083      	sub	sp, #12
 800c856:	af00      	add	r7, sp, #0
 800c858:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	689b      	ldr	r3, [r3, #8]
 800c85e:	f023 0201 	bic.w	r2, r3, #1
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c866:	2300      	movs	r3, #0
}
 800c868:	4618      	mov	r0, r3
 800c86a:	370c      	adds	r7, #12
 800c86c:	46bd      	mov	sp, r7
 800c86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c872:	4770      	bx	lr

0800c874 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b082      	sub	sp, #8
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
 800c87c:	460b      	mov	r3, r1
 800c87e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	68db      	ldr	r3, [r3, #12]
 800c884:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c88c:	78fb      	ldrb	r3, [r7, #3]
 800c88e:	2b01      	cmp	r3, #1
 800c890:	d106      	bne.n	800c8a0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	68db      	ldr	r3, [r3, #12]
 800c896:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	60da      	str	r2, [r3, #12]
 800c89e:	e00b      	b.n	800c8b8 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800c8a0:	78fb      	ldrb	r3, [r7, #3]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d106      	bne.n	800c8b4 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	68db      	ldr	r3, [r3, #12]
 800c8aa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	60da      	str	r2, [r3, #12]
 800c8b2:	e001      	b.n	800c8b8 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800c8b4:	2301      	movs	r3, #1
 800c8b6:	e003      	b.n	800c8c0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800c8b8:	2032      	movs	r0, #50	; 0x32
 800c8ba:	f7f8 fda9 	bl	8005410 <HAL_Delay>

  return HAL_OK;
 800c8be:	2300      	movs	r3, #0
}
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	3708      	adds	r7, #8
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	bd80      	pop	{r7, pc}

0800c8c8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c8c8:	b084      	sub	sp, #16
 800c8ca:	b580      	push	{r7, lr}
 800c8cc:	b086      	sub	sp, #24
 800c8ce:	af00      	add	r7, sp, #0
 800c8d0:	6078      	str	r0, [r7, #4]
 800c8d2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c8d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c8da:	2300      	movs	r3, #0
 800c8dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	613b      	str	r3, [r7, #16]
 800c8e6:	e009      	b.n	800c8fc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c8e8:	687a      	ldr	r2, [r7, #4]
 800c8ea:	693b      	ldr	r3, [r7, #16]
 800c8ec:	3340      	adds	r3, #64	; 0x40
 800c8ee:	009b      	lsls	r3, r3, #2
 800c8f0:	4413      	add	r3, r2
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c8f6:	693b      	ldr	r3, [r7, #16]
 800c8f8:	3301      	adds	r3, #1
 800c8fa:	613b      	str	r3, [r7, #16]
 800c8fc:	693b      	ldr	r3, [r7, #16]
 800c8fe:	2b0e      	cmp	r3, #14
 800c900:	d9f2      	bls.n	800c8e8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c902:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c904:	2b00      	cmp	r3, #0
 800c906:	d11c      	bne.n	800c942 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c90e:	685b      	ldr	r3, [r3, #4]
 800c910:	68fa      	ldr	r2, [r7, #12]
 800c912:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c916:	f043 0302 	orr.w	r3, r3, #2
 800c91a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c920:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	601a      	str	r2, [r3, #0]
 800c940:	e005      	b.n	800c94e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c946:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c954:	461a      	mov	r2, r3
 800c956:	2300      	movs	r3, #0
 800c958:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c960:	4619      	mov	r1, r3
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c968:	461a      	mov	r2, r3
 800c96a:	680b      	ldr	r3, [r1, #0]
 800c96c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c96e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c970:	2b01      	cmp	r3, #1
 800c972:	d10c      	bne.n	800c98e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c976:	2b00      	cmp	r3, #0
 800c978:	d104      	bne.n	800c984 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c97a:	2100      	movs	r1, #0
 800c97c:	6878      	ldr	r0, [r7, #4]
 800c97e:	f000 f959 	bl	800cc34 <USB_SetDevSpeed>
 800c982:	e018      	b.n	800c9b6 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c984:	2101      	movs	r1, #1
 800c986:	6878      	ldr	r0, [r7, #4]
 800c988:	f000 f954 	bl	800cc34 <USB_SetDevSpeed>
 800c98c:	e013      	b.n	800c9b6 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800c98e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c990:	2b03      	cmp	r3, #3
 800c992:	d10c      	bne.n	800c9ae <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c996:	2b00      	cmp	r3, #0
 800c998:	d104      	bne.n	800c9a4 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c99a:	2100      	movs	r1, #0
 800c99c:	6878      	ldr	r0, [r7, #4]
 800c99e:	f000 f949 	bl	800cc34 <USB_SetDevSpeed>
 800c9a2:	e008      	b.n	800c9b6 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c9a4:	2101      	movs	r1, #1
 800c9a6:	6878      	ldr	r0, [r7, #4]
 800c9a8:	f000 f944 	bl	800cc34 <USB_SetDevSpeed>
 800c9ac:	e003      	b.n	800c9b6 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c9ae:	2103      	movs	r1, #3
 800c9b0:	6878      	ldr	r0, [r7, #4]
 800c9b2:	f000 f93f 	bl	800cc34 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c9b6:	2110      	movs	r1, #16
 800c9b8:	6878      	ldr	r0, [r7, #4]
 800c9ba:	f000 f8f3 	bl	800cba4 <USB_FlushTxFifo>
 800c9be:	4603      	mov	r3, r0
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d001      	beq.n	800c9c8 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 800c9c4:	2301      	movs	r3, #1
 800c9c6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c9c8:	6878      	ldr	r0, [r7, #4]
 800c9ca:	f000 f911 	bl	800cbf0 <USB_FlushRxFifo>
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d001      	beq.n	800c9d8 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 800c9d4:	2301      	movs	r3, #1
 800c9d6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9de:	461a      	mov	r2, r3
 800c9e0:	2300      	movs	r3, #0
 800c9e2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9ea:	461a      	mov	r2, r3
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9f6:	461a      	mov	r2, r3
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	613b      	str	r3, [r7, #16]
 800ca00:	e043      	b.n	800ca8a <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ca02:	693b      	ldr	r3, [r7, #16]
 800ca04:	015a      	lsls	r2, r3, #5
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	4413      	add	r3, r2
 800ca0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ca14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ca18:	d118      	bne.n	800ca4c <USB_DevInit+0x184>
    {
      if (i == 0U)
 800ca1a:	693b      	ldr	r3, [r7, #16]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d10a      	bne.n	800ca36 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ca20:	693b      	ldr	r3, [r7, #16]
 800ca22:	015a      	lsls	r2, r3, #5
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	4413      	add	r3, r2
 800ca28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca2c:	461a      	mov	r2, r3
 800ca2e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ca32:	6013      	str	r3, [r2, #0]
 800ca34:	e013      	b.n	800ca5e <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ca36:	693b      	ldr	r3, [r7, #16]
 800ca38:	015a      	lsls	r2, r3, #5
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	4413      	add	r3, r2
 800ca3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca42:	461a      	mov	r2, r3
 800ca44:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ca48:	6013      	str	r3, [r2, #0]
 800ca4a:	e008      	b.n	800ca5e <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ca4c:	693b      	ldr	r3, [r7, #16]
 800ca4e:	015a      	lsls	r2, r3, #5
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	4413      	add	r3, r2
 800ca54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca58:	461a      	mov	r2, r3
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ca5e:	693b      	ldr	r3, [r7, #16]
 800ca60:	015a      	lsls	r2, r3, #5
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	4413      	add	r3, r2
 800ca66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca6a:	461a      	mov	r2, r3
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ca70:	693b      	ldr	r3, [r7, #16]
 800ca72:	015a      	lsls	r2, r3, #5
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	4413      	add	r3, r2
 800ca78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca7c:	461a      	mov	r2, r3
 800ca7e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ca82:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ca84:	693b      	ldr	r3, [r7, #16]
 800ca86:	3301      	adds	r3, #1
 800ca88:	613b      	str	r3, [r7, #16]
 800ca8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca8c:	693a      	ldr	r2, [r7, #16]
 800ca8e:	429a      	cmp	r2, r3
 800ca90:	d3b7      	bcc.n	800ca02 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ca92:	2300      	movs	r3, #0
 800ca94:	613b      	str	r3, [r7, #16]
 800ca96:	e043      	b.n	800cb20 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ca98:	693b      	ldr	r3, [r7, #16]
 800ca9a:	015a      	lsls	r2, r3, #5
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	4413      	add	r3, r2
 800caa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800caaa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800caae:	d118      	bne.n	800cae2 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 800cab0:	693b      	ldr	r3, [r7, #16]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d10a      	bne.n	800cacc <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800cab6:	693b      	ldr	r3, [r7, #16]
 800cab8:	015a      	lsls	r2, r3, #5
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	4413      	add	r3, r2
 800cabe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cac2:	461a      	mov	r2, r3
 800cac4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cac8:	6013      	str	r3, [r2, #0]
 800caca:	e013      	b.n	800caf4 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800cacc:	693b      	ldr	r3, [r7, #16]
 800cace:	015a      	lsls	r2, r3, #5
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	4413      	add	r3, r2
 800cad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cad8:	461a      	mov	r2, r3
 800cada:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800cade:	6013      	str	r3, [r2, #0]
 800cae0:	e008      	b.n	800caf4 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800cae2:	693b      	ldr	r3, [r7, #16]
 800cae4:	015a      	lsls	r2, r3, #5
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	4413      	add	r3, r2
 800caea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800caee:	461a      	mov	r2, r3
 800caf0:	2300      	movs	r3, #0
 800caf2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800caf4:	693b      	ldr	r3, [r7, #16]
 800caf6:	015a      	lsls	r2, r3, #5
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	4413      	add	r3, r2
 800cafc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb00:	461a      	mov	r2, r3
 800cb02:	2300      	movs	r3, #0
 800cb04:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800cb06:	693b      	ldr	r3, [r7, #16]
 800cb08:	015a      	lsls	r2, r3, #5
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	4413      	add	r3, r2
 800cb0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb12:	461a      	mov	r2, r3
 800cb14:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cb18:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cb1a:	693b      	ldr	r3, [r7, #16]
 800cb1c:	3301      	adds	r3, #1
 800cb1e:	613b      	str	r3, [r7, #16]
 800cb20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb22:	693a      	ldr	r2, [r7, #16]
 800cb24:	429a      	cmp	r2, r3
 800cb26:	d3b7      	bcc.n	800ca98 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb2e:	691b      	ldr	r3, [r3, #16]
 800cb30:	68fa      	ldr	r2, [r7, #12]
 800cb32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cb36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cb3a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	2200      	movs	r2, #0
 800cb40:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800cb48:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800cb4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d105      	bne.n	800cb5c <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	699b      	ldr	r3, [r3, #24]
 800cb54:	f043 0210 	orr.w	r2, r3, #16
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	699a      	ldr	r2, [r3, #24]
 800cb60:	4b0e      	ldr	r3, [pc, #56]	; (800cb9c <USB_DevInit+0x2d4>)
 800cb62:	4313      	orrs	r3, r2
 800cb64:	687a      	ldr	r2, [r7, #4]
 800cb66:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800cb68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d005      	beq.n	800cb7a <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	699b      	ldr	r3, [r3, #24]
 800cb72:	f043 0208 	orr.w	r2, r3, #8
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800cb7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb7c:	2b01      	cmp	r3, #1
 800cb7e:	d105      	bne.n	800cb8c <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	699a      	ldr	r2, [r3, #24]
 800cb84:	4b06      	ldr	r3, [pc, #24]	; (800cba0 <USB_DevInit+0x2d8>)
 800cb86:	4313      	orrs	r3, r2
 800cb88:	687a      	ldr	r2, [r7, #4]
 800cb8a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800cb8c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb8e:	4618      	mov	r0, r3
 800cb90:	3718      	adds	r7, #24
 800cb92:	46bd      	mov	sp, r7
 800cb94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cb98:	b004      	add	sp, #16
 800cb9a:	4770      	bx	lr
 800cb9c:	803c3800 	.word	0x803c3800
 800cba0:	40000004 	.word	0x40000004

0800cba4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800cba4:	b480      	push	{r7}
 800cba6:	b085      	sub	sp, #20
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]
 800cbac:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800cbae:	2300      	movs	r3, #0
 800cbb0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800cbb2:	683b      	ldr	r3, [r7, #0]
 800cbb4:	019b      	lsls	r3, r3, #6
 800cbb6:	f043 0220 	orr.w	r2, r3, #32
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	3301      	adds	r3, #1
 800cbc2:	60fb      	str	r3, [r7, #12]
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	4a09      	ldr	r2, [pc, #36]	; (800cbec <USB_FlushTxFifo+0x48>)
 800cbc8:	4293      	cmp	r3, r2
 800cbca:	d901      	bls.n	800cbd0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800cbcc:	2303      	movs	r3, #3
 800cbce:	e006      	b.n	800cbde <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	691b      	ldr	r3, [r3, #16]
 800cbd4:	f003 0320 	and.w	r3, r3, #32
 800cbd8:	2b20      	cmp	r3, #32
 800cbda:	d0f0      	beq.n	800cbbe <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800cbdc:	2300      	movs	r3, #0
}
 800cbde:	4618      	mov	r0, r3
 800cbe0:	3714      	adds	r7, #20
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe8:	4770      	bx	lr
 800cbea:	bf00      	nop
 800cbec:	00030d40 	.word	0x00030d40

0800cbf0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800cbf0:	b480      	push	{r7}
 800cbf2:	b085      	sub	sp, #20
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	2210      	movs	r2, #16
 800cc00:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	3301      	adds	r3, #1
 800cc06:	60fb      	str	r3, [r7, #12]
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	4a09      	ldr	r2, [pc, #36]	; (800cc30 <USB_FlushRxFifo+0x40>)
 800cc0c:	4293      	cmp	r3, r2
 800cc0e:	d901      	bls.n	800cc14 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800cc10:	2303      	movs	r3, #3
 800cc12:	e006      	b.n	800cc22 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	691b      	ldr	r3, [r3, #16]
 800cc18:	f003 0310 	and.w	r3, r3, #16
 800cc1c:	2b10      	cmp	r3, #16
 800cc1e:	d0f0      	beq.n	800cc02 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800cc20:	2300      	movs	r3, #0
}
 800cc22:	4618      	mov	r0, r3
 800cc24:	3714      	adds	r7, #20
 800cc26:	46bd      	mov	sp, r7
 800cc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2c:	4770      	bx	lr
 800cc2e:	bf00      	nop
 800cc30:	00030d40 	.word	0x00030d40

0800cc34 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800cc34:	b480      	push	{r7}
 800cc36:	b085      	sub	sp, #20
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	6078      	str	r0, [r7, #4]
 800cc3c:	460b      	mov	r3, r1
 800cc3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc4a:	681a      	ldr	r2, [r3, #0]
 800cc4c:	78fb      	ldrb	r3, [r7, #3]
 800cc4e:	68f9      	ldr	r1, [r7, #12]
 800cc50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cc54:	4313      	orrs	r3, r2
 800cc56:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800cc58:	2300      	movs	r3, #0
}
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	3714      	adds	r7, #20
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc64:	4770      	bx	lr

0800cc66 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800cc66:	b480      	push	{r7}
 800cc68:	b087      	sub	sp, #28
 800cc6a:	af00      	add	r7, sp, #0
 800cc6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800cc72:	693b      	ldr	r3, [r7, #16]
 800cc74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc78:	689b      	ldr	r3, [r3, #8]
 800cc7a:	f003 0306 	and.w	r3, r3, #6
 800cc7e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d102      	bne.n	800cc8c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800cc86:	2300      	movs	r3, #0
 800cc88:	75fb      	strb	r3, [r7, #23]
 800cc8a:	e00a      	b.n	800cca2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	2b02      	cmp	r3, #2
 800cc90:	d002      	beq.n	800cc98 <USB_GetDevSpeed+0x32>
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	2b06      	cmp	r3, #6
 800cc96:	d102      	bne.n	800cc9e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800cc98:	2302      	movs	r3, #2
 800cc9a:	75fb      	strb	r3, [r7, #23]
 800cc9c:	e001      	b.n	800cca2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800cc9e:	230f      	movs	r3, #15
 800cca0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800cca2:	7dfb      	ldrb	r3, [r7, #23]
}
 800cca4:	4618      	mov	r0, r3
 800cca6:	371c      	adds	r7, #28
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccae:	4770      	bx	lr

0800ccb0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ccb0:	b480      	push	{r7}
 800ccb2:	b085      	sub	sp, #20
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	6078      	str	r0, [r7, #4]
 800ccb8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ccbe:	683b      	ldr	r3, [r7, #0]
 800ccc0:	781b      	ldrb	r3, [r3, #0]
 800ccc2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ccc4:	683b      	ldr	r3, [r7, #0]
 800ccc6:	785b      	ldrb	r3, [r3, #1]
 800ccc8:	2b01      	cmp	r3, #1
 800ccca:	d139      	bne.n	800cd40 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ccd2:	69da      	ldr	r2, [r3, #28]
 800ccd4:	683b      	ldr	r3, [r7, #0]
 800ccd6:	781b      	ldrb	r3, [r3, #0]
 800ccd8:	f003 030f 	and.w	r3, r3, #15
 800ccdc:	2101      	movs	r1, #1
 800ccde:	fa01 f303 	lsl.w	r3, r1, r3
 800cce2:	b29b      	uxth	r3, r3
 800cce4:	68f9      	ldr	r1, [r7, #12]
 800cce6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ccea:	4313      	orrs	r3, r2
 800ccec:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ccee:	68bb      	ldr	r3, [r7, #8]
 800ccf0:	015a      	lsls	r2, r3, #5
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	4413      	add	r3, r2
 800ccf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d153      	bne.n	800cdac <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cd04:	68bb      	ldr	r3, [r7, #8]
 800cd06:	015a      	lsls	r2, r3, #5
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	4413      	add	r3, r2
 800cd0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd10:	681a      	ldr	r2, [r3, #0]
 800cd12:	683b      	ldr	r3, [r7, #0]
 800cd14:	689b      	ldr	r3, [r3, #8]
 800cd16:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800cd1a:	683b      	ldr	r3, [r7, #0]
 800cd1c:	78db      	ldrb	r3, [r3, #3]
 800cd1e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cd20:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800cd22:	68bb      	ldr	r3, [r7, #8]
 800cd24:	059b      	lsls	r3, r3, #22
 800cd26:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cd28:	431a      	orrs	r2, r3
 800cd2a:	68bb      	ldr	r3, [r7, #8]
 800cd2c:	0159      	lsls	r1, r3, #5
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	440b      	add	r3, r1
 800cd32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd36:	4619      	mov	r1, r3
 800cd38:	4b20      	ldr	r3, [pc, #128]	; (800cdbc <USB_ActivateEndpoint+0x10c>)
 800cd3a:	4313      	orrs	r3, r2
 800cd3c:	600b      	str	r3, [r1, #0]
 800cd3e:	e035      	b.n	800cdac <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd46:	69da      	ldr	r2, [r3, #28]
 800cd48:	683b      	ldr	r3, [r7, #0]
 800cd4a:	781b      	ldrb	r3, [r3, #0]
 800cd4c:	f003 030f 	and.w	r3, r3, #15
 800cd50:	2101      	movs	r1, #1
 800cd52:	fa01 f303 	lsl.w	r3, r1, r3
 800cd56:	041b      	lsls	r3, r3, #16
 800cd58:	68f9      	ldr	r1, [r7, #12]
 800cd5a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cd5e:	4313      	orrs	r3, r2
 800cd60:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800cd62:	68bb      	ldr	r3, [r7, #8]
 800cd64:	015a      	lsls	r2, r3, #5
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	4413      	add	r3, r2
 800cd6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d119      	bne.n	800cdac <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cd78:	68bb      	ldr	r3, [r7, #8]
 800cd7a:	015a      	lsls	r2, r3, #5
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	4413      	add	r3, r2
 800cd80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd84:	681a      	ldr	r2, [r3, #0]
 800cd86:	683b      	ldr	r3, [r7, #0]
 800cd88:	689b      	ldr	r3, [r3, #8]
 800cd8a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800cd8e:	683b      	ldr	r3, [r7, #0]
 800cd90:	78db      	ldrb	r3, [r3, #3]
 800cd92:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cd94:	430b      	orrs	r3, r1
 800cd96:	431a      	orrs	r2, r3
 800cd98:	68bb      	ldr	r3, [r7, #8]
 800cd9a:	0159      	lsls	r1, r3, #5
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	440b      	add	r3, r1
 800cda0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cda4:	4619      	mov	r1, r3
 800cda6:	4b05      	ldr	r3, [pc, #20]	; (800cdbc <USB_ActivateEndpoint+0x10c>)
 800cda8:	4313      	orrs	r3, r2
 800cdaa:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800cdac:	2300      	movs	r3, #0
}
 800cdae:	4618      	mov	r0, r3
 800cdb0:	3714      	adds	r7, #20
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb8:	4770      	bx	lr
 800cdba:	bf00      	nop
 800cdbc:	10008000 	.word	0x10008000

0800cdc0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cdc0:	b480      	push	{r7}
 800cdc2:	b085      	sub	sp, #20
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
 800cdc8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cdce:	683b      	ldr	r3, [r7, #0]
 800cdd0:	781b      	ldrb	r3, [r3, #0]
 800cdd2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	785b      	ldrb	r3, [r3, #1]
 800cdd8:	2b01      	cmp	r3, #1
 800cdda:	d161      	bne.n	800cea0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cddc:	68bb      	ldr	r3, [r7, #8]
 800cdde:	015a      	lsls	r2, r3, #5
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	4413      	add	r3, r2
 800cde4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cdee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cdf2:	d11f      	bne.n	800ce34 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800cdf4:	68bb      	ldr	r3, [r7, #8]
 800cdf6:	015a      	lsls	r2, r3, #5
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	4413      	add	r3, r2
 800cdfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	68ba      	ldr	r2, [r7, #8]
 800ce04:	0151      	lsls	r1, r2, #5
 800ce06:	68fa      	ldr	r2, [r7, #12]
 800ce08:	440a      	add	r2, r1
 800ce0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce0e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ce12:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ce14:	68bb      	ldr	r3, [r7, #8]
 800ce16:	015a      	lsls	r2, r3, #5
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	4413      	add	r3, r2
 800ce1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	68ba      	ldr	r2, [r7, #8]
 800ce24:	0151      	lsls	r1, r2, #5
 800ce26:	68fa      	ldr	r2, [r7, #12]
 800ce28:	440a      	add	r2, r1
 800ce2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce2e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ce32:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ce3c:	683b      	ldr	r3, [r7, #0]
 800ce3e:	781b      	ldrb	r3, [r3, #0]
 800ce40:	f003 030f 	and.w	r3, r3, #15
 800ce44:	2101      	movs	r1, #1
 800ce46:	fa01 f303 	lsl.w	r3, r1, r3
 800ce4a:	b29b      	uxth	r3, r3
 800ce4c:	43db      	mvns	r3, r3
 800ce4e:	68f9      	ldr	r1, [r7, #12]
 800ce50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ce54:	4013      	ands	r3, r2
 800ce56:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce5e:	69da      	ldr	r2, [r3, #28]
 800ce60:	683b      	ldr	r3, [r7, #0]
 800ce62:	781b      	ldrb	r3, [r3, #0]
 800ce64:	f003 030f 	and.w	r3, r3, #15
 800ce68:	2101      	movs	r1, #1
 800ce6a:	fa01 f303 	lsl.w	r3, r1, r3
 800ce6e:	b29b      	uxth	r3, r3
 800ce70:	43db      	mvns	r3, r3
 800ce72:	68f9      	ldr	r1, [r7, #12]
 800ce74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ce78:	4013      	ands	r3, r2
 800ce7a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ce7c:	68bb      	ldr	r3, [r7, #8]
 800ce7e:	015a      	lsls	r2, r3, #5
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	4413      	add	r3, r2
 800ce84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce88:	681a      	ldr	r2, [r3, #0]
 800ce8a:	68bb      	ldr	r3, [r7, #8]
 800ce8c:	0159      	lsls	r1, r3, #5
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	440b      	add	r3, r1
 800ce92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce96:	4619      	mov	r1, r3
 800ce98:	4b35      	ldr	r3, [pc, #212]	; (800cf70 <USB_DeactivateEndpoint+0x1b0>)
 800ce9a:	4013      	ands	r3, r2
 800ce9c:	600b      	str	r3, [r1, #0]
 800ce9e:	e060      	b.n	800cf62 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cea0:	68bb      	ldr	r3, [r7, #8]
 800cea2:	015a      	lsls	r2, r3, #5
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	4413      	add	r3, r2
 800cea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ceb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ceb6:	d11f      	bne.n	800cef8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ceb8:	68bb      	ldr	r3, [r7, #8]
 800ceba:	015a      	lsls	r2, r3, #5
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	4413      	add	r3, r2
 800cec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	68ba      	ldr	r2, [r7, #8]
 800cec8:	0151      	lsls	r1, r2, #5
 800ceca:	68fa      	ldr	r2, [r7, #12]
 800cecc:	440a      	add	r2, r1
 800cece:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ced2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ced6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800ced8:	68bb      	ldr	r3, [r7, #8]
 800ceda:	015a      	lsls	r2, r3, #5
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	4413      	add	r3, r2
 800cee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	68ba      	ldr	r2, [r7, #8]
 800cee8:	0151      	lsls	r1, r2, #5
 800ceea:	68fa      	ldr	r2, [r7, #12]
 800ceec:	440a      	add	r2, r1
 800ceee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cef2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cef6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cefe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cf00:	683b      	ldr	r3, [r7, #0]
 800cf02:	781b      	ldrb	r3, [r3, #0]
 800cf04:	f003 030f 	and.w	r3, r3, #15
 800cf08:	2101      	movs	r1, #1
 800cf0a:	fa01 f303 	lsl.w	r3, r1, r3
 800cf0e:	041b      	lsls	r3, r3, #16
 800cf10:	43db      	mvns	r3, r3
 800cf12:	68f9      	ldr	r1, [r7, #12]
 800cf14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cf18:	4013      	ands	r3, r2
 800cf1a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf22:	69da      	ldr	r2, [r3, #28]
 800cf24:	683b      	ldr	r3, [r7, #0]
 800cf26:	781b      	ldrb	r3, [r3, #0]
 800cf28:	f003 030f 	and.w	r3, r3, #15
 800cf2c:	2101      	movs	r1, #1
 800cf2e:	fa01 f303 	lsl.w	r3, r1, r3
 800cf32:	041b      	lsls	r3, r3, #16
 800cf34:	43db      	mvns	r3, r3
 800cf36:	68f9      	ldr	r1, [r7, #12]
 800cf38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cf3c:	4013      	ands	r3, r2
 800cf3e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800cf40:	68bb      	ldr	r3, [r7, #8]
 800cf42:	015a      	lsls	r2, r3, #5
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	4413      	add	r3, r2
 800cf48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf4c:	681a      	ldr	r2, [r3, #0]
 800cf4e:	68bb      	ldr	r3, [r7, #8]
 800cf50:	0159      	lsls	r1, r3, #5
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	440b      	add	r3, r1
 800cf56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf5a:	4619      	mov	r1, r3
 800cf5c:	4b05      	ldr	r3, [pc, #20]	; (800cf74 <USB_DeactivateEndpoint+0x1b4>)
 800cf5e:	4013      	ands	r3, r2
 800cf60:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800cf62:	2300      	movs	r3, #0
}
 800cf64:	4618      	mov	r0, r3
 800cf66:	3714      	adds	r7, #20
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6e:	4770      	bx	lr
 800cf70:	ec337800 	.word	0xec337800
 800cf74:	eff37800 	.word	0xeff37800

0800cf78 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b08a      	sub	sp, #40	; 0x28
 800cf7c:	af02      	add	r7, sp, #8
 800cf7e:	60f8      	str	r0, [r7, #12]
 800cf80:	60b9      	str	r1, [r7, #8]
 800cf82:	4613      	mov	r3, r2
 800cf84:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800cf8a:	68bb      	ldr	r3, [r7, #8]
 800cf8c:	781b      	ldrb	r3, [r3, #0]
 800cf8e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cf90:	68bb      	ldr	r3, [r7, #8]
 800cf92:	785b      	ldrb	r3, [r3, #1]
 800cf94:	2b01      	cmp	r3, #1
 800cf96:	f040 8163 	bne.w	800d260 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800cf9a:	68bb      	ldr	r3, [r7, #8]
 800cf9c:	695b      	ldr	r3, [r3, #20]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d132      	bne.n	800d008 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cfa2:	69bb      	ldr	r3, [r7, #24]
 800cfa4:	015a      	lsls	r2, r3, #5
 800cfa6:	69fb      	ldr	r3, [r7, #28]
 800cfa8:	4413      	add	r3, r2
 800cfaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfae:	691a      	ldr	r2, [r3, #16]
 800cfb0:	69bb      	ldr	r3, [r7, #24]
 800cfb2:	0159      	lsls	r1, r3, #5
 800cfb4:	69fb      	ldr	r3, [r7, #28]
 800cfb6:	440b      	add	r3, r1
 800cfb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfbc:	4619      	mov	r1, r3
 800cfbe:	4ba5      	ldr	r3, [pc, #660]	; (800d254 <USB_EPStartXfer+0x2dc>)
 800cfc0:	4013      	ands	r3, r2
 800cfc2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800cfc4:	69bb      	ldr	r3, [r7, #24]
 800cfc6:	015a      	lsls	r2, r3, #5
 800cfc8:	69fb      	ldr	r3, [r7, #28]
 800cfca:	4413      	add	r3, r2
 800cfcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfd0:	691b      	ldr	r3, [r3, #16]
 800cfd2:	69ba      	ldr	r2, [r7, #24]
 800cfd4:	0151      	lsls	r1, r2, #5
 800cfd6:	69fa      	ldr	r2, [r7, #28]
 800cfd8:	440a      	add	r2, r1
 800cfda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cfde:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cfe2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cfe4:	69bb      	ldr	r3, [r7, #24]
 800cfe6:	015a      	lsls	r2, r3, #5
 800cfe8:	69fb      	ldr	r3, [r7, #28]
 800cfea:	4413      	add	r3, r2
 800cfec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cff0:	691a      	ldr	r2, [r3, #16]
 800cff2:	69bb      	ldr	r3, [r7, #24]
 800cff4:	0159      	lsls	r1, r3, #5
 800cff6:	69fb      	ldr	r3, [r7, #28]
 800cff8:	440b      	add	r3, r1
 800cffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cffe:	4619      	mov	r1, r3
 800d000:	4b95      	ldr	r3, [pc, #596]	; (800d258 <USB_EPStartXfer+0x2e0>)
 800d002:	4013      	ands	r3, r2
 800d004:	610b      	str	r3, [r1, #16]
 800d006:	e074      	b.n	800d0f2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d008:	69bb      	ldr	r3, [r7, #24]
 800d00a:	015a      	lsls	r2, r3, #5
 800d00c:	69fb      	ldr	r3, [r7, #28]
 800d00e:	4413      	add	r3, r2
 800d010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d014:	691a      	ldr	r2, [r3, #16]
 800d016:	69bb      	ldr	r3, [r7, #24]
 800d018:	0159      	lsls	r1, r3, #5
 800d01a:	69fb      	ldr	r3, [r7, #28]
 800d01c:	440b      	add	r3, r1
 800d01e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d022:	4619      	mov	r1, r3
 800d024:	4b8c      	ldr	r3, [pc, #560]	; (800d258 <USB_EPStartXfer+0x2e0>)
 800d026:	4013      	ands	r3, r2
 800d028:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d02a:	69bb      	ldr	r3, [r7, #24]
 800d02c:	015a      	lsls	r2, r3, #5
 800d02e:	69fb      	ldr	r3, [r7, #28]
 800d030:	4413      	add	r3, r2
 800d032:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d036:	691a      	ldr	r2, [r3, #16]
 800d038:	69bb      	ldr	r3, [r7, #24]
 800d03a:	0159      	lsls	r1, r3, #5
 800d03c:	69fb      	ldr	r3, [r7, #28]
 800d03e:	440b      	add	r3, r1
 800d040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d044:	4619      	mov	r1, r3
 800d046:	4b83      	ldr	r3, [pc, #524]	; (800d254 <USB_EPStartXfer+0x2dc>)
 800d048:	4013      	ands	r3, r2
 800d04a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800d04c:	69bb      	ldr	r3, [r7, #24]
 800d04e:	015a      	lsls	r2, r3, #5
 800d050:	69fb      	ldr	r3, [r7, #28]
 800d052:	4413      	add	r3, r2
 800d054:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d058:	691a      	ldr	r2, [r3, #16]
 800d05a:	68bb      	ldr	r3, [r7, #8]
 800d05c:	6959      	ldr	r1, [r3, #20]
 800d05e:	68bb      	ldr	r3, [r7, #8]
 800d060:	689b      	ldr	r3, [r3, #8]
 800d062:	440b      	add	r3, r1
 800d064:	1e59      	subs	r1, r3, #1
 800d066:	68bb      	ldr	r3, [r7, #8]
 800d068:	689b      	ldr	r3, [r3, #8]
 800d06a:	fbb1 f3f3 	udiv	r3, r1, r3
 800d06e:	04d9      	lsls	r1, r3, #19
 800d070:	4b7a      	ldr	r3, [pc, #488]	; (800d25c <USB_EPStartXfer+0x2e4>)
 800d072:	400b      	ands	r3, r1
 800d074:	69b9      	ldr	r1, [r7, #24]
 800d076:	0148      	lsls	r0, r1, #5
 800d078:	69f9      	ldr	r1, [r7, #28]
 800d07a:	4401      	add	r1, r0
 800d07c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d080:	4313      	orrs	r3, r2
 800d082:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d084:	69bb      	ldr	r3, [r7, #24]
 800d086:	015a      	lsls	r2, r3, #5
 800d088:	69fb      	ldr	r3, [r7, #28]
 800d08a:	4413      	add	r3, r2
 800d08c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d090:	691a      	ldr	r2, [r3, #16]
 800d092:	68bb      	ldr	r3, [r7, #8]
 800d094:	695b      	ldr	r3, [r3, #20]
 800d096:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d09a:	69b9      	ldr	r1, [r7, #24]
 800d09c:	0148      	lsls	r0, r1, #5
 800d09e:	69f9      	ldr	r1, [r7, #28]
 800d0a0:	4401      	add	r1, r0
 800d0a2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d0a6:	4313      	orrs	r3, r2
 800d0a8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800d0aa:	68bb      	ldr	r3, [r7, #8]
 800d0ac:	78db      	ldrb	r3, [r3, #3]
 800d0ae:	2b01      	cmp	r3, #1
 800d0b0:	d11f      	bne.n	800d0f2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800d0b2:	69bb      	ldr	r3, [r7, #24]
 800d0b4:	015a      	lsls	r2, r3, #5
 800d0b6:	69fb      	ldr	r3, [r7, #28]
 800d0b8:	4413      	add	r3, r2
 800d0ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0be:	691b      	ldr	r3, [r3, #16]
 800d0c0:	69ba      	ldr	r2, [r7, #24]
 800d0c2:	0151      	lsls	r1, r2, #5
 800d0c4:	69fa      	ldr	r2, [r7, #28]
 800d0c6:	440a      	add	r2, r1
 800d0c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d0cc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800d0d0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800d0d2:	69bb      	ldr	r3, [r7, #24]
 800d0d4:	015a      	lsls	r2, r3, #5
 800d0d6:	69fb      	ldr	r3, [r7, #28]
 800d0d8:	4413      	add	r3, r2
 800d0da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0de:	691b      	ldr	r3, [r3, #16]
 800d0e0:	69ba      	ldr	r2, [r7, #24]
 800d0e2:	0151      	lsls	r1, r2, #5
 800d0e4:	69fa      	ldr	r2, [r7, #28]
 800d0e6:	440a      	add	r2, r1
 800d0e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d0ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d0f0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800d0f2:	79fb      	ldrb	r3, [r7, #7]
 800d0f4:	2b01      	cmp	r3, #1
 800d0f6:	d14b      	bne.n	800d190 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d0f8:	68bb      	ldr	r3, [r7, #8]
 800d0fa:	691b      	ldr	r3, [r3, #16]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d009      	beq.n	800d114 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d100:	69bb      	ldr	r3, [r7, #24]
 800d102:	015a      	lsls	r2, r3, #5
 800d104:	69fb      	ldr	r3, [r7, #28]
 800d106:	4413      	add	r3, r2
 800d108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d10c:	461a      	mov	r2, r3
 800d10e:	68bb      	ldr	r3, [r7, #8]
 800d110:	691b      	ldr	r3, [r3, #16]
 800d112:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800d114:	68bb      	ldr	r3, [r7, #8]
 800d116:	78db      	ldrb	r3, [r3, #3]
 800d118:	2b01      	cmp	r3, #1
 800d11a:	d128      	bne.n	800d16e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d11c:	69fb      	ldr	r3, [r7, #28]
 800d11e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d122:	689b      	ldr	r3, [r3, #8]
 800d124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d110      	bne.n	800d14e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d12c:	69bb      	ldr	r3, [r7, #24]
 800d12e:	015a      	lsls	r2, r3, #5
 800d130:	69fb      	ldr	r3, [r7, #28]
 800d132:	4413      	add	r3, r2
 800d134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	69ba      	ldr	r2, [r7, #24]
 800d13c:	0151      	lsls	r1, r2, #5
 800d13e:	69fa      	ldr	r2, [r7, #28]
 800d140:	440a      	add	r2, r1
 800d142:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d146:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d14a:	6013      	str	r3, [r2, #0]
 800d14c:	e00f      	b.n	800d16e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d14e:	69bb      	ldr	r3, [r7, #24]
 800d150:	015a      	lsls	r2, r3, #5
 800d152:	69fb      	ldr	r3, [r7, #28]
 800d154:	4413      	add	r3, r2
 800d156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	69ba      	ldr	r2, [r7, #24]
 800d15e:	0151      	lsls	r1, r2, #5
 800d160:	69fa      	ldr	r2, [r7, #28]
 800d162:	440a      	add	r2, r1
 800d164:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d16c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d16e:	69bb      	ldr	r3, [r7, #24]
 800d170:	015a      	lsls	r2, r3, #5
 800d172:	69fb      	ldr	r3, [r7, #28]
 800d174:	4413      	add	r3, r2
 800d176:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	69ba      	ldr	r2, [r7, #24]
 800d17e:	0151      	lsls	r1, r2, #5
 800d180:	69fa      	ldr	r2, [r7, #28]
 800d182:	440a      	add	r2, r1
 800d184:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d188:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d18c:	6013      	str	r3, [r2, #0]
 800d18e:	e133      	b.n	800d3f8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d190:	69bb      	ldr	r3, [r7, #24]
 800d192:	015a      	lsls	r2, r3, #5
 800d194:	69fb      	ldr	r3, [r7, #28]
 800d196:	4413      	add	r3, r2
 800d198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	69ba      	ldr	r2, [r7, #24]
 800d1a0:	0151      	lsls	r1, r2, #5
 800d1a2:	69fa      	ldr	r2, [r7, #28]
 800d1a4:	440a      	add	r2, r1
 800d1a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d1aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d1ae:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d1b0:	68bb      	ldr	r3, [r7, #8]
 800d1b2:	78db      	ldrb	r3, [r3, #3]
 800d1b4:	2b01      	cmp	r3, #1
 800d1b6:	d015      	beq.n	800d1e4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800d1b8:	68bb      	ldr	r3, [r7, #8]
 800d1ba:	695b      	ldr	r3, [r3, #20]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	f000 811b 	beq.w	800d3f8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d1c2:	69fb      	ldr	r3, [r7, #28]
 800d1c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d1ca:	68bb      	ldr	r3, [r7, #8]
 800d1cc:	781b      	ldrb	r3, [r3, #0]
 800d1ce:	f003 030f 	and.w	r3, r3, #15
 800d1d2:	2101      	movs	r1, #1
 800d1d4:	fa01 f303 	lsl.w	r3, r1, r3
 800d1d8:	69f9      	ldr	r1, [r7, #28]
 800d1da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d1de:	4313      	orrs	r3, r2
 800d1e0:	634b      	str	r3, [r1, #52]	; 0x34
 800d1e2:	e109      	b.n	800d3f8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d1e4:	69fb      	ldr	r3, [r7, #28]
 800d1e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1ea:	689b      	ldr	r3, [r3, #8]
 800d1ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d110      	bne.n	800d216 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d1f4:	69bb      	ldr	r3, [r7, #24]
 800d1f6:	015a      	lsls	r2, r3, #5
 800d1f8:	69fb      	ldr	r3, [r7, #28]
 800d1fa:	4413      	add	r3, r2
 800d1fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	69ba      	ldr	r2, [r7, #24]
 800d204:	0151      	lsls	r1, r2, #5
 800d206:	69fa      	ldr	r2, [r7, #28]
 800d208:	440a      	add	r2, r1
 800d20a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d20e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d212:	6013      	str	r3, [r2, #0]
 800d214:	e00f      	b.n	800d236 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d216:	69bb      	ldr	r3, [r7, #24]
 800d218:	015a      	lsls	r2, r3, #5
 800d21a:	69fb      	ldr	r3, [r7, #28]
 800d21c:	4413      	add	r3, r2
 800d21e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	69ba      	ldr	r2, [r7, #24]
 800d226:	0151      	lsls	r1, r2, #5
 800d228:	69fa      	ldr	r2, [r7, #28]
 800d22a:	440a      	add	r2, r1
 800d22c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d230:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d234:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800d236:	68bb      	ldr	r3, [r7, #8]
 800d238:	68d9      	ldr	r1, [r3, #12]
 800d23a:	68bb      	ldr	r3, [r7, #8]
 800d23c:	781a      	ldrb	r2, [r3, #0]
 800d23e:	68bb      	ldr	r3, [r7, #8]
 800d240:	695b      	ldr	r3, [r3, #20]
 800d242:	b298      	uxth	r0, r3
 800d244:	79fb      	ldrb	r3, [r7, #7]
 800d246:	9300      	str	r3, [sp, #0]
 800d248:	4603      	mov	r3, r0
 800d24a:	68f8      	ldr	r0, [r7, #12]
 800d24c:	f000 fa38 	bl	800d6c0 <USB_WritePacket>
 800d250:	e0d2      	b.n	800d3f8 <USB_EPStartXfer+0x480>
 800d252:	bf00      	nop
 800d254:	e007ffff 	.word	0xe007ffff
 800d258:	fff80000 	.word	0xfff80000
 800d25c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d260:	69bb      	ldr	r3, [r7, #24]
 800d262:	015a      	lsls	r2, r3, #5
 800d264:	69fb      	ldr	r3, [r7, #28]
 800d266:	4413      	add	r3, r2
 800d268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d26c:	691a      	ldr	r2, [r3, #16]
 800d26e:	69bb      	ldr	r3, [r7, #24]
 800d270:	0159      	lsls	r1, r3, #5
 800d272:	69fb      	ldr	r3, [r7, #28]
 800d274:	440b      	add	r3, r1
 800d276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d27a:	4619      	mov	r1, r3
 800d27c:	4b61      	ldr	r3, [pc, #388]	; (800d404 <USB_EPStartXfer+0x48c>)
 800d27e:	4013      	ands	r3, r2
 800d280:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d282:	69bb      	ldr	r3, [r7, #24]
 800d284:	015a      	lsls	r2, r3, #5
 800d286:	69fb      	ldr	r3, [r7, #28]
 800d288:	4413      	add	r3, r2
 800d28a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d28e:	691a      	ldr	r2, [r3, #16]
 800d290:	69bb      	ldr	r3, [r7, #24]
 800d292:	0159      	lsls	r1, r3, #5
 800d294:	69fb      	ldr	r3, [r7, #28]
 800d296:	440b      	add	r3, r1
 800d298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d29c:	4619      	mov	r1, r3
 800d29e:	4b5a      	ldr	r3, [pc, #360]	; (800d408 <USB_EPStartXfer+0x490>)
 800d2a0:	4013      	ands	r3, r2
 800d2a2:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800d2a4:	68bb      	ldr	r3, [r7, #8]
 800d2a6:	695b      	ldr	r3, [r3, #20]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d123      	bne.n	800d2f4 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d2ac:	69bb      	ldr	r3, [r7, #24]
 800d2ae:	015a      	lsls	r2, r3, #5
 800d2b0:	69fb      	ldr	r3, [r7, #28]
 800d2b2:	4413      	add	r3, r2
 800d2b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2b8:	691a      	ldr	r2, [r3, #16]
 800d2ba:	68bb      	ldr	r3, [r7, #8]
 800d2bc:	689b      	ldr	r3, [r3, #8]
 800d2be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d2c2:	69b9      	ldr	r1, [r7, #24]
 800d2c4:	0148      	lsls	r0, r1, #5
 800d2c6:	69f9      	ldr	r1, [r7, #28]
 800d2c8:	4401      	add	r1, r0
 800d2ca:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d2ce:	4313      	orrs	r3, r2
 800d2d0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d2d2:	69bb      	ldr	r3, [r7, #24]
 800d2d4:	015a      	lsls	r2, r3, #5
 800d2d6:	69fb      	ldr	r3, [r7, #28]
 800d2d8:	4413      	add	r3, r2
 800d2da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2de:	691b      	ldr	r3, [r3, #16]
 800d2e0:	69ba      	ldr	r2, [r7, #24]
 800d2e2:	0151      	lsls	r1, r2, #5
 800d2e4:	69fa      	ldr	r2, [r7, #28]
 800d2e6:	440a      	add	r2, r1
 800d2e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d2ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d2f0:	6113      	str	r3, [r2, #16]
 800d2f2:	e033      	b.n	800d35c <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d2f4:	68bb      	ldr	r3, [r7, #8]
 800d2f6:	695a      	ldr	r2, [r3, #20]
 800d2f8:	68bb      	ldr	r3, [r7, #8]
 800d2fa:	689b      	ldr	r3, [r3, #8]
 800d2fc:	4413      	add	r3, r2
 800d2fe:	1e5a      	subs	r2, r3, #1
 800d300:	68bb      	ldr	r3, [r7, #8]
 800d302:	689b      	ldr	r3, [r3, #8]
 800d304:	fbb2 f3f3 	udiv	r3, r2, r3
 800d308:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d30a:	69bb      	ldr	r3, [r7, #24]
 800d30c:	015a      	lsls	r2, r3, #5
 800d30e:	69fb      	ldr	r3, [r7, #28]
 800d310:	4413      	add	r3, r2
 800d312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d316:	691a      	ldr	r2, [r3, #16]
 800d318:	8afb      	ldrh	r3, [r7, #22]
 800d31a:	04d9      	lsls	r1, r3, #19
 800d31c:	4b3b      	ldr	r3, [pc, #236]	; (800d40c <USB_EPStartXfer+0x494>)
 800d31e:	400b      	ands	r3, r1
 800d320:	69b9      	ldr	r1, [r7, #24]
 800d322:	0148      	lsls	r0, r1, #5
 800d324:	69f9      	ldr	r1, [r7, #28]
 800d326:	4401      	add	r1, r0
 800d328:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d32c:	4313      	orrs	r3, r2
 800d32e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800d330:	69bb      	ldr	r3, [r7, #24]
 800d332:	015a      	lsls	r2, r3, #5
 800d334:	69fb      	ldr	r3, [r7, #28]
 800d336:	4413      	add	r3, r2
 800d338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d33c:	691a      	ldr	r2, [r3, #16]
 800d33e:	68bb      	ldr	r3, [r7, #8]
 800d340:	689b      	ldr	r3, [r3, #8]
 800d342:	8af9      	ldrh	r1, [r7, #22]
 800d344:	fb01 f303 	mul.w	r3, r1, r3
 800d348:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d34c:	69b9      	ldr	r1, [r7, #24]
 800d34e:	0148      	lsls	r0, r1, #5
 800d350:	69f9      	ldr	r1, [r7, #28]
 800d352:	4401      	add	r1, r0
 800d354:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d358:	4313      	orrs	r3, r2
 800d35a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d35c:	79fb      	ldrb	r3, [r7, #7]
 800d35e:	2b01      	cmp	r3, #1
 800d360:	d10d      	bne.n	800d37e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d362:	68bb      	ldr	r3, [r7, #8]
 800d364:	68db      	ldr	r3, [r3, #12]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d009      	beq.n	800d37e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d36a:	68bb      	ldr	r3, [r7, #8]
 800d36c:	68d9      	ldr	r1, [r3, #12]
 800d36e:	69bb      	ldr	r3, [r7, #24]
 800d370:	015a      	lsls	r2, r3, #5
 800d372:	69fb      	ldr	r3, [r7, #28]
 800d374:	4413      	add	r3, r2
 800d376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d37a:	460a      	mov	r2, r1
 800d37c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800d37e:	68bb      	ldr	r3, [r7, #8]
 800d380:	78db      	ldrb	r3, [r3, #3]
 800d382:	2b01      	cmp	r3, #1
 800d384:	d128      	bne.n	800d3d8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d386:	69fb      	ldr	r3, [r7, #28]
 800d388:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d38c:	689b      	ldr	r3, [r3, #8]
 800d38e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d392:	2b00      	cmp	r3, #0
 800d394:	d110      	bne.n	800d3b8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800d396:	69bb      	ldr	r3, [r7, #24]
 800d398:	015a      	lsls	r2, r3, #5
 800d39a:	69fb      	ldr	r3, [r7, #28]
 800d39c:	4413      	add	r3, r2
 800d39e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	69ba      	ldr	r2, [r7, #24]
 800d3a6:	0151      	lsls	r1, r2, #5
 800d3a8:	69fa      	ldr	r2, [r7, #28]
 800d3aa:	440a      	add	r2, r1
 800d3ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d3b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d3b4:	6013      	str	r3, [r2, #0]
 800d3b6:	e00f      	b.n	800d3d8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800d3b8:	69bb      	ldr	r3, [r7, #24]
 800d3ba:	015a      	lsls	r2, r3, #5
 800d3bc:	69fb      	ldr	r3, [r7, #28]
 800d3be:	4413      	add	r3, r2
 800d3c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	69ba      	ldr	r2, [r7, #24]
 800d3c8:	0151      	lsls	r1, r2, #5
 800d3ca:	69fa      	ldr	r2, [r7, #28]
 800d3cc:	440a      	add	r2, r1
 800d3ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d3d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d3d6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d3d8:	69bb      	ldr	r3, [r7, #24]
 800d3da:	015a      	lsls	r2, r3, #5
 800d3dc:	69fb      	ldr	r3, [r7, #28]
 800d3de:	4413      	add	r3, r2
 800d3e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	69ba      	ldr	r2, [r7, #24]
 800d3e8:	0151      	lsls	r1, r2, #5
 800d3ea:	69fa      	ldr	r2, [r7, #28]
 800d3ec:	440a      	add	r2, r1
 800d3ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d3f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d3f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d3f8:	2300      	movs	r3, #0
}
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	3720      	adds	r7, #32
 800d3fe:	46bd      	mov	sp, r7
 800d400:	bd80      	pop	{r7, pc}
 800d402:	bf00      	nop
 800d404:	fff80000 	.word	0xfff80000
 800d408:	e007ffff 	.word	0xe007ffff
 800d40c:	1ff80000 	.word	0x1ff80000

0800d410 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d410:	b480      	push	{r7}
 800d412:	b087      	sub	sp, #28
 800d414:	af00      	add	r7, sp, #0
 800d416:	60f8      	str	r0, [r7, #12]
 800d418:	60b9      	str	r1, [r7, #8]
 800d41a:	4613      	mov	r3, r2
 800d41c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800d422:	68bb      	ldr	r3, [r7, #8]
 800d424:	781b      	ldrb	r3, [r3, #0]
 800d426:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d428:	68bb      	ldr	r3, [r7, #8]
 800d42a:	785b      	ldrb	r3, [r3, #1]
 800d42c:	2b01      	cmp	r3, #1
 800d42e:	f040 80cd 	bne.w	800d5cc <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d432:	68bb      	ldr	r3, [r7, #8]
 800d434:	695b      	ldr	r3, [r3, #20]
 800d436:	2b00      	cmp	r3, #0
 800d438:	d132      	bne.n	800d4a0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d43a:	693b      	ldr	r3, [r7, #16]
 800d43c:	015a      	lsls	r2, r3, #5
 800d43e:	697b      	ldr	r3, [r7, #20]
 800d440:	4413      	add	r3, r2
 800d442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d446:	691a      	ldr	r2, [r3, #16]
 800d448:	693b      	ldr	r3, [r7, #16]
 800d44a:	0159      	lsls	r1, r3, #5
 800d44c:	697b      	ldr	r3, [r7, #20]
 800d44e:	440b      	add	r3, r1
 800d450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d454:	4619      	mov	r1, r3
 800d456:	4b98      	ldr	r3, [pc, #608]	; (800d6b8 <USB_EP0StartXfer+0x2a8>)
 800d458:	4013      	ands	r3, r2
 800d45a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d45c:	693b      	ldr	r3, [r7, #16]
 800d45e:	015a      	lsls	r2, r3, #5
 800d460:	697b      	ldr	r3, [r7, #20]
 800d462:	4413      	add	r3, r2
 800d464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d468:	691b      	ldr	r3, [r3, #16]
 800d46a:	693a      	ldr	r2, [r7, #16]
 800d46c:	0151      	lsls	r1, r2, #5
 800d46e:	697a      	ldr	r2, [r7, #20]
 800d470:	440a      	add	r2, r1
 800d472:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d476:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d47a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d47c:	693b      	ldr	r3, [r7, #16]
 800d47e:	015a      	lsls	r2, r3, #5
 800d480:	697b      	ldr	r3, [r7, #20]
 800d482:	4413      	add	r3, r2
 800d484:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d488:	691a      	ldr	r2, [r3, #16]
 800d48a:	693b      	ldr	r3, [r7, #16]
 800d48c:	0159      	lsls	r1, r3, #5
 800d48e:	697b      	ldr	r3, [r7, #20]
 800d490:	440b      	add	r3, r1
 800d492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d496:	4619      	mov	r1, r3
 800d498:	4b88      	ldr	r3, [pc, #544]	; (800d6bc <USB_EP0StartXfer+0x2ac>)
 800d49a:	4013      	ands	r3, r2
 800d49c:	610b      	str	r3, [r1, #16]
 800d49e:	e04e      	b.n	800d53e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d4a0:	693b      	ldr	r3, [r7, #16]
 800d4a2:	015a      	lsls	r2, r3, #5
 800d4a4:	697b      	ldr	r3, [r7, #20]
 800d4a6:	4413      	add	r3, r2
 800d4a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4ac:	691a      	ldr	r2, [r3, #16]
 800d4ae:	693b      	ldr	r3, [r7, #16]
 800d4b0:	0159      	lsls	r1, r3, #5
 800d4b2:	697b      	ldr	r3, [r7, #20]
 800d4b4:	440b      	add	r3, r1
 800d4b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4ba:	4619      	mov	r1, r3
 800d4bc:	4b7f      	ldr	r3, [pc, #508]	; (800d6bc <USB_EP0StartXfer+0x2ac>)
 800d4be:	4013      	ands	r3, r2
 800d4c0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d4c2:	693b      	ldr	r3, [r7, #16]
 800d4c4:	015a      	lsls	r2, r3, #5
 800d4c6:	697b      	ldr	r3, [r7, #20]
 800d4c8:	4413      	add	r3, r2
 800d4ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4ce:	691a      	ldr	r2, [r3, #16]
 800d4d0:	693b      	ldr	r3, [r7, #16]
 800d4d2:	0159      	lsls	r1, r3, #5
 800d4d4:	697b      	ldr	r3, [r7, #20]
 800d4d6:	440b      	add	r3, r1
 800d4d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4dc:	4619      	mov	r1, r3
 800d4de:	4b76      	ldr	r3, [pc, #472]	; (800d6b8 <USB_EP0StartXfer+0x2a8>)
 800d4e0:	4013      	ands	r3, r2
 800d4e2:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800d4e4:	68bb      	ldr	r3, [r7, #8]
 800d4e6:	695a      	ldr	r2, [r3, #20]
 800d4e8:	68bb      	ldr	r3, [r7, #8]
 800d4ea:	689b      	ldr	r3, [r3, #8]
 800d4ec:	429a      	cmp	r2, r3
 800d4ee:	d903      	bls.n	800d4f8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800d4f0:	68bb      	ldr	r3, [r7, #8]
 800d4f2:	689a      	ldr	r2, [r3, #8]
 800d4f4:	68bb      	ldr	r3, [r7, #8]
 800d4f6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d4f8:	693b      	ldr	r3, [r7, #16]
 800d4fa:	015a      	lsls	r2, r3, #5
 800d4fc:	697b      	ldr	r3, [r7, #20]
 800d4fe:	4413      	add	r3, r2
 800d500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d504:	691b      	ldr	r3, [r3, #16]
 800d506:	693a      	ldr	r2, [r7, #16]
 800d508:	0151      	lsls	r1, r2, #5
 800d50a:	697a      	ldr	r2, [r7, #20]
 800d50c:	440a      	add	r2, r1
 800d50e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d512:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d516:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d518:	693b      	ldr	r3, [r7, #16]
 800d51a:	015a      	lsls	r2, r3, #5
 800d51c:	697b      	ldr	r3, [r7, #20]
 800d51e:	4413      	add	r3, r2
 800d520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d524:	691a      	ldr	r2, [r3, #16]
 800d526:	68bb      	ldr	r3, [r7, #8]
 800d528:	695b      	ldr	r3, [r3, #20]
 800d52a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d52e:	6939      	ldr	r1, [r7, #16]
 800d530:	0148      	lsls	r0, r1, #5
 800d532:	6979      	ldr	r1, [r7, #20]
 800d534:	4401      	add	r1, r0
 800d536:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d53a:	4313      	orrs	r3, r2
 800d53c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d53e:	79fb      	ldrb	r3, [r7, #7]
 800d540:	2b01      	cmp	r3, #1
 800d542:	d11e      	bne.n	800d582 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d544:	68bb      	ldr	r3, [r7, #8]
 800d546:	691b      	ldr	r3, [r3, #16]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d009      	beq.n	800d560 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d54c:	693b      	ldr	r3, [r7, #16]
 800d54e:	015a      	lsls	r2, r3, #5
 800d550:	697b      	ldr	r3, [r7, #20]
 800d552:	4413      	add	r3, r2
 800d554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d558:	461a      	mov	r2, r3
 800d55a:	68bb      	ldr	r3, [r7, #8]
 800d55c:	691b      	ldr	r3, [r3, #16]
 800d55e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d560:	693b      	ldr	r3, [r7, #16]
 800d562:	015a      	lsls	r2, r3, #5
 800d564:	697b      	ldr	r3, [r7, #20]
 800d566:	4413      	add	r3, r2
 800d568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	693a      	ldr	r2, [r7, #16]
 800d570:	0151      	lsls	r1, r2, #5
 800d572:	697a      	ldr	r2, [r7, #20]
 800d574:	440a      	add	r2, r1
 800d576:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d57a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d57e:	6013      	str	r3, [r2, #0]
 800d580:	e092      	b.n	800d6a8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d582:	693b      	ldr	r3, [r7, #16]
 800d584:	015a      	lsls	r2, r3, #5
 800d586:	697b      	ldr	r3, [r7, #20]
 800d588:	4413      	add	r3, r2
 800d58a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	693a      	ldr	r2, [r7, #16]
 800d592:	0151      	lsls	r1, r2, #5
 800d594:	697a      	ldr	r2, [r7, #20]
 800d596:	440a      	add	r2, r1
 800d598:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d59c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d5a0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800d5a2:	68bb      	ldr	r3, [r7, #8]
 800d5a4:	695b      	ldr	r3, [r3, #20]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d07e      	beq.n	800d6a8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d5aa:	697b      	ldr	r3, [r7, #20]
 800d5ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d5b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d5b2:	68bb      	ldr	r3, [r7, #8]
 800d5b4:	781b      	ldrb	r3, [r3, #0]
 800d5b6:	f003 030f 	and.w	r3, r3, #15
 800d5ba:	2101      	movs	r1, #1
 800d5bc:	fa01 f303 	lsl.w	r3, r1, r3
 800d5c0:	6979      	ldr	r1, [r7, #20]
 800d5c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d5c6:	4313      	orrs	r3, r2
 800d5c8:	634b      	str	r3, [r1, #52]	; 0x34
 800d5ca:	e06d      	b.n	800d6a8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d5cc:	693b      	ldr	r3, [r7, #16]
 800d5ce:	015a      	lsls	r2, r3, #5
 800d5d0:	697b      	ldr	r3, [r7, #20]
 800d5d2:	4413      	add	r3, r2
 800d5d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5d8:	691a      	ldr	r2, [r3, #16]
 800d5da:	693b      	ldr	r3, [r7, #16]
 800d5dc:	0159      	lsls	r1, r3, #5
 800d5de:	697b      	ldr	r3, [r7, #20]
 800d5e0:	440b      	add	r3, r1
 800d5e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5e6:	4619      	mov	r1, r3
 800d5e8:	4b34      	ldr	r3, [pc, #208]	; (800d6bc <USB_EP0StartXfer+0x2ac>)
 800d5ea:	4013      	ands	r3, r2
 800d5ec:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d5ee:	693b      	ldr	r3, [r7, #16]
 800d5f0:	015a      	lsls	r2, r3, #5
 800d5f2:	697b      	ldr	r3, [r7, #20]
 800d5f4:	4413      	add	r3, r2
 800d5f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5fa:	691a      	ldr	r2, [r3, #16]
 800d5fc:	693b      	ldr	r3, [r7, #16]
 800d5fe:	0159      	lsls	r1, r3, #5
 800d600:	697b      	ldr	r3, [r7, #20]
 800d602:	440b      	add	r3, r1
 800d604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d608:	4619      	mov	r1, r3
 800d60a:	4b2b      	ldr	r3, [pc, #172]	; (800d6b8 <USB_EP0StartXfer+0x2a8>)
 800d60c:	4013      	ands	r3, r2
 800d60e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800d610:	68bb      	ldr	r3, [r7, #8]
 800d612:	695b      	ldr	r3, [r3, #20]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d003      	beq.n	800d620 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800d618:	68bb      	ldr	r3, [r7, #8]
 800d61a:	689a      	ldr	r2, [r3, #8]
 800d61c:	68bb      	ldr	r3, [r7, #8]
 800d61e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d620:	693b      	ldr	r3, [r7, #16]
 800d622:	015a      	lsls	r2, r3, #5
 800d624:	697b      	ldr	r3, [r7, #20]
 800d626:	4413      	add	r3, r2
 800d628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d62c:	691b      	ldr	r3, [r3, #16]
 800d62e:	693a      	ldr	r2, [r7, #16]
 800d630:	0151      	lsls	r1, r2, #5
 800d632:	697a      	ldr	r2, [r7, #20]
 800d634:	440a      	add	r2, r1
 800d636:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d63a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d63e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800d640:	693b      	ldr	r3, [r7, #16]
 800d642:	015a      	lsls	r2, r3, #5
 800d644:	697b      	ldr	r3, [r7, #20]
 800d646:	4413      	add	r3, r2
 800d648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d64c:	691a      	ldr	r2, [r3, #16]
 800d64e:	68bb      	ldr	r3, [r7, #8]
 800d650:	689b      	ldr	r3, [r3, #8]
 800d652:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d656:	6939      	ldr	r1, [r7, #16]
 800d658:	0148      	lsls	r0, r1, #5
 800d65a:	6979      	ldr	r1, [r7, #20]
 800d65c:	4401      	add	r1, r0
 800d65e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d662:	4313      	orrs	r3, r2
 800d664:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800d666:	79fb      	ldrb	r3, [r7, #7]
 800d668:	2b01      	cmp	r3, #1
 800d66a:	d10d      	bne.n	800d688 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d66c:	68bb      	ldr	r3, [r7, #8]
 800d66e:	68db      	ldr	r3, [r3, #12]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d009      	beq.n	800d688 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d674:	68bb      	ldr	r3, [r7, #8]
 800d676:	68d9      	ldr	r1, [r3, #12]
 800d678:	693b      	ldr	r3, [r7, #16]
 800d67a:	015a      	lsls	r2, r3, #5
 800d67c:	697b      	ldr	r3, [r7, #20]
 800d67e:	4413      	add	r3, r2
 800d680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d684:	460a      	mov	r2, r1
 800d686:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d688:	693b      	ldr	r3, [r7, #16]
 800d68a:	015a      	lsls	r2, r3, #5
 800d68c:	697b      	ldr	r3, [r7, #20]
 800d68e:	4413      	add	r3, r2
 800d690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	693a      	ldr	r2, [r7, #16]
 800d698:	0151      	lsls	r1, r2, #5
 800d69a:	697a      	ldr	r2, [r7, #20]
 800d69c:	440a      	add	r2, r1
 800d69e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d6a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d6a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d6a8:	2300      	movs	r3, #0
}
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	371c      	adds	r7, #28
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b4:	4770      	bx	lr
 800d6b6:	bf00      	nop
 800d6b8:	e007ffff 	.word	0xe007ffff
 800d6bc:	fff80000 	.word	0xfff80000

0800d6c0 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d6c0:	b480      	push	{r7}
 800d6c2:	b089      	sub	sp, #36	; 0x24
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	60f8      	str	r0, [r7, #12]
 800d6c8:	60b9      	str	r1, [r7, #8]
 800d6ca:	4611      	mov	r1, r2
 800d6cc:	461a      	mov	r2, r3
 800d6ce:	460b      	mov	r3, r1
 800d6d0:	71fb      	strb	r3, [r7, #7]
 800d6d2:	4613      	mov	r3, r2
 800d6d4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800d6da:	68bb      	ldr	r3, [r7, #8]
 800d6dc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800d6de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d11a      	bne.n	800d71c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d6e6:	88bb      	ldrh	r3, [r7, #4]
 800d6e8:	3303      	adds	r3, #3
 800d6ea:	089b      	lsrs	r3, r3, #2
 800d6ec:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	61bb      	str	r3, [r7, #24]
 800d6f2:	e00f      	b.n	800d714 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d6f4:	79fb      	ldrb	r3, [r7, #7]
 800d6f6:	031a      	lsls	r2, r3, #12
 800d6f8:	697b      	ldr	r3, [r7, #20]
 800d6fa:	4413      	add	r3, r2
 800d6fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d700:	461a      	mov	r2, r3
 800d702:	69fb      	ldr	r3, [r7, #28]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d708:	69fb      	ldr	r3, [r7, #28]
 800d70a:	3304      	adds	r3, #4
 800d70c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d70e:	69bb      	ldr	r3, [r7, #24]
 800d710:	3301      	adds	r3, #1
 800d712:	61bb      	str	r3, [r7, #24]
 800d714:	69ba      	ldr	r2, [r7, #24]
 800d716:	693b      	ldr	r3, [r7, #16]
 800d718:	429a      	cmp	r2, r3
 800d71a:	d3eb      	bcc.n	800d6f4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d71c:	2300      	movs	r3, #0
}
 800d71e:	4618      	mov	r0, r3
 800d720:	3724      	adds	r7, #36	; 0x24
 800d722:	46bd      	mov	sp, r7
 800d724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d728:	4770      	bx	lr

0800d72a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d72a:	b480      	push	{r7}
 800d72c:	b089      	sub	sp, #36	; 0x24
 800d72e:	af00      	add	r7, sp, #0
 800d730:	60f8      	str	r0, [r7, #12]
 800d732:	60b9      	str	r1, [r7, #8]
 800d734:	4613      	mov	r3, r2
 800d736:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800d73c:	68bb      	ldr	r3, [r7, #8]
 800d73e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800d740:	88fb      	ldrh	r3, [r7, #6]
 800d742:	3303      	adds	r3, #3
 800d744:	089b      	lsrs	r3, r3, #2
 800d746:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800d748:	2300      	movs	r3, #0
 800d74a:	61bb      	str	r3, [r7, #24]
 800d74c:	e00b      	b.n	800d766 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d74e:	697b      	ldr	r3, [r7, #20]
 800d750:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d754:	681a      	ldr	r2, [r3, #0]
 800d756:	69fb      	ldr	r3, [r7, #28]
 800d758:	601a      	str	r2, [r3, #0]
    pDest++;
 800d75a:	69fb      	ldr	r3, [r7, #28]
 800d75c:	3304      	adds	r3, #4
 800d75e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800d760:	69bb      	ldr	r3, [r7, #24]
 800d762:	3301      	adds	r3, #1
 800d764:	61bb      	str	r3, [r7, #24]
 800d766:	69ba      	ldr	r2, [r7, #24]
 800d768:	693b      	ldr	r3, [r7, #16]
 800d76a:	429a      	cmp	r2, r3
 800d76c:	d3ef      	bcc.n	800d74e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800d76e:	69fb      	ldr	r3, [r7, #28]
}
 800d770:	4618      	mov	r0, r3
 800d772:	3724      	adds	r7, #36	; 0x24
 800d774:	46bd      	mov	sp, r7
 800d776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d77a:	4770      	bx	lr

0800d77c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d77c:	b480      	push	{r7}
 800d77e:	b085      	sub	sp, #20
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
 800d784:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d78a:	683b      	ldr	r3, [r7, #0]
 800d78c:	781b      	ldrb	r3, [r3, #0]
 800d78e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d790:	683b      	ldr	r3, [r7, #0]
 800d792:	785b      	ldrb	r3, [r3, #1]
 800d794:	2b01      	cmp	r3, #1
 800d796:	d12c      	bne.n	800d7f2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d798:	68bb      	ldr	r3, [r7, #8]
 800d79a:	015a      	lsls	r2, r3, #5
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	4413      	add	r3, r2
 800d7a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	db12      	blt.n	800d7d0 <USB_EPSetStall+0x54>
 800d7aa:	68bb      	ldr	r3, [r7, #8]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d00f      	beq.n	800d7d0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800d7b0:	68bb      	ldr	r3, [r7, #8]
 800d7b2:	015a      	lsls	r2, r3, #5
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	4413      	add	r3, r2
 800d7b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	68ba      	ldr	r2, [r7, #8]
 800d7c0:	0151      	lsls	r1, r2, #5
 800d7c2:	68fa      	ldr	r2, [r7, #12]
 800d7c4:	440a      	add	r2, r1
 800d7c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d7ca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d7ce:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800d7d0:	68bb      	ldr	r3, [r7, #8]
 800d7d2:	015a      	lsls	r2, r3, #5
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	4413      	add	r3, r2
 800d7d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	68ba      	ldr	r2, [r7, #8]
 800d7e0:	0151      	lsls	r1, r2, #5
 800d7e2:	68fa      	ldr	r2, [r7, #12]
 800d7e4:	440a      	add	r2, r1
 800d7e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d7ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d7ee:	6013      	str	r3, [r2, #0]
 800d7f0:	e02b      	b.n	800d84a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d7f2:	68bb      	ldr	r3, [r7, #8]
 800d7f4:	015a      	lsls	r2, r3, #5
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	4413      	add	r3, r2
 800d7fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	2b00      	cmp	r3, #0
 800d802:	db12      	blt.n	800d82a <USB_EPSetStall+0xae>
 800d804:	68bb      	ldr	r3, [r7, #8]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d00f      	beq.n	800d82a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800d80a:	68bb      	ldr	r3, [r7, #8]
 800d80c:	015a      	lsls	r2, r3, #5
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	4413      	add	r3, r2
 800d812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	68ba      	ldr	r2, [r7, #8]
 800d81a:	0151      	lsls	r1, r2, #5
 800d81c:	68fa      	ldr	r2, [r7, #12]
 800d81e:	440a      	add	r2, r1
 800d820:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d824:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d828:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800d82a:	68bb      	ldr	r3, [r7, #8]
 800d82c:	015a      	lsls	r2, r3, #5
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	4413      	add	r3, r2
 800d832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	68ba      	ldr	r2, [r7, #8]
 800d83a:	0151      	lsls	r1, r2, #5
 800d83c:	68fa      	ldr	r2, [r7, #12]
 800d83e:	440a      	add	r2, r1
 800d840:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d844:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d848:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d84a:	2300      	movs	r3, #0
}
 800d84c:	4618      	mov	r0, r3
 800d84e:	3714      	adds	r7, #20
 800d850:	46bd      	mov	sp, r7
 800d852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d856:	4770      	bx	lr

0800d858 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d858:	b480      	push	{r7}
 800d85a:	b085      	sub	sp, #20
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
 800d860:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d866:	683b      	ldr	r3, [r7, #0]
 800d868:	781b      	ldrb	r3, [r3, #0]
 800d86a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d86c:	683b      	ldr	r3, [r7, #0]
 800d86e:	785b      	ldrb	r3, [r3, #1]
 800d870:	2b01      	cmp	r3, #1
 800d872:	d128      	bne.n	800d8c6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d874:	68bb      	ldr	r3, [r7, #8]
 800d876:	015a      	lsls	r2, r3, #5
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	4413      	add	r3, r2
 800d87c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	68ba      	ldr	r2, [r7, #8]
 800d884:	0151      	lsls	r1, r2, #5
 800d886:	68fa      	ldr	r2, [r7, #12]
 800d888:	440a      	add	r2, r1
 800d88a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d88e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d892:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d894:	683b      	ldr	r3, [r7, #0]
 800d896:	78db      	ldrb	r3, [r3, #3]
 800d898:	2b03      	cmp	r3, #3
 800d89a:	d003      	beq.n	800d8a4 <USB_EPClearStall+0x4c>
 800d89c:	683b      	ldr	r3, [r7, #0]
 800d89e:	78db      	ldrb	r3, [r3, #3]
 800d8a0:	2b02      	cmp	r3, #2
 800d8a2:	d138      	bne.n	800d916 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d8a4:	68bb      	ldr	r3, [r7, #8]
 800d8a6:	015a      	lsls	r2, r3, #5
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	4413      	add	r3, r2
 800d8ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	68ba      	ldr	r2, [r7, #8]
 800d8b4:	0151      	lsls	r1, r2, #5
 800d8b6:	68fa      	ldr	r2, [r7, #12]
 800d8b8:	440a      	add	r2, r1
 800d8ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d8be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d8c2:	6013      	str	r3, [r2, #0]
 800d8c4:	e027      	b.n	800d916 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d8c6:	68bb      	ldr	r3, [r7, #8]
 800d8c8:	015a      	lsls	r2, r3, #5
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	4413      	add	r3, r2
 800d8ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	68ba      	ldr	r2, [r7, #8]
 800d8d6:	0151      	lsls	r1, r2, #5
 800d8d8:	68fa      	ldr	r2, [r7, #12]
 800d8da:	440a      	add	r2, r1
 800d8dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d8e0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d8e4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d8e6:	683b      	ldr	r3, [r7, #0]
 800d8e8:	78db      	ldrb	r3, [r3, #3]
 800d8ea:	2b03      	cmp	r3, #3
 800d8ec:	d003      	beq.n	800d8f6 <USB_EPClearStall+0x9e>
 800d8ee:	683b      	ldr	r3, [r7, #0]
 800d8f0:	78db      	ldrb	r3, [r3, #3]
 800d8f2:	2b02      	cmp	r3, #2
 800d8f4:	d10f      	bne.n	800d916 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d8f6:	68bb      	ldr	r3, [r7, #8]
 800d8f8:	015a      	lsls	r2, r3, #5
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	4413      	add	r3, r2
 800d8fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	68ba      	ldr	r2, [r7, #8]
 800d906:	0151      	lsls	r1, r2, #5
 800d908:	68fa      	ldr	r2, [r7, #12]
 800d90a:	440a      	add	r2, r1
 800d90c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d914:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800d916:	2300      	movs	r3, #0
}
 800d918:	4618      	mov	r0, r3
 800d91a:	3714      	adds	r7, #20
 800d91c:	46bd      	mov	sp, r7
 800d91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d922:	4770      	bx	lr

0800d924 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800d924:	b480      	push	{r7}
 800d926:	b085      	sub	sp, #20
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
 800d92c:	460b      	mov	r3, r1
 800d92e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	68fa      	ldr	r2, [r7, #12]
 800d93e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d942:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800d946:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d94e:	681a      	ldr	r2, [r3, #0]
 800d950:	78fb      	ldrb	r3, [r7, #3]
 800d952:	011b      	lsls	r3, r3, #4
 800d954:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800d958:	68f9      	ldr	r1, [r7, #12]
 800d95a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d95e:	4313      	orrs	r3, r2
 800d960:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800d962:	2300      	movs	r3, #0
}
 800d964:	4618      	mov	r0, r3
 800d966:	3714      	adds	r7, #20
 800d968:	46bd      	mov	sp, r7
 800d96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96e:	4770      	bx	lr

0800d970 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d970:	b580      	push	{r7, lr}
 800d972:	b084      	sub	sp, #16
 800d974:	af00      	add	r7, sp, #0
 800d976:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d982:	685b      	ldr	r3, [r3, #4]
 800d984:	68fa      	ldr	r2, [r7, #12]
 800d986:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d98a:	f023 0302 	bic.w	r3, r3, #2
 800d98e:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800d990:	2003      	movs	r0, #3
 800d992:	f7f7 fd3d 	bl	8005410 <HAL_Delay>

  return HAL_OK;
 800d996:	2300      	movs	r3, #0
}
 800d998:	4618      	mov	r0, r3
 800d99a:	3710      	adds	r7, #16
 800d99c:	46bd      	mov	sp, r7
 800d99e:	bd80      	pop	{r7, pc}

0800d9a0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b084      	sub	sp, #16
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d9b2:	685b      	ldr	r3, [r3, #4]
 800d9b4:	68fa      	ldr	r2, [r7, #12]
 800d9b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d9ba:	f043 0302 	orr.w	r3, r3, #2
 800d9be:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800d9c0:	2003      	movs	r0, #3
 800d9c2:	f7f7 fd25 	bl	8005410 <HAL_Delay>

  return HAL_OK;
 800d9c6:	2300      	movs	r3, #0
}
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	3710      	adds	r7, #16
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	bd80      	pop	{r7, pc}

0800d9d0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d9d0:	b480      	push	{r7}
 800d9d2:	b085      	sub	sp, #20
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	695b      	ldr	r3, [r3, #20]
 800d9dc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	699b      	ldr	r3, [r3, #24]
 800d9e2:	68fa      	ldr	r2, [r7, #12]
 800d9e4:	4013      	ands	r3, r2
 800d9e6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d9e8:	68fb      	ldr	r3, [r7, #12]
}
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	3714      	adds	r7, #20
 800d9ee:	46bd      	mov	sp, r7
 800d9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f4:	4770      	bx	lr

0800d9f6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d9f6:	b480      	push	{r7}
 800d9f8:	b085      	sub	sp, #20
 800d9fa:	af00      	add	r7, sp, #0
 800d9fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da08:	699b      	ldr	r3, [r3, #24]
 800da0a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da12:	69db      	ldr	r3, [r3, #28]
 800da14:	68ba      	ldr	r2, [r7, #8]
 800da16:	4013      	ands	r3, r2
 800da18:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800da1a:	68bb      	ldr	r3, [r7, #8]
 800da1c:	0c1b      	lsrs	r3, r3, #16
}
 800da1e:	4618      	mov	r0, r3
 800da20:	3714      	adds	r7, #20
 800da22:	46bd      	mov	sp, r7
 800da24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da28:	4770      	bx	lr

0800da2a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800da2a:	b480      	push	{r7}
 800da2c:	b085      	sub	sp, #20
 800da2e:	af00      	add	r7, sp, #0
 800da30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da3c:	699b      	ldr	r3, [r3, #24]
 800da3e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da46:	69db      	ldr	r3, [r3, #28]
 800da48:	68ba      	ldr	r2, [r7, #8]
 800da4a:	4013      	ands	r3, r2
 800da4c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800da4e:	68bb      	ldr	r3, [r7, #8]
 800da50:	b29b      	uxth	r3, r3
}
 800da52:	4618      	mov	r0, r3
 800da54:	3714      	adds	r7, #20
 800da56:	46bd      	mov	sp, r7
 800da58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5c:	4770      	bx	lr

0800da5e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800da5e:	b480      	push	{r7}
 800da60:	b085      	sub	sp, #20
 800da62:	af00      	add	r7, sp, #0
 800da64:	6078      	str	r0, [r7, #4]
 800da66:	460b      	mov	r3, r1
 800da68:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800da6e:	78fb      	ldrb	r3, [r7, #3]
 800da70:	015a      	lsls	r2, r3, #5
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	4413      	add	r3, r2
 800da76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da7a:	689b      	ldr	r3, [r3, #8]
 800da7c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da84:	695b      	ldr	r3, [r3, #20]
 800da86:	68ba      	ldr	r2, [r7, #8]
 800da88:	4013      	ands	r3, r2
 800da8a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800da8c:	68bb      	ldr	r3, [r7, #8]
}
 800da8e:	4618      	mov	r0, r3
 800da90:	3714      	adds	r7, #20
 800da92:	46bd      	mov	sp, r7
 800da94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da98:	4770      	bx	lr

0800da9a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800da9a:	b480      	push	{r7}
 800da9c:	b087      	sub	sp, #28
 800da9e:	af00      	add	r7, sp, #0
 800daa0:	6078      	str	r0, [r7, #4]
 800daa2:	460b      	mov	r3, r1
 800daa4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800daaa:	697b      	ldr	r3, [r7, #20]
 800daac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dab0:	691b      	ldr	r3, [r3, #16]
 800dab2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800dab4:	697b      	ldr	r3, [r7, #20]
 800dab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800daba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dabc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800dabe:	78fb      	ldrb	r3, [r7, #3]
 800dac0:	f003 030f 	and.w	r3, r3, #15
 800dac4:	68fa      	ldr	r2, [r7, #12]
 800dac6:	fa22 f303 	lsr.w	r3, r2, r3
 800daca:	01db      	lsls	r3, r3, #7
 800dacc:	b2db      	uxtb	r3, r3
 800dace:	693a      	ldr	r2, [r7, #16]
 800dad0:	4313      	orrs	r3, r2
 800dad2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800dad4:	78fb      	ldrb	r3, [r7, #3]
 800dad6:	015a      	lsls	r2, r3, #5
 800dad8:	697b      	ldr	r3, [r7, #20]
 800dada:	4413      	add	r3, r2
 800dadc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dae0:	689b      	ldr	r3, [r3, #8]
 800dae2:	693a      	ldr	r2, [r7, #16]
 800dae4:	4013      	ands	r3, r2
 800dae6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800dae8:	68bb      	ldr	r3, [r7, #8]
}
 800daea:	4618      	mov	r0, r3
 800daec:	371c      	adds	r7, #28
 800daee:	46bd      	mov	sp, r7
 800daf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf4:	4770      	bx	lr

0800daf6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800daf6:	b480      	push	{r7}
 800daf8:	b083      	sub	sp, #12
 800dafa:	af00      	add	r7, sp, #0
 800dafc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	695b      	ldr	r3, [r3, #20]
 800db02:	f003 0301 	and.w	r3, r3, #1
}
 800db06:	4618      	mov	r0, r3
 800db08:	370c      	adds	r7, #12
 800db0a:	46bd      	mov	sp, r7
 800db0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db10:	4770      	bx	lr
	...

0800db14 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800db14:	b480      	push	{r7}
 800db16:	b085      	sub	sp, #20
 800db18:	af00      	add	r7, sp, #0
 800db1a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db26:	681a      	ldr	r2, [r3, #0]
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db2e:	4619      	mov	r1, r3
 800db30:	4b09      	ldr	r3, [pc, #36]	; (800db58 <USB_ActivateSetup+0x44>)
 800db32:	4013      	ands	r3, r2
 800db34:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db3c:	685b      	ldr	r3, [r3, #4]
 800db3e:	68fa      	ldr	r2, [r7, #12]
 800db40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800db44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800db48:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800db4a:	2300      	movs	r3, #0
}
 800db4c:	4618      	mov	r0, r3
 800db4e:	3714      	adds	r7, #20
 800db50:	46bd      	mov	sp, r7
 800db52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db56:	4770      	bx	lr
 800db58:	fffff800 	.word	0xfffff800

0800db5c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800db5c:	b480      	push	{r7}
 800db5e:	b087      	sub	sp, #28
 800db60:	af00      	add	r7, sp, #0
 800db62:	60f8      	str	r0, [r7, #12]
 800db64:	460b      	mov	r3, r1
 800db66:	607a      	str	r2, [r7, #4]
 800db68:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	333c      	adds	r3, #60	; 0x3c
 800db72:	3304      	adds	r3, #4
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800db78:	693b      	ldr	r3, [r7, #16]
 800db7a:	4a26      	ldr	r2, [pc, #152]	; (800dc14 <USB_EP0_OutStart+0xb8>)
 800db7c:	4293      	cmp	r3, r2
 800db7e:	d90a      	bls.n	800db96 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800db80:	697b      	ldr	r3, [r7, #20]
 800db82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800db8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800db90:	d101      	bne.n	800db96 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800db92:	2300      	movs	r3, #0
 800db94:	e037      	b.n	800dc06 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800db96:	697b      	ldr	r3, [r7, #20]
 800db98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db9c:	461a      	mov	r2, r3
 800db9e:	2300      	movs	r3, #0
 800dba0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800dba2:	697b      	ldr	r3, [r7, #20]
 800dba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dba8:	691b      	ldr	r3, [r3, #16]
 800dbaa:	697a      	ldr	r2, [r7, #20]
 800dbac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dbb0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dbb4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800dbb6:	697b      	ldr	r3, [r7, #20]
 800dbb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbbc:	691b      	ldr	r3, [r3, #16]
 800dbbe:	697a      	ldr	r2, [r7, #20]
 800dbc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dbc4:	f043 0318 	orr.w	r3, r3, #24
 800dbc8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800dbca:	697b      	ldr	r3, [r7, #20]
 800dbcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbd0:	691b      	ldr	r3, [r3, #16]
 800dbd2:	697a      	ldr	r2, [r7, #20]
 800dbd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dbd8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800dbdc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800dbde:	7afb      	ldrb	r3, [r7, #11]
 800dbe0:	2b01      	cmp	r3, #1
 800dbe2:	d10f      	bne.n	800dc04 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800dbe4:	697b      	ldr	r3, [r7, #20]
 800dbe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbea:	461a      	mov	r2, r3
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800dbf0:	697b      	ldr	r3, [r7, #20]
 800dbf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	697a      	ldr	r2, [r7, #20]
 800dbfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dbfe:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800dc02:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800dc04:	2300      	movs	r3, #0
}
 800dc06:	4618      	mov	r0, r3
 800dc08:	371c      	adds	r7, #28
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc10:	4770      	bx	lr
 800dc12:	bf00      	nop
 800dc14:	4f54300a 	.word	0x4f54300a

0800dc18 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800dc18:	b480      	push	{r7}
 800dc1a:	b085      	sub	sp, #20
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800dc20:	2300      	movs	r3, #0
 800dc22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	3301      	adds	r3, #1
 800dc28:	60fb      	str	r3, [r7, #12]
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	4a13      	ldr	r2, [pc, #76]	; (800dc7c <USB_CoreReset+0x64>)
 800dc2e:	4293      	cmp	r3, r2
 800dc30:	d901      	bls.n	800dc36 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800dc32:	2303      	movs	r3, #3
 800dc34:	e01b      	b.n	800dc6e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	691b      	ldr	r3, [r3, #16]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	daf2      	bge.n	800dc24 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800dc3e:	2300      	movs	r3, #0
 800dc40:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	691b      	ldr	r3, [r3, #16]
 800dc46:	f043 0201 	orr.w	r2, r3, #1
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	3301      	adds	r3, #1
 800dc52:	60fb      	str	r3, [r7, #12]
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	4a09      	ldr	r2, [pc, #36]	; (800dc7c <USB_CoreReset+0x64>)
 800dc58:	4293      	cmp	r3, r2
 800dc5a:	d901      	bls.n	800dc60 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800dc5c:	2303      	movs	r3, #3
 800dc5e:	e006      	b.n	800dc6e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	691b      	ldr	r3, [r3, #16]
 800dc64:	f003 0301 	and.w	r3, r3, #1
 800dc68:	2b01      	cmp	r3, #1
 800dc6a:	d0f0      	beq.n	800dc4e <USB_CoreReset+0x36>

  return HAL_OK;
 800dc6c:	2300      	movs	r3, #0
}
 800dc6e:	4618      	mov	r0, r3
 800dc70:	3714      	adds	r7, #20
 800dc72:	46bd      	mov	sp, r7
 800dc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc78:	4770      	bx	lr
 800dc7a:	bf00      	nop
 800dc7c:	00030d40 	.word	0x00030d40

0800dc80 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800dc84:	4904      	ldr	r1, [pc, #16]	; (800dc98 <MX_FATFS_Init+0x18>)
 800dc86:	4805      	ldr	r0, [pc, #20]	; (800dc9c <MX_FATFS_Init+0x1c>)
 800dc88:	f004 fd5e 	bl	8012748 <FATFS_LinkDriver>
 800dc8c:	4603      	mov	r3, r0
 800dc8e:	461a      	mov	r2, r3
 800dc90:	4b03      	ldr	r3, [pc, #12]	; (800dca0 <MX_FATFS_Init+0x20>)
 800dc92:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800dc94:	bf00      	nop
 800dc96:	bd80      	pop	{r7, pc}
 800dc98:	20015280 	.word	0x20015280
 800dc9c:	0801a344 	.word	0x0801a344
 800dca0:	2001527c 	.word	0x2001527c

0800dca4 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800dca4:	b480      	push	{r7}
 800dca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800dca8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 800dcaa:	4618      	mov	r0, r3
 800dcac:	46bd      	mov	sp, r7
 800dcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb2:	4770      	bx	lr

0800dcb4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	b082      	sub	sp, #8
 800dcb8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800dcba:	2300      	movs	r3, #0
 800dcbc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800dcbe:	f000 f896 	bl	800ddee <BSP_SD_IsDetected>
 800dcc2:	4603      	mov	r3, r0
 800dcc4:	2b01      	cmp	r3, #1
 800dcc6:	d001      	beq.n	800dccc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800dcc8:	2302      	movs	r3, #2
 800dcca:	e012      	b.n	800dcf2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800dccc:	480b      	ldr	r0, [pc, #44]	; (800dcfc <BSP_SD_Init+0x48>)
 800dcce:	f7fa fc67 	bl	80085a0 <HAL_SD_Init>
 800dcd2:	4603      	mov	r3, r0
 800dcd4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800dcd6:	79fb      	ldrb	r3, [r7, #7]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d109      	bne.n	800dcf0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800dcdc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800dce0:	4806      	ldr	r0, [pc, #24]	; (800dcfc <BSP_SD_Init+0x48>)
 800dce2:	f7fb fa1f 	bl	8009124 <HAL_SD_ConfigWideBusOperation>
 800dce6:	4603      	mov	r3, r0
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d001      	beq.n	800dcf0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800dcec:	2301      	movs	r3, #1
 800dcee:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800dcf0:	79fb      	ldrb	r3, [r7, #7]
}
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	3708      	adds	r7, #8
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	bd80      	pop	{r7, pc}
 800dcfa:	bf00      	nop
 800dcfc:	200089d8 	.word	0x200089d8

0800dd00 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b086      	sub	sp, #24
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	60f8      	str	r0, [r7, #12]
 800dd08:	60b9      	str	r1, [r7, #8]
 800dd0a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800dd0c:	2300      	movs	r3, #0
 800dd0e:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	68ba      	ldr	r2, [r7, #8]
 800dd14:	68f9      	ldr	r1, [r7, #12]
 800dd16:	4806      	ldr	r0, [pc, #24]	; (800dd30 <BSP_SD_ReadBlocks_DMA+0x30>)
 800dd18:	f7fa fcda 	bl	80086d0 <HAL_SD_ReadBlocks_DMA>
 800dd1c:	4603      	mov	r3, r0
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d001      	beq.n	800dd26 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800dd22:	2301      	movs	r3, #1
 800dd24:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800dd26:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd28:	4618      	mov	r0, r3
 800dd2a:	3718      	adds	r7, #24
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	bd80      	pop	{r7, pc}
 800dd30:	200089d8 	.word	0x200089d8

0800dd34 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800dd34:	b580      	push	{r7, lr}
 800dd36:	b086      	sub	sp, #24
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	60f8      	str	r0, [r7, #12]
 800dd3c:	60b9      	str	r1, [r7, #8]
 800dd3e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800dd40:	2300      	movs	r3, #0
 800dd42:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	68ba      	ldr	r2, [r7, #8]
 800dd48:	68f9      	ldr	r1, [r7, #12]
 800dd4a:	4806      	ldr	r0, [pc, #24]	; (800dd64 <BSP_SD_WriteBlocks_DMA+0x30>)
 800dd4c:	f7fa fdac 	bl	80088a8 <HAL_SD_WriteBlocks_DMA>
 800dd50:	4603      	mov	r3, r0
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d001      	beq.n	800dd5a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800dd56:	2301      	movs	r3, #1
 800dd58:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800dd5a:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	3718      	adds	r7, #24
 800dd60:	46bd      	mov	sp, r7
 800dd62:	bd80      	pop	{r7, pc}
 800dd64:	200089d8 	.word	0x200089d8

0800dd68 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800dd6c:	4805      	ldr	r0, [pc, #20]	; (800dd84 <BSP_SD_GetCardState+0x1c>)
 800dd6e:	f7fb fa55 	bl	800921c <HAL_SD_GetCardState>
 800dd72:	4603      	mov	r3, r0
 800dd74:	2b04      	cmp	r3, #4
 800dd76:	bf14      	ite	ne
 800dd78:	2301      	movne	r3, #1
 800dd7a:	2300      	moveq	r3, #0
 800dd7c:	b2db      	uxtb	r3, r3
}
 800dd7e:	4618      	mov	r0, r3
 800dd80:	bd80      	pop	{r7, pc}
 800dd82:	bf00      	nop
 800dd84:	200089d8 	.word	0x200089d8

0800dd88 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b082      	sub	sp, #8
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800dd90:	6879      	ldr	r1, [r7, #4]
 800dd92:	4803      	ldr	r0, [pc, #12]	; (800dda0 <BSP_SD_GetCardInfo+0x18>)
 800dd94:	f7fb f99a 	bl	80090cc <HAL_SD_GetCardInfo>
}
 800dd98:	bf00      	nop
 800dd9a:	3708      	adds	r7, #8
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	bd80      	pop	{r7, pc}
 800dda0:	200089d8 	.word	0x200089d8

0800dda4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b082      	sub	sp, #8
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800ddac:	f000 f818 	bl	800dde0 <BSP_SD_AbortCallback>
}
 800ddb0:	bf00      	nop
 800ddb2:	3708      	adds	r7, #8
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	bd80      	pop	{r7, pc}

0800ddb8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b082      	sub	sp, #8
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800ddc0:	f000 f998 	bl	800e0f4 <BSP_SD_WriteCpltCallback>
}
 800ddc4:	bf00      	nop
 800ddc6:	3708      	adds	r7, #8
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	bd80      	pop	{r7, pc}

0800ddcc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ddcc:	b580      	push	{r7, lr}
 800ddce:	b082      	sub	sp, #8
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800ddd4:	f000 f9a0 	bl	800e118 <BSP_SD_ReadCpltCallback>
}
 800ddd8:	bf00      	nop
 800ddda:	3708      	adds	r7, #8
 800dddc:	46bd      	mov	sp, r7
 800ddde:	bd80      	pop	{r7, pc}

0800dde0 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800dde0:	b480      	push	{r7}
 800dde2:	af00      	add	r7, sp, #0

}
 800dde4:	bf00      	nop
 800dde6:	46bd      	mov	sp, r7
 800dde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddec:	4770      	bx	lr

0800ddee <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800ddee:	b480      	push	{r7}
 800ddf0:	b083      	sub	sp, #12
 800ddf2:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800ddf4:	2301      	movs	r3, #1
 800ddf6:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800ddf8:	79fb      	ldrb	r3, [r7, #7]
 800ddfa:	b2db      	uxtb	r3, r3
}
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	370c      	adds	r7, #12
 800de00:	46bd      	mov	sp, r7
 800de02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de06:	4770      	bx	lr

0800de08 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800de08:	b580      	push	{r7, lr}
 800de0a:	b084      	sub	sp, #16
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 800de10:	f004 fd84 	bl	801291c <osKernelGetTickCount>
 800de14:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800de16:	e006      	b.n	800de26 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800de18:	f7ff ffa6 	bl	800dd68 <BSP_SD_GetCardState>
 800de1c:	4603      	mov	r3, r0
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d101      	bne.n	800de26 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800de22:	2300      	movs	r3, #0
 800de24:	e009      	b.n	800de3a <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800de26:	f004 fd79 	bl	801291c <osKernelGetTickCount>
 800de2a:	4602      	mov	r2, r0
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	1ad3      	subs	r3, r2, r3
 800de30:	687a      	ldr	r2, [r7, #4]
 800de32:	429a      	cmp	r2, r3
 800de34:	d8f0      	bhi.n	800de18 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800de36:	f04f 33ff 	mov.w	r3, #4294967295
}
 800de3a:	4618      	mov	r0, r3
 800de3c:	3710      	adds	r7, #16
 800de3e:	46bd      	mov	sp, r7
 800de40:	bd80      	pop	{r7, pc}
	...

0800de44 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800de44:	b580      	push	{r7, lr}
 800de46:	b082      	sub	sp, #8
 800de48:	af00      	add	r7, sp, #0
 800de4a:	4603      	mov	r3, r0
 800de4c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800de4e:	4b0b      	ldr	r3, [pc, #44]	; (800de7c <SD_CheckStatus+0x38>)
 800de50:	2201      	movs	r2, #1
 800de52:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800de54:	f7ff ff88 	bl	800dd68 <BSP_SD_GetCardState>
 800de58:	4603      	mov	r3, r0
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d107      	bne.n	800de6e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800de5e:	4b07      	ldr	r3, [pc, #28]	; (800de7c <SD_CheckStatus+0x38>)
 800de60:	781b      	ldrb	r3, [r3, #0]
 800de62:	b2db      	uxtb	r3, r3
 800de64:	f023 0301 	bic.w	r3, r3, #1
 800de68:	b2da      	uxtb	r2, r3
 800de6a:	4b04      	ldr	r3, [pc, #16]	; (800de7c <SD_CheckStatus+0x38>)
 800de6c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800de6e:	4b03      	ldr	r3, [pc, #12]	; (800de7c <SD_CheckStatus+0x38>)
 800de70:	781b      	ldrb	r3, [r3, #0]
 800de72:	b2db      	uxtb	r3, r3
}
 800de74:	4618      	mov	r0, r3
 800de76:	3708      	adds	r7, #8
 800de78:	46bd      	mov	sp, r7
 800de7a:	bd80      	pop	{r7, pc}
 800de7c:	20000009 	.word	0x20000009

0800de80 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800de80:	b580      	push	{r7, lr}
 800de82:	b082      	sub	sp, #8
 800de84:	af00      	add	r7, sp, #0
 800de86:	4603      	mov	r3, r0
 800de88:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 800de8a:	4b1c      	ldr	r3, [pc, #112]	; (800defc <SD_initialize+0x7c>)
 800de8c:	2201      	movs	r2, #1
 800de8e:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800de90:	f004 fcec 	bl	801286c <osKernelGetState>
 800de94:	4603      	mov	r3, r0
 800de96:	2b02      	cmp	r3, #2
 800de98:	d129      	bne.n	800deee <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800de9a:	f7ff ff0b 	bl	800dcb4 <BSP_SD_Init>
 800de9e:	4603      	mov	r3, r0
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d107      	bne.n	800deb4 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800dea4:	79fb      	ldrb	r3, [r7, #7]
 800dea6:	4618      	mov	r0, r3
 800dea8:	f7ff ffcc 	bl	800de44 <SD_CheckStatus>
 800deac:	4603      	mov	r3, r0
 800deae:	461a      	mov	r2, r3
 800deb0:	4b12      	ldr	r3, [pc, #72]	; (800defc <SD_initialize+0x7c>)
 800deb2:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800deb4:	4b11      	ldr	r3, [pc, #68]	; (800defc <SD_initialize+0x7c>)
 800deb6:	781b      	ldrb	r3, [r3, #0]
 800deb8:	b2db      	uxtb	r3, r3
 800deba:	2b01      	cmp	r3, #1
 800debc:	d017      	beq.n	800deee <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800debe:	4b10      	ldr	r3, [pc, #64]	; (800df00 <SD_initialize+0x80>)
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d107      	bne.n	800ded6 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800dec6:	2200      	movs	r2, #0
 800dec8:	2102      	movs	r1, #2
 800deca:	200a      	movs	r0, #10
 800decc:	f005 f976 	bl	80131bc <osMessageQueueNew>
 800ded0:	4602      	mov	r2, r0
 800ded2:	4b0b      	ldr	r3, [pc, #44]	; (800df00 <SD_initialize+0x80>)
 800ded4:	601a      	str	r2, [r3, #0]
#endif
      }

      if (SDQueueID == NULL)
 800ded6:	4b0a      	ldr	r3, [pc, #40]	; (800df00 <SD_initialize+0x80>)
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d107      	bne.n	800deee <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800dede:	4b07      	ldr	r3, [pc, #28]	; (800defc <SD_initialize+0x7c>)
 800dee0:	781b      	ldrb	r3, [r3, #0]
 800dee2:	b2db      	uxtb	r3, r3
 800dee4:	f043 0301 	orr.w	r3, r3, #1
 800dee8:	b2da      	uxtb	r2, r3
 800deea:	4b04      	ldr	r3, [pc, #16]	; (800defc <SD_initialize+0x7c>)
 800deec:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800deee:	4b03      	ldr	r3, [pc, #12]	; (800defc <SD_initialize+0x7c>)
 800def0:	781b      	ldrb	r3, [r3, #0]
 800def2:	b2db      	uxtb	r3, r3
}
 800def4:	4618      	mov	r0, r3
 800def6:	3708      	adds	r7, #8
 800def8:	46bd      	mov	sp, r7
 800defa:	bd80      	pop	{r7, pc}
 800defc:	20000009 	.word	0x20000009
 800df00:	2000032c 	.word	0x2000032c

0800df04 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800df04:	b580      	push	{r7, lr}
 800df06:	b082      	sub	sp, #8
 800df08:	af00      	add	r7, sp, #0
 800df0a:	4603      	mov	r3, r0
 800df0c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800df0e:	79fb      	ldrb	r3, [r7, #7]
 800df10:	4618      	mov	r0, r3
 800df12:	f7ff ff97 	bl	800de44 <SD_CheckStatus>
 800df16:	4603      	mov	r3, r0
}
 800df18:	4618      	mov	r0, r3
 800df1a:	3708      	adds	r7, #8
 800df1c:	46bd      	mov	sp, r7
 800df1e:	bd80      	pop	{r7, pc}

0800df20 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800df20:	b580      	push	{r7, lr}
 800df22:	b088      	sub	sp, #32
 800df24:	af00      	add	r7, sp, #0
 800df26:	60b9      	str	r1, [r7, #8]
 800df28:	607a      	str	r2, [r7, #4]
 800df2a:	603b      	str	r3, [r7, #0]
 800df2c:	4603      	mov	r3, r0
 800df2e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800df30:	2301      	movs	r3, #1
 800df32:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800df34:	f247 5030 	movw	r0, #30000	; 0x7530
 800df38:	f7ff ff66 	bl	800de08 <SD_CheckStatusWithTimeout>
 800df3c:	4603      	mov	r3, r0
 800df3e:	2b00      	cmp	r3, #0
 800df40:	da01      	bge.n	800df46 <SD_read+0x26>
  {
    return res;
 800df42:	7ffb      	ldrb	r3, [r7, #31]
 800df44:	e02f      	b.n	800dfa6 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800df46:	683a      	ldr	r2, [r7, #0]
 800df48:	6879      	ldr	r1, [r7, #4]
 800df4a:	68b8      	ldr	r0, [r7, #8]
 800df4c:	f7ff fed8 	bl	800dd00 <BSP_SD_ReadBlocks_DMA>
 800df50:	4603      	mov	r3, r0
 800df52:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800df54:	7fbb      	ldrb	r3, [r7, #30]
 800df56:	2b00      	cmp	r3, #0
 800df58:	d124      	bne.n	800dfa4 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800df5a:	4b15      	ldr	r3, [pc, #84]	; (800dfb0 <SD_read+0x90>)
 800df5c:	6818      	ldr	r0, [r3, #0]
 800df5e:	f107 0112 	add.w	r1, r7, #18
 800df62:	f247 5330 	movw	r3, #30000	; 0x7530
 800df66:	2200      	movs	r2, #0
 800df68:	f005 fa22 	bl	80133b0 <osMessageQueueGet>
 800df6c:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800df6e:	69bb      	ldr	r3, [r7, #24]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d117      	bne.n	800dfa4 <SD_read+0x84>
 800df74:	8a7b      	ldrh	r3, [r7, #18]
 800df76:	2b01      	cmp	r3, #1
 800df78:	d114      	bne.n	800dfa4 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800df7a:	f004 fccf 	bl	801291c <osKernelGetTickCount>
 800df7e:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800df80:	e007      	b.n	800df92 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800df82:	f7ff fef1 	bl	800dd68 <BSP_SD_GetCardState>
 800df86:	4603      	mov	r3, r0
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d102      	bne.n	800df92 <SD_read+0x72>
              {
                res = RES_OK;
 800df8c:	2300      	movs	r3, #0
 800df8e:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800df90:	e008      	b.n	800dfa4 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800df92:	f004 fcc3 	bl	801291c <osKernelGetTickCount>
 800df96:	4602      	mov	r2, r0
 800df98:	697b      	ldr	r3, [r7, #20]
 800df9a:	1ad3      	subs	r3, r2, r3
 800df9c:	f247 522f 	movw	r2, #29999	; 0x752f
 800dfa0:	4293      	cmp	r3, r2
 800dfa2:	d9ee      	bls.n	800df82 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800dfa4:	7ffb      	ldrb	r3, [r7, #31]
}
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	3720      	adds	r7, #32
 800dfaa:	46bd      	mov	sp, r7
 800dfac:	bd80      	pop	{r7, pc}
 800dfae:	bf00      	nop
 800dfb0:	2000032c 	.word	0x2000032c

0800dfb4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	b088      	sub	sp, #32
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	60b9      	str	r1, [r7, #8]
 800dfbc:	607a      	str	r2, [r7, #4]
 800dfbe:	603b      	str	r3, [r7, #0]
 800dfc0:	4603      	mov	r3, r0
 800dfc2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800dfc4:	2301      	movs	r3, #1
 800dfc6:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800dfc8:	f247 5030 	movw	r0, #30000	; 0x7530
 800dfcc:	f7ff ff1c 	bl	800de08 <SD_CheckStatusWithTimeout>
 800dfd0:	4603      	mov	r3, r0
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	da01      	bge.n	800dfda <SD_write+0x26>
  {
    return res;
 800dfd6:	7ffb      	ldrb	r3, [r7, #31]
 800dfd8:	e02d      	b.n	800e036 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800dfda:	683a      	ldr	r2, [r7, #0]
 800dfdc:	6879      	ldr	r1, [r7, #4]
 800dfde:	68b8      	ldr	r0, [r7, #8]
 800dfe0:	f7ff fea8 	bl	800dd34 <BSP_SD_WriteBlocks_DMA>
 800dfe4:	4603      	mov	r3, r0
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d124      	bne.n	800e034 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800dfea:	4b15      	ldr	r3, [pc, #84]	; (800e040 <SD_write+0x8c>)
 800dfec:	6818      	ldr	r0, [r3, #0]
 800dfee:	f107 0112 	add.w	r1, r7, #18
 800dff2:	f247 5330 	movw	r3, #30000	; 0x7530
 800dff6:	2200      	movs	r2, #0
 800dff8:	f005 f9da 	bl	80133b0 <osMessageQueueGet>
 800dffc:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800dffe:	69bb      	ldr	r3, [r7, #24]
 800e000:	2b00      	cmp	r3, #0
 800e002:	d117      	bne.n	800e034 <SD_write+0x80>
 800e004:	8a7b      	ldrh	r3, [r7, #18]
 800e006:	2b02      	cmp	r3, #2
 800e008:	d114      	bne.n	800e034 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800e00a:	f004 fc87 	bl	801291c <osKernelGetTickCount>
 800e00e:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800e010:	e007      	b.n	800e022 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e012:	f7ff fea9 	bl	800dd68 <BSP_SD_GetCardState>
 800e016:	4603      	mov	r3, r0
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d102      	bne.n	800e022 <SD_write+0x6e>
          {
            res = RES_OK;
 800e01c:	2300      	movs	r3, #0
 800e01e:	77fb      	strb	r3, [r7, #31]
            break;
 800e020:	e008      	b.n	800e034 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800e022:	f004 fc7b 	bl	801291c <osKernelGetTickCount>
 800e026:	4602      	mov	r2, r0
 800e028:	697b      	ldr	r3, [r7, #20]
 800e02a:	1ad3      	subs	r3, r2, r3
 800e02c:	f247 522f 	movw	r2, #29999	; 0x752f
 800e030:	4293      	cmp	r3, r2
 800e032:	d9ee      	bls.n	800e012 <SD_write+0x5e>
    }

  }
#endif

  return res;
 800e034:	7ffb      	ldrb	r3, [r7, #31]
}
 800e036:	4618      	mov	r0, r3
 800e038:	3720      	adds	r7, #32
 800e03a:	46bd      	mov	sp, r7
 800e03c:	bd80      	pop	{r7, pc}
 800e03e:	bf00      	nop
 800e040:	2000032c 	.word	0x2000032c

0800e044 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800e044:	b580      	push	{r7, lr}
 800e046:	b08c      	sub	sp, #48	; 0x30
 800e048:	af00      	add	r7, sp, #0
 800e04a:	4603      	mov	r3, r0
 800e04c:	603a      	str	r2, [r7, #0]
 800e04e:	71fb      	strb	r3, [r7, #7]
 800e050:	460b      	mov	r3, r1
 800e052:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800e054:	2301      	movs	r3, #1
 800e056:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e05a:	4b25      	ldr	r3, [pc, #148]	; (800e0f0 <SD_ioctl+0xac>)
 800e05c:	781b      	ldrb	r3, [r3, #0]
 800e05e:	b2db      	uxtb	r3, r3
 800e060:	f003 0301 	and.w	r3, r3, #1
 800e064:	2b00      	cmp	r3, #0
 800e066:	d001      	beq.n	800e06c <SD_ioctl+0x28>
 800e068:	2303      	movs	r3, #3
 800e06a:	e03c      	b.n	800e0e6 <SD_ioctl+0xa2>

  switch (cmd)
 800e06c:	79bb      	ldrb	r3, [r7, #6]
 800e06e:	2b03      	cmp	r3, #3
 800e070:	d834      	bhi.n	800e0dc <SD_ioctl+0x98>
 800e072:	a201      	add	r2, pc, #4	; (adr r2, 800e078 <SD_ioctl+0x34>)
 800e074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e078:	0800e089 	.word	0x0800e089
 800e07c:	0800e091 	.word	0x0800e091
 800e080:	0800e0a9 	.word	0x0800e0a9
 800e084:	0800e0c3 	.word	0x0800e0c3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800e088:	2300      	movs	r3, #0
 800e08a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e08e:	e028      	b.n	800e0e2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800e090:	f107 030c 	add.w	r3, r7, #12
 800e094:	4618      	mov	r0, r3
 800e096:	f7ff fe77 	bl	800dd88 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800e09a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e09c:	683b      	ldr	r3, [r7, #0]
 800e09e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e0a6:	e01c      	b.n	800e0e2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e0a8:	f107 030c 	add.w	r3, r7, #12
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	f7ff fe6b 	bl	800dd88 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800e0b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0b4:	b29a      	uxth	r2, r3
 800e0b6:	683b      	ldr	r3, [r7, #0]
 800e0b8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e0c0:	e00f      	b.n	800e0e2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e0c2:	f107 030c 	add.w	r3, r7, #12
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	f7ff fe5e 	bl	800dd88 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800e0cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0ce:	0a5a      	lsrs	r2, r3, #9
 800e0d0:	683b      	ldr	r3, [r7, #0]
 800e0d2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e0da:	e002      	b.n	800e0e2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800e0dc:	2304      	movs	r3, #4
 800e0de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800e0e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	3730      	adds	r7, #48	; 0x30
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	bd80      	pop	{r7, pc}
 800e0ee:	bf00      	nop
 800e0f0:	20000009 	.word	0x20000009

0800e0f4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	b082      	sub	sp, #8
 800e0f8:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 800e0fa:	2302      	movs	r3, #2
 800e0fc:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800e0fe:	4b05      	ldr	r3, [pc, #20]	; (800e114 <BSP_SD_WriteCpltCallback+0x20>)
 800e100:	6818      	ldr	r0, [r3, #0]
 800e102:	1db9      	adds	r1, r7, #6
 800e104:	2300      	movs	r3, #0
 800e106:	2200      	movs	r2, #0
 800e108:	f005 f8de 	bl	80132c8 <osMessageQueuePut>
#endif
}
 800e10c:	bf00      	nop
 800e10e:	3708      	adds	r7, #8
 800e110:	46bd      	mov	sp, r7
 800e112:	bd80      	pop	{r7, pc}
 800e114:	2000032c 	.word	0x2000032c

0800e118 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800e118:	b580      	push	{r7, lr}
 800e11a:	b082      	sub	sp, #8
 800e11c:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800e11e:	2301      	movs	r3, #1
 800e120:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800e122:	4b05      	ldr	r3, [pc, #20]	; (800e138 <BSP_SD_ReadCpltCallback+0x20>)
 800e124:	6818      	ldr	r0, [r3, #0]
 800e126:	1db9      	adds	r1, r7, #6
 800e128:	2300      	movs	r3, #0
 800e12a:	2200      	movs	r2, #0
 800e12c:	f005 f8cc 	bl	80132c8 <osMessageQueuePut>
#endif
}
 800e130:	bf00      	nop
 800e132:	3708      	adds	r7, #8
 800e134:	46bd      	mov	sp, r7
 800e136:	bd80      	pop	{r7, pc}
 800e138:	2000032c 	.word	0x2000032c

0800e13c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e13c:	b580      	push	{r7, lr}
 800e13e:	b084      	sub	sp, #16
 800e140:	af00      	add	r7, sp, #0
 800e142:	6078      	str	r0, [r7, #4]
 800e144:	460b      	mov	r3, r1
 800e146:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800e148:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800e14c:	f009 f902 	bl	8017354 <malloc>
 800e150:	4603      	mov	r3, r0
 800e152:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d105      	bne.n	800e166 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	2200      	movs	r2, #0
 800e15e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800e162:	2302      	movs	r3, #2
 800e164:	e066      	b.n	800e234 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	68fa      	ldr	r2, [r7, #12]
 800e16a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	7c1b      	ldrb	r3, [r3, #16]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d119      	bne.n	800e1aa <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e176:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e17a:	2202      	movs	r2, #2
 800e17c:	2181      	movs	r1, #129	; 0x81
 800e17e:	6878      	ldr	r0, [r7, #4]
 800e180:	f008 ff1b 	bl	8016fba <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	2201      	movs	r2, #1
 800e188:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e18a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e18e:	2202      	movs	r2, #2
 800e190:	2101      	movs	r1, #1
 800e192:	6878      	ldr	r0, [r7, #4]
 800e194:	f008 ff11 	bl	8016fba <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	2201      	movs	r2, #1
 800e19c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	2210      	movs	r2, #16
 800e1a4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800e1a8:	e016      	b.n	800e1d8 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e1aa:	2340      	movs	r3, #64	; 0x40
 800e1ac:	2202      	movs	r2, #2
 800e1ae:	2181      	movs	r1, #129	; 0x81
 800e1b0:	6878      	ldr	r0, [r7, #4]
 800e1b2:	f008 ff02 	bl	8016fba <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	2201      	movs	r2, #1
 800e1ba:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e1bc:	2340      	movs	r3, #64	; 0x40
 800e1be:	2202      	movs	r2, #2
 800e1c0:	2101      	movs	r1, #1
 800e1c2:	6878      	ldr	r0, [r7, #4]
 800e1c4:	f008 fef9 	bl	8016fba <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	2201      	movs	r2, #1
 800e1cc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	2210      	movs	r2, #16
 800e1d4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e1d8:	2308      	movs	r3, #8
 800e1da:	2203      	movs	r2, #3
 800e1dc:	2182      	movs	r1, #130	; 0x82
 800e1de:	6878      	ldr	r0, [r7, #4]
 800e1e0:	f008 feeb 	bl	8016fba <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	2201      	movs	r2, #1
 800e1e8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	2200      	movs	r2, #0
 800e1fa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	2200      	movs	r2, #0
 800e202:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	7c1b      	ldrb	r3, [r3, #16]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d109      	bne.n	800e222 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e214:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e218:	2101      	movs	r1, #1
 800e21a:	6878      	ldr	r0, [r7, #4]
 800e21c:	f008 ffbc 	bl	8017198 <USBD_LL_PrepareReceive>
 800e220:	e007      	b.n	800e232 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e228:	2340      	movs	r3, #64	; 0x40
 800e22a:	2101      	movs	r1, #1
 800e22c:	6878      	ldr	r0, [r7, #4]
 800e22e:	f008 ffb3 	bl	8017198 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e232:	2300      	movs	r3, #0
}
 800e234:	4618      	mov	r0, r3
 800e236:	3710      	adds	r7, #16
 800e238:	46bd      	mov	sp, r7
 800e23a:	bd80      	pop	{r7, pc}

0800e23c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e23c:	b580      	push	{r7, lr}
 800e23e:	b084      	sub	sp, #16
 800e240:	af00      	add	r7, sp, #0
 800e242:	6078      	str	r0, [r7, #4]
 800e244:	460b      	mov	r3, r1
 800e246:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800e248:	2300      	movs	r3, #0
 800e24a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800e24c:	2181      	movs	r1, #129	; 0x81
 800e24e:	6878      	ldr	r0, [r7, #4]
 800e250:	f008 fed9 	bl	8017006 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	2200      	movs	r2, #0
 800e258:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800e25a:	2101      	movs	r1, #1
 800e25c:	6878      	ldr	r0, [r7, #4]
 800e25e:	f008 fed2 	bl	8017006 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	2200      	movs	r2, #0
 800e266:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800e26a:	2182      	movs	r1, #130	; 0x82
 800e26c:	6878      	ldr	r0, [r7, #4]
 800e26e:	f008 feca 	bl	8017006 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	2200      	movs	r2, #0
 800e276:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	2200      	movs	r2, #0
 800e27e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d00e      	beq.n	800e2aa <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e292:	685b      	ldr	r3, [r3, #4]
 800e294:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e29c:	4618      	mov	r0, r3
 800e29e:	f009 f861 	bl	8017364 <free>
    pdev->pClassData = NULL;
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800e2aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	3710      	adds	r7, #16
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	bd80      	pop	{r7, pc}

0800e2b4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e2b4:	b580      	push	{r7, lr}
 800e2b6:	b086      	sub	sp, #24
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	6078      	str	r0, [r7, #4]
 800e2bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e2c4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e2d2:	683b      	ldr	r3, [r7, #0]
 800e2d4:	781b      	ldrb	r3, [r3, #0]
 800e2d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d03a      	beq.n	800e354 <USBD_CDC_Setup+0xa0>
 800e2de:	2b20      	cmp	r3, #32
 800e2e0:	f040 8097 	bne.w	800e412 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800e2e4:	683b      	ldr	r3, [r7, #0]
 800e2e6:	88db      	ldrh	r3, [r3, #6]
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d029      	beq.n	800e340 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800e2ec:	683b      	ldr	r3, [r7, #0]
 800e2ee:	781b      	ldrb	r3, [r3, #0]
 800e2f0:	b25b      	sxtb	r3, r3
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	da11      	bge.n	800e31a <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e2fc:	689b      	ldr	r3, [r3, #8]
 800e2fe:	683a      	ldr	r2, [r7, #0]
 800e300:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800e302:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e304:	683a      	ldr	r2, [r7, #0]
 800e306:	88d2      	ldrh	r2, [r2, #6]
 800e308:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e30a:	6939      	ldr	r1, [r7, #16]
 800e30c:	683b      	ldr	r3, [r7, #0]
 800e30e:	88db      	ldrh	r3, [r3, #6]
 800e310:	461a      	mov	r2, r3
 800e312:	6878      	ldr	r0, [r7, #4]
 800e314:	f001 fa97 	bl	800f846 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800e318:	e082      	b.n	800e420 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800e31a:	683b      	ldr	r3, [r7, #0]
 800e31c:	785a      	ldrb	r2, [r3, #1]
 800e31e:	693b      	ldr	r3, [r7, #16]
 800e320:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800e324:	683b      	ldr	r3, [r7, #0]
 800e326:	88db      	ldrh	r3, [r3, #6]
 800e328:	b2da      	uxtb	r2, r3
 800e32a:	693b      	ldr	r3, [r7, #16]
 800e32c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e330:	6939      	ldr	r1, [r7, #16]
 800e332:	683b      	ldr	r3, [r7, #0]
 800e334:	88db      	ldrh	r3, [r3, #6]
 800e336:	461a      	mov	r2, r3
 800e338:	6878      	ldr	r0, [r7, #4]
 800e33a:	f001 fab0 	bl	800f89e <USBD_CtlPrepareRx>
    break;
 800e33e:	e06f      	b.n	800e420 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e346:	689b      	ldr	r3, [r3, #8]
 800e348:	683a      	ldr	r2, [r7, #0]
 800e34a:	7850      	ldrb	r0, [r2, #1]
 800e34c:	2200      	movs	r2, #0
 800e34e:	6839      	ldr	r1, [r7, #0]
 800e350:	4798      	blx	r3
    break;
 800e352:	e065      	b.n	800e420 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800e354:	683b      	ldr	r3, [r7, #0]
 800e356:	785b      	ldrb	r3, [r3, #1]
 800e358:	2b0b      	cmp	r3, #11
 800e35a:	d84f      	bhi.n	800e3fc <USBD_CDC_Setup+0x148>
 800e35c:	a201      	add	r2, pc, #4	; (adr r2, 800e364 <USBD_CDC_Setup+0xb0>)
 800e35e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e362:	bf00      	nop
 800e364:	0800e395 	.word	0x0800e395
 800e368:	0800e40b 	.word	0x0800e40b
 800e36c:	0800e3fd 	.word	0x0800e3fd
 800e370:	0800e3fd 	.word	0x0800e3fd
 800e374:	0800e3fd 	.word	0x0800e3fd
 800e378:	0800e3fd 	.word	0x0800e3fd
 800e37c:	0800e3fd 	.word	0x0800e3fd
 800e380:	0800e3fd 	.word	0x0800e3fd
 800e384:	0800e3fd 	.word	0x0800e3fd
 800e388:	0800e3fd 	.word	0x0800e3fd
 800e38c:	0800e3bd 	.word	0x0800e3bd
 800e390:	0800e3e5 	.word	0x0800e3e5
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e39a:	2b03      	cmp	r3, #3
 800e39c:	d107      	bne.n	800e3ae <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e39e:	f107 030c 	add.w	r3, r7, #12
 800e3a2:	2202      	movs	r2, #2
 800e3a4:	4619      	mov	r1, r3
 800e3a6:	6878      	ldr	r0, [r7, #4]
 800e3a8:	f001 fa4d 	bl	800f846 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800e3ac:	e030      	b.n	800e410 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800e3ae:	6839      	ldr	r1, [r7, #0]
 800e3b0:	6878      	ldr	r0, [r7, #4]
 800e3b2:	f001 f9d7 	bl	800f764 <USBD_CtlError>
        ret = USBD_FAIL;
 800e3b6:	2303      	movs	r3, #3
 800e3b8:	75fb      	strb	r3, [r7, #23]
      break;
 800e3ba:	e029      	b.n	800e410 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e3c2:	2b03      	cmp	r3, #3
 800e3c4:	d107      	bne.n	800e3d6 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e3c6:	f107 030f 	add.w	r3, r7, #15
 800e3ca:	2201      	movs	r2, #1
 800e3cc:	4619      	mov	r1, r3
 800e3ce:	6878      	ldr	r0, [r7, #4]
 800e3d0:	f001 fa39 	bl	800f846 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800e3d4:	e01c      	b.n	800e410 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800e3d6:	6839      	ldr	r1, [r7, #0]
 800e3d8:	6878      	ldr	r0, [r7, #4]
 800e3da:	f001 f9c3 	bl	800f764 <USBD_CtlError>
        ret = USBD_FAIL;
 800e3de:	2303      	movs	r3, #3
 800e3e0:	75fb      	strb	r3, [r7, #23]
      break;
 800e3e2:	e015      	b.n	800e410 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e3ea:	2b03      	cmp	r3, #3
 800e3ec:	d00f      	beq.n	800e40e <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800e3ee:	6839      	ldr	r1, [r7, #0]
 800e3f0:	6878      	ldr	r0, [r7, #4]
 800e3f2:	f001 f9b7 	bl	800f764 <USBD_CtlError>
        ret = USBD_FAIL;
 800e3f6:	2303      	movs	r3, #3
 800e3f8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800e3fa:	e008      	b.n	800e40e <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800e3fc:	6839      	ldr	r1, [r7, #0]
 800e3fe:	6878      	ldr	r0, [r7, #4]
 800e400:	f001 f9b0 	bl	800f764 <USBD_CtlError>
      ret = USBD_FAIL;
 800e404:	2303      	movs	r3, #3
 800e406:	75fb      	strb	r3, [r7, #23]
      break;
 800e408:	e002      	b.n	800e410 <USBD_CDC_Setup+0x15c>
      break;
 800e40a:	bf00      	nop
 800e40c:	e008      	b.n	800e420 <USBD_CDC_Setup+0x16c>
      break;
 800e40e:	bf00      	nop
    }
    break;
 800e410:	e006      	b.n	800e420 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800e412:	6839      	ldr	r1, [r7, #0]
 800e414:	6878      	ldr	r0, [r7, #4]
 800e416:	f001 f9a5 	bl	800f764 <USBD_CtlError>
    ret = USBD_FAIL;
 800e41a:	2303      	movs	r3, #3
 800e41c:	75fb      	strb	r3, [r7, #23]
    break;
 800e41e:	bf00      	nop
  }

  return (uint8_t)ret;
 800e420:	7dfb      	ldrb	r3, [r7, #23]
}
 800e422:	4618      	mov	r0, r3
 800e424:	3718      	adds	r7, #24
 800e426:	46bd      	mov	sp, r7
 800e428:	bd80      	pop	{r7, pc}
 800e42a:	bf00      	nop

0800e42c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e42c:	b580      	push	{r7, lr}
 800e42e:	b084      	sub	sp, #16
 800e430:	af00      	add	r7, sp, #0
 800e432:	6078      	str	r0, [r7, #4]
 800e434:	460b      	mov	r3, r1
 800e436:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e43e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e446:	2b00      	cmp	r3, #0
 800e448:	d101      	bne.n	800e44e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e44a:	2303      	movs	r3, #3
 800e44c:	e049      	b.n	800e4e2 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e454:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e456:	78fa      	ldrb	r2, [r7, #3]
 800e458:	6879      	ldr	r1, [r7, #4]
 800e45a:	4613      	mov	r3, r2
 800e45c:	009b      	lsls	r3, r3, #2
 800e45e:	4413      	add	r3, r2
 800e460:	009b      	lsls	r3, r3, #2
 800e462:	440b      	add	r3, r1
 800e464:	3318      	adds	r3, #24
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d029      	beq.n	800e4c0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800e46c:	78fa      	ldrb	r2, [r7, #3]
 800e46e:	6879      	ldr	r1, [r7, #4]
 800e470:	4613      	mov	r3, r2
 800e472:	009b      	lsls	r3, r3, #2
 800e474:	4413      	add	r3, r2
 800e476:	009b      	lsls	r3, r3, #2
 800e478:	440b      	add	r3, r1
 800e47a:	3318      	adds	r3, #24
 800e47c:	681a      	ldr	r2, [r3, #0]
 800e47e:	78f9      	ldrb	r1, [r7, #3]
 800e480:	68f8      	ldr	r0, [r7, #12]
 800e482:	460b      	mov	r3, r1
 800e484:	00db      	lsls	r3, r3, #3
 800e486:	1a5b      	subs	r3, r3, r1
 800e488:	009b      	lsls	r3, r3, #2
 800e48a:	4403      	add	r3, r0
 800e48c:	3344      	adds	r3, #68	; 0x44
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	fbb2 f1f3 	udiv	r1, r2, r3
 800e494:	fb03 f301 	mul.w	r3, r3, r1
 800e498:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d110      	bne.n	800e4c0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800e49e:	78fa      	ldrb	r2, [r7, #3]
 800e4a0:	6879      	ldr	r1, [r7, #4]
 800e4a2:	4613      	mov	r3, r2
 800e4a4:	009b      	lsls	r3, r3, #2
 800e4a6:	4413      	add	r3, r2
 800e4a8:	009b      	lsls	r3, r3, #2
 800e4aa:	440b      	add	r3, r1
 800e4ac:	3318      	adds	r3, #24
 800e4ae:	2200      	movs	r2, #0
 800e4b0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e4b2:	78f9      	ldrb	r1, [r7, #3]
 800e4b4:	2300      	movs	r3, #0
 800e4b6:	2200      	movs	r2, #0
 800e4b8:	6878      	ldr	r0, [r7, #4]
 800e4ba:	f008 fe4c 	bl	8017156 <USBD_LL_Transmit>
 800e4be:	e00f      	b.n	800e4e0 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800e4c0:	68bb      	ldr	r3, [r7, #8]
 800e4c2:	2200      	movs	r2, #0
 800e4c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e4ce:	691b      	ldr	r3, [r3, #16]
 800e4d0:	68ba      	ldr	r2, [r7, #8]
 800e4d2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800e4d6:	68ba      	ldr	r2, [r7, #8]
 800e4d8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800e4dc:	78fa      	ldrb	r2, [r7, #3]
 800e4de:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800e4e0:	2300      	movs	r3, #0
}
 800e4e2:	4618      	mov	r0, r3
 800e4e4:	3710      	adds	r7, #16
 800e4e6:	46bd      	mov	sp, r7
 800e4e8:	bd80      	pop	{r7, pc}

0800e4ea <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e4ea:	b580      	push	{r7, lr}
 800e4ec:	b084      	sub	sp, #16
 800e4ee:	af00      	add	r7, sp, #0
 800e4f0:	6078      	str	r0, [r7, #4]
 800e4f2:	460b      	mov	r3, r1
 800e4f4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e4fc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e504:	2b00      	cmp	r3, #0
 800e506:	d101      	bne.n	800e50c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e508:	2303      	movs	r3, #3
 800e50a:	e015      	b.n	800e538 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e50c:	78fb      	ldrb	r3, [r7, #3]
 800e50e:	4619      	mov	r1, r3
 800e510:	6878      	ldr	r0, [r7, #4]
 800e512:	f008 fe62 	bl	80171da <USBD_LL_GetRxDataSize>
 800e516:	4602      	mov	r2, r0
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e524:	68db      	ldr	r3, [r3, #12]
 800e526:	68fa      	ldr	r2, [r7, #12]
 800e528:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800e52c:	68fa      	ldr	r2, [r7, #12]
 800e52e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800e532:	4611      	mov	r1, r2
 800e534:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e536:	2300      	movs	r3, #0
}
 800e538:	4618      	mov	r0, r3
 800e53a:	3710      	adds	r7, #16
 800e53c:	46bd      	mov	sp, r7
 800e53e:	bd80      	pop	{r7, pc}

0800e540 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e540:	b580      	push	{r7, lr}
 800e542:	b084      	sub	sp, #16
 800e544:	af00      	add	r7, sp, #0
 800e546:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e54e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e556:	2b00      	cmp	r3, #0
 800e558:	d015      	beq.n	800e586 <USBD_CDC_EP0_RxReady+0x46>
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800e560:	2bff      	cmp	r3, #255	; 0xff
 800e562:	d010      	beq.n	800e586 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e56a:	689b      	ldr	r3, [r3, #8]
 800e56c:	68fa      	ldr	r2, [r7, #12]
 800e56e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800e572:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800e574:	68fa      	ldr	r2, [r7, #12]
 800e576:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e57a:	b292      	uxth	r2, r2
 800e57c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	22ff      	movs	r2, #255	; 0xff
 800e582:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800e586:	2300      	movs	r3, #0
}
 800e588:	4618      	mov	r0, r3
 800e58a:	3710      	adds	r7, #16
 800e58c:	46bd      	mov	sp, r7
 800e58e:	bd80      	pop	{r7, pc}

0800e590 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e590:	b480      	push	{r7}
 800e592:	b083      	sub	sp, #12
 800e594:	af00      	add	r7, sp, #0
 800e596:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	2243      	movs	r2, #67	; 0x43
 800e59c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800e59e:	4b03      	ldr	r3, [pc, #12]	; (800e5ac <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	370c      	adds	r7, #12
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5aa:	4770      	bx	lr
 800e5ac:	20000094 	.word	0x20000094

0800e5b0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e5b0:	b480      	push	{r7}
 800e5b2:	b083      	sub	sp, #12
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	2243      	movs	r2, #67	; 0x43
 800e5bc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800e5be:	4b03      	ldr	r3, [pc, #12]	; (800e5cc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	370c      	adds	r7, #12
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ca:	4770      	bx	lr
 800e5cc:	20000050 	.word	0x20000050

0800e5d0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e5d0:	b480      	push	{r7}
 800e5d2:	b083      	sub	sp, #12
 800e5d4:	af00      	add	r7, sp, #0
 800e5d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	2243      	movs	r2, #67	; 0x43
 800e5dc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800e5de:	4b03      	ldr	r3, [pc, #12]	; (800e5ec <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	370c      	adds	r7, #12
 800e5e4:	46bd      	mov	sp, r7
 800e5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ea:	4770      	bx	lr
 800e5ec:	200000d8 	.word	0x200000d8

0800e5f0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e5f0:	b480      	push	{r7}
 800e5f2:	b083      	sub	sp, #12
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	220a      	movs	r2, #10
 800e5fc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e5fe:	4b03      	ldr	r3, [pc, #12]	; (800e60c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e600:	4618      	mov	r0, r3
 800e602:	370c      	adds	r7, #12
 800e604:	46bd      	mov	sp, r7
 800e606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e60a:	4770      	bx	lr
 800e60c:	2000000c 	.word	0x2000000c

0800e610 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e610:	b480      	push	{r7}
 800e612:	b083      	sub	sp, #12
 800e614:	af00      	add	r7, sp, #0
 800e616:	6078      	str	r0, [r7, #4]
 800e618:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e61a:	683b      	ldr	r3, [r7, #0]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d101      	bne.n	800e624 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e620:	2303      	movs	r3, #3
 800e622:	e004      	b.n	800e62e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	683a      	ldr	r2, [r7, #0]
 800e628:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800e62c:	2300      	movs	r3, #0
}
 800e62e:	4618      	mov	r0, r3
 800e630:	370c      	adds	r7, #12
 800e632:	46bd      	mov	sp, r7
 800e634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e638:	4770      	bx	lr

0800e63a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e63a:	b480      	push	{r7}
 800e63c:	b087      	sub	sp, #28
 800e63e:	af00      	add	r7, sp, #0
 800e640:	60f8      	str	r0, [r7, #12]
 800e642:	60b9      	str	r1, [r7, #8]
 800e644:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e64c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800e64e:	697b      	ldr	r3, [r7, #20]
 800e650:	68ba      	ldr	r2, [r7, #8]
 800e652:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800e656:	697b      	ldr	r3, [r7, #20]
 800e658:	687a      	ldr	r2, [r7, #4]
 800e65a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800e65e:	2300      	movs	r3, #0
}
 800e660:	4618      	mov	r0, r3
 800e662:	371c      	adds	r7, #28
 800e664:	46bd      	mov	sp, r7
 800e666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e66a:	4770      	bx	lr

0800e66c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e66c:	b480      	push	{r7}
 800e66e:	b085      	sub	sp, #20
 800e670:	af00      	add	r7, sp, #0
 800e672:	6078      	str	r0, [r7, #4]
 800e674:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e67c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	683a      	ldr	r2, [r7, #0]
 800e682:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800e686:	2300      	movs	r3, #0
}
 800e688:	4618      	mov	r0, r3
 800e68a:	3714      	adds	r7, #20
 800e68c:	46bd      	mov	sp, r7
 800e68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e692:	4770      	bx	lr

0800e694 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e694:	b580      	push	{r7, lr}
 800e696:	b084      	sub	sp, #16
 800e698:	af00      	add	r7, sp, #0
 800e69a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e6a2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d101      	bne.n	800e6b2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800e6ae:	2303      	movs	r3, #3
 800e6b0:	e016      	b.n	800e6e0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	7c1b      	ldrb	r3, [r3, #16]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d109      	bne.n	800e6ce <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e6c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e6c4:	2101      	movs	r1, #1
 800e6c6:	6878      	ldr	r0, [r7, #4]
 800e6c8:	f008 fd66 	bl	8017198 <USBD_LL_PrepareReceive>
 800e6cc:	e007      	b.n	800e6de <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e6d4:	2340      	movs	r3, #64	; 0x40
 800e6d6:	2101      	movs	r1, #1
 800e6d8:	6878      	ldr	r0, [r7, #4]
 800e6da:	f008 fd5d 	bl	8017198 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e6de:	2300      	movs	r3, #0
}
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	3710      	adds	r7, #16
 800e6e4:	46bd      	mov	sp, r7
 800e6e6:	bd80      	pop	{r7, pc}

0800e6e8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e6e8:	b580      	push	{r7, lr}
 800e6ea:	b086      	sub	sp, #24
 800e6ec:	af00      	add	r7, sp, #0
 800e6ee:	60f8      	str	r0, [r7, #12]
 800e6f0:	60b9      	str	r1, [r7, #8]
 800e6f2:	4613      	mov	r3, r2
 800e6f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d101      	bne.n	800e700 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800e6fc:	2303      	movs	r3, #3
 800e6fe:	e025      	b.n	800e74c <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e706:	2b00      	cmp	r3, #0
 800e708:	d003      	beq.n	800e712 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	2200      	movs	r2, #0
 800e70e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d003      	beq.n	800e724 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	2200      	movs	r2, #0
 800e720:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e724:	68bb      	ldr	r3, [r7, #8]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d003      	beq.n	800e732 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	68ba      	ldr	r2, [r7, #8]
 800e72e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	2201      	movs	r2, #1
 800e736:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	79fa      	ldrb	r2, [r7, #7]
 800e73e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e740:	68f8      	ldr	r0, [r7, #12]
 800e742:	f008 fbd3 	bl	8016eec <USBD_LL_Init>
 800e746:	4603      	mov	r3, r0
 800e748:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e74a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e74c:	4618      	mov	r0, r3
 800e74e:	3718      	adds	r7, #24
 800e750:	46bd      	mov	sp, r7
 800e752:	bd80      	pop	{r7, pc}

0800e754 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e754:	b580      	push	{r7, lr}
 800e756:	b084      	sub	sp, #16
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
 800e75c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e75e:	2300      	movs	r3, #0
 800e760:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e762:	683b      	ldr	r3, [r7, #0]
 800e764:	2b00      	cmp	r3, #0
 800e766:	d101      	bne.n	800e76c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800e768:	2303      	movs	r3, #3
 800e76a:	e010      	b.n	800e78e <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	683a      	ldr	r2, [r7, #0]
 800e770:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e77a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e77c:	f107 020e 	add.w	r2, r7, #14
 800e780:	4610      	mov	r0, r2
 800e782:	4798      	blx	r3
 800e784:	4602      	mov	r2, r0
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800e78c:	2300      	movs	r3, #0
}
 800e78e:	4618      	mov	r0, r3
 800e790:	3710      	adds	r7, #16
 800e792:	46bd      	mov	sp, r7
 800e794:	bd80      	pop	{r7, pc}

0800e796 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e796:	b580      	push	{r7, lr}
 800e798:	b082      	sub	sp, #8
 800e79a:	af00      	add	r7, sp, #0
 800e79c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e79e:	6878      	ldr	r0, [r7, #4]
 800e7a0:	f008 fbf0 	bl	8016f84 <USBD_LL_Start>
 800e7a4:	4603      	mov	r3, r0
}
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	3708      	adds	r7, #8
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	bd80      	pop	{r7, pc}

0800e7ae <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800e7ae:	b480      	push	{r7}
 800e7b0:	b083      	sub	sp, #12
 800e7b2:	af00      	add	r7, sp, #0
 800e7b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e7b6:	2300      	movs	r3, #0
}
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	370c      	adds	r7, #12
 800e7bc:	46bd      	mov	sp, r7
 800e7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c2:	4770      	bx	lr

0800e7c4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	b084      	sub	sp, #16
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	6078      	str	r0, [r7, #4]
 800e7cc:	460b      	mov	r3, r1
 800e7ce:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800e7d0:	2303      	movs	r3, #3
 800e7d2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d009      	beq.n	800e7f2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	78fa      	ldrb	r2, [r7, #3]
 800e7e8:	4611      	mov	r1, r2
 800e7ea:	6878      	ldr	r0, [r7, #4]
 800e7ec:	4798      	blx	r3
 800e7ee:	4603      	mov	r3, r0
 800e7f0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800e7f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7f4:	4618      	mov	r0, r3
 800e7f6:	3710      	adds	r7, #16
 800e7f8:	46bd      	mov	sp, r7
 800e7fa:	bd80      	pop	{r7, pc}

0800e7fc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e7fc:	b580      	push	{r7, lr}
 800e7fe:	b082      	sub	sp, #8
 800e800:	af00      	add	r7, sp, #0
 800e802:	6078      	str	r0, [r7, #4]
 800e804:	460b      	mov	r3, r1
 800e806:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d007      	beq.n	800e822 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e818:	685b      	ldr	r3, [r3, #4]
 800e81a:	78fa      	ldrb	r2, [r7, #3]
 800e81c:	4611      	mov	r1, r2
 800e81e:	6878      	ldr	r0, [r7, #4]
 800e820:	4798      	blx	r3
  }

  return USBD_OK;
 800e822:	2300      	movs	r3, #0
}
 800e824:	4618      	mov	r0, r3
 800e826:	3708      	adds	r7, #8
 800e828:	46bd      	mov	sp, r7
 800e82a:	bd80      	pop	{r7, pc}

0800e82c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b084      	sub	sp, #16
 800e830:	af00      	add	r7, sp, #0
 800e832:	6078      	str	r0, [r7, #4]
 800e834:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e83c:	6839      	ldr	r1, [r7, #0]
 800e83e:	4618      	mov	r0, r3
 800e840:	f000 ff56 	bl	800f6f0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	2201      	movs	r2, #1
 800e848:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800e852:	461a      	mov	r2, r3
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e860:	f003 031f 	and.w	r3, r3, #31
 800e864:	2b01      	cmp	r3, #1
 800e866:	d00e      	beq.n	800e886 <USBD_LL_SetupStage+0x5a>
 800e868:	2b01      	cmp	r3, #1
 800e86a:	d302      	bcc.n	800e872 <USBD_LL_SetupStage+0x46>
 800e86c:	2b02      	cmp	r3, #2
 800e86e:	d014      	beq.n	800e89a <USBD_LL_SetupStage+0x6e>
 800e870:	e01d      	b.n	800e8ae <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e878:	4619      	mov	r1, r3
 800e87a:	6878      	ldr	r0, [r7, #4]
 800e87c:	f000 fa18 	bl	800ecb0 <USBD_StdDevReq>
 800e880:	4603      	mov	r3, r0
 800e882:	73fb      	strb	r3, [r7, #15]
      break;
 800e884:	e020      	b.n	800e8c8 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e88c:	4619      	mov	r1, r3
 800e88e:	6878      	ldr	r0, [r7, #4]
 800e890:	f000 fa7c 	bl	800ed8c <USBD_StdItfReq>
 800e894:	4603      	mov	r3, r0
 800e896:	73fb      	strb	r3, [r7, #15]
      break;
 800e898:	e016      	b.n	800e8c8 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e8a0:	4619      	mov	r1, r3
 800e8a2:	6878      	ldr	r0, [r7, #4]
 800e8a4:	f000 fab8 	bl	800ee18 <USBD_StdEPReq>
 800e8a8:	4603      	mov	r3, r0
 800e8aa:	73fb      	strb	r3, [r7, #15]
      break;
 800e8ac:	e00c      	b.n	800e8c8 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e8b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e8b8:	b2db      	uxtb	r3, r3
 800e8ba:	4619      	mov	r1, r3
 800e8bc:	6878      	ldr	r0, [r7, #4]
 800e8be:	f008 fbc1 	bl	8017044 <USBD_LL_StallEP>
 800e8c2:	4603      	mov	r3, r0
 800e8c4:	73fb      	strb	r3, [r7, #15]
      break;
 800e8c6:	bf00      	nop
  }

  return ret;
 800e8c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8ca:	4618      	mov	r0, r3
 800e8cc:	3710      	adds	r7, #16
 800e8ce:	46bd      	mov	sp, r7
 800e8d0:	bd80      	pop	{r7, pc}

0800e8d2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e8d2:	b580      	push	{r7, lr}
 800e8d4:	b086      	sub	sp, #24
 800e8d6:	af00      	add	r7, sp, #0
 800e8d8:	60f8      	str	r0, [r7, #12]
 800e8da:	460b      	mov	r3, r1
 800e8dc:	607a      	str	r2, [r7, #4]
 800e8de:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e8e0:	7afb      	ldrb	r3, [r7, #11]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d137      	bne.n	800e956 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800e8ec:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e8f4:	2b03      	cmp	r3, #3
 800e8f6:	d14a      	bne.n	800e98e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800e8f8:	693b      	ldr	r3, [r7, #16]
 800e8fa:	689a      	ldr	r2, [r3, #8]
 800e8fc:	693b      	ldr	r3, [r7, #16]
 800e8fe:	68db      	ldr	r3, [r3, #12]
 800e900:	429a      	cmp	r2, r3
 800e902:	d913      	bls.n	800e92c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e904:	693b      	ldr	r3, [r7, #16]
 800e906:	689a      	ldr	r2, [r3, #8]
 800e908:	693b      	ldr	r3, [r7, #16]
 800e90a:	68db      	ldr	r3, [r3, #12]
 800e90c:	1ad2      	subs	r2, r2, r3
 800e90e:	693b      	ldr	r3, [r7, #16]
 800e910:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e912:	693b      	ldr	r3, [r7, #16]
 800e914:	68da      	ldr	r2, [r3, #12]
 800e916:	693b      	ldr	r3, [r7, #16]
 800e918:	689b      	ldr	r3, [r3, #8]
 800e91a:	4293      	cmp	r3, r2
 800e91c:	bf28      	it	cs
 800e91e:	4613      	movcs	r3, r2
 800e920:	461a      	mov	r2, r3
 800e922:	6879      	ldr	r1, [r7, #4]
 800e924:	68f8      	ldr	r0, [r7, #12]
 800e926:	f000 ffd7 	bl	800f8d8 <USBD_CtlContinueRx>
 800e92a:	e030      	b.n	800e98e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e932:	691b      	ldr	r3, [r3, #16]
 800e934:	2b00      	cmp	r3, #0
 800e936:	d00a      	beq.n	800e94e <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800e93e:	2b03      	cmp	r3, #3
 800e940:	d105      	bne.n	800e94e <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e948:	691b      	ldr	r3, [r3, #16]
 800e94a:	68f8      	ldr	r0, [r7, #12]
 800e94c:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800e94e:	68f8      	ldr	r0, [r7, #12]
 800e950:	f000 ffd3 	bl	800f8fa <USBD_CtlSendStatus>
 800e954:	e01b      	b.n	800e98e <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e95c:	699b      	ldr	r3, [r3, #24]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d013      	beq.n	800e98a <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800e968:	2b03      	cmp	r3, #3
 800e96a:	d10e      	bne.n	800e98a <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e972:	699b      	ldr	r3, [r3, #24]
 800e974:	7afa      	ldrb	r2, [r7, #11]
 800e976:	4611      	mov	r1, r2
 800e978:	68f8      	ldr	r0, [r7, #12]
 800e97a:	4798      	blx	r3
 800e97c:	4603      	mov	r3, r0
 800e97e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800e980:	7dfb      	ldrb	r3, [r7, #23]
 800e982:	2b00      	cmp	r3, #0
 800e984:	d003      	beq.n	800e98e <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800e986:	7dfb      	ldrb	r3, [r7, #23]
 800e988:	e002      	b.n	800e990 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800e98a:	2303      	movs	r3, #3
 800e98c:	e000      	b.n	800e990 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800e98e:	2300      	movs	r3, #0
}
 800e990:	4618      	mov	r0, r3
 800e992:	3718      	adds	r7, #24
 800e994:	46bd      	mov	sp, r7
 800e996:	bd80      	pop	{r7, pc}

0800e998 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e998:	b580      	push	{r7, lr}
 800e99a:	b086      	sub	sp, #24
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	60f8      	str	r0, [r7, #12]
 800e9a0:	460b      	mov	r3, r1
 800e9a2:	607a      	str	r2, [r7, #4]
 800e9a4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e9a6:	7afb      	ldrb	r3, [r7, #11]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d16a      	bne.n	800ea82 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	3314      	adds	r3, #20
 800e9b0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e9b8:	2b02      	cmp	r3, #2
 800e9ba:	d155      	bne.n	800ea68 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800e9bc:	693b      	ldr	r3, [r7, #16]
 800e9be:	689a      	ldr	r2, [r3, #8]
 800e9c0:	693b      	ldr	r3, [r7, #16]
 800e9c2:	68db      	ldr	r3, [r3, #12]
 800e9c4:	429a      	cmp	r2, r3
 800e9c6:	d914      	bls.n	800e9f2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e9c8:	693b      	ldr	r3, [r7, #16]
 800e9ca:	689a      	ldr	r2, [r3, #8]
 800e9cc:	693b      	ldr	r3, [r7, #16]
 800e9ce:	68db      	ldr	r3, [r3, #12]
 800e9d0:	1ad2      	subs	r2, r2, r3
 800e9d2:	693b      	ldr	r3, [r7, #16]
 800e9d4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e9d6:	693b      	ldr	r3, [r7, #16]
 800e9d8:	689b      	ldr	r3, [r3, #8]
 800e9da:	461a      	mov	r2, r3
 800e9dc:	6879      	ldr	r1, [r7, #4]
 800e9de:	68f8      	ldr	r0, [r7, #12]
 800e9e0:	f000 ff4c 	bl	800f87c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e9e4:	2300      	movs	r3, #0
 800e9e6:	2200      	movs	r2, #0
 800e9e8:	2100      	movs	r1, #0
 800e9ea:	68f8      	ldr	r0, [r7, #12]
 800e9ec:	f008 fbd4 	bl	8017198 <USBD_LL_PrepareReceive>
 800e9f0:	e03a      	b.n	800ea68 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e9f2:	693b      	ldr	r3, [r7, #16]
 800e9f4:	68da      	ldr	r2, [r3, #12]
 800e9f6:	693b      	ldr	r3, [r7, #16]
 800e9f8:	689b      	ldr	r3, [r3, #8]
 800e9fa:	429a      	cmp	r2, r3
 800e9fc:	d11c      	bne.n	800ea38 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e9fe:	693b      	ldr	r3, [r7, #16]
 800ea00:	685a      	ldr	r2, [r3, #4]
 800ea02:	693b      	ldr	r3, [r7, #16]
 800ea04:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ea06:	429a      	cmp	r2, r3
 800ea08:	d316      	bcc.n	800ea38 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ea0a:	693b      	ldr	r3, [r7, #16]
 800ea0c:	685a      	ldr	r2, [r3, #4]
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ea14:	429a      	cmp	r2, r3
 800ea16:	d20f      	bcs.n	800ea38 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ea18:	2200      	movs	r2, #0
 800ea1a:	2100      	movs	r1, #0
 800ea1c:	68f8      	ldr	r0, [r7, #12]
 800ea1e:	f000 ff2d 	bl	800f87c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	2200      	movs	r2, #0
 800ea26:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	2200      	movs	r2, #0
 800ea2e:	2100      	movs	r1, #0
 800ea30:	68f8      	ldr	r0, [r7, #12]
 800ea32:	f008 fbb1 	bl	8017198 <USBD_LL_PrepareReceive>
 800ea36:	e017      	b.n	800ea68 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea3e:	68db      	ldr	r3, [r3, #12]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d00a      	beq.n	800ea5a <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800ea4a:	2b03      	cmp	r3, #3
 800ea4c:	d105      	bne.n	800ea5a <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea54:	68db      	ldr	r3, [r3, #12]
 800ea56:	68f8      	ldr	r0, [r7, #12]
 800ea58:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ea5a:	2180      	movs	r1, #128	; 0x80
 800ea5c:	68f8      	ldr	r0, [r7, #12]
 800ea5e:	f008 faf1 	bl	8017044 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ea62:	68f8      	ldr	r0, [r7, #12]
 800ea64:	f000 ff5c 	bl	800f920 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ea6e:	2b01      	cmp	r3, #1
 800ea70:	d123      	bne.n	800eaba <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800ea72:	68f8      	ldr	r0, [r7, #12]
 800ea74:	f7ff fe9b 	bl	800e7ae <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	2200      	movs	r2, #0
 800ea7c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ea80:	e01b      	b.n	800eaba <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea88:	695b      	ldr	r3, [r3, #20]
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d013      	beq.n	800eab6 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800ea94:	2b03      	cmp	r3, #3
 800ea96:	d10e      	bne.n	800eab6 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea9e:	695b      	ldr	r3, [r3, #20]
 800eaa0:	7afa      	ldrb	r2, [r7, #11]
 800eaa2:	4611      	mov	r1, r2
 800eaa4:	68f8      	ldr	r0, [r7, #12]
 800eaa6:	4798      	blx	r3
 800eaa8:	4603      	mov	r3, r0
 800eaaa:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800eaac:	7dfb      	ldrb	r3, [r7, #23]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d003      	beq.n	800eaba <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800eab2:	7dfb      	ldrb	r3, [r7, #23]
 800eab4:	e002      	b.n	800eabc <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800eab6:	2303      	movs	r3, #3
 800eab8:	e000      	b.n	800eabc <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800eaba:	2300      	movs	r3, #0
}
 800eabc:	4618      	mov	r0, r3
 800eabe:	3718      	adds	r7, #24
 800eac0:	46bd      	mov	sp, r7
 800eac2:	bd80      	pop	{r7, pc}

0800eac4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800eac4:	b580      	push	{r7, lr}
 800eac6:	b082      	sub	sp, #8
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	2201      	movs	r2, #1
 800ead0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	2200      	movs	r2, #0
 800ead8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	2200      	movs	r2, #0
 800eae0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	2200      	movs	r2, #0
 800eae6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d009      	beq.n	800eb08 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eafa:	685b      	ldr	r3, [r3, #4]
 800eafc:	687a      	ldr	r2, [r7, #4]
 800eafe:	6852      	ldr	r2, [r2, #4]
 800eb00:	b2d2      	uxtb	r2, r2
 800eb02:	4611      	mov	r1, r2
 800eb04:	6878      	ldr	r0, [r7, #4]
 800eb06:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800eb08:	2340      	movs	r3, #64	; 0x40
 800eb0a:	2200      	movs	r2, #0
 800eb0c:	2100      	movs	r1, #0
 800eb0e:	6878      	ldr	r0, [r7, #4]
 800eb10:	f008 fa53 	bl	8016fba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	2201      	movs	r2, #1
 800eb18:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	2240      	movs	r2, #64	; 0x40
 800eb20:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800eb24:	2340      	movs	r3, #64	; 0x40
 800eb26:	2200      	movs	r2, #0
 800eb28:	2180      	movs	r1, #128	; 0x80
 800eb2a:	6878      	ldr	r0, [r7, #4]
 800eb2c:	f008 fa45 	bl	8016fba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	2201      	movs	r2, #1
 800eb34:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	2240      	movs	r2, #64	; 0x40
 800eb3a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800eb3c:	2300      	movs	r3, #0
}
 800eb3e:	4618      	mov	r0, r3
 800eb40:	3708      	adds	r7, #8
 800eb42:	46bd      	mov	sp, r7
 800eb44:	bd80      	pop	{r7, pc}

0800eb46 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800eb46:	b480      	push	{r7}
 800eb48:	b083      	sub	sp, #12
 800eb4a:	af00      	add	r7, sp, #0
 800eb4c:	6078      	str	r0, [r7, #4]
 800eb4e:	460b      	mov	r3, r1
 800eb50:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	78fa      	ldrb	r2, [r7, #3]
 800eb56:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800eb58:	2300      	movs	r3, #0
}
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	370c      	adds	r7, #12
 800eb5e:	46bd      	mov	sp, r7
 800eb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb64:	4770      	bx	lr

0800eb66 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800eb66:	b480      	push	{r7}
 800eb68:	b083      	sub	sp, #12
 800eb6a:	af00      	add	r7, sp, #0
 800eb6c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	2204      	movs	r2, #4
 800eb7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800eb82:	2300      	movs	r3, #0
}
 800eb84:	4618      	mov	r0, r3
 800eb86:	370c      	adds	r7, #12
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb8e:	4770      	bx	lr

0800eb90 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800eb90:	b480      	push	{r7}
 800eb92:	b083      	sub	sp, #12
 800eb94:	af00      	add	r7, sp, #0
 800eb96:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb9e:	2b04      	cmp	r3, #4
 800eba0:	d105      	bne.n	800ebae <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ebae:	2300      	movs	r3, #0
}
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	370c      	adds	r7, #12
 800ebb4:	46bd      	mov	sp, r7
 800ebb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebba:	4770      	bx	lr

0800ebbc <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ebbc:	b580      	push	{r7, lr}
 800ebbe:	b082      	sub	sp, #8
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ebca:	2b03      	cmp	r3, #3
 800ebcc:	d10b      	bne.n	800ebe6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebd4:	69db      	ldr	r3, [r3, #28]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d005      	beq.n	800ebe6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebe0:	69db      	ldr	r3, [r3, #28]
 800ebe2:	6878      	ldr	r0, [r7, #4]
 800ebe4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ebe6:	2300      	movs	r3, #0
}
 800ebe8:	4618      	mov	r0, r3
 800ebea:	3708      	adds	r7, #8
 800ebec:	46bd      	mov	sp, r7
 800ebee:	bd80      	pop	{r7, pc}

0800ebf0 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ebf0:	b480      	push	{r7}
 800ebf2:	b083      	sub	sp, #12
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	6078      	str	r0, [r7, #4]
 800ebf8:	460b      	mov	r3, r1
 800ebfa:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800ebfc:	2300      	movs	r3, #0
}
 800ebfe:	4618      	mov	r0, r3
 800ec00:	370c      	adds	r7, #12
 800ec02:	46bd      	mov	sp, r7
 800ec04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec08:	4770      	bx	lr

0800ec0a <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ec0a:	b480      	push	{r7}
 800ec0c:	b083      	sub	sp, #12
 800ec0e:	af00      	add	r7, sp, #0
 800ec10:	6078      	str	r0, [r7, #4]
 800ec12:	460b      	mov	r3, r1
 800ec14:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800ec16:	2300      	movs	r3, #0
}
 800ec18:	4618      	mov	r0, r3
 800ec1a:	370c      	adds	r7, #12
 800ec1c:	46bd      	mov	sp, r7
 800ec1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec22:	4770      	bx	lr

0800ec24 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ec24:	b480      	push	{r7}
 800ec26:	b083      	sub	sp, #12
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ec2c:	2300      	movs	r3, #0
}
 800ec2e:	4618      	mov	r0, r3
 800ec30:	370c      	adds	r7, #12
 800ec32:	46bd      	mov	sp, r7
 800ec34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec38:	4770      	bx	lr

0800ec3a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ec3a:	b580      	push	{r7, lr}
 800ec3c:	b082      	sub	sp, #8
 800ec3e:	af00      	add	r7, sp, #0
 800ec40:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	2201      	movs	r2, #1
 800ec46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d009      	beq.n	800ec68 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec5a:	685b      	ldr	r3, [r3, #4]
 800ec5c:	687a      	ldr	r2, [r7, #4]
 800ec5e:	6852      	ldr	r2, [r2, #4]
 800ec60:	b2d2      	uxtb	r2, r2
 800ec62:	4611      	mov	r1, r2
 800ec64:	6878      	ldr	r0, [r7, #4]
 800ec66:	4798      	blx	r3
  }

  return USBD_OK;
 800ec68:	2300      	movs	r3, #0
}
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	3708      	adds	r7, #8
 800ec6e:	46bd      	mov	sp, r7
 800ec70:	bd80      	pop	{r7, pc}

0800ec72 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ec72:	b480      	push	{r7}
 800ec74:	b087      	sub	sp, #28
 800ec76:	af00      	add	r7, sp, #0
 800ec78:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ec7e:	697b      	ldr	r3, [r7, #20]
 800ec80:	781b      	ldrb	r3, [r3, #0]
 800ec82:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ec84:	697b      	ldr	r3, [r7, #20]
 800ec86:	3301      	adds	r3, #1
 800ec88:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ec8a:	697b      	ldr	r3, [r7, #20]
 800ec8c:	781b      	ldrb	r3, [r3, #0]
 800ec8e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ec90:	8a3b      	ldrh	r3, [r7, #16]
 800ec92:	021b      	lsls	r3, r3, #8
 800ec94:	b21a      	sxth	r2, r3
 800ec96:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ec9a:	4313      	orrs	r3, r2
 800ec9c:	b21b      	sxth	r3, r3
 800ec9e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800eca0:	89fb      	ldrh	r3, [r7, #14]
}
 800eca2:	4618      	mov	r0, r3
 800eca4:	371c      	adds	r7, #28
 800eca6:	46bd      	mov	sp, r7
 800eca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecac:	4770      	bx	lr
	...

0800ecb0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ecb0:	b580      	push	{r7, lr}
 800ecb2:	b084      	sub	sp, #16
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	6078      	str	r0, [r7, #4]
 800ecb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ecba:	2300      	movs	r3, #0
 800ecbc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ecbe:	683b      	ldr	r3, [r7, #0]
 800ecc0:	781b      	ldrb	r3, [r3, #0]
 800ecc2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ecc6:	2b20      	cmp	r3, #32
 800ecc8:	d004      	beq.n	800ecd4 <USBD_StdDevReq+0x24>
 800ecca:	2b40      	cmp	r3, #64	; 0x40
 800eccc:	d002      	beq.n	800ecd4 <USBD_StdDevReq+0x24>
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d00a      	beq.n	800ece8 <USBD_StdDevReq+0x38>
 800ecd2:	e050      	b.n	800ed76 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ecda:	689b      	ldr	r3, [r3, #8]
 800ecdc:	6839      	ldr	r1, [r7, #0]
 800ecde:	6878      	ldr	r0, [r7, #4]
 800ece0:	4798      	blx	r3
 800ece2:	4603      	mov	r3, r0
 800ece4:	73fb      	strb	r3, [r7, #15]
    break;
 800ece6:	e04b      	b.n	800ed80 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800ece8:	683b      	ldr	r3, [r7, #0]
 800ecea:	785b      	ldrb	r3, [r3, #1]
 800ecec:	2b09      	cmp	r3, #9
 800ecee:	d83c      	bhi.n	800ed6a <USBD_StdDevReq+0xba>
 800ecf0:	a201      	add	r2, pc, #4	; (adr r2, 800ecf8 <USBD_StdDevReq+0x48>)
 800ecf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecf6:	bf00      	nop
 800ecf8:	0800ed4d 	.word	0x0800ed4d
 800ecfc:	0800ed61 	.word	0x0800ed61
 800ed00:	0800ed6b 	.word	0x0800ed6b
 800ed04:	0800ed57 	.word	0x0800ed57
 800ed08:	0800ed6b 	.word	0x0800ed6b
 800ed0c:	0800ed2b 	.word	0x0800ed2b
 800ed10:	0800ed21 	.word	0x0800ed21
 800ed14:	0800ed6b 	.word	0x0800ed6b
 800ed18:	0800ed43 	.word	0x0800ed43
 800ed1c:	0800ed35 	.word	0x0800ed35
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800ed20:	6839      	ldr	r1, [r7, #0]
 800ed22:	6878      	ldr	r0, [r7, #4]
 800ed24:	f000 f9ce 	bl	800f0c4 <USBD_GetDescriptor>
      break;
 800ed28:	e024      	b.n	800ed74 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800ed2a:	6839      	ldr	r1, [r7, #0]
 800ed2c:	6878      	ldr	r0, [r7, #4]
 800ed2e:	f000 fb5d 	bl	800f3ec <USBD_SetAddress>
      break;
 800ed32:	e01f      	b.n	800ed74 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800ed34:	6839      	ldr	r1, [r7, #0]
 800ed36:	6878      	ldr	r0, [r7, #4]
 800ed38:	f000 fb9a 	bl	800f470 <USBD_SetConfig>
 800ed3c:	4603      	mov	r3, r0
 800ed3e:	73fb      	strb	r3, [r7, #15]
      break;
 800ed40:	e018      	b.n	800ed74 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800ed42:	6839      	ldr	r1, [r7, #0]
 800ed44:	6878      	ldr	r0, [r7, #4]
 800ed46:	f000 fc37 	bl	800f5b8 <USBD_GetConfig>
      break;
 800ed4a:	e013      	b.n	800ed74 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800ed4c:	6839      	ldr	r1, [r7, #0]
 800ed4e:	6878      	ldr	r0, [r7, #4]
 800ed50:	f000 fc66 	bl	800f620 <USBD_GetStatus>
      break;
 800ed54:	e00e      	b.n	800ed74 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800ed56:	6839      	ldr	r1, [r7, #0]
 800ed58:	6878      	ldr	r0, [r7, #4]
 800ed5a:	f000 fc94 	bl	800f686 <USBD_SetFeature>
      break;
 800ed5e:	e009      	b.n	800ed74 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800ed60:	6839      	ldr	r1, [r7, #0]
 800ed62:	6878      	ldr	r0, [r7, #4]
 800ed64:	f000 fca3 	bl	800f6ae <USBD_ClrFeature>
      break;
 800ed68:	e004      	b.n	800ed74 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800ed6a:	6839      	ldr	r1, [r7, #0]
 800ed6c:	6878      	ldr	r0, [r7, #4]
 800ed6e:	f000 fcf9 	bl	800f764 <USBD_CtlError>
      break;
 800ed72:	bf00      	nop
    }
    break;
 800ed74:	e004      	b.n	800ed80 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800ed76:	6839      	ldr	r1, [r7, #0]
 800ed78:	6878      	ldr	r0, [r7, #4]
 800ed7a:	f000 fcf3 	bl	800f764 <USBD_CtlError>
    break;
 800ed7e:	bf00      	nop
  }

  return ret;
 800ed80:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed82:	4618      	mov	r0, r3
 800ed84:	3710      	adds	r7, #16
 800ed86:	46bd      	mov	sp, r7
 800ed88:	bd80      	pop	{r7, pc}
 800ed8a:	bf00      	nop

0800ed8c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed8c:	b580      	push	{r7, lr}
 800ed8e:	b084      	sub	sp, #16
 800ed90:	af00      	add	r7, sp, #0
 800ed92:	6078      	str	r0, [r7, #4]
 800ed94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ed96:	2300      	movs	r3, #0
 800ed98:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ed9a:	683b      	ldr	r3, [r7, #0]
 800ed9c:	781b      	ldrb	r3, [r3, #0]
 800ed9e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800eda2:	2b20      	cmp	r3, #32
 800eda4:	d003      	beq.n	800edae <USBD_StdItfReq+0x22>
 800eda6:	2b40      	cmp	r3, #64	; 0x40
 800eda8:	d001      	beq.n	800edae <USBD_StdItfReq+0x22>
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d12a      	bne.n	800ee04 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800edb4:	3b01      	subs	r3, #1
 800edb6:	2b02      	cmp	r3, #2
 800edb8:	d81d      	bhi.n	800edf6 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800edba:	683b      	ldr	r3, [r7, #0]
 800edbc:	889b      	ldrh	r3, [r3, #4]
 800edbe:	b2db      	uxtb	r3, r3
 800edc0:	2b01      	cmp	r3, #1
 800edc2:	d813      	bhi.n	800edec <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800edca:	689b      	ldr	r3, [r3, #8]
 800edcc:	6839      	ldr	r1, [r7, #0]
 800edce:	6878      	ldr	r0, [r7, #4]
 800edd0:	4798      	blx	r3
 800edd2:	4603      	mov	r3, r0
 800edd4:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800edd6:	683b      	ldr	r3, [r7, #0]
 800edd8:	88db      	ldrh	r3, [r3, #6]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d110      	bne.n	800ee00 <USBD_StdItfReq+0x74>
 800edde:	7bfb      	ldrb	r3, [r7, #15]
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d10d      	bne.n	800ee00 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800ede4:	6878      	ldr	r0, [r7, #4]
 800ede6:	f000 fd88 	bl	800f8fa <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800edea:	e009      	b.n	800ee00 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800edec:	6839      	ldr	r1, [r7, #0]
 800edee:	6878      	ldr	r0, [r7, #4]
 800edf0:	f000 fcb8 	bl	800f764 <USBD_CtlError>
      break;
 800edf4:	e004      	b.n	800ee00 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800edf6:	6839      	ldr	r1, [r7, #0]
 800edf8:	6878      	ldr	r0, [r7, #4]
 800edfa:	f000 fcb3 	bl	800f764 <USBD_CtlError>
      break;
 800edfe:	e000      	b.n	800ee02 <USBD_StdItfReq+0x76>
      break;
 800ee00:	bf00      	nop
    }
    break;
 800ee02:	e004      	b.n	800ee0e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800ee04:	6839      	ldr	r1, [r7, #0]
 800ee06:	6878      	ldr	r0, [r7, #4]
 800ee08:	f000 fcac 	bl	800f764 <USBD_CtlError>
    break;
 800ee0c:	bf00      	nop
  }

  return ret;
 800ee0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee10:	4618      	mov	r0, r3
 800ee12:	3710      	adds	r7, #16
 800ee14:	46bd      	mov	sp, r7
 800ee16:	bd80      	pop	{r7, pc}

0800ee18 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ee18:	b580      	push	{r7, lr}
 800ee1a:	b084      	sub	sp, #16
 800ee1c:	af00      	add	r7, sp, #0
 800ee1e:	6078      	str	r0, [r7, #4]
 800ee20:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ee22:	2300      	movs	r3, #0
 800ee24:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800ee26:	683b      	ldr	r3, [r7, #0]
 800ee28:	889b      	ldrh	r3, [r3, #4]
 800ee2a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ee2c:	683b      	ldr	r3, [r7, #0]
 800ee2e:	781b      	ldrb	r3, [r3, #0]
 800ee30:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ee34:	2b20      	cmp	r3, #32
 800ee36:	d004      	beq.n	800ee42 <USBD_StdEPReq+0x2a>
 800ee38:	2b40      	cmp	r3, #64	; 0x40
 800ee3a:	d002      	beq.n	800ee42 <USBD_StdEPReq+0x2a>
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d00a      	beq.n	800ee56 <USBD_StdEPReq+0x3e>
 800ee40:	e135      	b.n	800f0ae <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee48:	689b      	ldr	r3, [r3, #8]
 800ee4a:	6839      	ldr	r1, [r7, #0]
 800ee4c:	6878      	ldr	r0, [r7, #4]
 800ee4e:	4798      	blx	r3
 800ee50:	4603      	mov	r3, r0
 800ee52:	73fb      	strb	r3, [r7, #15]
    break;
 800ee54:	e130      	b.n	800f0b8 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800ee56:	683b      	ldr	r3, [r7, #0]
 800ee58:	785b      	ldrb	r3, [r3, #1]
 800ee5a:	2b01      	cmp	r3, #1
 800ee5c:	d03e      	beq.n	800eedc <USBD_StdEPReq+0xc4>
 800ee5e:	2b03      	cmp	r3, #3
 800ee60:	d002      	beq.n	800ee68 <USBD_StdEPReq+0x50>
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d077      	beq.n	800ef56 <USBD_StdEPReq+0x13e>
 800ee66:	e11c      	b.n	800f0a2 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee6e:	2b02      	cmp	r3, #2
 800ee70:	d002      	beq.n	800ee78 <USBD_StdEPReq+0x60>
 800ee72:	2b03      	cmp	r3, #3
 800ee74:	d015      	beq.n	800eea2 <USBD_StdEPReq+0x8a>
 800ee76:	e02b      	b.n	800eed0 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ee78:	7bbb      	ldrb	r3, [r7, #14]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d00c      	beq.n	800ee98 <USBD_StdEPReq+0x80>
 800ee7e:	7bbb      	ldrb	r3, [r7, #14]
 800ee80:	2b80      	cmp	r3, #128	; 0x80
 800ee82:	d009      	beq.n	800ee98 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800ee84:	7bbb      	ldrb	r3, [r7, #14]
 800ee86:	4619      	mov	r1, r3
 800ee88:	6878      	ldr	r0, [r7, #4]
 800ee8a:	f008 f8db 	bl	8017044 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ee8e:	2180      	movs	r1, #128	; 0x80
 800ee90:	6878      	ldr	r0, [r7, #4]
 800ee92:	f008 f8d7 	bl	8017044 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800ee96:	e020      	b.n	800eeda <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800ee98:	6839      	ldr	r1, [r7, #0]
 800ee9a:	6878      	ldr	r0, [r7, #4]
 800ee9c:	f000 fc62 	bl	800f764 <USBD_CtlError>
        break;
 800eea0:	e01b      	b.n	800eeda <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800eea2:	683b      	ldr	r3, [r7, #0]
 800eea4:	885b      	ldrh	r3, [r3, #2]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d10e      	bne.n	800eec8 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800eeaa:	7bbb      	ldrb	r3, [r7, #14]
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d00b      	beq.n	800eec8 <USBD_StdEPReq+0xb0>
 800eeb0:	7bbb      	ldrb	r3, [r7, #14]
 800eeb2:	2b80      	cmp	r3, #128	; 0x80
 800eeb4:	d008      	beq.n	800eec8 <USBD_StdEPReq+0xb0>
 800eeb6:	683b      	ldr	r3, [r7, #0]
 800eeb8:	88db      	ldrh	r3, [r3, #6]
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d104      	bne.n	800eec8 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800eebe:	7bbb      	ldrb	r3, [r7, #14]
 800eec0:	4619      	mov	r1, r3
 800eec2:	6878      	ldr	r0, [r7, #4]
 800eec4:	f008 f8be 	bl	8017044 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800eec8:	6878      	ldr	r0, [r7, #4]
 800eeca:	f000 fd16 	bl	800f8fa <USBD_CtlSendStatus>

        break;
 800eece:	e004      	b.n	800eeda <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800eed0:	6839      	ldr	r1, [r7, #0]
 800eed2:	6878      	ldr	r0, [r7, #4]
 800eed4:	f000 fc46 	bl	800f764 <USBD_CtlError>
        break;
 800eed8:	bf00      	nop
      }
      break;
 800eeda:	e0e7      	b.n	800f0ac <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eee2:	2b02      	cmp	r3, #2
 800eee4:	d002      	beq.n	800eeec <USBD_StdEPReq+0xd4>
 800eee6:	2b03      	cmp	r3, #3
 800eee8:	d015      	beq.n	800ef16 <USBD_StdEPReq+0xfe>
 800eeea:	e02d      	b.n	800ef48 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800eeec:	7bbb      	ldrb	r3, [r7, #14]
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d00c      	beq.n	800ef0c <USBD_StdEPReq+0xf4>
 800eef2:	7bbb      	ldrb	r3, [r7, #14]
 800eef4:	2b80      	cmp	r3, #128	; 0x80
 800eef6:	d009      	beq.n	800ef0c <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800eef8:	7bbb      	ldrb	r3, [r7, #14]
 800eefa:	4619      	mov	r1, r3
 800eefc:	6878      	ldr	r0, [r7, #4]
 800eefe:	f008 f8a1 	bl	8017044 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ef02:	2180      	movs	r1, #128	; 0x80
 800ef04:	6878      	ldr	r0, [r7, #4]
 800ef06:	f008 f89d 	bl	8017044 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800ef0a:	e023      	b.n	800ef54 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800ef0c:	6839      	ldr	r1, [r7, #0]
 800ef0e:	6878      	ldr	r0, [r7, #4]
 800ef10:	f000 fc28 	bl	800f764 <USBD_CtlError>
        break;
 800ef14:	e01e      	b.n	800ef54 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800ef16:	683b      	ldr	r3, [r7, #0]
 800ef18:	885b      	ldrh	r3, [r3, #2]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d119      	bne.n	800ef52 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800ef1e:	7bbb      	ldrb	r3, [r7, #14]
 800ef20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d004      	beq.n	800ef32 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ef28:	7bbb      	ldrb	r3, [r7, #14]
 800ef2a:	4619      	mov	r1, r3
 800ef2c:	6878      	ldr	r0, [r7, #4]
 800ef2e:	f008 f8a8 	bl	8017082 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800ef32:	6878      	ldr	r0, [r7, #4]
 800ef34:	f000 fce1 	bl	800f8fa <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef3e:	689b      	ldr	r3, [r3, #8]
 800ef40:	6839      	ldr	r1, [r7, #0]
 800ef42:	6878      	ldr	r0, [r7, #4]
 800ef44:	4798      	blx	r3
        }
        break;
 800ef46:	e004      	b.n	800ef52 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800ef48:	6839      	ldr	r1, [r7, #0]
 800ef4a:	6878      	ldr	r0, [r7, #4]
 800ef4c:	f000 fc0a 	bl	800f764 <USBD_CtlError>
        break;
 800ef50:	e000      	b.n	800ef54 <USBD_StdEPReq+0x13c>
        break;
 800ef52:	bf00      	nop
      }
      break;
 800ef54:	e0aa      	b.n	800f0ac <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ef5c:	2b02      	cmp	r3, #2
 800ef5e:	d002      	beq.n	800ef66 <USBD_StdEPReq+0x14e>
 800ef60:	2b03      	cmp	r3, #3
 800ef62:	d032      	beq.n	800efca <USBD_StdEPReq+0x1b2>
 800ef64:	e097      	b.n	800f096 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ef66:	7bbb      	ldrb	r3, [r7, #14]
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d007      	beq.n	800ef7c <USBD_StdEPReq+0x164>
 800ef6c:	7bbb      	ldrb	r3, [r7, #14]
 800ef6e:	2b80      	cmp	r3, #128	; 0x80
 800ef70:	d004      	beq.n	800ef7c <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800ef72:	6839      	ldr	r1, [r7, #0]
 800ef74:	6878      	ldr	r0, [r7, #4]
 800ef76:	f000 fbf5 	bl	800f764 <USBD_CtlError>
          break;
 800ef7a:	e091      	b.n	800f0a0 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ef7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	da0b      	bge.n	800ef9c <USBD_StdEPReq+0x184>
 800ef84:	7bbb      	ldrb	r3, [r7, #14]
 800ef86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ef8a:	4613      	mov	r3, r2
 800ef8c:	009b      	lsls	r3, r3, #2
 800ef8e:	4413      	add	r3, r2
 800ef90:	009b      	lsls	r3, r3, #2
 800ef92:	3310      	adds	r3, #16
 800ef94:	687a      	ldr	r2, [r7, #4]
 800ef96:	4413      	add	r3, r2
 800ef98:	3304      	adds	r3, #4
 800ef9a:	e00b      	b.n	800efb4 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800ef9c:	7bbb      	ldrb	r3, [r7, #14]
 800ef9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800efa2:	4613      	mov	r3, r2
 800efa4:	009b      	lsls	r3, r3, #2
 800efa6:	4413      	add	r3, r2
 800efa8:	009b      	lsls	r3, r3, #2
 800efaa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800efae:	687a      	ldr	r2, [r7, #4]
 800efb0:	4413      	add	r3, r2
 800efb2:	3304      	adds	r3, #4
 800efb4:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800efb6:	68bb      	ldr	r3, [r7, #8]
 800efb8:	2200      	movs	r2, #0
 800efba:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800efbc:	68bb      	ldr	r3, [r7, #8]
 800efbe:	2202      	movs	r2, #2
 800efc0:	4619      	mov	r1, r3
 800efc2:	6878      	ldr	r0, [r7, #4]
 800efc4:	f000 fc3f 	bl	800f846 <USBD_CtlSendData>
        break;
 800efc8:	e06a      	b.n	800f0a0 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800efca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	da11      	bge.n	800eff6 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800efd2:	7bbb      	ldrb	r3, [r7, #14]
 800efd4:	f003 020f 	and.w	r2, r3, #15
 800efd8:	6879      	ldr	r1, [r7, #4]
 800efda:	4613      	mov	r3, r2
 800efdc:	009b      	lsls	r3, r3, #2
 800efde:	4413      	add	r3, r2
 800efe0:	009b      	lsls	r3, r3, #2
 800efe2:	440b      	add	r3, r1
 800efe4:	3324      	adds	r3, #36	; 0x24
 800efe6:	881b      	ldrh	r3, [r3, #0]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d117      	bne.n	800f01c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800efec:	6839      	ldr	r1, [r7, #0]
 800efee:	6878      	ldr	r0, [r7, #4]
 800eff0:	f000 fbb8 	bl	800f764 <USBD_CtlError>
            break;
 800eff4:	e054      	b.n	800f0a0 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800eff6:	7bbb      	ldrb	r3, [r7, #14]
 800eff8:	f003 020f 	and.w	r2, r3, #15
 800effc:	6879      	ldr	r1, [r7, #4]
 800effe:	4613      	mov	r3, r2
 800f000:	009b      	lsls	r3, r3, #2
 800f002:	4413      	add	r3, r2
 800f004:	009b      	lsls	r3, r3, #2
 800f006:	440b      	add	r3, r1
 800f008:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800f00c:	881b      	ldrh	r3, [r3, #0]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d104      	bne.n	800f01c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800f012:	6839      	ldr	r1, [r7, #0]
 800f014:	6878      	ldr	r0, [r7, #4]
 800f016:	f000 fba5 	bl	800f764 <USBD_CtlError>
            break;
 800f01a:	e041      	b.n	800f0a0 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f01c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f020:	2b00      	cmp	r3, #0
 800f022:	da0b      	bge.n	800f03c <USBD_StdEPReq+0x224>
 800f024:	7bbb      	ldrb	r3, [r7, #14]
 800f026:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f02a:	4613      	mov	r3, r2
 800f02c:	009b      	lsls	r3, r3, #2
 800f02e:	4413      	add	r3, r2
 800f030:	009b      	lsls	r3, r3, #2
 800f032:	3310      	adds	r3, #16
 800f034:	687a      	ldr	r2, [r7, #4]
 800f036:	4413      	add	r3, r2
 800f038:	3304      	adds	r3, #4
 800f03a:	e00b      	b.n	800f054 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800f03c:	7bbb      	ldrb	r3, [r7, #14]
 800f03e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f042:	4613      	mov	r3, r2
 800f044:	009b      	lsls	r3, r3, #2
 800f046:	4413      	add	r3, r2
 800f048:	009b      	lsls	r3, r3, #2
 800f04a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f04e:	687a      	ldr	r2, [r7, #4]
 800f050:	4413      	add	r3, r2
 800f052:	3304      	adds	r3, #4
 800f054:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f056:	7bbb      	ldrb	r3, [r7, #14]
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d002      	beq.n	800f062 <USBD_StdEPReq+0x24a>
 800f05c:	7bbb      	ldrb	r3, [r7, #14]
 800f05e:	2b80      	cmp	r3, #128	; 0x80
 800f060:	d103      	bne.n	800f06a <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800f062:	68bb      	ldr	r3, [r7, #8]
 800f064:	2200      	movs	r2, #0
 800f066:	601a      	str	r2, [r3, #0]
 800f068:	e00e      	b.n	800f088 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f06a:	7bbb      	ldrb	r3, [r7, #14]
 800f06c:	4619      	mov	r1, r3
 800f06e:	6878      	ldr	r0, [r7, #4]
 800f070:	f008 f826 	bl	80170c0 <USBD_LL_IsStallEP>
 800f074:	4603      	mov	r3, r0
 800f076:	2b00      	cmp	r3, #0
 800f078:	d003      	beq.n	800f082 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800f07a:	68bb      	ldr	r3, [r7, #8]
 800f07c:	2201      	movs	r2, #1
 800f07e:	601a      	str	r2, [r3, #0]
 800f080:	e002      	b.n	800f088 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800f082:	68bb      	ldr	r3, [r7, #8]
 800f084:	2200      	movs	r2, #0
 800f086:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f088:	68bb      	ldr	r3, [r7, #8]
 800f08a:	2202      	movs	r2, #2
 800f08c:	4619      	mov	r1, r3
 800f08e:	6878      	ldr	r0, [r7, #4]
 800f090:	f000 fbd9 	bl	800f846 <USBD_CtlSendData>
          break;
 800f094:	e004      	b.n	800f0a0 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800f096:	6839      	ldr	r1, [r7, #0]
 800f098:	6878      	ldr	r0, [r7, #4]
 800f09a:	f000 fb63 	bl	800f764 <USBD_CtlError>
        break;
 800f09e:	bf00      	nop
      }
      break;
 800f0a0:	e004      	b.n	800f0ac <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800f0a2:	6839      	ldr	r1, [r7, #0]
 800f0a4:	6878      	ldr	r0, [r7, #4]
 800f0a6:	f000 fb5d 	bl	800f764 <USBD_CtlError>
      break;
 800f0aa:	bf00      	nop
    }
    break;
 800f0ac:	e004      	b.n	800f0b8 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800f0ae:	6839      	ldr	r1, [r7, #0]
 800f0b0:	6878      	ldr	r0, [r7, #4]
 800f0b2:	f000 fb57 	bl	800f764 <USBD_CtlError>
    break;
 800f0b6:	bf00      	nop
  }

  return ret;
 800f0b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	3710      	adds	r7, #16
 800f0be:	46bd      	mov	sp, r7
 800f0c0:	bd80      	pop	{r7, pc}
	...

0800f0c4 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f0c4:	b580      	push	{r7, lr}
 800f0c6:	b084      	sub	sp, #16
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	6078      	str	r0, [r7, #4]
 800f0cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f0d6:	2300      	movs	r3, #0
 800f0d8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f0da:	683b      	ldr	r3, [r7, #0]
 800f0dc:	885b      	ldrh	r3, [r3, #2]
 800f0de:	0a1b      	lsrs	r3, r3, #8
 800f0e0:	b29b      	uxth	r3, r3
 800f0e2:	3b01      	subs	r3, #1
 800f0e4:	2b0e      	cmp	r3, #14
 800f0e6:	f200 8152 	bhi.w	800f38e <USBD_GetDescriptor+0x2ca>
 800f0ea:	a201      	add	r2, pc, #4	; (adr r2, 800f0f0 <USBD_GetDescriptor+0x2c>)
 800f0ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0f0:	0800f161 	.word	0x0800f161
 800f0f4:	0800f179 	.word	0x0800f179
 800f0f8:	0800f1b9 	.word	0x0800f1b9
 800f0fc:	0800f38f 	.word	0x0800f38f
 800f100:	0800f38f 	.word	0x0800f38f
 800f104:	0800f32f 	.word	0x0800f32f
 800f108:	0800f35b 	.word	0x0800f35b
 800f10c:	0800f38f 	.word	0x0800f38f
 800f110:	0800f38f 	.word	0x0800f38f
 800f114:	0800f38f 	.word	0x0800f38f
 800f118:	0800f38f 	.word	0x0800f38f
 800f11c:	0800f38f 	.word	0x0800f38f
 800f120:	0800f38f 	.word	0x0800f38f
 800f124:	0800f38f 	.word	0x0800f38f
 800f128:	0800f12d 	.word	0x0800f12d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f132:	69db      	ldr	r3, [r3, #28]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d00b      	beq.n	800f150 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f13e:	69db      	ldr	r3, [r3, #28]
 800f140:	687a      	ldr	r2, [r7, #4]
 800f142:	7c12      	ldrb	r2, [r2, #16]
 800f144:	f107 0108 	add.w	r1, r7, #8
 800f148:	4610      	mov	r0, r2
 800f14a:	4798      	blx	r3
 800f14c:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800f14e:	e126      	b.n	800f39e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800f150:	6839      	ldr	r1, [r7, #0]
 800f152:	6878      	ldr	r0, [r7, #4]
 800f154:	f000 fb06 	bl	800f764 <USBD_CtlError>
      err++;
 800f158:	7afb      	ldrb	r3, [r7, #11]
 800f15a:	3301      	adds	r3, #1
 800f15c:	72fb      	strb	r3, [r7, #11]
    break;
 800f15e:	e11e      	b.n	800f39e <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	687a      	ldr	r2, [r7, #4]
 800f16a:	7c12      	ldrb	r2, [r2, #16]
 800f16c:	f107 0108 	add.w	r1, r7, #8
 800f170:	4610      	mov	r0, r2
 800f172:	4798      	blx	r3
 800f174:	60f8      	str	r0, [r7, #12]
    break;
 800f176:	e112      	b.n	800f39e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	7c1b      	ldrb	r3, [r3, #16]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d10d      	bne.n	800f19c <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f188:	f107 0208 	add.w	r2, r7, #8
 800f18c:	4610      	mov	r0, r2
 800f18e:	4798      	blx	r3
 800f190:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	3301      	adds	r3, #1
 800f196:	2202      	movs	r2, #2
 800f198:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800f19a:	e100      	b.n	800f39e <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f1a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1a4:	f107 0208 	add.w	r2, r7, #8
 800f1a8:	4610      	mov	r0, r2
 800f1aa:	4798      	blx	r3
 800f1ac:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	3301      	adds	r3, #1
 800f1b2:	2202      	movs	r2, #2
 800f1b4:	701a      	strb	r2, [r3, #0]
    break;
 800f1b6:	e0f2      	b.n	800f39e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800f1b8:	683b      	ldr	r3, [r7, #0]
 800f1ba:	885b      	ldrh	r3, [r3, #2]
 800f1bc:	b2db      	uxtb	r3, r3
 800f1be:	2b05      	cmp	r3, #5
 800f1c0:	f200 80ac 	bhi.w	800f31c <USBD_GetDescriptor+0x258>
 800f1c4:	a201      	add	r2, pc, #4	; (adr r2, 800f1cc <USBD_GetDescriptor+0x108>)
 800f1c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1ca:	bf00      	nop
 800f1cc:	0800f1e5 	.word	0x0800f1e5
 800f1d0:	0800f219 	.word	0x0800f219
 800f1d4:	0800f24d 	.word	0x0800f24d
 800f1d8:	0800f281 	.word	0x0800f281
 800f1dc:	0800f2b5 	.word	0x0800f2b5
 800f1e0:	0800f2e9 	.word	0x0800f2e9
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f1ea:	685b      	ldr	r3, [r3, #4]
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d00b      	beq.n	800f208 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f1f6:	685b      	ldr	r3, [r3, #4]
 800f1f8:	687a      	ldr	r2, [r7, #4]
 800f1fa:	7c12      	ldrb	r2, [r2, #16]
 800f1fc:	f107 0108 	add.w	r1, r7, #8
 800f200:	4610      	mov	r0, r2
 800f202:	4798      	blx	r3
 800f204:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f206:	e091      	b.n	800f32c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800f208:	6839      	ldr	r1, [r7, #0]
 800f20a:	6878      	ldr	r0, [r7, #4]
 800f20c:	f000 faaa 	bl	800f764 <USBD_CtlError>
        err++;
 800f210:	7afb      	ldrb	r3, [r7, #11]
 800f212:	3301      	adds	r3, #1
 800f214:	72fb      	strb	r3, [r7, #11]
      break;
 800f216:	e089      	b.n	800f32c <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f21e:	689b      	ldr	r3, [r3, #8]
 800f220:	2b00      	cmp	r3, #0
 800f222:	d00b      	beq.n	800f23c <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f22a:	689b      	ldr	r3, [r3, #8]
 800f22c:	687a      	ldr	r2, [r7, #4]
 800f22e:	7c12      	ldrb	r2, [r2, #16]
 800f230:	f107 0108 	add.w	r1, r7, #8
 800f234:	4610      	mov	r0, r2
 800f236:	4798      	blx	r3
 800f238:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f23a:	e077      	b.n	800f32c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800f23c:	6839      	ldr	r1, [r7, #0]
 800f23e:	6878      	ldr	r0, [r7, #4]
 800f240:	f000 fa90 	bl	800f764 <USBD_CtlError>
        err++;
 800f244:	7afb      	ldrb	r3, [r7, #11]
 800f246:	3301      	adds	r3, #1
 800f248:	72fb      	strb	r3, [r7, #11]
      break;
 800f24a:	e06f      	b.n	800f32c <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f252:	68db      	ldr	r3, [r3, #12]
 800f254:	2b00      	cmp	r3, #0
 800f256:	d00b      	beq.n	800f270 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f25e:	68db      	ldr	r3, [r3, #12]
 800f260:	687a      	ldr	r2, [r7, #4]
 800f262:	7c12      	ldrb	r2, [r2, #16]
 800f264:	f107 0108 	add.w	r1, r7, #8
 800f268:	4610      	mov	r0, r2
 800f26a:	4798      	blx	r3
 800f26c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f26e:	e05d      	b.n	800f32c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800f270:	6839      	ldr	r1, [r7, #0]
 800f272:	6878      	ldr	r0, [r7, #4]
 800f274:	f000 fa76 	bl	800f764 <USBD_CtlError>
        err++;
 800f278:	7afb      	ldrb	r3, [r7, #11]
 800f27a:	3301      	adds	r3, #1
 800f27c:	72fb      	strb	r3, [r7, #11]
      break;
 800f27e:	e055      	b.n	800f32c <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f286:	691b      	ldr	r3, [r3, #16]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d00b      	beq.n	800f2a4 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f292:	691b      	ldr	r3, [r3, #16]
 800f294:	687a      	ldr	r2, [r7, #4]
 800f296:	7c12      	ldrb	r2, [r2, #16]
 800f298:	f107 0108 	add.w	r1, r7, #8
 800f29c:	4610      	mov	r0, r2
 800f29e:	4798      	blx	r3
 800f2a0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f2a2:	e043      	b.n	800f32c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800f2a4:	6839      	ldr	r1, [r7, #0]
 800f2a6:	6878      	ldr	r0, [r7, #4]
 800f2a8:	f000 fa5c 	bl	800f764 <USBD_CtlError>
        err++;
 800f2ac:	7afb      	ldrb	r3, [r7, #11]
 800f2ae:	3301      	adds	r3, #1
 800f2b0:	72fb      	strb	r3, [r7, #11]
      break;
 800f2b2:	e03b      	b.n	800f32c <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f2ba:	695b      	ldr	r3, [r3, #20]
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d00b      	beq.n	800f2d8 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f2c6:	695b      	ldr	r3, [r3, #20]
 800f2c8:	687a      	ldr	r2, [r7, #4]
 800f2ca:	7c12      	ldrb	r2, [r2, #16]
 800f2cc:	f107 0108 	add.w	r1, r7, #8
 800f2d0:	4610      	mov	r0, r2
 800f2d2:	4798      	blx	r3
 800f2d4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f2d6:	e029      	b.n	800f32c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800f2d8:	6839      	ldr	r1, [r7, #0]
 800f2da:	6878      	ldr	r0, [r7, #4]
 800f2dc:	f000 fa42 	bl	800f764 <USBD_CtlError>
        err++;
 800f2e0:	7afb      	ldrb	r3, [r7, #11]
 800f2e2:	3301      	adds	r3, #1
 800f2e4:	72fb      	strb	r3, [r7, #11]
      break;
 800f2e6:	e021      	b.n	800f32c <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f2ee:	699b      	ldr	r3, [r3, #24]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d00b      	beq.n	800f30c <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f2fa:	699b      	ldr	r3, [r3, #24]
 800f2fc:	687a      	ldr	r2, [r7, #4]
 800f2fe:	7c12      	ldrb	r2, [r2, #16]
 800f300:	f107 0108 	add.w	r1, r7, #8
 800f304:	4610      	mov	r0, r2
 800f306:	4798      	blx	r3
 800f308:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f30a:	e00f      	b.n	800f32c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800f30c:	6839      	ldr	r1, [r7, #0]
 800f30e:	6878      	ldr	r0, [r7, #4]
 800f310:	f000 fa28 	bl	800f764 <USBD_CtlError>
        err++;
 800f314:	7afb      	ldrb	r3, [r7, #11]
 800f316:	3301      	adds	r3, #1
 800f318:	72fb      	strb	r3, [r7, #11]
      break;
 800f31a:	e007      	b.n	800f32c <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800f31c:	6839      	ldr	r1, [r7, #0]
 800f31e:	6878      	ldr	r0, [r7, #4]
 800f320:	f000 fa20 	bl	800f764 <USBD_CtlError>
      err++;
 800f324:	7afb      	ldrb	r3, [r7, #11]
 800f326:	3301      	adds	r3, #1
 800f328:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800f32a:	bf00      	nop
    }
    break;
 800f32c:	e037      	b.n	800f39e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	7c1b      	ldrb	r3, [r3, #16]
 800f332:	2b00      	cmp	r3, #0
 800f334:	d109      	bne.n	800f34a <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f33c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f33e:	f107 0208 	add.w	r2, r7, #8
 800f342:	4610      	mov	r0, r2
 800f344:	4798      	blx	r3
 800f346:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800f348:	e029      	b.n	800f39e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800f34a:	6839      	ldr	r1, [r7, #0]
 800f34c:	6878      	ldr	r0, [r7, #4]
 800f34e:	f000 fa09 	bl	800f764 <USBD_CtlError>
      err++;
 800f352:	7afb      	ldrb	r3, [r7, #11]
 800f354:	3301      	adds	r3, #1
 800f356:	72fb      	strb	r3, [r7, #11]
    break;
 800f358:	e021      	b.n	800f39e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	7c1b      	ldrb	r3, [r3, #16]
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d10d      	bne.n	800f37e <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f36a:	f107 0208 	add.w	r2, r7, #8
 800f36e:	4610      	mov	r0, r2
 800f370:	4798      	blx	r3
 800f372:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	3301      	adds	r3, #1
 800f378:	2207      	movs	r2, #7
 800f37a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800f37c:	e00f      	b.n	800f39e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800f37e:	6839      	ldr	r1, [r7, #0]
 800f380:	6878      	ldr	r0, [r7, #4]
 800f382:	f000 f9ef 	bl	800f764 <USBD_CtlError>
      err++;
 800f386:	7afb      	ldrb	r3, [r7, #11]
 800f388:	3301      	adds	r3, #1
 800f38a:	72fb      	strb	r3, [r7, #11]
    break;
 800f38c:	e007      	b.n	800f39e <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800f38e:	6839      	ldr	r1, [r7, #0]
 800f390:	6878      	ldr	r0, [r7, #4]
 800f392:	f000 f9e7 	bl	800f764 <USBD_CtlError>
    err++;
 800f396:	7afb      	ldrb	r3, [r7, #11]
 800f398:	3301      	adds	r3, #1
 800f39a:	72fb      	strb	r3, [r7, #11]
    break;
 800f39c:	bf00      	nop
  }

  if (err != 0U)
 800f39e:	7afb      	ldrb	r3, [r7, #11]
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d11e      	bne.n	800f3e2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800f3a4:	683b      	ldr	r3, [r7, #0]
 800f3a6:	88db      	ldrh	r3, [r3, #6]
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d016      	beq.n	800f3da <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 800f3ac:	893b      	ldrh	r3, [r7, #8]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d00e      	beq.n	800f3d0 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 800f3b2:	683b      	ldr	r3, [r7, #0]
 800f3b4:	88da      	ldrh	r2, [r3, #6]
 800f3b6:	893b      	ldrh	r3, [r7, #8]
 800f3b8:	4293      	cmp	r3, r2
 800f3ba:	bf28      	it	cs
 800f3bc:	4613      	movcs	r3, r2
 800f3be:	b29b      	uxth	r3, r3
 800f3c0:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800f3c2:	893b      	ldrh	r3, [r7, #8]
 800f3c4:	461a      	mov	r2, r3
 800f3c6:	68f9      	ldr	r1, [r7, #12]
 800f3c8:	6878      	ldr	r0, [r7, #4]
 800f3ca:	f000 fa3c 	bl	800f846 <USBD_CtlSendData>
 800f3ce:	e009      	b.n	800f3e4 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800f3d0:	6839      	ldr	r1, [r7, #0]
 800f3d2:	6878      	ldr	r0, [r7, #4]
 800f3d4:	f000 f9c6 	bl	800f764 <USBD_CtlError>
 800f3d8:	e004      	b.n	800f3e4 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800f3da:	6878      	ldr	r0, [r7, #4]
 800f3dc:	f000 fa8d 	bl	800f8fa <USBD_CtlSendStatus>
 800f3e0:	e000      	b.n	800f3e4 <USBD_GetDescriptor+0x320>
    return;
 800f3e2:	bf00      	nop
    }
  }
}
 800f3e4:	3710      	adds	r7, #16
 800f3e6:	46bd      	mov	sp, r7
 800f3e8:	bd80      	pop	{r7, pc}
 800f3ea:	bf00      	nop

0800f3ec <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f3ec:	b580      	push	{r7, lr}
 800f3ee:	b084      	sub	sp, #16
 800f3f0:	af00      	add	r7, sp, #0
 800f3f2:	6078      	str	r0, [r7, #4]
 800f3f4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f3f6:	683b      	ldr	r3, [r7, #0]
 800f3f8:	889b      	ldrh	r3, [r3, #4]
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d130      	bne.n	800f460 <USBD_SetAddress+0x74>
 800f3fe:	683b      	ldr	r3, [r7, #0]
 800f400:	88db      	ldrh	r3, [r3, #6]
 800f402:	2b00      	cmp	r3, #0
 800f404:	d12c      	bne.n	800f460 <USBD_SetAddress+0x74>
 800f406:	683b      	ldr	r3, [r7, #0]
 800f408:	885b      	ldrh	r3, [r3, #2]
 800f40a:	2b7f      	cmp	r3, #127	; 0x7f
 800f40c:	d828      	bhi.n	800f460 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f40e:	683b      	ldr	r3, [r7, #0]
 800f410:	885b      	ldrh	r3, [r3, #2]
 800f412:	b2db      	uxtb	r3, r3
 800f414:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f418:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f420:	2b03      	cmp	r3, #3
 800f422:	d104      	bne.n	800f42e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800f424:	6839      	ldr	r1, [r7, #0]
 800f426:	6878      	ldr	r0, [r7, #4]
 800f428:	f000 f99c 	bl	800f764 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f42c:	e01c      	b.n	800f468 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	7bfa      	ldrb	r2, [r7, #15]
 800f432:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f436:	7bfb      	ldrb	r3, [r7, #15]
 800f438:	4619      	mov	r1, r3
 800f43a:	6878      	ldr	r0, [r7, #4]
 800f43c:	f007 fe6c 	bl	8017118 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f440:	6878      	ldr	r0, [r7, #4]
 800f442:	f000 fa5a 	bl	800f8fa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f446:	7bfb      	ldrb	r3, [r7, #15]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d004      	beq.n	800f456 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	2202      	movs	r2, #2
 800f450:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f454:	e008      	b.n	800f468 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	2201      	movs	r2, #1
 800f45a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f45e:	e003      	b.n	800f468 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f460:	6839      	ldr	r1, [r7, #0]
 800f462:	6878      	ldr	r0, [r7, #4]
 800f464:	f000 f97e 	bl	800f764 <USBD_CtlError>
  }
}
 800f468:	bf00      	nop
 800f46a:	3710      	adds	r7, #16
 800f46c:	46bd      	mov	sp, r7
 800f46e:	bd80      	pop	{r7, pc}

0800f470 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f470:	b580      	push	{r7, lr}
 800f472:	b084      	sub	sp, #16
 800f474:	af00      	add	r7, sp, #0
 800f476:	6078      	str	r0, [r7, #4]
 800f478:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f47a:	2300      	movs	r3, #0
 800f47c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f47e:	683b      	ldr	r3, [r7, #0]
 800f480:	885b      	ldrh	r3, [r3, #2]
 800f482:	b2da      	uxtb	r2, r3
 800f484:	4b4b      	ldr	r3, [pc, #300]	; (800f5b4 <USBD_SetConfig+0x144>)
 800f486:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f488:	4b4a      	ldr	r3, [pc, #296]	; (800f5b4 <USBD_SetConfig+0x144>)
 800f48a:	781b      	ldrb	r3, [r3, #0]
 800f48c:	2b01      	cmp	r3, #1
 800f48e:	d905      	bls.n	800f49c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f490:	6839      	ldr	r1, [r7, #0]
 800f492:	6878      	ldr	r0, [r7, #4]
 800f494:	f000 f966 	bl	800f764 <USBD_CtlError>
    return USBD_FAIL;
 800f498:	2303      	movs	r3, #3
 800f49a:	e087      	b.n	800f5ac <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f4a2:	2b02      	cmp	r3, #2
 800f4a4:	d002      	beq.n	800f4ac <USBD_SetConfig+0x3c>
 800f4a6:	2b03      	cmp	r3, #3
 800f4a8:	d025      	beq.n	800f4f6 <USBD_SetConfig+0x86>
 800f4aa:	e071      	b.n	800f590 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800f4ac:	4b41      	ldr	r3, [pc, #260]	; (800f5b4 <USBD_SetConfig+0x144>)
 800f4ae:	781b      	ldrb	r3, [r3, #0]
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d01c      	beq.n	800f4ee <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800f4b4:	4b3f      	ldr	r3, [pc, #252]	; (800f5b4 <USBD_SetConfig+0x144>)
 800f4b6:	781b      	ldrb	r3, [r3, #0]
 800f4b8:	461a      	mov	r2, r3
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800f4be:	4b3d      	ldr	r3, [pc, #244]	; (800f5b4 <USBD_SetConfig+0x144>)
 800f4c0:	781b      	ldrb	r3, [r3, #0]
 800f4c2:	4619      	mov	r1, r3
 800f4c4:	6878      	ldr	r0, [r7, #4]
 800f4c6:	f7ff f97d 	bl	800e7c4 <USBD_SetClassConfig>
 800f4ca:	4603      	mov	r3, r0
 800f4cc:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800f4ce:	7bfb      	ldrb	r3, [r7, #15]
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d004      	beq.n	800f4de <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800f4d4:	6839      	ldr	r1, [r7, #0]
 800f4d6:	6878      	ldr	r0, [r7, #4]
 800f4d8:	f000 f944 	bl	800f764 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800f4dc:	e065      	b.n	800f5aa <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800f4de:	6878      	ldr	r0, [r7, #4]
 800f4e0:	f000 fa0b 	bl	800f8fa <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	2203      	movs	r2, #3
 800f4e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800f4ec:	e05d      	b.n	800f5aa <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800f4ee:	6878      	ldr	r0, [r7, #4]
 800f4f0:	f000 fa03 	bl	800f8fa <USBD_CtlSendStatus>
    break;
 800f4f4:	e059      	b.n	800f5aa <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800f4f6:	4b2f      	ldr	r3, [pc, #188]	; (800f5b4 <USBD_SetConfig+0x144>)
 800f4f8:	781b      	ldrb	r3, [r3, #0]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d112      	bne.n	800f524 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	2202      	movs	r2, #2
 800f502:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800f506:	4b2b      	ldr	r3, [pc, #172]	; (800f5b4 <USBD_SetConfig+0x144>)
 800f508:	781b      	ldrb	r3, [r3, #0]
 800f50a:	461a      	mov	r2, r3
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f510:	4b28      	ldr	r3, [pc, #160]	; (800f5b4 <USBD_SetConfig+0x144>)
 800f512:	781b      	ldrb	r3, [r3, #0]
 800f514:	4619      	mov	r1, r3
 800f516:	6878      	ldr	r0, [r7, #4]
 800f518:	f7ff f970 	bl	800e7fc <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800f51c:	6878      	ldr	r0, [r7, #4]
 800f51e:	f000 f9ec 	bl	800f8fa <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800f522:	e042      	b.n	800f5aa <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800f524:	4b23      	ldr	r3, [pc, #140]	; (800f5b4 <USBD_SetConfig+0x144>)
 800f526:	781b      	ldrb	r3, [r3, #0]
 800f528:	461a      	mov	r2, r3
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	685b      	ldr	r3, [r3, #4]
 800f52e:	429a      	cmp	r2, r3
 800f530:	d02a      	beq.n	800f588 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	685b      	ldr	r3, [r3, #4]
 800f536:	b2db      	uxtb	r3, r3
 800f538:	4619      	mov	r1, r3
 800f53a:	6878      	ldr	r0, [r7, #4]
 800f53c:	f7ff f95e 	bl	800e7fc <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800f540:	4b1c      	ldr	r3, [pc, #112]	; (800f5b4 <USBD_SetConfig+0x144>)
 800f542:	781b      	ldrb	r3, [r3, #0]
 800f544:	461a      	mov	r2, r3
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800f54a:	4b1a      	ldr	r3, [pc, #104]	; (800f5b4 <USBD_SetConfig+0x144>)
 800f54c:	781b      	ldrb	r3, [r3, #0]
 800f54e:	4619      	mov	r1, r3
 800f550:	6878      	ldr	r0, [r7, #4]
 800f552:	f7ff f937 	bl	800e7c4 <USBD_SetClassConfig>
 800f556:	4603      	mov	r3, r0
 800f558:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800f55a:	7bfb      	ldrb	r3, [r7, #15]
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d00f      	beq.n	800f580 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800f560:	6839      	ldr	r1, [r7, #0]
 800f562:	6878      	ldr	r0, [r7, #4]
 800f564:	f000 f8fe 	bl	800f764 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	685b      	ldr	r3, [r3, #4]
 800f56c:	b2db      	uxtb	r3, r3
 800f56e:	4619      	mov	r1, r3
 800f570:	6878      	ldr	r0, [r7, #4]
 800f572:	f7ff f943 	bl	800e7fc <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	2202      	movs	r2, #2
 800f57a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800f57e:	e014      	b.n	800f5aa <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800f580:	6878      	ldr	r0, [r7, #4]
 800f582:	f000 f9ba 	bl	800f8fa <USBD_CtlSendStatus>
    break;
 800f586:	e010      	b.n	800f5aa <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800f588:	6878      	ldr	r0, [r7, #4]
 800f58a:	f000 f9b6 	bl	800f8fa <USBD_CtlSendStatus>
    break;
 800f58e:	e00c      	b.n	800f5aa <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800f590:	6839      	ldr	r1, [r7, #0]
 800f592:	6878      	ldr	r0, [r7, #4]
 800f594:	f000 f8e6 	bl	800f764 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f598:	4b06      	ldr	r3, [pc, #24]	; (800f5b4 <USBD_SetConfig+0x144>)
 800f59a:	781b      	ldrb	r3, [r3, #0]
 800f59c:	4619      	mov	r1, r3
 800f59e:	6878      	ldr	r0, [r7, #4]
 800f5a0:	f7ff f92c 	bl	800e7fc <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800f5a4:	2303      	movs	r3, #3
 800f5a6:	73fb      	strb	r3, [r7, #15]
    break;
 800f5a8:	bf00      	nop
  }

  return ret;
 800f5aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	3710      	adds	r7, #16
 800f5b0:	46bd      	mov	sp, r7
 800f5b2:	bd80      	pop	{r7, pc}
 800f5b4:	20000330 	.word	0x20000330

0800f5b8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f5b8:	b580      	push	{r7, lr}
 800f5ba:	b082      	sub	sp, #8
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	6078      	str	r0, [r7, #4]
 800f5c0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f5c2:	683b      	ldr	r3, [r7, #0]
 800f5c4:	88db      	ldrh	r3, [r3, #6]
 800f5c6:	2b01      	cmp	r3, #1
 800f5c8:	d004      	beq.n	800f5d4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f5ca:	6839      	ldr	r1, [r7, #0]
 800f5cc:	6878      	ldr	r0, [r7, #4]
 800f5ce:	f000 f8c9 	bl	800f764 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800f5d2:	e021      	b.n	800f618 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f5da:	2b01      	cmp	r3, #1
 800f5dc:	db17      	blt.n	800f60e <USBD_GetConfig+0x56>
 800f5de:	2b02      	cmp	r3, #2
 800f5e0:	dd02      	ble.n	800f5e8 <USBD_GetConfig+0x30>
 800f5e2:	2b03      	cmp	r3, #3
 800f5e4:	d00b      	beq.n	800f5fe <USBD_GetConfig+0x46>
 800f5e6:	e012      	b.n	800f60e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	2200      	movs	r2, #0
 800f5ec:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	3308      	adds	r3, #8
 800f5f2:	2201      	movs	r2, #1
 800f5f4:	4619      	mov	r1, r3
 800f5f6:	6878      	ldr	r0, [r7, #4]
 800f5f8:	f000 f925 	bl	800f846 <USBD_CtlSendData>
      break;
 800f5fc:	e00c      	b.n	800f618 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	3304      	adds	r3, #4
 800f602:	2201      	movs	r2, #1
 800f604:	4619      	mov	r1, r3
 800f606:	6878      	ldr	r0, [r7, #4]
 800f608:	f000 f91d 	bl	800f846 <USBD_CtlSendData>
      break;
 800f60c:	e004      	b.n	800f618 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800f60e:	6839      	ldr	r1, [r7, #0]
 800f610:	6878      	ldr	r0, [r7, #4]
 800f612:	f000 f8a7 	bl	800f764 <USBD_CtlError>
      break;
 800f616:	bf00      	nop
}
 800f618:	bf00      	nop
 800f61a:	3708      	adds	r7, #8
 800f61c:	46bd      	mov	sp, r7
 800f61e:	bd80      	pop	{r7, pc}

0800f620 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f620:	b580      	push	{r7, lr}
 800f622:	b082      	sub	sp, #8
 800f624:	af00      	add	r7, sp, #0
 800f626:	6078      	str	r0, [r7, #4]
 800f628:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f630:	3b01      	subs	r3, #1
 800f632:	2b02      	cmp	r3, #2
 800f634:	d81e      	bhi.n	800f674 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800f636:	683b      	ldr	r3, [r7, #0]
 800f638:	88db      	ldrh	r3, [r3, #6]
 800f63a:	2b02      	cmp	r3, #2
 800f63c:	d004      	beq.n	800f648 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800f63e:	6839      	ldr	r1, [r7, #0]
 800f640:	6878      	ldr	r0, [r7, #4]
 800f642:	f000 f88f 	bl	800f764 <USBD_CtlError>
      break;
 800f646:	e01a      	b.n	800f67e <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	2201      	movs	r2, #1
 800f64c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800f654:	2b00      	cmp	r3, #0
 800f656:	d005      	beq.n	800f664 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	68db      	ldr	r3, [r3, #12]
 800f65c:	f043 0202 	orr.w	r2, r3, #2
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	330c      	adds	r3, #12
 800f668:	2202      	movs	r2, #2
 800f66a:	4619      	mov	r1, r3
 800f66c:	6878      	ldr	r0, [r7, #4]
 800f66e:	f000 f8ea 	bl	800f846 <USBD_CtlSendData>
    break;
 800f672:	e004      	b.n	800f67e <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800f674:	6839      	ldr	r1, [r7, #0]
 800f676:	6878      	ldr	r0, [r7, #4]
 800f678:	f000 f874 	bl	800f764 <USBD_CtlError>
    break;
 800f67c:	bf00      	nop
  }
}
 800f67e:	bf00      	nop
 800f680:	3708      	adds	r7, #8
 800f682:	46bd      	mov	sp, r7
 800f684:	bd80      	pop	{r7, pc}

0800f686 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f686:	b580      	push	{r7, lr}
 800f688:	b082      	sub	sp, #8
 800f68a:	af00      	add	r7, sp, #0
 800f68c:	6078      	str	r0, [r7, #4]
 800f68e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f690:	683b      	ldr	r3, [r7, #0]
 800f692:	885b      	ldrh	r3, [r3, #2]
 800f694:	2b01      	cmp	r3, #1
 800f696:	d106      	bne.n	800f6a6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	2201      	movs	r2, #1
 800f69c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f6a0:	6878      	ldr	r0, [r7, #4]
 800f6a2:	f000 f92a 	bl	800f8fa <USBD_CtlSendStatus>
  }
}
 800f6a6:	bf00      	nop
 800f6a8:	3708      	adds	r7, #8
 800f6aa:	46bd      	mov	sp, r7
 800f6ac:	bd80      	pop	{r7, pc}

0800f6ae <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f6ae:	b580      	push	{r7, lr}
 800f6b0:	b082      	sub	sp, #8
 800f6b2:	af00      	add	r7, sp, #0
 800f6b4:	6078      	str	r0, [r7, #4]
 800f6b6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f6be:	3b01      	subs	r3, #1
 800f6c0:	2b02      	cmp	r3, #2
 800f6c2:	d80b      	bhi.n	800f6dc <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f6c4:	683b      	ldr	r3, [r7, #0]
 800f6c6:	885b      	ldrh	r3, [r3, #2]
 800f6c8:	2b01      	cmp	r3, #1
 800f6ca:	d10c      	bne.n	800f6e6 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	2200      	movs	r2, #0
 800f6d0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f6d4:	6878      	ldr	r0, [r7, #4]
 800f6d6:	f000 f910 	bl	800f8fa <USBD_CtlSendStatus>
      }
      break;
 800f6da:	e004      	b.n	800f6e6 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800f6dc:	6839      	ldr	r1, [r7, #0]
 800f6de:	6878      	ldr	r0, [r7, #4]
 800f6e0:	f000 f840 	bl	800f764 <USBD_CtlError>
      break;
 800f6e4:	e000      	b.n	800f6e8 <USBD_ClrFeature+0x3a>
      break;
 800f6e6:	bf00      	nop
  }
}
 800f6e8:	bf00      	nop
 800f6ea:	3708      	adds	r7, #8
 800f6ec:	46bd      	mov	sp, r7
 800f6ee:	bd80      	pop	{r7, pc}

0800f6f0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f6f0:	b580      	push	{r7, lr}
 800f6f2:	b084      	sub	sp, #16
 800f6f4:	af00      	add	r7, sp, #0
 800f6f6:	6078      	str	r0, [r7, #4]
 800f6f8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f6fa:	683b      	ldr	r3, [r7, #0]
 800f6fc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	781a      	ldrb	r2, [r3, #0]
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	3301      	adds	r3, #1
 800f70a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	781a      	ldrb	r2, [r3, #0]
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	3301      	adds	r3, #1
 800f718:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f71a:	68f8      	ldr	r0, [r7, #12]
 800f71c:	f7ff faa9 	bl	800ec72 <SWAPBYTE>
 800f720:	4603      	mov	r3, r0
 800f722:	461a      	mov	r2, r3
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	3301      	adds	r3, #1
 800f72c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	3301      	adds	r3, #1
 800f732:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f734:	68f8      	ldr	r0, [r7, #12]
 800f736:	f7ff fa9c 	bl	800ec72 <SWAPBYTE>
 800f73a:	4603      	mov	r3, r0
 800f73c:	461a      	mov	r2, r3
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	3301      	adds	r3, #1
 800f746:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	3301      	adds	r3, #1
 800f74c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f74e:	68f8      	ldr	r0, [r7, #12]
 800f750:	f7ff fa8f 	bl	800ec72 <SWAPBYTE>
 800f754:	4603      	mov	r3, r0
 800f756:	461a      	mov	r2, r3
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	80da      	strh	r2, [r3, #6]
}
 800f75c:	bf00      	nop
 800f75e:	3710      	adds	r7, #16
 800f760:	46bd      	mov	sp, r7
 800f762:	bd80      	pop	{r7, pc}

0800f764 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f764:	b580      	push	{r7, lr}
 800f766:	b082      	sub	sp, #8
 800f768:	af00      	add	r7, sp, #0
 800f76a:	6078      	str	r0, [r7, #4]
 800f76c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f76e:	2180      	movs	r1, #128	; 0x80
 800f770:	6878      	ldr	r0, [r7, #4]
 800f772:	f007 fc67 	bl	8017044 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f776:	2100      	movs	r1, #0
 800f778:	6878      	ldr	r0, [r7, #4]
 800f77a:	f007 fc63 	bl	8017044 <USBD_LL_StallEP>
}
 800f77e:	bf00      	nop
 800f780:	3708      	adds	r7, #8
 800f782:	46bd      	mov	sp, r7
 800f784:	bd80      	pop	{r7, pc}

0800f786 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f786:	b580      	push	{r7, lr}
 800f788:	b086      	sub	sp, #24
 800f78a:	af00      	add	r7, sp, #0
 800f78c:	60f8      	str	r0, [r7, #12]
 800f78e:	60b9      	str	r1, [r7, #8]
 800f790:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f792:	2300      	movs	r3, #0
 800f794:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d036      	beq.n	800f80a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800f7a0:	6938      	ldr	r0, [r7, #16]
 800f7a2:	f000 f836 	bl	800f812 <USBD_GetLen>
 800f7a6:	4603      	mov	r3, r0
 800f7a8:	3301      	adds	r3, #1
 800f7aa:	b29b      	uxth	r3, r3
 800f7ac:	005b      	lsls	r3, r3, #1
 800f7ae:	b29a      	uxth	r2, r3
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f7b4:	7dfb      	ldrb	r3, [r7, #23]
 800f7b6:	68ba      	ldr	r2, [r7, #8]
 800f7b8:	4413      	add	r3, r2
 800f7ba:	687a      	ldr	r2, [r7, #4]
 800f7bc:	7812      	ldrb	r2, [r2, #0]
 800f7be:	701a      	strb	r2, [r3, #0]
  idx++;
 800f7c0:	7dfb      	ldrb	r3, [r7, #23]
 800f7c2:	3301      	adds	r3, #1
 800f7c4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f7c6:	7dfb      	ldrb	r3, [r7, #23]
 800f7c8:	68ba      	ldr	r2, [r7, #8]
 800f7ca:	4413      	add	r3, r2
 800f7cc:	2203      	movs	r2, #3
 800f7ce:	701a      	strb	r2, [r3, #0]
  idx++;
 800f7d0:	7dfb      	ldrb	r3, [r7, #23]
 800f7d2:	3301      	adds	r3, #1
 800f7d4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f7d6:	e013      	b.n	800f800 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800f7d8:	7dfb      	ldrb	r3, [r7, #23]
 800f7da:	68ba      	ldr	r2, [r7, #8]
 800f7dc:	4413      	add	r3, r2
 800f7de:	693a      	ldr	r2, [r7, #16]
 800f7e0:	7812      	ldrb	r2, [r2, #0]
 800f7e2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f7e4:	693b      	ldr	r3, [r7, #16]
 800f7e6:	3301      	adds	r3, #1
 800f7e8:	613b      	str	r3, [r7, #16]
    idx++;
 800f7ea:	7dfb      	ldrb	r3, [r7, #23]
 800f7ec:	3301      	adds	r3, #1
 800f7ee:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f7f0:	7dfb      	ldrb	r3, [r7, #23]
 800f7f2:	68ba      	ldr	r2, [r7, #8]
 800f7f4:	4413      	add	r3, r2
 800f7f6:	2200      	movs	r2, #0
 800f7f8:	701a      	strb	r2, [r3, #0]
    idx++;
 800f7fa:	7dfb      	ldrb	r3, [r7, #23]
 800f7fc:	3301      	adds	r3, #1
 800f7fe:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f800:	693b      	ldr	r3, [r7, #16]
 800f802:	781b      	ldrb	r3, [r3, #0]
 800f804:	2b00      	cmp	r3, #0
 800f806:	d1e7      	bne.n	800f7d8 <USBD_GetString+0x52>
 800f808:	e000      	b.n	800f80c <USBD_GetString+0x86>
    return;
 800f80a:	bf00      	nop
  }
}
 800f80c:	3718      	adds	r7, #24
 800f80e:	46bd      	mov	sp, r7
 800f810:	bd80      	pop	{r7, pc}

0800f812 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f812:	b480      	push	{r7}
 800f814:	b085      	sub	sp, #20
 800f816:	af00      	add	r7, sp, #0
 800f818:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f81a:	2300      	movs	r3, #0
 800f81c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f822:	e005      	b.n	800f830 <USBD_GetLen+0x1e>
  {
    len++;
 800f824:	7bfb      	ldrb	r3, [r7, #15]
 800f826:	3301      	adds	r3, #1
 800f828:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f82a:	68bb      	ldr	r3, [r7, #8]
 800f82c:	3301      	adds	r3, #1
 800f82e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f830:	68bb      	ldr	r3, [r7, #8]
 800f832:	781b      	ldrb	r3, [r3, #0]
 800f834:	2b00      	cmp	r3, #0
 800f836:	d1f5      	bne.n	800f824 <USBD_GetLen+0x12>
  }

  return len;
 800f838:	7bfb      	ldrb	r3, [r7, #15]
}
 800f83a:	4618      	mov	r0, r3
 800f83c:	3714      	adds	r7, #20
 800f83e:	46bd      	mov	sp, r7
 800f840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f844:	4770      	bx	lr

0800f846 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f846:	b580      	push	{r7, lr}
 800f848:	b084      	sub	sp, #16
 800f84a:	af00      	add	r7, sp, #0
 800f84c:	60f8      	str	r0, [r7, #12]
 800f84e:	60b9      	str	r1, [r7, #8]
 800f850:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	2202      	movs	r2, #2
 800f856:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	687a      	ldr	r2, [r7, #4]
 800f85e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	687a      	ldr	r2, [r7, #4]
 800f864:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	68ba      	ldr	r2, [r7, #8]
 800f86a:	2100      	movs	r1, #0
 800f86c:	68f8      	ldr	r0, [r7, #12]
 800f86e:	f007 fc72 	bl	8017156 <USBD_LL_Transmit>

  return USBD_OK;
 800f872:	2300      	movs	r3, #0
}
 800f874:	4618      	mov	r0, r3
 800f876:	3710      	adds	r7, #16
 800f878:	46bd      	mov	sp, r7
 800f87a:	bd80      	pop	{r7, pc}

0800f87c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f87c:	b580      	push	{r7, lr}
 800f87e:	b084      	sub	sp, #16
 800f880:	af00      	add	r7, sp, #0
 800f882:	60f8      	str	r0, [r7, #12]
 800f884:	60b9      	str	r1, [r7, #8]
 800f886:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	68ba      	ldr	r2, [r7, #8]
 800f88c:	2100      	movs	r1, #0
 800f88e:	68f8      	ldr	r0, [r7, #12]
 800f890:	f007 fc61 	bl	8017156 <USBD_LL_Transmit>

  return USBD_OK;
 800f894:	2300      	movs	r3, #0
}
 800f896:	4618      	mov	r0, r3
 800f898:	3710      	adds	r7, #16
 800f89a:	46bd      	mov	sp, r7
 800f89c:	bd80      	pop	{r7, pc}

0800f89e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f89e:	b580      	push	{r7, lr}
 800f8a0:	b084      	sub	sp, #16
 800f8a2:	af00      	add	r7, sp, #0
 800f8a4:	60f8      	str	r0, [r7, #12]
 800f8a6:	60b9      	str	r1, [r7, #8]
 800f8a8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	2203      	movs	r2, #3
 800f8ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	687a      	ldr	r2, [r7, #4]
 800f8b6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	687a      	ldr	r2, [r7, #4]
 800f8be:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	68ba      	ldr	r2, [r7, #8]
 800f8c6:	2100      	movs	r1, #0
 800f8c8:	68f8      	ldr	r0, [r7, #12]
 800f8ca:	f007 fc65 	bl	8017198 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f8ce:	2300      	movs	r3, #0
}
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	3710      	adds	r7, #16
 800f8d4:	46bd      	mov	sp, r7
 800f8d6:	bd80      	pop	{r7, pc}

0800f8d8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b084      	sub	sp, #16
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	60f8      	str	r0, [r7, #12]
 800f8e0:	60b9      	str	r1, [r7, #8]
 800f8e2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	68ba      	ldr	r2, [r7, #8]
 800f8e8:	2100      	movs	r1, #0
 800f8ea:	68f8      	ldr	r0, [r7, #12]
 800f8ec:	f007 fc54 	bl	8017198 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f8f0:	2300      	movs	r3, #0
}
 800f8f2:	4618      	mov	r0, r3
 800f8f4:	3710      	adds	r7, #16
 800f8f6:	46bd      	mov	sp, r7
 800f8f8:	bd80      	pop	{r7, pc}

0800f8fa <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f8fa:	b580      	push	{r7, lr}
 800f8fc:	b082      	sub	sp, #8
 800f8fe:	af00      	add	r7, sp, #0
 800f900:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	2204      	movs	r2, #4
 800f906:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f90a:	2300      	movs	r3, #0
 800f90c:	2200      	movs	r2, #0
 800f90e:	2100      	movs	r1, #0
 800f910:	6878      	ldr	r0, [r7, #4]
 800f912:	f007 fc20 	bl	8017156 <USBD_LL_Transmit>

  return USBD_OK;
 800f916:	2300      	movs	r3, #0
}
 800f918:	4618      	mov	r0, r3
 800f91a:	3708      	adds	r7, #8
 800f91c:	46bd      	mov	sp, r7
 800f91e:	bd80      	pop	{r7, pc}

0800f920 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f920:	b580      	push	{r7, lr}
 800f922:	b082      	sub	sp, #8
 800f924:	af00      	add	r7, sp, #0
 800f926:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	2205      	movs	r2, #5
 800f92c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f930:	2300      	movs	r3, #0
 800f932:	2200      	movs	r2, #0
 800f934:	2100      	movs	r1, #0
 800f936:	6878      	ldr	r0, [r7, #4]
 800f938:	f007 fc2e 	bl	8017198 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f93c:	2300      	movs	r3, #0
}
 800f93e:	4618      	mov	r0, r3
 800f940:	3708      	adds	r7, #8
 800f942:	46bd      	mov	sp, r7
 800f944:	bd80      	pop	{r7, pc}
	...

0800f948 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800f948:	b580      	push	{r7, lr}
 800f94a:	b084      	sub	sp, #16
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	4603      	mov	r3, r0
 800f950:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800f952:	79fb      	ldrb	r3, [r7, #7]
 800f954:	4a08      	ldr	r2, [pc, #32]	; (800f978 <disk_status+0x30>)
 800f956:	009b      	lsls	r3, r3, #2
 800f958:	4413      	add	r3, r2
 800f95a:	685b      	ldr	r3, [r3, #4]
 800f95c:	685b      	ldr	r3, [r3, #4]
 800f95e:	79fa      	ldrb	r2, [r7, #7]
 800f960:	4905      	ldr	r1, [pc, #20]	; (800f978 <disk_status+0x30>)
 800f962:	440a      	add	r2, r1
 800f964:	7a12      	ldrb	r2, [r2, #8]
 800f966:	4610      	mov	r0, r2
 800f968:	4798      	blx	r3
 800f96a:	4603      	mov	r3, r0
 800f96c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800f96e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f970:	4618      	mov	r0, r3
 800f972:	3710      	adds	r7, #16
 800f974:	46bd      	mov	sp, r7
 800f976:	bd80      	pop	{r7, pc}
 800f978:	2000035c 	.word	0x2000035c

0800f97c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800f97c:	b580      	push	{r7, lr}
 800f97e:	b084      	sub	sp, #16
 800f980:	af00      	add	r7, sp, #0
 800f982:	4603      	mov	r3, r0
 800f984:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800f986:	2300      	movs	r3, #0
 800f988:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800f98a:	79fb      	ldrb	r3, [r7, #7]
 800f98c:	4a0d      	ldr	r2, [pc, #52]	; (800f9c4 <disk_initialize+0x48>)
 800f98e:	5cd3      	ldrb	r3, [r2, r3]
 800f990:	2b00      	cmp	r3, #0
 800f992:	d111      	bne.n	800f9b8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800f994:	79fb      	ldrb	r3, [r7, #7]
 800f996:	4a0b      	ldr	r2, [pc, #44]	; (800f9c4 <disk_initialize+0x48>)
 800f998:	2101      	movs	r1, #1
 800f99a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800f99c:	79fb      	ldrb	r3, [r7, #7]
 800f99e:	4a09      	ldr	r2, [pc, #36]	; (800f9c4 <disk_initialize+0x48>)
 800f9a0:	009b      	lsls	r3, r3, #2
 800f9a2:	4413      	add	r3, r2
 800f9a4:	685b      	ldr	r3, [r3, #4]
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	79fa      	ldrb	r2, [r7, #7]
 800f9aa:	4906      	ldr	r1, [pc, #24]	; (800f9c4 <disk_initialize+0x48>)
 800f9ac:	440a      	add	r2, r1
 800f9ae:	7a12      	ldrb	r2, [r2, #8]
 800f9b0:	4610      	mov	r0, r2
 800f9b2:	4798      	blx	r3
 800f9b4:	4603      	mov	r3, r0
 800f9b6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800f9b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9ba:	4618      	mov	r0, r3
 800f9bc:	3710      	adds	r7, #16
 800f9be:	46bd      	mov	sp, r7
 800f9c0:	bd80      	pop	{r7, pc}
 800f9c2:	bf00      	nop
 800f9c4:	2000035c 	.word	0x2000035c

0800f9c8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800f9c8:	b590      	push	{r4, r7, lr}
 800f9ca:	b087      	sub	sp, #28
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	60b9      	str	r1, [r7, #8]
 800f9d0:	607a      	str	r2, [r7, #4]
 800f9d2:	603b      	str	r3, [r7, #0]
 800f9d4:	4603      	mov	r3, r0
 800f9d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800f9d8:	7bfb      	ldrb	r3, [r7, #15]
 800f9da:	4a0a      	ldr	r2, [pc, #40]	; (800fa04 <disk_read+0x3c>)
 800f9dc:	009b      	lsls	r3, r3, #2
 800f9de:	4413      	add	r3, r2
 800f9e0:	685b      	ldr	r3, [r3, #4]
 800f9e2:	689c      	ldr	r4, [r3, #8]
 800f9e4:	7bfb      	ldrb	r3, [r7, #15]
 800f9e6:	4a07      	ldr	r2, [pc, #28]	; (800fa04 <disk_read+0x3c>)
 800f9e8:	4413      	add	r3, r2
 800f9ea:	7a18      	ldrb	r0, [r3, #8]
 800f9ec:	683b      	ldr	r3, [r7, #0]
 800f9ee:	687a      	ldr	r2, [r7, #4]
 800f9f0:	68b9      	ldr	r1, [r7, #8]
 800f9f2:	47a0      	blx	r4
 800f9f4:	4603      	mov	r3, r0
 800f9f6:	75fb      	strb	r3, [r7, #23]
  return res;
 800f9f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f9fa:	4618      	mov	r0, r3
 800f9fc:	371c      	adds	r7, #28
 800f9fe:	46bd      	mov	sp, r7
 800fa00:	bd90      	pop	{r4, r7, pc}
 800fa02:	bf00      	nop
 800fa04:	2000035c 	.word	0x2000035c

0800fa08 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800fa08:	b590      	push	{r4, r7, lr}
 800fa0a:	b087      	sub	sp, #28
 800fa0c:	af00      	add	r7, sp, #0
 800fa0e:	60b9      	str	r1, [r7, #8]
 800fa10:	607a      	str	r2, [r7, #4]
 800fa12:	603b      	str	r3, [r7, #0]
 800fa14:	4603      	mov	r3, r0
 800fa16:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800fa18:	7bfb      	ldrb	r3, [r7, #15]
 800fa1a:	4a0a      	ldr	r2, [pc, #40]	; (800fa44 <disk_write+0x3c>)
 800fa1c:	009b      	lsls	r3, r3, #2
 800fa1e:	4413      	add	r3, r2
 800fa20:	685b      	ldr	r3, [r3, #4]
 800fa22:	68dc      	ldr	r4, [r3, #12]
 800fa24:	7bfb      	ldrb	r3, [r7, #15]
 800fa26:	4a07      	ldr	r2, [pc, #28]	; (800fa44 <disk_write+0x3c>)
 800fa28:	4413      	add	r3, r2
 800fa2a:	7a18      	ldrb	r0, [r3, #8]
 800fa2c:	683b      	ldr	r3, [r7, #0]
 800fa2e:	687a      	ldr	r2, [r7, #4]
 800fa30:	68b9      	ldr	r1, [r7, #8]
 800fa32:	47a0      	blx	r4
 800fa34:	4603      	mov	r3, r0
 800fa36:	75fb      	strb	r3, [r7, #23]
  return res;
 800fa38:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	371c      	adds	r7, #28
 800fa3e:	46bd      	mov	sp, r7
 800fa40:	bd90      	pop	{r4, r7, pc}
 800fa42:	bf00      	nop
 800fa44:	2000035c 	.word	0x2000035c

0800fa48 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800fa48:	b580      	push	{r7, lr}
 800fa4a:	b084      	sub	sp, #16
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	4603      	mov	r3, r0
 800fa50:	603a      	str	r2, [r7, #0]
 800fa52:	71fb      	strb	r3, [r7, #7]
 800fa54:	460b      	mov	r3, r1
 800fa56:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800fa58:	79fb      	ldrb	r3, [r7, #7]
 800fa5a:	4a09      	ldr	r2, [pc, #36]	; (800fa80 <disk_ioctl+0x38>)
 800fa5c:	009b      	lsls	r3, r3, #2
 800fa5e:	4413      	add	r3, r2
 800fa60:	685b      	ldr	r3, [r3, #4]
 800fa62:	691b      	ldr	r3, [r3, #16]
 800fa64:	79fa      	ldrb	r2, [r7, #7]
 800fa66:	4906      	ldr	r1, [pc, #24]	; (800fa80 <disk_ioctl+0x38>)
 800fa68:	440a      	add	r2, r1
 800fa6a:	7a10      	ldrb	r0, [r2, #8]
 800fa6c:	79b9      	ldrb	r1, [r7, #6]
 800fa6e:	683a      	ldr	r2, [r7, #0]
 800fa70:	4798      	blx	r3
 800fa72:	4603      	mov	r3, r0
 800fa74:	73fb      	strb	r3, [r7, #15]
  return res;
 800fa76:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa78:	4618      	mov	r0, r3
 800fa7a:	3710      	adds	r7, #16
 800fa7c:	46bd      	mov	sp, r7
 800fa7e:	bd80      	pop	{r7, pc}
 800fa80:	2000035c 	.word	0x2000035c

0800fa84 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800fa84:	b480      	push	{r7}
 800fa86:	b085      	sub	sp, #20
 800fa88:	af00      	add	r7, sp, #0
 800fa8a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	3301      	adds	r3, #1
 800fa90:	781b      	ldrb	r3, [r3, #0]
 800fa92:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800fa94:	89fb      	ldrh	r3, [r7, #14]
 800fa96:	021b      	lsls	r3, r3, #8
 800fa98:	b21a      	sxth	r2, r3
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	781b      	ldrb	r3, [r3, #0]
 800fa9e:	b21b      	sxth	r3, r3
 800faa0:	4313      	orrs	r3, r2
 800faa2:	b21b      	sxth	r3, r3
 800faa4:	81fb      	strh	r3, [r7, #14]
	return rv;
 800faa6:	89fb      	ldrh	r3, [r7, #14]
}
 800faa8:	4618      	mov	r0, r3
 800faaa:	3714      	adds	r7, #20
 800faac:	46bd      	mov	sp, r7
 800faae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab2:	4770      	bx	lr

0800fab4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800fab4:	b480      	push	{r7}
 800fab6:	b085      	sub	sp, #20
 800fab8:	af00      	add	r7, sp, #0
 800faba:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	3303      	adds	r3, #3
 800fac0:	781b      	ldrb	r3, [r3, #0]
 800fac2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	021b      	lsls	r3, r3, #8
 800fac8:	687a      	ldr	r2, [r7, #4]
 800faca:	3202      	adds	r2, #2
 800facc:	7812      	ldrb	r2, [r2, #0]
 800face:	4313      	orrs	r3, r2
 800fad0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	021b      	lsls	r3, r3, #8
 800fad6:	687a      	ldr	r2, [r7, #4]
 800fad8:	3201      	adds	r2, #1
 800fada:	7812      	ldrb	r2, [r2, #0]
 800fadc:	4313      	orrs	r3, r2
 800fade:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	021b      	lsls	r3, r3, #8
 800fae4:	687a      	ldr	r2, [r7, #4]
 800fae6:	7812      	ldrb	r2, [r2, #0]
 800fae8:	4313      	orrs	r3, r2
 800faea:	60fb      	str	r3, [r7, #12]
	return rv;
 800faec:	68fb      	ldr	r3, [r7, #12]
}
 800faee:	4618      	mov	r0, r3
 800faf0:	3714      	adds	r7, #20
 800faf2:	46bd      	mov	sp, r7
 800faf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf8:	4770      	bx	lr

0800fafa <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800fafa:	b480      	push	{r7}
 800fafc:	b083      	sub	sp, #12
 800fafe:	af00      	add	r7, sp, #0
 800fb00:	6078      	str	r0, [r7, #4]
 800fb02:	460b      	mov	r3, r1
 800fb04:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	1c5a      	adds	r2, r3, #1
 800fb0a:	607a      	str	r2, [r7, #4]
 800fb0c:	887a      	ldrh	r2, [r7, #2]
 800fb0e:	b2d2      	uxtb	r2, r2
 800fb10:	701a      	strb	r2, [r3, #0]
 800fb12:	887b      	ldrh	r3, [r7, #2]
 800fb14:	0a1b      	lsrs	r3, r3, #8
 800fb16:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	1c5a      	adds	r2, r3, #1
 800fb1c:	607a      	str	r2, [r7, #4]
 800fb1e:	887a      	ldrh	r2, [r7, #2]
 800fb20:	b2d2      	uxtb	r2, r2
 800fb22:	701a      	strb	r2, [r3, #0]
}
 800fb24:	bf00      	nop
 800fb26:	370c      	adds	r7, #12
 800fb28:	46bd      	mov	sp, r7
 800fb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb2e:	4770      	bx	lr

0800fb30 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800fb30:	b480      	push	{r7}
 800fb32:	b083      	sub	sp, #12
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	6078      	str	r0, [r7, #4]
 800fb38:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	1c5a      	adds	r2, r3, #1
 800fb3e:	607a      	str	r2, [r7, #4]
 800fb40:	683a      	ldr	r2, [r7, #0]
 800fb42:	b2d2      	uxtb	r2, r2
 800fb44:	701a      	strb	r2, [r3, #0]
 800fb46:	683b      	ldr	r3, [r7, #0]
 800fb48:	0a1b      	lsrs	r3, r3, #8
 800fb4a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	1c5a      	adds	r2, r3, #1
 800fb50:	607a      	str	r2, [r7, #4]
 800fb52:	683a      	ldr	r2, [r7, #0]
 800fb54:	b2d2      	uxtb	r2, r2
 800fb56:	701a      	strb	r2, [r3, #0]
 800fb58:	683b      	ldr	r3, [r7, #0]
 800fb5a:	0a1b      	lsrs	r3, r3, #8
 800fb5c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	1c5a      	adds	r2, r3, #1
 800fb62:	607a      	str	r2, [r7, #4]
 800fb64:	683a      	ldr	r2, [r7, #0]
 800fb66:	b2d2      	uxtb	r2, r2
 800fb68:	701a      	strb	r2, [r3, #0]
 800fb6a:	683b      	ldr	r3, [r7, #0]
 800fb6c:	0a1b      	lsrs	r3, r3, #8
 800fb6e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	1c5a      	adds	r2, r3, #1
 800fb74:	607a      	str	r2, [r7, #4]
 800fb76:	683a      	ldr	r2, [r7, #0]
 800fb78:	b2d2      	uxtb	r2, r2
 800fb7a:	701a      	strb	r2, [r3, #0]
}
 800fb7c:	bf00      	nop
 800fb7e:	370c      	adds	r7, #12
 800fb80:	46bd      	mov	sp, r7
 800fb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb86:	4770      	bx	lr

0800fb88 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800fb88:	b480      	push	{r7}
 800fb8a:	b087      	sub	sp, #28
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	60f8      	str	r0, [r7, #12]
 800fb90:	60b9      	str	r1, [r7, #8]
 800fb92:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800fb98:	68bb      	ldr	r3, [r7, #8]
 800fb9a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d00d      	beq.n	800fbbe <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800fba2:	693a      	ldr	r2, [r7, #16]
 800fba4:	1c53      	adds	r3, r2, #1
 800fba6:	613b      	str	r3, [r7, #16]
 800fba8:	697b      	ldr	r3, [r7, #20]
 800fbaa:	1c59      	adds	r1, r3, #1
 800fbac:	6179      	str	r1, [r7, #20]
 800fbae:	7812      	ldrb	r2, [r2, #0]
 800fbb0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	3b01      	subs	r3, #1
 800fbb6:	607b      	str	r3, [r7, #4]
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d1f1      	bne.n	800fba2 <mem_cpy+0x1a>
	}
}
 800fbbe:	bf00      	nop
 800fbc0:	371c      	adds	r7, #28
 800fbc2:	46bd      	mov	sp, r7
 800fbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc8:	4770      	bx	lr

0800fbca <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800fbca:	b480      	push	{r7}
 800fbcc:	b087      	sub	sp, #28
 800fbce:	af00      	add	r7, sp, #0
 800fbd0:	60f8      	str	r0, [r7, #12]
 800fbd2:	60b9      	str	r1, [r7, #8]
 800fbd4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800fbda:	697b      	ldr	r3, [r7, #20]
 800fbdc:	1c5a      	adds	r2, r3, #1
 800fbde:	617a      	str	r2, [r7, #20]
 800fbe0:	68ba      	ldr	r2, [r7, #8]
 800fbe2:	b2d2      	uxtb	r2, r2
 800fbe4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	3b01      	subs	r3, #1
 800fbea:	607b      	str	r3, [r7, #4]
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d1f3      	bne.n	800fbda <mem_set+0x10>
}
 800fbf2:	bf00      	nop
 800fbf4:	371c      	adds	r7, #28
 800fbf6:	46bd      	mov	sp, r7
 800fbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbfc:	4770      	bx	lr

0800fbfe <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800fbfe:	b480      	push	{r7}
 800fc00:	b089      	sub	sp, #36	; 0x24
 800fc02:	af00      	add	r7, sp, #0
 800fc04:	60f8      	str	r0, [r7, #12]
 800fc06:	60b9      	str	r1, [r7, #8]
 800fc08:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	61fb      	str	r3, [r7, #28]
 800fc0e:	68bb      	ldr	r3, [r7, #8]
 800fc10:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800fc12:	2300      	movs	r3, #0
 800fc14:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800fc16:	69fb      	ldr	r3, [r7, #28]
 800fc18:	1c5a      	adds	r2, r3, #1
 800fc1a:	61fa      	str	r2, [r7, #28]
 800fc1c:	781b      	ldrb	r3, [r3, #0]
 800fc1e:	4619      	mov	r1, r3
 800fc20:	69bb      	ldr	r3, [r7, #24]
 800fc22:	1c5a      	adds	r2, r3, #1
 800fc24:	61ba      	str	r2, [r7, #24]
 800fc26:	781b      	ldrb	r3, [r3, #0]
 800fc28:	1acb      	subs	r3, r1, r3
 800fc2a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	3b01      	subs	r3, #1
 800fc30:	607b      	str	r3, [r7, #4]
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d002      	beq.n	800fc3e <mem_cmp+0x40>
 800fc38:	697b      	ldr	r3, [r7, #20]
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d0eb      	beq.n	800fc16 <mem_cmp+0x18>

	return r;
 800fc3e:	697b      	ldr	r3, [r7, #20]
}
 800fc40:	4618      	mov	r0, r3
 800fc42:	3724      	adds	r7, #36	; 0x24
 800fc44:	46bd      	mov	sp, r7
 800fc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc4a:	4770      	bx	lr

0800fc4c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800fc4c:	b480      	push	{r7}
 800fc4e:	b083      	sub	sp, #12
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	6078      	str	r0, [r7, #4]
 800fc54:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800fc56:	e002      	b.n	800fc5e <chk_chr+0x12>
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	3301      	adds	r3, #1
 800fc5c:	607b      	str	r3, [r7, #4]
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	781b      	ldrb	r3, [r3, #0]
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d005      	beq.n	800fc72 <chk_chr+0x26>
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	781b      	ldrb	r3, [r3, #0]
 800fc6a:	461a      	mov	r2, r3
 800fc6c:	683b      	ldr	r3, [r7, #0]
 800fc6e:	4293      	cmp	r3, r2
 800fc70:	d1f2      	bne.n	800fc58 <chk_chr+0xc>
	return *str;
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	781b      	ldrb	r3, [r3, #0]
}
 800fc76:	4618      	mov	r0, r3
 800fc78:	370c      	adds	r7, #12
 800fc7a:	46bd      	mov	sp, r7
 800fc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc80:	4770      	bx	lr

0800fc82 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800fc82:	b580      	push	{r7, lr}
 800fc84:	b082      	sub	sp, #8
 800fc86:	af00      	add	r7, sp, #0
 800fc88:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d009      	beq.n	800fca4 <lock_fs+0x22>
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	68db      	ldr	r3, [r3, #12]
 800fc94:	4618      	mov	r0, r3
 800fc96:	f002 fd8d 	bl	80127b4 <ff_req_grant>
 800fc9a:	4603      	mov	r3, r0
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d001      	beq.n	800fca4 <lock_fs+0x22>
 800fca0:	2301      	movs	r3, #1
 800fca2:	e000      	b.n	800fca6 <lock_fs+0x24>
 800fca4:	2300      	movs	r3, #0
}
 800fca6:	4618      	mov	r0, r3
 800fca8:	3708      	adds	r7, #8
 800fcaa:	46bd      	mov	sp, r7
 800fcac:	bd80      	pop	{r7, pc}

0800fcae <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800fcae:	b580      	push	{r7, lr}
 800fcb0:	b082      	sub	sp, #8
 800fcb2:	af00      	add	r7, sp, #0
 800fcb4:	6078      	str	r0, [r7, #4]
 800fcb6:	460b      	mov	r3, r1
 800fcb8:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d00d      	beq.n	800fcdc <unlock_fs+0x2e>
 800fcc0:	78fb      	ldrb	r3, [r7, #3]
 800fcc2:	2b0c      	cmp	r3, #12
 800fcc4:	d00a      	beq.n	800fcdc <unlock_fs+0x2e>
 800fcc6:	78fb      	ldrb	r3, [r7, #3]
 800fcc8:	2b0b      	cmp	r3, #11
 800fcca:	d007      	beq.n	800fcdc <unlock_fs+0x2e>
 800fccc:	78fb      	ldrb	r3, [r7, #3]
 800fcce:	2b0f      	cmp	r3, #15
 800fcd0:	d004      	beq.n	800fcdc <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	68db      	ldr	r3, [r3, #12]
 800fcd6:	4618      	mov	r0, r3
 800fcd8:	f002 fd81 	bl	80127de <ff_rel_grant>
	}
}
 800fcdc:	bf00      	nop
 800fcde:	3708      	adds	r7, #8
 800fce0:	46bd      	mov	sp, r7
 800fce2:	bd80      	pop	{r7, pc}

0800fce4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800fce4:	b480      	push	{r7}
 800fce6:	b085      	sub	sp, #20
 800fce8:	af00      	add	r7, sp, #0
 800fcea:	6078      	str	r0, [r7, #4]
 800fcec:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800fcee:	2300      	movs	r3, #0
 800fcf0:	60bb      	str	r3, [r7, #8]
 800fcf2:	68bb      	ldr	r3, [r7, #8]
 800fcf4:	60fb      	str	r3, [r7, #12]
 800fcf6:	e029      	b.n	800fd4c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800fcf8:	4a27      	ldr	r2, [pc, #156]	; (800fd98 <chk_lock+0xb4>)
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	011b      	lsls	r3, r3, #4
 800fcfe:	4413      	add	r3, r2
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d01d      	beq.n	800fd42 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800fd06:	4a24      	ldr	r2, [pc, #144]	; (800fd98 <chk_lock+0xb4>)
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	011b      	lsls	r3, r3, #4
 800fd0c:	4413      	add	r3, r2
 800fd0e:	681a      	ldr	r2, [r3, #0]
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	429a      	cmp	r2, r3
 800fd16:	d116      	bne.n	800fd46 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800fd18:	4a1f      	ldr	r2, [pc, #124]	; (800fd98 <chk_lock+0xb4>)
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	011b      	lsls	r3, r3, #4
 800fd1e:	4413      	add	r3, r2
 800fd20:	3304      	adds	r3, #4
 800fd22:	681a      	ldr	r2, [r3, #0]
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800fd28:	429a      	cmp	r2, r3
 800fd2a:	d10c      	bne.n	800fd46 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800fd2c:	4a1a      	ldr	r2, [pc, #104]	; (800fd98 <chk_lock+0xb4>)
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	011b      	lsls	r3, r3, #4
 800fd32:	4413      	add	r3, r2
 800fd34:	3308      	adds	r3, #8
 800fd36:	681a      	ldr	r2, [r3, #0]
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800fd3c:	429a      	cmp	r2, r3
 800fd3e:	d102      	bne.n	800fd46 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800fd40:	e007      	b.n	800fd52 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800fd42:	2301      	movs	r3, #1
 800fd44:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	3301      	adds	r3, #1
 800fd4a:	60fb      	str	r3, [r7, #12]
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	2b01      	cmp	r3, #1
 800fd50:	d9d2      	bls.n	800fcf8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	2b02      	cmp	r3, #2
 800fd56:	d109      	bne.n	800fd6c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800fd58:	68bb      	ldr	r3, [r7, #8]
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d102      	bne.n	800fd64 <chk_lock+0x80>
 800fd5e:	683b      	ldr	r3, [r7, #0]
 800fd60:	2b02      	cmp	r3, #2
 800fd62:	d101      	bne.n	800fd68 <chk_lock+0x84>
 800fd64:	2300      	movs	r3, #0
 800fd66:	e010      	b.n	800fd8a <chk_lock+0xa6>
 800fd68:	2312      	movs	r3, #18
 800fd6a:	e00e      	b.n	800fd8a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800fd6c:	683b      	ldr	r3, [r7, #0]
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d108      	bne.n	800fd84 <chk_lock+0xa0>
 800fd72:	4a09      	ldr	r2, [pc, #36]	; (800fd98 <chk_lock+0xb4>)
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	011b      	lsls	r3, r3, #4
 800fd78:	4413      	add	r3, r2
 800fd7a:	330c      	adds	r3, #12
 800fd7c:	881b      	ldrh	r3, [r3, #0]
 800fd7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fd82:	d101      	bne.n	800fd88 <chk_lock+0xa4>
 800fd84:	2310      	movs	r3, #16
 800fd86:	e000      	b.n	800fd8a <chk_lock+0xa6>
 800fd88:	2300      	movs	r3, #0
}
 800fd8a:	4618      	mov	r0, r3
 800fd8c:	3714      	adds	r7, #20
 800fd8e:	46bd      	mov	sp, r7
 800fd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd94:	4770      	bx	lr
 800fd96:	bf00      	nop
 800fd98:	2000033c 	.word	0x2000033c

0800fd9c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800fd9c:	b480      	push	{r7}
 800fd9e:	b083      	sub	sp, #12
 800fda0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800fda2:	2300      	movs	r3, #0
 800fda4:	607b      	str	r3, [r7, #4]
 800fda6:	e002      	b.n	800fdae <enq_lock+0x12>
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	3301      	adds	r3, #1
 800fdac:	607b      	str	r3, [r7, #4]
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	2b01      	cmp	r3, #1
 800fdb2:	d806      	bhi.n	800fdc2 <enq_lock+0x26>
 800fdb4:	4a09      	ldr	r2, [pc, #36]	; (800fddc <enq_lock+0x40>)
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	011b      	lsls	r3, r3, #4
 800fdba:	4413      	add	r3, r2
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d1f2      	bne.n	800fda8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	2b02      	cmp	r3, #2
 800fdc6:	bf14      	ite	ne
 800fdc8:	2301      	movne	r3, #1
 800fdca:	2300      	moveq	r3, #0
 800fdcc:	b2db      	uxtb	r3, r3
}
 800fdce:	4618      	mov	r0, r3
 800fdd0:	370c      	adds	r7, #12
 800fdd2:	46bd      	mov	sp, r7
 800fdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd8:	4770      	bx	lr
 800fdda:	bf00      	nop
 800fddc:	2000033c 	.word	0x2000033c

0800fde0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800fde0:	b480      	push	{r7}
 800fde2:	b085      	sub	sp, #20
 800fde4:	af00      	add	r7, sp, #0
 800fde6:	6078      	str	r0, [r7, #4]
 800fde8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800fdea:	2300      	movs	r3, #0
 800fdec:	60fb      	str	r3, [r7, #12]
 800fdee:	e01f      	b.n	800fe30 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800fdf0:	4a41      	ldr	r2, [pc, #260]	; (800fef8 <inc_lock+0x118>)
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	011b      	lsls	r3, r3, #4
 800fdf6:	4413      	add	r3, r2
 800fdf8:	681a      	ldr	r2, [r3, #0]
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	429a      	cmp	r2, r3
 800fe00:	d113      	bne.n	800fe2a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800fe02:	4a3d      	ldr	r2, [pc, #244]	; (800fef8 <inc_lock+0x118>)
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	011b      	lsls	r3, r3, #4
 800fe08:	4413      	add	r3, r2
 800fe0a:	3304      	adds	r3, #4
 800fe0c:	681a      	ldr	r2, [r3, #0]
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800fe12:	429a      	cmp	r2, r3
 800fe14:	d109      	bne.n	800fe2a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800fe16:	4a38      	ldr	r2, [pc, #224]	; (800fef8 <inc_lock+0x118>)
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	011b      	lsls	r3, r3, #4
 800fe1c:	4413      	add	r3, r2
 800fe1e:	3308      	adds	r3, #8
 800fe20:	681a      	ldr	r2, [r3, #0]
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800fe26:	429a      	cmp	r2, r3
 800fe28:	d006      	beq.n	800fe38 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	3301      	adds	r3, #1
 800fe2e:	60fb      	str	r3, [r7, #12]
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	2b01      	cmp	r3, #1
 800fe34:	d9dc      	bls.n	800fdf0 <inc_lock+0x10>
 800fe36:	e000      	b.n	800fe3a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800fe38:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	2b02      	cmp	r3, #2
 800fe3e:	d132      	bne.n	800fea6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800fe40:	2300      	movs	r3, #0
 800fe42:	60fb      	str	r3, [r7, #12]
 800fe44:	e002      	b.n	800fe4c <inc_lock+0x6c>
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	3301      	adds	r3, #1
 800fe4a:	60fb      	str	r3, [r7, #12]
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	2b01      	cmp	r3, #1
 800fe50:	d806      	bhi.n	800fe60 <inc_lock+0x80>
 800fe52:	4a29      	ldr	r2, [pc, #164]	; (800fef8 <inc_lock+0x118>)
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	011b      	lsls	r3, r3, #4
 800fe58:	4413      	add	r3, r2
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d1f2      	bne.n	800fe46 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	2b02      	cmp	r3, #2
 800fe64:	d101      	bne.n	800fe6a <inc_lock+0x8a>
 800fe66:	2300      	movs	r3, #0
 800fe68:	e040      	b.n	800feec <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	681a      	ldr	r2, [r3, #0]
 800fe6e:	4922      	ldr	r1, [pc, #136]	; (800fef8 <inc_lock+0x118>)
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	011b      	lsls	r3, r3, #4
 800fe74:	440b      	add	r3, r1
 800fe76:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	689a      	ldr	r2, [r3, #8]
 800fe7c:	491e      	ldr	r1, [pc, #120]	; (800fef8 <inc_lock+0x118>)
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	011b      	lsls	r3, r3, #4
 800fe82:	440b      	add	r3, r1
 800fe84:	3304      	adds	r3, #4
 800fe86:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	695a      	ldr	r2, [r3, #20]
 800fe8c:	491a      	ldr	r1, [pc, #104]	; (800fef8 <inc_lock+0x118>)
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	011b      	lsls	r3, r3, #4
 800fe92:	440b      	add	r3, r1
 800fe94:	3308      	adds	r3, #8
 800fe96:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800fe98:	4a17      	ldr	r2, [pc, #92]	; (800fef8 <inc_lock+0x118>)
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	011b      	lsls	r3, r3, #4
 800fe9e:	4413      	add	r3, r2
 800fea0:	330c      	adds	r3, #12
 800fea2:	2200      	movs	r2, #0
 800fea4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800fea6:	683b      	ldr	r3, [r7, #0]
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d009      	beq.n	800fec0 <inc_lock+0xe0>
 800feac:	4a12      	ldr	r2, [pc, #72]	; (800fef8 <inc_lock+0x118>)
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	011b      	lsls	r3, r3, #4
 800feb2:	4413      	add	r3, r2
 800feb4:	330c      	adds	r3, #12
 800feb6:	881b      	ldrh	r3, [r3, #0]
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d001      	beq.n	800fec0 <inc_lock+0xe0>
 800febc:	2300      	movs	r3, #0
 800febe:	e015      	b.n	800feec <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800fec0:	683b      	ldr	r3, [r7, #0]
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d108      	bne.n	800fed8 <inc_lock+0xf8>
 800fec6:	4a0c      	ldr	r2, [pc, #48]	; (800fef8 <inc_lock+0x118>)
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	011b      	lsls	r3, r3, #4
 800fecc:	4413      	add	r3, r2
 800fece:	330c      	adds	r3, #12
 800fed0:	881b      	ldrh	r3, [r3, #0]
 800fed2:	3301      	adds	r3, #1
 800fed4:	b29a      	uxth	r2, r3
 800fed6:	e001      	b.n	800fedc <inc_lock+0xfc>
 800fed8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fedc:	4906      	ldr	r1, [pc, #24]	; (800fef8 <inc_lock+0x118>)
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	011b      	lsls	r3, r3, #4
 800fee2:	440b      	add	r3, r1
 800fee4:	330c      	adds	r3, #12
 800fee6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	3301      	adds	r3, #1
}
 800feec:	4618      	mov	r0, r3
 800feee:	3714      	adds	r7, #20
 800fef0:	46bd      	mov	sp, r7
 800fef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef6:	4770      	bx	lr
 800fef8:	2000033c 	.word	0x2000033c

0800fefc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800fefc:	b480      	push	{r7}
 800fefe:	b085      	sub	sp, #20
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	3b01      	subs	r3, #1
 800ff08:	607b      	str	r3, [r7, #4]
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	2b01      	cmp	r3, #1
 800ff0e:	d825      	bhi.n	800ff5c <dec_lock+0x60>
		n = Files[i].ctr;
 800ff10:	4a17      	ldr	r2, [pc, #92]	; (800ff70 <dec_lock+0x74>)
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	011b      	lsls	r3, r3, #4
 800ff16:	4413      	add	r3, r2
 800ff18:	330c      	adds	r3, #12
 800ff1a:	881b      	ldrh	r3, [r3, #0]
 800ff1c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ff1e:	89fb      	ldrh	r3, [r7, #14]
 800ff20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ff24:	d101      	bne.n	800ff2a <dec_lock+0x2e>
 800ff26:	2300      	movs	r3, #0
 800ff28:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800ff2a:	89fb      	ldrh	r3, [r7, #14]
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d002      	beq.n	800ff36 <dec_lock+0x3a>
 800ff30:	89fb      	ldrh	r3, [r7, #14]
 800ff32:	3b01      	subs	r3, #1
 800ff34:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800ff36:	4a0e      	ldr	r2, [pc, #56]	; (800ff70 <dec_lock+0x74>)
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	011b      	lsls	r3, r3, #4
 800ff3c:	4413      	add	r3, r2
 800ff3e:	330c      	adds	r3, #12
 800ff40:	89fa      	ldrh	r2, [r7, #14]
 800ff42:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ff44:	89fb      	ldrh	r3, [r7, #14]
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d105      	bne.n	800ff56 <dec_lock+0x5a>
 800ff4a:	4a09      	ldr	r2, [pc, #36]	; (800ff70 <dec_lock+0x74>)
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	011b      	lsls	r3, r3, #4
 800ff50:	4413      	add	r3, r2
 800ff52:	2200      	movs	r2, #0
 800ff54:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ff56:	2300      	movs	r3, #0
 800ff58:	737b      	strb	r3, [r7, #13]
 800ff5a:	e001      	b.n	800ff60 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ff5c:	2302      	movs	r3, #2
 800ff5e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800ff60:	7b7b      	ldrb	r3, [r7, #13]
}
 800ff62:	4618      	mov	r0, r3
 800ff64:	3714      	adds	r7, #20
 800ff66:	46bd      	mov	sp, r7
 800ff68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff6c:	4770      	bx	lr
 800ff6e:	bf00      	nop
 800ff70:	2000033c 	.word	0x2000033c

0800ff74 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ff74:	b480      	push	{r7}
 800ff76:	b085      	sub	sp, #20
 800ff78:	af00      	add	r7, sp, #0
 800ff7a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ff7c:	2300      	movs	r3, #0
 800ff7e:	60fb      	str	r3, [r7, #12]
 800ff80:	e010      	b.n	800ffa4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ff82:	4a0d      	ldr	r2, [pc, #52]	; (800ffb8 <clear_lock+0x44>)
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	011b      	lsls	r3, r3, #4
 800ff88:	4413      	add	r3, r2
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	687a      	ldr	r2, [r7, #4]
 800ff8e:	429a      	cmp	r2, r3
 800ff90:	d105      	bne.n	800ff9e <clear_lock+0x2a>
 800ff92:	4a09      	ldr	r2, [pc, #36]	; (800ffb8 <clear_lock+0x44>)
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	011b      	lsls	r3, r3, #4
 800ff98:	4413      	add	r3, r2
 800ff9a:	2200      	movs	r2, #0
 800ff9c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	3301      	adds	r3, #1
 800ffa2:	60fb      	str	r3, [r7, #12]
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	2b01      	cmp	r3, #1
 800ffa8:	d9eb      	bls.n	800ff82 <clear_lock+0xe>
	}
}
 800ffaa:	bf00      	nop
 800ffac:	3714      	adds	r7, #20
 800ffae:	46bd      	mov	sp, r7
 800ffb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb4:	4770      	bx	lr
 800ffb6:	bf00      	nop
 800ffb8:	2000033c 	.word	0x2000033c

0800ffbc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ffbc:	b580      	push	{r7, lr}
 800ffbe:	b086      	sub	sp, #24
 800ffc0:	af00      	add	r7, sp, #0
 800ffc2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ffc4:	2300      	movs	r3, #0
 800ffc6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	78db      	ldrb	r3, [r3, #3]
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d034      	beq.n	801003a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ffd4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	7858      	ldrb	r0, [r3, #1]
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ffe0:	2301      	movs	r3, #1
 800ffe2:	697a      	ldr	r2, [r7, #20]
 800ffe4:	f7ff fd10 	bl	800fa08 <disk_write>
 800ffe8:	4603      	mov	r3, r0
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d002      	beq.n	800fff4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800ffee:	2301      	movs	r3, #1
 800fff0:	73fb      	strb	r3, [r7, #15]
 800fff2:	e022      	b.n	801003a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	2200      	movs	r2, #0
 800fff8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fffe:	697a      	ldr	r2, [r7, #20]
 8010000:	1ad2      	subs	r2, r2, r3
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	69db      	ldr	r3, [r3, #28]
 8010006:	429a      	cmp	r2, r3
 8010008:	d217      	bcs.n	801003a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	789b      	ldrb	r3, [r3, #2]
 801000e:	613b      	str	r3, [r7, #16]
 8010010:	e010      	b.n	8010034 <sync_window+0x78>
					wsect += fs->fsize;
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	69db      	ldr	r3, [r3, #28]
 8010016:	697a      	ldr	r2, [r7, #20]
 8010018:	4413      	add	r3, r2
 801001a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	7858      	ldrb	r0, [r3, #1]
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010026:	2301      	movs	r3, #1
 8010028:	697a      	ldr	r2, [r7, #20]
 801002a:	f7ff fced 	bl	800fa08 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801002e:	693b      	ldr	r3, [r7, #16]
 8010030:	3b01      	subs	r3, #1
 8010032:	613b      	str	r3, [r7, #16]
 8010034:	693b      	ldr	r3, [r7, #16]
 8010036:	2b01      	cmp	r3, #1
 8010038:	d8eb      	bhi.n	8010012 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801003a:	7bfb      	ldrb	r3, [r7, #15]
}
 801003c:	4618      	mov	r0, r3
 801003e:	3718      	adds	r7, #24
 8010040:	46bd      	mov	sp, r7
 8010042:	bd80      	pop	{r7, pc}

08010044 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8010044:	b580      	push	{r7, lr}
 8010046:	b084      	sub	sp, #16
 8010048:	af00      	add	r7, sp, #0
 801004a:	6078      	str	r0, [r7, #4]
 801004c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801004e:	2300      	movs	r3, #0
 8010050:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010056:	683a      	ldr	r2, [r7, #0]
 8010058:	429a      	cmp	r2, r3
 801005a:	d01b      	beq.n	8010094 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801005c:	6878      	ldr	r0, [r7, #4]
 801005e:	f7ff ffad 	bl	800ffbc <sync_window>
 8010062:	4603      	mov	r3, r0
 8010064:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8010066:	7bfb      	ldrb	r3, [r7, #15]
 8010068:	2b00      	cmp	r3, #0
 801006a:	d113      	bne.n	8010094 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	7858      	ldrb	r0, [r3, #1]
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010076:	2301      	movs	r3, #1
 8010078:	683a      	ldr	r2, [r7, #0]
 801007a:	f7ff fca5 	bl	800f9c8 <disk_read>
 801007e:	4603      	mov	r3, r0
 8010080:	2b00      	cmp	r3, #0
 8010082:	d004      	beq.n	801008e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8010084:	f04f 33ff 	mov.w	r3, #4294967295
 8010088:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801008a:	2301      	movs	r3, #1
 801008c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	683a      	ldr	r2, [r7, #0]
 8010092:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8010094:	7bfb      	ldrb	r3, [r7, #15]
}
 8010096:	4618      	mov	r0, r3
 8010098:	3710      	adds	r7, #16
 801009a:	46bd      	mov	sp, r7
 801009c:	bd80      	pop	{r7, pc}
	...

080100a0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80100a0:	b580      	push	{r7, lr}
 80100a2:	b084      	sub	sp, #16
 80100a4:	af00      	add	r7, sp, #0
 80100a6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80100a8:	6878      	ldr	r0, [r7, #4]
 80100aa:	f7ff ff87 	bl	800ffbc <sync_window>
 80100ae:	4603      	mov	r3, r0
 80100b0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80100b2:	7bfb      	ldrb	r3, [r7, #15]
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d158      	bne.n	801016a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	781b      	ldrb	r3, [r3, #0]
 80100bc:	2b03      	cmp	r3, #3
 80100be:	d148      	bne.n	8010152 <sync_fs+0xb2>
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	791b      	ldrb	r3, [r3, #4]
 80100c4:	2b01      	cmp	r3, #1
 80100c6:	d144      	bne.n	8010152 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	3334      	adds	r3, #52	; 0x34
 80100cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80100d0:	2100      	movs	r1, #0
 80100d2:	4618      	mov	r0, r3
 80100d4:	f7ff fd79 	bl	800fbca <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	3334      	adds	r3, #52	; 0x34
 80100dc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80100e0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80100e4:	4618      	mov	r0, r3
 80100e6:	f7ff fd08 	bl	800fafa <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	3334      	adds	r3, #52	; 0x34
 80100ee:	4921      	ldr	r1, [pc, #132]	; (8010174 <sync_fs+0xd4>)
 80100f0:	4618      	mov	r0, r3
 80100f2:	f7ff fd1d 	bl	800fb30 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	3334      	adds	r3, #52	; 0x34
 80100fa:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80100fe:	491e      	ldr	r1, [pc, #120]	; (8010178 <sync_fs+0xd8>)
 8010100:	4618      	mov	r0, r3
 8010102:	f7ff fd15 	bl	800fb30 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	3334      	adds	r3, #52	; 0x34
 801010a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	695b      	ldr	r3, [r3, #20]
 8010112:	4619      	mov	r1, r3
 8010114:	4610      	mov	r0, r2
 8010116:	f7ff fd0b 	bl	800fb30 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	3334      	adds	r3, #52	; 0x34
 801011e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	691b      	ldr	r3, [r3, #16]
 8010126:	4619      	mov	r1, r3
 8010128:	4610      	mov	r0, r2
 801012a:	f7ff fd01 	bl	800fb30 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	6a1b      	ldr	r3, [r3, #32]
 8010132:	1c5a      	adds	r2, r3, #1
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	7858      	ldrb	r0, [r3, #1]
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010146:	2301      	movs	r3, #1
 8010148:	f7ff fc5e 	bl	800fa08 <disk_write>
			fs->fsi_flag = 0;
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	2200      	movs	r2, #0
 8010150:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	785b      	ldrb	r3, [r3, #1]
 8010156:	2200      	movs	r2, #0
 8010158:	2100      	movs	r1, #0
 801015a:	4618      	mov	r0, r3
 801015c:	f7ff fc74 	bl	800fa48 <disk_ioctl>
 8010160:	4603      	mov	r3, r0
 8010162:	2b00      	cmp	r3, #0
 8010164:	d001      	beq.n	801016a <sync_fs+0xca>
 8010166:	2301      	movs	r3, #1
 8010168:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801016a:	7bfb      	ldrb	r3, [r7, #15]
}
 801016c:	4618      	mov	r0, r3
 801016e:	3710      	adds	r7, #16
 8010170:	46bd      	mov	sp, r7
 8010172:	bd80      	pop	{r7, pc}
 8010174:	41615252 	.word	0x41615252
 8010178:	61417272 	.word	0x61417272

0801017c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801017c:	b480      	push	{r7}
 801017e:	b083      	sub	sp, #12
 8010180:	af00      	add	r7, sp, #0
 8010182:	6078      	str	r0, [r7, #4]
 8010184:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8010186:	683b      	ldr	r3, [r7, #0]
 8010188:	3b02      	subs	r3, #2
 801018a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	699b      	ldr	r3, [r3, #24]
 8010190:	3b02      	subs	r3, #2
 8010192:	683a      	ldr	r2, [r7, #0]
 8010194:	429a      	cmp	r2, r3
 8010196:	d301      	bcc.n	801019c <clust2sect+0x20>
 8010198:	2300      	movs	r3, #0
 801019a:	e008      	b.n	80101ae <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	895b      	ldrh	r3, [r3, #10]
 80101a0:	461a      	mov	r2, r3
 80101a2:	683b      	ldr	r3, [r7, #0]
 80101a4:	fb03 f202 	mul.w	r2, r3, r2
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101ac:	4413      	add	r3, r2
}
 80101ae:	4618      	mov	r0, r3
 80101b0:	370c      	adds	r7, #12
 80101b2:	46bd      	mov	sp, r7
 80101b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101b8:	4770      	bx	lr

080101ba <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80101ba:	b580      	push	{r7, lr}
 80101bc:	b086      	sub	sp, #24
 80101be:	af00      	add	r7, sp, #0
 80101c0:	6078      	str	r0, [r7, #4]
 80101c2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80101ca:	683b      	ldr	r3, [r7, #0]
 80101cc:	2b01      	cmp	r3, #1
 80101ce:	d904      	bls.n	80101da <get_fat+0x20>
 80101d0:	693b      	ldr	r3, [r7, #16]
 80101d2:	699b      	ldr	r3, [r3, #24]
 80101d4:	683a      	ldr	r2, [r7, #0]
 80101d6:	429a      	cmp	r2, r3
 80101d8:	d302      	bcc.n	80101e0 <get_fat+0x26>
		val = 1;	/* Internal error */
 80101da:	2301      	movs	r3, #1
 80101dc:	617b      	str	r3, [r7, #20]
 80101de:	e08c      	b.n	80102fa <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80101e0:	f04f 33ff 	mov.w	r3, #4294967295
 80101e4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80101e6:	693b      	ldr	r3, [r7, #16]
 80101e8:	781b      	ldrb	r3, [r3, #0]
 80101ea:	2b02      	cmp	r3, #2
 80101ec:	d045      	beq.n	801027a <get_fat+0xc0>
 80101ee:	2b03      	cmp	r3, #3
 80101f0:	d05d      	beq.n	80102ae <get_fat+0xf4>
 80101f2:	2b01      	cmp	r3, #1
 80101f4:	d177      	bne.n	80102e6 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80101f6:	683b      	ldr	r3, [r7, #0]
 80101f8:	60fb      	str	r3, [r7, #12]
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	085b      	lsrs	r3, r3, #1
 80101fe:	68fa      	ldr	r2, [r7, #12]
 8010200:	4413      	add	r3, r2
 8010202:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010204:	693b      	ldr	r3, [r7, #16]
 8010206:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	0a5b      	lsrs	r3, r3, #9
 801020c:	4413      	add	r3, r2
 801020e:	4619      	mov	r1, r3
 8010210:	6938      	ldr	r0, [r7, #16]
 8010212:	f7ff ff17 	bl	8010044 <move_window>
 8010216:	4603      	mov	r3, r0
 8010218:	2b00      	cmp	r3, #0
 801021a:	d167      	bne.n	80102ec <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	1c5a      	adds	r2, r3, #1
 8010220:	60fa      	str	r2, [r7, #12]
 8010222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010226:	693a      	ldr	r2, [r7, #16]
 8010228:	4413      	add	r3, r2
 801022a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801022e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010230:	693b      	ldr	r3, [r7, #16]
 8010232:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	0a5b      	lsrs	r3, r3, #9
 8010238:	4413      	add	r3, r2
 801023a:	4619      	mov	r1, r3
 801023c:	6938      	ldr	r0, [r7, #16]
 801023e:	f7ff ff01 	bl	8010044 <move_window>
 8010242:	4603      	mov	r3, r0
 8010244:	2b00      	cmp	r3, #0
 8010246:	d153      	bne.n	80102f0 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801024e:	693a      	ldr	r2, [r7, #16]
 8010250:	4413      	add	r3, r2
 8010252:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010256:	021b      	lsls	r3, r3, #8
 8010258:	461a      	mov	r2, r3
 801025a:	68bb      	ldr	r3, [r7, #8]
 801025c:	4313      	orrs	r3, r2
 801025e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8010260:	683b      	ldr	r3, [r7, #0]
 8010262:	f003 0301 	and.w	r3, r3, #1
 8010266:	2b00      	cmp	r3, #0
 8010268:	d002      	beq.n	8010270 <get_fat+0xb6>
 801026a:	68bb      	ldr	r3, [r7, #8]
 801026c:	091b      	lsrs	r3, r3, #4
 801026e:	e002      	b.n	8010276 <get_fat+0xbc>
 8010270:	68bb      	ldr	r3, [r7, #8]
 8010272:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010276:	617b      	str	r3, [r7, #20]
			break;
 8010278:	e03f      	b.n	80102fa <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801027a:	693b      	ldr	r3, [r7, #16]
 801027c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801027e:	683b      	ldr	r3, [r7, #0]
 8010280:	0a1b      	lsrs	r3, r3, #8
 8010282:	4413      	add	r3, r2
 8010284:	4619      	mov	r1, r3
 8010286:	6938      	ldr	r0, [r7, #16]
 8010288:	f7ff fedc 	bl	8010044 <move_window>
 801028c:	4603      	mov	r3, r0
 801028e:	2b00      	cmp	r3, #0
 8010290:	d130      	bne.n	80102f4 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8010292:	693b      	ldr	r3, [r7, #16]
 8010294:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010298:	683b      	ldr	r3, [r7, #0]
 801029a:	005b      	lsls	r3, r3, #1
 801029c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80102a0:	4413      	add	r3, r2
 80102a2:	4618      	mov	r0, r3
 80102a4:	f7ff fbee 	bl	800fa84 <ld_word>
 80102a8:	4603      	mov	r3, r0
 80102aa:	617b      	str	r3, [r7, #20]
			break;
 80102ac:	e025      	b.n	80102fa <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80102ae:	693b      	ldr	r3, [r7, #16]
 80102b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80102b2:	683b      	ldr	r3, [r7, #0]
 80102b4:	09db      	lsrs	r3, r3, #7
 80102b6:	4413      	add	r3, r2
 80102b8:	4619      	mov	r1, r3
 80102ba:	6938      	ldr	r0, [r7, #16]
 80102bc:	f7ff fec2 	bl	8010044 <move_window>
 80102c0:	4603      	mov	r3, r0
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d118      	bne.n	80102f8 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80102c6:	693b      	ldr	r3, [r7, #16]
 80102c8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80102cc:	683b      	ldr	r3, [r7, #0]
 80102ce:	009b      	lsls	r3, r3, #2
 80102d0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80102d4:	4413      	add	r3, r2
 80102d6:	4618      	mov	r0, r3
 80102d8:	f7ff fbec 	bl	800fab4 <ld_dword>
 80102dc:	4603      	mov	r3, r0
 80102de:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80102e2:	617b      	str	r3, [r7, #20]
			break;
 80102e4:	e009      	b.n	80102fa <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80102e6:	2301      	movs	r3, #1
 80102e8:	617b      	str	r3, [r7, #20]
 80102ea:	e006      	b.n	80102fa <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80102ec:	bf00      	nop
 80102ee:	e004      	b.n	80102fa <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80102f0:	bf00      	nop
 80102f2:	e002      	b.n	80102fa <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80102f4:	bf00      	nop
 80102f6:	e000      	b.n	80102fa <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80102f8:	bf00      	nop
		}
	}

	return val;
 80102fa:	697b      	ldr	r3, [r7, #20]
}
 80102fc:	4618      	mov	r0, r3
 80102fe:	3718      	adds	r7, #24
 8010300:	46bd      	mov	sp, r7
 8010302:	bd80      	pop	{r7, pc}

08010304 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8010304:	b590      	push	{r4, r7, lr}
 8010306:	b089      	sub	sp, #36	; 0x24
 8010308:	af00      	add	r7, sp, #0
 801030a:	60f8      	str	r0, [r7, #12]
 801030c:	60b9      	str	r1, [r7, #8]
 801030e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8010310:	2302      	movs	r3, #2
 8010312:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8010314:	68bb      	ldr	r3, [r7, #8]
 8010316:	2b01      	cmp	r3, #1
 8010318:	f240 80d6 	bls.w	80104c8 <put_fat+0x1c4>
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	699b      	ldr	r3, [r3, #24]
 8010320:	68ba      	ldr	r2, [r7, #8]
 8010322:	429a      	cmp	r2, r3
 8010324:	f080 80d0 	bcs.w	80104c8 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	781b      	ldrb	r3, [r3, #0]
 801032c:	2b02      	cmp	r3, #2
 801032e:	d073      	beq.n	8010418 <put_fat+0x114>
 8010330:	2b03      	cmp	r3, #3
 8010332:	f000 8091 	beq.w	8010458 <put_fat+0x154>
 8010336:	2b01      	cmp	r3, #1
 8010338:	f040 80c6 	bne.w	80104c8 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801033c:	68bb      	ldr	r3, [r7, #8]
 801033e:	61bb      	str	r3, [r7, #24]
 8010340:	69bb      	ldr	r3, [r7, #24]
 8010342:	085b      	lsrs	r3, r3, #1
 8010344:	69ba      	ldr	r2, [r7, #24]
 8010346:	4413      	add	r3, r2
 8010348:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801034e:	69bb      	ldr	r3, [r7, #24]
 8010350:	0a5b      	lsrs	r3, r3, #9
 8010352:	4413      	add	r3, r2
 8010354:	4619      	mov	r1, r3
 8010356:	68f8      	ldr	r0, [r7, #12]
 8010358:	f7ff fe74 	bl	8010044 <move_window>
 801035c:	4603      	mov	r3, r0
 801035e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010360:	7ffb      	ldrb	r3, [r7, #31]
 8010362:	2b00      	cmp	r3, #0
 8010364:	f040 80a9 	bne.w	80104ba <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801036e:	69bb      	ldr	r3, [r7, #24]
 8010370:	1c59      	adds	r1, r3, #1
 8010372:	61b9      	str	r1, [r7, #24]
 8010374:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010378:	4413      	add	r3, r2
 801037a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801037c:	68bb      	ldr	r3, [r7, #8]
 801037e:	f003 0301 	and.w	r3, r3, #1
 8010382:	2b00      	cmp	r3, #0
 8010384:	d00d      	beq.n	80103a2 <put_fat+0x9e>
 8010386:	697b      	ldr	r3, [r7, #20]
 8010388:	781b      	ldrb	r3, [r3, #0]
 801038a:	b25b      	sxtb	r3, r3
 801038c:	f003 030f 	and.w	r3, r3, #15
 8010390:	b25a      	sxtb	r2, r3
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	b2db      	uxtb	r3, r3
 8010396:	011b      	lsls	r3, r3, #4
 8010398:	b25b      	sxtb	r3, r3
 801039a:	4313      	orrs	r3, r2
 801039c:	b25b      	sxtb	r3, r3
 801039e:	b2db      	uxtb	r3, r3
 80103a0:	e001      	b.n	80103a6 <put_fat+0xa2>
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	b2db      	uxtb	r3, r3
 80103a6:	697a      	ldr	r2, [r7, #20]
 80103a8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	2201      	movs	r2, #1
 80103ae:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80103b4:	69bb      	ldr	r3, [r7, #24]
 80103b6:	0a5b      	lsrs	r3, r3, #9
 80103b8:	4413      	add	r3, r2
 80103ba:	4619      	mov	r1, r3
 80103bc:	68f8      	ldr	r0, [r7, #12]
 80103be:	f7ff fe41 	bl	8010044 <move_window>
 80103c2:	4603      	mov	r3, r0
 80103c4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80103c6:	7ffb      	ldrb	r3, [r7, #31]
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d178      	bne.n	80104be <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80103d2:	69bb      	ldr	r3, [r7, #24]
 80103d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80103d8:	4413      	add	r3, r2
 80103da:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80103dc:	68bb      	ldr	r3, [r7, #8]
 80103de:	f003 0301 	and.w	r3, r3, #1
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d003      	beq.n	80103ee <put_fat+0xea>
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	091b      	lsrs	r3, r3, #4
 80103ea:	b2db      	uxtb	r3, r3
 80103ec:	e00e      	b.n	801040c <put_fat+0x108>
 80103ee:	697b      	ldr	r3, [r7, #20]
 80103f0:	781b      	ldrb	r3, [r3, #0]
 80103f2:	b25b      	sxtb	r3, r3
 80103f4:	f023 030f 	bic.w	r3, r3, #15
 80103f8:	b25a      	sxtb	r2, r3
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	0a1b      	lsrs	r3, r3, #8
 80103fe:	b25b      	sxtb	r3, r3
 8010400:	f003 030f 	and.w	r3, r3, #15
 8010404:	b25b      	sxtb	r3, r3
 8010406:	4313      	orrs	r3, r2
 8010408:	b25b      	sxtb	r3, r3
 801040a:	b2db      	uxtb	r3, r3
 801040c:	697a      	ldr	r2, [r7, #20]
 801040e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	2201      	movs	r2, #1
 8010414:	70da      	strb	r2, [r3, #3]
			break;
 8010416:	e057      	b.n	80104c8 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801041c:	68bb      	ldr	r3, [r7, #8]
 801041e:	0a1b      	lsrs	r3, r3, #8
 8010420:	4413      	add	r3, r2
 8010422:	4619      	mov	r1, r3
 8010424:	68f8      	ldr	r0, [r7, #12]
 8010426:	f7ff fe0d 	bl	8010044 <move_window>
 801042a:	4603      	mov	r3, r0
 801042c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801042e:	7ffb      	ldrb	r3, [r7, #31]
 8010430:	2b00      	cmp	r3, #0
 8010432:	d146      	bne.n	80104c2 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801043a:	68bb      	ldr	r3, [r7, #8]
 801043c:	005b      	lsls	r3, r3, #1
 801043e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8010442:	4413      	add	r3, r2
 8010444:	687a      	ldr	r2, [r7, #4]
 8010446:	b292      	uxth	r2, r2
 8010448:	4611      	mov	r1, r2
 801044a:	4618      	mov	r0, r3
 801044c:	f7ff fb55 	bl	800fafa <st_word>
			fs->wflag = 1;
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	2201      	movs	r2, #1
 8010454:	70da      	strb	r2, [r3, #3]
			break;
 8010456:	e037      	b.n	80104c8 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801045c:	68bb      	ldr	r3, [r7, #8]
 801045e:	09db      	lsrs	r3, r3, #7
 8010460:	4413      	add	r3, r2
 8010462:	4619      	mov	r1, r3
 8010464:	68f8      	ldr	r0, [r7, #12]
 8010466:	f7ff fded 	bl	8010044 <move_window>
 801046a:	4603      	mov	r3, r0
 801046c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801046e:	7ffb      	ldrb	r3, [r7, #31]
 8010470:	2b00      	cmp	r3, #0
 8010472:	d128      	bne.n	80104c6 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010480:	68bb      	ldr	r3, [r7, #8]
 8010482:	009b      	lsls	r3, r3, #2
 8010484:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8010488:	4413      	add	r3, r2
 801048a:	4618      	mov	r0, r3
 801048c:	f7ff fb12 	bl	800fab4 <ld_dword>
 8010490:	4603      	mov	r3, r0
 8010492:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8010496:	4323      	orrs	r3, r4
 8010498:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80104a0:	68bb      	ldr	r3, [r7, #8]
 80104a2:	009b      	lsls	r3, r3, #2
 80104a4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80104a8:	4413      	add	r3, r2
 80104aa:	6879      	ldr	r1, [r7, #4]
 80104ac:	4618      	mov	r0, r3
 80104ae:	f7ff fb3f 	bl	800fb30 <st_dword>
			fs->wflag = 1;
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	2201      	movs	r2, #1
 80104b6:	70da      	strb	r2, [r3, #3]
			break;
 80104b8:	e006      	b.n	80104c8 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80104ba:	bf00      	nop
 80104bc:	e004      	b.n	80104c8 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80104be:	bf00      	nop
 80104c0:	e002      	b.n	80104c8 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80104c2:	bf00      	nop
 80104c4:	e000      	b.n	80104c8 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80104c6:	bf00      	nop
		}
	}
	return res;
 80104c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80104ca:	4618      	mov	r0, r3
 80104cc:	3724      	adds	r7, #36	; 0x24
 80104ce:	46bd      	mov	sp, r7
 80104d0:	bd90      	pop	{r4, r7, pc}

080104d2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80104d2:	b580      	push	{r7, lr}
 80104d4:	b088      	sub	sp, #32
 80104d6:	af00      	add	r7, sp, #0
 80104d8:	60f8      	str	r0, [r7, #12]
 80104da:	60b9      	str	r1, [r7, #8]
 80104dc:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80104de:	2300      	movs	r3, #0
 80104e0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80104e8:	68bb      	ldr	r3, [r7, #8]
 80104ea:	2b01      	cmp	r3, #1
 80104ec:	d904      	bls.n	80104f8 <remove_chain+0x26>
 80104ee:	69bb      	ldr	r3, [r7, #24]
 80104f0:	699b      	ldr	r3, [r3, #24]
 80104f2:	68ba      	ldr	r2, [r7, #8]
 80104f4:	429a      	cmp	r2, r3
 80104f6:	d301      	bcc.n	80104fc <remove_chain+0x2a>
 80104f8:	2302      	movs	r3, #2
 80104fa:	e04b      	b.n	8010594 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d00c      	beq.n	801051c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8010502:	f04f 32ff 	mov.w	r2, #4294967295
 8010506:	6879      	ldr	r1, [r7, #4]
 8010508:	69b8      	ldr	r0, [r7, #24]
 801050a:	f7ff fefb 	bl	8010304 <put_fat>
 801050e:	4603      	mov	r3, r0
 8010510:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8010512:	7ffb      	ldrb	r3, [r7, #31]
 8010514:	2b00      	cmp	r3, #0
 8010516:	d001      	beq.n	801051c <remove_chain+0x4a>
 8010518:	7ffb      	ldrb	r3, [r7, #31]
 801051a:	e03b      	b.n	8010594 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801051c:	68b9      	ldr	r1, [r7, #8]
 801051e:	68f8      	ldr	r0, [r7, #12]
 8010520:	f7ff fe4b 	bl	80101ba <get_fat>
 8010524:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8010526:	697b      	ldr	r3, [r7, #20]
 8010528:	2b00      	cmp	r3, #0
 801052a:	d031      	beq.n	8010590 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801052c:	697b      	ldr	r3, [r7, #20]
 801052e:	2b01      	cmp	r3, #1
 8010530:	d101      	bne.n	8010536 <remove_chain+0x64>
 8010532:	2302      	movs	r3, #2
 8010534:	e02e      	b.n	8010594 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8010536:	697b      	ldr	r3, [r7, #20]
 8010538:	f1b3 3fff 	cmp.w	r3, #4294967295
 801053c:	d101      	bne.n	8010542 <remove_chain+0x70>
 801053e:	2301      	movs	r3, #1
 8010540:	e028      	b.n	8010594 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8010542:	2200      	movs	r2, #0
 8010544:	68b9      	ldr	r1, [r7, #8]
 8010546:	69b8      	ldr	r0, [r7, #24]
 8010548:	f7ff fedc 	bl	8010304 <put_fat>
 801054c:	4603      	mov	r3, r0
 801054e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8010550:	7ffb      	ldrb	r3, [r7, #31]
 8010552:	2b00      	cmp	r3, #0
 8010554:	d001      	beq.n	801055a <remove_chain+0x88>
 8010556:	7ffb      	ldrb	r3, [r7, #31]
 8010558:	e01c      	b.n	8010594 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801055a:	69bb      	ldr	r3, [r7, #24]
 801055c:	695a      	ldr	r2, [r3, #20]
 801055e:	69bb      	ldr	r3, [r7, #24]
 8010560:	699b      	ldr	r3, [r3, #24]
 8010562:	3b02      	subs	r3, #2
 8010564:	429a      	cmp	r2, r3
 8010566:	d20b      	bcs.n	8010580 <remove_chain+0xae>
			fs->free_clst++;
 8010568:	69bb      	ldr	r3, [r7, #24]
 801056a:	695b      	ldr	r3, [r3, #20]
 801056c:	1c5a      	adds	r2, r3, #1
 801056e:	69bb      	ldr	r3, [r7, #24]
 8010570:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8010572:	69bb      	ldr	r3, [r7, #24]
 8010574:	791b      	ldrb	r3, [r3, #4]
 8010576:	f043 0301 	orr.w	r3, r3, #1
 801057a:	b2da      	uxtb	r2, r3
 801057c:	69bb      	ldr	r3, [r7, #24]
 801057e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8010580:	697b      	ldr	r3, [r7, #20]
 8010582:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8010584:	69bb      	ldr	r3, [r7, #24]
 8010586:	699b      	ldr	r3, [r3, #24]
 8010588:	68ba      	ldr	r2, [r7, #8]
 801058a:	429a      	cmp	r2, r3
 801058c:	d3c6      	bcc.n	801051c <remove_chain+0x4a>
 801058e:	e000      	b.n	8010592 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8010590:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8010592:	2300      	movs	r3, #0
}
 8010594:	4618      	mov	r0, r3
 8010596:	3720      	adds	r7, #32
 8010598:	46bd      	mov	sp, r7
 801059a:	bd80      	pop	{r7, pc}

0801059c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801059c:	b580      	push	{r7, lr}
 801059e:	b088      	sub	sp, #32
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	6078      	str	r0, [r7, #4]
 80105a4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80105ac:	683b      	ldr	r3, [r7, #0]
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d10d      	bne.n	80105ce <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80105b2:	693b      	ldr	r3, [r7, #16]
 80105b4:	691b      	ldr	r3, [r3, #16]
 80105b6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80105b8:	69bb      	ldr	r3, [r7, #24]
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d004      	beq.n	80105c8 <create_chain+0x2c>
 80105be:	693b      	ldr	r3, [r7, #16]
 80105c0:	699b      	ldr	r3, [r3, #24]
 80105c2:	69ba      	ldr	r2, [r7, #24]
 80105c4:	429a      	cmp	r2, r3
 80105c6:	d31b      	bcc.n	8010600 <create_chain+0x64>
 80105c8:	2301      	movs	r3, #1
 80105ca:	61bb      	str	r3, [r7, #24]
 80105cc:	e018      	b.n	8010600 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80105ce:	6839      	ldr	r1, [r7, #0]
 80105d0:	6878      	ldr	r0, [r7, #4]
 80105d2:	f7ff fdf2 	bl	80101ba <get_fat>
 80105d6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	2b01      	cmp	r3, #1
 80105dc:	d801      	bhi.n	80105e2 <create_chain+0x46>
 80105de:	2301      	movs	r3, #1
 80105e0:	e070      	b.n	80106c4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105e8:	d101      	bne.n	80105ee <create_chain+0x52>
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	e06a      	b.n	80106c4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80105ee:	693b      	ldr	r3, [r7, #16]
 80105f0:	699b      	ldr	r3, [r3, #24]
 80105f2:	68fa      	ldr	r2, [r7, #12]
 80105f4:	429a      	cmp	r2, r3
 80105f6:	d201      	bcs.n	80105fc <create_chain+0x60>
 80105f8:	68fb      	ldr	r3, [r7, #12]
 80105fa:	e063      	b.n	80106c4 <create_chain+0x128>
		scl = clst;
 80105fc:	683b      	ldr	r3, [r7, #0]
 80105fe:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8010600:	69bb      	ldr	r3, [r7, #24]
 8010602:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8010604:	69fb      	ldr	r3, [r7, #28]
 8010606:	3301      	adds	r3, #1
 8010608:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801060a:	693b      	ldr	r3, [r7, #16]
 801060c:	699b      	ldr	r3, [r3, #24]
 801060e:	69fa      	ldr	r2, [r7, #28]
 8010610:	429a      	cmp	r2, r3
 8010612:	d307      	bcc.n	8010624 <create_chain+0x88>
				ncl = 2;
 8010614:	2302      	movs	r3, #2
 8010616:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8010618:	69fa      	ldr	r2, [r7, #28]
 801061a:	69bb      	ldr	r3, [r7, #24]
 801061c:	429a      	cmp	r2, r3
 801061e:	d901      	bls.n	8010624 <create_chain+0x88>
 8010620:	2300      	movs	r3, #0
 8010622:	e04f      	b.n	80106c4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8010624:	69f9      	ldr	r1, [r7, #28]
 8010626:	6878      	ldr	r0, [r7, #4]
 8010628:	f7ff fdc7 	bl	80101ba <get_fat>
 801062c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	2b00      	cmp	r3, #0
 8010632:	d00e      	beq.n	8010652 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	2b01      	cmp	r3, #1
 8010638:	d003      	beq.n	8010642 <create_chain+0xa6>
 801063a:	68fb      	ldr	r3, [r7, #12]
 801063c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010640:	d101      	bne.n	8010646 <create_chain+0xaa>
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	e03e      	b.n	80106c4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8010646:	69fa      	ldr	r2, [r7, #28]
 8010648:	69bb      	ldr	r3, [r7, #24]
 801064a:	429a      	cmp	r2, r3
 801064c:	d1da      	bne.n	8010604 <create_chain+0x68>
 801064e:	2300      	movs	r3, #0
 8010650:	e038      	b.n	80106c4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8010652:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8010654:	f04f 32ff 	mov.w	r2, #4294967295
 8010658:	69f9      	ldr	r1, [r7, #28]
 801065a:	6938      	ldr	r0, [r7, #16]
 801065c:	f7ff fe52 	bl	8010304 <put_fat>
 8010660:	4603      	mov	r3, r0
 8010662:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8010664:	7dfb      	ldrb	r3, [r7, #23]
 8010666:	2b00      	cmp	r3, #0
 8010668:	d109      	bne.n	801067e <create_chain+0xe2>
 801066a:	683b      	ldr	r3, [r7, #0]
 801066c:	2b00      	cmp	r3, #0
 801066e:	d006      	beq.n	801067e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8010670:	69fa      	ldr	r2, [r7, #28]
 8010672:	6839      	ldr	r1, [r7, #0]
 8010674:	6938      	ldr	r0, [r7, #16]
 8010676:	f7ff fe45 	bl	8010304 <put_fat>
 801067a:	4603      	mov	r3, r0
 801067c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801067e:	7dfb      	ldrb	r3, [r7, #23]
 8010680:	2b00      	cmp	r3, #0
 8010682:	d116      	bne.n	80106b2 <create_chain+0x116>
		fs->last_clst = ncl;
 8010684:	693b      	ldr	r3, [r7, #16]
 8010686:	69fa      	ldr	r2, [r7, #28]
 8010688:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801068a:	693b      	ldr	r3, [r7, #16]
 801068c:	695a      	ldr	r2, [r3, #20]
 801068e:	693b      	ldr	r3, [r7, #16]
 8010690:	699b      	ldr	r3, [r3, #24]
 8010692:	3b02      	subs	r3, #2
 8010694:	429a      	cmp	r2, r3
 8010696:	d804      	bhi.n	80106a2 <create_chain+0x106>
 8010698:	693b      	ldr	r3, [r7, #16]
 801069a:	695b      	ldr	r3, [r3, #20]
 801069c:	1e5a      	subs	r2, r3, #1
 801069e:	693b      	ldr	r3, [r7, #16]
 80106a0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80106a2:	693b      	ldr	r3, [r7, #16]
 80106a4:	791b      	ldrb	r3, [r3, #4]
 80106a6:	f043 0301 	orr.w	r3, r3, #1
 80106aa:	b2da      	uxtb	r2, r3
 80106ac:	693b      	ldr	r3, [r7, #16]
 80106ae:	711a      	strb	r2, [r3, #4]
 80106b0:	e007      	b.n	80106c2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80106b2:	7dfb      	ldrb	r3, [r7, #23]
 80106b4:	2b01      	cmp	r3, #1
 80106b6:	d102      	bne.n	80106be <create_chain+0x122>
 80106b8:	f04f 33ff 	mov.w	r3, #4294967295
 80106bc:	e000      	b.n	80106c0 <create_chain+0x124>
 80106be:	2301      	movs	r3, #1
 80106c0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80106c2:	69fb      	ldr	r3, [r7, #28]
}
 80106c4:	4618      	mov	r0, r3
 80106c6:	3720      	adds	r7, #32
 80106c8:	46bd      	mov	sp, r7
 80106ca:	bd80      	pop	{r7, pc}

080106cc <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80106cc:	b480      	push	{r7}
 80106ce:	b087      	sub	sp, #28
 80106d0:	af00      	add	r7, sp, #0
 80106d2:	6078      	str	r0, [r7, #4]
 80106d4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106e0:	3304      	adds	r3, #4
 80106e2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80106e4:	683b      	ldr	r3, [r7, #0]
 80106e6:	0a5b      	lsrs	r3, r3, #9
 80106e8:	68fa      	ldr	r2, [r7, #12]
 80106ea:	8952      	ldrh	r2, [r2, #10]
 80106ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80106f0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80106f2:	693b      	ldr	r3, [r7, #16]
 80106f4:	1d1a      	adds	r2, r3, #4
 80106f6:	613a      	str	r2, [r7, #16]
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80106fc:	68bb      	ldr	r3, [r7, #8]
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d101      	bne.n	8010706 <clmt_clust+0x3a>
 8010702:	2300      	movs	r3, #0
 8010704:	e010      	b.n	8010728 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8010706:	697a      	ldr	r2, [r7, #20]
 8010708:	68bb      	ldr	r3, [r7, #8]
 801070a:	429a      	cmp	r2, r3
 801070c:	d307      	bcc.n	801071e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 801070e:	697a      	ldr	r2, [r7, #20]
 8010710:	68bb      	ldr	r3, [r7, #8]
 8010712:	1ad3      	subs	r3, r2, r3
 8010714:	617b      	str	r3, [r7, #20]
 8010716:	693b      	ldr	r3, [r7, #16]
 8010718:	3304      	adds	r3, #4
 801071a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801071c:	e7e9      	b.n	80106f2 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 801071e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8010720:	693b      	ldr	r3, [r7, #16]
 8010722:	681a      	ldr	r2, [r3, #0]
 8010724:	697b      	ldr	r3, [r7, #20]
 8010726:	4413      	add	r3, r2
}
 8010728:	4618      	mov	r0, r3
 801072a:	371c      	adds	r7, #28
 801072c:	46bd      	mov	sp, r7
 801072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010732:	4770      	bx	lr

08010734 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8010734:	b580      	push	{r7, lr}
 8010736:	b086      	sub	sp, #24
 8010738:	af00      	add	r7, sp, #0
 801073a:	6078      	str	r0, [r7, #4]
 801073c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8010744:	683b      	ldr	r3, [r7, #0]
 8010746:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801074a:	d204      	bcs.n	8010756 <dir_sdi+0x22>
 801074c:	683b      	ldr	r3, [r7, #0]
 801074e:	f003 031f 	and.w	r3, r3, #31
 8010752:	2b00      	cmp	r3, #0
 8010754:	d001      	beq.n	801075a <dir_sdi+0x26>
		return FR_INT_ERR;
 8010756:	2302      	movs	r3, #2
 8010758:	e063      	b.n	8010822 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	683a      	ldr	r2, [r7, #0]
 801075e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	689b      	ldr	r3, [r3, #8]
 8010764:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8010766:	697b      	ldr	r3, [r7, #20]
 8010768:	2b00      	cmp	r3, #0
 801076a:	d106      	bne.n	801077a <dir_sdi+0x46>
 801076c:	693b      	ldr	r3, [r7, #16]
 801076e:	781b      	ldrb	r3, [r3, #0]
 8010770:	2b02      	cmp	r3, #2
 8010772:	d902      	bls.n	801077a <dir_sdi+0x46>
		clst = fs->dirbase;
 8010774:	693b      	ldr	r3, [r7, #16]
 8010776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010778:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801077a:	697b      	ldr	r3, [r7, #20]
 801077c:	2b00      	cmp	r3, #0
 801077e:	d10c      	bne.n	801079a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8010780:	683b      	ldr	r3, [r7, #0]
 8010782:	095b      	lsrs	r3, r3, #5
 8010784:	693a      	ldr	r2, [r7, #16]
 8010786:	8912      	ldrh	r2, [r2, #8]
 8010788:	4293      	cmp	r3, r2
 801078a:	d301      	bcc.n	8010790 <dir_sdi+0x5c>
 801078c:	2302      	movs	r3, #2
 801078e:	e048      	b.n	8010822 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8010790:	693b      	ldr	r3, [r7, #16]
 8010792:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	61da      	str	r2, [r3, #28]
 8010798:	e029      	b.n	80107ee <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801079a:	693b      	ldr	r3, [r7, #16]
 801079c:	895b      	ldrh	r3, [r3, #10]
 801079e:	025b      	lsls	r3, r3, #9
 80107a0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80107a2:	e019      	b.n	80107d8 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	6979      	ldr	r1, [r7, #20]
 80107a8:	4618      	mov	r0, r3
 80107aa:	f7ff fd06 	bl	80101ba <get_fat>
 80107ae:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80107b0:	697b      	ldr	r3, [r7, #20]
 80107b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107b6:	d101      	bne.n	80107bc <dir_sdi+0x88>
 80107b8:	2301      	movs	r3, #1
 80107ba:	e032      	b.n	8010822 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80107bc:	697b      	ldr	r3, [r7, #20]
 80107be:	2b01      	cmp	r3, #1
 80107c0:	d904      	bls.n	80107cc <dir_sdi+0x98>
 80107c2:	693b      	ldr	r3, [r7, #16]
 80107c4:	699b      	ldr	r3, [r3, #24]
 80107c6:	697a      	ldr	r2, [r7, #20]
 80107c8:	429a      	cmp	r2, r3
 80107ca:	d301      	bcc.n	80107d0 <dir_sdi+0x9c>
 80107cc:	2302      	movs	r3, #2
 80107ce:	e028      	b.n	8010822 <dir_sdi+0xee>
			ofs -= csz;
 80107d0:	683a      	ldr	r2, [r7, #0]
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	1ad3      	subs	r3, r2, r3
 80107d6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80107d8:	683a      	ldr	r2, [r7, #0]
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	429a      	cmp	r2, r3
 80107de:	d2e1      	bcs.n	80107a4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80107e0:	6979      	ldr	r1, [r7, #20]
 80107e2:	6938      	ldr	r0, [r7, #16]
 80107e4:	f7ff fcca 	bl	801017c <clust2sect>
 80107e8:	4602      	mov	r2, r0
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	697a      	ldr	r2, [r7, #20]
 80107f2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	69db      	ldr	r3, [r3, #28]
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d101      	bne.n	8010800 <dir_sdi+0xcc>
 80107fc:	2302      	movs	r3, #2
 80107fe:	e010      	b.n	8010822 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	69da      	ldr	r2, [r3, #28]
 8010804:	683b      	ldr	r3, [r7, #0]
 8010806:	0a5b      	lsrs	r3, r3, #9
 8010808:	441a      	add	r2, r3
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801080e:	693b      	ldr	r3, [r7, #16]
 8010810:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010814:	683b      	ldr	r3, [r7, #0]
 8010816:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801081a:	441a      	add	r2, r3
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010820:	2300      	movs	r3, #0
}
 8010822:	4618      	mov	r0, r3
 8010824:	3718      	adds	r7, #24
 8010826:	46bd      	mov	sp, r7
 8010828:	bd80      	pop	{r7, pc}

0801082a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801082a:	b580      	push	{r7, lr}
 801082c:	b086      	sub	sp, #24
 801082e:	af00      	add	r7, sp, #0
 8010830:	6078      	str	r0, [r7, #4]
 8010832:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	695b      	ldr	r3, [r3, #20]
 801083e:	3320      	adds	r3, #32
 8010840:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	69db      	ldr	r3, [r3, #28]
 8010846:	2b00      	cmp	r3, #0
 8010848:	d003      	beq.n	8010852 <dir_next+0x28>
 801084a:	68bb      	ldr	r3, [r7, #8]
 801084c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010850:	d301      	bcc.n	8010856 <dir_next+0x2c>
 8010852:	2304      	movs	r3, #4
 8010854:	e0aa      	b.n	80109ac <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8010856:	68bb      	ldr	r3, [r7, #8]
 8010858:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801085c:	2b00      	cmp	r3, #0
 801085e:	f040 8098 	bne.w	8010992 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	69db      	ldr	r3, [r3, #28]
 8010866:	1c5a      	adds	r2, r3, #1
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	699b      	ldr	r3, [r3, #24]
 8010870:	2b00      	cmp	r3, #0
 8010872:	d10b      	bne.n	801088c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8010874:	68bb      	ldr	r3, [r7, #8]
 8010876:	095b      	lsrs	r3, r3, #5
 8010878:	68fa      	ldr	r2, [r7, #12]
 801087a:	8912      	ldrh	r2, [r2, #8]
 801087c:	4293      	cmp	r3, r2
 801087e:	f0c0 8088 	bcc.w	8010992 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	2200      	movs	r2, #0
 8010886:	61da      	str	r2, [r3, #28]
 8010888:	2304      	movs	r3, #4
 801088a:	e08f      	b.n	80109ac <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801088c:	68bb      	ldr	r3, [r7, #8]
 801088e:	0a5b      	lsrs	r3, r3, #9
 8010890:	68fa      	ldr	r2, [r7, #12]
 8010892:	8952      	ldrh	r2, [r2, #10]
 8010894:	3a01      	subs	r2, #1
 8010896:	4013      	ands	r3, r2
 8010898:	2b00      	cmp	r3, #0
 801089a:	d17a      	bne.n	8010992 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801089c:	687a      	ldr	r2, [r7, #4]
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	699b      	ldr	r3, [r3, #24]
 80108a2:	4619      	mov	r1, r3
 80108a4:	4610      	mov	r0, r2
 80108a6:	f7ff fc88 	bl	80101ba <get_fat>
 80108aa:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80108ac:	697b      	ldr	r3, [r7, #20]
 80108ae:	2b01      	cmp	r3, #1
 80108b0:	d801      	bhi.n	80108b6 <dir_next+0x8c>
 80108b2:	2302      	movs	r3, #2
 80108b4:	e07a      	b.n	80109ac <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80108b6:	697b      	ldr	r3, [r7, #20]
 80108b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108bc:	d101      	bne.n	80108c2 <dir_next+0x98>
 80108be:	2301      	movs	r3, #1
 80108c0:	e074      	b.n	80109ac <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	699b      	ldr	r3, [r3, #24]
 80108c6:	697a      	ldr	r2, [r7, #20]
 80108c8:	429a      	cmp	r2, r3
 80108ca:	d358      	bcc.n	801097e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80108cc:	683b      	ldr	r3, [r7, #0]
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d104      	bne.n	80108dc <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	2200      	movs	r2, #0
 80108d6:	61da      	str	r2, [r3, #28]
 80108d8:	2304      	movs	r3, #4
 80108da:	e067      	b.n	80109ac <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80108dc:	687a      	ldr	r2, [r7, #4]
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	699b      	ldr	r3, [r3, #24]
 80108e2:	4619      	mov	r1, r3
 80108e4:	4610      	mov	r0, r2
 80108e6:	f7ff fe59 	bl	801059c <create_chain>
 80108ea:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80108ec:	697b      	ldr	r3, [r7, #20]
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d101      	bne.n	80108f6 <dir_next+0xcc>
 80108f2:	2307      	movs	r3, #7
 80108f4:	e05a      	b.n	80109ac <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80108f6:	697b      	ldr	r3, [r7, #20]
 80108f8:	2b01      	cmp	r3, #1
 80108fa:	d101      	bne.n	8010900 <dir_next+0xd6>
 80108fc:	2302      	movs	r3, #2
 80108fe:	e055      	b.n	80109ac <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010900:	697b      	ldr	r3, [r7, #20]
 8010902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010906:	d101      	bne.n	801090c <dir_next+0xe2>
 8010908:	2301      	movs	r3, #1
 801090a:	e04f      	b.n	80109ac <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801090c:	68f8      	ldr	r0, [r7, #12]
 801090e:	f7ff fb55 	bl	800ffbc <sync_window>
 8010912:	4603      	mov	r3, r0
 8010914:	2b00      	cmp	r3, #0
 8010916:	d001      	beq.n	801091c <dir_next+0xf2>
 8010918:	2301      	movs	r3, #1
 801091a:	e047      	b.n	80109ac <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	3334      	adds	r3, #52	; 0x34
 8010920:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010924:	2100      	movs	r1, #0
 8010926:	4618      	mov	r0, r3
 8010928:	f7ff f94f 	bl	800fbca <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801092c:	2300      	movs	r3, #0
 801092e:	613b      	str	r3, [r7, #16]
 8010930:	6979      	ldr	r1, [r7, #20]
 8010932:	68f8      	ldr	r0, [r7, #12]
 8010934:	f7ff fc22 	bl	801017c <clust2sect>
 8010938:	4602      	mov	r2, r0
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	631a      	str	r2, [r3, #48]	; 0x30
 801093e:	e012      	b.n	8010966 <dir_next+0x13c>
						fs->wflag = 1;
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	2201      	movs	r2, #1
 8010944:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8010946:	68f8      	ldr	r0, [r7, #12]
 8010948:	f7ff fb38 	bl	800ffbc <sync_window>
 801094c:	4603      	mov	r3, r0
 801094e:	2b00      	cmp	r3, #0
 8010950:	d001      	beq.n	8010956 <dir_next+0x12c>
 8010952:	2301      	movs	r3, #1
 8010954:	e02a      	b.n	80109ac <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010956:	693b      	ldr	r3, [r7, #16]
 8010958:	3301      	adds	r3, #1
 801095a:	613b      	str	r3, [r7, #16]
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010960:	1c5a      	adds	r2, r3, #1
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	631a      	str	r2, [r3, #48]	; 0x30
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	895b      	ldrh	r3, [r3, #10]
 801096a:	461a      	mov	r2, r3
 801096c:	693b      	ldr	r3, [r7, #16]
 801096e:	4293      	cmp	r3, r2
 8010970:	d3e6      	bcc.n	8010940 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010976:	693b      	ldr	r3, [r7, #16]
 8010978:	1ad2      	subs	r2, r2, r3
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	697a      	ldr	r2, [r7, #20]
 8010982:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8010984:	6979      	ldr	r1, [r7, #20]
 8010986:	68f8      	ldr	r0, [r7, #12]
 8010988:	f7ff fbf8 	bl	801017c <clust2sect>
 801098c:	4602      	mov	r2, r0
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	68ba      	ldr	r2, [r7, #8]
 8010996:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801099e:	68bb      	ldr	r3, [r7, #8]
 80109a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80109a4:	441a      	add	r2, r3
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80109aa:	2300      	movs	r3, #0
}
 80109ac:	4618      	mov	r0, r3
 80109ae:	3718      	adds	r7, #24
 80109b0:	46bd      	mov	sp, r7
 80109b2:	bd80      	pop	{r7, pc}

080109b4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80109b4:	b580      	push	{r7, lr}
 80109b6:	b086      	sub	sp, #24
 80109b8:	af00      	add	r7, sp, #0
 80109ba:	6078      	str	r0, [r7, #4]
 80109bc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80109c4:	2100      	movs	r1, #0
 80109c6:	6878      	ldr	r0, [r7, #4]
 80109c8:	f7ff feb4 	bl	8010734 <dir_sdi>
 80109cc:	4603      	mov	r3, r0
 80109ce:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80109d0:	7dfb      	ldrb	r3, [r7, #23]
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d12b      	bne.n	8010a2e <dir_alloc+0x7a>
		n = 0;
 80109d6:	2300      	movs	r3, #0
 80109d8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	69db      	ldr	r3, [r3, #28]
 80109de:	4619      	mov	r1, r3
 80109e0:	68f8      	ldr	r0, [r7, #12]
 80109e2:	f7ff fb2f 	bl	8010044 <move_window>
 80109e6:	4603      	mov	r3, r0
 80109e8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80109ea:	7dfb      	ldrb	r3, [r7, #23]
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d11d      	bne.n	8010a2c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	6a1b      	ldr	r3, [r3, #32]
 80109f4:	781b      	ldrb	r3, [r3, #0]
 80109f6:	2be5      	cmp	r3, #229	; 0xe5
 80109f8:	d004      	beq.n	8010a04 <dir_alloc+0x50>
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	6a1b      	ldr	r3, [r3, #32]
 80109fe:	781b      	ldrb	r3, [r3, #0]
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d107      	bne.n	8010a14 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8010a04:	693b      	ldr	r3, [r7, #16]
 8010a06:	3301      	adds	r3, #1
 8010a08:	613b      	str	r3, [r7, #16]
 8010a0a:	693a      	ldr	r2, [r7, #16]
 8010a0c:	683b      	ldr	r3, [r7, #0]
 8010a0e:	429a      	cmp	r2, r3
 8010a10:	d102      	bne.n	8010a18 <dir_alloc+0x64>
 8010a12:	e00c      	b.n	8010a2e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8010a14:	2300      	movs	r3, #0
 8010a16:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8010a18:	2101      	movs	r1, #1
 8010a1a:	6878      	ldr	r0, [r7, #4]
 8010a1c:	f7ff ff05 	bl	801082a <dir_next>
 8010a20:	4603      	mov	r3, r0
 8010a22:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8010a24:	7dfb      	ldrb	r3, [r7, #23]
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d0d7      	beq.n	80109da <dir_alloc+0x26>
 8010a2a:	e000      	b.n	8010a2e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8010a2c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8010a2e:	7dfb      	ldrb	r3, [r7, #23]
 8010a30:	2b04      	cmp	r3, #4
 8010a32:	d101      	bne.n	8010a38 <dir_alloc+0x84>
 8010a34:	2307      	movs	r3, #7
 8010a36:	75fb      	strb	r3, [r7, #23]
	return res;
 8010a38:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a3a:	4618      	mov	r0, r3
 8010a3c:	3718      	adds	r7, #24
 8010a3e:	46bd      	mov	sp, r7
 8010a40:	bd80      	pop	{r7, pc}

08010a42 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8010a42:	b580      	push	{r7, lr}
 8010a44:	b084      	sub	sp, #16
 8010a46:	af00      	add	r7, sp, #0
 8010a48:	6078      	str	r0, [r7, #4]
 8010a4a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8010a4c:	683b      	ldr	r3, [r7, #0]
 8010a4e:	331a      	adds	r3, #26
 8010a50:	4618      	mov	r0, r3
 8010a52:	f7ff f817 	bl	800fa84 <ld_word>
 8010a56:	4603      	mov	r3, r0
 8010a58:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	781b      	ldrb	r3, [r3, #0]
 8010a5e:	2b03      	cmp	r3, #3
 8010a60:	d109      	bne.n	8010a76 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8010a62:	683b      	ldr	r3, [r7, #0]
 8010a64:	3314      	adds	r3, #20
 8010a66:	4618      	mov	r0, r3
 8010a68:	f7ff f80c 	bl	800fa84 <ld_word>
 8010a6c:	4603      	mov	r3, r0
 8010a6e:	041b      	lsls	r3, r3, #16
 8010a70:	68fa      	ldr	r2, [r7, #12]
 8010a72:	4313      	orrs	r3, r2
 8010a74:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8010a76:	68fb      	ldr	r3, [r7, #12]
}
 8010a78:	4618      	mov	r0, r3
 8010a7a:	3710      	adds	r7, #16
 8010a7c:	46bd      	mov	sp, r7
 8010a7e:	bd80      	pop	{r7, pc}

08010a80 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8010a80:	b580      	push	{r7, lr}
 8010a82:	b084      	sub	sp, #16
 8010a84:	af00      	add	r7, sp, #0
 8010a86:	60f8      	str	r0, [r7, #12]
 8010a88:	60b9      	str	r1, [r7, #8]
 8010a8a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8010a8c:	68bb      	ldr	r3, [r7, #8]
 8010a8e:	331a      	adds	r3, #26
 8010a90:	687a      	ldr	r2, [r7, #4]
 8010a92:	b292      	uxth	r2, r2
 8010a94:	4611      	mov	r1, r2
 8010a96:	4618      	mov	r0, r3
 8010a98:	f7ff f82f 	bl	800fafa <st_word>
	if (fs->fs_type == FS_FAT32) {
 8010a9c:	68fb      	ldr	r3, [r7, #12]
 8010a9e:	781b      	ldrb	r3, [r3, #0]
 8010aa0:	2b03      	cmp	r3, #3
 8010aa2:	d109      	bne.n	8010ab8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8010aa4:	68bb      	ldr	r3, [r7, #8]
 8010aa6:	f103 0214 	add.w	r2, r3, #20
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	0c1b      	lsrs	r3, r3, #16
 8010aae:	b29b      	uxth	r3, r3
 8010ab0:	4619      	mov	r1, r3
 8010ab2:	4610      	mov	r0, r2
 8010ab4:	f7ff f821 	bl	800fafa <st_word>
	}
}
 8010ab8:	bf00      	nop
 8010aba:	3710      	adds	r7, #16
 8010abc:	46bd      	mov	sp, r7
 8010abe:	bd80      	pop	{r7, pc}

08010ac0 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8010ac0:	b580      	push	{r7, lr}
 8010ac2:	b086      	sub	sp, #24
 8010ac4:	af00      	add	r7, sp, #0
 8010ac6:	6078      	str	r0, [r7, #4]
 8010ac8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8010aca:	2304      	movs	r3, #4
 8010acc:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8010ad4:	e03c      	b.n	8010b50 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	69db      	ldr	r3, [r3, #28]
 8010ada:	4619      	mov	r1, r3
 8010adc:	6938      	ldr	r0, [r7, #16]
 8010ade:	f7ff fab1 	bl	8010044 <move_window>
 8010ae2:	4603      	mov	r3, r0
 8010ae4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8010ae6:	7dfb      	ldrb	r3, [r7, #23]
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d136      	bne.n	8010b5a <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	6a1b      	ldr	r3, [r3, #32]
 8010af0:	781b      	ldrb	r3, [r3, #0]
 8010af2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8010af4:	7bfb      	ldrb	r3, [r7, #15]
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d102      	bne.n	8010b00 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8010afa:	2304      	movs	r3, #4
 8010afc:	75fb      	strb	r3, [r7, #23]
 8010afe:	e031      	b.n	8010b64 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	6a1b      	ldr	r3, [r3, #32]
 8010b04:	330b      	adds	r3, #11
 8010b06:	781b      	ldrb	r3, [r3, #0]
 8010b08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010b0c:	73bb      	strb	r3, [r7, #14]
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	7bba      	ldrb	r2, [r7, #14]
 8010b12:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8010b14:	7bfb      	ldrb	r3, [r7, #15]
 8010b16:	2be5      	cmp	r3, #229	; 0xe5
 8010b18:	d011      	beq.n	8010b3e <dir_read+0x7e>
 8010b1a:	7bfb      	ldrb	r3, [r7, #15]
 8010b1c:	2b2e      	cmp	r3, #46	; 0x2e
 8010b1e:	d00e      	beq.n	8010b3e <dir_read+0x7e>
 8010b20:	7bbb      	ldrb	r3, [r7, #14]
 8010b22:	2b0f      	cmp	r3, #15
 8010b24:	d00b      	beq.n	8010b3e <dir_read+0x7e>
 8010b26:	7bbb      	ldrb	r3, [r7, #14]
 8010b28:	f023 0320 	bic.w	r3, r3, #32
 8010b2c:	2b08      	cmp	r3, #8
 8010b2e:	bf0c      	ite	eq
 8010b30:	2301      	moveq	r3, #1
 8010b32:	2300      	movne	r3, #0
 8010b34:	b2db      	uxtb	r3, r3
 8010b36:	461a      	mov	r2, r3
 8010b38:	683b      	ldr	r3, [r7, #0]
 8010b3a:	4293      	cmp	r3, r2
 8010b3c:	d00f      	beq.n	8010b5e <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8010b3e:	2100      	movs	r1, #0
 8010b40:	6878      	ldr	r0, [r7, #4]
 8010b42:	f7ff fe72 	bl	801082a <dir_next>
 8010b46:	4603      	mov	r3, r0
 8010b48:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8010b4a:	7dfb      	ldrb	r3, [r7, #23]
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d108      	bne.n	8010b62 <dir_read+0xa2>
	while (dp->sect) {
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	69db      	ldr	r3, [r3, #28]
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d1be      	bne.n	8010ad6 <dir_read+0x16>
 8010b58:	e004      	b.n	8010b64 <dir_read+0xa4>
		if (res != FR_OK) break;
 8010b5a:	bf00      	nop
 8010b5c:	e002      	b.n	8010b64 <dir_read+0xa4>
				break;
 8010b5e:	bf00      	nop
 8010b60:	e000      	b.n	8010b64 <dir_read+0xa4>
		if (res != FR_OK) break;
 8010b62:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8010b64:	7dfb      	ldrb	r3, [r7, #23]
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d002      	beq.n	8010b70 <dir_read+0xb0>
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	2200      	movs	r2, #0
 8010b6e:	61da      	str	r2, [r3, #28]
	return res;
 8010b70:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b72:	4618      	mov	r0, r3
 8010b74:	3718      	adds	r7, #24
 8010b76:	46bd      	mov	sp, r7
 8010b78:	bd80      	pop	{r7, pc}

08010b7a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8010b7a:	b580      	push	{r7, lr}
 8010b7c:	b086      	sub	sp, #24
 8010b7e:	af00      	add	r7, sp, #0
 8010b80:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8010b88:	2100      	movs	r1, #0
 8010b8a:	6878      	ldr	r0, [r7, #4]
 8010b8c:	f7ff fdd2 	bl	8010734 <dir_sdi>
 8010b90:	4603      	mov	r3, r0
 8010b92:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8010b94:	7dfb      	ldrb	r3, [r7, #23]
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d001      	beq.n	8010b9e <dir_find+0x24>
 8010b9a:	7dfb      	ldrb	r3, [r7, #23]
 8010b9c:	e03e      	b.n	8010c1c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	69db      	ldr	r3, [r3, #28]
 8010ba2:	4619      	mov	r1, r3
 8010ba4:	6938      	ldr	r0, [r7, #16]
 8010ba6:	f7ff fa4d 	bl	8010044 <move_window>
 8010baa:	4603      	mov	r3, r0
 8010bac:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8010bae:	7dfb      	ldrb	r3, [r7, #23]
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d12f      	bne.n	8010c14 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	6a1b      	ldr	r3, [r3, #32]
 8010bb8:	781b      	ldrb	r3, [r3, #0]
 8010bba:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8010bbc:	7bfb      	ldrb	r3, [r7, #15]
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d102      	bne.n	8010bc8 <dir_find+0x4e>
 8010bc2:	2304      	movs	r3, #4
 8010bc4:	75fb      	strb	r3, [r7, #23]
 8010bc6:	e028      	b.n	8010c1a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	6a1b      	ldr	r3, [r3, #32]
 8010bcc:	330b      	adds	r3, #11
 8010bce:	781b      	ldrb	r3, [r3, #0]
 8010bd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010bd4:	b2da      	uxtb	r2, r3
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	6a1b      	ldr	r3, [r3, #32]
 8010bde:	330b      	adds	r3, #11
 8010be0:	781b      	ldrb	r3, [r3, #0]
 8010be2:	f003 0308 	and.w	r3, r3, #8
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d10a      	bne.n	8010c00 <dir_find+0x86>
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	6a18      	ldr	r0, [r3, #32]
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	3324      	adds	r3, #36	; 0x24
 8010bf2:	220b      	movs	r2, #11
 8010bf4:	4619      	mov	r1, r3
 8010bf6:	f7ff f802 	bl	800fbfe <mem_cmp>
 8010bfa:	4603      	mov	r3, r0
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d00b      	beq.n	8010c18 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8010c00:	2100      	movs	r1, #0
 8010c02:	6878      	ldr	r0, [r7, #4]
 8010c04:	f7ff fe11 	bl	801082a <dir_next>
 8010c08:	4603      	mov	r3, r0
 8010c0a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8010c0c:	7dfb      	ldrb	r3, [r7, #23]
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d0c5      	beq.n	8010b9e <dir_find+0x24>
 8010c12:	e002      	b.n	8010c1a <dir_find+0xa0>
		if (res != FR_OK) break;
 8010c14:	bf00      	nop
 8010c16:	e000      	b.n	8010c1a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8010c18:	bf00      	nop

	return res;
 8010c1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c1c:	4618      	mov	r0, r3
 8010c1e:	3718      	adds	r7, #24
 8010c20:	46bd      	mov	sp, r7
 8010c22:	bd80      	pop	{r7, pc}

08010c24 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8010c24:	b580      	push	{r7, lr}
 8010c26:	b084      	sub	sp, #16
 8010c28:	af00      	add	r7, sp, #0
 8010c2a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8010c32:	2101      	movs	r1, #1
 8010c34:	6878      	ldr	r0, [r7, #4]
 8010c36:	f7ff febd 	bl	80109b4 <dir_alloc>
 8010c3a:	4603      	mov	r3, r0
 8010c3c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8010c3e:	7bfb      	ldrb	r3, [r7, #15]
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d11c      	bne.n	8010c7e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	69db      	ldr	r3, [r3, #28]
 8010c48:	4619      	mov	r1, r3
 8010c4a:	68b8      	ldr	r0, [r7, #8]
 8010c4c:	f7ff f9fa 	bl	8010044 <move_window>
 8010c50:	4603      	mov	r3, r0
 8010c52:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010c54:	7bfb      	ldrb	r3, [r7, #15]
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d111      	bne.n	8010c7e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	6a1b      	ldr	r3, [r3, #32]
 8010c5e:	2220      	movs	r2, #32
 8010c60:	2100      	movs	r1, #0
 8010c62:	4618      	mov	r0, r3
 8010c64:	f7fe ffb1 	bl	800fbca <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	6a18      	ldr	r0, [r3, #32]
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	3324      	adds	r3, #36	; 0x24
 8010c70:	220b      	movs	r2, #11
 8010c72:	4619      	mov	r1, r3
 8010c74:	f7fe ff88 	bl	800fb88 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8010c78:	68bb      	ldr	r3, [r7, #8]
 8010c7a:	2201      	movs	r2, #1
 8010c7c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8010c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c80:	4618      	mov	r0, r3
 8010c82:	3710      	adds	r7, #16
 8010c84:	46bd      	mov	sp, r7
 8010c86:	bd80      	pop	{r7, pc}

08010c88 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8010c88:	b580      	push	{r7, lr}
 8010c8a:	b086      	sub	sp, #24
 8010c8c:	af00      	add	r7, sp, #0
 8010c8e:	6078      	str	r0, [r7, #4]
 8010c90:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8010c92:	683b      	ldr	r3, [r7, #0]
 8010c94:	2200      	movs	r2, #0
 8010c96:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	69db      	ldr	r3, [r3, #28]
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d04e      	beq.n	8010d3e <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8010ca0:	2300      	movs	r3, #0
 8010ca2:	613b      	str	r3, [r7, #16]
 8010ca4:	693b      	ldr	r3, [r7, #16]
 8010ca6:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8010ca8:	e021      	b.n	8010cee <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	6a1a      	ldr	r2, [r3, #32]
 8010cae:	697b      	ldr	r3, [r7, #20]
 8010cb0:	1c59      	adds	r1, r3, #1
 8010cb2:	6179      	str	r1, [r7, #20]
 8010cb4:	4413      	add	r3, r2
 8010cb6:	781b      	ldrb	r3, [r3, #0]
 8010cb8:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8010cba:	7bfb      	ldrb	r3, [r7, #15]
 8010cbc:	2b20      	cmp	r3, #32
 8010cbe:	d100      	bne.n	8010cc2 <get_fileinfo+0x3a>
 8010cc0:	e015      	b.n	8010cee <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8010cc2:	7bfb      	ldrb	r3, [r7, #15]
 8010cc4:	2b05      	cmp	r3, #5
 8010cc6:	d101      	bne.n	8010ccc <get_fileinfo+0x44>
 8010cc8:	23e5      	movs	r3, #229	; 0xe5
 8010cca:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8010ccc:	697b      	ldr	r3, [r7, #20]
 8010cce:	2b09      	cmp	r3, #9
 8010cd0:	d106      	bne.n	8010ce0 <get_fileinfo+0x58>
 8010cd2:	693b      	ldr	r3, [r7, #16]
 8010cd4:	1c5a      	adds	r2, r3, #1
 8010cd6:	613a      	str	r2, [r7, #16]
 8010cd8:	683a      	ldr	r2, [r7, #0]
 8010cda:	4413      	add	r3, r2
 8010cdc:	222e      	movs	r2, #46	; 0x2e
 8010cde:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8010ce0:	693b      	ldr	r3, [r7, #16]
 8010ce2:	1c5a      	adds	r2, r3, #1
 8010ce4:	613a      	str	r2, [r7, #16]
 8010ce6:	683a      	ldr	r2, [r7, #0]
 8010ce8:	4413      	add	r3, r2
 8010cea:	7bfa      	ldrb	r2, [r7, #15]
 8010cec:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8010cee:	697b      	ldr	r3, [r7, #20]
 8010cf0:	2b0a      	cmp	r3, #10
 8010cf2:	d9da      	bls.n	8010caa <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8010cf4:	683a      	ldr	r2, [r7, #0]
 8010cf6:	693b      	ldr	r3, [r7, #16]
 8010cf8:	4413      	add	r3, r2
 8010cfa:	3309      	adds	r3, #9
 8010cfc:	2200      	movs	r2, #0
 8010cfe:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	6a1b      	ldr	r3, [r3, #32]
 8010d04:	7ada      	ldrb	r2, [r3, #11]
 8010d06:	683b      	ldr	r3, [r7, #0]
 8010d08:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	6a1b      	ldr	r3, [r3, #32]
 8010d0e:	331c      	adds	r3, #28
 8010d10:	4618      	mov	r0, r3
 8010d12:	f7fe fecf 	bl	800fab4 <ld_dword>
 8010d16:	4602      	mov	r2, r0
 8010d18:	683b      	ldr	r3, [r7, #0]
 8010d1a:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	6a1b      	ldr	r3, [r3, #32]
 8010d20:	3316      	adds	r3, #22
 8010d22:	4618      	mov	r0, r3
 8010d24:	f7fe fec6 	bl	800fab4 <ld_dword>
 8010d28:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8010d2a:	68bb      	ldr	r3, [r7, #8]
 8010d2c:	b29a      	uxth	r2, r3
 8010d2e:	683b      	ldr	r3, [r7, #0]
 8010d30:	80da      	strh	r2, [r3, #6]
 8010d32:	68bb      	ldr	r3, [r7, #8]
 8010d34:	0c1b      	lsrs	r3, r3, #16
 8010d36:	b29a      	uxth	r2, r3
 8010d38:	683b      	ldr	r3, [r7, #0]
 8010d3a:	809a      	strh	r2, [r3, #4]
 8010d3c:	e000      	b.n	8010d40 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8010d3e:	bf00      	nop
}
 8010d40:	3718      	adds	r7, #24
 8010d42:	46bd      	mov	sp, r7
 8010d44:	bd80      	pop	{r7, pc}
	...

08010d48 <get_achar>:

static
WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
)
{
 8010d48:	b480      	push	{r7}
 8010d4a:	b085      	sub	sp, #20
 8010d4c:	af00      	add	r7, sp, #0
 8010d4e:	6078      	str	r0, [r7, #4]
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	1c59      	adds	r1, r3, #1
 8010d56:	687a      	ldr	r2, [r7, #4]
 8010d58:	6011      	str	r1, [r2, #0]
 8010d5a:	781b      	ldrb	r3, [r3, #0]
 8010d5c:	81fb      	strh	r3, [r7, #14]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 8010d5e:	89fb      	ldrh	r3, [r7, #14]
 8010d60:	2b60      	cmp	r3, #96	; 0x60
 8010d62:	d905      	bls.n	8010d70 <get_achar+0x28>
 8010d64:	89fb      	ldrh	r3, [r7, #14]
 8010d66:	2b7a      	cmp	r3, #122	; 0x7a
 8010d68:	d802      	bhi.n	8010d70 <get_achar+0x28>
 8010d6a:	89fb      	ldrh	r3, [r7, #14]
 8010d6c:	3b20      	subs	r3, #32
 8010d6e:	81fb      	strh	r3, [r7, #14]
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 8010d70:	89fb      	ldrh	r3, [r7, #14]
 8010d72:	2b7f      	cmp	r3, #127	; 0x7f
 8010d74:	d904      	bls.n	8010d80 <get_achar+0x38>
 8010d76:	89fb      	ldrh	r3, [r7, #14]
 8010d78:	3b80      	subs	r3, #128	; 0x80
 8010d7a:	4a05      	ldr	r2, [pc, #20]	; (8010d90 <get_achar+0x48>)
 8010d7c:	5cd3      	ldrb	r3, [r2, r3]
 8010d7e:	81fb      	strh	r3, [r7, #14]
#else
	if (IsDBCS1(chr) && IsDBCS2(**ptr)) {		/* Get DBC 2nd byte if needed */
		chr = chr << 8 | (BYTE)*(*ptr)++;
	}
#endif
	return chr;
 8010d80:	89fb      	ldrh	r3, [r7, #14]
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 8010d82:	4618      	mov	r0, r3
 8010d84:	3714      	adds	r7, #20
 8010d86:	46bd      	mov	sp, r7
 8010d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d8c:	4770      	bx	lr
 8010d8e:	bf00      	nop
 8010d90:	0801a358 	.word	0x0801a358

08010d94 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 8010d94:	b580      	push	{r7, lr}
 8010d96:	b08a      	sub	sp, #40	; 0x28
 8010d98:	af00      	add	r7, sp, #0
 8010d9a:	60f8      	str	r0, [r7, #12]
 8010d9c:	60b9      	str	r1, [r7, #8]
 8010d9e:	607a      	str	r2, [r7, #4]
 8010da0:	603b      	str	r3, [r7, #0]
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 8010da2:	e009      	b.n	8010db8 <pattern_matching+0x24>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 8010da4:	f107 0308 	add.w	r3, r7, #8
 8010da8:	4618      	mov	r0, r3
 8010daa:	f7ff ffcd 	bl	8010d48 <get_achar>
 8010dae:	4603      	mov	r3, r0
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d101      	bne.n	8010db8 <pattern_matching+0x24>
 8010db4:	2300      	movs	r3, #0
 8010db6:	e064      	b.n	8010e82 <pattern_matching+0xee>
	while (skip--) {				/* Pre-skip name chars */
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	1e5a      	subs	r2, r3, #1
 8010dbc:	607a      	str	r2, [r7, #4]
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d1f0      	bne.n	8010da4 <pattern_matching+0x10>
	}
	if (!*pat && inf) return 1;		/* (short circuit) */
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	781b      	ldrb	r3, [r3, #0]
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d104      	bne.n	8010dd4 <pattern_matching+0x40>
 8010dca:	683b      	ldr	r3, [r7, #0]
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d001      	beq.n	8010dd4 <pattern_matching+0x40>
 8010dd0:	2301      	movs	r3, #1
 8010dd2:	e056      	b.n	8010e82 <pattern_matching+0xee>

	do {
		pp = pat; np = nam;			/* Top of pattern and name to match */
 8010dd4:	68fb      	ldr	r3, [r7, #12]
 8010dd6:	617b      	str	r3, [r7, #20]
 8010dd8:	68bb      	ldr	r3, [r7, #8]
 8010dda:	613b      	str	r3, [r7, #16]
		for (;;) {
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 8010ddc:	697b      	ldr	r3, [r7, #20]
 8010dde:	781b      	ldrb	r3, [r3, #0]
 8010de0:	2b3f      	cmp	r3, #63	; 0x3f
 8010de2:	d003      	beq.n	8010dec <pattern_matching+0x58>
 8010de4:	697b      	ldr	r3, [r7, #20]
 8010de6:	781b      	ldrb	r3, [r3, #0]
 8010de8:	2b2a      	cmp	r3, #42	; 0x2a
 8010dea:	d126      	bne.n	8010e3a <pattern_matching+0xa6>
				nm = nx = 0;
 8010dec:	2300      	movs	r3, #0
 8010dee:	61fb      	str	r3, [r7, #28]
 8010df0:	69fb      	ldr	r3, [r7, #28]
 8010df2:	623b      	str	r3, [r7, #32]
				do {				/* Analyze the wildcard chars */
					if (*pp++ == '?') nm++; else nx = 1;
 8010df4:	697b      	ldr	r3, [r7, #20]
 8010df6:	1c5a      	adds	r2, r3, #1
 8010df8:	617a      	str	r2, [r7, #20]
 8010dfa:	781b      	ldrb	r3, [r3, #0]
 8010dfc:	2b3f      	cmp	r3, #63	; 0x3f
 8010dfe:	d103      	bne.n	8010e08 <pattern_matching+0x74>
 8010e00:	6a3b      	ldr	r3, [r7, #32]
 8010e02:	3301      	adds	r3, #1
 8010e04:	623b      	str	r3, [r7, #32]
 8010e06:	e001      	b.n	8010e0c <pattern_matching+0x78>
 8010e08:	2301      	movs	r3, #1
 8010e0a:	61fb      	str	r3, [r7, #28]
				} while (*pp == '?' || *pp == '*');
 8010e0c:	697b      	ldr	r3, [r7, #20]
 8010e0e:	781b      	ldrb	r3, [r3, #0]
 8010e10:	2b3f      	cmp	r3, #63	; 0x3f
 8010e12:	d0ef      	beq.n	8010df4 <pattern_matching+0x60>
 8010e14:	697b      	ldr	r3, [r7, #20]
 8010e16:	781b      	ldrb	r3, [r3, #0]
 8010e18:	2b2a      	cmp	r3, #42	; 0x2a
 8010e1a:	d0eb      	beq.n	8010df4 <pattern_matching+0x60>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 8010e1c:	6978      	ldr	r0, [r7, #20]
 8010e1e:	6939      	ldr	r1, [r7, #16]
 8010e20:	69fb      	ldr	r3, [r7, #28]
 8010e22:	6a3a      	ldr	r2, [r7, #32]
 8010e24:	f7ff ffb6 	bl	8010d94 <pattern_matching>
 8010e28:	4603      	mov	r3, r0
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d001      	beq.n	8010e32 <pattern_matching+0x9e>
 8010e2e:	2301      	movs	r3, #1
 8010e30:	e027      	b.n	8010e82 <pattern_matching+0xee>
				nc = *np; break;	/* Branch mismatched */
 8010e32:	693b      	ldr	r3, [r7, #16]
 8010e34:	781b      	ldrb	r3, [r3, #0]
 8010e36:	84fb      	strh	r3, [r7, #38]	; 0x26
 8010e38:	e017      	b.n	8010e6a <pattern_matching+0xd6>
			}
			pc = get_achar(&pp);	/* Get a pattern char */
 8010e3a:	f107 0314 	add.w	r3, r7, #20
 8010e3e:	4618      	mov	r0, r3
 8010e40:	f7ff ff82 	bl	8010d48 <get_achar>
 8010e44:	4603      	mov	r3, r0
 8010e46:	837b      	strh	r3, [r7, #26]
			nc = get_achar(&np);	/* Get a name char */
 8010e48:	f107 0310 	add.w	r3, r7, #16
 8010e4c:	4618      	mov	r0, r3
 8010e4e:	f7ff ff7b 	bl	8010d48 <get_achar>
 8010e52:	4603      	mov	r3, r0
 8010e54:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (pc != nc) break;	/* Branch mismatched? */
 8010e56:	8b7a      	ldrh	r2, [r7, #26]
 8010e58:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010e5a:	429a      	cmp	r2, r3
 8010e5c:	d104      	bne.n	8010e68 <pattern_matching+0xd4>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 8010e5e:	8b7b      	ldrh	r3, [r7, #26]
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d1bb      	bne.n	8010ddc <pattern_matching+0x48>
 8010e64:	2301      	movs	r3, #1
 8010e66:	e00c      	b.n	8010e82 <pattern_matching+0xee>
			if (pc != nc) break;	/* Branch mismatched? */
 8010e68:	bf00      	nop
		}
		get_achar(&nam);			/* nam++ */
 8010e6a:	f107 0308 	add.w	r3, r7, #8
 8010e6e:	4618      	mov	r0, r3
 8010e70:	f7ff ff6a 	bl	8010d48 <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 8010e74:	683b      	ldr	r3, [r7, #0]
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d002      	beq.n	8010e80 <pattern_matching+0xec>
 8010e7a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d1a9      	bne.n	8010dd4 <pattern_matching+0x40>

	return 0;
 8010e80:	2300      	movs	r3, #0
}
 8010e82:	4618      	mov	r0, r3
 8010e84:	3728      	adds	r7, #40	; 0x28
 8010e86:	46bd      	mov	sp, r7
 8010e88:	bd80      	pop	{r7, pc}
	...

08010e8c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8010e8c:	b580      	push	{r7, lr}
 8010e8e:	b088      	sub	sp, #32
 8010e90:	af00      	add	r7, sp, #0
 8010e92:	6078      	str	r0, [r7, #4]
 8010e94:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8010e96:	683b      	ldr	r3, [r7, #0]
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	60fb      	str	r3, [r7, #12]
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	3324      	adds	r3, #36	; 0x24
 8010ea0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8010ea2:	220b      	movs	r2, #11
 8010ea4:	2120      	movs	r1, #32
 8010ea6:	68b8      	ldr	r0, [r7, #8]
 8010ea8:	f7fe fe8f 	bl	800fbca <mem_set>
	si = i = 0; ni = 8;
 8010eac:	2300      	movs	r3, #0
 8010eae:	613b      	str	r3, [r7, #16]
 8010eb0:	693b      	ldr	r3, [r7, #16]
 8010eb2:	617b      	str	r3, [r7, #20]
 8010eb4:	2308      	movs	r3, #8
 8010eb6:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8010eb8:	697b      	ldr	r3, [r7, #20]
 8010eba:	1c5a      	adds	r2, r3, #1
 8010ebc:	617a      	str	r2, [r7, #20]
 8010ebe:	68fa      	ldr	r2, [r7, #12]
 8010ec0:	4413      	add	r3, r2
 8010ec2:	781b      	ldrb	r3, [r3, #0]
 8010ec4:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8010ec6:	7ffb      	ldrb	r3, [r7, #31]
 8010ec8:	2b20      	cmp	r3, #32
 8010eca:	d94e      	bls.n	8010f6a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8010ecc:	7ffb      	ldrb	r3, [r7, #31]
 8010ece:	2b2f      	cmp	r3, #47	; 0x2f
 8010ed0:	d006      	beq.n	8010ee0 <create_name+0x54>
 8010ed2:	7ffb      	ldrb	r3, [r7, #31]
 8010ed4:	2b5c      	cmp	r3, #92	; 0x5c
 8010ed6:	d110      	bne.n	8010efa <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8010ed8:	e002      	b.n	8010ee0 <create_name+0x54>
 8010eda:	697b      	ldr	r3, [r7, #20]
 8010edc:	3301      	adds	r3, #1
 8010ede:	617b      	str	r3, [r7, #20]
 8010ee0:	68fa      	ldr	r2, [r7, #12]
 8010ee2:	697b      	ldr	r3, [r7, #20]
 8010ee4:	4413      	add	r3, r2
 8010ee6:	781b      	ldrb	r3, [r3, #0]
 8010ee8:	2b2f      	cmp	r3, #47	; 0x2f
 8010eea:	d0f6      	beq.n	8010eda <create_name+0x4e>
 8010eec:	68fa      	ldr	r2, [r7, #12]
 8010eee:	697b      	ldr	r3, [r7, #20]
 8010ef0:	4413      	add	r3, r2
 8010ef2:	781b      	ldrb	r3, [r3, #0]
 8010ef4:	2b5c      	cmp	r3, #92	; 0x5c
 8010ef6:	d0f0      	beq.n	8010eda <create_name+0x4e>
			break;
 8010ef8:	e038      	b.n	8010f6c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8010efa:	7ffb      	ldrb	r3, [r7, #31]
 8010efc:	2b2e      	cmp	r3, #46	; 0x2e
 8010efe:	d003      	beq.n	8010f08 <create_name+0x7c>
 8010f00:	693a      	ldr	r2, [r7, #16]
 8010f02:	69bb      	ldr	r3, [r7, #24]
 8010f04:	429a      	cmp	r2, r3
 8010f06:	d30c      	bcc.n	8010f22 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8010f08:	69bb      	ldr	r3, [r7, #24]
 8010f0a:	2b0b      	cmp	r3, #11
 8010f0c:	d002      	beq.n	8010f14 <create_name+0x88>
 8010f0e:	7ffb      	ldrb	r3, [r7, #31]
 8010f10:	2b2e      	cmp	r3, #46	; 0x2e
 8010f12:	d001      	beq.n	8010f18 <create_name+0x8c>
 8010f14:	2306      	movs	r3, #6
 8010f16:	e044      	b.n	8010fa2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8010f18:	2308      	movs	r3, #8
 8010f1a:	613b      	str	r3, [r7, #16]
 8010f1c:	230b      	movs	r3, #11
 8010f1e:	61bb      	str	r3, [r7, #24]
			continue;
 8010f20:	e022      	b.n	8010f68 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8010f22:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	da04      	bge.n	8010f34 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8010f2a:	7ffb      	ldrb	r3, [r7, #31]
 8010f2c:	3b80      	subs	r3, #128	; 0x80
 8010f2e:	4a1f      	ldr	r2, [pc, #124]	; (8010fac <create_name+0x120>)
 8010f30:	5cd3      	ldrb	r3, [r2, r3]
 8010f32:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8010f34:	7ffb      	ldrb	r3, [r7, #31]
 8010f36:	4619      	mov	r1, r3
 8010f38:	481d      	ldr	r0, [pc, #116]	; (8010fb0 <create_name+0x124>)
 8010f3a:	f7fe fe87 	bl	800fc4c <chk_chr>
 8010f3e:	4603      	mov	r3, r0
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d001      	beq.n	8010f48 <create_name+0xbc>
 8010f44:	2306      	movs	r3, #6
 8010f46:	e02c      	b.n	8010fa2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8010f48:	7ffb      	ldrb	r3, [r7, #31]
 8010f4a:	2b60      	cmp	r3, #96	; 0x60
 8010f4c:	d905      	bls.n	8010f5a <create_name+0xce>
 8010f4e:	7ffb      	ldrb	r3, [r7, #31]
 8010f50:	2b7a      	cmp	r3, #122	; 0x7a
 8010f52:	d802      	bhi.n	8010f5a <create_name+0xce>
 8010f54:	7ffb      	ldrb	r3, [r7, #31]
 8010f56:	3b20      	subs	r3, #32
 8010f58:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8010f5a:	693b      	ldr	r3, [r7, #16]
 8010f5c:	1c5a      	adds	r2, r3, #1
 8010f5e:	613a      	str	r2, [r7, #16]
 8010f60:	68ba      	ldr	r2, [r7, #8]
 8010f62:	4413      	add	r3, r2
 8010f64:	7ffa      	ldrb	r2, [r7, #31]
 8010f66:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8010f68:	e7a6      	b.n	8010eb8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8010f6a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8010f6c:	68fa      	ldr	r2, [r7, #12]
 8010f6e:	697b      	ldr	r3, [r7, #20]
 8010f70:	441a      	add	r2, r3
 8010f72:	683b      	ldr	r3, [r7, #0]
 8010f74:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8010f76:	693b      	ldr	r3, [r7, #16]
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d101      	bne.n	8010f80 <create_name+0xf4>
 8010f7c:	2306      	movs	r3, #6
 8010f7e:	e010      	b.n	8010fa2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8010f80:	68bb      	ldr	r3, [r7, #8]
 8010f82:	781b      	ldrb	r3, [r3, #0]
 8010f84:	2be5      	cmp	r3, #229	; 0xe5
 8010f86:	d102      	bne.n	8010f8e <create_name+0x102>
 8010f88:	68bb      	ldr	r3, [r7, #8]
 8010f8a:	2205      	movs	r2, #5
 8010f8c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8010f8e:	7ffb      	ldrb	r3, [r7, #31]
 8010f90:	2b20      	cmp	r3, #32
 8010f92:	d801      	bhi.n	8010f98 <create_name+0x10c>
 8010f94:	2204      	movs	r2, #4
 8010f96:	e000      	b.n	8010f9a <create_name+0x10e>
 8010f98:	2200      	movs	r2, #0
 8010f9a:	68bb      	ldr	r3, [r7, #8]
 8010f9c:	330b      	adds	r3, #11
 8010f9e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8010fa0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8010fa2:	4618      	mov	r0, r3
 8010fa4:	3720      	adds	r7, #32
 8010fa6:	46bd      	mov	sp, r7
 8010fa8:	bd80      	pop	{r7, pc}
 8010faa:	bf00      	nop
 8010fac:	0801a358 	.word	0x0801a358
 8010fb0:	0801a184 	.word	0x0801a184

08010fb4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8010fb4:	b580      	push	{r7, lr}
 8010fb6:	b086      	sub	sp, #24
 8010fb8:	af00      	add	r7, sp, #0
 8010fba:	6078      	str	r0, [r7, #4]
 8010fbc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8010fc2:	693b      	ldr	r3, [r7, #16]
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8010fc8:	e002      	b.n	8010fd0 <follow_path+0x1c>
 8010fca:	683b      	ldr	r3, [r7, #0]
 8010fcc:	3301      	adds	r3, #1
 8010fce:	603b      	str	r3, [r7, #0]
 8010fd0:	683b      	ldr	r3, [r7, #0]
 8010fd2:	781b      	ldrb	r3, [r3, #0]
 8010fd4:	2b2f      	cmp	r3, #47	; 0x2f
 8010fd6:	d0f8      	beq.n	8010fca <follow_path+0x16>
 8010fd8:	683b      	ldr	r3, [r7, #0]
 8010fda:	781b      	ldrb	r3, [r3, #0]
 8010fdc:	2b5c      	cmp	r3, #92	; 0x5c
 8010fde:	d0f4      	beq.n	8010fca <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8010fe0:	693b      	ldr	r3, [r7, #16]
 8010fe2:	2200      	movs	r2, #0
 8010fe4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8010fe6:	683b      	ldr	r3, [r7, #0]
 8010fe8:	781b      	ldrb	r3, [r3, #0]
 8010fea:	2b1f      	cmp	r3, #31
 8010fec:	d80a      	bhi.n	8011004 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	2280      	movs	r2, #128	; 0x80
 8010ff2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8010ff6:	2100      	movs	r1, #0
 8010ff8:	6878      	ldr	r0, [r7, #4]
 8010ffa:	f7ff fb9b 	bl	8010734 <dir_sdi>
 8010ffe:	4603      	mov	r3, r0
 8011000:	75fb      	strb	r3, [r7, #23]
 8011002:	e043      	b.n	801108c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011004:	463b      	mov	r3, r7
 8011006:	4619      	mov	r1, r3
 8011008:	6878      	ldr	r0, [r7, #4]
 801100a:	f7ff ff3f 	bl	8010e8c <create_name>
 801100e:	4603      	mov	r3, r0
 8011010:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011012:	7dfb      	ldrb	r3, [r7, #23]
 8011014:	2b00      	cmp	r3, #0
 8011016:	d134      	bne.n	8011082 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8011018:	6878      	ldr	r0, [r7, #4]
 801101a:	f7ff fdae 	bl	8010b7a <dir_find>
 801101e:	4603      	mov	r3, r0
 8011020:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011028:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801102a:	7dfb      	ldrb	r3, [r7, #23]
 801102c:	2b00      	cmp	r3, #0
 801102e:	d00a      	beq.n	8011046 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8011030:	7dfb      	ldrb	r3, [r7, #23]
 8011032:	2b04      	cmp	r3, #4
 8011034:	d127      	bne.n	8011086 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8011036:	7afb      	ldrb	r3, [r7, #11]
 8011038:	f003 0304 	and.w	r3, r3, #4
 801103c:	2b00      	cmp	r3, #0
 801103e:	d122      	bne.n	8011086 <follow_path+0xd2>
 8011040:	2305      	movs	r3, #5
 8011042:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8011044:	e01f      	b.n	8011086 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011046:	7afb      	ldrb	r3, [r7, #11]
 8011048:	f003 0304 	and.w	r3, r3, #4
 801104c:	2b00      	cmp	r3, #0
 801104e:	d11c      	bne.n	801108a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8011050:	693b      	ldr	r3, [r7, #16]
 8011052:	799b      	ldrb	r3, [r3, #6]
 8011054:	f003 0310 	and.w	r3, r3, #16
 8011058:	2b00      	cmp	r3, #0
 801105a:	d102      	bne.n	8011062 <follow_path+0xae>
				res = FR_NO_PATH; break;
 801105c:	2305      	movs	r3, #5
 801105e:	75fb      	strb	r3, [r7, #23]
 8011060:	e014      	b.n	801108c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8011062:	68fb      	ldr	r3, [r7, #12]
 8011064:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	695b      	ldr	r3, [r3, #20]
 801106c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011070:	4413      	add	r3, r2
 8011072:	4619      	mov	r1, r3
 8011074:	68f8      	ldr	r0, [r7, #12]
 8011076:	f7ff fce4 	bl	8010a42 <ld_clust>
 801107a:	4602      	mov	r2, r0
 801107c:	693b      	ldr	r3, [r7, #16]
 801107e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011080:	e7c0      	b.n	8011004 <follow_path+0x50>
			if (res != FR_OK) break;
 8011082:	bf00      	nop
 8011084:	e002      	b.n	801108c <follow_path+0xd8>
				break;
 8011086:	bf00      	nop
 8011088:	e000      	b.n	801108c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801108a:	bf00      	nop
			}
		}
	}

	return res;
 801108c:	7dfb      	ldrb	r3, [r7, #23]
}
 801108e:	4618      	mov	r0, r3
 8011090:	3718      	adds	r7, #24
 8011092:	46bd      	mov	sp, r7
 8011094:	bd80      	pop	{r7, pc}

08011096 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8011096:	b480      	push	{r7}
 8011098:	b087      	sub	sp, #28
 801109a:	af00      	add	r7, sp, #0
 801109c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801109e:	f04f 33ff 	mov.w	r3, #4294967295
 80110a2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d031      	beq.n	8011110 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	681b      	ldr	r3, [r3, #0]
 80110b0:	617b      	str	r3, [r7, #20]
 80110b2:	e002      	b.n	80110ba <get_ldnumber+0x24>
 80110b4:	697b      	ldr	r3, [r7, #20]
 80110b6:	3301      	adds	r3, #1
 80110b8:	617b      	str	r3, [r7, #20]
 80110ba:	697b      	ldr	r3, [r7, #20]
 80110bc:	781b      	ldrb	r3, [r3, #0]
 80110be:	2b20      	cmp	r3, #32
 80110c0:	d903      	bls.n	80110ca <get_ldnumber+0x34>
 80110c2:	697b      	ldr	r3, [r7, #20]
 80110c4:	781b      	ldrb	r3, [r3, #0]
 80110c6:	2b3a      	cmp	r3, #58	; 0x3a
 80110c8:	d1f4      	bne.n	80110b4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80110ca:	697b      	ldr	r3, [r7, #20]
 80110cc:	781b      	ldrb	r3, [r3, #0]
 80110ce:	2b3a      	cmp	r3, #58	; 0x3a
 80110d0:	d11c      	bne.n	801110c <get_ldnumber+0x76>
			tp = *path;
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	1c5a      	adds	r2, r3, #1
 80110dc:	60fa      	str	r2, [r7, #12]
 80110de:	781b      	ldrb	r3, [r3, #0]
 80110e0:	3b30      	subs	r3, #48	; 0x30
 80110e2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80110e4:	68bb      	ldr	r3, [r7, #8]
 80110e6:	2b09      	cmp	r3, #9
 80110e8:	d80e      	bhi.n	8011108 <get_ldnumber+0x72>
 80110ea:	68fa      	ldr	r2, [r7, #12]
 80110ec:	697b      	ldr	r3, [r7, #20]
 80110ee:	429a      	cmp	r2, r3
 80110f0:	d10a      	bne.n	8011108 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80110f2:	68bb      	ldr	r3, [r7, #8]
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d107      	bne.n	8011108 <get_ldnumber+0x72>
					vol = (int)i;
 80110f8:	68bb      	ldr	r3, [r7, #8]
 80110fa:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80110fc:	697b      	ldr	r3, [r7, #20]
 80110fe:	3301      	adds	r3, #1
 8011100:	617b      	str	r3, [r7, #20]
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	697a      	ldr	r2, [r7, #20]
 8011106:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8011108:	693b      	ldr	r3, [r7, #16]
 801110a:	e002      	b.n	8011112 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801110c:	2300      	movs	r3, #0
 801110e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8011110:	693b      	ldr	r3, [r7, #16]
}
 8011112:	4618      	mov	r0, r3
 8011114:	371c      	adds	r7, #28
 8011116:	46bd      	mov	sp, r7
 8011118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801111c:	4770      	bx	lr
	...

08011120 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8011120:	b580      	push	{r7, lr}
 8011122:	b082      	sub	sp, #8
 8011124:	af00      	add	r7, sp, #0
 8011126:	6078      	str	r0, [r7, #4]
 8011128:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	2200      	movs	r2, #0
 801112e:	70da      	strb	r2, [r3, #3]
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	f04f 32ff 	mov.w	r2, #4294967295
 8011136:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8011138:	6839      	ldr	r1, [r7, #0]
 801113a:	6878      	ldr	r0, [r7, #4]
 801113c:	f7fe ff82 	bl	8010044 <move_window>
 8011140:	4603      	mov	r3, r0
 8011142:	2b00      	cmp	r3, #0
 8011144:	d001      	beq.n	801114a <check_fs+0x2a>
 8011146:	2304      	movs	r3, #4
 8011148:	e038      	b.n	80111bc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	3334      	adds	r3, #52	; 0x34
 801114e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011152:	4618      	mov	r0, r3
 8011154:	f7fe fc96 	bl	800fa84 <ld_word>
 8011158:	4603      	mov	r3, r0
 801115a:	461a      	mov	r2, r3
 801115c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8011160:	429a      	cmp	r2, r3
 8011162:	d001      	beq.n	8011168 <check_fs+0x48>
 8011164:	2303      	movs	r3, #3
 8011166:	e029      	b.n	80111bc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801116e:	2be9      	cmp	r3, #233	; 0xe9
 8011170:	d009      	beq.n	8011186 <check_fs+0x66>
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011178:	2beb      	cmp	r3, #235	; 0xeb
 801117a:	d11e      	bne.n	80111ba <check_fs+0x9a>
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8011182:	2b90      	cmp	r3, #144	; 0x90
 8011184:	d119      	bne.n	80111ba <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	3334      	adds	r3, #52	; 0x34
 801118a:	3336      	adds	r3, #54	; 0x36
 801118c:	4618      	mov	r0, r3
 801118e:	f7fe fc91 	bl	800fab4 <ld_dword>
 8011192:	4603      	mov	r3, r0
 8011194:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011198:	4a0a      	ldr	r2, [pc, #40]	; (80111c4 <check_fs+0xa4>)
 801119a:	4293      	cmp	r3, r2
 801119c:	d101      	bne.n	80111a2 <check_fs+0x82>
 801119e:	2300      	movs	r3, #0
 80111a0:	e00c      	b.n	80111bc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	3334      	adds	r3, #52	; 0x34
 80111a6:	3352      	adds	r3, #82	; 0x52
 80111a8:	4618      	mov	r0, r3
 80111aa:	f7fe fc83 	bl	800fab4 <ld_dword>
 80111ae:	4602      	mov	r2, r0
 80111b0:	4b05      	ldr	r3, [pc, #20]	; (80111c8 <check_fs+0xa8>)
 80111b2:	429a      	cmp	r2, r3
 80111b4:	d101      	bne.n	80111ba <check_fs+0x9a>
 80111b6:	2300      	movs	r3, #0
 80111b8:	e000      	b.n	80111bc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80111ba:	2302      	movs	r3, #2
}
 80111bc:	4618      	mov	r0, r3
 80111be:	3708      	adds	r7, #8
 80111c0:	46bd      	mov	sp, r7
 80111c2:	bd80      	pop	{r7, pc}
 80111c4:	00544146 	.word	0x00544146
 80111c8:	33544146 	.word	0x33544146

080111cc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80111cc:	b580      	push	{r7, lr}
 80111ce:	b096      	sub	sp, #88	; 0x58
 80111d0:	af00      	add	r7, sp, #0
 80111d2:	60f8      	str	r0, [r7, #12]
 80111d4:	60b9      	str	r1, [r7, #8]
 80111d6:	4613      	mov	r3, r2
 80111d8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80111da:	68bb      	ldr	r3, [r7, #8]
 80111dc:	2200      	movs	r2, #0
 80111de:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80111e0:	68f8      	ldr	r0, [r7, #12]
 80111e2:	f7ff ff58 	bl	8011096 <get_ldnumber>
 80111e6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80111e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	da01      	bge.n	80111f2 <find_volume+0x26>
 80111ee:	230b      	movs	r3, #11
 80111f0:	e236      	b.n	8011660 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80111f2:	4aac      	ldr	r2, [pc, #688]	; (80114a4 <find_volume+0x2d8>)
 80111f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80111f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80111fa:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80111fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d101      	bne.n	8011206 <find_volume+0x3a>
 8011202:	230c      	movs	r3, #12
 8011204:	e22c      	b.n	8011660 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 8011206:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011208:	f7fe fd3b 	bl	800fc82 <lock_fs>
 801120c:	4603      	mov	r3, r0
 801120e:	2b00      	cmp	r3, #0
 8011210:	d101      	bne.n	8011216 <find_volume+0x4a>
 8011212:	230f      	movs	r3, #15
 8011214:	e224      	b.n	8011660 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 8011216:	68bb      	ldr	r3, [r7, #8]
 8011218:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801121a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801121c:	79fb      	ldrb	r3, [r7, #7]
 801121e:	f023 0301 	bic.w	r3, r3, #1
 8011222:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8011224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011226:	781b      	ldrb	r3, [r3, #0]
 8011228:	2b00      	cmp	r3, #0
 801122a:	d01a      	beq.n	8011262 <find_volume+0x96>
		stat = disk_status(fs->drv);
 801122c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801122e:	785b      	ldrb	r3, [r3, #1]
 8011230:	4618      	mov	r0, r3
 8011232:	f7fe fb89 	bl	800f948 <disk_status>
 8011236:	4603      	mov	r3, r0
 8011238:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801123c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011240:	f003 0301 	and.w	r3, r3, #1
 8011244:	2b00      	cmp	r3, #0
 8011246:	d10c      	bne.n	8011262 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8011248:	79fb      	ldrb	r3, [r7, #7]
 801124a:	2b00      	cmp	r3, #0
 801124c:	d007      	beq.n	801125e <find_volume+0x92>
 801124e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011252:	f003 0304 	and.w	r3, r3, #4
 8011256:	2b00      	cmp	r3, #0
 8011258:	d001      	beq.n	801125e <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 801125a:	230a      	movs	r3, #10
 801125c:	e200      	b.n	8011660 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 801125e:	2300      	movs	r3, #0
 8011260:	e1fe      	b.n	8011660 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8011262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011264:	2200      	movs	r2, #0
 8011266:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8011268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801126a:	b2da      	uxtb	r2, r3
 801126c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801126e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8011270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011272:	785b      	ldrb	r3, [r3, #1]
 8011274:	4618      	mov	r0, r3
 8011276:	f7fe fb81 	bl	800f97c <disk_initialize>
 801127a:	4603      	mov	r3, r0
 801127c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8011280:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011284:	f003 0301 	and.w	r3, r3, #1
 8011288:	2b00      	cmp	r3, #0
 801128a:	d001      	beq.n	8011290 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801128c:	2303      	movs	r3, #3
 801128e:	e1e7      	b.n	8011660 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8011290:	79fb      	ldrb	r3, [r7, #7]
 8011292:	2b00      	cmp	r3, #0
 8011294:	d007      	beq.n	80112a6 <find_volume+0xda>
 8011296:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801129a:	f003 0304 	and.w	r3, r3, #4
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d001      	beq.n	80112a6 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 80112a2:	230a      	movs	r3, #10
 80112a4:	e1dc      	b.n	8011660 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80112a6:	2300      	movs	r3, #0
 80112a8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80112aa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80112ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80112ae:	f7ff ff37 	bl	8011120 <check_fs>
 80112b2:	4603      	mov	r3, r0
 80112b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80112b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80112bc:	2b02      	cmp	r3, #2
 80112be:	d14b      	bne.n	8011358 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80112c0:	2300      	movs	r3, #0
 80112c2:	643b      	str	r3, [r7, #64]	; 0x40
 80112c4:	e01f      	b.n	8011306 <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80112c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112c8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80112cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80112ce:	011b      	lsls	r3, r3, #4
 80112d0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80112d4:	4413      	add	r3, r2
 80112d6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80112d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112da:	3304      	adds	r3, #4
 80112dc:	781b      	ldrb	r3, [r3, #0]
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d006      	beq.n	80112f0 <find_volume+0x124>
 80112e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112e4:	3308      	adds	r3, #8
 80112e6:	4618      	mov	r0, r3
 80112e8:	f7fe fbe4 	bl	800fab4 <ld_dword>
 80112ec:	4602      	mov	r2, r0
 80112ee:	e000      	b.n	80112f2 <find_volume+0x126>
 80112f0:	2200      	movs	r2, #0
 80112f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80112f4:	009b      	lsls	r3, r3, #2
 80112f6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80112fa:	440b      	add	r3, r1
 80112fc:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011300:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011302:	3301      	adds	r3, #1
 8011304:	643b      	str	r3, [r7, #64]	; 0x40
 8011306:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011308:	2b03      	cmp	r3, #3
 801130a:	d9dc      	bls.n	80112c6 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801130c:	2300      	movs	r3, #0
 801130e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8011310:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011312:	2b00      	cmp	r3, #0
 8011314:	d002      	beq.n	801131c <find_volume+0x150>
 8011316:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011318:	3b01      	subs	r3, #1
 801131a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801131c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801131e:	009b      	lsls	r3, r3, #2
 8011320:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8011324:	4413      	add	r3, r2
 8011326:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801132a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801132c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801132e:	2b00      	cmp	r3, #0
 8011330:	d005      	beq.n	801133e <find_volume+0x172>
 8011332:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011334:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011336:	f7ff fef3 	bl	8011120 <check_fs>
 801133a:	4603      	mov	r3, r0
 801133c:	e000      	b.n	8011340 <find_volume+0x174>
 801133e:	2303      	movs	r3, #3
 8011340:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8011344:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011348:	2b01      	cmp	r3, #1
 801134a:	d905      	bls.n	8011358 <find_volume+0x18c>
 801134c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801134e:	3301      	adds	r3, #1
 8011350:	643b      	str	r3, [r7, #64]	; 0x40
 8011352:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011354:	2b03      	cmp	r3, #3
 8011356:	d9e1      	bls.n	801131c <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8011358:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801135c:	2b04      	cmp	r3, #4
 801135e:	d101      	bne.n	8011364 <find_volume+0x198>
 8011360:	2301      	movs	r3, #1
 8011362:	e17d      	b.n	8011660 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8011364:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011368:	2b01      	cmp	r3, #1
 801136a:	d901      	bls.n	8011370 <find_volume+0x1a4>
 801136c:	230d      	movs	r3, #13
 801136e:	e177      	b.n	8011660 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8011370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011372:	3334      	adds	r3, #52	; 0x34
 8011374:	330b      	adds	r3, #11
 8011376:	4618      	mov	r0, r3
 8011378:	f7fe fb84 	bl	800fa84 <ld_word>
 801137c:	4603      	mov	r3, r0
 801137e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011382:	d001      	beq.n	8011388 <find_volume+0x1bc>
 8011384:	230d      	movs	r3, #13
 8011386:	e16b      	b.n	8011660 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8011388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801138a:	3334      	adds	r3, #52	; 0x34
 801138c:	3316      	adds	r3, #22
 801138e:	4618      	mov	r0, r3
 8011390:	f7fe fb78 	bl	800fa84 <ld_word>
 8011394:	4603      	mov	r3, r0
 8011396:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8011398:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801139a:	2b00      	cmp	r3, #0
 801139c:	d106      	bne.n	80113ac <find_volume+0x1e0>
 801139e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113a0:	3334      	adds	r3, #52	; 0x34
 80113a2:	3324      	adds	r3, #36	; 0x24
 80113a4:	4618      	mov	r0, r3
 80113a6:	f7fe fb85 	bl	800fab4 <ld_dword>
 80113aa:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80113ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80113b0:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80113b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113b4:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80113b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113ba:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80113bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113be:	789b      	ldrb	r3, [r3, #2]
 80113c0:	2b01      	cmp	r3, #1
 80113c2:	d005      	beq.n	80113d0 <find_volume+0x204>
 80113c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113c6:	789b      	ldrb	r3, [r3, #2]
 80113c8:	2b02      	cmp	r3, #2
 80113ca:	d001      	beq.n	80113d0 <find_volume+0x204>
 80113cc:	230d      	movs	r3, #13
 80113ce:	e147      	b.n	8011660 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80113d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113d2:	789b      	ldrb	r3, [r3, #2]
 80113d4:	461a      	mov	r2, r3
 80113d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80113d8:	fb02 f303 	mul.w	r3, r2, r3
 80113dc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80113de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80113e4:	b29a      	uxth	r2, r3
 80113e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113e8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80113ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113ec:	895b      	ldrh	r3, [r3, #10]
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d008      	beq.n	8011404 <find_volume+0x238>
 80113f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113f4:	895b      	ldrh	r3, [r3, #10]
 80113f6:	461a      	mov	r2, r3
 80113f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113fa:	895b      	ldrh	r3, [r3, #10]
 80113fc:	3b01      	subs	r3, #1
 80113fe:	4013      	ands	r3, r2
 8011400:	2b00      	cmp	r3, #0
 8011402:	d001      	beq.n	8011408 <find_volume+0x23c>
 8011404:	230d      	movs	r3, #13
 8011406:	e12b      	b.n	8011660 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8011408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801140a:	3334      	adds	r3, #52	; 0x34
 801140c:	3311      	adds	r3, #17
 801140e:	4618      	mov	r0, r3
 8011410:	f7fe fb38 	bl	800fa84 <ld_word>
 8011414:	4603      	mov	r3, r0
 8011416:	461a      	mov	r2, r3
 8011418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801141a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801141c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801141e:	891b      	ldrh	r3, [r3, #8]
 8011420:	f003 030f 	and.w	r3, r3, #15
 8011424:	b29b      	uxth	r3, r3
 8011426:	2b00      	cmp	r3, #0
 8011428:	d001      	beq.n	801142e <find_volume+0x262>
 801142a:	230d      	movs	r3, #13
 801142c:	e118      	b.n	8011660 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801142e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011430:	3334      	adds	r3, #52	; 0x34
 8011432:	3313      	adds	r3, #19
 8011434:	4618      	mov	r0, r3
 8011436:	f7fe fb25 	bl	800fa84 <ld_word>
 801143a:	4603      	mov	r3, r0
 801143c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801143e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011440:	2b00      	cmp	r3, #0
 8011442:	d106      	bne.n	8011452 <find_volume+0x286>
 8011444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011446:	3334      	adds	r3, #52	; 0x34
 8011448:	3320      	adds	r3, #32
 801144a:	4618      	mov	r0, r3
 801144c:	f7fe fb32 	bl	800fab4 <ld_dword>
 8011450:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8011452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011454:	3334      	adds	r3, #52	; 0x34
 8011456:	330e      	adds	r3, #14
 8011458:	4618      	mov	r0, r3
 801145a:	f7fe fb13 	bl	800fa84 <ld_word>
 801145e:	4603      	mov	r3, r0
 8011460:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8011462:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011464:	2b00      	cmp	r3, #0
 8011466:	d101      	bne.n	801146c <find_volume+0x2a0>
 8011468:	230d      	movs	r3, #13
 801146a:	e0f9      	b.n	8011660 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801146c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801146e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011470:	4413      	add	r3, r2
 8011472:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011474:	8912      	ldrh	r2, [r2, #8]
 8011476:	0912      	lsrs	r2, r2, #4
 8011478:	b292      	uxth	r2, r2
 801147a:	4413      	add	r3, r2
 801147c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801147e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011482:	429a      	cmp	r2, r3
 8011484:	d201      	bcs.n	801148a <find_volume+0x2be>
 8011486:	230d      	movs	r3, #13
 8011488:	e0ea      	b.n	8011660 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801148a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801148c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801148e:	1ad3      	subs	r3, r2, r3
 8011490:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011492:	8952      	ldrh	r2, [r2, #10]
 8011494:	fbb3 f3f2 	udiv	r3, r3, r2
 8011498:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801149a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801149c:	2b00      	cmp	r3, #0
 801149e:	d103      	bne.n	80114a8 <find_volume+0x2dc>
 80114a0:	230d      	movs	r3, #13
 80114a2:	e0dd      	b.n	8011660 <find_volume+0x494>
 80114a4:	20000334 	.word	0x20000334
		fmt = FS_FAT32;
 80114a8:	2303      	movs	r3, #3
 80114aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80114ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114b0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80114b4:	4293      	cmp	r3, r2
 80114b6:	d802      	bhi.n	80114be <find_volume+0x2f2>
 80114b8:	2302      	movs	r3, #2
 80114ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80114be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114c0:	f640 72f5 	movw	r2, #4085	; 0xff5
 80114c4:	4293      	cmp	r3, r2
 80114c6:	d802      	bhi.n	80114ce <find_volume+0x302>
 80114c8:	2301      	movs	r3, #1
 80114ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80114ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114d0:	1c9a      	adds	r2, r3, #2
 80114d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114d4:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80114d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80114da:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80114dc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80114de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80114e0:	441a      	add	r2, r3
 80114e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114e4:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80114e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80114e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114ea:	441a      	add	r2, r3
 80114ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114ee:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 80114f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80114f4:	2b03      	cmp	r3, #3
 80114f6:	d11e      	bne.n	8011536 <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80114f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114fa:	3334      	adds	r3, #52	; 0x34
 80114fc:	332a      	adds	r3, #42	; 0x2a
 80114fe:	4618      	mov	r0, r3
 8011500:	f7fe fac0 	bl	800fa84 <ld_word>
 8011504:	4603      	mov	r3, r0
 8011506:	2b00      	cmp	r3, #0
 8011508:	d001      	beq.n	801150e <find_volume+0x342>
 801150a:	230d      	movs	r3, #13
 801150c:	e0a8      	b.n	8011660 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801150e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011510:	891b      	ldrh	r3, [r3, #8]
 8011512:	2b00      	cmp	r3, #0
 8011514:	d001      	beq.n	801151a <find_volume+0x34e>
 8011516:	230d      	movs	r3, #13
 8011518:	e0a2      	b.n	8011660 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801151a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801151c:	3334      	adds	r3, #52	; 0x34
 801151e:	332c      	adds	r3, #44	; 0x2c
 8011520:	4618      	mov	r0, r3
 8011522:	f7fe fac7 	bl	800fab4 <ld_dword>
 8011526:	4602      	mov	r2, r0
 8011528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801152a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801152c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801152e:	699b      	ldr	r3, [r3, #24]
 8011530:	009b      	lsls	r3, r3, #2
 8011532:	647b      	str	r3, [r7, #68]	; 0x44
 8011534:	e01f      	b.n	8011576 <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8011536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011538:	891b      	ldrh	r3, [r3, #8]
 801153a:	2b00      	cmp	r3, #0
 801153c:	d101      	bne.n	8011542 <find_volume+0x376>
 801153e:	230d      	movs	r3, #13
 8011540:	e08e      	b.n	8011660 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8011542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011544:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011546:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011548:	441a      	add	r2, r3
 801154a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801154c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801154e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011552:	2b02      	cmp	r3, #2
 8011554:	d103      	bne.n	801155e <find_volume+0x392>
 8011556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011558:	699b      	ldr	r3, [r3, #24]
 801155a:	005b      	lsls	r3, r3, #1
 801155c:	e00a      	b.n	8011574 <find_volume+0x3a8>
 801155e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011560:	699a      	ldr	r2, [r3, #24]
 8011562:	4613      	mov	r3, r2
 8011564:	005b      	lsls	r3, r3, #1
 8011566:	4413      	add	r3, r2
 8011568:	085a      	lsrs	r2, r3, #1
 801156a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801156c:	699b      	ldr	r3, [r3, #24]
 801156e:	f003 0301 	and.w	r3, r3, #1
 8011572:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8011574:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8011576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011578:	69da      	ldr	r2, [r3, #28]
 801157a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801157c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8011580:	0a5b      	lsrs	r3, r3, #9
 8011582:	429a      	cmp	r2, r3
 8011584:	d201      	bcs.n	801158a <find_volume+0x3be>
 8011586:	230d      	movs	r3, #13
 8011588:	e06a      	b.n	8011660 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801158a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801158c:	f04f 32ff 	mov.w	r2, #4294967295
 8011590:	615a      	str	r2, [r3, #20]
 8011592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011594:	695a      	ldr	r2, [r3, #20]
 8011596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011598:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 801159a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801159c:	2280      	movs	r2, #128	; 0x80
 801159e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80115a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80115a4:	2b03      	cmp	r3, #3
 80115a6:	d149      	bne.n	801163c <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80115a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115aa:	3334      	adds	r3, #52	; 0x34
 80115ac:	3330      	adds	r3, #48	; 0x30
 80115ae:	4618      	mov	r0, r3
 80115b0:	f7fe fa68 	bl	800fa84 <ld_word>
 80115b4:	4603      	mov	r3, r0
 80115b6:	2b01      	cmp	r3, #1
 80115b8:	d140      	bne.n	801163c <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 80115ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80115bc:	3301      	adds	r3, #1
 80115be:	4619      	mov	r1, r3
 80115c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80115c2:	f7fe fd3f 	bl	8010044 <move_window>
 80115c6:	4603      	mov	r3, r0
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d137      	bne.n	801163c <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 80115cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115ce:	2200      	movs	r2, #0
 80115d0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80115d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115d4:	3334      	adds	r3, #52	; 0x34
 80115d6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80115da:	4618      	mov	r0, r3
 80115dc:	f7fe fa52 	bl	800fa84 <ld_word>
 80115e0:	4603      	mov	r3, r0
 80115e2:	461a      	mov	r2, r3
 80115e4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80115e8:	429a      	cmp	r2, r3
 80115ea:	d127      	bne.n	801163c <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80115ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115ee:	3334      	adds	r3, #52	; 0x34
 80115f0:	4618      	mov	r0, r3
 80115f2:	f7fe fa5f 	bl	800fab4 <ld_dword>
 80115f6:	4602      	mov	r2, r0
 80115f8:	4b1b      	ldr	r3, [pc, #108]	; (8011668 <find_volume+0x49c>)
 80115fa:	429a      	cmp	r2, r3
 80115fc:	d11e      	bne.n	801163c <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80115fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011600:	3334      	adds	r3, #52	; 0x34
 8011602:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011606:	4618      	mov	r0, r3
 8011608:	f7fe fa54 	bl	800fab4 <ld_dword>
 801160c:	4602      	mov	r2, r0
 801160e:	4b17      	ldr	r3, [pc, #92]	; (801166c <find_volume+0x4a0>)
 8011610:	429a      	cmp	r2, r3
 8011612:	d113      	bne.n	801163c <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8011614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011616:	3334      	adds	r3, #52	; 0x34
 8011618:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801161c:	4618      	mov	r0, r3
 801161e:	f7fe fa49 	bl	800fab4 <ld_dword>
 8011622:	4602      	mov	r2, r0
 8011624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011626:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8011628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801162a:	3334      	adds	r3, #52	; 0x34
 801162c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8011630:	4618      	mov	r0, r3
 8011632:	f7fe fa3f 	bl	800fab4 <ld_dword>
 8011636:	4602      	mov	r2, r0
 8011638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801163a:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801163c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801163e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8011642:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8011644:	4b0a      	ldr	r3, [pc, #40]	; (8011670 <find_volume+0x4a4>)
 8011646:	881b      	ldrh	r3, [r3, #0]
 8011648:	3301      	adds	r3, #1
 801164a:	b29a      	uxth	r2, r3
 801164c:	4b08      	ldr	r3, [pc, #32]	; (8011670 <find_volume+0x4a4>)
 801164e:	801a      	strh	r2, [r3, #0]
 8011650:	4b07      	ldr	r3, [pc, #28]	; (8011670 <find_volume+0x4a4>)
 8011652:	881a      	ldrh	r2, [r3, #0]
 8011654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011656:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8011658:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801165a:	f7fe fc8b 	bl	800ff74 <clear_lock>
#endif
	return FR_OK;
 801165e:	2300      	movs	r3, #0
}
 8011660:	4618      	mov	r0, r3
 8011662:	3758      	adds	r7, #88	; 0x58
 8011664:	46bd      	mov	sp, r7
 8011666:	bd80      	pop	{r7, pc}
 8011668:	41615252 	.word	0x41615252
 801166c:	61417272 	.word	0x61417272
 8011670:	20000338 	.word	0x20000338

08011674 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8011674:	b580      	push	{r7, lr}
 8011676:	b084      	sub	sp, #16
 8011678:	af00      	add	r7, sp, #0
 801167a:	6078      	str	r0, [r7, #4]
 801167c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801167e:	2309      	movs	r3, #9
 8011680:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	2b00      	cmp	r3, #0
 8011686:	d02e      	beq.n	80116e6 <validate+0x72>
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	681b      	ldr	r3, [r3, #0]
 801168c:	2b00      	cmp	r3, #0
 801168e:	d02a      	beq.n	80116e6 <validate+0x72>
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	781b      	ldrb	r3, [r3, #0]
 8011696:	2b00      	cmp	r3, #0
 8011698:	d025      	beq.n	80116e6 <validate+0x72>
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	889a      	ldrh	r2, [r3, #4]
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	88db      	ldrh	r3, [r3, #6]
 80116a4:	429a      	cmp	r2, r3
 80116a6:	d11e      	bne.n	80116e6 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	4618      	mov	r0, r3
 80116ae:	f7fe fae8 	bl	800fc82 <lock_fs>
 80116b2:	4603      	mov	r3, r0
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d014      	beq.n	80116e2 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	681b      	ldr	r3, [r3, #0]
 80116bc:	785b      	ldrb	r3, [r3, #1]
 80116be:	4618      	mov	r0, r3
 80116c0:	f7fe f942 	bl	800f948 <disk_status>
 80116c4:	4603      	mov	r3, r0
 80116c6:	f003 0301 	and.w	r3, r3, #1
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d102      	bne.n	80116d4 <validate+0x60>
				res = FR_OK;
 80116ce:	2300      	movs	r3, #0
 80116d0:	73fb      	strb	r3, [r7, #15]
 80116d2:	e008      	b.n	80116e6 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	681b      	ldr	r3, [r3, #0]
 80116d8:	2100      	movs	r1, #0
 80116da:	4618      	mov	r0, r3
 80116dc:	f7fe fae7 	bl	800fcae <unlock_fs>
 80116e0:	e001      	b.n	80116e6 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 80116e2:	230f      	movs	r3, #15
 80116e4:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80116e6:	7bfb      	ldrb	r3, [r7, #15]
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d102      	bne.n	80116f2 <validate+0x7e>
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	681b      	ldr	r3, [r3, #0]
 80116f0:	e000      	b.n	80116f4 <validate+0x80>
 80116f2:	2300      	movs	r3, #0
 80116f4:	683a      	ldr	r2, [r7, #0]
 80116f6:	6013      	str	r3, [r2, #0]
	return res;
 80116f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80116fa:	4618      	mov	r0, r3
 80116fc:	3710      	adds	r7, #16
 80116fe:	46bd      	mov	sp, r7
 8011700:	bd80      	pop	{r7, pc}
	...

08011704 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8011704:	b580      	push	{r7, lr}
 8011706:	b088      	sub	sp, #32
 8011708:	af00      	add	r7, sp, #0
 801170a:	60f8      	str	r0, [r7, #12]
 801170c:	60b9      	str	r1, [r7, #8]
 801170e:	4613      	mov	r3, r2
 8011710:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8011712:	68bb      	ldr	r3, [r7, #8]
 8011714:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8011716:	f107 0310 	add.w	r3, r7, #16
 801171a:	4618      	mov	r0, r3
 801171c:	f7ff fcbb 	bl	8011096 <get_ldnumber>
 8011720:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8011722:	69fb      	ldr	r3, [r7, #28]
 8011724:	2b00      	cmp	r3, #0
 8011726:	da01      	bge.n	801172c <f_mount+0x28>
 8011728:	230b      	movs	r3, #11
 801172a:	e048      	b.n	80117be <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801172c:	4a26      	ldr	r2, [pc, #152]	; (80117c8 <f_mount+0xc4>)
 801172e:	69fb      	ldr	r3, [r7, #28]
 8011730:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011734:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8011736:	69bb      	ldr	r3, [r7, #24]
 8011738:	2b00      	cmp	r3, #0
 801173a:	d00f      	beq.n	801175c <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801173c:	69b8      	ldr	r0, [r7, #24]
 801173e:	f7fe fc19 	bl	800ff74 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8011742:	69bb      	ldr	r3, [r7, #24]
 8011744:	68db      	ldr	r3, [r3, #12]
 8011746:	4618      	mov	r0, r3
 8011748:	f001 f828 	bl	801279c <ff_del_syncobj>
 801174c:	4603      	mov	r3, r0
 801174e:	2b00      	cmp	r3, #0
 8011750:	d101      	bne.n	8011756 <f_mount+0x52>
 8011752:	2302      	movs	r3, #2
 8011754:	e033      	b.n	80117be <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8011756:	69bb      	ldr	r3, [r7, #24]
 8011758:	2200      	movs	r2, #0
 801175a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801175c:	68fb      	ldr	r3, [r7, #12]
 801175e:	2b00      	cmp	r3, #0
 8011760:	d00f      	beq.n	8011782 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8011762:	68fb      	ldr	r3, [r7, #12]
 8011764:	2200      	movs	r2, #0
 8011766:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8011768:	69fb      	ldr	r3, [r7, #28]
 801176a:	b2da      	uxtb	r2, r3
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	330c      	adds	r3, #12
 8011770:	4619      	mov	r1, r3
 8011772:	4610      	mov	r0, r2
 8011774:	f000 fff7 	bl	8012766 <ff_cre_syncobj>
 8011778:	4603      	mov	r3, r0
 801177a:	2b00      	cmp	r3, #0
 801177c:	d101      	bne.n	8011782 <f_mount+0x7e>
 801177e:	2302      	movs	r3, #2
 8011780:	e01d      	b.n	80117be <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8011782:	68fa      	ldr	r2, [r7, #12]
 8011784:	4910      	ldr	r1, [pc, #64]	; (80117c8 <f_mount+0xc4>)
 8011786:	69fb      	ldr	r3, [r7, #28]
 8011788:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	2b00      	cmp	r3, #0
 8011790:	d002      	beq.n	8011798 <f_mount+0x94>
 8011792:	79fb      	ldrb	r3, [r7, #7]
 8011794:	2b01      	cmp	r3, #1
 8011796:	d001      	beq.n	801179c <f_mount+0x98>
 8011798:	2300      	movs	r3, #0
 801179a:	e010      	b.n	80117be <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801179c:	f107 010c 	add.w	r1, r7, #12
 80117a0:	f107 0308 	add.w	r3, r7, #8
 80117a4:	2200      	movs	r2, #0
 80117a6:	4618      	mov	r0, r3
 80117a8:	f7ff fd10 	bl	80111cc <find_volume>
 80117ac:	4603      	mov	r3, r0
 80117ae:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80117b0:	68fb      	ldr	r3, [r7, #12]
 80117b2:	7dfa      	ldrb	r2, [r7, #23]
 80117b4:	4611      	mov	r1, r2
 80117b6:	4618      	mov	r0, r3
 80117b8:	f7fe fa79 	bl	800fcae <unlock_fs>
 80117bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80117be:	4618      	mov	r0, r3
 80117c0:	3720      	adds	r7, #32
 80117c2:	46bd      	mov	sp, r7
 80117c4:	bd80      	pop	{r7, pc}
 80117c6:	bf00      	nop
 80117c8:	20000334 	.word	0x20000334

080117cc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80117cc:	b580      	push	{r7, lr}
 80117ce:	b09a      	sub	sp, #104	; 0x68
 80117d0:	af00      	add	r7, sp, #0
 80117d2:	60f8      	str	r0, [r7, #12]
 80117d4:	60b9      	str	r1, [r7, #8]
 80117d6:	4613      	mov	r3, r2
 80117d8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80117da:	68fb      	ldr	r3, [r7, #12]
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d101      	bne.n	80117e4 <f_open+0x18>
 80117e0:	2309      	movs	r3, #9
 80117e2:	e1b4      	b.n	8011b4e <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80117e4:	79fb      	ldrb	r3, [r7, #7]
 80117e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80117ea:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80117ec:	79fa      	ldrb	r2, [r7, #7]
 80117ee:	f107 0114 	add.w	r1, r7, #20
 80117f2:	f107 0308 	add.w	r3, r7, #8
 80117f6:	4618      	mov	r0, r3
 80117f8:	f7ff fce8 	bl	80111cc <find_volume>
 80117fc:	4603      	mov	r3, r0
 80117fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8011802:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8011806:	2b00      	cmp	r3, #0
 8011808:	f040 8191 	bne.w	8011b2e <f_open+0x362>
		dj.obj.fs = fs;
 801180c:	697b      	ldr	r3, [r7, #20]
 801180e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8011810:	68ba      	ldr	r2, [r7, #8]
 8011812:	f107 0318 	add.w	r3, r7, #24
 8011816:	4611      	mov	r1, r2
 8011818:	4618      	mov	r0, r3
 801181a:	f7ff fbcb 	bl	8010fb4 <follow_path>
 801181e:	4603      	mov	r3, r0
 8011820:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8011824:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8011828:	2b00      	cmp	r3, #0
 801182a:	d11a      	bne.n	8011862 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801182c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8011830:	b25b      	sxtb	r3, r3
 8011832:	2b00      	cmp	r3, #0
 8011834:	da03      	bge.n	801183e <f_open+0x72>
				res = FR_INVALID_NAME;
 8011836:	2306      	movs	r3, #6
 8011838:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801183c:	e011      	b.n	8011862 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801183e:	79fb      	ldrb	r3, [r7, #7]
 8011840:	f023 0301 	bic.w	r3, r3, #1
 8011844:	2b00      	cmp	r3, #0
 8011846:	bf14      	ite	ne
 8011848:	2301      	movne	r3, #1
 801184a:	2300      	moveq	r3, #0
 801184c:	b2db      	uxtb	r3, r3
 801184e:	461a      	mov	r2, r3
 8011850:	f107 0318 	add.w	r3, r7, #24
 8011854:	4611      	mov	r1, r2
 8011856:	4618      	mov	r0, r3
 8011858:	f7fe fa44 	bl	800fce4 <chk_lock>
 801185c:	4603      	mov	r3, r0
 801185e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8011862:	79fb      	ldrb	r3, [r7, #7]
 8011864:	f003 031c 	and.w	r3, r3, #28
 8011868:	2b00      	cmp	r3, #0
 801186a:	d07f      	beq.n	801196c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 801186c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8011870:	2b00      	cmp	r3, #0
 8011872:	d017      	beq.n	80118a4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8011874:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8011878:	2b04      	cmp	r3, #4
 801187a:	d10e      	bne.n	801189a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801187c:	f7fe fa8e 	bl	800fd9c <enq_lock>
 8011880:	4603      	mov	r3, r0
 8011882:	2b00      	cmp	r3, #0
 8011884:	d006      	beq.n	8011894 <f_open+0xc8>
 8011886:	f107 0318 	add.w	r3, r7, #24
 801188a:	4618      	mov	r0, r3
 801188c:	f7ff f9ca 	bl	8010c24 <dir_register>
 8011890:	4603      	mov	r3, r0
 8011892:	e000      	b.n	8011896 <f_open+0xca>
 8011894:	2312      	movs	r3, #18
 8011896:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801189a:	79fb      	ldrb	r3, [r7, #7]
 801189c:	f043 0308 	orr.w	r3, r3, #8
 80118a0:	71fb      	strb	r3, [r7, #7]
 80118a2:	e010      	b.n	80118c6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80118a4:	7fbb      	ldrb	r3, [r7, #30]
 80118a6:	f003 0311 	and.w	r3, r3, #17
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	d003      	beq.n	80118b6 <f_open+0xea>
					res = FR_DENIED;
 80118ae:	2307      	movs	r3, #7
 80118b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80118b4:	e007      	b.n	80118c6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80118b6:	79fb      	ldrb	r3, [r7, #7]
 80118b8:	f003 0304 	and.w	r3, r3, #4
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d002      	beq.n	80118c6 <f_open+0xfa>
 80118c0:	2308      	movs	r3, #8
 80118c2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80118c6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d168      	bne.n	80119a0 <f_open+0x1d4>
 80118ce:	79fb      	ldrb	r3, [r7, #7]
 80118d0:	f003 0308 	and.w	r3, r3, #8
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d063      	beq.n	80119a0 <f_open+0x1d4>
				dw = GET_FATTIME();
 80118d8:	f7fc f9e4 	bl	800dca4 <get_fattime>
 80118dc:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80118de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118e0:	330e      	adds	r3, #14
 80118e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80118e4:	4618      	mov	r0, r3
 80118e6:	f7fe f923 	bl	800fb30 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80118ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118ec:	3316      	adds	r3, #22
 80118ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80118f0:	4618      	mov	r0, r3
 80118f2:	f7fe f91d 	bl	800fb30 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80118f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118f8:	330b      	adds	r3, #11
 80118fa:	2220      	movs	r2, #32
 80118fc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80118fe:	697b      	ldr	r3, [r7, #20]
 8011900:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011902:	4611      	mov	r1, r2
 8011904:	4618      	mov	r0, r3
 8011906:	f7ff f89c 	bl	8010a42 <ld_clust>
 801190a:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801190c:	697b      	ldr	r3, [r7, #20]
 801190e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011910:	2200      	movs	r2, #0
 8011912:	4618      	mov	r0, r3
 8011914:	f7ff f8b4 	bl	8010a80 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8011918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801191a:	331c      	adds	r3, #28
 801191c:	2100      	movs	r1, #0
 801191e:	4618      	mov	r0, r3
 8011920:	f7fe f906 	bl	800fb30 <st_dword>
					fs->wflag = 1;
 8011924:	697b      	ldr	r3, [r7, #20]
 8011926:	2201      	movs	r2, #1
 8011928:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801192a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801192c:	2b00      	cmp	r3, #0
 801192e:	d037      	beq.n	80119a0 <f_open+0x1d4>
						dw = fs->winsect;
 8011930:	697b      	ldr	r3, [r7, #20]
 8011932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011934:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8011936:	f107 0318 	add.w	r3, r7, #24
 801193a:	2200      	movs	r2, #0
 801193c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801193e:	4618      	mov	r0, r3
 8011940:	f7fe fdc7 	bl	80104d2 <remove_chain>
 8011944:	4603      	mov	r3, r0
 8011946:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 801194a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801194e:	2b00      	cmp	r3, #0
 8011950:	d126      	bne.n	80119a0 <f_open+0x1d4>
							res = move_window(fs, dw);
 8011952:	697b      	ldr	r3, [r7, #20]
 8011954:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011956:	4618      	mov	r0, r3
 8011958:	f7fe fb74 	bl	8010044 <move_window>
 801195c:	4603      	mov	r3, r0
 801195e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8011962:	697b      	ldr	r3, [r7, #20]
 8011964:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011966:	3a01      	subs	r2, #1
 8011968:	611a      	str	r2, [r3, #16]
 801196a:	e019      	b.n	80119a0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801196c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8011970:	2b00      	cmp	r3, #0
 8011972:	d115      	bne.n	80119a0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8011974:	7fbb      	ldrb	r3, [r7, #30]
 8011976:	f003 0310 	and.w	r3, r3, #16
 801197a:	2b00      	cmp	r3, #0
 801197c:	d003      	beq.n	8011986 <f_open+0x1ba>
					res = FR_NO_FILE;
 801197e:	2304      	movs	r3, #4
 8011980:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8011984:	e00c      	b.n	80119a0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8011986:	79fb      	ldrb	r3, [r7, #7]
 8011988:	f003 0302 	and.w	r3, r3, #2
 801198c:	2b00      	cmp	r3, #0
 801198e:	d007      	beq.n	80119a0 <f_open+0x1d4>
 8011990:	7fbb      	ldrb	r3, [r7, #30]
 8011992:	f003 0301 	and.w	r3, r3, #1
 8011996:	2b00      	cmp	r3, #0
 8011998:	d002      	beq.n	80119a0 <f_open+0x1d4>
						res = FR_DENIED;
 801199a:	2307      	movs	r3, #7
 801199c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80119a0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d128      	bne.n	80119fa <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80119a8:	79fb      	ldrb	r3, [r7, #7]
 80119aa:	f003 0308 	and.w	r3, r3, #8
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d003      	beq.n	80119ba <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80119b2:	79fb      	ldrb	r3, [r7, #7]
 80119b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80119b8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80119ba:	697b      	ldr	r3, [r7, #20]
 80119bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80119be:	68fb      	ldr	r3, [r7, #12]
 80119c0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80119c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80119c4:	68fb      	ldr	r3, [r7, #12]
 80119c6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80119c8:	79fb      	ldrb	r3, [r7, #7]
 80119ca:	f023 0301 	bic.w	r3, r3, #1
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	bf14      	ite	ne
 80119d2:	2301      	movne	r3, #1
 80119d4:	2300      	moveq	r3, #0
 80119d6:	b2db      	uxtb	r3, r3
 80119d8:	461a      	mov	r2, r3
 80119da:	f107 0318 	add.w	r3, r7, #24
 80119de:	4611      	mov	r1, r2
 80119e0:	4618      	mov	r0, r3
 80119e2:	f7fe f9fd 	bl	800fde0 <inc_lock>
 80119e6:	4602      	mov	r2, r0
 80119e8:	68fb      	ldr	r3, [r7, #12]
 80119ea:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80119ec:	68fb      	ldr	r3, [r7, #12]
 80119ee:	691b      	ldr	r3, [r3, #16]
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d102      	bne.n	80119fa <f_open+0x22e>
 80119f4:	2302      	movs	r3, #2
 80119f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80119fa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	f040 8095 	bne.w	8011b2e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8011a04:	697b      	ldr	r3, [r7, #20]
 8011a06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011a08:	4611      	mov	r1, r2
 8011a0a:	4618      	mov	r0, r3
 8011a0c:	f7ff f819 	bl	8010a42 <ld_clust>
 8011a10:	4602      	mov	r2, r0
 8011a12:	68fb      	ldr	r3, [r7, #12]
 8011a14:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8011a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a18:	331c      	adds	r3, #28
 8011a1a:	4618      	mov	r0, r3
 8011a1c:	f7fe f84a 	bl	800fab4 <ld_dword>
 8011a20:	4602      	mov	r2, r0
 8011a22:	68fb      	ldr	r3, [r7, #12]
 8011a24:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8011a26:	68fb      	ldr	r3, [r7, #12]
 8011a28:	2200      	movs	r2, #0
 8011a2a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8011a2c:	697a      	ldr	r2, [r7, #20]
 8011a2e:	68fb      	ldr	r3, [r7, #12]
 8011a30:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8011a32:	697b      	ldr	r3, [r7, #20]
 8011a34:	88da      	ldrh	r2, [r3, #6]
 8011a36:	68fb      	ldr	r3, [r7, #12]
 8011a38:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8011a3a:	68fb      	ldr	r3, [r7, #12]
 8011a3c:	79fa      	ldrb	r2, [r7, #7]
 8011a3e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8011a40:	68fb      	ldr	r3, [r7, #12]
 8011a42:	2200      	movs	r2, #0
 8011a44:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8011a46:	68fb      	ldr	r3, [r7, #12]
 8011a48:	2200      	movs	r2, #0
 8011a4a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8011a4c:	68fb      	ldr	r3, [r7, #12]
 8011a4e:	2200      	movs	r2, #0
 8011a50:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8011a52:	68fb      	ldr	r3, [r7, #12]
 8011a54:	3330      	adds	r3, #48	; 0x30
 8011a56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011a5a:	2100      	movs	r1, #0
 8011a5c:	4618      	mov	r0, r3
 8011a5e:	f7fe f8b4 	bl	800fbca <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8011a62:	79fb      	ldrb	r3, [r7, #7]
 8011a64:	f003 0320 	and.w	r3, r3, #32
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d060      	beq.n	8011b2e <f_open+0x362>
 8011a6c:	68fb      	ldr	r3, [r7, #12]
 8011a6e:	68db      	ldr	r3, [r3, #12]
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d05c      	beq.n	8011b2e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8011a74:	68fb      	ldr	r3, [r7, #12]
 8011a76:	68da      	ldr	r2, [r3, #12]
 8011a78:	68fb      	ldr	r3, [r7, #12]
 8011a7a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8011a7c:	697b      	ldr	r3, [r7, #20]
 8011a7e:	895b      	ldrh	r3, [r3, #10]
 8011a80:	025b      	lsls	r3, r3, #9
 8011a82:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8011a84:	68fb      	ldr	r3, [r7, #12]
 8011a86:	689b      	ldr	r3, [r3, #8]
 8011a88:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011a8a:	68fb      	ldr	r3, [r7, #12]
 8011a8c:	68db      	ldr	r3, [r3, #12]
 8011a8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011a90:	e016      	b.n	8011ac0 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8011a92:	68fb      	ldr	r3, [r7, #12]
 8011a94:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8011a96:	4618      	mov	r0, r3
 8011a98:	f7fe fb8f 	bl	80101ba <get_fat>
 8011a9c:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8011a9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011aa0:	2b01      	cmp	r3, #1
 8011aa2:	d802      	bhi.n	8011aaa <f_open+0x2de>
 8011aa4:	2302      	movs	r3, #2
 8011aa6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8011aaa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ab0:	d102      	bne.n	8011ab8 <f_open+0x2ec>
 8011ab2:	2301      	movs	r3, #1
 8011ab4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011ab8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011aba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011abc:	1ad3      	subs	r3, r2, r3
 8011abe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011ac0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d103      	bne.n	8011ad0 <f_open+0x304>
 8011ac8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011aca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011acc:	429a      	cmp	r2, r3
 8011ace:	d8e0      	bhi.n	8011a92 <f_open+0x2c6>
				}
				fp->clust = clst;
 8011ad0:	68fb      	ldr	r3, [r7, #12]
 8011ad2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011ad4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8011ad6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d127      	bne.n	8011b2e <f_open+0x362>
 8011ade:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011ae0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d022      	beq.n	8011b2e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8011ae8:	697b      	ldr	r3, [r7, #20]
 8011aea:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8011aec:	4618      	mov	r0, r3
 8011aee:	f7fe fb45 	bl	801017c <clust2sect>
 8011af2:	64f8      	str	r0, [r7, #76]	; 0x4c
 8011af4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d103      	bne.n	8011b02 <f_open+0x336>
						res = FR_INT_ERR;
 8011afa:	2302      	movs	r3, #2
 8011afc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8011b00:	e015      	b.n	8011b2e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8011b02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011b04:	0a5a      	lsrs	r2, r3, #9
 8011b06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b08:	441a      	add	r2, r3
 8011b0a:	68fb      	ldr	r3, [r7, #12]
 8011b0c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8011b0e:	697b      	ldr	r3, [r7, #20]
 8011b10:	7858      	ldrb	r0, [r3, #1]
 8011b12:	68fb      	ldr	r3, [r7, #12]
 8011b14:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011b18:	68fb      	ldr	r3, [r7, #12]
 8011b1a:	6a1a      	ldr	r2, [r3, #32]
 8011b1c:	2301      	movs	r3, #1
 8011b1e:	f7fd ff53 	bl	800f9c8 <disk_read>
 8011b22:	4603      	mov	r3, r0
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d002      	beq.n	8011b2e <f_open+0x362>
 8011b28:	2301      	movs	r3, #1
 8011b2a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8011b2e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	d002      	beq.n	8011b3c <f_open+0x370>
 8011b36:	68fb      	ldr	r3, [r7, #12]
 8011b38:	2200      	movs	r2, #0
 8011b3a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8011b3c:	697b      	ldr	r3, [r7, #20]
 8011b3e:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8011b42:	4611      	mov	r1, r2
 8011b44:	4618      	mov	r0, r3
 8011b46:	f7fe f8b2 	bl	800fcae <unlock_fs>
 8011b4a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8011b4e:	4618      	mov	r0, r3
 8011b50:	3768      	adds	r7, #104	; 0x68
 8011b52:	46bd      	mov	sp, r7
 8011b54:	bd80      	pop	{r7, pc}

08011b56 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8011b56:	b580      	push	{r7, lr}
 8011b58:	b08c      	sub	sp, #48	; 0x30
 8011b5a:	af00      	add	r7, sp, #0
 8011b5c:	60f8      	str	r0, [r7, #12]
 8011b5e:	60b9      	str	r1, [r7, #8]
 8011b60:	607a      	str	r2, [r7, #4]
 8011b62:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8011b64:	68bb      	ldr	r3, [r7, #8]
 8011b66:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8011b68:	683b      	ldr	r3, [r7, #0]
 8011b6a:	2200      	movs	r2, #0
 8011b6c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	f107 0210 	add.w	r2, r7, #16
 8011b74:	4611      	mov	r1, r2
 8011b76:	4618      	mov	r0, r3
 8011b78:	f7ff fd7c 	bl	8011674 <validate>
 8011b7c:	4603      	mov	r3, r0
 8011b7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8011b82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d107      	bne.n	8011b9a <f_write+0x44>
 8011b8a:	68fb      	ldr	r3, [r7, #12]
 8011b8c:	7d5b      	ldrb	r3, [r3, #21]
 8011b8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8011b92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d009      	beq.n	8011bae <f_write+0x58>
 8011b9a:	693b      	ldr	r3, [r7, #16]
 8011b9c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8011ba0:	4611      	mov	r1, r2
 8011ba2:	4618      	mov	r0, r3
 8011ba4:	f7fe f883 	bl	800fcae <unlock_fs>
 8011ba8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011bac:	e173      	b.n	8011e96 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	7d1b      	ldrb	r3, [r3, #20]
 8011bb2:	f003 0302 	and.w	r3, r3, #2
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	d106      	bne.n	8011bc8 <f_write+0x72>
 8011bba:	693b      	ldr	r3, [r7, #16]
 8011bbc:	2107      	movs	r1, #7
 8011bbe:	4618      	mov	r0, r3
 8011bc0:	f7fe f875 	bl	800fcae <unlock_fs>
 8011bc4:	2307      	movs	r3, #7
 8011bc6:	e166      	b.n	8011e96 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8011bc8:	68fb      	ldr	r3, [r7, #12]
 8011bca:	699a      	ldr	r2, [r3, #24]
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	441a      	add	r2, r3
 8011bd0:	68fb      	ldr	r3, [r7, #12]
 8011bd2:	699b      	ldr	r3, [r3, #24]
 8011bd4:	429a      	cmp	r2, r3
 8011bd6:	f080 814b 	bcs.w	8011e70 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8011bda:	68fb      	ldr	r3, [r7, #12]
 8011bdc:	699b      	ldr	r3, [r3, #24]
 8011bde:	43db      	mvns	r3, r3
 8011be0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8011be2:	e145      	b.n	8011e70 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8011be4:	68fb      	ldr	r3, [r7, #12]
 8011be6:	699b      	ldr	r3, [r3, #24]
 8011be8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	f040 8101 	bne.w	8011df4 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8011bf2:	68fb      	ldr	r3, [r7, #12]
 8011bf4:	699b      	ldr	r3, [r3, #24]
 8011bf6:	0a5b      	lsrs	r3, r3, #9
 8011bf8:	693a      	ldr	r2, [r7, #16]
 8011bfa:	8952      	ldrh	r2, [r2, #10]
 8011bfc:	3a01      	subs	r2, #1
 8011bfe:	4013      	ands	r3, r2
 8011c00:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8011c02:	69bb      	ldr	r3, [r7, #24]
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	d14d      	bne.n	8011ca4 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8011c08:	68fb      	ldr	r3, [r7, #12]
 8011c0a:	699b      	ldr	r3, [r3, #24]
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d10c      	bne.n	8011c2a <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8011c10:	68fb      	ldr	r3, [r7, #12]
 8011c12:	689b      	ldr	r3, [r3, #8]
 8011c14:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8011c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	d11a      	bne.n	8011c52 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8011c1c:	68fb      	ldr	r3, [r7, #12]
 8011c1e:	2100      	movs	r1, #0
 8011c20:	4618      	mov	r0, r3
 8011c22:	f7fe fcbb 	bl	801059c <create_chain>
 8011c26:	62b8      	str	r0, [r7, #40]	; 0x28
 8011c28:	e013      	b.n	8011c52 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8011c2a:	68fb      	ldr	r3, [r7, #12]
 8011c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d007      	beq.n	8011c42 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8011c32:	68fb      	ldr	r3, [r7, #12]
 8011c34:	699b      	ldr	r3, [r3, #24]
 8011c36:	4619      	mov	r1, r3
 8011c38:	68f8      	ldr	r0, [r7, #12]
 8011c3a:	f7fe fd47 	bl	80106cc <clmt_clust>
 8011c3e:	62b8      	str	r0, [r7, #40]	; 0x28
 8011c40:	e007      	b.n	8011c52 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8011c42:	68fa      	ldr	r2, [r7, #12]
 8011c44:	68fb      	ldr	r3, [r7, #12]
 8011c46:	69db      	ldr	r3, [r3, #28]
 8011c48:	4619      	mov	r1, r3
 8011c4a:	4610      	mov	r0, r2
 8011c4c:	f7fe fca6 	bl	801059c <create_chain>
 8011c50:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	f000 8110 	beq.w	8011e7a <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c5c:	2b01      	cmp	r3, #1
 8011c5e:	d109      	bne.n	8011c74 <f_write+0x11e>
 8011c60:	68fb      	ldr	r3, [r7, #12]
 8011c62:	2202      	movs	r2, #2
 8011c64:	755a      	strb	r2, [r3, #21]
 8011c66:	693b      	ldr	r3, [r7, #16]
 8011c68:	2102      	movs	r1, #2
 8011c6a:	4618      	mov	r0, r3
 8011c6c:	f7fe f81f 	bl	800fcae <unlock_fs>
 8011c70:	2302      	movs	r3, #2
 8011c72:	e110      	b.n	8011e96 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c7a:	d109      	bne.n	8011c90 <f_write+0x13a>
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	2201      	movs	r2, #1
 8011c80:	755a      	strb	r2, [r3, #21]
 8011c82:	693b      	ldr	r3, [r7, #16]
 8011c84:	2101      	movs	r1, #1
 8011c86:	4618      	mov	r0, r3
 8011c88:	f7fe f811 	bl	800fcae <unlock_fs>
 8011c8c:	2301      	movs	r3, #1
 8011c8e:	e102      	b.n	8011e96 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8011c90:	68fb      	ldr	r3, [r7, #12]
 8011c92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011c94:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	689b      	ldr	r3, [r3, #8]
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d102      	bne.n	8011ca4 <f_write+0x14e>
 8011c9e:	68fb      	ldr	r3, [r7, #12]
 8011ca0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011ca2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	7d1b      	ldrb	r3, [r3, #20]
 8011ca8:	b25b      	sxtb	r3, r3
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	da1d      	bge.n	8011cea <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011cae:	693b      	ldr	r3, [r7, #16]
 8011cb0:	7858      	ldrb	r0, [r3, #1]
 8011cb2:	68fb      	ldr	r3, [r7, #12]
 8011cb4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011cb8:	68fb      	ldr	r3, [r7, #12]
 8011cba:	6a1a      	ldr	r2, [r3, #32]
 8011cbc:	2301      	movs	r3, #1
 8011cbe:	f7fd fea3 	bl	800fa08 <disk_write>
 8011cc2:	4603      	mov	r3, r0
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d009      	beq.n	8011cdc <f_write+0x186>
 8011cc8:	68fb      	ldr	r3, [r7, #12]
 8011cca:	2201      	movs	r2, #1
 8011ccc:	755a      	strb	r2, [r3, #21]
 8011cce:	693b      	ldr	r3, [r7, #16]
 8011cd0:	2101      	movs	r1, #1
 8011cd2:	4618      	mov	r0, r3
 8011cd4:	f7fd ffeb 	bl	800fcae <unlock_fs>
 8011cd8:	2301      	movs	r3, #1
 8011cda:	e0dc      	b.n	8011e96 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011cdc:	68fb      	ldr	r3, [r7, #12]
 8011cde:	7d1b      	ldrb	r3, [r3, #20]
 8011ce0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011ce4:	b2da      	uxtb	r2, r3
 8011ce6:	68fb      	ldr	r3, [r7, #12]
 8011ce8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8011cea:	693a      	ldr	r2, [r7, #16]
 8011cec:	68fb      	ldr	r3, [r7, #12]
 8011cee:	69db      	ldr	r3, [r3, #28]
 8011cf0:	4619      	mov	r1, r3
 8011cf2:	4610      	mov	r0, r2
 8011cf4:	f7fe fa42 	bl	801017c <clust2sect>
 8011cf8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8011cfa:	697b      	ldr	r3, [r7, #20]
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d109      	bne.n	8011d14 <f_write+0x1be>
 8011d00:	68fb      	ldr	r3, [r7, #12]
 8011d02:	2202      	movs	r2, #2
 8011d04:	755a      	strb	r2, [r3, #21]
 8011d06:	693b      	ldr	r3, [r7, #16]
 8011d08:	2102      	movs	r1, #2
 8011d0a:	4618      	mov	r0, r3
 8011d0c:	f7fd ffcf 	bl	800fcae <unlock_fs>
 8011d10:	2302      	movs	r3, #2
 8011d12:	e0c0      	b.n	8011e96 <f_write+0x340>
			sect += csect;
 8011d14:	697a      	ldr	r2, [r7, #20]
 8011d16:	69bb      	ldr	r3, [r7, #24]
 8011d18:	4413      	add	r3, r2
 8011d1a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	0a5b      	lsrs	r3, r3, #9
 8011d20:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8011d22:	6a3b      	ldr	r3, [r7, #32]
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d041      	beq.n	8011dac <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011d28:	69ba      	ldr	r2, [r7, #24]
 8011d2a:	6a3b      	ldr	r3, [r7, #32]
 8011d2c:	4413      	add	r3, r2
 8011d2e:	693a      	ldr	r2, [r7, #16]
 8011d30:	8952      	ldrh	r2, [r2, #10]
 8011d32:	4293      	cmp	r3, r2
 8011d34:	d905      	bls.n	8011d42 <f_write+0x1ec>
					cc = fs->csize - csect;
 8011d36:	693b      	ldr	r3, [r7, #16]
 8011d38:	895b      	ldrh	r3, [r3, #10]
 8011d3a:	461a      	mov	r2, r3
 8011d3c:	69bb      	ldr	r3, [r7, #24]
 8011d3e:	1ad3      	subs	r3, r2, r3
 8011d40:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011d42:	693b      	ldr	r3, [r7, #16]
 8011d44:	7858      	ldrb	r0, [r3, #1]
 8011d46:	6a3b      	ldr	r3, [r7, #32]
 8011d48:	697a      	ldr	r2, [r7, #20]
 8011d4a:	69f9      	ldr	r1, [r7, #28]
 8011d4c:	f7fd fe5c 	bl	800fa08 <disk_write>
 8011d50:	4603      	mov	r3, r0
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d009      	beq.n	8011d6a <f_write+0x214>
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	2201      	movs	r2, #1
 8011d5a:	755a      	strb	r2, [r3, #21]
 8011d5c:	693b      	ldr	r3, [r7, #16]
 8011d5e:	2101      	movs	r1, #1
 8011d60:	4618      	mov	r0, r3
 8011d62:	f7fd ffa4 	bl	800fcae <unlock_fs>
 8011d66:	2301      	movs	r3, #1
 8011d68:	e095      	b.n	8011e96 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8011d6a:	68fb      	ldr	r3, [r7, #12]
 8011d6c:	6a1a      	ldr	r2, [r3, #32]
 8011d6e:	697b      	ldr	r3, [r7, #20]
 8011d70:	1ad3      	subs	r3, r2, r3
 8011d72:	6a3a      	ldr	r2, [r7, #32]
 8011d74:	429a      	cmp	r2, r3
 8011d76:	d915      	bls.n	8011da4 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8011d78:	68fb      	ldr	r3, [r7, #12]
 8011d7a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8011d7e:	68fb      	ldr	r3, [r7, #12]
 8011d80:	6a1a      	ldr	r2, [r3, #32]
 8011d82:	697b      	ldr	r3, [r7, #20]
 8011d84:	1ad3      	subs	r3, r2, r3
 8011d86:	025b      	lsls	r3, r3, #9
 8011d88:	69fa      	ldr	r2, [r7, #28]
 8011d8a:	4413      	add	r3, r2
 8011d8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011d90:	4619      	mov	r1, r3
 8011d92:	f7fd fef9 	bl	800fb88 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011d96:	68fb      	ldr	r3, [r7, #12]
 8011d98:	7d1b      	ldrb	r3, [r3, #20]
 8011d9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011d9e:	b2da      	uxtb	r2, r3
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8011da4:	6a3b      	ldr	r3, [r7, #32]
 8011da6:	025b      	lsls	r3, r3, #9
 8011da8:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8011daa:	e044      	b.n	8011e36 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011dac:	68fb      	ldr	r3, [r7, #12]
 8011dae:	6a1b      	ldr	r3, [r3, #32]
 8011db0:	697a      	ldr	r2, [r7, #20]
 8011db2:	429a      	cmp	r2, r3
 8011db4:	d01b      	beq.n	8011dee <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	699a      	ldr	r2, [r3, #24]
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011dbe:	429a      	cmp	r2, r3
 8011dc0:	d215      	bcs.n	8011dee <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8011dc2:	693b      	ldr	r3, [r7, #16]
 8011dc4:	7858      	ldrb	r0, [r3, #1]
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011dcc:	2301      	movs	r3, #1
 8011dce:	697a      	ldr	r2, [r7, #20]
 8011dd0:	f7fd fdfa 	bl	800f9c8 <disk_read>
 8011dd4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d009      	beq.n	8011dee <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 8011dda:	68fb      	ldr	r3, [r7, #12]
 8011ddc:	2201      	movs	r2, #1
 8011dde:	755a      	strb	r2, [r3, #21]
 8011de0:	693b      	ldr	r3, [r7, #16]
 8011de2:	2101      	movs	r1, #1
 8011de4:	4618      	mov	r0, r3
 8011de6:	f7fd ff62 	bl	800fcae <unlock_fs>
 8011dea:	2301      	movs	r3, #1
 8011dec:	e053      	b.n	8011e96 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 8011dee:	68fb      	ldr	r3, [r7, #12]
 8011df0:	697a      	ldr	r2, [r7, #20]
 8011df2:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011df4:	68fb      	ldr	r3, [r7, #12]
 8011df6:	699b      	ldr	r3, [r3, #24]
 8011df8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011dfc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8011e00:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8011e02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	429a      	cmp	r2, r3
 8011e08:	d901      	bls.n	8011e0e <f_write+0x2b8>
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8011e0e:	68fb      	ldr	r3, [r7, #12]
 8011e10:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	699b      	ldr	r3, [r3, #24]
 8011e18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011e1c:	4413      	add	r3, r2
 8011e1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011e20:	69f9      	ldr	r1, [r7, #28]
 8011e22:	4618      	mov	r0, r3
 8011e24:	f7fd feb0 	bl	800fb88 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8011e28:	68fb      	ldr	r3, [r7, #12]
 8011e2a:	7d1b      	ldrb	r3, [r3, #20]
 8011e2c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011e30:	b2da      	uxtb	r2, r3
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8011e36:	69fa      	ldr	r2, [r7, #28]
 8011e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e3a:	4413      	add	r3, r2
 8011e3c:	61fb      	str	r3, [r7, #28]
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	699a      	ldr	r2, [r3, #24]
 8011e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e44:	441a      	add	r2, r3
 8011e46:	68fb      	ldr	r3, [r7, #12]
 8011e48:	619a      	str	r2, [r3, #24]
 8011e4a:	68fb      	ldr	r3, [r7, #12]
 8011e4c:	68da      	ldr	r2, [r3, #12]
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	699b      	ldr	r3, [r3, #24]
 8011e52:	429a      	cmp	r2, r3
 8011e54:	bf38      	it	cc
 8011e56:	461a      	movcc	r2, r3
 8011e58:	68fb      	ldr	r3, [r7, #12]
 8011e5a:	60da      	str	r2, [r3, #12]
 8011e5c:	683b      	ldr	r3, [r7, #0]
 8011e5e:	681a      	ldr	r2, [r3, #0]
 8011e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e62:	441a      	add	r2, r3
 8011e64:	683b      	ldr	r3, [r7, #0]
 8011e66:	601a      	str	r2, [r3, #0]
 8011e68:	687a      	ldr	r2, [r7, #4]
 8011e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e6c:	1ad3      	subs	r3, r2, r3
 8011e6e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	f47f aeb6 	bne.w	8011be4 <f_write+0x8e>
 8011e78:	e000      	b.n	8011e7c <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011e7a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8011e7c:	68fb      	ldr	r3, [r7, #12]
 8011e7e:	7d1b      	ldrb	r3, [r3, #20]
 8011e80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e84:	b2da      	uxtb	r2, r3
 8011e86:	68fb      	ldr	r3, [r7, #12]
 8011e88:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8011e8a:	693b      	ldr	r3, [r7, #16]
 8011e8c:	2100      	movs	r1, #0
 8011e8e:	4618      	mov	r0, r3
 8011e90:	f7fd ff0d 	bl	800fcae <unlock_fs>
 8011e94:	2300      	movs	r3, #0
}
 8011e96:	4618      	mov	r0, r3
 8011e98:	3730      	adds	r7, #48	; 0x30
 8011e9a:	46bd      	mov	sp, r7
 8011e9c:	bd80      	pop	{r7, pc}

08011e9e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8011e9e:	b580      	push	{r7, lr}
 8011ea0:	b086      	sub	sp, #24
 8011ea2:	af00      	add	r7, sp, #0
 8011ea4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	f107 0208 	add.w	r2, r7, #8
 8011eac:	4611      	mov	r1, r2
 8011eae:	4618      	mov	r0, r3
 8011eb0:	f7ff fbe0 	bl	8011674 <validate>
 8011eb4:	4603      	mov	r3, r0
 8011eb6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011eb8:	7dfb      	ldrb	r3, [r7, #23]
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d16d      	bne.n	8011f9a <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	7d1b      	ldrb	r3, [r3, #20]
 8011ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d067      	beq.n	8011f9a <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	7d1b      	ldrb	r3, [r3, #20]
 8011ece:	b25b      	sxtb	r3, r3
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	da1a      	bge.n	8011f0a <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8011ed4:	68bb      	ldr	r3, [r7, #8]
 8011ed6:	7858      	ldrb	r0, [r3, #1]
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	6a1a      	ldr	r2, [r3, #32]
 8011ee2:	2301      	movs	r3, #1
 8011ee4:	f7fd fd90 	bl	800fa08 <disk_write>
 8011ee8:	4603      	mov	r3, r0
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d006      	beq.n	8011efc <f_sync+0x5e>
 8011eee:	68bb      	ldr	r3, [r7, #8]
 8011ef0:	2101      	movs	r1, #1
 8011ef2:	4618      	mov	r0, r3
 8011ef4:	f7fd fedb 	bl	800fcae <unlock_fs>
 8011ef8:	2301      	movs	r3, #1
 8011efa:	e055      	b.n	8011fa8 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	7d1b      	ldrb	r3, [r3, #20]
 8011f00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011f04:	b2da      	uxtb	r2, r3
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8011f0a:	f7fb fecb 	bl	800dca4 <get_fattime>
 8011f0e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8011f10:	68ba      	ldr	r2, [r7, #8]
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f16:	4619      	mov	r1, r3
 8011f18:	4610      	mov	r0, r2
 8011f1a:	f7fe f893 	bl	8010044 <move_window>
 8011f1e:	4603      	mov	r3, r0
 8011f20:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8011f22:	7dfb      	ldrb	r3, [r7, #23]
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d138      	bne.n	8011f9a <f_sync+0xfc>
					dir = fp->dir_ptr;
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f2c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8011f2e:	68fb      	ldr	r3, [r7, #12]
 8011f30:	330b      	adds	r3, #11
 8011f32:	781a      	ldrb	r2, [r3, #0]
 8011f34:	68fb      	ldr	r3, [r7, #12]
 8011f36:	330b      	adds	r3, #11
 8011f38:	f042 0220 	orr.w	r2, r2, #32
 8011f3c:	b2d2      	uxtb	r2, r2
 8011f3e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	6818      	ldr	r0, [r3, #0]
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	689b      	ldr	r3, [r3, #8]
 8011f48:	461a      	mov	r2, r3
 8011f4a:	68f9      	ldr	r1, [r7, #12]
 8011f4c:	f7fe fd98 	bl	8010a80 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8011f50:	68fb      	ldr	r3, [r7, #12]
 8011f52:	f103 021c 	add.w	r2, r3, #28
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	68db      	ldr	r3, [r3, #12]
 8011f5a:	4619      	mov	r1, r3
 8011f5c:	4610      	mov	r0, r2
 8011f5e:	f7fd fde7 	bl	800fb30 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8011f62:	68fb      	ldr	r3, [r7, #12]
 8011f64:	3316      	adds	r3, #22
 8011f66:	6939      	ldr	r1, [r7, #16]
 8011f68:	4618      	mov	r0, r3
 8011f6a:	f7fd fde1 	bl	800fb30 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8011f6e:	68fb      	ldr	r3, [r7, #12]
 8011f70:	3312      	adds	r3, #18
 8011f72:	2100      	movs	r1, #0
 8011f74:	4618      	mov	r0, r3
 8011f76:	f7fd fdc0 	bl	800fafa <st_word>
					fs->wflag = 1;
 8011f7a:	68bb      	ldr	r3, [r7, #8]
 8011f7c:	2201      	movs	r2, #1
 8011f7e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8011f80:	68bb      	ldr	r3, [r7, #8]
 8011f82:	4618      	mov	r0, r3
 8011f84:	f7fe f88c 	bl	80100a0 <sync_fs>
 8011f88:	4603      	mov	r3, r0
 8011f8a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	7d1b      	ldrb	r3, [r3, #20]
 8011f90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011f94:	b2da      	uxtb	r2, r3
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8011f9a:	68bb      	ldr	r3, [r7, #8]
 8011f9c:	7dfa      	ldrb	r2, [r7, #23]
 8011f9e:	4611      	mov	r1, r2
 8011fa0:	4618      	mov	r0, r3
 8011fa2:	f7fd fe84 	bl	800fcae <unlock_fs>
 8011fa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8011fa8:	4618      	mov	r0, r3
 8011faa:	3718      	adds	r7, #24
 8011fac:	46bd      	mov	sp, r7
 8011fae:	bd80      	pop	{r7, pc}

08011fb0 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8011fb0:	b580      	push	{r7, lr}
 8011fb2:	b090      	sub	sp, #64	; 0x40
 8011fb4:	af00      	add	r7, sp, #0
 8011fb6:	6078      	str	r0, [r7, #4]
 8011fb8:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	f107 0208 	add.w	r2, r7, #8
 8011fc0:	4611      	mov	r1, r2
 8011fc2:	4618      	mov	r0, r3
 8011fc4:	f7ff fb56 	bl	8011674 <validate>
 8011fc8:	4603      	mov	r3, r0
 8011fca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8011fce:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	d103      	bne.n	8011fde <f_lseek+0x2e>
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	7d5b      	ldrb	r3, [r3, #21]
 8011fda:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8011fde:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d009      	beq.n	8011ffa <f_lseek+0x4a>
 8011fe6:	68bb      	ldr	r3, [r7, #8]
 8011fe8:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8011fec:	4611      	mov	r1, r2
 8011fee:	4618      	mov	r0, r3
 8011ff0:	f7fd fe5d 	bl	800fcae <unlock_fs>
 8011ff4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011ff8:	e229      	b.n	801244e <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	f000 80ea 	beq.w	80121d8 <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8012004:	683b      	ldr	r3, [r7, #0]
 8012006:	f1b3 3fff 	cmp.w	r3, #4294967295
 801200a:	d164      	bne.n	80120d6 <f_lseek+0x126>
			tbl = fp->cltbl;
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012010:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8012012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012014:	1d1a      	adds	r2, r3, #4
 8012016:	627a      	str	r2, [r7, #36]	; 0x24
 8012018:	681b      	ldr	r3, [r3, #0]
 801201a:	617b      	str	r3, [r7, #20]
 801201c:	2302      	movs	r3, #2
 801201e:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	689b      	ldr	r3, [r3, #8]
 8012024:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8012026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012028:	2b00      	cmp	r3, #0
 801202a:	d044      	beq.n	80120b6 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 801202c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801202e:	613b      	str	r3, [r7, #16]
 8012030:	2300      	movs	r3, #0
 8012032:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012036:	3302      	adds	r3, #2
 8012038:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 801203a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801203c:	60fb      	str	r3, [r7, #12]
 801203e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012040:	3301      	adds	r3, #1
 8012042:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012048:	4618      	mov	r0, r3
 801204a:	f7fe f8b6 	bl	80101ba <get_fat>
 801204e:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8012050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012052:	2b01      	cmp	r3, #1
 8012054:	d809      	bhi.n	801206a <f_lseek+0xba>
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	2202      	movs	r2, #2
 801205a:	755a      	strb	r2, [r3, #21]
 801205c:	68bb      	ldr	r3, [r7, #8]
 801205e:	2102      	movs	r1, #2
 8012060:	4618      	mov	r0, r3
 8012062:	f7fd fe24 	bl	800fcae <unlock_fs>
 8012066:	2302      	movs	r3, #2
 8012068:	e1f1      	b.n	801244e <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801206a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801206c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012070:	d109      	bne.n	8012086 <f_lseek+0xd6>
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	2201      	movs	r2, #1
 8012076:	755a      	strb	r2, [r3, #21]
 8012078:	68bb      	ldr	r3, [r7, #8]
 801207a:	2101      	movs	r1, #1
 801207c:	4618      	mov	r0, r3
 801207e:	f7fd fe16 	bl	800fcae <unlock_fs>
 8012082:	2301      	movs	r3, #1
 8012084:	e1e3      	b.n	801244e <f_lseek+0x49e>
					} while (cl == pcl + 1);
 8012086:	68fb      	ldr	r3, [r7, #12]
 8012088:	3301      	adds	r3, #1
 801208a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801208c:	429a      	cmp	r2, r3
 801208e:	d0d4      	beq.n	801203a <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8012090:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012092:	697b      	ldr	r3, [r7, #20]
 8012094:	429a      	cmp	r2, r3
 8012096:	d809      	bhi.n	80120ac <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 8012098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801209a:	1d1a      	adds	r2, r3, #4
 801209c:	627a      	str	r2, [r7, #36]	; 0x24
 801209e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80120a0:	601a      	str	r2, [r3, #0]
 80120a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120a4:	1d1a      	adds	r2, r3, #4
 80120a6:	627a      	str	r2, [r7, #36]	; 0x24
 80120a8:	693a      	ldr	r2, [r7, #16]
 80120aa:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80120ac:	68bb      	ldr	r3, [r7, #8]
 80120ae:	699b      	ldr	r3, [r3, #24]
 80120b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80120b2:	429a      	cmp	r2, r3
 80120b4:	d3ba      	bcc.n	801202c <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80120bc:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80120be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80120c0:	697b      	ldr	r3, [r7, #20]
 80120c2:	429a      	cmp	r2, r3
 80120c4:	d803      	bhi.n	80120ce <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 80120c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120c8:	2200      	movs	r2, #0
 80120ca:	601a      	str	r2, [r3, #0]
 80120cc:	e1b6      	b.n	801243c <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80120ce:	2311      	movs	r3, #17
 80120d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80120d4:	e1b2      	b.n	801243c <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	68db      	ldr	r3, [r3, #12]
 80120da:	683a      	ldr	r2, [r7, #0]
 80120dc:	429a      	cmp	r2, r3
 80120de:	d902      	bls.n	80120e6 <f_lseek+0x136>
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	68db      	ldr	r3, [r3, #12]
 80120e4:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	683a      	ldr	r2, [r7, #0]
 80120ea:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80120ec:	683b      	ldr	r3, [r7, #0]
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	f000 81a4 	beq.w	801243c <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 80120f4:	683b      	ldr	r3, [r7, #0]
 80120f6:	3b01      	subs	r3, #1
 80120f8:	4619      	mov	r1, r3
 80120fa:	6878      	ldr	r0, [r7, #4]
 80120fc:	f7fe fae6 	bl	80106cc <clmt_clust>
 8012100:	4602      	mov	r2, r0
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8012106:	68ba      	ldr	r2, [r7, #8]
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	69db      	ldr	r3, [r3, #28]
 801210c:	4619      	mov	r1, r3
 801210e:	4610      	mov	r0, r2
 8012110:	f7fe f834 	bl	801017c <clust2sect>
 8012114:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8012116:	69bb      	ldr	r3, [r7, #24]
 8012118:	2b00      	cmp	r3, #0
 801211a:	d109      	bne.n	8012130 <f_lseek+0x180>
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	2202      	movs	r2, #2
 8012120:	755a      	strb	r2, [r3, #21]
 8012122:	68bb      	ldr	r3, [r7, #8]
 8012124:	2102      	movs	r1, #2
 8012126:	4618      	mov	r0, r3
 8012128:	f7fd fdc1 	bl	800fcae <unlock_fs>
 801212c:	2302      	movs	r3, #2
 801212e:	e18e      	b.n	801244e <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8012130:	683b      	ldr	r3, [r7, #0]
 8012132:	3b01      	subs	r3, #1
 8012134:	0a5b      	lsrs	r3, r3, #9
 8012136:	68ba      	ldr	r2, [r7, #8]
 8012138:	8952      	ldrh	r2, [r2, #10]
 801213a:	3a01      	subs	r2, #1
 801213c:	4013      	ands	r3, r2
 801213e:	69ba      	ldr	r2, [r7, #24]
 8012140:	4413      	add	r3, r2
 8012142:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	699b      	ldr	r3, [r3, #24]
 8012148:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801214c:	2b00      	cmp	r3, #0
 801214e:	f000 8175 	beq.w	801243c <f_lseek+0x48c>
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	6a1b      	ldr	r3, [r3, #32]
 8012156:	69ba      	ldr	r2, [r7, #24]
 8012158:	429a      	cmp	r2, r3
 801215a:	f000 816f 	beq.w	801243c <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	7d1b      	ldrb	r3, [r3, #20]
 8012162:	b25b      	sxtb	r3, r3
 8012164:	2b00      	cmp	r3, #0
 8012166:	da1d      	bge.n	80121a4 <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012168:	68bb      	ldr	r3, [r7, #8]
 801216a:	7858      	ldrb	r0, [r3, #1]
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	6a1a      	ldr	r2, [r3, #32]
 8012176:	2301      	movs	r3, #1
 8012178:	f7fd fc46 	bl	800fa08 <disk_write>
 801217c:	4603      	mov	r3, r0
 801217e:	2b00      	cmp	r3, #0
 8012180:	d009      	beq.n	8012196 <f_lseek+0x1e6>
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	2201      	movs	r2, #1
 8012186:	755a      	strb	r2, [r3, #21]
 8012188:	68bb      	ldr	r3, [r7, #8]
 801218a:	2101      	movs	r1, #1
 801218c:	4618      	mov	r0, r3
 801218e:	f7fd fd8e 	bl	800fcae <unlock_fs>
 8012192:	2301      	movs	r3, #1
 8012194:	e15b      	b.n	801244e <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	7d1b      	ldrb	r3, [r3, #20]
 801219a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801219e:	b2da      	uxtb	r2, r3
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80121a4:	68bb      	ldr	r3, [r7, #8]
 80121a6:	7858      	ldrb	r0, [r3, #1]
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80121ae:	2301      	movs	r3, #1
 80121b0:	69ba      	ldr	r2, [r7, #24]
 80121b2:	f7fd fc09 	bl	800f9c8 <disk_read>
 80121b6:	4603      	mov	r3, r0
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d009      	beq.n	80121d0 <f_lseek+0x220>
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	2201      	movs	r2, #1
 80121c0:	755a      	strb	r2, [r3, #21]
 80121c2:	68bb      	ldr	r3, [r7, #8]
 80121c4:	2101      	movs	r1, #1
 80121c6:	4618      	mov	r0, r3
 80121c8:	f7fd fd71 	bl	800fcae <unlock_fs>
 80121cc:	2301      	movs	r3, #1
 80121ce:	e13e      	b.n	801244e <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	69ba      	ldr	r2, [r7, #24]
 80121d4:	621a      	str	r2, [r3, #32]
 80121d6:	e131      	b.n	801243c <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	68db      	ldr	r3, [r3, #12]
 80121dc:	683a      	ldr	r2, [r7, #0]
 80121de:	429a      	cmp	r2, r3
 80121e0:	d908      	bls.n	80121f4 <f_lseek+0x244>
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	7d1b      	ldrb	r3, [r3, #20]
 80121e6:	f003 0302 	and.w	r3, r3, #2
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d102      	bne.n	80121f4 <f_lseek+0x244>
			ofs = fp->obj.objsize;
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	68db      	ldr	r3, [r3, #12]
 80121f2:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	699b      	ldr	r3, [r3, #24]
 80121f8:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80121fa:	2300      	movs	r3, #0
 80121fc:	637b      	str	r3, [r7, #52]	; 0x34
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012202:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8012204:	683b      	ldr	r3, [r7, #0]
 8012206:	2b00      	cmp	r3, #0
 8012208:	f000 80c0 	beq.w	801238c <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 801220c:	68bb      	ldr	r3, [r7, #8]
 801220e:	895b      	ldrh	r3, [r3, #10]
 8012210:	025b      	lsls	r3, r3, #9
 8012212:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8012214:	6a3b      	ldr	r3, [r7, #32]
 8012216:	2b00      	cmp	r3, #0
 8012218:	d01b      	beq.n	8012252 <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 801221a:	683b      	ldr	r3, [r7, #0]
 801221c:	1e5a      	subs	r2, r3, #1
 801221e:	69fb      	ldr	r3, [r7, #28]
 8012220:	fbb2 f2f3 	udiv	r2, r2, r3
 8012224:	6a3b      	ldr	r3, [r7, #32]
 8012226:	1e59      	subs	r1, r3, #1
 8012228:	69fb      	ldr	r3, [r7, #28]
 801222a:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 801222e:	429a      	cmp	r2, r3
 8012230:	d30f      	bcc.n	8012252 <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8012232:	6a3b      	ldr	r3, [r7, #32]
 8012234:	1e5a      	subs	r2, r3, #1
 8012236:	69fb      	ldr	r3, [r7, #28]
 8012238:	425b      	negs	r3, r3
 801223a:	401a      	ands	r2, r3
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	699b      	ldr	r3, [r3, #24]
 8012244:	683a      	ldr	r2, [r7, #0]
 8012246:	1ad3      	subs	r3, r2, r3
 8012248:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	69db      	ldr	r3, [r3, #28]
 801224e:	63bb      	str	r3, [r7, #56]	; 0x38
 8012250:	e02c      	b.n	80122ac <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	689b      	ldr	r3, [r3, #8]
 8012256:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8012258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801225a:	2b00      	cmp	r3, #0
 801225c:	d123      	bne.n	80122a6 <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	2100      	movs	r1, #0
 8012262:	4618      	mov	r0, r3
 8012264:	f7fe f99a 	bl	801059c <create_chain>
 8012268:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 801226a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801226c:	2b01      	cmp	r3, #1
 801226e:	d109      	bne.n	8012284 <f_lseek+0x2d4>
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	2202      	movs	r2, #2
 8012274:	755a      	strb	r2, [r3, #21]
 8012276:	68bb      	ldr	r3, [r7, #8]
 8012278:	2102      	movs	r1, #2
 801227a:	4618      	mov	r0, r3
 801227c:	f7fd fd17 	bl	800fcae <unlock_fs>
 8012280:	2302      	movs	r3, #2
 8012282:	e0e4      	b.n	801244e <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012286:	f1b3 3fff 	cmp.w	r3, #4294967295
 801228a:	d109      	bne.n	80122a0 <f_lseek+0x2f0>
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	2201      	movs	r2, #1
 8012290:	755a      	strb	r2, [r3, #21]
 8012292:	68bb      	ldr	r3, [r7, #8]
 8012294:	2101      	movs	r1, #1
 8012296:	4618      	mov	r0, r3
 8012298:	f7fd fd09 	bl	800fcae <unlock_fs>
 801229c:	2301      	movs	r3, #1
 801229e:	e0d6      	b.n	801244e <f_lseek+0x49e>
					fp->obj.sclust = clst;
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80122a4:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80122aa:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80122ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d06c      	beq.n	801238c <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 80122b2:	e044      	b.n	801233e <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 80122b4:	683a      	ldr	r2, [r7, #0]
 80122b6:	69fb      	ldr	r3, [r7, #28]
 80122b8:	1ad3      	subs	r3, r2, r3
 80122ba:	603b      	str	r3, [r7, #0]
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	699a      	ldr	r2, [r3, #24]
 80122c0:	69fb      	ldr	r3, [r7, #28]
 80122c2:	441a      	add	r2, r3
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	7d1b      	ldrb	r3, [r3, #20]
 80122cc:	f003 0302 	and.w	r3, r3, #2
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d00b      	beq.n	80122ec <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80122d8:	4618      	mov	r0, r3
 80122da:	f7fe f95f 	bl	801059c <create_chain>
 80122de:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80122e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d108      	bne.n	80122f8 <f_lseek+0x348>
							ofs = 0; break;
 80122e6:	2300      	movs	r3, #0
 80122e8:	603b      	str	r3, [r7, #0]
 80122ea:	e02c      	b.n	8012346 <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80122f0:	4618      	mov	r0, r3
 80122f2:	f7fd ff62 	bl	80101ba <get_fat>
 80122f6:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80122f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80122fe:	d109      	bne.n	8012314 <f_lseek+0x364>
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	2201      	movs	r2, #1
 8012304:	755a      	strb	r2, [r3, #21]
 8012306:	68bb      	ldr	r3, [r7, #8]
 8012308:	2101      	movs	r1, #1
 801230a:	4618      	mov	r0, r3
 801230c:	f7fd fccf 	bl	800fcae <unlock_fs>
 8012310:	2301      	movs	r3, #1
 8012312:	e09c      	b.n	801244e <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8012314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012316:	2b01      	cmp	r3, #1
 8012318:	d904      	bls.n	8012324 <f_lseek+0x374>
 801231a:	68bb      	ldr	r3, [r7, #8]
 801231c:	699b      	ldr	r3, [r3, #24]
 801231e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012320:	429a      	cmp	r2, r3
 8012322:	d309      	bcc.n	8012338 <f_lseek+0x388>
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	2202      	movs	r2, #2
 8012328:	755a      	strb	r2, [r3, #21]
 801232a:	68bb      	ldr	r3, [r7, #8]
 801232c:	2102      	movs	r1, #2
 801232e:	4618      	mov	r0, r3
 8012330:	f7fd fcbd 	bl	800fcae <unlock_fs>
 8012334:	2302      	movs	r3, #2
 8012336:	e08a      	b.n	801244e <f_lseek+0x49e>
					fp->clust = clst;
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801233c:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 801233e:	683a      	ldr	r2, [r7, #0]
 8012340:	69fb      	ldr	r3, [r7, #28]
 8012342:	429a      	cmp	r2, r3
 8012344:	d8b6      	bhi.n	80122b4 <f_lseek+0x304>
				}
				fp->fptr += ofs;
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	699a      	ldr	r2, [r3, #24]
 801234a:	683b      	ldr	r3, [r7, #0]
 801234c:	441a      	add	r2, r3
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8012352:	683b      	ldr	r3, [r7, #0]
 8012354:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012358:	2b00      	cmp	r3, #0
 801235a:	d017      	beq.n	801238c <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 801235c:	68bb      	ldr	r3, [r7, #8]
 801235e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012360:	4618      	mov	r0, r3
 8012362:	f7fd ff0b 	bl	801017c <clust2sect>
 8012366:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8012368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801236a:	2b00      	cmp	r3, #0
 801236c:	d109      	bne.n	8012382 <f_lseek+0x3d2>
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	2202      	movs	r2, #2
 8012372:	755a      	strb	r2, [r3, #21]
 8012374:	68bb      	ldr	r3, [r7, #8]
 8012376:	2102      	movs	r1, #2
 8012378:	4618      	mov	r0, r3
 801237a:	f7fd fc98 	bl	800fcae <unlock_fs>
 801237e:	2302      	movs	r3, #2
 8012380:	e065      	b.n	801244e <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 8012382:	683b      	ldr	r3, [r7, #0]
 8012384:	0a5b      	lsrs	r3, r3, #9
 8012386:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012388:	4413      	add	r3, r2
 801238a:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	699a      	ldr	r2, [r3, #24]
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	68db      	ldr	r3, [r3, #12]
 8012394:	429a      	cmp	r2, r3
 8012396:	d90a      	bls.n	80123ae <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	699a      	ldr	r2, [r3, #24]
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	7d1b      	ldrb	r3, [r3, #20]
 80123a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80123a8:	b2da      	uxtb	r2, r3
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	699b      	ldr	r3, [r3, #24]
 80123b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d040      	beq.n	801243c <f_lseek+0x48c>
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	6a1b      	ldr	r3, [r3, #32]
 80123be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80123c0:	429a      	cmp	r2, r3
 80123c2:	d03b      	beq.n	801243c <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	7d1b      	ldrb	r3, [r3, #20]
 80123c8:	b25b      	sxtb	r3, r3
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	da1d      	bge.n	801240a <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80123ce:	68bb      	ldr	r3, [r7, #8]
 80123d0:	7858      	ldrb	r0, [r3, #1]
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	6a1a      	ldr	r2, [r3, #32]
 80123dc:	2301      	movs	r3, #1
 80123de:	f7fd fb13 	bl	800fa08 <disk_write>
 80123e2:	4603      	mov	r3, r0
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d009      	beq.n	80123fc <f_lseek+0x44c>
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	2201      	movs	r2, #1
 80123ec:	755a      	strb	r2, [r3, #21]
 80123ee:	68bb      	ldr	r3, [r7, #8]
 80123f0:	2101      	movs	r1, #1
 80123f2:	4618      	mov	r0, r3
 80123f4:	f7fd fc5b 	bl	800fcae <unlock_fs>
 80123f8:	2301      	movs	r3, #1
 80123fa:	e028      	b.n	801244e <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	7d1b      	ldrb	r3, [r3, #20]
 8012400:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012404:	b2da      	uxtb	r2, r3
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801240a:	68bb      	ldr	r3, [r7, #8]
 801240c:	7858      	ldrb	r0, [r3, #1]
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012414:	2301      	movs	r3, #1
 8012416:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012418:	f7fd fad6 	bl	800f9c8 <disk_read>
 801241c:	4603      	mov	r3, r0
 801241e:	2b00      	cmp	r3, #0
 8012420:	d009      	beq.n	8012436 <f_lseek+0x486>
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	2201      	movs	r2, #1
 8012426:	755a      	strb	r2, [r3, #21]
 8012428:	68bb      	ldr	r3, [r7, #8]
 801242a:	2101      	movs	r1, #1
 801242c:	4618      	mov	r0, r3
 801242e:	f7fd fc3e 	bl	800fcae <unlock_fs>
 8012432:	2301      	movs	r3, #1
 8012434:	e00b      	b.n	801244e <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801243a:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 801243c:	68bb      	ldr	r3, [r7, #8]
 801243e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8012442:	4611      	mov	r1, r2
 8012444:	4618      	mov	r0, r3
 8012446:	f7fd fc32 	bl	800fcae <unlock_fs>
 801244a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 801244e:	4618      	mov	r0, r3
 8012450:	3740      	adds	r7, #64	; 0x40
 8012452:	46bd      	mov	sp, r7
 8012454:	bd80      	pop	{r7, pc}

08012456 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8012456:	b580      	push	{r7, lr}
 8012458:	b086      	sub	sp, #24
 801245a:	af00      	add	r7, sp, #0
 801245c:	6078      	str	r0, [r7, #4]
 801245e:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	2b00      	cmp	r3, #0
 8012464:	d101      	bne.n	801246a <f_opendir+0x14>
 8012466:	2309      	movs	r3, #9
 8012468:	e06a      	b.n	8012540 <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 801246e:	f107 010c 	add.w	r1, r7, #12
 8012472:	463b      	mov	r3, r7
 8012474:	2200      	movs	r2, #0
 8012476:	4618      	mov	r0, r3
 8012478:	f7fe fea8 	bl	80111cc <find_volume>
 801247c:	4603      	mov	r3, r0
 801247e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012480:	7dfb      	ldrb	r3, [r7, #23]
 8012482:	2b00      	cmp	r3, #0
 8012484:	d14f      	bne.n	8012526 <f_opendir+0xd0>
		obj->fs = fs;
 8012486:	68fa      	ldr	r2, [r7, #12]
 8012488:	693b      	ldr	r3, [r7, #16]
 801248a:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 801248c:	683b      	ldr	r3, [r7, #0]
 801248e:	4619      	mov	r1, r3
 8012490:	6878      	ldr	r0, [r7, #4]
 8012492:	f7fe fd8f 	bl	8010fb4 <follow_path>
 8012496:	4603      	mov	r3, r0
 8012498:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 801249a:	7dfb      	ldrb	r3, [r7, #23]
 801249c:	2b00      	cmp	r3, #0
 801249e:	d13d      	bne.n	801251c <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80124a6:	b25b      	sxtb	r3, r3
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	db12      	blt.n	80124d2 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 80124ac:	693b      	ldr	r3, [r7, #16]
 80124ae:	799b      	ldrb	r3, [r3, #6]
 80124b0:	f003 0310 	and.w	r3, r3, #16
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d00a      	beq.n	80124ce <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80124b8:	68fa      	ldr	r2, [r7, #12]
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	6a1b      	ldr	r3, [r3, #32]
 80124be:	4619      	mov	r1, r3
 80124c0:	4610      	mov	r0, r2
 80124c2:	f7fe fabe 	bl	8010a42 <ld_clust>
 80124c6:	4602      	mov	r2, r0
 80124c8:	693b      	ldr	r3, [r7, #16]
 80124ca:	609a      	str	r2, [r3, #8]
 80124cc:	e001      	b.n	80124d2 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 80124ce:	2305      	movs	r3, #5
 80124d0:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 80124d2:	7dfb      	ldrb	r3, [r7, #23]
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d121      	bne.n	801251c <f_opendir+0xc6>
				obj->id = fs->id;
 80124d8:	68fb      	ldr	r3, [r7, #12]
 80124da:	88da      	ldrh	r2, [r3, #6]
 80124dc:	693b      	ldr	r3, [r7, #16]
 80124de:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80124e0:	2100      	movs	r1, #0
 80124e2:	6878      	ldr	r0, [r7, #4]
 80124e4:	f7fe f926 	bl	8010734 <dir_sdi>
 80124e8:	4603      	mov	r3, r0
 80124ea:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 80124ec:	7dfb      	ldrb	r3, [r7, #23]
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d114      	bne.n	801251c <f_opendir+0xc6>
					if (obj->sclust) {
 80124f2:	693b      	ldr	r3, [r7, #16]
 80124f4:	689b      	ldr	r3, [r3, #8]
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d00d      	beq.n	8012516 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80124fa:	2100      	movs	r1, #0
 80124fc:	6878      	ldr	r0, [r7, #4]
 80124fe:	f7fd fc6f 	bl	800fde0 <inc_lock>
 8012502:	4602      	mov	r2, r0
 8012504:	693b      	ldr	r3, [r7, #16]
 8012506:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8012508:	693b      	ldr	r3, [r7, #16]
 801250a:	691b      	ldr	r3, [r3, #16]
 801250c:	2b00      	cmp	r3, #0
 801250e:	d105      	bne.n	801251c <f_opendir+0xc6>
 8012510:	2312      	movs	r3, #18
 8012512:	75fb      	strb	r3, [r7, #23]
 8012514:	e002      	b.n	801251c <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8012516:	693b      	ldr	r3, [r7, #16]
 8012518:	2200      	movs	r2, #0
 801251a:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 801251c:	7dfb      	ldrb	r3, [r7, #23]
 801251e:	2b04      	cmp	r3, #4
 8012520:	d101      	bne.n	8012526 <f_opendir+0xd0>
 8012522:	2305      	movs	r3, #5
 8012524:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8012526:	7dfb      	ldrb	r3, [r7, #23]
 8012528:	2b00      	cmp	r3, #0
 801252a:	d002      	beq.n	8012532 <f_opendir+0xdc>
 801252c:	693b      	ldr	r3, [r7, #16]
 801252e:	2200      	movs	r2, #0
 8012530:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8012532:	68fb      	ldr	r3, [r7, #12]
 8012534:	7dfa      	ldrb	r2, [r7, #23]
 8012536:	4611      	mov	r1, r2
 8012538:	4618      	mov	r0, r3
 801253a:	f7fd fbb8 	bl	800fcae <unlock_fs>
 801253e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012540:	4618      	mov	r0, r3
 8012542:	3718      	adds	r7, #24
 8012544:	46bd      	mov	sp, r7
 8012546:	bd80      	pop	{r7, pc}

08012548 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8012548:	b580      	push	{r7, lr}
 801254a:	b084      	sub	sp, #16
 801254c:	af00      	add	r7, sp, #0
 801254e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	f107 0208 	add.w	r2, r7, #8
 8012556:	4611      	mov	r1, r2
 8012558:	4618      	mov	r0, r3
 801255a:	f7ff f88b 	bl	8011674 <validate>
 801255e:	4603      	mov	r3, r0
 8012560:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8012562:	7bfb      	ldrb	r3, [r7, #15]
 8012564:	2b00      	cmp	r3, #0
 8012566:	d115      	bne.n	8012594 <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	691b      	ldr	r3, [r3, #16]
 801256c:	2b00      	cmp	r3, #0
 801256e:	d006      	beq.n	801257e <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	691b      	ldr	r3, [r3, #16]
 8012574:	4618      	mov	r0, r3
 8012576:	f7fd fcc1 	bl	800fefc <dec_lock>
 801257a:	4603      	mov	r3, r0
 801257c:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 801257e:	7bfb      	ldrb	r3, [r7, #15]
 8012580:	2b00      	cmp	r3, #0
 8012582:	d102      	bne.n	801258a <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	2200      	movs	r2, #0
 8012588:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 801258a:	68bb      	ldr	r3, [r7, #8]
 801258c:	2100      	movs	r1, #0
 801258e:	4618      	mov	r0, r3
 8012590:	f7fd fb8d 	bl	800fcae <unlock_fs>
#endif
	}
	return res;
 8012594:	7bfb      	ldrb	r3, [r7, #15]
}
 8012596:	4618      	mov	r0, r3
 8012598:	3710      	adds	r7, #16
 801259a:	46bd      	mov	sp, r7
 801259c:	bd80      	pop	{r7, pc}

0801259e <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 801259e:	b580      	push	{r7, lr}
 80125a0:	b084      	sub	sp, #16
 80125a2:	af00      	add	r7, sp, #0
 80125a4:	6078      	str	r0, [r7, #4]
 80125a6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	f107 0208 	add.w	r2, r7, #8
 80125ae:	4611      	mov	r1, r2
 80125b0:	4618      	mov	r0, r3
 80125b2:	f7ff f85f 	bl	8011674 <validate>
 80125b6:	4603      	mov	r3, r0
 80125b8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80125ba:	7bfb      	ldrb	r3, [r7, #15]
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d126      	bne.n	801260e <f_readdir+0x70>
		if (!fno) {
 80125c0:	683b      	ldr	r3, [r7, #0]
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d106      	bne.n	80125d4 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 80125c6:	2100      	movs	r1, #0
 80125c8:	6878      	ldr	r0, [r7, #4]
 80125ca:	f7fe f8b3 	bl	8010734 <dir_sdi>
 80125ce:	4603      	mov	r3, r0
 80125d0:	73fb      	strb	r3, [r7, #15]
 80125d2:	e01c      	b.n	801260e <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 80125d4:	2100      	movs	r1, #0
 80125d6:	6878      	ldr	r0, [r7, #4]
 80125d8:	f7fe fa72 	bl	8010ac0 <dir_read>
 80125dc:	4603      	mov	r3, r0
 80125de:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 80125e0:	7bfb      	ldrb	r3, [r7, #15]
 80125e2:	2b04      	cmp	r3, #4
 80125e4:	d101      	bne.n	80125ea <f_readdir+0x4c>
 80125e6:	2300      	movs	r3, #0
 80125e8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 80125ea:	7bfb      	ldrb	r3, [r7, #15]
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d10e      	bne.n	801260e <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 80125f0:	6839      	ldr	r1, [r7, #0]
 80125f2:	6878      	ldr	r0, [r7, #4]
 80125f4:	f7fe fb48 	bl	8010c88 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 80125f8:	2100      	movs	r1, #0
 80125fa:	6878      	ldr	r0, [r7, #4]
 80125fc:	f7fe f915 	bl	801082a <dir_next>
 8012600:	4603      	mov	r3, r0
 8012602:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8012604:	7bfb      	ldrb	r3, [r7, #15]
 8012606:	2b04      	cmp	r3, #4
 8012608:	d101      	bne.n	801260e <f_readdir+0x70>
 801260a:	2300      	movs	r3, #0
 801260c:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 801260e:	68bb      	ldr	r3, [r7, #8]
 8012610:	7bfa      	ldrb	r2, [r7, #15]
 8012612:	4611      	mov	r1, r2
 8012614:	4618      	mov	r0, r3
 8012616:	f7fd fb4a 	bl	800fcae <unlock_fs>
 801261a:	7bfb      	ldrb	r3, [r7, #15]
}
 801261c:	4618      	mov	r0, r3
 801261e:	3710      	adds	r7, #16
 8012620:	46bd      	mov	sp, r7
 8012622:	bd80      	pop	{r7, pc}

08012624 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 8012624:	b580      	push	{r7, lr}
 8012626:	b084      	sub	sp, #16
 8012628:	af00      	add	r7, sp, #0
 801262a:	6078      	str	r0, [r7, #4]
 801262c:	6039      	str	r1, [r7, #0]
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 801262e:	6839      	ldr	r1, [r7, #0]
 8012630:	6878      	ldr	r0, [r7, #4]
 8012632:	f7ff ffb4 	bl	801259e <f_readdir>
 8012636:	4603      	mov	r3, r0
 8012638:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 801263a:	7bfb      	ldrb	r3, [r7, #15]
 801263c:	2b00      	cmp	r3, #0
 801263e:	d114      	bne.n	801266a <f_findnext+0x46>
 8012640:	683b      	ldr	r3, [r7, #0]
 8012642:	2b00      	cmp	r3, #0
 8012644:	d011      	beq.n	801266a <f_findnext+0x46>
 8012646:	683b      	ldr	r3, [r7, #0]
 8012648:	7a5b      	ldrb	r3, [r3, #9]
 801264a:	2b00      	cmp	r3, #0
 801264c:	d00d      	beq.n	801266a <f_findnext+0x46>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8012652:	683b      	ldr	r3, [r7, #0]
 8012654:	f103 0109 	add.w	r1, r3, #9
 8012658:	2300      	movs	r3, #0
 801265a:	2200      	movs	r2, #0
 801265c:	f7fe fb9a 	bl	8010d94 <pattern_matching>
 8012660:	4603      	mov	r3, r0
 8012662:	2b00      	cmp	r3, #0
 8012664:	d100      	bne.n	8012668 <f_findnext+0x44>
		res = f_readdir(dp, fno);		/* Get a directory item */
 8012666:	e7e2      	b.n	801262e <f_findnext+0xa>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 8012668:	bf00      	nop
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
 801266a:	7bfb      	ldrb	r3, [r7, #15]
}
 801266c:	4618      	mov	r0, r3
 801266e:	3710      	adds	r7, #16
 8012670:	46bd      	mov	sp, r7
 8012672:	bd80      	pop	{r7, pc}

08012674 <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 8012674:	b580      	push	{r7, lr}
 8012676:	b086      	sub	sp, #24
 8012678:	af00      	add	r7, sp, #0
 801267a:	60f8      	str	r0, [r7, #12]
 801267c:	60b9      	str	r1, [r7, #8]
 801267e:	607a      	str	r2, [r7, #4]
 8012680:	603b      	str	r3, [r7, #0]
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 8012682:	68fb      	ldr	r3, [r7, #12]
 8012684:	683a      	ldr	r2, [r7, #0]
 8012686:	631a      	str	r2, [r3, #48]	; 0x30
	res = f_opendir(dp, path);		/* Open the target directory */
 8012688:	6879      	ldr	r1, [r7, #4]
 801268a:	68f8      	ldr	r0, [r7, #12]
 801268c:	f7ff fee3 	bl	8012456 <f_opendir>
 8012690:	4603      	mov	r3, r0
 8012692:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012694:	7dfb      	ldrb	r3, [r7, #23]
 8012696:	2b00      	cmp	r3, #0
 8012698:	d105      	bne.n	80126a6 <f_findfirst+0x32>
		res = f_findnext(dp, fno);	/* Find the first item */
 801269a:	68b9      	ldr	r1, [r7, #8]
 801269c:	68f8      	ldr	r0, [r7, #12]
 801269e:	f7ff ffc1 	bl	8012624 <f_findnext>
 80126a2:	4603      	mov	r3, r0
 80126a4:	75fb      	strb	r3, [r7, #23]
	}
	return res;
 80126a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80126a8:	4618      	mov	r0, r3
 80126aa:	3718      	adds	r7, #24
 80126ac:	46bd      	mov	sp, r7
 80126ae:	bd80      	pop	{r7, pc}

080126b0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80126b0:	b480      	push	{r7}
 80126b2:	b087      	sub	sp, #28
 80126b4:	af00      	add	r7, sp, #0
 80126b6:	60f8      	str	r0, [r7, #12]
 80126b8:	60b9      	str	r1, [r7, #8]
 80126ba:	4613      	mov	r3, r2
 80126bc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80126be:	2301      	movs	r3, #1
 80126c0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80126c2:	2300      	movs	r3, #0
 80126c4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80126c6:	4b1f      	ldr	r3, [pc, #124]	; (8012744 <FATFS_LinkDriverEx+0x94>)
 80126c8:	7a5b      	ldrb	r3, [r3, #9]
 80126ca:	b2db      	uxtb	r3, r3
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d131      	bne.n	8012734 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80126d0:	4b1c      	ldr	r3, [pc, #112]	; (8012744 <FATFS_LinkDriverEx+0x94>)
 80126d2:	7a5b      	ldrb	r3, [r3, #9]
 80126d4:	b2db      	uxtb	r3, r3
 80126d6:	461a      	mov	r2, r3
 80126d8:	4b1a      	ldr	r3, [pc, #104]	; (8012744 <FATFS_LinkDriverEx+0x94>)
 80126da:	2100      	movs	r1, #0
 80126dc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80126de:	4b19      	ldr	r3, [pc, #100]	; (8012744 <FATFS_LinkDriverEx+0x94>)
 80126e0:	7a5b      	ldrb	r3, [r3, #9]
 80126e2:	b2db      	uxtb	r3, r3
 80126e4:	4a17      	ldr	r2, [pc, #92]	; (8012744 <FATFS_LinkDriverEx+0x94>)
 80126e6:	009b      	lsls	r3, r3, #2
 80126e8:	4413      	add	r3, r2
 80126ea:	68fa      	ldr	r2, [r7, #12]
 80126ec:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80126ee:	4b15      	ldr	r3, [pc, #84]	; (8012744 <FATFS_LinkDriverEx+0x94>)
 80126f0:	7a5b      	ldrb	r3, [r3, #9]
 80126f2:	b2db      	uxtb	r3, r3
 80126f4:	461a      	mov	r2, r3
 80126f6:	4b13      	ldr	r3, [pc, #76]	; (8012744 <FATFS_LinkDriverEx+0x94>)
 80126f8:	4413      	add	r3, r2
 80126fa:	79fa      	ldrb	r2, [r7, #7]
 80126fc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80126fe:	4b11      	ldr	r3, [pc, #68]	; (8012744 <FATFS_LinkDriverEx+0x94>)
 8012700:	7a5b      	ldrb	r3, [r3, #9]
 8012702:	b2db      	uxtb	r3, r3
 8012704:	1c5a      	adds	r2, r3, #1
 8012706:	b2d1      	uxtb	r1, r2
 8012708:	4a0e      	ldr	r2, [pc, #56]	; (8012744 <FATFS_LinkDriverEx+0x94>)
 801270a:	7251      	strb	r1, [r2, #9]
 801270c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801270e:	7dbb      	ldrb	r3, [r7, #22]
 8012710:	3330      	adds	r3, #48	; 0x30
 8012712:	b2da      	uxtb	r2, r3
 8012714:	68bb      	ldr	r3, [r7, #8]
 8012716:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8012718:	68bb      	ldr	r3, [r7, #8]
 801271a:	3301      	adds	r3, #1
 801271c:	223a      	movs	r2, #58	; 0x3a
 801271e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8012720:	68bb      	ldr	r3, [r7, #8]
 8012722:	3302      	adds	r3, #2
 8012724:	222f      	movs	r2, #47	; 0x2f
 8012726:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8012728:	68bb      	ldr	r3, [r7, #8]
 801272a:	3303      	adds	r3, #3
 801272c:	2200      	movs	r2, #0
 801272e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8012730:	2300      	movs	r3, #0
 8012732:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8012734:	7dfb      	ldrb	r3, [r7, #23]
}
 8012736:	4618      	mov	r0, r3
 8012738:	371c      	adds	r7, #28
 801273a:	46bd      	mov	sp, r7
 801273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012740:	4770      	bx	lr
 8012742:	bf00      	nop
 8012744:	2000035c 	.word	0x2000035c

08012748 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8012748:	b580      	push	{r7, lr}
 801274a:	b082      	sub	sp, #8
 801274c:	af00      	add	r7, sp, #0
 801274e:	6078      	str	r0, [r7, #4]
 8012750:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8012752:	2200      	movs	r2, #0
 8012754:	6839      	ldr	r1, [r7, #0]
 8012756:	6878      	ldr	r0, [r7, #4]
 8012758:	f7ff ffaa 	bl	80126b0 <FATFS_LinkDriverEx>
 801275c:	4603      	mov	r3, r0
}
 801275e:	4618      	mov	r0, r3
 8012760:	3708      	adds	r7, #8
 8012762:	46bd      	mov	sp, r7
 8012764:	bd80      	pop	{r7, pc}

08012766 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8012766:	b580      	push	{r7, lr}
 8012768:	b084      	sub	sp, #16
 801276a:	af00      	add	r7, sp, #0
 801276c:	4603      	mov	r3, r0
 801276e:	6039      	str	r1, [r7, #0]
 8012770:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 8012772:	2200      	movs	r2, #0
 8012774:	2101      	movs	r1, #1
 8012776:	2001      	movs	r0, #1
 8012778:	f000 fb8e 	bl	8012e98 <osSemaphoreNew>
 801277c:	4602      	mov	r2, r0
 801277e:	683b      	ldr	r3, [r7, #0]
 8012780:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 8012782:	683b      	ldr	r3, [r7, #0]
 8012784:	681b      	ldr	r3, [r3, #0]
 8012786:	2b00      	cmp	r3, #0
 8012788:	bf14      	ite	ne
 801278a:	2301      	movne	r3, #1
 801278c:	2300      	moveq	r3, #0
 801278e:	b2db      	uxtb	r3, r3
 8012790:	60fb      	str	r3, [r7, #12]

    return ret;
 8012792:	68fb      	ldr	r3, [r7, #12]
}
 8012794:	4618      	mov	r0, r3
 8012796:	3710      	adds	r7, #16
 8012798:	46bd      	mov	sp, r7
 801279a:	bd80      	pop	{r7, pc}

0801279c <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 801279c:	b580      	push	{r7, lr}
 801279e:	b082      	sub	sp, #8
 80127a0:	af00      	add	r7, sp, #0
 80127a2:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 80127a4:	6878      	ldr	r0, [r7, #4]
 80127a6:	f000 fcd3 	bl	8013150 <osSemaphoreDelete>
#endif
    return 1;
 80127aa:	2301      	movs	r3, #1
}
 80127ac:	4618      	mov	r0, r3
 80127ae:	3708      	adds	r7, #8
 80127b0:	46bd      	mov	sp, r7
 80127b2:	bd80      	pop	{r7, pc}

080127b4 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80127b4:	b580      	push	{r7, lr}
 80127b6:	b084      	sub	sp, #16
 80127b8:	af00      	add	r7, sp, #0
 80127ba:	6078      	str	r0, [r7, #4]
  int ret = 0;
 80127bc:	2300      	movs	r3, #0
 80127be:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 80127c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80127c4:	6878      	ldr	r0, [r7, #4]
 80127c6:	f000 fc05 	bl	8012fd4 <osSemaphoreAcquire>
 80127ca:	4603      	mov	r3, r0
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d101      	bne.n	80127d4 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 80127d0:	2301      	movs	r3, #1
 80127d2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80127d4:	68fb      	ldr	r3, [r7, #12]
}
 80127d6:	4618      	mov	r0, r3
 80127d8:	3710      	adds	r7, #16
 80127da:	46bd      	mov	sp, r7
 80127dc:	bd80      	pop	{r7, pc}

080127de <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 80127de:	b580      	push	{r7, lr}
 80127e0:	b082      	sub	sp, #8
 80127e2:	af00      	add	r7, sp, #0
 80127e4:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 80127e6:	6878      	ldr	r0, [r7, #4]
 80127e8:	f000 fc5a 	bl	80130a0 <osSemaphoreRelease>
#endif
}
 80127ec:	bf00      	nop
 80127ee:	3708      	adds	r7, #8
 80127f0:	46bd      	mov	sp, r7
 80127f2:	bd80      	pop	{r7, pc}

080127f4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80127f4:	b480      	push	{r7}
 80127f6:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80127f8:	bf00      	nop
 80127fa:	46bd      	mov	sp, r7
 80127fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012800:	4770      	bx	lr
	...

08012804 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8012804:	b480      	push	{r7}
 8012806:	b085      	sub	sp, #20
 8012808:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801280a:	f3ef 8305 	mrs	r3, IPSR
 801280e:	60bb      	str	r3, [r7, #8]
  return(result);
 8012810:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012812:	2b00      	cmp	r3, #0
 8012814:	d10f      	bne.n	8012836 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012816:	f3ef 8310 	mrs	r3, PRIMASK
 801281a:	607b      	str	r3, [r7, #4]
  return(result);
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	2b00      	cmp	r3, #0
 8012820:	d105      	bne.n	801282e <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012822:	f3ef 8311 	mrs	r3, BASEPRI
 8012826:	603b      	str	r3, [r7, #0]
  return(result);
 8012828:	683b      	ldr	r3, [r7, #0]
 801282a:	2b00      	cmp	r3, #0
 801282c:	d007      	beq.n	801283e <osKernelInitialize+0x3a>
 801282e:	4b0e      	ldr	r3, [pc, #56]	; (8012868 <osKernelInitialize+0x64>)
 8012830:	681b      	ldr	r3, [r3, #0]
 8012832:	2b02      	cmp	r3, #2
 8012834:	d103      	bne.n	801283e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8012836:	f06f 0305 	mvn.w	r3, #5
 801283a:	60fb      	str	r3, [r7, #12]
 801283c:	e00c      	b.n	8012858 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 801283e:	4b0a      	ldr	r3, [pc, #40]	; (8012868 <osKernelInitialize+0x64>)
 8012840:	681b      	ldr	r3, [r3, #0]
 8012842:	2b00      	cmp	r3, #0
 8012844:	d105      	bne.n	8012852 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8012846:	4b08      	ldr	r3, [pc, #32]	; (8012868 <osKernelInitialize+0x64>)
 8012848:	2201      	movs	r2, #1
 801284a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 801284c:	2300      	movs	r3, #0
 801284e:	60fb      	str	r3, [r7, #12]
 8012850:	e002      	b.n	8012858 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8012852:	f04f 33ff 	mov.w	r3, #4294967295
 8012856:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8012858:	68fb      	ldr	r3, [r7, #12]
}
 801285a:	4618      	mov	r0, r3
 801285c:	3714      	adds	r7, #20
 801285e:	46bd      	mov	sp, r7
 8012860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012864:	4770      	bx	lr
 8012866:	bf00      	nop
 8012868:	20000368 	.word	0x20000368

0801286c <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 801286c:	b580      	push	{r7, lr}
 801286e:	b082      	sub	sp, #8
 8012870:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8012872:	f002 fec5 	bl	8015600 <xTaskGetSchedulerState>
 8012876:	4603      	mov	r3, r0
 8012878:	2b00      	cmp	r3, #0
 801287a:	d004      	beq.n	8012886 <osKernelGetState+0x1a>
 801287c:	2b02      	cmp	r3, #2
 801287e:	d105      	bne.n	801288c <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8012880:	2302      	movs	r3, #2
 8012882:	607b      	str	r3, [r7, #4]
      break;
 8012884:	e00c      	b.n	80128a0 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 8012886:	2303      	movs	r3, #3
 8012888:	607b      	str	r3, [r7, #4]
      break;
 801288a:	e009      	b.n	80128a0 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 801288c:	4b07      	ldr	r3, [pc, #28]	; (80128ac <osKernelGetState+0x40>)
 801288e:	681b      	ldr	r3, [r3, #0]
 8012890:	2b01      	cmp	r3, #1
 8012892:	d102      	bne.n	801289a <osKernelGetState+0x2e>
        state = osKernelReady;
 8012894:	2301      	movs	r3, #1
 8012896:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8012898:	e001      	b.n	801289e <osKernelGetState+0x32>
        state = osKernelInactive;
 801289a:	2300      	movs	r3, #0
 801289c:	607b      	str	r3, [r7, #4]
      break;
 801289e:	bf00      	nop
  }

  return (state);
 80128a0:	687b      	ldr	r3, [r7, #4]
}
 80128a2:	4618      	mov	r0, r3
 80128a4:	3708      	adds	r7, #8
 80128a6:	46bd      	mov	sp, r7
 80128a8:	bd80      	pop	{r7, pc}
 80128aa:	bf00      	nop
 80128ac:	20000368 	.word	0x20000368

080128b0 <osKernelStart>:

osStatus_t osKernelStart (void) {
 80128b0:	b580      	push	{r7, lr}
 80128b2:	b084      	sub	sp, #16
 80128b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80128b6:	f3ef 8305 	mrs	r3, IPSR
 80128ba:	60bb      	str	r3, [r7, #8]
  return(result);
 80128bc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d10f      	bne.n	80128e2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80128c2:	f3ef 8310 	mrs	r3, PRIMASK
 80128c6:	607b      	str	r3, [r7, #4]
  return(result);
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d105      	bne.n	80128da <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80128ce:	f3ef 8311 	mrs	r3, BASEPRI
 80128d2:	603b      	str	r3, [r7, #0]
  return(result);
 80128d4:	683b      	ldr	r3, [r7, #0]
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	d007      	beq.n	80128ea <osKernelStart+0x3a>
 80128da:	4b0f      	ldr	r3, [pc, #60]	; (8012918 <osKernelStart+0x68>)
 80128dc:	681b      	ldr	r3, [r3, #0]
 80128de:	2b02      	cmp	r3, #2
 80128e0:	d103      	bne.n	80128ea <osKernelStart+0x3a>
    stat = osErrorISR;
 80128e2:	f06f 0305 	mvn.w	r3, #5
 80128e6:	60fb      	str	r3, [r7, #12]
 80128e8:	e010      	b.n	801290c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80128ea:	4b0b      	ldr	r3, [pc, #44]	; (8012918 <osKernelStart+0x68>)
 80128ec:	681b      	ldr	r3, [r3, #0]
 80128ee:	2b01      	cmp	r3, #1
 80128f0:	d109      	bne.n	8012906 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80128f2:	f7ff ff7f 	bl	80127f4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80128f6:	4b08      	ldr	r3, [pc, #32]	; (8012918 <osKernelStart+0x68>)
 80128f8:	2202      	movs	r2, #2
 80128fa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80128fc:	f002 fa12 	bl	8014d24 <vTaskStartScheduler>
      stat = osOK;
 8012900:	2300      	movs	r3, #0
 8012902:	60fb      	str	r3, [r7, #12]
 8012904:	e002      	b.n	801290c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8012906:	f04f 33ff 	mov.w	r3, #4294967295
 801290a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 801290c:	68fb      	ldr	r3, [r7, #12]
}
 801290e:	4618      	mov	r0, r3
 8012910:	3710      	adds	r7, #16
 8012912:	46bd      	mov	sp, r7
 8012914:	bd80      	pop	{r7, pc}
 8012916:	bf00      	nop
 8012918:	20000368 	.word	0x20000368

0801291c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 801291c:	b580      	push	{r7, lr}
 801291e:	b084      	sub	sp, #16
 8012920:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012922:	f3ef 8305 	mrs	r3, IPSR
 8012926:	60bb      	str	r3, [r7, #8]
  return(result);
 8012928:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 801292a:	2b00      	cmp	r3, #0
 801292c:	d10f      	bne.n	801294e <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801292e:	f3ef 8310 	mrs	r3, PRIMASK
 8012932:	607b      	str	r3, [r7, #4]
  return(result);
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	2b00      	cmp	r3, #0
 8012938:	d105      	bne.n	8012946 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801293a:	f3ef 8311 	mrs	r3, BASEPRI
 801293e:	603b      	str	r3, [r7, #0]
  return(result);
 8012940:	683b      	ldr	r3, [r7, #0]
 8012942:	2b00      	cmp	r3, #0
 8012944:	d007      	beq.n	8012956 <osKernelGetTickCount+0x3a>
 8012946:	4b08      	ldr	r3, [pc, #32]	; (8012968 <osKernelGetTickCount+0x4c>)
 8012948:	681b      	ldr	r3, [r3, #0]
 801294a:	2b02      	cmp	r3, #2
 801294c:	d103      	bne.n	8012956 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 801294e:	f002 fb0d 	bl	8014f6c <xTaskGetTickCountFromISR>
 8012952:	60f8      	str	r0, [r7, #12]
 8012954:	e002      	b.n	801295c <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8012956:	f002 faf9 	bl	8014f4c <xTaskGetTickCount>
 801295a:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 801295c:	68fb      	ldr	r3, [r7, #12]
}
 801295e:	4618      	mov	r0, r3
 8012960:	3710      	adds	r7, #16
 8012962:	46bd      	mov	sp, r7
 8012964:	bd80      	pop	{r7, pc}
 8012966:	bf00      	nop
 8012968:	20000368 	.word	0x20000368

0801296c <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 801296c:	b480      	push	{r7}
 801296e:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 8012970:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 8012974:	4618      	mov	r0, r3
 8012976:	46bd      	mov	sp, r7
 8012978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801297c:	4770      	bx	lr
	...

08012980 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8012980:	b580      	push	{r7, lr}
 8012982:	b090      	sub	sp, #64	; 0x40
 8012984:	af04      	add	r7, sp, #16
 8012986:	60f8      	str	r0, [r7, #12]
 8012988:	60b9      	str	r1, [r7, #8]
 801298a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 801298c:	2300      	movs	r3, #0
 801298e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012990:	f3ef 8305 	mrs	r3, IPSR
 8012994:	61fb      	str	r3, [r7, #28]
  return(result);
 8012996:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8012998:	2b00      	cmp	r3, #0
 801299a:	f040 808f 	bne.w	8012abc <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801299e:	f3ef 8310 	mrs	r3, PRIMASK
 80129a2:	61bb      	str	r3, [r7, #24]
  return(result);
 80129a4:	69bb      	ldr	r3, [r7, #24]
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d105      	bne.n	80129b6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80129aa:	f3ef 8311 	mrs	r3, BASEPRI
 80129ae:	617b      	str	r3, [r7, #20]
  return(result);
 80129b0:	697b      	ldr	r3, [r7, #20]
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d003      	beq.n	80129be <osThreadNew+0x3e>
 80129b6:	4b44      	ldr	r3, [pc, #272]	; (8012ac8 <osThreadNew+0x148>)
 80129b8:	681b      	ldr	r3, [r3, #0]
 80129ba:	2b02      	cmp	r3, #2
 80129bc:	d07e      	beq.n	8012abc <osThreadNew+0x13c>
 80129be:	68fb      	ldr	r3, [r7, #12]
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d07b      	beq.n	8012abc <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80129c4:	2380      	movs	r3, #128	; 0x80
 80129c6:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80129c8:	2318      	movs	r3, #24
 80129ca:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80129cc:	2300      	movs	r3, #0
 80129ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80129d0:	f04f 33ff 	mov.w	r3, #4294967295
 80129d4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d045      	beq.n	8012a68 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	681b      	ldr	r3, [r3, #0]
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d002      	beq.n	80129ea <osThreadNew+0x6a>
        name = attr->name;
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	681b      	ldr	r3, [r3, #0]
 80129e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	699b      	ldr	r3, [r3, #24]
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d002      	beq.n	80129f8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	699b      	ldr	r3, [r3, #24]
 80129f6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80129f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	d008      	beq.n	8012a10 <osThreadNew+0x90>
 80129fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a00:	2b38      	cmp	r3, #56	; 0x38
 8012a02:	d805      	bhi.n	8012a10 <osThreadNew+0x90>
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	685b      	ldr	r3, [r3, #4]
 8012a08:	f003 0301 	and.w	r3, r3, #1
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d001      	beq.n	8012a14 <osThreadNew+0x94>
        return (NULL);
 8012a10:	2300      	movs	r3, #0
 8012a12:	e054      	b.n	8012abe <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	695b      	ldr	r3, [r3, #20]
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d003      	beq.n	8012a24 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	695b      	ldr	r3, [r3, #20]
 8012a20:	089b      	lsrs	r3, r3, #2
 8012a22:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	689b      	ldr	r3, [r3, #8]
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d00e      	beq.n	8012a4a <osThreadNew+0xca>
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	68db      	ldr	r3, [r3, #12]
 8012a30:	2b5b      	cmp	r3, #91	; 0x5b
 8012a32:	d90a      	bls.n	8012a4a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d006      	beq.n	8012a4a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	695b      	ldr	r3, [r3, #20]
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d002      	beq.n	8012a4a <osThreadNew+0xca>
        mem = 1;
 8012a44:	2301      	movs	r3, #1
 8012a46:	623b      	str	r3, [r7, #32]
 8012a48:	e010      	b.n	8012a6c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	689b      	ldr	r3, [r3, #8]
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d10c      	bne.n	8012a6c <osThreadNew+0xec>
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	68db      	ldr	r3, [r3, #12]
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	d108      	bne.n	8012a6c <osThreadNew+0xec>
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	691b      	ldr	r3, [r3, #16]
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	d104      	bne.n	8012a6c <osThreadNew+0xec>
          mem = 0;
 8012a62:	2300      	movs	r3, #0
 8012a64:	623b      	str	r3, [r7, #32]
 8012a66:	e001      	b.n	8012a6c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8012a68:	2300      	movs	r3, #0
 8012a6a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8012a6c:	6a3b      	ldr	r3, [r7, #32]
 8012a6e:	2b01      	cmp	r3, #1
 8012a70:	d110      	bne.n	8012a94 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8012a76:	687a      	ldr	r2, [r7, #4]
 8012a78:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012a7a:	9202      	str	r2, [sp, #8]
 8012a7c:	9301      	str	r3, [sp, #4]
 8012a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a80:	9300      	str	r3, [sp, #0]
 8012a82:	68bb      	ldr	r3, [r7, #8]
 8012a84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012a86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012a88:	68f8      	ldr	r0, [r7, #12]
 8012a8a:	f001 feef 	bl	801486c <xTaskCreateStatic>
 8012a8e:	4603      	mov	r3, r0
 8012a90:	613b      	str	r3, [r7, #16]
 8012a92:	e013      	b.n	8012abc <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8012a94:	6a3b      	ldr	r3, [r7, #32]
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d110      	bne.n	8012abc <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8012a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a9c:	b29a      	uxth	r2, r3
 8012a9e:	f107 0310 	add.w	r3, r7, #16
 8012aa2:	9301      	str	r3, [sp, #4]
 8012aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012aa6:	9300      	str	r3, [sp, #0]
 8012aa8:	68bb      	ldr	r3, [r7, #8]
 8012aaa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012aac:	68f8      	ldr	r0, [r7, #12]
 8012aae:	f001 ff3d 	bl	801492c <xTaskCreate>
 8012ab2:	4603      	mov	r3, r0
 8012ab4:	2b01      	cmp	r3, #1
 8012ab6:	d001      	beq.n	8012abc <osThreadNew+0x13c>
          hTask = NULL;
 8012ab8:	2300      	movs	r3, #0
 8012aba:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8012abc:	693b      	ldr	r3, [r7, #16]
}
 8012abe:	4618      	mov	r0, r3
 8012ac0:	3730      	adds	r7, #48	; 0x30
 8012ac2:	46bd      	mov	sp, r7
 8012ac4:	bd80      	pop	{r7, pc}
 8012ac6:	bf00      	nop
 8012ac8:	20000368 	.word	0x20000368

08012acc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8012acc:	b580      	push	{r7, lr}
 8012ace:	b086      	sub	sp, #24
 8012ad0:	af00      	add	r7, sp, #0
 8012ad2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012ad4:	f3ef 8305 	mrs	r3, IPSR
 8012ad8:	613b      	str	r3, [r7, #16]
  return(result);
 8012ada:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d10f      	bne.n	8012b00 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012ae0:	f3ef 8310 	mrs	r3, PRIMASK
 8012ae4:	60fb      	str	r3, [r7, #12]
  return(result);
 8012ae6:	68fb      	ldr	r3, [r7, #12]
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	d105      	bne.n	8012af8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012aec:	f3ef 8311 	mrs	r3, BASEPRI
 8012af0:	60bb      	str	r3, [r7, #8]
  return(result);
 8012af2:	68bb      	ldr	r3, [r7, #8]
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	d007      	beq.n	8012b08 <osDelay+0x3c>
 8012af8:	4b0a      	ldr	r3, [pc, #40]	; (8012b24 <osDelay+0x58>)
 8012afa:	681b      	ldr	r3, [r3, #0]
 8012afc:	2b02      	cmp	r3, #2
 8012afe:	d103      	bne.n	8012b08 <osDelay+0x3c>
    stat = osErrorISR;
 8012b00:	f06f 0305 	mvn.w	r3, #5
 8012b04:	617b      	str	r3, [r7, #20]
 8012b06:	e007      	b.n	8012b18 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8012b08:	2300      	movs	r3, #0
 8012b0a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d002      	beq.n	8012b18 <osDelay+0x4c>
      vTaskDelay(ticks);
 8012b12:	6878      	ldr	r0, [r7, #4]
 8012b14:	f002 f8d0 	bl	8014cb8 <vTaskDelay>
    }
  }

  return (stat);
 8012b18:	697b      	ldr	r3, [r7, #20]
}
 8012b1a:	4618      	mov	r0, r3
 8012b1c:	3718      	adds	r7, #24
 8012b1e:	46bd      	mov	sp, r7
 8012b20:	bd80      	pop	{r7, pc}
 8012b22:	bf00      	nop
 8012b24:	20000368 	.word	0x20000368

08012b28 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8012b28:	b580      	push	{r7, lr}
 8012b2a:	b088      	sub	sp, #32
 8012b2c:	af00      	add	r7, sp, #0
 8012b2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012b30:	f3ef 8305 	mrs	r3, IPSR
 8012b34:	617b      	str	r3, [r7, #20]
  return(result);
 8012b36:	697b      	ldr	r3, [r7, #20]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d10f      	bne.n	8012b5c <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012b3c:	f3ef 8310 	mrs	r3, PRIMASK
 8012b40:	613b      	str	r3, [r7, #16]
  return(result);
 8012b42:	693b      	ldr	r3, [r7, #16]
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d105      	bne.n	8012b54 <osDelayUntil+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012b48:	f3ef 8311 	mrs	r3, BASEPRI
 8012b4c:	60fb      	str	r3, [r7, #12]
  return(result);
 8012b4e:	68fb      	ldr	r3, [r7, #12]
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	d007      	beq.n	8012b64 <osDelayUntil+0x3c>
 8012b54:	4b13      	ldr	r3, [pc, #76]	; (8012ba4 <osDelayUntil+0x7c>)
 8012b56:	681b      	ldr	r3, [r3, #0]
 8012b58:	2b02      	cmp	r3, #2
 8012b5a:	d103      	bne.n	8012b64 <osDelayUntil+0x3c>
    stat = osErrorISR;
 8012b5c:	f06f 0305 	mvn.w	r3, #5
 8012b60:	61fb      	str	r3, [r7, #28]
 8012b62:	e019      	b.n	8012b98 <osDelayUntil+0x70>
  }
  else {
    stat = osOK;
 8012b64:	2300      	movs	r3, #0
 8012b66:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 8012b68:	f002 f9f0 	bl	8014f4c <xTaskGetTickCount>
 8012b6c:	4603      	mov	r3, r0
 8012b6e:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8012b70:	68bb      	ldr	r3, [r7, #8]
 8012b72:	687a      	ldr	r2, [r7, #4]
 8012b74:	1ad3      	subs	r3, r2, r3
 8012b76:	61bb      	str	r3, [r7, #24]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8012b78:	69bb      	ldr	r3, [r7, #24]
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	d009      	beq.n	8012b92 <osDelayUntil+0x6a>
 8012b7e:	69bb      	ldr	r3, [r7, #24]
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	db06      	blt.n	8012b92 <osDelayUntil+0x6a>
      vTaskDelayUntil (&tcnt, delay);
 8012b84:	f107 0308 	add.w	r3, r7, #8
 8012b88:	69b9      	ldr	r1, [r7, #24]
 8012b8a:	4618      	mov	r0, r3
 8012b8c:	f002 f814 	bl	8014bb8 <vTaskDelayUntil>
 8012b90:	e002      	b.n	8012b98 <osDelayUntil+0x70>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8012b92:	f06f 0303 	mvn.w	r3, #3
 8012b96:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 8012b98:	69fb      	ldr	r3, [r7, #28]
}
 8012b9a:	4618      	mov	r0, r3
 8012b9c:	3720      	adds	r7, #32
 8012b9e:	46bd      	mov	sp, r7
 8012ba0:	bd80      	pop	{r7, pc}
 8012ba2:	bf00      	nop
 8012ba4:	20000368 	.word	0x20000368

08012ba8 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8012ba8:	b580      	push	{r7, lr}
 8012baa:	b08a      	sub	sp, #40	; 0x28
 8012bac:	af00      	add	r7, sp, #0
 8012bae:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8012bb0:	2300      	movs	r3, #0
 8012bb2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012bb4:	f3ef 8305 	mrs	r3, IPSR
 8012bb8:	613b      	str	r3, [r7, #16]
  return(result);
 8012bba:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	f040 8085 	bne.w	8012ccc <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012bc2:	f3ef 8310 	mrs	r3, PRIMASK
 8012bc6:	60fb      	str	r3, [r7, #12]
  return(result);
 8012bc8:	68fb      	ldr	r3, [r7, #12]
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d105      	bne.n	8012bda <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012bce:	f3ef 8311 	mrs	r3, BASEPRI
 8012bd2:	60bb      	str	r3, [r7, #8]
  return(result);
 8012bd4:	68bb      	ldr	r3, [r7, #8]
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d003      	beq.n	8012be2 <osMutexNew+0x3a>
 8012bda:	4b3f      	ldr	r3, [pc, #252]	; (8012cd8 <osMutexNew+0x130>)
 8012bdc:	681b      	ldr	r3, [r3, #0]
 8012bde:	2b02      	cmp	r3, #2
 8012be0:	d074      	beq.n	8012ccc <osMutexNew+0x124>
    if (attr != NULL) {
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d003      	beq.n	8012bf0 <osMutexNew+0x48>
      type = attr->attr_bits;
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	685b      	ldr	r3, [r3, #4]
 8012bec:	623b      	str	r3, [r7, #32]
 8012bee:	e001      	b.n	8012bf4 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8012bf0:	2300      	movs	r3, #0
 8012bf2:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8012bf4:	6a3b      	ldr	r3, [r7, #32]
 8012bf6:	f003 0301 	and.w	r3, r3, #1
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	d002      	beq.n	8012c04 <osMutexNew+0x5c>
      rmtx = 1U;
 8012bfe:	2301      	movs	r3, #1
 8012c00:	61fb      	str	r3, [r7, #28]
 8012c02:	e001      	b.n	8012c08 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8012c04:	2300      	movs	r3, #0
 8012c06:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8012c08:	6a3b      	ldr	r3, [r7, #32]
 8012c0a:	f003 0308 	and.w	r3, r3, #8
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d15c      	bne.n	8012ccc <osMutexNew+0x124>
      mem = -1;
 8012c12:	f04f 33ff 	mov.w	r3, #4294967295
 8012c16:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d015      	beq.n	8012c4a <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	689b      	ldr	r3, [r3, #8]
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d006      	beq.n	8012c34 <osMutexNew+0x8c>
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	68db      	ldr	r3, [r3, #12]
 8012c2a:	2b4f      	cmp	r3, #79	; 0x4f
 8012c2c:	d902      	bls.n	8012c34 <osMutexNew+0x8c>
          mem = 1;
 8012c2e:	2301      	movs	r3, #1
 8012c30:	61bb      	str	r3, [r7, #24]
 8012c32:	e00c      	b.n	8012c4e <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	689b      	ldr	r3, [r3, #8]
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	d108      	bne.n	8012c4e <osMutexNew+0xa6>
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	68db      	ldr	r3, [r3, #12]
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d104      	bne.n	8012c4e <osMutexNew+0xa6>
            mem = 0;
 8012c44:	2300      	movs	r3, #0
 8012c46:	61bb      	str	r3, [r7, #24]
 8012c48:	e001      	b.n	8012c4e <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8012c4a:	2300      	movs	r3, #0
 8012c4c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8012c4e:	69bb      	ldr	r3, [r7, #24]
 8012c50:	2b01      	cmp	r3, #1
 8012c52:	d112      	bne.n	8012c7a <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8012c54:	69fb      	ldr	r3, [r7, #28]
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d007      	beq.n	8012c6a <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	689b      	ldr	r3, [r3, #8]
 8012c5e:	4619      	mov	r1, r3
 8012c60:	2004      	movs	r0, #4
 8012c62:	f000 fe7c 	bl	801395e <xQueueCreateMutexStatic>
 8012c66:	6278      	str	r0, [r7, #36]	; 0x24
 8012c68:	e016      	b.n	8012c98 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	689b      	ldr	r3, [r3, #8]
 8012c6e:	4619      	mov	r1, r3
 8012c70:	2001      	movs	r0, #1
 8012c72:	f000 fe74 	bl	801395e <xQueueCreateMutexStatic>
 8012c76:	6278      	str	r0, [r7, #36]	; 0x24
 8012c78:	e00e      	b.n	8012c98 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8012c7a:	69bb      	ldr	r3, [r7, #24]
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d10b      	bne.n	8012c98 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8012c80:	69fb      	ldr	r3, [r7, #28]
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d004      	beq.n	8012c90 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8012c86:	2004      	movs	r0, #4
 8012c88:	f000 fe51 	bl	801392e <xQueueCreateMutex>
 8012c8c:	6278      	str	r0, [r7, #36]	; 0x24
 8012c8e:	e003      	b.n	8012c98 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8012c90:	2001      	movs	r0, #1
 8012c92:	f000 fe4c 	bl	801392e <xQueueCreateMutex>
 8012c96:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8012c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	d00c      	beq.n	8012cb8 <osMutexNew+0x110>
        if (attr != NULL) {
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d003      	beq.n	8012cac <osMutexNew+0x104>
          name = attr->name;
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	681b      	ldr	r3, [r3, #0]
 8012ca8:	617b      	str	r3, [r7, #20]
 8012caa:	e001      	b.n	8012cb0 <osMutexNew+0x108>
        } else {
          name = NULL;
 8012cac:	2300      	movs	r3, #0
 8012cae:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8012cb0:	6979      	ldr	r1, [r7, #20]
 8012cb2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012cb4:	f001 fd54 	bl	8014760 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8012cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	d006      	beq.n	8012ccc <osMutexNew+0x124>
 8012cbe:	69fb      	ldr	r3, [r7, #28]
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d003      	beq.n	8012ccc <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8012cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cc6:	f043 0301 	orr.w	r3, r3, #1
 8012cca:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8012ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012cce:	4618      	mov	r0, r3
 8012cd0:	3728      	adds	r7, #40	; 0x28
 8012cd2:	46bd      	mov	sp, r7
 8012cd4:	bd80      	pop	{r7, pc}
 8012cd6:	bf00      	nop
 8012cd8:	20000368 	.word	0x20000368

08012cdc <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8012cdc:	b580      	push	{r7, lr}
 8012cde:	b088      	sub	sp, #32
 8012ce0:	af00      	add	r7, sp, #0
 8012ce2:	6078      	str	r0, [r7, #4]
 8012ce4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	f023 0301 	bic.w	r3, r3, #1
 8012cec:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	f003 0301 	and.w	r3, r3, #1
 8012cf4:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8012cf6:	2300      	movs	r3, #0
 8012cf8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012cfa:	f3ef 8305 	mrs	r3, IPSR
 8012cfe:	613b      	str	r3, [r7, #16]
  return(result);
 8012d00:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	d10f      	bne.n	8012d26 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012d06:	f3ef 8310 	mrs	r3, PRIMASK
 8012d0a:	60fb      	str	r3, [r7, #12]
  return(result);
 8012d0c:	68fb      	ldr	r3, [r7, #12]
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	d105      	bne.n	8012d1e <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012d12:	f3ef 8311 	mrs	r3, BASEPRI
 8012d16:	60bb      	str	r3, [r7, #8]
  return(result);
 8012d18:	68bb      	ldr	r3, [r7, #8]
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d007      	beq.n	8012d2e <osMutexAcquire+0x52>
 8012d1e:	4b1d      	ldr	r3, [pc, #116]	; (8012d94 <osMutexAcquire+0xb8>)
 8012d20:	681b      	ldr	r3, [r3, #0]
 8012d22:	2b02      	cmp	r3, #2
 8012d24:	d103      	bne.n	8012d2e <osMutexAcquire+0x52>
    stat = osErrorISR;
 8012d26:	f06f 0305 	mvn.w	r3, #5
 8012d2a:	61fb      	str	r3, [r7, #28]
 8012d2c:	e02c      	b.n	8012d88 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8012d2e:	69bb      	ldr	r3, [r7, #24]
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d103      	bne.n	8012d3c <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8012d34:	f06f 0303 	mvn.w	r3, #3
 8012d38:	61fb      	str	r3, [r7, #28]
 8012d3a:	e025      	b.n	8012d88 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8012d3c:	697b      	ldr	r3, [r7, #20]
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d011      	beq.n	8012d66 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8012d42:	6839      	ldr	r1, [r7, #0]
 8012d44:	69b8      	ldr	r0, [r7, #24]
 8012d46:	f000 fe73 	bl	8013a30 <xQueueTakeMutexRecursive>
 8012d4a:	4603      	mov	r3, r0
 8012d4c:	2b01      	cmp	r3, #1
 8012d4e:	d01b      	beq.n	8012d88 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8012d50:	683b      	ldr	r3, [r7, #0]
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d003      	beq.n	8012d5e <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8012d56:	f06f 0301 	mvn.w	r3, #1
 8012d5a:	61fb      	str	r3, [r7, #28]
 8012d5c:	e014      	b.n	8012d88 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8012d5e:	f06f 0302 	mvn.w	r3, #2
 8012d62:	61fb      	str	r3, [r7, #28]
 8012d64:	e010      	b.n	8012d88 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8012d66:	6839      	ldr	r1, [r7, #0]
 8012d68:	69b8      	ldr	r0, [r7, #24]
 8012d6a:	f001 fa19 	bl	80141a0 <xQueueSemaphoreTake>
 8012d6e:	4603      	mov	r3, r0
 8012d70:	2b01      	cmp	r3, #1
 8012d72:	d009      	beq.n	8012d88 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8012d74:	683b      	ldr	r3, [r7, #0]
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d003      	beq.n	8012d82 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8012d7a:	f06f 0301 	mvn.w	r3, #1
 8012d7e:	61fb      	str	r3, [r7, #28]
 8012d80:	e002      	b.n	8012d88 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8012d82:	f06f 0302 	mvn.w	r3, #2
 8012d86:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8012d88:	69fb      	ldr	r3, [r7, #28]
}
 8012d8a:	4618      	mov	r0, r3
 8012d8c:	3720      	adds	r7, #32
 8012d8e:	46bd      	mov	sp, r7
 8012d90:	bd80      	pop	{r7, pc}
 8012d92:	bf00      	nop
 8012d94:	20000368 	.word	0x20000368

08012d98 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8012d98:	b580      	push	{r7, lr}
 8012d9a:	b088      	sub	sp, #32
 8012d9c:	af00      	add	r7, sp, #0
 8012d9e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	f023 0301 	bic.w	r3, r3, #1
 8012da6:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	f003 0301 	and.w	r3, r3, #1
 8012dae:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8012db0:	2300      	movs	r3, #0
 8012db2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012db4:	f3ef 8305 	mrs	r3, IPSR
 8012db8:	613b      	str	r3, [r7, #16]
  return(result);
 8012dba:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d10f      	bne.n	8012de0 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012dc0:	f3ef 8310 	mrs	r3, PRIMASK
 8012dc4:	60fb      	str	r3, [r7, #12]
  return(result);
 8012dc6:	68fb      	ldr	r3, [r7, #12]
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d105      	bne.n	8012dd8 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012dcc:	f3ef 8311 	mrs	r3, BASEPRI
 8012dd0:	60bb      	str	r3, [r7, #8]
  return(result);
 8012dd2:	68bb      	ldr	r3, [r7, #8]
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	d007      	beq.n	8012de8 <osMutexRelease+0x50>
 8012dd8:	4b16      	ldr	r3, [pc, #88]	; (8012e34 <osMutexRelease+0x9c>)
 8012dda:	681b      	ldr	r3, [r3, #0]
 8012ddc:	2b02      	cmp	r3, #2
 8012dde:	d103      	bne.n	8012de8 <osMutexRelease+0x50>
    stat = osErrorISR;
 8012de0:	f06f 0305 	mvn.w	r3, #5
 8012de4:	61fb      	str	r3, [r7, #28]
 8012de6:	e01f      	b.n	8012e28 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8012de8:	69bb      	ldr	r3, [r7, #24]
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d103      	bne.n	8012df6 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8012dee:	f06f 0303 	mvn.w	r3, #3
 8012df2:	61fb      	str	r3, [r7, #28]
 8012df4:	e018      	b.n	8012e28 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8012df6:	697b      	ldr	r3, [r7, #20]
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	d009      	beq.n	8012e10 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8012dfc:	69b8      	ldr	r0, [r7, #24]
 8012dfe:	f000 fde2 	bl	80139c6 <xQueueGiveMutexRecursive>
 8012e02:	4603      	mov	r3, r0
 8012e04:	2b01      	cmp	r3, #1
 8012e06:	d00f      	beq.n	8012e28 <osMutexRelease+0x90>
        stat = osErrorResource;
 8012e08:	f06f 0302 	mvn.w	r3, #2
 8012e0c:	61fb      	str	r3, [r7, #28]
 8012e0e:	e00b      	b.n	8012e28 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8012e10:	2300      	movs	r3, #0
 8012e12:	2200      	movs	r2, #0
 8012e14:	2100      	movs	r1, #0
 8012e16:	69b8      	ldr	r0, [r7, #24]
 8012e18:	f000 feb0 	bl	8013b7c <xQueueGenericSend>
 8012e1c:	4603      	mov	r3, r0
 8012e1e:	2b01      	cmp	r3, #1
 8012e20:	d002      	beq.n	8012e28 <osMutexRelease+0x90>
        stat = osErrorResource;
 8012e22:	f06f 0302 	mvn.w	r3, #2
 8012e26:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8012e28:	69fb      	ldr	r3, [r7, #28]
}
 8012e2a:	4618      	mov	r0, r3
 8012e2c:	3720      	adds	r7, #32
 8012e2e:	46bd      	mov	sp, r7
 8012e30:	bd80      	pop	{r7, pc}
 8012e32:	bf00      	nop
 8012e34:	20000368 	.word	0x20000368

08012e38 <osMutexGetOwner>:

osThreadId_t osMutexGetOwner (osMutexId_t mutex_id) {
 8012e38:	b580      	push	{r7, lr}
 8012e3a:	b088      	sub	sp, #32
 8012e3c:	af00      	add	r7, sp, #0
 8012e3e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osThreadId_t owner;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	f023 0301 	bic.w	r3, r3, #1
 8012e46:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012e48:	f3ef 8305 	mrs	r3, IPSR
 8012e4c:	617b      	str	r3, [r7, #20]
  return(result);
 8012e4e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ() || (hMutex == NULL)) {
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	d112      	bne.n	8012e7a <osMutexGetOwner+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012e54:	f3ef 8310 	mrs	r3, PRIMASK
 8012e58:	613b      	str	r3, [r7, #16]
  return(result);
 8012e5a:	693b      	ldr	r3, [r7, #16]
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d105      	bne.n	8012e6c <osMutexGetOwner+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012e60:	f3ef 8311 	mrs	r3, BASEPRI
 8012e64:	60fb      	str	r3, [r7, #12]
  return(result);
 8012e66:	68fb      	ldr	r3, [r7, #12]
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	d003      	beq.n	8012e74 <osMutexGetOwner+0x3c>
 8012e6c:	4b09      	ldr	r3, [pc, #36]	; (8012e94 <osMutexGetOwner+0x5c>)
 8012e6e:	681b      	ldr	r3, [r3, #0]
 8012e70:	2b02      	cmp	r3, #2
 8012e72:	d002      	beq.n	8012e7a <osMutexGetOwner+0x42>
 8012e74:	69bb      	ldr	r3, [r7, #24]
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	d102      	bne.n	8012e80 <osMutexGetOwner+0x48>
    owner = NULL;
 8012e7a:	2300      	movs	r3, #0
 8012e7c:	61fb      	str	r3, [r7, #28]
 8012e7e:	e003      	b.n	8012e88 <osMutexGetOwner+0x50>
  } else {
    owner = (osThreadId_t)xSemaphoreGetMutexHolder (hMutex);
 8012e80:	69b8      	ldr	r0, [r7, #24]
 8012e82:	f000 fd87 	bl	8013994 <xQueueGetMutexHolder>
 8012e86:	61f8      	str	r0, [r7, #28]
  }

  return (owner);
 8012e88:	69fb      	ldr	r3, [r7, #28]
}
 8012e8a:	4618      	mov	r0, r3
 8012e8c:	3720      	adds	r7, #32
 8012e8e:	46bd      	mov	sp, r7
 8012e90:	bd80      	pop	{r7, pc}
 8012e92:	bf00      	nop
 8012e94:	20000368 	.word	0x20000368

08012e98 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8012e98:	b580      	push	{r7, lr}
 8012e9a:	b08c      	sub	sp, #48	; 0x30
 8012e9c:	af02      	add	r7, sp, #8
 8012e9e:	60f8      	str	r0, [r7, #12]
 8012ea0:	60b9      	str	r1, [r7, #8]
 8012ea2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8012ea4:	2300      	movs	r3, #0
 8012ea6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012ea8:	f3ef 8305 	mrs	r3, IPSR
 8012eac:	61bb      	str	r3, [r7, #24]
  return(result);
 8012eae:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	f040 8087 	bne.w	8012fc4 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012eb6:	f3ef 8310 	mrs	r3, PRIMASK
 8012eba:	617b      	str	r3, [r7, #20]
  return(result);
 8012ebc:	697b      	ldr	r3, [r7, #20]
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	d105      	bne.n	8012ece <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012ec2:	f3ef 8311 	mrs	r3, BASEPRI
 8012ec6:	613b      	str	r3, [r7, #16]
  return(result);
 8012ec8:	693b      	ldr	r3, [r7, #16]
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d003      	beq.n	8012ed6 <osSemaphoreNew+0x3e>
 8012ece:	4b40      	ldr	r3, [pc, #256]	; (8012fd0 <osSemaphoreNew+0x138>)
 8012ed0:	681b      	ldr	r3, [r3, #0]
 8012ed2:	2b02      	cmp	r3, #2
 8012ed4:	d076      	beq.n	8012fc4 <osSemaphoreNew+0x12c>
 8012ed6:	68fb      	ldr	r3, [r7, #12]
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d073      	beq.n	8012fc4 <osSemaphoreNew+0x12c>
 8012edc:	68ba      	ldr	r2, [r7, #8]
 8012ede:	68fb      	ldr	r3, [r7, #12]
 8012ee0:	429a      	cmp	r2, r3
 8012ee2:	d86f      	bhi.n	8012fc4 <osSemaphoreNew+0x12c>
    mem = -1;
 8012ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8012ee8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d015      	beq.n	8012f1c <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	689b      	ldr	r3, [r3, #8]
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	d006      	beq.n	8012f06 <osSemaphoreNew+0x6e>
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	68db      	ldr	r3, [r3, #12]
 8012efc:	2b4f      	cmp	r3, #79	; 0x4f
 8012efe:	d902      	bls.n	8012f06 <osSemaphoreNew+0x6e>
        mem = 1;
 8012f00:	2301      	movs	r3, #1
 8012f02:	623b      	str	r3, [r7, #32]
 8012f04:	e00c      	b.n	8012f20 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	689b      	ldr	r3, [r3, #8]
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d108      	bne.n	8012f20 <osSemaphoreNew+0x88>
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	68db      	ldr	r3, [r3, #12]
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d104      	bne.n	8012f20 <osSemaphoreNew+0x88>
          mem = 0;
 8012f16:	2300      	movs	r3, #0
 8012f18:	623b      	str	r3, [r7, #32]
 8012f1a:	e001      	b.n	8012f20 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8012f1c:	2300      	movs	r3, #0
 8012f1e:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8012f20:	6a3b      	ldr	r3, [r7, #32]
 8012f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f26:	d04d      	beq.n	8012fc4 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 8012f28:	68fb      	ldr	r3, [r7, #12]
 8012f2a:	2b01      	cmp	r3, #1
 8012f2c:	d129      	bne.n	8012f82 <osSemaphoreNew+0xea>
        if (mem == 1) {
 8012f2e:	6a3b      	ldr	r3, [r7, #32]
 8012f30:	2b01      	cmp	r3, #1
 8012f32:	d10b      	bne.n	8012f4c <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	689a      	ldr	r2, [r3, #8]
 8012f38:	2303      	movs	r3, #3
 8012f3a:	9300      	str	r3, [sp, #0]
 8012f3c:	4613      	mov	r3, r2
 8012f3e:	2200      	movs	r2, #0
 8012f40:	2100      	movs	r1, #0
 8012f42:	2001      	movs	r0, #1
 8012f44:	f000 fbf8 	bl	8013738 <xQueueGenericCreateStatic>
 8012f48:	6278      	str	r0, [r7, #36]	; 0x24
 8012f4a:	e005      	b.n	8012f58 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8012f4c:	2203      	movs	r2, #3
 8012f4e:	2100      	movs	r1, #0
 8012f50:	2001      	movs	r0, #1
 8012f52:	f000 fc6e 	bl	8013832 <xQueueGenericCreate>
 8012f56:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8012f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	d022      	beq.n	8012fa4 <osSemaphoreNew+0x10c>
 8012f5e:	68bb      	ldr	r3, [r7, #8]
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d01f      	beq.n	8012fa4 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8012f64:	2300      	movs	r3, #0
 8012f66:	2200      	movs	r2, #0
 8012f68:	2100      	movs	r1, #0
 8012f6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012f6c:	f000 fe06 	bl	8013b7c <xQueueGenericSend>
 8012f70:	4603      	mov	r3, r0
 8012f72:	2b01      	cmp	r3, #1
 8012f74:	d016      	beq.n	8012fa4 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 8012f76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012f78:	f001 faa5 	bl	80144c6 <vQueueDelete>
            hSemaphore = NULL;
 8012f7c:	2300      	movs	r3, #0
 8012f7e:	627b      	str	r3, [r7, #36]	; 0x24
 8012f80:	e010      	b.n	8012fa4 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 8012f82:	6a3b      	ldr	r3, [r7, #32]
 8012f84:	2b01      	cmp	r3, #1
 8012f86:	d108      	bne.n	8012f9a <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	689b      	ldr	r3, [r3, #8]
 8012f8c:	461a      	mov	r2, r3
 8012f8e:	68b9      	ldr	r1, [r7, #8]
 8012f90:	68f8      	ldr	r0, [r7, #12]
 8012f92:	f000 fd84 	bl	8013a9e <xQueueCreateCountingSemaphoreStatic>
 8012f96:	6278      	str	r0, [r7, #36]	; 0x24
 8012f98:	e004      	b.n	8012fa4 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8012f9a:	68b9      	ldr	r1, [r7, #8]
 8012f9c:	68f8      	ldr	r0, [r7, #12]
 8012f9e:	f000 fdb7 	bl	8013b10 <xQueueCreateCountingSemaphore>
 8012fa2:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8012fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	d00c      	beq.n	8012fc4 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d003      	beq.n	8012fb8 <osSemaphoreNew+0x120>
          name = attr->name;
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	681b      	ldr	r3, [r3, #0]
 8012fb4:	61fb      	str	r3, [r7, #28]
 8012fb6:	e001      	b.n	8012fbc <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 8012fb8:	2300      	movs	r3, #0
 8012fba:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8012fbc:	69f9      	ldr	r1, [r7, #28]
 8012fbe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012fc0:	f001 fbce 	bl	8014760 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8012fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012fc6:	4618      	mov	r0, r3
 8012fc8:	3728      	adds	r7, #40	; 0x28
 8012fca:	46bd      	mov	sp, r7
 8012fcc:	bd80      	pop	{r7, pc}
 8012fce:	bf00      	nop
 8012fd0:	20000368 	.word	0x20000368

08012fd4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8012fd4:	b580      	push	{r7, lr}
 8012fd6:	b088      	sub	sp, #32
 8012fd8:	af00      	add	r7, sp, #0
 8012fda:	6078      	str	r0, [r7, #4]
 8012fdc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8012fe2:	2300      	movs	r3, #0
 8012fe4:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8012fe6:	69bb      	ldr	r3, [r7, #24]
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d103      	bne.n	8012ff4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8012fec:	f06f 0303 	mvn.w	r3, #3
 8012ff0:	61fb      	str	r3, [r7, #28]
 8012ff2:	e04b      	b.n	801308c <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012ff4:	f3ef 8305 	mrs	r3, IPSR
 8012ff8:	617b      	str	r3, [r7, #20]
  return(result);
 8012ffa:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d10f      	bne.n	8013020 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013000:	f3ef 8310 	mrs	r3, PRIMASK
 8013004:	613b      	str	r3, [r7, #16]
  return(result);
 8013006:	693b      	ldr	r3, [r7, #16]
 8013008:	2b00      	cmp	r3, #0
 801300a:	d105      	bne.n	8013018 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801300c:	f3ef 8311 	mrs	r3, BASEPRI
 8013010:	60fb      	str	r3, [r7, #12]
  return(result);
 8013012:	68fb      	ldr	r3, [r7, #12]
 8013014:	2b00      	cmp	r3, #0
 8013016:	d026      	beq.n	8013066 <osSemaphoreAcquire+0x92>
 8013018:	4b1f      	ldr	r3, [pc, #124]	; (8013098 <osSemaphoreAcquire+0xc4>)
 801301a:	681b      	ldr	r3, [r3, #0]
 801301c:	2b02      	cmp	r3, #2
 801301e:	d122      	bne.n	8013066 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8013020:	683b      	ldr	r3, [r7, #0]
 8013022:	2b00      	cmp	r3, #0
 8013024:	d003      	beq.n	801302e <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8013026:	f06f 0303 	mvn.w	r3, #3
 801302a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 801302c:	e02d      	b.n	801308a <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 801302e:	2300      	movs	r3, #0
 8013030:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8013032:	f107 0308 	add.w	r3, r7, #8
 8013036:	461a      	mov	r2, r3
 8013038:	2100      	movs	r1, #0
 801303a:	69b8      	ldr	r0, [r7, #24]
 801303c:	f001 f9c0 	bl	80143c0 <xQueueReceiveFromISR>
 8013040:	4603      	mov	r3, r0
 8013042:	2b01      	cmp	r3, #1
 8013044:	d003      	beq.n	801304e <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8013046:	f06f 0302 	mvn.w	r3, #2
 801304a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 801304c:	e01d      	b.n	801308a <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 801304e:	68bb      	ldr	r3, [r7, #8]
 8013050:	2b00      	cmp	r3, #0
 8013052:	d01a      	beq.n	801308a <osSemaphoreAcquire+0xb6>
 8013054:	4b11      	ldr	r3, [pc, #68]	; (801309c <osSemaphoreAcquire+0xc8>)
 8013056:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801305a:	601a      	str	r2, [r3, #0]
 801305c:	f3bf 8f4f 	dsb	sy
 8013060:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8013064:	e011      	b.n	801308a <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8013066:	6839      	ldr	r1, [r7, #0]
 8013068:	69b8      	ldr	r0, [r7, #24]
 801306a:	f001 f899 	bl	80141a0 <xQueueSemaphoreTake>
 801306e:	4603      	mov	r3, r0
 8013070:	2b01      	cmp	r3, #1
 8013072:	d00b      	beq.n	801308c <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8013074:	683b      	ldr	r3, [r7, #0]
 8013076:	2b00      	cmp	r3, #0
 8013078:	d003      	beq.n	8013082 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 801307a:	f06f 0301 	mvn.w	r3, #1
 801307e:	61fb      	str	r3, [r7, #28]
 8013080:	e004      	b.n	801308c <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8013082:	f06f 0302 	mvn.w	r3, #2
 8013086:	61fb      	str	r3, [r7, #28]
 8013088:	e000      	b.n	801308c <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 801308a:	bf00      	nop
      }
    }
  }

  return (stat);
 801308c:	69fb      	ldr	r3, [r7, #28]
}
 801308e:	4618      	mov	r0, r3
 8013090:	3720      	adds	r7, #32
 8013092:	46bd      	mov	sp, r7
 8013094:	bd80      	pop	{r7, pc}
 8013096:	bf00      	nop
 8013098:	20000368 	.word	0x20000368
 801309c:	e000ed04 	.word	0xe000ed04

080130a0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80130a0:	b580      	push	{r7, lr}
 80130a2:	b088      	sub	sp, #32
 80130a4:	af00      	add	r7, sp, #0
 80130a6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80130ac:	2300      	movs	r3, #0
 80130ae:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80130b0:	69bb      	ldr	r3, [r7, #24]
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	d103      	bne.n	80130be <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80130b6:	f06f 0303 	mvn.w	r3, #3
 80130ba:	61fb      	str	r3, [r7, #28]
 80130bc:	e03e      	b.n	801313c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80130be:	f3ef 8305 	mrs	r3, IPSR
 80130c2:	617b      	str	r3, [r7, #20]
  return(result);
 80130c4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d10f      	bne.n	80130ea <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80130ca:	f3ef 8310 	mrs	r3, PRIMASK
 80130ce:	613b      	str	r3, [r7, #16]
  return(result);
 80130d0:	693b      	ldr	r3, [r7, #16]
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d105      	bne.n	80130e2 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80130d6:	f3ef 8311 	mrs	r3, BASEPRI
 80130da:	60fb      	str	r3, [r7, #12]
  return(result);
 80130dc:	68fb      	ldr	r3, [r7, #12]
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d01e      	beq.n	8013120 <osSemaphoreRelease+0x80>
 80130e2:	4b19      	ldr	r3, [pc, #100]	; (8013148 <osSemaphoreRelease+0xa8>)
 80130e4:	681b      	ldr	r3, [r3, #0]
 80130e6:	2b02      	cmp	r3, #2
 80130e8:	d11a      	bne.n	8013120 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80130ea:	2300      	movs	r3, #0
 80130ec:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80130ee:	f107 0308 	add.w	r3, r7, #8
 80130f2:	4619      	mov	r1, r3
 80130f4:	69b8      	ldr	r0, [r7, #24]
 80130f6:	f000 fedf 	bl	8013eb8 <xQueueGiveFromISR>
 80130fa:	4603      	mov	r3, r0
 80130fc:	2b01      	cmp	r3, #1
 80130fe:	d003      	beq.n	8013108 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8013100:	f06f 0302 	mvn.w	r3, #2
 8013104:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8013106:	e018      	b.n	801313a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8013108:	68bb      	ldr	r3, [r7, #8]
 801310a:	2b00      	cmp	r3, #0
 801310c:	d015      	beq.n	801313a <osSemaphoreRelease+0x9a>
 801310e:	4b0f      	ldr	r3, [pc, #60]	; (801314c <osSemaphoreRelease+0xac>)
 8013110:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013114:	601a      	str	r2, [r3, #0]
 8013116:	f3bf 8f4f 	dsb	sy
 801311a:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801311e:	e00c      	b.n	801313a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8013120:	2300      	movs	r3, #0
 8013122:	2200      	movs	r2, #0
 8013124:	2100      	movs	r1, #0
 8013126:	69b8      	ldr	r0, [r7, #24]
 8013128:	f000 fd28 	bl	8013b7c <xQueueGenericSend>
 801312c:	4603      	mov	r3, r0
 801312e:	2b01      	cmp	r3, #1
 8013130:	d004      	beq.n	801313c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8013132:	f06f 0302 	mvn.w	r3, #2
 8013136:	61fb      	str	r3, [r7, #28]
 8013138:	e000      	b.n	801313c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801313a:	bf00      	nop
    }
  }

  return (stat);
 801313c:	69fb      	ldr	r3, [r7, #28]
}
 801313e:	4618      	mov	r0, r3
 8013140:	3720      	adds	r7, #32
 8013142:	46bd      	mov	sp, r7
 8013144:	bd80      	pop	{r7, pc}
 8013146:	bf00      	nop
 8013148:	20000368 	.word	0x20000368
 801314c:	e000ed04 	.word	0xe000ed04

08013150 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8013150:	b580      	push	{r7, lr}
 8013152:	b088      	sub	sp, #32
 8013154:	af00      	add	r7, sp, #0
 8013156:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801315c:	f3ef 8305 	mrs	r3, IPSR
 8013160:	617b      	str	r3, [r7, #20]
  return(result);
 8013162:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8013164:	2b00      	cmp	r3, #0
 8013166:	d10f      	bne.n	8013188 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013168:	f3ef 8310 	mrs	r3, PRIMASK
 801316c:	613b      	str	r3, [r7, #16]
  return(result);
 801316e:	693b      	ldr	r3, [r7, #16]
 8013170:	2b00      	cmp	r3, #0
 8013172:	d105      	bne.n	8013180 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8013174:	f3ef 8311 	mrs	r3, BASEPRI
 8013178:	60fb      	str	r3, [r7, #12]
  return(result);
 801317a:	68fb      	ldr	r3, [r7, #12]
 801317c:	2b00      	cmp	r3, #0
 801317e:	d007      	beq.n	8013190 <osSemaphoreDelete+0x40>
 8013180:	4b0d      	ldr	r3, [pc, #52]	; (80131b8 <osSemaphoreDelete+0x68>)
 8013182:	681b      	ldr	r3, [r3, #0]
 8013184:	2b02      	cmp	r3, #2
 8013186:	d103      	bne.n	8013190 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 8013188:	f06f 0305 	mvn.w	r3, #5
 801318c:	61fb      	str	r3, [r7, #28]
 801318e:	e00e      	b.n	80131ae <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 8013190:	69bb      	ldr	r3, [r7, #24]
 8013192:	2b00      	cmp	r3, #0
 8013194:	d103      	bne.n	801319e <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 8013196:	f06f 0303 	mvn.w	r3, #3
 801319a:	61fb      	str	r3, [r7, #28]
 801319c:	e007      	b.n	80131ae <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 801319e:	69b8      	ldr	r0, [r7, #24]
 80131a0:	f001 fb06 	bl	80147b0 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 80131a4:	2300      	movs	r3, #0
 80131a6:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 80131a8:	69b8      	ldr	r0, [r7, #24]
 80131aa:	f001 f98c 	bl	80144c6 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 80131ae:	69fb      	ldr	r3, [r7, #28]
}
 80131b0:	4618      	mov	r0, r3
 80131b2:	3720      	adds	r7, #32
 80131b4:	46bd      	mov	sp, r7
 80131b6:	bd80      	pop	{r7, pc}
 80131b8:	20000368 	.word	0x20000368

080131bc <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80131bc:	b580      	push	{r7, lr}
 80131be:	b08c      	sub	sp, #48	; 0x30
 80131c0:	af02      	add	r7, sp, #8
 80131c2:	60f8      	str	r0, [r7, #12]
 80131c4:	60b9      	str	r1, [r7, #8]
 80131c6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80131c8:	2300      	movs	r3, #0
 80131ca:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80131cc:	f3ef 8305 	mrs	r3, IPSR
 80131d0:	61bb      	str	r3, [r7, #24]
  return(result);
 80131d2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d170      	bne.n	80132ba <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80131d8:	f3ef 8310 	mrs	r3, PRIMASK
 80131dc:	617b      	str	r3, [r7, #20]
  return(result);
 80131de:	697b      	ldr	r3, [r7, #20]
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d105      	bne.n	80131f0 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80131e4:	f3ef 8311 	mrs	r3, BASEPRI
 80131e8:	613b      	str	r3, [r7, #16]
  return(result);
 80131ea:	693b      	ldr	r3, [r7, #16]
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d003      	beq.n	80131f8 <osMessageQueueNew+0x3c>
 80131f0:	4b34      	ldr	r3, [pc, #208]	; (80132c4 <osMessageQueueNew+0x108>)
 80131f2:	681b      	ldr	r3, [r3, #0]
 80131f4:	2b02      	cmp	r3, #2
 80131f6:	d060      	beq.n	80132ba <osMessageQueueNew+0xfe>
 80131f8:	68fb      	ldr	r3, [r7, #12]
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	d05d      	beq.n	80132ba <osMessageQueueNew+0xfe>
 80131fe:	68bb      	ldr	r3, [r7, #8]
 8013200:	2b00      	cmp	r3, #0
 8013202:	d05a      	beq.n	80132ba <osMessageQueueNew+0xfe>
    mem = -1;
 8013204:	f04f 33ff 	mov.w	r3, #4294967295
 8013208:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	2b00      	cmp	r3, #0
 801320e:	d029      	beq.n	8013264 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	689b      	ldr	r3, [r3, #8]
 8013214:	2b00      	cmp	r3, #0
 8013216:	d012      	beq.n	801323e <osMessageQueueNew+0x82>
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	68db      	ldr	r3, [r3, #12]
 801321c:	2b4f      	cmp	r3, #79	; 0x4f
 801321e:	d90e      	bls.n	801323e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8013224:	2b00      	cmp	r3, #0
 8013226:	d00a      	beq.n	801323e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	695a      	ldr	r2, [r3, #20]
 801322c:	68fb      	ldr	r3, [r7, #12]
 801322e:	68b9      	ldr	r1, [r7, #8]
 8013230:	fb01 f303 	mul.w	r3, r1, r3
 8013234:	429a      	cmp	r2, r3
 8013236:	d302      	bcc.n	801323e <osMessageQueueNew+0x82>
        mem = 1;
 8013238:	2301      	movs	r3, #1
 801323a:	623b      	str	r3, [r7, #32]
 801323c:	e014      	b.n	8013268 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	689b      	ldr	r3, [r3, #8]
 8013242:	2b00      	cmp	r3, #0
 8013244:	d110      	bne.n	8013268 <osMessageQueueNew+0xac>
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	68db      	ldr	r3, [r3, #12]
 801324a:	2b00      	cmp	r3, #0
 801324c:	d10c      	bne.n	8013268 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8013252:	2b00      	cmp	r3, #0
 8013254:	d108      	bne.n	8013268 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	695b      	ldr	r3, [r3, #20]
 801325a:	2b00      	cmp	r3, #0
 801325c:	d104      	bne.n	8013268 <osMessageQueueNew+0xac>
          mem = 0;
 801325e:	2300      	movs	r3, #0
 8013260:	623b      	str	r3, [r7, #32]
 8013262:	e001      	b.n	8013268 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8013264:	2300      	movs	r3, #0
 8013266:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8013268:	6a3b      	ldr	r3, [r7, #32]
 801326a:	2b01      	cmp	r3, #1
 801326c:	d10c      	bne.n	8013288 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	691a      	ldr	r2, [r3, #16]
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	6899      	ldr	r1, [r3, #8]
 8013276:	2300      	movs	r3, #0
 8013278:	9300      	str	r3, [sp, #0]
 801327a:	460b      	mov	r3, r1
 801327c:	68b9      	ldr	r1, [r7, #8]
 801327e:	68f8      	ldr	r0, [r7, #12]
 8013280:	f000 fa5a 	bl	8013738 <xQueueGenericCreateStatic>
 8013284:	6278      	str	r0, [r7, #36]	; 0x24
 8013286:	e008      	b.n	801329a <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8013288:	6a3b      	ldr	r3, [r7, #32]
 801328a:	2b00      	cmp	r3, #0
 801328c:	d105      	bne.n	801329a <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 801328e:	2200      	movs	r2, #0
 8013290:	68b9      	ldr	r1, [r7, #8]
 8013292:	68f8      	ldr	r0, [r7, #12]
 8013294:	f000 facd 	bl	8013832 <xQueueGenericCreate>
 8013298:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 801329a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801329c:	2b00      	cmp	r3, #0
 801329e:	d00c      	beq.n	80132ba <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	d003      	beq.n	80132ae <osMessageQueueNew+0xf2>
        name = attr->name;
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	681b      	ldr	r3, [r3, #0]
 80132aa:	61fb      	str	r3, [r7, #28]
 80132ac:	e001      	b.n	80132b2 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 80132ae:	2300      	movs	r3, #0
 80132b0:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80132b2:	69f9      	ldr	r1, [r7, #28]
 80132b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80132b6:	f001 fa53 	bl	8014760 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80132ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80132bc:	4618      	mov	r0, r3
 80132be:	3728      	adds	r7, #40	; 0x28
 80132c0:	46bd      	mov	sp, r7
 80132c2:	bd80      	pop	{r7, pc}
 80132c4:	20000368 	.word	0x20000368

080132c8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80132c8:	b580      	push	{r7, lr}
 80132ca:	b08a      	sub	sp, #40	; 0x28
 80132cc:	af00      	add	r7, sp, #0
 80132ce:	60f8      	str	r0, [r7, #12]
 80132d0:	60b9      	str	r1, [r7, #8]
 80132d2:	603b      	str	r3, [r7, #0]
 80132d4:	4613      	mov	r3, r2
 80132d6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80132d8:	68fb      	ldr	r3, [r7, #12]
 80132da:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80132dc:	2300      	movs	r3, #0
 80132de:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80132e0:	f3ef 8305 	mrs	r3, IPSR
 80132e4:	61fb      	str	r3, [r7, #28]
  return(result);
 80132e6:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d10f      	bne.n	801330c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80132ec:	f3ef 8310 	mrs	r3, PRIMASK
 80132f0:	61bb      	str	r3, [r7, #24]
  return(result);
 80132f2:	69bb      	ldr	r3, [r7, #24]
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	d105      	bne.n	8013304 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80132f8:	f3ef 8311 	mrs	r3, BASEPRI
 80132fc:	617b      	str	r3, [r7, #20]
  return(result);
 80132fe:	697b      	ldr	r3, [r7, #20]
 8013300:	2b00      	cmp	r3, #0
 8013302:	d02c      	beq.n	801335e <osMessageQueuePut+0x96>
 8013304:	4b28      	ldr	r3, [pc, #160]	; (80133a8 <osMessageQueuePut+0xe0>)
 8013306:	681b      	ldr	r3, [r3, #0]
 8013308:	2b02      	cmp	r3, #2
 801330a:	d128      	bne.n	801335e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801330c:	6a3b      	ldr	r3, [r7, #32]
 801330e:	2b00      	cmp	r3, #0
 8013310:	d005      	beq.n	801331e <osMessageQueuePut+0x56>
 8013312:	68bb      	ldr	r3, [r7, #8]
 8013314:	2b00      	cmp	r3, #0
 8013316:	d002      	beq.n	801331e <osMessageQueuePut+0x56>
 8013318:	683b      	ldr	r3, [r7, #0]
 801331a:	2b00      	cmp	r3, #0
 801331c:	d003      	beq.n	8013326 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 801331e:	f06f 0303 	mvn.w	r3, #3
 8013322:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013324:	e039      	b.n	801339a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8013326:	2300      	movs	r3, #0
 8013328:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 801332a:	f107 0210 	add.w	r2, r7, #16
 801332e:	2300      	movs	r3, #0
 8013330:	68b9      	ldr	r1, [r7, #8]
 8013332:	6a38      	ldr	r0, [r7, #32]
 8013334:	f000 fd24 	bl	8013d80 <xQueueGenericSendFromISR>
 8013338:	4603      	mov	r3, r0
 801333a:	2b01      	cmp	r3, #1
 801333c:	d003      	beq.n	8013346 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 801333e:	f06f 0302 	mvn.w	r3, #2
 8013342:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013344:	e029      	b.n	801339a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8013346:	693b      	ldr	r3, [r7, #16]
 8013348:	2b00      	cmp	r3, #0
 801334a:	d026      	beq.n	801339a <osMessageQueuePut+0xd2>
 801334c:	4b17      	ldr	r3, [pc, #92]	; (80133ac <osMessageQueuePut+0xe4>)
 801334e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013352:	601a      	str	r2, [r3, #0]
 8013354:	f3bf 8f4f 	dsb	sy
 8013358:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801335c:	e01d      	b.n	801339a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801335e:	6a3b      	ldr	r3, [r7, #32]
 8013360:	2b00      	cmp	r3, #0
 8013362:	d002      	beq.n	801336a <osMessageQueuePut+0xa2>
 8013364:	68bb      	ldr	r3, [r7, #8]
 8013366:	2b00      	cmp	r3, #0
 8013368:	d103      	bne.n	8013372 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 801336a:	f06f 0303 	mvn.w	r3, #3
 801336e:	627b      	str	r3, [r7, #36]	; 0x24
 8013370:	e014      	b.n	801339c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8013372:	2300      	movs	r3, #0
 8013374:	683a      	ldr	r2, [r7, #0]
 8013376:	68b9      	ldr	r1, [r7, #8]
 8013378:	6a38      	ldr	r0, [r7, #32]
 801337a:	f000 fbff 	bl	8013b7c <xQueueGenericSend>
 801337e:	4603      	mov	r3, r0
 8013380:	2b01      	cmp	r3, #1
 8013382:	d00b      	beq.n	801339c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8013384:	683b      	ldr	r3, [r7, #0]
 8013386:	2b00      	cmp	r3, #0
 8013388:	d003      	beq.n	8013392 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 801338a:	f06f 0301 	mvn.w	r3, #1
 801338e:	627b      	str	r3, [r7, #36]	; 0x24
 8013390:	e004      	b.n	801339c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8013392:	f06f 0302 	mvn.w	r3, #2
 8013396:	627b      	str	r3, [r7, #36]	; 0x24
 8013398:	e000      	b.n	801339c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801339a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 801339c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801339e:	4618      	mov	r0, r3
 80133a0:	3728      	adds	r7, #40	; 0x28
 80133a2:	46bd      	mov	sp, r7
 80133a4:	bd80      	pop	{r7, pc}
 80133a6:	bf00      	nop
 80133a8:	20000368 	.word	0x20000368
 80133ac:	e000ed04 	.word	0xe000ed04

080133b0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80133b0:	b580      	push	{r7, lr}
 80133b2:	b08a      	sub	sp, #40	; 0x28
 80133b4:	af00      	add	r7, sp, #0
 80133b6:	60f8      	str	r0, [r7, #12]
 80133b8:	60b9      	str	r1, [r7, #8]
 80133ba:	607a      	str	r2, [r7, #4]
 80133bc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80133be:	68fb      	ldr	r3, [r7, #12]
 80133c0:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80133c2:	2300      	movs	r3, #0
 80133c4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80133c6:	f3ef 8305 	mrs	r3, IPSR
 80133ca:	61fb      	str	r3, [r7, #28]
  return(result);
 80133cc:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d10f      	bne.n	80133f2 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80133d2:	f3ef 8310 	mrs	r3, PRIMASK
 80133d6:	61bb      	str	r3, [r7, #24]
  return(result);
 80133d8:	69bb      	ldr	r3, [r7, #24]
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d105      	bne.n	80133ea <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80133de:	f3ef 8311 	mrs	r3, BASEPRI
 80133e2:	617b      	str	r3, [r7, #20]
  return(result);
 80133e4:	697b      	ldr	r3, [r7, #20]
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	d02c      	beq.n	8013444 <osMessageQueueGet+0x94>
 80133ea:	4b28      	ldr	r3, [pc, #160]	; (801348c <osMessageQueueGet+0xdc>)
 80133ec:	681b      	ldr	r3, [r3, #0]
 80133ee:	2b02      	cmp	r3, #2
 80133f0:	d128      	bne.n	8013444 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80133f2:	6a3b      	ldr	r3, [r7, #32]
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d005      	beq.n	8013404 <osMessageQueueGet+0x54>
 80133f8:	68bb      	ldr	r3, [r7, #8]
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d002      	beq.n	8013404 <osMessageQueueGet+0x54>
 80133fe:	683b      	ldr	r3, [r7, #0]
 8013400:	2b00      	cmp	r3, #0
 8013402:	d003      	beq.n	801340c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8013404:	f06f 0303 	mvn.w	r3, #3
 8013408:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801340a:	e038      	b.n	801347e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 801340c:	2300      	movs	r3, #0
 801340e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8013410:	f107 0310 	add.w	r3, r7, #16
 8013414:	461a      	mov	r2, r3
 8013416:	68b9      	ldr	r1, [r7, #8]
 8013418:	6a38      	ldr	r0, [r7, #32]
 801341a:	f000 ffd1 	bl	80143c0 <xQueueReceiveFromISR>
 801341e:	4603      	mov	r3, r0
 8013420:	2b01      	cmp	r3, #1
 8013422:	d003      	beq.n	801342c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8013424:	f06f 0302 	mvn.w	r3, #2
 8013428:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801342a:	e028      	b.n	801347e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 801342c:	693b      	ldr	r3, [r7, #16]
 801342e:	2b00      	cmp	r3, #0
 8013430:	d025      	beq.n	801347e <osMessageQueueGet+0xce>
 8013432:	4b17      	ldr	r3, [pc, #92]	; (8013490 <osMessageQueueGet+0xe0>)
 8013434:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013438:	601a      	str	r2, [r3, #0]
 801343a:	f3bf 8f4f 	dsb	sy
 801343e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013442:	e01c      	b.n	801347e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8013444:	6a3b      	ldr	r3, [r7, #32]
 8013446:	2b00      	cmp	r3, #0
 8013448:	d002      	beq.n	8013450 <osMessageQueueGet+0xa0>
 801344a:	68bb      	ldr	r3, [r7, #8]
 801344c:	2b00      	cmp	r3, #0
 801344e:	d103      	bne.n	8013458 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8013450:	f06f 0303 	mvn.w	r3, #3
 8013454:	627b      	str	r3, [r7, #36]	; 0x24
 8013456:	e013      	b.n	8013480 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8013458:	683a      	ldr	r2, [r7, #0]
 801345a:	68b9      	ldr	r1, [r7, #8]
 801345c:	6a38      	ldr	r0, [r7, #32]
 801345e:	f000 fdbd 	bl	8013fdc <xQueueReceive>
 8013462:	4603      	mov	r3, r0
 8013464:	2b01      	cmp	r3, #1
 8013466:	d00b      	beq.n	8013480 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8013468:	683b      	ldr	r3, [r7, #0]
 801346a:	2b00      	cmp	r3, #0
 801346c:	d003      	beq.n	8013476 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 801346e:	f06f 0301 	mvn.w	r3, #1
 8013472:	627b      	str	r3, [r7, #36]	; 0x24
 8013474:	e004      	b.n	8013480 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8013476:	f06f 0302 	mvn.w	r3, #2
 801347a:	627b      	str	r3, [r7, #36]	; 0x24
 801347c:	e000      	b.n	8013480 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801347e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8013480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013482:	4618      	mov	r0, r3
 8013484:	3728      	adds	r7, #40	; 0x28
 8013486:	46bd      	mov	sp, r7
 8013488:	bd80      	pop	{r7, pc}
 801348a:	bf00      	nop
 801348c:	20000368 	.word	0x20000368
 8013490:	e000ed04 	.word	0xe000ed04

08013494 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8013494:	b480      	push	{r7}
 8013496:	b085      	sub	sp, #20
 8013498:	af00      	add	r7, sp, #0
 801349a:	60f8      	str	r0, [r7, #12]
 801349c:	60b9      	str	r1, [r7, #8]
 801349e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80134a0:	68fb      	ldr	r3, [r7, #12]
 80134a2:	4a07      	ldr	r2, [pc, #28]	; (80134c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80134a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80134a6:	68bb      	ldr	r3, [r7, #8]
 80134a8:	4a06      	ldr	r2, [pc, #24]	; (80134c4 <vApplicationGetIdleTaskMemory+0x30>)
 80134aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	2280      	movs	r2, #128	; 0x80
 80134b0:	601a      	str	r2, [r3, #0]
}
 80134b2:	bf00      	nop
 80134b4:	3714      	adds	r7, #20
 80134b6:	46bd      	mov	sp, r7
 80134b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134bc:	4770      	bx	lr
 80134be:	bf00      	nop
 80134c0:	2000036c 	.word	0x2000036c
 80134c4:	200003c8 	.word	0x200003c8

080134c8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80134c8:	b480      	push	{r7}
 80134ca:	b085      	sub	sp, #20
 80134cc:	af00      	add	r7, sp, #0
 80134ce:	60f8      	str	r0, [r7, #12]
 80134d0:	60b9      	str	r1, [r7, #8]
 80134d2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80134d4:	68fb      	ldr	r3, [r7, #12]
 80134d6:	4a07      	ldr	r2, [pc, #28]	; (80134f4 <vApplicationGetTimerTaskMemory+0x2c>)
 80134d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80134da:	68bb      	ldr	r3, [r7, #8]
 80134dc:	4a06      	ldr	r2, [pc, #24]	; (80134f8 <vApplicationGetTimerTaskMemory+0x30>)
 80134de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80134e6:	601a      	str	r2, [r3, #0]
}
 80134e8:	bf00      	nop
 80134ea:	3714      	adds	r7, #20
 80134ec:	46bd      	mov	sp, r7
 80134ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134f2:	4770      	bx	lr
 80134f4:	200005c8 	.word	0x200005c8
 80134f8:	20000624 	.word	0x20000624

080134fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80134fc:	b480      	push	{r7}
 80134fe:	b083      	sub	sp, #12
 8013500:	af00      	add	r7, sp, #0
 8013502:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	f103 0208 	add.w	r2, r3, #8
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	f04f 32ff 	mov.w	r2, #4294967295
 8013514:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	f103 0208 	add.w	r2, r3, #8
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	f103 0208 	add.w	r2, r3, #8
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	2200      	movs	r2, #0
 801352e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8013530:	bf00      	nop
 8013532:	370c      	adds	r7, #12
 8013534:	46bd      	mov	sp, r7
 8013536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801353a:	4770      	bx	lr

0801353c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801353c:	b480      	push	{r7}
 801353e:	b083      	sub	sp, #12
 8013540:	af00      	add	r7, sp, #0
 8013542:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	2200      	movs	r2, #0
 8013548:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801354a:	bf00      	nop
 801354c:	370c      	adds	r7, #12
 801354e:	46bd      	mov	sp, r7
 8013550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013554:	4770      	bx	lr

08013556 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013556:	b480      	push	{r7}
 8013558:	b085      	sub	sp, #20
 801355a:	af00      	add	r7, sp, #0
 801355c:	6078      	str	r0, [r7, #4]
 801355e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	685b      	ldr	r3, [r3, #4]
 8013564:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8013566:	683b      	ldr	r3, [r7, #0]
 8013568:	68fa      	ldr	r2, [r7, #12]
 801356a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801356c:	68fb      	ldr	r3, [r7, #12]
 801356e:	689a      	ldr	r2, [r3, #8]
 8013570:	683b      	ldr	r3, [r7, #0]
 8013572:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8013574:	68fb      	ldr	r3, [r7, #12]
 8013576:	689b      	ldr	r3, [r3, #8]
 8013578:	683a      	ldr	r2, [r7, #0]
 801357a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801357c:	68fb      	ldr	r3, [r7, #12]
 801357e:	683a      	ldr	r2, [r7, #0]
 8013580:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8013582:	683b      	ldr	r3, [r7, #0]
 8013584:	687a      	ldr	r2, [r7, #4]
 8013586:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	681b      	ldr	r3, [r3, #0]
 801358c:	1c5a      	adds	r2, r3, #1
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	601a      	str	r2, [r3, #0]
}
 8013592:	bf00      	nop
 8013594:	3714      	adds	r7, #20
 8013596:	46bd      	mov	sp, r7
 8013598:	f85d 7b04 	ldr.w	r7, [sp], #4
 801359c:	4770      	bx	lr

0801359e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801359e:	b480      	push	{r7}
 80135a0:	b085      	sub	sp, #20
 80135a2:	af00      	add	r7, sp, #0
 80135a4:	6078      	str	r0, [r7, #4]
 80135a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80135a8:	683b      	ldr	r3, [r7, #0]
 80135aa:	681b      	ldr	r3, [r3, #0]
 80135ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80135ae:	68bb      	ldr	r3, [r7, #8]
 80135b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80135b4:	d103      	bne.n	80135be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	691b      	ldr	r3, [r3, #16]
 80135ba:	60fb      	str	r3, [r7, #12]
 80135bc:	e00c      	b.n	80135d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	3308      	adds	r3, #8
 80135c2:	60fb      	str	r3, [r7, #12]
 80135c4:	e002      	b.n	80135cc <vListInsert+0x2e>
 80135c6:	68fb      	ldr	r3, [r7, #12]
 80135c8:	685b      	ldr	r3, [r3, #4]
 80135ca:	60fb      	str	r3, [r7, #12]
 80135cc:	68fb      	ldr	r3, [r7, #12]
 80135ce:	685b      	ldr	r3, [r3, #4]
 80135d0:	681b      	ldr	r3, [r3, #0]
 80135d2:	68ba      	ldr	r2, [r7, #8]
 80135d4:	429a      	cmp	r2, r3
 80135d6:	d2f6      	bcs.n	80135c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80135d8:	68fb      	ldr	r3, [r7, #12]
 80135da:	685a      	ldr	r2, [r3, #4]
 80135dc:	683b      	ldr	r3, [r7, #0]
 80135de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80135e0:	683b      	ldr	r3, [r7, #0]
 80135e2:	685b      	ldr	r3, [r3, #4]
 80135e4:	683a      	ldr	r2, [r7, #0]
 80135e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80135e8:	683b      	ldr	r3, [r7, #0]
 80135ea:	68fa      	ldr	r2, [r7, #12]
 80135ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80135ee:	68fb      	ldr	r3, [r7, #12]
 80135f0:	683a      	ldr	r2, [r7, #0]
 80135f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80135f4:	683b      	ldr	r3, [r7, #0]
 80135f6:	687a      	ldr	r2, [r7, #4]
 80135f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	681b      	ldr	r3, [r3, #0]
 80135fe:	1c5a      	adds	r2, r3, #1
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	601a      	str	r2, [r3, #0]
}
 8013604:	bf00      	nop
 8013606:	3714      	adds	r7, #20
 8013608:	46bd      	mov	sp, r7
 801360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801360e:	4770      	bx	lr

08013610 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8013610:	b480      	push	{r7}
 8013612:	b085      	sub	sp, #20
 8013614:	af00      	add	r7, sp, #0
 8013616:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	691b      	ldr	r3, [r3, #16]
 801361c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	685b      	ldr	r3, [r3, #4]
 8013622:	687a      	ldr	r2, [r7, #4]
 8013624:	6892      	ldr	r2, [r2, #8]
 8013626:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	689b      	ldr	r3, [r3, #8]
 801362c:	687a      	ldr	r2, [r7, #4]
 801362e:	6852      	ldr	r2, [r2, #4]
 8013630:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	685b      	ldr	r3, [r3, #4]
 8013636:	687a      	ldr	r2, [r7, #4]
 8013638:	429a      	cmp	r2, r3
 801363a:	d103      	bne.n	8013644 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	689a      	ldr	r2, [r3, #8]
 8013640:	68fb      	ldr	r3, [r7, #12]
 8013642:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	2200      	movs	r2, #0
 8013648:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801364a:	68fb      	ldr	r3, [r7, #12]
 801364c:	681b      	ldr	r3, [r3, #0]
 801364e:	1e5a      	subs	r2, r3, #1
 8013650:	68fb      	ldr	r3, [r7, #12]
 8013652:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8013654:	68fb      	ldr	r3, [r7, #12]
 8013656:	681b      	ldr	r3, [r3, #0]
}
 8013658:	4618      	mov	r0, r3
 801365a:	3714      	adds	r7, #20
 801365c:	46bd      	mov	sp, r7
 801365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013662:	4770      	bx	lr

08013664 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8013664:	b580      	push	{r7, lr}
 8013666:	b084      	sub	sp, #16
 8013668:	af00      	add	r7, sp, #0
 801366a:	6078      	str	r0, [r7, #4]
 801366c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013672:	68fb      	ldr	r3, [r7, #12]
 8013674:	2b00      	cmp	r3, #0
 8013676:	d10b      	bne.n	8013690 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8013678:	f04f 0350 	mov.w	r3, #80	; 0x50
 801367c:	b672      	cpsid	i
 801367e:	f383 8811 	msr	BASEPRI, r3
 8013682:	f3bf 8f6f 	isb	sy
 8013686:	f3bf 8f4f 	dsb	sy
 801368a:	b662      	cpsie	i
 801368c:	60bb      	str	r3, [r7, #8]
 801368e:	e7fe      	b.n	801368e <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8013690:	f002 fdf2 	bl	8016278 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013694:	68fb      	ldr	r3, [r7, #12]
 8013696:	681a      	ldr	r2, [r3, #0]
 8013698:	68fb      	ldr	r3, [r7, #12]
 801369a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801369c:	68f9      	ldr	r1, [r7, #12]
 801369e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80136a0:	fb01 f303 	mul.w	r3, r1, r3
 80136a4:	441a      	add	r2, r3
 80136a6:	68fb      	ldr	r3, [r7, #12]
 80136a8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80136aa:	68fb      	ldr	r3, [r7, #12]
 80136ac:	2200      	movs	r2, #0
 80136ae:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80136b0:	68fb      	ldr	r3, [r7, #12]
 80136b2:	681a      	ldr	r2, [r3, #0]
 80136b4:	68fb      	ldr	r3, [r7, #12]
 80136b6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80136b8:	68fb      	ldr	r3, [r7, #12]
 80136ba:	681a      	ldr	r2, [r3, #0]
 80136bc:	68fb      	ldr	r3, [r7, #12]
 80136be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80136c0:	3b01      	subs	r3, #1
 80136c2:	68f9      	ldr	r1, [r7, #12]
 80136c4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80136c6:	fb01 f303 	mul.w	r3, r1, r3
 80136ca:	441a      	add	r2, r3
 80136cc:	68fb      	ldr	r3, [r7, #12]
 80136ce:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80136d0:	68fb      	ldr	r3, [r7, #12]
 80136d2:	22ff      	movs	r2, #255	; 0xff
 80136d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80136d8:	68fb      	ldr	r3, [r7, #12]
 80136da:	22ff      	movs	r2, #255	; 0xff
 80136dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80136e0:	683b      	ldr	r3, [r7, #0]
 80136e2:	2b00      	cmp	r3, #0
 80136e4:	d114      	bne.n	8013710 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80136e6:	68fb      	ldr	r3, [r7, #12]
 80136e8:	691b      	ldr	r3, [r3, #16]
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	d01a      	beq.n	8013724 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80136ee:	68fb      	ldr	r3, [r7, #12]
 80136f0:	3310      	adds	r3, #16
 80136f2:	4618      	mov	r0, r3
 80136f4:	f001 fdb6 	bl	8015264 <xTaskRemoveFromEventList>
 80136f8:	4603      	mov	r3, r0
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	d012      	beq.n	8013724 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80136fe:	4b0d      	ldr	r3, [pc, #52]	; (8013734 <xQueueGenericReset+0xd0>)
 8013700:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013704:	601a      	str	r2, [r3, #0]
 8013706:	f3bf 8f4f 	dsb	sy
 801370a:	f3bf 8f6f 	isb	sy
 801370e:	e009      	b.n	8013724 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8013710:	68fb      	ldr	r3, [r7, #12]
 8013712:	3310      	adds	r3, #16
 8013714:	4618      	mov	r0, r3
 8013716:	f7ff fef1 	bl	80134fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801371a:	68fb      	ldr	r3, [r7, #12]
 801371c:	3324      	adds	r3, #36	; 0x24
 801371e:	4618      	mov	r0, r3
 8013720:	f7ff feec 	bl	80134fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8013724:	f002 fdda 	bl	80162dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8013728:	2301      	movs	r3, #1
}
 801372a:	4618      	mov	r0, r3
 801372c:	3710      	adds	r7, #16
 801372e:	46bd      	mov	sp, r7
 8013730:	bd80      	pop	{r7, pc}
 8013732:	bf00      	nop
 8013734:	e000ed04 	.word	0xe000ed04

08013738 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8013738:	b580      	push	{r7, lr}
 801373a:	b08e      	sub	sp, #56	; 0x38
 801373c:	af02      	add	r7, sp, #8
 801373e:	60f8      	str	r0, [r7, #12]
 8013740:	60b9      	str	r1, [r7, #8]
 8013742:	607a      	str	r2, [r7, #4]
 8013744:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013746:	68fb      	ldr	r3, [r7, #12]
 8013748:	2b00      	cmp	r3, #0
 801374a:	d10b      	bne.n	8013764 <xQueueGenericCreateStatic+0x2c>
 801374c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013750:	b672      	cpsid	i
 8013752:	f383 8811 	msr	BASEPRI, r3
 8013756:	f3bf 8f6f 	isb	sy
 801375a:	f3bf 8f4f 	dsb	sy
 801375e:	b662      	cpsie	i
 8013760:	62bb      	str	r3, [r7, #40]	; 0x28
 8013762:	e7fe      	b.n	8013762 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8013764:	683b      	ldr	r3, [r7, #0]
 8013766:	2b00      	cmp	r3, #0
 8013768:	d10b      	bne.n	8013782 <xQueueGenericCreateStatic+0x4a>
 801376a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801376e:	b672      	cpsid	i
 8013770:	f383 8811 	msr	BASEPRI, r3
 8013774:	f3bf 8f6f 	isb	sy
 8013778:	f3bf 8f4f 	dsb	sy
 801377c:	b662      	cpsie	i
 801377e:	627b      	str	r3, [r7, #36]	; 0x24
 8013780:	e7fe      	b.n	8013780 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	2b00      	cmp	r3, #0
 8013786:	d002      	beq.n	801378e <xQueueGenericCreateStatic+0x56>
 8013788:	68bb      	ldr	r3, [r7, #8]
 801378a:	2b00      	cmp	r3, #0
 801378c:	d001      	beq.n	8013792 <xQueueGenericCreateStatic+0x5a>
 801378e:	2301      	movs	r3, #1
 8013790:	e000      	b.n	8013794 <xQueueGenericCreateStatic+0x5c>
 8013792:	2300      	movs	r3, #0
 8013794:	2b00      	cmp	r3, #0
 8013796:	d10b      	bne.n	80137b0 <xQueueGenericCreateStatic+0x78>
 8013798:	f04f 0350 	mov.w	r3, #80	; 0x50
 801379c:	b672      	cpsid	i
 801379e:	f383 8811 	msr	BASEPRI, r3
 80137a2:	f3bf 8f6f 	isb	sy
 80137a6:	f3bf 8f4f 	dsb	sy
 80137aa:	b662      	cpsie	i
 80137ac:	623b      	str	r3, [r7, #32]
 80137ae:	e7fe      	b.n	80137ae <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d102      	bne.n	80137bc <xQueueGenericCreateStatic+0x84>
 80137b6:	68bb      	ldr	r3, [r7, #8]
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	d101      	bne.n	80137c0 <xQueueGenericCreateStatic+0x88>
 80137bc:	2301      	movs	r3, #1
 80137be:	e000      	b.n	80137c2 <xQueueGenericCreateStatic+0x8a>
 80137c0:	2300      	movs	r3, #0
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d10b      	bne.n	80137de <xQueueGenericCreateStatic+0xa6>
 80137c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137ca:	b672      	cpsid	i
 80137cc:	f383 8811 	msr	BASEPRI, r3
 80137d0:	f3bf 8f6f 	isb	sy
 80137d4:	f3bf 8f4f 	dsb	sy
 80137d8:	b662      	cpsie	i
 80137da:	61fb      	str	r3, [r7, #28]
 80137dc:	e7fe      	b.n	80137dc <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80137de:	2350      	movs	r3, #80	; 0x50
 80137e0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80137e2:	697b      	ldr	r3, [r7, #20]
 80137e4:	2b50      	cmp	r3, #80	; 0x50
 80137e6:	d00b      	beq.n	8013800 <xQueueGenericCreateStatic+0xc8>
 80137e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137ec:	b672      	cpsid	i
 80137ee:	f383 8811 	msr	BASEPRI, r3
 80137f2:	f3bf 8f6f 	isb	sy
 80137f6:	f3bf 8f4f 	dsb	sy
 80137fa:	b662      	cpsie	i
 80137fc:	61bb      	str	r3, [r7, #24]
 80137fe:	e7fe      	b.n	80137fe <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8013800:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013802:	683b      	ldr	r3, [r7, #0]
 8013804:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8013806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013808:	2b00      	cmp	r3, #0
 801380a:	d00d      	beq.n	8013828 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801380c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801380e:	2201      	movs	r2, #1
 8013810:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013814:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8013818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801381a:	9300      	str	r3, [sp, #0]
 801381c:	4613      	mov	r3, r2
 801381e:	687a      	ldr	r2, [r7, #4]
 8013820:	68b9      	ldr	r1, [r7, #8]
 8013822:	68f8      	ldr	r0, [r7, #12]
 8013824:	f000 f846 	bl	80138b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 801382a:	4618      	mov	r0, r3
 801382c:	3730      	adds	r7, #48	; 0x30
 801382e:	46bd      	mov	sp, r7
 8013830:	bd80      	pop	{r7, pc}

08013832 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8013832:	b580      	push	{r7, lr}
 8013834:	b08a      	sub	sp, #40	; 0x28
 8013836:	af02      	add	r7, sp, #8
 8013838:	60f8      	str	r0, [r7, #12]
 801383a:	60b9      	str	r1, [r7, #8]
 801383c:	4613      	mov	r3, r2
 801383e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013840:	68fb      	ldr	r3, [r7, #12]
 8013842:	2b00      	cmp	r3, #0
 8013844:	d10b      	bne.n	801385e <xQueueGenericCreate+0x2c>
 8013846:	f04f 0350 	mov.w	r3, #80	; 0x50
 801384a:	b672      	cpsid	i
 801384c:	f383 8811 	msr	BASEPRI, r3
 8013850:	f3bf 8f6f 	isb	sy
 8013854:	f3bf 8f4f 	dsb	sy
 8013858:	b662      	cpsie	i
 801385a:	613b      	str	r3, [r7, #16]
 801385c:	e7fe      	b.n	801385c <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 801385e:	68bb      	ldr	r3, [r7, #8]
 8013860:	2b00      	cmp	r3, #0
 8013862:	d102      	bne.n	801386a <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8013864:	2300      	movs	r3, #0
 8013866:	61fb      	str	r3, [r7, #28]
 8013868:	e004      	b.n	8013874 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801386a:	68fb      	ldr	r3, [r7, #12]
 801386c:	68ba      	ldr	r2, [r7, #8]
 801386e:	fb02 f303 	mul.w	r3, r2, r3
 8013872:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8013874:	69fb      	ldr	r3, [r7, #28]
 8013876:	3350      	adds	r3, #80	; 0x50
 8013878:	4618      	mov	r0, r3
 801387a:	f002 fe1f 	bl	80164bc <pvPortMalloc>
 801387e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8013880:	69bb      	ldr	r3, [r7, #24]
 8013882:	2b00      	cmp	r3, #0
 8013884:	d011      	beq.n	80138aa <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8013886:	69bb      	ldr	r3, [r7, #24]
 8013888:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801388a:	697b      	ldr	r3, [r7, #20]
 801388c:	3350      	adds	r3, #80	; 0x50
 801388e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8013890:	69bb      	ldr	r3, [r7, #24]
 8013892:	2200      	movs	r2, #0
 8013894:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013898:	79fa      	ldrb	r2, [r7, #7]
 801389a:	69bb      	ldr	r3, [r7, #24]
 801389c:	9300      	str	r3, [sp, #0]
 801389e:	4613      	mov	r3, r2
 80138a0:	697a      	ldr	r2, [r7, #20]
 80138a2:	68b9      	ldr	r1, [r7, #8]
 80138a4:	68f8      	ldr	r0, [r7, #12]
 80138a6:	f000 f805 	bl	80138b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80138aa:	69bb      	ldr	r3, [r7, #24]
	}
 80138ac:	4618      	mov	r0, r3
 80138ae:	3720      	adds	r7, #32
 80138b0:	46bd      	mov	sp, r7
 80138b2:	bd80      	pop	{r7, pc}

080138b4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80138b4:	b580      	push	{r7, lr}
 80138b6:	b084      	sub	sp, #16
 80138b8:	af00      	add	r7, sp, #0
 80138ba:	60f8      	str	r0, [r7, #12]
 80138bc:	60b9      	str	r1, [r7, #8]
 80138be:	607a      	str	r2, [r7, #4]
 80138c0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80138c2:	68bb      	ldr	r3, [r7, #8]
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d103      	bne.n	80138d0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80138c8:	69bb      	ldr	r3, [r7, #24]
 80138ca:	69ba      	ldr	r2, [r7, #24]
 80138cc:	601a      	str	r2, [r3, #0]
 80138ce:	e002      	b.n	80138d6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80138d0:	69bb      	ldr	r3, [r7, #24]
 80138d2:	687a      	ldr	r2, [r7, #4]
 80138d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80138d6:	69bb      	ldr	r3, [r7, #24]
 80138d8:	68fa      	ldr	r2, [r7, #12]
 80138da:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80138dc:	69bb      	ldr	r3, [r7, #24]
 80138de:	68ba      	ldr	r2, [r7, #8]
 80138e0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80138e2:	2101      	movs	r1, #1
 80138e4:	69b8      	ldr	r0, [r7, #24]
 80138e6:	f7ff febd 	bl	8013664 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80138ea:	69bb      	ldr	r3, [r7, #24]
 80138ec:	78fa      	ldrb	r2, [r7, #3]
 80138ee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80138f2:	bf00      	nop
 80138f4:	3710      	adds	r7, #16
 80138f6:	46bd      	mov	sp, r7
 80138f8:	bd80      	pop	{r7, pc}

080138fa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80138fa:	b580      	push	{r7, lr}
 80138fc:	b082      	sub	sp, #8
 80138fe:	af00      	add	r7, sp, #0
 8013900:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	2b00      	cmp	r3, #0
 8013906:	d00e      	beq.n	8013926 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	2200      	movs	r2, #0
 801390c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	2200      	movs	r2, #0
 8013912:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	2200      	movs	r2, #0
 8013918:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801391a:	2300      	movs	r3, #0
 801391c:	2200      	movs	r2, #0
 801391e:	2100      	movs	r1, #0
 8013920:	6878      	ldr	r0, [r7, #4]
 8013922:	f000 f92b 	bl	8013b7c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8013926:	bf00      	nop
 8013928:	3708      	adds	r7, #8
 801392a:	46bd      	mov	sp, r7
 801392c:	bd80      	pop	{r7, pc}

0801392e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 801392e:	b580      	push	{r7, lr}
 8013930:	b086      	sub	sp, #24
 8013932:	af00      	add	r7, sp, #0
 8013934:	4603      	mov	r3, r0
 8013936:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8013938:	2301      	movs	r3, #1
 801393a:	617b      	str	r3, [r7, #20]
 801393c:	2300      	movs	r3, #0
 801393e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8013940:	79fb      	ldrb	r3, [r7, #7]
 8013942:	461a      	mov	r2, r3
 8013944:	6939      	ldr	r1, [r7, #16]
 8013946:	6978      	ldr	r0, [r7, #20]
 8013948:	f7ff ff73 	bl	8013832 <xQueueGenericCreate>
 801394c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801394e:	68f8      	ldr	r0, [r7, #12]
 8013950:	f7ff ffd3 	bl	80138fa <prvInitialiseMutex>

		return xNewQueue;
 8013954:	68fb      	ldr	r3, [r7, #12]
	}
 8013956:	4618      	mov	r0, r3
 8013958:	3718      	adds	r7, #24
 801395a:	46bd      	mov	sp, r7
 801395c:	bd80      	pop	{r7, pc}

0801395e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 801395e:	b580      	push	{r7, lr}
 8013960:	b088      	sub	sp, #32
 8013962:	af02      	add	r7, sp, #8
 8013964:	4603      	mov	r3, r0
 8013966:	6039      	str	r1, [r7, #0]
 8013968:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801396a:	2301      	movs	r3, #1
 801396c:	617b      	str	r3, [r7, #20]
 801396e:	2300      	movs	r3, #0
 8013970:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8013972:	79fb      	ldrb	r3, [r7, #7]
 8013974:	9300      	str	r3, [sp, #0]
 8013976:	683b      	ldr	r3, [r7, #0]
 8013978:	2200      	movs	r2, #0
 801397a:	6939      	ldr	r1, [r7, #16]
 801397c:	6978      	ldr	r0, [r7, #20]
 801397e:	f7ff fedb 	bl	8013738 <xQueueGenericCreateStatic>
 8013982:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8013984:	68f8      	ldr	r0, [r7, #12]
 8013986:	f7ff ffb8 	bl	80138fa <prvInitialiseMutex>

		return xNewQueue;
 801398a:	68fb      	ldr	r3, [r7, #12]
	}
 801398c:	4618      	mov	r0, r3
 801398e:	3718      	adds	r7, #24
 8013990:	46bd      	mov	sp, r7
 8013992:	bd80      	pop	{r7, pc}

08013994 <xQueueGetMutexHolder>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )

	TaskHandle_t xQueueGetMutexHolder( QueueHandle_t xSemaphore )
	{
 8013994:	b580      	push	{r7, lr}
 8013996:	b084      	sub	sp, #16
 8013998:	af00      	add	r7, sp, #0
 801399a:	6078      	str	r0, [r7, #4]
	TaskHandle_t pxReturn;
	Queue_t * const pxSemaphore = ( Queue_t * ) xSemaphore;
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	60bb      	str	r3, [r7, #8]
		/* This function is called by xSemaphoreGetMutexHolder(), and should not
		be called directly.  Note:  This is a good way of determining if the
		calling task is the mutex holder, but not a good way of determining the
		identity of the mutex holder, as the holder may change between the
		following critical section exiting and the function returning. */
		taskENTER_CRITICAL();
 80139a0:	f002 fc6a 	bl	8016278 <vPortEnterCritical>
		{
			if( pxSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
 80139a4:	68bb      	ldr	r3, [r7, #8]
 80139a6:	681b      	ldr	r3, [r3, #0]
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	d103      	bne.n	80139b4 <xQueueGetMutexHolder+0x20>
			{
				pxReturn = pxSemaphore->u.xSemaphore.xMutexHolder;
 80139ac:	68bb      	ldr	r3, [r7, #8]
 80139ae:	689b      	ldr	r3, [r3, #8]
 80139b0:	60fb      	str	r3, [r7, #12]
 80139b2:	e001      	b.n	80139b8 <xQueueGetMutexHolder+0x24>
			}
			else
			{
				pxReturn = NULL;
 80139b4:	2300      	movs	r3, #0
 80139b6:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 80139b8:	f002 fc90 	bl	80162dc <vPortExitCritical>

		return pxReturn;
 80139bc:	68fb      	ldr	r3, [r7, #12]
	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 80139be:	4618      	mov	r0, r3
 80139c0:	3710      	adds	r7, #16
 80139c2:	46bd      	mov	sp, r7
 80139c4:	bd80      	pop	{r7, pc}

080139c6 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80139c6:	b590      	push	{r4, r7, lr}
 80139c8:	b087      	sub	sp, #28
 80139ca:	af00      	add	r7, sp, #0
 80139cc:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80139d2:	693b      	ldr	r3, [r7, #16]
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d10b      	bne.n	80139f0 <xQueueGiveMutexRecursive+0x2a>
 80139d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139dc:	b672      	cpsid	i
 80139de:	f383 8811 	msr	BASEPRI, r3
 80139e2:	f3bf 8f6f 	isb	sy
 80139e6:	f3bf 8f4f 	dsb	sy
 80139ea:	b662      	cpsie	i
 80139ec:	60fb      	str	r3, [r7, #12]
 80139ee:	e7fe      	b.n	80139ee <xQueueGiveMutexRecursive+0x28>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80139f0:	693b      	ldr	r3, [r7, #16]
 80139f2:	689c      	ldr	r4, [r3, #8]
 80139f4:	f001 fdf4 	bl	80155e0 <xTaskGetCurrentTaskHandle>
 80139f8:	4603      	mov	r3, r0
 80139fa:	429c      	cmp	r4, r3
 80139fc:	d111      	bne.n	8013a22 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80139fe:	693b      	ldr	r3, [r7, #16]
 8013a00:	68db      	ldr	r3, [r3, #12]
 8013a02:	1e5a      	subs	r2, r3, #1
 8013a04:	693b      	ldr	r3, [r7, #16]
 8013a06:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8013a08:	693b      	ldr	r3, [r7, #16]
 8013a0a:	68db      	ldr	r3, [r3, #12]
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	d105      	bne.n	8013a1c <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8013a10:	2300      	movs	r3, #0
 8013a12:	2200      	movs	r2, #0
 8013a14:	2100      	movs	r1, #0
 8013a16:	6938      	ldr	r0, [r7, #16]
 8013a18:	f000 f8b0 	bl	8013b7c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8013a1c:	2301      	movs	r3, #1
 8013a1e:	617b      	str	r3, [r7, #20]
 8013a20:	e001      	b.n	8013a26 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8013a22:	2300      	movs	r3, #0
 8013a24:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8013a26:	697b      	ldr	r3, [r7, #20]
	}
 8013a28:	4618      	mov	r0, r3
 8013a2a:	371c      	adds	r7, #28
 8013a2c:	46bd      	mov	sp, r7
 8013a2e:	bd90      	pop	{r4, r7, pc}

08013a30 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8013a30:	b590      	push	{r4, r7, lr}
 8013a32:	b087      	sub	sp, #28
 8013a34:	af00      	add	r7, sp, #0
 8013a36:	6078      	str	r0, [r7, #4]
 8013a38:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8013a3e:	693b      	ldr	r3, [r7, #16]
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d10b      	bne.n	8013a5c <xQueueTakeMutexRecursive+0x2c>
 8013a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a48:	b672      	cpsid	i
 8013a4a:	f383 8811 	msr	BASEPRI, r3
 8013a4e:	f3bf 8f6f 	isb	sy
 8013a52:	f3bf 8f4f 	dsb	sy
 8013a56:	b662      	cpsie	i
 8013a58:	60fb      	str	r3, [r7, #12]
 8013a5a:	e7fe      	b.n	8013a5a <xQueueTakeMutexRecursive+0x2a>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8013a5c:	693b      	ldr	r3, [r7, #16]
 8013a5e:	689c      	ldr	r4, [r3, #8]
 8013a60:	f001 fdbe 	bl	80155e0 <xTaskGetCurrentTaskHandle>
 8013a64:	4603      	mov	r3, r0
 8013a66:	429c      	cmp	r4, r3
 8013a68:	d107      	bne.n	8013a7a <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8013a6a:	693b      	ldr	r3, [r7, #16]
 8013a6c:	68db      	ldr	r3, [r3, #12]
 8013a6e:	1c5a      	adds	r2, r3, #1
 8013a70:	693b      	ldr	r3, [r7, #16]
 8013a72:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8013a74:	2301      	movs	r3, #1
 8013a76:	617b      	str	r3, [r7, #20]
 8013a78:	e00c      	b.n	8013a94 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8013a7a:	6839      	ldr	r1, [r7, #0]
 8013a7c:	6938      	ldr	r0, [r7, #16]
 8013a7e:	f000 fb8f 	bl	80141a0 <xQueueSemaphoreTake>
 8013a82:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8013a84:	697b      	ldr	r3, [r7, #20]
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d004      	beq.n	8013a94 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8013a8a:	693b      	ldr	r3, [r7, #16]
 8013a8c:	68db      	ldr	r3, [r3, #12]
 8013a8e:	1c5a      	adds	r2, r3, #1
 8013a90:	693b      	ldr	r3, [r7, #16]
 8013a92:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8013a94:	697b      	ldr	r3, [r7, #20]
	}
 8013a96:	4618      	mov	r0, r3
 8013a98:	371c      	adds	r7, #28
 8013a9a:	46bd      	mov	sp, r7
 8013a9c:	bd90      	pop	{r4, r7, pc}

08013a9e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8013a9e:	b580      	push	{r7, lr}
 8013aa0:	b08a      	sub	sp, #40	; 0x28
 8013aa2:	af02      	add	r7, sp, #8
 8013aa4:	60f8      	str	r0, [r7, #12]
 8013aa6:	60b9      	str	r1, [r7, #8]
 8013aa8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8013aaa:	68fb      	ldr	r3, [r7, #12]
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d10b      	bne.n	8013ac8 <xQueueCreateCountingSemaphoreStatic+0x2a>
 8013ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ab4:	b672      	cpsid	i
 8013ab6:	f383 8811 	msr	BASEPRI, r3
 8013aba:	f3bf 8f6f 	isb	sy
 8013abe:	f3bf 8f4f 	dsb	sy
 8013ac2:	b662      	cpsie	i
 8013ac4:	61bb      	str	r3, [r7, #24]
 8013ac6:	e7fe      	b.n	8013ac6 <xQueueCreateCountingSemaphoreStatic+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8013ac8:	68ba      	ldr	r2, [r7, #8]
 8013aca:	68fb      	ldr	r3, [r7, #12]
 8013acc:	429a      	cmp	r2, r3
 8013ace:	d90b      	bls.n	8013ae8 <xQueueCreateCountingSemaphoreStatic+0x4a>
 8013ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ad4:	b672      	cpsid	i
 8013ad6:	f383 8811 	msr	BASEPRI, r3
 8013ada:	f3bf 8f6f 	isb	sy
 8013ade:	f3bf 8f4f 	dsb	sy
 8013ae2:	b662      	cpsie	i
 8013ae4:	617b      	str	r3, [r7, #20]
 8013ae6:	e7fe      	b.n	8013ae6 <xQueueCreateCountingSemaphoreStatic+0x48>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8013ae8:	2302      	movs	r3, #2
 8013aea:	9300      	str	r3, [sp, #0]
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	2200      	movs	r2, #0
 8013af0:	2100      	movs	r1, #0
 8013af2:	68f8      	ldr	r0, [r7, #12]
 8013af4:	f7ff fe20 	bl	8013738 <xQueueGenericCreateStatic>
 8013af8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8013afa:	69fb      	ldr	r3, [r7, #28]
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	d002      	beq.n	8013b06 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8013b00:	69fb      	ldr	r3, [r7, #28]
 8013b02:	68ba      	ldr	r2, [r7, #8]
 8013b04:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8013b06:	69fb      	ldr	r3, [r7, #28]
	}
 8013b08:	4618      	mov	r0, r3
 8013b0a:	3720      	adds	r7, #32
 8013b0c:	46bd      	mov	sp, r7
 8013b0e:	bd80      	pop	{r7, pc}

08013b10 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8013b10:	b580      	push	{r7, lr}
 8013b12:	b086      	sub	sp, #24
 8013b14:	af00      	add	r7, sp, #0
 8013b16:	6078      	str	r0, [r7, #4]
 8013b18:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	d10b      	bne.n	8013b38 <xQueueCreateCountingSemaphore+0x28>
 8013b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b24:	b672      	cpsid	i
 8013b26:	f383 8811 	msr	BASEPRI, r3
 8013b2a:	f3bf 8f6f 	isb	sy
 8013b2e:	f3bf 8f4f 	dsb	sy
 8013b32:	b662      	cpsie	i
 8013b34:	613b      	str	r3, [r7, #16]
 8013b36:	e7fe      	b.n	8013b36 <xQueueCreateCountingSemaphore+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8013b38:	683a      	ldr	r2, [r7, #0]
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	429a      	cmp	r2, r3
 8013b3e:	d90b      	bls.n	8013b58 <xQueueCreateCountingSemaphore+0x48>
 8013b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b44:	b672      	cpsid	i
 8013b46:	f383 8811 	msr	BASEPRI, r3
 8013b4a:	f3bf 8f6f 	isb	sy
 8013b4e:	f3bf 8f4f 	dsb	sy
 8013b52:	b662      	cpsie	i
 8013b54:	60fb      	str	r3, [r7, #12]
 8013b56:	e7fe      	b.n	8013b56 <xQueueCreateCountingSemaphore+0x46>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8013b58:	2202      	movs	r2, #2
 8013b5a:	2100      	movs	r1, #0
 8013b5c:	6878      	ldr	r0, [r7, #4]
 8013b5e:	f7ff fe68 	bl	8013832 <xQueueGenericCreate>
 8013b62:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8013b64:	697b      	ldr	r3, [r7, #20]
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	d002      	beq.n	8013b70 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8013b6a:	697b      	ldr	r3, [r7, #20]
 8013b6c:	683a      	ldr	r2, [r7, #0]
 8013b6e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8013b70:	697b      	ldr	r3, [r7, #20]
	}
 8013b72:	4618      	mov	r0, r3
 8013b74:	3718      	adds	r7, #24
 8013b76:	46bd      	mov	sp, r7
 8013b78:	bd80      	pop	{r7, pc}
	...

08013b7c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8013b7c:	b580      	push	{r7, lr}
 8013b7e:	b08e      	sub	sp, #56	; 0x38
 8013b80:	af00      	add	r7, sp, #0
 8013b82:	60f8      	str	r0, [r7, #12]
 8013b84:	60b9      	str	r1, [r7, #8]
 8013b86:	607a      	str	r2, [r7, #4]
 8013b88:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8013b8a:	2300      	movs	r3, #0
 8013b8c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013b8e:	68fb      	ldr	r3, [r7, #12]
 8013b90:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	d10b      	bne.n	8013bb0 <xQueueGenericSend+0x34>
 8013b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b9c:	b672      	cpsid	i
 8013b9e:	f383 8811 	msr	BASEPRI, r3
 8013ba2:	f3bf 8f6f 	isb	sy
 8013ba6:	f3bf 8f4f 	dsb	sy
 8013baa:	b662      	cpsie	i
 8013bac:	62bb      	str	r3, [r7, #40]	; 0x28
 8013bae:	e7fe      	b.n	8013bae <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013bb0:	68bb      	ldr	r3, [r7, #8]
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	d103      	bne.n	8013bbe <xQueueGenericSend+0x42>
 8013bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	d101      	bne.n	8013bc2 <xQueueGenericSend+0x46>
 8013bbe:	2301      	movs	r3, #1
 8013bc0:	e000      	b.n	8013bc4 <xQueueGenericSend+0x48>
 8013bc2:	2300      	movs	r3, #0
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	d10b      	bne.n	8013be0 <xQueueGenericSend+0x64>
 8013bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bcc:	b672      	cpsid	i
 8013bce:	f383 8811 	msr	BASEPRI, r3
 8013bd2:	f3bf 8f6f 	isb	sy
 8013bd6:	f3bf 8f4f 	dsb	sy
 8013bda:	b662      	cpsie	i
 8013bdc:	627b      	str	r3, [r7, #36]	; 0x24
 8013bde:	e7fe      	b.n	8013bde <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013be0:	683b      	ldr	r3, [r7, #0]
 8013be2:	2b02      	cmp	r3, #2
 8013be4:	d103      	bne.n	8013bee <xQueueGenericSend+0x72>
 8013be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013bea:	2b01      	cmp	r3, #1
 8013bec:	d101      	bne.n	8013bf2 <xQueueGenericSend+0x76>
 8013bee:	2301      	movs	r3, #1
 8013bf0:	e000      	b.n	8013bf4 <xQueueGenericSend+0x78>
 8013bf2:	2300      	movs	r3, #0
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	d10b      	bne.n	8013c10 <xQueueGenericSend+0x94>
 8013bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bfc:	b672      	cpsid	i
 8013bfe:	f383 8811 	msr	BASEPRI, r3
 8013c02:	f3bf 8f6f 	isb	sy
 8013c06:	f3bf 8f4f 	dsb	sy
 8013c0a:	b662      	cpsie	i
 8013c0c:	623b      	str	r3, [r7, #32]
 8013c0e:	e7fe      	b.n	8013c0e <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013c10:	f001 fcf6 	bl	8015600 <xTaskGetSchedulerState>
 8013c14:	4603      	mov	r3, r0
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	d102      	bne.n	8013c20 <xQueueGenericSend+0xa4>
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	d101      	bne.n	8013c24 <xQueueGenericSend+0xa8>
 8013c20:	2301      	movs	r3, #1
 8013c22:	e000      	b.n	8013c26 <xQueueGenericSend+0xaa>
 8013c24:	2300      	movs	r3, #0
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	d10b      	bne.n	8013c42 <xQueueGenericSend+0xc6>
 8013c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c2e:	b672      	cpsid	i
 8013c30:	f383 8811 	msr	BASEPRI, r3
 8013c34:	f3bf 8f6f 	isb	sy
 8013c38:	f3bf 8f4f 	dsb	sy
 8013c3c:	b662      	cpsie	i
 8013c3e:	61fb      	str	r3, [r7, #28]
 8013c40:	e7fe      	b.n	8013c40 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013c42:	f002 fb19 	bl	8016278 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013c4e:	429a      	cmp	r2, r3
 8013c50:	d302      	bcc.n	8013c58 <xQueueGenericSend+0xdc>
 8013c52:	683b      	ldr	r3, [r7, #0]
 8013c54:	2b02      	cmp	r3, #2
 8013c56:	d129      	bne.n	8013cac <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013c58:	683a      	ldr	r2, [r7, #0]
 8013c5a:	68b9      	ldr	r1, [r7, #8]
 8013c5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013c5e:	f000 fc6e 	bl	801453e <prvCopyDataToQueue>
 8013c62:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d010      	beq.n	8013c8e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c6e:	3324      	adds	r3, #36	; 0x24
 8013c70:	4618      	mov	r0, r3
 8013c72:	f001 faf7 	bl	8015264 <xTaskRemoveFromEventList>
 8013c76:	4603      	mov	r3, r0
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	d013      	beq.n	8013ca4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8013c7c:	4b3f      	ldr	r3, [pc, #252]	; (8013d7c <xQueueGenericSend+0x200>)
 8013c7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013c82:	601a      	str	r2, [r3, #0]
 8013c84:	f3bf 8f4f 	dsb	sy
 8013c88:	f3bf 8f6f 	isb	sy
 8013c8c:	e00a      	b.n	8013ca4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8013c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d007      	beq.n	8013ca4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8013c94:	4b39      	ldr	r3, [pc, #228]	; (8013d7c <xQueueGenericSend+0x200>)
 8013c96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013c9a:	601a      	str	r2, [r3, #0]
 8013c9c:	f3bf 8f4f 	dsb	sy
 8013ca0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8013ca4:	f002 fb1a 	bl	80162dc <vPortExitCritical>
				return pdPASS;
 8013ca8:	2301      	movs	r3, #1
 8013caa:	e063      	b.n	8013d74 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	d103      	bne.n	8013cba <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013cb2:	f002 fb13 	bl	80162dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8013cb6:	2300      	movs	r3, #0
 8013cb8:	e05c      	b.n	8013d74 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d106      	bne.n	8013cce <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013cc0:	f107 0314 	add.w	r3, r7, #20
 8013cc4:	4618      	mov	r0, r3
 8013cc6:	f001 fb31 	bl	801532c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013cca:	2301      	movs	r3, #1
 8013ccc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013cce:	f002 fb05 	bl	80162dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013cd2:	f001 f88f 	bl	8014df4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013cd6:	f002 facf 	bl	8016278 <vPortEnterCritical>
 8013cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cdc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013ce0:	b25b      	sxtb	r3, r3
 8013ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ce6:	d103      	bne.n	8013cf0 <xQueueGenericSend+0x174>
 8013ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cea:	2200      	movs	r2, #0
 8013cec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cf2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013cf6:	b25b      	sxtb	r3, r3
 8013cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013cfc:	d103      	bne.n	8013d06 <xQueueGenericSend+0x18a>
 8013cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d00:	2200      	movs	r2, #0
 8013d02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013d06:	f002 fae9 	bl	80162dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013d0a:	1d3a      	adds	r2, r7, #4
 8013d0c:	f107 0314 	add.w	r3, r7, #20
 8013d10:	4611      	mov	r1, r2
 8013d12:	4618      	mov	r0, r3
 8013d14:	f001 fb20 	bl	8015358 <xTaskCheckForTimeOut>
 8013d18:	4603      	mov	r3, r0
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	d124      	bne.n	8013d68 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8013d1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013d20:	f000 fd05 	bl	801472e <prvIsQueueFull>
 8013d24:	4603      	mov	r3, r0
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	d018      	beq.n	8013d5c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8013d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d2c:	3310      	adds	r3, #16
 8013d2e:	687a      	ldr	r2, [r7, #4]
 8013d30:	4611      	mov	r1, r2
 8013d32:	4618      	mov	r0, r3
 8013d34:	f001 fa44 	bl	80151c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8013d38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013d3a:	f000 fc90 	bl	801465e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8013d3e:	f001 f867 	bl	8014e10 <xTaskResumeAll>
 8013d42:	4603      	mov	r3, r0
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	f47f af7c 	bne.w	8013c42 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8013d4a:	4b0c      	ldr	r3, [pc, #48]	; (8013d7c <xQueueGenericSend+0x200>)
 8013d4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013d50:	601a      	str	r2, [r3, #0]
 8013d52:	f3bf 8f4f 	dsb	sy
 8013d56:	f3bf 8f6f 	isb	sy
 8013d5a:	e772      	b.n	8013c42 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8013d5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013d5e:	f000 fc7e 	bl	801465e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013d62:	f001 f855 	bl	8014e10 <xTaskResumeAll>
 8013d66:	e76c      	b.n	8013c42 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8013d68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013d6a:	f000 fc78 	bl	801465e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013d6e:	f001 f84f 	bl	8014e10 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8013d72:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8013d74:	4618      	mov	r0, r3
 8013d76:	3738      	adds	r7, #56	; 0x38
 8013d78:	46bd      	mov	sp, r7
 8013d7a:	bd80      	pop	{r7, pc}
 8013d7c:	e000ed04 	.word	0xe000ed04

08013d80 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8013d80:	b580      	push	{r7, lr}
 8013d82:	b08e      	sub	sp, #56	; 0x38
 8013d84:	af00      	add	r7, sp, #0
 8013d86:	60f8      	str	r0, [r7, #12]
 8013d88:	60b9      	str	r1, [r7, #8]
 8013d8a:	607a      	str	r2, [r7, #4]
 8013d8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013d8e:	68fb      	ldr	r3, [r7, #12]
 8013d90:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d10b      	bne.n	8013db0 <xQueueGenericSendFromISR+0x30>
 8013d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d9c:	b672      	cpsid	i
 8013d9e:	f383 8811 	msr	BASEPRI, r3
 8013da2:	f3bf 8f6f 	isb	sy
 8013da6:	f3bf 8f4f 	dsb	sy
 8013daa:	b662      	cpsie	i
 8013dac:	627b      	str	r3, [r7, #36]	; 0x24
 8013dae:	e7fe      	b.n	8013dae <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013db0:	68bb      	ldr	r3, [r7, #8]
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	d103      	bne.n	8013dbe <xQueueGenericSendFromISR+0x3e>
 8013db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d101      	bne.n	8013dc2 <xQueueGenericSendFromISR+0x42>
 8013dbe:	2301      	movs	r3, #1
 8013dc0:	e000      	b.n	8013dc4 <xQueueGenericSendFromISR+0x44>
 8013dc2:	2300      	movs	r3, #0
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	d10b      	bne.n	8013de0 <xQueueGenericSendFromISR+0x60>
 8013dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013dcc:	b672      	cpsid	i
 8013dce:	f383 8811 	msr	BASEPRI, r3
 8013dd2:	f3bf 8f6f 	isb	sy
 8013dd6:	f3bf 8f4f 	dsb	sy
 8013dda:	b662      	cpsie	i
 8013ddc:	623b      	str	r3, [r7, #32]
 8013dde:	e7fe      	b.n	8013dde <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013de0:	683b      	ldr	r3, [r7, #0]
 8013de2:	2b02      	cmp	r3, #2
 8013de4:	d103      	bne.n	8013dee <xQueueGenericSendFromISR+0x6e>
 8013de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013dea:	2b01      	cmp	r3, #1
 8013dec:	d101      	bne.n	8013df2 <xQueueGenericSendFromISR+0x72>
 8013dee:	2301      	movs	r3, #1
 8013df0:	e000      	b.n	8013df4 <xQueueGenericSendFromISR+0x74>
 8013df2:	2300      	movs	r3, #0
 8013df4:	2b00      	cmp	r3, #0
 8013df6:	d10b      	bne.n	8013e10 <xQueueGenericSendFromISR+0x90>
 8013df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013dfc:	b672      	cpsid	i
 8013dfe:	f383 8811 	msr	BASEPRI, r3
 8013e02:	f3bf 8f6f 	isb	sy
 8013e06:	f3bf 8f4f 	dsb	sy
 8013e0a:	b662      	cpsie	i
 8013e0c:	61fb      	str	r3, [r7, #28]
 8013e0e:	e7fe      	b.n	8013e0e <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013e10:	f002 fb12 	bl	8016438 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8013e14:	f3ef 8211 	mrs	r2, BASEPRI
 8013e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e1c:	b672      	cpsid	i
 8013e1e:	f383 8811 	msr	BASEPRI, r3
 8013e22:	f3bf 8f6f 	isb	sy
 8013e26:	f3bf 8f4f 	dsb	sy
 8013e2a:	b662      	cpsie	i
 8013e2c:	61ba      	str	r2, [r7, #24]
 8013e2e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8013e30:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013e32:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013e3c:	429a      	cmp	r2, r3
 8013e3e:	d302      	bcc.n	8013e46 <xQueueGenericSendFromISR+0xc6>
 8013e40:	683b      	ldr	r3, [r7, #0]
 8013e42:	2b02      	cmp	r3, #2
 8013e44:	d12c      	bne.n	8013ea0 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013e4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013e50:	683a      	ldr	r2, [r7, #0]
 8013e52:	68b9      	ldr	r1, [r7, #8]
 8013e54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013e56:	f000 fb72 	bl	801453e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013e5a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8013e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e62:	d112      	bne.n	8013e8a <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e68:	2b00      	cmp	r3, #0
 8013e6a:	d016      	beq.n	8013e9a <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e6e:	3324      	adds	r3, #36	; 0x24
 8013e70:	4618      	mov	r0, r3
 8013e72:	f001 f9f7 	bl	8015264 <xTaskRemoveFromEventList>
 8013e76:	4603      	mov	r3, r0
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	d00e      	beq.n	8013e9a <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	d00b      	beq.n	8013e9a <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	2201      	movs	r2, #1
 8013e86:	601a      	str	r2, [r3, #0]
 8013e88:	e007      	b.n	8013e9a <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013e8a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8013e8e:	3301      	adds	r3, #1
 8013e90:	b2db      	uxtb	r3, r3
 8013e92:	b25a      	sxtb	r2, r3
 8013e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8013e9a:	2301      	movs	r3, #1
 8013e9c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8013e9e:	e001      	b.n	8013ea4 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013ea0:	2300      	movs	r3, #0
 8013ea2:	637b      	str	r3, [r7, #52]	; 0x34
 8013ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ea6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8013ea8:	693b      	ldr	r3, [r7, #16]
 8013eaa:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013eb0:	4618      	mov	r0, r3
 8013eb2:	3738      	adds	r7, #56	; 0x38
 8013eb4:	46bd      	mov	sp, r7
 8013eb6:	bd80      	pop	{r7, pc}

08013eb8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013eb8:	b580      	push	{r7, lr}
 8013eba:	b08e      	sub	sp, #56	; 0x38
 8013ebc:	af00      	add	r7, sp, #0
 8013ebe:	6078      	str	r0, [r7, #4]
 8013ec0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8013ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	d10b      	bne.n	8013ee4 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8013ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ed0:	b672      	cpsid	i
 8013ed2:	f383 8811 	msr	BASEPRI, r3
 8013ed6:	f3bf 8f6f 	isb	sy
 8013eda:	f3bf 8f4f 	dsb	sy
 8013ede:	b662      	cpsie	i
 8013ee0:	623b      	str	r3, [r7, #32]
 8013ee2:	e7fe      	b.n	8013ee2 <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8013ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	d00b      	beq.n	8013f04 <xQueueGiveFromISR+0x4c>
 8013eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ef0:	b672      	cpsid	i
 8013ef2:	f383 8811 	msr	BASEPRI, r3
 8013ef6:	f3bf 8f6f 	isb	sy
 8013efa:	f3bf 8f4f 	dsb	sy
 8013efe:	b662      	cpsie	i
 8013f00:	61fb      	str	r3, [r7, #28]
 8013f02:	e7fe      	b.n	8013f02 <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8013f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f06:	681b      	ldr	r3, [r3, #0]
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	d103      	bne.n	8013f14 <xQueueGiveFromISR+0x5c>
 8013f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f0e:	689b      	ldr	r3, [r3, #8]
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	d101      	bne.n	8013f18 <xQueueGiveFromISR+0x60>
 8013f14:	2301      	movs	r3, #1
 8013f16:	e000      	b.n	8013f1a <xQueueGiveFromISR+0x62>
 8013f18:	2300      	movs	r3, #0
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d10b      	bne.n	8013f36 <xQueueGiveFromISR+0x7e>
 8013f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f22:	b672      	cpsid	i
 8013f24:	f383 8811 	msr	BASEPRI, r3
 8013f28:	f3bf 8f6f 	isb	sy
 8013f2c:	f3bf 8f4f 	dsb	sy
 8013f30:	b662      	cpsie	i
 8013f32:	61bb      	str	r3, [r7, #24]
 8013f34:	e7fe      	b.n	8013f34 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013f36:	f002 fa7f 	bl	8016438 <vPortValidateInterruptPriority>
	__asm volatile
 8013f3a:	f3ef 8211 	mrs	r2, BASEPRI
 8013f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f42:	b672      	cpsid	i
 8013f44:	f383 8811 	msr	BASEPRI, r3
 8013f48:	f3bf 8f6f 	isb	sy
 8013f4c:	f3bf 8f4f 	dsb	sy
 8013f50:	b662      	cpsie	i
 8013f52:	617a      	str	r2, [r7, #20]
 8013f54:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8013f56:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013f58:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013f5e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8013f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013f64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013f66:	429a      	cmp	r2, r3
 8013f68:	d22b      	bcs.n	8013fc2 <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013f70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f76:	1c5a      	adds	r2, r3, #1
 8013f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f7a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013f7c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f84:	d112      	bne.n	8013fac <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f8a:	2b00      	cmp	r3, #0
 8013f8c:	d016      	beq.n	8013fbc <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f90:	3324      	adds	r3, #36	; 0x24
 8013f92:	4618      	mov	r0, r3
 8013f94:	f001 f966 	bl	8015264 <xTaskRemoveFromEventList>
 8013f98:	4603      	mov	r3, r0
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	d00e      	beq.n	8013fbc <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013f9e:	683b      	ldr	r3, [r7, #0]
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	d00b      	beq.n	8013fbc <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013fa4:	683b      	ldr	r3, [r7, #0]
 8013fa6:	2201      	movs	r2, #1
 8013fa8:	601a      	str	r2, [r3, #0]
 8013faa:	e007      	b.n	8013fbc <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013fac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013fb0:	3301      	adds	r3, #1
 8013fb2:	b2db      	uxtb	r3, r3
 8013fb4:	b25a      	sxtb	r2, r3
 8013fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8013fbc:	2301      	movs	r3, #1
 8013fbe:	637b      	str	r3, [r7, #52]	; 0x34
 8013fc0:	e001      	b.n	8013fc6 <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013fc2:	2300      	movs	r3, #0
 8013fc4:	637b      	str	r3, [r7, #52]	; 0x34
 8013fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fc8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8013fca:	68fb      	ldr	r3, [r7, #12]
 8013fcc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013fd2:	4618      	mov	r0, r3
 8013fd4:	3738      	adds	r7, #56	; 0x38
 8013fd6:	46bd      	mov	sp, r7
 8013fd8:	bd80      	pop	{r7, pc}
	...

08013fdc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8013fdc:	b580      	push	{r7, lr}
 8013fde:	b08c      	sub	sp, #48	; 0x30
 8013fe0:	af00      	add	r7, sp, #0
 8013fe2:	60f8      	str	r0, [r7, #12]
 8013fe4:	60b9      	str	r1, [r7, #8]
 8013fe6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8013fe8:	2300      	movs	r3, #0
 8013fea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013fec:	68fb      	ldr	r3, [r7, #12]
 8013fee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	d10b      	bne.n	801400e <xQueueReceive+0x32>
	__asm volatile
 8013ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ffa:	b672      	cpsid	i
 8013ffc:	f383 8811 	msr	BASEPRI, r3
 8014000:	f3bf 8f6f 	isb	sy
 8014004:	f3bf 8f4f 	dsb	sy
 8014008:	b662      	cpsie	i
 801400a:	623b      	str	r3, [r7, #32]
 801400c:	e7fe      	b.n	801400c <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801400e:	68bb      	ldr	r3, [r7, #8]
 8014010:	2b00      	cmp	r3, #0
 8014012:	d103      	bne.n	801401c <xQueueReceive+0x40>
 8014014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014018:	2b00      	cmp	r3, #0
 801401a:	d101      	bne.n	8014020 <xQueueReceive+0x44>
 801401c:	2301      	movs	r3, #1
 801401e:	e000      	b.n	8014022 <xQueueReceive+0x46>
 8014020:	2300      	movs	r3, #0
 8014022:	2b00      	cmp	r3, #0
 8014024:	d10b      	bne.n	801403e <xQueueReceive+0x62>
 8014026:	f04f 0350 	mov.w	r3, #80	; 0x50
 801402a:	b672      	cpsid	i
 801402c:	f383 8811 	msr	BASEPRI, r3
 8014030:	f3bf 8f6f 	isb	sy
 8014034:	f3bf 8f4f 	dsb	sy
 8014038:	b662      	cpsie	i
 801403a:	61fb      	str	r3, [r7, #28]
 801403c:	e7fe      	b.n	801403c <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801403e:	f001 fadf 	bl	8015600 <xTaskGetSchedulerState>
 8014042:	4603      	mov	r3, r0
 8014044:	2b00      	cmp	r3, #0
 8014046:	d102      	bne.n	801404e <xQueueReceive+0x72>
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	2b00      	cmp	r3, #0
 801404c:	d101      	bne.n	8014052 <xQueueReceive+0x76>
 801404e:	2301      	movs	r3, #1
 8014050:	e000      	b.n	8014054 <xQueueReceive+0x78>
 8014052:	2300      	movs	r3, #0
 8014054:	2b00      	cmp	r3, #0
 8014056:	d10b      	bne.n	8014070 <xQueueReceive+0x94>
 8014058:	f04f 0350 	mov.w	r3, #80	; 0x50
 801405c:	b672      	cpsid	i
 801405e:	f383 8811 	msr	BASEPRI, r3
 8014062:	f3bf 8f6f 	isb	sy
 8014066:	f3bf 8f4f 	dsb	sy
 801406a:	b662      	cpsie	i
 801406c:	61bb      	str	r3, [r7, #24]
 801406e:	e7fe      	b.n	801406e <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014070:	f002 f902 	bl	8016278 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014078:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801407a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801407c:	2b00      	cmp	r3, #0
 801407e:	d01f      	beq.n	80140c0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014080:	68b9      	ldr	r1, [r7, #8]
 8014082:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014084:	f000 fac5 	bl	8014612 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801408a:	1e5a      	subs	r2, r3, #1
 801408c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801408e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014092:	691b      	ldr	r3, [r3, #16]
 8014094:	2b00      	cmp	r3, #0
 8014096:	d00f      	beq.n	80140b8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801409a:	3310      	adds	r3, #16
 801409c:	4618      	mov	r0, r3
 801409e:	f001 f8e1 	bl	8015264 <xTaskRemoveFromEventList>
 80140a2:	4603      	mov	r3, r0
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d007      	beq.n	80140b8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80140a8:	4b3c      	ldr	r3, [pc, #240]	; (801419c <xQueueReceive+0x1c0>)
 80140aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80140ae:	601a      	str	r2, [r3, #0]
 80140b0:	f3bf 8f4f 	dsb	sy
 80140b4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80140b8:	f002 f910 	bl	80162dc <vPortExitCritical>
				return pdPASS;
 80140bc:	2301      	movs	r3, #1
 80140be:	e069      	b.n	8014194 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	d103      	bne.n	80140ce <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80140c6:	f002 f909 	bl	80162dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80140ca:	2300      	movs	r3, #0
 80140cc:	e062      	b.n	8014194 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80140ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	d106      	bne.n	80140e2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80140d4:	f107 0310 	add.w	r3, r7, #16
 80140d8:	4618      	mov	r0, r3
 80140da:	f001 f927 	bl	801532c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80140de:	2301      	movs	r3, #1
 80140e0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80140e2:	f002 f8fb 	bl	80162dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80140e6:	f000 fe85 	bl	8014df4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80140ea:	f002 f8c5 	bl	8016278 <vPortEnterCritical>
 80140ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80140f4:	b25b      	sxtb	r3, r3
 80140f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80140fa:	d103      	bne.n	8014104 <xQueueReceive+0x128>
 80140fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140fe:	2200      	movs	r2, #0
 8014100:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014106:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801410a:	b25b      	sxtb	r3, r3
 801410c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014110:	d103      	bne.n	801411a <xQueueReceive+0x13e>
 8014112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014114:	2200      	movs	r2, #0
 8014116:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801411a:	f002 f8df 	bl	80162dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801411e:	1d3a      	adds	r2, r7, #4
 8014120:	f107 0310 	add.w	r3, r7, #16
 8014124:	4611      	mov	r1, r2
 8014126:	4618      	mov	r0, r3
 8014128:	f001 f916 	bl	8015358 <xTaskCheckForTimeOut>
 801412c:	4603      	mov	r3, r0
 801412e:	2b00      	cmp	r3, #0
 8014130:	d123      	bne.n	801417a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014132:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014134:	f000 fae5 	bl	8014702 <prvIsQueueEmpty>
 8014138:	4603      	mov	r3, r0
 801413a:	2b00      	cmp	r3, #0
 801413c:	d017      	beq.n	801416e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801413e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014140:	3324      	adds	r3, #36	; 0x24
 8014142:	687a      	ldr	r2, [r7, #4]
 8014144:	4611      	mov	r1, r2
 8014146:	4618      	mov	r0, r3
 8014148:	f001 f83a 	bl	80151c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801414c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801414e:	f000 fa86 	bl	801465e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8014152:	f000 fe5d 	bl	8014e10 <xTaskResumeAll>
 8014156:	4603      	mov	r3, r0
 8014158:	2b00      	cmp	r3, #0
 801415a:	d189      	bne.n	8014070 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 801415c:	4b0f      	ldr	r3, [pc, #60]	; (801419c <xQueueReceive+0x1c0>)
 801415e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014162:	601a      	str	r2, [r3, #0]
 8014164:	f3bf 8f4f 	dsb	sy
 8014168:	f3bf 8f6f 	isb	sy
 801416c:	e780      	b.n	8014070 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801416e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014170:	f000 fa75 	bl	801465e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014174:	f000 fe4c 	bl	8014e10 <xTaskResumeAll>
 8014178:	e77a      	b.n	8014070 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801417a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801417c:	f000 fa6f 	bl	801465e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014180:	f000 fe46 	bl	8014e10 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014184:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014186:	f000 fabc 	bl	8014702 <prvIsQueueEmpty>
 801418a:	4603      	mov	r3, r0
 801418c:	2b00      	cmp	r3, #0
 801418e:	f43f af6f 	beq.w	8014070 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8014192:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8014194:	4618      	mov	r0, r3
 8014196:	3730      	adds	r7, #48	; 0x30
 8014198:	46bd      	mov	sp, r7
 801419a:	bd80      	pop	{r7, pc}
 801419c:	e000ed04 	.word	0xe000ed04

080141a0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80141a0:	b580      	push	{r7, lr}
 80141a2:	b08e      	sub	sp, #56	; 0x38
 80141a4:	af00      	add	r7, sp, #0
 80141a6:	6078      	str	r0, [r7, #4]
 80141a8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80141aa:	2300      	movs	r3, #0
 80141ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80141b2:	2300      	movs	r3, #0
 80141b4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80141b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	d10b      	bne.n	80141d4 <xQueueSemaphoreTake+0x34>
 80141bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141c0:	b672      	cpsid	i
 80141c2:	f383 8811 	msr	BASEPRI, r3
 80141c6:	f3bf 8f6f 	isb	sy
 80141ca:	f3bf 8f4f 	dsb	sy
 80141ce:	b662      	cpsie	i
 80141d0:	623b      	str	r3, [r7, #32]
 80141d2:	e7fe      	b.n	80141d2 <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80141d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80141d8:	2b00      	cmp	r3, #0
 80141da:	d00b      	beq.n	80141f4 <xQueueSemaphoreTake+0x54>
 80141dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141e0:	b672      	cpsid	i
 80141e2:	f383 8811 	msr	BASEPRI, r3
 80141e6:	f3bf 8f6f 	isb	sy
 80141ea:	f3bf 8f4f 	dsb	sy
 80141ee:	b662      	cpsie	i
 80141f0:	61fb      	str	r3, [r7, #28]
 80141f2:	e7fe      	b.n	80141f2 <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80141f4:	f001 fa04 	bl	8015600 <xTaskGetSchedulerState>
 80141f8:	4603      	mov	r3, r0
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	d102      	bne.n	8014204 <xQueueSemaphoreTake+0x64>
 80141fe:	683b      	ldr	r3, [r7, #0]
 8014200:	2b00      	cmp	r3, #0
 8014202:	d101      	bne.n	8014208 <xQueueSemaphoreTake+0x68>
 8014204:	2301      	movs	r3, #1
 8014206:	e000      	b.n	801420a <xQueueSemaphoreTake+0x6a>
 8014208:	2300      	movs	r3, #0
 801420a:	2b00      	cmp	r3, #0
 801420c:	d10b      	bne.n	8014226 <xQueueSemaphoreTake+0x86>
 801420e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014212:	b672      	cpsid	i
 8014214:	f383 8811 	msr	BASEPRI, r3
 8014218:	f3bf 8f6f 	isb	sy
 801421c:	f3bf 8f4f 	dsb	sy
 8014220:	b662      	cpsie	i
 8014222:	61bb      	str	r3, [r7, #24]
 8014224:	e7fe      	b.n	8014224 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014226:	f002 f827 	bl	8016278 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801422a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801422c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801422e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8014230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014232:	2b00      	cmp	r3, #0
 8014234:	d024      	beq.n	8014280 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8014236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014238:	1e5a      	subs	r2, r3, #1
 801423a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801423c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801423e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014240:	681b      	ldr	r3, [r3, #0]
 8014242:	2b00      	cmp	r3, #0
 8014244:	d104      	bne.n	8014250 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8014246:	f001 fb55 	bl	80158f4 <pvTaskIncrementMutexHeldCount>
 801424a:	4602      	mov	r2, r0
 801424c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801424e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014252:	691b      	ldr	r3, [r3, #16]
 8014254:	2b00      	cmp	r3, #0
 8014256:	d00f      	beq.n	8014278 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801425a:	3310      	adds	r3, #16
 801425c:	4618      	mov	r0, r3
 801425e:	f001 f801 	bl	8015264 <xTaskRemoveFromEventList>
 8014262:	4603      	mov	r3, r0
 8014264:	2b00      	cmp	r3, #0
 8014266:	d007      	beq.n	8014278 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8014268:	4b54      	ldr	r3, [pc, #336]	; (80143bc <xQueueSemaphoreTake+0x21c>)
 801426a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801426e:	601a      	str	r2, [r3, #0]
 8014270:	f3bf 8f4f 	dsb	sy
 8014274:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8014278:	f002 f830 	bl	80162dc <vPortExitCritical>
				return pdPASS;
 801427c:	2301      	movs	r3, #1
 801427e:	e098      	b.n	80143b2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014280:	683b      	ldr	r3, [r7, #0]
 8014282:	2b00      	cmp	r3, #0
 8014284:	d112      	bne.n	80142ac <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8014286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014288:	2b00      	cmp	r3, #0
 801428a:	d00b      	beq.n	80142a4 <xQueueSemaphoreTake+0x104>
 801428c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014290:	b672      	cpsid	i
 8014292:	f383 8811 	msr	BASEPRI, r3
 8014296:	f3bf 8f6f 	isb	sy
 801429a:	f3bf 8f4f 	dsb	sy
 801429e:	b662      	cpsie	i
 80142a0:	617b      	str	r3, [r7, #20]
 80142a2:	e7fe      	b.n	80142a2 <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80142a4:	f002 f81a 	bl	80162dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80142a8:	2300      	movs	r3, #0
 80142aa:	e082      	b.n	80143b2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80142ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	d106      	bne.n	80142c0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80142b2:	f107 030c 	add.w	r3, r7, #12
 80142b6:	4618      	mov	r0, r3
 80142b8:	f001 f838 	bl	801532c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80142bc:	2301      	movs	r3, #1
 80142be:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80142c0:	f002 f80c 	bl	80162dc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80142c4:	f000 fd96 	bl	8014df4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80142c8:	f001 ffd6 	bl	8016278 <vPortEnterCritical>
 80142cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80142d2:	b25b      	sxtb	r3, r3
 80142d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80142d8:	d103      	bne.n	80142e2 <xQueueSemaphoreTake+0x142>
 80142da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142dc:	2200      	movs	r2, #0
 80142de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80142e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80142e8:	b25b      	sxtb	r3, r3
 80142ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80142ee:	d103      	bne.n	80142f8 <xQueueSemaphoreTake+0x158>
 80142f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142f2:	2200      	movs	r2, #0
 80142f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80142f8:	f001 fff0 	bl	80162dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80142fc:	463a      	mov	r2, r7
 80142fe:	f107 030c 	add.w	r3, r7, #12
 8014302:	4611      	mov	r1, r2
 8014304:	4618      	mov	r0, r3
 8014306:	f001 f827 	bl	8015358 <xTaskCheckForTimeOut>
 801430a:	4603      	mov	r3, r0
 801430c:	2b00      	cmp	r3, #0
 801430e:	d132      	bne.n	8014376 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014310:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014312:	f000 f9f6 	bl	8014702 <prvIsQueueEmpty>
 8014316:	4603      	mov	r3, r0
 8014318:	2b00      	cmp	r3, #0
 801431a:	d026      	beq.n	801436a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801431c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801431e:	681b      	ldr	r3, [r3, #0]
 8014320:	2b00      	cmp	r3, #0
 8014322:	d109      	bne.n	8014338 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8014324:	f001 ffa8 	bl	8016278 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8014328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801432a:	689b      	ldr	r3, [r3, #8]
 801432c:	4618      	mov	r0, r3
 801432e:	f001 f985 	bl	801563c <xTaskPriorityInherit>
 8014332:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8014334:	f001 ffd2 	bl	80162dc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8014338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801433a:	3324      	adds	r3, #36	; 0x24
 801433c:	683a      	ldr	r2, [r7, #0]
 801433e:	4611      	mov	r1, r2
 8014340:	4618      	mov	r0, r3
 8014342:	f000 ff3d 	bl	80151c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8014346:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014348:	f000 f989 	bl	801465e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801434c:	f000 fd60 	bl	8014e10 <xTaskResumeAll>
 8014350:	4603      	mov	r3, r0
 8014352:	2b00      	cmp	r3, #0
 8014354:	f47f af67 	bne.w	8014226 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8014358:	4b18      	ldr	r3, [pc, #96]	; (80143bc <xQueueSemaphoreTake+0x21c>)
 801435a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801435e:	601a      	str	r2, [r3, #0]
 8014360:	f3bf 8f4f 	dsb	sy
 8014364:	f3bf 8f6f 	isb	sy
 8014368:	e75d      	b.n	8014226 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801436a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801436c:	f000 f977 	bl	801465e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014370:	f000 fd4e 	bl	8014e10 <xTaskResumeAll>
 8014374:	e757      	b.n	8014226 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8014376:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014378:	f000 f971 	bl	801465e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801437c:	f000 fd48 	bl	8014e10 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014380:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014382:	f000 f9be 	bl	8014702 <prvIsQueueEmpty>
 8014386:	4603      	mov	r3, r0
 8014388:	2b00      	cmp	r3, #0
 801438a:	f43f af4c 	beq.w	8014226 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801438e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014390:	2b00      	cmp	r3, #0
 8014392:	d00d      	beq.n	80143b0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8014394:	f001 ff70 	bl	8016278 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8014398:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801439a:	f000 f8b8 	bl	801450e <prvGetDisinheritPriorityAfterTimeout>
 801439e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80143a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143a2:	689b      	ldr	r3, [r3, #8]
 80143a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80143a6:	4618      	mov	r0, r3
 80143a8:	f001 fa20 	bl	80157ec <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80143ac:	f001 ff96 	bl	80162dc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80143b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80143b2:	4618      	mov	r0, r3
 80143b4:	3738      	adds	r7, #56	; 0x38
 80143b6:	46bd      	mov	sp, r7
 80143b8:	bd80      	pop	{r7, pc}
 80143ba:	bf00      	nop
 80143bc:	e000ed04 	.word	0xe000ed04

080143c0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80143c0:	b580      	push	{r7, lr}
 80143c2:	b08e      	sub	sp, #56	; 0x38
 80143c4:	af00      	add	r7, sp, #0
 80143c6:	60f8      	str	r0, [r7, #12]
 80143c8:	60b9      	str	r1, [r7, #8]
 80143ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80143cc:	68fb      	ldr	r3, [r7, #12]
 80143ce:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80143d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143d2:	2b00      	cmp	r3, #0
 80143d4:	d10b      	bne.n	80143ee <xQueueReceiveFromISR+0x2e>
 80143d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143da:	b672      	cpsid	i
 80143dc:	f383 8811 	msr	BASEPRI, r3
 80143e0:	f3bf 8f6f 	isb	sy
 80143e4:	f3bf 8f4f 	dsb	sy
 80143e8:	b662      	cpsie	i
 80143ea:	623b      	str	r3, [r7, #32]
 80143ec:	e7fe      	b.n	80143ec <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80143ee:	68bb      	ldr	r3, [r7, #8]
 80143f0:	2b00      	cmp	r3, #0
 80143f2:	d103      	bne.n	80143fc <xQueueReceiveFromISR+0x3c>
 80143f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	d101      	bne.n	8014400 <xQueueReceiveFromISR+0x40>
 80143fc:	2301      	movs	r3, #1
 80143fe:	e000      	b.n	8014402 <xQueueReceiveFromISR+0x42>
 8014400:	2300      	movs	r3, #0
 8014402:	2b00      	cmp	r3, #0
 8014404:	d10b      	bne.n	801441e <xQueueReceiveFromISR+0x5e>
 8014406:	f04f 0350 	mov.w	r3, #80	; 0x50
 801440a:	b672      	cpsid	i
 801440c:	f383 8811 	msr	BASEPRI, r3
 8014410:	f3bf 8f6f 	isb	sy
 8014414:	f3bf 8f4f 	dsb	sy
 8014418:	b662      	cpsie	i
 801441a:	61fb      	str	r3, [r7, #28]
 801441c:	e7fe      	b.n	801441c <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801441e:	f002 f80b 	bl	8016438 <vPortValidateInterruptPriority>
	__asm volatile
 8014422:	f3ef 8211 	mrs	r2, BASEPRI
 8014426:	f04f 0350 	mov.w	r3, #80	; 0x50
 801442a:	b672      	cpsid	i
 801442c:	f383 8811 	msr	BASEPRI, r3
 8014430:	f3bf 8f6f 	isb	sy
 8014434:	f3bf 8f4f 	dsb	sy
 8014438:	b662      	cpsie	i
 801443a:	61ba      	str	r2, [r7, #24]
 801443c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801443e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014440:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014446:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801444a:	2b00      	cmp	r3, #0
 801444c:	d02f      	beq.n	80144ae <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801444e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014450:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014454:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014458:	68b9      	ldr	r1, [r7, #8]
 801445a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801445c:	f000 f8d9 	bl	8014612 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014462:	1e5a      	subs	r2, r3, #1
 8014464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014466:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8014468:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801446c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014470:	d112      	bne.n	8014498 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014474:	691b      	ldr	r3, [r3, #16]
 8014476:	2b00      	cmp	r3, #0
 8014478:	d016      	beq.n	80144a8 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801447a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801447c:	3310      	adds	r3, #16
 801447e:	4618      	mov	r0, r3
 8014480:	f000 fef0 	bl	8015264 <xTaskRemoveFromEventList>
 8014484:	4603      	mov	r3, r0
 8014486:	2b00      	cmp	r3, #0
 8014488:	d00e      	beq.n	80144a8 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	2b00      	cmp	r3, #0
 801448e:	d00b      	beq.n	80144a8 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	2201      	movs	r2, #1
 8014494:	601a      	str	r2, [r3, #0]
 8014496:	e007      	b.n	80144a8 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8014498:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801449c:	3301      	adds	r3, #1
 801449e:	b2db      	uxtb	r3, r3
 80144a0:	b25a      	sxtb	r2, r3
 80144a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80144a8:	2301      	movs	r3, #1
 80144aa:	637b      	str	r3, [r7, #52]	; 0x34
 80144ac:	e001      	b.n	80144b2 <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 80144ae:	2300      	movs	r3, #0
 80144b0:	637b      	str	r3, [r7, #52]	; 0x34
 80144b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144b4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80144b6:	693b      	ldr	r3, [r7, #16]
 80144b8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80144bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80144be:	4618      	mov	r0, r3
 80144c0:	3738      	adds	r7, #56	; 0x38
 80144c2:	46bd      	mov	sp, r7
 80144c4:	bd80      	pop	{r7, pc}

080144c6 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80144c6:	b580      	push	{r7, lr}
 80144c8:	b084      	sub	sp, #16
 80144ca:	af00      	add	r7, sp, #0
 80144cc:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80144d2:	68fb      	ldr	r3, [r7, #12]
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	d10b      	bne.n	80144f0 <vQueueDelete+0x2a>
	__asm volatile
 80144d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144dc:	b672      	cpsid	i
 80144de:	f383 8811 	msr	BASEPRI, r3
 80144e2:	f3bf 8f6f 	isb	sy
 80144e6:	f3bf 8f4f 	dsb	sy
 80144ea:	b662      	cpsie	i
 80144ec:	60bb      	str	r3, [r7, #8]
 80144ee:	e7fe      	b.n	80144ee <vQueueDelete+0x28>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80144f0:	68f8      	ldr	r0, [r7, #12]
 80144f2:	f000 f95d 	bl	80147b0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80144f6:	68fb      	ldr	r3, [r7, #12]
 80144f8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	d102      	bne.n	8014506 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8014500:	68f8      	ldr	r0, [r7, #12]
 8014502:	f002 f8a3 	bl	801664c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8014506:	bf00      	nop
 8014508:	3710      	adds	r7, #16
 801450a:	46bd      	mov	sp, r7
 801450c:	bd80      	pop	{r7, pc}

0801450e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801450e:	b480      	push	{r7}
 8014510:	b085      	sub	sp, #20
 8014512:	af00      	add	r7, sp, #0
 8014514:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801451a:	2b00      	cmp	r3, #0
 801451c:	d006      	beq.n	801452c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801451e:	687b      	ldr	r3, [r7, #4]
 8014520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014522:	681b      	ldr	r3, [r3, #0]
 8014524:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8014528:	60fb      	str	r3, [r7, #12]
 801452a:	e001      	b.n	8014530 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801452c:	2300      	movs	r3, #0
 801452e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8014530:	68fb      	ldr	r3, [r7, #12]
	}
 8014532:	4618      	mov	r0, r3
 8014534:	3714      	adds	r7, #20
 8014536:	46bd      	mov	sp, r7
 8014538:	f85d 7b04 	ldr.w	r7, [sp], #4
 801453c:	4770      	bx	lr

0801453e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801453e:	b580      	push	{r7, lr}
 8014540:	b086      	sub	sp, #24
 8014542:	af00      	add	r7, sp, #0
 8014544:	60f8      	str	r0, [r7, #12]
 8014546:	60b9      	str	r1, [r7, #8]
 8014548:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801454a:	2300      	movs	r3, #0
 801454c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801454e:	68fb      	ldr	r3, [r7, #12]
 8014550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014552:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8014554:	68fb      	ldr	r3, [r7, #12]
 8014556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014558:	2b00      	cmp	r3, #0
 801455a:	d10d      	bne.n	8014578 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801455c:	68fb      	ldr	r3, [r7, #12]
 801455e:	681b      	ldr	r3, [r3, #0]
 8014560:	2b00      	cmp	r3, #0
 8014562:	d14d      	bne.n	8014600 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8014564:	68fb      	ldr	r3, [r7, #12]
 8014566:	689b      	ldr	r3, [r3, #8]
 8014568:	4618      	mov	r0, r3
 801456a:	f001 f8cf 	bl	801570c <xTaskPriorityDisinherit>
 801456e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8014570:	68fb      	ldr	r3, [r7, #12]
 8014572:	2200      	movs	r2, #0
 8014574:	609a      	str	r2, [r3, #8]
 8014576:	e043      	b.n	8014600 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	2b00      	cmp	r3, #0
 801457c:	d119      	bne.n	80145b2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801457e:	68fb      	ldr	r3, [r7, #12]
 8014580:	6858      	ldr	r0, [r3, #4]
 8014582:	68fb      	ldr	r3, [r7, #12]
 8014584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014586:	461a      	mov	r2, r3
 8014588:	68b9      	ldr	r1, [r7, #8]
 801458a:	f002 fef3 	bl	8017374 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801458e:	68fb      	ldr	r3, [r7, #12]
 8014590:	685a      	ldr	r2, [r3, #4]
 8014592:	68fb      	ldr	r3, [r7, #12]
 8014594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014596:	441a      	add	r2, r3
 8014598:	68fb      	ldr	r3, [r7, #12]
 801459a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801459c:	68fb      	ldr	r3, [r7, #12]
 801459e:	685a      	ldr	r2, [r3, #4]
 80145a0:	68fb      	ldr	r3, [r7, #12]
 80145a2:	689b      	ldr	r3, [r3, #8]
 80145a4:	429a      	cmp	r2, r3
 80145a6:	d32b      	bcc.n	8014600 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80145a8:	68fb      	ldr	r3, [r7, #12]
 80145aa:	681a      	ldr	r2, [r3, #0]
 80145ac:	68fb      	ldr	r3, [r7, #12]
 80145ae:	605a      	str	r2, [r3, #4]
 80145b0:	e026      	b.n	8014600 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80145b2:	68fb      	ldr	r3, [r7, #12]
 80145b4:	68d8      	ldr	r0, [r3, #12]
 80145b6:	68fb      	ldr	r3, [r7, #12]
 80145b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80145ba:	461a      	mov	r2, r3
 80145bc:	68b9      	ldr	r1, [r7, #8]
 80145be:	f002 fed9 	bl	8017374 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80145c2:	68fb      	ldr	r3, [r7, #12]
 80145c4:	68da      	ldr	r2, [r3, #12]
 80145c6:	68fb      	ldr	r3, [r7, #12]
 80145c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80145ca:	425b      	negs	r3, r3
 80145cc:	441a      	add	r2, r3
 80145ce:	68fb      	ldr	r3, [r7, #12]
 80145d0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80145d2:	68fb      	ldr	r3, [r7, #12]
 80145d4:	68da      	ldr	r2, [r3, #12]
 80145d6:	68fb      	ldr	r3, [r7, #12]
 80145d8:	681b      	ldr	r3, [r3, #0]
 80145da:	429a      	cmp	r2, r3
 80145dc:	d207      	bcs.n	80145ee <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80145de:	68fb      	ldr	r3, [r7, #12]
 80145e0:	689a      	ldr	r2, [r3, #8]
 80145e2:	68fb      	ldr	r3, [r7, #12]
 80145e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80145e6:	425b      	negs	r3, r3
 80145e8:	441a      	add	r2, r3
 80145ea:	68fb      	ldr	r3, [r7, #12]
 80145ec:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	2b02      	cmp	r3, #2
 80145f2:	d105      	bne.n	8014600 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80145f4:	693b      	ldr	r3, [r7, #16]
 80145f6:	2b00      	cmp	r3, #0
 80145f8:	d002      	beq.n	8014600 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80145fa:	693b      	ldr	r3, [r7, #16]
 80145fc:	3b01      	subs	r3, #1
 80145fe:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8014600:	693b      	ldr	r3, [r7, #16]
 8014602:	1c5a      	adds	r2, r3, #1
 8014604:	68fb      	ldr	r3, [r7, #12]
 8014606:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8014608:	697b      	ldr	r3, [r7, #20]
}
 801460a:	4618      	mov	r0, r3
 801460c:	3718      	adds	r7, #24
 801460e:	46bd      	mov	sp, r7
 8014610:	bd80      	pop	{r7, pc}

08014612 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8014612:	b580      	push	{r7, lr}
 8014614:	b082      	sub	sp, #8
 8014616:	af00      	add	r7, sp, #0
 8014618:	6078      	str	r0, [r7, #4]
 801461a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014620:	2b00      	cmp	r3, #0
 8014622:	d018      	beq.n	8014656 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	68da      	ldr	r2, [r3, #12]
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801462c:	441a      	add	r2, r3
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	68da      	ldr	r2, [r3, #12]
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	689b      	ldr	r3, [r3, #8]
 801463a:	429a      	cmp	r2, r3
 801463c:	d303      	bcc.n	8014646 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	681a      	ldr	r2, [r3, #0]
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	68d9      	ldr	r1, [r3, #12]
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801464e:	461a      	mov	r2, r3
 8014650:	6838      	ldr	r0, [r7, #0]
 8014652:	f002 fe8f 	bl	8017374 <memcpy>
	}
}
 8014656:	bf00      	nop
 8014658:	3708      	adds	r7, #8
 801465a:	46bd      	mov	sp, r7
 801465c:	bd80      	pop	{r7, pc}

0801465e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801465e:	b580      	push	{r7, lr}
 8014660:	b084      	sub	sp, #16
 8014662:	af00      	add	r7, sp, #0
 8014664:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8014666:	f001 fe07 	bl	8016278 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014670:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014672:	e011      	b.n	8014698 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014678:	2b00      	cmp	r3, #0
 801467a:	d012      	beq.n	80146a2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	3324      	adds	r3, #36	; 0x24
 8014680:	4618      	mov	r0, r3
 8014682:	f000 fdef 	bl	8015264 <xTaskRemoveFromEventList>
 8014686:	4603      	mov	r3, r0
 8014688:	2b00      	cmp	r3, #0
 801468a:	d001      	beq.n	8014690 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801468c:	f000 fec8 	bl	8015420 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8014690:	7bfb      	ldrb	r3, [r7, #15]
 8014692:	3b01      	subs	r3, #1
 8014694:	b2db      	uxtb	r3, r3
 8014696:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014698:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801469c:	2b00      	cmp	r3, #0
 801469e:	dce9      	bgt.n	8014674 <prvUnlockQueue+0x16>
 80146a0:	e000      	b.n	80146a4 <prvUnlockQueue+0x46>
					break;
 80146a2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	22ff      	movs	r2, #255	; 0xff
 80146a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80146ac:	f001 fe16 	bl	80162dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80146b0:	f001 fde2 	bl	8016278 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80146ba:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80146bc:	e011      	b.n	80146e2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	691b      	ldr	r3, [r3, #16]
 80146c2:	2b00      	cmp	r3, #0
 80146c4:	d012      	beq.n	80146ec <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	3310      	adds	r3, #16
 80146ca:	4618      	mov	r0, r3
 80146cc:	f000 fdca 	bl	8015264 <xTaskRemoveFromEventList>
 80146d0:	4603      	mov	r3, r0
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	d001      	beq.n	80146da <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80146d6:	f000 fea3 	bl	8015420 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80146da:	7bbb      	ldrb	r3, [r7, #14]
 80146dc:	3b01      	subs	r3, #1
 80146de:	b2db      	uxtb	r3, r3
 80146e0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80146e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	dce9      	bgt.n	80146be <prvUnlockQueue+0x60>
 80146ea:	e000      	b.n	80146ee <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80146ec:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	22ff      	movs	r2, #255	; 0xff
 80146f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80146f6:	f001 fdf1 	bl	80162dc <vPortExitCritical>
}
 80146fa:	bf00      	nop
 80146fc:	3710      	adds	r7, #16
 80146fe:	46bd      	mov	sp, r7
 8014700:	bd80      	pop	{r7, pc}

08014702 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8014702:	b580      	push	{r7, lr}
 8014704:	b084      	sub	sp, #16
 8014706:	af00      	add	r7, sp, #0
 8014708:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801470a:	f001 fdb5 	bl	8016278 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014712:	2b00      	cmp	r3, #0
 8014714:	d102      	bne.n	801471c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8014716:	2301      	movs	r3, #1
 8014718:	60fb      	str	r3, [r7, #12]
 801471a:	e001      	b.n	8014720 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801471c:	2300      	movs	r3, #0
 801471e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014720:	f001 fddc 	bl	80162dc <vPortExitCritical>

	return xReturn;
 8014724:	68fb      	ldr	r3, [r7, #12]
}
 8014726:	4618      	mov	r0, r3
 8014728:	3710      	adds	r7, #16
 801472a:	46bd      	mov	sp, r7
 801472c:	bd80      	pop	{r7, pc}

0801472e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801472e:	b580      	push	{r7, lr}
 8014730:	b084      	sub	sp, #16
 8014732:	af00      	add	r7, sp, #0
 8014734:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014736:	f001 fd9f 	bl	8016278 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014742:	429a      	cmp	r2, r3
 8014744:	d102      	bne.n	801474c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8014746:	2301      	movs	r3, #1
 8014748:	60fb      	str	r3, [r7, #12]
 801474a:	e001      	b.n	8014750 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801474c:	2300      	movs	r3, #0
 801474e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014750:	f001 fdc4 	bl	80162dc <vPortExitCritical>

	return xReturn;
 8014754:	68fb      	ldr	r3, [r7, #12]
}
 8014756:	4618      	mov	r0, r3
 8014758:	3710      	adds	r7, #16
 801475a:	46bd      	mov	sp, r7
 801475c:	bd80      	pop	{r7, pc}
	...

08014760 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8014760:	b480      	push	{r7}
 8014762:	b085      	sub	sp, #20
 8014764:	af00      	add	r7, sp, #0
 8014766:	6078      	str	r0, [r7, #4]
 8014768:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801476a:	2300      	movs	r3, #0
 801476c:	60fb      	str	r3, [r7, #12]
 801476e:	e014      	b.n	801479a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8014770:	4a0e      	ldr	r2, [pc, #56]	; (80147ac <vQueueAddToRegistry+0x4c>)
 8014772:	68fb      	ldr	r3, [r7, #12]
 8014774:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8014778:	2b00      	cmp	r3, #0
 801477a:	d10b      	bne.n	8014794 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801477c:	490b      	ldr	r1, [pc, #44]	; (80147ac <vQueueAddToRegistry+0x4c>)
 801477e:	68fb      	ldr	r3, [r7, #12]
 8014780:	683a      	ldr	r2, [r7, #0]
 8014782:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8014786:	4a09      	ldr	r2, [pc, #36]	; (80147ac <vQueueAddToRegistry+0x4c>)
 8014788:	68fb      	ldr	r3, [r7, #12]
 801478a:	00db      	lsls	r3, r3, #3
 801478c:	4413      	add	r3, r2
 801478e:	687a      	ldr	r2, [r7, #4]
 8014790:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8014792:	e005      	b.n	80147a0 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014794:	68fb      	ldr	r3, [r7, #12]
 8014796:	3301      	adds	r3, #1
 8014798:	60fb      	str	r3, [r7, #12]
 801479a:	68fb      	ldr	r3, [r7, #12]
 801479c:	2b07      	cmp	r3, #7
 801479e:	d9e7      	bls.n	8014770 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80147a0:	bf00      	nop
 80147a2:	3714      	adds	r7, #20
 80147a4:	46bd      	mov	sp, r7
 80147a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147aa:	4770      	bx	lr
 80147ac:	200156e8 	.word	0x200156e8

080147b0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80147b0:	b480      	push	{r7}
 80147b2:	b085      	sub	sp, #20
 80147b4:	af00      	add	r7, sp, #0
 80147b6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80147b8:	2300      	movs	r3, #0
 80147ba:	60fb      	str	r3, [r7, #12]
 80147bc:	e016      	b.n	80147ec <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80147be:	4a10      	ldr	r2, [pc, #64]	; (8014800 <vQueueUnregisterQueue+0x50>)
 80147c0:	68fb      	ldr	r3, [r7, #12]
 80147c2:	00db      	lsls	r3, r3, #3
 80147c4:	4413      	add	r3, r2
 80147c6:	685b      	ldr	r3, [r3, #4]
 80147c8:	687a      	ldr	r2, [r7, #4]
 80147ca:	429a      	cmp	r2, r3
 80147cc:	d10b      	bne.n	80147e6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80147ce:	4a0c      	ldr	r2, [pc, #48]	; (8014800 <vQueueUnregisterQueue+0x50>)
 80147d0:	68fb      	ldr	r3, [r7, #12]
 80147d2:	2100      	movs	r1, #0
 80147d4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80147d8:	4a09      	ldr	r2, [pc, #36]	; (8014800 <vQueueUnregisterQueue+0x50>)
 80147da:	68fb      	ldr	r3, [r7, #12]
 80147dc:	00db      	lsls	r3, r3, #3
 80147de:	4413      	add	r3, r2
 80147e0:	2200      	movs	r2, #0
 80147e2:	605a      	str	r2, [r3, #4]
				break;
 80147e4:	e005      	b.n	80147f2 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80147e6:	68fb      	ldr	r3, [r7, #12]
 80147e8:	3301      	adds	r3, #1
 80147ea:	60fb      	str	r3, [r7, #12]
 80147ec:	68fb      	ldr	r3, [r7, #12]
 80147ee:	2b07      	cmp	r3, #7
 80147f0:	d9e5      	bls.n	80147be <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80147f2:	bf00      	nop
 80147f4:	3714      	adds	r7, #20
 80147f6:	46bd      	mov	sp, r7
 80147f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147fc:	4770      	bx	lr
 80147fe:	bf00      	nop
 8014800:	200156e8 	.word	0x200156e8

08014804 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014804:	b580      	push	{r7, lr}
 8014806:	b086      	sub	sp, #24
 8014808:	af00      	add	r7, sp, #0
 801480a:	60f8      	str	r0, [r7, #12]
 801480c:	60b9      	str	r1, [r7, #8]
 801480e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8014810:	68fb      	ldr	r3, [r7, #12]
 8014812:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8014814:	f001 fd30 	bl	8016278 <vPortEnterCritical>
 8014818:	697b      	ldr	r3, [r7, #20]
 801481a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801481e:	b25b      	sxtb	r3, r3
 8014820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014824:	d103      	bne.n	801482e <vQueueWaitForMessageRestricted+0x2a>
 8014826:	697b      	ldr	r3, [r7, #20]
 8014828:	2200      	movs	r2, #0
 801482a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801482e:	697b      	ldr	r3, [r7, #20]
 8014830:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014834:	b25b      	sxtb	r3, r3
 8014836:	f1b3 3fff 	cmp.w	r3, #4294967295
 801483a:	d103      	bne.n	8014844 <vQueueWaitForMessageRestricted+0x40>
 801483c:	697b      	ldr	r3, [r7, #20]
 801483e:	2200      	movs	r2, #0
 8014840:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014844:	f001 fd4a 	bl	80162dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8014848:	697b      	ldr	r3, [r7, #20]
 801484a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801484c:	2b00      	cmp	r3, #0
 801484e:	d106      	bne.n	801485e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8014850:	697b      	ldr	r3, [r7, #20]
 8014852:	3324      	adds	r3, #36	; 0x24
 8014854:	687a      	ldr	r2, [r7, #4]
 8014856:	68b9      	ldr	r1, [r7, #8]
 8014858:	4618      	mov	r0, r3
 801485a:	f000 fcd7 	bl	801520c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801485e:	6978      	ldr	r0, [r7, #20]
 8014860:	f7ff fefd 	bl	801465e <prvUnlockQueue>
	}
 8014864:	bf00      	nop
 8014866:	3718      	adds	r7, #24
 8014868:	46bd      	mov	sp, r7
 801486a:	bd80      	pop	{r7, pc}

0801486c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801486c:	b580      	push	{r7, lr}
 801486e:	b08e      	sub	sp, #56	; 0x38
 8014870:	af04      	add	r7, sp, #16
 8014872:	60f8      	str	r0, [r7, #12]
 8014874:	60b9      	str	r1, [r7, #8]
 8014876:	607a      	str	r2, [r7, #4]
 8014878:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801487a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801487c:	2b00      	cmp	r3, #0
 801487e:	d10b      	bne.n	8014898 <xTaskCreateStatic+0x2c>
 8014880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014884:	b672      	cpsid	i
 8014886:	f383 8811 	msr	BASEPRI, r3
 801488a:	f3bf 8f6f 	isb	sy
 801488e:	f3bf 8f4f 	dsb	sy
 8014892:	b662      	cpsie	i
 8014894:	623b      	str	r3, [r7, #32]
 8014896:	e7fe      	b.n	8014896 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8014898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801489a:	2b00      	cmp	r3, #0
 801489c:	d10b      	bne.n	80148b6 <xTaskCreateStatic+0x4a>
 801489e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148a2:	b672      	cpsid	i
 80148a4:	f383 8811 	msr	BASEPRI, r3
 80148a8:	f3bf 8f6f 	isb	sy
 80148ac:	f3bf 8f4f 	dsb	sy
 80148b0:	b662      	cpsie	i
 80148b2:	61fb      	str	r3, [r7, #28]
 80148b4:	e7fe      	b.n	80148b4 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80148b6:	235c      	movs	r3, #92	; 0x5c
 80148b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80148ba:	693b      	ldr	r3, [r7, #16]
 80148bc:	2b5c      	cmp	r3, #92	; 0x5c
 80148be:	d00b      	beq.n	80148d8 <xTaskCreateStatic+0x6c>
 80148c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148c4:	b672      	cpsid	i
 80148c6:	f383 8811 	msr	BASEPRI, r3
 80148ca:	f3bf 8f6f 	isb	sy
 80148ce:	f3bf 8f4f 	dsb	sy
 80148d2:	b662      	cpsie	i
 80148d4:	61bb      	str	r3, [r7, #24]
 80148d6:	e7fe      	b.n	80148d6 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80148d8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80148da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148dc:	2b00      	cmp	r3, #0
 80148de:	d01e      	beq.n	801491e <xTaskCreateStatic+0xb2>
 80148e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	d01b      	beq.n	801491e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80148e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148e8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80148ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80148ee:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80148f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148f2:	2202      	movs	r2, #2
 80148f4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80148f8:	2300      	movs	r3, #0
 80148fa:	9303      	str	r3, [sp, #12]
 80148fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148fe:	9302      	str	r3, [sp, #8]
 8014900:	f107 0314 	add.w	r3, r7, #20
 8014904:	9301      	str	r3, [sp, #4]
 8014906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014908:	9300      	str	r3, [sp, #0]
 801490a:	683b      	ldr	r3, [r7, #0]
 801490c:	687a      	ldr	r2, [r7, #4]
 801490e:	68b9      	ldr	r1, [r7, #8]
 8014910:	68f8      	ldr	r0, [r7, #12]
 8014912:	f000 f850 	bl	80149b6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014916:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014918:	f000 f8de 	bl	8014ad8 <prvAddNewTaskToReadyList>
 801491c:	e001      	b.n	8014922 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 801491e:	2300      	movs	r3, #0
 8014920:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8014922:	697b      	ldr	r3, [r7, #20]
	}
 8014924:	4618      	mov	r0, r3
 8014926:	3728      	adds	r7, #40	; 0x28
 8014928:	46bd      	mov	sp, r7
 801492a:	bd80      	pop	{r7, pc}

0801492c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801492c:	b580      	push	{r7, lr}
 801492e:	b08c      	sub	sp, #48	; 0x30
 8014930:	af04      	add	r7, sp, #16
 8014932:	60f8      	str	r0, [r7, #12]
 8014934:	60b9      	str	r1, [r7, #8]
 8014936:	603b      	str	r3, [r7, #0]
 8014938:	4613      	mov	r3, r2
 801493a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801493c:	88fb      	ldrh	r3, [r7, #6]
 801493e:	009b      	lsls	r3, r3, #2
 8014940:	4618      	mov	r0, r3
 8014942:	f001 fdbb 	bl	80164bc <pvPortMalloc>
 8014946:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8014948:	697b      	ldr	r3, [r7, #20]
 801494a:	2b00      	cmp	r3, #0
 801494c:	d00e      	beq.n	801496c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801494e:	205c      	movs	r0, #92	; 0x5c
 8014950:	f001 fdb4 	bl	80164bc <pvPortMalloc>
 8014954:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8014956:	69fb      	ldr	r3, [r7, #28]
 8014958:	2b00      	cmp	r3, #0
 801495a:	d003      	beq.n	8014964 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801495c:	69fb      	ldr	r3, [r7, #28]
 801495e:	697a      	ldr	r2, [r7, #20]
 8014960:	631a      	str	r2, [r3, #48]	; 0x30
 8014962:	e005      	b.n	8014970 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8014964:	6978      	ldr	r0, [r7, #20]
 8014966:	f001 fe71 	bl	801664c <vPortFree>
 801496a:	e001      	b.n	8014970 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801496c:	2300      	movs	r3, #0
 801496e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8014970:	69fb      	ldr	r3, [r7, #28]
 8014972:	2b00      	cmp	r3, #0
 8014974:	d017      	beq.n	80149a6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8014976:	69fb      	ldr	r3, [r7, #28]
 8014978:	2200      	movs	r2, #0
 801497a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801497e:	88fa      	ldrh	r2, [r7, #6]
 8014980:	2300      	movs	r3, #0
 8014982:	9303      	str	r3, [sp, #12]
 8014984:	69fb      	ldr	r3, [r7, #28]
 8014986:	9302      	str	r3, [sp, #8]
 8014988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801498a:	9301      	str	r3, [sp, #4]
 801498c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801498e:	9300      	str	r3, [sp, #0]
 8014990:	683b      	ldr	r3, [r7, #0]
 8014992:	68b9      	ldr	r1, [r7, #8]
 8014994:	68f8      	ldr	r0, [r7, #12]
 8014996:	f000 f80e 	bl	80149b6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801499a:	69f8      	ldr	r0, [r7, #28]
 801499c:	f000 f89c 	bl	8014ad8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80149a0:	2301      	movs	r3, #1
 80149a2:	61bb      	str	r3, [r7, #24]
 80149a4:	e002      	b.n	80149ac <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80149a6:	f04f 33ff 	mov.w	r3, #4294967295
 80149aa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80149ac:	69bb      	ldr	r3, [r7, #24]
	}
 80149ae:	4618      	mov	r0, r3
 80149b0:	3720      	adds	r7, #32
 80149b2:	46bd      	mov	sp, r7
 80149b4:	bd80      	pop	{r7, pc}

080149b6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80149b6:	b580      	push	{r7, lr}
 80149b8:	b088      	sub	sp, #32
 80149ba:	af00      	add	r7, sp, #0
 80149bc:	60f8      	str	r0, [r7, #12]
 80149be:	60b9      	str	r1, [r7, #8]
 80149c0:	607a      	str	r2, [r7, #4]
 80149c2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80149c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149c6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	009b      	lsls	r3, r3, #2
 80149cc:	461a      	mov	r2, r3
 80149ce:	21a5      	movs	r1, #165	; 0xa5
 80149d0:	f002 fcdb 	bl	801738a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80149d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80149d8:	6879      	ldr	r1, [r7, #4]
 80149da:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80149de:	440b      	add	r3, r1
 80149e0:	009b      	lsls	r3, r3, #2
 80149e2:	4413      	add	r3, r2
 80149e4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80149e6:	69bb      	ldr	r3, [r7, #24]
 80149e8:	f023 0307 	bic.w	r3, r3, #7
 80149ec:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80149ee:	69bb      	ldr	r3, [r7, #24]
 80149f0:	f003 0307 	and.w	r3, r3, #7
 80149f4:	2b00      	cmp	r3, #0
 80149f6:	d00b      	beq.n	8014a10 <prvInitialiseNewTask+0x5a>
 80149f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149fc:	b672      	cpsid	i
 80149fe:	f383 8811 	msr	BASEPRI, r3
 8014a02:	f3bf 8f6f 	isb	sy
 8014a06:	f3bf 8f4f 	dsb	sy
 8014a0a:	b662      	cpsie	i
 8014a0c:	617b      	str	r3, [r7, #20]
 8014a0e:	e7fe      	b.n	8014a0e <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8014a10:	68bb      	ldr	r3, [r7, #8]
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d01f      	beq.n	8014a56 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014a16:	2300      	movs	r3, #0
 8014a18:	61fb      	str	r3, [r7, #28]
 8014a1a:	e012      	b.n	8014a42 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8014a1c:	68ba      	ldr	r2, [r7, #8]
 8014a1e:	69fb      	ldr	r3, [r7, #28]
 8014a20:	4413      	add	r3, r2
 8014a22:	7819      	ldrb	r1, [r3, #0]
 8014a24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014a26:	69fb      	ldr	r3, [r7, #28]
 8014a28:	4413      	add	r3, r2
 8014a2a:	3334      	adds	r3, #52	; 0x34
 8014a2c:	460a      	mov	r2, r1
 8014a2e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8014a30:	68ba      	ldr	r2, [r7, #8]
 8014a32:	69fb      	ldr	r3, [r7, #28]
 8014a34:	4413      	add	r3, r2
 8014a36:	781b      	ldrb	r3, [r3, #0]
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	d006      	beq.n	8014a4a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014a3c:	69fb      	ldr	r3, [r7, #28]
 8014a3e:	3301      	adds	r3, #1
 8014a40:	61fb      	str	r3, [r7, #28]
 8014a42:	69fb      	ldr	r3, [r7, #28]
 8014a44:	2b0f      	cmp	r3, #15
 8014a46:	d9e9      	bls.n	8014a1c <prvInitialiseNewTask+0x66>
 8014a48:	e000      	b.n	8014a4c <prvInitialiseNewTask+0x96>
			{
				break;
 8014a4a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a4e:	2200      	movs	r2, #0
 8014a50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014a54:	e003      	b.n	8014a5e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8014a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a58:	2200      	movs	r2, #0
 8014a5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8014a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a60:	2b37      	cmp	r3, #55	; 0x37
 8014a62:	d901      	bls.n	8014a68 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8014a64:	2337      	movs	r3, #55	; 0x37
 8014a66:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8014a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014a6c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8014a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014a72:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8014a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a76:	2200      	movs	r2, #0
 8014a78:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8014a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a7c:	3304      	adds	r3, #4
 8014a7e:	4618      	mov	r0, r3
 8014a80:	f7fe fd5c 	bl	801353c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8014a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a86:	3318      	adds	r3, #24
 8014a88:	4618      	mov	r0, r3
 8014a8a:	f7fe fd57 	bl	801353c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8014a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014a92:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a96:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a9c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8014a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014aa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014aa2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8014aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014aa6:	2200      	movs	r2, #0
 8014aa8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014aac:	2200      	movs	r2, #0
 8014aae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8014ab2:	683a      	ldr	r2, [r7, #0]
 8014ab4:	68f9      	ldr	r1, [r7, #12]
 8014ab6:	69b8      	ldr	r0, [r7, #24]
 8014ab8:	f001 fad8 	bl	801606c <pxPortInitialiseStack>
 8014abc:	4602      	mov	r2, r0
 8014abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ac0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8014ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	d002      	beq.n	8014ace <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8014ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014aca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014acc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014ace:	bf00      	nop
 8014ad0:	3720      	adds	r7, #32
 8014ad2:	46bd      	mov	sp, r7
 8014ad4:	bd80      	pop	{r7, pc}
	...

08014ad8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8014ad8:	b580      	push	{r7, lr}
 8014ada:	b082      	sub	sp, #8
 8014adc:	af00      	add	r7, sp, #0
 8014ade:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8014ae0:	f001 fbca 	bl	8016278 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8014ae4:	4b2d      	ldr	r3, [pc, #180]	; (8014b9c <prvAddNewTaskToReadyList+0xc4>)
 8014ae6:	681b      	ldr	r3, [r3, #0]
 8014ae8:	3301      	adds	r3, #1
 8014aea:	4a2c      	ldr	r2, [pc, #176]	; (8014b9c <prvAddNewTaskToReadyList+0xc4>)
 8014aec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8014aee:	4b2c      	ldr	r3, [pc, #176]	; (8014ba0 <prvAddNewTaskToReadyList+0xc8>)
 8014af0:	681b      	ldr	r3, [r3, #0]
 8014af2:	2b00      	cmp	r3, #0
 8014af4:	d109      	bne.n	8014b0a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8014af6:	4a2a      	ldr	r2, [pc, #168]	; (8014ba0 <prvAddNewTaskToReadyList+0xc8>)
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8014afc:	4b27      	ldr	r3, [pc, #156]	; (8014b9c <prvAddNewTaskToReadyList+0xc4>)
 8014afe:	681b      	ldr	r3, [r3, #0]
 8014b00:	2b01      	cmp	r3, #1
 8014b02:	d110      	bne.n	8014b26 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8014b04:	f000 fcb0 	bl	8015468 <prvInitialiseTaskLists>
 8014b08:	e00d      	b.n	8014b26 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8014b0a:	4b26      	ldr	r3, [pc, #152]	; (8014ba4 <prvAddNewTaskToReadyList+0xcc>)
 8014b0c:	681b      	ldr	r3, [r3, #0]
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	d109      	bne.n	8014b26 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8014b12:	4b23      	ldr	r3, [pc, #140]	; (8014ba0 <prvAddNewTaskToReadyList+0xc8>)
 8014b14:	681b      	ldr	r3, [r3, #0]
 8014b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b1c:	429a      	cmp	r2, r3
 8014b1e:	d802      	bhi.n	8014b26 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8014b20:	4a1f      	ldr	r2, [pc, #124]	; (8014ba0 <prvAddNewTaskToReadyList+0xc8>)
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8014b26:	4b20      	ldr	r3, [pc, #128]	; (8014ba8 <prvAddNewTaskToReadyList+0xd0>)
 8014b28:	681b      	ldr	r3, [r3, #0]
 8014b2a:	3301      	adds	r3, #1
 8014b2c:	4a1e      	ldr	r2, [pc, #120]	; (8014ba8 <prvAddNewTaskToReadyList+0xd0>)
 8014b2e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8014b30:	4b1d      	ldr	r3, [pc, #116]	; (8014ba8 <prvAddNewTaskToReadyList+0xd0>)
 8014b32:	681a      	ldr	r2, [r3, #0]
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014b3c:	4b1b      	ldr	r3, [pc, #108]	; (8014bac <prvAddNewTaskToReadyList+0xd4>)
 8014b3e:	681b      	ldr	r3, [r3, #0]
 8014b40:	429a      	cmp	r2, r3
 8014b42:	d903      	bls.n	8014b4c <prvAddNewTaskToReadyList+0x74>
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b48:	4a18      	ldr	r2, [pc, #96]	; (8014bac <prvAddNewTaskToReadyList+0xd4>)
 8014b4a:	6013      	str	r3, [r2, #0]
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014b50:	4613      	mov	r3, r2
 8014b52:	009b      	lsls	r3, r3, #2
 8014b54:	4413      	add	r3, r2
 8014b56:	009b      	lsls	r3, r3, #2
 8014b58:	4a15      	ldr	r2, [pc, #84]	; (8014bb0 <prvAddNewTaskToReadyList+0xd8>)
 8014b5a:	441a      	add	r2, r3
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	3304      	adds	r3, #4
 8014b60:	4619      	mov	r1, r3
 8014b62:	4610      	mov	r0, r2
 8014b64:	f7fe fcf7 	bl	8013556 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8014b68:	f001 fbb8 	bl	80162dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8014b6c:	4b0d      	ldr	r3, [pc, #52]	; (8014ba4 <prvAddNewTaskToReadyList+0xcc>)
 8014b6e:	681b      	ldr	r3, [r3, #0]
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	d00e      	beq.n	8014b92 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8014b74:	4b0a      	ldr	r3, [pc, #40]	; (8014ba0 <prvAddNewTaskToReadyList+0xc8>)
 8014b76:	681b      	ldr	r3, [r3, #0]
 8014b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b7e:	429a      	cmp	r2, r3
 8014b80:	d207      	bcs.n	8014b92 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8014b82:	4b0c      	ldr	r3, [pc, #48]	; (8014bb4 <prvAddNewTaskToReadyList+0xdc>)
 8014b84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014b88:	601a      	str	r2, [r3, #0]
 8014b8a:	f3bf 8f4f 	dsb	sy
 8014b8e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014b92:	bf00      	nop
 8014b94:	3708      	adds	r7, #8
 8014b96:	46bd      	mov	sp, r7
 8014b98:	bd80      	pop	{r7, pc}
 8014b9a:	bf00      	nop
 8014b9c:	20000ef8 	.word	0x20000ef8
 8014ba0:	20000a24 	.word	0x20000a24
 8014ba4:	20000f04 	.word	0x20000f04
 8014ba8:	20000f14 	.word	0x20000f14
 8014bac:	20000f00 	.word	0x20000f00
 8014bb0:	20000a28 	.word	0x20000a28
 8014bb4:	e000ed04 	.word	0xe000ed04

08014bb8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8014bb8:	b580      	push	{r7, lr}
 8014bba:	b08a      	sub	sp, #40	; 0x28
 8014bbc:	af00      	add	r7, sp, #0
 8014bbe:	6078      	str	r0, [r7, #4]
 8014bc0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8014bc2:	2300      	movs	r3, #0
 8014bc4:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8014bc6:	687b      	ldr	r3, [r7, #4]
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	d10b      	bne.n	8014be4 <vTaskDelayUntil+0x2c>
 8014bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bd0:	b672      	cpsid	i
 8014bd2:	f383 8811 	msr	BASEPRI, r3
 8014bd6:	f3bf 8f6f 	isb	sy
 8014bda:	f3bf 8f4f 	dsb	sy
 8014bde:	b662      	cpsie	i
 8014be0:	617b      	str	r3, [r7, #20]
 8014be2:	e7fe      	b.n	8014be2 <vTaskDelayUntil+0x2a>
		configASSERT( ( xTimeIncrement > 0U ) );
 8014be4:	683b      	ldr	r3, [r7, #0]
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	d10b      	bne.n	8014c02 <vTaskDelayUntil+0x4a>
 8014bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bee:	b672      	cpsid	i
 8014bf0:	f383 8811 	msr	BASEPRI, r3
 8014bf4:	f3bf 8f6f 	isb	sy
 8014bf8:	f3bf 8f4f 	dsb	sy
 8014bfc:	b662      	cpsie	i
 8014bfe:	613b      	str	r3, [r7, #16]
 8014c00:	e7fe      	b.n	8014c00 <vTaskDelayUntil+0x48>
		configASSERT( uxSchedulerSuspended == 0 );
 8014c02:	4b2a      	ldr	r3, [pc, #168]	; (8014cac <vTaskDelayUntil+0xf4>)
 8014c04:	681b      	ldr	r3, [r3, #0]
 8014c06:	2b00      	cmp	r3, #0
 8014c08:	d00b      	beq.n	8014c22 <vTaskDelayUntil+0x6a>
 8014c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c0e:	b672      	cpsid	i
 8014c10:	f383 8811 	msr	BASEPRI, r3
 8014c14:	f3bf 8f6f 	isb	sy
 8014c18:	f3bf 8f4f 	dsb	sy
 8014c1c:	b662      	cpsie	i
 8014c1e:	60fb      	str	r3, [r7, #12]
 8014c20:	e7fe      	b.n	8014c20 <vTaskDelayUntil+0x68>

		vTaskSuspendAll();
 8014c22:	f000 f8e7 	bl	8014df4 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8014c26:	4b22      	ldr	r3, [pc, #136]	; (8014cb0 <vTaskDelayUntil+0xf8>)
 8014c28:	681b      	ldr	r3, [r3, #0]
 8014c2a:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	681b      	ldr	r3, [r3, #0]
 8014c30:	683a      	ldr	r2, [r7, #0]
 8014c32:	4413      	add	r3, r2
 8014c34:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8014c36:	687b      	ldr	r3, [r7, #4]
 8014c38:	681b      	ldr	r3, [r3, #0]
 8014c3a:	6a3a      	ldr	r2, [r7, #32]
 8014c3c:	429a      	cmp	r2, r3
 8014c3e:	d20b      	bcs.n	8014c58 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	681b      	ldr	r3, [r3, #0]
 8014c44:	69fa      	ldr	r2, [r7, #28]
 8014c46:	429a      	cmp	r2, r3
 8014c48:	d211      	bcs.n	8014c6e <vTaskDelayUntil+0xb6>
 8014c4a:	69fa      	ldr	r2, [r7, #28]
 8014c4c:	6a3b      	ldr	r3, [r7, #32]
 8014c4e:	429a      	cmp	r2, r3
 8014c50:	d90d      	bls.n	8014c6e <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8014c52:	2301      	movs	r3, #1
 8014c54:	627b      	str	r3, [r7, #36]	; 0x24
 8014c56:	e00a      	b.n	8014c6e <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	681b      	ldr	r3, [r3, #0]
 8014c5c:	69fa      	ldr	r2, [r7, #28]
 8014c5e:	429a      	cmp	r2, r3
 8014c60:	d303      	bcc.n	8014c6a <vTaskDelayUntil+0xb2>
 8014c62:	69fa      	ldr	r2, [r7, #28]
 8014c64:	6a3b      	ldr	r3, [r7, #32]
 8014c66:	429a      	cmp	r2, r3
 8014c68:	d901      	bls.n	8014c6e <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8014c6a:	2301      	movs	r3, #1
 8014c6c:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8014c6e:	687b      	ldr	r3, [r7, #4]
 8014c70:	69fa      	ldr	r2, [r7, #28]
 8014c72:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8014c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	d006      	beq.n	8014c88 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8014c7a:	69fa      	ldr	r2, [r7, #28]
 8014c7c:	6a3b      	ldr	r3, [r7, #32]
 8014c7e:	1ad3      	subs	r3, r2, r3
 8014c80:	2100      	movs	r1, #0
 8014c82:	4618      	mov	r0, r3
 8014c84:	f000 fe4a 	bl	801591c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8014c88:	f000 f8c2 	bl	8014e10 <xTaskResumeAll>
 8014c8c:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8014c8e:	69bb      	ldr	r3, [r7, #24]
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	d107      	bne.n	8014ca4 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8014c94:	4b07      	ldr	r3, [pc, #28]	; (8014cb4 <vTaskDelayUntil+0xfc>)
 8014c96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014c9a:	601a      	str	r2, [r3, #0]
 8014c9c:	f3bf 8f4f 	dsb	sy
 8014ca0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014ca4:	bf00      	nop
 8014ca6:	3728      	adds	r7, #40	; 0x28
 8014ca8:	46bd      	mov	sp, r7
 8014caa:	bd80      	pop	{r7, pc}
 8014cac:	20000f20 	.word	0x20000f20
 8014cb0:	20000efc 	.word	0x20000efc
 8014cb4:	e000ed04 	.word	0xe000ed04

08014cb8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8014cb8:	b580      	push	{r7, lr}
 8014cba:	b084      	sub	sp, #16
 8014cbc:	af00      	add	r7, sp, #0
 8014cbe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8014cc0:	2300      	movs	r3, #0
 8014cc2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	2b00      	cmp	r3, #0
 8014cc8:	d018      	beq.n	8014cfc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8014cca:	4b14      	ldr	r3, [pc, #80]	; (8014d1c <vTaskDelay+0x64>)
 8014ccc:	681b      	ldr	r3, [r3, #0]
 8014cce:	2b00      	cmp	r3, #0
 8014cd0:	d00b      	beq.n	8014cea <vTaskDelay+0x32>
 8014cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cd6:	b672      	cpsid	i
 8014cd8:	f383 8811 	msr	BASEPRI, r3
 8014cdc:	f3bf 8f6f 	isb	sy
 8014ce0:	f3bf 8f4f 	dsb	sy
 8014ce4:	b662      	cpsie	i
 8014ce6:	60bb      	str	r3, [r7, #8]
 8014ce8:	e7fe      	b.n	8014ce8 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8014cea:	f000 f883 	bl	8014df4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8014cee:	2100      	movs	r1, #0
 8014cf0:	6878      	ldr	r0, [r7, #4]
 8014cf2:	f000 fe13 	bl	801591c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8014cf6:	f000 f88b 	bl	8014e10 <xTaskResumeAll>
 8014cfa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8014cfc:	68fb      	ldr	r3, [r7, #12]
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	d107      	bne.n	8014d12 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8014d02:	4b07      	ldr	r3, [pc, #28]	; (8014d20 <vTaskDelay+0x68>)
 8014d04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014d08:	601a      	str	r2, [r3, #0]
 8014d0a:	f3bf 8f4f 	dsb	sy
 8014d0e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014d12:	bf00      	nop
 8014d14:	3710      	adds	r7, #16
 8014d16:	46bd      	mov	sp, r7
 8014d18:	bd80      	pop	{r7, pc}
 8014d1a:	bf00      	nop
 8014d1c:	20000f20 	.word	0x20000f20
 8014d20:	e000ed04 	.word	0xe000ed04

08014d24 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8014d24:	b580      	push	{r7, lr}
 8014d26:	b08a      	sub	sp, #40	; 0x28
 8014d28:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8014d2a:	2300      	movs	r3, #0
 8014d2c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8014d2e:	2300      	movs	r3, #0
 8014d30:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8014d32:	463a      	mov	r2, r7
 8014d34:	1d39      	adds	r1, r7, #4
 8014d36:	f107 0308 	add.w	r3, r7, #8
 8014d3a:	4618      	mov	r0, r3
 8014d3c:	f7fe fbaa 	bl	8013494 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8014d40:	6839      	ldr	r1, [r7, #0]
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	68ba      	ldr	r2, [r7, #8]
 8014d46:	9202      	str	r2, [sp, #8]
 8014d48:	9301      	str	r3, [sp, #4]
 8014d4a:	2300      	movs	r3, #0
 8014d4c:	9300      	str	r3, [sp, #0]
 8014d4e:	2300      	movs	r3, #0
 8014d50:	460a      	mov	r2, r1
 8014d52:	4922      	ldr	r1, [pc, #136]	; (8014ddc <vTaskStartScheduler+0xb8>)
 8014d54:	4822      	ldr	r0, [pc, #136]	; (8014de0 <vTaskStartScheduler+0xbc>)
 8014d56:	f7ff fd89 	bl	801486c <xTaskCreateStatic>
 8014d5a:	4602      	mov	r2, r0
 8014d5c:	4b21      	ldr	r3, [pc, #132]	; (8014de4 <vTaskStartScheduler+0xc0>)
 8014d5e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8014d60:	4b20      	ldr	r3, [pc, #128]	; (8014de4 <vTaskStartScheduler+0xc0>)
 8014d62:	681b      	ldr	r3, [r3, #0]
 8014d64:	2b00      	cmp	r3, #0
 8014d66:	d002      	beq.n	8014d6e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8014d68:	2301      	movs	r3, #1
 8014d6a:	617b      	str	r3, [r7, #20]
 8014d6c:	e001      	b.n	8014d72 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8014d6e:	2300      	movs	r3, #0
 8014d70:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8014d72:	697b      	ldr	r3, [r7, #20]
 8014d74:	2b01      	cmp	r3, #1
 8014d76:	d102      	bne.n	8014d7e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8014d78:	f000 fe24 	bl	80159c4 <xTimerCreateTimerTask>
 8014d7c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8014d7e:	697b      	ldr	r3, [r7, #20]
 8014d80:	2b01      	cmp	r3, #1
 8014d82:	d117      	bne.n	8014db4 <vTaskStartScheduler+0x90>
 8014d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d88:	b672      	cpsid	i
 8014d8a:	f383 8811 	msr	BASEPRI, r3
 8014d8e:	f3bf 8f6f 	isb	sy
 8014d92:	f3bf 8f4f 	dsb	sy
 8014d96:	b662      	cpsie	i
 8014d98:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8014d9a:	4b13      	ldr	r3, [pc, #76]	; (8014de8 <vTaskStartScheduler+0xc4>)
 8014d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8014da0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8014da2:	4b12      	ldr	r3, [pc, #72]	; (8014dec <vTaskStartScheduler+0xc8>)
 8014da4:	2201      	movs	r2, #1
 8014da6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8014da8:	4b11      	ldr	r3, [pc, #68]	; (8014df0 <vTaskStartScheduler+0xcc>)
 8014daa:	2200      	movs	r2, #0
 8014dac:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8014dae:	f001 f9e7 	bl	8016180 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8014db2:	e00f      	b.n	8014dd4 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8014db4:	697b      	ldr	r3, [r7, #20]
 8014db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014dba:	d10b      	bne.n	8014dd4 <vTaskStartScheduler+0xb0>
 8014dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014dc0:	b672      	cpsid	i
 8014dc2:	f383 8811 	msr	BASEPRI, r3
 8014dc6:	f3bf 8f6f 	isb	sy
 8014dca:	f3bf 8f4f 	dsb	sy
 8014dce:	b662      	cpsie	i
 8014dd0:	60fb      	str	r3, [r7, #12]
 8014dd2:	e7fe      	b.n	8014dd2 <vTaskStartScheduler+0xae>
}
 8014dd4:	bf00      	nop
 8014dd6:	3718      	adds	r7, #24
 8014dd8:	46bd      	mov	sp, r7
 8014dda:	bd80      	pop	{r7, pc}
 8014ddc:	0801a1c8 	.word	0x0801a1c8
 8014de0:	08015439 	.word	0x08015439
 8014de4:	20000f1c 	.word	0x20000f1c
 8014de8:	20000f18 	.word	0x20000f18
 8014dec:	20000f04 	.word	0x20000f04
 8014df0:	20000efc 	.word	0x20000efc

08014df4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8014df4:	b480      	push	{r7}
 8014df6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8014df8:	4b04      	ldr	r3, [pc, #16]	; (8014e0c <vTaskSuspendAll+0x18>)
 8014dfa:	681b      	ldr	r3, [r3, #0]
 8014dfc:	3301      	adds	r3, #1
 8014dfe:	4a03      	ldr	r2, [pc, #12]	; (8014e0c <vTaskSuspendAll+0x18>)
 8014e00:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8014e02:	bf00      	nop
 8014e04:	46bd      	mov	sp, r7
 8014e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e0a:	4770      	bx	lr
 8014e0c:	20000f20 	.word	0x20000f20

08014e10 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8014e10:	b580      	push	{r7, lr}
 8014e12:	b084      	sub	sp, #16
 8014e14:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8014e16:	2300      	movs	r3, #0
 8014e18:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8014e1a:	2300      	movs	r3, #0
 8014e1c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8014e1e:	4b42      	ldr	r3, [pc, #264]	; (8014f28 <xTaskResumeAll+0x118>)
 8014e20:	681b      	ldr	r3, [r3, #0]
 8014e22:	2b00      	cmp	r3, #0
 8014e24:	d10b      	bne.n	8014e3e <xTaskResumeAll+0x2e>
 8014e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e2a:	b672      	cpsid	i
 8014e2c:	f383 8811 	msr	BASEPRI, r3
 8014e30:	f3bf 8f6f 	isb	sy
 8014e34:	f3bf 8f4f 	dsb	sy
 8014e38:	b662      	cpsie	i
 8014e3a:	603b      	str	r3, [r7, #0]
 8014e3c:	e7fe      	b.n	8014e3c <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8014e3e:	f001 fa1b 	bl	8016278 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8014e42:	4b39      	ldr	r3, [pc, #228]	; (8014f28 <xTaskResumeAll+0x118>)
 8014e44:	681b      	ldr	r3, [r3, #0]
 8014e46:	3b01      	subs	r3, #1
 8014e48:	4a37      	ldr	r2, [pc, #220]	; (8014f28 <xTaskResumeAll+0x118>)
 8014e4a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014e4c:	4b36      	ldr	r3, [pc, #216]	; (8014f28 <xTaskResumeAll+0x118>)
 8014e4e:	681b      	ldr	r3, [r3, #0]
 8014e50:	2b00      	cmp	r3, #0
 8014e52:	d162      	bne.n	8014f1a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8014e54:	4b35      	ldr	r3, [pc, #212]	; (8014f2c <xTaskResumeAll+0x11c>)
 8014e56:	681b      	ldr	r3, [r3, #0]
 8014e58:	2b00      	cmp	r3, #0
 8014e5a:	d05e      	beq.n	8014f1a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014e5c:	e02f      	b.n	8014ebe <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014e5e:	4b34      	ldr	r3, [pc, #208]	; (8014f30 <xTaskResumeAll+0x120>)
 8014e60:	68db      	ldr	r3, [r3, #12]
 8014e62:	68db      	ldr	r3, [r3, #12]
 8014e64:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014e66:	68fb      	ldr	r3, [r7, #12]
 8014e68:	3318      	adds	r3, #24
 8014e6a:	4618      	mov	r0, r3
 8014e6c:	f7fe fbd0 	bl	8013610 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014e70:	68fb      	ldr	r3, [r7, #12]
 8014e72:	3304      	adds	r3, #4
 8014e74:	4618      	mov	r0, r3
 8014e76:	f7fe fbcb 	bl	8013610 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014e7a:	68fb      	ldr	r3, [r7, #12]
 8014e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e7e:	4b2d      	ldr	r3, [pc, #180]	; (8014f34 <xTaskResumeAll+0x124>)
 8014e80:	681b      	ldr	r3, [r3, #0]
 8014e82:	429a      	cmp	r2, r3
 8014e84:	d903      	bls.n	8014e8e <xTaskResumeAll+0x7e>
 8014e86:	68fb      	ldr	r3, [r7, #12]
 8014e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e8a:	4a2a      	ldr	r2, [pc, #168]	; (8014f34 <xTaskResumeAll+0x124>)
 8014e8c:	6013      	str	r3, [r2, #0]
 8014e8e:	68fb      	ldr	r3, [r7, #12]
 8014e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e92:	4613      	mov	r3, r2
 8014e94:	009b      	lsls	r3, r3, #2
 8014e96:	4413      	add	r3, r2
 8014e98:	009b      	lsls	r3, r3, #2
 8014e9a:	4a27      	ldr	r2, [pc, #156]	; (8014f38 <xTaskResumeAll+0x128>)
 8014e9c:	441a      	add	r2, r3
 8014e9e:	68fb      	ldr	r3, [r7, #12]
 8014ea0:	3304      	adds	r3, #4
 8014ea2:	4619      	mov	r1, r3
 8014ea4:	4610      	mov	r0, r2
 8014ea6:	f7fe fb56 	bl	8013556 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014eaa:	68fb      	ldr	r3, [r7, #12]
 8014eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014eae:	4b23      	ldr	r3, [pc, #140]	; (8014f3c <xTaskResumeAll+0x12c>)
 8014eb0:	681b      	ldr	r3, [r3, #0]
 8014eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014eb4:	429a      	cmp	r2, r3
 8014eb6:	d302      	bcc.n	8014ebe <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8014eb8:	4b21      	ldr	r3, [pc, #132]	; (8014f40 <xTaskResumeAll+0x130>)
 8014eba:	2201      	movs	r2, #1
 8014ebc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014ebe:	4b1c      	ldr	r3, [pc, #112]	; (8014f30 <xTaskResumeAll+0x120>)
 8014ec0:	681b      	ldr	r3, [r3, #0]
 8014ec2:	2b00      	cmp	r3, #0
 8014ec4:	d1cb      	bne.n	8014e5e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8014ec6:	68fb      	ldr	r3, [r7, #12]
 8014ec8:	2b00      	cmp	r3, #0
 8014eca:	d001      	beq.n	8014ed0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8014ecc:	f000 fb68 	bl	80155a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8014ed0:	4b1c      	ldr	r3, [pc, #112]	; (8014f44 <xTaskResumeAll+0x134>)
 8014ed2:	681b      	ldr	r3, [r3, #0]
 8014ed4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	2b00      	cmp	r3, #0
 8014eda:	d010      	beq.n	8014efe <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8014edc:	f000 f858 	bl	8014f90 <xTaskIncrementTick>
 8014ee0:	4603      	mov	r3, r0
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	d002      	beq.n	8014eec <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8014ee6:	4b16      	ldr	r3, [pc, #88]	; (8014f40 <xTaskResumeAll+0x130>)
 8014ee8:	2201      	movs	r2, #1
 8014eea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	3b01      	subs	r3, #1
 8014ef0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	d1f1      	bne.n	8014edc <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8014ef8:	4b12      	ldr	r3, [pc, #72]	; (8014f44 <xTaskResumeAll+0x134>)
 8014efa:	2200      	movs	r2, #0
 8014efc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8014efe:	4b10      	ldr	r3, [pc, #64]	; (8014f40 <xTaskResumeAll+0x130>)
 8014f00:	681b      	ldr	r3, [r3, #0]
 8014f02:	2b00      	cmp	r3, #0
 8014f04:	d009      	beq.n	8014f1a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8014f06:	2301      	movs	r3, #1
 8014f08:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8014f0a:	4b0f      	ldr	r3, [pc, #60]	; (8014f48 <xTaskResumeAll+0x138>)
 8014f0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014f10:	601a      	str	r2, [r3, #0]
 8014f12:	f3bf 8f4f 	dsb	sy
 8014f16:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014f1a:	f001 f9df 	bl	80162dc <vPortExitCritical>

	return xAlreadyYielded;
 8014f1e:	68bb      	ldr	r3, [r7, #8]
}
 8014f20:	4618      	mov	r0, r3
 8014f22:	3710      	adds	r7, #16
 8014f24:	46bd      	mov	sp, r7
 8014f26:	bd80      	pop	{r7, pc}
 8014f28:	20000f20 	.word	0x20000f20
 8014f2c:	20000ef8 	.word	0x20000ef8
 8014f30:	20000eb8 	.word	0x20000eb8
 8014f34:	20000f00 	.word	0x20000f00
 8014f38:	20000a28 	.word	0x20000a28
 8014f3c:	20000a24 	.word	0x20000a24
 8014f40:	20000f0c 	.word	0x20000f0c
 8014f44:	20000f08 	.word	0x20000f08
 8014f48:	e000ed04 	.word	0xe000ed04

08014f4c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8014f4c:	b480      	push	{r7}
 8014f4e:	b083      	sub	sp, #12
 8014f50:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8014f52:	4b05      	ldr	r3, [pc, #20]	; (8014f68 <xTaskGetTickCount+0x1c>)
 8014f54:	681b      	ldr	r3, [r3, #0]
 8014f56:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8014f58:	687b      	ldr	r3, [r7, #4]
}
 8014f5a:	4618      	mov	r0, r3
 8014f5c:	370c      	adds	r7, #12
 8014f5e:	46bd      	mov	sp, r7
 8014f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f64:	4770      	bx	lr
 8014f66:	bf00      	nop
 8014f68:	20000efc 	.word	0x20000efc

08014f6c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8014f6c:	b580      	push	{r7, lr}
 8014f6e:	b082      	sub	sp, #8
 8014f70:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014f72:	f001 fa61 	bl	8016438 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8014f76:	2300      	movs	r3, #0
 8014f78:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8014f7a:	4b04      	ldr	r3, [pc, #16]	; (8014f8c <xTaskGetTickCountFromISR+0x20>)
 8014f7c:	681b      	ldr	r3, [r3, #0]
 8014f7e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014f80:	683b      	ldr	r3, [r7, #0]
}
 8014f82:	4618      	mov	r0, r3
 8014f84:	3708      	adds	r7, #8
 8014f86:	46bd      	mov	sp, r7
 8014f88:	bd80      	pop	{r7, pc}
 8014f8a:	bf00      	nop
 8014f8c:	20000efc 	.word	0x20000efc

08014f90 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014f90:	b580      	push	{r7, lr}
 8014f92:	b086      	sub	sp, #24
 8014f94:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8014f96:	2300      	movs	r3, #0
 8014f98:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014f9a:	4b4f      	ldr	r3, [pc, #316]	; (80150d8 <xTaskIncrementTick+0x148>)
 8014f9c:	681b      	ldr	r3, [r3, #0]
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	f040 808a 	bne.w	80150b8 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8014fa4:	4b4d      	ldr	r3, [pc, #308]	; (80150dc <xTaskIncrementTick+0x14c>)
 8014fa6:	681b      	ldr	r3, [r3, #0]
 8014fa8:	3301      	adds	r3, #1
 8014faa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8014fac:	4a4b      	ldr	r2, [pc, #300]	; (80150dc <xTaskIncrementTick+0x14c>)
 8014fae:	693b      	ldr	r3, [r7, #16]
 8014fb0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8014fb2:	693b      	ldr	r3, [r7, #16]
 8014fb4:	2b00      	cmp	r3, #0
 8014fb6:	d121      	bne.n	8014ffc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8014fb8:	4b49      	ldr	r3, [pc, #292]	; (80150e0 <xTaskIncrementTick+0x150>)
 8014fba:	681b      	ldr	r3, [r3, #0]
 8014fbc:	681b      	ldr	r3, [r3, #0]
 8014fbe:	2b00      	cmp	r3, #0
 8014fc0:	d00b      	beq.n	8014fda <xTaskIncrementTick+0x4a>
 8014fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fc6:	b672      	cpsid	i
 8014fc8:	f383 8811 	msr	BASEPRI, r3
 8014fcc:	f3bf 8f6f 	isb	sy
 8014fd0:	f3bf 8f4f 	dsb	sy
 8014fd4:	b662      	cpsie	i
 8014fd6:	603b      	str	r3, [r7, #0]
 8014fd8:	e7fe      	b.n	8014fd8 <xTaskIncrementTick+0x48>
 8014fda:	4b41      	ldr	r3, [pc, #260]	; (80150e0 <xTaskIncrementTick+0x150>)
 8014fdc:	681b      	ldr	r3, [r3, #0]
 8014fde:	60fb      	str	r3, [r7, #12]
 8014fe0:	4b40      	ldr	r3, [pc, #256]	; (80150e4 <xTaskIncrementTick+0x154>)
 8014fe2:	681b      	ldr	r3, [r3, #0]
 8014fe4:	4a3e      	ldr	r2, [pc, #248]	; (80150e0 <xTaskIncrementTick+0x150>)
 8014fe6:	6013      	str	r3, [r2, #0]
 8014fe8:	4a3e      	ldr	r2, [pc, #248]	; (80150e4 <xTaskIncrementTick+0x154>)
 8014fea:	68fb      	ldr	r3, [r7, #12]
 8014fec:	6013      	str	r3, [r2, #0]
 8014fee:	4b3e      	ldr	r3, [pc, #248]	; (80150e8 <xTaskIncrementTick+0x158>)
 8014ff0:	681b      	ldr	r3, [r3, #0]
 8014ff2:	3301      	adds	r3, #1
 8014ff4:	4a3c      	ldr	r2, [pc, #240]	; (80150e8 <xTaskIncrementTick+0x158>)
 8014ff6:	6013      	str	r3, [r2, #0]
 8014ff8:	f000 fad2 	bl	80155a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8014ffc:	4b3b      	ldr	r3, [pc, #236]	; (80150ec <xTaskIncrementTick+0x15c>)
 8014ffe:	681b      	ldr	r3, [r3, #0]
 8015000:	693a      	ldr	r2, [r7, #16]
 8015002:	429a      	cmp	r2, r3
 8015004:	d349      	bcc.n	801509a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015006:	4b36      	ldr	r3, [pc, #216]	; (80150e0 <xTaskIncrementTick+0x150>)
 8015008:	681b      	ldr	r3, [r3, #0]
 801500a:	681b      	ldr	r3, [r3, #0]
 801500c:	2b00      	cmp	r3, #0
 801500e:	d104      	bne.n	801501a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015010:	4b36      	ldr	r3, [pc, #216]	; (80150ec <xTaskIncrementTick+0x15c>)
 8015012:	f04f 32ff 	mov.w	r2, #4294967295
 8015016:	601a      	str	r2, [r3, #0]
					break;
 8015018:	e03f      	b.n	801509a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801501a:	4b31      	ldr	r3, [pc, #196]	; (80150e0 <xTaskIncrementTick+0x150>)
 801501c:	681b      	ldr	r3, [r3, #0]
 801501e:	68db      	ldr	r3, [r3, #12]
 8015020:	68db      	ldr	r3, [r3, #12]
 8015022:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8015024:	68bb      	ldr	r3, [r7, #8]
 8015026:	685b      	ldr	r3, [r3, #4]
 8015028:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801502a:	693a      	ldr	r2, [r7, #16]
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	429a      	cmp	r2, r3
 8015030:	d203      	bcs.n	801503a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8015032:	4a2e      	ldr	r2, [pc, #184]	; (80150ec <xTaskIncrementTick+0x15c>)
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8015038:	e02f      	b.n	801509a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801503a:	68bb      	ldr	r3, [r7, #8]
 801503c:	3304      	adds	r3, #4
 801503e:	4618      	mov	r0, r3
 8015040:	f7fe fae6 	bl	8013610 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8015044:	68bb      	ldr	r3, [r7, #8]
 8015046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015048:	2b00      	cmp	r3, #0
 801504a:	d004      	beq.n	8015056 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801504c:	68bb      	ldr	r3, [r7, #8]
 801504e:	3318      	adds	r3, #24
 8015050:	4618      	mov	r0, r3
 8015052:	f7fe fadd 	bl	8013610 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8015056:	68bb      	ldr	r3, [r7, #8]
 8015058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801505a:	4b25      	ldr	r3, [pc, #148]	; (80150f0 <xTaskIncrementTick+0x160>)
 801505c:	681b      	ldr	r3, [r3, #0]
 801505e:	429a      	cmp	r2, r3
 8015060:	d903      	bls.n	801506a <xTaskIncrementTick+0xda>
 8015062:	68bb      	ldr	r3, [r7, #8]
 8015064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015066:	4a22      	ldr	r2, [pc, #136]	; (80150f0 <xTaskIncrementTick+0x160>)
 8015068:	6013      	str	r3, [r2, #0]
 801506a:	68bb      	ldr	r3, [r7, #8]
 801506c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801506e:	4613      	mov	r3, r2
 8015070:	009b      	lsls	r3, r3, #2
 8015072:	4413      	add	r3, r2
 8015074:	009b      	lsls	r3, r3, #2
 8015076:	4a1f      	ldr	r2, [pc, #124]	; (80150f4 <xTaskIncrementTick+0x164>)
 8015078:	441a      	add	r2, r3
 801507a:	68bb      	ldr	r3, [r7, #8]
 801507c:	3304      	adds	r3, #4
 801507e:	4619      	mov	r1, r3
 8015080:	4610      	mov	r0, r2
 8015082:	f7fe fa68 	bl	8013556 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015086:	68bb      	ldr	r3, [r7, #8]
 8015088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801508a:	4b1b      	ldr	r3, [pc, #108]	; (80150f8 <xTaskIncrementTick+0x168>)
 801508c:	681b      	ldr	r3, [r3, #0]
 801508e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015090:	429a      	cmp	r2, r3
 8015092:	d3b8      	bcc.n	8015006 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8015094:	2301      	movs	r3, #1
 8015096:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015098:	e7b5      	b.n	8015006 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801509a:	4b17      	ldr	r3, [pc, #92]	; (80150f8 <xTaskIncrementTick+0x168>)
 801509c:	681b      	ldr	r3, [r3, #0]
 801509e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80150a0:	4914      	ldr	r1, [pc, #80]	; (80150f4 <xTaskIncrementTick+0x164>)
 80150a2:	4613      	mov	r3, r2
 80150a4:	009b      	lsls	r3, r3, #2
 80150a6:	4413      	add	r3, r2
 80150a8:	009b      	lsls	r3, r3, #2
 80150aa:	440b      	add	r3, r1
 80150ac:	681b      	ldr	r3, [r3, #0]
 80150ae:	2b01      	cmp	r3, #1
 80150b0:	d907      	bls.n	80150c2 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 80150b2:	2301      	movs	r3, #1
 80150b4:	617b      	str	r3, [r7, #20]
 80150b6:	e004      	b.n	80150c2 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80150b8:	4b10      	ldr	r3, [pc, #64]	; (80150fc <xTaskIncrementTick+0x16c>)
 80150ba:	681b      	ldr	r3, [r3, #0]
 80150bc:	3301      	adds	r3, #1
 80150be:	4a0f      	ldr	r2, [pc, #60]	; (80150fc <xTaskIncrementTick+0x16c>)
 80150c0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80150c2:	4b0f      	ldr	r3, [pc, #60]	; (8015100 <xTaskIncrementTick+0x170>)
 80150c4:	681b      	ldr	r3, [r3, #0]
 80150c6:	2b00      	cmp	r3, #0
 80150c8:	d001      	beq.n	80150ce <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 80150ca:	2301      	movs	r3, #1
 80150cc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80150ce:	697b      	ldr	r3, [r7, #20]
}
 80150d0:	4618      	mov	r0, r3
 80150d2:	3718      	adds	r7, #24
 80150d4:	46bd      	mov	sp, r7
 80150d6:	bd80      	pop	{r7, pc}
 80150d8:	20000f20 	.word	0x20000f20
 80150dc:	20000efc 	.word	0x20000efc
 80150e0:	20000eb0 	.word	0x20000eb0
 80150e4:	20000eb4 	.word	0x20000eb4
 80150e8:	20000f10 	.word	0x20000f10
 80150ec:	20000f18 	.word	0x20000f18
 80150f0:	20000f00 	.word	0x20000f00
 80150f4:	20000a28 	.word	0x20000a28
 80150f8:	20000a24 	.word	0x20000a24
 80150fc:	20000f08 	.word	0x20000f08
 8015100:	20000f0c 	.word	0x20000f0c

08015104 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8015104:	b480      	push	{r7}
 8015106:	b085      	sub	sp, #20
 8015108:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801510a:	4b28      	ldr	r3, [pc, #160]	; (80151ac <vTaskSwitchContext+0xa8>)
 801510c:	681b      	ldr	r3, [r3, #0]
 801510e:	2b00      	cmp	r3, #0
 8015110:	d003      	beq.n	801511a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8015112:	4b27      	ldr	r3, [pc, #156]	; (80151b0 <vTaskSwitchContext+0xac>)
 8015114:	2201      	movs	r2, #1
 8015116:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8015118:	e042      	b.n	80151a0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 801511a:	4b25      	ldr	r3, [pc, #148]	; (80151b0 <vTaskSwitchContext+0xac>)
 801511c:	2200      	movs	r2, #0
 801511e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015120:	4b24      	ldr	r3, [pc, #144]	; (80151b4 <vTaskSwitchContext+0xb0>)
 8015122:	681b      	ldr	r3, [r3, #0]
 8015124:	60fb      	str	r3, [r7, #12]
 8015126:	e011      	b.n	801514c <vTaskSwitchContext+0x48>
 8015128:	68fb      	ldr	r3, [r7, #12]
 801512a:	2b00      	cmp	r3, #0
 801512c:	d10b      	bne.n	8015146 <vTaskSwitchContext+0x42>
 801512e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015132:	b672      	cpsid	i
 8015134:	f383 8811 	msr	BASEPRI, r3
 8015138:	f3bf 8f6f 	isb	sy
 801513c:	f3bf 8f4f 	dsb	sy
 8015140:	b662      	cpsie	i
 8015142:	607b      	str	r3, [r7, #4]
 8015144:	e7fe      	b.n	8015144 <vTaskSwitchContext+0x40>
 8015146:	68fb      	ldr	r3, [r7, #12]
 8015148:	3b01      	subs	r3, #1
 801514a:	60fb      	str	r3, [r7, #12]
 801514c:	491a      	ldr	r1, [pc, #104]	; (80151b8 <vTaskSwitchContext+0xb4>)
 801514e:	68fa      	ldr	r2, [r7, #12]
 8015150:	4613      	mov	r3, r2
 8015152:	009b      	lsls	r3, r3, #2
 8015154:	4413      	add	r3, r2
 8015156:	009b      	lsls	r3, r3, #2
 8015158:	440b      	add	r3, r1
 801515a:	681b      	ldr	r3, [r3, #0]
 801515c:	2b00      	cmp	r3, #0
 801515e:	d0e3      	beq.n	8015128 <vTaskSwitchContext+0x24>
 8015160:	68fa      	ldr	r2, [r7, #12]
 8015162:	4613      	mov	r3, r2
 8015164:	009b      	lsls	r3, r3, #2
 8015166:	4413      	add	r3, r2
 8015168:	009b      	lsls	r3, r3, #2
 801516a:	4a13      	ldr	r2, [pc, #76]	; (80151b8 <vTaskSwitchContext+0xb4>)
 801516c:	4413      	add	r3, r2
 801516e:	60bb      	str	r3, [r7, #8]
 8015170:	68bb      	ldr	r3, [r7, #8]
 8015172:	685b      	ldr	r3, [r3, #4]
 8015174:	685a      	ldr	r2, [r3, #4]
 8015176:	68bb      	ldr	r3, [r7, #8]
 8015178:	605a      	str	r2, [r3, #4]
 801517a:	68bb      	ldr	r3, [r7, #8]
 801517c:	685a      	ldr	r2, [r3, #4]
 801517e:	68bb      	ldr	r3, [r7, #8]
 8015180:	3308      	adds	r3, #8
 8015182:	429a      	cmp	r2, r3
 8015184:	d104      	bne.n	8015190 <vTaskSwitchContext+0x8c>
 8015186:	68bb      	ldr	r3, [r7, #8]
 8015188:	685b      	ldr	r3, [r3, #4]
 801518a:	685a      	ldr	r2, [r3, #4]
 801518c:	68bb      	ldr	r3, [r7, #8]
 801518e:	605a      	str	r2, [r3, #4]
 8015190:	68bb      	ldr	r3, [r7, #8]
 8015192:	685b      	ldr	r3, [r3, #4]
 8015194:	68db      	ldr	r3, [r3, #12]
 8015196:	4a09      	ldr	r2, [pc, #36]	; (80151bc <vTaskSwitchContext+0xb8>)
 8015198:	6013      	str	r3, [r2, #0]
 801519a:	4a06      	ldr	r2, [pc, #24]	; (80151b4 <vTaskSwitchContext+0xb0>)
 801519c:	68fb      	ldr	r3, [r7, #12]
 801519e:	6013      	str	r3, [r2, #0]
}
 80151a0:	bf00      	nop
 80151a2:	3714      	adds	r7, #20
 80151a4:	46bd      	mov	sp, r7
 80151a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151aa:	4770      	bx	lr
 80151ac:	20000f20 	.word	0x20000f20
 80151b0:	20000f0c 	.word	0x20000f0c
 80151b4:	20000f00 	.word	0x20000f00
 80151b8:	20000a28 	.word	0x20000a28
 80151bc:	20000a24 	.word	0x20000a24

080151c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80151c0:	b580      	push	{r7, lr}
 80151c2:	b084      	sub	sp, #16
 80151c4:	af00      	add	r7, sp, #0
 80151c6:	6078      	str	r0, [r7, #4]
 80151c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	d10b      	bne.n	80151e8 <vTaskPlaceOnEventList+0x28>
 80151d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151d4:	b672      	cpsid	i
 80151d6:	f383 8811 	msr	BASEPRI, r3
 80151da:	f3bf 8f6f 	isb	sy
 80151de:	f3bf 8f4f 	dsb	sy
 80151e2:	b662      	cpsie	i
 80151e4:	60fb      	str	r3, [r7, #12]
 80151e6:	e7fe      	b.n	80151e6 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80151e8:	4b07      	ldr	r3, [pc, #28]	; (8015208 <vTaskPlaceOnEventList+0x48>)
 80151ea:	681b      	ldr	r3, [r3, #0]
 80151ec:	3318      	adds	r3, #24
 80151ee:	4619      	mov	r1, r3
 80151f0:	6878      	ldr	r0, [r7, #4]
 80151f2:	f7fe f9d4 	bl	801359e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80151f6:	2101      	movs	r1, #1
 80151f8:	6838      	ldr	r0, [r7, #0]
 80151fa:	f000 fb8f 	bl	801591c <prvAddCurrentTaskToDelayedList>
}
 80151fe:	bf00      	nop
 8015200:	3710      	adds	r7, #16
 8015202:	46bd      	mov	sp, r7
 8015204:	bd80      	pop	{r7, pc}
 8015206:	bf00      	nop
 8015208:	20000a24 	.word	0x20000a24

0801520c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801520c:	b580      	push	{r7, lr}
 801520e:	b086      	sub	sp, #24
 8015210:	af00      	add	r7, sp, #0
 8015212:	60f8      	str	r0, [r7, #12]
 8015214:	60b9      	str	r1, [r7, #8]
 8015216:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8015218:	68fb      	ldr	r3, [r7, #12]
 801521a:	2b00      	cmp	r3, #0
 801521c:	d10b      	bne.n	8015236 <vTaskPlaceOnEventListRestricted+0x2a>
 801521e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015222:	b672      	cpsid	i
 8015224:	f383 8811 	msr	BASEPRI, r3
 8015228:	f3bf 8f6f 	isb	sy
 801522c:	f3bf 8f4f 	dsb	sy
 8015230:	b662      	cpsie	i
 8015232:	617b      	str	r3, [r7, #20]
 8015234:	e7fe      	b.n	8015234 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015236:	4b0a      	ldr	r3, [pc, #40]	; (8015260 <vTaskPlaceOnEventListRestricted+0x54>)
 8015238:	681b      	ldr	r3, [r3, #0]
 801523a:	3318      	adds	r3, #24
 801523c:	4619      	mov	r1, r3
 801523e:	68f8      	ldr	r0, [r7, #12]
 8015240:	f7fe f989 	bl	8013556 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	2b00      	cmp	r3, #0
 8015248:	d002      	beq.n	8015250 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 801524a:	f04f 33ff 	mov.w	r3, #4294967295
 801524e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8015250:	6879      	ldr	r1, [r7, #4]
 8015252:	68b8      	ldr	r0, [r7, #8]
 8015254:	f000 fb62 	bl	801591c <prvAddCurrentTaskToDelayedList>
	}
 8015258:	bf00      	nop
 801525a:	3718      	adds	r7, #24
 801525c:	46bd      	mov	sp, r7
 801525e:	bd80      	pop	{r7, pc}
 8015260:	20000a24 	.word	0x20000a24

08015264 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8015264:	b580      	push	{r7, lr}
 8015266:	b086      	sub	sp, #24
 8015268:	af00      	add	r7, sp, #0
 801526a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	68db      	ldr	r3, [r3, #12]
 8015270:	68db      	ldr	r3, [r3, #12]
 8015272:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8015274:	693b      	ldr	r3, [r7, #16]
 8015276:	2b00      	cmp	r3, #0
 8015278:	d10b      	bne.n	8015292 <xTaskRemoveFromEventList+0x2e>
 801527a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801527e:	b672      	cpsid	i
 8015280:	f383 8811 	msr	BASEPRI, r3
 8015284:	f3bf 8f6f 	isb	sy
 8015288:	f3bf 8f4f 	dsb	sy
 801528c:	b662      	cpsie	i
 801528e:	60fb      	str	r3, [r7, #12]
 8015290:	e7fe      	b.n	8015290 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8015292:	693b      	ldr	r3, [r7, #16]
 8015294:	3318      	adds	r3, #24
 8015296:	4618      	mov	r0, r3
 8015298:	f7fe f9ba 	bl	8013610 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801529c:	4b1d      	ldr	r3, [pc, #116]	; (8015314 <xTaskRemoveFromEventList+0xb0>)
 801529e:	681b      	ldr	r3, [r3, #0]
 80152a0:	2b00      	cmp	r3, #0
 80152a2:	d11d      	bne.n	80152e0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80152a4:	693b      	ldr	r3, [r7, #16]
 80152a6:	3304      	adds	r3, #4
 80152a8:	4618      	mov	r0, r3
 80152aa:	f7fe f9b1 	bl	8013610 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80152ae:	693b      	ldr	r3, [r7, #16]
 80152b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80152b2:	4b19      	ldr	r3, [pc, #100]	; (8015318 <xTaskRemoveFromEventList+0xb4>)
 80152b4:	681b      	ldr	r3, [r3, #0]
 80152b6:	429a      	cmp	r2, r3
 80152b8:	d903      	bls.n	80152c2 <xTaskRemoveFromEventList+0x5e>
 80152ba:	693b      	ldr	r3, [r7, #16]
 80152bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80152be:	4a16      	ldr	r2, [pc, #88]	; (8015318 <xTaskRemoveFromEventList+0xb4>)
 80152c0:	6013      	str	r3, [r2, #0]
 80152c2:	693b      	ldr	r3, [r7, #16]
 80152c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80152c6:	4613      	mov	r3, r2
 80152c8:	009b      	lsls	r3, r3, #2
 80152ca:	4413      	add	r3, r2
 80152cc:	009b      	lsls	r3, r3, #2
 80152ce:	4a13      	ldr	r2, [pc, #76]	; (801531c <xTaskRemoveFromEventList+0xb8>)
 80152d0:	441a      	add	r2, r3
 80152d2:	693b      	ldr	r3, [r7, #16]
 80152d4:	3304      	adds	r3, #4
 80152d6:	4619      	mov	r1, r3
 80152d8:	4610      	mov	r0, r2
 80152da:	f7fe f93c 	bl	8013556 <vListInsertEnd>
 80152de:	e005      	b.n	80152ec <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80152e0:	693b      	ldr	r3, [r7, #16]
 80152e2:	3318      	adds	r3, #24
 80152e4:	4619      	mov	r1, r3
 80152e6:	480e      	ldr	r0, [pc, #56]	; (8015320 <xTaskRemoveFromEventList+0xbc>)
 80152e8:	f7fe f935 	bl	8013556 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80152ec:	693b      	ldr	r3, [r7, #16]
 80152ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80152f0:	4b0c      	ldr	r3, [pc, #48]	; (8015324 <xTaskRemoveFromEventList+0xc0>)
 80152f2:	681b      	ldr	r3, [r3, #0]
 80152f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80152f6:	429a      	cmp	r2, r3
 80152f8:	d905      	bls.n	8015306 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80152fa:	2301      	movs	r3, #1
 80152fc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80152fe:	4b0a      	ldr	r3, [pc, #40]	; (8015328 <xTaskRemoveFromEventList+0xc4>)
 8015300:	2201      	movs	r2, #1
 8015302:	601a      	str	r2, [r3, #0]
 8015304:	e001      	b.n	801530a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8015306:	2300      	movs	r3, #0
 8015308:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801530a:	697b      	ldr	r3, [r7, #20]
}
 801530c:	4618      	mov	r0, r3
 801530e:	3718      	adds	r7, #24
 8015310:	46bd      	mov	sp, r7
 8015312:	bd80      	pop	{r7, pc}
 8015314:	20000f20 	.word	0x20000f20
 8015318:	20000f00 	.word	0x20000f00
 801531c:	20000a28 	.word	0x20000a28
 8015320:	20000eb8 	.word	0x20000eb8
 8015324:	20000a24 	.word	0x20000a24
 8015328:	20000f0c 	.word	0x20000f0c

0801532c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801532c:	b480      	push	{r7}
 801532e:	b083      	sub	sp, #12
 8015330:	af00      	add	r7, sp, #0
 8015332:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8015334:	4b06      	ldr	r3, [pc, #24]	; (8015350 <vTaskInternalSetTimeOutState+0x24>)
 8015336:	681a      	ldr	r2, [r3, #0]
 8015338:	687b      	ldr	r3, [r7, #4]
 801533a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801533c:	4b05      	ldr	r3, [pc, #20]	; (8015354 <vTaskInternalSetTimeOutState+0x28>)
 801533e:	681a      	ldr	r2, [r3, #0]
 8015340:	687b      	ldr	r3, [r7, #4]
 8015342:	605a      	str	r2, [r3, #4]
}
 8015344:	bf00      	nop
 8015346:	370c      	adds	r7, #12
 8015348:	46bd      	mov	sp, r7
 801534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801534e:	4770      	bx	lr
 8015350:	20000f10 	.word	0x20000f10
 8015354:	20000efc 	.word	0x20000efc

08015358 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8015358:	b580      	push	{r7, lr}
 801535a:	b088      	sub	sp, #32
 801535c:	af00      	add	r7, sp, #0
 801535e:	6078      	str	r0, [r7, #4]
 8015360:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8015362:	687b      	ldr	r3, [r7, #4]
 8015364:	2b00      	cmp	r3, #0
 8015366:	d10b      	bne.n	8015380 <xTaskCheckForTimeOut+0x28>
 8015368:	f04f 0350 	mov.w	r3, #80	; 0x50
 801536c:	b672      	cpsid	i
 801536e:	f383 8811 	msr	BASEPRI, r3
 8015372:	f3bf 8f6f 	isb	sy
 8015376:	f3bf 8f4f 	dsb	sy
 801537a:	b662      	cpsie	i
 801537c:	613b      	str	r3, [r7, #16]
 801537e:	e7fe      	b.n	801537e <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8015380:	683b      	ldr	r3, [r7, #0]
 8015382:	2b00      	cmp	r3, #0
 8015384:	d10b      	bne.n	801539e <xTaskCheckForTimeOut+0x46>
 8015386:	f04f 0350 	mov.w	r3, #80	; 0x50
 801538a:	b672      	cpsid	i
 801538c:	f383 8811 	msr	BASEPRI, r3
 8015390:	f3bf 8f6f 	isb	sy
 8015394:	f3bf 8f4f 	dsb	sy
 8015398:	b662      	cpsie	i
 801539a:	60fb      	str	r3, [r7, #12]
 801539c:	e7fe      	b.n	801539c <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 801539e:	f000 ff6b 	bl	8016278 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80153a2:	4b1d      	ldr	r3, [pc, #116]	; (8015418 <xTaskCheckForTimeOut+0xc0>)
 80153a4:	681b      	ldr	r3, [r3, #0]
 80153a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	685b      	ldr	r3, [r3, #4]
 80153ac:	69ba      	ldr	r2, [r7, #24]
 80153ae:	1ad3      	subs	r3, r2, r3
 80153b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80153b2:	683b      	ldr	r3, [r7, #0]
 80153b4:	681b      	ldr	r3, [r3, #0]
 80153b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80153ba:	d102      	bne.n	80153c2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80153bc:	2300      	movs	r3, #0
 80153be:	61fb      	str	r3, [r7, #28]
 80153c0:	e023      	b.n	801540a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80153c2:	687b      	ldr	r3, [r7, #4]
 80153c4:	681a      	ldr	r2, [r3, #0]
 80153c6:	4b15      	ldr	r3, [pc, #84]	; (801541c <xTaskCheckForTimeOut+0xc4>)
 80153c8:	681b      	ldr	r3, [r3, #0]
 80153ca:	429a      	cmp	r2, r3
 80153cc:	d007      	beq.n	80153de <xTaskCheckForTimeOut+0x86>
 80153ce:	687b      	ldr	r3, [r7, #4]
 80153d0:	685b      	ldr	r3, [r3, #4]
 80153d2:	69ba      	ldr	r2, [r7, #24]
 80153d4:	429a      	cmp	r2, r3
 80153d6:	d302      	bcc.n	80153de <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80153d8:	2301      	movs	r3, #1
 80153da:	61fb      	str	r3, [r7, #28]
 80153dc:	e015      	b.n	801540a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80153de:	683b      	ldr	r3, [r7, #0]
 80153e0:	681b      	ldr	r3, [r3, #0]
 80153e2:	697a      	ldr	r2, [r7, #20]
 80153e4:	429a      	cmp	r2, r3
 80153e6:	d20b      	bcs.n	8015400 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80153e8:	683b      	ldr	r3, [r7, #0]
 80153ea:	681a      	ldr	r2, [r3, #0]
 80153ec:	697b      	ldr	r3, [r7, #20]
 80153ee:	1ad2      	subs	r2, r2, r3
 80153f0:	683b      	ldr	r3, [r7, #0]
 80153f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80153f4:	6878      	ldr	r0, [r7, #4]
 80153f6:	f7ff ff99 	bl	801532c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80153fa:	2300      	movs	r3, #0
 80153fc:	61fb      	str	r3, [r7, #28]
 80153fe:	e004      	b.n	801540a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8015400:	683b      	ldr	r3, [r7, #0]
 8015402:	2200      	movs	r2, #0
 8015404:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8015406:	2301      	movs	r3, #1
 8015408:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801540a:	f000 ff67 	bl	80162dc <vPortExitCritical>

	return xReturn;
 801540e:	69fb      	ldr	r3, [r7, #28]
}
 8015410:	4618      	mov	r0, r3
 8015412:	3720      	adds	r7, #32
 8015414:	46bd      	mov	sp, r7
 8015416:	bd80      	pop	{r7, pc}
 8015418:	20000efc 	.word	0x20000efc
 801541c:	20000f10 	.word	0x20000f10

08015420 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8015420:	b480      	push	{r7}
 8015422:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8015424:	4b03      	ldr	r3, [pc, #12]	; (8015434 <vTaskMissedYield+0x14>)
 8015426:	2201      	movs	r2, #1
 8015428:	601a      	str	r2, [r3, #0]
}
 801542a:	bf00      	nop
 801542c:	46bd      	mov	sp, r7
 801542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015432:	4770      	bx	lr
 8015434:	20000f0c 	.word	0x20000f0c

08015438 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8015438:	b580      	push	{r7, lr}
 801543a:	b082      	sub	sp, #8
 801543c:	af00      	add	r7, sp, #0
 801543e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8015440:	f000 f852 	bl	80154e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8015444:	4b06      	ldr	r3, [pc, #24]	; (8015460 <prvIdleTask+0x28>)
 8015446:	681b      	ldr	r3, [r3, #0]
 8015448:	2b01      	cmp	r3, #1
 801544a:	d9f9      	bls.n	8015440 <prvIdleTask+0x8>
			{
				taskYIELD();
 801544c:	4b05      	ldr	r3, [pc, #20]	; (8015464 <prvIdleTask+0x2c>)
 801544e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015452:	601a      	str	r2, [r3, #0]
 8015454:	f3bf 8f4f 	dsb	sy
 8015458:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801545c:	e7f0      	b.n	8015440 <prvIdleTask+0x8>
 801545e:	bf00      	nop
 8015460:	20000a28 	.word	0x20000a28
 8015464:	e000ed04 	.word	0xe000ed04

08015468 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8015468:	b580      	push	{r7, lr}
 801546a:	b082      	sub	sp, #8
 801546c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801546e:	2300      	movs	r3, #0
 8015470:	607b      	str	r3, [r7, #4]
 8015472:	e00c      	b.n	801548e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8015474:	687a      	ldr	r2, [r7, #4]
 8015476:	4613      	mov	r3, r2
 8015478:	009b      	lsls	r3, r3, #2
 801547a:	4413      	add	r3, r2
 801547c:	009b      	lsls	r3, r3, #2
 801547e:	4a12      	ldr	r2, [pc, #72]	; (80154c8 <prvInitialiseTaskLists+0x60>)
 8015480:	4413      	add	r3, r2
 8015482:	4618      	mov	r0, r3
 8015484:	f7fe f83a 	bl	80134fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	3301      	adds	r3, #1
 801548c:	607b      	str	r3, [r7, #4]
 801548e:	687b      	ldr	r3, [r7, #4]
 8015490:	2b37      	cmp	r3, #55	; 0x37
 8015492:	d9ef      	bls.n	8015474 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8015494:	480d      	ldr	r0, [pc, #52]	; (80154cc <prvInitialiseTaskLists+0x64>)
 8015496:	f7fe f831 	bl	80134fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801549a:	480d      	ldr	r0, [pc, #52]	; (80154d0 <prvInitialiseTaskLists+0x68>)
 801549c:	f7fe f82e 	bl	80134fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80154a0:	480c      	ldr	r0, [pc, #48]	; (80154d4 <prvInitialiseTaskLists+0x6c>)
 80154a2:	f7fe f82b 	bl	80134fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80154a6:	480c      	ldr	r0, [pc, #48]	; (80154d8 <prvInitialiseTaskLists+0x70>)
 80154a8:	f7fe f828 	bl	80134fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80154ac:	480b      	ldr	r0, [pc, #44]	; (80154dc <prvInitialiseTaskLists+0x74>)
 80154ae:	f7fe f825 	bl	80134fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80154b2:	4b0b      	ldr	r3, [pc, #44]	; (80154e0 <prvInitialiseTaskLists+0x78>)
 80154b4:	4a05      	ldr	r2, [pc, #20]	; (80154cc <prvInitialiseTaskLists+0x64>)
 80154b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80154b8:	4b0a      	ldr	r3, [pc, #40]	; (80154e4 <prvInitialiseTaskLists+0x7c>)
 80154ba:	4a05      	ldr	r2, [pc, #20]	; (80154d0 <prvInitialiseTaskLists+0x68>)
 80154bc:	601a      	str	r2, [r3, #0]
}
 80154be:	bf00      	nop
 80154c0:	3708      	adds	r7, #8
 80154c2:	46bd      	mov	sp, r7
 80154c4:	bd80      	pop	{r7, pc}
 80154c6:	bf00      	nop
 80154c8:	20000a28 	.word	0x20000a28
 80154cc:	20000e88 	.word	0x20000e88
 80154d0:	20000e9c 	.word	0x20000e9c
 80154d4:	20000eb8 	.word	0x20000eb8
 80154d8:	20000ecc 	.word	0x20000ecc
 80154dc:	20000ee4 	.word	0x20000ee4
 80154e0:	20000eb0 	.word	0x20000eb0
 80154e4:	20000eb4 	.word	0x20000eb4

080154e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80154e8:	b580      	push	{r7, lr}
 80154ea:	b082      	sub	sp, #8
 80154ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80154ee:	e019      	b.n	8015524 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80154f0:	f000 fec2 	bl	8016278 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80154f4:	4b0f      	ldr	r3, [pc, #60]	; (8015534 <prvCheckTasksWaitingTermination+0x4c>)
 80154f6:	68db      	ldr	r3, [r3, #12]
 80154f8:	68db      	ldr	r3, [r3, #12]
 80154fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	3304      	adds	r3, #4
 8015500:	4618      	mov	r0, r3
 8015502:	f7fe f885 	bl	8013610 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8015506:	4b0c      	ldr	r3, [pc, #48]	; (8015538 <prvCheckTasksWaitingTermination+0x50>)
 8015508:	681b      	ldr	r3, [r3, #0]
 801550a:	3b01      	subs	r3, #1
 801550c:	4a0a      	ldr	r2, [pc, #40]	; (8015538 <prvCheckTasksWaitingTermination+0x50>)
 801550e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8015510:	4b0a      	ldr	r3, [pc, #40]	; (801553c <prvCheckTasksWaitingTermination+0x54>)
 8015512:	681b      	ldr	r3, [r3, #0]
 8015514:	3b01      	subs	r3, #1
 8015516:	4a09      	ldr	r2, [pc, #36]	; (801553c <prvCheckTasksWaitingTermination+0x54>)
 8015518:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801551a:	f000 fedf 	bl	80162dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801551e:	6878      	ldr	r0, [r7, #4]
 8015520:	f000 f80e 	bl	8015540 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015524:	4b05      	ldr	r3, [pc, #20]	; (801553c <prvCheckTasksWaitingTermination+0x54>)
 8015526:	681b      	ldr	r3, [r3, #0]
 8015528:	2b00      	cmp	r3, #0
 801552a:	d1e1      	bne.n	80154f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801552c:	bf00      	nop
 801552e:	3708      	adds	r7, #8
 8015530:	46bd      	mov	sp, r7
 8015532:	bd80      	pop	{r7, pc}
 8015534:	20000ecc 	.word	0x20000ecc
 8015538:	20000ef8 	.word	0x20000ef8
 801553c:	20000ee0 	.word	0x20000ee0

08015540 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8015540:	b580      	push	{r7, lr}
 8015542:	b084      	sub	sp, #16
 8015544:	af00      	add	r7, sp, #0
 8015546:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801554e:	2b00      	cmp	r3, #0
 8015550:	d108      	bne.n	8015564 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015556:	4618      	mov	r0, r3
 8015558:	f001 f878 	bl	801664c <vPortFree>
				vPortFree( pxTCB );
 801555c:	6878      	ldr	r0, [r7, #4]
 801555e:	f001 f875 	bl	801664c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8015562:	e019      	b.n	8015598 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801556a:	2b01      	cmp	r3, #1
 801556c:	d103      	bne.n	8015576 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801556e:	6878      	ldr	r0, [r7, #4]
 8015570:	f001 f86c 	bl	801664c <vPortFree>
	}
 8015574:	e010      	b.n	8015598 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8015576:	687b      	ldr	r3, [r7, #4]
 8015578:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801557c:	2b02      	cmp	r3, #2
 801557e:	d00b      	beq.n	8015598 <prvDeleteTCB+0x58>
 8015580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015584:	b672      	cpsid	i
 8015586:	f383 8811 	msr	BASEPRI, r3
 801558a:	f3bf 8f6f 	isb	sy
 801558e:	f3bf 8f4f 	dsb	sy
 8015592:	b662      	cpsie	i
 8015594:	60fb      	str	r3, [r7, #12]
 8015596:	e7fe      	b.n	8015596 <prvDeleteTCB+0x56>
	}
 8015598:	bf00      	nop
 801559a:	3710      	adds	r7, #16
 801559c:	46bd      	mov	sp, r7
 801559e:	bd80      	pop	{r7, pc}

080155a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80155a0:	b480      	push	{r7}
 80155a2:	b083      	sub	sp, #12
 80155a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80155a6:	4b0c      	ldr	r3, [pc, #48]	; (80155d8 <prvResetNextTaskUnblockTime+0x38>)
 80155a8:	681b      	ldr	r3, [r3, #0]
 80155aa:	681b      	ldr	r3, [r3, #0]
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	d104      	bne.n	80155ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80155b0:	4b0a      	ldr	r3, [pc, #40]	; (80155dc <prvResetNextTaskUnblockTime+0x3c>)
 80155b2:	f04f 32ff 	mov.w	r2, #4294967295
 80155b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80155b8:	e008      	b.n	80155cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80155ba:	4b07      	ldr	r3, [pc, #28]	; (80155d8 <prvResetNextTaskUnblockTime+0x38>)
 80155bc:	681b      	ldr	r3, [r3, #0]
 80155be:	68db      	ldr	r3, [r3, #12]
 80155c0:	68db      	ldr	r3, [r3, #12]
 80155c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	685b      	ldr	r3, [r3, #4]
 80155c8:	4a04      	ldr	r2, [pc, #16]	; (80155dc <prvResetNextTaskUnblockTime+0x3c>)
 80155ca:	6013      	str	r3, [r2, #0]
}
 80155cc:	bf00      	nop
 80155ce:	370c      	adds	r7, #12
 80155d0:	46bd      	mov	sp, r7
 80155d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155d6:	4770      	bx	lr
 80155d8:	20000eb0 	.word	0x20000eb0
 80155dc:	20000f18 	.word	0x20000f18

080155e0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80155e0:	b480      	push	{r7}
 80155e2:	b083      	sub	sp, #12
 80155e4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80155e6:	4b05      	ldr	r3, [pc, #20]	; (80155fc <xTaskGetCurrentTaskHandle+0x1c>)
 80155e8:	681b      	ldr	r3, [r3, #0]
 80155ea:	607b      	str	r3, [r7, #4]

		return xReturn;
 80155ec:	687b      	ldr	r3, [r7, #4]
	}
 80155ee:	4618      	mov	r0, r3
 80155f0:	370c      	adds	r7, #12
 80155f2:	46bd      	mov	sp, r7
 80155f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155f8:	4770      	bx	lr
 80155fa:	bf00      	nop
 80155fc:	20000a24 	.word	0x20000a24

08015600 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8015600:	b480      	push	{r7}
 8015602:	b083      	sub	sp, #12
 8015604:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8015606:	4b0b      	ldr	r3, [pc, #44]	; (8015634 <xTaskGetSchedulerState+0x34>)
 8015608:	681b      	ldr	r3, [r3, #0]
 801560a:	2b00      	cmp	r3, #0
 801560c:	d102      	bne.n	8015614 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801560e:	2301      	movs	r3, #1
 8015610:	607b      	str	r3, [r7, #4]
 8015612:	e008      	b.n	8015626 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015614:	4b08      	ldr	r3, [pc, #32]	; (8015638 <xTaskGetSchedulerState+0x38>)
 8015616:	681b      	ldr	r3, [r3, #0]
 8015618:	2b00      	cmp	r3, #0
 801561a:	d102      	bne.n	8015622 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801561c:	2302      	movs	r3, #2
 801561e:	607b      	str	r3, [r7, #4]
 8015620:	e001      	b.n	8015626 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8015622:	2300      	movs	r3, #0
 8015624:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8015626:	687b      	ldr	r3, [r7, #4]
	}
 8015628:	4618      	mov	r0, r3
 801562a:	370c      	adds	r7, #12
 801562c:	46bd      	mov	sp, r7
 801562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015632:	4770      	bx	lr
 8015634:	20000f04 	.word	0x20000f04
 8015638:	20000f20 	.word	0x20000f20

0801563c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801563c:	b580      	push	{r7, lr}
 801563e:	b084      	sub	sp, #16
 8015640:	af00      	add	r7, sp, #0
 8015642:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8015648:	2300      	movs	r3, #0
 801564a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	2b00      	cmp	r3, #0
 8015650:	d051      	beq.n	80156f6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8015652:	68bb      	ldr	r3, [r7, #8]
 8015654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015656:	4b2a      	ldr	r3, [pc, #168]	; (8015700 <xTaskPriorityInherit+0xc4>)
 8015658:	681b      	ldr	r3, [r3, #0]
 801565a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801565c:	429a      	cmp	r2, r3
 801565e:	d241      	bcs.n	80156e4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8015660:	68bb      	ldr	r3, [r7, #8]
 8015662:	699b      	ldr	r3, [r3, #24]
 8015664:	2b00      	cmp	r3, #0
 8015666:	db06      	blt.n	8015676 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015668:	4b25      	ldr	r3, [pc, #148]	; (8015700 <xTaskPriorityInherit+0xc4>)
 801566a:	681b      	ldr	r3, [r3, #0]
 801566c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801566e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8015672:	68bb      	ldr	r3, [r7, #8]
 8015674:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8015676:	68bb      	ldr	r3, [r7, #8]
 8015678:	6959      	ldr	r1, [r3, #20]
 801567a:	68bb      	ldr	r3, [r7, #8]
 801567c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801567e:	4613      	mov	r3, r2
 8015680:	009b      	lsls	r3, r3, #2
 8015682:	4413      	add	r3, r2
 8015684:	009b      	lsls	r3, r3, #2
 8015686:	4a1f      	ldr	r2, [pc, #124]	; (8015704 <xTaskPriorityInherit+0xc8>)
 8015688:	4413      	add	r3, r2
 801568a:	4299      	cmp	r1, r3
 801568c:	d122      	bne.n	80156d4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801568e:	68bb      	ldr	r3, [r7, #8]
 8015690:	3304      	adds	r3, #4
 8015692:	4618      	mov	r0, r3
 8015694:	f7fd ffbc 	bl	8013610 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8015698:	4b19      	ldr	r3, [pc, #100]	; (8015700 <xTaskPriorityInherit+0xc4>)
 801569a:	681b      	ldr	r3, [r3, #0]
 801569c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801569e:	68bb      	ldr	r3, [r7, #8]
 80156a0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80156a2:	68bb      	ldr	r3, [r7, #8]
 80156a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80156a6:	4b18      	ldr	r3, [pc, #96]	; (8015708 <xTaskPriorityInherit+0xcc>)
 80156a8:	681b      	ldr	r3, [r3, #0]
 80156aa:	429a      	cmp	r2, r3
 80156ac:	d903      	bls.n	80156b6 <xTaskPriorityInherit+0x7a>
 80156ae:	68bb      	ldr	r3, [r7, #8]
 80156b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80156b2:	4a15      	ldr	r2, [pc, #84]	; (8015708 <xTaskPriorityInherit+0xcc>)
 80156b4:	6013      	str	r3, [r2, #0]
 80156b6:	68bb      	ldr	r3, [r7, #8]
 80156b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80156ba:	4613      	mov	r3, r2
 80156bc:	009b      	lsls	r3, r3, #2
 80156be:	4413      	add	r3, r2
 80156c0:	009b      	lsls	r3, r3, #2
 80156c2:	4a10      	ldr	r2, [pc, #64]	; (8015704 <xTaskPriorityInherit+0xc8>)
 80156c4:	441a      	add	r2, r3
 80156c6:	68bb      	ldr	r3, [r7, #8]
 80156c8:	3304      	adds	r3, #4
 80156ca:	4619      	mov	r1, r3
 80156cc:	4610      	mov	r0, r2
 80156ce:	f7fd ff42 	bl	8013556 <vListInsertEnd>
 80156d2:	e004      	b.n	80156de <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80156d4:	4b0a      	ldr	r3, [pc, #40]	; (8015700 <xTaskPriorityInherit+0xc4>)
 80156d6:	681b      	ldr	r3, [r3, #0]
 80156d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80156da:	68bb      	ldr	r3, [r7, #8]
 80156dc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80156de:	2301      	movs	r3, #1
 80156e0:	60fb      	str	r3, [r7, #12]
 80156e2:	e008      	b.n	80156f6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80156e4:	68bb      	ldr	r3, [r7, #8]
 80156e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80156e8:	4b05      	ldr	r3, [pc, #20]	; (8015700 <xTaskPriorityInherit+0xc4>)
 80156ea:	681b      	ldr	r3, [r3, #0]
 80156ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80156ee:	429a      	cmp	r2, r3
 80156f0:	d201      	bcs.n	80156f6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80156f2:	2301      	movs	r3, #1
 80156f4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80156f6:	68fb      	ldr	r3, [r7, #12]
	}
 80156f8:	4618      	mov	r0, r3
 80156fa:	3710      	adds	r7, #16
 80156fc:	46bd      	mov	sp, r7
 80156fe:	bd80      	pop	{r7, pc}
 8015700:	20000a24 	.word	0x20000a24
 8015704:	20000a28 	.word	0x20000a28
 8015708:	20000f00 	.word	0x20000f00

0801570c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801570c:	b580      	push	{r7, lr}
 801570e:	b086      	sub	sp, #24
 8015710:	af00      	add	r7, sp, #0
 8015712:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8015718:	2300      	movs	r3, #0
 801571a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	2b00      	cmp	r3, #0
 8015720:	d058      	beq.n	80157d4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8015722:	4b2f      	ldr	r3, [pc, #188]	; (80157e0 <xTaskPriorityDisinherit+0xd4>)
 8015724:	681b      	ldr	r3, [r3, #0]
 8015726:	693a      	ldr	r2, [r7, #16]
 8015728:	429a      	cmp	r2, r3
 801572a:	d00b      	beq.n	8015744 <xTaskPriorityDisinherit+0x38>
 801572c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015730:	b672      	cpsid	i
 8015732:	f383 8811 	msr	BASEPRI, r3
 8015736:	f3bf 8f6f 	isb	sy
 801573a:	f3bf 8f4f 	dsb	sy
 801573e:	b662      	cpsie	i
 8015740:	60fb      	str	r3, [r7, #12]
 8015742:	e7fe      	b.n	8015742 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8015744:	693b      	ldr	r3, [r7, #16]
 8015746:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015748:	2b00      	cmp	r3, #0
 801574a:	d10b      	bne.n	8015764 <xTaskPriorityDisinherit+0x58>
 801574c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015750:	b672      	cpsid	i
 8015752:	f383 8811 	msr	BASEPRI, r3
 8015756:	f3bf 8f6f 	isb	sy
 801575a:	f3bf 8f4f 	dsb	sy
 801575e:	b662      	cpsie	i
 8015760:	60bb      	str	r3, [r7, #8]
 8015762:	e7fe      	b.n	8015762 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8015764:	693b      	ldr	r3, [r7, #16]
 8015766:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015768:	1e5a      	subs	r2, r3, #1
 801576a:	693b      	ldr	r3, [r7, #16]
 801576c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801576e:	693b      	ldr	r3, [r7, #16]
 8015770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015772:	693b      	ldr	r3, [r7, #16]
 8015774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015776:	429a      	cmp	r2, r3
 8015778:	d02c      	beq.n	80157d4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801577a:	693b      	ldr	r3, [r7, #16]
 801577c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801577e:	2b00      	cmp	r3, #0
 8015780:	d128      	bne.n	80157d4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015782:	693b      	ldr	r3, [r7, #16]
 8015784:	3304      	adds	r3, #4
 8015786:	4618      	mov	r0, r3
 8015788:	f7fd ff42 	bl	8013610 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801578c:	693b      	ldr	r3, [r7, #16]
 801578e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015790:	693b      	ldr	r3, [r7, #16]
 8015792:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015794:	693b      	ldr	r3, [r7, #16]
 8015796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015798:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801579c:	693b      	ldr	r3, [r7, #16]
 801579e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80157a0:	693b      	ldr	r3, [r7, #16]
 80157a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80157a4:	4b0f      	ldr	r3, [pc, #60]	; (80157e4 <xTaskPriorityDisinherit+0xd8>)
 80157a6:	681b      	ldr	r3, [r3, #0]
 80157a8:	429a      	cmp	r2, r3
 80157aa:	d903      	bls.n	80157b4 <xTaskPriorityDisinherit+0xa8>
 80157ac:	693b      	ldr	r3, [r7, #16]
 80157ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80157b0:	4a0c      	ldr	r2, [pc, #48]	; (80157e4 <xTaskPriorityDisinherit+0xd8>)
 80157b2:	6013      	str	r3, [r2, #0]
 80157b4:	693b      	ldr	r3, [r7, #16]
 80157b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80157b8:	4613      	mov	r3, r2
 80157ba:	009b      	lsls	r3, r3, #2
 80157bc:	4413      	add	r3, r2
 80157be:	009b      	lsls	r3, r3, #2
 80157c0:	4a09      	ldr	r2, [pc, #36]	; (80157e8 <xTaskPriorityDisinherit+0xdc>)
 80157c2:	441a      	add	r2, r3
 80157c4:	693b      	ldr	r3, [r7, #16]
 80157c6:	3304      	adds	r3, #4
 80157c8:	4619      	mov	r1, r3
 80157ca:	4610      	mov	r0, r2
 80157cc:	f7fd fec3 	bl	8013556 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80157d0:	2301      	movs	r3, #1
 80157d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80157d4:	697b      	ldr	r3, [r7, #20]
	}
 80157d6:	4618      	mov	r0, r3
 80157d8:	3718      	adds	r7, #24
 80157da:	46bd      	mov	sp, r7
 80157dc:	bd80      	pop	{r7, pc}
 80157de:	bf00      	nop
 80157e0:	20000a24 	.word	0x20000a24
 80157e4:	20000f00 	.word	0x20000f00
 80157e8:	20000a28 	.word	0x20000a28

080157ec <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80157ec:	b580      	push	{r7, lr}
 80157ee:	b088      	sub	sp, #32
 80157f0:	af00      	add	r7, sp, #0
 80157f2:	6078      	str	r0, [r7, #4]
 80157f4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80157fa:	2301      	movs	r3, #1
 80157fc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	2b00      	cmp	r3, #0
 8015802:	d06c      	beq.n	80158de <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8015804:	69bb      	ldr	r3, [r7, #24]
 8015806:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015808:	2b00      	cmp	r3, #0
 801580a:	d10b      	bne.n	8015824 <vTaskPriorityDisinheritAfterTimeout+0x38>
 801580c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015810:	b672      	cpsid	i
 8015812:	f383 8811 	msr	BASEPRI, r3
 8015816:	f3bf 8f6f 	isb	sy
 801581a:	f3bf 8f4f 	dsb	sy
 801581e:	b662      	cpsie	i
 8015820:	60fb      	str	r3, [r7, #12]
 8015822:	e7fe      	b.n	8015822 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8015824:	69bb      	ldr	r3, [r7, #24]
 8015826:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015828:	683a      	ldr	r2, [r7, #0]
 801582a:	429a      	cmp	r2, r3
 801582c:	d902      	bls.n	8015834 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801582e:	683b      	ldr	r3, [r7, #0]
 8015830:	61fb      	str	r3, [r7, #28]
 8015832:	e002      	b.n	801583a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8015834:	69bb      	ldr	r3, [r7, #24]
 8015836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015838:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801583a:	69bb      	ldr	r3, [r7, #24]
 801583c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801583e:	69fa      	ldr	r2, [r7, #28]
 8015840:	429a      	cmp	r2, r3
 8015842:	d04c      	beq.n	80158de <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8015844:	69bb      	ldr	r3, [r7, #24]
 8015846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015848:	697a      	ldr	r2, [r7, #20]
 801584a:	429a      	cmp	r2, r3
 801584c:	d147      	bne.n	80158de <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801584e:	4b26      	ldr	r3, [pc, #152]	; (80158e8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8015850:	681b      	ldr	r3, [r3, #0]
 8015852:	69ba      	ldr	r2, [r7, #24]
 8015854:	429a      	cmp	r2, r3
 8015856:	d10b      	bne.n	8015870 <vTaskPriorityDisinheritAfterTimeout+0x84>
 8015858:	f04f 0350 	mov.w	r3, #80	; 0x50
 801585c:	b672      	cpsid	i
 801585e:	f383 8811 	msr	BASEPRI, r3
 8015862:	f3bf 8f6f 	isb	sy
 8015866:	f3bf 8f4f 	dsb	sy
 801586a:	b662      	cpsie	i
 801586c:	60bb      	str	r3, [r7, #8]
 801586e:	e7fe      	b.n	801586e <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8015870:	69bb      	ldr	r3, [r7, #24]
 8015872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015874:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8015876:	69bb      	ldr	r3, [r7, #24]
 8015878:	69fa      	ldr	r2, [r7, #28]
 801587a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801587c:	69bb      	ldr	r3, [r7, #24]
 801587e:	699b      	ldr	r3, [r3, #24]
 8015880:	2b00      	cmp	r3, #0
 8015882:	db04      	blt.n	801588e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015884:	69fb      	ldr	r3, [r7, #28]
 8015886:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801588a:	69bb      	ldr	r3, [r7, #24]
 801588c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801588e:	69bb      	ldr	r3, [r7, #24]
 8015890:	6959      	ldr	r1, [r3, #20]
 8015892:	693a      	ldr	r2, [r7, #16]
 8015894:	4613      	mov	r3, r2
 8015896:	009b      	lsls	r3, r3, #2
 8015898:	4413      	add	r3, r2
 801589a:	009b      	lsls	r3, r3, #2
 801589c:	4a13      	ldr	r2, [pc, #76]	; (80158ec <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801589e:	4413      	add	r3, r2
 80158a0:	4299      	cmp	r1, r3
 80158a2:	d11c      	bne.n	80158de <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80158a4:	69bb      	ldr	r3, [r7, #24]
 80158a6:	3304      	adds	r3, #4
 80158a8:	4618      	mov	r0, r3
 80158aa:	f7fd feb1 	bl	8013610 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80158ae:	69bb      	ldr	r3, [r7, #24]
 80158b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80158b2:	4b0f      	ldr	r3, [pc, #60]	; (80158f0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80158b4:	681b      	ldr	r3, [r3, #0]
 80158b6:	429a      	cmp	r2, r3
 80158b8:	d903      	bls.n	80158c2 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80158ba:	69bb      	ldr	r3, [r7, #24]
 80158bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80158be:	4a0c      	ldr	r2, [pc, #48]	; (80158f0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80158c0:	6013      	str	r3, [r2, #0]
 80158c2:	69bb      	ldr	r3, [r7, #24]
 80158c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80158c6:	4613      	mov	r3, r2
 80158c8:	009b      	lsls	r3, r3, #2
 80158ca:	4413      	add	r3, r2
 80158cc:	009b      	lsls	r3, r3, #2
 80158ce:	4a07      	ldr	r2, [pc, #28]	; (80158ec <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80158d0:	441a      	add	r2, r3
 80158d2:	69bb      	ldr	r3, [r7, #24]
 80158d4:	3304      	adds	r3, #4
 80158d6:	4619      	mov	r1, r3
 80158d8:	4610      	mov	r0, r2
 80158da:	f7fd fe3c 	bl	8013556 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80158de:	bf00      	nop
 80158e0:	3720      	adds	r7, #32
 80158e2:	46bd      	mov	sp, r7
 80158e4:	bd80      	pop	{r7, pc}
 80158e6:	bf00      	nop
 80158e8:	20000a24 	.word	0x20000a24
 80158ec:	20000a28 	.word	0x20000a28
 80158f0:	20000f00 	.word	0x20000f00

080158f4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80158f4:	b480      	push	{r7}
 80158f6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80158f8:	4b07      	ldr	r3, [pc, #28]	; (8015918 <pvTaskIncrementMutexHeldCount+0x24>)
 80158fa:	681b      	ldr	r3, [r3, #0]
 80158fc:	2b00      	cmp	r3, #0
 80158fe:	d004      	beq.n	801590a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8015900:	4b05      	ldr	r3, [pc, #20]	; (8015918 <pvTaskIncrementMutexHeldCount+0x24>)
 8015902:	681b      	ldr	r3, [r3, #0]
 8015904:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015906:	3201      	adds	r2, #1
 8015908:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 801590a:	4b03      	ldr	r3, [pc, #12]	; (8015918 <pvTaskIncrementMutexHeldCount+0x24>)
 801590c:	681b      	ldr	r3, [r3, #0]
	}
 801590e:	4618      	mov	r0, r3
 8015910:	46bd      	mov	sp, r7
 8015912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015916:	4770      	bx	lr
 8015918:	20000a24 	.word	0x20000a24

0801591c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801591c:	b580      	push	{r7, lr}
 801591e:	b084      	sub	sp, #16
 8015920:	af00      	add	r7, sp, #0
 8015922:	6078      	str	r0, [r7, #4]
 8015924:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8015926:	4b21      	ldr	r3, [pc, #132]	; (80159ac <prvAddCurrentTaskToDelayedList+0x90>)
 8015928:	681b      	ldr	r3, [r3, #0]
 801592a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801592c:	4b20      	ldr	r3, [pc, #128]	; (80159b0 <prvAddCurrentTaskToDelayedList+0x94>)
 801592e:	681b      	ldr	r3, [r3, #0]
 8015930:	3304      	adds	r3, #4
 8015932:	4618      	mov	r0, r3
 8015934:	f7fd fe6c 	bl	8013610 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801593e:	d10a      	bne.n	8015956 <prvAddCurrentTaskToDelayedList+0x3a>
 8015940:	683b      	ldr	r3, [r7, #0]
 8015942:	2b00      	cmp	r3, #0
 8015944:	d007      	beq.n	8015956 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015946:	4b1a      	ldr	r3, [pc, #104]	; (80159b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8015948:	681b      	ldr	r3, [r3, #0]
 801594a:	3304      	adds	r3, #4
 801594c:	4619      	mov	r1, r3
 801594e:	4819      	ldr	r0, [pc, #100]	; (80159b4 <prvAddCurrentTaskToDelayedList+0x98>)
 8015950:	f7fd fe01 	bl	8013556 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8015954:	e026      	b.n	80159a4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8015956:	68fa      	ldr	r2, [r7, #12]
 8015958:	687b      	ldr	r3, [r7, #4]
 801595a:	4413      	add	r3, r2
 801595c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801595e:	4b14      	ldr	r3, [pc, #80]	; (80159b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8015960:	681b      	ldr	r3, [r3, #0]
 8015962:	68ba      	ldr	r2, [r7, #8]
 8015964:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8015966:	68ba      	ldr	r2, [r7, #8]
 8015968:	68fb      	ldr	r3, [r7, #12]
 801596a:	429a      	cmp	r2, r3
 801596c:	d209      	bcs.n	8015982 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801596e:	4b12      	ldr	r3, [pc, #72]	; (80159b8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8015970:	681a      	ldr	r2, [r3, #0]
 8015972:	4b0f      	ldr	r3, [pc, #60]	; (80159b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8015974:	681b      	ldr	r3, [r3, #0]
 8015976:	3304      	adds	r3, #4
 8015978:	4619      	mov	r1, r3
 801597a:	4610      	mov	r0, r2
 801597c:	f7fd fe0f 	bl	801359e <vListInsert>
}
 8015980:	e010      	b.n	80159a4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015982:	4b0e      	ldr	r3, [pc, #56]	; (80159bc <prvAddCurrentTaskToDelayedList+0xa0>)
 8015984:	681a      	ldr	r2, [r3, #0]
 8015986:	4b0a      	ldr	r3, [pc, #40]	; (80159b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8015988:	681b      	ldr	r3, [r3, #0]
 801598a:	3304      	adds	r3, #4
 801598c:	4619      	mov	r1, r3
 801598e:	4610      	mov	r0, r2
 8015990:	f7fd fe05 	bl	801359e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8015994:	4b0a      	ldr	r3, [pc, #40]	; (80159c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8015996:	681b      	ldr	r3, [r3, #0]
 8015998:	68ba      	ldr	r2, [r7, #8]
 801599a:	429a      	cmp	r2, r3
 801599c:	d202      	bcs.n	80159a4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801599e:	4a08      	ldr	r2, [pc, #32]	; (80159c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80159a0:	68bb      	ldr	r3, [r7, #8]
 80159a2:	6013      	str	r3, [r2, #0]
}
 80159a4:	bf00      	nop
 80159a6:	3710      	adds	r7, #16
 80159a8:	46bd      	mov	sp, r7
 80159aa:	bd80      	pop	{r7, pc}
 80159ac:	20000efc 	.word	0x20000efc
 80159b0:	20000a24 	.word	0x20000a24
 80159b4:	20000ee4 	.word	0x20000ee4
 80159b8:	20000eb4 	.word	0x20000eb4
 80159bc:	20000eb0 	.word	0x20000eb0
 80159c0:	20000f18 	.word	0x20000f18

080159c4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80159c4:	b580      	push	{r7, lr}
 80159c6:	b08a      	sub	sp, #40	; 0x28
 80159c8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80159ca:	2300      	movs	r3, #0
 80159cc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80159ce:	f000 fb0d 	bl	8015fec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80159d2:	4b1d      	ldr	r3, [pc, #116]	; (8015a48 <xTimerCreateTimerTask+0x84>)
 80159d4:	681b      	ldr	r3, [r3, #0]
 80159d6:	2b00      	cmp	r3, #0
 80159d8:	d021      	beq.n	8015a1e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80159da:	2300      	movs	r3, #0
 80159dc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80159de:	2300      	movs	r3, #0
 80159e0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80159e2:	1d3a      	adds	r2, r7, #4
 80159e4:	f107 0108 	add.w	r1, r7, #8
 80159e8:	f107 030c 	add.w	r3, r7, #12
 80159ec:	4618      	mov	r0, r3
 80159ee:	f7fd fd6b 	bl	80134c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80159f2:	6879      	ldr	r1, [r7, #4]
 80159f4:	68bb      	ldr	r3, [r7, #8]
 80159f6:	68fa      	ldr	r2, [r7, #12]
 80159f8:	9202      	str	r2, [sp, #8]
 80159fa:	9301      	str	r3, [sp, #4]
 80159fc:	2302      	movs	r3, #2
 80159fe:	9300      	str	r3, [sp, #0]
 8015a00:	2300      	movs	r3, #0
 8015a02:	460a      	mov	r2, r1
 8015a04:	4911      	ldr	r1, [pc, #68]	; (8015a4c <xTimerCreateTimerTask+0x88>)
 8015a06:	4812      	ldr	r0, [pc, #72]	; (8015a50 <xTimerCreateTimerTask+0x8c>)
 8015a08:	f7fe ff30 	bl	801486c <xTaskCreateStatic>
 8015a0c:	4602      	mov	r2, r0
 8015a0e:	4b11      	ldr	r3, [pc, #68]	; (8015a54 <xTimerCreateTimerTask+0x90>)
 8015a10:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8015a12:	4b10      	ldr	r3, [pc, #64]	; (8015a54 <xTimerCreateTimerTask+0x90>)
 8015a14:	681b      	ldr	r3, [r3, #0]
 8015a16:	2b00      	cmp	r3, #0
 8015a18:	d001      	beq.n	8015a1e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8015a1a:	2301      	movs	r3, #1
 8015a1c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8015a1e:	697b      	ldr	r3, [r7, #20]
 8015a20:	2b00      	cmp	r3, #0
 8015a22:	d10b      	bne.n	8015a3c <xTimerCreateTimerTask+0x78>
 8015a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a28:	b672      	cpsid	i
 8015a2a:	f383 8811 	msr	BASEPRI, r3
 8015a2e:	f3bf 8f6f 	isb	sy
 8015a32:	f3bf 8f4f 	dsb	sy
 8015a36:	b662      	cpsie	i
 8015a38:	613b      	str	r3, [r7, #16]
 8015a3a:	e7fe      	b.n	8015a3a <xTimerCreateTimerTask+0x76>
	return xReturn;
 8015a3c:	697b      	ldr	r3, [r7, #20]
}
 8015a3e:	4618      	mov	r0, r3
 8015a40:	3718      	adds	r7, #24
 8015a42:	46bd      	mov	sp, r7
 8015a44:	bd80      	pop	{r7, pc}
 8015a46:	bf00      	nop
 8015a48:	20000f54 	.word	0x20000f54
 8015a4c:	0801a1d0 	.word	0x0801a1d0
 8015a50:	08015b91 	.word	0x08015b91
 8015a54:	20000f58 	.word	0x20000f58

08015a58 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8015a58:	b580      	push	{r7, lr}
 8015a5a:	b08a      	sub	sp, #40	; 0x28
 8015a5c:	af00      	add	r7, sp, #0
 8015a5e:	60f8      	str	r0, [r7, #12]
 8015a60:	60b9      	str	r1, [r7, #8]
 8015a62:	607a      	str	r2, [r7, #4]
 8015a64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8015a66:	2300      	movs	r3, #0
 8015a68:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8015a6a:	68fb      	ldr	r3, [r7, #12]
 8015a6c:	2b00      	cmp	r3, #0
 8015a6e:	d10b      	bne.n	8015a88 <xTimerGenericCommand+0x30>
 8015a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a74:	b672      	cpsid	i
 8015a76:	f383 8811 	msr	BASEPRI, r3
 8015a7a:	f3bf 8f6f 	isb	sy
 8015a7e:	f3bf 8f4f 	dsb	sy
 8015a82:	b662      	cpsie	i
 8015a84:	623b      	str	r3, [r7, #32]
 8015a86:	e7fe      	b.n	8015a86 <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8015a88:	4b19      	ldr	r3, [pc, #100]	; (8015af0 <xTimerGenericCommand+0x98>)
 8015a8a:	681b      	ldr	r3, [r3, #0]
 8015a8c:	2b00      	cmp	r3, #0
 8015a8e:	d02a      	beq.n	8015ae6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8015a90:	68bb      	ldr	r3, [r7, #8]
 8015a92:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8015a94:	687b      	ldr	r3, [r7, #4]
 8015a96:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8015a98:	68fb      	ldr	r3, [r7, #12]
 8015a9a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8015a9c:	68bb      	ldr	r3, [r7, #8]
 8015a9e:	2b05      	cmp	r3, #5
 8015aa0:	dc18      	bgt.n	8015ad4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8015aa2:	f7ff fdad 	bl	8015600 <xTaskGetSchedulerState>
 8015aa6:	4603      	mov	r3, r0
 8015aa8:	2b02      	cmp	r3, #2
 8015aaa:	d109      	bne.n	8015ac0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8015aac:	4b10      	ldr	r3, [pc, #64]	; (8015af0 <xTimerGenericCommand+0x98>)
 8015aae:	6818      	ldr	r0, [r3, #0]
 8015ab0:	f107 0110 	add.w	r1, r7, #16
 8015ab4:	2300      	movs	r3, #0
 8015ab6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015ab8:	f7fe f860 	bl	8013b7c <xQueueGenericSend>
 8015abc:	6278      	str	r0, [r7, #36]	; 0x24
 8015abe:	e012      	b.n	8015ae6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8015ac0:	4b0b      	ldr	r3, [pc, #44]	; (8015af0 <xTimerGenericCommand+0x98>)
 8015ac2:	6818      	ldr	r0, [r3, #0]
 8015ac4:	f107 0110 	add.w	r1, r7, #16
 8015ac8:	2300      	movs	r3, #0
 8015aca:	2200      	movs	r2, #0
 8015acc:	f7fe f856 	bl	8013b7c <xQueueGenericSend>
 8015ad0:	6278      	str	r0, [r7, #36]	; 0x24
 8015ad2:	e008      	b.n	8015ae6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8015ad4:	4b06      	ldr	r3, [pc, #24]	; (8015af0 <xTimerGenericCommand+0x98>)
 8015ad6:	6818      	ldr	r0, [r3, #0]
 8015ad8:	f107 0110 	add.w	r1, r7, #16
 8015adc:	2300      	movs	r3, #0
 8015ade:	683a      	ldr	r2, [r7, #0]
 8015ae0:	f7fe f94e 	bl	8013d80 <xQueueGenericSendFromISR>
 8015ae4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8015ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015ae8:	4618      	mov	r0, r3
 8015aea:	3728      	adds	r7, #40	; 0x28
 8015aec:	46bd      	mov	sp, r7
 8015aee:	bd80      	pop	{r7, pc}
 8015af0:	20000f54 	.word	0x20000f54

08015af4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8015af4:	b580      	push	{r7, lr}
 8015af6:	b088      	sub	sp, #32
 8015af8:	af02      	add	r7, sp, #8
 8015afa:	6078      	str	r0, [r7, #4]
 8015afc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015afe:	4b23      	ldr	r3, [pc, #140]	; (8015b8c <prvProcessExpiredTimer+0x98>)
 8015b00:	681b      	ldr	r3, [r3, #0]
 8015b02:	68db      	ldr	r3, [r3, #12]
 8015b04:	68db      	ldr	r3, [r3, #12]
 8015b06:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015b08:	697b      	ldr	r3, [r7, #20]
 8015b0a:	3304      	adds	r3, #4
 8015b0c:	4618      	mov	r0, r3
 8015b0e:	f7fd fd7f 	bl	8013610 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015b12:	697b      	ldr	r3, [r7, #20]
 8015b14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015b18:	f003 0304 	and.w	r3, r3, #4
 8015b1c:	2b00      	cmp	r3, #0
 8015b1e:	d023      	beq.n	8015b68 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8015b20:	697b      	ldr	r3, [r7, #20]
 8015b22:	699a      	ldr	r2, [r3, #24]
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	18d1      	adds	r1, r2, r3
 8015b28:	687b      	ldr	r3, [r7, #4]
 8015b2a:	683a      	ldr	r2, [r7, #0]
 8015b2c:	6978      	ldr	r0, [r7, #20]
 8015b2e:	f000 f8d3 	bl	8015cd8 <prvInsertTimerInActiveList>
 8015b32:	4603      	mov	r3, r0
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	d020      	beq.n	8015b7a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015b38:	2300      	movs	r3, #0
 8015b3a:	9300      	str	r3, [sp, #0]
 8015b3c:	2300      	movs	r3, #0
 8015b3e:	687a      	ldr	r2, [r7, #4]
 8015b40:	2100      	movs	r1, #0
 8015b42:	6978      	ldr	r0, [r7, #20]
 8015b44:	f7ff ff88 	bl	8015a58 <xTimerGenericCommand>
 8015b48:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8015b4a:	693b      	ldr	r3, [r7, #16]
 8015b4c:	2b00      	cmp	r3, #0
 8015b4e:	d114      	bne.n	8015b7a <prvProcessExpiredTimer+0x86>
 8015b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b54:	b672      	cpsid	i
 8015b56:	f383 8811 	msr	BASEPRI, r3
 8015b5a:	f3bf 8f6f 	isb	sy
 8015b5e:	f3bf 8f4f 	dsb	sy
 8015b62:	b662      	cpsie	i
 8015b64:	60fb      	str	r3, [r7, #12]
 8015b66:	e7fe      	b.n	8015b66 <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015b68:	697b      	ldr	r3, [r7, #20]
 8015b6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015b6e:	f023 0301 	bic.w	r3, r3, #1
 8015b72:	b2da      	uxtb	r2, r3
 8015b74:	697b      	ldr	r3, [r7, #20]
 8015b76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015b7a:	697b      	ldr	r3, [r7, #20]
 8015b7c:	6a1b      	ldr	r3, [r3, #32]
 8015b7e:	6978      	ldr	r0, [r7, #20]
 8015b80:	4798      	blx	r3
}
 8015b82:	bf00      	nop
 8015b84:	3718      	adds	r7, #24
 8015b86:	46bd      	mov	sp, r7
 8015b88:	bd80      	pop	{r7, pc}
 8015b8a:	bf00      	nop
 8015b8c:	20000f4c 	.word	0x20000f4c

08015b90 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8015b90:	b580      	push	{r7, lr}
 8015b92:	b084      	sub	sp, #16
 8015b94:	af00      	add	r7, sp, #0
 8015b96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015b98:	f107 0308 	add.w	r3, r7, #8
 8015b9c:	4618      	mov	r0, r3
 8015b9e:	f000 f857 	bl	8015c50 <prvGetNextExpireTime>
 8015ba2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8015ba4:	68bb      	ldr	r3, [r7, #8]
 8015ba6:	4619      	mov	r1, r3
 8015ba8:	68f8      	ldr	r0, [r7, #12]
 8015baa:	f000 f803 	bl	8015bb4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8015bae:	f000 f8d5 	bl	8015d5c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015bb2:	e7f1      	b.n	8015b98 <prvTimerTask+0x8>

08015bb4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8015bb4:	b580      	push	{r7, lr}
 8015bb6:	b084      	sub	sp, #16
 8015bb8:	af00      	add	r7, sp, #0
 8015bba:	6078      	str	r0, [r7, #4]
 8015bbc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8015bbe:	f7ff f919 	bl	8014df4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015bc2:	f107 0308 	add.w	r3, r7, #8
 8015bc6:	4618      	mov	r0, r3
 8015bc8:	f000 f866 	bl	8015c98 <prvSampleTimeNow>
 8015bcc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8015bce:	68bb      	ldr	r3, [r7, #8]
 8015bd0:	2b00      	cmp	r3, #0
 8015bd2:	d130      	bne.n	8015c36 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8015bd4:	683b      	ldr	r3, [r7, #0]
 8015bd6:	2b00      	cmp	r3, #0
 8015bd8:	d10a      	bne.n	8015bf0 <prvProcessTimerOrBlockTask+0x3c>
 8015bda:	687a      	ldr	r2, [r7, #4]
 8015bdc:	68fb      	ldr	r3, [r7, #12]
 8015bde:	429a      	cmp	r2, r3
 8015be0:	d806      	bhi.n	8015bf0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8015be2:	f7ff f915 	bl	8014e10 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8015be6:	68f9      	ldr	r1, [r7, #12]
 8015be8:	6878      	ldr	r0, [r7, #4]
 8015bea:	f7ff ff83 	bl	8015af4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8015bee:	e024      	b.n	8015c3a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8015bf0:	683b      	ldr	r3, [r7, #0]
 8015bf2:	2b00      	cmp	r3, #0
 8015bf4:	d008      	beq.n	8015c08 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8015bf6:	4b13      	ldr	r3, [pc, #76]	; (8015c44 <prvProcessTimerOrBlockTask+0x90>)
 8015bf8:	681b      	ldr	r3, [r3, #0]
 8015bfa:	681b      	ldr	r3, [r3, #0]
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	d101      	bne.n	8015c04 <prvProcessTimerOrBlockTask+0x50>
 8015c00:	2301      	movs	r3, #1
 8015c02:	e000      	b.n	8015c06 <prvProcessTimerOrBlockTask+0x52>
 8015c04:	2300      	movs	r3, #0
 8015c06:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8015c08:	4b0f      	ldr	r3, [pc, #60]	; (8015c48 <prvProcessTimerOrBlockTask+0x94>)
 8015c0a:	6818      	ldr	r0, [r3, #0]
 8015c0c:	687a      	ldr	r2, [r7, #4]
 8015c0e:	68fb      	ldr	r3, [r7, #12]
 8015c10:	1ad3      	subs	r3, r2, r3
 8015c12:	683a      	ldr	r2, [r7, #0]
 8015c14:	4619      	mov	r1, r3
 8015c16:	f7fe fdf5 	bl	8014804 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8015c1a:	f7ff f8f9 	bl	8014e10 <xTaskResumeAll>
 8015c1e:	4603      	mov	r3, r0
 8015c20:	2b00      	cmp	r3, #0
 8015c22:	d10a      	bne.n	8015c3a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8015c24:	4b09      	ldr	r3, [pc, #36]	; (8015c4c <prvProcessTimerOrBlockTask+0x98>)
 8015c26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015c2a:	601a      	str	r2, [r3, #0]
 8015c2c:	f3bf 8f4f 	dsb	sy
 8015c30:	f3bf 8f6f 	isb	sy
}
 8015c34:	e001      	b.n	8015c3a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8015c36:	f7ff f8eb 	bl	8014e10 <xTaskResumeAll>
}
 8015c3a:	bf00      	nop
 8015c3c:	3710      	adds	r7, #16
 8015c3e:	46bd      	mov	sp, r7
 8015c40:	bd80      	pop	{r7, pc}
 8015c42:	bf00      	nop
 8015c44:	20000f50 	.word	0x20000f50
 8015c48:	20000f54 	.word	0x20000f54
 8015c4c:	e000ed04 	.word	0xe000ed04

08015c50 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8015c50:	b480      	push	{r7}
 8015c52:	b085      	sub	sp, #20
 8015c54:	af00      	add	r7, sp, #0
 8015c56:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8015c58:	4b0e      	ldr	r3, [pc, #56]	; (8015c94 <prvGetNextExpireTime+0x44>)
 8015c5a:	681b      	ldr	r3, [r3, #0]
 8015c5c:	681b      	ldr	r3, [r3, #0]
 8015c5e:	2b00      	cmp	r3, #0
 8015c60:	d101      	bne.n	8015c66 <prvGetNextExpireTime+0x16>
 8015c62:	2201      	movs	r2, #1
 8015c64:	e000      	b.n	8015c68 <prvGetNextExpireTime+0x18>
 8015c66:	2200      	movs	r2, #0
 8015c68:	687b      	ldr	r3, [r7, #4]
 8015c6a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8015c6c:	687b      	ldr	r3, [r7, #4]
 8015c6e:	681b      	ldr	r3, [r3, #0]
 8015c70:	2b00      	cmp	r3, #0
 8015c72:	d105      	bne.n	8015c80 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015c74:	4b07      	ldr	r3, [pc, #28]	; (8015c94 <prvGetNextExpireTime+0x44>)
 8015c76:	681b      	ldr	r3, [r3, #0]
 8015c78:	68db      	ldr	r3, [r3, #12]
 8015c7a:	681b      	ldr	r3, [r3, #0]
 8015c7c:	60fb      	str	r3, [r7, #12]
 8015c7e:	e001      	b.n	8015c84 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8015c80:	2300      	movs	r3, #0
 8015c82:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8015c84:	68fb      	ldr	r3, [r7, #12]
}
 8015c86:	4618      	mov	r0, r3
 8015c88:	3714      	adds	r7, #20
 8015c8a:	46bd      	mov	sp, r7
 8015c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c90:	4770      	bx	lr
 8015c92:	bf00      	nop
 8015c94:	20000f4c 	.word	0x20000f4c

08015c98 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8015c98:	b580      	push	{r7, lr}
 8015c9a:	b084      	sub	sp, #16
 8015c9c:	af00      	add	r7, sp, #0
 8015c9e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8015ca0:	f7ff f954 	bl	8014f4c <xTaskGetTickCount>
 8015ca4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8015ca6:	4b0b      	ldr	r3, [pc, #44]	; (8015cd4 <prvSampleTimeNow+0x3c>)
 8015ca8:	681b      	ldr	r3, [r3, #0]
 8015caa:	68fa      	ldr	r2, [r7, #12]
 8015cac:	429a      	cmp	r2, r3
 8015cae:	d205      	bcs.n	8015cbc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8015cb0:	f000 f936 	bl	8015f20 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	2201      	movs	r2, #1
 8015cb8:	601a      	str	r2, [r3, #0]
 8015cba:	e002      	b.n	8015cc2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	2200      	movs	r2, #0
 8015cc0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8015cc2:	4a04      	ldr	r2, [pc, #16]	; (8015cd4 <prvSampleTimeNow+0x3c>)
 8015cc4:	68fb      	ldr	r3, [r7, #12]
 8015cc6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8015cc8:	68fb      	ldr	r3, [r7, #12]
}
 8015cca:	4618      	mov	r0, r3
 8015ccc:	3710      	adds	r7, #16
 8015cce:	46bd      	mov	sp, r7
 8015cd0:	bd80      	pop	{r7, pc}
 8015cd2:	bf00      	nop
 8015cd4:	20000f5c 	.word	0x20000f5c

08015cd8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8015cd8:	b580      	push	{r7, lr}
 8015cda:	b086      	sub	sp, #24
 8015cdc:	af00      	add	r7, sp, #0
 8015cde:	60f8      	str	r0, [r7, #12]
 8015ce0:	60b9      	str	r1, [r7, #8]
 8015ce2:	607a      	str	r2, [r7, #4]
 8015ce4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8015ce6:	2300      	movs	r3, #0
 8015ce8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8015cea:	68fb      	ldr	r3, [r7, #12]
 8015cec:	68ba      	ldr	r2, [r7, #8]
 8015cee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015cf0:	68fb      	ldr	r3, [r7, #12]
 8015cf2:	68fa      	ldr	r2, [r7, #12]
 8015cf4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8015cf6:	68ba      	ldr	r2, [r7, #8]
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	429a      	cmp	r2, r3
 8015cfc:	d812      	bhi.n	8015d24 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015cfe:	687a      	ldr	r2, [r7, #4]
 8015d00:	683b      	ldr	r3, [r7, #0]
 8015d02:	1ad2      	subs	r2, r2, r3
 8015d04:	68fb      	ldr	r3, [r7, #12]
 8015d06:	699b      	ldr	r3, [r3, #24]
 8015d08:	429a      	cmp	r2, r3
 8015d0a:	d302      	bcc.n	8015d12 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8015d0c:	2301      	movs	r3, #1
 8015d0e:	617b      	str	r3, [r7, #20]
 8015d10:	e01b      	b.n	8015d4a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8015d12:	4b10      	ldr	r3, [pc, #64]	; (8015d54 <prvInsertTimerInActiveList+0x7c>)
 8015d14:	681a      	ldr	r2, [r3, #0]
 8015d16:	68fb      	ldr	r3, [r7, #12]
 8015d18:	3304      	adds	r3, #4
 8015d1a:	4619      	mov	r1, r3
 8015d1c:	4610      	mov	r0, r2
 8015d1e:	f7fd fc3e 	bl	801359e <vListInsert>
 8015d22:	e012      	b.n	8015d4a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8015d24:	687a      	ldr	r2, [r7, #4]
 8015d26:	683b      	ldr	r3, [r7, #0]
 8015d28:	429a      	cmp	r2, r3
 8015d2a:	d206      	bcs.n	8015d3a <prvInsertTimerInActiveList+0x62>
 8015d2c:	68ba      	ldr	r2, [r7, #8]
 8015d2e:	683b      	ldr	r3, [r7, #0]
 8015d30:	429a      	cmp	r2, r3
 8015d32:	d302      	bcc.n	8015d3a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8015d34:	2301      	movs	r3, #1
 8015d36:	617b      	str	r3, [r7, #20]
 8015d38:	e007      	b.n	8015d4a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015d3a:	4b07      	ldr	r3, [pc, #28]	; (8015d58 <prvInsertTimerInActiveList+0x80>)
 8015d3c:	681a      	ldr	r2, [r3, #0]
 8015d3e:	68fb      	ldr	r3, [r7, #12]
 8015d40:	3304      	adds	r3, #4
 8015d42:	4619      	mov	r1, r3
 8015d44:	4610      	mov	r0, r2
 8015d46:	f7fd fc2a 	bl	801359e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8015d4a:	697b      	ldr	r3, [r7, #20]
}
 8015d4c:	4618      	mov	r0, r3
 8015d4e:	3718      	adds	r7, #24
 8015d50:	46bd      	mov	sp, r7
 8015d52:	bd80      	pop	{r7, pc}
 8015d54:	20000f50 	.word	0x20000f50
 8015d58:	20000f4c 	.word	0x20000f4c

08015d5c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8015d5c:	b580      	push	{r7, lr}
 8015d5e:	b08e      	sub	sp, #56	; 0x38
 8015d60:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8015d62:	e0cc      	b.n	8015efe <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	2b00      	cmp	r3, #0
 8015d68:	da19      	bge.n	8015d9e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8015d6a:	1d3b      	adds	r3, r7, #4
 8015d6c:	3304      	adds	r3, #4
 8015d6e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8015d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d72:	2b00      	cmp	r3, #0
 8015d74:	d10b      	bne.n	8015d8e <prvProcessReceivedCommands+0x32>
 8015d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d7a:	b672      	cpsid	i
 8015d7c:	f383 8811 	msr	BASEPRI, r3
 8015d80:	f3bf 8f6f 	isb	sy
 8015d84:	f3bf 8f4f 	dsb	sy
 8015d88:	b662      	cpsie	i
 8015d8a:	61fb      	str	r3, [r7, #28]
 8015d8c:	e7fe      	b.n	8015d8c <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8015d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d90:	681b      	ldr	r3, [r3, #0]
 8015d92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015d94:	6850      	ldr	r0, [r2, #4]
 8015d96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015d98:	6892      	ldr	r2, [r2, #8]
 8015d9a:	4611      	mov	r1, r2
 8015d9c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	2b00      	cmp	r3, #0
 8015da2:	f2c0 80ab 	blt.w	8015efc <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8015da6:	68fb      	ldr	r3, [r7, #12]
 8015da8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8015daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015dac:	695b      	ldr	r3, [r3, #20]
 8015dae:	2b00      	cmp	r3, #0
 8015db0:	d004      	beq.n	8015dbc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015db4:	3304      	adds	r3, #4
 8015db6:	4618      	mov	r0, r3
 8015db8:	f7fd fc2a 	bl	8013610 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015dbc:	463b      	mov	r3, r7
 8015dbe:	4618      	mov	r0, r3
 8015dc0:	f7ff ff6a 	bl	8015c98 <prvSampleTimeNow>
 8015dc4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8015dc6:	687b      	ldr	r3, [r7, #4]
 8015dc8:	2b09      	cmp	r3, #9
 8015dca:	f200 8098 	bhi.w	8015efe <prvProcessReceivedCommands+0x1a2>
 8015dce:	a201      	add	r2, pc, #4	; (adr r2, 8015dd4 <prvProcessReceivedCommands+0x78>)
 8015dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015dd4:	08015dfd 	.word	0x08015dfd
 8015dd8:	08015dfd 	.word	0x08015dfd
 8015ddc:	08015dfd 	.word	0x08015dfd
 8015de0:	08015e73 	.word	0x08015e73
 8015de4:	08015e87 	.word	0x08015e87
 8015de8:	08015ed3 	.word	0x08015ed3
 8015dec:	08015dfd 	.word	0x08015dfd
 8015df0:	08015dfd 	.word	0x08015dfd
 8015df4:	08015e73 	.word	0x08015e73
 8015df8:	08015e87 	.word	0x08015e87
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015dfe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015e02:	f043 0301 	orr.w	r3, r3, #1
 8015e06:	b2da      	uxtb	r2, r3
 8015e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8015e0e:	68ba      	ldr	r2, [r7, #8]
 8015e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e12:	699b      	ldr	r3, [r3, #24]
 8015e14:	18d1      	adds	r1, r2, r3
 8015e16:	68bb      	ldr	r3, [r7, #8]
 8015e18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015e1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015e1c:	f7ff ff5c 	bl	8015cd8 <prvInsertTimerInActiveList>
 8015e20:	4603      	mov	r3, r0
 8015e22:	2b00      	cmp	r3, #0
 8015e24:	d06b      	beq.n	8015efe <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e28:	6a1b      	ldr	r3, [r3, #32]
 8015e2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015e2c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015e34:	f003 0304 	and.w	r3, r3, #4
 8015e38:	2b00      	cmp	r3, #0
 8015e3a:	d060      	beq.n	8015efe <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8015e3c:	68ba      	ldr	r2, [r7, #8]
 8015e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e40:	699b      	ldr	r3, [r3, #24]
 8015e42:	441a      	add	r2, r3
 8015e44:	2300      	movs	r3, #0
 8015e46:	9300      	str	r3, [sp, #0]
 8015e48:	2300      	movs	r3, #0
 8015e4a:	2100      	movs	r1, #0
 8015e4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015e4e:	f7ff fe03 	bl	8015a58 <xTimerGenericCommand>
 8015e52:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8015e54:	6a3b      	ldr	r3, [r7, #32]
 8015e56:	2b00      	cmp	r3, #0
 8015e58:	d151      	bne.n	8015efe <prvProcessReceivedCommands+0x1a2>
 8015e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e5e:	b672      	cpsid	i
 8015e60:	f383 8811 	msr	BASEPRI, r3
 8015e64:	f3bf 8f6f 	isb	sy
 8015e68:	f3bf 8f4f 	dsb	sy
 8015e6c:	b662      	cpsie	i
 8015e6e:	61bb      	str	r3, [r7, #24]
 8015e70:	e7fe      	b.n	8015e70 <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015e78:	f023 0301 	bic.w	r3, r3, #1
 8015e7c:	b2da      	uxtb	r2, r3
 8015e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e80:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8015e84:	e03b      	b.n	8015efe <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015e8c:	f043 0301 	orr.w	r3, r3, #1
 8015e90:	b2da      	uxtb	r2, r3
 8015e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e94:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8015e98:	68ba      	ldr	r2, [r7, #8]
 8015e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e9c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8015e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ea0:	699b      	ldr	r3, [r3, #24]
 8015ea2:	2b00      	cmp	r3, #0
 8015ea4:	d10b      	bne.n	8015ebe <prvProcessReceivedCommands+0x162>
 8015ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015eaa:	b672      	cpsid	i
 8015eac:	f383 8811 	msr	BASEPRI, r3
 8015eb0:	f3bf 8f6f 	isb	sy
 8015eb4:	f3bf 8f4f 	dsb	sy
 8015eb8:	b662      	cpsie	i
 8015eba:	617b      	str	r3, [r7, #20]
 8015ebc:	e7fe      	b.n	8015ebc <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8015ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ec0:	699a      	ldr	r2, [r3, #24]
 8015ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ec4:	18d1      	adds	r1, r2, r3
 8015ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015eca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015ecc:	f7ff ff04 	bl	8015cd8 <prvInsertTimerInActiveList>
					break;
 8015ed0:	e015      	b.n	8015efe <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8015ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ed4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015ed8:	f003 0302 	and.w	r3, r3, #2
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	d103      	bne.n	8015ee8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8015ee0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015ee2:	f000 fbb3 	bl	801664c <vPortFree>
 8015ee6:	e00a      	b.n	8015efe <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015eea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015eee:	f023 0301 	bic.w	r3, r3, #1
 8015ef2:	b2da      	uxtb	r2, r3
 8015ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ef6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8015efa:	e000      	b.n	8015efe <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8015efc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8015efe:	4b07      	ldr	r3, [pc, #28]	; (8015f1c <prvProcessReceivedCommands+0x1c0>)
 8015f00:	681b      	ldr	r3, [r3, #0]
 8015f02:	1d39      	adds	r1, r7, #4
 8015f04:	2200      	movs	r2, #0
 8015f06:	4618      	mov	r0, r3
 8015f08:	f7fe f868 	bl	8013fdc <xQueueReceive>
 8015f0c:	4603      	mov	r3, r0
 8015f0e:	2b00      	cmp	r3, #0
 8015f10:	f47f af28 	bne.w	8015d64 <prvProcessReceivedCommands+0x8>
	}
}
 8015f14:	bf00      	nop
 8015f16:	3730      	adds	r7, #48	; 0x30
 8015f18:	46bd      	mov	sp, r7
 8015f1a:	bd80      	pop	{r7, pc}
 8015f1c:	20000f54 	.word	0x20000f54

08015f20 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8015f20:	b580      	push	{r7, lr}
 8015f22:	b088      	sub	sp, #32
 8015f24:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015f26:	e049      	b.n	8015fbc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015f28:	4b2e      	ldr	r3, [pc, #184]	; (8015fe4 <prvSwitchTimerLists+0xc4>)
 8015f2a:	681b      	ldr	r3, [r3, #0]
 8015f2c:	68db      	ldr	r3, [r3, #12]
 8015f2e:	681b      	ldr	r3, [r3, #0]
 8015f30:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015f32:	4b2c      	ldr	r3, [pc, #176]	; (8015fe4 <prvSwitchTimerLists+0xc4>)
 8015f34:	681b      	ldr	r3, [r3, #0]
 8015f36:	68db      	ldr	r3, [r3, #12]
 8015f38:	68db      	ldr	r3, [r3, #12]
 8015f3a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015f3c:	68fb      	ldr	r3, [r7, #12]
 8015f3e:	3304      	adds	r3, #4
 8015f40:	4618      	mov	r0, r3
 8015f42:	f7fd fb65 	bl	8013610 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015f46:	68fb      	ldr	r3, [r7, #12]
 8015f48:	6a1b      	ldr	r3, [r3, #32]
 8015f4a:	68f8      	ldr	r0, [r7, #12]
 8015f4c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015f4e:	68fb      	ldr	r3, [r7, #12]
 8015f50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015f54:	f003 0304 	and.w	r3, r3, #4
 8015f58:	2b00      	cmp	r3, #0
 8015f5a:	d02f      	beq.n	8015fbc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8015f5c:	68fb      	ldr	r3, [r7, #12]
 8015f5e:	699b      	ldr	r3, [r3, #24]
 8015f60:	693a      	ldr	r2, [r7, #16]
 8015f62:	4413      	add	r3, r2
 8015f64:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8015f66:	68ba      	ldr	r2, [r7, #8]
 8015f68:	693b      	ldr	r3, [r7, #16]
 8015f6a:	429a      	cmp	r2, r3
 8015f6c:	d90e      	bls.n	8015f8c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8015f6e:	68fb      	ldr	r3, [r7, #12]
 8015f70:	68ba      	ldr	r2, [r7, #8]
 8015f72:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015f74:	68fb      	ldr	r3, [r7, #12]
 8015f76:	68fa      	ldr	r2, [r7, #12]
 8015f78:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015f7a:	4b1a      	ldr	r3, [pc, #104]	; (8015fe4 <prvSwitchTimerLists+0xc4>)
 8015f7c:	681a      	ldr	r2, [r3, #0]
 8015f7e:	68fb      	ldr	r3, [r7, #12]
 8015f80:	3304      	adds	r3, #4
 8015f82:	4619      	mov	r1, r3
 8015f84:	4610      	mov	r0, r2
 8015f86:	f7fd fb0a 	bl	801359e <vListInsert>
 8015f8a:	e017      	b.n	8015fbc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015f8c:	2300      	movs	r3, #0
 8015f8e:	9300      	str	r3, [sp, #0]
 8015f90:	2300      	movs	r3, #0
 8015f92:	693a      	ldr	r2, [r7, #16]
 8015f94:	2100      	movs	r1, #0
 8015f96:	68f8      	ldr	r0, [r7, #12]
 8015f98:	f7ff fd5e 	bl	8015a58 <xTimerGenericCommand>
 8015f9c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8015f9e:	687b      	ldr	r3, [r7, #4]
 8015fa0:	2b00      	cmp	r3, #0
 8015fa2:	d10b      	bne.n	8015fbc <prvSwitchTimerLists+0x9c>
 8015fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fa8:	b672      	cpsid	i
 8015faa:	f383 8811 	msr	BASEPRI, r3
 8015fae:	f3bf 8f6f 	isb	sy
 8015fb2:	f3bf 8f4f 	dsb	sy
 8015fb6:	b662      	cpsie	i
 8015fb8:	603b      	str	r3, [r7, #0]
 8015fba:	e7fe      	b.n	8015fba <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015fbc:	4b09      	ldr	r3, [pc, #36]	; (8015fe4 <prvSwitchTimerLists+0xc4>)
 8015fbe:	681b      	ldr	r3, [r3, #0]
 8015fc0:	681b      	ldr	r3, [r3, #0]
 8015fc2:	2b00      	cmp	r3, #0
 8015fc4:	d1b0      	bne.n	8015f28 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8015fc6:	4b07      	ldr	r3, [pc, #28]	; (8015fe4 <prvSwitchTimerLists+0xc4>)
 8015fc8:	681b      	ldr	r3, [r3, #0]
 8015fca:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8015fcc:	4b06      	ldr	r3, [pc, #24]	; (8015fe8 <prvSwitchTimerLists+0xc8>)
 8015fce:	681b      	ldr	r3, [r3, #0]
 8015fd0:	4a04      	ldr	r2, [pc, #16]	; (8015fe4 <prvSwitchTimerLists+0xc4>)
 8015fd2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8015fd4:	4a04      	ldr	r2, [pc, #16]	; (8015fe8 <prvSwitchTimerLists+0xc8>)
 8015fd6:	697b      	ldr	r3, [r7, #20]
 8015fd8:	6013      	str	r3, [r2, #0]
}
 8015fda:	bf00      	nop
 8015fdc:	3718      	adds	r7, #24
 8015fde:	46bd      	mov	sp, r7
 8015fe0:	bd80      	pop	{r7, pc}
 8015fe2:	bf00      	nop
 8015fe4:	20000f4c 	.word	0x20000f4c
 8015fe8:	20000f50 	.word	0x20000f50

08015fec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8015fec:	b580      	push	{r7, lr}
 8015fee:	b082      	sub	sp, #8
 8015ff0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8015ff2:	f000 f941 	bl	8016278 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8015ff6:	4b15      	ldr	r3, [pc, #84]	; (801604c <prvCheckForValidListAndQueue+0x60>)
 8015ff8:	681b      	ldr	r3, [r3, #0]
 8015ffa:	2b00      	cmp	r3, #0
 8015ffc:	d120      	bne.n	8016040 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8015ffe:	4814      	ldr	r0, [pc, #80]	; (8016050 <prvCheckForValidListAndQueue+0x64>)
 8016000:	f7fd fa7c 	bl	80134fc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8016004:	4813      	ldr	r0, [pc, #76]	; (8016054 <prvCheckForValidListAndQueue+0x68>)
 8016006:	f7fd fa79 	bl	80134fc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801600a:	4b13      	ldr	r3, [pc, #76]	; (8016058 <prvCheckForValidListAndQueue+0x6c>)
 801600c:	4a10      	ldr	r2, [pc, #64]	; (8016050 <prvCheckForValidListAndQueue+0x64>)
 801600e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8016010:	4b12      	ldr	r3, [pc, #72]	; (801605c <prvCheckForValidListAndQueue+0x70>)
 8016012:	4a10      	ldr	r2, [pc, #64]	; (8016054 <prvCheckForValidListAndQueue+0x68>)
 8016014:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8016016:	2300      	movs	r3, #0
 8016018:	9300      	str	r3, [sp, #0]
 801601a:	4b11      	ldr	r3, [pc, #68]	; (8016060 <prvCheckForValidListAndQueue+0x74>)
 801601c:	4a11      	ldr	r2, [pc, #68]	; (8016064 <prvCheckForValidListAndQueue+0x78>)
 801601e:	2110      	movs	r1, #16
 8016020:	200a      	movs	r0, #10
 8016022:	f7fd fb89 	bl	8013738 <xQueueGenericCreateStatic>
 8016026:	4602      	mov	r2, r0
 8016028:	4b08      	ldr	r3, [pc, #32]	; (801604c <prvCheckForValidListAndQueue+0x60>)
 801602a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801602c:	4b07      	ldr	r3, [pc, #28]	; (801604c <prvCheckForValidListAndQueue+0x60>)
 801602e:	681b      	ldr	r3, [r3, #0]
 8016030:	2b00      	cmp	r3, #0
 8016032:	d005      	beq.n	8016040 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8016034:	4b05      	ldr	r3, [pc, #20]	; (801604c <prvCheckForValidListAndQueue+0x60>)
 8016036:	681b      	ldr	r3, [r3, #0]
 8016038:	490b      	ldr	r1, [pc, #44]	; (8016068 <prvCheckForValidListAndQueue+0x7c>)
 801603a:	4618      	mov	r0, r3
 801603c:	f7fe fb90 	bl	8014760 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8016040:	f000 f94c 	bl	80162dc <vPortExitCritical>
}
 8016044:	bf00      	nop
 8016046:	46bd      	mov	sp, r7
 8016048:	bd80      	pop	{r7, pc}
 801604a:	bf00      	nop
 801604c:	20000f54 	.word	0x20000f54
 8016050:	20000f24 	.word	0x20000f24
 8016054:	20000f38 	.word	0x20000f38
 8016058:	20000f4c 	.word	0x20000f4c
 801605c:	20000f50 	.word	0x20000f50
 8016060:	20001000 	.word	0x20001000
 8016064:	20000f60 	.word	0x20000f60
 8016068:	0801a1d8 	.word	0x0801a1d8

0801606c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801606c:	b480      	push	{r7}
 801606e:	b085      	sub	sp, #20
 8016070:	af00      	add	r7, sp, #0
 8016072:	60f8      	str	r0, [r7, #12]
 8016074:	60b9      	str	r1, [r7, #8]
 8016076:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8016078:	68fb      	ldr	r3, [r7, #12]
 801607a:	3b04      	subs	r3, #4
 801607c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801607e:	68fb      	ldr	r3, [r7, #12]
 8016080:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8016084:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016086:	68fb      	ldr	r3, [r7, #12]
 8016088:	3b04      	subs	r3, #4
 801608a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801608c:	68bb      	ldr	r3, [r7, #8]
 801608e:	f023 0201 	bic.w	r2, r3, #1
 8016092:	68fb      	ldr	r3, [r7, #12]
 8016094:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016096:	68fb      	ldr	r3, [r7, #12]
 8016098:	3b04      	subs	r3, #4
 801609a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801609c:	4a0c      	ldr	r2, [pc, #48]	; (80160d0 <pxPortInitialiseStack+0x64>)
 801609e:	68fb      	ldr	r3, [r7, #12]
 80160a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80160a2:	68fb      	ldr	r3, [r7, #12]
 80160a4:	3b14      	subs	r3, #20
 80160a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80160a8:	687a      	ldr	r2, [r7, #4]
 80160aa:	68fb      	ldr	r3, [r7, #12]
 80160ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80160ae:	68fb      	ldr	r3, [r7, #12]
 80160b0:	3b04      	subs	r3, #4
 80160b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80160b4:	68fb      	ldr	r3, [r7, #12]
 80160b6:	f06f 0202 	mvn.w	r2, #2
 80160ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80160bc:	68fb      	ldr	r3, [r7, #12]
 80160be:	3b20      	subs	r3, #32
 80160c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80160c2:	68fb      	ldr	r3, [r7, #12]
}
 80160c4:	4618      	mov	r0, r3
 80160c6:	3714      	adds	r7, #20
 80160c8:	46bd      	mov	sp, r7
 80160ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160ce:	4770      	bx	lr
 80160d0:	080160d5 	.word	0x080160d5

080160d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80160d4:	b480      	push	{r7}
 80160d6:	b085      	sub	sp, #20
 80160d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80160da:	2300      	movs	r3, #0
 80160dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80160de:	4b13      	ldr	r3, [pc, #76]	; (801612c <prvTaskExitError+0x58>)
 80160e0:	681b      	ldr	r3, [r3, #0]
 80160e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80160e6:	d00b      	beq.n	8016100 <prvTaskExitError+0x2c>
 80160e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160ec:	b672      	cpsid	i
 80160ee:	f383 8811 	msr	BASEPRI, r3
 80160f2:	f3bf 8f6f 	isb	sy
 80160f6:	f3bf 8f4f 	dsb	sy
 80160fa:	b662      	cpsie	i
 80160fc:	60fb      	str	r3, [r7, #12]
 80160fe:	e7fe      	b.n	80160fe <prvTaskExitError+0x2a>
 8016100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016104:	b672      	cpsid	i
 8016106:	f383 8811 	msr	BASEPRI, r3
 801610a:	f3bf 8f6f 	isb	sy
 801610e:	f3bf 8f4f 	dsb	sy
 8016112:	b662      	cpsie	i
 8016114:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8016116:	bf00      	nop
 8016118:	687b      	ldr	r3, [r7, #4]
 801611a:	2b00      	cmp	r3, #0
 801611c:	d0fc      	beq.n	8016118 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801611e:	bf00      	nop
 8016120:	3714      	adds	r7, #20
 8016122:	46bd      	mov	sp, r7
 8016124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016128:	4770      	bx	lr
 801612a:	bf00      	nop
 801612c:	2000011c 	.word	0x2000011c

08016130 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8016130:	4b07      	ldr	r3, [pc, #28]	; (8016150 <pxCurrentTCBConst2>)
 8016132:	6819      	ldr	r1, [r3, #0]
 8016134:	6808      	ldr	r0, [r1, #0]
 8016136:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801613a:	f380 8809 	msr	PSP, r0
 801613e:	f3bf 8f6f 	isb	sy
 8016142:	f04f 0000 	mov.w	r0, #0
 8016146:	f380 8811 	msr	BASEPRI, r0
 801614a:	4770      	bx	lr
 801614c:	f3af 8000 	nop.w

08016150 <pxCurrentTCBConst2>:
 8016150:	20000a24 	.word	0x20000a24
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8016154:	bf00      	nop
 8016156:	bf00      	nop

08016158 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8016158:	4808      	ldr	r0, [pc, #32]	; (801617c <prvPortStartFirstTask+0x24>)
 801615a:	6800      	ldr	r0, [r0, #0]
 801615c:	6800      	ldr	r0, [r0, #0]
 801615e:	f380 8808 	msr	MSP, r0
 8016162:	f04f 0000 	mov.w	r0, #0
 8016166:	f380 8814 	msr	CONTROL, r0
 801616a:	b662      	cpsie	i
 801616c:	b661      	cpsie	f
 801616e:	f3bf 8f4f 	dsb	sy
 8016172:	f3bf 8f6f 	isb	sy
 8016176:	df00      	svc	0
 8016178:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801617a:	bf00      	nop
 801617c:	e000ed08 	.word	0xe000ed08

08016180 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8016180:	b580      	push	{r7, lr}
 8016182:	b084      	sub	sp, #16
 8016184:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8016186:	4b36      	ldr	r3, [pc, #216]	; (8016260 <xPortStartScheduler+0xe0>)
 8016188:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801618a:	68fb      	ldr	r3, [r7, #12]
 801618c:	781b      	ldrb	r3, [r3, #0]
 801618e:	b2db      	uxtb	r3, r3
 8016190:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8016192:	68fb      	ldr	r3, [r7, #12]
 8016194:	22ff      	movs	r2, #255	; 0xff
 8016196:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8016198:	68fb      	ldr	r3, [r7, #12]
 801619a:	781b      	ldrb	r3, [r3, #0]
 801619c:	b2db      	uxtb	r3, r3
 801619e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80161a0:	78fb      	ldrb	r3, [r7, #3]
 80161a2:	b2db      	uxtb	r3, r3
 80161a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80161a8:	b2da      	uxtb	r2, r3
 80161aa:	4b2e      	ldr	r3, [pc, #184]	; (8016264 <xPortStartScheduler+0xe4>)
 80161ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80161ae:	4b2e      	ldr	r3, [pc, #184]	; (8016268 <xPortStartScheduler+0xe8>)
 80161b0:	2207      	movs	r2, #7
 80161b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80161b4:	e009      	b.n	80161ca <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80161b6:	4b2c      	ldr	r3, [pc, #176]	; (8016268 <xPortStartScheduler+0xe8>)
 80161b8:	681b      	ldr	r3, [r3, #0]
 80161ba:	3b01      	subs	r3, #1
 80161bc:	4a2a      	ldr	r2, [pc, #168]	; (8016268 <xPortStartScheduler+0xe8>)
 80161be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80161c0:	78fb      	ldrb	r3, [r7, #3]
 80161c2:	b2db      	uxtb	r3, r3
 80161c4:	005b      	lsls	r3, r3, #1
 80161c6:	b2db      	uxtb	r3, r3
 80161c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80161ca:	78fb      	ldrb	r3, [r7, #3]
 80161cc:	b2db      	uxtb	r3, r3
 80161ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80161d2:	2b80      	cmp	r3, #128	; 0x80
 80161d4:	d0ef      	beq.n	80161b6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80161d6:	4b24      	ldr	r3, [pc, #144]	; (8016268 <xPortStartScheduler+0xe8>)
 80161d8:	681b      	ldr	r3, [r3, #0]
 80161da:	f1c3 0307 	rsb	r3, r3, #7
 80161de:	2b04      	cmp	r3, #4
 80161e0:	d00b      	beq.n	80161fa <xPortStartScheduler+0x7a>
 80161e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161e6:	b672      	cpsid	i
 80161e8:	f383 8811 	msr	BASEPRI, r3
 80161ec:	f3bf 8f6f 	isb	sy
 80161f0:	f3bf 8f4f 	dsb	sy
 80161f4:	b662      	cpsie	i
 80161f6:	60bb      	str	r3, [r7, #8]
 80161f8:	e7fe      	b.n	80161f8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80161fa:	4b1b      	ldr	r3, [pc, #108]	; (8016268 <xPortStartScheduler+0xe8>)
 80161fc:	681b      	ldr	r3, [r3, #0]
 80161fe:	021b      	lsls	r3, r3, #8
 8016200:	4a19      	ldr	r2, [pc, #100]	; (8016268 <xPortStartScheduler+0xe8>)
 8016202:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8016204:	4b18      	ldr	r3, [pc, #96]	; (8016268 <xPortStartScheduler+0xe8>)
 8016206:	681b      	ldr	r3, [r3, #0]
 8016208:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801620c:	4a16      	ldr	r2, [pc, #88]	; (8016268 <xPortStartScheduler+0xe8>)
 801620e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8016210:	687b      	ldr	r3, [r7, #4]
 8016212:	b2da      	uxtb	r2, r3
 8016214:	68fb      	ldr	r3, [r7, #12]
 8016216:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8016218:	4b14      	ldr	r3, [pc, #80]	; (801626c <xPortStartScheduler+0xec>)
 801621a:	681b      	ldr	r3, [r3, #0]
 801621c:	4a13      	ldr	r2, [pc, #76]	; (801626c <xPortStartScheduler+0xec>)
 801621e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8016222:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8016224:	4b11      	ldr	r3, [pc, #68]	; (801626c <xPortStartScheduler+0xec>)
 8016226:	681b      	ldr	r3, [r3, #0]
 8016228:	4a10      	ldr	r2, [pc, #64]	; (801626c <xPortStartScheduler+0xec>)
 801622a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801622e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8016230:	f000 f8d4 	bl	80163dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8016234:	4b0e      	ldr	r3, [pc, #56]	; (8016270 <xPortStartScheduler+0xf0>)
 8016236:	2200      	movs	r2, #0
 8016238:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801623a:	f000 f8f3 	bl	8016424 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801623e:	4b0d      	ldr	r3, [pc, #52]	; (8016274 <xPortStartScheduler+0xf4>)
 8016240:	681b      	ldr	r3, [r3, #0]
 8016242:	4a0c      	ldr	r2, [pc, #48]	; (8016274 <xPortStartScheduler+0xf4>)
 8016244:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8016248:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801624a:	f7ff ff85 	bl	8016158 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801624e:	f7fe ff59 	bl	8015104 <vTaskSwitchContext>
	prvTaskExitError();
 8016252:	f7ff ff3f 	bl	80160d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8016256:	2300      	movs	r3, #0
}
 8016258:	4618      	mov	r0, r3
 801625a:	3710      	adds	r7, #16
 801625c:	46bd      	mov	sp, r7
 801625e:	bd80      	pop	{r7, pc}
 8016260:	e000e400 	.word	0xe000e400
 8016264:	20001050 	.word	0x20001050
 8016268:	20001054 	.word	0x20001054
 801626c:	e000ed20 	.word	0xe000ed20
 8016270:	2000011c 	.word	0x2000011c
 8016274:	e000ef34 	.word	0xe000ef34

08016278 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8016278:	b480      	push	{r7}
 801627a:	b083      	sub	sp, #12
 801627c:	af00      	add	r7, sp, #0
 801627e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016282:	b672      	cpsid	i
 8016284:	f383 8811 	msr	BASEPRI, r3
 8016288:	f3bf 8f6f 	isb	sy
 801628c:	f3bf 8f4f 	dsb	sy
 8016290:	b662      	cpsie	i
 8016292:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8016294:	4b0f      	ldr	r3, [pc, #60]	; (80162d4 <vPortEnterCritical+0x5c>)
 8016296:	681b      	ldr	r3, [r3, #0]
 8016298:	3301      	adds	r3, #1
 801629a:	4a0e      	ldr	r2, [pc, #56]	; (80162d4 <vPortEnterCritical+0x5c>)
 801629c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801629e:	4b0d      	ldr	r3, [pc, #52]	; (80162d4 <vPortEnterCritical+0x5c>)
 80162a0:	681b      	ldr	r3, [r3, #0]
 80162a2:	2b01      	cmp	r3, #1
 80162a4:	d110      	bne.n	80162c8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80162a6:	4b0c      	ldr	r3, [pc, #48]	; (80162d8 <vPortEnterCritical+0x60>)
 80162a8:	681b      	ldr	r3, [r3, #0]
 80162aa:	b2db      	uxtb	r3, r3
 80162ac:	2b00      	cmp	r3, #0
 80162ae:	d00b      	beq.n	80162c8 <vPortEnterCritical+0x50>
 80162b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162b4:	b672      	cpsid	i
 80162b6:	f383 8811 	msr	BASEPRI, r3
 80162ba:	f3bf 8f6f 	isb	sy
 80162be:	f3bf 8f4f 	dsb	sy
 80162c2:	b662      	cpsie	i
 80162c4:	603b      	str	r3, [r7, #0]
 80162c6:	e7fe      	b.n	80162c6 <vPortEnterCritical+0x4e>
	}
}
 80162c8:	bf00      	nop
 80162ca:	370c      	adds	r7, #12
 80162cc:	46bd      	mov	sp, r7
 80162ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162d2:	4770      	bx	lr
 80162d4:	2000011c 	.word	0x2000011c
 80162d8:	e000ed04 	.word	0xe000ed04

080162dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80162dc:	b480      	push	{r7}
 80162de:	b083      	sub	sp, #12
 80162e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80162e2:	4b12      	ldr	r3, [pc, #72]	; (801632c <vPortExitCritical+0x50>)
 80162e4:	681b      	ldr	r3, [r3, #0]
 80162e6:	2b00      	cmp	r3, #0
 80162e8:	d10b      	bne.n	8016302 <vPortExitCritical+0x26>
 80162ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162ee:	b672      	cpsid	i
 80162f0:	f383 8811 	msr	BASEPRI, r3
 80162f4:	f3bf 8f6f 	isb	sy
 80162f8:	f3bf 8f4f 	dsb	sy
 80162fc:	b662      	cpsie	i
 80162fe:	607b      	str	r3, [r7, #4]
 8016300:	e7fe      	b.n	8016300 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8016302:	4b0a      	ldr	r3, [pc, #40]	; (801632c <vPortExitCritical+0x50>)
 8016304:	681b      	ldr	r3, [r3, #0]
 8016306:	3b01      	subs	r3, #1
 8016308:	4a08      	ldr	r2, [pc, #32]	; (801632c <vPortExitCritical+0x50>)
 801630a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801630c:	4b07      	ldr	r3, [pc, #28]	; (801632c <vPortExitCritical+0x50>)
 801630e:	681b      	ldr	r3, [r3, #0]
 8016310:	2b00      	cmp	r3, #0
 8016312:	d104      	bne.n	801631e <vPortExitCritical+0x42>
 8016314:	2300      	movs	r3, #0
 8016316:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016318:	683b      	ldr	r3, [r7, #0]
 801631a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 801631e:	bf00      	nop
 8016320:	370c      	adds	r7, #12
 8016322:	46bd      	mov	sp, r7
 8016324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016328:	4770      	bx	lr
 801632a:	bf00      	nop
 801632c:	2000011c 	.word	0x2000011c

08016330 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8016330:	f3ef 8009 	mrs	r0, PSP
 8016334:	f3bf 8f6f 	isb	sy
 8016338:	4b15      	ldr	r3, [pc, #84]	; (8016390 <pxCurrentTCBConst>)
 801633a:	681a      	ldr	r2, [r3, #0]
 801633c:	f01e 0f10 	tst.w	lr, #16
 8016340:	bf08      	it	eq
 8016342:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016346:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801634a:	6010      	str	r0, [r2, #0]
 801634c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016350:	f04f 0050 	mov.w	r0, #80	; 0x50
 8016354:	b672      	cpsid	i
 8016356:	f380 8811 	msr	BASEPRI, r0
 801635a:	f3bf 8f4f 	dsb	sy
 801635e:	f3bf 8f6f 	isb	sy
 8016362:	b662      	cpsie	i
 8016364:	f7fe fece 	bl	8015104 <vTaskSwitchContext>
 8016368:	f04f 0000 	mov.w	r0, #0
 801636c:	f380 8811 	msr	BASEPRI, r0
 8016370:	bc09      	pop	{r0, r3}
 8016372:	6819      	ldr	r1, [r3, #0]
 8016374:	6808      	ldr	r0, [r1, #0]
 8016376:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801637a:	f01e 0f10 	tst.w	lr, #16
 801637e:	bf08      	it	eq
 8016380:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8016384:	f380 8809 	msr	PSP, r0
 8016388:	f3bf 8f6f 	isb	sy
 801638c:	4770      	bx	lr
 801638e:	bf00      	nop

08016390 <pxCurrentTCBConst>:
 8016390:	20000a24 	.word	0x20000a24
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8016394:	bf00      	nop
 8016396:	bf00      	nop

08016398 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8016398:	b580      	push	{r7, lr}
 801639a:	b082      	sub	sp, #8
 801639c:	af00      	add	r7, sp, #0
	__asm volatile
 801639e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163a2:	b672      	cpsid	i
 80163a4:	f383 8811 	msr	BASEPRI, r3
 80163a8:	f3bf 8f6f 	isb	sy
 80163ac:	f3bf 8f4f 	dsb	sy
 80163b0:	b662      	cpsie	i
 80163b2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80163b4:	f7fe fdec 	bl	8014f90 <xTaskIncrementTick>
 80163b8:	4603      	mov	r3, r0
 80163ba:	2b00      	cmp	r3, #0
 80163bc:	d003      	beq.n	80163c6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80163be:	4b06      	ldr	r3, [pc, #24]	; (80163d8 <SysTick_Handler+0x40>)
 80163c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80163c4:	601a      	str	r2, [r3, #0]
 80163c6:	2300      	movs	r3, #0
 80163c8:	603b      	str	r3, [r7, #0]
	__asm volatile
 80163ca:	683b      	ldr	r3, [r7, #0]
 80163cc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80163d0:	bf00      	nop
 80163d2:	3708      	adds	r7, #8
 80163d4:	46bd      	mov	sp, r7
 80163d6:	bd80      	pop	{r7, pc}
 80163d8:	e000ed04 	.word	0xe000ed04

080163dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80163dc:	b480      	push	{r7}
 80163de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80163e0:	4b0b      	ldr	r3, [pc, #44]	; (8016410 <vPortSetupTimerInterrupt+0x34>)
 80163e2:	2200      	movs	r2, #0
 80163e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80163e6:	4b0b      	ldr	r3, [pc, #44]	; (8016414 <vPortSetupTimerInterrupt+0x38>)
 80163e8:	2200      	movs	r2, #0
 80163ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80163ec:	4b0a      	ldr	r3, [pc, #40]	; (8016418 <vPortSetupTimerInterrupt+0x3c>)
 80163ee:	681b      	ldr	r3, [r3, #0]
 80163f0:	4a0a      	ldr	r2, [pc, #40]	; (801641c <vPortSetupTimerInterrupt+0x40>)
 80163f2:	fba2 2303 	umull	r2, r3, r2, r3
 80163f6:	099b      	lsrs	r3, r3, #6
 80163f8:	4a09      	ldr	r2, [pc, #36]	; (8016420 <vPortSetupTimerInterrupt+0x44>)
 80163fa:	3b01      	subs	r3, #1
 80163fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80163fe:	4b04      	ldr	r3, [pc, #16]	; (8016410 <vPortSetupTimerInterrupt+0x34>)
 8016400:	2207      	movs	r2, #7
 8016402:	601a      	str	r2, [r3, #0]
}
 8016404:	bf00      	nop
 8016406:	46bd      	mov	sp, r7
 8016408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801640c:	4770      	bx	lr
 801640e:	bf00      	nop
 8016410:	e000e010 	.word	0xe000e010
 8016414:	e000e018 	.word	0xe000e018
 8016418:	20000000 	.word	0x20000000
 801641c:	10624dd3 	.word	0x10624dd3
 8016420:	e000e014 	.word	0xe000e014

08016424 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8016424:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8016434 <vPortEnableVFP+0x10>
 8016428:	6801      	ldr	r1, [r0, #0]
 801642a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801642e:	6001      	str	r1, [r0, #0]
 8016430:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8016432:	bf00      	nop
 8016434:	e000ed88 	.word	0xe000ed88

08016438 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8016438:	b480      	push	{r7}
 801643a:	b085      	sub	sp, #20
 801643c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801643e:	f3ef 8305 	mrs	r3, IPSR
 8016442:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016444:	68fb      	ldr	r3, [r7, #12]
 8016446:	2b0f      	cmp	r3, #15
 8016448:	d915      	bls.n	8016476 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801644a:	4a18      	ldr	r2, [pc, #96]	; (80164ac <vPortValidateInterruptPriority+0x74>)
 801644c:	68fb      	ldr	r3, [r7, #12]
 801644e:	4413      	add	r3, r2
 8016450:	781b      	ldrb	r3, [r3, #0]
 8016452:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016454:	4b16      	ldr	r3, [pc, #88]	; (80164b0 <vPortValidateInterruptPriority+0x78>)
 8016456:	781b      	ldrb	r3, [r3, #0]
 8016458:	7afa      	ldrb	r2, [r7, #11]
 801645a:	429a      	cmp	r2, r3
 801645c:	d20b      	bcs.n	8016476 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801645e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016462:	b672      	cpsid	i
 8016464:	f383 8811 	msr	BASEPRI, r3
 8016468:	f3bf 8f6f 	isb	sy
 801646c:	f3bf 8f4f 	dsb	sy
 8016470:	b662      	cpsie	i
 8016472:	607b      	str	r3, [r7, #4]
 8016474:	e7fe      	b.n	8016474 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8016476:	4b0f      	ldr	r3, [pc, #60]	; (80164b4 <vPortValidateInterruptPriority+0x7c>)
 8016478:	681b      	ldr	r3, [r3, #0]
 801647a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801647e:	4b0e      	ldr	r3, [pc, #56]	; (80164b8 <vPortValidateInterruptPriority+0x80>)
 8016480:	681b      	ldr	r3, [r3, #0]
 8016482:	429a      	cmp	r2, r3
 8016484:	d90b      	bls.n	801649e <vPortValidateInterruptPriority+0x66>
 8016486:	f04f 0350 	mov.w	r3, #80	; 0x50
 801648a:	b672      	cpsid	i
 801648c:	f383 8811 	msr	BASEPRI, r3
 8016490:	f3bf 8f6f 	isb	sy
 8016494:	f3bf 8f4f 	dsb	sy
 8016498:	b662      	cpsie	i
 801649a:	603b      	str	r3, [r7, #0]
 801649c:	e7fe      	b.n	801649c <vPortValidateInterruptPriority+0x64>
	}
 801649e:	bf00      	nop
 80164a0:	3714      	adds	r7, #20
 80164a2:	46bd      	mov	sp, r7
 80164a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164a8:	4770      	bx	lr
 80164aa:	bf00      	nop
 80164ac:	e000e3f0 	.word	0xe000e3f0
 80164b0:	20001050 	.word	0x20001050
 80164b4:	e000ed0c 	.word	0xe000ed0c
 80164b8:	20001054 	.word	0x20001054

080164bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80164bc:	b580      	push	{r7, lr}
 80164be:	b08a      	sub	sp, #40	; 0x28
 80164c0:	af00      	add	r7, sp, #0
 80164c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80164c4:	2300      	movs	r3, #0
 80164c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80164c8:	f7fe fc94 	bl	8014df4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80164cc:	4b5a      	ldr	r3, [pc, #360]	; (8016638 <pvPortMalloc+0x17c>)
 80164ce:	681b      	ldr	r3, [r3, #0]
 80164d0:	2b00      	cmp	r3, #0
 80164d2:	d101      	bne.n	80164d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80164d4:	f000 f916 	bl	8016704 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80164d8:	4b58      	ldr	r3, [pc, #352]	; (801663c <pvPortMalloc+0x180>)
 80164da:	681a      	ldr	r2, [r3, #0]
 80164dc:	687b      	ldr	r3, [r7, #4]
 80164de:	4013      	ands	r3, r2
 80164e0:	2b00      	cmp	r3, #0
 80164e2:	f040 8090 	bne.w	8016606 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80164e6:	687b      	ldr	r3, [r7, #4]
 80164e8:	2b00      	cmp	r3, #0
 80164ea:	d01e      	beq.n	801652a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80164ec:	2208      	movs	r2, #8
 80164ee:	687b      	ldr	r3, [r7, #4]
 80164f0:	4413      	add	r3, r2
 80164f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80164f4:	687b      	ldr	r3, [r7, #4]
 80164f6:	f003 0307 	and.w	r3, r3, #7
 80164fa:	2b00      	cmp	r3, #0
 80164fc:	d015      	beq.n	801652a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80164fe:	687b      	ldr	r3, [r7, #4]
 8016500:	f023 0307 	bic.w	r3, r3, #7
 8016504:	3308      	adds	r3, #8
 8016506:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	f003 0307 	and.w	r3, r3, #7
 801650e:	2b00      	cmp	r3, #0
 8016510:	d00b      	beq.n	801652a <pvPortMalloc+0x6e>
 8016512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016516:	b672      	cpsid	i
 8016518:	f383 8811 	msr	BASEPRI, r3
 801651c:	f3bf 8f6f 	isb	sy
 8016520:	f3bf 8f4f 	dsb	sy
 8016524:	b662      	cpsie	i
 8016526:	617b      	str	r3, [r7, #20]
 8016528:	e7fe      	b.n	8016528 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801652a:	687b      	ldr	r3, [r7, #4]
 801652c:	2b00      	cmp	r3, #0
 801652e:	d06a      	beq.n	8016606 <pvPortMalloc+0x14a>
 8016530:	4b43      	ldr	r3, [pc, #268]	; (8016640 <pvPortMalloc+0x184>)
 8016532:	681b      	ldr	r3, [r3, #0]
 8016534:	687a      	ldr	r2, [r7, #4]
 8016536:	429a      	cmp	r2, r3
 8016538:	d865      	bhi.n	8016606 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801653a:	4b42      	ldr	r3, [pc, #264]	; (8016644 <pvPortMalloc+0x188>)
 801653c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801653e:	4b41      	ldr	r3, [pc, #260]	; (8016644 <pvPortMalloc+0x188>)
 8016540:	681b      	ldr	r3, [r3, #0]
 8016542:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016544:	e004      	b.n	8016550 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8016546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016548:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801654a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801654c:	681b      	ldr	r3, [r3, #0]
 801654e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016552:	685b      	ldr	r3, [r3, #4]
 8016554:	687a      	ldr	r2, [r7, #4]
 8016556:	429a      	cmp	r2, r3
 8016558:	d903      	bls.n	8016562 <pvPortMalloc+0xa6>
 801655a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801655c:	681b      	ldr	r3, [r3, #0]
 801655e:	2b00      	cmp	r3, #0
 8016560:	d1f1      	bne.n	8016546 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8016562:	4b35      	ldr	r3, [pc, #212]	; (8016638 <pvPortMalloc+0x17c>)
 8016564:	681b      	ldr	r3, [r3, #0]
 8016566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016568:	429a      	cmp	r2, r3
 801656a:	d04c      	beq.n	8016606 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801656c:	6a3b      	ldr	r3, [r7, #32]
 801656e:	681b      	ldr	r3, [r3, #0]
 8016570:	2208      	movs	r2, #8
 8016572:	4413      	add	r3, r2
 8016574:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8016576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016578:	681a      	ldr	r2, [r3, #0]
 801657a:	6a3b      	ldr	r3, [r7, #32]
 801657c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801657e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016580:	685a      	ldr	r2, [r3, #4]
 8016582:	687b      	ldr	r3, [r7, #4]
 8016584:	1ad2      	subs	r2, r2, r3
 8016586:	2308      	movs	r3, #8
 8016588:	005b      	lsls	r3, r3, #1
 801658a:	429a      	cmp	r2, r3
 801658c:	d920      	bls.n	80165d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801658e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	4413      	add	r3, r2
 8016594:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016596:	69bb      	ldr	r3, [r7, #24]
 8016598:	f003 0307 	and.w	r3, r3, #7
 801659c:	2b00      	cmp	r3, #0
 801659e:	d00b      	beq.n	80165b8 <pvPortMalloc+0xfc>
 80165a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80165a4:	b672      	cpsid	i
 80165a6:	f383 8811 	msr	BASEPRI, r3
 80165aa:	f3bf 8f6f 	isb	sy
 80165ae:	f3bf 8f4f 	dsb	sy
 80165b2:	b662      	cpsie	i
 80165b4:	613b      	str	r3, [r7, #16]
 80165b6:	e7fe      	b.n	80165b6 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80165b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165ba:	685a      	ldr	r2, [r3, #4]
 80165bc:	687b      	ldr	r3, [r7, #4]
 80165be:	1ad2      	subs	r2, r2, r3
 80165c0:	69bb      	ldr	r3, [r7, #24]
 80165c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80165c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165c6:	687a      	ldr	r2, [r7, #4]
 80165c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80165ca:	69b8      	ldr	r0, [r7, #24]
 80165cc:	f000 f8fc 	bl	80167c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80165d0:	4b1b      	ldr	r3, [pc, #108]	; (8016640 <pvPortMalloc+0x184>)
 80165d2:	681a      	ldr	r2, [r3, #0]
 80165d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165d6:	685b      	ldr	r3, [r3, #4]
 80165d8:	1ad3      	subs	r3, r2, r3
 80165da:	4a19      	ldr	r2, [pc, #100]	; (8016640 <pvPortMalloc+0x184>)
 80165dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80165de:	4b18      	ldr	r3, [pc, #96]	; (8016640 <pvPortMalloc+0x184>)
 80165e0:	681a      	ldr	r2, [r3, #0]
 80165e2:	4b19      	ldr	r3, [pc, #100]	; (8016648 <pvPortMalloc+0x18c>)
 80165e4:	681b      	ldr	r3, [r3, #0]
 80165e6:	429a      	cmp	r2, r3
 80165e8:	d203      	bcs.n	80165f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80165ea:	4b15      	ldr	r3, [pc, #84]	; (8016640 <pvPortMalloc+0x184>)
 80165ec:	681b      	ldr	r3, [r3, #0]
 80165ee:	4a16      	ldr	r2, [pc, #88]	; (8016648 <pvPortMalloc+0x18c>)
 80165f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80165f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165f4:	685a      	ldr	r2, [r3, #4]
 80165f6:	4b11      	ldr	r3, [pc, #68]	; (801663c <pvPortMalloc+0x180>)
 80165f8:	681b      	ldr	r3, [r3, #0]
 80165fa:	431a      	orrs	r2, r3
 80165fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8016600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016602:	2200      	movs	r2, #0
 8016604:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8016606:	f7fe fc03 	bl	8014e10 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801660a:	69fb      	ldr	r3, [r7, #28]
 801660c:	f003 0307 	and.w	r3, r3, #7
 8016610:	2b00      	cmp	r3, #0
 8016612:	d00b      	beq.n	801662c <pvPortMalloc+0x170>
 8016614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016618:	b672      	cpsid	i
 801661a:	f383 8811 	msr	BASEPRI, r3
 801661e:	f3bf 8f6f 	isb	sy
 8016622:	f3bf 8f4f 	dsb	sy
 8016626:	b662      	cpsie	i
 8016628:	60fb      	str	r3, [r7, #12]
 801662a:	e7fe      	b.n	801662a <pvPortMalloc+0x16e>
	return pvReturn;
 801662c:	69fb      	ldr	r3, [r7, #28]
}
 801662e:	4618      	mov	r0, r3
 8016630:	3728      	adds	r7, #40	; 0x28
 8016632:	46bd      	mov	sp, r7
 8016634:	bd80      	pop	{r7, pc}
 8016636:	bf00      	nop
 8016638:	20008860 	.word	0x20008860
 801663c:	2000886c 	.word	0x2000886c
 8016640:	20008864 	.word	0x20008864
 8016644:	20008858 	.word	0x20008858
 8016648:	20008868 	.word	0x20008868

0801664c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801664c:	b580      	push	{r7, lr}
 801664e:	b086      	sub	sp, #24
 8016650:	af00      	add	r7, sp, #0
 8016652:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016654:	687b      	ldr	r3, [r7, #4]
 8016656:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	2b00      	cmp	r3, #0
 801665c:	d04a      	beq.n	80166f4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801665e:	2308      	movs	r3, #8
 8016660:	425b      	negs	r3, r3
 8016662:	697a      	ldr	r2, [r7, #20]
 8016664:	4413      	add	r3, r2
 8016666:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8016668:	697b      	ldr	r3, [r7, #20]
 801666a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801666c:	693b      	ldr	r3, [r7, #16]
 801666e:	685a      	ldr	r2, [r3, #4]
 8016670:	4b22      	ldr	r3, [pc, #136]	; (80166fc <vPortFree+0xb0>)
 8016672:	681b      	ldr	r3, [r3, #0]
 8016674:	4013      	ands	r3, r2
 8016676:	2b00      	cmp	r3, #0
 8016678:	d10b      	bne.n	8016692 <vPortFree+0x46>
 801667a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801667e:	b672      	cpsid	i
 8016680:	f383 8811 	msr	BASEPRI, r3
 8016684:	f3bf 8f6f 	isb	sy
 8016688:	f3bf 8f4f 	dsb	sy
 801668c:	b662      	cpsie	i
 801668e:	60fb      	str	r3, [r7, #12]
 8016690:	e7fe      	b.n	8016690 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8016692:	693b      	ldr	r3, [r7, #16]
 8016694:	681b      	ldr	r3, [r3, #0]
 8016696:	2b00      	cmp	r3, #0
 8016698:	d00b      	beq.n	80166b2 <vPortFree+0x66>
 801669a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801669e:	b672      	cpsid	i
 80166a0:	f383 8811 	msr	BASEPRI, r3
 80166a4:	f3bf 8f6f 	isb	sy
 80166a8:	f3bf 8f4f 	dsb	sy
 80166ac:	b662      	cpsie	i
 80166ae:	60bb      	str	r3, [r7, #8]
 80166b0:	e7fe      	b.n	80166b0 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80166b2:	693b      	ldr	r3, [r7, #16]
 80166b4:	685a      	ldr	r2, [r3, #4]
 80166b6:	4b11      	ldr	r3, [pc, #68]	; (80166fc <vPortFree+0xb0>)
 80166b8:	681b      	ldr	r3, [r3, #0]
 80166ba:	4013      	ands	r3, r2
 80166bc:	2b00      	cmp	r3, #0
 80166be:	d019      	beq.n	80166f4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80166c0:	693b      	ldr	r3, [r7, #16]
 80166c2:	681b      	ldr	r3, [r3, #0]
 80166c4:	2b00      	cmp	r3, #0
 80166c6:	d115      	bne.n	80166f4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80166c8:	693b      	ldr	r3, [r7, #16]
 80166ca:	685a      	ldr	r2, [r3, #4]
 80166cc:	4b0b      	ldr	r3, [pc, #44]	; (80166fc <vPortFree+0xb0>)
 80166ce:	681b      	ldr	r3, [r3, #0]
 80166d0:	43db      	mvns	r3, r3
 80166d2:	401a      	ands	r2, r3
 80166d4:	693b      	ldr	r3, [r7, #16]
 80166d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80166d8:	f7fe fb8c 	bl	8014df4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80166dc:	693b      	ldr	r3, [r7, #16]
 80166de:	685a      	ldr	r2, [r3, #4]
 80166e0:	4b07      	ldr	r3, [pc, #28]	; (8016700 <vPortFree+0xb4>)
 80166e2:	681b      	ldr	r3, [r3, #0]
 80166e4:	4413      	add	r3, r2
 80166e6:	4a06      	ldr	r2, [pc, #24]	; (8016700 <vPortFree+0xb4>)
 80166e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80166ea:	6938      	ldr	r0, [r7, #16]
 80166ec:	f000 f86c 	bl	80167c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80166f0:	f7fe fb8e 	bl	8014e10 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80166f4:	bf00      	nop
 80166f6:	3718      	adds	r7, #24
 80166f8:	46bd      	mov	sp, r7
 80166fa:	bd80      	pop	{r7, pc}
 80166fc:	2000886c 	.word	0x2000886c
 8016700:	20008864 	.word	0x20008864

08016704 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8016704:	b480      	push	{r7}
 8016706:	b085      	sub	sp, #20
 8016708:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801670a:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 801670e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8016710:	4b27      	ldr	r3, [pc, #156]	; (80167b0 <prvHeapInit+0xac>)
 8016712:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016714:	68fb      	ldr	r3, [r7, #12]
 8016716:	f003 0307 	and.w	r3, r3, #7
 801671a:	2b00      	cmp	r3, #0
 801671c:	d00c      	beq.n	8016738 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801671e:	68fb      	ldr	r3, [r7, #12]
 8016720:	3307      	adds	r3, #7
 8016722:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016724:	68fb      	ldr	r3, [r7, #12]
 8016726:	f023 0307 	bic.w	r3, r3, #7
 801672a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801672c:	68ba      	ldr	r2, [r7, #8]
 801672e:	68fb      	ldr	r3, [r7, #12]
 8016730:	1ad3      	subs	r3, r2, r3
 8016732:	4a1f      	ldr	r2, [pc, #124]	; (80167b0 <prvHeapInit+0xac>)
 8016734:	4413      	add	r3, r2
 8016736:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016738:	68fb      	ldr	r3, [r7, #12]
 801673a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801673c:	4a1d      	ldr	r2, [pc, #116]	; (80167b4 <prvHeapInit+0xb0>)
 801673e:	687b      	ldr	r3, [r7, #4]
 8016740:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8016742:	4b1c      	ldr	r3, [pc, #112]	; (80167b4 <prvHeapInit+0xb0>)
 8016744:	2200      	movs	r2, #0
 8016746:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016748:	687b      	ldr	r3, [r7, #4]
 801674a:	68ba      	ldr	r2, [r7, #8]
 801674c:	4413      	add	r3, r2
 801674e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8016750:	2208      	movs	r2, #8
 8016752:	68fb      	ldr	r3, [r7, #12]
 8016754:	1a9b      	subs	r3, r3, r2
 8016756:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016758:	68fb      	ldr	r3, [r7, #12]
 801675a:	f023 0307 	bic.w	r3, r3, #7
 801675e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8016760:	68fb      	ldr	r3, [r7, #12]
 8016762:	4a15      	ldr	r2, [pc, #84]	; (80167b8 <prvHeapInit+0xb4>)
 8016764:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016766:	4b14      	ldr	r3, [pc, #80]	; (80167b8 <prvHeapInit+0xb4>)
 8016768:	681b      	ldr	r3, [r3, #0]
 801676a:	2200      	movs	r2, #0
 801676c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801676e:	4b12      	ldr	r3, [pc, #72]	; (80167b8 <prvHeapInit+0xb4>)
 8016770:	681b      	ldr	r3, [r3, #0]
 8016772:	2200      	movs	r2, #0
 8016774:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016776:	687b      	ldr	r3, [r7, #4]
 8016778:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801677a:	683b      	ldr	r3, [r7, #0]
 801677c:	68fa      	ldr	r2, [r7, #12]
 801677e:	1ad2      	subs	r2, r2, r3
 8016780:	683b      	ldr	r3, [r7, #0]
 8016782:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016784:	4b0c      	ldr	r3, [pc, #48]	; (80167b8 <prvHeapInit+0xb4>)
 8016786:	681a      	ldr	r2, [r3, #0]
 8016788:	683b      	ldr	r3, [r7, #0]
 801678a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801678c:	683b      	ldr	r3, [r7, #0]
 801678e:	685b      	ldr	r3, [r3, #4]
 8016790:	4a0a      	ldr	r2, [pc, #40]	; (80167bc <prvHeapInit+0xb8>)
 8016792:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016794:	683b      	ldr	r3, [r7, #0]
 8016796:	685b      	ldr	r3, [r3, #4]
 8016798:	4a09      	ldr	r2, [pc, #36]	; (80167c0 <prvHeapInit+0xbc>)
 801679a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801679c:	4b09      	ldr	r3, [pc, #36]	; (80167c4 <prvHeapInit+0xc0>)
 801679e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80167a2:	601a      	str	r2, [r3, #0]
}
 80167a4:	bf00      	nop
 80167a6:	3714      	adds	r7, #20
 80167a8:	46bd      	mov	sp, r7
 80167aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167ae:	4770      	bx	lr
 80167b0:	20001058 	.word	0x20001058
 80167b4:	20008858 	.word	0x20008858
 80167b8:	20008860 	.word	0x20008860
 80167bc:	20008868 	.word	0x20008868
 80167c0:	20008864 	.word	0x20008864
 80167c4:	2000886c 	.word	0x2000886c

080167c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80167c8:	b480      	push	{r7}
 80167ca:	b085      	sub	sp, #20
 80167cc:	af00      	add	r7, sp, #0
 80167ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80167d0:	4b28      	ldr	r3, [pc, #160]	; (8016874 <prvInsertBlockIntoFreeList+0xac>)
 80167d2:	60fb      	str	r3, [r7, #12]
 80167d4:	e002      	b.n	80167dc <prvInsertBlockIntoFreeList+0x14>
 80167d6:	68fb      	ldr	r3, [r7, #12]
 80167d8:	681b      	ldr	r3, [r3, #0]
 80167da:	60fb      	str	r3, [r7, #12]
 80167dc:	68fb      	ldr	r3, [r7, #12]
 80167de:	681b      	ldr	r3, [r3, #0]
 80167e0:	687a      	ldr	r2, [r7, #4]
 80167e2:	429a      	cmp	r2, r3
 80167e4:	d8f7      	bhi.n	80167d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80167e6:	68fb      	ldr	r3, [r7, #12]
 80167e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80167ea:	68fb      	ldr	r3, [r7, #12]
 80167ec:	685b      	ldr	r3, [r3, #4]
 80167ee:	68ba      	ldr	r2, [r7, #8]
 80167f0:	4413      	add	r3, r2
 80167f2:	687a      	ldr	r2, [r7, #4]
 80167f4:	429a      	cmp	r2, r3
 80167f6:	d108      	bne.n	801680a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80167f8:	68fb      	ldr	r3, [r7, #12]
 80167fa:	685a      	ldr	r2, [r3, #4]
 80167fc:	687b      	ldr	r3, [r7, #4]
 80167fe:	685b      	ldr	r3, [r3, #4]
 8016800:	441a      	add	r2, r3
 8016802:	68fb      	ldr	r3, [r7, #12]
 8016804:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8016806:	68fb      	ldr	r3, [r7, #12]
 8016808:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801680a:	687b      	ldr	r3, [r7, #4]
 801680c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801680e:	687b      	ldr	r3, [r7, #4]
 8016810:	685b      	ldr	r3, [r3, #4]
 8016812:	68ba      	ldr	r2, [r7, #8]
 8016814:	441a      	add	r2, r3
 8016816:	68fb      	ldr	r3, [r7, #12]
 8016818:	681b      	ldr	r3, [r3, #0]
 801681a:	429a      	cmp	r2, r3
 801681c:	d118      	bne.n	8016850 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801681e:	68fb      	ldr	r3, [r7, #12]
 8016820:	681a      	ldr	r2, [r3, #0]
 8016822:	4b15      	ldr	r3, [pc, #84]	; (8016878 <prvInsertBlockIntoFreeList+0xb0>)
 8016824:	681b      	ldr	r3, [r3, #0]
 8016826:	429a      	cmp	r2, r3
 8016828:	d00d      	beq.n	8016846 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	685a      	ldr	r2, [r3, #4]
 801682e:	68fb      	ldr	r3, [r7, #12]
 8016830:	681b      	ldr	r3, [r3, #0]
 8016832:	685b      	ldr	r3, [r3, #4]
 8016834:	441a      	add	r2, r3
 8016836:	687b      	ldr	r3, [r7, #4]
 8016838:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801683a:	68fb      	ldr	r3, [r7, #12]
 801683c:	681b      	ldr	r3, [r3, #0]
 801683e:	681a      	ldr	r2, [r3, #0]
 8016840:	687b      	ldr	r3, [r7, #4]
 8016842:	601a      	str	r2, [r3, #0]
 8016844:	e008      	b.n	8016858 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8016846:	4b0c      	ldr	r3, [pc, #48]	; (8016878 <prvInsertBlockIntoFreeList+0xb0>)
 8016848:	681a      	ldr	r2, [r3, #0]
 801684a:	687b      	ldr	r3, [r7, #4]
 801684c:	601a      	str	r2, [r3, #0]
 801684e:	e003      	b.n	8016858 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8016850:	68fb      	ldr	r3, [r7, #12]
 8016852:	681a      	ldr	r2, [r3, #0]
 8016854:	687b      	ldr	r3, [r7, #4]
 8016856:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8016858:	68fa      	ldr	r2, [r7, #12]
 801685a:	687b      	ldr	r3, [r7, #4]
 801685c:	429a      	cmp	r2, r3
 801685e:	d002      	beq.n	8016866 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8016860:	68fb      	ldr	r3, [r7, #12]
 8016862:	687a      	ldr	r2, [r7, #4]
 8016864:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016866:	bf00      	nop
 8016868:	3714      	adds	r7, #20
 801686a:	46bd      	mov	sp, r7
 801686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016870:	4770      	bx	lr
 8016872:	bf00      	nop
 8016874:	20008858 	.word	0x20008858
 8016878:	20008860 	.word	0x20008860

0801687c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801687c:	b580      	push	{r7, lr}
 801687e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8016880:	2200      	movs	r2, #0
 8016882:	4912      	ldr	r1, [pc, #72]	; (80168cc <MX_USB_DEVICE_Init+0x50>)
 8016884:	4812      	ldr	r0, [pc, #72]	; (80168d0 <MX_USB_DEVICE_Init+0x54>)
 8016886:	f7f7 ff2f 	bl	800e6e8 <USBD_Init>
 801688a:	4603      	mov	r3, r0
 801688c:	2b00      	cmp	r3, #0
 801688e:	d001      	beq.n	8016894 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8016890:	f7ed faf6 	bl	8003e80 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8016894:	490f      	ldr	r1, [pc, #60]	; (80168d4 <MX_USB_DEVICE_Init+0x58>)
 8016896:	480e      	ldr	r0, [pc, #56]	; (80168d0 <MX_USB_DEVICE_Init+0x54>)
 8016898:	f7f7 ff5c 	bl	800e754 <USBD_RegisterClass>
 801689c:	4603      	mov	r3, r0
 801689e:	2b00      	cmp	r3, #0
 80168a0:	d001      	beq.n	80168a6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80168a2:	f7ed faed 	bl	8003e80 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80168a6:	490c      	ldr	r1, [pc, #48]	; (80168d8 <MX_USB_DEVICE_Init+0x5c>)
 80168a8:	4809      	ldr	r0, [pc, #36]	; (80168d0 <MX_USB_DEVICE_Init+0x54>)
 80168aa:	f7f7 feb1 	bl	800e610 <USBD_CDC_RegisterInterface>
 80168ae:	4603      	mov	r3, r0
 80168b0:	2b00      	cmp	r3, #0
 80168b2:	d001      	beq.n	80168b8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80168b4:	f7ed fae4 	bl	8003e80 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80168b8:	4805      	ldr	r0, [pc, #20]	; (80168d0 <MX_USB_DEVICE_Init+0x54>)
 80168ba:	f7f7 ff6c 	bl	800e796 <USBD_Start>
 80168be:	4603      	mov	r3, r0
 80168c0:	2b00      	cmp	r3, #0
 80168c2:	d001      	beq.n	80168c8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80168c4:	f7ed fadc 	bl	8003e80 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80168c8:	bf00      	nop
 80168ca:	bd80      	pop	{r7, pc}
 80168cc:	20000134 	.word	0x20000134
 80168d0:	20015728 	.word	0x20015728
 80168d4:	20000018 	.word	0x20000018
 80168d8:	20000120 	.word	0x20000120

080168dc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80168dc:	b580      	push	{r7, lr}
 80168de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80168e0:	2200      	movs	r2, #0
 80168e2:	4905      	ldr	r1, [pc, #20]	; (80168f8 <CDC_Init_FS+0x1c>)
 80168e4:	4805      	ldr	r0, [pc, #20]	; (80168fc <CDC_Init_FS+0x20>)
 80168e6:	f7f7 fea8 	bl	800e63a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80168ea:	4905      	ldr	r1, [pc, #20]	; (8016900 <CDC_Init_FS+0x24>)
 80168ec:	4803      	ldr	r0, [pc, #12]	; (80168fc <CDC_Init_FS+0x20>)
 80168ee:	f7f7 febd 	bl	800e66c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80168f2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80168f4:	4618      	mov	r0, r3
 80168f6:	bd80      	pop	{r7, pc}
 80168f8:	200161f8 	.word	0x200161f8
 80168fc:	20015728 	.word	0x20015728
 8016900:	200159f8 	.word	0x200159f8

08016904 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8016904:	b480      	push	{r7}
 8016906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8016908:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801690a:	4618      	mov	r0, r3
 801690c:	46bd      	mov	sp, r7
 801690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016912:	4770      	bx	lr

08016914 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8016914:	b480      	push	{r7}
 8016916:	b083      	sub	sp, #12
 8016918:	af00      	add	r7, sp, #0
 801691a:	4603      	mov	r3, r0
 801691c:	6039      	str	r1, [r7, #0]
 801691e:	71fb      	strb	r3, [r7, #7]
 8016920:	4613      	mov	r3, r2
 8016922:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8016924:	79fb      	ldrb	r3, [r7, #7]
 8016926:	2b23      	cmp	r3, #35	; 0x23
 8016928:	d84a      	bhi.n	80169c0 <CDC_Control_FS+0xac>
 801692a:	a201      	add	r2, pc, #4	; (adr r2, 8016930 <CDC_Control_FS+0x1c>)
 801692c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016930:	080169c1 	.word	0x080169c1
 8016934:	080169c1 	.word	0x080169c1
 8016938:	080169c1 	.word	0x080169c1
 801693c:	080169c1 	.word	0x080169c1
 8016940:	080169c1 	.word	0x080169c1
 8016944:	080169c1 	.word	0x080169c1
 8016948:	080169c1 	.word	0x080169c1
 801694c:	080169c1 	.word	0x080169c1
 8016950:	080169c1 	.word	0x080169c1
 8016954:	080169c1 	.word	0x080169c1
 8016958:	080169c1 	.word	0x080169c1
 801695c:	080169c1 	.word	0x080169c1
 8016960:	080169c1 	.word	0x080169c1
 8016964:	080169c1 	.word	0x080169c1
 8016968:	080169c1 	.word	0x080169c1
 801696c:	080169c1 	.word	0x080169c1
 8016970:	080169c1 	.word	0x080169c1
 8016974:	080169c1 	.word	0x080169c1
 8016978:	080169c1 	.word	0x080169c1
 801697c:	080169c1 	.word	0x080169c1
 8016980:	080169c1 	.word	0x080169c1
 8016984:	080169c1 	.word	0x080169c1
 8016988:	080169c1 	.word	0x080169c1
 801698c:	080169c1 	.word	0x080169c1
 8016990:	080169c1 	.word	0x080169c1
 8016994:	080169c1 	.word	0x080169c1
 8016998:	080169c1 	.word	0x080169c1
 801699c:	080169c1 	.word	0x080169c1
 80169a0:	080169c1 	.word	0x080169c1
 80169a4:	080169c1 	.word	0x080169c1
 80169a8:	080169c1 	.word	0x080169c1
 80169ac:	080169c1 	.word	0x080169c1
 80169b0:	080169c1 	.word	0x080169c1
 80169b4:	080169c1 	.word	0x080169c1
 80169b8:	080169c1 	.word	0x080169c1
 80169bc:	080169c1 	.word	0x080169c1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80169c0:	bf00      	nop
  }

  return (USBD_OK);
 80169c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80169c4:	4618      	mov	r0, r3
 80169c6:	370c      	adds	r7, #12
 80169c8:	46bd      	mov	sp, r7
 80169ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169ce:	4770      	bx	lr

080169d0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80169d0:	b580      	push	{r7, lr}
 80169d2:	b082      	sub	sp, #8
 80169d4:	af00      	add	r7, sp, #0
 80169d6:	6078      	str	r0, [r7, #4]
 80169d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80169da:	6879      	ldr	r1, [r7, #4]
 80169dc:	4805      	ldr	r0, [pc, #20]	; (80169f4 <CDC_Receive_FS+0x24>)
 80169de:	f7f7 fe45 	bl	800e66c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80169e2:	4804      	ldr	r0, [pc, #16]	; (80169f4 <CDC_Receive_FS+0x24>)
 80169e4:	f7f7 fe56 	bl	800e694 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80169e8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80169ea:	4618      	mov	r0, r3
 80169ec:	3708      	adds	r7, #8
 80169ee:	46bd      	mov	sp, r7
 80169f0:	bd80      	pop	{r7, pc}
 80169f2:	bf00      	nop
 80169f4:	20015728 	.word	0x20015728

080169f8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80169f8:	b480      	push	{r7}
 80169fa:	b087      	sub	sp, #28
 80169fc:	af00      	add	r7, sp, #0
 80169fe:	60f8      	str	r0, [r7, #12]
 8016a00:	60b9      	str	r1, [r7, #8]
 8016a02:	4613      	mov	r3, r2
 8016a04:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8016a06:	2300      	movs	r3, #0
 8016a08:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8016a0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016a0e:	4618      	mov	r0, r3
 8016a10:	371c      	adds	r7, #28
 8016a12:	46bd      	mov	sp, r7
 8016a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a18:	4770      	bx	lr
	...

08016a1c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016a1c:	b480      	push	{r7}
 8016a1e:	b083      	sub	sp, #12
 8016a20:	af00      	add	r7, sp, #0
 8016a22:	4603      	mov	r3, r0
 8016a24:	6039      	str	r1, [r7, #0]
 8016a26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8016a28:	683b      	ldr	r3, [r7, #0]
 8016a2a:	2212      	movs	r2, #18
 8016a2c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8016a2e:	4b03      	ldr	r3, [pc, #12]	; (8016a3c <USBD_FS_DeviceDescriptor+0x20>)
}
 8016a30:	4618      	mov	r0, r3
 8016a32:	370c      	adds	r7, #12
 8016a34:	46bd      	mov	sp, r7
 8016a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a3a:	4770      	bx	lr
 8016a3c:	20000154 	.word	0x20000154

08016a40 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016a40:	b480      	push	{r7}
 8016a42:	b083      	sub	sp, #12
 8016a44:	af00      	add	r7, sp, #0
 8016a46:	4603      	mov	r3, r0
 8016a48:	6039      	str	r1, [r7, #0]
 8016a4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8016a4c:	683b      	ldr	r3, [r7, #0]
 8016a4e:	2204      	movs	r2, #4
 8016a50:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8016a52:	4b03      	ldr	r3, [pc, #12]	; (8016a60 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8016a54:	4618      	mov	r0, r3
 8016a56:	370c      	adds	r7, #12
 8016a58:	46bd      	mov	sp, r7
 8016a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a5e:	4770      	bx	lr
 8016a60:	20000174 	.word	0x20000174

08016a64 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016a64:	b580      	push	{r7, lr}
 8016a66:	b082      	sub	sp, #8
 8016a68:	af00      	add	r7, sp, #0
 8016a6a:	4603      	mov	r3, r0
 8016a6c:	6039      	str	r1, [r7, #0]
 8016a6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016a70:	79fb      	ldrb	r3, [r7, #7]
 8016a72:	2b00      	cmp	r3, #0
 8016a74:	d105      	bne.n	8016a82 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8016a76:	683a      	ldr	r2, [r7, #0]
 8016a78:	4907      	ldr	r1, [pc, #28]	; (8016a98 <USBD_FS_ProductStrDescriptor+0x34>)
 8016a7a:	4808      	ldr	r0, [pc, #32]	; (8016a9c <USBD_FS_ProductStrDescriptor+0x38>)
 8016a7c:	f7f8 fe83 	bl	800f786 <USBD_GetString>
 8016a80:	e004      	b.n	8016a8c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8016a82:	683a      	ldr	r2, [r7, #0]
 8016a84:	4904      	ldr	r1, [pc, #16]	; (8016a98 <USBD_FS_ProductStrDescriptor+0x34>)
 8016a86:	4805      	ldr	r0, [pc, #20]	; (8016a9c <USBD_FS_ProductStrDescriptor+0x38>)
 8016a88:	f7f8 fe7d 	bl	800f786 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016a8c:	4b02      	ldr	r3, [pc, #8]	; (8016a98 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8016a8e:	4618      	mov	r0, r3
 8016a90:	3708      	adds	r7, #8
 8016a92:	46bd      	mov	sp, r7
 8016a94:	bd80      	pop	{r7, pc}
 8016a96:	bf00      	nop
 8016a98:	200169f8 	.word	0x200169f8
 8016a9c:	0801a1e0 	.word	0x0801a1e0

08016aa0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016aa0:	b580      	push	{r7, lr}
 8016aa2:	b082      	sub	sp, #8
 8016aa4:	af00      	add	r7, sp, #0
 8016aa6:	4603      	mov	r3, r0
 8016aa8:	6039      	str	r1, [r7, #0]
 8016aaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8016aac:	683a      	ldr	r2, [r7, #0]
 8016aae:	4904      	ldr	r1, [pc, #16]	; (8016ac0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8016ab0:	4804      	ldr	r0, [pc, #16]	; (8016ac4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8016ab2:	f7f8 fe68 	bl	800f786 <USBD_GetString>
  return USBD_StrDesc;
 8016ab6:	4b02      	ldr	r3, [pc, #8]	; (8016ac0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8016ab8:	4618      	mov	r0, r3
 8016aba:	3708      	adds	r7, #8
 8016abc:	46bd      	mov	sp, r7
 8016abe:	bd80      	pop	{r7, pc}
 8016ac0:	200169f8 	.word	0x200169f8
 8016ac4:	0801a1f8 	.word	0x0801a1f8

08016ac8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016ac8:	b580      	push	{r7, lr}
 8016aca:	b082      	sub	sp, #8
 8016acc:	af00      	add	r7, sp, #0
 8016ace:	4603      	mov	r3, r0
 8016ad0:	6039      	str	r1, [r7, #0]
 8016ad2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8016ad4:	683b      	ldr	r3, [r7, #0]
 8016ad6:	221a      	movs	r2, #26
 8016ad8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8016ada:	f000 f855 	bl	8016b88 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8016ade:	4b02      	ldr	r3, [pc, #8]	; (8016ae8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8016ae0:	4618      	mov	r0, r3
 8016ae2:	3708      	adds	r7, #8
 8016ae4:	46bd      	mov	sp, r7
 8016ae6:	bd80      	pop	{r7, pc}
 8016ae8:	20000178 	.word	0x20000178

08016aec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016aec:	b580      	push	{r7, lr}
 8016aee:	b082      	sub	sp, #8
 8016af0:	af00      	add	r7, sp, #0
 8016af2:	4603      	mov	r3, r0
 8016af4:	6039      	str	r1, [r7, #0]
 8016af6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8016af8:	79fb      	ldrb	r3, [r7, #7]
 8016afa:	2b00      	cmp	r3, #0
 8016afc:	d105      	bne.n	8016b0a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8016afe:	683a      	ldr	r2, [r7, #0]
 8016b00:	4907      	ldr	r1, [pc, #28]	; (8016b20 <USBD_FS_ConfigStrDescriptor+0x34>)
 8016b02:	4808      	ldr	r0, [pc, #32]	; (8016b24 <USBD_FS_ConfigStrDescriptor+0x38>)
 8016b04:	f7f8 fe3f 	bl	800f786 <USBD_GetString>
 8016b08:	e004      	b.n	8016b14 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8016b0a:	683a      	ldr	r2, [r7, #0]
 8016b0c:	4904      	ldr	r1, [pc, #16]	; (8016b20 <USBD_FS_ConfigStrDescriptor+0x34>)
 8016b0e:	4805      	ldr	r0, [pc, #20]	; (8016b24 <USBD_FS_ConfigStrDescriptor+0x38>)
 8016b10:	f7f8 fe39 	bl	800f786 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016b14:	4b02      	ldr	r3, [pc, #8]	; (8016b20 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8016b16:	4618      	mov	r0, r3
 8016b18:	3708      	adds	r7, #8
 8016b1a:	46bd      	mov	sp, r7
 8016b1c:	bd80      	pop	{r7, pc}
 8016b1e:	bf00      	nop
 8016b20:	200169f8 	.word	0x200169f8
 8016b24:	0801a20c 	.word	0x0801a20c

08016b28 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016b28:	b580      	push	{r7, lr}
 8016b2a:	b082      	sub	sp, #8
 8016b2c:	af00      	add	r7, sp, #0
 8016b2e:	4603      	mov	r3, r0
 8016b30:	6039      	str	r1, [r7, #0]
 8016b32:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016b34:	79fb      	ldrb	r3, [r7, #7]
 8016b36:	2b00      	cmp	r3, #0
 8016b38:	d105      	bne.n	8016b46 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016b3a:	683a      	ldr	r2, [r7, #0]
 8016b3c:	4907      	ldr	r1, [pc, #28]	; (8016b5c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8016b3e:	4808      	ldr	r0, [pc, #32]	; (8016b60 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016b40:	f7f8 fe21 	bl	800f786 <USBD_GetString>
 8016b44:	e004      	b.n	8016b50 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016b46:	683a      	ldr	r2, [r7, #0]
 8016b48:	4904      	ldr	r1, [pc, #16]	; (8016b5c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8016b4a:	4805      	ldr	r0, [pc, #20]	; (8016b60 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016b4c:	f7f8 fe1b 	bl	800f786 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016b50:	4b02      	ldr	r3, [pc, #8]	; (8016b5c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8016b52:	4618      	mov	r0, r3
 8016b54:	3708      	adds	r7, #8
 8016b56:	46bd      	mov	sp, r7
 8016b58:	bd80      	pop	{r7, pc}
 8016b5a:	bf00      	nop
 8016b5c:	200169f8 	.word	0x200169f8
 8016b60:	0801a218 	.word	0x0801a218

08016b64 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016b64:	b480      	push	{r7}
 8016b66:	b083      	sub	sp, #12
 8016b68:	af00      	add	r7, sp, #0
 8016b6a:	4603      	mov	r3, r0
 8016b6c:	6039      	str	r1, [r7, #0]
 8016b6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8016b70:	683b      	ldr	r3, [r7, #0]
 8016b72:	220c      	movs	r2, #12
 8016b74:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8016b76:	4b03      	ldr	r3, [pc, #12]	; (8016b84 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8016b78:	4618      	mov	r0, r3
 8016b7a:	370c      	adds	r7, #12
 8016b7c:	46bd      	mov	sp, r7
 8016b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b82:	4770      	bx	lr
 8016b84:	20000168 	.word	0x20000168

08016b88 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8016b88:	b580      	push	{r7, lr}
 8016b8a:	b084      	sub	sp, #16
 8016b8c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8016b8e:	4b0f      	ldr	r3, [pc, #60]	; (8016bcc <Get_SerialNum+0x44>)
 8016b90:	681b      	ldr	r3, [r3, #0]
 8016b92:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8016b94:	4b0e      	ldr	r3, [pc, #56]	; (8016bd0 <Get_SerialNum+0x48>)
 8016b96:	681b      	ldr	r3, [r3, #0]
 8016b98:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8016b9a:	4b0e      	ldr	r3, [pc, #56]	; (8016bd4 <Get_SerialNum+0x4c>)
 8016b9c:	681b      	ldr	r3, [r3, #0]
 8016b9e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8016ba0:	68fa      	ldr	r2, [r7, #12]
 8016ba2:	687b      	ldr	r3, [r7, #4]
 8016ba4:	4413      	add	r3, r2
 8016ba6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8016ba8:	68fb      	ldr	r3, [r7, #12]
 8016baa:	2b00      	cmp	r3, #0
 8016bac:	d009      	beq.n	8016bc2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8016bae:	2208      	movs	r2, #8
 8016bb0:	4909      	ldr	r1, [pc, #36]	; (8016bd8 <Get_SerialNum+0x50>)
 8016bb2:	68f8      	ldr	r0, [r7, #12]
 8016bb4:	f000 f814 	bl	8016be0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8016bb8:	2204      	movs	r2, #4
 8016bba:	4908      	ldr	r1, [pc, #32]	; (8016bdc <Get_SerialNum+0x54>)
 8016bbc:	68b8      	ldr	r0, [r7, #8]
 8016bbe:	f000 f80f 	bl	8016be0 <IntToUnicode>
  }
}
 8016bc2:	bf00      	nop
 8016bc4:	3710      	adds	r7, #16
 8016bc6:	46bd      	mov	sp, r7
 8016bc8:	bd80      	pop	{r7, pc}
 8016bca:	bf00      	nop
 8016bcc:	1ff0f420 	.word	0x1ff0f420
 8016bd0:	1ff0f424 	.word	0x1ff0f424
 8016bd4:	1ff0f428 	.word	0x1ff0f428
 8016bd8:	2000017a 	.word	0x2000017a
 8016bdc:	2000018a 	.word	0x2000018a

08016be0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8016be0:	b480      	push	{r7}
 8016be2:	b087      	sub	sp, #28
 8016be4:	af00      	add	r7, sp, #0
 8016be6:	60f8      	str	r0, [r7, #12]
 8016be8:	60b9      	str	r1, [r7, #8]
 8016bea:	4613      	mov	r3, r2
 8016bec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8016bee:	2300      	movs	r3, #0
 8016bf0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8016bf2:	2300      	movs	r3, #0
 8016bf4:	75fb      	strb	r3, [r7, #23]
 8016bf6:	e027      	b.n	8016c48 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8016bf8:	68fb      	ldr	r3, [r7, #12]
 8016bfa:	0f1b      	lsrs	r3, r3, #28
 8016bfc:	2b09      	cmp	r3, #9
 8016bfe:	d80b      	bhi.n	8016c18 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8016c00:	68fb      	ldr	r3, [r7, #12]
 8016c02:	0f1b      	lsrs	r3, r3, #28
 8016c04:	b2da      	uxtb	r2, r3
 8016c06:	7dfb      	ldrb	r3, [r7, #23]
 8016c08:	005b      	lsls	r3, r3, #1
 8016c0a:	4619      	mov	r1, r3
 8016c0c:	68bb      	ldr	r3, [r7, #8]
 8016c0e:	440b      	add	r3, r1
 8016c10:	3230      	adds	r2, #48	; 0x30
 8016c12:	b2d2      	uxtb	r2, r2
 8016c14:	701a      	strb	r2, [r3, #0]
 8016c16:	e00a      	b.n	8016c2e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8016c18:	68fb      	ldr	r3, [r7, #12]
 8016c1a:	0f1b      	lsrs	r3, r3, #28
 8016c1c:	b2da      	uxtb	r2, r3
 8016c1e:	7dfb      	ldrb	r3, [r7, #23]
 8016c20:	005b      	lsls	r3, r3, #1
 8016c22:	4619      	mov	r1, r3
 8016c24:	68bb      	ldr	r3, [r7, #8]
 8016c26:	440b      	add	r3, r1
 8016c28:	3237      	adds	r2, #55	; 0x37
 8016c2a:	b2d2      	uxtb	r2, r2
 8016c2c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8016c2e:	68fb      	ldr	r3, [r7, #12]
 8016c30:	011b      	lsls	r3, r3, #4
 8016c32:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8016c34:	7dfb      	ldrb	r3, [r7, #23]
 8016c36:	005b      	lsls	r3, r3, #1
 8016c38:	3301      	adds	r3, #1
 8016c3a:	68ba      	ldr	r2, [r7, #8]
 8016c3c:	4413      	add	r3, r2
 8016c3e:	2200      	movs	r2, #0
 8016c40:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8016c42:	7dfb      	ldrb	r3, [r7, #23]
 8016c44:	3301      	adds	r3, #1
 8016c46:	75fb      	strb	r3, [r7, #23]
 8016c48:	7dfa      	ldrb	r2, [r7, #23]
 8016c4a:	79fb      	ldrb	r3, [r7, #7]
 8016c4c:	429a      	cmp	r2, r3
 8016c4e:	d3d3      	bcc.n	8016bf8 <IntToUnicode+0x18>
  }
}
 8016c50:	bf00      	nop
 8016c52:	371c      	adds	r7, #28
 8016c54:	46bd      	mov	sp, r7
 8016c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c5a:	4770      	bx	lr

08016c5c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8016c5c:	b580      	push	{r7, lr}
 8016c5e:	b08a      	sub	sp, #40	; 0x28
 8016c60:	af00      	add	r7, sp, #0
 8016c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016c64:	f107 0314 	add.w	r3, r7, #20
 8016c68:	2200      	movs	r2, #0
 8016c6a:	601a      	str	r2, [r3, #0]
 8016c6c:	605a      	str	r2, [r3, #4]
 8016c6e:	609a      	str	r2, [r3, #8]
 8016c70:	60da      	str	r2, [r3, #12]
 8016c72:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8016c74:	687b      	ldr	r3, [r7, #4]
 8016c76:	681b      	ldr	r3, [r3, #0]
 8016c78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8016c7c:	d13c      	bne.n	8016cf8 <HAL_PCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8016c7e:	4b20      	ldr	r3, [pc, #128]	; (8016d00 <HAL_PCD_MspInit+0xa4>)
 8016c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016c82:	4a1f      	ldr	r2, [pc, #124]	; (8016d00 <HAL_PCD_MspInit+0xa4>)
 8016c84:	f043 0301 	orr.w	r3, r3, #1
 8016c88:	6313      	str	r3, [r2, #48]	; 0x30
 8016c8a:	4b1d      	ldr	r3, [pc, #116]	; (8016d00 <HAL_PCD_MspInit+0xa4>)
 8016c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016c8e:	f003 0301 	and.w	r3, r3, #1
 8016c92:	613b      	str	r3, [r7, #16]
 8016c94:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8016c96:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8016c9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016c9c:	2302      	movs	r3, #2
 8016c9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016ca0:	2300      	movs	r3, #0
 8016ca2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016ca4:	2303      	movs	r3, #3
 8016ca6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8016ca8:	230a      	movs	r3, #10
 8016caa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8016cac:	f107 0314 	add.w	r3, r7, #20
 8016cb0:	4619      	mov	r1, r3
 8016cb2:	4814      	ldr	r0, [pc, #80]	; (8016d04 <HAL_PCD_MspInit+0xa8>)
 8016cb4:	f7ef f854 	bl	8005d60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8016cb8:	4b11      	ldr	r3, [pc, #68]	; (8016d00 <HAL_PCD_MspInit+0xa4>)
 8016cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016cbc:	4a10      	ldr	r2, [pc, #64]	; (8016d00 <HAL_PCD_MspInit+0xa4>)
 8016cbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016cc2:	6353      	str	r3, [r2, #52]	; 0x34
 8016cc4:	4b0e      	ldr	r3, [pc, #56]	; (8016d00 <HAL_PCD_MspInit+0xa4>)
 8016cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016cc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016ccc:	60fb      	str	r3, [r7, #12]
 8016cce:	68fb      	ldr	r3, [r7, #12]
 8016cd0:	4b0b      	ldr	r3, [pc, #44]	; (8016d00 <HAL_PCD_MspInit+0xa4>)
 8016cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016cd4:	4a0a      	ldr	r2, [pc, #40]	; (8016d00 <HAL_PCD_MspInit+0xa4>)
 8016cd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8016cda:	6453      	str	r3, [r2, #68]	; 0x44
 8016cdc:	4b08      	ldr	r3, [pc, #32]	; (8016d00 <HAL_PCD_MspInit+0xa4>)
 8016cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016ce0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8016ce4:	60bb      	str	r3, [r7, #8]
 8016ce6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8016ce8:	2200      	movs	r2, #0
 8016cea:	2105      	movs	r1, #5
 8016cec:	2043      	movs	r0, #67	; 0x43
 8016cee:	f7ee fc69 	bl	80055c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8016cf2:	2043      	movs	r0, #67	; 0x43
 8016cf4:	f7ee fc82 	bl	80055fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8016cf8:	bf00      	nop
 8016cfa:	3728      	adds	r7, #40	; 0x28
 8016cfc:	46bd      	mov	sp, r7
 8016cfe:	bd80      	pop	{r7, pc}
 8016d00:	40023800 	.word	0x40023800
 8016d04:	40020000 	.word	0x40020000

08016d08 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016d08:	b580      	push	{r7, lr}
 8016d0a:	b082      	sub	sp, #8
 8016d0c:	af00      	add	r7, sp, #0
 8016d0e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8016d10:	687b      	ldr	r3, [r7, #4]
 8016d12:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8016d16:	687b      	ldr	r3, [r7, #4]
 8016d18:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8016d1c:	4619      	mov	r1, r3
 8016d1e:	4610      	mov	r0, r2
 8016d20:	f7f7 fd84 	bl	800e82c <USBD_LL_SetupStage>
}
 8016d24:	bf00      	nop
 8016d26:	3708      	adds	r7, #8
 8016d28:	46bd      	mov	sp, r7
 8016d2a:	bd80      	pop	{r7, pc}

08016d2c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016d2c:	b580      	push	{r7, lr}
 8016d2e:	b082      	sub	sp, #8
 8016d30:	af00      	add	r7, sp, #0
 8016d32:	6078      	str	r0, [r7, #4]
 8016d34:	460b      	mov	r3, r1
 8016d36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8016d38:	687b      	ldr	r3, [r7, #4]
 8016d3a:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 8016d3e:	78fa      	ldrb	r2, [r7, #3]
 8016d40:	6879      	ldr	r1, [r7, #4]
 8016d42:	4613      	mov	r3, r2
 8016d44:	00db      	lsls	r3, r3, #3
 8016d46:	1a9b      	subs	r3, r3, r2
 8016d48:	009b      	lsls	r3, r3, #2
 8016d4a:	440b      	add	r3, r1
 8016d4c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8016d50:	681a      	ldr	r2, [r3, #0]
 8016d52:	78fb      	ldrb	r3, [r7, #3]
 8016d54:	4619      	mov	r1, r3
 8016d56:	f7f7 fdbc 	bl	800e8d2 <USBD_LL_DataOutStage>
}
 8016d5a:	bf00      	nop
 8016d5c:	3708      	adds	r7, #8
 8016d5e:	46bd      	mov	sp, r7
 8016d60:	bd80      	pop	{r7, pc}

08016d62 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016d62:	b580      	push	{r7, lr}
 8016d64:	b082      	sub	sp, #8
 8016d66:	af00      	add	r7, sp, #0
 8016d68:	6078      	str	r0, [r7, #4]
 8016d6a:	460b      	mov	r3, r1
 8016d6c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8016d6e:	687b      	ldr	r3, [r7, #4]
 8016d70:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 8016d74:	78fa      	ldrb	r2, [r7, #3]
 8016d76:	6879      	ldr	r1, [r7, #4]
 8016d78:	4613      	mov	r3, r2
 8016d7a:	00db      	lsls	r3, r3, #3
 8016d7c:	1a9b      	subs	r3, r3, r2
 8016d7e:	009b      	lsls	r3, r3, #2
 8016d80:	440b      	add	r3, r1
 8016d82:	3348      	adds	r3, #72	; 0x48
 8016d84:	681a      	ldr	r2, [r3, #0]
 8016d86:	78fb      	ldrb	r3, [r7, #3]
 8016d88:	4619      	mov	r1, r3
 8016d8a:	f7f7 fe05 	bl	800e998 <USBD_LL_DataInStage>
}
 8016d8e:	bf00      	nop
 8016d90:	3708      	adds	r7, #8
 8016d92:	46bd      	mov	sp, r7
 8016d94:	bd80      	pop	{r7, pc}

08016d96 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016d96:	b580      	push	{r7, lr}
 8016d98:	b082      	sub	sp, #8
 8016d9a:	af00      	add	r7, sp, #0
 8016d9c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8016d9e:	687b      	ldr	r3, [r7, #4]
 8016da0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8016da4:	4618      	mov	r0, r3
 8016da6:	f7f7 ff09 	bl	800ebbc <USBD_LL_SOF>
}
 8016daa:	bf00      	nop
 8016dac:	3708      	adds	r7, #8
 8016dae:	46bd      	mov	sp, r7
 8016db0:	bd80      	pop	{r7, pc}

08016db2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8016db2:	b580      	push	{r7, lr}
 8016db4:	b084      	sub	sp, #16
 8016db6:	af00      	add	r7, sp, #0
 8016db8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8016dba:	2301      	movs	r3, #1
 8016dbc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8016dbe:	687b      	ldr	r3, [r7, #4]
 8016dc0:	68db      	ldr	r3, [r3, #12]
 8016dc2:	2b00      	cmp	r3, #0
 8016dc4:	d102      	bne.n	8016dcc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8016dc6:	2300      	movs	r3, #0
 8016dc8:	73fb      	strb	r3, [r7, #15]
 8016dca:	e008      	b.n	8016dde <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8016dcc:	687b      	ldr	r3, [r7, #4]
 8016dce:	68db      	ldr	r3, [r3, #12]
 8016dd0:	2b02      	cmp	r3, #2
 8016dd2:	d102      	bne.n	8016dda <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8016dd4:	2301      	movs	r3, #1
 8016dd6:	73fb      	strb	r3, [r7, #15]
 8016dd8:	e001      	b.n	8016dde <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8016dda:	f7ed f851 	bl	8003e80 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8016dde:	687b      	ldr	r3, [r7, #4]
 8016de0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8016de4:	7bfa      	ldrb	r2, [r7, #15]
 8016de6:	4611      	mov	r1, r2
 8016de8:	4618      	mov	r0, r3
 8016dea:	f7f7 feac 	bl	800eb46 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8016dee:	687b      	ldr	r3, [r7, #4]
 8016df0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8016df4:	4618      	mov	r0, r3
 8016df6:	f7f7 fe65 	bl	800eac4 <USBD_LL_Reset>
}
 8016dfa:	bf00      	nop
 8016dfc:	3710      	adds	r7, #16
 8016dfe:	46bd      	mov	sp, r7
 8016e00:	bd80      	pop	{r7, pc}
	...

08016e04 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016e04:	b580      	push	{r7, lr}
 8016e06:	b082      	sub	sp, #8
 8016e08:	af00      	add	r7, sp, #0
 8016e0a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8016e0c:	687b      	ldr	r3, [r7, #4]
 8016e0e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8016e12:	4618      	mov	r0, r3
 8016e14:	f7f7 fea7 	bl	800eb66 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8016e18:	687b      	ldr	r3, [r7, #4]
 8016e1a:	681b      	ldr	r3, [r3, #0]
 8016e1c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016e20:	681b      	ldr	r3, [r3, #0]
 8016e22:	687a      	ldr	r2, [r7, #4]
 8016e24:	6812      	ldr	r2, [r2, #0]
 8016e26:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8016e2a:	f043 0301 	orr.w	r3, r3, #1
 8016e2e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8016e30:	687b      	ldr	r3, [r7, #4]
 8016e32:	6a1b      	ldr	r3, [r3, #32]
 8016e34:	2b00      	cmp	r3, #0
 8016e36:	d005      	beq.n	8016e44 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016e38:	4b04      	ldr	r3, [pc, #16]	; (8016e4c <HAL_PCD_SuspendCallback+0x48>)
 8016e3a:	691b      	ldr	r3, [r3, #16]
 8016e3c:	4a03      	ldr	r2, [pc, #12]	; (8016e4c <HAL_PCD_SuspendCallback+0x48>)
 8016e3e:	f043 0306 	orr.w	r3, r3, #6
 8016e42:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8016e44:	bf00      	nop
 8016e46:	3708      	adds	r7, #8
 8016e48:	46bd      	mov	sp, r7
 8016e4a:	bd80      	pop	{r7, pc}
 8016e4c:	e000ed00 	.word	0xe000ed00

08016e50 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016e50:	b580      	push	{r7, lr}
 8016e52:	b082      	sub	sp, #8
 8016e54:	af00      	add	r7, sp, #0
 8016e56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016e58:	687b      	ldr	r3, [r7, #4]
 8016e5a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8016e5e:	4618      	mov	r0, r3
 8016e60:	f7f7 fe96 	bl	800eb90 <USBD_LL_Resume>
}
 8016e64:	bf00      	nop
 8016e66:	3708      	adds	r7, #8
 8016e68:	46bd      	mov	sp, r7
 8016e6a:	bd80      	pop	{r7, pc}

08016e6c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016e6c:	b580      	push	{r7, lr}
 8016e6e:	b082      	sub	sp, #8
 8016e70:	af00      	add	r7, sp, #0
 8016e72:	6078      	str	r0, [r7, #4]
 8016e74:	460b      	mov	r3, r1
 8016e76:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016e78:	687b      	ldr	r3, [r7, #4]
 8016e7a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8016e7e:	78fa      	ldrb	r2, [r7, #3]
 8016e80:	4611      	mov	r1, r2
 8016e82:	4618      	mov	r0, r3
 8016e84:	f7f7 fec1 	bl	800ec0a <USBD_LL_IsoOUTIncomplete>
}
 8016e88:	bf00      	nop
 8016e8a:	3708      	adds	r7, #8
 8016e8c:	46bd      	mov	sp, r7
 8016e8e:	bd80      	pop	{r7, pc}

08016e90 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016e90:	b580      	push	{r7, lr}
 8016e92:	b082      	sub	sp, #8
 8016e94:	af00      	add	r7, sp, #0
 8016e96:	6078      	str	r0, [r7, #4]
 8016e98:	460b      	mov	r3, r1
 8016e9a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016e9c:	687b      	ldr	r3, [r7, #4]
 8016e9e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8016ea2:	78fa      	ldrb	r2, [r7, #3]
 8016ea4:	4611      	mov	r1, r2
 8016ea6:	4618      	mov	r0, r3
 8016ea8:	f7f7 fea2 	bl	800ebf0 <USBD_LL_IsoINIncomplete>
}
 8016eac:	bf00      	nop
 8016eae:	3708      	adds	r7, #8
 8016eb0:	46bd      	mov	sp, r7
 8016eb2:	bd80      	pop	{r7, pc}

08016eb4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016eb4:	b580      	push	{r7, lr}
 8016eb6:	b082      	sub	sp, #8
 8016eb8:	af00      	add	r7, sp, #0
 8016eba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8016ebc:	687b      	ldr	r3, [r7, #4]
 8016ebe:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8016ec2:	4618      	mov	r0, r3
 8016ec4:	f7f7 feae 	bl	800ec24 <USBD_LL_DevConnected>
}
 8016ec8:	bf00      	nop
 8016eca:	3708      	adds	r7, #8
 8016ecc:	46bd      	mov	sp, r7
 8016ece:	bd80      	pop	{r7, pc}

08016ed0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016ed0:	b580      	push	{r7, lr}
 8016ed2:	b082      	sub	sp, #8
 8016ed4:	af00      	add	r7, sp, #0
 8016ed6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8016ed8:	687b      	ldr	r3, [r7, #4]
 8016eda:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8016ede:	4618      	mov	r0, r3
 8016ee0:	f7f7 feab 	bl	800ec3a <USBD_LL_DevDisconnected>
}
 8016ee4:	bf00      	nop
 8016ee6:	3708      	adds	r7, #8
 8016ee8:	46bd      	mov	sp, r7
 8016eea:	bd80      	pop	{r7, pc}

08016eec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8016eec:	b580      	push	{r7, lr}
 8016eee:	b082      	sub	sp, #8
 8016ef0:	af00      	add	r7, sp, #0
 8016ef2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8016ef4:	687b      	ldr	r3, [r7, #4]
 8016ef6:	781b      	ldrb	r3, [r3, #0]
 8016ef8:	2b00      	cmp	r3, #0
 8016efa:	d13c      	bne.n	8016f76 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8016efc:	4a20      	ldr	r2, [pc, #128]	; (8016f80 <USBD_LL_Init+0x94>)
 8016efe:	687b      	ldr	r3, [r7, #4]
 8016f00:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 8016f04:	687b      	ldr	r3, [r7, #4]
 8016f06:	4a1e      	ldr	r2, [pc, #120]	; (8016f80 <USBD_LL_Init+0x94>)
 8016f08:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8016f0c:	4b1c      	ldr	r3, [pc, #112]	; (8016f80 <USBD_LL_Init+0x94>)
 8016f0e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8016f12:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8016f14:	4b1a      	ldr	r3, [pc, #104]	; (8016f80 <USBD_LL_Init+0x94>)
 8016f16:	2206      	movs	r2, #6
 8016f18:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8016f1a:	4b19      	ldr	r3, [pc, #100]	; (8016f80 <USBD_LL_Init+0x94>)
 8016f1c:	2202      	movs	r2, #2
 8016f1e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8016f20:	4b17      	ldr	r3, [pc, #92]	; (8016f80 <USBD_LL_Init+0x94>)
 8016f22:	2200      	movs	r2, #0
 8016f24:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8016f26:	4b16      	ldr	r3, [pc, #88]	; (8016f80 <USBD_LL_Init+0x94>)
 8016f28:	2202      	movs	r2, #2
 8016f2a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8016f2c:	4b14      	ldr	r3, [pc, #80]	; (8016f80 <USBD_LL_Init+0x94>)
 8016f2e:	2200      	movs	r2, #0
 8016f30:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8016f32:	4b13      	ldr	r3, [pc, #76]	; (8016f80 <USBD_LL_Init+0x94>)
 8016f34:	2200      	movs	r2, #0
 8016f36:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8016f38:	4b11      	ldr	r3, [pc, #68]	; (8016f80 <USBD_LL_Init+0x94>)
 8016f3a:	2200      	movs	r2, #0
 8016f3c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8016f3e:	4b10      	ldr	r3, [pc, #64]	; (8016f80 <USBD_LL_Init+0x94>)
 8016f40:	2200      	movs	r2, #0
 8016f42:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8016f44:	4b0e      	ldr	r3, [pc, #56]	; (8016f80 <USBD_LL_Init+0x94>)
 8016f46:	2200      	movs	r2, #0
 8016f48:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8016f4a:	480d      	ldr	r0, [pc, #52]	; (8016f80 <USBD_LL_Init+0x94>)
 8016f4c:	f7ef f8e5 	bl	800611a <HAL_PCD_Init>
 8016f50:	4603      	mov	r3, r0
 8016f52:	2b00      	cmp	r3, #0
 8016f54:	d001      	beq.n	8016f5a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8016f56:	f7ec ff93 	bl	8003e80 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8016f5a:	2180      	movs	r1, #128	; 0x80
 8016f5c:	4808      	ldr	r0, [pc, #32]	; (8016f80 <USBD_LL_Init+0x94>)
 8016f5e:	f7f0 fa66 	bl	800742e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8016f62:	2240      	movs	r2, #64	; 0x40
 8016f64:	2100      	movs	r1, #0
 8016f66:	4806      	ldr	r0, [pc, #24]	; (8016f80 <USBD_LL_Init+0x94>)
 8016f68:	f7f0 fa1a 	bl	80073a0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8016f6c:	2280      	movs	r2, #128	; 0x80
 8016f6e:	2101      	movs	r1, #1
 8016f70:	4803      	ldr	r0, [pc, #12]	; (8016f80 <USBD_LL_Init+0x94>)
 8016f72:	f7f0 fa15 	bl	80073a0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8016f76:	2300      	movs	r3, #0
}
 8016f78:	4618      	mov	r0, r3
 8016f7a:	3708      	adds	r7, #8
 8016f7c:	46bd      	mov	sp, r7
 8016f7e:	bd80      	pop	{r7, pc}
 8016f80:	20016bf8 	.word	0x20016bf8

08016f84 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8016f84:	b580      	push	{r7, lr}
 8016f86:	b084      	sub	sp, #16
 8016f88:	af00      	add	r7, sp, #0
 8016f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016f8c:	2300      	movs	r3, #0
 8016f8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016f90:	2300      	movs	r3, #0
 8016f92:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8016f94:	687b      	ldr	r3, [r7, #4]
 8016f96:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016f9a:	4618      	mov	r0, r3
 8016f9c:	f7ef f9e1 	bl	8006362 <HAL_PCD_Start>
 8016fa0:	4603      	mov	r3, r0
 8016fa2:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8016fa4:	7bfb      	ldrb	r3, [r7, #15]
 8016fa6:	4618      	mov	r0, r3
 8016fa8:	f000 f97e 	bl	80172a8 <USBD_Get_USB_Status>
 8016fac:	4603      	mov	r3, r0
 8016fae:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8016fb0:	7bbb      	ldrb	r3, [r7, #14]
}
 8016fb2:	4618      	mov	r0, r3
 8016fb4:	3710      	adds	r7, #16
 8016fb6:	46bd      	mov	sp, r7
 8016fb8:	bd80      	pop	{r7, pc}

08016fba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8016fba:	b580      	push	{r7, lr}
 8016fbc:	b084      	sub	sp, #16
 8016fbe:	af00      	add	r7, sp, #0
 8016fc0:	6078      	str	r0, [r7, #4]
 8016fc2:	4608      	mov	r0, r1
 8016fc4:	4611      	mov	r1, r2
 8016fc6:	461a      	mov	r2, r3
 8016fc8:	4603      	mov	r3, r0
 8016fca:	70fb      	strb	r3, [r7, #3]
 8016fcc:	460b      	mov	r3, r1
 8016fce:	70bb      	strb	r3, [r7, #2]
 8016fd0:	4613      	mov	r3, r2
 8016fd2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016fd4:	2300      	movs	r3, #0
 8016fd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016fd8:	2300      	movs	r3, #0
 8016fda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016fdc:	687b      	ldr	r3, [r7, #4]
 8016fde:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016fe2:	78bb      	ldrb	r3, [r7, #2]
 8016fe4:	883a      	ldrh	r2, [r7, #0]
 8016fe6:	78f9      	ldrb	r1, [r7, #3]
 8016fe8:	f7ef fde1 	bl	8006bae <HAL_PCD_EP_Open>
 8016fec:	4603      	mov	r3, r0
 8016fee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016ff0:	7bfb      	ldrb	r3, [r7, #15]
 8016ff2:	4618      	mov	r0, r3
 8016ff4:	f000 f958 	bl	80172a8 <USBD_Get_USB_Status>
 8016ff8:	4603      	mov	r3, r0
 8016ffa:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8016ffc:	7bbb      	ldrb	r3, [r7, #14]
}
 8016ffe:	4618      	mov	r0, r3
 8017000:	3710      	adds	r7, #16
 8017002:	46bd      	mov	sp, r7
 8017004:	bd80      	pop	{r7, pc}

08017006 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017006:	b580      	push	{r7, lr}
 8017008:	b084      	sub	sp, #16
 801700a:	af00      	add	r7, sp, #0
 801700c:	6078      	str	r0, [r7, #4]
 801700e:	460b      	mov	r3, r1
 8017010:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017012:	2300      	movs	r3, #0
 8017014:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017016:	2300      	movs	r3, #0
 8017018:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801701a:	687b      	ldr	r3, [r7, #4]
 801701c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017020:	78fa      	ldrb	r2, [r7, #3]
 8017022:	4611      	mov	r1, r2
 8017024:	4618      	mov	r0, r3
 8017026:	f7ef fe2a 	bl	8006c7e <HAL_PCD_EP_Close>
 801702a:	4603      	mov	r3, r0
 801702c:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 801702e:	7bfb      	ldrb	r3, [r7, #15]
 8017030:	4618      	mov	r0, r3
 8017032:	f000 f939 	bl	80172a8 <USBD_Get_USB_Status>
 8017036:	4603      	mov	r3, r0
 8017038:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 801703a:	7bbb      	ldrb	r3, [r7, #14]
}
 801703c:	4618      	mov	r0, r3
 801703e:	3710      	adds	r7, #16
 8017040:	46bd      	mov	sp, r7
 8017042:	bd80      	pop	{r7, pc}

08017044 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017044:	b580      	push	{r7, lr}
 8017046:	b084      	sub	sp, #16
 8017048:	af00      	add	r7, sp, #0
 801704a:	6078      	str	r0, [r7, #4]
 801704c:	460b      	mov	r3, r1
 801704e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017050:	2300      	movs	r3, #0
 8017052:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017054:	2300      	movs	r3, #0
 8017056:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8017058:	687b      	ldr	r3, [r7, #4]
 801705a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801705e:	78fa      	ldrb	r2, [r7, #3]
 8017060:	4611      	mov	r1, r2
 8017062:	4618      	mov	r0, r3
 8017064:	f7ef ff02 	bl	8006e6c <HAL_PCD_EP_SetStall>
 8017068:	4603      	mov	r3, r0
 801706a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801706c:	7bfb      	ldrb	r3, [r7, #15]
 801706e:	4618      	mov	r0, r3
 8017070:	f000 f91a 	bl	80172a8 <USBD_Get_USB_Status>
 8017074:	4603      	mov	r3, r0
 8017076:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8017078:	7bbb      	ldrb	r3, [r7, #14]
}
 801707a:	4618      	mov	r0, r3
 801707c:	3710      	adds	r7, #16
 801707e:	46bd      	mov	sp, r7
 8017080:	bd80      	pop	{r7, pc}

08017082 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017082:	b580      	push	{r7, lr}
 8017084:	b084      	sub	sp, #16
 8017086:	af00      	add	r7, sp, #0
 8017088:	6078      	str	r0, [r7, #4]
 801708a:	460b      	mov	r3, r1
 801708c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801708e:	2300      	movs	r3, #0
 8017090:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017092:	2300      	movs	r3, #0
 8017094:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8017096:	687b      	ldr	r3, [r7, #4]
 8017098:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801709c:	78fa      	ldrb	r2, [r7, #3]
 801709e:	4611      	mov	r1, r2
 80170a0:	4618      	mov	r0, r3
 80170a2:	f7ef ff47 	bl	8006f34 <HAL_PCD_EP_ClrStall>
 80170a6:	4603      	mov	r3, r0
 80170a8:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 80170aa:	7bfb      	ldrb	r3, [r7, #15]
 80170ac:	4618      	mov	r0, r3
 80170ae:	f000 f8fb 	bl	80172a8 <USBD_Get_USB_Status>
 80170b2:	4603      	mov	r3, r0
 80170b4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 80170b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80170b8:	4618      	mov	r0, r3
 80170ba:	3710      	adds	r7, #16
 80170bc:	46bd      	mov	sp, r7
 80170be:	bd80      	pop	{r7, pc}

080170c0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80170c0:	b480      	push	{r7}
 80170c2:	b085      	sub	sp, #20
 80170c4:	af00      	add	r7, sp, #0
 80170c6:	6078      	str	r0, [r7, #4]
 80170c8:	460b      	mov	r3, r1
 80170ca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80170cc:	687b      	ldr	r3, [r7, #4]
 80170ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80170d2:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80170d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80170d8:	2b00      	cmp	r3, #0
 80170da:	da0b      	bge.n	80170f4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80170dc:	78fb      	ldrb	r3, [r7, #3]
 80170de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80170e2:	68f9      	ldr	r1, [r7, #12]
 80170e4:	4613      	mov	r3, r2
 80170e6:	00db      	lsls	r3, r3, #3
 80170e8:	1a9b      	subs	r3, r3, r2
 80170ea:	009b      	lsls	r3, r3, #2
 80170ec:	440b      	add	r3, r1
 80170ee:	333e      	adds	r3, #62	; 0x3e
 80170f0:	781b      	ldrb	r3, [r3, #0]
 80170f2:	e00b      	b.n	801710c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80170f4:	78fb      	ldrb	r3, [r7, #3]
 80170f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80170fa:	68f9      	ldr	r1, [r7, #12]
 80170fc:	4613      	mov	r3, r2
 80170fe:	00db      	lsls	r3, r3, #3
 8017100:	1a9b      	subs	r3, r3, r2
 8017102:	009b      	lsls	r3, r3, #2
 8017104:	440b      	add	r3, r1
 8017106:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801710a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801710c:	4618      	mov	r0, r3
 801710e:	3714      	adds	r7, #20
 8017110:	46bd      	mov	sp, r7
 8017112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017116:	4770      	bx	lr

08017118 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8017118:	b580      	push	{r7, lr}
 801711a:	b084      	sub	sp, #16
 801711c:	af00      	add	r7, sp, #0
 801711e:	6078      	str	r0, [r7, #4]
 8017120:	460b      	mov	r3, r1
 8017122:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017124:	2300      	movs	r3, #0
 8017126:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017128:	2300      	movs	r3, #0
 801712a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801712c:	687b      	ldr	r3, [r7, #4]
 801712e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017132:	78fa      	ldrb	r2, [r7, #3]
 8017134:	4611      	mov	r1, r2
 8017136:	4618      	mov	r0, r3
 8017138:	f7ef fd14 	bl	8006b64 <HAL_PCD_SetAddress>
 801713c:	4603      	mov	r3, r0
 801713e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8017140:	7bfb      	ldrb	r3, [r7, #15]
 8017142:	4618      	mov	r0, r3
 8017144:	f000 f8b0 	bl	80172a8 <USBD_Get_USB_Status>
 8017148:	4603      	mov	r3, r0
 801714a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 801714c:	7bbb      	ldrb	r3, [r7, #14]
}
 801714e:	4618      	mov	r0, r3
 8017150:	3710      	adds	r7, #16
 8017152:	46bd      	mov	sp, r7
 8017154:	bd80      	pop	{r7, pc}

08017156 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017156:	b580      	push	{r7, lr}
 8017158:	b086      	sub	sp, #24
 801715a:	af00      	add	r7, sp, #0
 801715c:	60f8      	str	r0, [r7, #12]
 801715e:	607a      	str	r2, [r7, #4]
 8017160:	603b      	str	r3, [r7, #0]
 8017162:	460b      	mov	r3, r1
 8017164:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017166:	2300      	movs	r3, #0
 8017168:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801716a:	2300      	movs	r3, #0
 801716c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801716e:	68fb      	ldr	r3, [r7, #12]
 8017170:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8017174:	7af9      	ldrb	r1, [r7, #11]
 8017176:	683b      	ldr	r3, [r7, #0]
 8017178:	687a      	ldr	r2, [r7, #4]
 801717a:	f7ef fe2d 	bl	8006dd8 <HAL_PCD_EP_Transmit>
 801717e:	4603      	mov	r3, r0
 8017180:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8017182:	7dfb      	ldrb	r3, [r7, #23]
 8017184:	4618      	mov	r0, r3
 8017186:	f000 f88f 	bl	80172a8 <USBD_Get_USB_Status>
 801718a:	4603      	mov	r3, r0
 801718c:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 801718e:	7dbb      	ldrb	r3, [r7, #22]
}
 8017190:	4618      	mov	r0, r3
 8017192:	3718      	adds	r7, #24
 8017194:	46bd      	mov	sp, r7
 8017196:	bd80      	pop	{r7, pc}

08017198 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017198:	b580      	push	{r7, lr}
 801719a:	b086      	sub	sp, #24
 801719c:	af00      	add	r7, sp, #0
 801719e:	60f8      	str	r0, [r7, #12]
 80171a0:	607a      	str	r2, [r7, #4]
 80171a2:	603b      	str	r3, [r7, #0]
 80171a4:	460b      	mov	r3, r1
 80171a6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80171a8:	2300      	movs	r3, #0
 80171aa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80171ac:	2300      	movs	r3, #0
 80171ae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80171b0:	68fb      	ldr	r3, [r7, #12]
 80171b2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80171b6:	7af9      	ldrb	r1, [r7, #11]
 80171b8:	683b      	ldr	r3, [r7, #0]
 80171ba:	687a      	ldr	r2, [r7, #4]
 80171bc:	f7ef fda9 	bl	8006d12 <HAL_PCD_EP_Receive>
 80171c0:	4603      	mov	r3, r0
 80171c2:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 80171c4:	7dfb      	ldrb	r3, [r7, #23]
 80171c6:	4618      	mov	r0, r3
 80171c8:	f000 f86e 	bl	80172a8 <USBD_Get_USB_Status>
 80171cc:	4603      	mov	r3, r0
 80171ce:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 80171d0:	7dbb      	ldrb	r3, [r7, #22]
}
 80171d2:	4618      	mov	r0, r3
 80171d4:	3718      	adds	r7, #24
 80171d6:	46bd      	mov	sp, r7
 80171d8:	bd80      	pop	{r7, pc}

080171da <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80171da:	b580      	push	{r7, lr}
 80171dc:	b082      	sub	sp, #8
 80171de:	af00      	add	r7, sp, #0
 80171e0:	6078      	str	r0, [r7, #4]
 80171e2:	460b      	mov	r3, r1
 80171e4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80171e6:	687b      	ldr	r3, [r7, #4]
 80171e8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80171ec:	78fa      	ldrb	r2, [r7, #3]
 80171ee:	4611      	mov	r1, r2
 80171f0:	4618      	mov	r0, r3
 80171f2:	f7ef fdd9 	bl	8006da8 <HAL_PCD_EP_GetRxCount>
 80171f6:	4603      	mov	r3, r0
}
 80171f8:	4618      	mov	r0, r3
 80171fa:	3708      	adds	r7, #8
 80171fc:	46bd      	mov	sp, r7
 80171fe:	bd80      	pop	{r7, pc}

08017200 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8017200:	b580      	push	{r7, lr}
 8017202:	b082      	sub	sp, #8
 8017204:	af00      	add	r7, sp, #0
 8017206:	6078      	str	r0, [r7, #4]
 8017208:	460b      	mov	r3, r1
 801720a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 801720c:	78fb      	ldrb	r3, [r7, #3]
 801720e:	2b00      	cmp	r3, #0
 8017210:	d002      	beq.n	8017218 <HAL_PCDEx_LPM_Callback+0x18>
 8017212:	2b01      	cmp	r3, #1
 8017214:	d01f      	beq.n	8017256 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 8017216:	e03b      	b.n	8017290 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8017218:	687b      	ldr	r3, [r7, #4]
 801721a:	6a1b      	ldr	r3, [r3, #32]
 801721c:	2b00      	cmp	r3, #0
 801721e:	d007      	beq.n	8017230 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8017220:	f000 f83c 	bl	801729c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017224:	4b1c      	ldr	r3, [pc, #112]	; (8017298 <HAL_PCDEx_LPM_Callback+0x98>)
 8017226:	691b      	ldr	r3, [r3, #16]
 8017228:	4a1b      	ldr	r2, [pc, #108]	; (8017298 <HAL_PCDEx_LPM_Callback+0x98>)
 801722a:	f023 0306 	bic.w	r3, r3, #6
 801722e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8017230:	687b      	ldr	r3, [r7, #4]
 8017232:	681b      	ldr	r3, [r3, #0]
 8017234:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8017238:	681b      	ldr	r3, [r3, #0]
 801723a:	687a      	ldr	r2, [r7, #4]
 801723c:	6812      	ldr	r2, [r2, #0]
 801723e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8017242:	f023 0301 	bic.w	r3, r3, #1
 8017246:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8017248:	687b      	ldr	r3, [r7, #4]
 801724a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801724e:	4618      	mov	r0, r3
 8017250:	f7f7 fc9e 	bl	800eb90 <USBD_LL_Resume>
    break;
 8017254:	e01c      	b.n	8017290 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8017256:	687b      	ldr	r3, [r7, #4]
 8017258:	681b      	ldr	r3, [r3, #0]
 801725a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801725e:	681b      	ldr	r3, [r3, #0]
 8017260:	687a      	ldr	r2, [r7, #4]
 8017262:	6812      	ldr	r2, [r2, #0]
 8017264:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8017268:	f043 0301 	orr.w	r3, r3, #1
 801726c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 801726e:	687b      	ldr	r3, [r7, #4]
 8017270:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8017274:	4618      	mov	r0, r3
 8017276:	f7f7 fc76 	bl	800eb66 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801727a:	687b      	ldr	r3, [r7, #4]
 801727c:	6a1b      	ldr	r3, [r3, #32]
 801727e:	2b00      	cmp	r3, #0
 8017280:	d005      	beq.n	801728e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017282:	4b05      	ldr	r3, [pc, #20]	; (8017298 <HAL_PCDEx_LPM_Callback+0x98>)
 8017284:	691b      	ldr	r3, [r3, #16]
 8017286:	4a04      	ldr	r2, [pc, #16]	; (8017298 <HAL_PCDEx_LPM_Callback+0x98>)
 8017288:	f043 0306 	orr.w	r3, r3, #6
 801728c:	6113      	str	r3, [r2, #16]
    break;   
 801728e:	bf00      	nop
}
 8017290:	bf00      	nop
 8017292:	3708      	adds	r7, #8
 8017294:	46bd      	mov	sp, r7
 8017296:	bd80      	pop	{r7, pc}
 8017298:	e000ed00 	.word	0xe000ed00

0801729c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801729c:	b580      	push	{r7, lr}
 801729e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80172a0:	f7ec fbac 	bl	80039fc <SystemClock_Config>
}
 80172a4:	bf00      	nop
 80172a6:	bd80      	pop	{r7, pc}

080172a8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80172a8:	b480      	push	{r7}
 80172aa:	b085      	sub	sp, #20
 80172ac:	af00      	add	r7, sp, #0
 80172ae:	4603      	mov	r3, r0
 80172b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80172b2:	2300      	movs	r3, #0
 80172b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80172b6:	79fb      	ldrb	r3, [r7, #7]
 80172b8:	2b03      	cmp	r3, #3
 80172ba:	d817      	bhi.n	80172ec <USBD_Get_USB_Status+0x44>
 80172bc:	a201      	add	r2, pc, #4	; (adr r2, 80172c4 <USBD_Get_USB_Status+0x1c>)
 80172be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80172c2:	bf00      	nop
 80172c4:	080172d5 	.word	0x080172d5
 80172c8:	080172db 	.word	0x080172db
 80172cc:	080172e1 	.word	0x080172e1
 80172d0:	080172e7 	.word	0x080172e7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80172d4:	2300      	movs	r3, #0
 80172d6:	73fb      	strb	r3, [r7, #15]
    break;
 80172d8:	e00b      	b.n	80172f2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80172da:	2303      	movs	r3, #3
 80172dc:	73fb      	strb	r3, [r7, #15]
    break;
 80172de:	e008      	b.n	80172f2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80172e0:	2301      	movs	r3, #1
 80172e2:	73fb      	strb	r3, [r7, #15]
    break;
 80172e4:	e005      	b.n	80172f2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80172e6:	2303      	movs	r3, #3
 80172e8:	73fb      	strb	r3, [r7, #15]
    break;
 80172ea:	e002      	b.n	80172f2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80172ec:	2303      	movs	r3, #3
 80172ee:	73fb      	strb	r3, [r7, #15]
    break;
 80172f0:	bf00      	nop
  }
  return usb_status;
 80172f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80172f4:	4618      	mov	r0, r3
 80172f6:	3714      	adds	r7, #20
 80172f8:	46bd      	mov	sp, r7
 80172fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172fe:	4770      	bx	lr

08017300 <__errno>:
 8017300:	4b01      	ldr	r3, [pc, #4]	; (8017308 <__errno+0x8>)
 8017302:	6818      	ldr	r0, [r3, #0]
 8017304:	4770      	bx	lr
 8017306:	bf00      	nop
 8017308:	20000194 	.word	0x20000194

0801730c <__libc_init_array>:
 801730c:	b570      	push	{r4, r5, r6, lr}
 801730e:	4e0d      	ldr	r6, [pc, #52]	; (8017344 <__libc_init_array+0x38>)
 8017310:	4c0d      	ldr	r4, [pc, #52]	; (8017348 <__libc_init_array+0x3c>)
 8017312:	1ba4      	subs	r4, r4, r6
 8017314:	10a4      	asrs	r4, r4, #2
 8017316:	2500      	movs	r5, #0
 8017318:	42a5      	cmp	r5, r4
 801731a:	d109      	bne.n	8017330 <__libc_init_array+0x24>
 801731c:	4e0b      	ldr	r6, [pc, #44]	; (801734c <__libc_init_array+0x40>)
 801731e:	4c0c      	ldr	r4, [pc, #48]	; (8017350 <__libc_init_array+0x44>)
 8017320:	f002 faa2 	bl	8019868 <_init>
 8017324:	1ba4      	subs	r4, r4, r6
 8017326:	10a4      	asrs	r4, r4, #2
 8017328:	2500      	movs	r5, #0
 801732a:	42a5      	cmp	r5, r4
 801732c:	d105      	bne.n	801733a <__libc_init_array+0x2e>
 801732e:	bd70      	pop	{r4, r5, r6, pc}
 8017330:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8017334:	4798      	blx	r3
 8017336:	3501      	adds	r5, #1
 8017338:	e7ee      	b.n	8017318 <__libc_init_array+0xc>
 801733a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801733e:	4798      	blx	r3
 8017340:	3501      	adds	r5, #1
 8017342:	e7f2      	b.n	801732a <__libc_init_array+0x1e>
 8017344:	0801a488 	.word	0x0801a488
 8017348:	0801a488 	.word	0x0801a488
 801734c:	0801a488 	.word	0x0801a488
 8017350:	0801a48c 	.word	0x0801a48c

08017354 <malloc>:
 8017354:	4b02      	ldr	r3, [pc, #8]	; (8017360 <malloc+0xc>)
 8017356:	4601      	mov	r1, r0
 8017358:	6818      	ldr	r0, [r3, #0]
 801735a:	f000 b86d 	b.w	8017438 <_malloc_r>
 801735e:	bf00      	nop
 8017360:	20000194 	.word	0x20000194

08017364 <free>:
 8017364:	4b02      	ldr	r3, [pc, #8]	; (8017370 <free+0xc>)
 8017366:	4601      	mov	r1, r0
 8017368:	6818      	ldr	r0, [r3, #0]
 801736a:	f000 b817 	b.w	801739c <_free_r>
 801736e:	bf00      	nop
 8017370:	20000194 	.word	0x20000194

08017374 <memcpy>:
 8017374:	b510      	push	{r4, lr}
 8017376:	1e43      	subs	r3, r0, #1
 8017378:	440a      	add	r2, r1
 801737a:	4291      	cmp	r1, r2
 801737c:	d100      	bne.n	8017380 <memcpy+0xc>
 801737e:	bd10      	pop	{r4, pc}
 8017380:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017384:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017388:	e7f7      	b.n	801737a <memcpy+0x6>

0801738a <memset>:
 801738a:	4402      	add	r2, r0
 801738c:	4603      	mov	r3, r0
 801738e:	4293      	cmp	r3, r2
 8017390:	d100      	bne.n	8017394 <memset+0xa>
 8017392:	4770      	bx	lr
 8017394:	f803 1b01 	strb.w	r1, [r3], #1
 8017398:	e7f9      	b.n	801738e <memset+0x4>
	...

0801739c <_free_r>:
 801739c:	b538      	push	{r3, r4, r5, lr}
 801739e:	4605      	mov	r5, r0
 80173a0:	2900      	cmp	r1, #0
 80173a2:	d045      	beq.n	8017430 <_free_r+0x94>
 80173a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80173a8:	1f0c      	subs	r4, r1, #4
 80173aa:	2b00      	cmp	r3, #0
 80173ac:	bfb8      	it	lt
 80173ae:	18e4      	addlt	r4, r4, r3
 80173b0:	f000 f8e0 	bl	8017574 <__malloc_lock>
 80173b4:	4a1f      	ldr	r2, [pc, #124]	; (8017434 <_free_r+0x98>)
 80173b6:	6813      	ldr	r3, [r2, #0]
 80173b8:	4610      	mov	r0, r2
 80173ba:	b933      	cbnz	r3, 80173ca <_free_r+0x2e>
 80173bc:	6063      	str	r3, [r4, #4]
 80173be:	6014      	str	r4, [r2, #0]
 80173c0:	4628      	mov	r0, r5
 80173c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80173c6:	f000 b8d6 	b.w	8017576 <__malloc_unlock>
 80173ca:	42a3      	cmp	r3, r4
 80173cc:	d90c      	bls.n	80173e8 <_free_r+0x4c>
 80173ce:	6821      	ldr	r1, [r4, #0]
 80173d0:	1862      	adds	r2, r4, r1
 80173d2:	4293      	cmp	r3, r2
 80173d4:	bf04      	itt	eq
 80173d6:	681a      	ldreq	r2, [r3, #0]
 80173d8:	685b      	ldreq	r3, [r3, #4]
 80173da:	6063      	str	r3, [r4, #4]
 80173dc:	bf04      	itt	eq
 80173de:	1852      	addeq	r2, r2, r1
 80173e0:	6022      	streq	r2, [r4, #0]
 80173e2:	6004      	str	r4, [r0, #0]
 80173e4:	e7ec      	b.n	80173c0 <_free_r+0x24>
 80173e6:	4613      	mov	r3, r2
 80173e8:	685a      	ldr	r2, [r3, #4]
 80173ea:	b10a      	cbz	r2, 80173f0 <_free_r+0x54>
 80173ec:	42a2      	cmp	r2, r4
 80173ee:	d9fa      	bls.n	80173e6 <_free_r+0x4a>
 80173f0:	6819      	ldr	r1, [r3, #0]
 80173f2:	1858      	adds	r0, r3, r1
 80173f4:	42a0      	cmp	r0, r4
 80173f6:	d10b      	bne.n	8017410 <_free_r+0x74>
 80173f8:	6820      	ldr	r0, [r4, #0]
 80173fa:	4401      	add	r1, r0
 80173fc:	1858      	adds	r0, r3, r1
 80173fe:	4282      	cmp	r2, r0
 8017400:	6019      	str	r1, [r3, #0]
 8017402:	d1dd      	bne.n	80173c0 <_free_r+0x24>
 8017404:	6810      	ldr	r0, [r2, #0]
 8017406:	6852      	ldr	r2, [r2, #4]
 8017408:	605a      	str	r2, [r3, #4]
 801740a:	4401      	add	r1, r0
 801740c:	6019      	str	r1, [r3, #0]
 801740e:	e7d7      	b.n	80173c0 <_free_r+0x24>
 8017410:	d902      	bls.n	8017418 <_free_r+0x7c>
 8017412:	230c      	movs	r3, #12
 8017414:	602b      	str	r3, [r5, #0]
 8017416:	e7d3      	b.n	80173c0 <_free_r+0x24>
 8017418:	6820      	ldr	r0, [r4, #0]
 801741a:	1821      	adds	r1, r4, r0
 801741c:	428a      	cmp	r2, r1
 801741e:	bf04      	itt	eq
 8017420:	6811      	ldreq	r1, [r2, #0]
 8017422:	6852      	ldreq	r2, [r2, #4]
 8017424:	6062      	str	r2, [r4, #4]
 8017426:	bf04      	itt	eq
 8017428:	1809      	addeq	r1, r1, r0
 801742a:	6021      	streq	r1, [r4, #0]
 801742c:	605c      	str	r4, [r3, #4]
 801742e:	e7c7      	b.n	80173c0 <_free_r+0x24>
 8017430:	bd38      	pop	{r3, r4, r5, pc}
 8017432:	bf00      	nop
 8017434:	20008870 	.word	0x20008870

08017438 <_malloc_r>:
 8017438:	b570      	push	{r4, r5, r6, lr}
 801743a:	1ccd      	adds	r5, r1, #3
 801743c:	f025 0503 	bic.w	r5, r5, #3
 8017440:	3508      	adds	r5, #8
 8017442:	2d0c      	cmp	r5, #12
 8017444:	bf38      	it	cc
 8017446:	250c      	movcc	r5, #12
 8017448:	2d00      	cmp	r5, #0
 801744a:	4606      	mov	r6, r0
 801744c:	db01      	blt.n	8017452 <_malloc_r+0x1a>
 801744e:	42a9      	cmp	r1, r5
 8017450:	d903      	bls.n	801745a <_malloc_r+0x22>
 8017452:	230c      	movs	r3, #12
 8017454:	6033      	str	r3, [r6, #0]
 8017456:	2000      	movs	r0, #0
 8017458:	bd70      	pop	{r4, r5, r6, pc}
 801745a:	f000 f88b 	bl	8017574 <__malloc_lock>
 801745e:	4a21      	ldr	r2, [pc, #132]	; (80174e4 <_malloc_r+0xac>)
 8017460:	6814      	ldr	r4, [r2, #0]
 8017462:	4621      	mov	r1, r4
 8017464:	b991      	cbnz	r1, 801748c <_malloc_r+0x54>
 8017466:	4c20      	ldr	r4, [pc, #128]	; (80174e8 <_malloc_r+0xb0>)
 8017468:	6823      	ldr	r3, [r4, #0]
 801746a:	b91b      	cbnz	r3, 8017474 <_malloc_r+0x3c>
 801746c:	4630      	mov	r0, r6
 801746e:	f000 f83d 	bl	80174ec <_sbrk_r>
 8017472:	6020      	str	r0, [r4, #0]
 8017474:	4629      	mov	r1, r5
 8017476:	4630      	mov	r0, r6
 8017478:	f000 f838 	bl	80174ec <_sbrk_r>
 801747c:	1c43      	adds	r3, r0, #1
 801747e:	d124      	bne.n	80174ca <_malloc_r+0x92>
 8017480:	230c      	movs	r3, #12
 8017482:	6033      	str	r3, [r6, #0]
 8017484:	4630      	mov	r0, r6
 8017486:	f000 f876 	bl	8017576 <__malloc_unlock>
 801748a:	e7e4      	b.n	8017456 <_malloc_r+0x1e>
 801748c:	680b      	ldr	r3, [r1, #0]
 801748e:	1b5b      	subs	r3, r3, r5
 8017490:	d418      	bmi.n	80174c4 <_malloc_r+0x8c>
 8017492:	2b0b      	cmp	r3, #11
 8017494:	d90f      	bls.n	80174b6 <_malloc_r+0x7e>
 8017496:	600b      	str	r3, [r1, #0]
 8017498:	50cd      	str	r5, [r1, r3]
 801749a:	18cc      	adds	r4, r1, r3
 801749c:	4630      	mov	r0, r6
 801749e:	f000 f86a 	bl	8017576 <__malloc_unlock>
 80174a2:	f104 000b 	add.w	r0, r4, #11
 80174a6:	1d23      	adds	r3, r4, #4
 80174a8:	f020 0007 	bic.w	r0, r0, #7
 80174ac:	1ac3      	subs	r3, r0, r3
 80174ae:	d0d3      	beq.n	8017458 <_malloc_r+0x20>
 80174b0:	425a      	negs	r2, r3
 80174b2:	50e2      	str	r2, [r4, r3]
 80174b4:	e7d0      	b.n	8017458 <_malloc_r+0x20>
 80174b6:	428c      	cmp	r4, r1
 80174b8:	684b      	ldr	r3, [r1, #4]
 80174ba:	bf16      	itet	ne
 80174bc:	6063      	strne	r3, [r4, #4]
 80174be:	6013      	streq	r3, [r2, #0]
 80174c0:	460c      	movne	r4, r1
 80174c2:	e7eb      	b.n	801749c <_malloc_r+0x64>
 80174c4:	460c      	mov	r4, r1
 80174c6:	6849      	ldr	r1, [r1, #4]
 80174c8:	e7cc      	b.n	8017464 <_malloc_r+0x2c>
 80174ca:	1cc4      	adds	r4, r0, #3
 80174cc:	f024 0403 	bic.w	r4, r4, #3
 80174d0:	42a0      	cmp	r0, r4
 80174d2:	d005      	beq.n	80174e0 <_malloc_r+0xa8>
 80174d4:	1a21      	subs	r1, r4, r0
 80174d6:	4630      	mov	r0, r6
 80174d8:	f000 f808 	bl	80174ec <_sbrk_r>
 80174dc:	3001      	adds	r0, #1
 80174de:	d0cf      	beq.n	8017480 <_malloc_r+0x48>
 80174e0:	6025      	str	r5, [r4, #0]
 80174e2:	e7db      	b.n	801749c <_malloc_r+0x64>
 80174e4:	20008870 	.word	0x20008870
 80174e8:	20008874 	.word	0x20008874

080174ec <_sbrk_r>:
 80174ec:	b538      	push	{r3, r4, r5, lr}
 80174ee:	4c06      	ldr	r4, [pc, #24]	; (8017508 <_sbrk_r+0x1c>)
 80174f0:	2300      	movs	r3, #0
 80174f2:	4605      	mov	r5, r0
 80174f4:	4608      	mov	r0, r1
 80174f6:	6023      	str	r3, [r4, #0]
 80174f8:	f7ec ffe0 	bl	80044bc <_sbrk>
 80174fc:	1c43      	adds	r3, r0, #1
 80174fe:	d102      	bne.n	8017506 <_sbrk_r+0x1a>
 8017500:	6823      	ldr	r3, [r4, #0]
 8017502:	b103      	cbz	r3, 8017506 <_sbrk_r+0x1a>
 8017504:	602b      	str	r3, [r5, #0]
 8017506:	bd38      	pop	{r3, r4, r5, pc}
 8017508:	20016ffc 	.word	0x20016ffc

0801750c <sniprintf>:
 801750c:	b40c      	push	{r2, r3}
 801750e:	b530      	push	{r4, r5, lr}
 8017510:	4b17      	ldr	r3, [pc, #92]	; (8017570 <sniprintf+0x64>)
 8017512:	1e0c      	subs	r4, r1, #0
 8017514:	b09d      	sub	sp, #116	; 0x74
 8017516:	681d      	ldr	r5, [r3, #0]
 8017518:	da08      	bge.n	801752c <sniprintf+0x20>
 801751a:	238b      	movs	r3, #139	; 0x8b
 801751c:	602b      	str	r3, [r5, #0]
 801751e:	f04f 30ff 	mov.w	r0, #4294967295
 8017522:	b01d      	add	sp, #116	; 0x74
 8017524:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017528:	b002      	add	sp, #8
 801752a:	4770      	bx	lr
 801752c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8017530:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017534:	bf14      	ite	ne
 8017536:	f104 33ff 	addne.w	r3, r4, #4294967295
 801753a:	4623      	moveq	r3, r4
 801753c:	9304      	str	r3, [sp, #16]
 801753e:	9307      	str	r3, [sp, #28]
 8017540:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017544:	9002      	str	r0, [sp, #8]
 8017546:	9006      	str	r0, [sp, #24]
 8017548:	f8ad 3016 	strh.w	r3, [sp, #22]
 801754c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801754e:	ab21      	add	r3, sp, #132	; 0x84
 8017550:	a902      	add	r1, sp, #8
 8017552:	4628      	mov	r0, r5
 8017554:	9301      	str	r3, [sp, #4]
 8017556:	f000 f869 	bl	801762c <_svfiprintf_r>
 801755a:	1c43      	adds	r3, r0, #1
 801755c:	bfbc      	itt	lt
 801755e:	238b      	movlt	r3, #139	; 0x8b
 8017560:	602b      	strlt	r3, [r5, #0]
 8017562:	2c00      	cmp	r4, #0
 8017564:	d0dd      	beq.n	8017522 <sniprintf+0x16>
 8017566:	9b02      	ldr	r3, [sp, #8]
 8017568:	2200      	movs	r2, #0
 801756a:	701a      	strb	r2, [r3, #0]
 801756c:	e7d9      	b.n	8017522 <sniprintf+0x16>
 801756e:	bf00      	nop
 8017570:	20000194 	.word	0x20000194

08017574 <__malloc_lock>:
 8017574:	4770      	bx	lr

08017576 <__malloc_unlock>:
 8017576:	4770      	bx	lr

08017578 <__ssputs_r>:
 8017578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801757c:	688e      	ldr	r6, [r1, #8]
 801757e:	429e      	cmp	r6, r3
 8017580:	4682      	mov	sl, r0
 8017582:	460c      	mov	r4, r1
 8017584:	4690      	mov	r8, r2
 8017586:	4699      	mov	r9, r3
 8017588:	d837      	bhi.n	80175fa <__ssputs_r+0x82>
 801758a:	898a      	ldrh	r2, [r1, #12]
 801758c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017590:	d031      	beq.n	80175f6 <__ssputs_r+0x7e>
 8017592:	6825      	ldr	r5, [r4, #0]
 8017594:	6909      	ldr	r1, [r1, #16]
 8017596:	1a6f      	subs	r7, r5, r1
 8017598:	6965      	ldr	r5, [r4, #20]
 801759a:	2302      	movs	r3, #2
 801759c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80175a0:	fb95 f5f3 	sdiv	r5, r5, r3
 80175a4:	f109 0301 	add.w	r3, r9, #1
 80175a8:	443b      	add	r3, r7
 80175aa:	429d      	cmp	r5, r3
 80175ac:	bf38      	it	cc
 80175ae:	461d      	movcc	r5, r3
 80175b0:	0553      	lsls	r3, r2, #21
 80175b2:	d530      	bpl.n	8017616 <__ssputs_r+0x9e>
 80175b4:	4629      	mov	r1, r5
 80175b6:	f7ff ff3f 	bl	8017438 <_malloc_r>
 80175ba:	4606      	mov	r6, r0
 80175bc:	b950      	cbnz	r0, 80175d4 <__ssputs_r+0x5c>
 80175be:	230c      	movs	r3, #12
 80175c0:	f8ca 3000 	str.w	r3, [sl]
 80175c4:	89a3      	ldrh	r3, [r4, #12]
 80175c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80175ca:	81a3      	strh	r3, [r4, #12]
 80175cc:	f04f 30ff 	mov.w	r0, #4294967295
 80175d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80175d4:	463a      	mov	r2, r7
 80175d6:	6921      	ldr	r1, [r4, #16]
 80175d8:	f7ff fecc 	bl	8017374 <memcpy>
 80175dc:	89a3      	ldrh	r3, [r4, #12]
 80175de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80175e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80175e6:	81a3      	strh	r3, [r4, #12]
 80175e8:	6126      	str	r6, [r4, #16]
 80175ea:	6165      	str	r5, [r4, #20]
 80175ec:	443e      	add	r6, r7
 80175ee:	1bed      	subs	r5, r5, r7
 80175f0:	6026      	str	r6, [r4, #0]
 80175f2:	60a5      	str	r5, [r4, #8]
 80175f4:	464e      	mov	r6, r9
 80175f6:	454e      	cmp	r6, r9
 80175f8:	d900      	bls.n	80175fc <__ssputs_r+0x84>
 80175fa:	464e      	mov	r6, r9
 80175fc:	4632      	mov	r2, r6
 80175fe:	4641      	mov	r1, r8
 8017600:	6820      	ldr	r0, [r4, #0]
 8017602:	f000 fa93 	bl	8017b2c <memmove>
 8017606:	68a3      	ldr	r3, [r4, #8]
 8017608:	1b9b      	subs	r3, r3, r6
 801760a:	60a3      	str	r3, [r4, #8]
 801760c:	6823      	ldr	r3, [r4, #0]
 801760e:	441e      	add	r6, r3
 8017610:	6026      	str	r6, [r4, #0]
 8017612:	2000      	movs	r0, #0
 8017614:	e7dc      	b.n	80175d0 <__ssputs_r+0x58>
 8017616:	462a      	mov	r2, r5
 8017618:	f000 faa1 	bl	8017b5e <_realloc_r>
 801761c:	4606      	mov	r6, r0
 801761e:	2800      	cmp	r0, #0
 8017620:	d1e2      	bne.n	80175e8 <__ssputs_r+0x70>
 8017622:	6921      	ldr	r1, [r4, #16]
 8017624:	4650      	mov	r0, sl
 8017626:	f7ff feb9 	bl	801739c <_free_r>
 801762a:	e7c8      	b.n	80175be <__ssputs_r+0x46>

0801762c <_svfiprintf_r>:
 801762c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017630:	461d      	mov	r5, r3
 8017632:	898b      	ldrh	r3, [r1, #12]
 8017634:	061f      	lsls	r7, r3, #24
 8017636:	b09d      	sub	sp, #116	; 0x74
 8017638:	4680      	mov	r8, r0
 801763a:	460c      	mov	r4, r1
 801763c:	4616      	mov	r6, r2
 801763e:	d50f      	bpl.n	8017660 <_svfiprintf_r+0x34>
 8017640:	690b      	ldr	r3, [r1, #16]
 8017642:	b96b      	cbnz	r3, 8017660 <_svfiprintf_r+0x34>
 8017644:	2140      	movs	r1, #64	; 0x40
 8017646:	f7ff fef7 	bl	8017438 <_malloc_r>
 801764a:	6020      	str	r0, [r4, #0]
 801764c:	6120      	str	r0, [r4, #16]
 801764e:	b928      	cbnz	r0, 801765c <_svfiprintf_r+0x30>
 8017650:	230c      	movs	r3, #12
 8017652:	f8c8 3000 	str.w	r3, [r8]
 8017656:	f04f 30ff 	mov.w	r0, #4294967295
 801765a:	e0c8      	b.n	80177ee <_svfiprintf_r+0x1c2>
 801765c:	2340      	movs	r3, #64	; 0x40
 801765e:	6163      	str	r3, [r4, #20]
 8017660:	2300      	movs	r3, #0
 8017662:	9309      	str	r3, [sp, #36]	; 0x24
 8017664:	2320      	movs	r3, #32
 8017666:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801766a:	2330      	movs	r3, #48	; 0x30
 801766c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017670:	9503      	str	r5, [sp, #12]
 8017672:	f04f 0b01 	mov.w	fp, #1
 8017676:	4637      	mov	r7, r6
 8017678:	463d      	mov	r5, r7
 801767a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801767e:	b10b      	cbz	r3, 8017684 <_svfiprintf_r+0x58>
 8017680:	2b25      	cmp	r3, #37	; 0x25
 8017682:	d13e      	bne.n	8017702 <_svfiprintf_r+0xd6>
 8017684:	ebb7 0a06 	subs.w	sl, r7, r6
 8017688:	d00b      	beq.n	80176a2 <_svfiprintf_r+0x76>
 801768a:	4653      	mov	r3, sl
 801768c:	4632      	mov	r2, r6
 801768e:	4621      	mov	r1, r4
 8017690:	4640      	mov	r0, r8
 8017692:	f7ff ff71 	bl	8017578 <__ssputs_r>
 8017696:	3001      	adds	r0, #1
 8017698:	f000 80a4 	beq.w	80177e4 <_svfiprintf_r+0x1b8>
 801769c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801769e:	4453      	add	r3, sl
 80176a0:	9309      	str	r3, [sp, #36]	; 0x24
 80176a2:	783b      	ldrb	r3, [r7, #0]
 80176a4:	2b00      	cmp	r3, #0
 80176a6:	f000 809d 	beq.w	80177e4 <_svfiprintf_r+0x1b8>
 80176aa:	2300      	movs	r3, #0
 80176ac:	f04f 32ff 	mov.w	r2, #4294967295
 80176b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80176b4:	9304      	str	r3, [sp, #16]
 80176b6:	9307      	str	r3, [sp, #28]
 80176b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80176bc:	931a      	str	r3, [sp, #104]	; 0x68
 80176be:	462f      	mov	r7, r5
 80176c0:	2205      	movs	r2, #5
 80176c2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80176c6:	4850      	ldr	r0, [pc, #320]	; (8017808 <_svfiprintf_r+0x1dc>)
 80176c8:	f7e8 fdaa 	bl	8000220 <memchr>
 80176cc:	9b04      	ldr	r3, [sp, #16]
 80176ce:	b9d0      	cbnz	r0, 8017706 <_svfiprintf_r+0xda>
 80176d0:	06d9      	lsls	r1, r3, #27
 80176d2:	bf44      	itt	mi
 80176d4:	2220      	movmi	r2, #32
 80176d6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80176da:	071a      	lsls	r2, r3, #28
 80176dc:	bf44      	itt	mi
 80176de:	222b      	movmi	r2, #43	; 0x2b
 80176e0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80176e4:	782a      	ldrb	r2, [r5, #0]
 80176e6:	2a2a      	cmp	r2, #42	; 0x2a
 80176e8:	d015      	beq.n	8017716 <_svfiprintf_r+0xea>
 80176ea:	9a07      	ldr	r2, [sp, #28]
 80176ec:	462f      	mov	r7, r5
 80176ee:	2000      	movs	r0, #0
 80176f0:	250a      	movs	r5, #10
 80176f2:	4639      	mov	r1, r7
 80176f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80176f8:	3b30      	subs	r3, #48	; 0x30
 80176fa:	2b09      	cmp	r3, #9
 80176fc:	d94d      	bls.n	801779a <_svfiprintf_r+0x16e>
 80176fe:	b1b8      	cbz	r0, 8017730 <_svfiprintf_r+0x104>
 8017700:	e00f      	b.n	8017722 <_svfiprintf_r+0xf6>
 8017702:	462f      	mov	r7, r5
 8017704:	e7b8      	b.n	8017678 <_svfiprintf_r+0x4c>
 8017706:	4a40      	ldr	r2, [pc, #256]	; (8017808 <_svfiprintf_r+0x1dc>)
 8017708:	1a80      	subs	r0, r0, r2
 801770a:	fa0b f000 	lsl.w	r0, fp, r0
 801770e:	4318      	orrs	r0, r3
 8017710:	9004      	str	r0, [sp, #16]
 8017712:	463d      	mov	r5, r7
 8017714:	e7d3      	b.n	80176be <_svfiprintf_r+0x92>
 8017716:	9a03      	ldr	r2, [sp, #12]
 8017718:	1d11      	adds	r1, r2, #4
 801771a:	6812      	ldr	r2, [r2, #0]
 801771c:	9103      	str	r1, [sp, #12]
 801771e:	2a00      	cmp	r2, #0
 8017720:	db01      	blt.n	8017726 <_svfiprintf_r+0xfa>
 8017722:	9207      	str	r2, [sp, #28]
 8017724:	e004      	b.n	8017730 <_svfiprintf_r+0x104>
 8017726:	4252      	negs	r2, r2
 8017728:	f043 0302 	orr.w	r3, r3, #2
 801772c:	9207      	str	r2, [sp, #28]
 801772e:	9304      	str	r3, [sp, #16]
 8017730:	783b      	ldrb	r3, [r7, #0]
 8017732:	2b2e      	cmp	r3, #46	; 0x2e
 8017734:	d10c      	bne.n	8017750 <_svfiprintf_r+0x124>
 8017736:	787b      	ldrb	r3, [r7, #1]
 8017738:	2b2a      	cmp	r3, #42	; 0x2a
 801773a:	d133      	bne.n	80177a4 <_svfiprintf_r+0x178>
 801773c:	9b03      	ldr	r3, [sp, #12]
 801773e:	1d1a      	adds	r2, r3, #4
 8017740:	681b      	ldr	r3, [r3, #0]
 8017742:	9203      	str	r2, [sp, #12]
 8017744:	2b00      	cmp	r3, #0
 8017746:	bfb8      	it	lt
 8017748:	f04f 33ff 	movlt.w	r3, #4294967295
 801774c:	3702      	adds	r7, #2
 801774e:	9305      	str	r3, [sp, #20]
 8017750:	4d2e      	ldr	r5, [pc, #184]	; (801780c <_svfiprintf_r+0x1e0>)
 8017752:	7839      	ldrb	r1, [r7, #0]
 8017754:	2203      	movs	r2, #3
 8017756:	4628      	mov	r0, r5
 8017758:	f7e8 fd62 	bl	8000220 <memchr>
 801775c:	b138      	cbz	r0, 801776e <_svfiprintf_r+0x142>
 801775e:	2340      	movs	r3, #64	; 0x40
 8017760:	1b40      	subs	r0, r0, r5
 8017762:	fa03 f000 	lsl.w	r0, r3, r0
 8017766:	9b04      	ldr	r3, [sp, #16]
 8017768:	4303      	orrs	r3, r0
 801776a:	3701      	adds	r7, #1
 801776c:	9304      	str	r3, [sp, #16]
 801776e:	7839      	ldrb	r1, [r7, #0]
 8017770:	4827      	ldr	r0, [pc, #156]	; (8017810 <_svfiprintf_r+0x1e4>)
 8017772:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017776:	2206      	movs	r2, #6
 8017778:	1c7e      	adds	r6, r7, #1
 801777a:	f7e8 fd51 	bl	8000220 <memchr>
 801777e:	2800      	cmp	r0, #0
 8017780:	d038      	beq.n	80177f4 <_svfiprintf_r+0x1c8>
 8017782:	4b24      	ldr	r3, [pc, #144]	; (8017814 <_svfiprintf_r+0x1e8>)
 8017784:	bb13      	cbnz	r3, 80177cc <_svfiprintf_r+0x1a0>
 8017786:	9b03      	ldr	r3, [sp, #12]
 8017788:	3307      	adds	r3, #7
 801778a:	f023 0307 	bic.w	r3, r3, #7
 801778e:	3308      	adds	r3, #8
 8017790:	9303      	str	r3, [sp, #12]
 8017792:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017794:	444b      	add	r3, r9
 8017796:	9309      	str	r3, [sp, #36]	; 0x24
 8017798:	e76d      	b.n	8017676 <_svfiprintf_r+0x4a>
 801779a:	fb05 3202 	mla	r2, r5, r2, r3
 801779e:	2001      	movs	r0, #1
 80177a0:	460f      	mov	r7, r1
 80177a2:	e7a6      	b.n	80176f2 <_svfiprintf_r+0xc6>
 80177a4:	2300      	movs	r3, #0
 80177a6:	3701      	adds	r7, #1
 80177a8:	9305      	str	r3, [sp, #20]
 80177aa:	4619      	mov	r1, r3
 80177ac:	250a      	movs	r5, #10
 80177ae:	4638      	mov	r0, r7
 80177b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80177b4:	3a30      	subs	r2, #48	; 0x30
 80177b6:	2a09      	cmp	r2, #9
 80177b8:	d903      	bls.n	80177c2 <_svfiprintf_r+0x196>
 80177ba:	2b00      	cmp	r3, #0
 80177bc:	d0c8      	beq.n	8017750 <_svfiprintf_r+0x124>
 80177be:	9105      	str	r1, [sp, #20]
 80177c0:	e7c6      	b.n	8017750 <_svfiprintf_r+0x124>
 80177c2:	fb05 2101 	mla	r1, r5, r1, r2
 80177c6:	2301      	movs	r3, #1
 80177c8:	4607      	mov	r7, r0
 80177ca:	e7f0      	b.n	80177ae <_svfiprintf_r+0x182>
 80177cc:	ab03      	add	r3, sp, #12
 80177ce:	9300      	str	r3, [sp, #0]
 80177d0:	4622      	mov	r2, r4
 80177d2:	4b11      	ldr	r3, [pc, #68]	; (8017818 <_svfiprintf_r+0x1ec>)
 80177d4:	a904      	add	r1, sp, #16
 80177d6:	4640      	mov	r0, r8
 80177d8:	f3af 8000 	nop.w
 80177dc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80177e0:	4681      	mov	r9, r0
 80177e2:	d1d6      	bne.n	8017792 <_svfiprintf_r+0x166>
 80177e4:	89a3      	ldrh	r3, [r4, #12]
 80177e6:	065b      	lsls	r3, r3, #25
 80177e8:	f53f af35 	bmi.w	8017656 <_svfiprintf_r+0x2a>
 80177ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80177ee:	b01d      	add	sp, #116	; 0x74
 80177f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80177f4:	ab03      	add	r3, sp, #12
 80177f6:	9300      	str	r3, [sp, #0]
 80177f8:	4622      	mov	r2, r4
 80177fa:	4b07      	ldr	r3, [pc, #28]	; (8017818 <_svfiprintf_r+0x1ec>)
 80177fc:	a904      	add	r1, sp, #16
 80177fe:	4640      	mov	r0, r8
 8017800:	f000 f882 	bl	8017908 <_printf_i>
 8017804:	e7ea      	b.n	80177dc <_svfiprintf_r+0x1b0>
 8017806:	bf00      	nop
 8017808:	0801a3d8 	.word	0x0801a3d8
 801780c:	0801a3de 	.word	0x0801a3de
 8017810:	0801a3e2 	.word	0x0801a3e2
 8017814:	00000000 	.word	0x00000000
 8017818:	08017579 	.word	0x08017579

0801781c <_printf_common>:
 801781c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017820:	4691      	mov	r9, r2
 8017822:	461f      	mov	r7, r3
 8017824:	688a      	ldr	r2, [r1, #8]
 8017826:	690b      	ldr	r3, [r1, #16]
 8017828:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801782c:	4293      	cmp	r3, r2
 801782e:	bfb8      	it	lt
 8017830:	4613      	movlt	r3, r2
 8017832:	f8c9 3000 	str.w	r3, [r9]
 8017836:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801783a:	4606      	mov	r6, r0
 801783c:	460c      	mov	r4, r1
 801783e:	b112      	cbz	r2, 8017846 <_printf_common+0x2a>
 8017840:	3301      	adds	r3, #1
 8017842:	f8c9 3000 	str.w	r3, [r9]
 8017846:	6823      	ldr	r3, [r4, #0]
 8017848:	0699      	lsls	r1, r3, #26
 801784a:	bf42      	ittt	mi
 801784c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8017850:	3302      	addmi	r3, #2
 8017852:	f8c9 3000 	strmi.w	r3, [r9]
 8017856:	6825      	ldr	r5, [r4, #0]
 8017858:	f015 0506 	ands.w	r5, r5, #6
 801785c:	d107      	bne.n	801786e <_printf_common+0x52>
 801785e:	f104 0a19 	add.w	sl, r4, #25
 8017862:	68e3      	ldr	r3, [r4, #12]
 8017864:	f8d9 2000 	ldr.w	r2, [r9]
 8017868:	1a9b      	subs	r3, r3, r2
 801786a:	42ab      	cmp	r3, r5
 801786c:	dc28      	bgt.n	80178c0 <_printf_common+0xa4>
 801786e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8017872:	6822      	ldr	r2, [r4, #0]
 8017874:	3300      	adds	r3, #0
 8017876:	bf18      	it	ne
 8017878:	2301      	movne	r3, #1
 801787a:	0692      	lsls	r2, r2, #26
 801787c:	d42d      	bmi.n	80178da <_printf_common+0xbe>
 801787e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017882:	4639      	mov	r1, r7
 8017884:	4630      	mov	r0, r6
 8017886:	47c0      	blx	r8
 8017888:	3001      	adds	r0, #1
 801788a:	d020      	beq.n	80178ce <_printf_common+0xb2>
 801788c:	6823      	ldr	r3, [r4, #0]
 801788e:	68e5      	ldr	r5, [r4, #12]
 8017890:	f8d9 2000 	ldr.w	r2, [r9]
 8017894:	f003 0306 	and.w	r3, r3, #6
 8017898:	2b04      	cmp	r3, #4
 801789a:	bf08      	it	eq
 801789c:	1aad      	subeq	r5, r5, r2
 801789e:	68a3      	ldr	r3, [r4, #8]
 80178a0:	6922      	ldr	r2, [r4, #16]
 80178a2:	bf0c      	ite	eq
 80178a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80178a8:	2500      	movne	r5, #0
 80178aa:	4293      	cmp	r3, r2
 80178ac:	bfc4      	itt	gt
 80178ae:	1a9b      	subgt	r3, r3, r2
 80178b0:	18ed      	addgt	r5, r5, r3
 80178b2:	f04f 0900 	mov.w	r9, #0
 80178b6:	341a      	adds	r4, #26
 80178b8:	454d      	cmp	r5, r9
 80178ba:	d11a      	bne.n	80178f2 <_printf_common+0xd6>
 80178bc:	2000      	movs	r0, #0
 80178be:	e008      	b.n	80178d2 <_printf_common+0xb6>
 80178c0:	2301      	movs	r3, #1
 80178c2:	4652      	mov	r2, sl
 80178c4:	4639      	mov	r1, r7
 80178c6:	4630      	mov	r0, r6
 80178c8:	47c0      	blx	r8
 80178ca:	3001      	adds	r0, #1
 80178cc:	d103      	bne.n	80178d6 <_printf_common+0xba>
 80178ce:	f04f 30ff 	mov.w	r0, #4294967295
 80178d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80178d6:	3501      	adds	r5, #1
 80178d8:	e7c3      	b.n	8017862 <_printf_common+0x46>
 80178da:	18e1      	adds	r1, r4, r3
 80178dc:	1c5a      	adds	r2, r3, #1
 80178de:	2030      	movs	r0, #48	; 0x30
 80178e0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80178e4:	4422      	add	r2, r4
 80178e6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80178ea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80178ee:	3302      	adds	r3, #2
 80178f0:	e7c5      	b.n	801787e <_printf_common+0x62>
 80178f2:	2301      	movs	r3, #1
 80178f4:	4622      	mov	r2, r4
 80178f6:	4639      	mov	r1, r7
 80178f8:	4630      	mov	r0, r6
 80178fa:	47c0      	blx	r8
 80178fc:	3001      	adds	r0, #1
 80178fe:	d0e6      	beq.n	80178ce <_printf_common+0xb2>
 8017900:	f109 0901 	add.w	r9, r9, #1
 8017904:	e7d8      	b.n	80178b8 <_printf_common+0x9c>
	...

08017908 <_printf_i>:
 8017908:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801790c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8017910:	460c      	mov	r4, r1
 8017912:	7e09      	ldrb	r1, [r1, #24]
 8017914:	b085      	sub	sp, #20
 8017916:	296e      	cmp	r1, #110	; 0x6e
 8017918:	4617      	mov	r7, r2
 801791a:	4606      	mov	r6, r0
 801791c:	4698      	mov	r8, r3
 801791e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017920:	f000 80b3 	beq.w	8017a8a <_printf_i+0x182>
 8017924:	d822      	bhi.n	801796c <_printf_i+0x64>
 8017926:	2963      	cmp	r1, #99	; 0x63
 8017928:	d036      	beq.n	8017998 <_printf_i+0x90>
 801792a:	d80a      	bhi.n	8017942 <_printf_i+0x3a>
 801792c:	2900      	cmp	r1, #0
 801792e:	f000 80b9 	beq.w	8017aa4 <_printf_i+0x19c>
 8017932:	2958      	cmp	r1, #88	; 0x58
 8017934:	f000 8083 	beq.w	8017a3e <_printf_i+0x136>
 8017938:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801793c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8017940:	e032      	b.n	80179a8 <_printf_i+0xa0>
 8017942:	2964      	cmp	r1, #100	; 0x64
 8017944:	d001      	beq.n	801794a <_printf_i+0x42>
 8017946:	2969      	cmp	r1, #105	; 0x69
 8017948:	d1f6      	bne.n	8017938 <_printf_i+0x30>
 801794a:	6820      	ldr	r0, [r4, #0]
 801794c:	6813      	ldr	r3, [r2, #0]
 801794e:	0605      	lsls	r5, r0, #24
 8017950:	f103 0104 	add.w	r1, r3, #4
 8017954:	d52a      	bpl.n	80179ac <_printf_i+0xa4>
 8017956:	681b      	ldr	r3, [r3, #0]
 8017958:	6011      	str	r1, [r2, #0]
 801795a:	2b00      	cmp	r3, #0
 801795c:	da03      	bge.n	8017966 <_printf_i+0x5e>
 801795e:	222d      	movs	r2, #45	; 0x2d
 8017960:	425b      	negs	r3, r3
 8017962:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8017966:	486f      	ldr	r0, [pc, #444]	; (8017b24 <_printf_i+0x21c>)
 8017968:	220a      	movs	r2, #10
 801796a:	e039      	b.n	80179e0 <_printf_i+0xd8>
 801796c:	2973      	cmp	r1, #115	; 0x73
 801796e:	f000 809d 	beq.w	8017aac <_printf_i+0x1a4>
 8017972:	d808      	bhi.n	8017986 <_printf_i+0x7e>
 8017974:	296f      	cmp	r1, #111	; 0x6f
 8017976:	d020      	beq.n	80179ba <_printf_i+0xb2>
 8017978:	2970      	cmp	r1, #112	; 0x70
 801797a:	d1dd      	bne.n	8017938 <_printf_i+0x30>
 801797c:	6823      	ldr	r3, [r4, #0]
 801797e:	f043 0320 	orr.w	r3, r3, #32
 8017982:	6023      	str	r3, [r4, #0]
 8017984:	e003      	b.n	801798e <_printf_i+0x86>
 8017986:	2975      	cmp	r1, #117	; 0x75
 8017988:	d017      	beq.n	80179ba <_printf_i+0xb2>
 801798a:	2978      	cmp	r1, #120	; 0x78
 801798c:	d1d4      	bne.n	8017938 <_printf_i+0x30>
 801798e:	2378      	movs	r3, #120	; 0x78
 8017990:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017994:	4864      	ldr	r0, [pc, #400]	; (8017b28 <_printf_i+0x220>)
 8017996:	e055      	b.n	8017a44 <_printf_i+0x13c>
 8017998:	6813      	ldr	r3, [r2, #0]
 801799a:	1d19      	adds	r1, r3, #4
 801799c:	681b      	ldr	r3, [r3, #0]
 801799e:	6011      	str	r1, [r2, #0]
 80179a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80179a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80179a8:	2301      	movs	r3, #1
 80179aa:	e08c      	b.n	8017ac6 <_printf_i+0x1be>
 80179ac:	681b      	ldr	r3, [r3, #0]
 80179ae:	6011      	str	r1, [r2, #0]
 80179b0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80179b4:	bf18      	it	ne
 80179b6:	b21b      	sxthne	r3, r3
 80179b8:	e7cf      	b.n	801795a <_printf_i+0x52>
 80179ba:	6813      	ldr	r3, [r2, #0]
 80179bc:	6825      	ldr	r5, [r4, #0]
 80179be:	1d18      	adds	r0, r3, #4
 80179c0:	6010      	str	r0, [r2, #0]
 80179c2:	0628      	lsls	r0, r5, #24
 80179c4:	d501      	bpl.n	80179ca <_printf_i+0xc2>
 80179c6:	681b      	ldr	r3, [r3, #0]
 80179c8:	e002      	b.n	80179d0 <_printf_i+0xc8>
 80179ca:	0668      	lsls	r0, r5, #25
 80179cc:	d5fb      	bpl.n	80179c6 <_printf_i+0xbe>
 80179ce:	881b      	ldrh	r3, [r3, #0]
 80179d0:	4854      	ldr	r0, [pc, #336]	; (8017b24 <_printf_i+0x21c>)
 80179d2:	296f      	cmp	r1, #111	; 0x6f
 80179d4:	bf14      	ite	ne
 80179d6:	220a      	movne	r2, #10
 80179d8:	2208      	moveq	r2, #8
 80179da:	2100      	movs	r1, #0
 80179dc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80179e0:	6865      	ldr	r5, [r4, #4]
 80179e2:	60a5      	str	r5, [r4, #8]
 80179e4:	2d00      	cmp	r5, #0
 80179e6:	f2c0 8095 	blt.w	8017b14 <_printf_i+0x20c>
 80179ea:	6821      	ldr	r1, [r4, #0]
 80179ec:	f021 0104 	bic.w	r1, r1, #4
 80179f0:	6021      	str	r1, [r4, #0]
 80179f2:	2b00      	cmp	r3, #0
 80179f4:	d13d      	bne.n	8017a72 <_printf_i+0x16a>
 80179f6:	2d00      	cmp	r5, #0
 80179f8:	f040 808e 	bne.w	8017b18 <_printf_i+0x210>
 80179fc:	4665      	mov	r5, ip
 80179fe:	2a08      	cmp	r2, #8
 8017a00:	d10b      	bne.n	8017a1a <_printf_i+0x112>
 8017a02:	6823      	ldr	r3, [r4, #0]
 8017a04:	07db      	lsls	r3, r3, #31
 8017a06:	d508      	bpl.n	8017a1a <_printf_i+0x112>
 8017a08:	6923      	ldr	r3, [r4, #16]
 8017a0a:	6862      	ldr	r2, [r4, #4]
 8017a0c:	429a      	cmp	r2, r3
 8017a0e:	bfde      	ittt	le
 8017a10:	2330      	movle	r3, #48	; 0x30
 8017a12:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017a16:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017a1a:	ebac 0305 	sub.w	r3, ip, r5
 8017a1e:	6123      	str	r3, [r4, #16]
 8017a20:	f8cd 8000 	str.w	r8, [sp]
 8017a24:	463b      	mov	r3, r7
 8017a26:	aa03      	add	r2, sp, #12
 8017a28:	4621      	mov	r1, r4
 8017a2a:	4630      	mov	r0, r6
 8017a2c:	f7ff fef6 	bl	801781c <_printf_common>
 8017a30:	3001      	adds	r0, #1
 8017a32:	d14d      	bne.n	8017ad0 <_printf_i+0x1c8>
 8017a34:	f04f 30ff 	mov.w	r0, #4294967295
 8017a38:	b005      	add	sp, #20
 8017a3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017a3e:	4839      	ldr	r0, [pc, #228]	; (8017b24 <_printf_i+0x21c>)
 8017a40:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8017a44:	6813      	ldr	r3, [r2, #0]
 8017a46:	6821      	ldr	r1, [r4, #0]
 8017a48:	1d1d      	adds	r5, r3, #4
 8017a4a:	681b      	ldr	r3, [r3, #0]
 8017a4c:	6015      	str	r5, [r2, #0]
 8017a4e:	060a      	lsls	r2, r1, #24
 8017a50:	d50b      	bpl.n	8017a6a <_printf_i+0x162>
 8017a52:	07ca      	lsls	r2, r1, #31
 8017a54:	bf44      	itt	mi
 8017a56:	f041 0120 	orrmi.w	r1, r1, #32
 8017a5a:	6021      	strmi	r1, [r4, #0]
 8017a5c:	b91b      	cbnz	r3, 8017a66 <_printf_i+0x15e>
 8017a5e:	6822      	ldr	r2, [r4, #0]
 8017a60:	f022 0220 	bic.w	r2, r2, #32
 8017a64:	6022      	str	r2, [r4, #0]
 8017a66:	2210      	movs	r2, #16
 8017a68:	e7b7      	b.n	80179da <_printf_i+0xd2>
 8017a6a:	064d      	lsls	r5, r1, #25
 8017a6c:	bf48      	it	mi
 8017a6e:	b29b      	uxthmi	r3, r3
 8017a70:	e7ef      	b.n	8017a52 <_printf_i+0x14a>
 8017a72:	4665      	mov	r5, ip
 8017a74:	fbb3 f1f2 	udiv	r1, r3, r2
 8017a78:	fb02 3311 	mls	r3, r2, r1, r3
 8017a7c:	5cc3      	ldrb	r3, [r0, r3]
 8017a7e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8017a82:	460b      	mov	r3, r1
 8017a84:	2900      	cmp	r1, #0
 8017a86:	d1f5      	bne.n	8017a74 <_printf_i+0x16c>
 8017a88:	e7b9      	b.n	80179fe <_printf_i+0xf6>
 8017a8a:	6813      	ldr	r3, [r2, #0]
 8017a8c:	6825      	ldr	r5, [r4, #0]
 8017a8e:	6961      	ldr	r1, [r4, #20]
 8017a90:	1d18      	adds	r0, r3, #4
 8017a92:	6010      	str	r0, [r2, #0]
 8017a94:	0628      	lsls	r0, r5, #24
 8017a96:	681b      	ldr	r3, [r3, #0]
 8017a98:	d501      	bpl.n	8017a9e <_printf_i+0x196>
 8017a9a:	6019      	str	r1, [r3, #0]
 8017a9c:	e002      	b.n	8017aa4 <_printf_i+0x19c>
 8017a9e:	066a      	lsls	r2, r5, #25
 8017aa0:	d5fb      	bpl.n	8017a9a <_printf_i+0x192>
 8017aa2:	8019      	strh	r1, [r3, #0]
 8017aa4:	2300      	movs	r3, #0
 8017aa6:	6123      	str	r3, [r4, #16]
 8017aa8:	4665      	mov	r5, ip
 8017aaa:	e7b9      	b.n	8017a20 <_printf_i+0x118>
 8017aac:	6813      	ldr	r3, [r2, #0]
 8017aae:	1d19      	adds	r1, r3, #4
 8017ab0:	6011      	str	r1, [r2, #0]
 8017ab2:	681d      	ldr	r5, [r3, #0]
 8017ab4:	6862      	ldr	r2, [r4, #4]
 8017ab6:	2100      	movs	r1, #0
 8017ab8:	4628      	mov	r0, r5
 8017aba:	f7e8 fbb1 	bl	8000220 <memchr>
 8017abe:	b108      	cbz	r0, 8017ac4 <_printf_i+0x1bc>
 8017ac0:	1b40      	subs	r0, r0, r5
 8017ac2:	6060      	str	r0, [r4, #4]
 8017ac4:	6863      	ldr	r3, [r4, #4]
 8017ac6:	6123      	str	r3, [r4, #16]
 8017ac8:	2300      	movs	r3, #0
 8017aca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017ace:	e7a7      	b.n	8017a20 <_printf_i+0x118>
 8017ad0:	6923      	ldr	r3, [r4, #16]
 8017ad2:	462a      	mov	r2, r5
 8017ad4:	4639      	mov	r1, r7
 8017ad6:	4630      	mov	r0, r6
 8017ad8:	47c0      	blx	r8
 8017ada:	3001      	adds	r0, #1
 8017adc:	d0aa      	beq.n	8017a34 <_printf_i+0x12c>
 8017ade:	6823      	ldr	r3, [r4, #0]
 8017ae0:	079b      	lsls	r3, r3, #30
 8017ae2:	d413      	bmi.n	8017b0c <_printf_i+0x204>
 8017ae4:	68e0      	ldr	r0, [r4, #12]
 8017ae6:	9b03      	ldr	r3, [sp, #12]
 8017ae8:	4298      	cmp	r0, r3
 8017aea:	bfb8      	it	lt
 8017aec:	4618      	movlt	r0, r3
 8017aee:	e7a3      	b.n	8017a38 <_printf_i+0x130>
 8017af0:	2301      	movs	r3, #1
 8017af2:	464a      	mov	r2, r9
 8017af4:	4639      	mov	r1, r7
 8017af6:	4630      	mov	r0, r6
 8017af8:	47c0      	blx	r8
 8017afa:	3001      	adds	r0, #1
 8017afc:	d09a      	beq.n	8017a34 <_printf_i+0x12c>
 8017afe:	3501      	adds	r5, #1
 8017b00:	68e3      	ldr	r3, [r4, #12]
 8017b02:	9a03      	ldr	r2, [sp, #12]
 8017b04:	1a9b      	subs	r3, r3, r2
 8017b06:	42ab      	cmp	r3, r5
 8017b08:	dcf2      	bgt.n	8017af0 <_printf_i+0x1e8>
 8017b0a:	e7eb      	b.n	8017ae4 <_printf_i+0x1dc>
 8017b0c:	2500      	movs	r5, #0
 8017b0e:	f104 0919 	add.w	r9, r4, #25
 8017b12:	e7f5      	b.n	8017b00 <_printf_i+0x1f8>
 8017b14:	2b00      	cmp	r3, #0
 8017b16:	d1ac      	bne.n	8017a72 <_printf_i+0x16a>
 8017b18:	7803      	ldrb	r3, [r0, #0]
 8017b1a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017b1e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017b22:	e76c      	b.n	80179fe <_printf_i+0xf6>
 8017b24:	0801a3e9 	.word	0x0801a3e9
 8017b28:	0801a3fa 	.word	0x0801a3fa

08017b2c <memmove>:
 8017b2c:	4288      	cmp	r0, r1
 8017b2e:	b510      	push	{r4, lr}
 8017b30:	eb01 0302 	add.w	r3, r1, r2
 8017b34:	d807      	bhi.n	8017b46 <memmove+0x1a>
 8017b36:	1e42      	subs	r2, r0, #1
 8017b38:	4299      	cmp	r1, r3
 8017b3a:	d00a      	beq.n	8017b52 <memmove+0x26>
 8017b3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017b40:	f802 4f01 	strb.w	r4, [r2, #1]!
 8017b44:	e7f8      	b.n	8017b38 <memmove+0xc>
 8017b46:	4283      	cmp	r3, r0
 8017b48:	d9f5      	bls.n	8017b36 <memmove+0xa>
 8017b4a:	1881      	adds	r1, r0, r2
 8017b4c:	1ad2      	subs	r2, r2, r3
 8017b4e:	42d3      	cmn	r3, r2
 8017b50:	d100      	bne.n	8017b54 <memmove+0x28>
 8017b52:	bd10      	pop	{r4, pc}
 8017b54:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017b58:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8017b5c:	e7f7      	b.n	8017b4e <memmove+0x22>

08017b5e <_realloc_r>:
 8017b5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b60:	4607      	mov	r7, r0
 8017b62:	4614      	mov	r4, r2
 8017b64:	460e      	mov	r6, r1
 8017b66:	b921      	cbnz	r1, 8017b72 <_realloc_r+0x14>
 8017b68:	4611      	mov	r1, r2
 8017b6a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017b6e:	f7ff bc63 	b.w	8017438 <_malloc_r>
 8017b72:	b922      	cbnz	r2, 8017b7e <_realloc_r+0x20>
 8017b74:	f7ff fc12 	bl	801739c <_free_r>
 8017b78:	4625      	mov	r5, r4
 8017b7a:	4628      	mov	r0, r5
 8017b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017b7e:	f000 f814 	bl	8017baa <_malloc_usable_size_r>
 8017b82:	42a0      	cmp	r0, r4
 8017b84:	d20f      	bcs.n	8017ba6 <_realloc_r+0x48>
 8017b86:	4621      	mov	r1, r4
 8017b88:	4638      	mov	r0, r7
 8017b8a:	f7ff fc55 	bl	8017438 <_malloc_r>
 8017b8e:	4605      	mov	r5, r0
 8017b90:	2800      	cmp	r0, #0
 8017b92:	d0f2      	beq.n	8017b7a <_realloc_r+0x1c>
 8017b94:	4631      	mov	r1, r6
 8017b96:	4622      	mov	r2, r4
 8017b98:	f7ff fbec 	bl	8017374 <memcpy>
 8017b9c:	4631      	mov	r1, r6
 8017b9e:	4638      	mov	r0, r7
 8017ba0:	f7ff fbfc 	bl	801739c <_free_r>
 8017ba4:	e7e9      	b.n	8017b7a <_realloc_r+0x1c>
 8017ba6:	4635      	mov	r5, r6
 8017ba8:	e7e7      	b.n	8017b7a <_realloc_r+0x1c>

08017baa <_malloc_usable_size_r>:
 8017baa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017bae:	1f18      	subs	r0, r3, #4
 8017bb0:	2b00      	cmp	r3, #0
 8017bb2:	bfbc      	itt	lt
 8017bb4:	580b      	ldrlt	r3, [r1, r0]
 8017bb6:	18c0      	addlt	r0, r0, r3
 8017bb8:	4770      	bx	lr

08017bba <fmaxf>:
 8017bba:	b508      	push	{r3, lr}
 8017bbc:	ed2d 8b02 	vpush	{d8}
 8017bc0:	eeb0 8a40 	vmov.f32	s16, s0
 8017bc4:	eef0 8a60 	vmov.f32	s17, s1
 8017bc8:	f000 f82e 	bl	8017c28 <__fpclassifyf>
 8017bcc:	b148      	cbz	r0, 8017be2 <fmaxf+0x28>
 8017bce:	eeb0 0a68 	vmov.f32	s0, s17
 8017bd2:	f000 f829 	bl	8017c28 <__fpclassifyf>
 8017bd6:	b130      	cbz	r0, 8017be6 <fmaxf+0x2c>
 8017bd8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8017bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017be0:	dc01      	bgt.n	8017be6 <fmaxf+0x2c>
 8017be2:	eeb0 8a68 	vmov.f32	s16, s17
 8017be6:	eeb0 0a48 	vmov.f32	s0, s16
 8017bea:	ecbd 8b02 	vpop	{d8}
 8017bee:	bd08      	pop	{r3, pc}

08017bf0 <fminf>:
 8017bf0:	b508      	push	{r3, lr}
 8017bf2:	ed2d 8b02 	vpush	{d8}
 8017bf6:	eeb0 8a40 	vmov.f32	s16, s0
 8017bfa:	eef0 8a60 	vmov.f32	s17, s1
 8017bfe:	f000 f813 	bl	8017c28 <__fpclassifyf>
 8017c02:	b148      	cbz	r0, 8017c18 <fminf+0x28>
 8017c04:	eeb0 0a68 	vmov.f32	s0, s17
 8017c08:	f000 f80e 	bl	8017c28 <__fpclassifyf>
 8017c0c:	b130      	cbz	r0, 8017c1c <fminf+0x2c>
 8017c0e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8017c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c16:	d401      	bmi.n	8017c1c <fminf+0x2c>
 8017c18:	eeb0 8a68 	vmov.f32	s16, s17
 8017c1c:	eeb0 0a48 	vmov.f32	s0, s16
 8017c20:	ecbd 8b02 	vpop	{d8}
 8017c24:	bd08      	pop	{r3, pc}
	...

08017c28 <__fpclassifyf>:
 8017c28:	ee10 3a10 	vmov	r3, s0
 8017c2c:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 8017c30:	d00d      	beq.n	8017c4e <__fpclassifyf+0x26>
 8017c32:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 8017c36:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8017c3a:	d30a      	bcc.n	8017c52 <__fpclassifyf+0x2a>
 8017c3c:	4b07      	ldr	r3, [pc, #28]	; (8017c5c <__fpclassifyf+0x34>)
 8017c3e:	1e42      	subs	r2, r0, #1
 8017c40:	429a      	cmp	r2, r3
 8017c42:	d908      	bls.n	8017c56 <__fpclassifyf+0x2e>
 8017c44:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 8017c48:	4258      	negs	r0, r3
 8017c4a:	4158      	adcs	r0, r3
 8017c4c:	4770      	bx	lr
 8017c4e:	2002      	movs	r0, #2
 8017c50:	4770      	bx	lr
 8017c52:	2004      	movs	r0, #4
 8017c54:	4770      	bx	lr
 8017c56:	2003      	movs	r0, #3
 8017c58:	4770      	bx	lr
 8017c5a:	bf00      	nop
 8017c5c:	007ffffe 	.word	0x007ffffe

08017c60 <pow>:
 8017c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c64:	ed2d 8b04 	vpush	{d8-d9}
 8017c68:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8017f3c <pow+0x2dc>
 8017c6c:	b08d      	sub	sp, #52	; 0x34
 8017c6e:	ec57 6b10 	vmov	r6, r7, d0
 8017c72:	ec55 4b11 	vmov	r4, r5, d1
 8017c76:	f000 fb73 	bl	8018360 <__ieee754_pow>
 8017c7a:	f999 3000 	ldrsb.w	r3, [r9]
 8017c7e:	9300      	str	r3, [sp, #0]
 8017c80:	3301      	adds	r3, #1
 8017c82:	eeb0 8a40 	vmov.f32	s16, s0
 8017c86:	eef0 8a60 	vmov.f32	s17, s1
 8017c8a:	46c8      	mov	r8, r9
 8017c8c:	d05f      	beq.n	8017d4e <pow+0xee>
 8017c8e:	4622      	mov	r2, r4
 8017c90:	462b      	mov	r3, r5
 8017c92:	4620      	mov	r0, r4
 8017c94:	4629      	mov	r1, r5
 8017c96:	f7e8 ff69 	bl	8000b6c <__aeabi_dcmpun>
 8017c9a:	4683      	mov	fp, r0
 8017c9c:	2800      	cmp	r0, #0
 8017c9e:	d156      	bne.n	8017d4e <pow+0xee>
 8017ca0:	4632      	mov	r2, r6
 8017ca2:	463b      	mov	r3, r7
 8017ca4:	4630      	mov	r0, r6
 8017ca6:	4639      	mov	r1, r7
 8017ca8:	f7e8 ff60 	bl	8000b6c <__aeabi_dcmpun>
 8017cac:	9001      	str	r0, [sp, #4]
 8017cae:	b1e8      	cbz	r0, 8017cec <pow+0x8c>
 8017cb0:	2200      	movs	r2, #0
 8017cb2:	2300      	movs	r3, #0
 8017cb4:	4620      	mov	r0, r4
 8017cb6:	4629      	mov	r1, r5
 8017cb8:	f7e8 ff26 	bl	8000b08 <__aeabi_dcmpeq>
 8017cbc:	2800      	cmp	r0, #0
 8017cbe:	d046      	beq.n	8017d4e <pow+0xee>
 8017cc0:	2301      	movs	r3, #1
 8017cc2:	9302      	str	r3, [sp, #8]
 8017cc4:	4b96      	ldr	r3, [pc, #600]	; (8017f20 <pow+0x2c0>)
 8017cc6:	9303      	str	r3, [sp, #12]
 8017cc8:	4b96      	ldr	r3, [pc, #600]	; (8017f24 <pow+0x2c4>)
 8017cca:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8017cce:	2200      	movs	r2, #0
 8017cd0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8017cd4:	9b00      	ldr	r3, [sp, #0]
 8017cd6:	2b02      	cmp	r3, #2
 8017cd8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8017cdc:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8017ce0:	d033      	beq.n	8017d4a <pow+0xea>
 8017ce2:	a802      	add	r0, sp, #8
 8017ce4:	f001 fbce 	bl	8019484 <matherr>
 8017ce8:	bb48      	cbnz	r0, 8017d3e <pow+0xde>
 8017cea:	e05d      	b.n	8017da8 <pow+0x148>
 8017cec:	f04f 0a00 	mov.w	sl, #0
 8017cf0:	f04f 0b00 	mov.w	fp, #0
 8017cf4:	4652      	mov	r2, sl
 8017cf6:	465b      	mov	r3, fp
 8017cf8:	4630      	mov	r0, r6
 8017cfa:	4639      	mov	r1, r7
 8017cfc:	f7e8 ff04 	bl	8000b08 <__aeabi_dcmpeq>
 8017d00:	ec4b ab19 	vmov	d9, sl, fp
 8017d04:	2800      	cmp	r0, #0
 8017d06:	d054      	beq.n	8017db2 <pow+0x152>
 8017d08:	4652      	mov	r2, sl
 8017d0a:	465b      	mov	r3, fp
 8017d0c:	4620      	mov	r0, r4
 8017d0e:	4629      	mov	r1, r5
 8017d10:	f7e8 fefa 	bl	8000b08 <__aeabi_dcmpeq>
 8017d14:	4680      	mov	r8, r0
 8017d16:	b318      	cbz	r0, 8017d60 <pow+0x100>
 8017d18:	2301      	movs	r3, #1
 8017d1a:	9302      	str	r3, [sp, #8]
 8017d1c:	4b80      	ldr	r3, [pc, #512]	; (8017f20 <pow+0x2c0>)
 8017d1e:	9303      	str	r3, [sp, #12]
 8017d20:	9b01      	ldr	r3, [sp, #4]
 8017d22:	930a      	str	r3, [sp, #40]	; 0x28
 8017d24:	9b00      	ldr	r3, [sp, #0]
 8017d26:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8017d2a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8017d2e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8017d32:	2b00      	cmp	r3, #0
 8017d34:	d0d5      	beq.n	8017ce2 <pow+0x82>
 8017d36:	4b7b      	ldr	r3, [pc, #492]	; (8017f24 <pow+0x2c4>)
 8017d38:	2200      	movs	r2, #0
 8017d3a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8017d3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017d40:	b11b      	cbz	r3, 8017d4a <pow+0xea>
 8017d42:	f7ff fadd 	bl	8017300 <__errno>
 8017d46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017d48:	6003      	str	r3, [r0, #0]
 8017d4a:	ed9d 8b08 	vldr	d8, [sp, #32]
 8017d4e:	eeb0 0a48 	vmov.f32	s0, s16
 8017d52:	eef0 0a68 	vmov.f32	s1, s17
 8017d56:	b00d      	add	sp, #52	; 0x34
 8017d58:	ecbd 8b04 	vpop	{d8-d9}
 8017d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d60:	ec45 4b10 	vmov	d0, r4, r5
 8017d64:	f001 fb86 	bl	8019474 <finite>
 8017d68:	2800      	cmp	r0, #0
 8017d6a:	d0f0      	beq.n	8017d4e <pow+0xee>
 8017d6c:	4652      	mov	r2, sl
 8017d6e:	465b      	mov	r3, fp
 8017d70:	4620      	mov	r0, r4
 8017d72:	4629      	mov	r1, r5
 8017d74:	f7e8 fed2 	bl	8000b1c <__aeabi_dcmplt>
 8017d78:	2800      	cmp	r0, #0
 8017d7a:	d0e8      	beq.n	8017d4e <pow+0xee>
 8017d7c:	2301      	movs	r3, #1
 8017d7e:	9302      	str	r3, [sp, #8]
 8017d80:	4b67      	ldr	r3, [pc, #412]	; (8017f20 <pow+0x2c0>)
 8017d82:	9303      	str	r3, [sp, #12]
 8017d84:	f999 3000 	ldrsb.w	r3, [r9]
 8017d88:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8017d8c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8017d90:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8017d94:	b913      	cbnz	r3, 8017d9c <pow+0x13c>
 8017d96:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8017d9a:	e7a2      	b.n	8017ce2 <pow+0x82>
 8017d9c:	4962      	ldr	r1, [pc, #392]	; (8017f28 <pow+0x2c8>)
 8017d9e:	2000      	movs	r0, #0
 8017da0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8017da4:	2b02      	cmp	r3, #2
 8017da6:	d19c      	bne.n	8017ce2 <pow+0x82>
 8017da8:	f7ff faaa 	bl	8017300 <__errno>
 8017dac:	2321      	movs	r3, #33	; 0x21
 8017dae:	6003      	str	r3, [r0, #0]
 8017db0:	e7c5      	b.n	8017d3e <pow+0xde>
 8017db2:	eeb0 0a48 	vmov.f32	s0, s16
 8017db6:	eef0 0a68 	vmov.f32	s1, s17
 8017dba:	f001 fb5b 	bl	8019474 <finite>
 8017dbe:	9000      	str	r0, [sp, #0]
 8017dc0:	2800      	cmp	r0, #0
 8017dc2:	f040 8081 	bne.w	8017ec8 <pow+0x268>
 8017dc6:	ec47 6b10 	vmov	d0, r6, r7
 8017dca:	f001 fb53 	bl	8019474 <finite>
 8017dce:	2800      	cmp	r0, #0
 8017dd0:	d07a      	beq.n	8017ec8 <pow+0x268>
 8017dd2:	ec45 4b10 	vmov	d0, r4, r5
 8017dd6:	f001 fb4d 	bl	8019474 <finite>
 8017dda:	2800      	cmp	r0, #0
 8017ddc:	d074      	beq.n	8017ec8 <pow+0x268>
 8017dde:	ec53 2b18 	vmov	r2, r3, d8
 8017de2:	ee18 0a10 	vmov	r0, s16
 8017de6:	4619      	mov	r1, r3
 8017de8:	f7e8 fec0 	bl	8000b6c <__aeabi_dcmpun>
 8017dec:	f999 9000 	ldrsb.w	r9, [r9]
 8017df0:	4b4b      	ldr	r3, [pc, #300]	; (8017f20 <pow+0x2c0>)
 8017df2:	b1b0      	cbz	r0, 8017e22 <pow+0x1c2>
 8017df4:	2201      	movs	r2, #1
 8017df6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8017dfa:	9b00      	ldr	r3, [sp, #0]
 8017dfc:	930a      	str	r3, [sp, #40]	; 0x28
 8017dfe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8017e02:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8017e06:	f1b9 0f00 	cmp.w	r9, #0
 8017e0a:	d0c4      	beq.n	8017d96 <pow+0x136>
 8017e0c:	4652      	mov	r2, sl
 8017e0e:	465b      	mov	r3, fp
 8017e10:	4650      	mov	r0, sl
 8017e12:	4659      	mov	r1, fp
 8017e14:	f7e8 fd3a 	bl	800088c <__aeabi_ddiv>
 8017e18:	f1b9 0f02 	cmp.w	r9, #2
 8017e1c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8017e20:	e7c1      	b.n	8017da6 <pow+0x146>
 8017e22:	2203      	movs	r2, #3
 8017e24:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8017e28:	900a      	str	r0, [sp, #40]	; 0x28
 8017e2a:	4629      	mov	r1, r5
 8017e2c:	4620      	mov	r0, r4
 8017e2e:	2200      	movs	r2, #0
 8017e30:	4b3e      	ldr	r3, [pc, #248]	; (8017f2c <pow+0x2cc>)
 8017e32:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8017e36:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8017e3a:	f7e8 fbfd 	bl	8000638 <__aeabi_dmul>
 8017e3e:	4604      	mov	r4, r0
 8017e40:	460d      	mov	r5, r1
 8017e42:	f1b9 0f00 	cmp.w	r9, #0
 8017e46:	d124      	bne.n	8017e92 <pow+0x232>
 8017e48:	4b39      	ldr	r3, [pc, #228]	; (8017f30 <pow+0x2d0>)
 8017e4a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8017e4e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8017e52:	4630      	mov	r0, r6
 8017e54:	4652      	mov	r2, sl
 8017e56:	465b      	mov	r3, fp
 8017e58:	4639      	mov	r1, r7
 8017e5a:	f7e8 fe5f 	bl	8000b1c <__aeabi_dcmplt>
 8017e5e:	2800      	cmp	r0, #0
 8017e60:	d056      	beq.n	8017f10 <pow+0x2b0>
 8017e62:	ec45 4b10 	vmov	d0, r4, r5
 8017e66:	f001 fb17 	bl	8019498 <rint>
 8017e6a:	4622      	mov	r2, r4
 8017e6c:	462b      	mov	r3, r5
 8017e6e:	ec51 0b10 	vmov	r0, r1, d0
 8017e72:	f7e8 fe49 	bl	8000b08 <__aeabi_dcmpeq>
 8017e76:	b920      	cbnz	r0, 8017e82 <pow+0x222>
 8017e78:	4b2e      	ldr	r3, [pc, #184]	; (8017f34 <pow+0x2d4>)
 8017e7a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8017e7e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8017e82:	f998 3000 	ldrsb.w	r3, [r8]
 8017e86:	2b02      	cmp	r3, #2
 8017e88:	d142      	bne.n	8017f10 <pow+0x2b0>
 8017e8a:	f7ff fa39 	bl	8017300 <__errno>
 8017e8e:	2322      	movs	r3, #34	; 0x22
 8017e90:	e78d      	b.n	8017dae <pow+0x14e>
 8017e92:	4b29      	ldr	r3, [pc, #164]	; (8017f38 <pow+0x2d8>)
 8017e94:	2200      	movs	r2, #0
 8017e96:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8017e9a:	4630      	mov	r0, r6
 8017e9c:	4652      	mov	r2, sl
 8017e9e:	465b      	mov	r3, fp
 8017ea0:	4639      	mov	r1, r7
 8017ea2:	f7e8 fe3b 	bl	8000b1c <__aeabi_dcmplt>
 8017ea6:	2800      	cmp	r0, #0
 8017ea8:	d0eb      	beq.n	8017e82 <pow+0x222>
 8017eaa:	ec45 4b10 	vmov	d0, r4, r5
 8017eae:	f001 faf3 	bl	8019498 <rint>
 8017eb2:	4622      	mov	r2, r4
 8017eb4:	462b      	mov	r3, r5
 8017eb6:	ec51 0b10 	vmov	r0, r1, d0
 8017eba:	f7e8 fe25 	bl	8000b08 <__aeabi_dcmpeq>
 8017ebe:	2800      	cmp	r0, #0
 8017ec0:	d1df      	bne.n	8017e82 <pow+0x222>
 8017ec2:	2200      	movs	r2, #0
 8017ec4:	4b18      	ldr	r3, [pc, #96]	; (8017f28 <pow+0x2c8>)
 8017ec6:	e7da      	b.n	8017e7e <pow+0x21e>
 8017ec8:	2200      	movs	r2, #0
 8017eca:	2300      	movs	r3, #0
 8017ecc:	ec51 0b18 	vmov	r0, r1, d8
 8017ed0:	f7e8 fe1a 	bl	8000b08 <__aeabi_dcmpeq>
 8017ed4:	2800      	cmp	r0, #0
 8017ed6:	f43f af3a 	beq.w	8017d4e <pow+0xee>
 8017eda:	ec47 6b10 	vmov	d0, r6, r7
 8017ede:	f001 fac9 	bl	8019474 <finite>
 8017ee2:	2800      	cmp	r0, #0
 8017ee4:	f43f af33 	beq.w	8017d4e <pow+0xee>
 8017ee8:	ec45 4b10 	vmov	d0, r4, r5
 8017eec:	f001 fac2 	bl	8019474 <finite>
 8017ef0:	2800      	cmp	r0, #0
 8017ef2:	f43f af2c 	beq.w	8017d4e <pow+0xee>
 8017ef6:	2304      	movs	r3, #4
 8017ef8:	9302      	str	r3, [sp, #8]
 8017efa:	4b09      	ldr	r3, [pc, #36]	; (8017f20 <pow+0x2c0>)
 8017efc:	9303      	str	r3, [sp, #12]
 8017efe:	2300      	movs	r3, #0
 8017f00:	930a      	str	r3, [sp, #40]	; 0x28
 8017f02:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8017f06:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8017f0a:	ed8d 9b08 	vstr	d9, [sp, #32]
 8017f0e:	e7b8      	b.n	8017e82 <pow+0x222>
 8017f10:	a802      	add	r0, sp, #8
 8017f12:	f001 fab7 	bl	8019484 <matherr>
 8017f16:	2800      	cmp	r0, #0
 8017f18:	f47f af11 	bne.w	8017d3e <pow+0xde>
 8017f1c:	e7b5      	b.n	8017e8a <pow+0x22a>
 8017f1e:	bf00      	nop
 8017f20:	0801a40b 	.word	0x0801a40b
 8017f24:	3ff00000 	.word	0x3ff00000
 8017f28:	fff00000 	.word	0xfff00000
 8017f2c:	3fe00000 	.word	0x3fe00000
 8017f30:	47efffff 	.word	0x47efffff
 8017f34:	c7efffff 	.word	0xc7efffff
 8017f38:	7ff00000 	.word	0x7ff00000
 8017f3c:	200001f8 	.word	0x200001f8

08017f40 <sqrt>:
 8017f40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017f44:	ed2d 8b02 	vpush	{d8}
 8017f48:	b08b      	sub	sp, #44	; 0x2c
 8017f4a:	ec55 4b10 	vmov	r4, r5, d0
 8017f4e:	f000 ff15 	bl	8018d7c <__ieee754_sqrt>
 8017f52:	4b26      	ldr	r3, [pc, #152]	; (8017fec <sqrt+0xac>)
 8017f54:	eeb0 8a40 	vmov.f32	s16, s0
 8017f58:	eef0 8a60 	vmov.f32	s17, s1
 8017f5c:	f993 6000 	ldrsb.w	r6, [r3]
 8017f60:	1c73      	adds	r3, r6, #1
 8017f62:	d02a      	beq.n	8017fba <sqrt+0x7a>
 8017f64:	4622      	mov	r2, r4
 8017f66:	462b      	mov	r3, r5
 8017f68:	4620      	mov	r0, r4
 8017f6a:	4629      	mov	r1, r5
 8017f6c:	f7e8 fdfe 	bl	8000b6c <__aeabi_dcmpun>
 8017f70:	4607      	mov	r7, r0
 8017f72:	bb10      	cbnz	r0, 8017fba <sqrt+0x7a>
 8017f74:	f04f 0800 	mov.w	r8, #0
 8017f78:	f04f 0900 	mov.w	r9, #0
 8017f7c:	4642      	mov	r2, r8
 8017f7e:	464b      	mov	r3, r9
 8017f80:	4620      	mov	r0, r4
 8017f82:	4629      	mov	r1, r5
 8017f84:	f7e8 fdca 	bl	8000b1c <__aeabi_dcmplt>
 8017f88:	b1b8      	cbz	r0, 8017fba <sqrt+0x7a>
 8017f8a:	2301      	movs	r3, #1
 8017f8c:	9300      	str	r3, [sp, #0]
 8017f8e:	4b18      	ldr	r3, [pc, #96]	; (8017ff0 <sqrt+0xb0>)
 8017f90:	9301      	str	r3, [sp, #4]
 8017f92:	9708      	str	r7, [sp, #32]
 8017f94:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8017f98:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8017f9c:	b9b6      	cbnz	r6, 8017fcc <sqrt+0x8c>
 8017f9e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8017fa2:	4668      	mov	r0, sp
 8017fa4:	f001 fa6e 	bl	8019484 <matherr>
 8017fa8:	b1d0      	cbz	r0, 8017fe0 <sqrt+0xa0>
 8017faa:	9b08      	ldr	r3, [sp, #32]
 8017fac:	b11b      	cbz	r3, 8017fb6 <sqrt+0x76>
 8017fae:	f7ff f9a7 	bl	8017300 <__errno>
 8017fb2:	9b08      	ldr	r3, [sp, #32]
 8017fb4:	6003      	str	r3, [r0, #0]
 8017fb6:	ed9d 8b06 	vldr	d8, [sp, #24]
 8017fba:	eeb0 0a48 	vmov.f32	s0, s16
 8017fbe:	eef0 0a68 	vmov.f32	s1, s17
 8017fc2:	b00b      	add	sp, #44	; 0x2c
 8017fc4:	ecbd 8b02 	vpop	{d8}
 8017fc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017fcc:	4642      	mov	r2, r8
 8017fce:	464b      	mov	r3, r9
 8017fd0:	4640      	mov	r0, r8
 8017fd2:	4649      	mov	r1, r9
 8017fd4:	f7e8 fc5a 	bl	800088c <__aeabi_ddiv>
 8017fd8:	2e02      	cmp	r6, #2
 8017fda:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8017fde:	d1e0      	bne.n	8017fa2 <sqrt+0x62>
 8017fe0:	f7ff f98e 	bl	8017300 <__errno>
 8017fe4:	2321      	movs	r3, #33	; 0x21
 8017fe6:	6003      	str	r3, [r0, #0]
 8017fe8:	e7df      	b.n	8017faa <sqrt+0x6a>
 8017fea:	bf00      	nop
 8017fec:	200001f8 	.word	0x200001f8
 8017ff0:	0801a40f 	.word	0x0801a40f

08017ff4 <powf>:
 8017ff4:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8017ff8:	ed2d 8b04 	vpush	{d8-d9}
 8017ffc:	4ca7      	ldr	r4, [pc, #668]	; (801829c <powf+0x2a8>)
 8017ffe:	b08a      	sub	sp, #40	; 0x28
 8018000:	eef0 8a40 	vmov.f32	s17, s0
 8018004:	eeb0 8a60 	vmov.f32	s16, s1
 8018008:	f000 ff68 	bl	8018edc <__ieee754_powf>
 801800c:	f994 5000 	ldrsb.w	r5, [r4]
 8018010:	1c6b      	adds	r3, r5, #1
 8018012:	eeb0 9a40 	vmov.f32	s18, s0
 8018016:	4626      	mov	r6, r4
 8018018:	d05f      	beq.n	80180da <powf+0xe6>
 801801a:	eeb4 8a48 	vcmp.f32	s16, s16
 801801e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018022:	d65a      	bvs.n	80180da <powf+0xe6>
 8018024:	eef4 8a68 	vcmp.f32	s17, s17
 8018028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801802c:	d721      	bvc.n	8018072 <powf+0x7e>
 801802e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8018032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018036:	d150      	bne.n	80180da <powf+0xe6>
 8018038:	2301      	movs	r3, #1
 801803a:	9300      	str	r3, [sp, #0]
 801803c:	4b98      	ldr	r3, [pc, #608]	; (80182a0 <powf+0x2ac>)
 801803e:	9301      	str	r3, [sp, #4]
 8018040:	ee18 0a90 	vmov	r0, s17
 8018044:	2300      	movs	r3, #0
 8018046:	9308      	str	r3, [sp, #32]
 8018048:	f7e8 fa9e 	bl	8000588 <__aeabi_f2d>
 801804c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018050:	ee18 0a10 	vmov	r0, s16
 8018054:	f7e8 fa98 	bl	8000588 <__aeabi_f2d>
 8018058:	4b92      	ldr	r3, [pc, #584]	; (80182a4 <powf+0x2b0>)
 801805a:	2200      	movs	r2, #0
 801805c:	2d02      	cmp	r5, #2
 801805e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018062:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8018066:	d032      	beq.n	80180ce <powf+0xda>
 8018068:	4668      	mov	r0, sp
 801806a:	f001 fa0b 	bl	8019484 <matherr>
 801806e:	bb40      	cbnz	r0, 80180c2 <powf+0xce>
 8018070:	e065      	b.n	801813e <powf+0x14a>
 8018072:	eddf 9a8d 	vldr	s19, [pc, #564]	; 80182a8 <powf+0x2b4>
 8018076:	eef4 8a69 	vcmp.f32	s17, s19
 801807a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801807e:	d163      	bne.n	8018148 <powf+0x154>
 8018080:	eeb4 8a69 	vcmp.f32	s16, s19
 8018084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018088:	d12e      	bne.n	80180e8 <powf+0xf4>
 801808a:	2301      	movs	r3, #1
 801808c:	9300      	str	r3, [sp, #0]
 801808e:	4b84      	ldr	r3, [pc, #528]	; (80182a0 <powf+0x2ac>)
 8018090:	9301      	str	r3, [sp, #4]
 8018092:	ee18 0a90 	vmov	r0, s17
 8018096:	2300      	movs	r3, #0
 8018098:	9308      	str	r3, [sp, #32]
 801809a:	f7e8 fa75 	bl	8000588 <__aeabi_f2d>
 801809e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80180a2:	ee18 0a10 	vmov	r0, s16
 80180a6:	f7e8 fa6f 	bl	8000588 <__aeabi_f2d>
 80180aa:	2200      	movs	r2, #0
 80180ac:	2300      	movs	r3, #0
 80180ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80180b2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80180b6:	2d00      	cmp	r5, #0
 80180b8:	d0d6      	beq.n	8018068 <powf+0x74>
 80180ba:	4b7a      	ldr	r3, [pc, #488]	; (80182a4 <powf+0x2b0>)
 80180bc:	2200      	movs	r2, #0
 80180be:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80180c2:	9b08      	ldr	r3, [sp, #32]
 80180c4:	b11b      	cbz	r3, 80180ce <powf+0xda>
 80180c6:	f7ff f91b 	bl	8017300 <__errno>
 80180ca:	9b08      	ldr	r3, [sp, #32]
 80180cc:	6003      	str	r3, [r0, #0]
 80180ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80180d2:	f7e8 fd81 	bl	8000bd8 <__aeabi_d2f>
 80180d6:	ee09 0a10 	vmov	s18, r0
 80180da:	eeb0 0a49 	vmov.f32	s0, s18
 80180de:	b00a      	add	sp, #40	; 0x28
 80180e0:	ecbd 8b04 	vpop	{d8-d9}
 80180e4:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80180e8:	eeb0 0a48 	vmov.f32	s0, s16
 80180ec:	f001 fad5 	bl	801969a <finitef>
 80180f0:	2800      	cmp	r0, #0
 80180f2:	d0f2      	beq.n	80180da <powf+0xe6>
 80180f4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80180f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180fc:	d5ed      	bpl.n	80180da <powf+0xe6>
 80180fe:	2301      	movs	r3, #1
 8018100:	9300      	str	r3, [sp, #0]
 8018102:	4b67      	ldr	r3, [pc, #412]	; (80182a0 <powf+0x2ac>)
 8018104:	9301      	str	r3, [sp, #4]
 8018106:	ee18 0a90 	vmov	r0, s17
 801810a:	2300      	movs	r3, #0
 801810c:	9308      	str	r3, [sp, #32]
 801810e:	f7e8 fa3b 	bl	8000588 <__aeabi_f2d>
 8018112:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018116:	ee18 0a10 	vmov	r0, s16
 801811a:	f7e8 fa35 	bl	8000588 <__aeabi_f2d>
 801811e:	f994 3000 	ldrsb.w	r3, [r4]
 8018122:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018126:	b923      	cbnz	r3, 8018132 <powf+0x13e>
 8018128:	2200      	movs	r2, #0
 801812a:	2300      	movs	r3, #0
 801812c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8018130:	e79a      	b.n	8018068 <powf+0x74>
 8018132:	495e      	ldr	r1, [pc, #376]	; (80182ac <powf+0x2b8>)
 8018134:	2000      	movs	r0, #0
 8018136:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801813a:	2b02      	cmp	r3, #2
 801813c:	d194      	bne.n	8018068 <powf+0x74>
 801813e:	f7ff f8df 	bl	8017300 <__errno>
 8018142:	2321      	movs	r3, #33	; 0x21
 8018144:	6003      	str	r3, [r0, #0]
 8018146:	e7bc      	b.n	80180c2 <powf+0xce>
 8018148:	f001 faa7 	bl	801969a <finitef>
 801814c:	4605      	mov	r5, r0
 801814e:	2800      	cmp	r0, #0
 8018150:	d173      	bne.n	801823a <powf+0x246>
 8018152:	eeb0 0a68 	vmov.f32	s0, s17
 8018156:	f001 faa0 	bl	801969a <finitef>
 801815a:	2800      	cmp	r0, #0
 801815c:	d06d      	beq.n	801823a <powf+0x246>
 801815e:	eeb0 0a48 	vmov.f32	s0, s16
 8018162:	f001 fa9a 	bl	801969a <finitef>
 8018166:	2800      	cmp	r0, #0
 8018168:	d067      	beq.n	801823a <powf+0x246>
 801816a:	ee18 0a90 	vmov	r0, s17
 801816e:	f7e8 fa0b 	bl	8000588 <__aeabi_f2d>
 8018172:	4680      	mov	r8, r0
 8018174:	ee18 0a10 	vmov	r0, s16
 8018178:	4689      	mov	r9, r1
 801817a:	f7e8 fa05 	bl	8000588 <__aeabi_f2d>
 801817e:	eeb4 9a49 	vcmp.f32	s18, s18
 8018182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018186:	f994 4000 	ldrsb.w	r4, [r4]
 801818a:	4b45      	ldr	r3, [pc, #276]	; (80182a0 <powf+0x2ac>)
 801818c:	d713      	bvc.n	80181b6 <powf+0x1c2>
 801818e:	2201      	movs	r2, #1
 8018190:	e9cd 2300 	strd	r2, r3, [sp]
 8018194:	9508      	str	r5, [sp, #32]
 8018196:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801819a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801819e:	2c00      	cmp	r4, #0
 80181a0:	d0c2      	beq.n	8018128 <powf+0x134>
 80181a2:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 80181a6:	ee17 0a90 	vmov	r0, s15
 80181aa:	f7e8 f9ed 	bl	8000588 <__aeabi_f2d>
 80181ae:	2c02      	cmp	r4, #2
 80181b0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80181b4:	e7c2      	b.n	801813c <powf+0x148>
 80181b6:	2203      	movs	r2, #3
 80181b8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80181bc:	e9cd 2300 	strd	r2, r3, [sp]
 80181c0:	9508      	str	r5, [sp, #32]
 80181c2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80181c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80181ca:	ee28 8a27 	vmul.f32	s16, s16, s15
 80181ce:	b9fc      	cbnz	r4, 8018210 <powf+0x21c>
 80181d0:	4b37      	ldr	r3, [pc, #220]	; (80182b0 <powf+0x2bc>)
 80181d2:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 80181d6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80181da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181de:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80181e2:	d553      	bpl.n	801828c <powf+0x298>
 80181e4:	eeb0 0a48 	vmov.f32	s0, s16
 80181e8:	f001 fa68 	bl	80196bc <rintf>
 80181ec:	eeb4 0a48 	vcmp.f32	s0, s16
 80181f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181f4:	d004      	beq.n	8018200 <powf+0x20c>
 80181f6:	4b2f      	ldr	r3, [pc, #188]	; (80182b4 <powf+0x2c0>)
 80181f8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80181fc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8018200:	f996 3000 	ldrsb.w	r3, [r6]
 8018204:	2b02      	cmp	r3, #2
 8018206:	d141      	bne.n	801828c <powf+0x298>
 8018208:	f7ff f87a 	bl	8017300 <__errno>
 801820c:	2322      	movs	r3, #34	; 0x22
 801820e:	e799      	b.n	8018144 <powf+0x150>
 8018210:	4b29      	ldr	r3, [pc, #164]	; (80182b8 <powf+0x2c4>)
 8018212:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8018216:	2200      	movs	r2, #0
 8018218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801821c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8018220:	d5ee      	bpl.n	8018200 <powf+0x20c>
 8018222:	eeb0 0a48 	vmov.f32	s0, s16
 8018226:	f001 fa49 	bl	80196bc <rintf>
 801822a:	eeb4 0a48 	vcmp.f32	s0, s16
 801822e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018232:	d0e5      	beq.n	8018200 <powf+0x20c>
 8018234:	2200      	movs	r2, #0
 8018236:	4b1d      	ldr	r3, [pc, #116]	; (80182ac <powf+0x2b8>)
 8018238:	e7e0      	b.n	80181fc <powf+0x208>
 801823a:	eeb5 9a40 	vcmp.f32	s18, #0.0
 801823e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018242:	f47f af4a 	bne.w	80180da <powf+0xe6>
 8018246:	eeb0 0a68 	vmov.f32	s0, s17
 801824a:	f001 fa26 	bl	801969a <finitef>
 801824e:	2800      	cmp	r0, #0
 8018250:	f43f af43 	beq.w	80180da <powf+0xe6>
 8018254:	eeb0 0a48 	vmov.f32	s0, s16
 8018258:	f001 fa1f 	bl	801969a <finitef>
 801825c:	2800      	cmp	r0, #0
 801825e:	f43f af3c 	beq.w	80180da <powf+0xe6>
 8018262:	2304      	movs	r3, #4
 8018264:	9300      	str	r3, [sp, #0]
 8018266:	4b0e      	ldr	r3, [pc, #56]	; (80182a0 <powf+0x2ac>)
 8018268:	9301      	str	r3, [sp, #4]
 801826a:	ee18 0a90 	vmov	r0, s17
 801826e:	2300      	movs	r3, #0
 8018270:	9308      	str	r3, [sp, #32]
 8018272:	f7e8 f989 	bl	8000588 <__aeabi_f2d>
 8018276:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801827a:	ee18 0a10 	vmov	r0, s16
 801827e:	f7e8 f983 	bl	8000588 <__aeabi_f2d>
 8018282:	2200      	movs	r2, #0
 8018284:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018288:	2300      	movs	r3, #0
 801828a:	e7b7      	b.n	80181fc <powf+0x208>
 801828c:	4668      	mov	r0, sp
 801828e:	f001 f8f9 	bl	8019484 <matherr>
 8018292:	2800      	cmp	r0, #0
 8018294:	f47f af15 	bne.w	80180c2 <powf+0xce>
 8018298:	e7b6      	b.n	8018208 <powf+0x214>
 801829a:	bf00      	nop
 801829c:	200001f8 	.word	0x200001f8
 80182a0:	0801a414 	.word	0x0801a414
 80182a4:	3ff00000 	.word	0x3ff00000
 80182a8:	00000000 	.word	0x00000000
 80182ac:	fff00000 	.word	0xfff00000
 80182b0:	47efffff 	.word	0x47efffff
 80182b4:	c7efffff 	.word	0xc7efffff
 80182b8:	7ff00000 	.word	0x7ff00000

080182bc <sqrtf>:
 80182bc:	b510      	push	{r4, lr}
 80182be:	ed2d 8b02 	vpush	{d8}
 80182c2:	b08a      	sub	sp, #40	; 0x28
 80182c4:	eeb0 8a40 	vmov.f32	s16, s0
 80182c8:	f001 f8c8 	bl	801945c <__ieee754_sqrtf>
 80182cc:	4b21      	ldr	r3, [pc, #132]	; (8018354 <sqrtf+0x98>)
 80182ce:	f993 4000 	ldrsb.w	r4, [r3]
 80182d2:	1c63      	adds	r3, r4, #1
 80182d4:	d02c      	beq.n	8018330 <sqrtf+0x74>
 80182d6:	eeb4 8a48 	vcmp.f32	s16, s16
 80182da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80182de:	d627      	bvs.n	8018330 <sqrtf+0x74>
 80182e0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80182e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80182e8:	d522      	bpl.n	8018330 <sqrtf+0x74>
 80182ea:	2301      	movs	r3, #1
 80182ec:	9300      	str	r3, [sp, #0]
 80182ee:	4b1a      	ldr	r3, [pc, #104]	; (8018358 <sqrtf+0x9c>)
 80182f0:	9301      	str	r3, [sp, #4]
 80182f2:	ee18 0a10 	vmov	r0, s16
 80182f6:	2300      	movs	r3, #0
 80182f8:	9308      	str	r3, [sp, #32]
 80182fa:	f7e8 f945 	bl	8000588 <__aeabi_f2d>
 80182fe:	2200      	movs	r2, #0
 8018300:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018304:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018308:	2300      	movs	r3, #0
 801830a:	b9ac      	cbnz	r4, 8018338 <sqrtf+0x7c>
 801830c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8018310:	4668      	mov	r0, sp
 8018312:	f001 f8b7 	bl	8019484 <matherr>
 8018316:	b1b8      	cbz	r0, 8018348 <sqrtf+0x8c>
 8018318:	9b08      	ldr	r3, [sp, #32]
 801831a:	b11b      	cbz	r3, 8018324 <sqrtf+0x68>
 801831c:	f7fe fff0 	bl	8017300 <__errno>
 8018320:	9b08      	ldr	r3, [sp, #32]
 8018322:	6003      	str	r3, [r0, #0]
 8018324:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018328:	f7e8 fc56 	bl	8000bd8 <__aeabi_d2f>
 801832c:	ee00 0a10 	vmov	s0, r0
 8018330:	b00a      	add	sp, #40	; 0x28
 8018332:	ecbd 8b02 	vpop	{d8}
 8018336:	bd10      	pop	{r4, pc}
 8018338:	4610      	mov	r0, r2
 801833a:	4619      	mov	r1, r3
 801833c:	f7e8 faa6 	bl	800088c <__aeabi_ddiv>
 8018340:	2c02      	cmp	r4, #2
 8018342:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8018346:	d1e3      	bne.n	8018310 <sqrtf+0x54>
 8018348:	f7fe ffda 	bl	8017300 <__errno>
 801834c:	2321      	movs	r3, #33	; 0x21
 801834e:	6003      	str	r3, [r0, #0]
 8018350:	e7e2      	b.n	8018318 <sqrtf+0x5c>
 8018352:	bf00      	nop
 8018354:	200001f8 	.word	0x200001f8
 8018358:	0801a419 	.word	0x0801a419
 801835c:	00000000 	.word	0x00000000

08018360 <__ieee754_pow>:
 8018360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018364:	b091      	sub	sp, #68	; 0x44
 8018366:	ed8d 1b00 	vstr	d1, [sp]
 801836a:	e9dd 2900 	ldrd	r2, r9, [sp]
 801836e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8018372:	ea58 0302 	orrs.w	r3, r8, r2
 8018376:	ec57 6b10 	vmov	r6, r7, d0
 801837a:	f000 84be 	beq.w	8018cfa <__ieee754_pow+0x99a>
 801837e:	4b7a      	ldr	r3, [pc, #488]	; (8018568 <__ieee754_pow+0x208>)
 8018380:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8018384:	429c      	cmp	r4, r3
 8018386:	463d      	mov	r5, r7
 8018388:	ee10 aa10 	vmov	sl, s0
 801838c:	dc09      	bgt.n	80183a2 <__ieee754_pow+0x42>
 801838e:	d103      	bne.n	8018398 <__ieee754_pow+0x38>
 8018390:	b93e      	cbnz	r6, 80183a2 <__ieee754_pow+0x42>
 8018392:	45a0      	cmp	r8, r4
 8018394:	dc0d      	bgt.n	80183b2 <__ieee754_pow+0x52>
 8018396:	e001      	b.n	801839c <__ieee754_pow+0x3c>
 8018398:	4598      	cmp	r8, r3
 801839a:	dc02      	bgt.n	80183a2 <__ieee754_pow+0x42>
 801839c:	4598      	cmp	r8, r3
 801839e:	d10e      	bne.n	80183be <__ieee754_pow+0x5e>
 80183a0:	b16a      	cbz	r2, 80183be <__ieee754_pow+0x5e>
 80183a2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80183a6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80183aa:	ea54 030a 	orrs.w	r3, r4, sl
 80183ae:	f000 84a4 	beq.w	8018cfa <__ieee754_pow+0x99a>
 80183b2:	486e      	ldr	r0, [pc, #440]	; (801856c <__ieee754_pow+0x20c>)
 80183b4:	b011      	add	sp, #68	; 0x44
 80183b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80183ba:	f001 b865 	b.w	8019488 <nan>
 80183be:	2d00      	cmp	r5, #0
 80183c0:	da53      	bge.n	801846a <__ieee754_pow+0x10a>
 80183c2:	4b6b      	ldr	r3, [pc, #428]	; (8018570 <__ieee754_pow+0x210>)
 80183c4:	4598      	cmp	r8, r3
 80183c6:	dc4d      	bgt.n	8018464 <__ieee754_pow+0x104>
 80183c8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80183cc:	4598      	cmp	r8, r3
 80183ce:	dd4c      	ble.n	801846a <__ieee754_pow+0x10a>
 80183d0:	ea4f 5328 	mov.w	r3, r8, asr #20
 80183d4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80183d8:	2b14      	cmp	r3, #20
 80183da:	dd26      	ble.n	801842a <__ieee754_pow+0xca>
 80183dc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80183e0:	fa22 f103 	lsr.w	r1, r2, r3
 80183e4:	fa01 f303 	lsl.w	r3, r1, r3
 80183e8:	4293      	cmp	r3, r2
 80183ea:	d13e      	bne.n	801846a <__ieee754_pow+0x10a>
 80183ec:	f001 0101 	and.w	r1, r1, #1
 80183f0:	f1c1 0b02 	rsb	fp, r1, #2
 80183f4:	2a00      	cmp	r2, #0
 80183f6:	d15b      	bne.n	80184b0 <__ieee754_pow+0x150>
 80183f8:	4b5b      	ldr	r3, [pc, #364]	; (8018568 <__ieee754_pow+0x208>)
 80183fa:	4598      	cmp	r8, r3
 80183fc:	d124      	bne.n	8018448 <__ieee754_pow+0xe8>
 80183fe:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8018402:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8018406:	ea53 030a 	orrs.w	r3, r3, sl
 801840a:	f000 8476 	beq.w	8018cfa <__ieee754_pow+0x99a>
 801840e:	4b59      	ldr	r3, [pc, #356]	; (8018574 <__ieee754_pow+0x214>)
 8018410:	429c      	cmp	r4, r3
 8018412:	dd2d      	ble.n	8018470 <__ieee754_pow+0x110>
 8018414:	f1b9 0f00 	cmp.w	r9, #0
 8018418:	f280 8473 	bge.w	8018d02 <__ieee754_pow+0x9a2>
 801841c:	2000      	movs	r0, #0
 801841e:	2100      	movs	r1, #0
 8018420:	ec41 0b10 	vmov	d0, r0, r1
 8018424:	b011      	add	sp, #68	; 0x44
 8018426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801842a:	2a00      	cmp	r2, #0
 801842c:	d13e      	bne.n	80184ac <__ieee754_pow+0x14c>
 801842e:	f1c3 0314 	rsb	r3, r3, #20
 8018432:	fa48 f103 	asr.w	r1, r8, r3
 8018436:	fa01 f303 	lsl.w	r3, r1, r3
 801843a:	4543      	cmp	r3, r8
 801843c:	f040 8469 	bne.w	8018d12 <__ieee754_pow+0x9b2>
 8018440:	f001 0101 	and.w	r1, r1, #1
 8018444:	f1c1 0b02 	rsb	fp, r1, #2
 8018448:	4b4b      	ldr	r3, [pc, #300]	; (8018578 <__ieee754_pow+0x218>)
 801844a:	4598      	cmp	r8, r3
 801844c:	d118      	bne.n	8018480 <__ieee754_pow+0x120>
 801844e:	f1b9 0f00 	cmp.w	r9, #0
 8018452:	f280 845a 	bge.w	8018d0a <__ieee754_pow+0x9aa>
 8018456:	4948      	ldr	r1, [pc, #288]	; (8018578 <__ieee754_pow+0x218>)
 8018458:	4632      	mov	r2, r6
 801845a:	463b      	mov	r3, r7
 801845c:	2000      	movs	r0, #0
 801845e:	f7e8 fa15 	bl	800088c <__aeabi_ddiv>
 8018462:	e7dd      	b.n	8018420 <__ieee754_pow+0xc0>
 8018464:	f04f 0b02 	mov.w	fp, #2
 8018468:	e7c4      	b.n	80183f4 <__ieee754_pow+0x94>
 801846a:	f04f 0b00 	mov.w	fp, #0
 801846e:	e7c1      	b.n	80183f4 <__ieee754_pow+0x94>
 8018470:	f1b9 0f00 	cmp.w	r9, #0
 8018474:	dad2      	bge.n	801841c <__ieee754_pow+0xbc>
 8018476:	e9dd 0300 	ldrd	r0, r3, [sp]
 801847a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801847e:	e7cf      	b.n	8018420 <__ieee754_pow+0xc0>
 8018480:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8018484:	d106      	bne.n	8018494 <__ieee754_pow+0x134>
 8018486:	4632      	mov	r2, r6
 8018488:	463b      	mov	r3, r7
 801848a:	4610      	mov	r0, r2
 801848c:	4619      	mov	r1, r3
 801848e:	f7e8 f8d3 	bl	8000638 <__aeabi_dmul>
 8018492:	e7c5      	b.n	8018420 <__ieee754_pow+0xc0>
 8018494:	4b39      	ldr	r3, [pc, #228]	; (801857c <__ieee754_pow+0x21c>)
 8018496:	4599      	cmp	r9, r3
 8018498:	d10a      	bne.n	80184b0 <__ieee754_pow+0x150>
 801849a:	2d00      	cmp	r5, #0
 801849c:	db08      	blt.n	80184b0 <__ieee754_pow+0x150>
 801849e:	ec47 6b10 	vmov	d0, r6, r7
 80184a2:	b011      	add	sp, #68	; 0x44
 80184a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184a8:	f000 bc68 	b.w	8018d7c <__ieee754_sqrt>
 80184ac:	f04f 0b00 	mov.w	fp, #0
 80184b0:	ec47 6b10 	vmov	d0, r6, r7
 80184b4:	f000 ffd5 	bl	8019462 <fabs>
 80184b8:	ec51 0b10 	vmov	r0, r1, d0
 80184bc:	f1ba 0f00 	cmp.w	sl, #0
 80184c0:	d127      	bne.n	8018512 <__ieee754_pow+0x1b2>
 80184c2:	b124      	cbz	r4, 80184ce <__ieee754_pow+0x16e>
 80184c4:	4b2c      	ldr	r3, [pc, #176]	; (8018578 <__ieee754_pow+0x218>)
 80184c6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80184ca:	429a      	cmp	r2, r3
 80184cc:	d121      	bne.n	8018512 <__ieee754_pow+0x1b2>
 80184ce:	f1b9 0f00 	cmp.w	r9, #0
 80184d2:	da05      	bge.n	80184e0 <__ieee754_pow+0x180>
 80184d4:	4602      	mov	r2, r0
 80184d6:	460b      	mov	r3, r1
 80184d8:	2000      	movs	r0, #0
 80184da:	4927      	ldr	r1, [pc, #156]	; (8018578 <__ieee754_pow+0x218>)
 80184dc:	f7e8 f9d6 	bl	800088c <__aeabi_ddiv>
 80184e0:	2d00      	cmp	r5, #0
 80184e2:	da9d      	bge.n	8018420 <__ieee754_pow+0xc0>
 80184e4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80184e8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80184ec:	ea54 030b 	orrs.w	r3, r4, fp
 80184f0:	d108      	bne.n	8018504 <__ieee754_pow+0x1a4>
 80184f2:	4602      	mov	r2, r0
 80184f4:	460b      	mov	r3, r1
 80184f6:	4610      	mov	r0, r2
 80184f8:	4619      	mov	r1, r3
 80184fa:	f7e7 fee5 	bl	80002c8 <__aeabi_dsub>
 80184fe:	4602      	mov	r2, r0
 8018500:	460b      	mov	r3, r1
 8018502:	e7ac      	b.n	801845e <__ieee754_pow+0xfe>
 8018504:	f1bb 0f01 	cmp.w	fp, #1
 8018508:	d18a      	bne.n	8018420 <__ieee754_pow+0xc0>
 801850a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801850e:	4619      	mov	r1, r3
 8018510:	e786      	b.n	8018420 <__ieee754_pow+0xc0>
 8018512:	0fed      	lsrs	r5, r5, #31
 8018514:	1e6b      	subs	r3, r5, #1
 8018516:	930d      	str	r3, [sp, #52]	; 0x34
 8018518:	ea5b 0303 	orrs.w	r3, fp, r3
 801851c:	d102      	bne.n	8018524 <__ieee754_pow+0x1c4>
 801851e:	4632      	mov	r2, r6
 8018520:	463b      	mov	r3, r7
 8018522:	e7e8      	b.n	80184f6 <__ieee754_pow+0x196>
 8018524:	4b16      	ldr	r3, [pc, #88]	; (8018580 <__ieee754_pow+0x220>)
 8018526:	4598      	cmp	r8, r3
 8018528:	f340 80fe 	ble.w	8018728 <__ieee754_pow+0x3c8>
 801852c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8018530:	4598      	cmp	r8, r3
 8018532:	dd0a      	ble.n	801854a <__ieee754_pow+0x1ea>
 8018534:	4b0f      	ldr	r3, [pc, #60]	; (8018574 <__ieee754_pow+0x214>)
 8018536:	429c      	cmp	r4, r3
 8018538:	dc0d      	bgt.n	8018556 <__ieee754_pow+0x1f6>
 801853a:	f1b9 0f00 	cmp.w	r9, #0
 801853e:	f6bf af6d 	bge.w	801841c <__ieee754_pow+0xbc>
 8018542:	a307      	add	r3, pc, #28	; (adr r3, 8018560 <__ieee754_pow+0x200>)
 8018544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018548:	e79f      	b.n	801848a <__ieee754_pow+0x12a>
 801854a:	4b0e      	ldr	r3, [pc, #56]	; (8018584 <__ieee754_pow+0x224>)
 801854c:	429c      	cmp	r4, r3
 801854e:	ddf4      	ble.n	801853a <__ieee754_pow+0x1da>
 8018550:	4b09      	ldr	r3, [pc, #36]	; (8018578 <__ieee754_pow+0x218>)
 8018552:	429c      	cmp	r4, r3
 8018554:	dd18      	ble.n	8018588 <__ieee754_pow+0x228>
 8018556:	f1b9 0f00 	cmp.w	r9, #0
 801855a:	dcf2      	bgt.n	8018542 <__ieee754_pow+0x1e2>
 801855c:	e75e      	b.n	801841c <__ieee754_pow+0xbc>
 801855e:	bf00      	nop
 8018560:	8800759c 	.word	0x8800759c
 8018564:	7e37e43c 	.word	0x7e37e43c
 8018568:	7ff00000 	.word	0x7ff00000
 801856c:	0801a3dd 	.word	0x0801a3dd
 8018570:	433fffff 	.word	0x433fffff
 8018574:	3fefffff 	.word	0x3fefffff
 8018578:	3ff00000 	.word	0x3ff00000
 801857c:	3fe00000 	.word	0x3fe00000
 8018580:	41e00000 	.word	0x41e00000
 8018584:	3feffffe 	.word	0x3feffffe
 8018588:	2200      	movs	r2, #0
 801858a:	4b63      	ldr	r3, [pc, #396]	; (8018718 <__ieee754_pow+0x3b8>)
 801858c:	f7e7 fe9c 	bl	80002c8 <__aeabi_dsub>
 8018590:	a355      	add	r3, pc, #340	; (adr r3, 80186e8 <__ieee754_pow+0x388>)
 8018592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018596:	4604      	mov	r4, r0
 8018598:	460d      	mov	r5, r1
 801859a:	f7e8 f84d 	bl	8000638 <__aeabi_dmul>
 801859e:	a354      	add	r3, pc, #336	; (adr r3, 80186f0 <__ieee754_pow+0x390>)
 80185a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80185a4:	4606      	mov	r6, r0
 80185a6:	460f      	mov	r7, r1
 80185a8:	4620      	mov	r0, r4
 80185aa:	4629      	mov	r1, r5
 80185ac:	f7e8 f844 	bl	8000638 <__aeabi_dmul>
 80185b0:	2200      	movs	r2, #0
 80185b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80185b6:	4b59      	ldr	r3, [pc, #356]	; (801871c <__ieee754_pow+0x3bc>)
 80185b8:	4620      	mov	r0, r4
 80185ba:	4629      	mov	r1, r5
 80185bc:	f7e8 f83c 	bl	8000638 <__aeabi_dmul>
 80185c0:	4602      	mov	r2, r0
 80185c2:	460b      	mov	r3, r1
 80185c4:	a14c      	add	r1, pc, #304	; (adr r1, 80186f8 <__ieee754_pow+0x398>)
 80185c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80185ca:	f7e7 fe7d 	bl	80002c8 <__aeabi_dsub>
 80185ce:	4622      	mov	r2, r4
 80185d0:	462b      	mov	r3, r5
 80185d2:	f7e8 f831 	bl	8000638 <__aeabi_dmul>
 80185d6:	4602      	mov	r2, r0
 80185d8:	460b      	mov	r3, r1
 80185da:	2000      	movs	r0, #0
 80185dc:	4950      	ldr	r1, [pc, #320]	; (8018720 <__ieee754_pow+0x3c0>)
 80185de:	f7e7 fe73 	bl	80002c8 <__aeabi_dsub>
 80185e2:	4622      	mov	r2, r4
 80185e4:	462b      	mov	r3, r5
 80185e6:	4680      	mov	r8, r0
 80185e8:	4689      	mov	r9, r1
 80185ea:	4620      	mov	r0, r4
 80185ec:	4629      	mov	r1, r5
 80185ee:	f7e8 f823 	bl	8000638 <__aeabi_dmul>
 80185f2:	4602      	mov	r2, r0
 80185f4:	460b      	mov	r3, r1
 80185f6:	4640      	mov	r0, r8
 80185f8:	4649      	mov	r1, r9
 80185fa:	f7e8 f81d 	bl	8000638 <__aeabi_dmul>
 80185fe:	a340      	add	r3, pc, #256	; (adr r3, 8018700 <__ieee754_pow+0x3a0>)
 8018600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018604:	f7e8 f818 	bl	8000638 <__aeabi_dmul>
 8018608:	4602      	mov	r2, r0
 801860a:	460b      	mov	r3, r1
 801860c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018610:	f7e7 fe5a 	bl	80002c8 <__aeabi_dsub>
 8018614:	4602      	mov	r2, r0
 8018616:	460b      	mov	r3, r1
 8018618:	4604      	mov	r4, r0
 801861a:	460d      	mov	r5, r1
 801861c:	4630      	mov	r0, r6
 801861e:	4639      	mov	r1, r7
 8018620:	f7e7 fe54 	bl	80002cc <__adddf3>
 8018624:	2000      	movs	r0, #0
 8018626:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801862a:	4632      	mov	r2, r6
 801862c:	463b      	mov	r3, r7
 801862e:	f7e7 fe4b 	bl	80002c8 <__aeabi_dsub>
 8018632:	4602      	mov	r2, r0
 8018634:	460b      	mov	r3, r1
 8018636:	4620      	mov	r0, r4
 8018638:	4629      	mov	r1, r5
 801863a:	f7e7 fe45 	bl	80002c8 <__aeabi_dsub>
 801863e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018640:	f10b 33ff 	add.w	r3, fp, #4294967295
 8018644:	4313      	orrs	r3, r2
 8018646:	4606      	mov	r6, r0
 8018648:	460f      	mov	r7, r1
 801864a:	f040 81eb 	bne.w	8018a24 <__ieee754_pow+0x6c4>
 801864e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8018708 <__ieee754_pow+0x3a8>
 8018652:	e9dd 4500 	ldrd	r4, r5, [sp]
 8018656:	2400      	movs	r4, #0
 8018658:	4622      	mov	r2, r4
 801865a:	462b      	mov	r3, r5
 801865c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018660:	ed8d 7b02 	vstr	d7, [sp, #8]
 8018664:	f7e7 fe30 	bl	80002c8 <__aeabi_dsub>
 8018668:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801866c:	f7e7 ffe4 	bl	8000638 <__aeabi_dmul>
 8018670:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018674:	4680      	mov	r8, r0
 8018676:	4689      	mov	r9, r1
 8018678:	4630      	mov	r0, r6
 801867a:	4639      	mov	r1, r7
 801867c:	f7e7 ffdc 	bl	8000638 <__aeabi_dmul>
 8018680:	4602      	mov	r2, r0
 8018682:	460b      	mov	r3, r1
 8018684:	4640      	mov	r0, r8
 8018686:	4649      	mov	r1, r9
 8018688:	f7e7 fe20 	bl	80002cc <__adddf3>
 801868c:	4622      	mov	r2, r4
 801868e:	462b      	mov	r3, r5
 8018690:	4680      	mov	r8, r0
 8018692:	4689      	mov	r9, r1
 8018694:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018698:	f7e7 ffce 	bl	8000638 <__aeabi_dmul>
 801869c:	460b      	mov	r3, r1
 801869e:	4604      	mov	r4, r0
 80186a0:	460d      	mov	r5, r1
 80186a2:	4602      	mov	r2, r0
 80186a4:	4649      	mov	r1, r9
 80186a6:	4640      	mov	r0, r8
 80186a8:	e9cd 4500 	strd	r4, r5, [sp]
 80186ac:	f7e7 fe0e 	bl	80002cc <__adddf3>
 80186b0:	4b1c      	ldr	r3, [pc, #112]	; (8018724 <__ieee754_pow+0x3c4>)
 80186b2:	4299      	cmp	r1, r3
 80186b4:	4606      	mov	r6, r0
 80186b6:	460f      	mov	r7, r1
 80186b8:	468b      	mov	fp, r1
 80186ba:	f340 82f7 	ble.w	8018cac <__ieee754_pow+0x94c>
 80186be:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80186c2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80186c6:	4303      	orrs	r3, r0
 80186c8:	f000 81ea 	beq.w	8018aa0 <__ieee754_pow+0x740>
 80186cc:	a310      	add	r3, pc, #64	; (adr r3, 8018710 <__ieee754_pow+0x3b0>)
 80186ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80186d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80186d6:	f7e7 ffaf 	bl	8000638 <__aeabi_dmul>
 80186da:	a30d      	add	r3, pc, #52	; (adr r3, 8018710 <__ieee754_pow+0x3b0>)
 80186dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80186e0:	e6d5      	b.n	801848e <__ieee754_pow+0x12e>
 80186e2:	bf00      	nop
 80186e4:	f3af 8000 	nop.w
 80186e8:	60000000 	.word	0x60000000
 80186ec:	3ff71547 	.word	0x3ff71547
 80186f0:	f85ddf44 	.word	0xf85ddf44
 80186f4:	3e54ae0b 	.word	0x3e54ae0b
 80186f8:	55555555 	.word	0x55555555
 80186fc:	3fd55555 	.word	0x3fd55555
 8018700:	652b82fe 	.word	0x652b82fe
 8018704:	3ff71547 	.word	0x3ff71547
 8018708:	00000000 	.word	0x00000000
 801870c:	bff00000 	.word	0xbff00000
 8018710:	8800759c 	.word	0x8800759c
 8018714:	7e37e43c 	.word	0x7e37e43c
 8018718:	3ff00000 	.word	0x3ff00000
 801871c:	3fd00000 	.word	0x3fd00000
 8018720:	3fe00000 	.word	0x3fe00000
 8018724:	408fffff 	.word	0x408fffff
 8018728:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801872c:	f04f 0200 	mov.w	r2, #0
 8018730:	da05      	bge.n	801873e <__ieee754_pow+0x3de>
 8018732:	4bd3      	ldr	r3, [pc, #844]	; (8018a80 <__ieee754_pow+0x720>)
 8018734:	f7e7 ff80 	bl	8000638 <__aeabi_dmul>
 8018738:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801873c:	460c      	mov	r4, r1
 801873e:	1523      	asrs	r3, r4, #20
 8018740:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8018744:	4413      	add	r3, r2
 8018746:	9309      	str	r3, [sp, #36]	; 0x24
 8018748:	4bce      	ldr	r3, [pc, #824]	; (8018a84 <__ieee754_pow+0x724>)
 801874a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801874e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8018752:	429c      	cmp	r4, r3
 8018754:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8018758:	dd08      	ble.n	801876c <__ieee754_pow+0x40c>
 801875a:	4bcb      	ldr	r3, [pc, #812]	; (8018a88 <__ieee754_pow+0x728>)
 801875c:	429c      	cmp	r4, r3
 801875e:	f340 815e 	ble.w	8018a1e <__ieee754_pow+0x6be>
 8018762:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018764:	3301      	adds	r3, #1
 8018766:	9309      	str	r3, [sp, #36]	; 0x24
 8018768:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801876c:	f04f 0a00 	mov.w	sl, #0
 8018770:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8018774:	930c      	str	r3, [sp, #48]	; 0x30
 8018776:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018778:	4bc4      	ldr	r3, [pc, #784]	; (8018a8c <__ieee754_pow+0x72c>)
 801877a:	4413      	add	r3, r2
 801877c:	ed93 7b00 	vldr	d7, [r3]
 8018780:	4629      	mov	r1, r5
 8018782:	ec53 2b17 	vmov	r2, r3, d7
 8018786:	ed8d 7b06 	vstr	d7, [sp, #24]
 801878a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801878e:	f7e7 fd9b 	bl	80002c8 <__aeabi_dsub>
 8018792:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8018796:	4606      	mov	r6, r0
 8018798:	460f      	mov	r7, r1
 801879a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801879e:	f7e7 fd95 	bl	80002cc <__adddf3>
 80187a2:	4602      	mov	r2, r0
 80187a4:	460b      	mov	r3, r1
 80187a6:	2000      	movs	r0, #0
 80187a8:	49b9      	ldr	r1, [pc, #740]	; (8018a90 <__ieee754_pow+0x730>)
 80187aa:	f7e8 f86f 	bl	800088c <__aeabi_ddiv>
 80187ae:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80187b2:	4602      	mov	r2, r0
 80187b4:	460b      	mov	r3, r1
 80187b6:	4630      	mov	r0, r6
 80187b8:	4639      	mov	r1, r7
 80187ba:	f7e7 ff3d 	bl	8000638 <__aeabi_dmul>
 80187be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80187c2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80187c6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80187ca:	2300      	movs	r3, #0
 80187cc:	9302      	str	r3, [sp, #8]
 80187ce:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80187d2:	106d      	asrs	r5, r5, #1
 80187d4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80187d8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80187dc:	2200      	movs	r2, #0
 80187de:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80187e2:	4640      	mov	r0, r8
 80187e4:	4649      	mov	r1, r9
 80187e6:	4614      	mov	r4, r2
 80187e8:	461d      	mov	r5, r3
 80187ea:	f7e7 ff25 	bl	8000638 <__aeabi_dmul>
 80187ee:	4602      	mov	r2, r0
 80187f0:	460b      	mov	r3, r1
 80187f2:	4630      	mov	r0, r6
 80187f4:	4639      	mov	r1, r7
 80187f6:	f7e7 fd67 	bl	80002c8 <__aeabi_dsub>
 80187fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80187fe:	4606      	mov	r6, r0
 8018800:	460f      	mov	r7, r1
 8018802:	4620      	mov	r0, r4
 8018804:	4629      	mov	r1, r5
 8018806:	f7e7 fd5f 	bl	80002c8 <__aeabi_dsub>
 801880a:	4602      	mov	r2, r0
 801880c:	460b      	mov	r3, r1
 801880e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018812:	f7e7 fd59 	bl	80002c8 <__aeabi_dsub>
 8018816:	4642      	mov	r2, r8
 8018818:	464b      	mov	r3, r9
 801881a:	f7e7 ff0d 	bl	8000638 <__aeabi_dmul>
 801881e:	4602      	mov	r2, r0
 8018820:	460b      	mov	r3, r1
 8018822:	4630      	mov	r0, r6
 8018824:	4639      	mov	r1, r7
 8018826:	f7e7 fd4f 	bl	80002c8 <__aeabi_dsub>
 801882a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801882e:	f7e7 ff03 	bl	8000638 <__aeabi_dmul>
 8018832:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018836:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801883a:	4610      	mov	r0, r2
 801883c:	4619      	mov	r1, r3
 801883e:	f7e7 fefb 	bl	8000638 <__aeabi_dmul>
 8018842:	a37b      	add	r3, pc, #492	; (adr r3, 8018a30 <__ieee754_pow+0x6d0>)
 8018844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018848:	4604      	mov	r4, r0
 801884a:	460d      	mov	r5, r1
 801884c:	f7e7 fef4 	bl	8000638 <__aeabi_dmul>
 8018850:	a379      	add	r3, pc, #484	; (adr r3, 8018a38 <__ieee754_pow+0x6d8>)
 8018852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018856:	f7e7 fd39 	bl	80002cc <__adddf3>
 801885a:	4622      	mov	r2, r4
 801885c:	462b      	mov	r3, r5
 801885e:	f7e7 feeb 	bl	8000638 <__aeabi_dmul>
 8018862:	a377      	add	r3, pc, #476	; (adr r3, 8018a40 <__ieee754_pow+0x6e0>)
 8018864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018868:	f7e7 fd30 	bl	80002cc <__adddf3>
 801886c:	4622      	mov	r2, r4
 801886e:	462b      	mov	r3, r5
 8018870:	f7e7 fee2 	bl	8000638 <__aeabi_dmul>
 8018874:	a374      	add	r3, pc, #464	; (adr r3, 8018a48 <__ieee754_pow+0x6e8>)
 8018876:	e9d3 2300 	ldrd	r2, r3, [r3]
 801887a:	f7e7 fd27 	bl	80002cc <__adddf3>
 801887e:	4622      	mov	r2, r4
 8018880:	462b      	mov	r3, r5
 8018882:	f7e7 fed9 	bl	8000638 <__aeabi_dmul>
 8018886:	a372      	add	r3, pc, #456	; (adr r3, 8018a50 <__ieee754_pow+0x6f0>)
 8018888:	e9d3 2300 	ldrd	r2, r3, [r3]
 801888c:	f7e7 fd1e 	bl	80002cc <__adddf3>
 8018890:	4622      	mov	r2, r4
 8018892:	462b      	mov	r3, r5
 8018894:	f7e7 fed0 	bl	8000638 <__aeabi_dmul>
 8018898:	a36f      	add	r3, pc, #444	; (adr r3, 8018a58 <__ieee754_pow+0x6f8>)
 801889a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801889e:	f7e7 fd15 	bl	80002cc <__adddf3>
 80188a2:	4622      	mov	r2, r4
 80188a4:	4606      	mov	r6, r0
 80188a6:	460f      	mov	r7, r1
 80188a8:	462b      	mov	r3, r5
 80188aa:	4620      	mov	r0, r4
 80188ac:	4629      	mov	r1, r5
 80188ae:	f7e7 fec3 	bl	8000638 <__aeabi_dmul>
 80188b2:	4602      	mov	r2, r0
 80188b4:	460b      	mov	r3, r1
 80188b6:	4630      	mov	r0, r6
 80188b8:	4639      	mov	r1, r7
 80188ba:	f7e7 febd 	bl	8000638 <__aeabi_dmul>
 80188be:	4642      	mov	r2, r8
 80188c0:	4604      	mov	r4, r0
 80188c2:	460d      	mov	r5, r1
 80188c4:	464b      	mov	r3, r9
 80188c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80188ca:	f7e7 fcff 	bl	80002cc <__adddf3>
 80188ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80188d2:	f7e7 feb1 	bl	8000638 <__aeabi_dmul>
 80188d6:	4622      	mov	r2, r4
 80188d8:	462b      	mov	r3, r5
 80188da:	f7e7 fcf7 	bl	80002cc <__adddf3>
 80188de:	4642      	mov	r2, r8
 80188e0:	4606      	mov	r6, r0
 80188e2:	460f      	mov	r7, r1
 80188e4:	464b      	mov	r3, r9
 80188e6:	4640      	mov	r0, r8
 80188e8:	4649      	mov	r1, r9
 80188ea:	f7e7 fea5 	bl	8000638 <__aeabi_dmul>
 80188ee:	2200      	movs	r2, #0
 80188f0:	4b68      	ldr	r3, [pc, #416]	; (8018a94 <__ieee754_pow+0x734>)
 80188f2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80188f6:	f7e7 fce9 	bl	80002cc <__adddf3>
 80188fa:	4632      	mov	r2, r6
 80188fc:	463b      	mov	r3, r7
 80188fe:	f7e7 fce5 	bl	80002cc <__adddf3>
 8018902:	9802      	ldr	r0, [sp, #8]
 8018904:	460d      	mov	r5, r1
 8018906:	4604      	mov	r4, r0
 8018908:	4602      	mov	r2, r0
 801890a:	460b      	mov	r3, r1
 801890c:	4640      	mov	r0, r8
 801890e:	4649      	mov	r1, r9
 8018910:	f7e7 fe92 	bl	8000638 <__aeabi_dmul>
 8018914:	2200      	movs	r2, #0
 8018916:	4680      	mov	r8, r0
 8018918:	4689      	mov	r9, r1
 801891a:	4b5e      	ldr	r3, [pc, #376]	; (8018a94 <__ieee754_pow+0x734>)
 801891c:	4620      	mov	r0, r4
 801891e:	4629      	mov	r1, r5
 8018920:	f7e7 fcd2 	bl	80002c8 <__aeabi_dsub>
 8018924:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8018928:	f7e7 fcce 	bl	80002c8 <__aeabi_dsub>
 801892c:	4602      	mov	r2, r0
 801892e:	460b      	mov	r3, r1
 8018930:	4630      	mov	r0, r6
 8018932:	4639      	mov	r1, r7
 8018934:	f7e7 fcc8 	bl	80002c8 <__aeabi_dsub>
 8018938:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801893c:	f7e7 fe7c 	bl	8000638 <__aeabi_dmul>
 8018940:	4622      	mov	r2, r4
 8018942:	4606      	mov	r6, r0
 8018944:	460f      	mov	r7, r1
 8018946:	462b      	mov	r3, r5
 8018948:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801894c:	f7e7 fe74 	bl	8000638 <__aeabi_dmul>
 8018950:	4602      	mov	r2, r0
 8018952:	460b      	mov	r3, r1
 8018954:	4630      	mov	r0, r6
 8018956:	4639      	mov	r1, r7
 8018958:	f7e7 fcb8 	bl	80002cc <__adddf3>
 801895c:	4606      	mov	r6, r0
 801895e:	460f      	mov	r7, r1
 8018960:	4602      	mov	r2, r0
 8018962:	460b      	mov	r3, r1
 8018964:	4640      	mov	r0, r8
 8018966:	4649      	mov	r1, r9
 8018968:	f7e7 fcb0 	bl	80002cc <__adddf3>
 801896c:	9802      	ldr	r0, [sp, #8]
 801896e:	a33c      	add	r3, pc, #240	; (adr r3, 8018a60 <__ieee754_pow+0x700>)
 8018970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018974:	4604      	mov	r4, r0
 8018976:	460d      	mov	r5, r1
 8018978:	f7e7 fe5e 	bl	8000638 <__aeabi_dmul>
 801897c:	4642      	mov	r2, r8
 801897e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8018982:	464b      	mov	r3, r9
 8018984:	4620      	mov	r0, r4
 8018986:	4629      	mov	r1, r5
 8018988:	f7e7 fc9e 	bl	80002c8 <__aeabi_dsub>
 801898c:	4602      	mov	r2, r0
 801898e:	460b      	mov	r3, r1
 8018990:	4630      	mov	r0, r6
 8018992:	4639      	mov	r1, r7
 8018994:	f7e7 fc98 	bl	80002c8 <__aeabi_dsub>
 8018998:	a333      	add	r3, pc, #204	; (adr r3, 8018a68 <__ieee754_pow+0x708>)
 801899a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801899e:	f7e7 fe4b 	bl	8000638 <__aeabi_dmul>
 80189a2:	a333      	add	r3, pc, #204	; (adr r3, 8018a70 <__ieee754_pow+0x710>)
 80189a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80189a8:	4606      	mov	r6, r0
 80189aa:	460f      	mov	r7, r1
 80189ac:	4620      	mov	r0, r4
 80189ae:	4629      	mov	r1, r5
 80189b0:	f7e7 fe42 	bl	8000638 <__aeabi_dmul>
 80189b4:	4602      	mov	r2, r0
 80189b6:	460b      	mov	r3, r1
 80189b8:	4630      	mov	r0, r6
 80189ba:	4639      	mov	r1, r7
 80189bc:	f7e7 fc86 	bl	80002cc <__adddf3>
 80189c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80189c2:	4b35      	ldr	r3, [pc, #212]	; (8018a98 <__ieee754_pow+0x738>)
 80189c4:	4413      	add	r3, r2
 80189c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80189ca:	f7e7 fc7f 	bl	80002cc <__adddf3>
 80189ce:	4604      	mov	r4, r0
 80189d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80189d2:	460d      	mov	r5, r1
 80189d4:	f7e7 fdc6 	bl	8000564 <__aeabi_i2d>
 80189d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80189da:	4b30      	ldr	r3, [pc, #192]	; (8018a9c <__ieee754_pow+0x73c>)
 80189dc:	4413      	add	r3, r2
 80189de:	e9d3 8900 	ldrd	r8, r9, [r3]
 80189e2:	4606      	mov	r6, r0
 80189e4:	460f      	mov	r7, r1
 80189e6:	4622      	mov	r2, r4
 80189e8:	462b      	mov	r3, r5
 80189ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80189ee:	f7e7 fc6d 	bl	80002cc <__adddf3>
 80189f2:	4642      	mov	r2, r8
 80189f4:	464b      	mov	r3, r9
 80189f6:	f7e7 fc69 	bl	80002cc <__adddf3>
 80189fa:	4632      	mov	r2, r6
 80189fc:	463b      	mov	r3, r7
 80189fe:	f7e7 fc65 	bl	80002cc <__adddf3>
 8018a02:	9802      	ldr	r0, [sp, #8]
 8018a04:	4632      	mov	r2, r6
 8018a06:	463b      	mov	r3, r7
 8018a08:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018a0c:	f7e7 fc5c 	bl	80002c8 <__aeabi_dsub>
 8018a10:	4642      	mov	r2, r8
 8018a12:	464b      	mov	r3, r9
 8018a14:	f7e7 fc58 	bl	80002c8 <__aeabi_dsub>
 8018a18:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018a1c:	e607      	b.n	801862e <__ieee754_pow+0x2ce>
 8018a1e:	f04f 0a01 	mov.w	sl, #1
 8018a22:	e6a5      	b.n	8018770 <__ieee754_pow+0x410>
 8018a24:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8018a78 <__ieee754_pow+0x718>
 8018a28:	e613      	b.n	8018652 <__ieee754_pow+0x2f2>
 8018a2a:	bf00      	nop
 8018a2c:	f3af 8000 	nop.w
 8018a30:	4a454eef 	.word	0x4a454eef
 8018a34:	3fca7e28 	.word	0x3fca7e28
 8018a38:	93c9db65 	.word	0x93c9db65
 8018a3c:	3fcd864a 	.word	0x3fcd864a
 8018a40:	a91d4101 	.word	0xa91d4101
 8018a44:	3fd17460 	.word	0x3fd17460
 8018a48:	518f264d 	.word	0x518f264d
 8018a4c:	3fd55555 	.word	0x3fd55555
 8018a50:	db6fabff 	.word	0xdb6fabff
 8018a54:	3fdb6db6 	.word	0x3fdb6db6
 8018a58:	33333303 	.word	0x33333303
 8018a5c:	3fe33333 	.word	0x3fe33333
 8018a60:	e0000000 	.word	0xe0000000
 8018a64:	3feec709 	.word	0x3feec709
 8018a68:	dc3a03fd 	.word	0xdc3a03fd
 8018a6c:	3feec709 	.word	0x3feec709
 8018a70:	145b01f5 	.word	0x145b01f5
 8018a74:	be3e2fe0 	.word	0xbe3e2fe0
 8018a78:	00000000 	.word	0x00000000
 8018a7c:	3ff00000 	.word	0x3ff00000
 8018a80:	43400000 	.word	0x43400000
 8018a84:	0003988e 	.word	0x0003988e
 8018a88:	000bb679 	.word	0x000bb679
 8018a8c:	0801a420 	.word	0x0801a420
 8018a90:	3ff00000 	.word	0x3ff00000
 8018a94:	40080000 	.word	0x40080000
 8018a98:	0801a440 	.word	0x0801a440
 8018a9c:	0801a430 	.word	0x0801a430
 8018aa0:	a3b4      	add	r3, pc, #720	; (adr r3, 8018d74 <__ieee754_pow+0xa14>)
 8018aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018aa6:	4640      	mov	r0, r8
 8018aa8:	4649      	mov	r1, r9
 8018aaa:	f7e7 fc0f 	bl	80002cc <__adddf3>
 8018aae:	4622      	mov	r2, r4
 8018ab0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018ab4:	462b      	mov	r3, r5
 8018ab6:	4630      	mov	r0, r6
 8018ab8:	4639      	mov	r1, r7
 8018aba:	f7e7 fc05 	bl	80002c8 <__aeabi_dsub>
 8018abe:	4602      	mov	r2, r0
 8018ac0:	460b      	mov	r3, r1
 8018ac2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018ac6:	f7e8 f847 	bl	8000b58 <__aeabi_dcmpgt>
 8018aca:	2800      	cmp	r0, #0
 8018acc:	f47f adfe 	bne.w	80186cc <__ieee754_pow+0x36c>
 8018ad0:	4aa3      	ldr	r2, [pc, #652]	; (8018d60 <__ieee754_pow+0xa00>)
 8018ad2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8018ad6:	4293      	cmp	r3, r2
 8018ad8:	f340 810a 	ble.w	8018cf0 <__ieee754_pow+0x990>
 8018adc:	151b      	asrs	r3, r3, #20
 8018ade:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8018ae2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8018ae6:	fa4a f303 	asr.w	r3, sl, r3
 8018aea:	445b      	add	r3, fp
 8018aec:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8018af0:	4e9c      	ldr	r6, [pc, #624]	; (8018d64 <__ieee754_pow+0xa04>)
 8018af2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8018af6:	4116      	asrs	r6, r2
 8018af8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8018afc:	2000      	movs	r0, #0
 8018afe:	ea23 0106 	bic.w	r1, r3, r6
 8018b02:	f1c2 0214 	rsb	r2, r2, #20
 8018b06:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8018b0a:	fa4a fa02 	asr.w	sl, sl, r2
 8018b0e:	f1bb 0f00 	cmp.w	fp, #0
 8018b12:	4602      	mov	r2, r0
 8018b14:	460b      	mov	r3, r1
 8018b16:	4620      	mov	r0, r4
 8018b18:	4629      	mov	r1, r5
 8018b1a:	bfb8      	it	lt
 8018b1c:	f1ca 0a00 	rsblt	sl, sl, #0
 8018b20:	f7e7 fbd2 	bl	80002c8 <__aeabi_dsub>
 8018b24:	e9cd 0100 	strd	r0, r1, [sp]
 8018b28:	4642      	mov	r2, r8
 8018b2a:	464b      	mov	r3, r9
 8018b2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018b30:	f7e7 fbcc 	bl	80002cc <__adddf3>
 8018b34:	2000      	movs	r0, #0
 8018b36:	a378      	add	r3, pc, #480	; (adr r3, 8018d18 <__ieee754_pow+0x9b8>)
 8018b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b3c:	4604      	mov	r4, r0
 8018b3e:	460d      	mov	r5, r1
 8018b40:	f7e7 fd7a 	bl	8000638 <__aeabi_dmul>
 8018b44:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018b48:	4606      	mov	r6, r0
 8018b4a:	460f      	mov	r7, r1
 8018b4c:	4620      	mov	r0, r4
 8018b4e:	4629      	mov	r1, r5
 8018b50:	f7e7 fbba 	bl	80002c8 <__aeabi_dsub>
 8018b54:	4602      	mov	r2, r0
 8018b56:	460b      	mov	r3, r1
 8018b58:	4640      	mov	r0, r8
 8018b5a:	4649      	mov	r1, r9
 8018b5c:	f7e7 fbb4 	bl	80002c8 <__aeabi_dsub>
 8018b60:	a36f      	add	r3, pc, #444	; (adr r3, 8018d20 <__ieee754_pow+0x9c0>)
 8018b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b66:	f7e7 fd67 	bl	8000638 <__aeabi_dmul>
 8018b6a:	a36f      	add	r3, pc, #444	; (adr r3, 8018d28 <__ieee754_pow+0x9c8>)
 8018b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b70:	4680      	mov	r8, r0
 8018b72:	4689      	mov	r9, r1
 8018b74:	4620      	mov	r0, r4
 8018b76:	4629      	mov	r1, r5
 8018b78:	f7e7 fd5e 	bl	8000638 <__aeabi_dmul>
 8018b7c:	4602      	mov	r2, r0
 8018b7e:	460b      	mov	r3, r1
 8018b80:	4640      	mov	r0, r8
 8018b82:	4649      	mov	r1, r9
 8018b84:	f7e7 fba2 	bl	80002cc <__adddf3>
 8018b88:	4604      	mov	r4, r0
 8018b8a:	460d      	mov	r5, r1
 8018b8c:	4602      	mov	r2, r0
 8018b8e:	460b      	mov	r3, r1
 8018b90:	4630      	mov	r0, r6
 8018b92:	4639      	mov	r1, r7
 8018b94:	f7e7 fb9a 	bl	80002cc <__adddf3>
 8018b98:	4632      	mov	r2, r6
 8018b9a:	463b      	mov	r3, r7
 8018b9c:	4680      	mov	r8, r0
 8018b9e:	4689      	mov	r9, r1
 8018ba0:	f7e7 fb92 	bl	80002c8 <__aeabi_dsub>
 8018ba4:	4602      	mov	r2, r0
 8018ba6:	460b      	mov	r3, r1
 8018ba8:	4620      	mov	r0, r4
 8018baa:	4629      	mov	r1, r5
 8018bac:	f7e7 fb8c 	bl	80002c8 <__aeabi_dsub>
 8018bb0:	4642      	mov	r2, r8
 8018bb2:	4606      	mov	r6, r0
 8018bb4:	460f      	mov	r7, r1
 8018bb6:	464b      	mov	r3, r9
 8018bb8:	4640      	mov	r0, r8
 8018bba:	4649      	mov	r1, r9
 8018bbc:	f7e7 fd3c 	bl	8000638 <__aeabi_dmul>
 8018bc0:	a35b      	add	r3, pc, #364	; (adr r3, 8018d30 <__ieee754_pow+0x9d0>)
 8018bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018bc6:	4604      	mov	r4, r0
 8018bc8:	460d      	mov	r5, r1
 8018bca:	f7e7 fd35 	bl	8000638 <__aeabi_dmul>
 8018bce:	a35a      	add	r3, pc, #360	; (adr r3, 8018d38 <__ieee754_pow+0x9d8>)
 8018bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018bd4:	f7e7 fb78 	bl	80002c8 <__aeabi_dsub>
 8018bd8:	4622      	mov	r2, r4
 8018bda:	462b      	mov	r3, r5
 8018bdc:	f7e7 fd2c 	bl	8000638 <__aeabi_dmul>
 8018be0:	a357      	add	r3, pc, #348	; (adr r3, 8018d40 <__ieee754_pow+0x9e0>)
 8018be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018be6:	f7e7 fb71 	bl	80002cc <__adddf3>
 8018bea:	4622      	mov	r2, r4
 8018bec:	462b      	mov	r3, r5
 8018bee:	f7e7 fd23 	bl	8000638 <__aeabi_dmul>
 8018bf2:	a355      	add	r3, pc, #340	; (adr r3, 8018d48 <__ieee754_pow+0x9e8>)
 8018bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018bf8:	f7e7 fb66 	bl	80002c8 <__aeabi_dsub>
 8018bfc:	4622      	mov	r2, r4
 8018bfe:	462b      	mov	r3, r5
 8018c00:	f7e7 fd1a 	bl	8000638 <__aeabi_dmul>
 8018c04:	a352      	add	r3, pc, #328	; (adr r3, 8018d50 <__ieee754_pow+0x9f0>)
 8018c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c0a:	f7e7 fb5f 	bl	80002cc <__adddf3>
 8018c0e:	4622      	mov	r2, r4
 8018c10:	462b      	mov	r3, r5
 8018c12:	f7e7 fd11 	bl	8000638 <__aeabi_dmul>
 8018c16:	4602      	mov	r2, r0
 8018c18:	460b      	mov	r3, r1
 8018c1a:	4640      	mov	r0, r8
 8018c1c:	4649      	mov	r1, r9
 8018c1e:	f7e7 fb53 	bl	80002c8 <__aeabi_dsub>
 8018c22:	4604      	mov	r4, r0
 8018c24:	460d      	mov	r5, r1
 8018c26:	4602      	mov	r2, r0
 8018c28:	460b      	mov	r3, r1
 8018c2a:	4640      	mov	r0, r8
 8018c2c:	4649      	mov	r1, r9
 8018c2e:	f7e7 fd03 	bl	8000638 <__aeabi_dmul>
 8018c32:	2200      	movs	r2, #0
 8018c34:	e9cd 0100 	strd	r0, r1, [sp]
 8018c38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8018c3c:	4620      	mov	r0, r4
 8018c3e:	4629      	mov	r1, r5
 8018c40:	f7e7 fb42 	bl	80002c8 <__aeabi_dsub>
 8018c44:	4602      	mov	r2, r0
 8018c46:	460b      	mov	r3, r1
 8018c48:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018c4c:	f7e7 fe1e 	bl	800088c <__aeabi_ddiv>
 8018c50:	4632      	mov	r2, r6
 8018c52:	4604      	mov	r4, r0
 8018c54:	460d      	mov	r5, r1
 8018c56:	463b      	mov	r3, r7
 8018c58:	4640      	mov	r0, r8
 8018c5a:	4649      	mov	r1, r9
 8018c5c:	f7e7 fcec 	bl	8000638 <__aeabi_dmul>
 8018c60:	4632      	mov	r2, r6
 8018c62:	463b      	mov	r3, r7
 8018c64:	f7e7 fb32 	bl	80002cc <__adddf3>
 8018c68:	4602      	mov	r2, r0
 8018c6a:	460b      	mov	r3, r1
 8018c6c:	4620      	mov	r0, r4
 8018c6e:	4629      	mov	r1, r5
 8018c70:	f7e7 fb2a 	bl	80002c8 <__aeabi_dsub>
 8018c74:	4642      	mov	r2, r8
 8018c76:	464b      	mov	r3, r9
 8018c78:	f7e7 fb26 	bl	80002c8 <__aeabi_dsub>
 8018c7c:	4602      	mov	r2, r0
 8018c7e:	460b      	mov	r3, r1
 8018c80:	2000      	movs	r0, #0
 8018c82:	4939      	ldr	r1, [pc, #228]	; (8018d68 <__ieee754_pow+0xa08>)
 8018c84:	f7e7 fb20 	bl	80002c8 <__aeabi_dsub>
 8018c88:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8018c8c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8018c90:	4602      	mov	r2, r0
 8018c92:	460b      	mov	r3, r1
 8018c94:	da2f      	bge.n	8018cf6 <__ieee754_pow+0x996>
 8018c96:	4650      	mov	r0, sl
 8018c98:	ec43 2b10 	vmov	d0, r2, r3
 8018c9c:	f000 fc80 	bl	80195a0 <scalbn>
 8018ca0:	ec51 0b10 	vmov	r0, r1, d0
 8018ca4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018ca8:	f7ff bbf1 	b.w	801848e <__ieee754_pow+0x12e>
 8018cac:	4b2f      	ldr	r3, [pc, #188]	; (8018d6c <__ieee754_pow+0xa0c>)
 8018cae:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8018cb2:	429e      	cmp	r6, r3
 8018cb4:	f77f af0c 	ble.w	8018ad0 <__ieee754_pow+0x770>
 8018cb8:	4b2d      	ldr	r3, [pc, #180]	; (8018d70 <__ieee754_pow+0xa10>)
 8018cba:	440b      	add	r3, r1
 8018cbc:	4303      	orrs	r3, r0
 8018cbe:	d00b      	beq.n	8018cd8 <__ieee754_pow+0x978>
 8018cc0:	a325      	add	r3, pc, #148	; (adr r3, 8018d58 <__ieee754_pow+0x9f8>)
 8018cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018cc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018cca:	f7e7 fcb5 	bl	8000638 <__aeabi_dmul>
 8018cce:	a322      	add	r3, pc, #136	; (adr r3, 8018d58 <__ieee754_pow+0x9f8>)
 8018cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018cd4:	f7ff bbdb 	b.w	801848e <__ieee754_pow+0x12e>
 8018cd8:	4622      	mov	r2, r4
 8018cda:	462b      	mov	r3, r5
 8018cdc:	f7e7 faf4 	bl	80002c8 <__aeabi_dsub>
 8018ce0:	4642      	mov	r2, r8
 8018ce2:	464b      	mov	r3, r9
 8018ce4:	f7e7 ff2e 	bl	8000b44 <__aeabi_dcmpge>
 8018ce8:	2800      	cmp	r0, #0
 8018cea:	f43f aef1 	beq.w	8018ad0 <__ieee754_pow+0x770>
 8018cee:	e7e7      	b.n	8018cc0 <__ieee754_pow+0x960>
 8018cf0:	f04f 0a00 	mov.w	sl, #0
 8018cf4:	e718      	b.n	8018b28 <__ieee754_pow+0x7c8>
 8018cf6:	4621      	mov	r1, r4
 8018cf8:	e7d4      	b.n	8018ca4 <__ieee754_pow+0x944>
 8018cfa:	2000      	movs	r0, #0
 8018cfc:	491a      	ldr	r1, [pc, #104]	; (8018d68 <__ieee754_pow+0xa08>)
 8018cfe:	f7ff bb8f 	b.w	8018420 <__ieee754_pow+0xc0>
 8018d02:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018d06:	f7ff bb8b 	b.w	8018420 <__ieee754_pow+0xc0>
 8018d0a:	4630      	mov	r0, r6
 8018d0c:	4639      	mov	r1, r7
 8018d0e:	f7ff bb87 	b.w	8018420 <__ieee754_pow+0xc0>
 8018d12:	4693      	mov	fp, r2
 8018d14:	f7ff bb98 	b.w	8018448 <__ieee754_pow+0xe8>
 8018d18:	00000000 	.word	0x00000000
 8018d1c:	3fe62e43 	.word	0x3fe62e43
 8018d20:	fefa39ef 	.word	0xfefa39ef
 8018d24:	3fe62e42 	.word	0x3fe62e42
 8018d28:	0ca86c39 	.word	0x0ca86c39
 8018d2c:	be205c61 	.word	0xbe205c61
 8018d30:	72bea4d0 	.word	0x72bea4d0
 8018d34:	3e663769 	.word	0x3e663769
 8018d38:	c5d26bf1 	.word	0xc5d26bf1
 8018d3c:	3ebbbd41 	.word	0x3ebbbd41
 8018d40:	af25de2c 	.word	0xaf25de2c
 8018d44:	3f11566a 	.word	0x3f11566a
 8018d48:	16bebd93 	.word	0x16bebd93
 8018d4c:	3f66c16c 	.word	0x3f66c16c
 8018d50:	5555553e 	.word	0x5555553e
 8018d54:	3fc55555 	.word	0x3fc55555
 8018d58:	c2f8f359 	.word	0xc2f8f359
 8018d5c:	01a56e1f 	.word	0x01a56e1f
 8018d60:	3fe00000 	.word	0x3fe00000
 8018d64:	000fffff 	.word	0x000fffff
 8018d68:	3ff00000 	.word	0x3ff00000
 8018d6c:	4090cbff 	.word	0x4090cbff
 8018d70:	3f6f3400 	.word	0x3f6f3400
 8018d74:	652b82fe 	.word	0x652b82fe
 8018d78:	3c971547 	.word	0x3c971547

08018d7c <__ieee754_sqrt>:
 8018d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018d80:	4955      	ldr	r1, [pc, #340]	; (8018ed8 <__ieee754_sqrt+0x15c>)
 8018d82:	ec55 4b10 	vmov	r4, r5, d0
 8018d86:	43a9      	bics	r1, r5
 8018d88:	462b      	mov	r3, r5
 8018d8a:	462a      	mov	r2, r5
 8018d8c:	d112      	bne.n	8018db4 <__ieee754_sqrt+0x38>
 8018d8e:	ee10 2a10 	vmov	r2, s0
 8018d92:	ee10 0a10 	vmov	r0, s0
 8018d96:	4629      	mov	r1, r5
 8018d98:	f7e7 fc4e 	bl	8000638 <__aeabi_dmul>
 8018d9c:	4602      	mov	r2, r0
 8018d9e:	460b      	mov	r3, r1
 8018da0:	4620      	mov	r0, r4
 8018da2:	4629      	mov	r1, r5
 8018da4:	f7e7 fa92 	bl	80002cc <__adddf3>
 8018da8:	4604      	mov	r4, r0
 8018daa:	460d      	mov	r5, r1
 8018dac:	ec45 4b10 	vmov	d0, r4, r5
 8018db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018db4:	2d00      	cmp	r5, #0
 8018db6:	ee10 0a10 	vmov	r0, s0
 8018dba:	4621      	mov	r1, r4
 8018dbc:	dc0f      	bgt.n	8018dde <__ieee754_sqrt+0x62>
 8018dbe:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8018dc2:	4330      	orrs	r0, r6
 8018dc4:	d0f2      	beq.n	8018dac <__ieee754_sqrt+0x30>
 8018dc6:	b155      	cbz	r5, 8018dde <__ieee754_sqrt+0x62>
 8018dc8:	ee10 2a10 	vmov	r2, s0
 8018dcc:	4620      	mov	r0, r4
 8018dce:	4629      	mov	r1, r5
 8018dd0:	f7e7 fa7a 	bl	80002c8 <__aeabi_dsub>
 8018dd4:	4602      	mov	r2, r0
 8018dd6:	460b      	mov	r3, r1
 8018dd8:	f7e7 fd58 	bl	800088c <__aeabi_ddiv>
 8018ddc:	e7e4      	b.n	8018da8 <__ieee754_sqrt+0x2c>
 8018dde:	151b      	asrs	r3, r3, #20
 8018de0:	d073      	beq.n	8018eca <__ieee754_sqrt+0x14e>
 8018de2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8018de6:	07dd      	lsls	r5, r3, #31
 8018de8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8018dec:	bf48      	it	mi
 8018dee:	0fc8      	lsrmi	r0, r1, #31
 8018df0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8018df4:	bf44      	itt	mi
 8018df6:	0049      	lslmi	r1, r1, #1
 8018df8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8018dfc:	2500      	movs	r5, #0
 8018dfe:	1058      	asrs	r0, r3, #1
 8018e00:	0fcb      	lsrs	r3, r1, #31
 8018e02:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8018e06:	0049      	lsls	r1, r1, #1
 8018e08:	2316      	movs	r3, #22
 8018e0a:	462c      	mov	r4, r5
 8018e0c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8018e10:	19a7      	adds	r7, r4, r6
 8018e12:	4297      	cmp	r7, r2
 8018e14:	bfde      	ittt	le
 8018e16:	19bc      	addle	r4, r7, r6
 8018e18:	1bd2      	suble	r2, r2, r7
 8018e1a:	19ad      	addle	r5, r5, r6
 8018e1c:	0fcf      	lsrs	r7, r1, #31
 8018e1e:	3b01      	subs	r3, #1
 8018e20:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8018e24:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8018e28:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8018e2c:	d1f0      	bne.n	8018e10 <__ieee754_sqrt+0x94>
 8018e2e:	f04f 0c20 	mov.w	ip, #32
 8018e32:	469e      	mov	lr, r3
 8018e34:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8018e38:	42a2      	cmp	r2, r4
 8018e3a:	eb06 070e 	add.w	r7, r6, lr
 8018e3e:	dc02      	bgt.n	8018e46 <__ieee754_sqrt+0xca>
 8018e40:	d112      	bne.n	8018e68 <__ieee754_sqrt+0xec>
 8018e42:	428f      	cmp	r7, r1
 8018e44:	d810      	bhi.n	8018e68 <__ieee754_sqrt+0xec>
 8018e46:	2f00      	cmp	r7, #0
 8018e48:	eb07 0e06 	add.w	lr, r7, r6
 8018e4c:	da42      	bge.n	8018ed4 <__ieee754_sqrt+0x158>
 8018e4e:	f1be 0f00 	cmp.w	lr, #0
 8018e52:	db3f      	blt.n	8018ed4 <__ieee754_sqrt+0x158>
 8018e54:	f104 0801 	add.w	r8, r4, #1
 8018e58:	1b12      	subs	r2, r2, r4
 8018e5a:	428f      	cmp	r7, r1
 8018e5c:	bf88      	it	hi
 8018e5e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8018e62:	1bc9      	subs	r1, r1, r7
 8018e64:	4433      	add	r3, r6
 8018e66:	4644      	mov	r4, r8
 8018e68:	0052      	lsls	r2, r2, #1
 8018e6a:	f1bc 0c01 	subs.w	ip, ip, #1
 8018e6e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8018e72:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8018e76:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8018e7a:	d1dd      	bne.n	8018e38 <__ieee754_sqrt+0xbc>
 8018e7c:	430a      	orrs	r2, r1
 8018e7e:	d006      	beq.n	8018e8e <__ieee754_sqrt+0x112>
 8018e80:	1c5c      	adds	r4, r3, #1
 8018e82:	bf13      	iteet	ne
 8018e84:	3301      	addne	r3, #1
 8018e86:	3501      	addeq	r5, #1
 8018e88:	4663      	moveq	r3, ip
 8018e8a:	f023 0301 	bicne.w	r3, r3, #1
 8018e8e:	106a      	asrs	r2, r5, #1
 8018e90:	085b      	lsrs	r3, r3, #1
 8018e92:	07e9      	lsls	r1, r5, #31
 8018e94:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8018e98:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8018e9c:	bf48      	it	mi
 8018e9e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8018ea2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8018ea6:	461c      	mov	r4, r3
 8018ea8:	e780      	b.n	8018dac <__ieee754_sqrt+0x30>
 8018eaa:	0aca      	lsrs	r2, r1, #11
 8018eac:	3815      	subs	r0, #21
 8018eae:	0549      	lsls	r1, r1, #21
 8018eb0:	2a00      	cmp	r2, #0
 8018eb2:	d0fa      	beq.n	8018eaa <__ieee754_sqrt+0x12e>
 8018eb4:	02d6      	lsls	r6, r2, #11
 8018eb6:	d50a      	bpl.n	8018ece <__ieee754_sqrt+0x152>
 8018eb8:	f1c3 0420 	rsb	r4, r3, #32
 8018ebc:	fa21 f404 	lsr.w	r4, r1, r4
 8018ec0:	1e5d      	subs	r5, r3, #1
 8018ec2:	4099      	lsls	r1, r3
 8018ec4:	4322      	orrs	r2, r4
 8018ec6:	1b43      	subs	r3, r0, r5
 8018ec8:	e78b      	b.n	8018de2 <__ieee754_sqrt+0x66>
 8018eca:	4618      	mov	r0, r3
 8018ecc:	e7f0      	b.n	8018eb0 <__ieee754_sqrt+0x134>
 8018ece:	0052      	lsls	r2, r2, #1
 8018ed0:	3301      	adds	r3, #1
 8018ed2:	e7ef      	b.n	8018eb4 <__ieee754_sqrt+0x138>
 8018ed4:	46a0      	mov	r8, r4
 8018ed6:	e7bf      	b.n	8018e58 <__ieee754_sqrt+0xdc>
 8018ed8:	7ff00000 	.word	0x7ff00000

08018edc <__ieee754_powf>:
 8018edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018ee0:	ee10 5a90 	vmov	r5, s1
 8018ee4:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8018ee8:	ed2d 8b02 	vpush	{d8}
 8018eec:	eeb0 8a40 	vmov.f32	s16, s0
 8018ef0:	eef0 8a60 	vmov.f32	s17, s1
 8018ef4:	f000 8293 	beq.w	801941e <__ieee754_powf+0x542>
 8018ef8:	ee10 8a10 	vmov	r8, s0
 8018efc:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8018f00:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8018f04:	dc06      	bgt.n	8018f14 <__ieee754_powf+0x38>
 8018f06:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8018f0a:	dd0a      	ble.n	8018f22 <__ieee754_powf+0x46>
 8018f0c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8018f10:	f000 8285 	beq.w	801941e <__ieee754_powf+0x542>
 8018f14:	ecbd 8b02 	vpop	{d8}
 8018f18:	48d9      	ldr	r0, [pc, #868]	; (8019280 <__ieee754_powf+0x3a4>)
 8018f1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018f1e:	f000 bbc7 	b.w	80196b0 <nanf>
 8018f22:	f1b8 0f00 	cmp.w	r8, #0
 8018f26:	da1d      	bge.n	8018f64 <__ieee754_powf+0x88>
 8018f28:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8018f2c:	da2c      	bge.n	8018f88 <__ieee754_powf+0xac>
 8018f2e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8018f32:	db30      	blt.n	8018f96 <__ieee754_powf+0xba>
 8018f34:	15fb      	asrs	r3, r7, #23
 8018f36:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8018f3a:	fa47 f603 	asr.w	r6, r7, r3
 8018f3e:	fa06 f303 	lsl.w	r3, r6, r3
 8018f42:	42bb      	cmp	r3, r7
 8018f44:	d127      	bne.n	8018f96 <__ieee754_powf+0xba>
 8018f46:	f006 0601 	and.w	r6, r6, #1
 8018f4a:	f1c6 0602 	rsb	r6, r6, #2
 8018f4e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8018f52:	d122      	bne.n	8018f9a <__ieee754_powf+0xbe>
 8018f54:	2d00      	cmp	r5, #0
 8018f56:	f280 8268 	bge.w	801942a <__ieee754_powf+0x54e>
 8018f5a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8018f5e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8018f62:	e00d      	b.n	8018f80 <__ieee754_powf+0xa4>
 8018f64:	2600      	movs	r6, #0
 8018f66:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8018f6a:	d1f0      	bne.n	8018f4e <__ieee754_powf+0x72>
 8018f6c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8018f70:	f000 8255 	beq.w	801941e <__ieee754_powf+0x542>
 8018f74:	dd0a      	ble.n	8018f8c <__ieee754_powf+0xb0>
 8018f76:	2d00      	cmp	r5, #0
 8018f78:	f280 8254 	bge.w	8019424 <__ieee754_powf+0x548>
 8018f7c:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8019284 <__ieee754_powf+0x3a8>
 8018f80:	ecbd 8b02 	vpop	{d8}
 8018f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018f88:	2602      	movs	r6, #2
 8018f8a:	e7ec      	b.n	8018f66 <__ieee754_powf+0x8a>
 8018f8c:	2d00      	cmp	r5, #0
 8018f8e:	daf5      	bge.n	8018f7c <__ieee754_powf+0xa0>
 8018f90:	eeb1 0a68 	vneg.f32	s0, s17
 8018f94:	e7f4      	b.n	8018f80 <__ieee754_powf+0xa4>
 8018f96:	2600      	movs	r6, #0
 8018f98:	e7d9      	b.n	8018f4e <__ieee754_powf+0x72>
 8018f9a:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8018f9e:	d102      	bne.n	8018fa6 <__ieee754_powf+0xca>
 8018fa0:	ee28 0a08 	vmul.f32	s0, s16, s16
 8018fa4:	e7ec      	b.n	8018f80 <__ieee754_powf+0xa4>
 8018fa6:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8018faa:	eeb0 0a48 	vmov.f32	s0, s16
 8018fae:	d108      	bne.n	8018fc2 <__ieee754_powf+0xe6>
 8018fb0:	f1b8 0f00 	cmp.w	r8, #0
 8018fb4:	db05      	blt.n	8018fc2 <__ieee754_powf+0xe6>
 8018fb6:	ecbd 8b02 	vpop	{d8}
 8018fba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018fbe:	f000 ba4d 	b.w	801945c <__ieee754_sqrtf>
 8018fc2:	f000 fb63 	bl	801968c <fabsf>
 8018fc6:	b124      	cbz	r4, 8018fd2 <__ieee754_powf+0xf6>
 8018fc8:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8018fcc:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8018fd0:	d117      	bne.n	8019002 <__ieee754_powf+0x126>
 8018fd2:	2d00      	cmp	r5, #0
 8018fd4:	bfbc      	itt	lt
 8018fd6:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8018fda:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8018fde:	f1b8 0f00 	cmp.w	r8, #0
 8018fe2:	dacd      	bge.n	8018f80 <__ieee754_powf+0xa4>
 8018fe4:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8018fe8:	ea54 0306 	orrs.w	r3, r4, r6
 8018fec:	d104      	bne.n	8018ff8 <__ieee754_powf+0x11c>
 8018fee:	ee70 7a40 	vsub.f32	s15, s0, s0
 8018ff2:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8018ff6:	e7c3      	b.n	8018f80 <__ieee754_powf+0xa4>
 8018ff8:	2e01      	cmp	r6, #1
 8018ffa:	d1c1      	bne.n	8018f80 <__ieee754_powf+0xa4>
 8018ffc:	eeb1 0a40 	vneg.f32	s0, s0
 8019000:	e7be      	b.n	8018f80 <__ieee754_powf+0xa4>
 8019002:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8019006:	3801      	subs	r0, #1
 8019008:	ea56 0300 	orrs.w	r3, r6, r0
 801900c:	d104      	bne.n	8019018 <__ieee754_powf+0x13c>
 801900e:	ee38 8a48 	vsub.f32	s16, s16, s16
 8019012:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8019016:	e7b3      	b.n	8018f80 <__ieee754_powf+0xa4>
 8019018:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 801901c:	dd6d      	ble.n	80190fa <__ieee754_powf+0x21e>
 801901e:	4b9a      	ldr	r3, [pc, #616]	; (8019288 <__ieee754_powf+0x3ac>)
 8019020:	429c      	cmp	r4, r3
 8019022:	dc06      	bgt.n	8019032 <__ieee754_powf+0x156>
 8019024:	2d00      	cmp	r5, #0
 8019026:	daa9      	bge.n	8018f7c <__ieee754_powf+0xa0>
 8019028:	ed9f 0a98 	vldr	s0, [pc, #608]	; 801928c <__ieee754_powf+0x3b0>
 801902c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8019030:	e7a6      	b.n	8018f80 <__ieee754_powf+0xa4>
 8019032:	4b97      	ldr	r3, [pc, #604]	; (8019290 <__ieee754_powf+0x3b4>)
 8019034:	429c      	cmp	r4, r3
 8019036:	dd02      	ble.n	801903e <__ieee754_powf+0x162>
 8019038:	2d00      	cmp	r5, #0
 801903a:	dcf5      	bgt.n	8019028 <__ieee754_powf+0x14c>
 801903c:	e79e      	b.n	8018f7c <__ieee754_powf+0xa0>
 801903e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8019042:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019046:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8019294 <__ieee754_powf+0x3b8>
 801904a:	eef1 6a40 	vneg.f32	s13, s0
 801904e:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8019052:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8019056:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801905a:	eee7 7a40 	vfms.f32	s15, s14, s0
 801905e:	ee60 0a00 	vmul.f32	s1, s0, s0
 8019062:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8019298 <__ieee754_powf+0x3bc>
 8019066:	ee67 0aa0 	vmul.f32	s1, s15, s1
 801906a:	eddf 7a8c 	vldr	s15, [pc, #560]	; 801929c <__ieee754_powf+0x3c0>
 801906e:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 8019072:	eee0 7a07 	vfma.f32	s15, s0, s14
 8019076:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 80192a0 <__ieee754_powf+0x3c4>
 801907a:	eeb0 6a67 	vmov.f32	s12, s15
 801907e:	eea0 6a07 	vfma.f32	s12, s0, s14
 8019082:	ee16 3a10 	vmov	r3, s12
 8019086:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801908a:	f023 030f 	bic.w	r3, r3, #15
 801908e:	ee00 3a90 	vmov	s1, r3
 8019092:	eee6 0a87 	vfma.f32	s1, s13, s14
 8019096:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801909a:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 801909e:	f025 050f 	bic.w	r5, r5, #15
 80190a2:	ee07 5a10 	vmov	s14, r5
 80190a6:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80190aa:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80190ae:	ee07 3a90 	vmov	s15, r3
 80190b2:	eee7 0a27 	vfma.f32	s1, s14, s15
 80190b6:	3e01      	subs	r6, #1
 80190b8:	ea56 0200 	orrs.w	r2, r6, r0
 80190bc:	ee07 5a10 	vmov	s14, r5
 80190c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80190c4:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80190c8:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80190cc:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80190d0:	ee17 4a10 	vmov	r4, s14
 80190d4:	bf08      	it	eq
 80190d6:	eeb0 8a40 	vmoveq.f32	s16, s0
 80190da:	2c00      	cmp	r4, #0
 80190dc:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80190e0:	f340 8184 	ble.w	80193ec <__ieee754_powf+0x510>
 80190e4:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 80190e8:	f340 80fc 	ble.w	80192e4 <__ieee754_powf+0x408>
 80190ec:	eddf 7a67 	vldr	s15, [pc, #412]	; 801928c <__ieee754_powf+0x3b0>
 80190f0:	ee28 0a27 	vmul.f32	s0, s16, s15
 80190f4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80190f8:	e742      	b.n	8018f80 <__ieee754_powf+0xa4>
 80190fa:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 80190fe:	bfbf      	itttt	lt
 8019100:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 80192a4 <__ieee754_powf+0x3c8>
 8019104:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8019108:	f06f 0217 	mvnlt.w	r2, #23
 801910c:	ee17 4a90 	vmovlt	r4, s15
 8019110:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8019114:	bfa8      	it	ge
 8019116:	2200      	movge	r2, #0
 8019118:	3b7f      	subs	r3, #127	; 0x7f
 801911a:	4413      	add	r3, r2
 801911c:	4a62      	ldr	r2, [pc, #392]	; (80192a8 <__ieee754_powf+0x3cc>)
 801911e:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8019122:	4294      	cmp	r4, r2
 8019124:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8019128:	dd06      	ble.n	8019138 <__ieee754_powf+0x25c>
 801912a:	4a60      	ldr	r2, [pc, #384]	; (80192ac <__ieee754_powf+0x3d0>)
 801912c:	4294      	cmp	r4, r2
 801912e:	f340 80a5 	ble.w	801927c <__ieee754_powf+0x3a0>
 8019132:	3301      	adds	r3, #1
 8019134:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8019138:	2400      	movs	r4, #0
 801913a:	4a5d      	ldr	r2, [pc, #372]	; (80192b0 <__ieee754_powf+0x3d4>)
 801913c:	00a7      	lsls	r7, r4, #2
 801913e:	443a      	add	r2, r7
 8019140:	ee07 1a90 	vmov	s15, r1
 8019144:	ed92 7a00 	vldr	s14, [r2]
 8019148:	4a5a      	ldr	r2, [pc, #360]	; (80192b4 <__ieee754_powf+0x3d8>)
 801914a:	ee37 6a27 	vadd.f32	s12, s14, s15
 801914e:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8019152:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8019156:	1049      	asrs	r1, r1, #1
 8019158:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 801915c:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8019160:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8019164:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8019168:	ee06 1a10 	vmov	s12, r1
 801916c:	ee65 4aa6 	vmul.f32	s9, s11, s13
 8019170:	ee14 ca90 	vmov	ip, s9
 8019174:	ea02 0c0c 	and.w	ip, r2, ip
 8019178:	ee05 ca10 	vmov	s10, ip
 801917c:	eeb1 4a45 	vneg.f32	s8, s10
 8019180:	eee4 5a06 	vfma.f32	s11, s8, s12
 8019184:	ee36 6a47 	vsub.f32	s12, s12, s14
 8019188:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80192b8 <__ieee754_powf+0x3dc>
 801918c:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8019190:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8019194:	eee4 5a06 	vfma.f32	s11, s8, s12
 8019198:	ee67 3aa7 	vmul.f32	s7, s15, s15
 801919c:	ee25 6aa6 	vmul.f32	s12, s11, s13
 80191a0:	eddf 5a46 	vldr	s11, [pc, #280]	; 80192bc <__ieee754_powf+0x3e0>
 80191a4:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80191a8:	eddf 5a45 	vldr	s11, [pc, #276]	; 80192c0 <__ieee754_powf+0x3e4>
 80191ac:	eee7 5a27 	vfma.f32	s11, s14, s15
 80191b0:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8019294 <__ieee754_powf+0x3b8>
 80191b4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80191b8:	eddf 5a42 	vldr	s11, [pc, #264]	; 80192c4 <__ieee754_powf+0x3e8>
 80191bc:	eee7 5a27 	vfma.f32	s11, s14, s15
 80191c0:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80192c8 <__ieee754_powf+0x3ec>
 80191c4:	ee75 6a24 	vadd.f32	s13, s10, s9
 80191c8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80191cc:	ee66 6a86 	vmul.f32	s13, s13, s12
 80191d0:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 80191d4:	eef0 7a65 	vmov.f32	s15, s11
 80191d8:	eee3 6a87 	vfma.f32	s13, s7, s14
 80191dc:	eee5 7a05 	vfma.f32	s15, s10, s10
 80191e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80191e4:	ee17 1a90 	vmov	r1, s15
 80191e8:	4011      	ands	r1, r2
 80191ea:	ee07 1a90 	vmov	s15, r1
 80191ee:	ee37 7ae5 	vsub.f32	s14, s15, s11
 80191f2:	eddf 5a36 	vldr	s11, [pc, #216]	; 80192cc <__ieee754_powf+0x3f0>
 80191f6:	eea4 7a05 	vfma.f32	s14, s8, s10
 80191fa:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80191fe:	ee27 7a24 	vmul.f32	s14, s14, s9
 8019202:	eea7 7a86 	vfma.f32	s14, s15, s12
 8019206:	eeb0 6a47 	vmov.f32	s12, s14
 801920a:	eea5 6a27 	vfma.f32	s12, s10, s15
 801920e:	ee16 1a10 	vmov	r1, s12
 8019212:	4011      	ands	r1, r2
 8019214:	ee06 1a90 	vmov	s13, r1
 8019218:	eee4 6a27 	vfma.f32	s13, s8, s15
 801921c:	eddf 7a2c 	vldr	s15, [pc, #176]	; 80192d0 <__ieee754_powf+0x3f4>
 8019220:	ee37 7a66 	vsub.f32	s14, s14, s13
 8019224:	ee06 1a10 	vmov	s12, r1
 8019228:	ee27 7a27 	vmul.f32	s14, s14, s15
 801922c:	eddf 7a29 	vldr	s15, [pc, #164]	; 80192d4 <__ieee754_powf+0x3f8>
 8019230:	4929      	ldr	r1, [pc, #164]	; (80192d8 <__ieee754_powf+0x3fc>)
 8019232:	eea6 7a27 	vfma.f32	s14, s12, s15
 8019236:	4439      	add	r1, r7
 8019238:	edd1 7a00 	vldr	s15, [r1]
 801923c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019240:	ee07 3a90 	vmov	s15, r3
 8019244:	eef0 0a47 	vmov.f32	s1, s14
 8019248:	4b24      	ldr	r3, [pc, #144]	; (80192dc <__ieee754_powf+0x400>)
 801924a:	eee6 0a25 	vfma.f32	s1, s12, s11
 801924e:	443b      	add	r3, r7
 8019250:	ed93 5a00 	vldr	s10, [r3]
 8019254:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8019258:	ee70 0a85 	vadd.f32	s1, s1, s10
 801925c:	ee70 7aa6 	vadd.f32	s15, s1, s13
 8019260:	ee17 3a90 	vmov	r3, s15
 8019264:	4013      	ands	r3, r2
 8019266:	ee07 3a90 	vmov	s15, r3
 801926a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801926e:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8019272:	eee6 7a65 	vfms.f32	s15, s12, s11
 8019276:	ee77 7a67 	vsub.f32	s15, s14, s15
 801927a:	e70e      	b.n	801909a <__ieee754_powf+0x1be>
 801927c:	2401      	movs	r4, #1
 801927e:	e75c      	b.n	801913a <__ieee754_powf+0x25e>
 8019280:	0801a3dd 	.word	0x0801a3dd
 8019284:	00000000 	.word	0x00000000
 8019288:	3f7ffff7 	.word	0x3f7ffff7
 801928c:	7149f2ca 	.word	0x7149f2ca
 8019290:	3f800007 	.word	0x3f800007
 8019294:	3eaaaaab 	.word	0x3eaaaaab
 8019298:	36eca570 	.word	0x36eca570
 801929c:	3fb8aa3b 	.word	0x3fb8aa3b
 80192a0:	3fb8aa00 	.word	0x3fb8aa00
 80192a4:	4b800000 	.word	0x4b800000
 80192a8:	001cc471 	.word	0x001cc471
 80192ac:	005db3d6 	.word	0x005db3d6
 80192b0:	0801a450 	.word	0x0801a450
 80192b4:	fffff000 	.word	0xfffff000
 80192b8:	3e6c3255 	.word	0x3e6c3255
 80192bc:	3e53f142 	.word	0x3e53f142
 80192c0:	3e8ba305 	.word	0x3e8ba305
 80192c4:	3edb6db7 	.word	0x3edb6db7
 80192c8:	3f19999a 	.word	0x3f19999a
 80192cc:	3f763800 	.word	0x3f763800
 80192d0:	3f76384f 	.word	0x3f76384f
 80192d4:	369dc3a0 	.word	0x369dc3a0
 80192d8:	0801a460 	.word	0x0801a460
 80192dc:	0801a458 	.word	0x0801a458
 80192e0:	3338aa3c 	.word	0x3338aa3c
 80192e4:	f040 8092 	bne.w	801940c <__ieee754_powf+0x530>
 80192e8:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 80192e0 <__ieee754_powf+0x404>
 80192ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80192f0:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80192f4:	eef4 6ac7 	vcmpe.f32	s13, s14
 80192f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80192fc:	f73f aef6 	bgt.w	80190ec <__ieee754_powf+0x210>
 8019300:	15db      	asrs	r3, r3, #23
 8019302:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8019306:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801930a:	4103      	asrs	r3, r0
 801930c:	4423      	add	r3, r4
 801930e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8019312:	4947      	ldr	r1, [pc, #284]	; (8019430 <__ieee754_powf+0x554>)
 8019314:	3a7f      	subs	r2, #127	; 0x7f
 8019316:	4111      	asrs	r1, r2
 8019318:	ea23 0101 	bic.w	r1, r3, r1
 801931c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8019320:	ee07 1a10 	vmov	s14, r1
 8019324:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8019328:	f1c2 0217 	rsb	r2, r2, #23
 801932c:	4110      	asrs	r0, r2
 801932e:	2c00      	cmp	r4, #0
 8019330:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019334:	bfb8      	it	lt
 8019336:	4240      	neglt	r0, r0
 8019338:	ee37 7aa0 	vadd.f32	s14, s15, s1
 801933c:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8019434 <__ieee754_powf+0x558>
 8019340:	ee17 3a10 	vmov	r3, s14
 8019344:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8019348:	f023 030f 	bic.w	r3, r3, #15
 801934c:	ee07 3a10 	vmov	s14, r3
 8019350:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019354:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8019358:	eddf 7a37 	vldr	s15, [pc, #220]	; 8019438 <__ieee754_powf+0x55c>
 801935c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019360:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8019364:	eddf 6a35 	vldr	s13, [pc, #212]	; 801943c <__ieee754_powf+0x560>
 8019368:	eeb0 0a67 	vmov.f32	s0, s15
 801936c:	eea7 0a26 	vfma.f32	s0, s14, s13
 8019370:	eeb0 6a40 	vmov.f32	s12, s0
 8019374:	eea7 6a66 	vfms.f32	s12, s14, s13
 8019378:	ee20 7a00 	vmul.f32	s14, s0, s0
 801937c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8019380:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8019440 <__ieee754_powf+0x564>
 8019384:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8019444 <__ieee754_powf+0x568>
 8019388:	eea7 6a26 	vfma.f32	s12, s14, s13
 801938c:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8019448 <__ieee754_powf+0x56c>
 8019390:	eee6 6a07 	vfma.f32	s13, s12, s14
 8019394:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 801944c <__ieee754_powf+0x570>
 8019398:	eea6 6a87 	vfma.f32	s12, s13, s14
 801939c:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8019450 <__ieee754_powf+0x574>
 80193a0:	eee6 6a07 	vfma.f32	s13, s12, s14
 80193a4:	eeb0 6a40 	vmov.f32	s12, s0
 80193a8:	eea6 6ac7 	vfms.f32	s12, s13, s14
 80193ac:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80193b0:	eeb0 7a46 	vmov.f32	s14, s12
 80193b4:	ee77 6a66 	vsub.f32	s13, s14, s13
 80193b8:	ee20 6a06 	vmul.f32	s12, s0, s12
 80193bc:	eee0 7a27 	vfma.f32	s15, s0, s15
 80193c0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80193c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80193c8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80193cc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80193d0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80193d4:	ee10 3a10 	vmov	r3, s0
 80193d8:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80193dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80193e0:	da1a      	bge.n	8019418 <__ieee754_powf+0x53c>
 80193e2:	f000 f9c5 	bl	8019770 <scalbnf>
 80193e6:	ee20 0a08 	vmul.f32	s0, s0, s16
 80193ea:	e5c9      	b.n	8018f80 <__ieee754_powf+0xa4>
 80193ec:	4a19      	ldr	r2, [pc, #100]	; (8019454 <__ieee754_powf+0x578>)
 80193ee:	4293      	cmp	r3, r2
 80193f0:	dd02      	ble.n	80193f8 <__ieee754_powf+0x51c>
 80193f2:	eddf 7a19 	vldr	s15, [pc, #100]	; 8019458 <__ieee754_powf+0x57c>
 80193f6:	e67b      	b.n	80190f0 <__ieee754_powf+0x214>
 80193f8:	d108      	bne.n	801940c <__ieee754_powf+0x530>
 80193fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80193fe:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8019402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019406:	f6ff af7b 	blt.w	8019300 <__ieee754_powf+0x424>
 801940a:	e7f2      	b.n	80193f2 <__ieee754_powf+0x516>
 801940c:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8019410:	f73f af76 	bgt.w	8019300 <__ieee754_powf+0x424>
 8019414:	2000      	movs	r0, #0
 8019416:	e78f      	b.n	8019338 <__ieee754_powf+0x45c>
 8019418:	ee00 3a10 	vmov	s0, r3
 801941c:	e7e3      	b.n	80193e6 <__ieee754_powf+0x50a>
 801941e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8019422:	e5ad      	b.n	8018f80 <__ieee754_powf+0xa4>
 8019424:	eeb0 0a68 	vmov.f32	s0, s17
 8019428:	e5aa      	b.n	8018f80 <__ieee754_powf+0xa4>
 801942a:	eeb0 0a48 	vmov.f32	s0, s16
 801942e:	e5a7      	b.n	8018f80 <__ieee754_powf+0xa4>
 8019430:	007fffff 	.word	0x007fffff
 8019434:	3f317218 	.word	0x3f317218
 8019438:	35bfbe8c 	.word	0x35bfbe8c
 801943c:	3f317200 	.word	0x3f317200
 8019440:	3331bb4c 	.word	0x3331bb4c
 8019444:	b5ddea0e 	.word	0xb5ddea0e
 8019448:	388ab355 	.word	0x388ab355
 801944c:	bb360b61 	.word	0xbb360b61
 8019450:	3e2aaaab 	.word	0x3e2aaaab
 8019454:	43160000 	.word	0x43160000
 8019458:	0da24260 	.word	0x0da24260

0801945c <__ieee754_sqrtf>:
 801945c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8019460:	4770      	bx	lr

08019462 <fabs>:
 8019462:	ec51 0b10 	vmov	r0, r1, d0
 8019466:	ee10 2a10 	vmov	r2, s0
 801946a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801946e:	ec43 2b10 	vmov	d0, r2, r3
 8019472:	4770      	bx	lr

08019474 <finite>:
 8019474:	ee10 3a90 	vmov	r3, s1
 8019478:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 801947c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8019480:	0fc0      	lsrs	r0, r0, #31
 8019482:	4770      	bx	lr

08019484 <matherr>:
 8019484:	2000      	movs	r0, #0
 8019486:	4770      	bx	lr

08019488 <nan>:
 8019488:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8019490 <nan+0x8>
 801948c:	4770      	bx	lr
 801948e:	bf00      	nop
 8019490:	00000000 	.word	0x00000000
 8019494:	7ff80000 	.word	0x7ff80000

08019498 <rint>:
 8019498:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801949a:	ec51 0b10 	vmov	r0, r1, d0
 801949e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80194a2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80194a6:	2e13      	cmp	r6, #19
 80194a8:	460b      	mov	r3, r1
 80194aa:	ee10 4a10 	vmov	r4, s0
 80194ae:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80194b2:	dc56      	bgt.n	8019562 <rint+0xca>
 80194b4:	2e00      	cmp	r6, #0
 80194b6:	da2b      	bge.n	8019510 <rint+0x78>
 80194b8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80194bc:	4302      	orrs	r2, r0
 80194be:	d023      	beq.n	8019508 <rint+0x70>
 80194c0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80194c4:	4302      	orrs	r2, r0
 80194c6:	4254      	negs	r4, r2
 80194c8:	4314      	orrs	r4, r2
 80194ca:	0c4b      	lsrs	r3, r1, #17
 80194cc:	0b24      	lsrs	r4, r4, #12
 80194ce:	045b      	lsls	r3, r3, #17
 80194d0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80194d4:	ea44 0103 	orr.w	r1, r4, r3
 80194d8:	460b      	mov	r3, r1
 80194da:	492f      	ldr	r1, [pc, #188]	; (8019598 <rint+0x100>)
 80194dc:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80194e0:	e9d1 6700 	ldrd	r6, r7, [r1]
 80194e4:	4602      	mov	r2, r0
 80194e6:	4639      	mov	r1, r7
 80194e8:	4630      	mov	r0, r6
 80194ea:	f7e6 feef 	bl	80002cc <__adddf3>
 80194ee:	e9cd 0100 	strd	r0, r1, [sp]
 80194f2:	463b      	mov	r3, r7
 80194f4:	4632      	mov	r2, r6
 80194f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80194fa:	f7e6 fee5 	bl	80002c8 <__aeabi_dsub>
 80194fe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019502:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8019506:	4639      	mov	r1, r7
 8019508:	ec41 0b10 	vmov	d0, r0, r1
 801950c:	b003      	add	sp, #12
 801950e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019510:	4a22      	ldr	r2, [pc, #136]	; (801959c <rint+0x104>)
 8019512:	4132      	asrs	r2, r6
 8019514:	ea01 0702 	and.w	r7, r1, r2
 8019518:	4307      	orrs	r7, r0
 801951a:	d0f5      	beq.n	8019508 <rint+0x70>
 801951c:	0852      	lsrs	r2, r2, #1
 801951e:	4011      	ands	r1, r2
 8019520:	430c      	orrs	r4, r1
 8019522:	d00b      	beq.n	801953c <rint+0xa4>
 8019524:	ea23 0202 	bic.w	r2, r3, r2
 8019528:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801952c:	2e13      	cmp	r6, #19
 801952e:	fa43 f306 	asr.w	r3, r3, r6
 8019532:	bf0c      	ite	eq
 8019534:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8019538:	2400      	movne	r4, #0
 801953a:	4313      	orrs	r3, r2
 801953c:	4916      	ldr	r1, [pc, #88]	; (8019598 <rint+0x100>)
 801953e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8019542:	4622      	mov	r2, r4
 8019544:	e9d5 4500 	ldrd	r4, r5, [r5]
 8019548:	4620      	mov	r0, r4
 801954a:	4629      	mov	r1, r5
 801954c:	f7e6 febe 	bl	80002cc <__adddf3>
 8019550:	e9cd 0100 	strd	r0, r1, [sp]
 8019554:	4622      	mov	r2, r4
 8019556:	462b      	mov	r3, r5
 8019558:	e9dd 0100 	ldrd	r0, r1, [sp]
 801955c:	f7e6 feb4 	bl	80002c8 <__aeabi_dsub>
 8019560:	e7d2      	b.n	8019508 <rint+0x70>
 8019562:	2e33      	cmp	r6, #51	; 0x33
 8019564:	dd07      	ble.n	8019576 <rint+0xde>
 8019566:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801956a:	d1cd      	bne.n	8019508 <rint+0x70>
 801956c:	ee10 2a10 	vmov	r2, s0
 8019570:	f7e6 feac 	bl	80002cc <__adddf3>
 8019574:	e7c8      	b.n	8019508 <rint+0x70>
 8019576:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 801957a:	f04f 32ff 	mov.w	r2, #4294967295
 801957e:	40f2      	lsrs	r2, r6
 8019580:	4210      	tst	r0, r2
 8019582:	d0c1      	beq.n	8019508 <rint+0x70>
 8019584:	0852      	lsrs	r2, r2, #1
 8019586:	4210      	tst	r0, r2
 8019588:	bf1f      	itttt	ne
 801958a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801958e:	ea20 0202 	bicne.w	r2, r0, r2
 8019592:	4134      	asrne	r4, r6
 8019594:	4314      	orrne	r4, r2
 8019596:	e7d1      	b.n	801953c <rint+0xa4>
 8019598:	0801a468 	.word	0x0801a468
 801959c:	000fffff 	.word	0x000fffff

080195a0 <scalbn>:
 80195a0:	b570      	push	{r4, r5, r6, lr}
 80195a2:	ec55 4b10 	vmov	r4, r5, d0
 80195a6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80195aa:	4606      	mov	r6, r0
 80195ac:	462b      	mov	r3, r5
 80195ae:	b9aa      	cbnz	r2, 80195dc <scalbn+0x3c>
 80195b0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80195b4:	4323      	orrs	r3, r4
 80195b6:	d03b      	beq.n	8019630 <scalbn+0x90>
 80195b8:	4b31      	ldr	r3, [pc, #196]	; (8019680 <scalbn+0xe0>)
 80195ba:	4629      	mov	r1, r5
 80195bc:	2200      	movs	r2, #0
 80195be:	ee10 0a10 	vmov	r0, s0
 80195c2:	f7e7 f839 	bl	8000638 <__aeabi_dmul>
 80195c6:	4b2f      	ldr	r3, [pc, #188]	; (8019684 <scalbn+0xe4>)
 80195c8:	429e      	cmp	r6, r3
 80195ca:	4604      	mov	r4, r0
 80195cc:	460d      	mov	r5, r1
 80195ce:	da12      	bge.n	80195f6 <scalbn+0x56>
 80195d0:	a327      	add	r3, pc, #156	; (adr r3, 8019670 <scalbn+0xd0>)
 80195d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80195d6:	f7e7 f82f 	bl	8000638 <__aeabi_dmul>
 80195da:	e009      	b.n	80195f0 <scalbn+0x50>
 80195dc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80195e0:	428a      	cmp	r2, r1
 80195e2:	d10c      	bne.n	80195fe <scalbn+0x5e>
 80195e4:	ee10 2a10 	vmov	r2, s0
 80195e8:	4620      	mov	r0, r4
 80195ea:	4629      	mov	r1, r5
 80195ec:	f7e6 fe6e 	bl	80002cc <__adddf3>
 80195f0:	4604      	mov	r4, r0
 80195f2:	460d      	mov	r5, r1
 80195f4:	e01c      	b.n	8019630 <scalbn+0x90>
 80195f6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80195fa:	460b      	mov	r3, r1
 80195fc:	3a36      	subs	r2, #54	; 0x36
 80195fe:	4432      	add	r2, r6
 8019600:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8019604:	428a      	cmp	r2, r1
 8019606:	dd0b      	ble.n	8019620 <scalbn+0x80>
 8019608:	ec45 4b11 	vmov	d1, r4, r5
 801960c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8019678 <scalbn+0xd8>
 8019610:	f000 f90e 	bl	8019830 <copysign>
 8019614:	a318      	add	r3, pc, #96	; (adr r3, 8019678 <scalbn+0xd8>)
 8019616:	e9d3 2300 	ldrd	r2, r3, [r3]
 801961a:	ec51 0b10 	vmov	r0, r1, d0
 801961e:	e7da      	b.n	80195d6 <scalbn+0x36>
 8019620:	2a00      	cmp	r2, #0
 8019622:	dd08      	ble.n	8019636 <scalbn+0x96>
 8019624:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8019628:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801962c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8019630:	ec45 4b10 	vmov	d0, r4, r5
 8019634:	bd70      	pop	{r4, r5, r6, pc}
 8019636:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801963a:	da0d      	bge.n	8019658 <scalbn+0xb8>
 801963c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8019640:	429e      	cmp	r6, r3
 8019642:	ec45 4b11 	vmov	d1, r4, r5
 8019646:	dce1      	bgt.n	801960c <scalbn+0x6c>
 8019648:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8019670 <scalbn+0xd0>
 801964c:	f000 f8f0 	bl	8019830 <copysign>
 8019650:	a307      	add	r3, pc, #28	; (adr r3, 8019670 <scalbn+0xd0>)
 8019652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019656:	e7e0      	b.n	801961a <scalbn+0x7a>
 8019658:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801965c:	3236      	adds	r2, #54	; 0x36
 801965e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8019662:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8019666:	4620      	mov	r0, r4
 8019668:	4629      	mov	r1, r5
 801966a:	2200      	movs	r2, #0
 801966c:	4b06      	ldr	r3, [pc, #24]	; (8019688 <scalbn+0xe8>)
 801966e:	e7b2      	b.n	80195d6 <scalbn+0x36>
 8019670:	c2f8f359 	.word	0xc2f8f359
 8019674:	01a56e1f 	.word	0x01a56e1f
 8019678:	8800759c 	.word	0x8800759c
 801967c:	7e37e43c 	.word	0x7e37e43c
 8019680:	43500000 	.word	0x43500000
 8019684:	ffff3cb0 	.word	0xffff3cb0
 8019688:	3c900000 	.word	0x3c900000

0801968c <fabsf>:
 801968c:	ee10 3a10 	vmov	r3, s0
 8019690:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019694:	ee00 3a10 	vmov	s0, r3
 8019698:	4770      	bx	lr

0801969a <finitef>:
 801969a:	ee10 3a10 	vmov	r3, s0
 801969e:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 80196a2:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80196a6:	bfac      	ite	ge
 80196a8:	2000      	movge	r0, #0
 80196aa:	2001      	movlt	r0, #1
 80196ac:	4770      	bx	lr
	...

080196b0 <nanf>:
 80196b0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80196b8 <nanf+0x8>
 80196b4:	4770      	bx	lr
 80196b6:	bf00      	nop
 80196b8:	7fc00000 	.word	0x7fc00000

080196bc <rintf>:
 80196bc:	b513      	push	{r0, r1, r4, lr}
 80196be:	ee10 1a10 	vmov	r1, s0
 80196c2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80196c6:	0ddc      	lsrs	r4, r3, #23
 80196c8:	3c7f      	subs	r4, #127	; 0x7f
 80196ca:	2c16      	cmp	r4, #22
 80196cc:	dc46      	bgt.n	801975c <rintf+0xa0>
 80196ce:	b32b      	cbz	r3, 801971c <rintf+0x60>
 80196d0:	2c00      	cmp	r4, #0
 80196d2:	ee10 2a10 	vmov	r2, s0
 80196d6:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 80196da:	da21      	bge.n	8019720 <rintf+0x64>
 80196dc:	f3c1 0316 	ubfx	r3, r1, #0, #23
 80196e0:	425b      	negs	r3, r3
 80196e2:	4a21      	ldr	r2, [pc, #132]	; (8019768 <rintf+0xac>)
 80196e4:	0a5b      	lsrs	r3, r3, #9
 80196e6:	0d09      	lsrs	r1, r1, #20
 80196e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80196ec:	0509      	lsls	r1, r1, #20
 80196ee:	430b      	orrs	r3, r1
 80196f0:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 80196f4:	ee07 3a90 	vmov	s15, r3
 80196f8:	edd2 6a00 	vldr	s13, [r2]
 80196fc:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8019700:	ed8d 7a01 	vstr	s14, [sp, #4]
 8019704:	eddd 7a01 	vldr	s15, [sp, #4]
 8019708:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801970c:	ee17 3a90 	vmov	r3, s15
 8019710:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019714:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8019718:	ee00 3a10 	vmov	s0, r3
 801971c:	b002      	add	sp, #8
 801971e:	bd10      	pop	{r4, pc}
 8019720:	4b12      	ldr	r3, [pc, #72]	; (801976c <rintf+0xb0>)
 8019722:	4123      	asrs	r3, r4
 8019724:	4219      	tst	r1, r3
 8019726:	d0f9      	beq.n	801971c <rintf+0x60>
 8019728:	085b      	lsrs	r3, r3, #1
 801972a:	4219      	tst	r1, r3
 801972c:	d006      	beq.n	801973c <rintf+0x80>
 801972e:	ea21 0203 	bic.w	r2, r1, r3
 8019732:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8019736:	fa43 f404 	asr.w	r4, r3, r4
 801973a:	4322      	orrs	r2, r4
 801973c:	4b0a      	ldr	r3, [pc, #40]	; (8019768 <rintf+0xac>)
 801973e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8019742:	ed90 7a00 	vldr	s14, [r0]
 8019746:	ee07 2a90 	vmov	s15, r2
 801974a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801974e:	edcd 7a01 	vstr	s15, [sp, #4]
 8019752:	ed9d 0a01 	vldr	s0, [sp, #4]
 8019756:	ee30 0a47 	vsub.f32	s0, s0, s14
 801975a:	e7df      	b.n	801971c <rintf+0x60>
 801975c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019760:	d3dc      	bcc.n	801971c <rintf+0x60>
 8019762:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019766:	e7d9      	b.n	801971c <rintf+0x60>
 8019768:	0801a478 	.word	0x0801a478
 801976c:	007fffff 	.word	0x007fffff

08019770 <scalbnf>:
 8019770:	b508      	push	{r3, lr}
 8019772:	ee10 2a10 	vmov	r2, s0
 8019776:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 801977a:	ed2d 8b02 	vpush	{d8}
 801977e:	eef0 0a40 	vmov.f32	s1, s0
 8019782:	d004      	beq.n	801978e <scalbnf+0x1e>
 8019784:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019788:	d306      	bcc.n	8019798 <scalbnf+0x28>
 801978a:	ee70 0a00 	vadd.f32	s1, s0, s0
 801978e:	ecbd 8b02 	vpop	{d8}
 8019792:	eeb0 0a60 	vmov.f32	s0, s1
 8019796:	bd08      	pop	{r3, pc}
 8019798:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801979c:	d21c      	bcs.n	80197d8 <scalbnf+0x68>
 801979e:	4b1f      	ldr	r3, [pc, #124]	; (801981c <scalbnf+0xac>)
 80197a0:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8019820 <scalbnf+0xb0>
 80197a4:	4298      	cmp	r0, r3
 80197a6:	ee60 0a27 	vmul.f32	s1, s0, s15
 80197aa:	db10      	blt.n	80197ce <scalbnf+0x5e>
 80197ac:	ee10 2a90 	vmov	r2, s1
 80197b0:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 80197b4:	3b19      	subs	r3, #25
 80197b6:	4403      	add	r3, r0
 80197b8:	2bfe      	cmp	r3, #254	; 0xfe
 80197ba:	dd0f      	ble.n	80197dc <scalbnf+0x6c>
 80197bc:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8019824 <scalbnf+0xb4>
 80197c0:	eeb0 0a48 	vmov.f32	s0, s16
 80197c4:	f000 f843 	bl	801984e <copysignf>
 80197c8:	ee60 0a08 	vmul.f32	s1, s0, s16
 80197cc:	e7df      	b.n	801978e <scalbnf+0x1e>
 80197ce:	eddf 7a16 	vldr	s15, [pc, #88]	; 8019828 <scalbnf+0xb8>
 80197d2:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80197d6:	e7da      	b.n	801978e <scalbnf+0x1e>
 80197d8:	0ddb      	lsrs	r3, r3, #23
 80197da:	e7ec      	b.n	80197b6 <scalbnf+0x46>
 80197dc:	2b00      	cmp	r3, #0
 80197de:	dd06      	ble.n	80197ee <scalbnf+0x7e>
 80197e0:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80197e4:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80197e8:	ee00 3a90 	vmov	s1, r3
 80197ec:	e7cf      	b.n	801978e <scalbnf+0x1e>
 80197ee:	f113 0f16 	cmn.w	r3, #22
 80197f2:	da06      	bge.n	8019802 <scalbnf+0x92>
 80197f4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80197f8:	4298      	cmp	r0, r3
 80197fa:	dcdf      	bgt.n	80197bc <scalbnf+0x4c>
 80197fc:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8019828 <scalbnf+0xb8>
 8019800:	e7de      	b.n	80197c0 <scalbnf+0x50>
 8019802:	3319      	adds	r3, #25
 8019804:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8019808:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 801980c:	eddf 7a07 	vldr	s15, [pc, #28]	; 801982c <scalbnf+0xbc>
 8019810:	ee07 3a10 	vmov	s14, r3
 8019814:	ee67 0a27 	vmul.f32	s1, s14, s15
 8019818:	e7b9      	b.n	801978e <scalbnf+0x1e>
 801981a:	bf00      	nop
 801981c:	ffff3cb0 	.word	0xffff3cb0
 8019820:	4c000000 	.word	0x4c000000
 8019824:	7149f2ca 	.word	0x7149f2ca
 8019828:	0da24260 	.word	0x0da24260
 801982c:	33000000 	.word	0x33000000

08019830 <copysign>:
 8019830:	ec51 0b10 	vmov	r0, r1, d0
 8019834:	ee11 0a90 	vmov	r0, s3
 8019838:	ee10 2a10 	vmov	r2, s0
 801983c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8019840:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8019844:	ea41 0300 	orr.w	r3, r1, r0
 8019848:	ec43 2b10 	vmov	d0, r2, r3
 801984c:	4770      	bx	lr

0801984e <copysignf>:
 801984e:	ee10 3a10 	vmov	r3, s0
 8019852:	ee10 2a90 	vmov	r2, s1
 8019856:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801985a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 801985e:	4313      	orrs	r3, r2
 8019860:	ee00 3a10 	vmov	s0, r3
 8019864:	4770      	bx	lr
	...

08019868 <_init>:
 8019868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801986a:	bf00      	nop
 801986c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801986e:	bc08      	pop	{r3}
 8019870:	469e      	mov	lr, r3
 8019872:	4770      	bx	lr

08019874 <_fini>:
 8019874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019876:	bf00      	nop
 8019878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801987a:	bc08      	pop	{r3}
 801987c:	469e      	mov	lr, r3
 801987e:	4770      	bx	lr
