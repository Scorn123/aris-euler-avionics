
mb_working_jonas.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f02c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  0800f200  0800f200  0001f200  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f470  0800f470  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800f470  0800f470  0001f470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f478  0800f478  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f478  0800f478  0001f478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f47c  0800f47c  0001f47c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800f480  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007f44  200001fc  0800f67c  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20008140  0800f67c  00028140  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a179  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000518d  00000000  00000000  0004a3a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001b00  00000000  00000000  0004f538  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000018b8  00000000  00000000  00051038  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00008155  00000000  00000000  000528f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001a6b6  00000000  00000000  0005aa45  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f77d8  00000000  00000000  000750fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016c8d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000779c  00000000  00000000  0016c950  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001fc 	.word	0x200001fc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f1e4 	.word	0x0800f1e4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000200 	.word	0x20000200
 800020c:	0800f1e4 	.word	0x0800f1e4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2uiz>:
 8000b98:	004a      	lsls	r2, r1, #1
 8000b9a:	d211      	bcs.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d211      	bcs.n	8000bc6 <__aeabi_d2uiz+0x2e>
 8000ba2:	d50d      	bpl.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d40e      	bmi.n	8000bcc <__aeabi_d2uiz+0x34>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	fa23 f002 	lsr.w	r0, r3, r2
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_d2uiz+0x3a>
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b972 	b.w	8000f74 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9e08      	ldr	r6, [sp, #32]
 8000cae:	4604      	mov	r4, r0
 8000cb0:	4688      	mov	r8, r1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d14b      	bne.n	8000d4e <__udivmoddi4+0xa6>
 8000cb6:	428a      	cmp	r2, r1
 8000cb8:	4615      	mov	r5, r2
 8000cba:	d967      	bls.n	8000d8c <__udivmoddi4+0xe4>
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	b14a      	cbz	r2, 8000cd6 <__udivmoddi4+0x2e>
 8000cc2:	f1c2 0720 	rsb	r7, r2, #32
 8000cc6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cca:	fa20 f707 	lsr.w	r7, r0, r7
 8000cce:	4095      	lsls	r5, r2
 8000cd0:	ea47 0803 	orr.w	r8, r7, r3
 8000cd4:	4094      	lsls	r4, r2
 8000cd6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ce0:	fa1f fc85 	uxth.w	ip, r5
 8000ce4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ce8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cec:	fb07 f10c 	mul.w	r1, r7, ip
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	d909      	bls.n	8000d08 <__udivmoddi4+0x60>
 8000cf4:	18eb      	adds	r3, r5, r3
 8000cf6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cfa:	f080 811b 	bcs.w	8000f34 <__udivmoddi4+0x28c>
 8000cfe:	4299      	cmp	r1, r3
 8000d00:	f240 8118 	bls.w	8000f34 <__udivmoddi4+0x28c>
 8000d04:	3f02      	subs	r7, #2
 8000d06:	442b      	add	r3, r5
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d10:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d18:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d1c:	45a4      	cmp	ip, r4
 8000d1e:	d909      	bls.n	8000d34 <__udivmoddi4+0x8c>
 8000d20:	192c      	adds	r4, r5, r4
 8000d22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d26:	f080 8107 	bcs.w	8000f38 <__udivmoddi4+0x290>
 8000d2a:	45a4      	cmp	ip, r4
 8000d2c:	f240 8104 	bls.w	8000f38 <__udivmoddi4+0x290>
 8000d30:	3802      	subs	r0, #2
 8000d32:	442c      	add	r4, r5
 8000d34:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d38:	eba4 040c 	sub.w	r4, r4, ip
 8000d3c:	2700      	movs	r7, #0
 8000d3e:	b11e      	cbz	r6, 8000d48 <__udivmoddi4+0xa0>
 8000d40:	40d4      	lsrs	r4, r2
 8000d42:	2300      	movs	r3, #0
 8000d44:	e9c6 4300 	strd	r4, r3, [r6]
 8000d48:	4639      	mov	r1, r7
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d909      	bls.n	8000d66 <__udivmoddi4+0xbe>
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	f000 80eb 	beq.w	8000f2e <__udivmoddi4+0x286>
 8000d58:	2700      	movs	r7, #0
 8000d5a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d5e:	4638      	mov	r0, r7
 8000d60:	4639      	mov	r1, r7
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	fab3 f783 	clz	r7, r3
 8000d6a:	2f00      	cmp	r7, #0
 8000d6c:	d147      	bne.n	8000dfe <__udivmoddi4+0x156>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d302      	bcc.n	8000d78 <__udivmoddi4+0xd0>
 8000d72:	4282      	cmp	r2, r0
 8000d74:	f200 80fa 	bhi.w	8000f6c <__udivmoddi4+0x2c4>
 8000d78:	1a84      	subs	r4, r0, r2
 8000d7a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d7e:	2001      	movs	r0, #1
 8000d80:	4698      	mov	r8, r3
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	d0e0      	beq.n	8000d48 <__udivmoddi4+0xa0>
 8000d86:	e9c6 4800 	strd	r4, r8, [r6]
 8000d8a:	e7dd      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000d8c:	b902      	cbnz	r2, 8000d90 <__udivmoddi4+0xe8>
 8000d8e:	deff      	udf	#255	; 0xff
 8000d90:	fab2 f282 	clz	r2, r2
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	f040 808f 	bne.w	8000eb8 <__udivmoddi4+0x210>
 8000d9a:	1b49      	subs	r1, r1, r5
 8000d9c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000da0:	fa1f f885 	uxth.w	r8, r5
 8000da4:	2701      	movs	r7, #1
 8000da6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000daa:	0c23      	lsrs	r3, r4, #16
 8000dac:	fb0e 111c 	mls	r1, lr, ip, r1
 8000db0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db4:	fb08 f10c 	mul.w	r1, r8, ip
 8000db8:	4299      	cmp	r1, r3
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x124>
 8000dbc:	18eb      	adds	r3, r5, r3
 8000dbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x122>
 8000dc4:	4299      	cmp	r1, r3
 8000dc6:	f200 80cd 	bhi.w	8000f64 <__udivmoddi4+0x2bc>
 8000dca:	4684      	mov	ip, r0
 8000dcc:	1a59      	subs	r1, r3, r1
 8000dce:	b2a3      	uxth	r3, r4
 8000dd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dd4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000dd8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ddc:	fb08 f800 	mul.w	r8, r8, r0
 8000de0:	45a0      	cmp	r8, r4
 8000de2:	d907      	bls.n	8000df4 <__udivmoddi4+0x14c>
 8000de4:	192c      	adds	r4, r5, r4
 8000de6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x14a>
 8000dec:	45a0      	cmp	r8, r4
 8000dee:	f200 80b6 	bhi.w	8000f5e <__udivmoddi4+0x2b6>
 8000df2:	4618      	mov	r0, r3
 8000df4:	eba4 0408 	sub.w	r4, r4, r8
 8000df8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dfc:	e79f      	b.n	8000d3e <__udivmoddi4+0x96>
 8000dfe:	f1c7 0c20 	rsb	ip, r7, #32
 8000e02:	40bb      	lsls	r3, r7
 8000e04:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e08:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e0c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e10:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e14:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e18:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e1c:	4325      	orrs	r5, r4
 8000e1e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e22:	0c2c      	lsrs	r4, r5, #16
 8000e24:	fb08 3319 	mls	r3, r8, r9, r3
 8000e28:	fa1f fa8e 	uxth.w	sl, lr
 8000e2c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e30:	fb09 f40a 	mul.w	r4, r9, sl
 8000e34:	429c      	cmp	r4, r3
 8000e36:	fa02 f207 	lsl.w	r2, r2, r7
 8000e3a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e3e:	d90b      	bls.n	8000e58 <__udivmoddi4+0x1b0>
 8000e40:	eb1e 0303 	adds.w	r3, lr, r3
 8000e44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e48:	f080 8087 	bcs.w	8000f5a <__udivmoddi4+0x2b2>
 8000e4c:	429c      	cmp	r4, r3
 8000e4e:	f240 8084 	bls.w	8000f5a <__udivmoddi4+0x2b2>
 8000e52:	f1a9 0902 	sub.w	r9, r9, #2
 8000e56:	4473      	add	r3, lr
 8000e58:	1b1b      	subs	r3, r3, r4
 8000e5a:	b2ad      	uxth	r5, r5
 8000e5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e60:	fb08 3310 	mls	r3, r8, r0, r3
 8000e64:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e68:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e6c:	45a2      	cmp	sl, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x1da>
 8000e70:	eb1e 0404 	adds.w	r4, lr, r4
 8000e74:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e78:	d26b      	bcs.n	8000f52 <__udivmoddi4+0x2aa>
 8000e7a:	45a2      	cmp	sl, r4
 8000e7c:	d969      	bls.n	8000f52 <__udivmoddi4+0x2aa>
 8000e7e:	3802      	subs	r0, #2
 8000e80:	4474      	add	r4, lr
 8000e82:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e86:	fba0 8902 	umull	r8, r9, r0, r2
 8000e8a:	eba4 040a 	sub.w	r4, r4, sl
 8000e8e:	454c      	cmp	r4, r9
 8000e90:	46c2      	mov	sl, r8
 8000e92:	464b      	mov	r3, r9
 8000e94:	d354      	bcc.n	8000f40 <__udivmoddi4+0x298>
 8000e96:	d051      	beq.n	8000f3c <__udivmoddi4+0x294>
 8000e98:	2e00      	cmp	r6, #0
 8000e9a:	d069      	beq.n	8000f70 <__udivmoddi4+0x2c8>
 8000e9c:	ebb1 050a 	subs.w	r5, r1, sl
 8000ea0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ea4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ea8:	40fd      	lsrs	r5, r7
 8000eaa:	40fc      	lsrs	r4, r7
 8000eac:	ea4c 0505 	orr.w	r5, ip, r5
 8000eb0:	e9c6 5400 	strd	r5, r4, [r6]
 8000eb4:	2700      	movs	r7, #0
 8000eb6:	e747      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000eb8:	f1c2 0320 	rsb	r3, r2, #32
 8000ebc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ec0:	4095      	lsls	r5, r2
 8000ec2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ec6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ece:	4338      	orrs	r0, r7
 8000ed0:	0c01      	lsrs	r1, r0, #16
 8000ed2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ed6:	fa1f f885 	uxth.w	r8, r5
 8000eda:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ede:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee2:	fb07 f308 	mul.w	r3, r7, r8
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	fa04 f402 	lsl.w	r4, r4, r2
 8000eec:	d907      	bls.n	8000efe <__udivmoddi4+0x256>
 8000eee:	1869      	adds	r1, r5, r1
 8000ef0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ef4:	d22f      	bcs.n	8000f56 <__udivmoddi4+0x2ae>
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	d92d      	bls.n	8000f56 <__udivmoddi4+0x2ae>
 8000efa:	3f02      	subs	r7, #2
 8000efc:	4429      	add	r1, r5
 8000efe:	1acb      	subs	r3, r1, r3
 8000f00:	b281      	uxth	r1, r0
 8000f02:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f06:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f0a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f0e:	fb00 f308 	mul.w	r3, r0, r8
 8000f12:	428b      	cmp	r3, r1
 8000f14:	d907      	bls.n	8000f26 <__udivmoddi4+0x27e>
 8000f16:	1869      	adds	r1, r5, r1
 8000f18:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f1c:	d217      	bcs.n	8000f4e <__udivmoddi4+0x2a6>
 8000f1e:	428b      	cmp	r3, r1
 8000f20:	d915      	bls.n	8000f4e <__udivmoddi4+0x2a6>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4429      	add	r1, r5
 8000f26:	1ac9      	subs	r1, r1, r3
 8000f28:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f2c:	e73b      	b.n	8000da6 <__udivmoddi4+0xfe>
 8000f2e:	4637      	mov	r7, r6
 8000f30:	4630      	mov	r0, r6
 8000f32:	e709      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000f34:	4607      	mov	r7, r0
 8000f36:	e6e7      	b.n	8000d08 <__udivmoddi4+0x60>
 8000f38:	4618      	mov	r0, r3
 8000f3a:	e6fb      	b.n	8000d34 <__udivmoddi4+0x8c>
 8000f3c:	4541      	cmp	r1, r8
 8000f3e:	d2ab      	bcs.n	8000e98 <__udivmoddi4+0x1f0>
 8000f40:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f44:	eb69 020e 	sbc.w	r2, r9, lr
 8000f48:	3801      	subs	r0, #1
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	e7a4      	b.n	8000e98 <__udivmoddi4+0x1f0>
 8000f4e:	4660      	mov	r0, ip
 8000f50:	e7e9      	b.n	8000f26 <__udivmoddi4+0x27e>
 8000f52:	4618      	mov	r0, r3
 8000f54:	e795      	b.n	8000e82 <__udivmoddi4+0x1da>
 8000f56:	4667      	mov	r7, ip
 8000f58:	e7d1      	b.n	8000efe <__udivmoddi4+0x256>
 8000f5a:	4681      	mov	r9, r0
 8000f5c:	e77c      	b.n	8000e58 <__udivmoddi4+0x1b0>
 8000f5e:	3802      	subs	r0, #2
 8000f60:	442c      	add	r4, r5
 8000f62:	e747      	b.n	8000df4 <__udivmoddi4+0x14c>
 8000f64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f68:	442b      	add	r3, r5
 8000f6a:	e72f      	b.n	8000dcc <__udivmoddi4+0x124>
 8000f6c:	4638      	mov	r0, r7
 8000f6e:	e708      	b.n	8000d82 <__udivmoddi4+0xda>
 8000f70:	4637      	mov	r7, r6
 8000f72:	e6e9      	b.n	8000d48 <__udivmoddi4+0xa0>

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f7c:	f001 ff87 	bl	8002e8e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f80:	f000 f866 	bl	8001050 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f84:	f000 f998 	bl	80012b8 <MX_GPIO_Init>
  MX_SPI3_Init();
 8000f88:	f000 f95e 	bl	8001248 <MX_SPI3_Init>
  MX_SPI1_Init();
 8000f8c:	f000 f8ec 	bl	8001168 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000f90:	f000 f922 	bl	80011d8 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 8000f94:	f00b fe8a 	bl	800ccac <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f98:	f008 fb84 	bl	80096a4 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of sb_1_mutex */
  sb_1_mutexHandle = osMutexNew(&sb_1_mutex_attributes);
 8000f9c:	481a      	ldr	r0, [pc, #104]	; (8001008 <main+0x90>)
 8000f9e:	f008 fd31 	bl	8009a04 <osMutexNew>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	4b19      	ldr	r3, [pc, #100]	; (800100c <main+0x94>)
 8000fa6:	601a      	str	r2, [r3, #0]

  /* creation of sb_3_mutex */
  sb_3_mutexHandle = osMutexNew(&sb_3_mutex_attributes);
 8000fa8:	4819      	ldr	r0, [pc, #100]	; (8001010 <main+0x98>)
 8000faa:	f008 fd2b 	bl	8009a04 <osMutexNew>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	4b18      	ldr	r3, [pc, #96]	; (8001014 <main+0x9c>)
 8000fb2:	601a      	str	r2, [r3, #0]

  /* creation of sb_2_mutex */
  sb_2_mutexHandle = osMutexNew(&sb_2_mutex_attributes);
 8000fb4:	4818      	ldr	r0, [pc, #96]	; (8001018 <main+0xa0>)
 8000fb6:	f008 fd25 	bl	8009a04 <osMutexNew>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	4b17      	ldr	r3, [pc, #92]	; (800101c <main+0xa4>)
 8000fbe:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000fc0:	4a17      	ldr	r2, [pc, #92]	; (8001020 <main+0xa8>)
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	4817      	ldr	r0, [pc, #92]	; (8001024 <main+0xac>)
 8000fc6:	f008 fc09 	bl	80097dc <osThreadNew>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	4b16      	ldr	r3, [pc, #88]	; (8001028 <main+0xb0>)
 8000fce:	601a      	str	r2, [r3, #0]

  /* creation of task_state_est */
  task_state_estHandle = osThreadNew(vTaskStateEst, NULL, &task_state_est_attributes);
 8000fd0:	4a16      	ldr	r2, [pc, #88]	; (800102c <main+0xb4>)
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	4816      	ldr	r0, [pc, #88]	; (8001030 <main+0xb8>)
 8000fd6:	f008 fc01 	bl	80097dc <osThreadNew>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	4b15      	ldr	r3, [pc, #84]	; (8001034 <main+0xbc>)
 8000fde:	601a      	str	r2, [r3, #0]

  /* creation of task_controller */
  task_controllerHandle = osThreadNew(vTaskController, NULL, &task_controller_attributes);
 8000fe0:	4a15      	ldr	r2, [pc, #84]	; (8001038 <main+0xc0>)
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4815      	ldr	r0, [pc, #84]	; (800103c <main+0xc4>)
 8000fe6:	f008 fbf9 	bl	80097dc <osThreadNew>
 8000fea:	4602      	mov	r2, r0
 8000fec:	4b14      	ldr	r3, [pc, #80]	; (8001040 <main+0xc8>)
 8000fee:	601a      	str	r2, [r3, #0]

  /* creation of task_sens_read */
  task_sens_readHandle = osThreadNew(vTaskSensRead, NULL, &task_sens_read_attributes);
 8000ff0:	4a14      	ldr	r2, [pc, #80]	; (8001044 <main+0xcc>)
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	4814      	ldr	r0, [pc, #80]	; (8001048 <main+0xd0>)
 8000ff6:	f008 fbf1 	bl	80097dc <osThreadNew>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	4b13      	ldr	r3, [pc, #76]	; (800104c <main+0xd4>)
 8000ffe:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001000:	f008 fb84 	bl	800970c <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001004:	e7fe      	b.n	8001004 <main+0x8c>
 8001006:	bf00      	nop
 8001008:	0800f3b0 	.word	0x0800f3b0
 800100c:	200067dc 	.word	0x200067dc
 8001010:	0800f3c0 	.word	0x0800f3c0
 8001014:	20004bd4 	.word	0x20004bd4
 8001018:	0800f3d0 	.word	0x0800f3d0
 800101c:	20004bd0 	.word	0x20004bd0
 8001020:	0800f320 	.word	0x0800f320
 8001024:	08001319 	.word	0x08001319
 8001028:	20004bd8 	.word	0x20004bd8
 800102c:	0800f344 	.word	0x0800f344
 8001030:	08001c71 	.word	0x08001c71
 8001034:	200055c0 	.word	0x200055c0
 8001038:	0800f368 	.word	0x0800f368
 800103c:	08001771 	.word	0x08001771
 8001040:	200067e0 	.word	0x200067e0
 8001044:	0800f38c 	.word	0x0800f38c
 8001048:	08001a61 	.word	0x08001a61
 800104c:	20004c90 	.word	0x20004c90

08001050 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b0b4      	sub	sp, #208	; 0xd0
 8001054:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001056:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800105a:	2230      	movs	r2, #48	; 0x30
 800105c:	2100      	movs	r1, #0
 800105e:	4618      	mov	r0, r3
 8001060:	f00c fbd1 	bl	800d806 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001064:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001074:	f107 0308 	add.w	r3, r7, #8
 8001078:	2284      	movs	r2, #132	; 0x84
 800107a:	2100      	movs	r1, #0
 800107c:	4618      	mov	r0, r3
 800107e:	f00c fbc2 	bl	800d806 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001082:	4b37      	ldr	r3, [pc, #220]	; (8001160 <SystemClock_Config+0x110>)
 8001084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001086:	4a36      	ldr	r2, [pc, #216]	; (8001160 <SystemClock_Config+0x110>)
 8001088:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800108c:	6413      	str	r3, [r2, #64]	; 0x40
 800108e:	4b34      	ldr	r3, [pc, #208]	; (8001160 <SystemClock_Config+0x110>)
 8001090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800109a:	4b32      	ldr	r3, [pc, #200]	; (8001164 <SystemClock_Config+0x114>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010a2:	4a30      	ldr	r2, [pc, #192]	; (8001164 <SystemClock_Config+0x114>)
 80010a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010a8:	6013      	str	r3, [r2, #0]
 80010aa:	4b2e      	ldr	r3, [pc, #184]	; (8001164 <SystemClock_Config+0x114>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010b2:	603b      	str	r3, [r7, #0]
 80010b4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010b6:	2301      	movs	r3, #1
 80010b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010c4:	2302      	movs	r3, #2
 80010c6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010d2:	2304      	movs	r3, #4
 80010d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 168;
 80010d8:	23a8      	movs	r3, #168	; 0xa8
 80010da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010de:	2302      	movs	r3, #2
 80010e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010e4:	2307      	movs	r3, #7
 80010e6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ea:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80010ee:	4618      	mov	r0, r3
 80010f0:	f003 fb66 	bl	80047c0 <HAL_RCC_OscConfig>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <SystemClock_Config+0xae>
  {
    Error_Handler();
 80010fa:	f000 f929 	bl	8001350 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010fe:	230f      	movs	r3, #15
 8001100:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001104:	2302      	movs	r3, #2
 8001106:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800110a:	2300      	movs	r3, #0
 800110c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001110:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001114:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001118:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800111c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001120:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001124:	2105      	movs	r1, #5
 8001126:	4618      	mov	r0, r3
 8001128:	f003 fdee 	bl	8004d08 <HAL_RCC_ClockConfig>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8001132:	f000 f90d 	bl	8001350 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001136:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800113a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800113c:	2300      	movs	r3, #0
 800113e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001142:	f107 0308 	add.w	r3, r7, #8
 8001146:	4618      	mov	r0, r3
 8001148:	f003 fff4 	bl	8005134 <HAL_RCCEx_PeriphCLKConfig>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <SystemClock_Config+0x106>
  {
    Error_Handler();
 8001152:	f000 f8fd 	bl	8001350 <Error_Handler>
  }
}
 8001156:	bf00      	nop
 8001158:	37d0      	adds	r7, #208	; 0xd0
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40023800 	.word	0x40023800
 8001164:	40007000 	.word	0x40007000

08001168 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800116c:	4b18      	ldr	r3, [pc, #96]	; (80011d0 <MX_SPI1_Init+0x68>)
 800116e:	4a19      	ldr	r2, [pc, #100]	; (80011d4 <MX_SPI1_Init+0x6c>)
 8001170:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8001172:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <MX_SPI1_Init+0x68>)
 8001174:	2200      	movs	r2, #0
 8001176:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001178:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <MX_SPI1_Init+0x68>)
 800117a:	2200      	movs	r2, #0
 800117c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800117e:	4b14      	ldr	r3, [pc, #80]	; (80011d0 <MX_SPI1_Init+0x68>)
 8001180:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001184:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001186:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <MX_SPI1_Init+0x68>)
 8001188:	2200      	movs	r2, #0
 800118a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800118c:	4b10      	ldr	r3, [pc, #64]	; (80011d0 <MX_SPI1_Init+0x68>)
 800118e:	2200      	movs	r2, #0
 8001190:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8001192:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <MX_SPI1_Init+0x68>)
 8001194:	2200      	movs	r2, #0
 8001196:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001198:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <MX_SPI1_Init+0x68>)
 800119a:	2200      	movs	r2, #0
 800119c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800119e:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <MX_SPI1_Init+0x68>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011a4:	4b0a      	ldr	r3, [pc, #40]	; (80011d0 <MX_SPI1_Init+0x68>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80011aa:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <MX_SPI1_Init+0x68>)
 80011ac:	2207      	movs	r2, #7
 80011ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011b0:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <MX_SPI1_Init+0x68>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80011b6:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <MX_SPI1_Init+0x68>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011bc:	4804      	ldr	r0, [pc, #16]	; (80011d0 <MX_SPI1_Init+0x68>)
 80011be:	f004 fb6f 	bl	80058a0 <HAL_SPI_Init>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 80011c8:	f000 f8c2 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011cc:	bf00      	nop
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	20005f1c 	.word	0x20005f1c
 80011d4:	40013000 	.word	0x40013000

080011d8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80011dc:	4b18      	ldr	r3, [pc, #96]	; (8001240 <MX_SPI2_Init+0x68>)
 80011de:	4a19      	ldr	r2, [pc, #100]	; (8001244 <MX_SPI2_Init+0x6c>)
 80011e0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80011e2:	4b17      	ldr	r3, [pc, #92]	; (8001240 <MX_SPI2_Init+0x68>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80011e8:	4b15      	ldr	r3, [pc, #84]	; (8001240 <MX_SPI2_Init+0x68>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80011ee:	4b14      	ldr	r3, [pc, #80]	; (8001240 <MX_SPI2_Init+0x68>)
 80011f0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80011f4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011f6:	4b12      	ldr	r3, [pc, #72]	; (8001240 <MX_SPI2_Init+0x68>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011fc:	4b10      	ldr	r3, [pc, #64]	; (8001240 <MX_SPI2_Init+0x68>)
 80011fe:	2200      	movs	r2, #0
 8001200:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8001202:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <MX_SPI2_Init+0x68>)
 8001204:	2200      	movs	r2, #0
 8001206:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001208:	4b0d      	ldr	r3, [pc, #52]	; (8001240 <MX_SPI2_Init+0x68>)
 800120a:	2200      	movs	r2, #0
 800120c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800120e:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <MX_SPI2_Init+0x68>)
 8001210:	2200      	movs	r2, #0
 8001212:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001214:	4b0a      	ldr	r3, [pc, #40]	; (8001240 <MX_SPI2_Init+0x68>)
 8001216:	2200      	movs	r2, #0
 8001218:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800121a:	4b09      	ldr	r3, [pc, #36]	; (8001240 <MX_SPI2_Init+0x68>)
 800121c:	2207      	movs	r2, #7
 800121e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001220:	4b07      	ldr	r3, [pc, #28]	; (8001240 <MX_SPI2_Init+0x68>)
 8001222:	2200      	movs	r2, #0
 8001224:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001226:	4b06      	ldr	r3, [pc, #24]	; (8001240 <MX_SPI2_Init+0x68>)
 8001228:	2200      	movs	r2, #0
 800122a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800122c:	4804      	ldr	r0, [pc, #16]	; (8001240 <MX_SPI2_Init+0x68>)
 800122e:	f004 fb37 	bl	80058a0 <HAL_SPI_Init>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_SPI2_Init+0x64>
  {
    Error_Handler();
 8001238:	f000 f88a 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800123c:	bf00      	nop
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20004bdc 	.word	0x20004bdc
 8001244:	40003800 	.word	0x40003800

08001248 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800124c:	4b18      	ldr	r3, [pc, #96]	; (80012b0 <MX_SPI3_Init+0x68>)
 800124e:	4a19      	ldr	r2, [pc, #100]	; (80012b4 <MX_SPI3_Init+0x6c>)
 8001250:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8001252:	4b17      	ldr	r3, [pc, #92]	; (80012b0 <MX_SPI3_Init+0x68>)
 8001254:	2200      	movs	r2, #0
 8001256:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001258:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <MX_SPI3_Init+0x68>)
 800125a:	2200      	movs	r2, #0
 800125c:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800125e:	4b14      	ldr	r3, [pc, #80]	; (80012b0 <MX_SPI3_Init+0x68>)
 8001260:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001264:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001266:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <MX_SPI3_Init+0x68>)
 8001268:	2200      	movs	r2, #0
 800126a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800126c:	4b10      	ldr	r3, [pc, #64]	; (80012b0 <MX_SPI3_Init+0x68>)
 800126e:	2200      	movs	r2, #0
 8001270:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 8001272:	4b0f      	ldr	r3, [pc, #60]	; (80012b0 <MX_SPI3_Init+0x68>)
 8001274:	2200      	movs	r2, #0
 8001276:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001278:	4b0d      	ldr	r3, [pc, #52]	; (80012b0 <MX_SPI3_Init+0x68>)
 800127a:	2200      	movs	r2, #0
 800127c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800127e:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <MX_SPI3_Init+0x68>)
 8001280:	2200      	movs	r2, #0
 8001282:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001284:	4b0a      	ldr	r3, [pc, #40]	; (80012b0 <MX_SPI3_Init+0x68>)
 8001286:	2200      	movs	r2, #0
 8001288:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800128a:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <MX_SPI3_Init+0x68>)
 800128c:	2207      	movs	r2, #7
 800128e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001290:	4b07      	ldr	r3, [pc, #28]	; (80012b0 <MX_SPI3_Init+0x68>)
 8001292:	2200      	movs	r2, #0
 8001294:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001296:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <MX_SPI3_Init+0x68>)
 8001298:	2200      	movs	r2, #0
 800129a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800129c:	4804      	ldr	r0, [pc, #16]	; (80012b0 <MX_SPI3_Init+0x68>)
 800129e:	f004 faff 	bl	80058a0 <HAL_SPI_Init>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_SPI3_Init+0x64>
  {
    Error_Handler();
 80012a8:	f000 f852 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80012ac:	bf00      	nop
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20005494 	.word	0x20005494
 80012b4:	40003c00 	.word	0x40003c00

080012b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012be:	4b15      	ldr	r3, [pc, #84]	; (8001314 <MX_GPIO_Init+0x5c>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	4a14      	ldr	r2, [pc, #80]	; (8001314 <MX_GPIO_Init+0x5c>)
 80012c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012c8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ca:	4b12      	ldr	r3, [pc, #72]	; (8001314 <MX_GPIO_Init+0x5c>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d6:	4b0f      	ldr	r3, [pc, #60]	; (8001314 <MX_GPIO_Init+0x5c>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	4a0e      	ldr	r2, [pc, #56]	; (8001314 <MX_GPIO_Init+0x5c>)
 80012dc:	f043 0301 	orr.w	r3, r3, #1
 80012e0:	6313      	str	r3, [r2, #48]	; 0x30
 80012e2:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <MX_GPIO_Init+0x5c>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	60bb      	str	r3, [r7, #8]
 80012ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ee:	4b09      	ldr	r3, [pc, #36]	; (8001314 <MX_GPIO_Init+0x5c>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	4a08      	ldr	r2, [pc, #32]	; (8001314 <MX_GPIO_Init+0x5c>)
 80012f4:	f043 0302 	orr.w	r3, r3, #2
 80012f8:	6313      	str	r3, [r2, #48]	; 0x30
 80012fa:	4b06      	ldr	r3, [pc, #24]	; (8001314 <MX_GPIO_Init+0x5c>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	607b      	str	r3, [r7, #4]
 8001304:	687b      	ldr	r3, [r7, #4]

}
 8001306:	bf00      	nop
 8001308:	3714      	adds	r7, #20
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	40023800 	.word	0x40023800

08001318 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001320:	f00b fcc4 	bl	800ccac <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001324:	2001      	movs	r0, #1
 8001326:	f008 faff 	bl	8009928 <osDelay>
 800132a:	e7fb      	b.n	8001324 <StartDefaultTask+0xc>

0800132c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a04      	ldr	r2, [pc, #16]	; (800134c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d101      	bne.n	8001342 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800133e:	f001 fdb3 	bl	8002ea8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40010000 	.word	0x40010000

08001350 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
	...

08001360 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001366:	4b11      	ldr	r3, [pc, #68]	; (80013ac <HAL_MspInit+0x4c>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	4a10      	ldr	r2, [pc, #64]	; (80013ac <HAL_MspInit+0x4c>)
 800136c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001370:	6413      	str	r3, [r2, #64]	; 0x40
 8001372:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <HAL_MspInit+0x4c>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137a:	607b      	str	r3, [r7, #4]
 800137c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800137e:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <HAL_MspInit+0x4c>)
 8001380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001382:	4a0a      	ldr	r2, [pc, #40]	; (80013ac <HAL_MspInit+0x4c>)
 8001384:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001388:	6453      	str	r3, [r2, #68]	; 0x44
 800138a:	4b08      	ldr	r3, [pc, #32]	; (80013ac <HAL_MspInit+0x4c>)
 800138c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001392:	603b      	str	r3, [r7, #0]
 8001394:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001396:	2200      	movs	r2, #0
 8001398:	210f      	movs	r1, #15
 800139a:	f06f 0001 	mvn.w	r0, #1
 800139e:	f001 fe7d 	bl	800309c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40023800 	.word	0x40023800

080013b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08e      	sub	sp, #56	; 0x38
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a5c      	ldr	r2, [pc, #368]	; (8001540 <HAL_SPI_MspInit+0x190>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d129      	bne.n	8001426 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013d2:	4b5c      	ldr	r3, [pc, #368]	; (8001544 <HAL_SPI_MspInit+0x194>)
 80013d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d6:	4a5b      	ldr	r2, [pc, #364]	; (8001544 <HAL_SPI_MspInit+0x194>)
 80013d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013dc:	6453      	str	r3, [r2, #68]	; 0x44
 80013de:	4b59      	ldr	r3, [pc, #356]	; (8001544 <HAL_SPI_MspInit+0x194>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013e6:	623b      	str	r3, [r7, #32]
 80013e8:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ea:	4b56      	ldr	r3, [pc, #344]	; (8001544 <HAL_SPI_MspInit+0x194>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	4a55      	ldr	r2, [pc, #340]	; (8001544 <HAL_SPI_MspInit+0x194>)
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	6313      	str	r3, [r2, #48]	; 0x30
 80013f6:	4b53      	ldr	r3, [pc, #332]	; (8001544 <HAL_SPI_MspInit+0x194>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	61fb      	str	r3, [r7, #28]
 8001400:	69fb      	ldr	r3, [r7, #28]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA15     ------> SPI1_NSS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_15;
 8001402:	f248 03e0 	movw	r3, #32992	; 0x80e0
 8001406:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001408:	2302      	movs	r3, #2
 800140a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001410:	2303      	movs	r3, #3
 8001412:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001414:	2305      	movs	r3, #5
 8001416:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001418:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800141c:	4619      	mov	r1, r3
 800141e:	484a      	ldr	r0, [pc, #296]	; (8001548 <HAL_SPI_MspInit+0x198>)
 8001420:	f001 fe66 	bl	80030f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001424:	e087      	b.n	8001536 <HAL_SPI_MspInit+0x186>
  else if(hspi->Instance==SPI2)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a48      	ldr	r2, [pc, #288]	; (800154c <HAL_SPI_MspInit+0x19c>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d129      	bne.n	8001484 <HAL_SPI_MspInit+0xd4>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001430:	4b44      	ldr	r3, [pc, #272]	; (8001544 <HAL_SPI_MspInit+0x194>)
 8001432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001434:	4a43      	ldr	r2, [pc, #268]	; (8001544 <HAL_SPI_MspInit+0x194>)
 8001436:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800143a:	6413      	str	r3, [r2, #64]	; 0x40
 800143c:	4b41      	ldr	r3, [pc, #260]	; (8001544 <HAL_SPI_MspInit+0x194>)
 800143e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001440:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001444:	61bb      	str	r3, [r7, #24]
 8001446:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001448:	4b3e      	ldr	r3, [pc, #248]	; (8001544 <HAL_SPI_MspInit+0x194>)
 800144a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144c:	4a3d      	ldr	r2, [pc, #244]	; (8001544 <HAL_SPI_MspInit+0x194>)
 800144e:	f043 0302 	orr.w	r3, r3, #2
 8001452:	6313      	str	r3, [r2, #48]	; 0x30
 8001454:	4b3b      	ldr	r3, [pc, #236]	; (8001544 <HAL_SPI_MspInit+0x194>)
 8001456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001458:	f003 0302 	and.w	r3, r3, #2
 800145c:	617b      	str	r3, [r7, #20]
 800145e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001460:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001464:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001466:	2302      	movs	r3, #2
 8001468:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146e:	2303      	movs	r3, #3
 8001470:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001472:	2305      	movs	r3, #5
 8001474:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001476:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800147a:	4619      	mov	r1, r3
 800147c:	4834      	ldr	r0, [pc, #208]	; (8001550 <HAL_SPI_MspInit+0x1a0>)
 800147e:	f001 fe37 	bl	80030f0 <HAL_GPIO_Init>
}
 8001482:	e058      	b.n	8001536 <HAL_SPI_MspInit+0x186>
  else if(hspi->Instance==SPI3)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a32      	ldr	r2, [pc, #200]	; (8001554 <HAL_SPI_MspInit+0x1a4>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d153      	bne.n	8001536 <HAL_SPI_MspInit+0x186>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800148e:	4b2d      	ldr	r3, [pc, #180]	; (8001544 <HAL_SPI_MspInit+0x194>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	4a2c      	ldr	r2, [pc, #176]	; (8001544 <HAL_SPI_MspInit+0x194>)
 8001494:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001498:	6413      	str	r3, [r2, #64]	; 0x40
 800149a:	4b2a      	ldr	r3, [pc, #168]	; (8001544 <HAL_SPI_MspInit+0x194>)
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014a2:	613b      	str	r3, [r7, #16]
 80014a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a6:	4b27      	ldr	r3, [pc, #156]	; (8001544 <HAL_SPI_MspInit+0x194>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	4a26      	ldr	r2, [pc, #152]	; (8001544 <HAL_SPI_MspInit+0x194>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	6313      	str	r3, [r2, #48]	; 0x30
 80014b2:	4b24      	ldr	r3, [pc, #144]	; (8001544 <HAL_SPI_MspInit+0x194>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014be:	4b21      	ldr	r3, [pc, #132]	; (8001544 <HAL_SPI_MspInit+0x194>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	4a20      	ldr	r2, [pc, #128]	; (8001544 <HAL_SPI_MspInit+0x194>)
 80014c4:	f043 0302 	orr.w	r3, r3, #2
 80014c8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ca:	4b1e      	ldr	r3, [pc, #120]	; (8001544 <HAL_SPI_MspInit+0x194>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	60bb      	str	r3, [r7, #8]
 80014d4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014d6:	2310      	movs	r3, #16
 80014d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014da:	2302      	movs	r3, #2
 80014dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e2:	2303      	movs	r3, #3
 80014e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80014e6:	2306      	movs	r3, #6
 80014e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ee:	4619      	mov	r1, r3
 80014f0:	4815      	ldr	r0, [pc, #84]	; (8001548 <HAL_SPI_MspInit+0x198>)
 80014f2:	f001 fdfd 	bl	80030f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014f6:	2304      	movs	r3, #4
 80014f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fa:	2302      	movs	r3, #2
 80014fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001502:	2303      	movs	r3, #3
 8001504:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001506:	2307      	movs	r3, #7
 8001508:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800150a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800150e:	4619      	mov	r1, r3
 8001510:	480f      	ldr	r0, [pc, #60]	; (8001550 <HAL_SPI_MspInit+0x1a0>)
 8001512:	f001 fded 	bl	80030f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001516:	2318      	movs	r3, #24
 8001518:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151a:	2302      	movs	r3, #2
 800151c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001522:	2303      	movs	r3, #3
 8001524:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001526:	2306      	movs	r3, #6
 8001528:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800152a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800152e:	4619      	mov	r1, r3
 8001530:	4807      	ldr	r0, [pc, #28]	; (8001550 <HAL_SPI_MspInit+0x1a0>)
 8001532:	f001 fddd 	bl	80030f0 <HAL_GPIO_Init>
}
 8001536:	bf00      	nop
 8001538:	3738      	adds	r7, #56	; 0x38
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40013000 	.word	0x40013000
 8001544:	40023800 	.word	0x40023800
 8001548:	40020000 	.word	0x40020000
 800154c:	40003800 	.word	0x40003800
 8001550:	40020400 	.word	0x40020400
 8001554:	40003c00 	.word	0x40003c00

08001558 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08c      	sub	sp, #48	; 0x30
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001560:	2300      	movs	r3, #0
 8001562:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001564:	2300      	movs	r3, #0
 8001566:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8001568:	2200      	movs	r2, #0
 800156a:	6879      	ldr	r1, [r7, #4]
 800156c:	2019      	movs	r0, #25
 800156e:	f001 fd95 	bl	800309c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8001572:	2019      	movs	r0, #25
 8001574:	f001 fdae 	bl	80030d4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001578:	4b1f      	ldr	r3, [pc, #124]	; (80015f8 <HAL_InitTick+0xa0>)
 800157a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157c:	4a1e      	ldr	r2, [pc, #120]	; (80015f8 <HAL_InitTick+0xa0>)
 800157e:	f043 0301 	orr.w	r3, r3, #1
 8001582:	6453      	str	r3, [r2, #68]	; 0x44
 8001584:	4b1c      	ldr	r3, [pc, #112]	; (80015f8 <HAL_InitTick+0xa0>)
 8001586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001588:	f003 0301 	and.w	r3, r3, #1
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001590:	f107 0210 	add.w	r2, r7, #16
 8001594:	f107 0314 	add.w	r3, r7, #20
 8001598:	4611      	mov	r1, r2
 800159a:	4618      	mov	r0, r3
 800159c:	f003 fd98 	bl	80050d0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80015a0:	f003 fd82 	bl	80050a8 <HAL_RCC_GetPCLK2Freq>
 80015a4:	4603      	mov	r3, r0
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80015aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ac:	4a13      	ldr	r2, [pc, #76]	; (80015fc <HAL_InitTick+0xa4>)
 80015ae:	fba2 2303 	umull	r2, r3, r2, r3
 80015b2:	0c9b      	lsrs	r3, r3, #18
 80015b4:	3b01      	subs	r3, #1
 80015b6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80015b8:	4b11      	ldr	r3, [pc, #68]	; (8001600 <HAL_InitTick+0xa8>)
 80015ba:	4a12      	ldr	r2, [pc, #72]	; (8001604 <HAL_InitTick+0xac>)
 80015bc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80015be:	4b10      	ldr	r3, [pc, #64]	; (8001600 <HAL_InitTick+0xa8>)
 80015c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015c4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80015c6:	4a0e      	ldr	r2, [pc, #56]	; (8001600 <HAL_InitTick+0xa8>)
 80015c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ca:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80015cc:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <HAL_InitTick+0xa8>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d2:	4b0b      	ldr	r3, [pc, #44]	; (8001600 <HAL_InitTick+0xa8>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80015d8:	4809      	ldr	r0, [pc, #36]	; (8001600 <HAL_InitTick+0xa8>)
 80015da:	f004 fe9f 	bl	800631c <HAL_TIM_Base_Init>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d104      	bne.n	80015ee <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80015e4:	4806      	ldr	r0, [pc, #24]	; (8001600 <HAL_InitTick+0xa8>)
 80015e6:	f004 fecf 	bl	8006388 <HAL_TIM_Base_Start_IT>
 80015ea:	4603      	mov	r3, r0
 80015ec:	e000      	b.n	80015f0 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3730      	adds	r7, #48	; 0x30
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40023800 	.word	0x40023800
 80015fc:	431bde83 	.word	0x431bde83
 8001600:	200067e4 	.word	0x200067e4
 8001604:	40010000 	.word	0x40010000

08001608 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800161a:	e7fe      	b.n	800161a <HardFault_Handler+0x4>

0800161c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001620:	e7fe      	b.n	8001620 <MemManage_Handler+0x4>

08001622 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001622:	b480      	push	{r7}
 8001624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001626:	e7fe      	b.n	8001626 <BusFault_Handler+0x4>

08001628 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800162c:	e7fe      	b.n	800162c <UsageFault_Handler+0x4>

0800162e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001640:	4802      	ldr	r0, [pc, #8]	; (800164c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001642:	f004 fecb 	bl	80063dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	200067e4 	.word	0x200067e4

08001650 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001654:	4802      	ldr	r0, [pc, #8]	; (8001660 <OTG_FS_IRQHandler+0x10>)
 8001656:	f002 f83b 	bl	80036d0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20007d38 	.word	0x20007d38

08001664 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800166c:	4b11      	ldr	r3, [pc, #68]	; (80016b4 <_sbrk+0x50>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d102      	bne.n	800167a <_sbrk+0x16>
		heap_end = &end;
 8001674:	4b0f      	ldr	r3, [pc, #60]	; (80016b4 <_sbrk+0x50>)
 8001676:	4a10      	ldr	r2, [pc, #64]	; (80016b8 <_sbrk+0x54>)
 8001678:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800167a:	4b0e      	ldr	r3, [pc, #56]	; (80016b4 <_sbrk+0x50>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001680:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <_sbrk+0x50>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	4413      	add	r3, r2
 8001688:	466a      	mov	r2, sp
 800168a:	4293      	cmp	r3, r2
 800168c:	d907      	bls.n	800169e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800168e:	f00c f875 	bl	800d77c <__errno>
 8001692:	4602      	mov	r2, r0
 8001694:	230c      	movs	r3, #12
 8001696:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001698:	f04f 33ff 	mov.w	r3, #4294967295
 800169c:	e006      	b.n	80016ac <_sbrk+0x48>
	}

	heap_end += incr;
 800169e:	4b05      	ldr	r3, [pc, #20]	; (80016b4 <_sbrk+0x50>)
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4413      	add	r3, r2
 80016a6:	4a03      	ldr	r2, [pc, #12]	; (80016b4 <_sbrk+0x50>)
 80016a8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80016aa:	68fb      	ldr	r3, [r7, #12]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3710      	adds	r7, #16
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	200002b8 	.word	0x200002b8
 80016b8:	20008140 	.word	0x20008140

080016bc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016c0:	4b15      	ldr	r3, [pc, #84]	; (8001718 <SystemInit+0x5c>)
 80016c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016c6:	4a14      	ldr	r2, [pc, #80]	; (8001718 <SystemInit+0x5c>)
 80016c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80016d0:	4b12      	ldr	r3, [pc, #72]	; (800171c <SystemInit+0x60>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a11      	ldr	r2, [pc, #68]	; (800171c <SystemInit+0x60>)
 80016d6:	f043 0301 	orr.w	r3, r3, #1
 80016da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80016dc:	4b0f      	ldr	r3, [pc, #60]	; (800171c <SystemInit+0x60>)
 80016de:	2200      	movs	r2, #0
 80016e0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80016e2:	4b0e      	ldr	r3, [pc, #56]	; (800171c <SystemInit+0x60>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	490d      	ldr	r1, [pc, #52]	; (800171c <SystemInit+0x60>)
 80016e8:	4b0d      	ldr	r3, [pc, #52]	; (8001720 <SystemInit+0x64>)
 80016ea:	4013      	ands	r3, r2
 80016ec:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80016ee:	4b0b      	ldr	r3, [pc, #44]	; (800171c <SystemInit+0x60>)
 80016f0:	4a0c      	ldr	r2, [pc, #48]	; (8001724 <SystemInit+0x68>)
 80016f2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80016f4:	4b09      	ldr	r3, [pc, #36]	; (800171c <SystemInit+0x60>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a08      	ldr	r2, [pc, #32]	; (800171c <SystemInit+0x60>)
 80016fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016fe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001700:	4b06      	ldr	r3, [pc, #24]	; (800171c <SystemInit+0x60>)
 8001702:	2200      	movs	r2, #0
 8001704:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001706:	4b04      	ldr	r3, [pc, #16]	; (8001718 <SystemInit+0x5c>)
 8001708:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800170c:	609a      	str	r2, [r3, #8]
#endif
}
 800170e:	bf00      	nop
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	e000ed00 	.word	0xe000ed00
 800171c:	40023800 	.word	0x40023800
 8001720:	fef6ffff 	.word	0xfef6ffff
 8001724:	24003010 	.word	0x24003010

08001728 <UsbPrint>:
#include <string.h>
#include <stdio.h>
#include <stdarg.h>


uint8_t UsbPrint(const char *format, ...) {
 8001728:	b40f      	push	{r0, r1, r2, r3}
 800172a:	b580      	push	{r7, lr}
 800172c:	b082      	sub	sp, #8
 800172e:	af00      	add	r7, sp, #0
	uint8_t ret = 1;
 8001730:	2301      	movs	r3, #1
 8001732:	71fb      	strb	r3, [r7, #7]
#ifdef DEBUG
	//if (osMutexAcquire(print_mutex, 0U) == osOK) {
		va_list argptr;
		va_start(argptr, format);
 8001734:	f107 0314 	add.w	r3, r7, #20
 8001738:	603b      	str	r3, [r7, #0]
		vsnprintf(print_buffer, PRINT_BUFFER_LEN, format, argptr);
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	21c8      	movs	r1, #200	; 0xc8
 8001740:	480a      	ldr	r0, [pc, #40]	; (800176c <UsbPrint+0x44>)
 8001742:	f00c f94d 	bl	800d9e0 <vsniprintf>
		va_end(argptr);
		ret = CDC_Transmit_FS((uint8_t*) print_buffer, strlen(print_buffer));
 8001746:	4809      	ldr	r0, [pc, #36]	; (800176c <UsbPrint+0x44>)
 8001748:	f7fe fd62 	bl	8000210 <strlen>
 800174c:	4603      	mov	r3, r0
 800174e:	b29b      	uxth	r3, r3
 8001750:	4619      	mov	r1, r3
 8001752:	4806      	ldr	r0, [pc, #24]	; (800176c <UsbPrint+0x44>)
 8001754:	f00b fb68 	bl	800ce28 <CDC_Transmit_FS>
 8001758:	4603      	mov	r3, r0
 800175a:	71fb      	strb	r3, [r7, #7]
		//osMutexRelease(print_mutex);
	//}
#endif
	return ret;
 800175c:	79fb      	ldrb	r3, [r7, #7]
}
 800175e:	4618      	mov	r0, r3
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001768:	b004      	add	sp, #16
 800176a:	4770      	bx	lr
 800176c:	200054f8 	.word	0x200054f8

08001770 <vTaskController>:


void CalcPolynomial(float ref_height, float *ref_vel, float gains[], float coefficients[][POLY_DEG]);


void vTaskController(void *argument) {
 8001770:	b590      	push	{r4, r7, lr}
 8001772:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 8001776:	af00      	add	r7, sp, #0
 8001778:	1d3b      	adds	r3, r7, #4
 800177a:	6018      	str	r0, [r3, #0]
	/* For periodic update */
	uint32_t tick_count, tick_update;

	/* Polynomial Coefficients for Gains and Reference Traj */
	float coeff[4][POLY_DEG] = { 0 };
 800177c:	f107 031c 	add.w	r3, r7, #28
 8001780:	4618      	mov	r0, r3
 8001782:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001786:	461a      	mov	r2, r3
 8001788:	2100      	movs	r1, #0
 800178a:	f00c f83c 	bl	800d806 <memset>

	/* State Estimation Values */
	float sf_velocity = 0;
 800178e:	f04f 0300 	mov.w	r3, #0
 8001792:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
	float sf_height = 0;
 8001796:	f04f 0300 	mov.w	r3, #0
 800179a:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c

	/* Gain Values and Trajectory Values to increase speed */
	float gains[3] = { 0 };
 800179e:	f107 0310 	add.w	r3, r7, #16
 80017a2:	461a      	mov	r2, r3
 80017a4:	2300      	movs	r3, #0
 80017a6:	6013      	str	r3, [r2, #0]
 80017a8:	6053      	str	r3, [r2, #4]
 80017aa:	6093      	str	r3, [r2, #8]
	float ref_vel = 0;
 80017ac:	f107 030c 	add.w	r3, r7, #12
 80017b0:	f04f 0200 	mov.w	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
	float vel_error = 0;
 80017b6:	f04f 0300 	mov.w	r3, #0
 80017ba:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
	float control_input = 0;
 80017be:	f04f 0300 	mov.w	r3, #0
 80017c2:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
	float integrated_error = 0;
 80017c6:	f04f 0300 	mov.w	r3, #0
 80017ca:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	float previous_control_input = 0;
 80017ce:	f04f 0300 	mov.w	r3, #0
 80017d2:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	uint32_t delta_t = 1 / CONTROLLER_SAMPLING_FREQ; 	/* That is probably very optimistic! */
 80017d6:	2301      	movs	r3, #1
 80017d8:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 80017dc:	f007 ffcc 	bl	8009778 <osKernelGetTickCount>
 80017e0:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
	tick_update = osKernelGetTickFreq() / CONTROLLER_SAMPLING_FREQ;
 80017e4:	f007 fff0 	bl	80097c8 <osKernelGetTickFreq>
 80017e8:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
	while (1) {
		/* Tick Update */
		tick_count += tick_update;
 80017ec:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 80017f0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80017f4:	4413      	add	r3, r2
 80017f6:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c

		/* Update Sensor Fusion Variables */
		/* TODO once Mutex Managment has been set up */

		/* caluclate Gains and Reference velocity for given height */
		CalcPolynomial(sf_height, &ref_vel, gains, coeff);
 80017fa:	f107 021c 	add.w	r2, r7, #28
 80017fe:	f107 0110 	add.w	r1, r7, #16
 8001802:	f107 030c 	add.w	r3, r7, #12
 8001806:	4618      	mov	r0, r3
 8001808:	ed97 0a83 	vldr	s0, [r7, #524]	; 0x20c
 800180c:	f000 f898 	bl	8001940 <CalcPolynomial>

		/* Calculate Velocity Error */
		vel_error = sf_velocity - ref_vel;
 8001810:	f107 030c 	add.w	r3, r7, #12
 8001814:	edd3 7a00 	vldr	s15, [r3]
 8001818:	ed97 7a84 	vldr	s14, [r7, #528]	; 0x210
 800181c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001820:	edc7 7a82 	vstr	s15, [r7, #520]	; 0x208

		/* Calculate Control Input */
		control_input = - gains[0] * vel_error - gains[1] * integrated_error
 8001824:	f107 0310 	add.w	r3, r7, #16
 8001828:	edd3 7a00 	vldr	s15, [r3]
 800182c:	eeb1 7a67 	vneg.f32	s14, s15
 8001830:	edd7 7a82 	vldr	s15, [r7, #520]	; 0x208
 8001834:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001838:	f107 0310 	add.w	r3, r7, #16
 800183c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001840:	edd7 7a86 	vldr	s15, [r7, #536]	; 0x218
 8001844:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001848:	ee37 7a67 	vsub.f32	s14, s14, s15
				- gains[2] * (previous_control_input - OPT_TRAJ_CONTROL_INPUT)
 800184c:	f107 0310 	add.w	r3, r7, #16
 8001850:	edd3 6a02 	vldr	s13, [r3, #8]
 8001854:	edd7 7a85 	vldr	s15, [r7, #532]	; 0x214
 8001858:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800185c:	ee77 7a67 	vsub.f32	s15, s14, s15
		control_input = - gains[0] * vel_error - gains[1] * integrated_error
 8001860:	ed97 7a85 	vldr	s14, [r7, #532]	; 0x214
 8001864:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001868:	edc7 7a81 	vstr	s15, [r7, #516]	; 0x204
				+ previous_control_input;

		control_input = fmax(0, fmin(control_input, 1));
 800186c:	f8d7 0204 	ldr.w	r0, [r7, #516]	; 0x204
 8001870:	f7fe fe8a 	bl	8000588 <__aeabi_f2d>
 8001874:	4603      	mov	r3, r0
 8001876:	460c      	mov	r4, r1
 8001878:	ed9f 1b29 	vldr	d1, [pc, #164]	; 8001920 <vTaskController+0x1b0>
 800187c:	ec44 3b10 	vmov	d0, r3, r4
 8001880:	f00c fc06 	bl	800e090 <fmin>
 8001884:	eeb0 7a40 	vmov.f32	s14, s0
 8001888:	eef0 7a60 	vmov.f32	s15, s1
 800188c:	eeb0 1a47 	vmov.f32	s2, s14
 8001890:	eef0 1a67 	vmov.f32	s3, s15
 8001894:	ed9f 0b24 	vldr	d0, [pc, #144]	; 8001928 <vTaskController+0x1b8>
 8001898:	f00c fbd3 	bl	800e042 <fmax>
 800189c:	ec54 3b10 	vmov	r3, r4, d0
 80018a0:	4618      	mov	r0, r3
 80018a2:	4621      	mov	r1, r4
 80018a4:	f7ff f998 	bl	8000bd8 <__aeabi_d2f>
 80018a8:	4603      	mov	r3, r0
 80018aa:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204

		/* Send Control Output to motor control Task */
		/* TODO */

		/* Update Integrated Error */
		integrated_error = fmax(-10, fmin(integrated_error + delta_t*vel_error, 10));
 80018ae:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80018b2:	ee07 3a90 	vmov	s15, r3
 80018b6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018ba:	edd7 7a82 	vldr	s15, [r7, #520]	; 0x208
 80018be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018c2:	edd7 7a86 	vldr	s15, [r7, #536]	; 0x218
 80018c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018ca:	ee17 0a90 	vmov	r0, s15
 80018ce:	f7fe fe5b 	bl	8000588 <__aeabi_f2d>
 80018d2:	4603      	mov	r3, r0
 80018d4:	460c      	mov	r4, r1
 80018d6:	ed9f 1b16 	vldr	d1, [pc, #88]	; 8001930 <vTaskController+0x1c0>
 80018da:	ec44 3b10 	vmov	d0, r3, r4
 80018de:	f00c fbd7 	bl	800e090 <fmin>
 80018e2:	eeb0 7a40 	vmov.f32	s14, s0
 80018e6:	eef0 7a60 	vmov.f32	s15, s1
 80018ea:	eeb0 1a47 	vmov.f32	s2, s14
 80018ee:	eef0 1a67 	vmov.f32	s3, s15
 80018f2:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8001938 <vTaskController+0x1c8>
 80018f6:	f00c fba4 	bl	800e042 <fmax>
 80018fa:	ec54 3b10 	vmov	r3, r4, d0
 80018fe:	4618      	mov	r0, r3
 8001900:	4621      	mov	r1, r4
 8001902:	f7ff f969 	bl	8000bd8 <__aeabi_d2f>
 8001906:	4603      	mov	r3, r0
 8001908:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218

		/* Update Previous Control Input */
		previous_control_input = control_input;
 800190c:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8001910:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
		/* Sleep */
		osDelayUntil(tick_count);
 8001914:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 8001918:	f008 f834 	bl	8009984 <osDelayUntil>
		tick_count += tick_update;
 800191c:	e766      	b.n	80017ec <vTaskController+0x7c>
 800191e:	bf00      	nop
 8001920:	00000000 	.word	0x00000000
 8001924:	3ff00000 	.word	0x3ff00000
	...
 8001934:	40240000 	.word	0x40240000
 8001938:	00000000 	.word	0x00000000
 800193c:	c0240000 	.word	0xc0240000

08001940 <CalcPolynomial>:
	}
}


/* Does the Polynomial Calculation of the reference velocity */
void CalcPolynomial(float ref_height, float *ref_vel, float gains[], float coefficients[][POLY_DEG]){
 8001940:	b5b0      	push	{r4, r5, r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af00      	add	r7, sp, #0
 8001946:	ed87 0a03 	vstr	s0, [r7, #12]
 800194a:	60b8      	str	r0, [r7, #8]
 800194c:	6079      	str	r1, [r7, #4]
 800194e:	603a      	str	r2, [r7, #0]
	/* For Speed */
	uint32_t x_placeholder = 0;
 8001950:	2300      	movs	r3, #0
 8001952:	613b      	str	r3, [r7, #16]

	/* For loop */
	for(int i = 0; i < POLY_DEG; ++i){
 8001954:	2300      	movs	r3, #0
 8001956:	617b      	str	r3, [r7, #20]
 8001958:	e07b      	b.n	8001a52 <CalcPolynomial+0x112>
		x_placeholder = pow(ref_height, (POLY_DEG - 1 - i));
 800195a:	68f8      	ldr	r0, [r7, #12]
 800195c:	f7fe fe14 	bl	8000588 <__aeabi_f2d>
 8001960:	4604      	mov	r4, r0
 8001962:	460d      	mov	r5, r1
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	f1c3 031d 	rsb	r3, r3, #29
 800196a:	4618      	mov	r0, r3
 800196c:	f7fe fdfa 	bl	8000564 <__aeabi_i2d>
 8001970:	4602      	mov	r2, r0
 8001972:	460b      	mov	r3, r1
 8001974:	ec43 2b11 	vmov	d1, r2, r3
 8001978:	ec45 4b10 	vmov	d0, r4, r5
 800197c:	f00c fbdc 	bl	800e138 <pow>
 8001980:	ec54 3b10 	vmov	r3, r4, d0
 8001984:	4618      	mov	r0, r3
 8001986:	4621      	mov	r1, r4
 8001988:	f7ff f906 	bl	8000b98 <__aeabi_d2uiz>
 800198c:	4603      	mov	r3, r0
 800198e:	613b      	str	r3, [r7, #16]
		gains[0] += coefficients[0][i] * x_placeholder;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	ed93 7a00 	vldr	s14, [r3]
 8001996:	683a      	ldr	r2, [r7, #0]
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	4413      	add	r3, r2
 800199e:	edd3 6a00 	vldr	s13, [r3]
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	ee07 3a90 	vmov	s15, r3
 80019a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	edc3 7a00 	vstr	s15, [r3]
		gains[1] += coefficients[1][i] * x_placeholder;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	3304      	adds	r3, #4
 80019be:	ed93 7a00 	vldr	s14, [r3]
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	f103 0278 	add.w	r2, r3, #120	; 0x78
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	4413      	add	r3, r2
 80019ce:	edd3 6a00 	vldr	s13, [r3]
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	ee07 3a90 	vmov	s15, r3
 80019d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	3304      	adds	r3, #4
 80019e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019e8:	edc3 7a00 	vstr	s15, [r3]
		gains[2] += coefficients[2][i] * x_placeholder;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	3308      	adds	r3, #8
 80019f0:	ed93 7a00 	vldr	s14, [r3]
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	4413      	add	r3, r2
 8001a00:	edd3 6a00 	vldr	s13, [r3]
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	ee07 3a90 	vmov	s15, r3
 8001a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	3308      	adds	r3, #8
 8001a16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a1a:	edc3 7a00 	vstr	s15, [r3]
		*ref_vel += coefficients[3][i] * x_placeholder;
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	ed93 7a00 	vldr	s14, [r3]
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	f503 72b4 	add.w	r2, r3, #360	; 0x168
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	4413      	add	r3, r2
 8001a30:	edd3 6a00 	vldr	s13, [r3]
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	ee07 3a90 	vmov	s15, r3
 8001a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < POLY_DEG; ++i){
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	617b      	str	r3, [r7, #20]
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	2b1d      	cmp	r3, #29
 8001a56:	dd80      	ble.n	800195a <CalcPolynomial+0x1a>
	}

}
 8001a58:	bf00      	nop
 8001a5a:	3718      	adds	r7, #24
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bdb0      	pop	{r4, r5, r7, pc}

08001a60 <vTaskSensRead>:
 *      Author: Jonas
 */

#include "tasks/task_sens_read.h"

void vTaskSensRead(void *argument) {
 8001a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a62:	b089      	sub	sp, #36	; 0x24
 8001a64:	af04      	add	r7, sp, #16
 8001a66:	6078      	str	r0, [r7, #4]

	/* For periodic update */
	uint32_t tick_count, tick_update;

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8001a68:	f007 fe86 	bl	8009778 <osKernelGetTickCount>
 8001a6c:	60f8      	str	r0, [r7, #12]
	tick_update = osKernelGetTickFreq() / SENSOR_READ_FREQUENCY;
 8001a6e:	f007 feab 	bl	80097c8 <osKernelGetTickFreq>
 8001a72:	4602      	mov	r2, r0
 8001a74:	4b67      	ldr	r3, [pc, #412]	; (8001c14 <vTaskSensRead+0x1b4>)
 8001a76:	fba3 2302 	umull	r2, r3, r3, r2
 8001a7a:	095b      	lsrs	r3, r3, #5
 8001a7c:	60bb      	str	r3, [r7, #8]
	HAL_SPI_Receive_IT(&hspi3, (uint8_t*) &sb3_data, sizeof(sb3_data));
 8001a7e:	2228      	movs	r2, #40	; 0x28
 8001a80:	4965      	ldr	r1, [pc, #404]	; (8001c18 <vTaskSensRead+0x1b8>)
 8001a82:	4866      	ldr	r0, [pc, #408]	; (8001c1c <vTaskSensRead+0x1bc>)
 8001a84:	f003 ff9e 	bl	80059c4 <HAL_SPI_Receive_IT>
//	uint8_t baro_buffer[12] = { 0 };
	for (;;) {
		tick_count += tick_update;
 8001a88:	68fa      	ldr	r2, [r7, #12]
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	60fb      	str	r3, [r7, #12]

		if(osMutexAcquire(sb_3_mutexHandle, SB_MUTEX_TIMEOUT) == osOK) {
 8001a90:	4b63      	ldr	r3, [pc, #396]	; (8001c20 <vTaskSensRead+0x1c0>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	211e      	movs	r1, #30
 8001a96:	4618      	mov	r0, r3
 8001a98:	f008 f84e 	bl	8009b38 <osMutexAcquire>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d12a      	bne.n	8001af8 <vTaskSensRead+0x98>
			sb3_baro.pressure = sb3_data.pressure;
 8001aa2:	4b5d      	ldr	r3, [pc, #372]	; (8001c18 <vTaskSensRead+0x1b8>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a5f      	ldr	r2, [pc, #380]	; (8001c24 <vTaskSensRead+0x1c4>)
 8001aa8:	6013      	str	r3, [r2, #0]
			sb3_baro.temperature = sb3_data.temperature;
 8001aaa:	4b5b      	ldr	r3, [pc, #364]	; (8001c18 <vTaskSensRead+0x1b8>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	4a5d      	ldr	r2, [pc, #372]	; (8001c24 <vTaskSensRead+0x1c4>)
 8001ab0:	6053      	str	r3, [r2, #4]
			sb3_baro.timestamp = tick_count;
 8001ab2:	4a5c      	ldr	r2, [pc, #368]	; (8001c24 <vTaskSensRead+0x1c4>)
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	6093      	str	r3, [r2, #8]
			sb3_imu.acc_x = sb3_data.acc_x;
 8001ab8:	4b57      	ldr	r3, [pc, #348]	; (8001c18 <vTaskSensRead+0x1b8>)
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	4a5a      	ldr	r2, [pc, #360]	; (8001c28 <vTaskSensRead+0x1c8>)
 8001abe:	60d3      	str	r3, [r2, #12]
			sb3_imu.acc_y = sb3_data.acc_y;
 8001ac0:	4b55      	ldr	r3, [pc, #340]	; (8001c18 <vTaskSensRead+0x1b8>)
 8001ac2:	69db      	ldr	r3, [r3, #28]
 8001ac4:	4a58      	ldr	r2, [pc, #352]	; (8001c28 <vTaskSensRead+0x1c8>)
 8001ac6:	6113      	str	r3, [r2, #16]
			sb3_imu.acc_z = sb3_data.acc_z;
 8001ac8:	4b53      	ldr	r3, [pc, #332]	; (8001c18 <vTaskSensRead+0x1b8>)
 8001aca:	6a1b      	ldr	r3, [r3, #32]
 8001acc:	4a56      	ldr	r2, [pc, #344]	; (8001c28 <vTaskSensRead+0x1c8>)
 8001ace:	6153      	str	r3, [r2, #20]
			sb3_imu.gyro_x = sb3_data.gyro_x;
 8001ad0:	4b51      	ldr	r3, [pc, #324]	; (8001c18 <vTaskSensRead+0x1b8>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	4a54      	ldr	r2, [pc, #336]	; (8001c28 <vTaskSensRead+0x1c8>)
 8001ad6:	6013      	str	r3, [r2, #0]
			sb3_imu.gyro_y = sb3_data.gyro_y;
 8001ad8:	4b4f      	ldr	r3, [pc, #316]	; (8001c18 <vTaskSensRead+0x1b8>)
 8001ada:	691b      	ldr	r3, [r3, #16]
 8001adc:	4a52      	ldr	r2, [pc, #328]	; (8001c28 <vTaskSensRead+0x1c8>)
 8001ade:	6053      	str	r3, [r2, #4]
			sb3_imu.gyro_z = sb3_data.gyro_z;
 8001ae0:	4b4d      	ldr	r3, [pc, #308]	; (8001c18 <vTaskSensRead+0x1b8>)
 8001ae2:	695b      	ldr	r3, [r3, #20]
 8001ae4:	4a50      	ldr	r2, [pc, #320]	; (8001c28 <vTaskSensRead+0x1c8>)
 8001ae6:	6093      	str	r3, [r2, #8]
			sb3_imu.timestamp = tick_count;
 8001ae8:	4a4f      	ldr	r2, [pc, #316]	; (8001c28 <vTaskSensRead+0x1c8>)
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	6193      	str	r3, [r2, #24]
			osMutexRelease(sb_3_mutexHandle);
 8001aee:	4b4c      	ldr	r3, [pc, #304]	; (8001c20 <vTaskSensRead+0x1c0>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f008 f87e 	bl	8009bf4 <osMutexRelease>
		}

		if(osMutexAcquire(sb_2_mutexHandle, SB_MUTEX_TIMEOUT) == osOK) {
 8001af8:	4b4c      	ldr	r3, [pc, #304]	; (8001c2c <vTaskSensRead+0x1cc>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	211e      	movs	r1, #30
 8001afe:	4618      	mov	r0, r3
 8001b00:	f008 f81a 	bl	8009b38 <osMutexAcquire>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d12a      	bne.n	8001b60 <vTaskSensRead+0x100>
			sb2_baro.pressure = sb3_data.pressure;
 8001b0a:	4b43      	ldr	r3, [pc, #268]	; (8001c18 <vTaskSensRead+0x1b8>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a48      	ldr	r2, [pc, #288]	; (8001c30 <vTaskSensRead+0x1d0>)
 8001b10:	6013      	str	r3, [r2, #0]
			sb2_baro.temperature = sb3_data.temperature;
 8001b12:	4b41      	ldr	r3, [pc, #260]	; (8001c18 <vTaskSensRead+0x1b8>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	4a46      	ldr	r2, [pc, #280]	; (8001c30 <vTaskSensRead+0x1d0>)
 8001b18:	6053      	str	r3, [r2, #4]
			sb2_baro.timestamp = tick_count;
 8001b1a:	4a45      	ldr	r2, [pc, #276]	; (8001c30 <vTaskSensRead+0x1d0>)
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	6093      	str	r3, [r2, #8]
			sb2_imu.acc_x = sb3_data.acc_x;
 8001b20:	4b3d      	ldr	r3, [pc, #244]	; (8001c18 <vTaskSensRead+0x1b8>)
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	4a43      	ldr	r2, [pc, #268]	; (8001c34 <vTaskSensRead+0x1d4>)
 8001b26:	60d3      	str	r3, [r2, #12]
			sb2_imu.acc_y = sb3_data.acc_y;
 8001b28:	4b3b      	ldr	r3, [pc, #236]	; (8001c18 <vTaskSensRead+0x1b8>)
 8001b2a:	69db      	ldr	r3, [r3, #28]
 8001b2c:	4a41      	ldr	r2, [pc, #260]	; (8001c34 <vTaskSensRead+0x1d4>)
 8001b2e:	6113      	str	r3, [r2, #16]
			sb2_imu.acc_z = sb3_data.acc_z;
 8001b30:	4b39      	ldr	r3, [pc, #228]	; (8001c18 <vTaskSensRead+0x1b8>)
 8001b32:	6a1b      	ldr	r3, [r3, #32]
 8001b34:	4a3f      	ldr	r2, [pc, #252]	; (8001c34 <vTaskSensRead+0x1d4>)
 8001b36:	6153      	str	r3, [r2, #20]
			sb2_imu.gyro_x = sb3_data.gyro_x;
 8001b38:	4b37      	ldr	r3, [pc, #220]	; (8001c18 <vTaskSensRead+0x1b8>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	4a3d      	ldr	r2, [pc, #244]	; (8001c34 <vTaskSensRead+0x1d4>)
 8001b3e:	6013      	str	r3, [r2, #0]
			sb2_imu.gyro_y = sb3_data.gyro_y;
 8001b40:	4b35      	ldr	r3, [pc, #212]	; (8001c18 <vTaskSensRead+0x1b8>)
 8001b42:	691b      	ldr	r3, [r3, #16]
 8001b44:	4a3b      	ldr	r2, [pc, #236]	; (8001c34 <vTaskSensRead+0x1d4>)
 8001b46:	6053      	str	r3, [r2, #4]
			sb2_imu.gyro_z = sb3_data.gyro_z;
 8001b48:	4b33      	ldr	r3, [pc, #204]	; (8001c18 <vTaskSensRead+0x1b8>)
 8001b4a:	695b      	ldr	r3, [r3, #20]
 8001b4c:	4a39      	ldr	r2, [pc, #228]	; (8001c34 <vTaskSensRead+0x1d4>)
 8001b4e:	6093      	str	r3, [r2, #8]
			sb2_imu.timestamp = tick_count;
 8001b50:	4a38      	ldr	r2, [pc, #224]	; (8001c34 <vTaskSensRead+0x1d4>)
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	6193      	str	r3, [r2, #24]
			osMutexRelease(sb_2_mutexHandle);
 8001b56:	4b35      	ldr	r3, [pc, #212]	; (8001c2c <vTaskSensRead+0x1cc>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f008 f84a 	bl	8009bf4 <osMutexRelease>
		}

		if(osMutexAcquire(sb_1_mutexHandle, SB_MUTEX_TIMEOUT) == osOK) {
 8001b60:	4b35      	ldr	r3, [pc, #212]	; (8001c38 <vTaskSensRead+0x1d8>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	211e      	movs	r1, #30
 8001b66:	4618      	mov	r0, r3
 8001b68:	f007 ffe6 	bl	8009b38 <osMutexAcquire>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d12a      	bne.n	8001bc8 <vTaskSensRead+0x168>
			sb1_baro.pressure = sb3_data.pressure;
 8001b72:	4b29      	ldr	r3, [pc, #164]	; (8001c18 <vTaskSensRead+0x1b8>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a31      	ldr	r2, [pc, #196]	; (8001c3c <vTaskSensRead+0x1dc>)
 8001b78:	6013      	str	r3, [r2, #0]
			sb1_baro.temperature = sb3_data.temperature;
 8001b7a:	4b27      	ldr	r3, [pc, #156]	; (8001c18 <vTaskSensRead+0x1b8>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	4a2f      	ldr	r2, [pc, #188]	; (8001c3c <vTaskSensRead+0x1dc>)
 8001b80:	6053      	str	r3, [r2, #4]
			sb1_baro.timestamp = tick_count;
 8001b82:	4a2e      	ldr	r2, [pc, #184]	; (8001c3c <vTaskSensRead+0x1dc>)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	6093      	str	r3, [r2, #8]
			sb1_imu.acc_x = sb3_data.acc_x;
 8001b88:	4b23      	ldr	r3, [pc, #140]	; (8001c18 <vTaskSensRead+0x1b8>)
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	4a2c      	ldr	r2, [pc, #176]	; (8001c40 <vTaskSensRead+0x1e0>)
 8001b8e:	60d3      	str	r3, [r2, #12]
			sb1_imu.acc_y = sb3_data.acc_y;
 8001b90:	4b21      	ldr	r3, [pc, #132]	; (8001c18 <vTaskSensRead+0x1b8>)
 8001b92:	69db      	ldr	r3, [r3, #28]
 8001b94:	4a2a      	ldr	r2, [pc, #168]	; (8001c40 <vTaskSensRead+0x1e0>)
 8001b96:	6113      	str	r3, [r2, #16]
			sb1_imu.acc_z = sb3_data.acc_z;
 8001b98:	4b1f      	ldr	r3, [pc, #124]	; (8001c18 <vTaskSensRead+0x1b8>)
 8001b9a:	6a1b      	ldr	r3, [r3, #32]
 8001b9c:	4a28      	ldr	r2, [pc, #160]	; (8001c40 <vTaskSensRead+0x1e0>)
 8001b9e:	6153      	str	r3, [r2, #20]
			sb1_imu.gyro_x = sb3_data.gyro_x;
 8001ba0:	4b1d      	ldr	r3, [pc, #116]	; (8001c18 <vTaskSensRead+0x1b8>)
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	4a26      	ldr	r2, [pc, #152]	; (8001c40 <vTaskSensRead+0x1e0>)
 8001ba6:	6013      	str	r3, [r2, #0]
			sb1_imu.gyro_y = sb3_data.gyro_y;
 8001ba8:	4b1b      	ldr	r3, [pc, #108]	; (8001c18 <vTaskSensRead+0x1b8>)
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	4a24      	ldr	r2, [pc, #144]	; (8001c40 <vTaskSensRead+0x1e0>)
 8001bae:	6053      	str	r3, [r2, #4]
			sb1_imu.gyro_z = sb3_data.gyro_z;
 8001bb0:	4b19      	ldr	r3, [pc, #100]	; (8001c18 <vTaskSensRead+0x1b8>)
 8001bb2:	695b      	ldr	r3, [r3, #20]
 8001bb4:	4a22      	ldr	r2, [pc, #136]	; (8001c40 <vTaskSensRead+0x1e0>)
 8001bb6:	6093      	str	r3, [r2, #8]
			sb1_imu.timestamp = tick_count;
 8001bb8:	4a21      	ldr	r2, [pc, #132]	; (8001c40 <vTaskSensRead+0x1e0>)
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6193      	str	r3, [r2, #24]
			osMutexRelease(sb_1_mutexHandle);
 8001bbe:	4b1e      	ldr	r3, [pc, #120]	; (8001c38 <vTaskSensRead+0x1d8>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f008 f816 	bl	8009bf4 <osMutexRelease>
		}

		UsbPrint("[DBG] P: %ld; T: %ld; t: %lu\n", sb3_baro.pressure,
 8001bc8:	4b16      	ldr	r3, [pc, #88]	; (8001c24 <vTaskSensRead+0x1c4>)
 8001bca:	6819      	ldr	r1, [r3, #0]
 8001bcc:	4b15      	ldr	r3, [pc, #84]	; (8001c24 <vTaskSensRead+0x1c4>)
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	4b14      	ldr	r3, [pc, #80]	; (8001c24 <vTaskSensRead+0x1c4>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	481b      	ldr	r0, [pc, #108]	; (8001c44 <vTaskSensRead+0x1e4>)
 8001bd6:	f7ff fda7 	bl	8001728 <UsbPrint>
				sb3_baro.temperature, sb3_baro.timestamp);

		UsbPrint(
 8001bda:	4b13      	ldr	r3, [pc, #76]	; (8001c28 <vTaskSensRead+0x1c8>)
 8001bdc:	681c      	ldr	r4, [r3, #0]
 8001bde:	4b12      	ldr	r3, [pc, #72]	; (8001c28 <vTaskSensRead+0x1c8>)
 8001be0:	685d      	ldr	r5, [r3, #4]
 8001be2:	4b11      	ldr	r3, [pc, #68]	; (8001c28 <vTaskSensRead+0x1c8>)
 8001be4:	689e      	ldr	r6, [r3, #8]
 8001be6:	4b10      	ldr	r3, [pc, #64]	; (8001c28 <vTaskSensRead+0x1c8>)
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	4a0f      	ldr	r2, [pc, #60]	; (8001c28 <vTaskSensRead+0x1c8>)
 8001bec:	6912      	ldr	r2, [r2, #16]
 8001bee:	490e      	ldr	r1, [pc, #56]	; (8001c28 <vTaskSensRead+0x1c8>)
 8001bf0:	6949      	ldr	r1, [r1, #20]
 8001bf2:	480d      	ldr	r0, [pc, #52]	; (8001c28 <vTaskSensRead+0x1c8>)
 8001bf4:	6980      	ldr	r0, [r0, #24]
 8001bf6:	9003      	str	r0, [sp, #12]
 8001bf8:	9102      	str	r1, [sp, #8]
 8001bfa:	9201      	str	r2, [sp, #4]
 8001bfc:	9300      	str	r3, [sp, #0]
 8001bfe:	4633      	mov	r3, r6
 8001c00:	462a      	mov	r2, r5
 8001c02:	4621      	mov	r1, r4
 8001c04:	4810      	ldr	r0, [pc, #64]	; (8001c48 <vTaskSensRead+0x1e8>)
 8001c06:	f7ff fd8f 	bl	8001728 <UsbPrint>
				sb3_imu.acc_z, sb3_imu.timestamp);




		osDelayUntil(tick_count);
 8001c0a:	68f8      	ldr	r0, [r7, #12]
 8001c0c:	f007 feba 	bl	8009984 <osDelayUntil>
		tick_count += tick_update;
 8001c10:	e73a      	b.n	8001a88 <vTaskSensRead+0x28>
 8001c12:	bf00      	nop
 8001c14:	51eb851f 	.word	0x51eb851f
 8001c18:	20000290 	.word	0x20000290
 8001c1c:	20005494 	.word	0x20005494
 8001c20:	20004bd4 	.word	0x20004bd4
 8001c24:	20000268 	.word	0x20000268
 8001c28:	20000274 	.word	0x20000274
 8001c2c:	20004bd0 	.word	0x20004bd0
 8001c30:	20000240 	.word	0x20000240
 8001c34:	2000024c 	.word	0x2000024c
 8001c38:	200067dc 	.word	0x200067dc
 8001c3c:	20000218 	.word	0x20000218
 8001c40:	20000224 	.word	0x20000224
 8001c44:	0800f260 	.word	0x0800f260
 8001c48:	0800f280 	.word	0x0800f280

08001c4c <HAL_SPI_RxCpltCallback>:
	}
}

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi){
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
	HAL_SPI_Receive_IT(&hspi3, (uint8_t*) &sb3_data, sizeof(sb3_data));
 8001c54:	2228      	movs	r2, #40	; 0x28
 8001c56:	4904      	ldr	r1, [pc, #16]	; (8001c68 <HAL_SPI_RxCpltCallback+0x1c>)
 8001c58:	4804      	ldr	r0, [pc, #16]	; (8001c6c <HAL_SPI_RxCpltCallback+0x20>)
 8001c5a:	f003 feb3 	bl	80059c4 <HAL_SPI_Receive_IT>

}
 8001c5e:	bf00      	nop
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	20000290 	.word	0x20000290
 8001c6c:	20005494 	.word	0x20005494

08001c70 <vTaskStateEst>:
float determinant(float a[NUMBER_SENSOR][NUMBER_SENSOR], float size);
void cofactor(float num[NUMBER_SENSOR][NUMBER_SENSOR], float inverse[NUMBER_SENSOR][NUMBER_SENSOR], float size);
void transpose(float inverse[NUMBER_SENSOR][NUMBER_SENSOR], float num[NUMBER_SENSOR][NUMBER_SENSOR], float fac[NUMBER_SENSOR][NUMBER_SENSOR], float size);
void pinv(float lambda, float Matrix[NUMBER_SENSOR][NUMBER_SENSOR], float Inverse[NUMBER_SENSOR][NUMBER_SENSOR]);

void vTaskStateEst(void *argument) {
 8001c70:	b580      	push	{r7, lr}
 8001c72:	f5ad 7d36 	sub.w	sp, sp, #728	; 0x2d8
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	1d3b      	adds	r3, r7, #4
 8001c7a:	6018      	str	r0, [r3, #0]
	uint32_t tick_count, tick_update;

	/* Variables */

	/* Fixed Variables */
	float Ad[NUMBER_STATES][NUMBER_STATES] = { 0 };
 8001c7c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8001c80:	2224      	movs	r2, #36	; 0x24
 8001c82:	2100      	movs	r1, #0
 8001c84:	4618      	mov	r0, r3
 8001c86:	f00b fdbe 	bl	800d806 <memset>
	float Ad_T[NUMBER_STATES][NUMBER_STATES] = { 0 };
 8001c8a:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8001c8e:	2224      	movs	r2, #36	; 0x24
 8001c90:	2100      	movs	r1, #0
 8001c92:	4618      	mov	r0, r3
 8001c94:	f00b fdb7 	bl	800d806 <memset>
	float Bd[NUMBER_STATES][NUMBER_INPUTS] = { 0 };
 8001c98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	605a      	str	r2, [r3, #4]
 8001ca2:	609a      	str	r2, [r3, #8]
	float Gd[NUMBER_STATES][NUMBER_NOISE] = { 0 };
 8001ca4:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	605a      	str	r2, [r3, #4]
 8001cae:	609a      	str	r2, [r3, #8]
	float Gd_T[NUMBER_NOISE][NUMBER_STATES] = { 0 };
 8001cb0:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	609a      	str	r2, [r3, #8]
	float H[NUMBER_SENSOR][NUMBER_STATES] = { 0 };
 8001cbc:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	2324      	movs	r3, #36	; 0x24
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	f00b fd9d 	bl	800d806 <memset>
	float H_T[NUMBER_STATES][NUMBER_SENSOR] = { 0 };
 8001ccc:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	2324      	movs	r3, #36	; 0x24
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	f00b fd95 	bl	800d806 <memset>
	float Q[NUMBER_NOISE][NUMBER_NOISE] = { 0 };
 8001cdc:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8001ce0:	f04f 0200 	mov.w	r2, #0
 8001ce4:	601a      	str	r2, [r3, #0]
	float R[NUMBER_SENSOR][NUMBER_SENSOR] = { 0 };
 8001ce6:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8001cea:	4618      	mov	r0, r3
 8001cec:	2324      	movs	r3, #36	; 0x24
 8001cee:	461a      	mov	r2, r3
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	f00b fd88 	bl	800d806 <memset>
	float u[NUMBER_INPUTS] = { 0 };
 8001cf6:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8001cfa:	f04f 0200 	mov.w	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]

	/* State Variables */
	float x_priori[NUMBER_STATES] = { 0 };
 8001d00:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001d04:	461a      	mov	r2, r3
 8001d06:	2300      	movs	r3, #0
 8001d08:	6013      	str	r3, [r2, #0]
 8001d0a:	6053      	str	r3, [r2, #4]
 8001d0c:	6093      	str	r3, [r2, #8]
	float x_est[NUMBER_STATES] = { 0 };
 8001d0e:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8001d12:	461a      	mov	r2, r3
 8001d14:	2300      	movs	r3, #0
 8001d16:	6013      	str	r3, [r2, #0]
 8001d18:	6053      	str	r3, [r2, #4]
 8001d1a:	6093      	str	r3, [r2, #8]
	float P_priori[NUMBER_STATES][NUMBER_STATES] = { 0 };
 8001d1c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001d20:	4618      	mov	r0, r3
 8001d22:	2324      	movs	r3, #36	; 0x24
 8001d24:	461a      	mov	r2, r3
 8001d26:	2100      	movs	r1, #0
 8001d28:	f00b fd6d 	bl	800d806 <memset>
	float P_est[NUMBER_STATES][NUMBER_STATES] = { 0 };
 8001d2c:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001d30:	4618      	mov	r0, r3
 8001d32:	2324      	movs	r3, #36	; 0x24
 8001d34:	461a      	mov	r2, r3
 8001d36:	2100      	movs	r1, #0
 8001d38:	f00b fd65 	bl	800d806 <memset>
	float State_Inovation[NUMBER_SENSOR] = { 0 };
 8001d3c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001d40:	461a      	mov	r2, r3
 8001d42:	2300      	movs	r3, #0
 8001d44:	6013      	str	r3, [r2, #0]
 8001d46:	6053      	str	r3, [r2, #4]
 8001d48:	6093      	str	r3, [r2, #8]
	float Cov_Inovation[NUMBER_SENSOR][NUMBER_SENSOR] = { 0 };
 8001d4a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001d4e:	4618      	mov	r0, r3
 8001d50:	2324      	movs	r3, #36	; 0x24
 8001d52:	461a      	mov	r2, r3
 8001d54:	2100      	movs	r1, #0
 8001d56:	f00b fd56 	bl	800d806 <memset>
	float Cov_Inovation_Inv[NUMBER_SENSOR][NUMBER_SENSOR] = { 0 };
 8001d5a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001d5e:	4618      	mov	r0, r3
 8001d60:	2324      	movs	r3, #36	; 0x24
 8001d62:	461a      	mov	r2, r3
 8001d64:	2100      	movs	r1, #0
 8001d66:	f00b fd4e 	bl	800d806 <memset>
	float K[NUMBER_STATES][NUMBER_SENSOR] = { 0 };
 8001d6a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001d6e:	4618      	mov	r0, r3
 8001d70:	2324      	movs	r3, #36	; 0x24
 8001d72:	461a      	mov	r2, r3
 8001d74:	2100      	movs	r1, #0
 8001d76:	f00b fd46 	bl	800d806 <memset>
	float measurements[NUMBER_SENSOR] = { 0 };
 8001d7a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001d7e:	461a      	mov	r2, r3
 8001d80:	2300      	movs	r3, #0
 8001d82:	6013      	str	r3, [r2, #0]
 8001d84:	6053      	str	r3, [r2, #4]
 8001d86:	6093      	str	r3, [r2, #8]

	/* Placeholder Variables */
	float Placeholder_priori[NUMBER_STATES][NUMBER_STATES] = { 0 };
 8001d88:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	2324      	movs	r3, #36	; 0x24
 8001d90:	461a      	mov	r2, r3
 8001d92:	2100      	movs	r1, #0
 8001d94:	f00b fd37 	bl	800d806 <memset>
	float Placeholder_est[NUMBER_SENSOR][NUMBER_SENSOR] = { 0 };
 8001d98:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	2324      	movs	r3, #36	; 0x24
 8001da0:	461a      	mov	r2, r3
 8001da2:	2100      	movs	r1, #0
 8001da4:	f00b fd2f 	bl	800d806 <memset>
	float Placeholder_K[NUMBER_STATES][NUMBER_SENSOR] = { 0 };
 8001da8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dac:	4618      	mov	r0, r3
 8001dae:	2324      	movs	r3, #36	; 0x24
 8001db0:	461a      	mov	r2, r3
 8001db2:	2100      	movs	r1, #0
 8001db4:	f00b fd27 	bl	800d806 <memset>
	float Placeholder_P_est[NUMBER_STATES][NUMBER_STATES] = { 0 };
 8001db8:	f107 0308 	add.w	r3, r7, #8
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	2324      	movs	r3, #36	; 0x24
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	f00b fd1f 	bl	800d806 <memset>

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8001dc8:	f007 fcd6 	bl	8009778 <osKernelGetTickCount>
 8001dcc:	f8c7 02d4 	str.w	r0, [r7, #724]	; 0x2d4
	tick_update = osKernelGetTickFreq() / STATE_ESTIMATION_FREQUENCY;
 8001dd0:	f007 fcfa 	bl	80097c8 <osKernelGetTickFreq>
 8001dd4:	f8c7 025c 	str.w	r0, [r7, #604]	; 0x25c
	for (;;) {
		tick_count += tick_update;
 8001dd8:	f8d7 22d4 	ldr.w	r2, [r7, #724]	; 0x2d4
 8001ddc:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8001de0:	4413      	add	r3, r2
 8001de2:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4

		/* Prediction Step */
		/* Calculation of x_priori */
		memset(x_priori, 0, NUMBER_STATES*sizeof(x_priori[0]));
 8001de6:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001dea:	220c      	movs	r2, #12
 8001dec:	2100      	movs	r1, #0
 8001dee:	4618      	mov	r0, r3
 8001df0:	f00b fd09 	bl	800d806 <memset>
		for(int j = 0; j < NUMBER_STATES; j++){
 8001df4:	2300      	movs	r3, #0
 8001df6:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
 8001dfa:	e071      	b.n	8001ee0 <vTaskStateEst+0x270>
			for(int i = 0; i < NUMBER_STATES; i++){
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
 8001e02:	e02f      	b.n	8001e64 <vTaskStateEst+0x1f4>
				x_priori[j] += Ad[j][i] * x_est[i];
 8001e04:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8001e08:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	4413      	add	r3, r2
 8001e10:	ed93 7a00 	vldr	s14, [r3]
 8001e14:	f8d7 22d0 	ldr.w	r2, [r7, #720]	; 0x2d0
 8001e18:	4613      	mov	r3, r2
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	4413      	add	r3, r2
 8001e1e:	f8d7 22cc 	ldr.w	r2, [r7, #716]	; 0x2cc
 8001e22:	4413      	add	r3, r2
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8001e2a:	4413      	add	r3, r2
 8001e2c:	3ba0      	subs	r3, #160	; 0xa0
 8001e2e:	edd3 6a00 	vldr	s13, [r3]
 8001e32:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8001e36:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	4413      	add	r3, r2
 8001e3e:	edd3 7a00 	vldr	s15, [r3]
 8001e42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e4a:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8001e4e:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	4413      	add	r3, r2
 8001e56:	edc3 7a00 	vstr	s15, [r3]
			for(int i = 0; i < NUMBER_STATES; i++){
 8001e5a:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 8001e5e:	3301      	adds	r3, #1
 8001e60:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
 8001e64:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	ddcb      	ble.n	8001e04 <vTaskStateEst+0x194>
			}
			for(int k = 0; k < NUMBER_INPUTS; k++){
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
 8001e72:	e02c      	b.n	8001ece <vTaskStateEst+0x25e>
				x_priori[j] += Bd[j][k] * u[k];
 8001e74:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8001e78:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	4413      	add	r3, r2
 8001e80:	ed93 7a00 	vldr	s14, [r3]
 8001e84:	f8d7 22d0 	ldr.w	r2, [r7, #720]	; 0x2d0
 8001e88:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8001e8c:	4413      	add	r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8001e94:	4413      	add	r3, r2
 8001e96:	3bd0      	subs	r3, #208	; 0xd0
 8001e98:	edd3 6a00 	vldr	s13, [r3]
 8001e9c:	f507 72be 	add.w	r2, r7, #380	; 0x17c
 8001ea0:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	4413      	add	r3, r2
 8001ea8:	edd3 7a00 	vldr	s15, [r3]
 8001eac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eb4:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8001eb8:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	4413      	add	r3, r2
 8001ec0:	edc3 7a00 	vstr	s15, [r3]
			for(int k = 0; k < NUMBER_INPUTS; k++){
 8001ec4:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8001ec8:	3301      	adds	r3, #1
 8001eca:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
 8001ece:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	ddce      	ble.n	8001e74 <vTaskStateEst+0x204>
		for(int j = 0; j < NUMBER_STATES; j++){
 8001ed6:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8001eda:	3301      	adds	r3, #1
 8001edc:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
 8001ee0:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	dd89      	ble.n	8001dfc <vTaskStateEst+0x18c>
			}
		}

		/* Calculation of P_priori */
		/* Ad * P_est_prior * Ad_T */
		memset(Placeholder_priori, 0, NUMBER_STATES*NUMBER_STATES*sizeof(Placeholder_priori[0][0]));
 8001ee8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001eec:	2224      	movs	r2, #36	; 0x24
 8001eee:	2100      	movs	r1, #0
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f00b fc88 	bl	800d806 <memset>
		for(int j = 0; j < NUMBER_STATES; j++){
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 8001efc:	e05b      	b.n	8001fb6 <vTaskStateEst+0x346>
			for(int i = 0; i < NUMBER_STATES; i++){
 8001efe:	2300      	movs	r3, #0
 8001f00:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
 8001f04:	e04e      	b.n	8001fa4 <vTaskStateEst+0x334>
				for(int k = 0; k < NUMBER_STATES; k++){
 8001f06:	2300      	movs	r3, #0
 8001f08:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 8001f0c:	e041      	b.n	8001f92 <vTaskStateEst+0x322>
					Placeholder_priori[j][i] +=  Ad[j][k] * P_est[k][i];
 8001f0e:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8001f12:	f8d7 22c4 	ldr.w	r2, [r7, #708]	; 0x2c4
 8001f16:	4613      	mov	r3, r2
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	4413      	add	r3, r2
 8001f1c:	f8d7 22c0 	ldr.w	r2, [r7, #704]	; 0x2c0
 8001f20:	4413      	add	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	440b      	add	r3, r1
 8001f26:	ed93 7a00 	vldr	s14, [r3]
 8001f2a:	f8d7 22c4 	ldr.w	r2, [r7, #708]	; 0x2c4
 8001f2e:	4613      	mov	r3, r2
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	4413      	add	r3, r2
 8001f34:	f8d7 22bc 	ldr.w	r2, [r7, #700]	; 0x2bc
 8001f38:	4413      	add	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8001f40:	4413      	add	r3, r2
 8001f42:	3ba0      	subs	r3, #160	; 0xa0
 8001f44:	edd3 6a00 	vldr	s13, [r3]
 8001f48:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 8001f4c:	f8d7 22bc 	ldr.w	r2, [r7, #700]	; 0x2bc
 8001f50:	4613      	mov	r3, r2
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	4413      	add	r3, r2
 8001f56:	f8d7 22c0 	ldr.w	r2, [r7, #704]	; 0x2c0
 8001f5a:	4413      	add	r3, r2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	440b      	add	r3, r1
 8001f60:	edd3 7a00 	vldr	s15, [r3]
 8001f64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f6c:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8001f70:	f8d7 22c4 	ldr.w	r2, [r7, #708]	; 0x2c4
 8001f74:	4613      	mov	r3, r2
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	4413      	add	r3, r2
 8001f7a:	f8d7 22c0 	ldr.w	r2, [r7, #704]	; 0x2c0
 8001f7e:	4413      	add	r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	440b      	add	r3, r1
 8001f84:	edc3 7a00 	vstr	s15, [r3]
				for(int k = 0; k < NUMBER_STATES; k++){
 8001f88:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 8001f92:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	ddb9      	ble.n	8001f0e <vTaskStateEst+0x29e>
			for(int i = 0; i < NUMBER_STATES; i++){
 8001f9a:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
 8001fa4:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	ddac      	ble.n	8001f06 <vTaskStateEst+0x296>
		for(int j = 0; j < NUMBER_STATES; j++){
 8001fac:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 8001fb6:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	dd9f      	ble.n	8001efe <vTaskStateEst+0x28e>
				}
			}
		}
		memset(P_priori, 0, NUMBER_STATES*NUMBER_STATES*sizeof(P_priori[0][0]));
 8001fbe:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001fc2:	2224      	movs	r2, #36	; 0x24
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f00b fc1d 	bl	800d806 <memset>
		for(int j = 0; j < NUMBER_STATES; j++){
 8001fcc:	2300      	movs	r3, #0
 8001fce:	f8c7 32b8 	str.w	r3, [r7, #696]	; 0x2b8
 8001fd2:	e05b      	b.n	800208c <vTaskStateEst+0x41c>
			for(int i = 0; i < NUMBER_STATES; i++){
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 8001fda:	e04e      	b.n	800207a <vTaskStateEst+0x40a>
				for(int k = 0; k < NUMBER_STATES; k++){
 8001fdc:	2300      	movs	r3, #0
 8001fde:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
 8001fe2:	e041      	b.n	8002068 <vTaskStateEst+0x3f8>
					P_priori[j][i] +=  Placeholder_priori[j][k] * Ad_T[k][i];
 8001fe4:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8001fe8:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8001fec:	4613      	mov	r3, r2
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	4413      	add	r3, r2
 8001ff2:	f8d7 22b4 	ldr.w	r2, [r7, #692]	; 0x2b4
 8001ff6:	4413      	add	r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	440b      	add	r3, r1
 8001ffc:	ed93 7a00 	vldr	s14, [r3]
 8002000:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8002004:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8002008:	4613      	mov	r3, r2
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	4413      	add	r3, r2
 800200e:	f8d7 22b0 	ldr.w	r2, [r7, #688]	; 0x2b0
 8002012:	4413      	add	r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	440b      	add	r3, r1
 8002018:	edd3 6a00 	vldr	s13, [r3]
 800201c:	f8d7 22b0 	ldr.w	r2, [r7, #688]	; 0x2b0
 8002020:	4613      	mov	r3, r2
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	4413      	add	r3, r2
 8002026:	f8d7 22b4 	ldr.w	r2, [r7, #692]	; 0x2b4
 800202a:	4413      	add	r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8002032:	4413      	add	r3, r2
 8002034:	3bc4      	subs	r3, #196	; 0xc4
 8002036:	edd3 7a00 	vldr	s15, [r3]
 800203a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800203e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002042:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8002046:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 800204a:	4613      	mov	r3, r2
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	4413      	add	r3, r2
 8002050:	f8d7 22b4 	ldr.w	r2, [r7, #692]	; 0x2b4
 8002054:	4413      	add	r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	440b      	add	r3, r1
 800205a:	edc3 7a00 	vstr	s15, [r3]
				for(int k = 0; k < NUMBER_STATES; k++){
 800205e:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8002062:	3301      	adds	r3, #1
 8002064:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
 8002068:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 800206c:	2b02      	cmp	r3, #2
 800206e:	ddb9      	ble.n	8001fe4 <vTaskStateEst+0x374>
			for(int i = 0; i < NUMBER_STATES; i++){
 8002070:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8002074:	3301      	adds	r3, #1
 8002076:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 800207a:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 800207e:	2b02      	cmp	r3, #2
 8002080:	ddac      	ble.n	8001fdc <vTaskStateEst+0x36c>
		for(int j = 0; j < NUMBER_STATES; j++){
 8002082:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8002086:	3301      	adds	r3, #1
 8002088:	f8c7 32b8 	str.w	r3, [r7, #696]	; 0x2b8
 800208c:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8002090:	2b02      	cmp	r3, #2
 8002092:	dd9f      	ble.n	8001fd4 <vTaskStateEst+0x364>
		/* If Q is dimension 1, very easy -> do later */

		/* Update Step */
		/* state_inov = measurement - H * x_priori */
		/* H*P_priori */
		memset(State_Inovation, 0, NUMBER_SENSOR*sizeof(State_Inovation[0]));
 8002094:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002098:	220c      	movs	r2, #12
 800209a:	2100      	movs	r1, #0
 800209c:	4618      	mov	r0, r3
 800209e:	f00b fbb2 	bl	800d806 <memset>
		memset(Placeholder_est, 0, NUMBER_SENSOR*NUMBER_STATES*sizeof(Placeholder_est[0][0]));
 80020a2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80020a6:	2224      	movs	r2, #36	; 0x24
 80020a8:	2100      	movs	r1, #0
 80020aa:	4618      	mov	r0, r3
 80020ac:	f00b fbab 	bl	800d806 <memset>
		for(int j = 0; j < NUMBER_SENSOR; j++){
 80020b0:	2300      	movs	r3, #0
 80020b2:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 80020b6:	e08f      	b.n	80021d8 <vTaskStateEst+0x568>
			for(int i = 0; i < NUMBER_STATES; i++){
 80020b8:	2300      	movs	r3, #0
 80020ba:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
 80020be:	e081      	b.n	80021c4 <vTaskStateEst+0x554>
				State_Inovation[j] += measurements[j] - H[j][i]*x_priori[i];
 80020c0:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80020c4:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	4413      	add	r3, r2
 80020cc:	ed93 7a00 	vldr	s14, [r3]
 80020d0:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80020d4:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	4413      	add	r3, r2
 80020dc:	edd3 6a00 	vldr	s13, [r3]
 80020e0:	f507 71e6 	add.w	r1, r7, #460	; 0x1cc
 80020e4:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 80020e8:	4613      	mov	r3, r2
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	4413      	add	r3, r2
 80020ee:	f8d7 22a8 	ldr.w	r2, [r7, #680]	; 0x2a8
 80020f2:	4413      	add	r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	440b      	add	r3, r1
 80020f8:	ed93 6a00 	vldr	s12, [r3]
 80020fc:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8002100:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	edd3 7a00 	vldr	s15, [r3]
 800210c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002110:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002114:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002118:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800211c:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	4413      	add	r3, r2
 8002124:	edc3 7a00 	vstr	s15, [r3]
				for(int k = 0; k < NUMBER_STATES; k++){
 8002128:	2300      	movs	r3, #0
 800212a:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 800212e:	e040      	b.n	80021b2 <vTaskStateEst+0x542>
					Placeholder_est[j][i] += H[j][k] * P_priori[k][i];
 8002130:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002134:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 8002138:	4613      	mov	r3, r2
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	4413      	add	r3, r2
 800213e:	f8d7 22a8 	ldr.w	r2, [r7, #680]	; 0x2a8
 8002142:	4413      	add	r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	440b      	add	r3, r1
 8002148:	ed93 7a00 	vldr	s14, [r3]
 800214c:	f507 71e6 	add.w	r1, r7, #460	; 0x1cc
 8002150:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 8002154:	4613      	mov	r3, r2
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	4413      	add	r3, r2
 800215a:	f8d7 22a4 	ldr.w	r2, [r7, #676]	; 0x2a4
 800215e:	4413      	add	r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	440b      	add	r3, r1
 8002164:	edd3 6a00 	vldr	s13, [r3]
 8002168:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800216c:	f8d7 22a4 	ldr.w	r2, [r7, #676]	; 0x2a4
 8002170:	4613      	mov	r3, r2
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	4413      	add	r3, r2
 8002176:	f8d7 22a8 	ldr.w	r2, [r7, #680]	; 0x2a8
 800217a:	4413      	add	r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	440b      	add	r3, r1
 8002180:	edd3 7a00 	vldr	s15, [r3]
 8002184:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002188:	ee77 7a27 	vadd.f32	s15, s14, s15
 800218c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002190:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 8002194:	4613      	mov	r3, r2
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	4413      	add	r3, r2
 800219a:	f8d7 22a8 	ldr.w	r2, [r7, #680]	; 0x2a8
 800219e:	4413      	add	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	440b      	add	r3, r1
 80021a4:	edc3 7a00 	vstr	s15, [r3]
				for(int k = 0; k < NUMBER_STATES; k++){
 80021a8:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 80021ac:	3301      	adds	r3, #1
 80021ae:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 80021b2:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	ddba      	ble.n	8002130 <vTaskStateEst+0x4c0>
			for(int i = 0; i < NUMBER_STATES; i++){
 80021ba:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 80021be:	3301      	adds	r3, #1
 80021c0:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
 80021c4:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	f77f af79 	ble.w	80020c0 <vTaskStateEst+0x450>
		for(int j = 0; j < NUMBER_SENSOR; j++){
 80021ce:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 80021d2:	3301      	adds	r3, #1
 80021d4:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 80021d8:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 80021dc:	2b02      	cmp	r3, #2
 80021de:	f77f af6b 	ble.w	80020b8 <vTaskStateEst+0x448>
		}

		/* CHECK AGAIN STARTING HERE */

		/* S = H*P*H_T + R */
		memset(Cov_Inovation, 0, NUMBER_SENSOR*NUMBER_SENSOR*sizeof(Cov_Inovation[0][0]));
 80021e2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80021e6:	2224      	movs	r2, #36	; 0x24
 80021e8:	2100      	movs	r1, #0
 80021ea:	4618      	mov	r0, r3
 80021ec:	f00b fb0b 	bl	800d806 <memset>
		for(int j = 0; j < NUMBER_SENSOR; j++){
 80021f0:	2300      	movs	r3, #0
 80021f2:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0
 80021f6:	e086      	b.n	8002306 <vTaskStateEst+0x696>
			for(int i = 0; i < NUMBER_SENSOR; i++){
 80021f8:	2300      	movs	r3, #0
 80021fa:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 80021fe:	e079      	b.n	80022f4 <vTaskStateEst+0x684>
				for(int k = 0; k < NUMBER_STATES; k++){
 8002200:	2300      	movs	r3, #0
 8002202:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8002206:	e040      	b.n	800228a <vTaskStateEst+0x61a>
					Cov_Inovation[j][i] += Placeholder_est[j][k] * H_T[k][i];
 8002208:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 800220c:	f8d7 22a0 	ldr.w	r2, [r7, #672]	; 0x2a0
 8002210:	4613      	mov	r3, r2
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	4413      	add	r3, r2
 8002216:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 800221a:	4413      	add	r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	440b      	add	r3, r1
 8002220:	ed93 7a00 	vldr	s14, [r3]
 8002224:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002228:	f8d7 22a0 	ldr.w	r2, [r7, #672]	; 0x2a0
 800222c:	4613      	mov	r3, r2
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	4413      	add	r3, r2
 8002232:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 8002236:	4413      	add	r3, r2
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	440b      	add	r3, r1
 800223c:	edd3 6a00 	vldr	s13, [r3]
 8002240:	f507 71d4 	add.w	r1, r7, #424	; 0x1a8
 8002244:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 8002248:	4613      	mov	r3, r2
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	4413      	add	r3, r2
 800224e:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002252:	4413      	add	r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	440b      	add	r3, r1
 8002258:	edd3 7a00 	vldr	s15, [r3]
 800225c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002260:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002264:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 8002268:	f8d7 22a0 	ldr.w	r2, [r7, #672]	; 0x2a0
 800226c:	4613      	mov	r3, r2
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	4413      	add	r3, r2
 8002272:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002276:	4413      	add	r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	440b      	add	r3, r1
 800227c:	edc3 7a00 	vstr	s15, [r3]
				for(int k = 0; k < NUMBER_STATES; k++){
 8002280:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8002284:	3301      	adds	r3, #1
 8002286:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 800228a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800228e:	2b02      	cmp	r3, #2
 8002290:	ddba      	ble.n	8002208 <vTaskStateEst+0x598>
				}
				Cov_Inovation[j][i] += R[j][i];
 8002292:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 8002296:	f8d7 22a0 	ldr.w	r2, [r7, #672]	; 0x2a0
 800229a:	4613      	mov	r3, r2
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	4413      	add	r3, r2
 80022a0:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80022a4:	4413      	add	r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	440b      	add	r3, r1
 80022aa:	ed93 7a00 	vldr	s14, [r3]
 80022ae:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 80022b2:	f8d7 22a0 	ldr.w	r2, [r7, #672]	; 0x2a0
 80022b6:	4613      	mov	r3, r2
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	4413      	add	r3, r2
 80022bc:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80022c0:	4413      	add	r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	440b      	add	r3, r1
 80022c6:	edd3 7a00 	vldr	s15, [r3]
 80022ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022ce:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 80022d2:	f8d7 22a0 	ldr.w	r2, [r7, #672]	; 0x2a0
 80022d6:	4613      	mov	r3, r2
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	4413      	add	r3, r2
 80022dc:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80022e0:	4413      	add	r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	440b      	add	r3, r1
 80022e6:	edc3 7a00 	vstr	s15, [r3]
			for(int i = 0; i < NUMBER_SENSOR; i++){
 80022ea:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80022ee:	3301      	adds	r3, #1
 80022f0:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 80022f4:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	dd81      	ble.n	8002200 <vTaskStateEst+0x590>
		for(int j = 0; j < NUMBER_SENSOR; j++){
 80022fc:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8002300:	3301      	adds	r3, #1
 8002302:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0
 8002306:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 800230a:	2b02      	cmp	r3, #2
 800230c:	f77f af74 	ble.w	80021f8 <vTaskStateEst+0x588>
			}
		}

		/* Calculate Pseudoinverse of Cov_Inovation */
		pinv(LAMBDA, Cov_Inovation, Cov_Inovation_Inv);
 8002310:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8002314:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002318:	4611      	mov	r1, r2
 800231a:	4618      	mov	r0, r3
 800231c:	ed9f 0ae4 	vldr	s0, [pc, #912]	; 80026b0 <vTaskStateEst+0xa40>
 8002320:	f000 fa26 	bl	8002770 <pinv>

		/* K  = P_priori * H_T * Cov_Inovation_Inv */
		memset(Placeholder_K, 0, NUMBER_STATES*NUMBER_SENSOR*sizeof(Placeholder_K[0][0]));
 8002324:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002328:	2224      	movs	r2, #36	; 0x24
 800232a:	2100      	movs	r1, #0
 800232c:	4618      	mov	r0, r3
 800232e:	f00b fa6a 	bl	800d806 <memset>
		for(int j = 0; j < NUMBER_STATES; j++){
 8002332:	2300      	movs	r3, #0
 8002334:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 8002338:	e05a      	b.n	80023f0 <vTaskStateEst+0x780>
			for(int i = 0; i < NUMBER_SENSOR; i++){
 800233a:	2300      	movs	r3, #0
 800233c:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 8002340:	e04d      	b.n	80023de <vTaskStateEst+0x76e>
				for(int k = 0; k < NUMBER_STATES; k++){
 8002342:	2300      	movs	r3, #0
 8002344:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8002348:	e040      	b.n	80023cc <vTaskStateEst+0x75c>
					Placeholder_K[j][i] += P_priori[j][k] * H_T[k][i];
 800234a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800234e:	f8d7 2294 	ldr.w	r2, [r7, #660]	; 0x294
 8002352:	4613      	mov	r3, r2
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	4413      	add	r3, r2
 8002358:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 800235c:	4413      	add	r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	440b      	add	r3, r1
 8002362:	ed93 7a00 	vldr	s14, [r3]
 8002366:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800236a:	f8d7 2294 	ldr.w	r2, [r7, #660]	; 0x294
 800236e:	4613      	mov	r3, r2
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	4413      	add	r3, r2
 8002374:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 8002378:	4413      	add	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	440b      	add	r3, r1
 800237e:	edd3 6a00 	vldr	s13, [r3]
 8002382:	f507 71d4 	add.w	r1, r7, #424	; 0x1a8
 8002386:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 800238a:	4613      	mov	r3, r2
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	4413      	add	r3, r2
 8002390:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 8002394:	4413      	add	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	440b      	add	r3, r1
 800239a:	edd3 7a00 	vldr	s15, [r3]
 800239e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023a6:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80023aa:	f8d7 2294 	ldr.w	r2, [r7, #660]	; 0x294
 80023ae:	4613      	mov	r3, r2
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	4413      	add	r3, r2
 80023b4:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 80023b8:	4413      	add	r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	440b      	add	r3, r1
 80023be:	edc3 7a00 	vstr	s15, [r3]
				for(int k = 0; k < NUMBER_STATES; k++){
 80023c2:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80023c6:	3301      	adds	r3, #1
 80023c8:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 80023cc:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	ddba      	ble.n	800234a <vTaskStateEst+0x6da>
			for(int i = 0; i < NUMBER_SENSOR; i++){
 80023d4:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80023d8:	3301      	adds	r3, #1
 80023da:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 80023de:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	ddad      	ble.n	8002342 <vTaskStateEst+0x6d2>
		for(int j = 0; j < NUMBER_STATES; j++){
 80023e6:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80023ea:	3301      	adds	r3, #1
 80023ec:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 80023f0:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	dda0      	ble.n	800233a <vTaskStateEst+0x6ca>
				}
			}
		}
		memset(K, 0, NUMBER_STATES*NUMBER_SENSOR*sizeof(K[0][0]));
 80023f8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80023fc:	2224      	movs	r2, #36	; 0x24
 80023fe:	2100      	movs	r1, #0
 8002400:	4618      	mov	r0, r3
 8002402:	f00b fa00 	bl	800d806 <memset>
		for(int j = 0; j < NUMBER_STATES; j++){
 8002406:	2300      	movs	r3, #0
 8002408:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
 800240c:	e05a      	b.n	80024c4 <vTaskStateEst+0x854>
			for(int i = 0; i < NUMBER_SENSOR; i++){
 800240e:	2300      	movs	r3, #0
 8002410:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8002414:	e04d      	b.n	80024b2 <vTaskStateEst+0x842>
				for(int k = 0; k < NUMBER_SENSOR; k++){
 8002416:	2300      	movs	r3, #0
 8002418:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
 800241c:	e040      	b.n	80024a0 <vTaskStateEst+0x830>
					K[j][i] += Placeholder_K[j][k] * Cov_Inovation_Inv[k][i];
 800241e:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8002422:	f8d7 2288 	ldr.w	r2, [r7, #648]	; 0x288
 8002426:	4613      	mov	r3, r2
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	4413      	add	r3, r2
 800242c:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 8002430:	4413      	add	r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	440b      	add	r3, r1
 8002436:	ed93 7a00 	vldr	s14, [r3]
 800243a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800243e:	f8d7 2288 	ldr.w	r2, [r7, #648]	; 0x288
 8002442:	4613      	mov	r3, r2
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	4413      	add	r3, r2
 8002448:	f8d7 2280 	ldr.w	r2, [r7, #640]	; 0x280
 800244c:	4413      	add	r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	440b      	add	r3, r1
 8002452:	edd3 6a00 	vldr	s13, [r3]
 8002456:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 800245a:	f8d7 2280 	ldr.w	r2, [r7, #640]	; 0x280
 800245e:	4613      	mov	r3, r2
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	4413      	add	r3, r2
 8002464:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 8002468:	4413      	add	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	440b      	add	r3, r1
 800246e:	edd3 7a00 	vldr	s15, [r3]
 8002472:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002476:	ee77 7a27 	vadd.f32	s15, s14, s15
 800247a:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 800247e:	f8d7 2288 	ldr.w	r2, [r7, #648]	; 0x288
 8002482:	4613      	mov	r3, r2
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	4413      	add	r3, r2
 8002488:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 800248c:	4413      	add	r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	440b      	add	r3, r1
 8002492:	edc3 7a00 	vstr	s15, [r3]
				for(int k = 0; k < NUMBER_SENSOR; k++){
 8002496:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 800249a:	3301      	adds	r3, #1
 800249c:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
 80024a0:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	ddba      	ble.n	800241e <vTaskStateEst+0x7ae>
			for(int i = 0; i < NUMBER_SENSOR; i++){
 80024a8:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80024ac:	3301      	adds	r3, #1
 80024ae:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 80024b2:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	ddad      	ble.n	8002416 <vTaskStateEst+0x7a6>
		for(int j = 0; j < NUMBER_STATES; j++){
 80024ba:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 80024be:	3301      	adds	r3, #1
 80024c0:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
 80024c4:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	dda0      	ble.n	800240e <vTaskStateEst+0x79e>
				}
			}
		}

		/* x_est = x_priori + K*measurements */
		memset(x_est, 0, NUMBER_STATES*sizeof(x_est[0]));
 80024cc:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 80024d0:	220c      	movs	r2, #12
 80024d2:	2100      	movs	r1, #0
 80024d4:	4618      	mov	r0, r3
 80024d6:	f00b f996 	bl	800d806 <memset>
		for(int j = 0; j < NUMBER_STATES; j++){
 80024da:	2300      	movs	r3, #0
 80024dc:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 80024e0:	e045      	b.n	800256e <vTaskStateEst+0x8fe>
			for(int i = 0; i < NUMBER_SENSOR; i++){
 80024e2:	2300      	movs	r3, #0
 80024e4:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278
 80024e8:	e038      	b.n	800255c <vTaskStateEst+0x8ec>
				x_est[j] += x_priori[j] + K[j][i]*State_Inovation[i];
 80024ea:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 80024ee:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4413      	add	r3, r2
 80024f6:	ed93 7a00 	vldr	s14, [r3]
 80024fa:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 80024fe:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	4413      	add	r3, r2
 8002506:	edd3 6a00 	vldr	s13, [r3]
 800250a:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 800250e:	f8d7 227c 	ldr.w	r2, [r7, #636]	; 0x27c
 8002512:	4613      	mov	r3, r2
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	4413      	add	r3, r2
 8002518:	f8d7 2278 	ldr.w	r2, [r7, #632]	; 0x278
 800251c:	4413      	add	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	440b      	add	r3, r1
 8002522:	ed93 6a00 	vldr	s12, [r3]
 8002526:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800252a:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	4413      	add	r3, r2
 8002532:	edd3 7a00 	vldr	s15, [r3]
 8002536:	ee66 7a27 	vmul.f32	s15, s12, s15
 800253a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800253e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002542:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8002546:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	4413      	add	r3, r2
 800254e:	edc3 7a00 	vstr	s15, [r3]
			for(int i = 0; i < NUMBER_SENSOR; i++){
 8002552:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8002556:	3301      	adds	r3, #1
 8002558:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278
 800255c:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8002560:	2b02      	cmp	r3, #2
 8002562:	ddc2      	ble.n	80024ea <vTaskStateEst+0x87a>
		for(int j = 0; j < NUMBER_STATES; j++){
 8002564:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8002568:	3301      	adds	r3, #1
 800256a:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 800256e:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8002572:	2b02      	cmp	r3, #2
 8002574:	ddb5      	ble.n	80024e2 <vTaskStateEst+0x872>
			}
		}


		/* P_est = (eye(NUMBER_STATES) - K*H)*P_priori */
		memset(Placeholder_P_est, 0, NUMBER_STATES*NUMBER_STATES*sizeof(Placeholder_P_est[0][0]));
 8002576:	f107 0308 	add.w	r3, r7, #8
 800257a:	2224      	movs	r2, #36	; 0x24
 800257c:	2100      	movs	r1, #0
 800257e:	4618      	mov	r0, r3
 8002580:	f00b f941 	bl	800d806 <memset>
		for(int j = 0; j < NUMBER_STATES; j++){
 8002584:	2300      	movs	r3, #0
 8002586:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 800258a:	e080      	b.n	800268e <vTaskStateEst+0xa1e>
			for(int i = 0; i < NUMBER_STATES; i++){
 800258c:	2300      	movs	r3, #0
 800258e:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
 8002592:	e073      	b.n	800267c <vTaskStateEst+0xa0c>
				for(int k = 0; k < NUMBER_SENSOR; k++){
 8002594:	2300      	movs	r3, #0
 8002596:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 800259a:	e040      	b.n	800261e <vTaskStateEst+0x9ae>
					Placeholder_P_est[j][i] -= K[j][k] * H[k][i];
 800259c:	f107 0108 	add.w	r1, r7, #8
 80025a0:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 80025a4:	4613      	mov	r3, r2
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	4413      	add	r3, r2
 80025aa:	f8d7 2270 	ldr.w	r2, [r7, #624]	; 0x270
 80025ae:	4413      	add	r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	440b      	add	r3, r1
 80025b4:	ed93 7a00 	vldr	s14, [r3]
 80025b8:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 80025bc:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 80025c0:	4613      	mov	r3, r2
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	4413      	add	r3, r2
 80025c6:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 80025ca:	4413      	add	r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	440b      	add	r3, r1
 80025d0:	edd3 6a00 	vldr	s13, [r3]
 80025d4:	f507 71e6 	add.w	r1, r7, #460	; 0x1cc
 80025d8:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 80025dc:	4613      	mov	r3, r2
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	4413      	add	r3, r2
 80025e2:	f8d7 2270 	ldr.w	r2, [r7, #624]	; 0x270
 80025e6:	4413      	add	r3, r2
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	440b      	add	r3, r1
 80025ec:	edd3 7a00 	vldr	s15, [r3]
 80025f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025f8:	f107 0108 	add.w	r1, r7, #8
 80025fc:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8002600:	4613      	mov	r3, r2
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	4413      	add	r3, r2
 8002606:	f8d7 2270 	ldr.w	r2, [r7, #624]	; 0x270
 800260a:	4413      	add	r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	440b      	add	r3, r1
 8002610:	edc3 7a00 	vstr	s15, [r3]
				for(int k = 0; k < NUMBER_SENSOR; k++){
 8002614:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8002618:	3301      	adds	r3, #1
 800261a:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 800261e:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8002622:	2b02      	cmp	r3, #2
 8002624:	ddba      	ble.n	800259c <vTaskStateEst+0x92c>
				}
				if(j == i){
 8002626:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 800262a:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 800262e:	429a      	cmp	r2, r3
 8002630:	d11f      	bne.n	8002672 <vTaskStateEst+0xa02>
					Placeholder_P_est[j][i] += 1;
 8002632:	f107 0108 	add.w	r1, r7, #8
 8002636:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 800263a:	4613      	mov	r3, r2
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	4413      	add	r3, r2
 8002640:	f8d7 2270 	ldr.w	r2, [r7, #624]	; 0x270
 8002644:	4413      	add	r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	440b      	add	r3, r1
 800264a:	edd3 7a00 	vldr	s15, [r3]
 800264e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002652:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002656:	f107 0108 	add.w	r1, r7, #8
 800265a:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 800265e:	4613      	mov	r3, r2
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	4413      	add	r3, r2
 8002664:	f8d7 2270 	ldr.w	r2, [r7, #624]	; 0x270
 8002668:	4413      	add	r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	440b      	add	r3, r1
 800266e:	edc3 7a00 	vstr	s15, [r3]
			for(int i = 0; i < NUMBER_STATES; i++){
 8002672:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 8002676:	3301      	adds	r3, #1
 8002678:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
 800267c:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 8002680:	2b02      	cmp	r3, #2
 8002682:	dd87      	ble.n	8002594 <vTaskStateEst+0x924>
		for(int j = 0; j < NUMBER_STATES; j++){
 8002684:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8002688:	3301      	adds	r3, #1
 800268a:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 800268e:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8002692:	2b02      	cmp	r3, #2
 8002694:	f77f af7a 	ble.w	800258c <vTaskStateEst+0x91c>
				}
			}
		}
		for(int j = 0; j < NUMBER_STATES; j++){
 8002698:	2300      	movs	r3, #0
 800269a:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 800269e:	e05c      	b.n	800275a <vTaskStateEst+0xaea>
			for(int i = 0; i < NUMBER_STATES; i++){
 80026a0:	2300      	movs	r3, #0
 80026a2:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 80026a6:	e04f      	b.n	8002748 <vTaskStateEst+0xad8>
				for(int k = 0; k < NUMBER_STATES; k++){
 80026a8:	2300      	movs	r3, #0
 80026aa:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 80026ae:	e042      	b.n	8002736 <vTaskStateEst+0xac6>
 80026b0:	3dcccccd 	.word	0x3dcccccd
					P_est[j][i] += Placeholder_P_est[j][k] * P_priori[k][i];
 80026b4:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 80026b8:	f8d7 2268 	ldr.w	r2, [r7, #616]	; 0x268
 80026bc:	4613      	mov	r3, r2
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	4413      	add	r3, r2
 80026c2:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 80026c6:	4413      	add	r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	440b      	add	r3, r1
 80026cc:	ed93 7a00 	vldr	s14, [r3]
 80026d0:	f107 0108 	add.w	r1, r7, #8
 80026d4:	f8d7 2268 	ldr.w	r2, [r7, #616]	; 0x268
 80026d8:	4613      	mov	r3, r2
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	4413      	add	r3, r2
 80026de:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 80026e2:	4413      	add	r3, r2
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	440b      	add	r3, r1
 80026e8:	edd3 6a00 	vldr	s13, [r3]
 80026ec:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 80026f0:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 80026f4:	4613      	mov	r3, r2
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	4413      	add	r3, r2
 80026fa:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 80026fe:	4413      	add	r3, r2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	440b      	add	r3, r1
 8002704:	edd3 7a00 	vldr	s15, [r3]
 8002708:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800270c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002710:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 8002714:	f8d7 2268 	ldr.w	r2, [r7, #616]	; 0x268
 8002718:	4613      	mov	r3, r2
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	4413      	add	r3, r2
 800271e:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8002722:	4413      	add	r3, r2
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	440b      	add	r3, r1
 8002728:	edc3 7a00 	vstr	s15, [r3]
				for(int k = 0; k < NUMBER_STATES; k++){
 800272c:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8002730:	3301      	adds	r3, #1
 8002732:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8002736:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800273a:	2b02      	cmp	r3, #2
 800273c:	ddba      	ble.n	80026b4 <vTaskStateEst+0xa44>
			for(int i = 0; i < NUMBER_STATES; i++){
 800273e:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8002742:	3301      	adds	r3, #1
 8002744:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8002748:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 800274c:	2b02      	cmp	r3, #2
 800274e:	ddab      	ble.n	80026a8 <vTaskStateEst+0xa38>
		for(int j = 0; j < NUMBER_STATES; j++){
 8002750:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 8002754:	3301      	adds	r3, #1
 8002756:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 800275a:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 800275e:	2b02      	cmp	r3, #2
 8002760:	dd9e      	ble.n	80026a0 <vTaskStateEst+0xa30>
		/* OUTPUT IS x_est */




		osDelayUntil(tick_count);
 8002762:	f8d7 02d4 	ldr.w	r0, [r7, #724]	; 0x2d4
 8002766:	f007 f90d 	bl	8009984 <osDelayUntil>
		tick_count += tick_update;
 800276a:	f7ff bb35 	b.w	8001dd8 <vTaskStateEst+0x168>
 800276e:	bf00      	nop

08002770 <pinv>:
	Gd = G_init;


}

void pinv(float lambda, float Matrix[NUMBER_SENSOR][NUMBER_SENSOR], float Inverse[NUMBER_SENSOR][NUMBER_SENSOR]){
 8002770:	b580      	push	{r7, lr}
 8002772:	b0a6      	sub	sp, #152	; 0x98
 8002774:	af00      	add	r7, sp, #0
 8002776:	ed87 0a03 	vstr	s0, [r7, #12]
 800277a:	60b8      	str	r0, [r7, #8]
 800277c:	6079      	str	r1, [r7, #4]

	/* More Penrose Pseudoinverse */
	/* pinv = A_T*(A*A_T*lambda^2*eye(size(A)))^-1 */
	float Matrix_T[NUMBER_SENSOR][NUMBER_SENSOR] = { 0 };
 800277e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002782:	2224      	movs	r2, #36	; 0x24
 8002784:	2100      	movs	r1, #0
 8002786:	4618      	mov	r0, r3
 8002788:	f00b f83d 	bl	800d806 <memset>
	float Matrix_to_inv[NUMBER_SENSOR][NUMBER_SENSOR] = { 0 };
 800278c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002790:	2224      	movs	r2, #36	; 0x24
 8002792:	2100      	movs	r1, #0
 8002794:	4618      	mov	r0, r3
 8002796:	f00b f836 	bl	800d806 <memset>
	float First_Inverse[NUMBER_SENSOR][NUMBER_SENSOR] = { 0 };
 800279a:	f107 0314 	add.w	r3, r7, #20
 800279e:	2224      	movs	r2, #36	; 0x24
 80027a0:	2100      	movs	r1, #0
 80027a2:	4618      	mov	r0, r3
 80027a4:	f00b f82f 	bl	800d806 <memset>


	for(int j = 0; j < NUMBER_SENSOR; j++){
 80027a8:	2300      	movs	r3, #0
 80027aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80027ae:	e08b      	b.n	80028c8 <pinv+0x158>
		for(int i = 0; i < NUMBER_SENSOR; i++){
 80027b0:	2300      	movs	r3, #0
 80027b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80027b6:	e07d      	b.n	80028b4 <pinv+0x144>
			for(int k = 0; k < NUMBER_SENSOR; k++){
 80027b8:	2300      	movs	r3, #0
 80027ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80027be:	e070      	b.n	80028a2 <pinv+0x132>
				Matrix_to_inv[j][i] +=  Matrix[j][k] * Matrix_T[k][i];
 80027c0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80027c4:	4613      	mov	r3, r2
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	4413      	add	r3, r2
 80027ca:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80027ce:	4413      	add	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80027d6:	4413      	add	r3, r2
 80027d8:	3b60      	subs	r3, #96	; 0x60
 80027da:	ed93 7a00 	vldr	s14, [r3]
 80027de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80027e2:	4613      	mov	r3, r2
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	4413      	add	r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	461a      	mov	r2, r3
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	441a      	add	r2, r3
 80027f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	4413      	add	r3, r2
 80027f8:	edd3 6a00 	vldr	s13, [r3]
 80027fc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002800:	4613      	mov	r3, r2
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	4413      	add	r3, r2
 8002806:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800280a:	4413      	add	r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002812:	4413      	add	r3, r2
 8002814:	3b3c      	subs	r3, #60	; 0x3c
 8002816:	edd3 7a00 	vldr	s15, [r3]
 800281a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800281e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002822:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002826:	4613      	mov	r3, r2
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	4413      	add	r3, r2
 800282c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002830:	4413      	add	r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002838:	4413      	add	r3, r2
 800283a:	3b60      	subs	r3, #96	; 0x60
 800283c:	edc3 7a00 	vstr	s15, [r3]
				if(i == j){
 8002840:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002844:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002848:	429a      	cmp	r2, r3
 800284a:	d125      	bne.n	8002898 <pinv+0x128>
					Matrix_to_inv[j][i] += lambda * lambda;
 800284c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002850:	4613      	mov	r3, r2
 8002852:	005b      	lsls	r3, r3, #1
 8002854:	4413      	add	r3, r2
 8002856:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800285a:	4413      	add	r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002862:	4413      	add	r3, r2
 8002864:	3b60      	subs	r3, #96	; 0x60
 8002866:	ed93 7a00 	vldr	s14, [r3]
 800286a:	edd7 6a03 	vldr	s13, [r7, #12]
 800286e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002872:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002876:	ee77 7a27 	vadd.f32	s15, s14, s15
 800287a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800287e:	4613      	mov	r3, r2
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	4413      	add	r3, r2
 8002884:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002888:	4413      	add	r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002890:	4413      	add	r3, r2
 8002892:	3b60      	subs	r3, #96	; 0x60
 8002894:	edc3 7a00 	vstr	s15, [r3]
			for(int k = 0; k < NUMBER_SENSOR; k++){
 8002898:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800289c:	3301      	adds	r3, #1
 800289e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80028a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	dd8a      	ble.n	80027c0 <pinv+0x50>
		for(int i = 0; i < NUMBER_SENSOR; i++){
 80028aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80028ae:	3301      	adds	r3, #1
 80028b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80028b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	f77f af7d 	ble.w	80027b8 <pinv+0x48>
	for(int j = 0; j < NUMBER_SENSOR; j++){
 80028be:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80028c2:	3301      	adds	r3, #1
 80028c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80028c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	f77f af6f 	ble.w	80027b0 <pinv+0x40>
				}
			}
		}
	}

	cofactor(Matrix_to_inv, First_Inverse, NUMBER_SENSOR);
 80028d2:	f107 0214 	add.w	r2, r7, #20
 80028d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80028da:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80028de:	4611      	mov	r1, r2
 80028e0:	4618      	mov	r0, r3
 80028e2:	f000 f93d 	bl	8002b60 <cofactor>
	for(int j = 0; j < NUMBER_SENSOR; j++){
 80028e6:	2300      	movs	r3, #0
 80028e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80028ec:	e05e      	b.n	80029ac <pinv+0x23c>
		for(int i = 0; i < NUMBER_SENSOR; i++){
 80028ee:	2300      	movs	r3, #0
 80028f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80028f4:	e051      	b.n	800299a <pinv+0x22a>
			for(int k = 0; k < NUMBER_SENSOR; k++){
 80028f6:	2300      	movs	r3, #0
 80028f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80028fc:	e044      	b.n	8002988 <pinv+0x218>
				Inverse[j][i] +=  Matrix_T[j][k] * First_Inverse[k][i];
 80028fe:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002902:	4613      	mov	r3, r2
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	4413      	add	r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	461a      	mov	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	441a      	add	r2, r3
 8002910:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	4413      	add	r3, r2
 8002918:	ed93 7a00 	vldr	s14, [r3]
 800291c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002920:	4613      	mov	r3, r2
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	4413      	add	r3, r2
 8002926:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800292a:	4413      	add	r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002932:	4413      	add	r3, r2
 8002934:	3b3c      	subs	r3, #60	; 0x3c
 8002936:	edd3 6a00 	vldr	s13, [r3]
 800293a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800293e:	4613      	mov	r3, r2
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	4413      	add	r3, r2
 8002944:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002948:	4413      	add	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002950:	4413      	add	r3, r2
 8002952:	3b84      	subs	r3, #132	; 0x84
 8002954:	edd3 7a00 	vldr	s15, [r3]
 8002958:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800295c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002960:	4613      	mov	r3, r2
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	4413      	add	r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	461a      	mov	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	441a      	add	r2, r3
 800296e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002972:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	4413      	add	r3, r2
 800297a:	edc3 7a00 	vstr	s15, [r3]
			for(int k = 0; k < NUMBER_SENSOR; k++){
 800297e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002982:	3301      	adds	r3, #1
 8002984:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002988:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800298c:	2b02      	cmp	r3, #2
 800298e:	ddb6      	ble.n	80028fe <pinv+0x18e>
		for(int i = 0; i < NUMBER_SENSOR; i++){
 8002990:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002994:	3301      	adds	r3, #1
 8002996:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800299a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800299e:	2b02      	cmp	r3, #2
 80029a0:	dda9      	ble.n	80028f6 <pinv+0x186>
	for(int j = 0; j < NUMBER_SENSOR; j++){
 80029a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80029a6:	3301      	adds	r3, #1
 80029a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80029ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	dd9c      	ble.n	80028ee <pinv+0x17e>
			}
		}
	}


}
 80029b4:	bf00      	nop
 80029b6:	3798      	adds	r7, #152	; 0x98
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <determinant>:

/*For calculating Determinant of the Matrix */
float determinant(float a[NUMBER_SENSOR][NUMBER_SENSOR], float size)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	ed2d 8b02 	vpush	{d8}
 80029c2:	b092      	sub	sp, #72	; 0x48
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	ed87 0a00 	vstr	s0, [r7]
	float s = 1, det = 0, b[NUMBER_SENSOR][NUMBER_SENSOR];
 80029cc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80029d0:	647b      	str	r3, [r7, #68]	; 0x44
 80029d2:	f04f 0300 	mov.w	r3, #0
 80029d6:	643b      	str	r3, [r7, #64]	; 0x40
	int i, j, m, n, c;
	if (size == 1)
 80029d8:	edd7 7a00 	vldr	s15, [r7]
 80029dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80029e0:	eef4 7a47 	vcmp.f32	s15, s14
 80029e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029e8:	d102      	bne.n	80029f0 <determinant+0x34>
	{
		return (a[0][0]);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	e0ab      	b.n	8002b48 <determinant+0x18c>
	}
	else
	{
		det = 0;
 80029f0:	f04f 0300 	mov.w	r3, #0
 80029f4:	643b      	str	r3, [r7, #64]	; 0x40
		for (c = 0; c < size; c++)
 80029f6:	2300      	movs	r3, #0
 80029f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029fa:	e097      	b.n	8002b2c <determinant+0x170>
		{
			m = 0;
 80029fc:	2300      	movs	r3, #0
 80029fe:	637b      	str	r3, [r7, #52]	; 0x34
			n = 0;
 8002a00:	2300      	movs	r3, #0
 8002a02:	633b      	str	r3, [r7, #48]	; 0x30
			for (i = 0;i < size; i++)
 8002a04:	2300      	movs	r3, #0
 8002a06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a08:	e05a      	b.n	8002ac0 <determinant+0x104>
			{
				for (j = 0 ;j < size; j++)
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a0e:	e048      	b.n	8002aa2 <determinant+0xe6>
				{
					b[i][j] = 0;
 8002a10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a12:	4613      	mov	r3, r2
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	4413      	add	r3, r2
 8002a18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a1a:	4413      	add	r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002a22:	4413      	add	r3, r2
 8002a24:	3b40      	subs	r3, #64	; 0x40
 8002a26:	f04f 0200 	mov.w	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]
					if (i != 0 && j != c)
 8002a2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d034      	beq.n	8002a9c <determinant+0xe0>
 8002a32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d030      	beq.n	8002a9c <determinant+0xe0>
					{
						b[m][n] = a[i][j];
 8002a3a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	4413      	add	r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	461a      	mov	r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	441a      	add	r2, r3
 8002a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	4413      	add	r3, r2
 8002a50:	6819      	ldr	r1, [r3, #0]
 8002a52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a54:	4613      	mov	r3, r2
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	4413      	add	r3, r2
 8002a5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a5c:	4413      	add	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002a64:	4413      	add	r3, r2
 8002a66:	3b40      	subs	r3, #64	; 0x40
 8002a68:	6019      	str	r1, [r3, #0]
						if (n < (size - 2))
 8002a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a6c:	ee07 3a90 	vmov	s15, r3
 8002a70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a74:	edd7 7a00 	vldr	s15, [r7]
 8002a78:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002a7c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002a80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a88:	d503      	bpl.n	8002a92 <determinant+0xd6>
							n++;
 8002a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	633b      	str	r3, [r7, #48]	; 0x30
 8002a90:	e004      	b.n	8002a9c <determinant+0xe0>
						else
						{
							n = 0;
 8002a92:	2300      	movs	r3, #0
 8002a94:	633b      	str	r3, [r7, #48]	; 0x30
							m++;
 8002a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a98:	3301      	adds	r3, #1
 8002a9a:	637b      	str	r3, [r7, #52]	; 0x34
				for (j = 0 ;j < size; j++)
 8002a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	63bb      	str	r3, [r7, #56]	; 0x38
 8002aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa4:	ee07 3a90 	vmov	s15, r3
 8002aa8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002aac:	ed97 7a00 	vldr	s14, [r7]
 8002ab0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ab8:	dcaa      	bgt.n	8002a10 <determinant+0x54>
			for (i = 0;i < size; i++)
 8002aba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002abc:	3301      	adds	r3, #1
 8002abe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ac2:	ee07 3a90 	vmov	s15, r3
 8002ac6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002aca:	ed97 7a00 	vldr	s14, [r7]
 8002ace:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ad6:	dc98      	bgt.n	8002a0a <determinant+0x4e>
						}
					}
				}
			}
			det = det + s * (a[0][c] * determinant(b, size - 1));
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	4413      	add	r3, r2
 8002ae0:	ed93 8a00 	vldr	s16, [r3]
 8002ae4:	edd7 7a00 	vldr	s15, [r7]
 8002ae8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002aec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002af0:	f107 0308 	add.w	r3, r7, #8
 8002af4:	eeb0 0a67 	vmov.f32	s0, s15
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7ff ff5f 	bl	80029bc <determinant>
 8002afe:	eef0 7a40 	vmov.f32	s15, s0
 8002b02:	ee28 7a27 	vmul.f32	s14, s16, s15
 8002b06:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002b0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b0e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002b12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b16:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
			s = -1 * s;
 8002b1a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002b1e:	eef1 7a67 	vneg.f32	s15, s15
 8002b22:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		for (c = 0; c < size; c++)
 8002b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b28:	3301      	adds	r3, #1
 8002b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b2e:	ee07 3a90 	vmov	s15, r3
 8002b32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b36:	ed97 7a00 	vldr	s14, [r7]
 8002b3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b42:	f73f af5b 	bgt.w	80029fc <determinant+0x40>
		}
	}

	return (det);
 8002b46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b48:	ee07 3a90 	vmov	s15, r3
}
 8002b4c:	eeb0 0a67 	vmov.f32	s0, s15
 8002b50:	3748      	adds	r7, #72	; 0x48
 8002b52:	46bd      	mov	sp, r7
 8002b54:	ecbd 8b02 	vpop	{d8}
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	0000      	movs	r0, r0
 8002b5c:	0000      	movs	r0, r0
	...

08002b60 <cofactor>:

void cofactor(float num[NUMBER_SENSOR][NUMBER_SENSOR], float inverse[NUMBER_SENSOR][NUMBER_SENSOR], float size)
{
 8002b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b62:	b09d      	sub	sp, #116	; 0x74
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	ed87 0a01 	vstr	s0, [r7, #4]
	float b[NUMBER_SENSOR][NUMBER_SENSOR], fac[NUMBER_SENSOR][NUMBER_SENSOR];
	int p, q, m, n, i, j;
	for (q = 0;q < size; q++)
 8002b6e:	2300      	movs	r3, #0
 8002b70:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b72:	e0b3      	b.n	8002cdc <cofactor+0x17c>
	{
		for (p = 0;p < size; p++)
 8002b74:	2300      	movs	r3, #0
 8002b76:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b78:	e0a0      	b.n	8002cbc <cofactor+0x15c>
		{
			m = 0;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	667b      	str	r3, [r7, #100]	; 0x64
			n = 0;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	663b      	str	r3, [r7, #96]	; 0x60
			for (i = 0;i < size; i++)
 8002b82:	2300      	movs	r3, #0
 8002b84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b86:	e04d      	b.n	8002c24 <cofactor+0xc4>
			{
				for (j = 0;j < size; j++)
 8002b88:	2300      	movs	r3, #0
 8002b8a:	65bb      	str	r3, [r7, #88]	; 0x58
 8002b8c:	e03b      	b.n	8002c06 <cofactor+0xa6>
				{
					if (i != q && j != p)
 8002b8e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002b90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d034      	beq.n	8002c00 <cofactor+0xa0>
 8002b96:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d030      	beq.n	8002c00 <cofactor+0xa0>
					{
						b[m][n] = num[i][j];
 8002b9e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	4413      	add	r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	461a      	mov	r2, r3
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	441a      	add	r2, r3
 8002bae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	4413      	add	r3, r2
 8002bb4:	6819      	ldr	r1, [r3, #0]
 8002bb6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002bb8:	4613      	mov	r3, r2
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	4413      	add	r3, r2
 8002bbe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002bc0:	4413      	add	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8002bc8:	4413      	add	r3, r2
 8002bca:	3b3c      	subs	r3, #60	; 0x3c
 8002bcc:	6019      	str	r1, [r3, #0]
						if (n < (size - 2))
 8002bce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bd0:	ee07 3a90 	vmov	s15, r3
 8002bd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bd8:	edd7 7a01 	vldr	s15, [r7, #4]
 8002bdc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002be0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002be4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bec:	d503      	bpl.n	8002bf6 <cofactor+0x96>
							n++;
 8002bee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	663b      	str	r3, [r7, #96]	; 0x60
 8002bf4:	e004      	b.n	8002c00 <cofactor+0xa0>
						else
						{
							n = 0;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	663b      	str	r3, [r7, #96]	; 0x60
							m++;
 8002bfa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	667b      	str	r3, [r7, #100]	; 0x64
				for (j = 0;j < size; j++)
 8002c00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c02:	3301      	adds	r3, #1
 8002c04:	65bb      	str	r3, [r7, #88]	; 0x58
 8002c06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c08:	ee07 3a90 	vmov	s15, r3
 8002c0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c10:	ed97 7a01 	vldr	s14, [r7, #4]
 8002c14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c1c:	dcb7      	bgt.n	8002b8e <cofactor+0x2e>
			for (i = 0;i < size; i++)
 8002c1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c20:	3301      	adds	r3, #1
 8002c22:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c26:	ee07 3a90 	vmov	s15, r3
 8002c2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c2e:	ed97 7a01 	vldr	s14, [r7, #4]
 8002c32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c3a:	dca5      	bgt.n	8002b88 <cofactor+0x28>
						}
					}
				}
			}
			fac[q][p] = pow(-1, q + p) * determinant(b, size - 1);
 8002c3c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002c3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c40:	4413      	add	r3, r2
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7fd fc8e 	bl	8000564 <__aeabi_i2d>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	460c      	mov	r4, r1
 8002c4c:	ec44 3b11 	vmov	d1, r3, r4
 8002c50:	ed9f 0b2f 	vldr	d0, [pc, #188]	; 8002d10 <cofactor+0x1b0>
 8002c54:	f00b fa70 	bl	800e138 <pow>
 8002c58:	ec56 5b10 	vmov	r5, r6, d0
 8002c5c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002c64:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c68:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002c6c:	eeb0 0a67 	vmov.f32	s0, s15
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7ff fea3 	bl	80029bc <determinant>
 8002c76:	ee10 3a10 	vmov	r3, s0
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7fd fc84 	bl	8000588 <__aeabi_f2d>
 8002c80:	4603      	mov	r3, r0
 8002c82:	460c      	mov	r4, r1
 8002c84:	461a      	mov	r2, r3
 8002c86:	4623      	mov	r3, r4
 8002c88:	4628      	mov	r0, r5
 8002c8a:	4631      	mov	r1, r6
 8002c8c:	f7fd fcd4 	bl	8000638 <__aeabi_dmul>
 8002c90:	4603      	mov	r3, r0
 8002c92:	460c      	mov	r4, r1
 8002c94:	4618      	mov	r0, r3
 8002c96:	4621      	mov	r1, r4
 8002c98:	f7fd ff9e 	bl	8000bd8 <__aeabi_d2f>
 8002c9c:	4601      	mov	r1, r0
 8002c9e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	005b      	lsls	r3, r3, #1
 8002ca4:	4413      	add	r3, r2
 8002ca6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002ca8:	4413      	add	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8002cb0:	4413      	add	r3, r2
 8002cb2:	3b60      	subs	r3, #96	; 0x60
 8002cb4:	6019      	str	r1, [r3, #0]
		for (p = 0;p < size; p++)
 8002cb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cb8:	3301      	adds	r3, #1
 8002cba:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002cbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cbe:	ee07 3a90 	vmov	s15, r3
 8002cc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cc6:	ed97 7a01 	vldr	s14, [r7, #4]
 8002cca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cd2:	f73f af52 	bgt.w	8002b7a <cofactor+0x1a>
	for (q = 0;q < size; q++)
 8002cd6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cd8:	3301      	adds	r3, #1
 8002cda:	66bb      	str	r3, [r7, #104]	; 0x68
 8002cdc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cde:	ee07 3a90 	vmov	s15, r3
 8002ce2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ce6:	ed97 7a01 	vldr	s14, [r7, #4]
 8002cea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cf2:	f73f af3f 	bgt.w	8002b74 <cofactor+0x14>
		}
	}
	transpose(inverse, num, fac, size);
 8002cf6:	f107 0310 	add.w	r3, r7, #16
 8002cfa:	ed97 0a01 	vldr	s0, [r7, #4]
 8002cfe:	461a      	mov	r2, r3
 8002d00:	68f9      	ldr	r1, [r7, #12]
 8002d02:	68b8      	ldr	r0, [r7, #8]
 8002d04:	f000 f808 	bl	8002d18 <transpose>
}
 8002d08:	bf00      	nop
 8002d0a:	3774      	adds	r7, #116	; 0x74
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d10:	00000000 	.word	0x00000000
 8002d14:	bff00000 	.word	0xbff00000

08002d18 <transpose>:
/*Finding transpose of matrix*/
void transpose(float inverse[NUMBER_SENSOR][NUMBER_SENSOR], float num[NUMBER_SENSOR][NUMBER_SENSOR], float fac[NUMBER_SENSOR][NUMBER_SENSOR], float size)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b090      	sub	sp, #64	; 0x40
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
 8002d24:	ed87 0a00 	vstr	s0, [r7]
	int i, j;
	float b[NUMBER_SENSOR][NUMBER_SENSOR], d;

	for (i = 0;i < size; i++)
 8002d28:	2300      	movs	r3, #0
 8002d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d2c:	e02c      	b.n	8002d88 <transpose+0x70>
	{
		for (j = 0;j < size; j++)
 8002d2e:	2300      	movs	r3, #0
 8002d30:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d32:	e01a      	b.n	8002d6a <transpose+0x52>
		{
			b[i][j] = fac[j][i];
 8002d34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d36:	4613      	mov	r3, r2
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	4413      	add	r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	461a      	mov	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	441a      	add	r2, r3
 8002d44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	4413      	add	r3, r2
 8002d4a:	6819      	ldr	r1, [r3, #0]
 8002d4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d4e:	4613      	mov	r3, r2
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	4413      	add	r3, r2
 8002d54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d56:	4413      	add	r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002d5e:	4413      	add	r3, r2
 8002d60:	3b30      	subs	r3, #48	; 0x30
 8002d62:	6019      	str	r1, [r3, #0]
		for (j = 0;j < size; j++)
 8002d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d66:	3301      	adds	r3, #1
 8002d68:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d6c:	ee07 3a90 	vmov	s15, r3
 8002d70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d74:	ed97 7a00 	vldr	s14, [r7]
 8002d78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d80:	dcd8      	bgt.n	8002d34 <transpose+0x1c>
	for (i = 0;i < size; i++)
 8002d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d84:	3301      	adds	r3, #1
 8002d86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d8a:	ee07 3a90 	vmov	s15, r3
 8002d8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d92:	ed97 7a00 	vldr	s14, [r7]
 8002d96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d9e:	dcc6      	bgt.n	8002d2e <transpose+0x16>
		}
	}
	d = determinant(num, size);
 8002da0:	ed97 0a00 	vldr	s0, [r7]
 8002da4:	68b8      	ldr	r0, [r7, #8]
 8002da6:	f7ff fe09 	bl	80029bc <determinant>
 8002daa:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
	for (i = 0;i < size; i++)
 8002dae:	2300      	movs	r3, #0
 8002db0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002db2:	e032      	b.n	8002e1a <transpose+0x102>
	{
		for (j = 0;j < size; j++)
 8002db4:	2300      	movs	r3, #0
 8002db6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002db8:	e020      	b.n	8002dfc <transpose+0xe4>
		{
			inverse[i][j] = b[i][j] / d;
 8002dba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	005b      	lsls	r3, r3, #1
 8002dc0:	4413      	add	r3, r2
 8002dc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002dc4:	4413      	add	r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002dcc:	4413      	add	r3, r2
 8002dce:	3b30      	subs	r3, #48	; 0x30
 8002dd0:	edd3 6a00 	vldr	s13, [r3]
 8002dd4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	4413      	add	r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	461a      	mov	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	441a      	add	r2, r3
 8002de4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002de8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	4413      	add	r3, r2
 8002df2:	edc3 7a00 	vstr	s15, [r3]
		for (j = 0;j < size; j++)
 8002df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002df8:	3301      	adds	r3, #1
 8002dfa:	63bb      	str	r3, [r7, #56]	; 0x38
 8002dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dfe:	ee07 3a90 	vmov	s15, r3
 8002e02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e06:	ed97 7a00 	vldr	s14, [r7]
 8002e0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e12:	dcd2      	bgt.n	8002dba <transpose+0xa2>
	for (i = 0;i < size; i++)
 8002e14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e16:	3301      	adds	r3, #1
 8002e18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e1c:	ee07 3a90 	vmov	s15, r3
 8002e20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e24:	ed97 7a00 	vldr	s14, [r7]
 8002e28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e30:	dcc0      	bgt.n	8002db4 <transpose+0x9c>
		}
	}
}
 8002e32:	bf00      	nop
 8002e34:	3740      	adds	r7, #64	; 0x40
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
	...

08002e3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002e3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e74 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002e40:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002e42:	e003      	b.n	8002e4c <LoopCopyDataInit>

08002e44 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002e44:	4b0c      	ldr	r3, [pc, #48]	; (8002e78 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002e46:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002e48:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002e4a:	3104      	adds	r1, #4

08002e4c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002e4c:	480b      	ldr	r0, [pc, #44]	; (8002e7c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002e4e:	4b0c      	ldr	r3, [pc, #48]	; (8002e80 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002e50:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002e52:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002e54:	d3f6      	bcc.n	8002e44 <CopyDataInit>
  ldr  r2, =_sbss
 8002e56:	4a0b      	ldr	r2, [pc, #44]	; (8002e84 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002e58:	e002      	b.n	8002e60 <LoopFillZerobss>

08002e5a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002e5a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002e5c:	f842 3b04 	str.w	r3, [r2], #4

08002e60 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002e60:	4b09      	ldr	r3, [pc, #36]	; (8002e88 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002e62:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002e64:	d3f9      	bcc.n	8002e5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002e66:	f7fe fc29 	bl	80016bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e6a:	f00a fc8d 	bl	800d788 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e6e:	f7fe f883 	bl	8000f78 <main>
  bx  lr    
 8002e72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002e74:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8002e78:	0800f480 	.word	0x0800f480
  ldr  r0, =_sdata
 8002e7c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002e80:	200001fc 	.word	0x200001fc
  ldr  r2, =_sbss
 8002e84:	200001fc 	.word	0x200001fc
  ldr  r3, = _ebss
 8002e88:	20008140 	.word	0x20008140

08002e8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e8c:	e7fe      	b.n	8002e8c <ADC_IRQHandler>

08002e8e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e92:	2003      	movs	r0, #3
 8002e94:	f000 f8f7 	bl	8003086 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e98:	2000      	movs	r0, #0
 8002e9a:	f7fe fb5d 	bl	8001558 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002e9e:	f7fe fa5f 	bl	8001360 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002eac:	4b06      	ldr	r3, [pc, #24]	; (8002ec8 <HAL_IncTick+0x20>)
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	4b06      	ldr	r3, [pc, #24]	; (8002ecc <HAL_IncTick+0x24>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	4a04      	ldr	r2, [pc, #16]	; (8002ecc <HAL_IncTick+0x24>)
 8002eba:	6013      	str	r3, [r2, #0]
}
 8002ebc:	bf00      	nop
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	20000008 	.word	0x20000008
 8002ecc:	20006824 	.word	0x20006824

08002ed0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ed4:	4b03      	ldr	r3, [pc, #12]	; (8002ee4 <HAL_GetTick+0x14>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	20006824 	.word	0x20006824

08002ee8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ef0:	f7ff ffee 	bl	8002ed0 <HAL_GetTick>
 8002ef4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f00:	d005      	beq.n	8002f0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f02:	4b09      	ldr	r3, [pc, #36]	; (8002f28 <HAL_Delay+0x40>)
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	461a      	mov	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f0e:	bf00      	nop
 8002f10:	f7ff ffde 	bl	8002ed0 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d8f7      	bhi.n	8002f10 <HAL_Delay+0x28>
  {
  }
}
 8002f20:	bf00      	nop
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	20000008 	.word	0x20000008

08002f2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f003 0307 	and.w	r3, r3, #7
 8002f3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f3c:	4b0b      	ldr	r3, [pc, #44]	; (8002f6c <__NVIC_SetPriorityGrouping+0x40>)
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f42:	68ba      	ldr	r2, [r7, #8]
 8002f44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f48:	4013      	ands	r3, r2
 8002f4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002f54:	4b06      	ldr	r3, [pc, #24]	; (8002f70 <__NVIC_SetPriorityGrouping+0x44>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f5a:	4a04      	ldr	r2, [pc, #16]	; (8002f6c <__NVIC_SetPriorityGrouping+0x40>)
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	60d3      	str	r3, [r2, #12]
}
 8002f60:	bf00      	nop
 8002f62:	3714      	adds	r7, #20
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr
 8002f6c:	e000ed00 	.word	0xe000ed00
 8002f70:	05fa0000 	.word	0x05fa0000

08002f74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f78:	4b04      	ldr	r3, [pc, #16]	; (8002f8c <__NVIC_GetPriorityGrouping+0x18>)
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	0a1b      	lsrs	r3, r3, #8
 8002f7e:	f003 0307 	and.w	r3, r3, #7
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr
 8002f8c:	e000ed00 	.word	0xe000ed00

08002f90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	4603      	mov	r3, r0
 8002f98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	db0b      	blt.n	8002fba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fa2:	79fb      	ldrb	r3, [r7, #7]
 8002fa4:	f003 021f 	and.w	r2, r3, #31
 8002fa8:	4907      	ldr	r1, [pc, #28]	; (8002fc8 <__NVIC_EnableIRQ+0x38>)
 8002faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fae:	095b      	lsrs	r3, r3, #5
 8002fb0:	2001      	movs	r0, #1
 8002fb2:	fa00 f202 	lsl.w	r2, r0, r2
 8002fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002fba:	bf00      	nop
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	e000e100 	.word	0xe000e100

08002fcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	6039      	str	r1, [r7, #0]
 8002fd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	db0a      	blt.n	8002ff6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	b2da      	uxtb	r2, r3
 8002fe4:	490c      	ldr	r1, [pc, #48]	; (8003018 <__NVIC_SetPriority+0x4c>)
 8002fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fea:	0112      	lsls	r2, r2, #4
 8002fec:	b2d2      	uxtb	r2, r2
 8002fee:	440b      	add	r3, r1
 8002ff0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ff4:	e00a      	b.n	800300c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	b2da      	uxtb	r2, r3
 8002ffa:	4908      	ldr	r1, [pc, #32]	; (800301c <__NVIC_SetPriority+0x50>)
 8002ffc:	79fb      	ldrb	r3, [r7, #7]
 8002ffe:	f003 030f 	and.w	r3, r3, #15
 8003002:	3b04      	subs	r3, #4
 8003004:	0112      	lsls	r2, r2, #4
 8003006:	b2d2      	uxtb	r2, r2
 8003008:	440b      	add	r3, r1
 800300a:	761a      	strb	r2, [r3, #24]
}
 800300c:	bf00      	nop
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr
 8003018:	e000e100 	.word	0xe000e100
 800301c:	e000ed00 	.word	0xe000ed00

08003020 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003020:	b480      	push	{r7}
 8003022:	b089      	sub	sp, #36	; 0x24
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f003 0307 	and.w	r3, r3, #7
 8003032:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	f1c3 0307 	rsb	r3, r3, #7
 800303a:	2b04      	cmp	r3, #4
 800303c:	bf28      	it	cs
 800303e:	2304      	movcs	r3, #4
 8003040:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	3304      	adds	r3, #4
 8003046:	2b06      	cmp	r3, #6
 8003048:	d902      	bls.n	8003050 <NVIC_EncodePriority+0x30>
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	3b03      	subs	r3, #3
 800304e:	e000      	b.n	8003052 <NVIC_EncodePriority+0x32>
 8003050:	2300      	movs	r3, #0
 8003052:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003054:	f04f 32ff 	mov.w	r2, #4294967295
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	fa02 f303 	lsl.w	r3, r2, r3
 800305e:	43da      	mvns	r2, r3
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	401a      	ands	r2, r3
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003068:	f04f 31ff 	mov.w	r1, #4294967295
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	fa01 f303 	lsl.w	r3, r1, r3
 8003072:	43d9      	mvns	r1, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003078:	4313      	orrs	r3, r2
         );
}
 800307a:	4618      	mov	r0, r3
 800307c:	3724      	adds	r7, #36	; 0x24
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr

08003086 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003086:	b580      	push	{r7, lr}
 8003088:	b082      	sub	sp, #8
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f7ff ff4c 	bl	8002f2c <__NVIC_SetPriorityGrouping>
}
 8003094:	bf00      	nop
 8003096:	3708      	adds	r7, #8
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800309c:	b580      	push	{r7, lr}
 800309e:	b086      	sub	sp, #24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	4603      	mov	r3, r0
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]
 80030a8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80030aa:	2300      	movs	r3, #0
 80030ac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030ae:	f7ff ff61 	bl	8002f74 <__NVIC_GetPriorityGrouping>
 80030b2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	68b9      	ldr	r1, [r7, #8]
 80030b8:	6978      	ldr	r0, [r7, #20]
 80030ba:	f7ff ffb1 	bl	8003020 <NVIC_EncodePriority>
 80030be:	4602      	mov	r2, r0
 80030c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030c4:	4611      	mov	r1, r2
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7ff ff80 	bl	8002fcc <__NVIC_SetPriority>
}
 80030cc:	bf00      	nop
 80030ce:	3718      	adds	r7, #24
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	4603      	mov	r3, r0
 80030dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7ff ff54 	bl	8002f90 <__NVIC_EnableIRQ>
}
 80030e8:	bf00      	nop
 80030ea:	3708      	adds	r7, #8
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b089      	sub	sp, #36	; 0x24
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80030fa:	2300      	movs	r3, #0
 80030fc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80030fe:	2300      	movs	r3, #0
 8003100:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003102:	2300      	movs	r3, #0
 8003104:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003106:	2300      	movs	r3, #0
 8003108:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800310a:	2300      	movs	r3, #0
 800310c:	61fb      	str	r3, [r7, #28]
 800310e:	e175      	b.n	80033fc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003110:	2201      	movs	r2, #1
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	fa02 f303 	lsl.w	r3, r2, r3
 8003118:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	697a      	ldr	r2, [r7, #20]
 8003120:	4013      	ands	r3, r2
 8003122:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003124:	693a      	ldr	r2, [r7, #16]
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	429a      	cmp	r2, r3
 800312a:	f040 8164 	bne.w	80033f6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d00b      	beq.n	800314e <HAL_GPIO_Init+0x5e>
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	2b02      	cmp	r3, #2
 800313c:	d007      	beq.n	800314e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003142:	2b11      	cmp	r3, #17
 8003144:	d003      	beq.n	800314e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	2b12      	cmp	r3, #18
 800314c:	d130      	bne.n	80031b0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	005b      	lsls	r3, r3, #1
 8003158:	2203      	movs	r2, #3
 800315a:	fa02 f303 	lsl.w	r3, r2, r3
 800315e:	43db      	mvns	r3, r3
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	4013      	ands	r3, r2
 8003164:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	68da      	ldr	r2, [r3, #12]
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	fa02 f303 	lsl.w	r3, r2, r3
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	4313      	orrs	r3, r2
 8003176:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	69ba      	ldr	r2, [r7, #24]
 800317c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003184:	2201      	movs	r2, #1
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	fa02 f303 	lsl.w	r3, r2, r3
 800318c:	43db      	mvns	r3, r3
 800318e:	69ba      	ldr	r2, [r7, #24]
 8003190:	4013      	ands	r3, r2
 8003192:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	091b      	lsrs	r3, r3, #4
 800319a:	f003 0201 	and.w	r2, r3, #1
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	2203      	movs	r2, #3
 80031bc:	fa02 f303 	lsl.w	r3, r2, r3
 80031c0:	43db      	mvns	r3, r3
 80031c2:	69ba      	ldr	r2, [r7, #24]
 80031c4:	4013      	ands	r3, r2
 80031c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	005b      	lsls	r3, r3, #1
 80031d0:	fa02 f303 	lsl.w	r3, r2, r3
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	69ba      	ldr	r2, [r7, #24]
 80031de:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d003      	beq.n	80031f0 <HAL_GPIO_Init+0x100>
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	2b12      	cmp	r3, #18
 80031ee:	d123      	bne.n	8003238 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	08da      	lsrs	r2, r3, #3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	3208      	adds	r2, #8
 80031f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	f003 0307 	and.w	r3, r3, #7
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	220f      	movs	r2, #15
 8003208:	fa02 f303 	lsl.w	r3, r2, r3
 800320c:	43db      	mvns	r3, r3
 800320e:	69ba      	ldr	r2, [r7, #24]
 8003210:	4013      	ands	r3, r2
 8003212:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	691a      	ldr	r2, [r3, #16]
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	f003 0307 	and.w	r3, r3, #7
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	4313      	orrs	r3, r2
 8003228:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	08da      	lsrs	r2, r3, #3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	3208      	adds	r2, #8
 8003232:	69b9      	ldr	r1, [r7, #24]
 8003234:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	2203      	movs	r2, #3
 8003244:	fa02 f303 	lsl.w	r3, r2, r3
 8003248:	43db      	mvns	r3, r3
 800324a:	69ba      	ldr	r2, [r7, #24]
 800324c:	4013      	ands	r3, r2
 800324e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f003 0203 	and.w	r2, r3, #3
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	005b      	lsls	r3, r3, #1
 800325c:	fa02 f303 	lsl.w	r3, r2, r3
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	4313      	orrs	r3, r2
 8003264:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003274:	2b00      	cmp	r3, #0
 8003276:	f000 80be 	beq.w	80033f6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800327a:	4b65      	ldr	r3, [pc, #404]	; (8003410 <HAL_GPIO_Init+0x320>)
 800327c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327e:	4a64      	ldr	r2, [pc, #400]	; (8003410 <HAL_GPIO_Init+0x320>)
 8003280:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003284:	6453      	str	r3, [r2, #68]	; 0x44
 8003286:	4b62      	ldr	r3, [pc, #392]	; (8003410 <HAL_GPIO_Init+0x320>)
 8003288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800328e:	60fb      	str	r3, [r7, #12]
 8003290:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003292:	4a60      	ldr	r2, [pc, #384]	; (8003414 <HAL_GPIO_Init+0x324>)
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	089b      	lsrs	r3, r3, #2
 8003298:	3302      	adds	r3, #2
 800329a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800329e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	f003 0303 	and.w	r3, r3, #3
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	220f      	movs	r2, #15
 80032aa:	fa02 f303 	lsl.w	r3, r2, r3
 80032ae:	43db      	mvns	r3, r3
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	4013      	ands	r3, r2
 80032b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a57      	ldr	r2, [pc, #348]	; (8003418 <HAL_GPIO_Init+0x328>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d037      	beq.n	800332e <HAL_GPIO_Init+0x23e>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a56      	ldr	r2, [pc, #344]	; (800341c <HAL_GPIO_Init+0x32c>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d031      	beq.n	800332a <HAL_GPIO_Init+0x23a>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a55      	ldr	r2, [pc, #340]	; (8003420 <HAL_GPIO_Init+0x330>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d02b      	beq.n	8003326 <HAL_GPIO_Init+0x236>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a54      	ldr	r2, [pc, #336]	; (8003424 <HAL_GPIO_Init+0x334>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d025      	beq.n	8003322 <HAL_GPIO_Init+0x232>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a53      	ldr	r2, [pc, #332]	; (8003428 <HAL_GPIO_Init+0x338>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d01f      	beq.n	800331e <HAL_GPIO_Init+0x22e>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a52      	ldr	r2, [pc, #328]	; (800342c <HAL_GPIO_Init+0x33c>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d019      	beq.n	800331a <HAL_GPIO_Init+0x22a>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a51      	ldr	r2, [pc, #324]	; (8003430 <HAL_GPIO_Init+0x340>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d013      	beq.n	8003316 <HAL_GPIO_Init+0x226>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a50      	ldr	r2, [pc, #320]	; (8003434 <HAL_GPIO_Init+0x344>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d00d      	beq.n	8003312 <HAL_GPIO_Init+0x222>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a4f      	ldr	r2, [pc, #316]	; (8003438 <HAL_GPIO_Init+0x348>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d007      	beq.n	800330e <HAL_GPIO_Init+0x21e>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a4e      	ldr	r2, [pc, #312]	; (800343c <HAL_GPIO_Init+0x34c>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d101      	bne.n	800330a <HAL_GPIO_Init+0x21a>
 8003306:	2309      	movs	r3, #9
 8003308:	e012      	b.n	8003330 <HAL_GPIO_Init+0x240>
 800330a:	230a      	movs	r3, #10
 800330c:	e010      	b.n	8003330 <HAL_GPIO_Init+0x240>
 800330e:	2308      	movs	r3, #8
 8003310:	e00e      	b.n	8003330 <HAL_GPIO_Init+0x240>
 8003312:	2307      	movs	r3, #7
 8003314:	e00c      	b.n	8003330 <HAL_GPIO_Init+0x240>
 8003316:	2306      	movs	r3, #6
 8003318:	e00a      	b.n	8003330 <HAL_GPIO_Init+0x240>
 800331a:	2305      	movs	r3, #5
 800331c:	e008      	b.n	8003330 <HAL_GPIO_Init+0x240>
 800331e:	2304      	movs	r3, #4
 8003320:	e006      	b.n	8003330 <HAL_GPIO_Init+0x240>
 8003322:	2303      	movs	r3, #3
 8003324:	e004      	b.n	8003330 <HAL_GPIO_Init+0x240>
 8003326:	2302      	movs	r3, #2
 8003328:	e002      	b.n	8003330 <HAL_GPIO_Init+0x240>
 800332a:	2301      	movs	r3, #1
 800332c:	e000      	b.n	8003330 <HAL_GPIO_Init+0x240>
 800332e:	2300      	movs	r3, #0
 8003330:	69fa      	ldr	r2, [r7, #28]
 8003332:	f002 0203 	and.w	r2, r2, #3
 8003336:	0092      	lsls	r2, r2, #2
 8003338:	4093      	lsls	r3, r2
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	4313      	orrs	r3, r2
 800333e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003340:	4934      	ldr	r1, [pc, #208]	; (8003414 <HAL_GPIO_Init+0x324>)
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	089b      	lsrs	r3, r3, #2
 8003346:	3302      	adds	r3, #2
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800334e:	4b3c      	ldr	r3, [pc, #240]	; (8003440 <HAL_GPIO_Init+0x350>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	43db      	mvns	r3, r3
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	4013      	ands	r3, r2
 800335c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d003      	beq.n	8003372 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800336a:	69ba      	ldr	r2, [r7, #24]
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	4313      	orrs	r3, r2
 8003370:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003372:	4a33      	ldr	r2, [pc, #204]	; (8003440 <HAL_GPIO_Init+0x350>)
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003378:	4b31      	ldr	r3, [pc, #196]	; (8003440 <HAL_GPIO_Init+0x350>)
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	43db      	mvns	r3, r3
 8003382:	69ba      	ldr	r2, [r7, #24]
 8003384:	4013      	ands	r3, r2
 8003386:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d003      	beq.n	800339c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	4313      	orrs	r3, r2
 800339a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800339c:	4a28      	ldr	r2, [pc, #160]	; (8003440 <HAL_GPIO_Init+0x350>)
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033a2:	4b27      	ldr	r3, [pc, #156]	; (8003440 <HAL_GPIO_Init+0x350>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	43db      	mvns	r3, r3
 80033ac:	69ba      	ldr	r2, [r7, #24]
 80033ae:	4013      	ands	r3, r2
 80033b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d003      	beq.n	80033c6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80033be:	69ba      	ldr	r2, [r7, #24]
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033c6:	4a1e      	ldr	r2, [pc, #120]	; (8003440 <HAL_GPIO_Init+0x350>)
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033cc:	4b1c      	ldr	r3, [pc, #112]	; (8003440 <HAL_GPIO_Init+0x350>)
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	43db      	mvns	r3, r3
 80033d6:	69ba      	ldr	r2, [r7, #24]
 80033d8:	4013      	ands	r3, r2
 80033da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d003      	beq.n	80033f0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033f0:	4a13      	ldr	r2, [pc, #76]	; (8003440 <HAL_GPIO_Init+0x350>)
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	3301      	adds	r3, #1
 80033fa:	61fb      	str	r3, [r7, #28]
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	2b0f      	cmp	r3, #15
 8003400:	f67f ae86 	bls.w	8003110 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003404:	bf00      	nop
 8003406:	3724      	adds	r7, #36	; 0x24
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	40023800 	.word	0x40023800
 8003414:	40013800 	.word	0x40013800
 8003418:	40020000 	.word	0x40020000
 800341c:	40020400 	.word	0x40020400
 8003420:	40020800 	.word	0x40020800
 8003424:	40020c00 	.word	0x40020c00
 8003428:	40021000 	.word	0x40021000
 800342c:	40021400 	.word	0x40021400
 8003430:	40021800 	.word	0x40021800
 8003434:	40021c00 	.word	0x40021c00
 8003438:	40022000 	.word	0x40022000
 800343c:	40022400 	.word	0x40022400
 8003440:	40013c00 	.word	0x40013c00

08003444 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003446:	b08f      	sub	sp, #60	; 0x3c
 8003448:	af0a      	add	r7, sp, #40	; 0x28
 800344a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e116      	b.n	8003684 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b00      	cmp	r3, #0
 8003466:	d106      	bne.n	8003476 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f009 fe31 	bl	800d0d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2203      	movs	r2, #3
 800347a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003486:	2b00      	cmp	r3, #0
 8003488:	d102      	bne.n	8003490 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4618      	mov	r0, r3
 8003496:	f003 fab2 	bl	80069fe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	603b      	str	r3, [r7, #0]
 80034a0:	687e      	ldr	r6, [r7, #4]
 80034a2:	466d      	mov	r5, sp
 80034a4:	f106 0410 	add.w	r4, r6, #16
 80034a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80034b4:	e885 0003 	stmia.w	r5, {r0, r1}
 80034b8:	1d33      	adds	r3, r6, #4
 80034ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034bc:	6838      	ldr	r0, [r7, #0]
 80034be:	f003 f993 	bl	80067e8 <USB_CoreInit>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d005      	beq.n	80034d4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2202      	movs	r2, #2
 80034cc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e0d7      	b.n	8003684 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2100      	movs	r1, #0
 80034da:	4618      	mov	r0, r3
 80034dc:	f003 faa0 	bl	8006a20 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034e0:	2300      	movs	r3, #0
 80034e2:	73fb      	strb	r3, [r7, #15]
 80034e4:	e04a      	b.n	800357c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80034e6:	7bfa      	ldrb	r2, [r7, #15]
 80034e8:	6879      	ldr	r1, [r7, #4]
 80034ea:	4613      	mov	r3, r2
 80034ec:	00db      	lsls	r3, r3, #3
 80034ee:	1a9b      	subs	r3, r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	440b      	add	r3, r1
 80034f4:	333d      	adds	r3, #61	; 0x3d
 80034f6:	2201      	movs	r2, #1
 80034f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80034fa:	7bfa      	ldrb	r2, [r7, #15]
 80034fc:	6879      	ldr	r1, [r7, #4]
 80034fe:	4613      	mov	r3, r2
 8003500:	00db      	lsls	r3, r3, #3
 8003502:	1a9b      	subs	r3, r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	440b      	add	r3, r1
 8003508:	333c      	adds	r3, #60	; 0x3c
 800350a:	7bfa      	ldrb	r2, [r7, #15]
 800350c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800350e:	7bfa      	ldrb	r2, [r7, #15]
 8003510:	7bfb      	ldrb	r3, [r7, #15]
 8003512:	b298      	uxth	r0, r3
 8003514:	6879      	ldr	r1, [r7, #4]
 8003516:	4613      	mov	r3, r2
 8003518:	00db      	lsls	r3, r3, #3
 800351a:	1a9b      	subs	r3, r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	440b      	add	r3, r1
 8003520:	3342      	adds	r3, #66	; 0x42
 8003522:	4602      	mov	r2, r0
 8003524:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003526:	7bfa      	ldrb	r2, [r7, #15]
 8003528:	6879      	ldr	r1, [r7, #4]
 800352a:	4613      	mov	r3, r2
 800352c:	00db      	lsls	r3, r3, #3
 800352e:	1a9b      	subs	r3, r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	440b      	add	r3, r1
 8003534:	333f      	adds	r3, #63	; 0x3f
 8003536:	2200      	movs	r2, #0
 8003538:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800353a:	7bfa      	ldrb	r2, [r7, #15]
 800353c:	6879      	ldr	r1, [r7, #4]
 800353e:	4613      	mov	r3, r2
 8003540:	00db      	lsls	r3, r3, #3
 8003542:	1a9b      	subs	r3, r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	440b      	add	r3, r1
 8003548:	3344      	adds	r3, #68	; 0x44
 800354a:	2200      	movs	r2, #0
 800354c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800354e:	7bfa      	ldrb	r2, [r7, #15]
 8003550:	6879      	ldr	r1, [r7, #4]
 8003552:	4613      	mov	r3, r2
 8003554:	00db      	lsls	r3, r3, #3
 8003556:	1a9b      	subs	r3, r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	440b      	add	r3, r1
 800355c:	3348      	adds	r3, #72	; 0x48
 800355e:	2200      	movs	r2, #0
 8003560:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003562:	7bfa      	ldrb	r2, [r7, #15]
 8003564:	6879      	ldr	r1, [r7, #4]
 8003566:	4613      	mov	r3, r2
 8003568:	00db      	lsls	r3, r3, #3
 800356a:	1a9b      	subs	r3, r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	440b      	add	r3, r1
 8003570:	3350      	adds	r3, #80	; 0x50
 8003572:	2200      	movs	r2, #0
 8003574:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003576:	7bfb      	ldrb	r3, [r7, #15]
 8003578:	3301      	adds	r3, #1
 800357a:	73fb      	strb	r3, [r7, #15]
 800357c:	7bfa      	ldrb	r2, [r7, #15]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	429a      	cmp	r2, r3
 8003584:	d3af      	bcc.n	80034e6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003586:	2300      	movs	r3, #0
 8003588:	73fb      	strb	r3, [r7, #15]
 800358a:	e044      	b.n	8003616 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800358c:	7bfa      	ldrb	r2, [r7, #15]
 800358e:	6879      	ldr	r1, [r7, #4]
 8003590:	4613      	mov	r3, r2
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	1a9b      	subs	r3, r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	440b      	add	r3, r1
 800359a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800359e:	2200      	movs	r2, #0
 80035a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80035a2:	7bfa      	ldrb	r2, [r7, #15]
 80035a4:	6879      	ldr	r1, [r7, #4]
 80035a6:	4613      	mov	r3, r2
 80035a8:	00db      	lsls	r3, r3, #3
 80035aa:	1a9b      	subs	r3, r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	440b      	add	r3, r1
 80035b0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80035b4:	7bfa      	ldrb	r2, [r7, #15]
 80035b6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80035b8:	7bfa      	ldrb	r2, [r7, #15]
 80035ba:	6879      	ldr	r1, [r7, #4]
 80035bc:	4613      	mov	r3, r2
 80035be:	00db      	lsls	r3, r3, #3
 80035c0:	1a9b      	subs	r3, r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	440b      	add	r3, r1
 80035c6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80035ca:	2200      	movs	r2, #0
 80035cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80035ce:	7bfa      	ldrb	r2, [r7, #15]
 80035d0:	6879      	ldr	r1, [r7, #4]
 80035d2:	4613      	mov	r3, r2
 80035d4:	00db      	lsls	r3, r3, #3
 80035d6:	1a9b      	subs	r3, r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	440b      	add	r3, r1
 80035dc:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80035e0:	2200      	movs	r2, #0
 80035e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80035e4:	7bfa      	ldrb	r2, [r7, #15]
 80035e6:	6879      	ldr	r1, [r7, #4]
 80035e8:	4613      	mov	r3, r2
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	1a9b      	subs	r3, r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	440b      	add	r3, r1
 80035f2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80035f6:	2200      	movs	r2, #0
 80035f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80035fa:	7bfa      	ldrb	r2, [r7, #15]
 80035fc:	6879      	ldr	r1, [r7, #4]
 80035fe:	4613      	mov	r3, r2
 8003600:	00db      	lsls	r3, r3, #3
 8003602:	1a9b      	subs	r3, r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	440b      	add	r3, r1
 8003608:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800360c:	2200      	movs	r2, #0
 800360e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003610:	7bfb      	ldrb	r3, [r7, #15]
 8003612:	3301      	adds	r3, #1
 8003614:	73fb      	strb	r3, [r7, #15]
 8003616:	7bfa      	ldrb	r2, [r7, #15]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	429a      	cmp	r2, r3
 800361e:	d3b5      	bcc.n	800358c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	603b      	str	r3, [r7, #0]
 8003626:	687e      	ldr	r6, [r7, #4]
 8003628:	466d      	mov	r5, sp
 800362a:	f106 0410 	add.w	r4, r6, #16
 800362e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003630:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003632:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003634:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003636:	e894 0003 	ldmia.w	r4, {r0, r1}
 800363a:	e885 0003 	stmia.w	r5, {r0, r1}
 800363e:	1d33      	adds	r3, r6, #4
 8003640:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003642:	6838      	ldr	r0, [r7, #0]
 8003644:	f003 fa16 	bl	8006a74 <USB_DevInit>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d005      	beq.n	800365a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2202      	movs	r2, #2
 8003652:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e014      	b.n	8003684 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2201      	movs	r2, #1
 8003666:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366e:	2b01      	cmp	r3, #1
 8003670:	d102      	bne.n	8003678 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f001 f880 	bl	8004778 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4618      	mov	r0, r3
 800367e:	f004 fa65 	bl	8007b4c <USB_DevDisconnect>

  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	3714      	adds	r7, #20
 8003688:	46bd      	mov	sp, r7
 800368a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800368c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800369a:	2b01      	cmp	r3, #1
 800369c:	d101      	bne.n	80036a2 <HAL_PCD_Start+0x16>
 800369e:	2302      	movs	r3, #2
 80036a0:	e012      	b.n	80036c8 <HAL_PCD_Start+0x3c>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DevConnect(hpcd->Instance);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f004 fa34 	bl	8007b1c <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4618      	mov	r0, r3
 80036ba:	f003 f98f 	bl	80069dc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80036c6:	2300      	movs	r3, #0
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3708      	adds	r7, #8
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80036d0:	b590      	push	{r4, r7, lr}
 80036d2:	b08d      	sub	sp, #52	; 0x34
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036de:	6a3b      	ldr	r3, [r7, #32]
 80036e0:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f004 fadb 	bl	8007ca2 <USB_GetMode>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f040 83ca 	bne.w	8003e88 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4618      	mov	r0, r3
 80036fa:	f004 fa3f 	bl	8007b7c <USB_ReadInterrupts>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	f000 83c0 	beq.w	8003e86 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4618      	mov	r0, r3
 800370c:	f004 fa36 	bl	8007b7c <USB_ReadInterrupts>
 8003710:	4603      	mov	r3, r0
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b02      	cmp	r3, #2
 8003718:	d107      	bne.n	800372a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	695a      	ldr	r2, [r3, #20]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f002 0202 	and.w	r2, r2, #2
 8003728:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4618      	mov	r0, r3
 8003730:	f004 fa24 	bl	8007b7c <USB_ReadInterrupts>
 8003734:	4603      	mov	r3, r0
 8003736:	f003 0310 	and.w	r3, r3, #16
 800373a:	2b10      	cmp	r3, #16
 800373c:	d161      	bne.n	8003802 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	699a      	ldr	r2, [r3, #24]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f022 0210 	bic.w	r2, r2, #16
 800374c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800374e:	6a3b      	ldr	r3, [r7, #32]
 8003750:	6a1b      	ldr	r3, [r3, #32]
 8003752:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	f003 020f 	and.w	r2, r3, #15
 800375a:	4613      	mov	r3, r2
 800375c:	00db      	lsls	r3, r3, #3
 800375e:	1a9b      	subs	r3, r3, r2
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	4413      	add	r3, r2
 800376a:	3304      	adds	r3, #4
 800376c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	0c5b      	lsrs	r3, r3, #17
 8003772:	f003 030f 	and.w	r3, r3, #15
 8003776:	2b02      	cmp	r3, #2
 8003778:	d124      	bne.n	80037c4 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003780:	4013      	ands	r3, r2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d035      	beq.n	80037f2 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	091b      	lsrs	r3, r3, #4
 800378e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003790:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003794:	b29b      	uxth	r3, r3
 8003796:	461a      	mov	r2, r3
 8003798:	6a38      	ldr	r0, [r7, #32]
 800379a:	f004 f89c 	bl	80078d6 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	68da      	ldr	r2, [r3, #12]
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	091b      	lsrs	r3, r3, #4
 80037a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037aa:	441a      	add	r2, r3
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	699a      	ldr	r2, [r3, #24]
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	091b      	lsrs	r3, r3, #4
 80037b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037bc:	441a      	add	r2, r3
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	619a      	str	r2, [r3, #24]
 80037c2:	e016      	b.n	80037f2 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	0c5b      	lsrs	r3, r3, #17
 80037c8:	f003 030f 	and.w	r3, r3, #15
 80037cc:	2b06      	cmp	r3, #6
 80037ce:	d110      	bne.n	80037f2 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80037d6:	2208      	movs	r2, #8
 80037d8:	4619      	mov	r1, r3
 80037da:	6a38      	ldr	r0, [r7, #32]
 80037dc:	f004 f87b 	bl	80078d6 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	699a      	ldr	r2, [r3, #24]
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	091b      	lsrs	r3, r3, #4
 80037e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037ec:	441a      	add	r2, r3
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	699a      	ldr	r2, [r3, #24]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f042 0210 	orr.w	r2, r2, #16
 8003800:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4618      	mov	r0, r3
 8003808:	f004 f9b8 	bl	8007b7c <USB_ReadInterrupts>
 800380c:	4603      	mov	r3, r0
 800380e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003812:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003816:	d16e      	bne.n	80038f6 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003818:	2300      	movs	r3, #0
 800381a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4618      	mov	r0, r3
 8003822:	f004 f9be 	bl	8007ba2 <USB_ReadDevAllOutEpInterrupt>
 8003826:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003828:	e062      	b.n	80038f0 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800382a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800382c:	f003 0301 	and.w	r3, r3, #1
 8003830:	2b00      	cmp	r3, #0
 8003832:	d057      	beq.n	80038e4 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800383a:	b2d2      	uxtb	r2, r2
 800383c:	4611      	mov	r1, r2
 800383e:	4618      	mov	r0, r3
 8003840:	f004 f9e3 	bl	8007c0a <USB_ReadDevOutEPInterrupt>
 8003844:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	f003 0301 	and.w	r3, r3, #1
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00c      	beq.n	800386a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003852:	015a      	lsls	r2, r3, #5
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	4413      	add	r3, r2
 8003858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800385c:	461a      	mov	r2, r3
 800385e:	2301      	movs	r3, #1
 8003860:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003862:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 fddd 	bl	8004424 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	f003 0308 	and.w	r3, r3, #8
 8003870:	2b00      	cmp	r3, #0
 8003872:	d00c      	beq.n	800388e <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003876:	015a      	lsls	r2, r3, #5
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	4413      	add	r3, r2
 800387c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003880:	461a      	mov	r2, r3
 8003882:	2308      	movs	r3, #8
 8003884:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003886:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f000 fed7 	bl	800463c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	f003 0310 	and.w	r3, r3, #16
 8003894:	2b00      	cmp	r3, #0
 8003896:	d008      	beq.n	80038aa <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389a:	015a      	lsls	r2, r3, #5
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	4413      	add	r3, r2
 80038a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038a4:	461a      	mov	r2, r3
 80038a6:	2310      	movs	r3, #16
 80038a8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	f003 0320 	and.w	r3, r3, #32
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d008      	beq.n	80038c6 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80038b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b6:	015a      	lsls	r2, r3, #5
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	4413      	add	r3, r2
 80038bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038c0:	461a      	mov	r2, r3
 80038c2:	2320      	movs	r3, #32
 80038c4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d009      	beq.n	80038e4 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80038d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d2:	015a      	lsls	r2, r3, #5
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	4413      	add	r3, r2
 80038d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038dc:	461a      	mov	r2, r3
 80038de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80038e2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80038e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e6:	3301      	adds	r3, #1
 80038e8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80038ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ec:	085b      	lsrs	r3, r3, #1
 80038ee:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80038f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d199      	bne.n	800382a <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4618      	mov	r0, r3
 80038fc:	f004 f93e 	bl	8007b7c <USB_ReadInterrupts>
 8003900:	4603      	mov	r3, r0
 8003902:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003906:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800390a:	f040 80c0 	bne.w	8003a8e <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4618      	mov	r0, r3
 8003914:	f004 f95f 	bl	8007bd6 <USB_ReadDevAllInEpInterrupt>
 8003918:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800391a:	2300      	movs	r3, #0
 800391c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800391e:	e0b2      	b.n	8003a86 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	2b00      	cmp	r3, #0
 8003928:	f000 80a7 	beq.w	8003a7a <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003932:	b2d2      	uxtb	r2, r2
 8003934:	4611      	mov	r1, r2
 8003936:	4618      	mov	r0, r3
 8003938:	f004 f985 	bl	8007c46 <USB_ReadDevInEPInterrupt>
 800393c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	f003 0301 	and.w	r3, r3, #1
 8003944:	2b00      	cmp	r3, #0
 8003946:	d057      	beq.n	80039f8 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394a:	f003 030f 	and.w	r3, r3, #15
 800394e:	2201      	movs	r2, #1
 8003950:	fa02 f303 	lsl.w	r3, r2, r3
 8003954:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800395c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	43db      	mvns	r3, r3
 8003962:	69f9      	ldr	r1, [r7, #28]
 8003964:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003968:	4013      	ands	r3, r2
 800396a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800396c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396e:	015a      	lsls	r2, r3, #5
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	4413      	add	r3, r2
 8003974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003978:	461a      	mov	r2, r3
 800397a:	2301      	movs	r3, #1
 800397c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d132      	bne.n	80039ec <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003986:	6879      	ldr	r1, [r7, #4]
 8003988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800398a:	4613      	mov	r3, r2
 800398c:	00db      	lsls	r3, r3, #3
 800398e:	1a9b      	subs	r3, r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	440b      	add	r3, r1
 8003994:	3348      	adds	r3, #72	; 0x48
 8003996:	6819      	ldr	r1, [r3, #0]
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800399c:	4613      	mov	r3, r2
 800399e:	00db      	lsls	r3, r3, #3
 80039a0:	1a9b      	subs	r3, r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	4403      	add	r3, r0
 80039a6:	3344      	adds	r3, #68	; 0x44
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4419      	add	r1, r3
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039b0:	4613      	mov	r3, r2
 80039b2:	00db      	lsls	r3, r3, #3
 80039b4:	1a9b      	subs	r3, r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	4403      	add	r3, r0
 80039ba:	3348      	adds	r3, #72	; 0x48
 80039bc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80039be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d113      	bne.n	80039ec <HAL_PCD_IRQHandler+0x31c>
 80039c4:	6879      	ldr	r1, [r7, #4]
 80039c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039c8:	4613      	mov	r3, r2
 80039ca:	00db      	lsls	r3, r3, #3
 80039cc:	1a9b      	subs	r3, r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	440b      	add	r3, r1
 80039d2:	3350      	adds	r3, #80	; 0x50
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d108      	bne.n	80039ec <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6818      	ldr	r0, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80039e4:	461a      	mov	r2, r3
 80039e6:	2101      	movs	r1, #1
 80039e8:	f004 f98e 	bl	8007d08 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80039ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	4619      	mov	r1, r3
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f009 fbf3 	bl	800d1de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	f003 0308 	and.w	r3, r3, #8
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d008      	beq.n	8003a14 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a04:	015a      	lsls	r2, r3, #5
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	4413      	add	r3, r2
 8003a0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a0e:	461a      	mov	r2, r3
 8003a10:	2308      	movs	r3, #8
 8003a12:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	f003 0310 	and.w	r3, r3, #16
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d008      	beq.n	8003a30 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a20:	015a      	lsls	r2, r3, #5
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	4413      	add	r3, r2
 8003a26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	2310      	movs	r3, #16
 8003a2e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d008      	beq.n	8003a4c <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3c:	015a      	lsls	r2, r3, #5
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	4413      	add	r3, r2
 8003a42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a46:	461a      	mov	r2, r3
 8003a48:	2340      	movs	r3, #64	; 0x40
 8003a4a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d008      	beq.n	8003a68 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a58:	015a      	lsls	r2, r3, #5
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	4413      	add	r3, r2
 8003a5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a62:	461a      	mov	r2, r3
 8003a64:	2302      	movs	r3, #2
 8003a66:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d003      	beq.n	8003a7a <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003a72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f000 fc48 	bl	800430a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a82:	085b      	lsrs	r3, r3, #1
 8003a84:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	f47f af49 	bne.w	8003920 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f004 f872 	bl	8007b7c <USB_ReadInterrupts>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003aa2:	d122      	bne.n	8003aea <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	69fa      	ldr	r2, [r7, #28]
 8003aae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ab2:	f023 0301 	bic.w	r3, r3, #1
 8003ab6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d108      	bne.n	8003ad4 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003aca:	2100      	movs	r1, #0
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f009 fdd5 	bl	800d67c <HAL_PCDEx_LPM_Callback>
 8003ad2:	e002      	b.n	8003ada <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f009 fbf9 	bl	800d2cc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	695a      	ldr	r2, [r3, #20]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003ae8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f004 f844 	bl	8007b7c <USB_ReadInterrupts>
 8003af4:	4603      	mov	r3, r0
 8003af6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003afa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003afe:	d112      	bne.n	8003b26 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	f003 0301 	and.w	r3, r3, #1
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d102      	bne.n	8003b16 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f009 fbb5 	bl	800d280 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	695a      	ldr	r2, [r3, #20]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003b24:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f004 f826 	bl	8007b7c <USB_ReadInterrupts>
 8003b30:	4603      	mov	r3, r0
 8003b32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b3a:	d121      	bne.n	8003b80 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	695a      	ldr	r2, [r3, #20]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003b4a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d111      	bne.n	8003b7a <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2201      	movs	r2, #1
 8003b5a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b64:	089b      	lsrs	r3, r3, #2
 8003b66:	f003 020f 	and.w	r2, r3, #15
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003b70:	2101      	movs	r1, #1
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f009 fd82 	bl	800d67c <HAL_PCDEx_LPM_Callback>
 8003b78:	e002      	b.n	8003b80 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f009 fb80 	bl	800d280 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4618      	mov	r0, r3
 8003b86:	f003 fff9 	bl	8007b7c <USB_ReadInterrupts>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b94:	f040 80c7 	bne.w	8003d26 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	69fa      	ldr	r2, [r7, #28]
 8003ba2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ba6:	f023 0301 	bic.w	r3, r3, #1
 8003baa:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2110      	movs	r1, #16
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f003 f8cc 	bl	8006d50 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bb8:	2300      	movs	r3, #0
 8003bba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bbc:	e056      	b.n	8003c6c <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc0:	015a      	lsls	r2, r3, #5
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bca:	461a      	mov	r2, r3
 8003bcc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003bd0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd4:	015a      	lsls	r2, r3, #5
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	4413      	add	r3, r2
 8003bda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003be2:	0151      	lsls	r1, r2, #5
 8003be4:	69fa      	ldr	r2, [r7, #28]
 8003be6:	440a      	add	r2, r1
 8003be8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003bf0:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf4:	015a      	lsls	r2, r3, #5
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c02:	0151      	lsls	r1, r2, #5
 8003c04:	69fa      	ldr	r2, [r7, #28]
 8003c06:	440a      	add	r2, r1
 8003c08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c0c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c10:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c14:	015a      	lsls	r2, r3, #5
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	4413      	add	r3, r2
 8003c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c1e:	461a      	mov	r2, r3
 8003c20:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c24:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c28:	015a      	lsls	r2, r3, #5
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c36:	0151      	lsls	r1, r2, #5
 8003c38:	69fa      	ldr	r2, [r7, #28]
 8003c3a:	440a      	add	r2, r1
 8003c3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c40:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c44:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c48:	015a      	lsls	r2, r3, #5
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c56:	0151      	lsls	r1, r2, #5
 8003c58:	69fa      	ldr	r2, [r7, #28]
 8003c5a:	440a      	add	r2, r1
 8003c5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c60:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c64:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c68:	3301      	adds	r3, #1
 8003c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d3a3      	bcc.n	8003bbe <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c7c:	69db      	ldr	r3, [r3, #28]
 8003c7e:	69fa      	ldr	r2, [r7, #28]
 8003c80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c84:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003c88:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d016      	beq.n	8003cc0 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c9c:	69fa      	ldr	r2, [r7, #28]
 8003c9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ca2:	f043 030b 	orr.w	r3, r3, #11
 8003ca6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb2:	69fa      	ldr	r2, [r7, #28]
 8003cb4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cb8:	f043 030b 	orr.w	r3, r3, #11
 8003cbc:	6453      	str	r3, [r2, #68]	; 0x44
 8003cbe:	e015      	b.n	8003cec <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cc6:	695a      	ldr	r2, [r3, #20]
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cce:	4619      	mov	r1, r3
 8003cd0:	f242 032b 	movw	r3, #8235	; 0x202b
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	69fa      	ldr	r2, [r7, #28]
 8003ce2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ce6:	f043 030b 	orr.w	r3, r3, #11
 8003cea:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	69fa      	ldr	r2, [r7, #28]
 8003cf6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cfa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003cfe:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6818      	ldr	r0, [r3, #0]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003d10:	461a      	mov	r2, r3
 8003d12:	f003 fff9 	bl	8007d08 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	695a      	ldr	r2, [r3, #20]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003d24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f003 ff26 	bl	8007b7c <USB_ReadInterrupts>
 8003d30:	4603      	mov	r3, r0
 8003d32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d3a:	d124      	bne.n	8003d86 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4618      	mov	r0, r3
 8003d42:	f003 ffbd 	bl	8007cc0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f003 f861 	bl	8006e12 <USB_GetDevSpeed>
 8003d50:	4603      	mov	r3, r0
 8003d52:	461a      	mov	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681c      	ldr	r4, [r3, #0]
 8003d5c:	f001 f998 	bl	8005090 <HAL_RCC_GetHCLKFreq>
 8003d60:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	461a      	mov	r2, r3
 8003d6a:	4620      	mov	r0, r4
 8003d6c:	f002 fd94 	bl	8006898 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f009 fa5c 	bl	800d22e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	695a      	ldr	r2, [r3, #20]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003d84:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f003 fef6 	bl	8007b7c <USB_ReadInterrupts>
 8003d90:	4603      	mov	r3, r0
 8003d92:	f003 0308 	and.w	r3, r3, #8
 8003d96:	2b08      	cmp	r3, #8
 8003d98:	d10a      	bne.n	8003db0 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f009 fa39 	bl	800d212 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	695a      	ldr	r2, [r3, #20]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f002 0208 	and.w	r2, r2, #8
 8003dae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4618      	mov	r0, r3
 8003db6:	f003 fee1 	bl	8007b7c <USB_ReadInterrupts>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dc4:	d10f      	bne.n	8003de6 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	4619      	mov	r1, r3
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f009 fa9b 	bl	800d30c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	695a      	ldr	r2, [r3, #20]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003de4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f003 fec6 	bl	8007b7c <USB_ReadInterrupts>
 8003df0:	4603      	mov	r3, r0
 8003df2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003df6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003dfa:	d10f      	bne.n	8003e1c <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	4619      	mov	r1, r3
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f009 fa6e 	bl	800d2e8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	695a      	ldr	r2, [r3, #20]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003e1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4618      	mov	r0, r3
 8003e22:	f003 feab 	bl	8007b7c <USB_ReadInterrupts>
 8003e26:	4603      	mov	r3, r0
 8003e28:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e30:	d10a      	bne.n	8003e48 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f009 fa7c 	bl	800d330 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	695a      	ldr	r2, [r3, #20]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003e46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f003 fe95 	bl	8007b7c <USB_ReadInterrupts>
 8003e52:	4603      	mov	r3, r0
 8003e54:	f003 0304 	and.w	r3, r3, #4
 8003e58:	2b04      	cmp	r3, #4
 8003e5a:	d115      	bne.n	8003e88 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	f003 0304 	and.w	r3, r3, #4
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d002      	beq.n	8003e74 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f009 fa6c 	bl	800d34c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	6859      	ldr	r1, [r3, #4]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	69ba      	ldr	r2, [r7, #24]
 8003e80:	430a      	orrs	r2, r1
 8003e82:	605a      	str	r2, [r3, #4]
 8003e84:	e000      	b.n	8003e88 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8003e86:	bf00      	nop
    }
  }
}
 8003e88:	3734      	adds	r7, #52	; 0x34
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd90      	pop	{r4, r7, pc}

08003e8e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b082      	sub	sp, #8
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
 8003e96:	460b      	mov	r3, r1
 8003e98:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d101      	bne.n	8003ea8 <HAL_PCD_SetAddress+0x1a>
 8003ea4:	2302      	movs	r3, #2
 8003ea6:	e013      	b.n	8003ed0 <HAL_PCD_SetAddress+0x42>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	78fa      	ldrb	r2, [r7, #3]
 8003eb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	78fa      	ldrb	r2, [r7, #3]
 8003ebe:	4611      	mov	r1, r2
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f003 fe05 	bl	8007ad0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003ece:	2300      	movs	r3, #0
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3708      	adds	r7, #8
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	4608      	mov	r0, r1
 8003ee2:	4611      	mov	r1, r2
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	70fb      	strb	r3, [r7, #3]
 8003eea:	460b      	mov	r3, r1
 8003eec:	803b      	strh	r3, [r7, #0]
 8003eee:	4613      	mov	r3, r2
 8003ef0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ef6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	da0f      	bge.n	8003f1e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003efe:	78fb      	ldrb	r3, [r7, #3]
 8003f00:	f003 020f 	and.w	r2, r3, #15
 8003f04:	4613      	mov	r3, r2
 8003f06:	00db      	lsls	r3, r3, #3
 8003f08:	1a9b      	subs	r3, r3, r2
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	3338      	adds	r3, #56	; 0x38
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	4413      	add	r3, r2
 8003f12:	3304      	adds	r3, #4
 8003f14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	705a      	strb	r2, [r3, #1]
 8003f1c:	e00f      	b.n	8003f3e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f1e:	78fb      	ldrb	r3, [r7, #3]
 8003f20:	f003 020f 	and.w	r2, r3, #15
 8003f24:	4613      	mov	r3, r2
 8003f26:	00db      	lsls	r3, r3, #3
 8003f28:	1a9b      	subs	r3, r3, r2
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	4413      	add	r3, r2
 8003f34:	3304      	adds	r3, #4
 8003f36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003f3e:	78fb      	ldrb	r3, [r7, #3]
 8003f40:	f003 030f 	and.w	r3, r3, #15
 8003f44:	b2da      	uxtb	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003f4a:	883a      	ldrh	r2, [r7, #0]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	78ba      	ldrb	r2, [r7, #2]
 8003f54:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	785b      	ldrb	r3, [r3, #1]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d004      	beq.n	8003f68 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	b29a      	uxth	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003f68:	78bb      	ldrb	r3, [r7, #2]
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d102      	bne.n	8003f74 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2200      	movs	r2, #0
 8003f72:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d101      	bne.n	8003f82 <HAL_PCD_EP_Open+0xaa>
 8003f7e:	2302      	movs	r3, #2
 8003f80:	e00e      	b.n	8003fa0 <HAL_PCD_EP_Open+0xc8>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2201      	movs	r2, #1
 8003f86:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68f9      	ldr	r1, [r7, #12]
 8003f90:	4618      	mov	r0, r3
 8003f92:	f002 ff63 	bl	8006e5c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003f9e:	7afb      	ldrb	r3, [r7, #11]
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3710      	adds	r7, #16
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	460b      	mov	r3, r1
 8003fb2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003fb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	da0f      	bge.n	8003fdc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fbc:	78fb      	ldrb	r3, [r7, #3]
 8003fbe:	f003 020f 	and.w	r2, r3, #15
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	00db      	lsls	r3, r3, #3
 8003fc6:	1a9b      	subs	r3, r3, r2
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	3338      	adds	r3, #56	; 0x38
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	4413      	add	r3, r2
 8003fd0:	3304      	adds	r3, #4
 8003fd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	705a      	strb	r2, [r3, #1]
 8003fda:	e00f      	b.n	8003ffc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fdc:	78fb      	ldrb	r3, [r7, #3]
 8003fde:	f003 020f 	and.w	r2, r3, #15
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	00db      	lsls	r3, r3, #3
 8003fe6:	1a9b      	subs	r3, r3, r2
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	4413      	add	r3, r2
 8003ff2:	3304      	adds	r3, #4
 8003ff4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003ffc:	78fb      	ldrb	r3, [r7, #3]
 8003ffe:	f003 030f 	and.w	r3, r3, #15
 8004002:	b2da      	uxtb	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800400e:	2b01      	cmp	r3, #1
 8004010:	d101      	bne.n	8004016 <HAL_PCD_EP_Close+0x6e>
 8004012:	2302      	movs	r3, #2
 8004014:	e00e      	b.n	8004034 <HAL_PCD_EP_Close+0x8c>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68f9      	ldr	r1, [r7, #12]
 8004024:	4618      	mov	r0, r3
 8004026:	f002 ffa1 	bl	8006f6c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004032:	2300      	movs	r3, #0
}
 8004034:	4618      	mov	r0, r3
 8004036:	3710      	adds	r7, #16
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}

0800403c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b086      	sub	sp, #24
 8004040:	af00      	add	r7, sp, #0
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	607a      	str	r2, [r7, #4]
 8004046:	603b      	str	r3, [r7, #0]
 8004048:	460b      	mov	r3, r1
 800404a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800404c:	7afb      	ldrb	r3, [r7, #11]
 800404e:	f003 020f 	and.w	r2, r3, #15
 8004052:	4613      	mov	r3, r2
 8004054:	00db      	lsls	r3, r3, #3
 8004056:	1a9b      	subs	r3, r3, r2
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	4413      	add	r3, r2
 8004062:	3304      	adds	r3, #4
 8004064:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	683a      	ldr	r2, [r7, #0]
 8004070:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	2200      	movs	r2, #0
 8004076:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	2200      	movs	r2, #0
 800407c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800407e:	7afb      	ldrb	r3, [r7, #11]
 8004080:	f003 030f 	and.w	r3, r3, #15
 8004084:	b2da      	uxtb	r2, r3
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	2b01      	cmp	r3, #1
 8004090:	d102      	bne.n	8004098 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004098:	7afb      	ldrb	r3, [r7, #11]
 800409a:	f003 030f 	and.w	r3, r3, #15
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d109      	bne.n	80040b6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6818      	ldr	r0, [r3, #0]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	461a      	mov	r2, r3
 80040ae:	6979      	ldr	r1, [r7, #20]
 80040b0:	f003 fa84 	bl	80075bc <USB_EP0StartXfer>
 80040b4:	e008      	b.n	80040c8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6818      	ldr	r0, [r3, #0]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	461a      	mov	r2, r3
 80040c2:	6979      	ldr	r1, [r7, #20]
 80040c4:	f003 f82e 	bl	8007124 <USB_EPStartXfer>
  }

  return HAL_OK;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3718      	adds	r7, #24
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}

080040d2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040d2:	b480      	push	{r7}
 80040d4:	b083      	sub	sp, #12
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]
 80040da:	460b      	mov	r3, r1
 80040dc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80040de:	78fb      	ldrb	r3, [r7, #3]
 80040e0:	f003 020f 	and.w	r2, r3, #15
 80040e4:	6879      	ldr	r1, [r7, #4]
 80040e6:	4613      	mov	r3, r2
 80040e8:	00db      	lsls	r3, r3, #3
 80040ea:	1a9b      	subs	r3, r3, r2
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	440b      	add	r3, r1
 80040f0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80040f4:	681b      	ldr	r3, [r3, #0]
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	370c      	adds	r7, #12
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr

08004102 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004102:	b580      	push	{r7, lr}
 8004104:	b086      	sub	sp, #24
 8004106:	af00      	add	r7, sp, #0
 8004108:	60f8      	str	r0, [r7, #12]
 800410a:	607a      	str	r2, [r7, #4]
 800410c:	603b      	str	r3, [r7, #0]
 800410e:	460b      	mov	r3, r1
 8004110:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004112:	7afb      	ldrb	r3, [r7, #11]
 8004114:	f003 020f 	and.w	r2, r3, #15
 8004118:	4613      	mov	r3, r2
 800411a:	00db      	lsls	r3, r3, #3
 800411c:	1a9b      	subs	r3, r3, r2
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	3338      	adds	r3, #56	; 0x38
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	4413      	add	r3, r2
 8004126:	3304      	adds	r3, #4
 8004128:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	683a      	ldr	r2, [r7, #0]
 8004134:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	2200      	movs	r2, #0
 800413a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	2201      	movs	r2, #1
 8004140:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004142:	7afb      	ldrb	r3, [r7, #11]
 8004144:	f003 030f 	and.w	r3, r3, #15
 8004148:	b2da      	uxtb	r2, r3
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	2b01      	cmp	r3, #1
 8004154:	d102      	bne.n	800415c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800415c:	7afb      	ldrb	r3, [r7, #11]
 800415e:	f003 030f 	and.w	r3, r3, #15
 8004162:	2b00      	cmp	r3, #0
 8004164:	d109      	bne.n	800417a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6818      	ldr	r0, [r3, #0]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	b2db      	uxtb	r3, r3
 8004170:	461a      	mov	r2, r3
 8004172:	6979      	ldr	r1, [r7, #20]
 8004174:	f003 fa22 	bl	80075bc <USB_EP0StartXfer>
 8004178:	e008      	b.n	800418c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6818      	ldr	r0, [r3, #0]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	b2db      	uxtb	r3, r3
 8004184:	461a      	mov	r2, r3
 8004186:	6979      	ldr	r1, [r7, #20]
 8004188:	f002 ffcc 	bl	8007124 <USB_EPStartXfer>
  }

  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3718      	adds	r7, #24
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}

08004196 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004196:	b580      	push	{r7, lr}
 8004198:	b084      	sub	sp, #16
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
 800419e:	460b      	mov	r3, r1
 80041a0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80041a2:	78fb      	ldrb	r3, [r7, #3]
 80041a4:	f003 020f 	and.w	r2, r3, #15
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d901      	bls.n	80041b4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e050      	b.n	8004256 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80041b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	da0f      	bge.n	80041dc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041bc:	78fb      	ldrb	r3, [r7, #3]
 80041be:	f003 020f 	and.w	r2, r3, #15
 80041c2:	4613      	mov	r3, r2
 80041c4:	00db      	lsls	r3, r3, #3
 80041c6:	1a9b      	subs	r3, r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	3338      	adds	r3, #56	; 0x38
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	4413      	add	r3, r2
 80041d0:	3304      	adds	r3, #4
 80041d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2201      	movs	r2, #1
 80041d8:	705a      	strb	r2, [r3, #1]
 80041da:	e00d      	b.n	80041f8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80041dc:	78fa      	ldrb	r2, [r7, #3]
 80041de:	4613      	mov	r3, r2
 80041e0:	00db      	lsls	r3, r3, #3
 80041e2:	1a9b      	subs	r3, r3, r2
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	4413      	add	r3, r2
 80041ee:	3304      	adds	r3, #4
 80041f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2200      	movs	r2, #0
 80041f6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2201      	movs	r2, #1
 80041fc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041fe:	78fb      	ldrb	r3, [r7, #3]
 8004200:	f003 030f 	and.w	r3, r3, #15
 8004204:	b2da      	uxtb	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004210:	2b01      	cmp	r3, #1
 8004212:	d101      	bne.n	8004218 <HAL_PCD_EP_SetStall+0x82>
 8004214:	2302      	movs	r3, #2
 8004216:	e01e      	b.n	8004256 <HAL_PCD_EP_SetStall+0xc0>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68f9      	ldr	r1, [r7, #12]
 8004226:	4618      	mov	r0, r3
 8004228:	f003 fb7e 	bl	8007928 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800422c:	78fb      	ldrb	r3, [r7, #3]
 800422e:	f003 030f 	and.w	r3, r3, #15
 8004232:	2b00      	cmp	r3, #0
 8004234:	d10a      	bne.n	800424c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6818      	ldr	r0, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	b2d9      	uxtb	r1, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004246:	461a      	mov	r2, r3
 8004248:	f003 fd5e 	bl	8007d08 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3710      	adds	r7, #16
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}

0800425e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800425e:	b580      	push	{r7, lr}
 8004260:	b084      	sub	sp, #16
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
 8004266:	460b      	mov	r3, r1
 8004268:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800426a:	78fb      	ldrb	r3, [r7, #3]
 800426c:	f003 020f 	and.w	r2, r3, #15
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	429a      	cmp	r2, r3
 8004276:	d901      	bls.n	800427c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e042      	b.n	8004302 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800427c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004280:	2b00      	cmp	r3, #0
 8004282:	da0f      	bge.n	80042a4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004284:	78fb      	ldrb	r3, [r7, #3]
 8004286:	f003 020f 	and.w	r2, r3, #15
 800428a:	4613      	mov	r3, r2
 800428c:	00db      	lsls	r3, r3, #3
 800428e:	1a9b      	subs	r3, r3, r2
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	3338      	adds	r3, #56	; 0x38
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	4413      	add	r3, r2
 8004298:	3304      	adds	r3, #4
 800429a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2201      	movs	r2, #1
 80042a0:	705a      	strb	r2, [r3, #1]
 80042a2:	e00f      	b.n	80042c4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042a4:	78fb      	ldrb	r3, [r7, #3]
 80042a6:	f003 020f 	and.w	r2, r3, #15
 80042aa:	4613      	mov	r3, r2
 80042ac:	00db      	lsls	r3, r3, #3
 80042ae:	1a9b      	subs	r3, r3, r2
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	4413      	add	r3, r2
 80042ba:	3304      	adds	r3, #4
 80042bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042ca:	78fb      	ldrb	r3, [r7, #3]
 80042cc:	f003 030f 	and.w	r3, r3, #15
 80042d0:	b2da      	uxtb	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d101      	bne.n	80042e4 <HAL_PCD_EP_ClrStall+0x86>
 80042e0:	2302      	movs	r3, #2
 80042e2:	e00e      	b.n	8004302 <HAL_PCD_EP_ClrStall+0xa4>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68f9      	ldr	r1, [r7, #12]
 80042f2:	4618      	mov	r0, r3
 80042f4:	f003 fb86 	bl	8007a04 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3710      	adds	r7, #16
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800430a:	b580      	push	{r7, lr}
 800430c:	b08a      	sub	sp, #40	; 0x28
 800430e:	af02      	add	r7, sp, #8
 8004310:	6078      	str	r0, [r7, #4]
 8004312:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800431e:	683a      	ldr	r2, [r7, #0]
 8004320:	4613      	mov	r3, r2
 8004322:	00db      	lsls	r3, r3, #3
 8004324:	1a9b      	subs	r3, r3, r2
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	3338      	adds	r3, #56	; 0x38
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	4413      	add	r3, r2
 800432e:	3304      	adds	r3, #4
 8004330:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	699a      	ldr	r2, [r3, #24]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	695b      	ldr	r3, [r3, #20]
 800433a:	429a      	cmp	r2, r3
 800433c:	d901      	bls.n	8004342 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e06c      	b.n	800441c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	695a      	ldr	r2, [r3, #20]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	699b      	ldr	r3, [r3, #24]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	69fa      	ldr	r2, [r7, #28]
 8004354:	429a      	cmp	r2, r3
 8004356:	d902      	bls.n	800435e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	3303      	adds	r3, #3
 8004362:	089b      	lsrs	r3, r3, #2
 8004364:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004366:	e02b      	b.n	80043c0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	695a      	ldr	r2, [r3, #20]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	699b      	ldr	r3, [r3, #24]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	69fa      	ldr	r2, [r7, #28]
 800437a:	429a      	cmp	r2, r3
 800437c:	d902      	bls.n	8004384 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	3303      	adds	r3, #3
 8004388:	089b      	lsrs	r3, r3, #2
 800438a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	68d9      	ldr	r1, [r3, #12]
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	b2da      	uxtb	r2, r3
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800439c:	b2db      	uxtb	r3, r3
 800439e:	9300      	str	r3, [sp, #0]
 80043a0:	4603      	mov	r3, r0
 80043a2:	6978      	ldr	r0, [r7, #20]
 80043a4:	f003 fa62 	bl	800786c <USB_WritePacket>

    ep->xfer_buff  += len;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	68da      	ldr	r2, [r3, #12]
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	441a      	add	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	699a      	ldr	r2, [r3, #24]
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	441a      	add	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	015a      	lsls	r2, r3, #5
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	4413      	add	r3, r2
 80043c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	69ba      	ldr	r2, [r7, #24]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d809      	bhi.n	80043ea <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	699a      	ldr	r2, [r3, #24]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80043de:	429a      	cmp	r2, r3
 80043e0:	d203      	bcs.n	80043ea <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	695b      	ldr	r3, [r3, #20]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d1be      	bne.n	8004368 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	695a      	ldr	r2, [r3, #20]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	699b      	ldr	r3, [r3, #24]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d811      	bhi.n	800441a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	f003 030f 	and.w	r3, r3, #15
 80043fc:	2201      	movs	r2, #1
 80043fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004402:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800440a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	43db      	mvns	r3, r3
 8004410:	6939      	ldr	r1, [r7, #16]
 8004412:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004416:	4013      	ands	r3, r2
 8004418:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	3720      	adds	r7, #32
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b086      	sub	sp, #24
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	333c      	adds	r3, #60	; 0x3c
 800443c:	3304      	adds	r3, #4
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	015a      	lsls	r2, r3, #5
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	4413      	add	r3, r2
 800444a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	2b01      	cmp	r3, #1
 8004458:	f040 80a0 	bne.w	800459c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	f003 0308 	and.w	r3, r3, #8
 8004462:	2b00      	cmp	r3, #0
 8004464:	d015      	beq.n	8004492 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	4a72      	ldr	r2, [pc, #456]	; (8004634 <PCD_EP_OutXfrComplete_int+0x210>)
 800446a:	4293      	cmp	r3, r2
 800446c:	f240 80dd 	bls.w	800462a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004476:	2b00      	cmp	r3, #0
 8004478:	f000 80d7 	beq.w	800462a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	015a      	lsls	r2, r3, #5
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	4413      	add	r3, r2
 8004484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004488:	461a      	mov	r2, r3
 800448a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800448e:	6093      	str	r3, [r2, #8]
 8004490:	e0cb      	b.n	800462a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	f003 0320 	and.w	r3, r3, #32
 8004498:	2b00      	cmp	r3, #0
 800449a:	d009      	beq.n	80044b0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	015a      	lsls	r2, r3, #5
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	4413      	add	r3, r2
 80044a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044a8:	461a      	mov	r2, r3
 80044aa:	2320      	movs	r3, #32
 80044ac:	6093      	str	r3, [r2, #8]
 80044ae:	e0bc      	b.n	800462a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	f040 80b7 	bne.w	800462a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	4a5d      	ldr	r2, [pc, #372]	; (8004634 <PCD_EP_OutXfrComplete_int+0x210>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d90f      	bls.n	80044e4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00a      	beq.n	80044e4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	015a      	lsls	r2, r3, #5
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	4413      	add	r3, r2
 80044d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044da:	461a      	mov	r2, r3
 80044dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044e0:	6093      	str	r3, [r2, #8]
 80044e2:	e0a2      	b.n	800462a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80044e4:	6879      	ldr	r1, [r7, #4]
 80044e6:	683a      	ldr	r2, [r7, #0]
 80044e8:	4613      	mov	r3, r2
 80044ea:	00db      	lsls	r3, r3, #3
 80044ec:	1a9b      	subs	r3, r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	440b      	add	r3, r1
 80044f2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80044f6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	0159      	lsls	r1, r3, #5
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	440b      	add	r3, r1
 8004500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800450a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	683a      	ldr	r2, [r7, #0]
 8004510:	4613      	mov	r3, r2
 8004512:	00db      	lsls	r3, r3, #3
 8004514:	1a9b      	subs	r3, r3, r2
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	4403      	add	r3, r0
 800451a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800451e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004520:	6879      	ldr	r1, [r7, #4]
 8004522:	683a      	ldr	r2, [r7, #0]
 8004524:	4613      	mov	r3, r2
 8004526:	00db      	lsls	r3, r3, #3
 8004528:	1a9b      	subs	r3, r3, r2
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	440b      	add	r3, r1
 800452e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004532:	6819      	ldr	r1, [r3, #0]
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	683a      	ldr	r2, [r7, #0]
 8004538:	4613      	mov	r3, r2
 800453a:	00db      	lsls	r3, r3, #3
 800453c:	1a9b      	subs	r3, r3, r2
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	4403      	add	r3, r0
 8004542:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4419      	add	r1, r3
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	683a      	ldr	r2, [r7, #0]
 800454e:	4613      	mov	r3, r2
 8004550:	00db      	lsls	r3, r3, #3
 8004552:	1a9b      	subs	r3, r3, r2
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	4403      	add	r3, r0
 8004558:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800455c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d114      	bne.n	800458e <PCD_EP_OutXfrComplete_int+0x16a>
 8004564:	6879      	ldr	r1, [r7, #4]
 8004566:	683a      	ldr	r2, [r7, #0]
 8004568:	4613      	mov	r3, r2
 800456a:	00db      	lsls	r3, r3, #3
 800456c:	1a9b      	subs	r3, r3, r2
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	440b      	add	r3, r1
 8004572:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d108      	bne.n	800458e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6818      	ldr	r0, [r3, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004586:	461a      	mov	r2, r3
 8004588:	2101      	movs	r1, #1
 800458a:	f003 fbbd 	bl	8007d08 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	b2db      	uxtb	r3, r3
 8004592:	4619      	mov	r1, r3
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f008 fe07 	bl	800d1a8 <HAL_PCD_DataOutStageCallback>
 800459a:	e046      	b.n	800462a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	4a26      	ldr	r2, [pc, #152]	; (8004638 <PCD_EP_OutXfrComplete_int+0x214>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d124      	bne.n	80045ee <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00a      	beq.n	80045c4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	015a      	lsls	r2, r3, #5
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	4413      	add	r3, r2
 80045b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ba:	461a      	mov	r2, r3
 80045bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045c0:	6093      	str	r3, [r2, #8]
 80045c2:	e032      	b.n	800462a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	f003 0320 	and.w	r3, r3, #32
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d008      	beq.n	80045e0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	015a      	lsls	r2, r3, #5
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	4413      	add	r3, r2
 80045d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045da:	461a      	mov	r2, r3
 80045dc:	2320      	movs	r3, #32
 80045de:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	4619      	mov	r1, r3
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f008 fdde 	bl	800d1a8 <HAL_PCD_DataOutStageCallback>
 80045ec:	e01d      	b.n	800462a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d114      	bne.n	800461e <PCD_EP_OutXfrComplete_int+0x1fa>
 80045f4:	6879      	ldr	r1, [r7, #4]
 80045f6:	683a      	ldr	r2, [r7, #0]
 80045f8:	4613      	mov	r3, r2
 80045fa:	00db      	lsls	r3, r3, #3
 80045fc:	1a9b      	subs	r3, r3, r2
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	440b      	add	r3, r1
 8004602:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d108      	bne.n	800461e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6818      	ldr	r0, [r3, #0]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004616:	461a      	mov	r2, r3
 8004618:	2100      	movs	r1, #0
 800461a:	f003 fb75 	bl	8007d08 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	b2db      	uxtb	r3, r3
 8004622:	4619      	mov	r1, r3
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f008 fdbf 	bl	800d1a8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800462a:	2300      	movs	r3, #0
}
 800462c:	4618      	mov	r0, r3
 800462e:	3718      	adds	r7, #24
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}
 8004634:	4f54300a 	.word	0x4f54300a
 8004638:	4f54310a 	.word	0x4f54310a

0800463c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b086      	sub	sp, #24
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	333c      	adds	r3, #60	; 0x3c
 8004654:	3304      	adds	r3, #4
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	015a      	lsls	r2, r3, #5
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	4413      	add	r3, r2
 8004662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	4a15      	ldr	r2, [pc, #84]	; (80046c4 <PCD_EP_OutSetupPacket_int+0x88>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d90e      	bls.n	8004690 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004678:	2b00      	cmp	r3, #0
 800467a:	d009      	beq.n	8004690 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	015a      	lsls	r2, r3, #5
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	4413      	add	r3, r2
 8004684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004688:	461a      	mov	r2, r3
 800468a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800468e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f008 fd77 	bl	800d184 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	4a0a      	ldr	r2, [pc, #40]	; (80046c4 <PCD_EP_OutSetupPacket_int+0x88>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d90c      	bls.n	80046b8 <PCD_EP_OutSetupPacket_int+0x7c>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d108      	bne.n	80046b8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6818      	ldr	r0, [r3, #0]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80046b0:	461a      	mov	r2, r3
 80046b2:	2101      	movs	r1, #1
 80046b4:	f003 fb28 	bl	8007d08 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3718      	adds	r7, #24
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	4f54300a 	.word	0x4f54300a

080046c8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b085      	sub	sp, #20
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	460b      	mov	r3, r1
 80046d2:	70fb      	strb	r3, [r7, #3]
 80046d4:	4613      	mov	r3, r2
 80046d6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046de:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80046e0:	78fb      	ldrb	r3, [r7, #3]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d107      	bne.n	80046f6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80046e6:	883b      	ldrh	r3, [r7, #0]
 80046e8:	0419      	lsls	r1, r3, #16
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68ba      	ldr	r2, [r7, #8]
 80046f0:	430a      	orrs	r2, r1
 80046f2:	629a      	str	r2, [r3, #40]	; 0x28
 80046f4:	e028      	b.n	8004748 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fc:	0c1b      	lsrs	r3, r3, #16
 80046fe:	68ba      	ldr	r2, [r7, #8]
 8004700:	4413      	add	r3, r2
 8004702:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004704:	2300      	movs	r3, #0
 8004706:	73fb      	strb	r3, [r7, #15]
 8004708:	e00d      	b.n	8004726 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	7bfb      	ldrb	r3, [r7, #15]
 8004710:	3340      	adds	r3, #64	; 0x40
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	4413      	add	r3, r2
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	0c1b      	lsrs	r3, r3, #16
 800471a:	68ba      	ldr	r2, [r7, #8]
 800471c:	4413      	add	r3, r2
 800471e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004720:	7bfb      	ldrb	r3, [r7, #15]
 8004722:	3301      	adds	r3, #1
 8004724:	73fb      	strb	r3, [r7, #15]
 8004726:	7bfa      	ldrb	r2, [r7, #15]
 8004728:	78fb      	ldrb	r3, [r7, #3]
 800472a:	3b01      	subs	r3, #1
 800472c:	429a      	cmp	r2, r3
 800472e:	d3ec      	bcc.n	800470a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004730:	883b      	ldrh	r3, [r7, #0]
 8004732:	0418      	lsls	r0, r3, #16
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6819      	ldr	r1, [r3, #0]
 8004738:	78fb      	ldrb	r3, [r7, #3]
 800473a:	3b01      	subs	r3, #1
 800473c:	68ba      	ldr	r2, [r7, #8]
 800473e:	4302      	orrs	r2, r0
 8004740:	3340      	adds	r3, #64	; 0x40
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	440b      	add	r3, r1
 8004746:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	3714      	adds	r7, #20
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr

08004756 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004756:	b480      	push	{r7}
 8004758:	b083      	sub	sp, #12
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
 800475e:	460b      	mov	r3, r1
 8004760:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	887a      	ldrh	r2, [r7, #2]
 8004768:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800476a:	2300      	movs	r3, #0
}
 800476c:	4618      	mov	r0, r3
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004778:	b480      	push	{r7}
 800477a:	b085      	sub	sp, #20
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2201      	movs	r2, #1
 800478a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80047a6:	4b05      	ldr	r3, [pc, #20]	; (80047bc <HAL_PCDEx_ActivateLPM+0x44>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3714      	adds	r7, #20
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr
 80047bc:	10000003 	.word	0x10000003

080047c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b086      	sub	sp, #24
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80047c8:	2300      	movs	r3, #0
 80047ca:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d101      	bne.n	80047d6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e291      	b.n	8004cfa <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	2b00      	cmp	r3, #0
 80047e0:	f000 8087 	beq.w	80048f2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80047e4:	4b96      	ldr	r3, [pc, #600]	; (8004a40 <HAL_RCC_OscConfig+0x280>)
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f003 030c 	and.w	r3, r3, #12
 80047ec:	2b04      	cmp	r3, #4
 80047ee:	d00c      	beq.n	800480a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047f0:	4b93      	ldr	r3, [pc, #588]	; (8004a40 <HAL_RCC_OscConfig+0x280>)
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f003 030c 	and.w	r3, r3, #12
 80047f8:	2b08      	cmp	r3, #8
 80047fa:	d112      	bne.n	8004822 <HAL_RCC_OscConfig+0x62>
 80047fc:	4b90      	ldr	r3, [pc, #576]	; (8004a40 <HAL_RCC_OscConfig+0x280>)
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004804:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004808:	d10b      	bne.n	8004822 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800480a:	4b8d      	ldr	r3, [pc, #564]	; (8004a40 <HAL_RCC_OscConfig+0x280>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d06c      	beq.n	80048f0 <HAL_RCC_OscConfig+0x130>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d168      	bne.n	80048f0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e26b      	b.n	8004cfa <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800482a:	d106      	bne.n	800483a <HAL_RCC_OscConfig+0x7a>
 800482c:	4b84      	ldr	r3, [pc, #528]	; (8004a40 <HAL_RCC_OscConfig+0x280>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a83      	ldr	r2, [pc, #524]	; (8004a40 <HAL_RCC_OscConfig+0x280>)
 8004832:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004836:	6013      	str	r3, [r2, #0]
 8004838:	e02e      	b.n	8004898 <HAL_RCC_OscConfig+0xd8>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d10c      	bne.n	800485c <HAL_RCC_OscConfig+0x9c>
 8004842:	4b7f      	ldr	r3, [pc, #508]	; (8004a40 <HAL_RCC_OscConfig+0x280>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a7e      	ldr	r2, [pc, #504]	; (8004a40 <HAL_RCC_OscConfig+0x280>)
 8004848:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800484c:	6013      	str	r3, [r2, #0]
 800484e:	4b7c      	ldr	r3, [pc, #496]	; (8004a40 <HAL_RCC_OscConfig+0x280>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a7b      	ldr	r2, [pc, #492]	; (8004a40 <HAL_RCC_OscConfig+0x280>)
 8004854:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004858:	6013      	str	r3, [r2, #0]
 800485a:	e01d      	b.n	8004898 <HAL_RCC_OscConfig+0xd8>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004864:	d10c      	bne.n	8004880 <HAL_RCC_OscConfig+0xc0>
 8004866:	4b76      	ldr	r3, [pc, #472]	; (8004a40 <HAL_RCC_OscConfig+0x280>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a75      	ldr	r2, [pc, #468]	; (8004a40 <HAL_RCC_OscConfig+0x280>)
 800486c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004870:	6013      	str	r3, [r2, #0]
 8004872:	4b73      	ldr	r3, [pc, #460]	; (8004a40 <HAL_RCC_OscConfig+0x280>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a72      	ldr	r2, [pc, #456]	; (8004a40 <HAL_RCC_OscConfig+0x280>)
 8004878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800487c:	6013      	str	r3, [r2, #0]
 800487e:	e00b      	b.n	8004898 <HAL_RCC_OscConfig+0xd8>
 8004880:	4b6f      	ldr	r3, [pc, #444]	; (8004a40 <HAL_RCC_OscConfig+0x280>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a6e      	ldr	r2, [pc, #440]	; (8004a40 <HAL_RCC_OscConfig+0x280>)
 8004886:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800488a:	6013      	str	r3, [r2, #0]
 800488c:	4b6c      	ldr	r3, [pc, #432]	; (8004a40 <HAL_RCC_OscConfig+0x280>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a6b      	ldr	r2, [pc, #428]	; (8004a40 <HAL_RCC_OscConfig+0x280>)
 8004892:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004896:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d013      	beq.n	80048c8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a0:	f7fe fb16 	bl	8002ed0 <HAL_GetTick>
 80048a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048a6:	e008      	b.n	80048ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048a8:	f7fe fb12 	bl	8002ed0 <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	2b64      	cmp	r3, #100	; 0x64
 80048b4:	d901      	bls.n	80048ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e21f      	b.n	8004cfa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ba:	4b61      	ldr	r3, [pc, #388]	; (8004a40 <HAL_RCC_OscConfig+0x280>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d0f0      	beq.n	80048a8 <HAL_RCC_OscConfig+0xe8>
 80048c6:	e014      	b.n	80048f2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048c8:	f7fe fb02 	bl	8002ed0 <HAL_GetTick>
 80048cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048ce:	e008      	b.n	80048e2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048d0:	f7fe fafe 	bl	8002ed0 <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	2b64      	cmp	r3, #100	; 0x64
 80048dc:	d901      	bls.n	80048e2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e20b      	b.n	8004cfa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048e2:	4b57      	ldr	r3, [pc, #348]	; (8004a40 <HAL_RCC_OscConfig+0x280>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d1f0      	bne.n	80048d0 <HAL_RCC_OscConfig+0x110>
 80048ee:	e000      	b.n	80048f2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0302 	and.w	r3, r3, #2
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d069      	beq.n	80049d2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80048fe:	4b50      	ldr	r3, [pc, #320]	; (8004a40 <HAL_RCC_OscConfig+0x280>)
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f003 030c 	and.w	r3, r3, #12
 8004906:	2b00      	cmp	r3, #0
 8004908:	d00b      	beq.n	8004922 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800490a:	4b4d      	ldr	r3, [pc, #308]	; (8004a40 <HAL_RCC_OscConfig+0x280>)
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f003 030c 	and.w	r3, r3, #12
 8004912:	2b08      	cmp	r3, #8
 8004914:	d11c      	bne.n	8004950 <HAL_RCC_OscConfig+0x190>
 8004916:	4b4a      	ldr	r3, [pc, #296]	; (8004a40 <HAL_RCC_OscConfig+0x280>)
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d116      	bne.n	8004950 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004922:	4b47      	ldr	r3, [pc, #284]	; (8004a40 <HAL_RCC_OscConfig+0x280>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0302 	and.w	r3, r3, #2
 800492a:	2b00      	cmp	r3, #0
 800492c:	d005      	beq.n	800493a <HAL_RCC_OscConfig+0x17a>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	2b01      	cmp	r3, #1
 8004934:	d001      	beq.n	800493a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e1df      	b.n	8004cfa <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800493a:	4b41      	ldr	r3, [pc, #260]	; (8004a40 <HAL_RCC_OscConfig+0x280>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	00db      	lsls	r3, r3, #3
 8004948:	493d      	ldr	r1, [pc, #244]	; (8004a40 <HAL_RCC_OscConfig+0x280>)
 800494a:	4313      	orrs	r3, r2
 800494c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800494e:	e040      	b.n	80049d2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d023      	beq.n	80049a0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004958:	4b39      	ldr	r3, [pc, #228]	; (8004a40 <HAL_RCC_OscConfig+0x280>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a38      	ldr	r2, [pc, #224]	; (8004a40 <HAL_RCC_OscConfig+0x280>)
 800495e:	f043 0301 	orr.w	r3, r3, #1
 8004962:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004964:	f7fe fab4 	bl	8002ed0 <HAL_GetTick>
 8004968:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800496a:	e008      	b.n	800497e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800496c:	f7fe fab0 	bl	8002ed0 <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	2b02      	cmp	r3, #2
 8004978:	d901      	bls.n	800497e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	e1bd      	b.n	8004cfa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800497e:	4b30      	ldr	r3, [pc, #192]	; (8004a40 <HAL_RCC_OscConfig+0x280>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0302 	and.w	r3, r3, #2
 8004986:	2b00      	cmp	r3, #0
 8004988:	d0f0      	beq.n	800496c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800498a:	4b2d      	ldr	r3, [pc, #180]	; (8004a40 <HAL_RCC_OscConfig+0x280>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	00db      	lsls	r3, r3, #3
 8004998:	4929      	ldr	r1, [pc, #164]	; (8004a40 <HAL_RCC_OscConfig+0x280>)
 800499a:	4313      	orrs	r3, r2
 800499c:	600b      	str	r3, [r1, #0]
 800499e:	e018      	b.n	80049d2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049a0:	4b27      	ldr	r3, [pc, #156]	; (8004a40 <HAL_RCC_OscConfig+0x280>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a26      	ldr	r2, [pc, #152]	; (8004a40 <HAL_RCC_OscConfig+0x280>)
 80049a6:	f023 0301 	bic.w	r3, r3, #1
 80049aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ac:	f7fe fa90 	bl	8002ed0 <HAL_GetTick>
 80049b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049b2:	e008      	b.n	80049c6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049b4:	f7fe fa8c 	bl	8002ed0 <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d901      	bls.n	80049c6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e199      	b.n	8004cfa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049c6:	4b1e      	ldr	r3, [pc, #120]	; (8004a40 <HAL_RCC_OscConfig+0x280>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0302 	and.w	r3, r3, #2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d1f0      	bne.n	80049b4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0308 	and.w	r3, r3, #8
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d038      	beq.n	8004a50 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	695b      	ldr	r3, [r3, #20]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d019      	beq.n	8004a1a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049e6:	4b16      	ldr	r3, [pc, #88]	; (8004a40 <HAL_RCC_OscConfig+0x280>)
 80049e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049ea:	4a15      	ldr	r2, [pc, #84]	; (8004a40 <HAL_RCC_OscConfig+0x280>)
 80049ec:	f043 0301 	orr.w	r3, r3, #1
 80049f0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049f2:	f7fe fa6d 	bl	8002ed0 <HAL_GetTick>
 80049f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049f8:	e008      	b.n	8004a0c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049fa:	f7fe fa69 	bl	8002ed0 <HAL_GetTick>
 80049fe:	4602      	mov	r2, r0
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d901      	bls.n	8004a0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	e176      	b.n	8004cfa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a0c:	4b0c      	ldr	r3, [pc, #48]	; (8004a40 <HAL_RCC_OscConfig+0x280>)
 8004a0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a10:	f003 0302 	and.w	r3, r3, #2
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d0f0      	beq.n	80049fa <HAL_RCC_OscConfig+0x23a>
 8004a18:	e01a      	b.n	8004a50 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a1a:	4b09      	ldr	r3, [pc, #36]	; (8004a40 <HAL_RCC_OscConfig+0x280>)
 8004a1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a1e:	4a08      	ldr	r2, [pc, #32]	; (8004a40 <HAL_RCC_OscConfig+0x280>)
 8004a20:	f023 0301 	bic.w	r3, r3, #1
 8004a24:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a26:	f7fe fa53 	bl	8002ed0 <HAL_GetTick>
 8004a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a2c:	e00a      	b.n	8004a44 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a2e:	f7fe fa4f 	bl	8002ed0 <HAL_GetTick>
 8004a32:	4602      	mov	r2, r0
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	d903      	bls.n	8004a44 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	e15c      	b.n	8004cfa <HAL_RCC_OscConfig+0x53a>
 8004a40:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a44:	4b91      	ldr	r3, [pc, #580]	; (8004c8c <HAL_RCC_OscConfig+0x4cc>)
 8004a46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a48:	f003 0302 	and.w	r3, r3, #2
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d1ee      	bne.n	8004a2e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0304 	and.w	r3, r3, #4
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	f000 80a4 	beq.w	8004ba6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a5e:	4b8b      	ldr	r3, [pc, #556]	; (8004c8c <HAL_RCC_OscConfig+0x4cc>)
 8004a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d10d      	bne.n	8004a86 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a6a:	4b88      	ldr	r3, [pc, #544]	; (8004c8c <HAL_RCC_OscConfig+0x4cc>)
 8004a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6e:	4a87      	ldr	r2, [pc, #540]	; (8004c8c <HAL_RCC_OscConfig+0x4cc>)
 8004a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a74:	6413      	str	r3, [r2, #64]	; 0x40
 8004a76:	4b85      	ldr	r3, [pc, #532]	; (8004c8c <HAL_RCC_OscConfig+0x4cc>)
 8004a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a7e:	60bb      	str	r3, [r7, #8]
 8004a80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a82:	2301      	movs	r3, #1
 8004a84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a86:	4b82      	ldr	r3, [pc, #520]	; (8004c90 <HAL_RCC_OscConfig+0x4d0>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d118      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004a92:	4b7f      	ldr	r3, [pc, #508]	; (8004c90 <HAL_RCC_OscConfig+0x4d0>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a7e      	ldr	r2, [pc, #504]	; (8004c90 <HAL_RCC_OscConfig+0x4d0>)
 8004a98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a9e:	f7fe fa17 	bl	8002ed0 <HAL_GetTick>
 8004aa2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004aa4:	e008      	b.n	8004ab8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004aa6:	f7fe fa13 	bl	8002ed0 <HAL_GetTick>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	2b64      	cmp	r3, #100	; 0x64
 8004ab2:	d901      	bls.n	8004ab8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004ab4:	2303      	movs	r3, #3
 8004ab6:	e120      	b.n	8004cfa <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ab8:	4b75      	ldr	r3, [pc, #468]	; (8004c90 <HAL_RCC_OscConfig+0x4d0>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d0f0      	beq.n	8004aa6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d106      	bne.n	8004ada <HAL_RCC_OscConfig+0x31a>
 8004acc:	4b6f      	ldr	r3, [pc, #444]	; (8004c8c <HAL_RCC_OscConfig+0x4cc>)
 8004ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ad0:	4a6e      	ldr	r2, [pc, #440]	; (8004c8c <HAL_RCC_OscConfig+0x4cc>)
 8004ad2:	f043 0301 	orr.w	r3, r3, #1
 8004ad6:	6713      	str	r3, [r2, #112]	; 0x70
 8004ad8:	e02d      	b.n	8004b36 <HAL_RCC_OscConfig+0x376>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d10c      	bne.n	8004afc <HAL_RCC_OscConfig+0x33c>
 8004ae2:	4b6a      	ldr	r3, [pc, #424]	; (8004c8c <HAL_RCC_OscConfig+0x4cc>)
 8004ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae6:	4a69      	ldr	r2, [pc, #420]	; (8004c8c <HAL_RCC_OscConfig+0x4cc>)
 8004ae8:	f023 0301 	bic.w	r3, r3, #1
 8004aec:	6713      	str	r3, [r2, #112]	; 0x70
 8004aee:	4b67      	ldr	r3, [pc, #412]	; (8004c8c <HAL_RCC_OscConfig+0x4cc>)
 8004af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af2:	4a66      	ldr	r2, [pc, #408]	; (8004c8c <HAL_RCC_OscConfig+0x4cc>)
 8004af4:	f023 0304 	bic.w	r3, r3, #4
 8004af8:	6713      	str	r3, [r2, #112]	; 0x70
 8004afa:	e01c      	b.n	8004b36 <HAL_RCC_OscConfig+0x376>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	2b05      	cmp	r3, #5
 8004b02:	d10c      	bne.n	8004b1e <HAL_RCC_OscConfig+0x35e>
 8004b04:	4b61      	ldr	r3, [pc, #388]	; (8004c8c <HAL_RCC_OscConfig+0x4cc>)
 8004b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b08:	4a60      	ldr	r2, [pc, #384]	; (8004c8c <HAL_RCC_OscConfig+0x4cc>)
 8004b0a:	f043 0304 	orr.w	r3, r3, #4
 8004b0e:	6713      	str	r3, [r2, #112]	; 0x70
 8004b10:	4b5e      	ldr	r3, [pc, #376]	; (8004c8c <HAL_RCC_OscConfig+0x4cc>)
 8004b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b14:	4a5d      	ldr	r2, [pc, #372]	; (8004c8c <HAL_RCC_OscConfig+0x4cc>)
 8004b16:	f043 0301 	orr.w	r3, r3, #1
 8004b1a:	6713      	str	r3, [r2, #112]	; 0x70
 8004b1c:	e00b      	b.n	8004b36 <HAL_RCC_OscConfig+0x376>
 8004b1e:	4b5b      	ldr	r3, [pc, #364]	; (8004c8c <HAL_RCC_OscConfig+0x4cc>)
 8004b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b22:	4a5a      	ldr	r2, [pc, #360]	; (8004c8c <HAL_RCC_OscConfig+0x4cc>)
 8004b24:	f023 0301 	bic.w	r3, r3, #1
 8004b28:	6713      	str	r3, [r2, #112]	; 0x70
 8004b2a:	4b58      	ldr	r3, [pc, #352]	; (8004c8c <HAL_RCC_OscConfig+0x4cc>)
 8004b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b2e:	4a57      	ldr	r2, [pc, #348]	; (8004c8c <HAL_RCC_OscConfig+0x4cc>)
 8004b30:	f023 0304 	bic.w	r3, r3, #4
 8004b34:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d015      	beq.n	8004b6a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b3e:	f7fe f9c7 	bl	8002ed0 <HAL_GetTick>
 8004b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b44:	e00a      	b.n	8004b5c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b46:	f7fe f9c3 	bl	8002ed0 <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d901      	bls.n	8004b5c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	e0ce      	b.n	8004cfa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b5c:	4b4b      	ldr	r3, [pc, #300]	; (8004c8c <HAL_RCC_OscConfig+0x4cc>)
 8004b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b60:	f003 0302 	and.w	r3, r3, #2
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d0ee      	beq.n	8004b46 <HAL_RCC_OscConfig+0x386>
 8004b68:	e014      	b.n	8004b94 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b6a:	f7fe f9b1 	bl	8002ed0 <HAL_GetTick>
 8004b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b70:	e00a      	b.n	8004b88 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b72:	f7fe f9ad 	bl	8002ed0 <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d901      	bls.n	8004b88 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e0b8      	b.n	8004cfa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b88:	4b40      	ldr	r3, [pc, #256]	; (8004c8c <HAL_RCC_OscConfig+0x4cc>)
 8004b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b8c:	f003 0302 	and.w	r3, r3, #2
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d1ee      	bne.n	8004b72 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004b94:	7dfb      	ldrb	r3, [r7, #23]
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d105      	bne.n	8004ba6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b9a:	4b3c      	ldr	r3, [pc, #240]	; (8004c8c <HAL_RCC_OscConfig+0x4cc>)
 8004b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9e:	4a3b      	ldr	r2, [pc, #236]	; (8004c8c <HAL_RCC_OscConfig+0x4cc>)
 8004ba0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ba4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	699b      	ldr	r3, [r3, #24]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	f000 80a4 	beq.w	8004cf8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004bb0:	4b36      	ldr	r3, [pc, #216]	; (8004c8c <HAL_RCC_OscConfig+0x4cc>)
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f003 030c 	and.w	r3, r3, #12
 8004bb8:	2b08      	cmp	r3, #8
 8004bba:	d06b      	beq.n	8004c94 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	699b      	ldr	r3, [r3, #24]
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d149      	bne.n	8004c58 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bc4:	4b31      	ldr	r3, [pc, #196]	; (8004c8c <HAL_RCC_OscConfig+0x4cc>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a30      	ldr	r2, [pc, #192]	; (8004c8c <HAL_RCC_OscConfig+0x4cc>)
 8004bca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bd0:	f7fe f97e 	bl	8002ed0 <HAL_GetTick>
 8004bd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bd6:	e008      	b.n	8004bea <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bd8:	f7fe f97a 	bl	8002ed0 <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d901      	bls.n	8004bea <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e087      	b.n	8004cfa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bea:	4b28      	ldr	r3, [pc, #160]	; (8004c8c <HAL_RCC_OscConfig+0x4cc>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d1f0      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	69da      	ldr	r2, [r3, #28]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a1b      	ldr	r3, [r3, #32]
 8004bfe:	431a      	orrs	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c04:	019b      	lsls	r3, r3, #6
 8004c06:	431a      	orrs	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c0c:	085b      	lsrs	r3, r3, #1
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	041b      	lsls	r3, r3, #16
 8004c12:	431a      	orrs	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c18:	061b      	lsls	r3, r3, #24
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	4a1b      	ldr	r2, [pc, #108]	; (8004c8c <HAL_RCC_OscConfig+0x4cc>)
 8004c1e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c22:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c24:	4b19      	ldr	r3, [pc, #100]	; (8004c8c <HAL_RCC_OscConfig+0x4cc>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a18      	ldr	r2, [pc, #96]	; (8004c8c <HAL_RCC_OscConfig+0x4cc>)
 8004c2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c30:	f7fe f94e 	bl	8002ed0 <HAL_GetTick>
 8004c34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c36:	e008      	b.n	8004c4a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c38:	f7fe f94a 	bl	8002ed0 <HAL_GetTick>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	2b02      	cmp	r3, #2
 8004c44:	d901      	bls.n	8004c4a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e057      	b.n	8004cfa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c4a:	4b10      	ldr	r3, [pc, #64]	; (8004c8c <HAL_RCC_OscConfig+0x4cc>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d0f0      	beq.n	8004c38 <HAL_RCC_OscConfig+0x478>
 8004c56:	e04f      	b.n	8004cf8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c58:	4b0c      	ldr	r3, [pc, #48]	; (8004c8c <HAL_RCC_OscConfig+0x4cc>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a0b      	ldr	r2, [pc, #44]	; (8004c8c <HAL_RCC_OscConfig+0x4cc>)
 8004c5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c64:	f7fe f934 	bl	8002ed0 <HAL_GetTick>
 8004c68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c6a:	e008      	b.n	8004c7e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c6c:	f7fe f930 	bl	8002ed0 <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d901      	bls.n	8004c7e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e03d      	b.n	8004cfa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c7e:	4b03      	ldr	r3, [pc, #12]	; (8004c8c <HAL_RCC_OscConfig+0x4cc>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d1f0      	bne.n	8004c6c <HAL_RCC_OscConfig+0x4ac>
 8004c8a:	e035      	b.n	8004cf8 <HAL_RCC_OscConfig+0x538>
 8004c8c:	40023800 	.word	0x40023800
 8004c90:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004c94:	4b1b      	ldr	r3, [pc, #108]	; (8004d04 <HAL_RCC_OscConfig+0x544>)
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	699b      	ldr	r3, [r3, #24]
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d028      	beq.n	8004cf4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d121      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d11a      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004cca:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d111      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cda:	085b      	lsrs	r3, r3, #1
 8004cdc:	3b01      	subs	r3, #1
 8004cde:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d107      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cee:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d001      	beq.n	8004cf8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e000      	b.n	8004cfa <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3718      	adds	r7, #24
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	40023800 	.word	0x40023800

08004d08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004d12:	2300      	movs	r3, #0
 8004d14:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d101      	bne.n	8004d20 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e0d0      	b.n	8004ec2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d20:	4b6a      	ldr	r3, [pc, #424]	; (8004ecc <HAL_RCC_ClockConfig+0x1c4>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 030f 	and.w	r3, r3, #15
 8004d28:	683a      	ldr	r2, [r7, #0]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d910      	bls.n	8004d50 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d2e:	4b67      	ldr	r3, [pc, #412]	; (8004ecc <HAL_RCC_ClockConfig+0x1c4>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f023 020f 	bic.w	r2, r3, #15
 8004d36:	4965      	ldr	r1, [pc, #404]	; (8004ecc <HAL_RCC_ClockConfig+0x1c4>)
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d3e:	4b63      	ldr	r3, [pc, #396]	; (8004ecc <HAL_RCC_ClockConfig+0x1c4>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 030f 	and.w	r3, r3, #15
 8004d46:	683a      	ldr	r2, [r7, #0]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d001      	beq.n	8004d50 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e0b8      	b.n	8004ec2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0302 	and.w	r3, r3, #2
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d020      	beq.n	8004d9e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0304 	and.w	r3, r3, #4
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d005      	beq.n	8004d74 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d68:	4b59      	ldr	r3, [pc, #356]	; (8004ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	4a58      	ldr	r2, [pc, #352]	; (8004ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8004d6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d72:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0308 	and.w	r3, r3, #8
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d005      	beq.n	8004d8c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d80:	4b53      	ldr	r3, [pc, #332]	; (8004ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	4a52      	ldr	r2, [pc, #328]	; (8004ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8004d86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d8a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d8c:	4b50      	ldr	r3, [pc, #320]	; (8004ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	494d      	ldr	r1, [pc, #308]	; (8004ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0301 	and.w	r3, r3, #1
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d040      	beq.n	8004e2c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d107      	bne.n	8004dc2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004db2:	4b47      	ldr	r3, [pc, #284]	; (8004ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d115      	bne.n	8004dea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e07f      	b.n	8004ec2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d107      	bne.n	8004dda <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dca:	4b41      	ldr	r3, [pc, #260]	; (8004ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d109      	bne.n	8004dea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e073      	b.n	8004ec2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dda:	4b3d      	ldr	r3, [pc, #244]	; (8004ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0302 	and.w	r3, r3, #2
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d101      	bne.n	8004dea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e06b      	b.n	8004ec2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004dea:	4b39      	ldr	r3, [pc, #228]	; (8004ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f023 0203 	bic.w	r2, r3, #3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	4936      	ldr	r1, [pc, #216]	; (8004ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dfc:	f7fe f868 	bl	8002ed0 <HAL_GetTick>
 8004e00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e02:	e00a      	b.n	8004e1a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e04:	f7fe f864 	bl	8002ed0 <HAL_GetTick>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d901      	bls.n	8004e1a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e053      	b.n	8004ec2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e1a:	4b2d      	ldr	r3, [pc, #180]	; (8004ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	f003 020c 	and.w	r2, r3, #12
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d1eb      	bne.n	8004e04 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e2c:	4b27      	ldr	r3, [pc, #156]	; (8004ecc <HAL_RCC_ClockConfig+0x1c4>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 030f 	and.w	r3, r3, #15
 8004e34:	683a      	ldr	r2, [r7, #0]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d210      	bcs.n	8004e5c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e3a:	4b24      	ldr	r3, [pc, #144]	; (8004ecc <HAL_RCC_ClockConfig+0x1c4>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f023 020f 	bic.w	r2, r3, #15
 8004e42:	4922      	ldr	r1, [pc, #136]	; (8004ecc <HAL_RCC_ClockConfig+0x1c4>)
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e4a:	4b20      	ldr	r3, [pc, #128]	; (8004ecc <HAL_RCC_ClockConfig+0x1c4>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 030f 	and.w	r3, r3, #15
 8004e52:	683a      	ldr	r2, [r7, #0]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d001      	beq.n	8004e5c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e032      	b.n	8004ec2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0304 	and.w	r3, r3, #4
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d008      	beq.n	8004e7a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e68:	4b19      	ldr	r3, [pc, #100]	; (8004ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	4916      	ldr	r1, [pc, #88]	; (8004ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0308 	and.w	r3, r3, #8
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d009      	beq.n	8004e9a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004e86:	4b12      	ldr	r3, [pc, #72]	; (8004ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	00db      	lsls	r3, r3, #3
 8004e94:	490e      	ldr	r1, [pc, #56]	; (8004ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004e9a:	f000 f821 	bl	8004ee0 <HAL_RCC_GetSysClockFreq>
 8004e9e:	4601      	mov	r1, r0
 8004ea0:	4b0b      	ldr	r3, [pc, #44]	; (8004ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	091b      	lsrs	r3, r3, #4
 8004ea6:	f003 030f 	and.w	r3, r3, #15
 8004eaa:	4a0a      	ldr	r2, [pc, #40]	; (8004ed4 <HAL_RCC_ClockConfig+0x1cc>)
 8004eac:	5cd3      	ldrb	r3, [r2, r3]
 8004eae:	fa21 f303 	lsr.w	r3, r1, r3
 8004eb2:	4a09      	ldr	r2, [pc, #36]	; (8004ed8 <HAL_RCC_ClockConfig+0x1d0>)
 8004eb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004eb6:	4b09      	ldr	r3, [pc, #36]	; (8004edc <HAL_RCC_ClockConfig+0x1d4>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f7fc fb4c 	bl	8001558 <HAL_InitTick>

  return HAL_OK;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3710      	adds	r7, #16
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	40023c00 	.word	0x40023c00
 8004ed0:	40023800 	.word	0x40023800
 8004ed4:	0800f3e0 	.word	0x0800f3e0
 8004ed8:	20000000 	.word	0x20000000
 8004edc:	20000004 	.word	0x20000004

08004ee0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ee2:	b085      	sub	sp, #20
 8004ee4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	607b      	str	r3, [r7, #4]
 8004eea:	2300      	movs	r3, #0
 8004eec:	60fb      	str	r3, [r7, #12]
 8004eee:	2300      	movs	r3, #0
 8004ef0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ef6:	4b63      	ldr	r3, [pc, #396]	; (8005084 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	f003 030c 	and.w	r3, r3, #12
 8004efe:	2b04      	cmp	r3, #4
 8004f00:	d007      	beq.n	8004f12 <HAL_RCC_GetSysClockFreq+0x32>
 8004f02:	2b08      	cmp	r3, #8
 8004f04:	d008      	beq.n	8004f18 <HAL_RCC_GetSysClockFreq+0x38>
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	f040 80b4 	bne.w	8005074 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f0c:	4b5e      	ldr	r3, [pc, #376]	; (8005088 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004f0e:	60bb      	str	r3, [r7, #8]
      break;
 8004f10:	e0b3      	b.n	800507a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f12:	4b5e      	ldr	r3, [pc, #376]	; (800508c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004f14:	60bb      	str	r3, [r7, #8]
      break;
 8004f16:	e0b0      	b.n	800507a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f18:	4b5a      	ldr	r3, [pc, #360]	; (8005084 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f20:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004f22:	4b58      	ldr	r3, [pc, #352]	; (8005084 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d04a      	beq.n	8004fc4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f2e:	4b55      	ldr	r3, [pc, #340]	; (8005084 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	099b      	lsrs	r3, r3, #6
 8004f34:	f04f 0400 	mov.w	r4, #0
 8004f38:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004f3c:	f04f 0200 	mov.w	r2, #0
 8004f40:	ea03 0501 	and.w	r5, r3, r1
 8004f44:	ea04 0602 	and.w	r6, r4, r2
 8004f48:	4629      	mov	r1, r5
 8004f4a:	4632      	mov	r2, r6
 8004f4c:	f04f 0300 	mov.w	r3, #0
 8004f50:	f04f 0400 	mov.w	r4, #0
 8004f54:	0154      	lsls	r4, r2, #5
 8004f56:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004f5a:	014b      	lsls	r3, r1, #5
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	4622      	mov	r2, r4
 8004f60:	1b49      	subs	r1, r1, r5
 8004f62:	eb62 0206 	sbc.w	r2, r2, r6
 8004f66:	f04f 0300 	mov.w	r3, #0
 8004f6a:	f04f 0400 	mov.w	r4, #0
 8004f6e:	0194      	lsls	r4, r2, #6
 8004f70:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004f74:	018b      	lsls	r3, r1, #6
 8004f76:	1a5b      	subs	r3, r3, r1
 8004f78:	eb64 0402 	sbc.w	r4, r4, r2
 8004f7c:	f04f 0100 	mov.w	r1, #0
 8004f80:	f04f 0200 	mov.w	r2, #0
 8004f84:	00e2      	lsls	r2, r4, #3
 8004f86:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004f8a:	00d9      	lsls	r1, r3, #3
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	4614      	mov	r4, r2
 8004f90:	195b      	adds	r3, r3, r5
 8004f92:	eb44 0406 	adc.w	r4, r4, r6
 8004f96:	f04f 0100 	mov.w	r1, #0
 8004f9a:	f04f 0200 	mov.w	r2, #0
 8004f9e:	0262      	lsls	r2, r4, #9
 8004fa0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004fa4:	0259      	lsls	r1, r3, #9
 8004fa6:	460b      	mov	r3, r1
 8004fa8:	4614      	mov	r4, r2
 8004faa:	4618      	mov	r0, r3
 8004fac:	4621      	mov	r1, r4
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f04f 0400 	mov.w	r4, #0
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	4623      	mov	r3, r4
 8004fb8:	f7fb fe5e 	bl	8000c78 <__aeabi_uldivmod>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	460c      	mov	r4, r1
 8004fc0:	60fb      	str	r3, [r7, #12]
 8004fc2:	e049      	b.n	8005058 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fc4:	4b2f      	ldr	r3, [pc, #188]	; (8005084 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	099b      	lsrs	r3, r3, #6
 8004fca:	f04f 0400 	mov.w	r4, #0
 8004fce:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004fd2:	f04f 0200 	mov.w	r2, #0
 8004fd6:	ea03 0501 	and.w	r5, r3, r1
 8004fda:	ea04 0602 	and.w	r6, r4, r2
 8004fde:	4629      	mov	r1, r5
 8004fe0:	4632      	mov	r2, r6
 8004fe2:	f04f 0300 	mov.w	r3, #0
 8004fe6:	f04f 0400 	mov.w	r4, #0
 8004fea:	0154      	lsls	r4, r2, #5
 8004fec:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004ff0:	014b      	lsls	r3, r1, #5
 8004ff2:	4619      	mov	r1, r3
 8004ff4:	4622      	mov	r2, r4
 8004ff6:	1b49      	subs	r1, r1, r5
 8004ff8:	eb62 0206 	sbc.w	r2, r2, r6
 8004ffc:	f04f 0300 	mov.w	r3, #0
 8005000:	f04f 0400 	mov.w	r4, #0
 8005004:	0194      	lsls	r4, r2, #6
 8005006:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800500a:	018b      	lsls	r3, r1, #6
 800500c:	1a5b      	subs	r3, r3, r1
 800500e:	eb64 0402 	sbc.w	r4, r4, r2
 8005012:	f04f 0100 	mov.w	r1, #0
 8005016:	f04f 0200 	mov.w	r2, #0
 800501a:	00e2      	lsls	r2, r4, #3
 800501c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005020:	00d9      	lsls	r1, r3, #3
 8005022:	460b      	mov	r3, r1
 8005024:	4614      	mov	r4, r2
 8005026:	195b      	adds	r3, r3, r5
 8005028:	eb44 0406 	adc.w	r4, r4, r6
 800502c:	f04f 0100 	mov.w	r1, #0
 8005030:	f04f 0200 	mov.w	r2, #0
 8005034:	02a2      	lsls	r2, r4, #10
 8005036:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800503a:	0299      	lsls	r1, r3, #10
 800503c:	460b      	mov	r3, r1
 800503e:	4614      	mov	r4, r2
 8005040:	4618      	mov	r0, r3
 8005042:	4621      	mov	r1, r4
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f04f 0400 	mov.w	r4, #0
 800504a:	461a      	mov	r2, r3
 800504c:	4623      	mov	r3, r4
 800504e:	f7fb fe13 	bl	8000c78 <__aeabi_uldivmod>
 8005052:	4603      	mov	r3, r0
 8005054:	460c      	mov	r4, r1
 8005056:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005058:	4b0a      	ldr	r3, [pc, #40]	; (8005084 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	0c1b      	lsrs	r3, r3, #16
 800505e:	f003 0303 	and.w	r3, r3, #3
 8005062:	3301      	adds	r3, #1
 8005064:	005b      	lsls	r3, r3, #1
 8005066:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8005068:	68fa      	ldr	r2, [r7, #12]
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005070:	60bb      	str	r3, [r7, #8]
      break;
 8005072:	e002      	b.n	800507a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005074:	4b04      	ldr	r3, [pc, #16]	; (8005088 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005076:	60bb      	str	r3, [r7, #8]
      break;
 8005078:	bf00      	nop
    }
  }
  return sysclockfreq;
 800507a:	68bb      	ldr	r3, [r7, #8]
}
 800507c:	4618      	mov	r0, r3
 800507e:	3714      	adds	r7, #20
 8005080:	46bd      	mov	sp, r7
 8005082:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005084:	40023800 	.word	0x40023800
 8005088:	00f42400 	.word	0x00f42400
 800508c:	007a1200 	.word	0x007a1200

08005090 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005090:	b480      	push	{r7}
 8005092:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005094:	4b03      	ldr	r3, [pc, #12]	; (80050a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005096:	681b      	ldr	r3, [r3, #0]
}
 8005098:	4618      	mov	r0, r3
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr
 80050a2:	bf00      	nop
 80050a4:	20000000 	.word	0x20000000

080050a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80050ac:	f7ff fff0 	bl	8005090 <HAL_RCC_GetHCLKFreq>
 80050b0:	4601      	mov	r1, r0
 80050b2:	4b05      	ldr	r3, [pc, #20]	; (80050c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	0b5b      	lsrs	r3, r3, #13
 80050b8:	f003 0307 	and.w	r3, r3, #7
 80050bc:	4a03      	ldr	r2, [pc, #12]	; (80050cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80050be:	5cd3      	ldrb	r3, [r2, r3]
 80050c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	40023800 	.word	0x40023800
 80050cc:	0800f3f0 	.word	0x0800f3f0

080050d0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	220f      	movs	r2, #15
 80050de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80050e0:	4b12      	ldr	r3, [pc, #72]	; (800512c <HAL_RCC_GetClockConfig+0x5c>)
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	f003 0203 	and.w	r2, r3, #3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80050ec:	4b0f      	ldr	r3, [pc, #60]	; (800512c <HAL_RCC_GetClockConfig+0x5c>)
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80050f8:	4b0c      	ldr	r3, [pc, #48]	; (800512c <HAL_RCC_GetClockConfig+0x5c>)
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005104:	4b09      	ldr	r3, [pc, #36]	; (800512c <HAL_RCC_GetClockConfig+0x5c>)
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	08db      	lsrs	r3, r3, #3
 800510a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005112:	4b07      	ldr	r3, [pc, #28]	; (8005130 <HAL_RCC_GetClockConfig+0x60>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 020f 	and.w	r2, r3, #15
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	601a      	str	r2, [r3, #0]
}
 800511e:	bf00      	nop
 8005120:	370c      	adds	r7, #12
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop
 800512c:	40023800 	.word	0x40023800
 8005130:	40023c00 	.word	0x40023c00

08005134 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b088      	sub	sp, #32
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800513c:	2300      	movs	r3, #0
 800513e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005140:	2300      	movs	r3, #0
 8005142:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005144:	2300      	movs	r3, #0
 8005146:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005148:	2300      	movs	r3, #0
 800514a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800514c:	2300      	movs	r3, #0
 800514e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 0301 	and.w	r3, r3, #1
 8005158:	2b00      	cmp	r3, #0
 800515a:	d012      	beq.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800515c:	4b69      	ldr	r3, [pc, #420]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	4a68      	ldr	r2, [pc, #416]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005162:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005166:	6093      	str	r3, [r2, #8]
 8005168:	4b66      	ldr	r3, [pc, #408]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800516a:	689a      	ldr	r2, [r3, #8]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005170:	4964      	ldr	r1, [pc, #400]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005172:	4313      	orrs	r3, r2
 8005174:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800517a:	2b00      	cmp	r3, #0
 800517c:	d101      	bne.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800517e:	2301      	movs	r3, #1
 8005180:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d017      	beq.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800518e:	4b5d      	ldr	r3, [pc, #372]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005190:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005194:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800519c:	4959      	ldr	r1, [pc, #356]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051ac:	d101      	bne.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80051ae:	2301      	movs	r3, #1
 80051b0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d101      	bne.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80051ba:	2301      	movs	r3, #1
 80051bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d017      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80051ca:	4b4e      	ldr	r3, [pc, #312]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051d0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d8:	494a      	ldr	r1, [pc, #296]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051e8:	d101      	bne.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80051ea:	2301      	movs	r3, #1
 80051ec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d101      	bne.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80051f6:	2301      	movs	r3, #1
 80051f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005202:	2b00      	cmp	r3, #0
 8005204:	d001      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005206:	2301      	movs	r3, #1
 8005208:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0320 	and.w	r3, r3, #32
 8005212:	2b00      	cmp	r3, #0
 8005214:	f000 808b 	beq.w	800532e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005218:	4b3a      	ldr	r3, [pc, #232]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800521a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521c:	4a39      	ldr	r2, [pc, #228]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800521e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005222:	6413      	str	r3, [r2, #64]	; 0x40
 8005224:	4b37      	ldr	r3, [pc, #220]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800522c:	60bb      	str	r3, [r7, #8]
 800522e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005230:	4b35      	ldr	r3, [pc, #212]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a34      	ldr	r2, [pc, #208]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005236:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800523a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800523c:	f7fd fe48 	bl	8002ed0 <HAL_GetTick>
 8005240:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005242:	e008      	b.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005244:	f7fd fe44 	bl	8002ed0 <HAL_GetTick>
 8005248:	4602      	mov	r2, r0
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	2b64      	cmp	r3, #100	; 0x64
 8005250:	d901      	bls.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e31e      	b.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x760>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005256:	4b2c      	ldr	r3, [pc, #176]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800525e:	2b00      	cmp	r3, #0
 8005260:	d0f0      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005262:	4b28      	ldr	r3, [pc, #160]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005266:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800526a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d035      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005276:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800527a:	693a      	ldr	r2, [r7, #16]
 800527c:	429a      	cmp	r2, r3
 800527e:	d02e      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005280:	4b20      	ldr	r3, [pc, #128]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005284:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005288:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800528a:	4b1e      	ldr	r3, [pc, #120]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800528c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800528e:	4a1d      	ldr	r2, [pc, #116]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005294:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005296:	4b1b      	ldr	r3, [pc, #108]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800529a:	4a1a      	ldr	r2, [pc, #104]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800529c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052a0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80052a2:	4a18      	ldr	r2, [pc, #96]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80052a8:	4b16      	ldr	r3, [pc, #88]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ac:	f003 0301 	and.w	r3, r3, #1
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d114      	bne.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052b4:	f7fd fe0c 	bl	8002ed0 <HAL_GetTick>
 80052b8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052ba:	e00a      	b.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052bc:	f7fd fe08 	bl	8002ed0 <HAL_GetTick>
 80052c0:	4602      	mov	r2, r0
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d901      	bls.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e2e0      	b.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x760>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052d2:	4b0c      	ldr	r3, [pc, #48]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052d6:	f003 0302 	and.w	r3, r3, #2
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d0ee      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052ea:	d111      	bne.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80052ec:	4b05      	ldr	r3, [pc, #20]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80052f8:	4b04      	ldr	r3, [pc, #16]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80052fa:	400b      	ands	r3, r1
 80052fc:	4901      	ldr	r1, [pc, #4]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	608b      	str	r3, [r1, #8]
 8005302:	e00b      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005304:	40023800 	.word	0x40023800
 8005308:	40007000 	.word	0x40007000
 800530c:	0ffffcff 	.word	0x0ffffcff
 8005310:	4bac      	ldr	r3, [pc, #688]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	4aab      	ldr	r2, [pc, #684]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005316:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800531a:	6093      	str	r3, [r2, #8]
 800531c:	4ba9      	ldr	r3, [pc, #676]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800531e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005324:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005328:	49a6      	ldr	r1, [pc, #664]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800532a:	4313      	orrs	r3, r2
 800532c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 0310 	and.w	r3, r3, #16
 8005336:	2b00      	cmp	r3, #0
 8005338:	d010      	beq.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800533a:	4ba2      	ldr	r3, [pc, #648]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800533c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005340:	4aa0      	ldr	r2, [pc, #640]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005342:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005346:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800534a:	4b9e      	ldr	r3, [pc, #632]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800534c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005354:	499b      	ldr	r1, [pc, #620]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005356:	4313      	orrs	r3, r2
 8005358:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d00a      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005368:	4b96      	ldr	r3, [pc, #600]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800536a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800536e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005376:	4993      	ldr	r1, [pc, #588]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005378:	4313      	orrs	r3, r2
 800537a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d00a      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800538a:	4b8e      	ldr	r3, [pc, #568]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800538c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005390:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005398:	498a      	ldr	r1, [pc, #552]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800539a:	4313      	orrs	r3, r2
 800539c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d00a      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80053ac:	4b85      	ldr	r3, [pc, #532]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053ba:	4982      	ldr	r1, [pc, #520]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053bc:	4313      	orrs	r3, r2
 80053be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d00a      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80053ce:	4b7d      	ldr	r3, [pc, #500]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053dc:	4979      	ldr	r1, [pc, #484]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053de:	4313      	orrs	r3, r2
 80053e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d00a      	beq.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80053f0:	4b74      	ldr	r3, [pc, #464]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053f6:	f023 0203 	bic.w	r2, r3, #3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053fe:	4971      	ldr	r1, [pc, #452]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005400:	4313      	orrs	r3, r2
 8005402:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00a      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005412:	4b6c      	ldr	r3, [pc, #432]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005418:	f023 020c 	bic.w	r2, r3, #12
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005420:	4968      	ldr	r1, [pc, #416]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005422:	4313      	orrs	r3, r2
 8005424:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005430:	2b00      	cmp	r3, #0
 8005432:	d00a      	beq.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005434:	4b63      	ldr	r3, [pc, #396]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800543a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005442:	4960      	ldr	r1, [pc, #384]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005444:	4313      	orrs	r3, r2
 8005446:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005452:	2b00      	cmp	r3, #0
 8005454:	d00a      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005456:	4b5b      	ldr	r3, [pc, #364]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005458:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800545c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005464:	4957      	ldr	r1, [pc, #348]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005466:	4313      	orrs	r3, r2
 8005468:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005474:	2b00      	cmp	r3, #0
 8005476:	d00a      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005478:	4b52      	ldr	r3, [pc, #328]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800547a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800547e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005486:	494f      	ldr	r1, [pc, #316]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005488:	4313      	orrs	r3, r2
 800548a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00a      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800549a:	4b4a      	ldr	r3, [pc, #296]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800549c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054a0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054a8:	4946      	ldr	r1, [pc, #280]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054aa:	4313      	orrs	r3, r2
 80054ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d00a      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80054bc:	4b41      	ldr	r3, [pc, #260]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054c2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054ca:	493e      	ldr	r1, [pc, #248]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054cc:	4313      	orrs	r3, r2
 80054ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d00a      	beq.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80054de:	4b39      	ldr	r3, [pc, #228]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054ec:	4935      	ldr	r1, [pc, #212]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054ee:	4313      	orrs	r3, r2
 80054f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d00a      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005500:	4b30      	ldr	r3, [pc, #192]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005506:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800550e:	492d      	ldr	r1, [pc, #180]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005510:	4313      	orrs	r3, r2
 8005512:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800551e:	2b00      	cmp	r3, #0
 8005520:	d011      	beq.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005522:	4b28      	ldr	r3, [pc, #160]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005528:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005530:	4924      	ldr	r1, [pc, #144]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005532:	4313      	orrs	r3, r2
 8005534:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800553c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005540:	d101      	bne.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005542:	2301      	movs	r3, #1
 8005544:	61bb      	str	r3, [r7, #24]
    pllsaiused = 1;
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800554e:	2b00      	cmp	r3, #0
 8005550:	d00a      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x434>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005552:	4b1c      	ldr	r3, [pc, #112]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005554:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005558:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005560:	4918      	ldr	r1, [pc, #96]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005562:	4313      	orrs	r3, r2
 8005564:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005570:	2b00      	cmp	r3, #0
 8005572:	d00b      	beq.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005574:	4b13      	ldr	r3, [pc, #76]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800557a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005584:	490f      	ldr	r1, [pc, #60]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005586:	4313      	orrs	r3, r2
 8005588:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	2b01      	cmp	r3, #1
 8005590:	d005      	beq.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x46a>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800559a:	f040 80d8 	bne.w	800574e <HAL_RCCEx_PeriphCLKConfig+0x61a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800559e:	4b09      	ldr	r3, [pc, #36]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a08      	ldr	r2, [pc, #32]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055a4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80055a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055aa:	f7fd fc91 	bl	8002ed0 <HAL_GetTick>
 80055ae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80055b0:	e00a      	b.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x494>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80055b2:	f7fd fc8d 	bl	8002ed0 <HAL_GetTick>
 80055b6:	4602      	mov	r2, r0
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	1ad3      	subs	r3, r2, r3
 80055bc:	2b64      	cmp	r3, #100	; 0x64
 80055be:	d903      	bls.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x494>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055c0:	2303      	movs	r3, #3
 80055c2:	e167      	b.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x760>
 80055c4:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80055c8:	4bad      	ldr	r3, [pc, #692]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d1ee      	bne.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x47e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 0301 	and.w	r3, r3, #1
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d021      	beq.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d11d      	bne.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80055e8:	4ba5      	ldr	r3, [pc, #660]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80055ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055ee:	0c1b      	lsrs	r3, r3, #16
 80055f0:	f003 0303 	and.w	r3, r3, #3
 80055f4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80055f6:	4ba2      	ldr	r3, [pc, #648]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80055f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055fc:	0e1b      	lsrs	r3, r3, #24
 80055fe:	f003 030f 	and.w	r3, r3, #15
 8005602:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	019a      	lsls	r2, r3, #6
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	041b      	lsls	r3, r3, #16
 800560e:	431a      	orrs	r2, r3
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	061b      	lsls	r3, r3, #24
 8005614:	431a      	orrs	r2, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	071b      	lsls	r3, r3, #28
 800561c:	4998      	ldr	r1, [pc, #608]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800561e:	4313      	orrs	r3, r2
 8005620:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800562c:	2b00      	cmp	r3, #0
 800562e:	d004      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005634:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005638:	d00a      	beq.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x51c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005642:	2b00      	cmp	r3, #0
 8005644:	d02e      	beq.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x570>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800564a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800564e:	d129      	bne.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x570>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005650:	4b8b      	ldr	r3, [pc, #556]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8005652:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005656:	0c1b      	lsrs	r3, r3, #16
 8005658:	f003 0303 	and.w	r3, r3, #3
 800565c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800565e:	4b88      	ldr	r3, [pc, #544]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8005660:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005664:	0f1b      	lsrs	r3, r3, #28
 8005666:	f003 0307 	and.w	r3, r3, #7
 800566a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	019a      	lsls	r2, r3, #6
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	041b      	lsls	r3, r3, #16
 8005676:	431a      	orrs	r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	061b      	lsls	r3, r3, #24
 800567e:	431a      	orrs	r2, r3
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	071b      	lsls	r3, r3, #28
 8005684:	497e      	ldr	r1, [pc, #504]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8005686:	4313      	orrs	r3, r2
 8005688:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800568c:	4b7c      	ldr	r3, [pc, #496]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800568e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005692:	f023 021f 	bic.w	r2, r3, #31
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569a:	3b01      	subs	r3, #1
 800569c:	4978      	ldr	r1, [pc, #480]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800569e:	4313      	orrs	r3, r2
 80056a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d01d      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80056b0:	4b73      	ldr	r3, [pc, #460]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80056b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056b6:	0e1b      	lsrs	r3, r3, #24
 80056b8:	f003 030f 	and.w	r3, r3, #15
 80056bc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80056be:	4b70      	ldr	r3, [pc, #448]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80056c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056c4:	0f1b      	lsrs	r3, r3, #28
 80056c6:	f003 0307 	and.w	r3, r3, #7
 80056ca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	019a      	lsls	r2, r3, #6
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	041b      	lsls	r3, r3, #16
 80056d8:	431a      	orrs	r2, r3
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	061b      	lsls	r3, r3, #24
 80056de:	431a      	orrs	r2, r3
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	071b      	lsls	r3, r3, #28
 80056e4:	4966      	ldr	r1, [pc, #408]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80056e6:	4313      	orrs	r3, r2
 80056e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d011      	beq.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	019a      	lsls	r2, r3, #6
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	041b      	lsls	r3, r3, #16
 8005704:	431a      	orrs	r2, r3
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	061b      	lsls	r3, r3, #24
 800570c:	431a      	orrs	r2, r3
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	071b      	lsls	r3, r3, #28
 8005714:	495a      	ldr	r1, [pc, #360]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8005716:	4313      	orrs	r3, r2
 8005718:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800571c:	4b58      	ldr	r3, [pc, #352]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a57      	ldr	r2, [pc, #348]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8005722:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005726:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005728:	f7fd fbd2 	bl	8002ed0 <HAL_GetTick>
 800572c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800572e:	e008      	b.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x60e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005730:	f7fd fbce 	bl	8002ed0 <HAL_GetTick>
 8005734:	4602      	mov	r2, r0
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	2b64      	cmp	r3, #100	; 0x64
 800573c:	d901      	bls.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x60e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	e0a8      	b.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x760>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005742:	4b4f      	ldr	r3, [pc, #316]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800574a:	2b00      	cmp	r3, #0
 800574c:	d0f0      	beq.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800574e:	69bb      	ldr	r3, [r7, #24]
 8005750:	2b01      	cmp	r3, #1
 8005752:	f040 809e 	bne.w	8005892 <HAL_RCCEx_PeriphCLKConfig+0x75e>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005756:	4b4a      	ldr	r3, [pc, #296]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a49      	ldr	r2, [pc, #292]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800575c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005760:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005762:	f7fd fbb5 	bl	8002ed0 <HAL_GetTick>
 8005766:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005768:	e008      	b.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800576a:	f7fd fbb1 	bl	8002ed0 <HAL_GetTick>
 800576e:	4602      	mov	r2, r0
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	2b64      	cmp	r3, #100	; 0x64
 8005776:	d901      	bls.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005778:	2303      	movs	r3, #3
 800577a:	e08b      	b.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x760>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800577c:	4b40      	ldr	r3, [pc, #256]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005784:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005788:	d0ef      	beq.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x636>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005792:	2b00      	cmp	r3, #0
 8005794:	d003      	beq.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800579a:	2b00      	cmp	r3, #0
 800579c:	d009      	beq.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d02e      	beq.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d12a      	bne.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80057b2:	4b33      	ldr	r3, [pc, #204]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80057b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057b8:	0c1b      	lsrs	r3, r3, #16
 80057ba:	f003 0303 	and.w	r3, r3, #3
 80057be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80057c0:	4b2f      	ldr	r3, [pc, #188]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80057c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057c6:	0f1b      	lsrs	r3, r3, #28
 80057c8:	f003 0307 	and.w	r3, r3, #7
 80057cc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	695b      	ldr	r3, [r3, #20]
 80057d2:	019a      	lsls	r2, r3, #6
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	041b      	lsls	r3, r3, #16
 80057d8:	431a      	orrs	r2, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	699b      	ldr	r3, [r3, #24]
 80057de:	061b      	lsls	r3, r3, #24
 80057e0:	431a      	orrs	r2, r3
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	071b      	lsls	r3, r3, #28
 80057e6:	4926      	ldr	r1, [pc, #152]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80057e8:	4313      	orrs	r3, r2
 80057ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80057ee:	4b24      	ldr	r3, [pc, #144]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80057f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057f4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057fc:	3b01      	subs	r3, #1
 80057fe:	021b      	lsls	r3, r3, #8
 8005800:	491f      	ldr	r1, [pc, #124]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8005802:	4313      	orrs	r3, r2
 8005804:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005810:	2b00      	cmp	r3, #0
 8005812:	d022      	beq.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x726>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005818:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800581c:	d11d      	bne.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x726>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800581e:	4b18      	ldr	r3, [pc, #96]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8005820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005824:	0e1b      	lsrs	r3, r3, #24
 8005826:	f003 030f 	and.w	r3, r3, #15
 800582a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800582c:	4b14      	ldr	r3, [pc, #80]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800582e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005832:	0f1b      	lsrs	r3, r3, #28
 8005834:	f003 0307 	and.w	r3, r3, #7
 8005838:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	695b      	ldr	r3, [r3, #20]
 800583e:	019a      	lsls	r2, r3, #6
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6a1b      	ldr	r3, [r3, #32]
 8005844:	041b      	lsls	r3, r3, #16
 8005846:	431a      	orrs	r2, r3
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	061b      	lsls	r3, r3, #24
 800584c:	431a      	orrs	r2, r3
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	071b      	lsls	r3, r3, #28
 8005852:	490b      	ldr	r1, [pc, #44]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8005854:	4313      	orrs	r3, r2
 8005856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800585a:	4b09      	ldr	r3, [pc, #36]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a08      	ldr	r2, [pc, #32]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8005860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005864:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005866:	f7fd fb33 	bl	8002ed0 <HAL_GetTick>
 800586a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800586c:	e00a      	b.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x750>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800586e:	f7fd fb2f 	bl	8002ed0 <HAL_GetTick>
 8005872:	4602      	mov	r2, r0
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	1ad3      	subs	r3, r2, r3
 8005878:	2b64      	cmp	r3, #100	; 0x64
 800587a:	d903      	bls.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x750>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800587c:	2303      	movs	r3, #3
 800587e:	e009      	b.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8005880:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005884:	4b05      	ldr	r3, [pc, #20]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x768>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800588c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005890:	d1ed      	bne.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x73a>
      }
    }
  }
  return HAL_OK;
 8005892:	2300      	movs	r3, #0
}
 8005894:	4618      	mov	r0, r3
 8005896:	3720      	adds	r7, #32
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}
 800589c:	40023800 	.word	0x40023800

080058a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d101      	bne.n	80058b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e084      	b.n	80059bc <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d106      	bne.n	80058d2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f7fb fd6f 	bl	80013b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2202      	movs	r2, #2
 80058d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058e8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058f2:	d902      	bls.n	80058fa <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80058f4:	2300      	movs	r3, #0
 80058f6:	60fb      	str	r3, [r7, #12]
 80058f8:	e002      	b.n	8005900 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80058fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058fe:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005908:	d007      	beq.n	800591a <HAL_SPI_Init+0x7a>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005912:	d002      	beq.n	800591a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800591e:	2b00      	cmp	r3, #0
 8005920:	d10b      	bne.n	800593a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800592a:	d903      	bls.n	8005934 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2202      	movs	r2, #2
 8005930:	631a      	str	r2, [r3, #48]	; 0x30
 8005932:	e002      	b.n	800593a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	685a      	ldr	r2, [r3, #4]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	431a      	orrs	r2, r3
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	691b      	ldr	r3, [r3, #16]
 8005948:	431a      	orrs	r2, r3
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	695b      	ldr	r3, [r3, #20]
 800594e:	431a      	orrs	r2, r3
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	699b      	ldr	r3, [r3, #24]
 8005954:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005958:	431a      	orrs	r2, r3
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	69db      	ldr	r3, [r3, #28]
 800595e:	431a      	orrs	r2, r3
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a1b      	ldr	r3, [r3, #32]
 8005964:	ea42 0103 	orr.w	r1, r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	430a      	orrs	r2, r1
 8005972:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	699b      	ldr	r3, [r3, #24]
 8005978:	0c1b      	lsrs	r3, r3, #16
 800597a:	f003 0204 	and.w	r2, r3, #4
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005982:	431a      	orrs	r2, r3
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005988:	431a      	orrs	r2, r3
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	68db      	ldr	r3, [r3, #12]
 800598e:	ea42 0103 	orr.w	r1, r2, r3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	68fa      	ldr	r2, [r7, #12]
 8005998:	430a      	orrs	r2, r1
 800599a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	69da      	ldr	r2, [r3, #28]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059aa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2201      	movs	r2, #1
 80059b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80059ba:	2300      	movs	r3, #0
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3710      	adds	r7, #16
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b086      	sub	sp, #24
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	60b9      	str	r1, [r7, #8]
 80059ce:	4613      	mov	r3, r2
 80059d0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80059d2:	2300      	movs	r3, #0
 80059d4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d110      	bne.n	8005a00 <HAL_SPI_Receive_IT+0x3c>
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059e6:	d10b      	bne.n	8005a00 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2204      	movs	r2, #4
 80059ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80059f0:	88fb      	ldrh	r3, [r7, #6]
 80059f2:	68ba      	ldr	r2, [r7, #8]
 80059f4:	68b9      	ldr	r1, [r7, #8]
 80059f6:	68f8      	ldr	r0, [r7, #12]
 80059f8:	f000 f88c 	bl	8005b14 <HAL_SPI_TransmitReceive_IT>
 80059fc:	4603      	mov	r3, r0
 80059fe:	e081      	b.n	8005b04 <HAL_SPI_Receive_IT+0x140>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d101      	bne.n	8005a0e <HAL_SPI_Receive_IT+0x4a>
 8005a0a:	2302      	movs	r3, #2
 8005a0c:	e07a      	b.n	8005b04 <HAL_SPI_Receive_IT+0x140>
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2201      	movs	r2, #1
 8005a12:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d002      	beq.n	8005a28 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8005a22:	2302      	movs	r3, #2
 8005a24:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005a26:	e068      	b.n	8005afa <HAL_SPI_Receive_IT+0x136>
  }

  if ((pData == NULL) || (Size == 0U))
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d002      	beq.n	8005a34 <HAL_SPI_Receive_IT+0x70>
 8005a2e:	88fb      	ldrh	r3, [r7, #6]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d102      	bne.n	8005a3a <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005a38:	e05f      	b.n	8005afa <HAL_SPI_Receive_IT+0x136>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2204      	movs	r2, #4
 8005a3e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2200      	movs	r2, #0
 8005a46:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	68ba      	ldr	r2, [r7, #8]
 8005a4c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	88fa      	ldrh	r2, [r7, #6]
 8005a52:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	88fa      	ldrh	r2, [r7, #6]
 8005a5a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2200      	movs	r2, #0
 8005a62:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2200      	movs	r2, #0
 8005a68:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a7e:	d90b      	bls.n	8005a98 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	685a      	ldr	r2, [r3, #4]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005a8e:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	4a1e      	ldr	r2, [pc, #120]	; (8005b0c <HAL_SPI_Receive_IT+0x148>)
 8005a94:	64da      	str	r2, [r3, #76]	; 0x4c
 8005a96:	e00a      	b.n	8005aae <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	685a      	ldr	r2, [r3, #4]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005aa6:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	4a19      	ldr	r2, [pc, #100]	; (8005b10 <HAL_SPI_Receive_IT+0x14c>)
 8005aac:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ab6:	d107      	bne.n	8005ac8 <HAL_SPI_Receive_IT+0x104>
  {
    SPI_1LINE_RX(hspi);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005ac6:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	685a      	ldr	r2, [r3, #4]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8005ad6:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ae2:	2b40      	cmp	r3, #64	; 0x40
 8005ae4:	d008      	beq.n	8005af8 <HAL_SPI_Receive_IT+0x134>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005af4:	601a      	str	r2, [r3, #0]
 8005af6:	e000      	b.n	8005afa <HAL_SPI_Receive_IT+0x136>
  }

error :
 8005af8:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005b02:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3718      	adds	r7, #24
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	08005f03 	.word	0x08005f03
 8005b10:	08005eb3 	.word	0x08005eb3

08005b14 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b087      	sub	sp, #28
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	607a      	str	r2, [r7, #4]
 8005b20:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005b22:	2300      	movs	r3, #0
 8005b24:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d101      	bne.n	8005b34 <HAL_SPI_TransmitReceive_IT+0x20>
 8005b30:	2302      	movs	r3, #2
 8005b32:	e091      	b.n	8005c58 <HAL_SPI_TransmitReceive_IT+0x144>
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005b42:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005b4a:	7dbb      	ldrb	r3, [r7, #22]
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d00d      	beq.n	8005b6c <HAL_SPI_TransmitReceive_IT+0x58>
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b56:	d106      	bne.n	8005b66 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d102      	bne.n	8005b66 <HAL_SPI_TransmitReceive_IT+0x52>
 8005b60:	7dbb      	ldrb	r3, [r7, #22]
 8005b62:	2b04      	cmp	r3, #4
 8005b64:	d002      	beq.n	8005b6c <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8005b66:	2302      	movs	r3, #2
 8005b68:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005b6a:	e070      	b.n	8005c4e <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d005      	beq.n	8005b7e <HAL_SPI_TransmitReceive_IT+0x6a>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d002      	beq.n	8005b7e <HAL_SPI_TransmitReceive_IT+0x6a>
 8005b78:	887b      	ldrh	r3, [r7, #2]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d102      	bne.n	8005b84 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005b82:	e064      	b.n	8005c4e <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	2b04      	cmp	r3, #4
 8005b8e:	d003      	beq.n	8005b98 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2205      	movs	r2, #5
 8005b94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	68ba      	ldr	r2, [r7, #8]
 8005ba2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	887a      	ldrh	r2, [r7, #2]
 8005ba8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	887a      	ldrh	r2, [r7, #2]
 8005bae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	887a      	ldrh	r2, [r7, #2]
 8005bba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	887a      	ldrh	r2, [r7, #2]
 8005bc2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005bce:	d906      	bls.n	8005bde <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	4a24      	ldr	r2, [pc, #144]	; (8005c64 <HAL_SPI_TransmitReceive_IT+0x150>)
 8005bd4:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	4a23      	ldr	r2, [pc, #140]	; (8005c68 <HAL_SPI_TransmitReceive_IT+0x154>)
 8005bda:	651a      	str	r2, [r3, #80]	; 0x50
 8005bdc:	e005      	b.n	8005bea <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	4a22      	ldr	r2, [pc, #136]	; (8005c6c <HAL_SPI_TransmitReceive_IT+0x158>)
 8005be2:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	4a22      	ldr	r2, [pc, #136]	; (8005c70 <HAL_SPI_TransmitReceive_IT+0x15c>)
 8005be8:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005bf2:	d802      	bhi.n	8005bfa <HAL_SPI_TransmitReceive_IT+0xe6>
 8005bf4:	887b      	ldrh	r3, [r7, #2]
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d908      	bls.n	8005c0c <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	685a      	ldr	r2, [r3, #4]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005c08:	605a      	str	r2, [r3, #4]
 8005c0a:	e007      	b.n	8005c1c <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	685a      	ldr	r2, [r3, #4]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005c1a:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	685a      	ldr	r2, [r3, #4]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8005c2a:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c36:	2b40      	cmp	r3, #64	; 0x40
 8005c38:	d008      	beq.n	8005c4c <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c48:	601a      	str	r2, [r3, #0]
 8005c4a:	e000      	b.n	8005c4e <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8005c4c:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005c56:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	371c      	adds	r7, #28
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr
 8005c64:	08005ded 	.word	0x08005ded
 8005c68:	08005e53 	.word	0x08005e53
 8005c6c:	08005c9d 	.word	0x08005c9d
 8005c70:	08005d5b 	.word	0x08005d5b

08005c74 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8005c7c:	bf00      	nop
 8005c7e:	370c      	adds	r7, #12
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr

08005c88 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005c90:	bf00      	nop
 8005c92:	370c      	adds	r7, #12
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b082      	sub	sp, #8
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d923      	bls.n	8005cf8 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68da      	ldr	r2, [r3, #12]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cba:	b292      	uxth	r2, r2
 8005cbc:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc2:	1c9a      	adds	r2, r3, #2
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	3b02      	subs	r3, #2
 8005cd2:	b29a      	uxth	r2, r3
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d11f      	bne.n	8005d26 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	685a      	ldr	r2, [r3, #4]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005cf4:	605a      	str	r2, [r3, #4]
 8005cf6:	e016      	b.n	8005d26 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f103 020c 	add.w	r2, r3, #12
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d04:	7812      	ldrb	r2, [r2, #0]
 8005d06:	b2d2      	uxtb	r2, r2
 8005d08:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0e:	1c5a      	adds	r2, r3, #1
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	3b01      	subs	r3, #1
 8005d1e:	b29a      	uxth	r2, r3
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d10f      	bne.n	8005d52 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	685a      	ldr	r2, [r3, #4]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005d40:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d102      	bne.n	8005d52 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f000 fa73 	bl	8006238 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005d52:	bf00      	nop
 8005d54:	3708      	adds	r7, #8
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}

08005d5a <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005d5a:	b580      	push	{r7, lr}
 8005d5c:	b082      	sub	sp, #8
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d912      	bls.n	8005d92 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d70:	881a      	ldrh	r2, [r3, #0]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d7c:	1c9a      	adds	r2, r3, #2
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	3b02      	subs	r3, #2
 8005d8a:	b29a      	uxth	r2, r3
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d90:	e012      	b.n	8005db8 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	330c      	adds	r3, #12
 8005d9c:	7812      	ldrb	r2, [r2, #0]
 8005d9e:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da4:	1c5a      	adds	r2, r3, #1
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	3b01      	subs	r3, #1
 8005db2:	b29a      	uxth	r2, r3
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d110      	bne.n	8005de4 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	685a      	ldr	r2, [r3, #4]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005dd0:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d102      	bne.n	8005de4 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 fa2a 	bl	8006238 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005de4:	bf00      	nop
 8005de6:	3708      	adds	r7, #8
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b082      	sub	sp, #8
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	68da      	ldr	r2, [r3, #12]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfe:	b292      	uxth	r2, r2
 8005e00:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e06:	1c9a      	adds	r2, r3, #2
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	3b01      	subs	r3, #1
 8005e16:	b29a      	uxth	r2, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d10f      	bne.n	8005e4a <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	685a      	ldr	r2, [r3, #4]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e38:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d102      	bne.n	8005e4a <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 f9f7 	bl	8006238 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005e4a:	bf00      	nop
 8005e4c:	3708      	adds	r7, #8
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}

08005e52 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005e52:	b580      	push	{r7, lr}
 8005e54:	b082      	sub	sp, #8
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e5e:	881a      	ldrh	r2, [r3, #0]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e6a:	1c9a      	adds	r2, r3, #2
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	3b01      	subs	r3, #1
 8005e78:	b29a      	uxth	r2, r3
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d110      	bne.n	8005eaa <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	685a      	ldr	r2, [r3, #4]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e96:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d102      	bne.n	8005eaa <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f000 f9c7 	bl	8006238 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005eaa:	bf00      	nop
 8005eac:	3708      	adds	r7, #8
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}

08005eb2 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005eb2:	b580      	push	{r7, lr}
 8005eb4:	b082      	sub	sp, #8
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f103 020c 	add.w	r2, r3, #12
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec6:	7812      	ldrb	r2, [r2, #0]
 8005ec8:	b2d2      	uxtb	r2, r2
 8005eca:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed0:	1c5a      	adds	r2, r3, #1
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	3b01      	subs	r3, #1
 8005ee0:	b29a      	uxth	r2, r3
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d102      	bne.n	8005efa <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f000 f9e1 	bl	80062bc <SPI_CloseRx_ISR>
  }
}
 8005efa:	bf00      	nop
 8005efc:	3708      	adds	r7, #8
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}

08005f02 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005f02:	b580      	push	{r7, lr}
 8005f04:	b082      	sub	sp, #8
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	68da      	ldr	r2, [r3, #12]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f14:	b292      	uxth	r2, r2
 8005f16:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1c:	1c9a      	adds	r2, r3, #2
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	3b01      	subs	r3, #1
 8005f2c:	b29a      	uxth	r2, r3
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d102      	bne.n	8005f46 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f000 f9bb 	bl	80062bc <SPI_CloseRx_ISR>
  }
}
 8005f46:	bf00      	nop
 8005f48:	3708      	adds	r7, #8
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}

08005f4e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f4e:	b580      	push	{r7, lr}
 8005f50:	b084      	sub	sp, #16
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	60f8      	str	r0, [r7, #12]
 8005f56:	60b9      	str	r1, [r7, #8]
 8005f58:	603b      	str	r3, [r7, #0]
 8005f5a:	4613      	mov	r3, r2
 8005f5c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f5e:	e04c      	b.n	8005ffa <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f66:	d048      	beq.n	8005ffa <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005f68:	f7fc ffb2 	bl	8002ed0 <HAL_GetTick>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	1ad3      	subs	r3, r2, r3
 8005f72:	683a      	ldr	r2, [r7, #0]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d902      	bls.n	8005f7e <SPI_WaitFlagStateUntilTimeout+0x30>
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d13d      	bne.n	8005ffa <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	685a      	ldr	r2, [r3, #4]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005f8c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f96:	d111      	bne.n	8005fbc <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fa0:	d004      	beq.n	8005fac <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005faa:	d107      	bne.n	8005fbc <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fc4:	d10f      	bne.n	8005fe6 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005fd4:	601a      	str	r2, [r3, #0]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005fe4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2201      	movs	r2, #1
 8005fea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	e00f      	b.n	800601a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	689a      	ldr	r2, [r3, #8]
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	4013      	ands	r3, r2
 8006004:	68ba      	ldr	r2, [r7, #8]
 8006006:	429a      	cmp	r2, r3
 8006008:	bf0c      	ite	eq
 800600a:	2301      	moveq	r3, #1
 800600c:	2300      	movne	r3, #0
 800600e:	b2db      	uxtb	r3, r3
 8006010:	461a      	mov	r2, r3
 8006012:	79fb      	ldrb	r3, [r7, #7]
 8006014:	429a      	cmp	r2, r3
 8006016:	d1a3      	bne.n	8005f60 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006018:	2300      	movs	r3, #0
}
 800601a:	4618      	mov	r0, r3
 800601c:	3710      	adds	r7, #16
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}

08006022 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006022:	b580      	push	{r7, lr}
 8006024:	b084      	sub	sp, #16
 8006026:	af00      	add	r7, sp, #0
 8006028:	60f8      	str	r0, [r7, #12]
 800602a:	60b9      	str	r1, [r7, #8]
 800602c:	607a      	str	r2, [r7, #4]
 800602e:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8006030:	e057      	b.n	80060e2 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006038:	d106      	bne.n	8006048 <SPI_WaitFifoStateUntilTimeout+0x26>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d103      	bne.n	8006048 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	330c      	adds	r3, #12
 8006046:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800604e:	d048      	beq.n	80060e2 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006050:	f7fc ff3e 	bl	8002ed0 <HAL_GetTick>
 8006054:	4602      	mov	r2, r0
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	1ad3      	subs	r3, r2, r3
 800605a:	683a      	ldr	r2, [r7, #0]
 800605c:	429a      	cmp	r2, r3
 800605e:	d902      	bls.n	8006066 <SPI_WaitFifoStateUntilTimeout+0x44>
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d13d      	bne.n	80060e2 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	685a      	ldr	r2, [r3, #4]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006074:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800607e:	d111      	bne.n	80060a4 <SPI_WaitFifoStateUntilTimeout+0x82>
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006088:	d004      	beq.n	8006094 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006092:	d107      	bne.n	80060a4 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060ac:	d10f      	bne.n	80060ce <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060bc:	601a      	str	r2, [r3, #0]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80060cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2201      	movs	r2, #1
 80060d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80060de:	2303      	movs	r3, #3
 80060e0:	e008      	b.n	80060f4 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	689a      	ldr	r2, [r3, #8]
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	4013      	ands	r3, r2
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d19f      	bne.n	8006032 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80060f2:	2300      	movs	r3, #0
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3710      	adds	r7, #16
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b086      	sub	sp, #24
 8006100:	af02      	add	r7, sp, #8
 8006102:	60f8      	str	r0, [r7, #12]
 8006104:	60b9      	str	r1, [r7, #8]
 8006106:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006110:	d111      	bne.n	8006136 <SPI_EndRxTransaction+0x3a>
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800611a:	d004      	beq.n	8006126 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006124:	d107      	bne.n	8006136 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006134:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	9300      	str	r3, [sp, #0]
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	2200      	movs	r2, #0
 800613e:	2180      	movs	r1, #128	; 0x80
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	f7ff ff04 	bl	8005f4e <SPI_WaitFlagStateUntilTimeout>
 8006146:	4603      	mov	r3, r0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d007      	beq.n	800615c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006150:	f043 0220 	orr.w	r2, r3, #32
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006158:	2303      	movs	r3, #3
 800615a:	e023      	b.n	80061a4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006164:	d11d      	bne.n	80061a2 <SPI_EndRxTransaction+0xa6>
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800616e:	d004      	beq.n	800617a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006178:	d113      	bne.n	80061a2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	9300      	str	r3, [sp, #0]
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	2200      	movs	r2, #0
 8006182:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006186:	68f8      	ldr	r0, [r7, #12]
 8006188:	f7ff ff4b 	bl	8006022 <SPI_WaitFifoStateUntilTimeout>
 800618c:	4603      	mov	r3, r0
 800618e:	2b00      	cmp	r3, #0
 8006190:	d007      	beq.n	80061a2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006196:	f043 0220 	orr.w	r2, r3, #32
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800619e:	2303      	movs	r3, #3
 80061a0:	e000      	b.n	80061a4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80061a2:	2300      	movs	r3, #0
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3710      	adds	r7, #16
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b086      	sub	sp, #24
 80061b0:	af02      	add	r7, sp, #8
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	9300      	str	r3, [sp, #0]
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	2200      	movs	r2, #0
 80061c0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80061c4:	68f8      	ldr	r0, [r7, #12]
 80061c6:	f7ff ff2c 	bl	8006022 <SPI_WaitFifoStateUntilTimeout>
 80061ca:	4603      	mov	r3, r0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d007      	beq.n	80061e0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061d4:	f043 0220 	orr.w	r2, r3, #32
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80061dc:	2303      	movs	r3, #3
 80061de:	e027      	b.n	8006230 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	9300      	str	r3, [sp, #0]
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	2200      	movs	r2, #0
 80061e8:	2180      	movs	r1, #128	; 0x80
 80061ea:	68f8      	ldr	r0, [r7, #12]
 80061ec:	f7ff feaf 	bl	8005f4e <SPI_WaitFlagStateUntilTimeout>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d007      	beq.n	8006206 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061fa:	f043 0220 	orr.w	r2, r3, #32
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006202:	2303      	movs	r3, #3
 8006204:	e014      	b.n	8006230 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	9300      	str	r3, [sp, #0]
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	2200      	movs	r2, #0
 800620e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006212:	68f8      	ldr	r0, [r7, #12]
 8006214:	f7ff ff05 	bl	8006022 <SPI_WaitFifoStateUntilTimeout>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d007      	beq.n	800622e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006222:	f043 0220 	orr.w	r2, r3, #32
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800622a:	2303      	movs	r3, #3
 800622c:	e000      	b.n	8006230 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800622e:	2300      	movs	r3, #0
}
 8006230:	4618      	mov	r0, r3
 8006232:	3710      	adds	r7, #16
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b084      	sub	sp, #16
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006240:	f7fc fe46 	bl	8002ed0 <HAL_GetTick>
 8006244:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	685a      	ldr	r2, [r3, #4]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f022 0220 	bic.w	r2, r2, #32
 8006254:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006256:	68fa      	ldr	r2, [r7, #12]
 8006258:	2164      	movs	r1, #100	; 0x64
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f7ff ffa6 	bl	80061ac <SPI_EndRxTxTransaction>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d005      	beq.n	8006272 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800626a:	f043 0220 	orr.w	r2, r3, #32
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006276:	2b00      	cmp	r3, #0
 8006278:	d115      	bne.n	80062a6 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006280:	b2db      	uxtb	r3, r3
 8006282:	2b04      	cmp	r3, #4
 8006284:	d107      	bne.n	8006296 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2201      	movs	r2, #1
 800628a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f7fb fcdc 	bl	8001c4c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8006294:	e00e      	b.n	80062b4 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2201      	movs	r2, #1
 800629a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f7ff fce8 	bl	8005c74 <HAL_SPI_TxRxCpltCallback>
}
 80062a4:	e006      	b.n	80062b4 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2201      	movs	r2, #1
 80062aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f7ff fcea 	bl	8005c88 <HAL_SPI_ErrorCallback>
}
 80062b4:	bf00      	nop
 80062b6:	3710      	adds	r7, #16
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}

080062bc <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b082      	sub	sp, #8
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	685a      	ldr	r2, [r3, #4]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80062d2:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80062d4:	f7fc fdfc 	bl	8002ed0 <HAL_GetTick>
 80062d8:	4603      	mov	r3, r0
 80062da:	461a      	mov	r2, r3
 80062dc:	2164      	movs	r1, #100	; 0x64
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f7ff ff0c 	bl	80060fc <SPI_EndRxTransaction>
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d005      	beq.n	80062f6 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062ee:	f043 0220 	orr.w	r2, r3, #32
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2201      	movs	r2, #1
 80062fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006302:	2b00      	cmp	r3, #0
 8006304:	d103      	bne.n	800630e <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f7fb fca0 	bl	8001c4c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800630c:	e002      	b.n	8006314 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f7ff fcba 	bl	8005c88 <HAL_SPI_ErrorCallback>
}
 8006314:	bf00      	nop
 8006316:	3708      	adds	r7, #8
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b082      	sub	sp, #8
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d101      	bne.n	800632e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e01d      	b.n	800636a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006334:	b2db      	uxtb	r3, r3
 8006336:	2b00      	cmp	r3, #0
 8006338:	d106      	bne.n	8006348 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 f815 	bl	8006372 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2202      	movs	r2, #2
 800634c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	3304      	adds	r3, #4
 8006358:	4619      	mov	r1, r3
 800635a:	4610      	mov	r0, r2
 800635c:	f000 f986 	bl	800666c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006368:	2300      	movs	r3, #0
}
 800636a:	4618      	mov	r0, r3
 800636c:	3708      	adds	r7, #8
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}

08006372 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006372:	b480      	push	{r7}
 8006374:	b083      	sub	sp, #12
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800637a:	bf00      	nop
 800637c:	370c      	adds	r7, #12
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr
	...

08006388 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006388:	b480      	push	{r7}
 800638a:	b085      	sub	sp, #20
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	68da      	ldr	r2, [r3, #12]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f042 0201 	orr.w	r2, r2, #1
 800639e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	689a      	ldr	r2, [r3, #8]
 80063a6:	4b0c      	ldr	r3, [pc, #48]	; (80063d8 <HAL_TIM_Base_Start_IT+0x50>)
 80063a8:	4013      	ands	r3, r2
 80063aa:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2b06      	cmp	r3, #6
 80063b0:	d00b      	beq.n	80063ca <HAL_TIM_Base_Start_IT+0x42>
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063b8:	d007      	beq.n	80063ca <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f042 0201 	orr.w	r2, r2, #1
 80063c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80063ca:	2300      	movs	r3, #0
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3714      	adds	r7, #20
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr
 80063d8:	00010007 	.word	0x00010007

080063dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b082      	sub	sp, #8
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	f003 0302 	and.w	r3, r3, #2
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	d122      	bne.n	8006438 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	f003 0302 	and.w	r3, r3, #2
 80063fc:	2b02      	cmp	r3, #2
 80063fe:	d11b      	bne.n	8006438 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f06f 0202 	mvn.w	r2, #2
 8006408:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2201      	movs	r2, #1
 800640e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	699b      	ldr	r3, [r3, #24]
 8006416:	f003 0303 	and.w	r3, r3, #3
 800641a:	2b00      	cmp	r3, #0
 800641c:	d003      	beq.n	8006426 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 f905 	bl	800662e <HAL_TIM_IC_CaptureCallback>
 8006424:	e005      	b.n	8006432 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 f8f7 	bl	800661a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 f908 	bl	8006642 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	f003 0304 	and.w	r3, r3, #4
 8006442:	2b04      	cmp	r3, #4
 8006444:	d122      	bne.n	800648c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	f003 0304 	and.w	r3, r3, #4
 8006450:	2b04      	cmp	r3, #4
 8006452:	d11b      	bne.n	800648c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f06f 0204 	mvn.w	r2, #4
 800645c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2202      	movs	r2, #2
 8006462:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	699b      	ldr	r3, [r3, #24]
 800646a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800646e:	2b00      	cmp	r3, #0
 8006470:	d003      	beq.n	800647a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 f8db 	bl	800662e <HAL_TIM_IC_CaptureCallback>
 8006478:	e005      	b.n	8006486 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 f8cd 	bl	800661a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 f8de 	bl	8006642 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	f003 0308 	and.w	r3, r3, #8
 8006496:	2b08      	cmp	r3, #8
 8006498:	d122      	bne.n	80064e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	f003 0308 	and.w	r3, r3, #8
 80064a4:	2b08      	cmp	r3, #8
 80064a6:	d11b      	bne.n	80064e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f06f 0208 	mvn.w	r2, #8
 80064b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2204      	movs	r2, #4
 80064b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	69db      	ldr	r3, [r3, #28]
 80064be:	f003 0303 	and.w	r3, r3, #3
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d003      	beq.n	80064ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 f8b1 	bl	800662e <HAL_TIM_IC_CaptureCallback>
 80064cc:	e005      	b.n	80064da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 f8a3 	bl	800661a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f000 f8b4 	bl	8006642 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	f003 0310 	and.w	r3, r3, #16
 80064ea:	2b10      	cmp	r3, #16
 80064ec:	d122      	bne.n	8006534 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	f003 0310 	and.w	r3, r3, #16
 80064f8:	2b10      	cmp	r3, #16
 80064fa:	d11b      	bne.n	8006534 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f06f 0210 	mvn.w	r2, #16
 8006504:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2208      	movs	r2, #8
 800650a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	69db      	ldr	r3, [r3, #28]
 8006512:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006516:	2b00      	cmp	r3, #0
 8006518:	d003      	beq.n	8006522 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 f887 	bl	800662e <HAL_TIM_IC_CaptureCallback>
 8006520:	e005      	b.n	800652e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 f879 	bl	800661a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f000 f88a 	bl	8006642 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	f003 0301 	and.w	r3, r3, #1
 800653e:	2b01      	cmp	r3, #1
 8006540:	d10e      	bne.n	8006560 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	f003 0301 	and.w	r3, r3, #1
 800654c:	2b01      	cmp	r3, #1
 800654e:	d107      	bne.n	8006560 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f06f 0201 	mvn.w	r2, #1
 8006558:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f7fa fee6 	bl	800132c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800656a:	2b80      	cmp	r3, #128	; 0x80
 800656c:	d10e      	bne.n	800658c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006578:	2b80      	cmp	r3, #128	; 0x80
 800657a:	d107      	bne.n	800658c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006584:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 f91a 	bl	80067c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	691b      	ldr	r3, [r3, #16]
 8006592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006596:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800659a:	d10e      	bne.n	80065ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065a6:	2b80      	cmp	r3, #128	; 0x80
 80065a8:	d107      	bne.n	80065ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80065b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f000 f90d 	bl	80067d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	691b      	ldr	r3, [r3, #16]
 80065c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065c4:	2b40      	cmp	r3, #64	; 0x40
 80065c6:	d10e      	bne.n	80065e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065d2:	2b40      	cmp	r3, #64	; 0x40
 80065d4:	d107      	bne.n	80065e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80065de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f000 f838 	bl	8006656 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	f003 0320 	and.w	r3, r3, #32
 80065f0:	2b20      	cmp	r3, #32
 80065f2:	d10e      	bne.n	8006612 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	f003 0320 	and.w	r3, r3, #32
 80065fe:	2b20      	cmp	r3, #32
 8006600:	d107      	bne.n	8006612 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f06f 0220 	mvn.w	r2, #32
 800660a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f000 f8cd 	bl	80067ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006612:	bf00      	nop
 8006614:	3708      	adds	r7, #8
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}

0800661a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800661a:	b480      	push	{r7}
 800661c:	b083      	sub	sp, #12
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006622:	bf00      	nop
 8006624:	370c      	adds	r7, #12
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr

0800662e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800662e:	b480      	push	{r7}
 8006630:	b083      	sub	sp, #12
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006636:	bf00      	nop
 8006638:	370c      	adds	r7, #12
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr

08006642 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006642:	b480      	push	{r7}
 8006644:	b083      	sub	sp, #12
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800664a:	bf00      	nop
 800664c:	370c      	adds	r7, #12
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr

08006656 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006656:	b480      	push	{r7}
 8006658:	b083      	sub	sp, #12
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800665e:	bf00      	nop
 8006660:	370c      	adds	r7, #12
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr
	...

0800666c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800666c:	b480      	push	{r7}
 800666e:	b085      	sub	sp, #20
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	4a40      	ldr	r2, [pc, #256]	; (8006780 <TIM_Base_SetConfig+0x114>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d013      	beq.n	80066ac <TIM_Base_SetConfig+0x40>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800668a:	d00f      	beq.n	80066ac <TIM_Base_SetConfig+0x40>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	4a3d      	ldr	r2, [pc, #244]	; (8006784 <TIM_Base_SetConfig+0x118>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d00b      	beq.n	80066ac <TIM_Base_SetConfig+0x40>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	4a3c      	ldr	r2, [pc, #240]	; (8006788 <TIM_Base_SetConfig+0x11c>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d007      	beq.n	80066ac <TIM_Base_SetConfig+0x40>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4a3b      	ldr	r2, [pc, #236]	; (800678c <TIM_Base_SetConfig+0x120>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d003      	beq.n	80066ac <TIM_Base_SetConfig+0x40>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	4a3a      	ldr	r2, [pc, #232]	; (8006790 <TIM_Base_SetConfig+0x124>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d108      	bne.n	80066be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	68fa      	ldr	r2, [r7, #12]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	4a2f      	ldr	r2, [pc, #188]	; (8006780 <TIM_Base_SetConfig+0x114>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d02b      	beq.n	800671e <TIM_Base_SetConfig+0xb2>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066cc:	d027      	beq.n	800671e <TIM_Base_SetConfig+0xb2>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	4a2c      	ldr	r2, [pc, #176]	; (8006784 <TIM_Base_SetConfig+0x118>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d023      	beq.n	800671e <TIM_Base_SetConfig+0xb2>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	4a2b      	ldr	r2, [pc, #172]	; (8006788 <TIM_Base_SetConfig+0x11c>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d01f      	beq.n	800671e <TIM_Base_SetConfig+0xb2>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4a2a      	ldr	r2, [pc, #168]	; (800678c <TIM_Base_SetConfig+0x120>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d01b      	beq.n	800671e <TIM_Base_SetConfig+0xb2>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	4a29      	ldr	r2, [pc, #164]	; (8006790 <TIM_Base_SetConfig+0x124>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d017      	beq.n	800671e <TIM_Base_SetConfig+0xb2>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	4a28      	ldr	r2, [pc, #160]	; (8006794 <TIM_Base_SetConfig+0x128>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d013      	beq.n	800671e <TIM_Base_SetConfig+0xb2>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	4a27      	ldr	r2, [pc, #156]	; (8006798 <TIM_Base_SetConfig+0x12c>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d00f      	beq.n	800671e <TIM_Base_SetConfig+0xb2>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	4a26      	ldr	r2, [pc, #152]	; (800679c <TIM_Base_SetConfig+0x130>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d00b      	beq.n	800671e <TIM_Base_SetConfig+0xb2>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	4a25      	ldr	r2, [pc, #148]	; (80067a0 <TIM_Base_SetConfig+0x134>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d007      	beq.n	800671e <TIM_Base_SetConfig+0xb2>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4a24      	ldr	r2, [pc, #144]	; (80067a4 <TIM_Base_SetConfig+0x138>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d003      	beq.n	800671e <TIM_Base_SetConfig+0xb2>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	4a23      	ldr	r2, [pc, #140]	; (80067a8 <TIM_Base_SetConfig+0x13c>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d108      	bne.n	8006730 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006724:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	68fa      	ldr	r2, [r7, #12]
 800672c:	4313      	orrs	r3, r2
 800672e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	695b      	ldr	r3, [r3, #20]
 800673a:	4313      	orrs	r3, r2
 800673c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	68fa      	ldr	r2, [r7, #12]
 8006742:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	689a      	ldr	r2, [r3, #8]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	4a0a      	ldr	r2, [pc, #40]	; (8006780 <TIM_Base_SetConfig+0x114>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d003      	beq.n	8006764 <TIM_Base_SetConfig+0xf8>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	4a0c      	ldr	r2, [pc, #48]	; (8006790 <TIM_Base_SetConfig+0x124>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d103      	bne.n	800676c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	691a      	ldr	r2, [r3, #16]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	615a      	str	r2, [r3, #20]
}
 8006772:	bf00      	nop
 8006774:	3714      	adds	r7, #20
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr
 800677e:	bf00      	nop
 8006780:	40010000 	.word	0x40010000
 8006784:	40000400 	.word	0x40000400
 8006788:	40000800 	.word	0x40000800
 800678c:	40000c00 	.word	0x40000c00
 8006790:	40010400 	.word	0x40010400
 8006794:	40014000 	.word	0x40014000
 8006798:	40014400 	.word	0x40014400
 800679c:	40014800 	.word	0x40014800
 80067a0:	40001800 	.word	0x40001800
 80067a4:	40001c00 	.word	0x40001c00
 80067a8:	40002000 	.word	0x40002000

080067ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80067b4:	bf00      	nop
 80067b6:	370c      	adds	r7, #12
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80067c8:	bf00      	nop
 80067ca:	370c      	adds	r7, #12
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80067dc:	bf00      	nop
 80067de:	370c      	adds	r7, #12
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80067e8:	b084      	sub	sp, #16
 80067ea:	b580      	push	{r7, lr}
 80067ec:	b084      	sub	sp, #16
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
 80067f2:	f107 001c 	add.w	r0, r7, #28
 80067f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80067fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d120      	bne.n	8006842 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006804:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	68da      	ldr	r2, [r3, #12]
 8006810:	4b20      	ldr	r3, [pc, #128]	; (8006894 <USB_CoreInit+0xac>)
 8006812:	4013      	ands	r3, r2
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	68db      	ldr	r3, [r3, #12]
 800681c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006824:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006826:	2b01      	cmp	r3, #1
 8006828:	d105      	bne.n	8006836 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	68db      	ldr	r3, [r3, #12]
 800682e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f001 fac4 	bl	8007dc4 <USB_CoreReset>
 800683c:	4603      	mov	r3, r0
 800683e:	73fb      	strb	r3, [r7, #15]
 8006840:	e010      	b.n	8006864 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f001 fab8 	bl	8007dc4 <USB_CoreReset>
 8006854:	4603      	mov	r3, r0
 8006856:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800685c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006866:	2b01      	cmp	r3, #1
 8006868:	d10b      	bne.n	8006882 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	f043 0206 	orr.w	r2, r3, #6
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	f043 0220 	orr.w	r2, r3, #32
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006882:	7bfb      	ldrb	r3, [r7, #15]
}
 8006884:	4618      	mov	r0, r3
 8006886:	3710      	adds	r7, #16
 8006888:	46bd      	mov	sp, r7
 800688a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800688e:	b004      	add	sp, #16
 8006890:	4770      	bx	lr
 8006892:	bf00      	nop
 8006894:	ffbdffbf 	.word	0xffbdffbf

08006898 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006898:	b480      	push	{r7}
 800689a:	b087      	sub	sp, #28
 800689c:	af00      	add	r7, sp, #0
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	60b9      	str	r1, [r7, #8]
 80068a2:	4613      	mov	r3, r2
 80068a4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80068a6:	79fb      	ldrb	r3, [r7, #7]
 80068a8:	2b02      	cmp	r3, #2
 80068aa:	d165      	bne.n	8006978 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	4a41      	ldr	r2, [pc, #260]	; (80069b4 <USB_SetTurnaroundTime+0x11c>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d906      	bls.n	80068c2 <USB_SetTurnaroundTime+0x2a>
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	4a40      	ldr	r2, [pc, #256]	; (80069b8 <USB_SetTurnaroundTime+0x120>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d802      	bhi.n	80068c2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80068bc:	230f      	movs	r3, #15
 80068be:	617b      	str	r3, [r7, #20]
 80068c0:	e062      	b.n	8006988 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	4a3c      	ldr	r2, [pc, #240]	; (80069b8 <USB_SetTurnaroundTime+0x120>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d906      	bls.n	80068d8 <USB_SetTurnaroundTime+0x40>
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	4a3b      	ldr	r2, [pc, #236]	; (80069bc <USB_SetTurnaroundTime+0x124>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d802      	bhi.n	80068d8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80068d2:	230e      	movs	r3, #14
 80068d4:	617b      	str	r3, [r7, #20]
 80068d6:	e057      	b.n	8006988 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	4a38      	ldr	r2, [pc, #224]	; (80069bc <USB_SetTurnaroundTime+0x124>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d906      	bls.n	80068ee <USB_SetTurnaroundTime+0x56>
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	4a37      	ldr	r2, [pc, #220]	; (80069c0 <USB_SetTurnaroundTime+0x128>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d802      	bhi.n	80068ee <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80068e8:	230d      	movs	r3, #13
 80068ea:	617b      	str	r3, [r7, #20]
 80068ec:	e04c      	b.n	8006988 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	4a33      	ldr	r2, [pc, #204]	; (80069c0 <USB_SetTurnaroundTime+0x128>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d906      	bls.n	8006904 <USB_SetTurnaroundTime+0x6c>
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	4a32      	ldr	r2, [pc, #200]	; (80069c4 <USB_SetTurnaroundTime+0x12c>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d802      	bhi.n	8006904 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80068fe:	230c      	movs	r3, #12
 8006900:	617b      	str	r3, [r7, #20]
 8006902:	e041      	b.n	8006988 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	4a2f      	ldr	r2, [pc, #188]	; (80069c4 <USB_SetTurnaroundTime+0x12c>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d906      	bls.n	800691a <USB_SetTurnaroundTime+0x82>
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	4a2e      	ldr	r2, [pc, #184]	; (80069c8 <USB_SetTurnaroundTime+0x130>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d802      	bhi.n	800691a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006914:	230b      	movs	r3, #11
 8006916:	617b      	str	r3, [r7, #20]
 8006918:	e036      	b.n	8006988 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	4a2a      	ldr	r2, [pc, #168]	; (80069c8 <USB_SetTurnaroundTime+0x130>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d906      	bls.n	8006930 <USB_SetTurnaroundTime+0x98>
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	4a29      	ldr	r2, [pc, #164]	; (80069cc <USB_SetTurnaroundTime+0x134>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d802      	bhi.n	8006930 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800692a:	230a      	movs	r3, #10
 800692c:	617b      	str	r3, [r7, #20]
 800692e:	e02b      	b.n	8006988 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	4a26      	ldr	r2, [pc, #152]	; (80069cc <USB_SetTurnaroundTime+0x134>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d906      	bls.n	8006946 <USB_SetTurnaroundTime+0xae>
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	4a25      	ldr	r2, [pc, #148]	; (80069d0 <USB_SetTurnaroundTime+0x138>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d802      	bhi.n	8006946 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006940:	2309      	movs	r3, #9
 8006942:	617b      	str	r3, [r7, #20]
 8006944:	e020      	b.n	8006988 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	4a21      	ldr	r2, [pc, #132]	; (80069d0 <USB_SetTurnaroundTime+0x138>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d906      	bls.n	800695c <USB_SetTurnaroundTime+0xc4>
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	4a20      	ldr	r2, [pc, #128]	; (80069d4 <USB_SetTurnaroundTime+0x13c>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d802      	bhi.n	800695c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006956:	2308      	movs	r3, #8
 8006958:	617b      	str	r3, [r7, #20]
 800695a:	e015      	b.n	8006988 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	4a1d      	ldr	r2, [pc, #116]	; (80069d4 <USB_SetTurnaroundTime+0x13c>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d906      	bls.n	8006972 <USB_SetTurnaroundTime+0xda>
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	4a1c      	ldr	r2, [pc, #112]	; (80069d8 <USB_SetTurnaroundTime+0x140>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d802      	bhi.n	8006972 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800696c:	2307      	movs	r3, #7
 800696e:	617b      	str	r3, [r7, #20]
 8006970:	e00a      	b.n	8006988 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006972:	2306      	movs	r3, #6
 8006974:	617b      	str	r3, [r7, #20]
 8006976:	e007      	b.n	8006988 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006978:	79fb      	ldrb	r3, [r7, #7]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d102      	bne.n	8006984 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800697e:	2309      	movs	r3, #9
 8006980:	617b      	str	r3, [r7, #20]
 8006982:	e001      	b.n	8006988 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006984:	2309      	movs	r3, #9
 8006986:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	68db      	ldr	r3, [r3, #12]
 800698c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	68da      	ldr	r2, [r3, #12]
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	029b      	lsls	r3, r3, #10
 800699c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80069a0:	431a      	orrs	r2, r3
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80069a6:	2300      	movs	r3, #0
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	371c      	adds	r7, #28
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr
 80069b4:	00d8acbf 	.word	0x00d8acbf
 80069b8:	00e4e1bf 	.word	0x00e4e1bf
 80069bc:	00f423ff 	.word	0x00f423ff
 80069c0:	0106737f 	.word	0x0106737f
 80069c4:	011a499f 	.word	0x011a499f
 80069c8:	01312cff 	.word	0x01312cff
 80069cc:	014ca43f 	.word	0x014ca43f
 80069d0:	016e35ff 	.word	0x016e35ff
 80069d4:	01a6ab1f 	.word	0x01a6ab1f
 80069d8:	01e847ff 	.word	0x01e847ff

080069dc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80069dc:	b480      	push	{r7}
 80069de:	b083      	sub	sp, #12
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	f043 0201 	orr.w	r2, r3, #1
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80069f0:	2300      	movs	r3, #0
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	370c      	adds	r7, #12
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr

080069fe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80069fe:	b480      	push	{r7}
 8006a00:	b083      	sub	sp, #12
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	f023 0201 	bic.w	r2, r3, #1
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006a12:	2300      	movs	r3, #0
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	370c      	adds	r7, #12
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b082      	sub	sp, #8
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	460b      	mov	r3, r1
 8006a2a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	68db      	ldr	r3, [r3, #12]
 8006a30:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006a38:	78fb      	ldrb	r3, [r7, #3]
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d106      	bne.n	8006a4c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	68db      	ldr	r3, [r3, #12]
 8006a42:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	60da      	str	r2, [r3, #12]
 8006a4a:	e00b      	b.n	8006a64 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006a4c:	78fb      	ldrb	r3, [r7, #3]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d106      	bne.n	8006a60 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	68db      	ldr	r3, [r3, #12]
 8006a56:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	60da      	str	r2, [r3, #12]
 8006a5e:	e001      	b.n	8006a64 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006a60:	2301      	movs	r3, #1
 8006a62:	e003      	b.n	8006a6c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006a64:	2032      	movs	r0, #50	; 0x32
 8006a66:	f7fc fa3f 	bl	8002ee8 <HAL_Delay>

  return HAL_OK;
 8006a6a:	2300      	movs	r3, #0
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3708      	adds	r7, #8
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a74:	b084      	sub	sp, #16
 8006a76:	b580      	push	{r7, lr}
 8006a78:	b086      	sub	sp, #24
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
 8006a7e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006a82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006a86:	2300      	movs	r3, #0
 8006a88:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006a8e:	2300      	movs	r3, #0
 8006a90:	613b      	str	r3, [r7, #16]
 8006a92:	e009      	b.n	8006aa8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	3340      	adds	r3, #64	; 0x40
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	4413      	add	r3, r2
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	613b      	str	r3, [r7, #16]
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	2b0e      	cmp	r3, #14
 8006aac:	d9f2      	bls.n	8006a94 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006aae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d11c      	bne.n	8006aee <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	68fa      	ldr	r2, [r7, #12]
 8006abe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ac2:	f043 0302 	orr.w	r3, r3, #2
 8006ac6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006acc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	601a      	str	r2, [r3, #0]
 8006aec:	e005      	b.n	8006afa <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b00:	461a      	mov	r2, r3
 8006b02:	2300      	movs	r3, #0
 8006b04:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b14:	461a      	mov	r2, r3
 8006b16:	680b      	ldr	r3, [r1, #0]
 8006b18:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d10c      	bne.n	8006b3a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d104      	bne.n	8006b30 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006b26:	2100      	movs	r1, #0
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f000 f959 	bl	8006de0 <USB_SetDevSpeed>
 8006b2e:	e018      	b.n	8006b62 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006b30:	2101      	movs	r1, #1
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 f954 	bl	8006de0 <USB_SetDevSpeed>
 8006b38:	e013      	b.n	8006b62 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8006b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b3c:	2b03      	cmp	r3, #3
 8006b3e:	d10c      	bne.n	8006b5a <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d104      	bne.n	8006b50 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006b46:	2100      	movs	r1, #0
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f000 f949 	bl	8006de0 <USB_SetDevSpeed>
 8006b4e:	e008      	b.n	8006b62 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006b50:	2101      	movs	r1, #1
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 f944 	bl	8006de0 <USB_SetDevSpeed>
 8006b58:	e003      	b.n	8006b62 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006b5a:	2103      	movs	r1, #3
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 f93f 	bl	8006de0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006b62:	2110      	movs	r1, #16
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 f8f3 	bl	8006d50 <USB_FlushTxFifo>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d001      	beq.n	8006b74 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8006b70:	2301      	movs	r3, #1
 8006b72:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f000 f911 	bl	8006d9c <USB_FlushRxFifo>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d001      	beq.n	8006b84 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8006b80:	2301      	movs	r3, #1
 8006b82:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b96:	461a      	mov	r2, r3
 8006b98:	2300      	movs	r3, #0
 8006b9a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ba8:	2300      	movs	r3, #0
 8006baa:	613b      	str	r3, [r7, #16]
 8006bac:	e043      	b.n	8006c36 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	015a      	lsls	r2, r3, #5
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	4413      	add	r3, r2
 8006bb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006bc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006bc4:	d118      	bne.n	8006bf8 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d10a      	bne.n	8006be2 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	015a      	lsls	r2, r3, #5
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	4413      	add	r3, r2
 8006bd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bd8:	461a      	mov	r2, r3
 8006bda:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006bde:	6013      	str	r3, [r2, #0]
 8006be0:	e013      	b.n	8006c0a <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	015a      	lsls	r2, r3, #5
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	4413      	add	r3, r2
 8006bea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bee:	461a      	mov	r2, r3
 8006bf0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006bf4:	6013      	str	r3, [r2, #0]
 8006bf6:	e008      	b.n	8006c0a <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	015a      	lsls	r2, r3, #5
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	4413      	add	r3, r2
 8006c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c04:	461a      	mov	r2, r3
 8006c06:	2300      	movs	r3, #0
 8006c08:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	015a      	lsls	r2, r3, #5
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	4413      	add	r3, r2
 8006c12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c16:	461a      	mov	r2, r3
 8006c18:	2300      	movs	r3, #0
 8006c1a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	015a      	lsls	r2, r3, #5
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	4413      	add	r3, r2
 8006c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c28:	461a      	mov	r2, r3
 8006c2a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006c2e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	3301      	adds	r3, #1
 8006c34:	613b      	str	r3, [r7, #16]
 8006c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c38:	693a      	ldr	r2, [r7, #16]
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d3b7      	bcc.n	8006bae <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c3e:	2300      	movs	r3, #0
 8006c40:	613b      	str	r3, [r7, #16]
 8006c42:	e043      	b.n	8006ccc <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	015a      	lsls	r2, r3, #5
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	4413      	add	r3, r2
 8006c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c5a:	d118      	bne.n	8006c8e <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d10a      	bne.n	8006c78 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	015a      	lsls	r2, r3, #5
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	4413      	add	r3, r2
 8006c6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c6e:	461a      	mov	r2, r3
 8006c70:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006c74:	6013      	str	r3, [r2, #0]
 8006c76:	e013      	b.n	8006ca0 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	015a      	lsls	r2, r3, #5
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	4413      	add	r3, r2
 8006c80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c84:	461a      	mov	r2, r3
 8006c86:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006c8a:	6013      	str	r3, [r2, #0]
 8006c8c:	e008      	b.n	8006ca0 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	015a      	lsls	r2, r3, #5
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	4413      	add	r3, r2
 8006c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	015a      	lsls	r2, r3, #5
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	4413      	add	r3, r2
 8006ca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cac:	461a      	mov	r2, r3
 8006cae:	2300      	movs	r3, #0
 8006cb0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	015a      	lsls	r2, r3, #5
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	4413      	add	r3, r2
 8006cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006cc4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	3301      	adds	r3, #1
 8006cca:	613b      	str	r3, [r7, #16]
 8006ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cce:	693a      	ldr	r2, [r7, #16]
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d3b7      	bcc.n	8006c44 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cda:	691b      	ldr	r3, [r3, #16]
 8006cdc:	68fa      	ldr	r2, [r7, #12]
 8006cde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ce2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ce6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006cf4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d105      	bne.n	8006d08 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	699b      	ldr	r3, [r3, #24]
 8006d00:	f043 0210 	orr.w	r2, r3, #16
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	699a      	ldr	r2, [r3, #24]
 8006d0c:	4b0e      	ldr	r3, [pc, #56]	; (8006d48 <USB_DevInit+0x2d4>)
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	687a      	ldr	r2, [r7, #4]
 8006d12:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006d14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d005      	beq.n	8006d26 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	699b      	ldr	r3, [r3, #24]
 8006d1e:	f043 0208 	orr.w	r2, r3, #8
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006d26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d105      	bne.n	8006d38 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	699a      	ldr	r2, [r3, #24]
 8006d30:	4b06      	ldr	r3, [pc, #24]	; (8006d4c <USB_DevInit+0x2d8>)
 8006d32:	4313      	orrs	r3, r2
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006d38:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3718      	adds	r7, #24
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d44:	b004      	add	sp, #16
 8006d46:	4770      	bx	lr
 8006d48:	803c3800 	.word	0x803c3800
 8006d4c:	40000004 	.word	0x40000004

08006d50 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b085      	sub	sp, #20
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	019b      	lsls	r3, r3, #6
 8006d62:	f043 0220 	orr.w	r2, r3, #32
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	3301      	adds	r3, #1
 8006d6e:	60fb      	str	r3, [r7, #12]
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	4a09      	ldr	r2, [pc, #36]	; (8006d98 <USB_FlushTxFifo+0x48>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d901      	bls.n	8006d7c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006d78:	2303      	movs	r3, #3
 8006d7a:	e006      	b.n	8006d8a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	691b      	ldr	r3, [r3, #16]
 8006d80:	f003 0320 	and.w	r3, r3, #32
 8006d84:	2b20      	cmp	r3, #32
 8006d86:	d0f0      	beq.n	8006d6a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006d88:	2300      	movs	r3, #0
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3714      	adds	r7, #20
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr
 8006d96:	bf00      	nop
 8006d98:	00030d40 	.word	0x00030d40

08006d9c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b085      	sub	sp, #20
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006da4:	2300      	movs	r3, #0
 8006da6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2210      	movs	r2, #16
 8006dac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	3301      	adds	r3, #1
 8006db2:	60fb      	str	r3, [r7, #12]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	4a09      	ldr	r2, [pc, #36]	; (8006ddc <USB_FlushRxFifo+0x40>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d901      	bls.n	8006dc0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006dbc:	2303      	movs	r3, #3
 8006dbe:	e006      	b.n	8006dce <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	691b      	ldr	r3, [r3, #16]
 8006dc4:	f003 0310 	and.w	r3, r3, #16
 8006dc8:	2b10      	cmp	r3, #16
 8006dca:	d0f0      	beq.n	8006dae <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006dcc:	2300      	movs	r3, #0
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3714      	adds	r7, #20
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd8:	4770      	bx	lr
 8006dda:	bf00      	nop
 8006ddc:	00030d40 	.word	0x00030d40

08006de0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b085      	sub	sp, #20
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	460b      	mov	r3, r1
 8006dea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	78fb      	ldrb	r3, [r7, #3]
 8006dfa:	68f9      	ldr	r1, [r7, #12]
 8006dfc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e00:	4313      	orrs	r3, r2
 8006e02:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006e04:	2300      	movs	r3, #0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3714      	adds	r7, #20
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr

08006e12 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006e12:	b480      	push	{r7}
 8006e14:	b087      	sub	sp, #28
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	f003 0306 	and.w	r3, r3, #6
 8006e2a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d102      	bne.n	8006e38 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006e32:	2300      	movs	r3, #0
 8006e34:	75fb      	strb	r3, [r7, #23]
 8006e36:	e00a      	b.n	8006e4e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2b02      	cmp	r3, #2
 8006e3c:	d002      	beq.n	8006e44 <USB_GetDevSpeed+0x32>
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2b06      	cmp	r3, #6
 8006e42:	d102      	bne.n	8006e4a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006e44:	2302      	movs	r3, #2
 8006e46:	75fb      	strb	r3, [r7, #23]
 8006e48:	e001      	b.n	8006e4e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006e4a:	230f      	movs	r3, #15
 8006e4c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006e4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	371c      	adds	r7, #28
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b085      	sub	sp, #20
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	785b      	ldrb	r3, [r3, #1]
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d139      	bne.n	8006eec <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e7e:	69da      	ldr	r2, [r3, #28]
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	f003 030f 	and.w	r3, r3, #15
 8006e88:	2101      	movs	r1, #1
 8006e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	68f9      	ldr	r1, [r7, #12]
 8006e92:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e96:	4313      	orrs	r3, r2
 8006e98:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	015a      	lsls	r2, r3, #5
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	4413      	add	r3, r2
 8006ea2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d153      	bne.n	8006f58 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	015a      	lsls	r2, r3, #5
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	4413      	add	r3, r2
 8006eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	78db      	ldrb	r3, [r3, #3]
 8006eca:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006ecc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	059b      	lsls	r3, r3, #22
 8006ed2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006ed4:	431a      	orrs	r2, r3
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	0159      	lsls	r1, r3, #5
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	440b      	add	r3, r1
 8006ede:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	4b20      	ldr	r3, [pc, #128]	; (8006f68 <USB_ActivateEndpoint+0x10c>)
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	600b      	str	r3, [r1, #0]
 8006eea:	e035      	b.n	8006f58 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ef2:	69da      	ldr	r2, [r3, #28]
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	781b      	ldrb	r3, [r3, #0]
 8006ef8:	f003 030f 	and.w	r3, r3, #15
 8006efc:	2101      	movs	r1, #1
 8006efe:	fa01 f303 	lsl.w	r3, r1, r3
 8006f02:	041b      	lsls	r3, r3, #16
 8006f04:	68f9      	ldr	r1, [r7, #12]
 8006f06:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	015a      	lsls	r2, r3, #5
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	4413      	add	r3, r2
 8006f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d119      	bne.n	8006f58 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	015a      	lsls	r2, r3, #5
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	4413      	add	r3, r2
 8006f2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	78db      	ldrb	r3, [r3, #3]
 8006f3e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006f40:	430b      	orrs	r3, r1
 8006f42:	431a      	orrs	r2, r3
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	0159      	lsls	r1, r3, #5
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	440b      	add	r3, r1
 8006f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f50:	4619      	mov	r1, r3
 8006f52:	4b05      	ldr	r3, [pc, #20]	; (8006f68 <USB_ActivateEndpoint+0x10c>)
 8006f54:	4313      	orrs	r3, r2
 8006f56:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006f58:	2300      	movs	r3, #0
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3714      	adds	r7, #20
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr
 8006f66:	bf00      	nop
 8006f68:	10008000 	.word	0x10008000

08006f6c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b085      	sub	sp, #20
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	785b      	ldrb	r3, [r3, #1]
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d161      	bne.n	800704c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	015a      	lsls	r2, r3, #5
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	4413      	add	r3, r2
 8006f90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f9e:	d11f      	bne.n	8006fe0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	015a      	lsls	r2, r3, #5
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	4413      	add	r3, r2
 8006fa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	68ba      	ldr	r2, [r7, #8]
 8006fb0:	0151      	lsls	r1, r2, #5
 8006fb2:	68fa      	ldr	r2, [r7, #12]
 8006fb4:	440a      	add	r2, r1
 8006fb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006fbe:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	015a      	lsls	r2, r3, #5
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	4413      	add	r3, r2
 8006fc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	68ba      	ldr	r2, [r7, #8]
 8006fd0:	0151      	lsls	r1, r2, #5
 8006fd2:	68fa      	ldr	r2, [r7, #12]
 8006fd4:	440a      	add	r2, r1
 8006fd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fda:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006fde:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fe6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	781b      	ldrb	r3, [r3, #0]
 8006fec:	f003 030f 	and.w	r3, r3, #15
 8006ff0:	2101      	movs	r1, #1
 8006ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	43db      	mvns	r3, r3
 8006ffa:	68f9      	ldr	r1, [r7, #12]
 8006ffc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007000:	4013      	ands	r3, r2
 8007002:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800700a:	69da      	ldr	r2, [r3, #28]
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	f003 030f 	and.w	r3, r3, #15
 8007014:	2101      	movs	r1, #1
 8007016:	fa01 f303 	lsl.w	r3, r1, r3
 800701a:	b29b      	uxth	r3, r3
 800701c:	43db      	mvns	r3, r3
 800701e:	68f9      	ldr	r1, [r7, #12]
 8007020:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007024:	4013      	ands	r3, r2
 8007026:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	015a      	lsls	r2, r3, #5
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	4413      	add	r3, r2
 8007030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	0159      	lsls	r1, r3, #5
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	440b      	add	r3, r1
 800703e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007042:	4619      	mov	r1, r3
 8007044:	4b35      	ldr	r3, [pc, #212]	; (800711c <USB_DeactivateEndpoint+0x1b0>)
 8007046:	4013      	ands	r3, r2
 8007048:	600b      	str	r3, [r1, #0]
 800704a:	e060      	b.n	800710e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	015a      	lsls	r2, r3, #5
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	4413      	add	r3, r2
 8007054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800705e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007062:	d11f      	bne.n	80070a4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	015a      	lsls	r2, r3, #5
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	4413      	add	r3, r2
 800706c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	68ba      	ldr	r2, [r7, #8]
 8007074:	0151      	lsls	r1, r2, #5
 8007076:	68fa      	ldr	r2, [r7, #12]
 8007078:	440a      	add	r2, r1
 800707a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800707e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007082:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	015a      	lsls	r2, r3, #5
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	4413      	add	r3, r2
 800708c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	68ba      	ldr	r2, [r7, #8]
 8007094:	0151      	lsls	r1, r2, #5
 8007096:	68fa      	ldr	r2, [r7, #12]
 8007098:	440a      	add	r2, r1
 800709a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800709e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070a2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	f003 030f 	and.w	r3, r3, #15
 80070b4:	2101      	movs	r1, #1
 80070b6:	fa01 f303 	lsl.w	r3, r1, r3
 80070ba:	041b      	lsls	r3, r3, #16
 80070bc:	43db      	mvns	r3, r3
 80070be:	68f9      	ldr	r1, [r7, #12]
 80070c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070c4:	4013      	ands	r3, r2
 80070c6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070ce:	69da      	ldr	r2, [r3, #28]
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	f003 030f 	and.w	r3, r3, #15
 80070d8:	2101      	movs	r1, #1
 80070da:	fa01 f303 	lsl.w	r3, r1, r3
 80070de:	041b      	lsls	r3, r3, #16
 80070e0:	43db      	mvns	r3, r3
 80070e2:	68f9      	ldr	r1, [r7, #12]
 80070e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070e8:	4013      	ands	r3, r2
 80070ea:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	015a      	lsls	r2, r3, #5
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	4413      	add	r3, r2
 80070f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	0159      	lsls	r1, r3, #5
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	440b      	add	r3, r1
 8007102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007106:	4619      	mov	r1, r3
 8007108:	4b05      	ldr	r3, [pc, #20]	; (8007120 <USB_DeactivateEndpoint+0x1b4>)
 800710a:	4013      	ands	r3, r2
 800710c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800710e:	2300      	movs	r3, #0
}
 8007110:	4618      	mov	r0, r3
 8007112:	3714      	adds	r7, #20
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr
 800711c:	ec337800 	.word	0xec337800
 8007120:	eff37800 	.word	0xeff37800

08007124 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b08a      	sub	sp, #40	; 0x28
 8007128:	af02      	add	r7, sp, #8
 800712a:	60f8      	str	r0, [r7, #12]
 800712c:	60b9      	str	r1, [r7, #8]
 800712e:	4613      	mov	r3, r2
 8007130:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	785b      	ldrb	r3, [r3, #1]
 8007140:	2b01      	cmp	r3, #1
 8007142:	f040 8163 	bne.w	800740c <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	695b      	ldr	r3, [r3, #20]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d132      	bne.n	80071b4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800714e:	69bb      	ldr	r3, [r7, #24]
 8007150:	015a      	lsls	r2, r3, #5
 8007152:	69fb      	ldr	r3, [r7, #28]
 8007154:	4413      	add	r3, r2
 8007156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800715a:	691a      	ldr	r2, [r3, #16]
 800715c:	69bb      	ldr	r3, [r7, #24]
 800715e:	0159      	lsls	r1, r3, #5
 8007160:	69fb      	ldr	r3, [r7, #28]
 8007162:	440b      	add	r3, r1
 8007164:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007168:	4619      	mov	r1, r3
 800716a:	4ba5      	ldr	r3, [pc, #660]	; (8007400 <USB_EPStartXfer+0x2dc>)
 800716c:	4013      	ands	r3, r2
 800716e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007170:	69bb      	ldr	r3, [r7, #24]
 8007172:	015a      	lsls	r2, r3, #5
 8007174:	69fb      	ldr	r3, [r7, #28]
 8007176:	4413      	add	r3, r2
 8007178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800717c:	691b      	ldr	r3, [r3, #16]
 800717e:	69ba      	ldr	r2, [r7, #24]
 8007180:	0151      	lsls	r1, r2, #5
 8007182:	69fa      	ldr	r2, [r7, #28]
 8007184:	440a      	add	r2, r1
 8007186:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800718a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800718e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007190:	69bb      	ldr	r3, [r7, #24]
 8007192:	015a      	lsls	r2, r3, #5
 8007194:	69fb      	ldr	r3, [r7, #28]
 8007196:	4413      	add	r3, r2
 8007198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800719c:	691a      	ldr	r2, [r3, #16]
 800719e:	69bb      	ldr	r3, [r7, #24]
 80071a0:	0159      	lsls	r1, r3, #5
 80071a2:	69fb      	ldr	r3, [r7, #28]
 80071a4:	440b      	add	r3, r1
 80071a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071aa:	4619      	mov	r1, r3
 80071ac:	4b95      	ldr	r3, [pc, #596]	; (8007404 <USB_EPStartXfer+0x2e0>)
 80071ae:	4013      	ands	r3, r2
 80071b0:	610b      	str	r3, [r1, #16]
 80071b2:	e074      	b.n	800729e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80071b4:	69bb      	ldr	r3, [r7, #24]
 80071b6:	015a      	lsls	r2, r3, #5
 80071b8:	69fb      	ldr	r3, [r7, #28]
 80071ba:	4413      	add	r3, r2
 80071bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071c0:	691a      	ldr	r2, [r3, #16]
 80071c2:	69bb      	ldr	r3, [r7, #24]
 80071c4:	0159      	lsls	r1, r3, #5
 80071c6:	69fb      	ldr	r3, [r7, #28]
 80071c8:	440b      	add	r3, r1
 80071ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071ce:	4619      	mov	r1, r3
 80071d0:	4b8c      	ldr	r3, [pc, #560]	; (8007404 <USB_EPStartXfer+0x2e0>)
 80071d2:	4013      	ands	r3, r2
 80071d4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80071d6:	69bb      	ldr	r3, [r7, #24]
 80071d8:	015a      	lsls	r2, r3, #5
 80071da:	69fb      	ldr	r3, [r7, #28]
 80071dc:	4413      	add	r3, r2
 80071de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071e2:	691a      	ldr	r2, [r3, #16]
 80071e4:	69bb      	ldr	r3, [r7, #24]
 80071e6:	0159      	lsls	r1, r3, #5
 80071e8:	69fb      	ldr	r3, [r7, #28]
 80071ea:	440b      	add	r3, r1
 80071ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071f0:	4619      	mov	r1, r3
 80071f2:	4b83      	ldr	r3, [pc, #524]	; (8007400 <USB_EPStartXfer+0x2dc>)
 80071f4:	4013      	ands	r3, r2
 80071f6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80071f8:	69bb      	ldr	r3, [r7, #24]
 80071fa:	015a      	lsls	r2, r3, #5
 80071fc:	69fb      	ldr	r3, [r7, #28]
 80071fe:	4413      	add	r3, r2
 8007200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007204:	691a      	ldr	r2, [r3, #16]
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	6959      	ldr	r1, [r3, #20]
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	689b      	ldr	r3, [r3, #8]
 800720e:	440b      	add	r3, r1
 8007210:	1e59      	subs	r1, r3, #1
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	fbb1 f3f3 	udiv	r3, r1, r3
 800721a:	04d9      	lsls	r1, r3, #19
 800721c:	4b7a      	ldr	r3, [pc, #488]	; (8007408 <USB_EPStartXfer+0x2e4>)
 800721e:	400b      	ands	r3, r1
 8007220:	69b9      	ldr	r1, [r7, #24]
 8007222:	0148      	lsls	r0, r1, #5
 8007224:	69f9      	ldr	r1, [r7, #28]
 8007226:	4401      	add	r1, r0
 8007228:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800722c:	4313      	orrs	r3, r2
 800722e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007230:	69bb      	ldr	r3, [r7, #24]
 8007232:	015a      	lsls	r2, r3, #5
 8007234:	69fb      	ldr	r3, [r7, #28]
 8007236:	4413      	add	r3, r2
 8007238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800723c:	691a      	ldr	r2, [r3, #16]
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	695b      	ldr	r3, [r3, #20]
 8007242:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007246:	69b9      	ldr	r1, [r7, #24]
 8007248:	0148      	lsls	r0, r1, #5
 800724a:	69f9      	ldr	r1, [r7, #28]
 800724c:	4401      	add	r1, r0
 800724e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007252:	4313      	orrs	r3, r2
 8007254:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	78db      	ldrb	r3, [r3, #3]
 800725a:	2b01      	cmp	r3, #1
 800725c:	d11f      	bne.n	800729e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800725e:	69bb      	ldr	r3, [r7, #24]
 8007260:	015a      	lsls	r2, r3, #5
 8007262:	69fb      	ldr	r3, [r7, #28]
 8007264:	4413      	add	r3, r2
 8007266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800726a:	691b      	ldr	r3, [r3, #16]
 800726c:	69ba      	ldr	r2, [r7, #24]
 800726e:	0151      	lsls	r1, r2, #5
 8007270:	69fa      	ldr	r2, [r7, #28]
 8007272:	440a      	add	r2, r1
 8007274:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007278:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800727c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800727e:	69bb      	ldr	r3, [r7, #24]
 8007280:	015a      	lsls	r2, r3, #5
 8007282:	69fb      	ldr	r3, [r7, #28]
 8007284:	4413      	add	r3, r2
 8007286:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800728a:	691b      	ldr	r3, [r3, #16]
 800728c:	69ba      	ldr	r2, [r7, #24]
 800728e:	0151      	lsls	r1, r2, #5
 8007290:	69fa      	ldr	r2, [r7, #28]
 8007292:	440a      	add	r2, r1
 8007294:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007298:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800729c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800729e:	79fb      	ldrb	r3, [r7, #7]
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d14b      	bne.n	800733c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	691b      	ldr	r3, [r3, #16]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d009      	beq.n	80072c0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80072ac:	69bb      	ldr	r3, [r7, #24]
 80072ae:	015a      	lsls	r2, r3, #5
 80072b0:	69fb      	ldr	r3, [r7, #28]
 80072b2:	4413      	add	r3, r2
 80072b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072b8:	461a      	mov	r2, r3
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	691b      	ldr	r3, [r3, #16]
 80072be:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	78db      	ldrb	r3, [r3, #3]
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d128      	bne.n	800731a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80072c8:	69fb      	ldr	r3, [r7, #28]
 80072ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d110      	bne.n	80072fa <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80072d8:	69bb      	ldr	r3, [r7, #24]
 80072da:	015a      	lsls	r2, r3, #5
 80072dc:	69fb      	ldr	r3, [r7, #28]
 80072de:	4413      	add	r3, r2
 80072e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	69ba      	ldr	r2, [r7, #24]
 80072e8:	0151      	lsls	r1, r2, #5
 80072ea:	69fa      	ldr	r2, [r7, #28]
 80072ec:	440a      	add	r2, r1
 80072ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80072f6:	6013      	str	r3, [r2, #0]
 80072f8:	e00f      	b.n	800731a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80072fa:	69bb      	ldr	r3, [r7, #24]
 80072fc:	015a      	lsls	r2, r3, #5
 80072fe:	69fb      	ldr	r3, [r7, #28]
 8007300:	4413      	add	r3, r2
 8007302:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	69ba      	ldr	r2, [r7, #24]
 800730a:	0151      	lsls	r1, r2, #5
 800730c:	69fa      	ldr	r2, [r7, #28]
 800730e:	440a      	add	r2, r1
 8007310:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007318:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800731a:	69bb      	ldr	r3, [r7, #24]
 800731c:	015a      	lsls	r2, r3, #5
 800731e:	69fb      	ldr	r3, [r7, #28]
 8007320:	4413      	add	r3, r2
 8007322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	69ba      	ldr	r2, [r7, #24]
 800732a:	0151      	lsls	r1, r2, #5
 800732c:	69fa      	ldr	r2, [r7, #28]
 800732e:	440a      	add	r2, r1
 8007330:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007334:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007338:	6013      	str	r3, [r2, #0]
 800733a:	e133      	b.n	80075a4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800733c:	69bb      	ldr	r3, [r7, #24]
 800733e:	015a      	lsls	r2, r3, #5
 8007340:	69fb      	ldr	r3, [r7, #28]
 8007342:	4413      	add	r3, r2
 8007344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	69ba      	ldr	r2, [r7, #24]
 800734c:	0151      	lsls	r1, r2, #5
 800734e:	69fa      	ldr	r2, [r7, #28]
 8007350:	440a      	add	r2, r1
 8007352:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007356:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800735a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	78db      	ldrb	r3, [r3, #3]
 8007360:	2b01      	cmp	r3, #1
 8007362:	d015      	beq.n	8007390 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	695b      	ldr	r3, [r3, #20]
 8007368:	2b00      	cmp	r3, #0
 800736a:	f000 811b 	beq.w	80075a4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800736e:	69fb      	ldr	r3, [r7, #28]
 8007370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007374:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	f003 030f 	and.w	r3, r3, #15
 800737e:	2101      	movs	r1, #1
 8007380:	fa01 f303 	lsl.w	r3, r1, r3
 8007384:	69f9      	ldr	r1, [r7, #28]
 8007386:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800738a:	4313      	orrs	r3, r2
 800738c:	634b      	str	r3, [r1, #52]	; 0x34
 800738e:	e109      	b.n	80075a4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007390:	69fb      	ldr	r3, [r7, #28]
 8007392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800739c:	2b00      	cmp	r3, #0
 800739e:	d110      	bne.n	80073c2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80073a0:	69bb      	ldr	r3, [r7, #24]
 80073a2:	015a      	lsls	r2, r3, #5
 80073a4:	69fb      	ldr	r3, [r7, #28]
 80073a6:	4413      	add	r3, r2
 80073a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	69ba      	ldr	r2, [r7, #24]
 80073b0:	0151      	lsls	r1, r2, #5
 80073b2:	69fa      	ldr	r2, [r7, #28]
 80073b4:	440a      	add	r2, r1
 80073b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80073be:	6013      	str	r3, [r2, #0]
 80073c0:	e00f      	b.n	80073e2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80073c2:	69bb      	ldr	r3, [r7, #24]
 80073c4:	015a      	lsls	r2, r3, #5
 80073c6:	69fb      	ldr	r3, [r7, #28]
 80073c8:	4413      	add	r3, r2
 80073ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	69ba      	ldr	r2, [r7, #24]
 80073d2:	0151      	lsls	r1, r2, #5
 80073d4:	69fa      	ldr	r2, [r7, #28]
 80073d6:	440a      	add	r2, r1
 80073d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073e0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	68d9      	ldr	r1, [r3, #12]
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	781a      	ldrb	r2, [r3, #0]
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	695b      	ldr	r3, [r3, #20]
 80073ee:	b298      	uxth	r0, r3
 80073f0:	79fb      	ldrb	r3, [r7, #7]
 80073f2:	9300      	str	r3, [sp, #0]
 80073f4:	4603      	mov	r3, r0
 80073f6:	68f8      	ldr	r0, [r7, #12]
 80073f8:	f000 fa38 	bl	800786c <USB_WritePacket>
 80073fc:	e0d2      	b.n	80075a4 <USB_EPStartXfer+0x480>
 80073fe:	bf00      	nop
 8007400:	e007ffff 	.word	0xe007ffff
 8007404:	fff80000 	.word	0xfff80000
 8007408:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800740c:	69bb      	ldr	r3, [r7, #24]
 800740e:	015a      	lsls	r2, r3, #5
 8007410:	69fb      	ldr	r3, [r7, #28]
 8007412:	4413      	add	r3, r2
 8007414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007418:	691a      	ldr	r2, [r3, #16]
 800741a:	69bb      	ldr	r3, [r7, #24]
 800741c:	0159      	lsls	r1, r3, #5
 800741e:	69fb      	ldr	r3, [r7, #28]
 8007420:	440b      	add	r3, r1
 8007422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007426:	4619      	mov	r1, r3
 8007428:	4b61      	ldr	r3, [pc, #388]	; (80075b0 <USB_EPStartXfer+0x48c>)
 800742a:	4013      	ands	r3, r2
 800742c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800742e:	69bb      	ldr	r3, [r7, #24]
 8007430:	015a      	lsls	r2, r3, #5
 8007432:	69fb      	ldr	r3, [r7, #28]
 8007434:	4413      	add	r3, r2
 8007436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800743a:	691a      	ldr	r2, [r3, #16]
 800743c:	69bb      	ldr	r3, [r7, #24]
 800743e:	0159      	lsls	r1, r3, #5
 8007440:	69fb      	ldr	r3, [r7, #28]
 8007442:	440b      	add	r3, r1
 8007444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007448:	4619      	mov	r1, r3
 800744a:	4b5a      	ldr	r3, [pc, #360]	; (80075b4 <USB_EPStartXfer+0x490>)
 800744c:	4013      	ands	r3, r2
 800744e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	695b      	ldr	r3, [r3, #20]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d123      	bne.n	80074a0 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007458:	69bb      	ldr	r3, [r7, #24]
 800745a:	015a      	lsls	r2, r3, #5
 800745c:	69fb      	ldr	r3, [r7, #28]
 800745e:	4413      	add	r3, r2
 8007460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007464:	691a      	ldr	r2, [r3, #16]
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800746e:	69b9      	ldr	r1, [r7, #24]
 8007470:	0148      	lsls	r0, r1, #5
 8007472:	69f9      	ldr	r1, [r7, #28]
 8007474:	4401      	add	r1, r0
 8007476:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800747a:	4313      	orrs	r3, r2
 800747c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800747e:	69bb      	ldr	r3, [r7, #24]
 8007480:	015a      	lsls	r2, r3, #5
 8007482:	69fb      	ldr	r3, [r7, #28]
 8007484:	4413      	add	r3, r2
 8007486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800748a:	691b      	ldr	r3, [r3, #16]
 800748c:	69ba      	ldr	r2, [r7, #24]
 800748e:	0151      	lsls	r1, r2, #5
 8007490:	69fa      	ldr	r2, [r7, #28]
 8007492:	440a      	add	r2, r1
 8007494:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007498:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800749c:	6113      	str	r3, [r2, #16]
 800749e:	e033      	b.n	8007508 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	695a      	ldr	r2, [r3, #20]
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	4413      	add	r3, r2
 80074aa:	1e5a      	subs	r2, r3, #1
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80074b4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80074b6:	69bb      	ldr	r3, [r7, #24]
 80074b8:	015a      	lsls	r2, r3, #5
 80074ba:	69fb      	ldr	r3, [r7, #28]
 80074bc:	4413      	add	r3, r2
 80074be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074c2:	691a      	ldr	r2, [r3, #16]
 80074c4:	8afb      	ldrh	r3, [r7, #22]
 80074c6:	04d9      	lsls	r1, r3, #19
 80074c8:	4b3b      	ldr	r3, [pc, #236]	; (80075b8 <USB_EPStartXfer+0x494>)
 80074ca:	400b      	ands	r3, r1
 80074cc:	69b9      	ldr	r1, [r7, #24]
 80074ce:	0148      	lsls	r0, r1, #5
 80074d0:	69f9      	ldr	r1, [r7, #28]
 80074d2:	4401      	add	r1, r0
 80074d4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80074d8:	4313      	orrs	r3, r2
 80074da:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80074dc:	69bb      	ldr	r3, [r7, #24]
 80074de:	015a      	lsls	r2, r3, #5
 80074e0:	69fb      	ldr	r3, [r7, #28]
 80074e2:	4413      	add	r3, r2
 80074e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074e8:	691a      	ldr	r2, [r3, #16]
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	689b      	ldr	r3, [r3, #8]
 80074ee:	8af9      	ldrh	r1, [r7, #22]
 80074f0:	fb01 f303 	mul.w	r3, r1, r3
 80074f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074f8:	69b9      	ldr	r1, [r7, #24]
 80074fa:	0148      	lsls	r0, r1, #5
 80074fc:	69f9      	ldr	r1, [r7, #28]
 80074fe:	4401      	add	r1, r0
 8007500:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007504:	4313      	orrs	r3, r2
 8007506:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007508:	79fb      	ldrb	r3, [r7, #7]
 800750a:	2b01      	cmp	r3, #1
 800750c:	d10d      	bne.n	800752a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	68db      	ldr	r3, [r3, #12]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d009      	beq.n	800752a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	68d9      	ldr	r1, [r3, #12]
 800751a:	69bb      	ldr	r3, [r7, #24]
 800751c:	015a      	lsls	r2, r3, #5
 800751e:	69fb      	ldr	r3, [r7, #28]
 8007520:	4413      	add	r3, r2
 8007522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007526:	460a      	mov	r2, r1
 8007528:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	78db      	ldrb	r3, [r3, #3]
 800752e:	2b01      	cmp	r3, #1
 8007530:	d128      	bne.n	8007584 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007532:	69fb      	ldr	r3, [r7, #28]
 8007534:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007538:	689b      	ldr	r3, [r3, #8]
 800753a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800753e:	2b00      	cmp	r3, #0
 8007540:	d110      	bne.n	8007564 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007542:	69bb      	ldr	r3, [r7, #24]
 8007544:	015a      	lsls	r2, r3, #5
 8007546:	69fb      	ldr	r3, [r7, #28]
 8007548:	4413      	add	r3, r2
 800754a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	69ba      	ldr	r2, [r7, #24]
 8007552:	0151      	lsls	r1, r2, #5
 8007554:	69fa      	ldr	r2, [r7, #28]
 8007556:	440a      	add	r2, r1
 8007558:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800755c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007560:	6013      	str	r3, [r2, #0]
 8007562:	e00f      	b.n	8007584 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007564:	69bb      	ldr	r3, [r7, #24]
 8007566:	015a      	lsls	r2, r3, #5
 8007568:	69fb      	ldr	r3, [r7, #28]
 800756a:	4413      	add	r3, r2
 800756c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	69ba      	ldr	r2, [r7, #24]
 8007574:	0151      	lsls	r1, r2, #5
 8007576:	69fa      	ldr	r2, [r7, #28]
 8007578:	440a      	add	r2, r1
 800757a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800757e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007582:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007584:	69bb      	ldr	r3, [r7, #24]
 8007586:	015a      	lsls	r2, r3, #5
 8007588:	69fb      	ldr	r3, [r7, #28]
 800758a:	4413      	add	r3, r2
 800758c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	69ba      	ldr	r2, [r7, #24]
 8007594:	0151      	lsls	r1, r2, #5
 8007596:	69fa      	ldr	r2, [r7, #28]
 8007598:	440a      	add	r2, r1
 800759a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800759e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80075a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80075a4:	2300      	movs	r3, #0
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3720      	adds	r7, #32
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}
 80075ae:	bf00      	nop
 80075b0:	fff80000 	.word	0xfff80000
 80075b4:	e007ffff 	.word	0xe007ffff
 80075b8:	1ff80000 	.word	0x1ff80000

080075bc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80075bc:	b480      	push	{r7}
 80075be:	b087      	sub	sp, #28
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	4613      	mov	r3, r2
 80075c8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	785b      	ldrb	r3, [r3, #1]
 80075d8:	2b01      	cmp	r3, #1
 80075da:	f040 80cd 	bne.w	8007778 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	695b      	ldr	r3, [r3, #20]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d132      	bne.n	800764c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	015a      	lsls	r2, r3, #5
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	4413      	add	r3, r2
 80075ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075f2:	691a      	ldr	r2, [r3, #16]
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	0159      	lsls	r1, r3, #5
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	440b      	add	r3, r1
 80075fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007600:	4619      	mov	r1, r3
 8007602:	4b98      	ldr	r3, [pc, #608]	; (8007864 <USB_EP0StartXfer+0x2a8>)
 8007604:	4013      	ands	r3, r2
 8007606:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	015a      	lsls	r2, r3, #5
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	4413      	add	r3, r2
 8007610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007614:	691b      	ldr	r3, [r3, #16]
 8007616:	693a      	ldr	r2, [r7, #16]
 8007618:	0151      	lsls	r1, r2, #5
 800761a:	697a      	ldr	r2, [r7, #20]
 800761c:	440a      	add	r2, r1
 800761e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007622:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007626:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	015a      	lsls	r2, r3, #5
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	4413      	add	r3, r2
 8007630:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007634:	691a      	ldr	r2, [r3, #16]
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	0159      	lsls	r1, r3, #5
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	440b      	add	r3, r1
 800763e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007642:	4619      	mov	r1, r3
 8007644:	4b88      	ldr	r3, [pc, #544]	; (8007868 <USB_EP0StartXfer+0x2ac>)
 8007646:	4013      	ands	r3, r2
 8007648:	610b      	str	r3, [r1, #16]
 800764a:	e04e      	b.n	80076ea <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	015a      	lsls	r2, r3, #5
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	4413      	add	r3, r2
 8007654:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007658:	691a      	ldr	r2, [r3, #16]
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	0159      	lsls	r1, r3, #5
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	440b      	add	r3, r1
 8007662:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007666:	4619      	mov	r1, r3
 8007668:	4b7f      	ldr	r3, [pc, #508]	; (8007868 <USB_EP0StartXfer+0x2ac>)
 800766a:	4013      	ands	r3, r2
 800766c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	015a      	lsls	r2, r3, #5
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	4413      	add	r3, r2
 8007676:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800767a:	691a      	ldr	r2, [r3, #16]
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	0159      	lsls	r1, r3, #5
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	440b      	add	r3, r1
 8007684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007688:	4619      	mov	r1, r3
 800768a:	4b76      	ldr	r3, [pc, #472]	; (8007864 <USB_EP0StartXfer+0x2a8>)
 800768c:	4013      	ands	r3, r2
 800768e:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	695a      	ldr	r2, [r3, #20]
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	429a      	cmp	r2, r3
 800769a:	d903      	bls.n	80076a4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	689a      	ldr	r2, [r3, #8]
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	015a      	lsls	r2, r3, #5
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	4413      	add	r3, r2
 80076ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076b0:	691b      	ldr	r3, [r3, #16]
 80076b2:	693a      	ldr	r2, [r7, #16]
 80076b4:	0151      	lsls	r1, r2, #5
 80076b6:	697a      	ldr	r2, [r7, #20]
 80076b8:	440a      	add	r2, r1
 80076ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80076c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	015a      	lsls	r2, r3, #5
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	4413      	add	r3, r2
 80076cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076d0:	691a      	ldr	r2, [r3, #16]
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	695b      	ldr	r3, [r3, #20]
 80076d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076da:	6939      	ldr	r1, [r7, #16]
 80076dc:	0148      	lsls	r0, r1, #5
 80076de:	6979      	ldr	r1, [r7, #20]
 80076e0:	4401      	add	r1, r0
 80076e2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80076e6:	4313      	orrs	r3, r2
 80076e8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80076ea:	79fb      	ldrb	r3, [r7, #7]
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d11e      	bne.n	800772e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	691b      	ldr	r3, [r3, #16]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d009      	beq.n	800770c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	015a      	lsls	r2, r3, #5
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	4413      	add	r3, r2
 8007700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007704:	461a      	mov	r2, r3
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	691b      	ldr	r3, [r3, #16]
 800770a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	015a      	lsls	r2, r3, #5
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	4413      	add	r3, r2
 8007714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	693a      	ldr	r2, [r7, #16]
 800771c:	0151      	lsls	r1, r2, #5
 800771e:	697a      	ldr	r2, [r7, #20]
 8007720:	440a      	add	r2, r1
 8007722:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007726:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800772a:	6013      	str	r3, [r2, #0]
 800772c:	e092      	b.n	8007854 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	015a      	lsls	r2, r3, #5
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	4413      	add	r3, r2
 8007736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	693a      	ldr	r2, [r7, #16]
 800773e:	0151      	lsls	r1, r2, #5
 8007740:	697a      	ldr	r2, [r7, #20]
 8007742:	440a      	add	r2, r1
 8007744:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007748:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800774c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	695b      	ldr	r3, [r3, #20]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d07e      	beq.n	8007854 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800775c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	f003 030f 	and.w	r3, r3, #15
 8007766:	2101      	movs	r1, #1
 8007768:	fa01 f303 	lsl.w	r3, r1, r3
 800776c:	6979      	ldr	r1, [r7, #20]
 800776e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007772:	4313      	orrs	r3, r2
 8007774:	634b      	str	r3, [r1, #52]	; 0x34
 8007776:	e06d      	b.n	8007854 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	015a      	lsls	r2, r3, #5
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	4413      	add	r3, r2
 8007780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007784:	691a      	ldr	r2, [r3, #16]
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	0159      	lsls	r1, r3, #5
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	440b      	add	r3, r1
 800778e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007792:	4619      	mov	r1, r3
 8007794:	4b34      	ldr	r3, [pc, #208]	; (8007868 <USB_EP0StartXfer+0x2ac>)
 8007796:	4013      	ands	r3, r2
 8007798:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	015a      	lsls	r2, r3, #5
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	4413      	add	r3, r2
 80077a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077a6:	691a      	ldr	r2, [r3, #16]
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	0159      	lsls	r1, r3, #5
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	440b      	add	r3, r1
 80077b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077b4:	4619      	mov	r1, r3
 80077b6:	4b2b      	ldr	r3, [pc, #172]	; (8007864 <USB_EP0StartXfer+0x2a8>)
 80077b8:	4013      	ands	r3, r2
 80077ba:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	695b      	ldr	r3, [r3, #20]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d003      	beq.n	80077cc <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	689a      	ldr	r2, [r3, #8]
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	015a      	lsls	r2, r3, #5
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	4413      	add	r3, r2
 80077d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077d8:	691b      	ldr	r3, [r3, #16]
 80077da:	693a      	ldr	r2, [r7, #16]
 80077dc:	0151      	lsls	r1, r2, #5
 80077de:	697a      	ldr	r2, [r7, #20]
 80077e0:	440a      	add	r2, r1
 80077e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80077ea:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	015a      	lsls	r2, r3, #5
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	4413      	add	r3, r2
 80077f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077f8:	691a      	ldr	r2, [r3, #16]
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007802:	6939      	ldr	r1, [r7, #16]
 8007804:	0148      	lsls	r0, r1, #5
 8007806:	6979      	ldr	r1, [r7, #20]
 8007808:	4401      	add	r1, r0
 800780a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800780e:	4313      	orrs	r3, r2
 8007810:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007812:	79fb      	ldrb	r3, [r7, #7]
 8007814:	2b01      	cmp	r3, #1
 8007816:	d10d      	bne.n	8007834 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	68db      	ldr	r3, [r3, #12]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d009      	beq.n	8007834 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	68d9      	ldr	r1, [r3, #12]
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	015a      	lsls	r2, r3, #5
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	4413      	add	r3, r2
 800782c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007830:	460a      	mov	r2, r1
 8007832:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	015a      	lsls	r2, r3, #5
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	4413      	add	r3, r2
 800783c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	693a      	ldr	r2, [r7, #16]
 8007844:	0151      	lsls	r1, r2, #5
 8007846:	697a      	ldr	r2, [r7, #20]
 8007848:	440a      	add	r2, r1
 800784a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800784e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007852:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007854:	2300      	movs	r3, #0
}
 8007856:	4618      	mov	r0, r3
 8007858:	371c      	adds	r7, #28
 800785a:	46bd      	mov	sp, r7
 800785c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007860:	4770      	bx	lr
 8007862:	bf00      	nop
 8007864:	e007ffff 	.word	0xe007ffff
 8007868:	fff80000 	.word	0xfff80000

0800786c <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800786c:	b480      	push	{r7}
 800786e:	b089      	sub	sp, #36	; 0x24
 8007870:	af00      	add	r7, sp, #0
 8007872:	60f8      	str	r0, [r7, #12]
 8007874:	60b9      	str	r1, [r7, #8]
 8007876:	4611      	mov	r1, r2
 8007878:	461a      	mov	r2, r3
 800787a:	460b      	mov	r3, r1
 800787c:	71fb      	strb	r3, [r7, #7]
 800787e:	4613      	mov	r3, r2
 8007880:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800788a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800788e:	2b00      	cmp	r3, #0
 8007890:	d11a      	bne.n	80078c8 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007892:	88bb      	ldrh	r3, [r7, #4]
 8007894:	3303      	adds	r3, #3
 8007896:	089b      	lsrs	r3, r3, #2
 8007898:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800789a:	2300      	movs	r3, #0
 800789c:	61bb      	str	r3, [r7, #24]
 800789e:	e00f      	b.n	80078c0 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80078a0:	79fb      	ldrb	r3, [r7, #7]
 80078a2:	031a      	lsls	r2, r3, #12
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	4413      	add	r3, r2
 80078a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078ac:	461a      	mov	r2, r3
 80078ae:	69fb      	ldr	r3, [r7, #28]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80078b4:	69fb      	ldr	r3, [r7, #28]
 80078b6:	3304      	adds	r3, #4
 80078b8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80078ba:	69bb      	ldr	r3, [r7, #24]
 80078bc:	3301      	adds	r3, #1
 80078be:	61bb      	str	r3, [r7, #24]
 80078c0:	69ba      	ldr	r2, [r7, #24]
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d3eb      	bcc.n	80078a0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80078c8:	2300      	movs	r3, #0
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3724      	adds	r7, #36	; 0x24
 80078ce:	46bd      	mov	sp, r7
 80078d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d4:	4770      	bx	lr

080078d6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80078d6:	b480      	push	{r7}
 80078d8:	b089      	sub	sp, #36	; 0x24
 80078da:	af00      	add	r7, sp, #0
 80078dc:	60f8      	str	r0, [r7, #12]
 80078de:	60b9      	str	r1, [r7, #8]
 80078e0:	4613      	mov	r3, r2
 80078e2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80078ec:	88fb      	ldrh	r3, [r7, #6]
 80078ee:	3303      	adds	r3, #3
 80078f0:	089b      	lsrs	r3, r3, #2
 80078f2:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80078f4:	2300      	movs	r3, #0
 80078f6:	61bb      	str	r3, [r7, #24]
 80078f8:	e00b      	b.n	8007912 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007900:	681a      	ldr	r2, [r3, #0]
 8007902:	69fb      	ldr	r3, [r7, #28]
 8007904:	601a      	str	r2, [r3, #0]
    pDest++;
 8007906:	69fb      	ldr	r3, [r7, #28]
 8007908:	3304      	adds	r3, #4
 800790a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800790c:	69bb      	ldr	r3, [r7, #24]
 800790e:	3301      	adds	r3, #1
 8007910:	61bb      	str	r3, [r7, #24]
 8007912:	69ba      	ldr	r2, [r7, #24]
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	429a      	cmp	r2, r3
 8007918:	d3ef      	bcc.n	80078fa <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800791a:	69fb      	ldr	r3, [r7, #28]
}
 800791c:	4618      	mov	r0, r3
 800791e:	3724      	adds	r7, #36	; 0x24
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr

08007928 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007928:	b480      	push	{r7}
 800792a:	b085      	sub	sp, #20
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	781b      	ldrb	r3, [r3, #0]
 800793a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	785b      	ldrb	r3, [r3, #1]
 8007940:	2b01      	cmp	r3, #1
 8007942:	d12c      	bne.n	800799e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	015a      	lsls	r2, r3, #5
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	4413      	add	r3, r2
 800794c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	2b00      	cmp	r3, #0
 8007954:	db12      	blt.n	800797c <USB_EPSetStall+0x54>
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d00f      	beq.n	800797c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	015a      	lsls	r2, r3, #5
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	4413      	add	r3, r2
 8007964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	68ba      	ldr	r2, [r7, #8]
 800796c:	0151      	lsls	r1, r2, #5
 800796e:	68fa      	ldr	r2, [r7, #12]
 8007970:	440a      	add	r2, r1
 8007972:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007976:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800797a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	015a      	lsls	r2, r3, #5
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	4413      	add	r3, r2
 8007984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	68ba      	ldr	r2, [r7, #8]
 800798c:	0151      	lsls	r1, r2, #5
 800798e:	68fa      	ldr	r2, [r7, #12]
 8007990:	440a      	add	r2, r1
 8007992:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007996:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800799a:	6013      	str	r3, [r2, #0]
 800799c:	e02b      	b.n	80079f6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	015a      	lsls	r2, r3, #5
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	4413      	add	r3, r2
 80079a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	db12      	blt.n	80079d6 <USB_EPSetStall+0xae>
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d00f      	beq.n	80079d6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	015a      	lsls	r2, r3, #5
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	4413      	add	r3, r2
 80079be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	68ba      	ldr	r2, [r7, #8]
 80079c6:	0151      	lsls	r1, r2, #5
 80079c8:	68fa      	ldr	r2, [r7, #12]
 80079ca:	440a      	add	r2, r1
 80079cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079d0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80079d4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	015a      	lsls	r2, r3, #5
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	4413      	add	r3, r2
 80079de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	68ba      	ldr	r2, [r7, #8]
 80079e6:	0151      	lsls	r1, r2, #5
 80079e8:	68fa      	ldr	r2, [r7, #12]
 80079ea:	440a      	add	r2, r1
 80079ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80079f4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80079f6:	2300      	movs	r3, #0
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3714      	adds	r7, #20
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr

08007a04 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b085      	sub	sp, #20
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	781b      	ldrb	r3, [r3, #0]
 8007a16:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	785b      	ldrb	r3, [r3, #1]
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d128      	bne.n	8007a72 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	015a      	lsls	r2, r3, #5
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	4413      	add	r3, r2
 8007a28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	68ba      	ldr	r2, [r7, #8]
 8007a30:	0151      	lsls	r1, r2, #5
 8007a32:	68fa      	ldr	r2, [r7, #12]
 8007a34:	440a      	add	r2, r1
 8007a36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a3a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007a3e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	78db      	ldrb	r3, [r3, #3]
 8007a44:	2b03      	cmp	r3, #3
 8007a46:	d003      	beq.n	8007a50 <USB_EPClearStall+0x4c>
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	78db      	ldrb	r3, [r3, #3]
 8007a4c:	2b02      	cmp	r3, #2
 8007a4e:	d138      	bne.n	8007ac2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	015a      	lsls	r2, r3, #5
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	4413      	add	r3, r2
 8007a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	68ba      	ldr	r2, [r7, #8]
 8007a60:	0151      	lsls	r1, r2, #5
 8007a62:	68fa      	ldr	r2, [r7, #12]
 8007a64:	440a      	add	r2, r1
 8007a66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a6e:	6013      	str	r3, [r2, #0]
 8007a70:	e027      	b.n	8007ac2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	015a      	lsls	r2, r3, #5
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	4413      	add	r3, r2
 8007a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	68ba      	ldr	r2, [r7, #8]
 8007a82:	0151      	lsls	r1, r2, #5
 8007a84:	68fa      	ldr	r2, [r7, #12]
 8007a86:	440a      	add	r2, r1
 8007a88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a8c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007a90:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	78db      	ldrb	r3, [r3, #3]
 8007a96:	2b03      	cmp	r3, #3
 8007a98:	d003      	beq.n	8007aa2 <USB_EPClearStall+0x9e>
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	78db      	ldrb	r3, [r3, #3]
 8007a9e:	2b02      	cmp	r3, #2
 8007aa0:	d10f      	bne.n	8007ac2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	015a      	lsls	r2, r3, #5
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	4413      	add	r3, r2
 8007aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	68ba      	ldr	r2, [r7, #8]
 8007ab2:	0151      	lsls	r1, r2, #5
 8007ab4:	68fa      	ldr	r2, [r7, #12]
 8007ab6:	440a      	add	r2, r1
 8007ab8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ac0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007ac2:	2300      	movs	r3, #0
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3714      	adds	r7, #20
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr

08007ad0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b085      	sub	sp, #20
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	460b      	mov	r3, r1
 8007ada:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	68fa      	ldr	r2, [r7, #12]
 8007aea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007aee:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007af2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007afa:	681a      	ldr	r2, [r3, #0]
 8007afc:	78fb      	ldrb	r3, [r7, #3]
 8007afe:	011b      	lsls	r3, r3, #4
 8007b00:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007b04:	68f9      	ldr	r1, [r7, #12]
 8007b06:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007b0e:	2300      	movs	r3, #0
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3714      	adds	r7, #20
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr

08007b1c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b084      	sub	sp, #16
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	68fa      	ldr	r2, [r7, #12]
 8007b32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b36:	f023 0302 	bic.w	r3, r3, #2
 8007b3a:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8007b3c:	2003      	movs	r0, #3
 8007b3e:	f7fb f9d3 	bl	8002ee8 <HAL_Delay>

  return HAL_OK;
 8007b42:	2300      	movs	r3, #0
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3710      	adds	r7, #16
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}

08007b4c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b084      	sub	sp, #16
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	68fa      	ldr	r2, [r7, #12]
 8007b62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b66:	f043 0302 	orr.w	r3, r3, #2
 8007b6a:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8007b6c:	2003      	movs	r0, #3
 8007b6e:	f7fb f9bb 	bl	8002ee8 <HAL_Delay>

  return HAL_OK;
 8007b72:	2300      	movs	r3, #0
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3710      	adds	r7, #16
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b085      	sub	sp, #20
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	695b      	ldr	r3, [r3, #20]
 8007b88:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	699b      	ldr	r3, [r3, #24]
 8007b8e:	68fa      	ldr	r2, [r7, #12]
 8007b90:	4013      	ands	r3, r2
 8007b92:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007b94:	68fb      	ldr	r3, [r7, #12]
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3714      	adds	r7, #20
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba0:	4770      	bx	lr

08007ba2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ba2:	b480      	push	{r7}
 8007ba4:	b085      	sub	sp, #20
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bb4:	699b      	ldr	r3, [r3, #24]
 8007bb6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bbe:	69db      	ldr	r3, [r3, #28]
 8007bc0:	68ba      	ldr	r2, [r7, #8]
 8007bc2:	4013      	ands	r3, r2
 8007bc4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	0c1b      	lsrs	r3, r3, #16
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3714      	adds	r7, #20
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr

08007bd6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007bd6:	b480      	push	{r7}
 8007bd8:	b085      	sub	sp, #20
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007be8:	699b      	ldr	r3, [r3, #24]
 8007bea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bf2:	69db      	ldr	r3, [r3, #28]
 8007bf4:	68ba      	ldr	r2, [r7, #8]
 8007bf6:	4013      	ands	r3, r2
 8007bf8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	b29b      	uxth	r3, r3
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3714      	adds	r7, #20
 8007c02:	46bd      	mov	sp, r7
 8007c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c08:	4770      	bx	lr

08007c0a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007c0a:	b480      	push	{r7}
 8007c0c:	b085      	sub	sp, #20
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6078      	str	r0, [r7, #4]
 8007c12:	460b      	mov	r3, r1
 8007c14:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007c1a:	78fb      	ldrb	r3, [r7, #3]
 8007c1c:	015a      	lsls	r2, r3, #5
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	4413      	add	r3, r2
 8007c22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c30:	695b      	ldr	r3, [r3, #20]
 8007c32:	68ba      	ldr	r2, [r7, #8]
 8007c34:	4013      	ands	r3, r2
 8007c36:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007c38:	68bb      	ldr	r3, [r7, #8]
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3714      	adds	r7, #20
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c44:	4770      	bx	lr

08007c46 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007c46:	b480      	push	{r7}
 8007c48:	b087      	sub	sp, #28
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	6078      	str	r0, [r7, #4]
 8007c4e:	460b      	mov	r3, r1
 8007c50:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c5c:	691b      	ldr	r3, [r3, #16]
 8007c5e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c68:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007c6a:	78fb      	ldrb	r3, [r7, #3]
 8007c6c:	f003 030f 	and.w	r3, r3, #15
 8007c70:	68fa      	ldr	r2, [r7, #12]
 8007c72:	fa22 f303 	lsr.w	r3, r2, r3
 8007c76:	01db      	lsls	r3, r3, #7
 8007c78:	b2db      	uxtb	r3, r3
 8007c7a:	693a      	ldr	r2, [r7, #16]
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007c80:	78fb      	ldrb	r3, [r7, #3]
 8007c82:	015a      	lsls	r2, r3, #5
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	4413      	add	r3, r2
 8007c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c8c:	689b      	ldr	r3, [r3, #8]
 8007c8e:	693a      	ldr	r2, [r7, #16]
 8007c90:	4013      	ands	r3, r2
 8007c92:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007c94:	68bb      	ldr	r3, [r7, #8]
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	371c      	adds	r7, #28
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca0:	4770      	bx	lr

08007ca2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007ca2:	b480      	push	{r7}
 8007ca4:	b083      	sub	sp, #12
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	695b      	ldr	r3, [r3, #20]
 8007cae:	f003 0301 	and.w	r3, r3, #1
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	370c      	adds	r7, #12
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr
	...

08007cc0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b085      	sub	sp, #20
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cda:	4619      	mov	r1, r3
 8007cdc:	4b09      	ldr	r3, [pc, #36]	; (8007d04 <USB_ActivateSetup+0x44>)
 8007cde:	4013      	ands	r3, r2
 8007ce0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	68fa      	ldr	r2, [r7, #12]
 8007cec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007cf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cf4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007cf6:	2300      	movs	r3, #0
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3714      	adds	r7, #20
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr
 8007d04:	fffff800 	.word	0xfffff800

08007d08 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b087      	sub	sp, #28
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	60f8      	str	r0, [r7, #12]
 8007d10:	460b      	mov	r3, r1
 8007d12:	607a      	str	r2, [r7, #4]
 8007d14:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	333c      	adds	r3, #60	; 0x3c
 8007d1e:	3304      	adds	r3, #4
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	4a26      	ldr	r2, [pc, #152]	; (8007dc0 <USB_EP0_OutStart+0xb8>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d90a      	bls.n	8007d42 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d3c:	d101      	bne.n	8007d42 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	e037      	b.n	8007db2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d48:	461a      	mov	r2, r3
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d54:	691b      	ldr	r3, [r3, #16]
 8007d56:	697a      	ldr	r2, [r7, #20]
 8007d58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d5c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007d60:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d68:	691b      	ldr	r3, [r3, #16]
 8007d6a:	697a      	ldr	r2, [r7, #20]
 8007d6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d70:	f043 0318 	orr.w	r3, r3, #24
 8007d74:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d7c:	691b      	ldr	r3, [r3, #16]
 8007d7e:	697a      	ldr	r2, [r7, #20]
 8007d80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d84:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007d88:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007d8a:	7afb      	ldrb	r3, [r7, #11]
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d10f      	bne.n	8007db0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d96:	461a      	mov	r2, r3
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	697a      	ldr	r2, [r7, #20]
 8007da6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007daa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007dae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007db0:	2300      	movs	r3, #0
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	371c      	adds	r7, #28
 8007db6:	46bd      	mov	sp, r7
 8007db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbc:	4770      	bx	lr
 8007dbe:	bf00      	nop
 8007dc0:	4f54300a 	.word	0x4f54300a

08007dc4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b085      	sub	sp, #20
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	3301      	adds	r3, #1
 8007dd4:	60fb      	str	r3, [r7, #12]
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	4a13      	ldr	r2, [pc, #76]	; (8007e28 <USB_CoreReset+0x64>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d901      	bls.n	8007de2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007dde:	2303      	movs	r3, #3
 8007de0:	e01b      	b.n	8007e1a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	691b      	ldr	r3, [r3, #16]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	daf2      	bge.n	8007dd0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007dea:	2300      	movs	r3, #0
 8007dec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	691b      	ldr	r3, [r3, #16]
 8007df2:	f043 0201 	orr.w	r2, r3, #1
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	3301      	adds	r3, #1
 8007dfe:	60fb      	str	r3, [r7, #12]
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	4a09      	ldr	r2, [pc, #36]	; (8007e28 <USB_CoreReset+0x64>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d901      	bls.n	8007e0c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007e08:	2303      	movs	r3, #3
 8007e0a:	e006      	b.n	8007e1a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	691b      	ldr	r3, [r3, #16]
 8007e10:	f003 0301 	and.w	r3, r3, #1
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d0f0      	beq.n	8007dfa <USB_CoreReset+0x36>

  return HAL_OK;
 8007e18:	2300      	movs	r3, #0
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3714      	adds	r7, #20
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr
 8007e26:	bf00      	nop
 8007e28:	00030d40 	.word	0x00030d40

08007e2c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b084      	sub	sp, #16
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
 8007e34:	460b      	mov	r3, r1
 8007e36:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007e38:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007e3c:	f005 fcc8 	bl	800d7d0 <malloc>
 8007e40:	4603      	mov	r3, r0
 8007e42:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d105      	bne.n	8007e56 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007e52:	2302      	movs	r3, #2
 8007e54:	e066      	b.n	8007f24 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	68fa      	ldr	r2, [r7, #12]
 8007e5a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	7c1b      	ldrb	r3, [r3, #16]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d119      	bne.n	8007e9a <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007e66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e6a:	2202      	movs	r2, #2
 8007e6c:	2181      	movs	r1, #129	; 0x81
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f005 fae1 	bl	800d436 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2201      	movs	r2, #1
 8007e78:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007e7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e7e:	2202      	movs	r2, #2
 8007e80:	2101      	movs	r1, #1
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f005 fad7 	bl	800d436 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2210      	movs	r2, #16
 8007e94:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007e98:	e016      	b.n	8007ec8 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007e9a:	2340      	movs	r3, #64	; 0x40
 8007e9c:	2202      	movs	r2, #2
 8007e9e:	2181      	movs	r1, #129	; 0x81
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f005 fac8 	bl	800d436 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2201      	movs	r2, #1
 8007eaa:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007eac:	2340      	movs	r3, #64	; 0x40
 8007eae:	2202      	movs	r2, #2
 8007eb0:	2101      	movs	r1, #1
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f005 fabf 	bl	800d436 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2201      	movs	r2, #1
 8007ebc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2210      	movs	r2, #16
 8007ec4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007ec8:	2308      	movs	r3, #8
 8007eca:	2203      	movs	r2, #3
 8007ecc:	2182      	movs	r1, #130	; 0x82
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f005 fab1 	bl	800d436 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	7c1b      	ldrb	r3, [r3, #16]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d109      	bne.n	8007f12 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007f04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f08:	2101      	movs	r1, #1
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f005 fb82 	bl	800d614 <USBD_LL_PrepareReceive>
 8007f10:	e007      	b.n	8007f22 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007f18:	2340      	movs	r3, #64	; 0x40
 8007f1a:	2101      	movs	r1, #1
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f005 fb79 	bl	800d614 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007f22:	2300      	movs	r3, #0
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3710      	adds	r7, #16
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}

08007f2c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b084      	sub	sp, #16
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	460b      	mov	r3, r1
 8007f36:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007f3c:	2181      	movs	r1, #129	; 0x81
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f005 fa9f 	bl	800d482 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2200      	movs	r2, #0
 8007f48:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007f4a:	2101      	movs	r1, #1
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f005 fa98 	bl	800d482 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2200      	movs	r2, #0
 8007f56:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007f5a:	2182      	movs	r1, #130	; 0x82
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f005 fa90 	bl	800d482 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2200      	movs	r2, #0
 8007f66:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d00e      	beq.n	8007f9a <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f005 fc27 	bl	800d7e0 <free>
    pdev->pClassData = NULL;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2200      	movs	r2, #0
 8007f96:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8007f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3710      	adds	r7, #16
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b086      	sub	sp, #24
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fb4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	781b      	ldrb	r3, [r3, #0]
 8007fc6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d03a      	beq.n	8008044 <USBD_CDC_Setup+0xa0>
 8007fce:	2b20      	cmp	r3, #32
 8007fd0:	f040 8097 	bne.w	8008102 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	88db      	ldrh	r3, [r3, #6]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d029      	beq.n	8008030 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	781b      	ldrb	r3, [r3, #0]
 8007fe0:	b25b      	sxtb	r3, r3
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	da11      	bge.n	800800a <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	683a      	ldr	r2, [r7, #0]
 8007ff0:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8007ff2:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007ff4:	683a      	ldr	r2, [r7, #0]
 8007ff6:	88d2      	ldrh	r2, [r2, #6]
 8007ff8:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007ffa:	6939      	ldr	r1, [r7, #16]
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	88db      	ldrh	r3, [r3, #6]
 8008000:	461a      	mov	r2, r3
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f001 fac7 	bl	8009596 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8008008:	e082      	b.n	8008110 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	785a      	ldrb	r2, [r3, #1]
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	88db      	ldrh	r3, [r3, #6]
 8008018:	b2da      	uxtb	r2, r3
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008020:	6939      	ldr	r1, [r7, #16]
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	88db      	ldrh	r3, [r3, #6]
 8008026:	461a      	mov	r2, r3
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f001 fae0 	bl	80095ee <USBD_CtlPrepareRx>
    break;
 800802e:	e06f      	b.n	8008110 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	683a      	ldr	r2, [r7, #0]
 800803a:	7850      	ldrb	r0, [r2, #1]
 800803c:	2200      	movs	r2, #0
 800803e:	6839      	ldr	r1, [r7, #0]
 8008040:	4798      	blx	r3
    break;
 8008042:	e065      	b.n	8008110 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	785b      	ldrb	r3, [r3, #1]
 8008048:	2b0b      	cmp	r3, #11
 800804a:	d84f      	bhi.n	80080ec <USBD_CDC_Setup+0x148>
 800804c:	a201      	add	r2, pc, #4	; (adr r2, 8008054 <USBD_CDC_Setup+0xb0>)
 800804e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008052:	bf00      	nop
 8008054:	08008085 	.word	0x08008085
 8008058:	080080fb 	.word	0x080080fb
 800805c:	080080ed 	.word	0x080080ed
 8008060:	080080ed 	.word	0x080080ed
 8008064:	080080ed 	.word	0x080080ed
 8008068:	080080ed 	.word	0x080080ed
 800806c:	080080ed 	.word	0x080080ed
 8008070:	080080ed 	.word	0x080080ed
 8008074:	080080ed 	.word	0x080080ed
 8008078:	080080ed 	.word	0x080080ed
 800807c:	080080ad 	.word	0x080080ad
 8008080:	080080d5 	.word	0x080080d5
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800808a:	2b03      	cmp	r3, #3
 800808c:	d107      	bne.n	800809e <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800808e:	f107 030c 	add.w	r3, r7, #12
 8008092:	2202      	movs	r2, #2
 8008094:	4619      	mov	r1, r3
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f001 fa7d 	bl	8009596 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800809c:	e030      	b.n	8008100 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800809e:	6839      	ldr	r1, [r7, #0]
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f001 fa07 	bl	80094b4 <USBD_CtlError>
        ret = USBD_FAIL;
 80080a6:	2303      	movs	r3, #3
 80080a8:	75fb      	strb	r3, [r7, #23]
      break;
 80080aa:	e029      	b.n	8008100 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080b2:	2b03      	cmp	r3, #3
 80080b4:	d107      	bne.n	80080c6 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80080b6:	f107 030f 	add.w	r3, r7, #15
 80080ba:	2201      	movs	r2, #1
 80080bc:	4619      	mov	r1, r3
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f001 fa69 	bl	8009596 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80080c4:	e01c      	b.n	8008100 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80080c6:	6839      	ldr	r1, [r7, #0]
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f001 f9f3 	bl	80094b4 <USBD_CtlError>
        ret = USBD_FAIL;
 80080ce:	2303      	movs	r3, #3
 80080d0:	75fb      	strb	r3, [r7, #23]
      break;
 80080d2:	e015      	b.n	8008100 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080da:	2b03      	cmp	r3, #3
 80080dc:	d00f      	beq.n	80080fe <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 80080de:	6839      	ldr	r1, [r7, #0]
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f001 f9e7 	bl	80094b4 <USBD_CtlError>
        ret = USBD_FAIL;
 80080e6:	2303      	movs	r3, #3
 80080e8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80080ea:	e008      	b.n	80080fe <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 80080ec:	6839      	ldr	r1, [r7, #0]
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f001 f9e0 	bl	80094b4 <USBD_CtlError>
      ret = USBD_FAIL;
 80080f4:	2303      	movs	r3, #3
 80080f6:	75fb      	strb	r3, [r7, #23]
      break;
 80080f8:	e002      	b.n	8008100 <USBD_CDC_Setup+0x15c>
      break;
 80080fa:	bf00      	nop
 80080fc:	e008      	b.n	8008110 <USBD_CDC_Setup+0x16c>
      break;
 80080fe:	bf00      	nop
    }
    break;
 8008100:	e006      	b.n	8008110 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8008102:	6839      	ldr	r1, [r7, #0]
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f001 f9d5 	bl	80094b4 <USBD_CtlError>
    ret = USBD_FAIL;
 800810a:	2303      	movs	r3, #3
 800810c:	75fb      	strb	r3, [r7, #23]
    break;
 800810e:	bf00      	nop
  }

  return (uint8_t)ret;
 8008110:	7dfb      	ldrb	r3, [r7, #23]
}
 8008112:	4618      	mov	r0, r3
 8008114:	3718      	adds	r7, #24
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}
 800811a:	bf00      	nop

0800811c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b084      	sub	sp, #16
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	460b      	mov	r3, r1
 8008126:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800812e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008136:	2b00      	cmp	r3, #0
 8008138:	d101      	bne.n	800813e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800813a:	2303      	movs	r3, #3
 800813c:	e049      	b.n	80081d2 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008144:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008146:	78fa      	ldrb	r2, [r7, #3]
 8008148:	6879      	ldr	r1, [r7, #4]
 800814a:	4613      	mov	r3, r2
 800814c:	009b      	lsls	r3, r3, #2
 800814e:	4413      	add	r3, r2
 8008150:	009b      	lsls	r3, r3, #2
 8008152:	440b      	add	r3, r1
 8008154:	3318      	adds	r3, #24
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d029      	beq.n	80081b0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800815c:	78fa      	ldrb	r2, [r7, #3]
 800815e:	6879      	ldr	r1, [r7, #4]
 8008160:	4613      	mov	r3, r2
 8008162:	009b      	lsls	r3, r3, #2
 8008164:	4413      	add	r3, r2
 8008166:	009b      	lsls	r3, r3, #2
 8008168:	440b      	add	r3, r1
 800816a:	3318      	adds	r3, #24
 800816c:	681a      	ldr	r2, [r3, #0]
 800816e:	78f9      	ldrb	r1, [r7, #3]
 8008170:	68f8      	ldr	r0, [r7, #12]
 8008172:	460b      	mov	r3, r1
 8008174:	00db      	lsls	r3, r3, #3
 8008176:	1a5b      	subs	r3, r3, r1
 8008178:	009b      	lsls	r3, r3, #2
 800817a:	4403      	add	r3, r0
 800817c:	3344      	adds	r3, #68	; 0x44
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	fbb2 f1f3 	udiv	r1, r2, r3
 8008184:	fb03 f301 	mul.w	r3, r3, r1
 8008188:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800818a:	2b00      	cmp	r3, #0
 800818c:	d110      	bne.n	80081b0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800818e:	78fa      	ldrb	r2, [r7, #3]
 8008190:	6879      	ldr	r1, [r7, #4]
 8008192:	4613      	mov	r3, r2
 8008194:	009b      	lsls	r3, r3, #2
 8008196:	4413      	add	r3, r2
 8008198:	009b      	lsls	r3, r3, #2
 800819a:	440b      	add	r3, r1
 800819c:	3318      	adds	r3, #24
 800819e:	2200      	movs	r2, #0
 80081a0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80081a2:	78f9      	ldrb	r1, [r7, #3]
 80081a4:	2300      	movs	r3, #0
 80081a6:	2200      	movs	r2, #0
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f005 fa12 	bl	800d5d2 <USBD_LL_Transmit>
 80081ae:	e00f      	b.n	80081d0 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	2200      	movs	r2, #0
 80081b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80081be:	691b      	ldr	r3, [r3, #16]
 80081c0:	68ba      	ldr	r2, [r7, #8]
 80081c2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80081c6:	68ba      	ldr	r2, [r7, #8]
 80081c8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80081cc:	78fa      	ldrb	r2, [r7, #3]
 80081ce:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 80081d0:	2300      	movs	r3, #0
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3710      	adds	r7, #16
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}

080081da <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80081da:	b580      	push	{r7, lr}
 80081dc:	b084      	sub	sp, #16
 80081de:	af00      	add	r7, sp, #0
 80081e0:	6078      	str	r0, [r7, #4]
 80081e2:	460b      	mov	r3, r1
 80081e4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081ec:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d101      	bne.n	80081fc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80081f8:	2303      	movs	r3, #3
 80081fa:	e015      	b.n	8008228 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80081fc:	78fb      	ldrb	r3, [r7, #3]
 80081fe:	4619      	mov	r1, r3
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f005 fa28 	bl	800d656 <USBD_LL_GetRxDataSize>
 8008206:	4602      	mov	r2, r0
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008214:	68db      	ldr	r3, [r3, #12]
 8008216:	68fa      	ldr	r2, [r7, #12]
 8008218:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800821c:	68fa      	ldr	r2, [r7, #12]
 800821e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008222:	4611      	mov	r1, r2
 8008224:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008226:	2300      	movs	r3, #0
}
 8008228:	4618      	mov	r0, r3
 800822a:	3710      	adds	r7, #16
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}

08008230 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b084      	sub	sp, #16
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800823e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008246:	2b00      	cmp	r3, #0
 8008248:	d015      	beq.n	8008276 <USBD_CDC_EP0_RxReady+0x46>
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008250:	2bff      	cmp	r3, #255	; 0xff
 8008252:	d010      	beq.n	8008276 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800825a:	689b      	ldr	r3, [r3, #8]
 800825c:	68fa      	ldr	r2, [r7, #12]
 800825e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8008262:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008264:	68fa      	ldr	r2, [r7, #12]
 8008266:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800826a:	b292      	uxth	r2, r2
 800826c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	22ff      	movs	r2, #255	; 0xff
 8008272:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8008276:	2300      	movs	r3, #0
}
 8008278:	4618      	mov	r0, r3
 800827a:	3710      	adds	r7, #16
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}

08008280 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008280:	b480      	push	{r7}
 8008282:	b083      	sub	sp, #12
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2243      	movs	r2, #67	; 0x43
 800828c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800828e:	4b03      	ldr	r3, [pc, #12]	; (800829c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008290:	4618      	mov	r0, r3
 8008292:	370c      	adds	r7, #12
 8008294:	46bd      	mov	sp, r7
 8008296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829a:	4770      	bx	lr
 800829c:	20000094 	.word	0x20000094

080082a0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b083      	sub	sp, #12
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2243      	movs	r2, #67	; 0x43
 80082ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80082ae:	4b03      	ldr	r3, [pc, #12]	; (80082bc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	370c      	adds	r7, #12
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr
 80082bc:	20000050 	.word	0x20000050

080082c0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b083      	sub	sp, #12
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2243      	movs	r2, #67	; 0x43
 80082cc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80082ce:	4b03      	ldr	r3, [pc, #12]	; (80082dc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	370c      	adds	r7, #12
 80082d4:	46bd      	mov	sp, r7
 80082d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082da:	4770      	bx	lr
 80082dc:	200000d8 	.word	0x200000d8

080082e0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b083      	sub	sp, #12
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	220a      	movs	r2, #10
 80082ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80082ee:	4b03      	ldr	r3, [pc, #12]	; (80082fc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	370c      	adds	r7, #12
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr
 80082fc:	2000000c 	.word	0x2000000c

08008300 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008300:	b480      	push	{r7}
 8008302:	b083      	sub	sp, #12
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d101      	bne.n	8008314 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008310:	2303      	movs	r3, #3
 8008312:	e004      	b.n	800831e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	683a      	ldr	r2, [r7, #0]
 8008318:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800831c:	2300      	movs	r3, #0
}
 800831e:	4618      	mov	r0, r3
 8008320:	370c      	adds	r7, #12
 8008322:	46bd      	mov	sp, r7
 8008324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008328:	4770      	bx	lr

0800832a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800832a:	b480      	push	{r7}
 800832c:	b087      	sub	sp, #28
 800832e:	af00      	add	r7, sp, #0
 8008330:	60f8      	str	r0, [r7, #12]
 8008332:	60b9      	str	r1, [r7, #8]
 8008334:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800833c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	68ba      	ldr	r2, [r7, #8]
 8008342:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008346:	697b      	ldr	r3, [r7, #20]
 8008348:	687a      	ldr	r2, [r7, #4]
 800834a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800834e:	2300      	movs	r3, #0
}
 8008350:	4618      	mov	r0, r3
 8008352:	371c      	adds	r7, #28
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr

0800835c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800835c:	b480      	push	{r7}
 800835e:	b085      	sub	sp, #20
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800836c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	683a      	ldr	r2, [r7, #0]
 8008372:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008376:	2300      	movs	r3, #0
}
 8008378:	4618      	mov	r0, r3
 800837a:	3714      	adds	r7, #20
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr

08008384 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b084      	sub	sp, #16
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008392:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008394:	2301      	movs	r3, #1
 8008396:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d101      	bne.n	80083a6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80083a2:	2303      	movs	r3, #3
 80083a4:	e01a      	b.n	80083dc <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d114      	bne.n	80083da <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	2201      	movs	r2, #1
 80083b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80083ce:	2181      	movs	r1, #129	; 0x81
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f005 f8fe 	bl	800d5d2 <USBD_LL_Transmit>

    ret = USBD_OK;
 80083d6:	2300      	movs	r3, #0
 80083d8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80083da:	7bfb      	ldrb	r3, [r7, #15]
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3710      	adds	r7, #16
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b084      	sub	sp, #16
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80083f2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d101      	bne.n	8008402 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80083fe:	2303      	movs	r3, #3
 8008400:	e016      	b.n	8008430 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	7c1b      	ldrb	r3, [r3, #16]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d109      	bne.n	800841e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008410:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008414:	2101      	movs	r1, #1
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f005 f8fc 	bl	800d614 <USBD_LL_PrepareReceive>
 800841c:	e007      	b.n	800842e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008424:	2340      	movs	r3, #64	; 0x40
 8008426:	2101      	movs	r1, #1
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f005 f8f3 	bl	800d614 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800842e:	2300      	movs	r3, #0
}
 8008430:	4618      	mov	r0, r3
 8008432:	3710      	adds	r7, #16
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}

08008438 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b086      	sub	sp, #24
 800843c:	af00      	add	r7, sp, #0
 800843e:	60f8      	str	r0, [r7, #12]
 8008440:	60b9      	str	r1, [r7, #8]
 8008442:	4613      	mov	r3, r2
 8008444:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d101      	bne.n	8008450 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800844c:	2303      	movs	r3, #3
 800844e:	e025      	b.n	800849c <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008456:	2b00      	cmp	r3, #0
 8008458:	d003      	beq.n	8008462 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2200      	movs	r2, #0
 800845e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8008468:	2b00      	cmp	r3, #0
 800846a:	d003      	beq.n	8008474 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	2200      	movs	r2, #0
 8008470:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d003      	beq.n	8008482 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	68ba      	ldr	r2, [r7, #8]
 800847e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	2201      	movs	r2, #1
 8008486:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	79fa      	ldrb	r2, [r7, #7]
 800848e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008490:	68f8      	ldr	r0, [r7, #12]
 8008492:	f004 ff69 	bl	800d368 <USBD_LL_Init>
 8008496:	4603      	mov	r3, r0
 8008498:	75fb      	strb	r3, [r7, #23]

  return ret;
 800849a:	7dfb      	ldrb	r3, [r7, #23]
}
 800849c:	4618      	mov	r0, r3
 800849e:	3718      	adds	r7, #24
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}

080084a4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b084      	sub	sp, #16
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80084ae:	2300      	movs	r3, #0
 80084b0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d101      	bne.n	80084bc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80084b8:	2303      	movs	r3, #3
 80084ba:	e010      	b.n	80084de <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	683a      	ldr	r2, [r7, #0]
 80084c0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084cc:	f107 020e 	add.w	r2, r7, #14
 80084d0:	4610      	mov	r0, r2
 80084d2:	4798      	blx	r3
 80084d4:	4602      	mov	r2, r0
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80084dc:	2300      	movs	r3, #0
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3710      	adds	r7, #16
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}

080084e6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80084e6:	b580      	push	{r7, lr}
 80084e8:	b082      	sub	sp, #8
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f004 ff86 	bl	800d400 <USBD_LL_Start>
 80084f4:	4603      	mov	r3, r0
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3708      	adds	r7, #8
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}

080084fe <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80084fe:	b480      	push	{r7}
 8008500:	b083      	sub	sp, #12
 8008502:	af00      	add	r7, sp, #0
 8008504:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008506:	2300      	movs	r3, #0
}
 8008508:	4618      	mov	r0, r3
 800850a:	370c      	adds	r7, #12
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr

08008514 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b084      	sub	sp, #16
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	460b      	mov	r3, r1
 800851e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008520:	2303      	movs	r3, #3
 8008522:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800852a:	2b00      	cmp	r3, #0
 800852c:	d009      	beq.n	8008542 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	78fa      	ldrb	r2, [r7, #3]
 8008538:	4611      	mov	r1, r2
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	4798      	blx	r3
 800853e:	4603      	mov	r3, r0
 8008540:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008542:	7bfb      	ldrb	r3, [r7, #15]
}
 8008544:	4618      	mov	r0, r3
 8008546:	3710      	adds	r7, #16
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}

0800854c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b082      	sub	sp, #8
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
 8008554:	460b      	mov	r3, r1
 8008556:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800855e:	2b00      	cmp	r3, #0
 8008560:	d007      	beq.n	8008572 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	78fa      	ldrb	r2, [r7, #3]
 800856c:	4611      	mov	r1, r2
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	4798      	blx	r3
  }

  return USBD_OK;
 8008572:	2300      	movs	r3, #0
}
 8008574:	4618      	mov	r0, r3
 8008576:	3708      	adds	r7, #8
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}

0800857c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b084      	sub	sp, #16
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800858c:	6839      	ldr	r1, [r7, #0]
 800858e:	4618      	mov	r0, r3
 8008590:	f000 ff56 	bl	8009440 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2201      	movs	r2, #1
 8008598:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80085a2:	461a      	mov	r2, r3
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80085b0:	f003 031f 	and.w	r3, r3, #31
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d00e      	beq.n	80085d6 <USBD_LL_SetupStage+0x5a>
 80085b8:	2b01      	cmp	r3, #1
 80085ba:	d302      	bcc.n	80085c2 <USBD_LL_SetupStage+0x46>
 80085bc:	2b02      	cmp	r3, #2
 80085be:	d014      	beq.n	80085ea <USBD_LL_SetupStage+0x6e>
 80085c0:	e01d      	b.n	80085fe <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80085c8:	4619      	mov	r1, r3
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f000 fa18 	bl	8008a00 <USBD_StdDevReq>
 80085d0:	4603      	mov	r3, r0
 80085d2:	73fb      	strb	r3, [r7, #15]
      break;
 80085d4:	e020      	b.n	8008618 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80085dc:	4619      	mov	r1, r3
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f000 fa7c 	bl	8008adc <USBD_StdItfReq>
 80085e4:	4603      	mov	r3, r0
 80085e6:	73fb      	strb	r3, [r7, #15]
      break;
 80085e8:	e016      	b.n	8008618 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80085f0:	4619      	mov	r1, r3
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f000 fab8 	bl	8008b68 <USBD_StdEPReq>
 80085f8:	4603      	mov	r3, r0
 80085fa:	73fb      	strb	r3, [r7, #15]
      break;
 80085fc:	e00c      	b.n	8008618 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008604:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008608:	b2db      	uxtb	r3, r3
 800860a:	4619      	mov	r1, r3
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f004 ff57 	bl	800d4c0 <USBD_LL_StallEP>
 8008612:	4603      	mov	r3, r0
 8008614:	73fb      	strb	r3, [r7, #15]
      break;
 8008616:	bf00      	nop
  }

  return ret;
 8008618:	7bfb      	ldrb	r3, [r7, #15]
}
 800861a:	4618      	mov	r0, r3
 800861c:	3710      	adds	r7, #16
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}

08008622 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008622:	b580      	push	{r7, lr}
 8008624:	b086      	sub	sp, #24
 8008626:	af00      	add	r7, sp, #0
 8008628:	60f8      	str	r0, [r7, #12]
 800862a:	460b      	mov	r3, r1
 800862c:	607a      	str	r2, [r7, #4]
 800862e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008630:	7afb      	ldrb	r3, [r7, #11]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d137      	bne.n	80086a6 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800863c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008644:	2b03      	cmp	r3, #3
 8008646:	d14a      	bne.n	80086de <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	689a      	ldr	r2, [r3, #8]
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	68db      	ldr	r3, [r3, #12]
 8008650:	429a      	cmp	r2, r3
 8008652:	d913      	bls.n	800867c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	689a      	ldr	r2, [r3, #8]
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	68db      	ldr	r3, [r3, #12]
 800865c:	1ad2      	subs	r2, r2, r3
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	68da      	ldr	r2, [r3, #12]
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	689b      	ldr	r3, [r3, #8]
 800866a:	4293      	cmp	r3, r2
 800866c:	bf28      	it	cs
 800866e:	4613      	movcs	r3, r2
 8008670:	461a      	mov	r2, r3
 8008672:	6879      	ldr	r1, [r7, #4]
 8008674:	68f8      	ldr	r0, [r7, #12]
 8008676:	f000 ffd7 	bl	8009628 <USBD_CtlContinueRx>
 800867a:	e030      	b.n	80086de <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008682:	691b      	ldr	r3, [r3, #16]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d00a      	beq.n	800869e <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800868e:	2b03      	cmp	r3, #3
 8008690:	d105      	bne.n	800869e <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008698:	691b      	ldr	r3, [r3, #16]
 800869a:	68f8      	ldr	r0, [r7, #12]
 800869c:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800869e:	68f8      	ldr	r0, [r7, #12]
 80086a0:	f000 ffd3 	bl	800964a <USBD_CtlSendStatus>
 80086a4:	e01b      	b.n	80086de <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086ac:	699b      	ldr	r3, [r3, #24]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d013      	beq.n	80086da <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80086b8:	2b03      	cmp	r3, #3
 80086ba:	d10e      	bne.n	80086da <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086c2:	699b      	ldr	r3, [r3, #24]
 80086c4:	7afa      	ldrb	r2, [r7, #11]
 80086c6:	4611      	mov	r1, r2
 80086c8:	68f8      	ldr	r0, [r7, #12]
 80086ca:	4798      	blx	r3
 80086cc:	4603      	mov	r3, r0
 80086ce:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80086d0:	7dfb      	ldrb	r3, [r7, #23]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d003      	beq.n	80086de <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80086d6:	7dfb      	ldrb	r3, [r7, #23]
 80086d8:	e002      	b.n	80086e0 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80086da:	2303      	movs	r3, #3
 80086dc:	e000      	b.n	80086e0 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80086de:	2300      	movs	r3, #0
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3718      	adds	r7, #24
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}

080086e8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b086      	sub	sp, #24
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	60f8      	str	r0, [r7, #12]
 80086f0:	460b      	mov	r3, r1
 80086f2:	607a      	str	r2, [r7, #4]
 80086f4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80086f6:	7afb      	ldrb	r3, [r7, #11]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d16a      	bne.n	80087d2 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	3314      	adds	r3, #20
 8008700:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008708:	2b02      	cmp	r3, #2
 800870a:	d155      	bne.n	80087b8 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	689a      	ldr	r2, [r3, #8]
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	68db      	ldr	r3, [r3, #12]
 8008714:	429a      	cmp	r2, r3
 8008716:	d914      	bls.n	8008742 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	689a      	ldr	r2, [r3, #8]
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	68db      	ldr	r3, [r3, #12]
 8008720:	1ad2      	subs	r2, r2, r3
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	689b      	ldr	r3, [r3, #8]
 800872a:	461a      	mov	r2, r3
 800872c:	6879      	ldr	r1, [r7, #4]
 800872e:	68f8      	ldr	r0, [r7, #12]
 8008730:	f000 ff4c 	bl	80095cc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008734:	2300      	movs	r3, #0
 8008736:	2200      	movs	r2, #0
 8008738:	2100      	movs	r1, #0
 800873a:	68f8      	ldr	r0, [r7, #12]
 800873c:	f004 ff6a 	bl	800d614 <USBD_LL_PrepareReceive>
 8008740:	e03a      	b.n	80087b8 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	68da      	ldr	r2, [r3, #12]
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	689b      	ldr	r3, [r3, #8]
 800874a:	429a      	cmp	r2, r3
 800874c:	d11c      	bne.n	8008788 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	685a      	ldr	r2, [r3, #4]
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008756:	429a      	cmp	r2, r3
 8008758:	d316      	bcc.n	8008788 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	685a      	ldr	r2, [r3, #4]
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008764:	429a      	cmp	r2, r3
 8008766:	d20f      	bcs.n	8008788 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008768:	2200      	movs	r2, #0
 800876a:	2100      	movs	r1, #0
 800876c:	68f8      	ldr	r0, [r7, #12]
 800876e:	f000 ff2d 	bl	80095cc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	2200      	movs	r2, #0
 8008776:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800877a:	2300      	movs	r3, #0
 800877c:	2200      	movs	r2, #0
 800877e:	2100      	movs	r1, #0
 8008780:	68f8      	ldr	r0, [r7, #12]
 8008782:	f004 ff47 	bl	800d614 <USBD_LL_PrepareReceive>
 8008786:	e017      	b.n	80087b8 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800878e:	68db      	ldr	r3, [r3, #12]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d00a      	beq.n	80087aa <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800879a:	2b03      	cmp	r3, #3
 800879c:	d105      	bne.n	80087aa <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087a4:	68db      	ldr	r3, [r3, #12]
 80087a6:	68f8      	ldr	r0, [r7, #12]
 80087a8:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80087aa:	2180      	movs	r1, #128	; 0x80
 80087ac:	68f8      	ldr	r0, [r7, #12]
 80087ae:	f004 fe87 	bl	800d4c0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80087b2:	68f8      	ldr	r0, [r7, #12]
 80087b4:	f000 ff5c 	bl	8009670 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80087be:	2b01      	cmp	r3, #1
 80087c0:	d123      	bne.n	800880a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80087c2:	68f8      	ldr	r0, [r7, #12]
 80087c4:	f7ff fe9b 	bl	80084fe <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	2200      	movs	r2, #0
 80087cc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80087d0:	e01b      	b.n	800880a <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087d8:	695b      	ldr	r3, [r3, #20]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d013      	beq.n	8008806 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80087e4:	2b03      	cmp	r3, #3
 80087e6:	d10e      	bne.n	8008806 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087ee:	695b      	ldr	r3, [r3, #20]
 80087f0:	7afa      	ldrb	r2, [r7, #11]
 80087f2:	4611      	mov	r1, r2
 80087f4:	68f8      	ldr	r0, [r7, #12]
 80087f6:	4798      	blx	r3
 80087f8:	4603      	mov	r3, r0
 80087fa:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80087fc:	7dfb      	ldrb	r3, [r7, #23]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d003      	beq.n	800880a <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8008802:	7dfb      	ldrb	r3, [r7, #23]
 8008804:	e002      	b.n	800880c <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008806:	2303      	movs	r3, #3
 8008808:	e000      	b.n	800880c <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800880a:	2300      	movs	r3, #0
}
 800880c:	4618      	mov	r0, r3
 800880e:	3718      	adds	r7, #24
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}

08008814 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b082      	sub	sp, #8
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2201      	movs	r2, #1
 8008820:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2200      	movs	r2, #0
 8008828:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2200      	movs	r2, #0
 8008830:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2200      	movs	r2, #0
 8008836:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008840:	2b00      	cmp	r3, #0
 8008842:	d009      	beq.n	8008858 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800884a:	685b      	ldr	r3, [r3, #4]
 800884c:	687a      	ldr	r2, [r7, #4]
 800884e:	6852      	ldr	r2, [r2, #4]
 8008850:	b2d2      	uxtb	r2, r2
 8008852:	4611      	mov	r1, r2
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008858:	2340      	movs	r3, #64	; 0x40
 800885a:	2200      	movs	r2, #0
 800885c:	2100      	movs	r1, #0
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f004 fde9 	bl	800d436 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2201      	movs	r2, #1
 8008868:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2240      	movs	r2, #64	; 0x40
 8008870:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008874:	2340      	movs	r3, #64	; 0x40
 8008876:	2200      	movs	r2, #0
 8008878:	2180      	movs	r1, #128	; 0x80
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f004 fddb 	bl	800d436 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2201      	movs	r2, #1
 8008884:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2240      	movs	r2, #64	; 0x40
 800888a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800888c:	2300      	movs	r3, #0
}
 800888e:	4618      	mov	r0, r3
 8008890:	3708      	adds	r7, #8
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}

08008896 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008896:	b480      	push	{r7}
 8008898:	b083      	sub	sp, #12
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
 800889e:	460b      	mov	r3, r1
 80088a0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	78fa      	ldrb	r2, [r7, #3]
 80088a6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80088a8:	2300      	movs	r3, #0
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	370c      	adds	r7, #12
 80088ae:	46bd      	mov	sp, r7
 80088b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b4:	4770      	bx	lr

080088b6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80088b6:	b480      	push	{r7}
 80088b8:	b083      	sub	sp, #12
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2204      	movs	r2, #4
 80088ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80088d2:	2300      	movs	r3, #0
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	370c      	adds	r7, #12
 80088d8:	46bd      	mov	sp, r7
 80088da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088de:	4770      	bx	lr

080088e0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b083      	sub	sp, #12
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088ee:	2b04      	cmp	r3, #4
 80088f0:	d105      	bne.n	80088fe <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80088fe:	2300      	movs	r3, #0
}
 8008900:	4618      	mov	r0, r3
 8008902:	370c      	adds	r7, #12
 8008904:	46bd      	mov	sp, r7
 8008906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890a:	4770      	bx	lr

0800890c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b082      	sub	sp, #8
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800891a:	2b03      	cmp	r3, #3
 800891c:	d10b      	bne.n	8008936 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008924:	69db      	ldr	r3, [r3, #28]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d005      	beq.n	8008936 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008930:	69db      	ldr	r3, [r3, #28]
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008936:	2300      	movs	r3, #0
}
 8008938:	4618      	mov	r0, r3
 800893a:	3708      	adds	r7, #8
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}

08008940 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008940:	b480      	push	{r7}
 8008942:	b083      	sub	sp, #12
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
 8008948:	460b      	mov	r3, r1
 800894a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800894c:	2300      	movs	r3, #0
}
 800894e:	4618      	mov	r0, r3
 8008950:	370c      	adds	r7, #12
 8008952:	46bd      	mov	sp, r7
 8008954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008958:	4770      	bx	lr

0800895a <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800895a:	b480      	push	{r7}
 800895c:	b083      	sub	sp, #12
 800895e:	af00      	add	r7, sp, #0
 8008960:	6078      	str	r0, [r7, #4]
 8008962:	460b      	mov	r3, r1
 8008964:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008966:	2300      	movs	r3, #0
}
 8008968:	4618      	mov	r0, r3
 800896a:	370c      	adds	r7, #12
 800896c:	46bd      	mov	sp, r7
 800896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008972:	4770      	bx	lr

08008974 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008974:	b480      	push	{r7}
 8008976:	b083      	sub	sp, #12
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800897c:	2300      	movs	r3, #0
}
 800897e:	4618      	mov	r0, r3
 8008980:	370c      	adds	r7, #12
 8008982:	46bd      	mov	sp, r7
 8008984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008988:	4770      	bx	lr

0800898a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800898a:	b580      	push	{r7, lr}
 800898c:	b082      	sub	sp, #8
 800898e:	af00      	add	r7, sp, #0
 8008990:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2201      	movs	r2, #1
 8008996:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d009      	beq.n	80089b8 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089aa:	685b      	ldr	r3, [r3, #4]
 80089ac:	687a      	ldr	r2, [r7, #4]
 80089ae:	6852      	ldr	r2, [r2, #4]
 80089b0:	b2d2      	uxtb	r2, r2
 80089b2:	4611      	mov	r1, r2
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	4798      	blx	r3
  }

  return USBD_OK;
 80089b8:	2300      	movs	r3, #0
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3708      	adds	r7, #8
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}

080089c2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80089c2:	b480      	push	{r7}
 80089c4:	b087      	sub	sp, #28
 80089c6:	af00      	add	r7, sp, #0
 80089c8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	781b      	ldrb	r3, [r3, #0]
 80089d2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	3301      	adds	r3, #1
 80089d8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	781b      	ldrb	r3, [r3, #0]
 80089de:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80089e0:	8a3b      	ldrh	r3, [r7, #16]
 80089e2:	021b      	lsls	r3, r3, #8
 80089e4:	b21a      	sxth	r2, r3
 80089e6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80089ea:	4313      	orrs	r3, r2
 80089ec:	b21b      	sxth	r3, r3
 80089ee:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80089f0:	89fb      	ldrh	r3, [r7, #14]
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	371c      	adds	r7, #28
 80089f6:	46bd      	mov	sp, r7
 80089f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fc:	4770      	bx	lr
	...

08008a00 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b084      	sub	sp, #16
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	781b      	ldrb	r3, [r3, #0]
 8008a12:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a16:	2b20      	cmp	r3, #32
 8008a18:	d004      	beq.n	8008a24 <USBD_StdDevReq+0x24>
 8008a1a:	2b40      	cmp	r3, #64	; 0x40
 8008a1c:	d002      	beq.n	8008a24 <USBD_StdDevReq+0x24>
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d00a      	beq.n	8008a38 <USBD_StdDevReq+0x38>
 8008a22:	e050      	b.n	8008ac6 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a2a:	689b      	ldr	r3, [r3, #8]
 8008a2c:	6839      	ldr	r1, [r7, #0]
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	4798      	blx	r3
 8008a32:	4603      	mov	r3, r0
 8008a34:	73fb      	strb	r3, [r7, #15]
    break;
 8008a36:	e04b      	b.n	8008ad0 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	785b      	ldrb	r3, [r3, #1]
 8008a3c:	2b09      	cmp	r3, #9
 8008a3e:	d83c      	bhi.n	8008aba <USBD_StdDevReq+0xba>
 8008a40:	a201      	add	r2, pc, #4	; (adr r2, 8008a48 <USBD_StdDevReq+0x48>)
 8008a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a46:	bf00      	nop
 8008a48:	08008a9d 	.word	0x08008a9d
 8008a4c:	08008ab1 	.word	0x08008ab1
 8008a50:	08008abb 	.word	0x08008abb
 8008a54:	08008aa7 	.word	0x08008aa7
 8008a58:	08008abb 	.word	0x08008abb
 8008a5c:	08008a7b 	.word	0x08008a7b
 8008a60:	08008a71 	.word	0x08008a71
 8008a64:	08008abb 	.word	0x08008abb
 8008a68:	08008a93 	.word	0x08008a93
 8008a6c:	08008a85 	.word	0x08008a85
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8008a70:	6839      	ldr	r1, [r7, #0]
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f000 f9ce 	bl	8008e14 <USBD_GetDescriptor>
      break;
 8008a78:	e024      	b.n	8008ac4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8008a7a:	6839      	ldr	r1, [r7, #0]
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f000 fb5d 	bl	800913c <USBD_SetAddress>
      break;
 8008a82:	e01f      	b.n	8008ac4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8008a84:	6839      	ldr	r1, [r7, #0]
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f000 fb9a 	bl	80091c0 <USBD_SetConfig>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	73fb      	strb	r3, [r7, #15]
      break;
 8008a90:	e018      	b.n	8008ac4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8008a92:	6839      	ldr	r1, [r7, #0]
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f000 fc37 	bl	8009308 <USBD_GetConfig>
      break;
 8008a9a:	e013      	b.n	8008ac4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8008a9c:	6839      	ldr	r1, [r7, #0]
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f000 fc66 	bl	8009370 <USBD_GetStatus>
      break;
 8008aa4:	e00e      	b.n	8008ac4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8008aa6:	6839      	ldr	r1, [r7, #0]
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f000 fc94 	bl	80093d6 <USBD_SetFeature>
      break;
 8008aae:	e009      	b.n	8008ac4 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8008ab0:	6839      	ldr	r1, [r7, #0]
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f000 fca3 	bl	80093fe <USBD_ClrFeature>
      break;
 8008ab8:	e004      	b.n	8008ac4 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8008aba:	6839      	ldr	r1, [r7, #0]
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f000 fcf9 	bl	80094b4 <USBD_CtlError>
      break;
 8008ac2:	bf00      	nop
    }
    break;
 8008ac4:	e004      	b.n	8008ad0 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8008ac6:	6839      	ldr	r1, [r7, #0]
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f000 fcf3 	bl	80094b4 <USBD_CtlError>
    break;
 8008ace:	bf00      	nop
  }

  return ret;
 8008ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3710      	adds	r7, #16
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}
 8008ada:	bf00      	nop

08008adc <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b084      	sub	sp, #16
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
 8008ae4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	781b      	ldrb	r3, [r3, #0]
 8008aee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008af2:	2b20      	cmp	r3, #32
 8008af4:	d003      	beq.n	8008afe <USBD_StdItfReq+0x22>
 8008af6:	2b40      	cmp	r3, #64	; 0x40
 8008af8:	d001      	beq.n	8008afe <USBD_StdItfReq+0x22>
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d12a      	bne.n	8008b54 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b04:	3b01      	subs	r3, #1
 8008b06:	2b02      	cmp	r3, #2
 8008b08:	d81d      	bhi.n	8008b46 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	889b      	ldrh	r3, [r3, #4]
 8008b0e:	b2db      	uxtb	r3, r3
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	d813      	bhi.n	8008b3c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b1a:	689b      	ldr	r3, [r3, #8]
 8008b1c:	6839      	ldr	r1, [r7, #0]
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	4798      	blx	r3
 8008b22:	4603      	mov	r3, r0
 8008b24:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	88db      	ldrh	r3, [r3, #6]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d110      	bne.n	8008b50 <USBD_StdItfReq+0x74>
 8008b2e:	7bfb      	ldrb	r3, [r7, #15]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d10d      	bne.n	8008b50 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f000 fd88 	bl	800964a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8008b3a:	e009      	b.n	8008b50 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8008b3c:	6839      	ldr	r1, [r7, #0]
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f000 fcb8 	bl	80094b4 <USBD_CtlError>
      break;
 8008b44:	e004      	b.n	8008b50 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8008b46:	6839      	ldr	r1, [r7, #0]
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f000 fcb3 	bl	80094b4 <USBD_CtlError>
      break;
 8008b4e:	e000      	b.n	8008b52 <USBD_StdItfReq+0x76>
      break;
 8008b50:	bf00      	nop
    }
    break;
 8008b52:	e004      	b.n	8008b5e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8008b54:	6839      	ldr	r1, [r7, #0]
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f000 fcac 	bl	80094b4 <USBD_CtlError>
    break;
 8008b5c:	bf00      	nop
  }

  return ret;
 8008b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3710      	adds	r7, #16
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}

08008b68 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b084      	sub	sp, #16
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008b72:	2300      	movs	r3, #0
 8008b74:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	889b      	ldrh	r3, [r3, #4]
 8008b7a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	781b      	ldrb	r3, [r3, #0]
 8008b80:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b84:	2b20      	cmp	r3, #32
 8008b86:	d004      	beq.n	8008b92 <USBD_StdEPReq+0x2a>
 8008b88:	2b40      	cmp	r3, #64	; 0x40
 8008b8a:	d002      	beq.n	8008b92 <USBD_StdEPReq+0x2a>
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d00a      	beq.n	8008ba6 <USBD_StdEPReq+0x3e>
 8008b90:	e135      	b.n	8008dfe <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b98:	689b      	ldr	r3, [r3, #8]
 8008b9a:	6839      	ldr	r1, [r7, #0]
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	4798      	blx	r3
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	73fb      	strb	r3, [r7, #15]
    break;
 8008ba4:	e130      	b.n	8008e08 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	785b      	ldrb	r3, [r3, #1]
 8008baa:	2b01      	cmp	r3, #1
 8008bac:	d03e      	beq.n	8008c2c <USBD_StdEPReq+0xc4>
 8008bae:	2b03      	cmp	r3, #3
 8008bb0:	d002      	beq.n	8008bb8 <USBD_StdEPReq+0x50>
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d077      	beq.n	8008ca6 <USBD_StdEPReq+0x13e>
 8008bb6:	e11c      	b.n	8008df2 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bbe:	2b02      	cmp	r3, #2
 8008bc0:	d002      	beq.n	8008bc8 <USBD_StdEPReq+0x60>
 8008bc2:	2b03      	cmp	r3, #3
 8008bc4:	d015      	beq.n	8008bf2 <USBD_StdEPReq+0x8a>
 8008bc6:	e02b      	b.n	8008c20 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008bc8:	7bbb      	ldrb	r3, [r7, #14]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d00c      	beq.n	8008be8 <USBD_StdEPReq+0x80>
 8008bce:	7bbb      	ldrb	r3, [r7, #14]
 8008bd0:	2b80      	cmp	r3, #128	; 0x80
 8008bd2:	d009      	beq.n	8008be8 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008bd4:	7bbb      	ldrb	r3, [r7, #14]
 8008bd6:	4619      	mov	r1, r3
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f004 fc71 	bl	800d4c0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008bde:	2180      	movs	r1, #128	; 0x80
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f004 fc6d 	bl	800d4c0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008be6:	e020      	b.n	8008c2a <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8008be8:	6839      	ldr	r1, [r7, #0]
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f000 fc62 	bl	80094b4 <USBD_CtlError>
        break;
 8008bf0:	e01b      	b.n	8008c2a <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	885b      	ldrh	r3, [r3, #2]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d10e      	bne.n	8008c18 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008bfa:	7bbb      	ldrb	r3, [r7, #14]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d00b      	beq.n	8008c18 <USBD_StdEPReq+0xb0>
 8008c00:	7bbb      	ldrb	r3, [r7, #14]
 8008c02:	2b80      	cmp	r3, #128	; 0x80
 8008c04:	d008      	beq.n	8008c18 <USBD_StdEPReq+0xb0>
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	88db      	ldrh	r3, [r3, #6]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d104      	bne.n	8008c18 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8008c0e:	7bbb      	ldrb	r3, [r7, #14]
 8008c10:	4619      	mov	r1, r3
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f004 fc54 	bl	800d4c0 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f000 fd16 	bl	800964a <USBD_CtlSendStatus>

        break;
 8008c1e:	e004      	b.n	8008c2a <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8008c20:	6839      	ldr	r1, [r7, #0]
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f000 fc46 	bl	80094b4 <USBD_CtlError>
        break;
 8008c28:	bf00      	nop
      }
      break;
 8008c2a:	e0e7      	b.n	8008dfc <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c32:	2b02      	cmp	r3, #2
 8008c34:	d002      	beq.n	8008c3c <USBD_StdEPReq+0xd4>
 8008c36:	2b03      	cmp	r3, #3
 8008c38:	d015      	beq.n	8008c66 <USBD_StdEPReq+0xfe>
 8008c3a:	e02d      	b.n	8008c98 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c3c:	7bbb      	ldrb	r3, [r7, #14]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d00c      	beq.n	8008c5c <USBD_StdEPReq+0xf4>
 8008c42:	7bbb      	ldrb	r3, [r7, #14]
 8008c44:	2b80      	cmp	r3, #128	; 0x80
 8008c46:	d009      	beq.n	8008c5c <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008c48:	7bbb      	ldrb	r3, [r7, #14]
 8008c4a:	4619      	mov	r1, r3
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f004 fc37 	bl	800d4c0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c52:	2180      	movs	r1, #128	; 0x80
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f004 fc33 	bl	800d4c0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008c5a:	e023      	b.n	8008ca4 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8008c5c:	6839      	ldr	r1, [r7, #0]
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f000 fc28 	bl	80094b4 <USBD_CtlError>
        break;
 8008c64:	e01e      	b.n	8008ca4 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	885b      	ldrh	r3, [r3, #2]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d119      	bne.n	8008ca2 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8008c6e:	7bbb      	ldrb	r3, [r7, #14]
 8008c70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d004      	beq.n	8008c82 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008c78:	7bbb      	ldrb	r3, [r7, #14]
 8008c7a:	4619      	mov	r1, r3
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f004 fc3e 	bl	800d4fe <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f000 fce1 	bl	800964a <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c8e:	689b      	ldr	r3, [r3, #8]
 8008c90:	6839      	ldr	r1, [r7, #0]
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	4798      	blx	r3
        }
        break;
 8008c96:	e004      	b.n	8008ca2 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8008c98:	6839      	ldr	r1, [r7, #0]
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f000 fc0a 	bl	80094b4 <USBD_CtlError>
        break;
 8008ca0:	e000      	b.n	8008ca4 <USBD_StdEPReq+0x13c>
        break;
 8008ca2:	bf00      	nop
      }
      break;
 8008ca4:	e0aa      	b.n	8008dfc <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cac:	2b02      	cmp	r3, #2
 8008cae:	d002      	beq.n	8008cb6 <USBD_StdEPReq+0x14e>
 8008cb0:	2b03      	cmp	r3, #3
 8008cb2:	d032      	beq.n	8008d1a <USBD_StdEPReq+0x1b2>
 8008cb4:	e097      	b.n	8008de6 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008cb6:	7bbb      	ldrb	r3, [r7, #14]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d007      	beq.n	8008ccc <USBD_StdEPReq+0x164>
 8008cbc:	7bbb      	ldrb	r3, [r7, #14]
 8008cbe:	2b80      	cmp	r3, #128	; 0x80
 8008cc0:	d004      	beq.n	8008ccc <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8008cc2:	6839      	ldr	r1, [r7, #0]
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f000 fbf5 	bl	80094b4 <USBD_CtlError>
          break;
 8008cca:	e091      	b.n	8008df0 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ccc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	da0b      	bge.n	8008cec <USBD_StdEPReq+0x184>
 8008cd4:	7bbb      	ldrb	r3, [r7, #14]
 8008cd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008cda:	4613      	mov	r3, r2
 8008cdc:	009b      	lsls	r3, r3, #2
 8008cde:	4413      	add	r3, r2
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	3310      	adds	r3, #16
 8008ce4:	687a      	ldr	r2, [r7, #4]
 8008ce6:	4413      	add	r3, r2
 8008ce8:	3304      	adds	r3, #4
 8008cea:	e00b      	b.n	8008d04 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008cec:	7bbb      	ldrb	r3, [r7, #14]
 8008cee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008cf2:	4613      	mov	r3, r2
 8008cf4:	009b      	lsls	r3, r3, #2
 8008cf6:	4413      	add	r3, r2
 8008cf8:	009b      	lsls	r3, r3, #2
 8008cfa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008cfe:	687a      	ldr	r2, [r7, #4]
 8008d00:	4413      	add	r3, r2
 8008d02:	3304      	adds	r3, #4
 8008d04:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	2202      	movs	r2, #2
 8008d10:	4619      	mov	r1, r3
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f000 fc3f 	bl	8009596 <USBD_CtlSendData>
        break;
 8008d18:	e06a      	b.n	8008df0 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8008d1a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	da11      	bge.n	8008d46 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008d22:	7bbb      	ldrb	r3, [r7, #14]
 8008d24:	f003 020f 	and.w	r2, r3, #15
 8008d28:	6879      	ldr	r1, [r7, #4]
 8008d2a:	4613      	mov	r3, r2
 8008d2c:	009b      	lsls	r3, r3, #2
 8008d2e:	4413      	add	r3, r2
 8008d30:	009b      	lsls	r3, r3, #2
 8008d32:	440b      	add	r3, r1
 8008d34:	3324      	adds	r3, #36	; 0x24
 8008d36:	881b      	ldrh	r3, [r3, #0]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d117      	bne.n	8008d6c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8008d3c:	6839      	ldr	r1, [r7, #0]
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f000 fbb8 	bl	80094b4 <USBD_CtlError>
            break;
 8008d44:	e054      	b.n	8008df0 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008d46:	7bbb      	ldrb	r3, [r7, #14]
 8008d48:	f003 020f 	and.w	r2, r3, #15
 8008d4c:	6879      	ldr	r1, [r7, #4]
 8008d4e:	4613      	mov	r3, r2
 8008d50:	009b      	lsls	r3, r3, #2
 8008d52:	4413      	add	r3, r2
 8008d54:	009b      	lsls	r3, r3, #2
 8008d56:	440b      	add	r3, r1
 8008d58:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008d5c:	881b      	ldrh	r3, [r3, #0]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d104      	bne.n	8008d6c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8008d62:	6839      	ldr	r1, [r7, #0]
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f000 fba5 	bl	80094b4 <USBD_CtlError>
            break;
 8008d6a:	e041      	b.n	8008df0 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	da0b      	bge.n	8008d8c <USBD_StdEPReq+0x224>
 8008d74:	7bbb      	ldrb	r3, [r7, #14]
 8008d76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d7a:	4613      	mov	r3, r2
 8008d7c:	009b      	lsls	r3, r3, #2
 8008d7e:	4413      	add	r3, r2
 8008d80:	009b      	lsls	r3, r3, #2
 8008d82:	3310      	adds	r3, #16
 8008d84:	687a      	ldr	r2, [r7, #4]
 8008d86:	4413      	add	r3, r2
 8008d88:	3304      	adds	r3, #4
 8008d8a:	e00b      	b.n	8008da4 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008d8c:	7bbb      	ldrb	r3, [r7, #14]
 8008d8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d92:	4613      	mov	r3, r2
 8008d94:	009b      	lsls	r3, r3, #2
 8008d96:	4413      	add	r3, r2
 8008d98:	009b      	lsls	r3, r3, #2
 8008d9a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008d9e:	687a      	ldr	r2, [r7, #4]
 8008da0:	4413      	add	r3, r2
 8008da2:	3304      	adds	r3, #4
 8008da4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008da6:	7bbb      	ldrb	r3, [r7, #14]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d002      	beq.n	8008db2 <USBD_StdEPReq+0x24a>
 8008dac:	7bbb      	ldrb	r3, [r7, #14]
 8008dae:	2b80      	cmp	r3, #128	; 0x80
 8008db0:	d103      	bne.n	8008dba <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	2200      	movs	r2, #0
 8008db6:	601a      	str	r2, [r3, #0]
 8008db8:	e00e      	b.n	8008dd8 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008dba:	7bbb      	ldrb	r3, [r7, #14]
 8008dbc:	4619      	mov	r1, r3
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f004 fbbc 	bl	800d53c <USBD_LL_IsStallEP>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d003      	beq.n	8008dd2 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8008dca:	68bb      	ldr	r3, [r7, #8]
 8008dcc:	2201      	movs	r2, #1
 8008dce:	601a      	str	r2, [r3, #0]
 8008dd0:	e002      	b.n	8008dd8 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	2202      	movs	r2, #2
 8008ddc:	4619      	mov	r1, r3
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f000 fbd9 	bl	8009596 <USBD_CtlSendData>
          break;
 8008de4:	e004      	b.n	8008df0 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8008de6:	6839      	ldr	r1, [r7, #0]
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f000 fb63 	bl	80094b4 <USBD_CtlError>
        break;
 8008dee:	bf00      	nop
      }
      break;
 8008df0:	e004      	b.n	8008dfc <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8008df2:	6839      	ldr	r1, [r7, #0]
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f000 fb5d 	bl	80094b4 <USBD_CtlError>
      break;
 8008dfa:	bf00      	nop
    }
    break;
 8008dfc:	e004      	b.n	8008e08 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8008dfe:	6839      	ldr	r1, [r7, #0]
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f000 fb57 	bl	80094b4 <USBD_CtlError>
    break;
 8008e06:	bf00      	nop
  }

  return ret;
 8008e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3710      	adds	r7, #16
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}
	...

08008e14 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b084      	sub	sp, #16
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008e22:	2300      	movs	r3, #0
 8008e24:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008e26:	2300      	movs	r3, #0
 8008e28:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	885b      	ldrh	r3, [r3, #2]
 8008e2e:	0a1b      	lsrs	r3, r3, #8
 8008e30:	b29b      	uxth	r3, r3
 8008e32:	3b01      	subs	r3, #1
 8008e34:	2b0e      	cmp	r3, #14
 8008e36:	f200 8152 	bhi.w	80090de <USBD_GetDescriptor+0x2ca>
 8008e3a:	a201      	add	r2, pc, #4	; (adr r2, 8008e40 <USBD_GetDescriptor+0x2c>)
 8008e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e40:	08008eb1 	.word	0x08008eb1
 8008e44:	08008ec9 	.word	0x08008ec9
 8008e48:	08008f09 	.word	0x08008f09
 8008e4c:	080090df 	.word	0x080090df
 8008e50:	080090df 	.word	0x080090df
 8008e54:	0800907f 	.word	0x0800907f
 8008e58:	080090ab 	.word	0x080090ab
 8008e5c:	080090df 	.word	0x080090df
 8008e60:	080090df 	.word	0x080090df
 8008e64:	080090df 	.word	0x080090df
 8008e68:	080090df 	.word	0x080090df
 8008e6c:	080090df 	.word	0x080090df
 8008e70:	080090df 	.word	0x080090df
 8008e74:	080090df 	.word	0x080090df
 8008e78:	08008e7d 	.word	0x08008e7d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e82:	69db      	ldr	r3, [r3, #28]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d00b      	beq.n	8008ea0 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e8e:	69db      	ldr	r3, [r3, #28]
 8008e90:	687a      	ldr	r2, [r7, #4]
 8008e92:	7c12      	ldrb	r2, [r2, #16]
 8008e94:	f107 0108 	add.w	r1, r7, #8
 8008e98:	4610      	mov	r0, r2
 8008e9a:	4798      	blx	r3
 8008e9c:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008e9e:	e126      	b.n	80090ee <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008ea0:	6839      	ldr	r1, [r7, #0]
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f000 fb06 	bl	80094b4 <USBD_CtlError>
      err++;
 8008ea8:	7afb      	ldrb	r3, [r7, #11]
 8008eaa:	3301      	adds	r3, #1
 8008eac:	72fb      	strb	r3, [r7, #11]
    break;
 8008eae:	e11e      	b.n	80090ee <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	687a      	ldr	r2, [r7, #4]
 8008eba:	7c12      	ldrb	r2, [r2, #16]
 8008ebc:	f107 0108 	add.w	r1, r7, #8
 8008ec0:	4610      	mov	r0, r2
 8008ec2:	4798      	blx	r3
 8008ec4:	60f8      	str	r0, [r7, #12]
    break;
 8008ec6:	e112      	b.n	80090ee <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	7c1b      	ldrb	r3, [r3, #16]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d10d      	bne.n	8008eec <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ed8:	f107 0208 	add.w	r2, r7, #8
 8008edc:	4610      	mov	r0, r2
 8008ede:	4798      	blx	r3
 8008ee0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	3301      	adds	r3, #1
 8008ee6:	2202      	movs	r2, #2
 8008ee8:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8008eea:	e100      	b.n	80090ee <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ef4:	f107 0208 	add.w	r2, r7, #8
 8008ef8:	4610      	mov	r0, r2
 8008efa:	4798      	blx	r3
 8008efc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	3301      	adds	r3, #1
 8008f02:	2202      	movs	r2, #2
 8008f04:	701a      	strb	r2, [r3, #0]
    break;
 8008f06:	e0f2      	b.n	80090ee <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	885b      	ldrh	r3, [r3, #2]
 8008f0c:	b2db      	uxtb	r3, r3
 8008f0e:	2b05      	cmp	r3, #5
 8008f10:	f200 80ac 	bhi.w	800906c <USBD_GetDescriptor+0x258>
 8008f14:	a201      	add	r2, pc, #4	; (adr r2, 8008f1c <USBD_GetDescriptor+0x108>)
 8008f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f1a:	bf00      	nop
 8008f1c:	08008f35 	.word	0x08008f35
 8008f20:	08008f69 	.word	0x08008f69
 8008f24:	08008f9d 	.word	0x08008f9d
 8008f28:	08008fd1 	.word	0x08008fd1
 8008f2c:	08009005 	.word	0x08009005
 8008f30:	08009039 	.word	0x08009039
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d00b      	beq.n	8008f58 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f46:	685b      	ldr	r3, [r3, #4]
 8008f48:	687a      	ldr	r2, [r7, #4]
 8008f4a:	7c12      	ldrb	r2, [r2, #16]
 8008f4c:	f107 0108 	add.w	r1, r7, #8
 8008f50:	4610      	mov	r0, r2
 8008f52:	4798      	blx	r3
 8008f54:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008f56:	e091      	b.n	800907c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008f58:	6839      	ldr	r1, [r7, #0]
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f000 faaa 	bl	80094b4 <USBD_CtlError>
        err++;
 8008f60:	7afb      	ldrb	r3, [r7, #11]
 8008f62:	3301      	adds	r3, #1
 8008f64:	72fb      	strb	r3, [r7, #11]
      break;
 8008f66:	e089      	b.n	800907c <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f6e:	689b      	ldr	r3, [r3, #8]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d00b      	beq.n	8008f8c <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f7a:	689b      	ldr	r3, [r3, #8]
 8008f7c:	687a      	ldr	r2, [r7, #4]
 8008f7e:	7c12      	ldrb	r2, [r2, #16]
 8008f80:	f107 0108 	add.w	r1, r7, #8
 8008f84:	4610      	mov	r0, r2
 8008f86:	4798      	blx	r3
 8008f88:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008f8a:	e077      	b.n	800907c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008f8c:	6839      	ldr	r1, [r7, #0]
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f000 fa90 	bl	80094b4 <USBD_CtlError>
        err++;
 8008f94:	7afb      	ldrb	r3, [r7, #11]
 8008f96:	3301      	adds	r3, #1
 8008f98:	72fb      	strb	r3, [r7, #11]
      break;
 8008f9a:	e06f      	b.n	800907c <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fa2:	68db      	ldr	r3, [r3, #12]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d00b      	beq.n	8008fc0 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fae:	68db      	ldr	r3, [r3, #12]
 8008fb0:	687a      	ldr	r2, [r7, #4]
 8008fb2:	7c12      	ldrb	r2, [r2, #16]
 8008fb4:	f107 0108 	add.w	r1, r7, #8
 8008fb8:	4610      	mov	r0, r2
 8008fba:	4798      	blx	r3
 8008fbc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008fbe:	e05d      	b.n	800907c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008fc0:	6839      	ldr	r1, [r7, #0]
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f000 fa76 	bl	80094b4 <USBD_CtlError>
        err++;
 8008fc8:	7afb      	ldrb	r3, [r7, #11]
 8008fca:	3301      	adds	r3, #1
 8008fcc:	72fb      	strb	r3, [r7, #11]
      break;
 8008fce:	e055      	b.n	800907c <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fd6:	691b      	ldr	r3, [r3, #16]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d00b      	beq.n	8008ff4 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fe2:	691b      	ldr	r3, [r3, #16]
 8008fe4:	687a      	ldr	r2, [r7, #4]
 8008fe6:	7c12      	ldrb	r2, [r2, #16]
 8008fe8:	f107 0108 	add.w	r1, r7, #8
 8008fec:	4610      	mov	r0, r2
 8008fee:	4798      	blx	r3
 8008ff0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ff2:	e043      	b.n	800907c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008ff4:	6839      	ldr	r1, [r7, #0]
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f000 fa5c 	bl	80094b4 <USBD_CtlError>
        err++;
 8008ffc:	7afb      	ldrb	r3, [r7, #11]
 8008ffe:	3301      	adds	r3, #1
 8009000:	72fb      	strb	r3, [r7, #11]
      break;
 8009002:	e03b      	b.n	800907c <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800900a:	695b      	ldr	r3, [r3, #20]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d00b      	beq.n	8009028 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009016:	695b      	ldr	r3, [r3, #20]
 8009018:	687a      	ldr	r2, [r7, #4]
 800901a:	7c12      	ldrb	r2, [r2, #16]
 800901c:	f107 0108 	add.w	r1, r7, #8
 8009020:	4610      	mov	r0, r2
 8009022:	4798      	blx	r3
 8009024:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009026:	e029      	b.n	800907c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8009028:	6839      	ldr	r1, [r7, #0]
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f000 fa42 	bl	80094b4 <USBD_CtlError>
        err++;
 8009030:	7afb      	ldrb	r3, [r7, #11]
 8009032:	3301      	adds	r3, #1
 8009034:	72fb      	strb	r3, [r7, #11]
      break;
 8009036:	e021      	b.n	800907c <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800903e:	699b      	ldr	r3, [r3, #24]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d00b      	beq.n	800905c <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800904a:	699b      	ldr	r3, [r3, #24]
 800904c:	687a      	ldr	r2, [r7, #4]
 800904e:	7c12      	ldrb	r2, [r2, #16]
 8009050:	f107 0108 	add.w	r1, r7, #8
 8009054:	4610      	mov	r0, r2
 8009056:	4798      	blx	r3
 8009058:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800905a:	e00f      	b.n	800907c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800905c:	6839      	ldr	r1, [r7, #0]
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f000 fa28 	bl	80094b4 <USBD_CtlError>
        err++;
 8009064:	7afb      	ldrb	r3, [r7, #11]
 8009066:	3301      	adds	r3, #1
 8009068:	72fb      	strb	r3, [r7, #11]
      break;
 800906a:	e007      	b.n	800907c <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800906c:	6839      	ldr	r1, [r7, #0]
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f000 fa20 	bl	80094b4 <USBD_CtlError>
      err++;
 8009074:	7afb      	ldrb	r3, [r7, #11]
 8009076:	3301      	adds	r3, #1
 8009078:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800907a:	bf00      	nop
    }
    break;
 800907c:	e037      	b.n	80090ee <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	7c1b      	ldrb	r3, [r3, #16]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d109      	bne.n	800909a <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800908c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800908e:	f107 0208 	add.w	r2, r7, #8
 8009092:	4610      	mov	r0, r2
 8009094:	4798      	blx	r3
 8009096:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8009098:	e029      	b.n	80090ee <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800909a:	6839      	ldr	r1, [r7, #0]
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f000 fa09 	bl	80094b4 <USBD_CtlError>
      err++;
 80090a2:	7afb      	ldrb	r3, [r7, #11]
 80090a4:	3301      	adds	r3, #1
 80090a6:	72fb      	strb	r3, [r7, #11]
    break;
 80090a8:	e021      	b.n	80090ee <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	7c1b      	ldrb	r3, [r3, #16]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d10d      	bne.n	80090ce <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ba:	f107 0208 	add.w	r2, r7, #8
 80090be:	4610      	mov	r0, r2
 80090c0:	4798      	blx	r3
 80090c2:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	3301      	adds	r3, #1
 80090c8:	2207      	movs	r2, #7
 80090ca:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80090cc:	e00f      	b.n	80090ee <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80090ce:	6839      	ldr	r1, [r7, #0]
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f000 f9ef 	bl	80094b4 <USBD_CtlError>
      err++;
 80090d6:	7afb      	ldrb	r3, [r7, #11]
 80090d8:	3301      	adds	r3, #1
 80090da:	72fb      	strb	r3, [r7, #11]
    break;
 80090dc:	e007      	b.n	80090ee <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 80090de:	6839      	ldr	r1, [r7, #0]
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f000 f9e7 	bl	80094b4 <USBD_CtlError>
    err++;
 80090e6:	7afb      	ldrb	r3, [r7, #11]
 80090e8:	3301      	adds	r3, #1
 80090ea:	72fb      	strb	r3, [r7, #11]
    break;
 80090ec:	bf00      	nop
  }

  if (err != 0U)
 80090ee:	7afb      	ldrb	r3, [r7, #11]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d11e      	bne.n	8009132 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	88db      	ldrh	r3, [r3, #6]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d016      	beq.n	800912a <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 80090fc:	893b      	ldrh	r3, [r7, #8]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d00e      	beq.n	8009120 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	88da      	ldrh	r2, [r3, #6]
 8009106:	893b      	ldrh	r3, [r7, #8]
 8009108:	4293      	cmp	r3, r2
 800910a:	bf28      	it	cs
 800910c:	4613      	movcs	r3, r2
 800910e:	b29b      	uxth	r3, r3
 8009110:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8009112:	893b      	ldrh	r3, [r7, #8]
 8009114:	461a      	mov	r2, r3
 8009116:	68f9      	ldr	r1, [r7, #12]
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f000 fa3c 	bl	8009596 <USBD_CtlSendData>
 800911e:	e009      	b.n	8009134 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8009120:	6839      	ldr	r1, [r7, #0]
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f000 f9c6 	bl	80094b4 <USBD_CtlError>
 8009128:	e004      	b.n	8009134 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 fa8d 	bl	800964a <USBD_CtlSendStatus>
 8009130:	e000      	b.n	8009134 <USBD_GetDescriptor+0x320>
    return;
 8009132:	bf00      	nop
    }
  }
}
 8009134:	3710      	adds	r7, #16
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}
 800913a:	bf00      	nop

0800913c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b084      	sub	sp, #16
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
 8009144:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	889b      	ldrh	r3, [r3, #4]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d130      	bne.n	80091b0 <USBD_SetAddress+0x74>
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	88db      	ldrh	r3, [r3, #6]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d12c      	bne.n	80091b0 <USBD_SetAddress+0x74>
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	885b      	ldrh	r3, [r3, #2]
 800915a:	2b7f      	cmp	r3, #127	; 0x7f
 800915c:	d828      	bhi.n	80091b0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	885b      	ldrh	r3, [r3, #2]
 8009162:	b2db      	uxtb	r3, r3
 8009164:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009168:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009170:	2b03      	cmp	r3, #3
 8009172:	d104      	bne.n	800917e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009174:	6839      	ldr	r1, [r7, #0]
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f000 f99c 	bl	80094b4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800917c:	e01c      	b.n	80091b8 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	7bfa      	ldrb	r2, [r7, #15]
 8009182:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009186:	7bfb      	ldrb	r3, [r7, #15]
 8009188:	4619      	mov	r1, r3
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f004 fa02 	bl	800d594 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f000 fa5a 	bl	800964a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009196:	7bfb      	ldrb	r3, [r7, #15]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d004      	beq.n	80091a6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2202      	movs	r2, #2
 80091a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091a4:	e008      	b.n	80091b8 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2201      	movs	r2, #1
 80091aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091ae:	e003      	b.n	80091b8 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80091b0:	6839      	ldr	r1, [r7, #0]
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f000 f97e 	bl	80094b4 <USBD_CtlError>
  }
}
 80091b8:	bf00      	nop
 80091ba:	3710      	adds	r7, #16
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}

080091c0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b084      	sub	sp, #16
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80091ca:	2300      	movs	r3, #0
 80091cc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	885b      	ldrh	r3, [r3, #2]
 80091d2:	b2da      	uxtb	r2, r3
 80091d4:	4b4b      	ldr	r3, [pc, #300]	; (8009304 <USBD_SetConfig+0x144>)
 80091d6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80091d8:	4b4a      	ldr	r3, [pc, #296]	; (8009304 <USBD_SetConfig+0x144>)
 80091da:	781b      	ldrb	r3, [r3, #0]
 80091dc:	2b01      	cmp	r3, #1
 80091de:	d905      	bls.n	80091ec <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80091e0:	6839      	ldr	r1, [r7, #0]
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f000 f966 	bl	80094b4 <USBD_CtlError>
    return USBD_FAIL;
 80091e8:	2303      	movs	r3, #3
 80091ea:	e087      	b.n	80092fc <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091f2:	2b02      	cmp	r3, #2
 80091f4:	d002      	beq.n	80091fc <USBD_SetConfig+0x3c>
 80091f6:	2b03      	cmp	r3, #3
 80091f8:	d025      	beq.n	8009246 <USBD_SetConfig+0x86>
 80091fa:	e071      	b.n	80092e0 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80091fc:	4b41      	ldr	r3, [pc, #260]	; (8009304 <USBD_SetConfig+0x144>)
 80091fe:	781b      	ldrb	r3, [r3, #0]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d01c      	beq.n	800923e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8009204:	4b3f      	ldr	r3, [pc, #252]	; (8009304 <USBD_SetConfig+0x144>)
 8009206:	781b      	ldrb	r3, [r3, #0]
 8009208:	461a      	mov	r2, r3
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800920e:	4b3d      	ldr	r3, [pc, #244]	; (8009304 <USBD_SetConfig+0x144>)
 8009210:	781b      	ldrb	r3, [r3, #0]
 8009212:	4619      	mov	r1, r3
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f7ff f97d 	bl	8008514 <USBD_SetClassConfig>
 800921a:	4603      	mov	r3, r0
 800921c:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800921e:	7bfb      	ldrb	r3, [r7, #15]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d004      	beq.n	800922e <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8009224:	6839      	ldr	r1, [r7, #0]
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f000 f944 	bl	80094b4 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800922c:	e065      	b.n	80092fa <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f000 fa0b 	bl	800964a <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2203      	movs	r2, #3
 8009238:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800923c:	e05d      	b.n	80092fa <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 fa03 	bl	800964a <USBD_CtlSendStatus>
    break;
 8009244:	e059      	b.n	80092fa <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8009246:	4b2f      	ldr	r3, [pc, #188]	; (8009304 <USBD_SetConfig+0x144>)
 8009248:	781b      	ldrb	r3, [r3, #0]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d112      	bne.n	8009274 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2202      	movs	r2, #2
 8009252:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8009256:	4b2b      	ldr	r3, [pc, #172]	; (8009304 <USBD_SetConfig+0x144>)
 8009258:	781b      	ldrb	r3, [r3, #0]
 800925a:	461a      	mov	r2, r3
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009260:	4b28      	ldr	r3, [pc, #160]	; (8009304 <USBD_SetConfig+0x144>)
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	4619      	mov	r1, r3
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f7ff f970 	bl	800854c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f000 f9ec 	bl	800964a <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8009272:	e042      	b.n	80092fa <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8009274:	4b23      	ldr	r3, [pc, #140]	; (8009304 <USBD_SetConfig+0x144>)
 8009276:	781b      	ldrb	r3, [r3, #0]
 8009278:	461a      	mov	r2, r3
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	685b      	ldr	r3, [r3, #4]
 800927e:	429a      	cmp	r2, r3
 8009280:	d02a      	beq.n	80092d8 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	685b      	ldr	r3, [r3, #4]
 8009286:	b2db      	uxtb	r3, r3
 8009288:	4619      	mov	r1, r3
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f7ff f95e 	bl	800854c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8009290:	4b1c      	ldr	r3, [pc, #112]	; (8009304 <USBD_SetConfig+0x144>)
 8009292:	781b      	ldrb	r3, [r3, #0]
 8009294:	461a      	mov	r2, r3
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800929a:	4b1a      	ldr	r3, [pc, #104]	; (8009304 <USBD_SetConfig+0x144>)
 800929c:	781b      	ldrb	r3, [r3, #0]
 800929e:	4619      	mov	r1, r3
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f7ff f937 	bl	8008514 <USBD_SetClassConfig>
 80092a6:	4603      	mov	r3, r0
 80092a8:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 80092aa:	7bfb      	ldrb	r3, [r7, #15]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d00f      	beq.n	80092d0 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 80092b0:	6839      	ldr	r1, [r7, #0]
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f000 f8fe 	bl	80094b4 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	685b      	ldr	r3, [r3, #4]
 80092bc:	b2db      	uxtb	r3, r3
 80092be:	4619      	mov	r1, r3
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f7ff f943 	bl	800854c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2202      	movs	r2, #2
 80092ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80092ce:	e014      	b.n	80092fa <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f000 f9ba 	bl	800964a <USBD_CtlSendStatus>
    break;
 80092d6:	e010      	b.n	80092fa <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f000 f9b6 	bl	800964a <USBD_CtlSendStatus>
    break;
 80092de:	e00c      	b.n	80092fa <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80092e0:	6839      	ldr	r1, [r7, #0]
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f000 f8e6 	bl	80094b4 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80092e8:	4b06      	ldr	r3, [pc, #24]	; (8009304 <USBD_SetConfig+0x144>)
 80092ea:	781b      	ldrb	r3, [r3, #0]
 80092ec:	4619      	mov	r1, r3
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f7ff f92c 	bl	800854c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80092f4:	2303      	movs	r3, #3
 80092f6:	73fb      	strb	r3, [r7, #15]
    break;
 80092f8:	bf00      	nop
  }

  return ret;
 80092fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	3710      	adds	r7, #16
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}
 8009304:	200002bc 	.word	0x200002bc

08009308 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b082      	sub	sp, #8
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
 8009310:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	88db      	ldrh	r3, [r3, #6]
 8009316:	2b01      	cmp	r3, #1
 8009318:	d004      	beq.n	8009324 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800931a:	6839      	ldr	r1, [r7, #0]
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f000 f8c9 	bl	80094b4 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8009322:	e021      	b.n	8009368 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800932a:	2b01      	cmp	r3, #1
 800932c:	db17      	blt.n	800935e <USBD_GetConfig+0x56>
 800932e:	2b02      	cmp	r3, #2
 8009330:	dd02      	ble.n	8009338 <USBD_GetConfig+0x30>
 8009332:	2b03      	cmp	r3, #3
 8009334:	d00b      	beq.n	800934e <USBD_GetConfig+0x46>
 8009336:	e012      	b.n	800935e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2200      	movs	r2, #0
 800933c:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	3308      	adds	r3, #8
 8009342:	2201      	movs	r2, #1
 8009344:	4619      	mov	r1, r3
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f000 f925 	bl	8009596 <USBD_CtlSendData>
      break;
 800934c:	e00c      	b.n	8009368 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	3304      	adds	r3, #4
 8009352:	2201      	movs	r2, #1
 8009354:	4619      	mov	r1, r3
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 f91d 	bl	8009596 <USBD_CtlSendData>
      break;
 800935c:	e004      	b.n	8009368 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800935e:	6839      	ldr	r1, [r7, #0]
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f000 f8a7 	bl	80094b4 <USBD_CtlError>
      break;
 8009366:	bf00      	nop
}
 8009368:	bf00      	nop
 800936a:	3708      	adds	r7, #8
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}

08009370 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b082      	sub	sp, #8
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
 8009378:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009380:	3b01      	subs	r3, #1
 8009382:	2b02      	cmp	r3, #2
 8009384:	d81e      	bhi.n	80093c4 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	88db      	ldrh	r3, [r3, #6]
 800938a:	2b02      	cmp	r3, #2
 800938c:	d004      	beq.n	8009398 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800938e:	6839      	ldr	r1, [r7, #0]
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f000 f88f 	bl	80094b4 <USBD_CtlError>
      break;
 8009396:	e01a      	b.n	80093ce <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2201      	movs	r2, #1
 800939c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d005      	beq.n	80093b4 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	68db      	ldr	r3, [r3, #12]
 80093ac:	f043 0202 	orr.w	r2, r3, #2
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	330c      	adds	r3, #12
 80093b8:	2202      	movs	r2, #2
 80093ba:	4619      	mov	r1, r3
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f000 f8ea 	bl	8009596 <USBD_CtlSendData>
    break;
 80093c2:	e004      	b.n	80093ce <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80093c4:	6839      	ldr	r1, [r7, #0]
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f000 f874 	bl	80094b4 <USBD_CtlError>
    break;
 80093cc:	bf00      	nop
  }
}
 80093ce:	bf00      	nop
 80093d0:	3708      	adds	r7, #8
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}

080093d6 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093d6:	b580      	push	{r7, lr}
 80093d8:	b082      	sub	sp, #8
 80093da:	af00      	add	r7, sp, #0
 80093dc:	6078      	str	r0, [r7, #4]
 80093de:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	885b      	ldrh	r3, [r3, #2]
 80093e4:	2b01      	cmp	r3, #1
 80093e6:	d106      	bne.n	80093f6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2201      	movs	r2, #1
 80093ec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f000 f92a 	bl	800964a <USBD_CtlSendStatus>
  }
}
 80093f6:	bf00      	nop
 80093f8:	3708      	adds	r7, #8
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}

080093fe <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093fe:	b580      	push	{r7, lr}
 8009400:	b082      	sub	sp, #8
 8009402:	af00      	add	r7, sp, #0
 8009404:	6078      	str	r0, [r7, #4]
 8009406:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800940e:	3b01      	subs	r3, #1
 8009410:	2b02      	cmp	r3, #2
 8009412:	d80b      	bhi.n	800942c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	885b      	ldrh	r3, [r3, #2]
 8009418:	2b01      	cmp	r3, #1
 800941a:	d10c      	bne.n	8009436 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2200      	movs	r2, #0
 8009420:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f000 f910 	bl	800964a <USBD_CtlSendStatus>
      }
      break;
 800942a:	e004      	b.n	8009436 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800942c:	6839      	ldr	r1, [r7, #0]
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f000 f840 	bl	80094b4 <USBD_CtlError>
      break;
 8009434:	e000      	b.n	8009438 <USBD_ClrFeature+0x3a>
      break;
 8009436:	bf00      	nop
  }
}
 8009438:	bf00      	nop
 800943a:	3708      	adds	r7, #8
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}

08009440 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b084      	sub	sp, #16
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
 8009448:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	781a      	ldrb	r2, [r3, #0]
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	3301      	adds	r3, #1
 800945a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	781a      	ldrb	r2, [r3, #0]
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	3301      	adds	r3, #1
 8009468:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800946a:	68f8      	ldr	r0, [r7, #12]
 800946c:	f7ff faa9 	bl	80089c2 <SWAPBYTE>
 8009470:	4603      	mov	r3, r0
 8009472:	461a      	mov	r2, r3
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	3301      	adds	r3, #1
 800947c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	3301      	adds	r3, #1
 8009482:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009484:	68f8      	ldr	r0, [r7, #12]
 8009486:	f7ff fa9c 	bl	80089c2 <SWAPBYTE>
 800948a:	4603      	mov	r3, r0
 800948c:	461a      	mov	r2, r3
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	3301      	adds	r3, #1
 8009496:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	3301      	adds	r3, #1
 800949c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800949e:	68f8      	ldr	r0, [r7, #12]
 80094a0:	f7ff fa8f 	bl	80089c2 <SWAPBYTE>
 80094a4:	4603      	mov	r3, r0
 80094a6:	461a      	mov	r2, r3
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	80da      	strh	r2, [r3, #6]
}
 80094ac:	bf00      	nop
 80094ae:	3710      	adds	r7, #16
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}

080094b4 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b082      	sub	sp, #8
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
 80094bc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80094be:	2180      	movs	r1, #128	; 0x80
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f003 fffd 	bl	800d4c0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80094c6:	2100      	movs	r1, #0
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f003 fff9 	bl	800d4c0 <USBD_LL_StallEP>
}
 80094ce:	bf00      	nop
 80094d0:	3708      	adds	r7, #8
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}

080094d6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80094d6:	b580      	push	{r7, lr}
 80094d8:	b086      	sub	sp, #24
 80094da:	af00      	add	r7, sp, #0
 80094dc:	60f8      	str	r0, [r7, #12]
 80094de:	60b9      	str	r1, [r7, #8]
 80094e0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80094e2:	2300      	movs	r3, #0
 80094e4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d036      	beq.n	800955a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80094f0:	6938      	ldr	r0, [r7, #16]
 80094f2:	f000 f836 	bl	8009562 <USBD_GetLen>
 80094f6:	4603      	mov	r3, r0
 80094f8:	3301      	adds	r3, #1
 80094fa:	b29b      	uxth	r3, r3
 80094fc:	005b      	lsls	r3, r3, #1
 80094fe:	b29a      	uxth	r2, r3
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009504:	7dfb      	ldrb	r3, [r7, #23]
 8009506:	68ba      	ldr	r2, [r7, #8]
 8009508:	4413      	add	r3, r2
 800950a:	687a      	ldr	r2, [r7, #4]
 800950c:	7812      	ldrb	r2, [r2, #0]
 800950e:	701a      	strb	r2, [r3, #0]
  idx++;
 8009510:	7dfb      	ldrb	r3, [r7, #23]
 8009512:	3301      	adds	r3, #1
 8009514:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009516:	7dfb      	ldrb	r3, [r7, #23]
 8009518:	68ba      	ldr	r2, [r7, #8]
 800951a:	4413      	add	r3, r2
 800951c:	2203      	movs	r2, #3
 800951e:	701a      	strb	r2, [r3, #0]
  idx++;
 8009520:	7dfb      	ldrb	r3, [r7, #23]
 8009522:	3301      	adds	r3, #1
 8009524:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009526:	e013      	b.n	8009550 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009528:	7dfb      	ldrb	r3, [r7, #23]
 800952a:	68ba      	ldr	r2, [r7, #8]
 800952c:	4413      	add	r3, r2
 800952e:	693a      	ldr	r2, [r7, #16]
 8009530:	7812      	ldrb	r2, [r2, #0]
 8009532:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009534:	693b      	ldr	r3, [r7, #16]
 8009536:	3301      	adds	r3, #1
 8009538:	613b      	str	r3, [r7, #16]
    idx++;
 800953a:	7dfb      	ldrb	r3, [r7, #23]
 800953c:	3301      	adds	r3, #1
 800953e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009540:	7dfb      	ldrb	r3, [r7, #23]
 8009542:	68ba      	ldr	r2, [r7, #8]
 8009544:	4413      	add	r3, r2
 8009546:	2200      	movs	r2, #0
 8009548:	701a      	strb	r2, [r3, #0]
    idx++;
 800954a:	7dfb      	ldrb	r3, [r7, #23]
 800954c:	3301      	adds	r3, #1
 800954e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009550:	693b      	ldr	r3, [r7, #16]
 8009552:	781b      	ldrb	r3, [r3, #0]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d1e7      	bne.n	8009528 <USBD_GetString+0x52>
 8009558:	e000      	b.n	800955c <USBD_GetString+0x86>
    return;
 800955a:	bf00      	nop
  }
}
 800955c:	3718      	adds	r7, #24
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}

08009562 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009562:	b480      	push	{r7}
 8009564:	b085      	sub	sp, #20
 8009566:	af00      	add	r7, sp, #0
 8009568:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800956a:	2300      	movs	r3, #0
 800956c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009572:	e005      	b.n	8009580 <USBD_GetLen+0x1e>
  {
    len++;
 8009574:	7bfb      	ldrb	r3, [r7, #15]
 8009576:	3301      	adds	r3, #1
 8009578:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	3301      	adds	r3, #1
 800957e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	781b      	ldrb	r3, [r3, #0]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d1f5      	bne.n	8009574 <USBD_GetLen+0x12>
  }

  return len;
 8009588:	7bfb      	ldrb	r3, [r7, #15]
}
 800958a:	4618      	mov	r0, r3
 800958c:	3714      	adds	r7, #20
 800958e:	46bd      	mov	sp, r7
 8009590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009594:	4770      	bx	lr

08009596 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009596:	b580      	push	{r7, lr}
 8009598:	b084      	sub	sp, #16
 800959a:	af00      	add	r7, sp, #0
 800959c:	60f8      	str	r0, [r7, #12]
 800959e:	60b9      	str	r1, [r7, #8]
 80095a0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	2202      	movs	r2, #2
 80095a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	687a      	ldr	r2, [r7, #4]
 80095ae:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	687a      	ldr	r2, [r7, #4]
 80095b4:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	68ba      	ldr	r2, [r7, #8]
 80095ba:	2100      	movs	r1, #0
 80095bc:	68f8      	ldr	r0, [r7, #12]
 80095be:	f004 f808 	bl	800d5d2 <USBD_LL_Transmit>

  return USBD_OK;
 80095c2:	2300      	movs	r3, #0
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	3710      	adds	r7, #16
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}

080095cc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b084      	sub	sp, #16
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	60f8      	str	r0, [r7, #12]
 80095d4:	60b9      	str	r1, [r7, #8]
 80095d6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	68ba      	ldr	r2, [r7, #8]
 80095dc:	2100      	movs	r1, #0
 80095de:	68f8      	ldr	r0, [r7, #12]
 80095e0:	f003 fff7 	bl	800d5d2 <USBD_LL_Transmit>

  return USBD_OK;
 80095e4:	2300      	movs	r3, #0
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3710      	adds	r7, #16
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}

080095ee <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80095ee:	b580      	push	{r7, lr}
 80095f0:	b084      	sub	sp, #16
 80095f2:	af00      	add	r7, sp, #0
 80095f4:	60f8      	str	r0, [r7, #12]
 80095f6:	60b9      	str	r1, [r7, #8]
 80095f8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	2203      	movs	r2, #3
 80095fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	687a      	ldr	r2, [r7, #4]
 8009606:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	687a      	ldr	r2, [r7, #4]
 800960e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	68ba      	ldr	r2, [r7, #8]
 8009616:	2100      	movs	r1, #0
 8009618:	68f8      	ldr	r0, [r7, #12]
 800961a:	f003 fffb 	bl	800d614 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800961e:	2300      	movs	r3, #0
}
 8009620:	4618      	mov	r0, r3
 8009622:	3710      	adds	r7, #16
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}

08009628 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b084      	sub	sp, #16
 800962c:	af00      	add	r7, sp, #0
 800962e:	60f8      	str	r0, [r7, #12]
 8009630:	60b9      	str	r1, [r7, #8]
 8009632:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	68ba      	ldr	r2, [r7, #8]
 8009638:	2100      	movs	r1, #0
 800963a:	68f8      	ldr	r0, [r7, #12]
 800963c:	f003 ffea 	bl	800d614 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009640:	2300      	movs	r3, #0
}
 8009642:	4618      	mov	r0, r3
 8009644:	3710      	adds	r7, #16
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}

0800964a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800964a:	b580      	push	{r7, lr}
 800964c:	b082      	sub	sp, #8
 800964e:	af00      	add	r7, sp, #0
 8009650:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2204      	movs	r2, #4
 8009656:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800965a:	2300      	movs	r3, #0
 800965c:	2200      	movs	r2, #0
 800965e:	2100      	movs	r1, #0
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f003 ffb6 	bl	800d5d2 <USBD_LL_Transmit>

  return USBD_OK;
 8009666:	2300      	movs	r3, #0
}
 8009668:	4618      	mov	r0, r3
 800966a:	3708      	adds	r7, #8
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}

08009670 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b082      	sub	sp, #8
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2205      	movs	r2, #5
 800967c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009680:	2300      	movs	r3, #0
 8009682:	2200      	movs	r2, #0
 8009684:	2100      	movs	r1, #0
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f003 ffc4 	bl	800d614 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800968c:	2300      	movs	r3, #0
}
 800968e:	4618      	mov	r0, r3
 8009690:	3708      	adds	r7, #8
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}

08009696 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009696:	b480      	push	{r7}
 8009698:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800969a:	bf00      	nop
 800969c:	46bd      	mov	sp, r7
 800969e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a2:	4770      	bx	lr

080096a4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80096a4:	b480      	push	{r7}
 80096a6:	b085      	sub	sp, #20
 80096a8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80096aa:	f3ef 8305 	mrs	r3, IPSR
 80096ae:	60bb      	str	r3, [r7, #8]
  return(result);
 80096b0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d10f      	bne.n	80096d6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80096b6:	f3ef 8310 	mrs	r3, PRIMASK
 80096ba:	607b      	str	r3, [r7, #4]
  return(result);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d105      	bne.n	80096ce <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80096c2:	f3ef 8311 	mrs	r3, BASEPRI
 80096c6:	603b      	str	r3, [r7, #0]
  return(result);
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d007      	beq.n	80096de <osKernelInitialize+0x3a>
 80096ce:	4b0e      	ldr	r3, [pc, #56]	; (8009708 <osKernelInitialize+0x64>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	2b02      	cmp	r3, #2
 80096d4:	d103      	bne.n	80096de <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80096d6:	f06f 0305 	mvn.w	r3, #5
 80096da:	60fb      	str	r3, [r7, #12]
 80096dc:	e00c      	b.n	80096f8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80096de:	4b0a      	ldr	r3, [pc, #40]	; (8009708 <osKernelInitialize+0x64>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d105      	bne.n	80096f2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80096e6:	4b08      	ldr	r3, [pc, #32]	; (8009708 <osKernelInitialize+0x64>)
 80096e8:	2201      	movs	r2, #1
 80096ea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80096ec:	2300      	movs	r3, #0
 80096ee:	60fb      	str	r3, [r7, #12]
 80096f0:	e002      	b.n	80096f8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80096f2:	f04f 33ff 	mov.w	r3, #4294967295
 80096f6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80096f8:	68fb      	ldr	r3, [r7, #12]
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	3714      	adds	r7, #20
 80096fe:	46bd      	mov	sp, r7
 8009700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009704:	4770      	bx	lr
 8009706:	bf00      	nop
 8009708:	200002c0 	.word	0x200002c0

0800970c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800970c:	b580      	push	{r7, lr}
 800970e:	b084      	sub	sp, #16
 8009710:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009712:	f3ef 8305 	mrs	r3, IPSR
 8009716:	60bb      	str	r3, [r7, #8]
  return(result);
 8009718:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800971a:	2b00      	cmp	r3, #0
 800971c:	d10f      	bne.n	800973e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800971e:	f3ef 8310 	mrs	r3, PRIMASK
 8009722:	607b      	str	r3, [r7, #4]
  return(result);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d105      	bne.n	8009736 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800972a:	f3ef 8311 	mrs	r3, BASEPRI
 800972e:	603b      	str	r3, [r7, #0]
  return(result);
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d007      	beq.n	8009746 <osKernelStart+0x3a>
 8009736:	4b0f      	ldr	r3, [pc, #60]	; (8009774 <osKernelStart+0x68>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	2b02      	cmp	r3, #2
 800973c:	d103      	bne.n	8009746 <osKernelStart+0x3a>
    stat = osErrorISR;
 800973e:	f06f 0305 	mvn.w	r3, #5
 8009742:	60fb      	str	r3, [r7, #12]
 8009744:	e010      	b.n	8009768 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009746:	4b0b      	ldr	r3, [pc, #44]	; (8009774 <osKernelStart+0x68>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	2b01      	cmp	r3, #1
 800974c:	d109      	bne.n	8009762 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800974e:	f7ff ffa2 	bl	8009696 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009752:	4b08      	ldr	r3, [pc, #32]	; (8009774 <osKernelStart+0x68>)
 8009754:	2202      	movs	r2, #2
 8009756:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009758:	f001 fcf8 	bl	800b14c <vTaskStartScheduler>
      stat = osOK;
 800975c:	2300      	movs	r3, #0
 800975e:	60fb      	str	r3, [r7, #12]
 8009760:	e002      	b.n	8009768 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8009762:	f04f 33ff 	mov.w	r3, #4294967295
 8009766:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009768:	68fb      	ldr	r3, [r7, #12]
}
 800976a:	4618      	mov	r0, r3
 800976c:	3710      	adds	r7, #16
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}
 8009772:	bf00      	nop
 8009774:	200002c0 	.word	0x200002c0

08009778 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8009778:	b580      	push	{r7, lr}
 800977a:	b084      	sub	sp, #16
 800977c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800977e:	f3ef 8305 	mrs	r3, IPSR
 8009782:	60bb      	str	r3, [r7, #8]
  return(result);
 8009784:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8009786:	2b00      	cmp	r3, #0
 8009788:	d10f      	bne.n	80097aa <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800978a:	f3ef 8310 	mrs	r3, PRIMASK
 800978e:	607b      	str	r3, [r7, #4]
  return(result);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d105      	bne.n	80097a2 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009796:	f3ef 8311 	mrs	r3, BASEPRI
 800979a:	603b      	str	r3, [r7, #0]
  return(result);
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d007      	beq.n	80097b2 <osKernelGetTickCount+0x3a>
 80097a2:	4b08      	ldr	r3, [pc, #32]	; (80097c4 <osKernelGetTickCount+0x4c>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	2b02      	cmp	r3, #2
 80097a8:	d103      	bne.n	80097b2 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 80097aa:	f001 fdf3 	bl	800b394 <xTaskGetTickCountFromISR>
 80097ae:	60f8      	str	r0, [r7, #12]
 80097b0:	e002      	b.n	80097b8 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 80097b2:	f001 fddf 	bl	800b374 <xTaskGetTickCount>
 80097b6:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 80097b8:	68fb      	ldr	r3, [r7, #12]
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3710      	adds	r7, #16
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}
 80097c2:	bf00      	nop
 80097c4:	200002c0 	.word	0x200002c0

080097c8 <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 80097c8:	b480      	push	{r7}
 80097ca:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 80097cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	46bd      	mov	sp, r7
 80097d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d8:	4770      	bx	lr
	...

080097dc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80097dc:	b580      	push	{r7, lr}
 80097de:	b090      	sub	sp, #64	; 0x40
 80097e0:	af04      	add	r7, sp, #16
 80097e2:	60f8      	str	r0, [r7, #12]
 80097e4:	60b9      	str	r1, [r7, #8]
 80097e6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80097e8:	2300      	movs	r3, #0
 80097ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80097ec:	f3ef 8305 	mrs	r3, IPSR
 80097f0:	61fb      	str	r3, [r7, #28]
  return(result);
 80097f2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	f040 808f 	bne.w	8009918 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097fa:	f3ef 8310 	mrs	r3, PRIMASK
 80097fe:	61bb      	str	r3, [r7, #24]
  return(result);
 8009800:	69bb      	ldr	r3, [r7, #24]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d105      	bne.n	8009812 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009806:	f3ef 8311 	mrs	r3, BASEPRI
 800980a:	617b      	str	r3, [r7, #20]
  return(result);
 800980c:	697b      	ldr	r3, [r7, #20]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d003      	beq.n	800981a <osThreadNew+0x3e>
 8009812:	4b44      	ldr	r3, [pc, #272]	; (8009924 <osThreadNew+0x148>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	2b02      	cmp	r3, #2
 8009818:	d07e      	beq.n	8009918 <osThreadNew+0x13c>
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d07b      	beq.n	8009918 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8009820:	2380      	movs	r3, #128	; 0x80
 8009822:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8009824:	2318      	movs	r3, #24
 8009826:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8009828:	2300      	movs	r3, #0
 800982a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800982c:	f04f 33ff 	mov.w	r3, #4294967295
 8009830:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d045      	beq.n	80098c4 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d002      	beq.n	8009846 <osThreadNew+0x6a>
        name = attr->name;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	699b      	ldr	r3, [r3, #24]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d002      	beq.n	8009854 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	699b      	ldr	r3, [r3, #24]
 8009852:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009856:	2b00      	cmp	r3, #0
 8009858:	d008      	beq.n	800986c <osThreadNew+0x90>
 800985a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800985c:	2b38      	cmp	r3, #56	; 0x38
 800985e:	d805      	bhi.n	800986c <osThreadNew+0x90>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	685b      	ldr	r3, [r3, #4]
 8009864:	f003 0301 	and.w	r3, r3, #1
 8009868:	2b00      	cmp	r3, #0
 800986a:	d001      	beq.n	8009870 <osThreadNew+0x94>
        return (NULL);
 800986c:	2300      	movs	r3, #0
 800986e:	e054      	b.n	800991a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	695b      	ldr	r3, [r3, #20]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d003      	beq.n	8009880 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	695b      	ldr	r3, [r3, #20]
 800987c:	089b      	lsrs	r3, r3, #2
 800987e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	689b      	ldr	r3, [r3, #8]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d00e      	beq.n	80098a6 <osThreadNew+0xca>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	68db      	ldr	r3, [r3, #12]
 800988c:	2b5b      	cmp	r3, #91	; 0x5b
 800988e:	d90a      	bls.n	80098a6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009894:	2b00      	cmp	r3, #0
 8009896:	d006      	beq.n	80098a6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	695b      	ldr	r3, [r3, #20]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d002      	beq.n	80098a6 <osThreadNew+0xca>
        mem = 1;
 80098a0:	2301      	movs	r3, #1
 80098a2:	623b      	str	r3, [r7, #32]
 80098a4:	e010      	b.n	80098c8 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	689b      	ldr	r3, [r3, #8]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d10c      	bne.n	80098c8 <osThreadNew+0xec>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	68db      	ldr	r3, [r3, #12]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d108      	bne.n	80098c8 <osThreadNew+0xec>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	691b      	ldr	r3, [r3, #16]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d104      	bne.n	80098c8 <osThreadNew+0xec>
          mem = 0;
 80098be:	2300      	movs	r3, #0
 80098c0:	623b      	str	r3, [r7, #32]
 80098c2:	e001      	b.n	80098c8 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80098c4:	2300      	movs	r3, #0
 80098c6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80098c8:	6a3b      	ldr	r3, [r7, #32]
 80098ca:	2b01      	cmp	r3, #1
 80098cc:	d110      	bne.n	80098f0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80098d2:	687a      	ldr	r2, [r7, #4]
 80098d4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80098d6:	9202      	str	r2, [sp, #8]
 80098d8:	9301      	str	r3, [sp, #4]
 80098da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098dc:	9300      	str	r3, [sp, #0]
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80098e4:	68f8      	ldr	r0, [r7, #12]
 80098e6:	f001 f9d5 	bl	800ac94 <xTaskCreateStatic>
 80098ea:	4603      	mov	r3, r0
 80098ec:	613b      	str	r3, [r7, #16]
 80098ee:	e013      	b.n	8009918 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80098f0:	6a3b      	ldr	r3, [r7, #32]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d110      	bne.n	8009918 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80098f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098f8:	b29a      	uxth	r2, r3
 80098fa:	f107 0310 	add.w	r3, r7, #16
 80098fe:	9301      	str	r3, [sp, #4]
 8009900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009902:	9300      	str	r3, [sp, #0]
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009908:	68f8      	ldr	r0, [r7, #12]
 800990a:	f001 fa23 	bl	800ad54 <xTaskCreate>
 800990e:	4603      	mov	r3, r0
 8009910:	2b01      	cmp	r3, #1
 8009912:	d001      	beq.n	8009918 <osThreadNew+0x13c>
          hTask = NULL;
 8009914:	2300      	movs	r3, #0
 8009916:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009918:	693b      	ldr	r3, [r7, #16]
}
 800991a:	4618      	mov	r0, r3
 800991c:	3730      	adds	r7, #48	; 0x30
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}
 8009922:	bf00      	nop
 8009924:	200002c0 	.word	0x200002c0

08009928 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8009928:	b580      	push	{r7, lr}
 800992a:	b086      	sub	sp, #24
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009930:	f3ef 8305 	mrs	r3, IPSR
 8009934:	613b      	str	r3, [r7, #16]
  return(result);
 8009936:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009938:	2b00      	cmp	r3, #0
 800993a:	d10f      	bne.n	800995c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800993c:	f3ef 8310 	mrs	r3, PRIMASK
 8009940:	60fb      	str	r3, [r7, #12]
  return(result);
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d105      	bne.n	8009954 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009948:	f3ef 8311 	mrs	r3, BASEPRI
 800994c:	60bb      	str	r3, [r7, #8]
  return(result);
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d007      	beq.n	8009964 <osDelay+0x3c>
 8009954:	4b0a      	ldr	r3, [pc, #40]	; (8009980 <osDelay+0x58>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	2b02      	cmp	r3, #2
 800995a:	d103      	bne.n	8009964 <osDelay+0x3c>
    stat = osErrorISR;
 800995c:	f06f 0305 	mvn.w	r3, #5
 8009960:	617b      	str	r3, [r7, #20]
 8009962:	e007      	b.n	8009974 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8009964:	2300      	movs	r3, #0
 8009966:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d002      	beq.n	8009974 <osDelay+0x4c>
      vTaskDelay(ticks);
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f001 fbb6 	bl	800b0e0 <vTaskDelay>
    }
  }

  return (stat);
 8009974:	697b      	ldr	r3, [r7, #20]
}
 8009976:	4618      	mov	r0, r3
 8009978:	3718      	adds	r7, #24
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}
 800997e:	bf00      	nop
 8009980:	200002c0 	.word	0x200002c0

08009984 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8009984:	b580      	push	{r7, lr}
 8009986:	b088      	sub	sp, #32
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800998c:	f3ef 8305 	mrs	r3, IPSR
 8009990:	617b      	str	r3, [r7, #20]
  return(result);
 8009992:	697b      	ldr	r3, [r7, #20]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8009994:	2b00      	cmp	r3, #0
 8009996:	d10f      	bne.n	80099b8 <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009998:	f3ef 8310 	mrs	r3, PRIMASK
 800999c:	613b      	str	r3, [r7, #16]
  return(result);
 800999e:	693b      	ldr	r3, [r7, #16]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d105      	bne.n	80099b0 <osDelayUntil+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80099a4:	f3ef 8311 	mrs	r3, BASEPRI
 80099a8:	60fb      	str	r3, [r7, #12]
  return(result);
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d007      	beq.n	80099c0 <osDelayUntil+0x3c>
 80099b0:	4b13      	ldr	r3, [pc, #76]	; (8009a00 <osDelayUntil+0x7c>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	2b02      	cmp	r3, #2
 80099b6:	d103      	bne.n	80099c0 <osDelayUntil+0x3c>
    stat = osErrorISR;
 80099b8:	f06f 0305 	mvn.w	r3, #5
 80099bc:	61fb      	str	r3, [r7, #28]
 80099be:	e019      	b.n	80099f4 <osDelayUntil+0x70>
  }
  else {
    stat = osOK;
 80099c0:	2300      	movs	r3, #0
 80099c2:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 80099c4:	f001 fcd6 	bl	800b374 <xTaskGetTickCount>
 80099c8:	4603      	mov	r3, r0
 80099ca:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	687a      	ldr	r2, [r7, #4]
 80099d0:	1ad3      	subs	r3, r2, r3
 80099d2:	61bb      	str	r3, [r7, #24]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 80099d4:	69bb      	ldr	r3, [r7, #24]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d009      	beq.n	80099ee <osDelayUntil+0x6a>
 80099da:	69bb      	ldr	r3, [r7, #24]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	db06      	blt.n	80099ee <osDelayUntil+0x6a>
      vTaskDelayUntil (&tcnt, delay);
 80099e0:	f107 0308 	add.w	r3, r7, #8
 80099e4:	69b9      	ldr	r1, [r7, #24]
 80099e6:	4618      	mov	r0, r3
 80099e8:	f001 fafa 	bl	800afe0 <vTaskDelayUntil>
 80099ec:	e002      	b.n	80099f4 <osDelayUntil+0x70>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 80099ee:	f06f 0303 	mvn.w	r3, #3
 80099f2:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 80099f4:	69fb      	ldr	r3, [r7, #28]
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	3720      	adds	r7, #32
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}
 80099fe:	bf00      	nop
 8009a00:	200002c0 	.word	0x200002c0

08009a04 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b08a      	sub	sp, #40	; 0x28
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a10:	f3ef 8305 	mrs	r3, IPSR
 8009a14:	613b      	str	r3, [r7, #16]
  return(result);
 8009a16:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	f040 8085 	bne.w	8009b28 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a1e:	f3ef 8310 	mrs	r3, PRIMASK
 8009a22:	60fb      	str	r3, [r7, #12]
  return(result);
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d105      	bne.n	8009a36 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009a2a:	f3ef 8311 	mrs	r3, BASEPRI
 8009a2e:	60bb      	str	r3, [r7, #8]
  return(result);
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d003      	beq.n	8009a3e <osMutexNew+0x3a>
 8009a36:	4b3f      	ldr	r3, [pc, #252]	; (8009b34 <osMutexNew+0x130>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	2b02      	cmp	r3, #2
 8009a3c:	d074      	beq.n	8009b28 <osMutexNew+0x124>
    if (attr != NULL) {
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d003      	beq.n	8009a4c <osMutexNew+0x48>
      type = attr->attr_bits;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	685b      	ldr	r3, [r3, #4]
 8009a48:	623b      	str	r3, [r7, #32]
 8009a4a:	e001      	b.n	8009a50 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8009a50:	6a3b      	ldr	r3, [r7, #32]
 8009a52:	f003 0301 	and.w	r3, r3, #1
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d002      	beq.n	8009a60 <osMutexNew+0x5c>
      rmtx = 1U;
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	61fb      	str	r3, [r7, #28]
 8009a5e:	e001      	b.n	8009a64 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8009a60:	2300      	movs	r3, #0
 8009a62:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8009a64:	6a3b      	ldr	r3, [r7, #32]
 8009a66:	f003 0308 	and.w	r3, r3, #8
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d15c      	bne.n	8009b28 <osMutexNew+0x124>
      mem = -1;
 8009a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8009a72:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d015      	beq.n	8009aa6 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	689b      	ldr	r3, [r3, #8]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d006      	beq.n	8009a90 <osMutexNew+0x8c>
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	68db      	ldr	r3, [r3, #12]
 8009a86:	2b4f      	cmp	r3, #79	; 0x4f
 8009a88:	d902      	bls.n	8009a90 <osMutexNew+0x8c>
          mem = 1;
 8009a8a:	2301      	movs	r3, #1
 8009a8c:	61bb      	str	r3, [r7, #24]
 8009a8e:	e00c      	b.n	8009aaa <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	689b      	ldr	r3, [r3, #8]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d108      	bne.n	8009aaa <osMutexNew+0xa6>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	68db      	ldr	r3, [r3, #12]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d104      	bne.n	8009aaa <osMutexNew+0xa6>
            mem = 0;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	61bb      	str	r3, [r7, #24]
 8009aa4:	e001      	b.n	8009aaa <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8009aaa:	69bb      	ldr	r3, [r7, #24]
 8009aac:	2b01      	cmp	r3, #1
 8009aae:	d112      	bne.n	8009ad6 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8009ab0:	69fb      	ldr	r3, [r7, #28]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d007      	beq.n	8009ac6 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	689b      	ldr	r3, [r3, #8]
 8009aba:	4619      	mov	r1, r3
 8009abc:	2004      	movs	r0, #4
 8009abe:	f000 fb4e 	bl	800a15e <xQueueCreateMutexStatic>
 8009ac2:	6278      	str	r0, [r7, #36]	; 0x24
 8009ac4:	e016      	b.n	8009af4 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	689b      	ldr	r3, [r3, #8]
 8009aca:	4619      	mov	r1, r3
 8009acc:	2001      	movs	r0, #1
 8009ace:	f000 fb46 	bl	800a15e <xQueueCreateMutexStatic>
 8009ad2:	6278      	str	r0, [r7, #36]	; 0x24
 8009ad4:	e00e      	b.n	8009af4 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8009ad6:	69bb      	ldr	r3, [r7, #24]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d10b      	bne.n	8009af4 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8009adc:	69fb      	ldr	r3, [r7, #28]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d004      	beq.n	8009aec <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8009ae2:	2004      	movs	r0, #4
 8009ae4:	f000 fb23 	bl	800a12e <xQueueCreateMutex>
 8009ae8:	6278      	str	r0, [r7, #36]	; 0x24
 8009aea:	e003      	b.n	8009af4 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8009aec:	2001      	movs	r0, #1
 8009aee:	f000 fb1e 	bl	800a12e <xQueueCreateMutex>
 8009af2:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8009af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d00c      	beq.n	8009b14 <osMutexNew+0x110>
        if (attr != NULL) {
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d003      	beq.n	8009b08 <osMutexNew+0x104>
          name = attr->name;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	617b      	str	r3, [r7, #20]
 8009b06:	e001      	b.n	8009b0c <osMutexNew+0x108>
        } else {
          name = NULL;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8009b0c:	6979      	ldr	r1, [r7, #20]
 8009b0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009b10:	f001 f864 	bl	800abdc <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8009b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d006      	beq.n	8009b28 <osMutexNew+0x124>
 8009b1a:	69fb      	ldr	r3, [r7, #28]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d003      	beq.n	8009b28 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8009b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b22:	f043 0301 	orr.w	r3, r3, #1
 8009b26:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8009b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3728      	adds	r7, #40	; 0x28
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}
 8009b32:	bf00      	nop
 8009b34:	200002c0 	.word	0x200002c0

08009b38 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b088      	sub	sp, #32
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
 8009b40:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f023 0301 	bic.w	r3, r3, #1
 8009b48:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f003 0301 	and.w	r3, r3, #1
 8009b50:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8009b52:	2300      	movs	r3, #0
 8009b54:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b56:	f3ef 8305 	mrs	r3, IPSR
 8009b5a:	613b      	str	r3, [r7, #16]
  return(result);
 8009b5c:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d10f      	bne.n	8009b82 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b62:	f3ef 8310 	mrs	r3, PRIMASK
 8009b66:	60fb      	str	r3, [r7, #12]
  return(result);
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d105      	bne.n	8009b7a <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009b6e:	f3ef 8311 	mrs	r3, BASEPRI
 8009b72:	60bb      	str	r3, [r7, #8]
  return(result);
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d007      	beq.n	8009b8a <osMutexAcquire+0x52>
 8009b7a:	4b1d      	ldr	r3, [pc, #116]	; (8009bf0 <osMutexAcquire+0xb8>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	2b02      	cmp	r3, #2
 8009b80:	d103      	bne.n	8009b8a <osMutexAcquire+0x52>
    stat = osErrorISR;
 8009b82:	f06f 0305 	mvn.w	r3, #5
 8009b86:	61fb      	str	r3, [r7, #28]
 8009b88:	e02c      	b.n	8009be4 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8009b8a:	69bb      	ldr	r3, [r7, #24]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d103      	bne.n	8009b98 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8009b90:	f06f 0303 	mvn.w	r3, #3
 8009b94:	61fb      	str	r3, [r7, #28]
 8009b96:	e025      	b.n	8009be4 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d011      	beq.n	8009bc2 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8009b9e:	6839      	ldr	r1, [r7, #0]
 8009ba0:	69b8      	ldr	r0, [r7, #24]
 8009ba2:	f000 fb2c 	bl	800a1fe <xQueueTakeMutexRecursive>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	2b01      	cmp	r3, #1
 8009baa:	d01b      	beq.n	8009be4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d003      	beq.n	8009bba <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8009bb2:	f06f 0301 	mvn.w	r3, #1
 8009bb6:	61fb      	str	r3, [r7, #28]
 8009bb8:	e014      	b.n	8009be4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8009bba:	f06f 0302 	mvn.w	r3, #2
 8009bbe:	61fb      	str	r3, [r7, #28]
 8009bc0:	e010      	b.n	8009be4 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8009bc2:	6839      	ldr	r1, [r7, #0]
 8009bc4:	69b8      	ldr	r0, [r7, #24]
 8009bc6:	f000 fdd1 	bl	800a76c <xQueueSemaphoreTake>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	2b01      	cmp	r3, #1
 8009bce:	d009      	beq.n	8009be4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d003      	beq.n	8009bde <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8009bd6:	f06f 0301 	mvn.w	r3, #1
 8009bda:	61fb      	str	r3, [r7, #28]
 8009bdc:	e002      	b.n	8009be4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8009bde:	f06f 0302 	mvn.w	r3, #2
 8009be2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009be4:	69fb      	ldr	r3, [r7, #28]
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3720      	adds	r7, #32
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}
 8009bee:	bf00      	nop
 8009bf0:	200002c0 	.word	0x200002c0

08009bf4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b088      	sub	sp, #32
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	f023 0301 	bic.w	r3, r3, #1
 8009c02:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f003 0301 	and.w	r3, r3, #1
 8009c0a:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c10:	f3ef 8305 	mrs	r3, IPSR
 8009c14:	613b      	str	r3, [r7, #16]
  return(result);
 8009c16:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d10f      	bne.n	8009c3c <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c1c:	f3ef 8310 	mrs	r3, PRIMASK
 8009c20:	60fb      	str	r3, [r7, #12]
  return(result);
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d105      	bne.n	8009c34 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009c28:	f3ef 8311 	mrs	r3, BASEPRI
 8009c2c:	60bb      	str	r3, [r7, #8]
  return(result);
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d007      	beq.n	8009c44 <osMutexRelease+0x50>
 8009c34:	4b16      	ldr	r3, [pc, #88]	; (8009c90 <osMutexRelease+0x9c>)
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	2b02      	cmp	r3, #2
 8009c3a:	d103      	bne.n	8009c44 <osMutexRelease+0x50>
    stat = osErrorISR;
 8009c3c:	f06f 0305 	mvn.w	r3, #5
 8009c40:	61fb      	str	r3, [r7, #28]
 8009c42:	e01f      	b.n	8009c84 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8009c44:	69bb      	ldr	r3, [r7, #24]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d103      	bne.n	8009c52 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8009c4a:	f06f 0303 	mvn.w	r3, #3
 8009c4e:	61fb      	str	r3, [r7, #28]
 8009c50:	e018      	b.n	8009c84 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8009c52:	697b      	ldr	r3, [r7, #20]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d009      	beq.n	8009c6c <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8009c58:	69b8      	ldr	r0, [r7, #24]
 8009c5a:	f000 fa9b 	bl	800a194 <xQueueGiveMutexRecursive>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	2b01      	cmp	r3, #1
 8009c62:	d00f      	beq.n	8009c84 <osMutexRelease+0x90>
        stat = osErrorResource;
 8009c64:	f06f 0302 	mvn.w	r3, #2
 8009c68:	61fb      	str	r3, [r7, #28]
 8009c6a:	e00b      	b.n	8009c84 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	2200      	movs	r2, #0
 8009c70:	2100      	movs	r1, #0
 8009c72:	69b8      	ldr	r0, [r7, #24]
 8009c74:	f000 fafa 	bl	800a26c <xQueueGenericSend>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	2b01      	cmp	r3, #1
 8009c7c:	d002      	beq.n	8009c84 <osMutexRelease+0x90>
        stat = osErrorResource;
 8009c7e:	f06f 0302 	mvn.w	r3, #2
 8009c82:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8009c84:	69fb      	ldr	r3, [r7, #28]
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	3720      	adds	r7, #32
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}
 8009c8e:	bf00      	nop
 8009c90:	200002c0 	.word	0x200002c0

08009c94 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009c94:	b480      	push	{r7}
 8009c96:	b085      	sub	sp, #20
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	60f8      	str	r0, [r7, #12]
 8009c9c:	60b9      	str	r1, [r7, #8]
 8009c9e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	4a07      	ldr	r2, [pc, #28]	; (8009cc0 <vApplicationGetIdleTaskMemory+0x2c>)
 8009ca4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009ca6:	68bb      	ldr	r3, [r7, #8]
 8009ca8:	4a06      	ldr	r2, [pc, #24]	; (8009cc4 <vApplicationGetIdleTaskMemory+0x30>)
 8009caa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2280      	movs	r2, #128	; 0x80
 8009cb0:	601a      	str	r2, [r3, #0]
}
 8009cb2:	bf00      	nop
 8009cb4:	3714      	adds	r7, #20
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbc:	4770      	bx	lr
 8009cbe:	bf00      	nop
 8009cc0:	200002c4 	.word	0x200002c4
 8009cc4:	20000320 	.word	0x20000320

08009cc8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009cc8:	b480      	push	{r7}
 8009cca:	b085      	sub	sp, #20
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	60f8      	str	r0, [r7, #12]
 8009cd0:	60b9      	str	r1, [r7, #8]
 8009cd2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	4a07      	ldr	r2, [pc, #28]	; (8009cf4 <vApplicationGetTimerTaskMemory+0x2c>)
 8009cd8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	4a06      	ldr	r2, [pc, #24]	; (8009cf8 <vApplicationGetTimerTaskMemory+0x30>)
 8009cde:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009ce6:	601a      	str	r2, [r3, #0]
}
 8009ce8:	bf00      	nop
 8009cea:	3714      	adds	r7, #20
 8009cec:	46bd      	mov	sp, r7
 8009cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf2:	4770      	bx	lr
 8009cf4:	20000520 	.word	0x20000520
 8009cf8:	2000057c 	.word	0x2000057c

08009cfc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	b083      	sub	sp, #12
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f103 0208 	add.w	r2, r3, #8
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	f04f 32ff 	mov.w	r2, #4294967295
 8009d14:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	f103 0208 	add.w	r2, r3, #8
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f103 0208 	add.w	r2, r3, #8
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009d30:	bf00      	nop
 8009d32:	370c      	adds	r7, #12
 8009d34:	46bd      	mov	sp, r7
 8009d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3a:	4770      	bx	lr

08009d3c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b083      	sub	sp, #12
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2200      	movs	r2, #0
 8009d48:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009d4a:	bf00      	nop
 8009d4c:	370c      	adds	r7, #12
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d54:	4770      	bx	lr

08009d56 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009d56:	b480      	push	{r7}
 8009d58:	b085      	sub	sp, #20
 8009d5a:	af00      	add	r7, sp, #0
 8009d5c:	6078      	str	r0, [r7, #4]
 8009d5e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	685b      	ldr	r3, [r3, #4]
 8009d64:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	68fa      	ldr	r2, [r7, #12]
 8009d6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	689a      	ldr	r2, [r3, #8]
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	689b      	ldr	r3, [r3, #8]
 8009d78:	683a      	ldr	r2, [r7, #0]
 8009d7a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	683a      	ldr	r2, [r7, #0]
 8009d80:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	687a      	ldr	r2, [r7, #4]
 8009d86:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	1c5a      	adds	r2, r3, #1
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	601a      	str	r2, [r3, #0]
}
 8009d92:	bf00      	nop
 8009d94:	3714      	adds	r7, #20
 8009d96:	46bd      	mov	sp, r7
 8009d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9c:	4770      	bx	lr

08009d9e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009d9e:	b480      	push	{r7}
 8009da0:	b085      	sub	sp, #20
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	6078      	str	r0, [r7, #4]
 8009da6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009db4:	d103      	bne.n	8009dbe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	691b      	ldr	r3, [r3, #16]
 8009dba:	60fb      	str	r3, [r7, #12]
 8009dbc:	e00c      	b.n	8009dd8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	3308      	adds	r3, #8
 8009dc2:	60fb      	str	r3, [r7, #12]
 8009dc4:	e002      	b.n	8009dcc <vListInsert+0x2e>
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	685b      	ldr	r3, [r3, #4]
 8009dca:	60fb      	str	r3, [r7, #12]
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	685b      	ldr	r3, [r3, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	68ba      	ldr	r2, [r7, #8]
 8009dd4:	429a      	cmp	r2, r3
 8009dd6:	d2f6      	bcs.n	8009dc6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	685a      	ldr	r2, [r3, #4]
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	685b      	ldr	r3, [r3, #4]
 8009de4:	683a      	ldr	r2, [r7, #0]
 8009de6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	68fa      	ldr	r2, [r7, #12]
 8009dec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	683a      	ldr	r2, [r7, #0]
 8009df2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	687a      	ldr	r2, [r7, #4]
 8009df8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	1c5a      	adds	r2, r3, #1
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	601a      	str	r2, [r3, #0]
}
 8009e04:	bf00      	nop
 8009e06:	3714      	adds	r7, #20
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0e:	4770      	bx	lr

08009e10 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009e10:	b480      	push	{r7}
 8009e12:	b085      	sub	sp, #20
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	691b      	ldr	r3, [r3, #16]
 8009e1c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	685b      	ldr	r3, [r3, #4]
 8009e22:	687a      	ldr	r2, [r7, #4]
 8009e24:	6892      	ldr	r2, [r2, #8]
 8009e26:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	689b      	ldr	r3, [r3, #8]
 8009e2c:	687a      	ldr	r2, [r7, #4]
 8009e2e:	6852      	ldr	r2, [r2, #4]
 8009e30:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	685b      	ldr	r3, [r3, #4]
 8009e36:	687a      	ldr	r2, [r7, #4]
 8009e38:	429a      	cmp	r2, r3
 8009e3a:	d103      	bne.n	8009e44 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	689a      	ldr	r2, [r3, #8]
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2200      	movs	r2, #0
 8009e48:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	1e5a      	subs	r2, r3, #1
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	681b      	ldr	r3, [r3, #0]
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	3714      	adds	r7, #20
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e62:	4770      	bx	lr

08009e64 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b084      	sub	sp, #16
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
 8009e6c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d10b      	bne.n	8009e90 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e7c:	b672      	cpsid	i
 8009e7e:	f383 8811 	msr	BASEPRI, r3
 8009e82:	f3bf 8f6f 	isb	sy
 8009e86:	f3bf 8f4f 	dsb	sy
 8009e8a:	b662      	cpsie	i
 8009e8c:	60bb      	str	r3, [r7, #8]
 8009e8e:	e7fe      	b.n	8009e8e <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8009e90:	f002 fc0a 	bl	800c6a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681a      	ldr	r2, [r3, #0]
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e9c:	68f9      	ldr	r1, [r7, #12]
 8009e9e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009ea0:	fb01 f303 	mul.w	r3, r1, r3
 8009ea4:	441a      	add	r2, r3
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	2200      	movs	r2, #0
 8009eae:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	681a      	ldr	r2, [r3, #0]
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	681a      	ldr	r2, [r3, #0]
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ec0:	3b01      	subs	r3, #1
 8009ec2:	68f9      	ldr	r1, [r7, #12]
 8009ec4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009ec6:	fb01 f303 	mul.w	r3, r1, r3
 8009eca:	441a      	add	r2, r3
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	22ff      	movs	r2, #255	; 0xff
 8009ed4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	22ff      	movs	r2, #255	; 0xff
 8009edc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d114      	bne.n	8009f10 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	691b      	ldr	r3, [r3, #16]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d01a      	beq.n	8009f24 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	3310      	adds	r3, #16
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f001 fbca 	bl	800b68c <xTaskRemoveFromEventList>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d012      	beq.n	8009f24 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009efe:	4b0d      	ldr	r3, [pc, #52]	; (8009f34 <xQueueGenericReset+0xd0>)
 8009f00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f04:	601a      	str	r2, [r3, #0]
 8009f06:	f3bf 8f4f 	dsb	sy
 8009f0a:	f3bf 8f6f 	isb	sy
 8009f0e:	e009      	b.n	8009f24 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	3310      	adds	r3, #16
 8009f14:	4618      	mov	r0, r3
 8009f16:	f7ff fef1 	bl	8009cfc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	3324      	adds	r3, #36	; 0x24
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f7ff feec 	bl	8009cfc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009f24:	f002 fbf2 	bl	800c70c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009f28:	2301      	movs	r3, #1
}
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	3710      	adds	r7, #16
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}
 8009f32:	bf00      	nop
 8009f34:	e000ed04 	.word	0xe000ed04

08009f38 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b08e      	sub	sp, #56	; 0x38
 8009f3c:	af02      	add	r7, sp, #8
 8009f3e:	60f8      	str	r0, [r7, #12]
 8009f40:	60b9      	str	r1, [r7, #8]
 8009f42:	607a      	str	r2, [r7, #4]
 8009f44:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d10b      	bne.n	8009f64 <xQueueGenericCreateStatic+0x2c>
 8009f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f50:	b672      	cpsid	i
 8009f52:	f383 8811 	msr	BASEPRI, r3
 8009f56:	f3bf 8f6f 	isb	sy
 8009f5a:	f3bf 8f4f 	dsb	sy
 8009f5e:	b662      	cpsie	i
 8009f60:	62bb      	str	r3, [r7, #40]	; 0x28
 8009f62:	e7fe      	b.n	8009f62 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d10b      	bne.n	8009f82 <xQueueGenericCreateStatic+0x4a>
 8009f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f6e:	b672      	cpsid	i
 8009f70:	f383 8811 	msr	BASEPRI, r3
 8009f74:	f3bf 8f6f 	isb	sy
 8009f78:	f3bf 8f4f 	dsb	sy
 8009f7c:	b662      	cpsie	i
 8009f7e:	627b      	str	r3, [r7, #36]	; 0x24
 8009f80:	e7fe      	b.n	8009f80 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d002      	beq.n	8009f8e <xQueueGenericCreateStatic+0x56>
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d001      	beq.n	8009f92 <xQueueGenericCreateStatic+0x5a>
 8009f8e:	2301      	movs	r3, #1
 8009f90:	e000      	b.n	8009f94 <xQueueGenericCreateStatic+0x5c>
 8009f92:	2300      	movs	r3, #0
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d10b      	bne.n	8009fb0 <xQueueGenericCreateStatic+0x78>
 8009f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f9c:	b672      	cpsid	i
 8009f9e:	f383 8811 	msr	BASEPRI, r3
 8009fa2:	f3bf 8f6f 	isb	sy
 8009fa6:	f3bf 8f4f 	dsb	sy
 8009faa:	b662      	cpsie	i
 8009fac:	623b      	str	r3, [r7, #32]
 8009fae:	e7fe      	b.n	8009fae <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d102      	bne.n	8009fbc <xQueueGenericCreateStatic+0x84>
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d101      	bne.n	8009fc0 <xQueueGenericCreateStatic+0x88>
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	e000      	b.n	8009fc2 <xQueueGenericCreateStatic+0x8a>
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d10b      	bne.n	8009fde <xQueueGenericCreateStatic+0xa6>
 8009fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fca:	b672      	cpsid	i
 8009fcc:	f383 8811 	msr	BASEPRI, r3
 8009fd0:	f3bf 8f6f 	isb	sy
 8009fd4:	f3bf 8f4f 	dsb	sy
 8009fd8:	b662      	cpsie	i
 8009fda:	61fb      	str	r3, [r7, #28]
 8009fdc:	e7fe      	b.n	8009fdc <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009fde:	2350      	movs	r3, #80	; 0x50
 8009fe0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009fe2:	697b      	ldr	r3, [r7, #20]
 8009fe4:	2b50      	cmp	r3, #80	; 0x50
 8009fe6:	d00b      	beq.n	800a000 <xQueueGenericCreateStatic+0xc8>
 8009fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fec:	b672      	cpsid	i
 8009fee:	f383 8811 	msr	BASEPRI, r3
 8009ff2:	f3bf 8f6f 	isb	sy
 8009ff6:	f3bf 8f4f 	dsb	sy
 8009ffa:	b662      	cpsie	i
 8009ffc:	61bb      	str	r3, [r7, #24]
 8009ffe:	e7fe      	b.n	8009ffe <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a000:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d00d      	beq.n	800a028 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a00c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a00e:	2201      	movs	r2, #1
 800a010:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a014:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a01a:	9300      	str	r3, [sp, #0]
 800a01c:	4613      	mov	r3, r2
 800a01e:	687a      	ldr	r2, [r7, #4]
 800a020:	68b9      	ldr	r1, [r7, #8]
 800a022:	68f8      	ldr	r0, [r7, #12]
 800a024:	f000 f846 	bl	800a0b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a02a:	4618      	mov	r0, r3
 800a02c:	3730      	adds	r7, #48	; 0x30
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}

0800a032 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a032:	b580      	push	{r7, lr}
 800a034:	b08a      	sub	sp, #40	; 0x28
 800a036:	af02      	add	r7, sp, #8
 800a038:	60f8      	str	r0, [r7, #12]
 800a03a:	60b9      	str	r1, [r7, #8]
 800a03c:	4613      	mov	r3, r2
 800a03e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d10b      	bne.n	800a05e <xQueueGenericCreate+0x2c>
 800a046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a04a:	b672      	cpsid	i
 800a04c:	f383 8811 	msr	BASEPRI, r3
 800a050:	f3bf 8f6f 	isb	sy
 800a054:	f3bf 8f4f 	dsb	sy
 800a058:	b662      	cpsie	i
 800a05a:	613b      	str	r3, [r7, #16]
 800a05c:	e7fe      	b.n	800a05c <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d102      	bne.n	800a06a <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a064:	2300      	movs	r3, #0
 800a066:	61fb      	str	r3, [r7, #28]
 800a068:	e004      	b.n	800a074 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	68ba      	ldr	r2, [r7, #8]
 800a06e:	fb02 f303 	mul.w	r3, r2, r3
 800a072:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a074:	69fb      	ldr	r3, [r7, #28]
 800a076:	3350      	adds	r3, #80	; 0x50
 800a078:	4618      	mov	r0, r3
 800a07a:	f002 fc37 	bl	800c8ec <pvPortMalloc>
 800a07e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a080:	69bb      	ldr	r3, [r7, #24]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d011      	beq.n	800a0aa <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a086:	69bb      	ldr	r3, [r7, #24]
 800a088:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	3350      	adds	r3, #80	; 0x50
 800a08e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a090:	69bb      	ldr	r3, [r7, #24]
 800a092:	2200      	movs	r2, #0
 800a094:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a098:	79fa      	ldrb	r2, [r7, #7]
 800a09a:	69bb      	ldr	r3, [r7, #24]
 800a09c:	9300      	str	r3, [sp, #0]
 800a09e:	4613      	mov	r3, r2
 800a0a0:	697a      	ldr	r2, [r7, #20]
 800a0a2:	68b9      	ldr	r1, [r7, #8]
 800a0a4:	68f8      	ldr	r0, [r7, #12]
 800a0a6:	f000 f805 	bl	800a0b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a0aa:	69bb      	ldr	r3, [r7, #24]
	}
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	3720      	adds	r7, #32
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}

0800a0b4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b084      	sub	sp, #16
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	60f8      	str	r0, [r7, #12]
 800a0bc:	60b9      	str	r1, [r7, #8]
 800a0be:	607a      	str	r2, [r7, #4]
 800a0c0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d103      	bne.n	800a0d0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a0c8:	69bb      	ldr	r3, [r7, #24]
 800a0ca:	69ba      	ldr	r2, [r7, #24]
 800a0cc:	601a      	str	r2, [r3, #0]
 800a0ce:	e002      	b.n	800a0d6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a0d0:	69bb      	ldr	r3, [r7, #24]
 800a0d2:	687a      	ldr	r2, [r7, #4]
 800a0d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a0d6:	69bb      	ldr	r3, [r7, #24]
 800a0d8:	68fa      	ldr	r2, [r7, #12]
 800a0da:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a0dc:	69bb      	ldr	r3, [r7, #24]
 800a0de:	68ba      	ldr	r2, [r7, #8]
 800a0e0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a0e2:	2101      	movs	r1, #1
 800a0e4:	69b8      	ldr	r0, [r7, #24]
 800a0e6:	f7ff febd 	bl	8009e64 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a0ea:	69bb      	ldr	r3, [r7, #24]
 800a0ec:	78fa      	ldrb	r2, [r7, #3]
 800a0ee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a0f2:	bf00      	nop
 800a0f4:	3710      	adds	r7, #16
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}

0800a0fa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a0fa:	b580      	push	{r7, lr}
 800a0fc:	b082      	sub	sp, #8
 800a0fe:	af00      	add	r7, sp, #0
 800a100:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d00e      	beq.n	800a126 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2200      	movs	r2, #0
 800a10c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2200      	movs	r2, #0
 800a112:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2200      	movs	r2, #0
 800a118:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a11a:	2300      	movs	r3, #0
 800a11c:	2200      	movs	r2, #0
 800a11e:	2100      	movs	r1, #0
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f000 f8a3 	bl	800a26c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a126:	bf00      	nop
 800a128:	3708      	adds	r7, #8
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}

0800a12e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a12e:	b580      	push	{r7, lr}
 800a130:	b086      	sub	sp, #24
 800a132:	af00      	add	r7, sp, #0
 800a134:	4603      	mov	r3, r0
 800a136:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a138:	2301      	movs	r3, #1
 800a13a:	617b      	str	r3, [r7, #20]
 800a13c:	2300      	movs	r3, #0
 800a13e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a140:	79fb      	ldrb	r3, [r7, #7]
 800a142:	461a      	mov	r2, r3
 800a144:	6939      	ldr	r1, [r7, #16]
 800a146:	6978      	ldr	r0, [r7, #20]
 800a148:	f7ff ff73 	bl	800a032 <xQueueGenericCreate>
 800a14c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a14e:	68f8      	ldr	r0, [r7, #12]
 800a150:	f7ff ffd3 	bl	800a0fa <prvInitialiseMutex>

		return xNewQueue;
 800a154:	68fb      	ldr	r3, [r7, #12]
	}
 800a156:	4618      	mov	r0, r3
 800a158:	3718      	adds	r7, #24
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}

0800a15e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a15e:	b580      	push	{r7, lr}
 800a160:	b088      	sub	sp, #32
 800a162:	af02      	add	r7, sp, #8
 800a164:	4603      	mov	r3, r0
 800a166:	6039      	str	r1, [r7, #0]
 800a168:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a16a:	2301      	movs	r3, #1
 800a16c:	617b      	str	r3, [r7, #20]
 800a16e:	2300      	movs	r3, #0
 800a170:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a172:	79fb      	ldrb	r3, [r7, #7]
 800a174:	9300      	str	r3, [sp, #0]
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	2200      	movs	r2, #0
 800a17a:	6939      	ldr	r1, [r7, #16]
 800a17c:	6978      	ldr	r0, [r7, #20]
 800a17e:	f7ff fedb 	bl	8009f38 <xQueueGenericCreateStatic>
 800a182:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a184:	68f8      	ldr	r0, [r7, #12]
 800a186:	f7ff ffb8 	bl	800a0fa <prvInitialiseMutex>

		return xNewQueue;
 800a18a:	68fb      	ldr	r3, [r7, #12]
	}
 800a18c:	4618      	mov	r0, r3
 800a18e:	3718      	adds	r7, #24
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}

0800a194 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800a194:	b590      	push	{r4, r7, lr}
 800a196:	b087      	sub	sp, #28
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d10b      	bne.n	800a1be <xQueueGiveMutexRecursive+0x2a>
 800a1a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1aa:	b672      	cpsid	i
 800a1ac:	f383 8811 	msr	BASEPRI, r3
 800a1b0:	f3bf 8f6f 	isb	sy
 800a1b4:	f3bf 8f4f 	dsb	sy
 800a1b8:	b662      	cpsie	i
 800a1ba:	60fb      	str	r3, [r7, #12]
 800a1bc:	e7fe      	b.n	800a1bc <xQueueGiveMutexRecursive+0x28>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a1be:	693b      	ldr	r3, [r7, #16]
 800a1c0:	689c      	ldr	r4, [r3, #8]
 800a1c2:	f001 fc21 	bl	800ba08 <xTaskGetCurrentTaskHandle>
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	429c      	cmp	r4, r3
 800a1ca:	d111      	bne.n	800a1f0 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800a1cc:	693b      	ldr	r3, [r7, #16]
 800a1ce:	68db      	ldr	r3, [r3, #12]
 800a1d0:	1e5a      	subs	r2, r3, #1
 800a1d2:	693b      	ldr	r3, [r7, #16]
 800a1d4:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800a1d6:	693b      	ldr	r3, [r7, #16]
 800a1d8:	68db      	ldr	r3, [r3, #12]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d105      	bne.n	800a1ea <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800a1de:	2300      	movs	r3, #0
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	2100      	movs	r1, #0
 800a1e4:	6938      	ldr	r0, [r7, #16]
 800a1e6:	f000 f841 	bl	800a26c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800a1ea:	2301      	movs	r3, #1
 800a1ec:	617b      	str	r3, [r7, #20]
 800a1ee:	e001      	b.n	800a1f4 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800a1f4:	697b      	ldr	r3, [r7, #20]
	}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	371c      	adds	r7, #28
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd90      	pop	{r4, r7, pc}

0800a1fe <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800a1fe:	b590      	push	{r4, r7, lr}
 800a200:	b087      	sub	sp, #28
 800a202:	af00      	add	r7, sp, #0
 800a204:	6078      	str	r0, [r7, #4]
 800a206:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a20c:	693b      	ldr	r3, [r7, #16]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d10b      	bne.n	800a22a <xQueueTakeMutexRecursive+0x2c>
 800a212:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a216:	b672      	cpsid	i
 800a218:	f383 8811 	msr	BASEPRI, r3
 800a21c:	f3bf 8f6f 	isb	sy
 800a220:	f3bf 8f4f 	dsb	sy
 800a224:	b662      	cpsie	i
 800a226:	60fb      	str	r3, [r7, #12]
 800a228:	e7fe      	b.n	800a228 <xQueueTakeMutexRecursive+0x2a>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a22a:	693b      	ldr	r3, [r7, #16]
 800a22c:	689c      	ldr	r4, [r3, #8]
 800a22e:	f001 fbeb 	bl	800ba08 <xTaskGetCurrentTaskHandle>
 800a232:	4603      	mov	r3, r0
 800a234:	429c      	cmp	r4, r3
 800a236:	d107      	bne.n	800a248 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a238:	693b      	ldr	r3, [r7, #16]
 800a23a:	68db      	ldr	r3, [r3, #12]
 800a23c:	1c5a      	adds	r2, r3, #1
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800a242:	2301      	movs	r3, #1
 800a244:	617b      	str	r3, [r7, #20]
 800a246:	e00c      	b.n	800a262 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800a248:	6839      	ldr	r1, [r7, #0]
 800a24a:	6938      	ldr	r0, [r7, #16]
 800a24c:	f000 fa8e 	bl	800a76c <xQueueSemaphoreTake>
 800a250:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800a252:	697b      	ldr	r3, [r7, #20]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d004      	beq.n	800a262 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a258:	693b      	ldr	r3, [r7, #16]
 800a25a:	68db      	ldr	r3, [r3, #12]
 800a25c:	1c5a      	adds	r2, r3, #1
 800a25e:	693b      	ldr	r3, [r7, #16]
 800a260:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800a262:	697b      	ldr	r3, [r7, #20]
	}
 800a264:	4618      	mov	r0, r3
 800a266:	371c      	adds	r7, #28
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd90      	pop	{r4, r7, pc}

0800a26c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b08e      	sub	sp, #56	; 0x38
 800a270:	af00      	add	r7, sp, #0
 800a272:	60f8      	str	r0, [r7, #12]
 800a274:	60b9      	str	r1, [r7, #8]
 800a276:	607a      	str	r2, [r7, #4]
 800a278:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a27a:	2300      	movs	r3, #0
 800a27c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a284:	2b00      	cmp	r3, #0
 800a286:	d10b      	bne.n	800a2a0 <xQueueGenericSend+0x34>
 800a288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a28c:	b672      	cpsid	i
 800a28e:	f383 8811 	msr	BASEPRI, r3
 800a292:	f3bf 8f6f 	isb	sy
 800a296:	f3bf 8f4f 	dsb	sy
 800a29a:	b662      	cpsie	i
 800a29c:	62bb      	str	r3, [r7, #40]	; 0x28
 800a29e:	e7fe      	b.n	800a29e <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a2a0:	68bb      	ldr	r3, [r7, #8]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d103      	bne.n	800a2ae <xQueueGenericSend+0x42>
 800a2a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d101      	bne.n	800a2b2 <xQueueGenericSend+0x46>
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	e000      	b.n	800a2b4 <xQueueGenericSend+0x48>
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d10b      	bne.n	800a2d0 <xQueueGenericSend+0x64>
 800a2b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2bc:	b672      	cpsid	i
 800a2be:	f383 8811 	msr	BASEPRI, r3
 800a2c2:	f3bf 8f6f 	isb	sy
 800a2c6:	f3bf 8f4f 	dsb	sy
 800a2ca:	b662      	cpsie	i
 800a2cc:	627b      	str	r3, [r7, #36]	; 0x24
 800a2ce:	e7fe      	b.n	800a2ce <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	2b02      	cmp	r3, #2
 800a2d4:	d103      	bne.n	800a2de <xQueueGenericSend+0x72>
 800a2d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2da:	2b01      	cmp	r3, #1
 800a2dc:	d101      	bne.n	800a2e2 <xQueueGenericSend+0x76>
 800a2de:	2301      	movs	r3, #1
 800a2e0:	e000      	b.n	800a2e4 <xQueueGenericSend+0x78>
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d10b      	bne.n	800a300 <xQueueGenericSend+0x94>
 800a2e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ec:	b672      	cpsid	i
 800a2ee:	f383 8811 	msr	BASEPRI, r3
 800a2f2:	f3bf 8f6f 	isb	sy
 800a2f6:	f3bf 8f4f 	dsb	sy
 800a2fa:	b662      	cpsie	i
 800a2fc:	623b      	str	r3, [r7, #32]
 800a2fe:	e7fe      	b.n	800a2fe <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a300:	f001 fb92 	bl	800ba28 <xTaskGetSchedulerState>
 800a304:	4603      	mov	r3, r0
 800a306:	2b00      	cmp	r3, #0
 800a308:	d102      	bne.n	800a310 <xQueueGenericSend+0xa4>
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d101      	bne.n	800a314 <xQueueGenericSend+0xa8>
 800a310:	2301      	movs	r3, #1
 800a312:	e000      	b.n	800a316 <xQueueGenericSend+0xaa>
 800a314:	2300      	movs	r3, #0
 800a316:	2b00      	cmp	r3, #0
 800a318:	d10b      	bne.n	800a332 <xQueueGenericSend+0xc6>
 800a31a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a31e:	b672      	cpsid	i
 800a320:	f383 8811 	msr	BASEPRI, r3
 800a324:	f3bf 8f6f 	isb	sy
 800a328:	f3bf 8f4f 	dsb	sy
 800a32c:	b662      	cpsie	i
 800a32e:	61fb      	str	r3, [r7, #28]
 800a330:	e7fe      	b.n	800a330 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a332:	f002 f9b9 	bl	800c6a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a338:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a33a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a33c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a33e:	429a      	cmp	r2, r3
 800a340:	d302      	bcc.n	800a348 <xQueueGenericSend+0xdc>
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	2b02      	cmp	r3, #2
 800a346:	d129      	bne.n	800a39c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a348:	683a      	ldr	r2, [r7, #0]
 800a34a:	68b9      	ldr	r1, [r7, #8]
 800a34c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a34e:	f000 fb35 	bl	800a9bc <prvCopyDataToQueue>
 800a352:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d010      	beq.n	800a37e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a35c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a35e:	3324      	adds	r3, #36	; 0x24
 800a360:	4618      	mov	r0, r3
 800a362:	f001 f993 	bl	800b68c <xTaskRemoveFromEventList>
 800a366:	4603      	mov	r3, r0
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d013      	beq.n	800a394 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a36c:	4b3f      	ldr	r3, [pc, #252]	; (800a46c <xQueueGenericSend+0x200>)
 800a36e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a372:	601a      	str	r2, [r3, #0]
 800a374:	f3bf 8f4f 	dsb	sy
 800a378:	f3bf 8f6f 	isb	sy
 800a37c:	e00a      	b.n	800a394 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a37e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a380:	2b00      	cmp	r3, #0
 800a382:	d007      	beq.n	800a394 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a384:	4b39      	ldr	r3, [pc, #228]	; (800a46c <xQueueGenericSend+0x200>)
 800a386:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a38a:	601a      	str	r2, [r3, #0]
 800a38c:	f3bf 8f4f 	dsb	sy
 800a390:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a394:	f002 f9ba 	bl	800c70c <vPortExitCritical>
				return pdPASS;
 800a398:	2301      	movs	r3, #1
 800a39a:	e063      	b.n	800a464 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d103      	bne.n	800a3aa <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a3a2:	f002 f9b3 	bl	800c70c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	e05c      	b.n	800a464 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a3aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d106      	bne.n	800a3be <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a3b0:	f107 0314 	add.w	r3, r7, #20
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f001 f9cd 	bl	800b754 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a3be:	f002 f9a5 	bl	800c70c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a3c2:	f000 ff2b 	bl	800b21c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a3c6:	f002 f96f 	bl	800c6a8 <vPortEnterCritical>
 800a3ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a3d0:	b25b      	sxtb	r3, r3
 800a3d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3d6:	d103      	bne.n	800a3e0 <xQueueGenericSend+0x174>
 800a3d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3da:	2200      	movs	r2, #0
 800a3dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a3e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a3e6:	b25b      	sxtb	r3, r3
 800a3e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3ec:	d103      	bne.n	800a3f6 <xQueueGenericSend+0x18a>
 800a3ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a3f6:	f002 f989 	bl	800c70c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a3fa:	1d3a      	adds	r2, r7, #4
 800a3fc:	f107 0314 	add.w	r3, r7, #20
 800a400:	4611      	mov	r1, r2
 800a402:	4618      	mov	r0, r3
 800a404:	f001 f9bc 	bl	800b780 <xTaskCheckForTimeOut>
 800a408:	4603      	mov	r3, r0
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d124      	bne.n	800a458 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a40e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a410:	f000 fbcc 	bl	800abac <prvIsQueueFull>
 800a414:	4603      	mov	r3, r0
 800a416:	2b00      	cmp	r3, #0
 800a418:	d018      	beq.n	800a44c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a41a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a41c:	3310      	adds	r3, #16
 800a41e:	687a      	ldr	r2, [r7, #4]
 800a420:	4611      	mov	r1, r2
 800a422:	4618      	mov	r0, r3
 800a424:	f001 f8e0 	bl	800b5e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a428:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a42a:	f000 fb57 	bl	800aadc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a42e:	f000 ff03 	bl	800b238 <xTaskResumeAll>
 800a432:	4603      	mov	r3, r0
 800a434:	2b00      	cmp	r3, #0
 800a436:	f47f af7c 	bne.w	800a332 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a43a:	4b0c      	ldr	r3, [pc, #48]	; (800a46c <xQueueGenericSend+0x200>)
 800a43c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a440:	601a      	str	r2, [r3, #0]
 800a442:	f3bf 8f4f 	dsb	sy
 800a446:	f3bf 8f6f 	isb	sy
 800a44a:	e772      	b.n	800a332 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a44c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a44e:	f000 fb45 	bl	800aadc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a452:	f000 fef1 	bl	800b238 <xTaskResumeAll>
 800a456:	e76c      	b.n	800a332 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a458:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a45a:	f000 fb3f 	bl	800aadc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a45e:	f000 feeb 	bl	800b238 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a462:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a464:	4618      	mov	r0, r3
 800a466:	3738      	adds	r7, #56	; 0x38
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}
 800a46c:	e000ed04 	.word	0xe000ed04

0800a470 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b08e      	sub	sp, #56	; 0x38
 800a474:	af00      	add	r7, sp, #0
 800a476:	60f8      	str	r0, [r7, #12]
 800a478:	60b9      	str	r1, [r7, #8]
 800a47a:	607a      	str	r2, [r7, #4]
 800a47c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a484:	2b00      	cmp	r3, #0
 800a486:	d10b      	bne.n	800a4a0 <xQueueGenericSendFromISR+0x30>
 800a488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a48c:	b672      	cpsid	i
 800a48e:	f383 8811 	msr	BASEPRI, r3
 800a492:	f3bf 8f6f 	isb	sy
 800a496:	f3bf 8f4f 	dsb	sy
 800a49a:	b662      	cpsie	i
 800a49c:	627b      	str	r3, [r7, #36]	; 0x24
 800a49e:	e7fe      	b.n	800a49e <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d103      	bne.n	800a4ae <xQueueGenericSendFromISR+0x3e>
 800a4a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d101      	bne.n	800a4b2 <xQueueGenericSendFromISR+0x42>
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	e000      	b.n	800a4b4 <xQueueGenericSendFromISR+0x44>
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d10b      	bne.n	800a4d0 <xQueueGenericSendFromISR+0x60>
 800a4b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4bc:	b672      	cpsid	i
 800a4be:	f383 8811 	msr	BASEPRI, r3
 800a4c2:	f3bf 8f6f 	isb	sy
 800a4c6:	f3bf 8f4f 	dsb	sy
 800a4ca:	b662      	cpsie	i
 800a4cc:	623b      	str	r3, [r7, #32]
 800a4ce:	e7fe      	b.n	800a4ce <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	2b02      	cmp	r3, #2
 800a4d4:	d103      	bne.n	800a4de <xQueueGenericSendFromISR+0x6e>
 800a4d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4da:	2b01      	cmp	r3, #1
 800a4dc:	d101      	bne.n	800a4e2 <xQueueGenericSendFromISR+0x72>
 800a4de:	2301      	movs	r3, #1
 800a4e0:	e000      	b.n	800a4e4 <xQueueGenericSendFromISR+0x74>
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d10b      	bne.n	800a500 <xQueueGenericSendFromISR+0x90>
 800a4e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ec:	b672      	cpsid	i
 800a4ee:	f383 8811 	msr	BASEPRI, r3
 800a4f2:	f3bf 8f6f 	isb	sy
 800a4f6:	f3bf 8f4f 	dsb	sy
 800a4fa:	b662      	cpsie	i
 800a4fc:	61fb      	str	r3, [r7, #28]
 800a4fe:	e7fe      	b.n	800a4fe <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a500:	f002 f9b2 	bl	800c868 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a504:	f3ef 8211 	mrs	r2, BASEPRI
 800a508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a50c:	b672      	cpsid	i
 800a50e:	f383 8811 	msr	BASEPRI, r3
 800a512:	f3bf 8f6f 	isb	sy
 800a516:	f3bf 8f4f 	dsb	sy
 800a51a:	b662      	cpsie	i
 800a51c:	61ba      	str	r2, [r7, #24]
 800a51e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a520:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a522:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a526:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a52a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a52c:	429a      	cmp	r2, r3
 800a52e:	d302      	bcc.n	800a536 <xQueueGenericSendFromISR+0xc6>
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	2b02      	cmp	r3, #2
 800a534:	d12c      	bne.n	800a590 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a538:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a53c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a540:	683a      	ldr	r2, [r7, #0]
 800a542:	68b9      	ldr	r1, [r7, #8]
 800a544:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a546:	f000 fa39 	bl	800a9bc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a54a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a54e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a552:	d112      	bne.n	800a57a <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d016      	beq.n	800a58a <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a55c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a55e:	3324      	adds	r3, #36	; 0x24
 800a560:	4618      	mov	r0, r3
 800a562:	f001 f893 	bl	800b68c <xTaskRemoveFromEventList>
 800a566:	4603      	mov	r3, r0
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d00e      	beq.n	800a58a <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d00b      	beq.n	800a58a <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2201      	movs	r2, #1
 800a576:	601a      	str	r2, [r3, #0]
 800a578:	e007      	b.n	800a58a <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a57a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a57e:	3301      	adds	r3, #1
 800a580:	b2db      	uxtb	r3, r3
 800a582:	b25a      	sxtb	r2, r3
 800a584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a586:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a58a:	2301      	movs	r3, #1
 800a58c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a58e:	e001      	b.n	800a594 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a590:	2300      	movs	r3, #0
 800a592:	637b      	str	r3, [r7, #52]	; 0x34
 800a594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a596:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a598:	693b      	ldr	r3, [r7, #16]
 800a59a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a59e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	3738      	adds	r7, #56	; 0x38
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}

0800a5a8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b08c      	sub	sp, #48	; 0x30
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	60f8      	str	r0, [r7, #12]
 800a5b0:	60b9      	str	r1, [r7, #8]
 800a5b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a5bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d10b      	bne.n	800a5da <xQueueReceive+0x32>
	__asm volatile
 800a5c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5c6:	b672      	cpsid	i
 800a5c8:	f383 8811 	msr	BASEPRI, r3
 800a5cc:	f3bf 8f6f 	isb	sy
 800a5d0:	f3bf 8f4f 	dsb	sy
 800a5d4:	b662      	cpsie	i
 800a5d6:	623b      	str	r3, [r7, #32]
 800a5d8:	e7fe      	b.n	800a5d8 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a5da:	68bb      	ldr	r3, [r7, #8]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d103      	bne.n	800a5e8 <xQueueReceive+0x40>
 800a5e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d101      	bne.n	800a5ec <xQueueReceive+0x44>
 800a5e8:	2301      	movs	r3, #1
 800a5ea:	e000      	b.n	800a5ee <xQueueReceive+0x46>
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d10b      	bne.n	800a60a <xQueueReceive+0x62>
 800a5f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5f6:	b672      	cpsid	i
 800a5f8:	f383 8811 	msr	BASEPRI, r3
 800a5fc:	f3bf 8f6f 	isb	sy
 800a600:	f3bf 8f4f 	dsb	sy
 800a604:	b662      	cpsie	i
 800a606:	61fb      	str	r3, [r7, #28]
 800a608:	e7fe      	b.n	800a608 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a60a:	f001 fa0d 	bl	800ba28 <xTaskGetSchedulerState>
 800a60e:	4603      	mov	r3, r0
 800a610:	2b00      	cmp	r3, #0
 800a612:	d102      	bne.n	800a61a <xQueueReceive+0x72>
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d101      	bne.n	800a61e <xQueueReceive+0x76>
 800a61a:	2301      	movs	r3, #1
 800a61c:	e000      	b.n	800a620 <xQueueReceive+0x78>
 800a61e:	2300      	movs	r3, #0
 800a620:	2b00      	cmp	r3, #0
 800a622:	d10b      	bne.n	800a63c <xQueueReceive+0x94>
 800a624:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a628:	b672      	cpsid	i
 800a62a:	f383 8811 	msr	BASEPRI, r3
 800a62e:	f3bf 8f6f 	isb	sy
 800a632:	f3bf 8f4f 	dsb	sy
 800a636:	b662      	cpsie	i
 800a638:	61bb      	str	r3, [r7, #24]
 800a63a:	e7fe      	b.n	800a63a <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a63c:	f002 f834 	bl	800c6a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a644:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d01f      	beq.n	800a68c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a64c:	68b9      	ldr	r1, [r7, #8]
 800a64e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a650:	f000 fa1e 	bl	800aa90 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a656:	1e5a      	subs	r2, r3, #1
 800a658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a65a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a65e:	691b      	ldr	r3, [r3, #16]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d00f      	beq.n	800a684 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a666:	3310      	adds	r3, #16
 800a668:	4618      	mov	r0, r3
 800a66a:	f001 f80f 	bl	800b68c <xTaskRemoveFromEventList>
 800a66e:	4603      	mov	r3, r0
 800a670:	2b00      	cmp	r3, #0
 800a672:	d007      	beq.n	800a684 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a674:	4b3c      	ldr	r3, [pc, #240]	; (800a768 <xQueueReceive+0x1c0>)
 800a676:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a67a:	601a      	str	r2, [r3, #0]
 800a67c:	f3bf 8f4f 	dsb	sy
 800a680:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a684:	f002 f842 	bl	800c70c <vPortExitCritical>
				return pdPASS;
 800a688:	2301      	movs	r3, #1
 800a68a:	e069      	b.n	800a760 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d103      	bne.n	800a69a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a692:	f002 f83b 	bl	800c70c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a696:	2300      	movs	r3, #0
 800a698:	e062      	b.n	800a760 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a69a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d106      	bne.n	800a6ae <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a6a0:	f107 0310 	add.w	r3, r7, #16
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	f001 f855 	bl	800b754 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a6ae:	f002 f82d 	bl	800c70c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a6b2:	f000 fdb3 	bl	800b21c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a6b6:	f001 fff7 	bl	800c6a8 <vPortEnterCritical>
 800a6ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a6c0:	b25b      	sxtb	r3, r3
 800a6c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6c6:	d103      	bne.n	800a6d0 <xQueueReceive+0x128>
 800a6c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a6d6:	b25b      	sxtb	r3, r3
 800a6d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6dc:	d103      	bne.n	800a6e6 <xQueueReceive+0x13e>
 800a6de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a6e6:	f002 f811 	bl	800c70c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a6ea:	1d3a      	adds	r2, r7, #4
 800a6ec:	f107 0310 	add.w	r3, r7, #16
 800a6f0:	4611      	mov	r1, r2
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	f001 f844 	bl	800b780 <xTaskCheckForTimeOut>
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d123      	bne.n	800a746 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a6fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a700:	f000 fa3e 	bl	800ab80 <prvIsQueueEmpty>
 800a704:	4603      	mov	r3, r0
 800a706:	2b00      	cmp	r3, #0
 800a708:	d017      	beq.n	800a73a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a70a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a70c:	3324      	adds	r3, #36	; 0x24
 800a70e:	687a      	ldr	r2, [r7, #4]
 800a710:	4611      	mov	r1, r2
 800a712:	4618      	mov	r0, r3
 800a714:	f000 ff68 	bl	800b5e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a718:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a71a:	f000 f9df 	bl	800aadc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a71e:	f000 fd8b 	bl	800b238 <xTaskResumeAll>
 800a722:	4603      	mov	r3, r0
 800a724:	2b00      	cmp	r3, #0
 800a726:	d189      	bne.n	800a63c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a728:	4b0f      	ldr	r3, [pc, #60]	; (800a768 <xQueueReceive+0x1c0>)
 800a72a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a72e:	601a      	str	r2, [r3, #0]
 800a730:	f3bf 8f4f 	dsb	sy
 800a734:	f3bf 8f6f 	isb	sy
 800a738:	e780      	b.n	800a63c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a73a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a73c:	f000 f9ce 	bl	800aadc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a740:	f000 fd7a 	bl	800b238 <xTaskResumeAll>
 800a744:	e77a      	b.n	800a63c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a746:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a748:	f000 f9c8 	bl	800aadc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a74c:	f000 fd74 	bl	800b238 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a750:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a752:	f000 fa15 	bl	800ab80 <prvIsQueueEmpty>
 800a756:	4603      	mov	r3, r0
 800a758:	2b00      	cmp	r3, #0
 800a75a:	f43f af6f 	beq.w	800a63c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a75e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a760:	4618      	mov	r0, r3
 800a762:	3730      	adds	r7, #48	; 0x30
 800a764:	46bd      	mov	sp, r7
 800a766:	bd80      	pop	{r7, pc}
 800a768:	e000ed04 	.word	0xe000ed04

0800a76c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b08e      	sub	sp, #56	; 0x38
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
 800a774:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a776:	2300      	movs	r3, #0
 800a778:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a77e:	2300      	movs	r3, #0
 800a780:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a784:	2b00      	cmp	r3, #0
 800a786:	d10b      	bne.n	800a7a0 <xQueueSemaphoreTake+0x34>
 800a788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a78c:	b672      	cpsid	i
 800a78e:	f383 8811 	msr	BASEPRI, r3
 800a792:	f3bf 8f6f 	isb	sy
 800a796:	f3bf 8f4f 	dsb	sy
 800a79a:	b662      	cpsie	i
 800a79c:	623b      	str	r3, [r7, #32]
 800a79e:	e7fe      	b.n	800a79e <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a7a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d00b      	beq.n	800a7c0 <xQueueSemaphoreTake+0x54>
 800a7a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ac:	b672      	cpsid	i
 800a7ae:	f383 8811 	msr	BASEPRI, r3
 800a7b2:	f3bf 8f6f 	isb	sy
 800a7b6:	f3bf 8f4f 	dsb	sy
 800a7ba:	b662      	cpsie	i
 800a7bc:	61fb      	str	r3, [r7, #28]
 800a7be:	e7fe      	b.n	800a7be <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a7c0:	f001 f932 	bl	800ba28 <xTaskGetSchedulerState>
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d102      	bne.n	800a7d0 <xQueueSemaphoreTake+0x64>
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d101      	bne.n	800a7d4 <xQueueSemaphoreTake+0x68>
 800a7d0:	2301      	movs	r3, #1
 800a7d2:	e000      	b.n	800a7d6 <xQueueSemaphoreTake+0x6a>
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d10b      	bne.n	800a7f2 <xQueueSemaphoreTake+0x86>
 800a7da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7de:	b672      	cpsid	i
 800a7e0:	f383 8811 	msr	BASEPRI, r3
 800a7e4:	f3bf 8f6f 	isb	sy
 800a7e8:	f3bf 8f4f 	dsb	sy
 800a7ec:	b662      	cpsie	i
 800a7ee:	61bb      	str	r3, [r7, #24]
 800a7f0:	e7fe      	b.n	800a7f0 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a7f2:	f001 ff59 	bl	800c6a8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a7f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7fa:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a7fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d024      	beq.n	800a84c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a804:	1e5a      	subs	r2, r3, #1
 800a806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a808:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a80a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d104      	bne.n	800a81c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a812:	f001 fa83 	bl	800bd1c <pvTaskIncrementMutexHeldCount>
 800a816:	4602      	mov	r2, r0
 800a818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a81a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a81c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a81e:	691b      	ldr	r3, [r3, #16]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d00f      	beq.n	800a844 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a826:	3310      	adds	r3, #16
 800a828:	4618      	mov	r0, r3
 800a82a:	f000 ff2f 	bl	800b68c <xTaskRemoveFromEventList>
 800a82e:	4603      	mov	r3, r0
 800a830:	2b00      	cmp	r3, #0
 800a832:	d007      	beq.n	800a844 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a834:	4b54      	ldr	r3, [pc, #336]	; (800a988 <xQueueSemaphoreTake+0x21c>)
 800a836:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a83a:	601a      	str	r2, [r3, #0]
 800a83c:	f3bf 8f4f 	dsb	sy
 800a840:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a844:	f001 ff62 	bl	800c70c <vPortExitCritical>
				return pdPASS;
 800a848:	2301      	movs	r3, #1
 800a84a:	e098      	b.n	800a97e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d112      	bne.n	800a878 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a854:	2b00      	cmp	r3, #0
 800a856:	d00b      	beq.n	800a870 <xQueueSemaphoreTake+0x104>
 800a858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a85c:	b672      	cpsid	i
 800a85e:	f383 8811 	msr	BASEPRI, r3
 800a862:	f3bf 8f6f 	isb	sy
 800a866:	f3bf 8f4f 	dsb	sy
 800a86a:	b662      	cpsie	i
 800a86c:	617b      	str	r3, [r7, #20]
 800a86e:	e7fe      	b.n	800a86e <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a870:	f001 ff4c 	bl	800c70c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a874:	2300      	movs	r3, #0
 800a876:	e082      	b.n	800a97e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d106      	bne.n	800a88c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a87e:	f107 030c 	add.w	r3, r7, #12
 800a882:	4618      	mov	r0, r3
 800a884:	f000 ff66 	bl	800b754 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a888:	2301      	movs	r3, #1
 800a88a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a88c:	f001 ff3e 	bl	800c70c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a890:	f000 fcc4 	bl	800b21c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a894:	f001 ff08 	bl	800c6a8 <vPortEnterCritical>
 800a898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a89a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a89e:	b25b      	sxtb	r3, r3
 800a8a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8a4:	d103      	bne.n	800a8ae <xQueueSemaphoreTake+0x142>
 800a8a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a8ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a8b4:	b25b      	sxtb	r3, r3
 800a8b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8ba:	d103      	bne.n	800a8c4 <xQueueSemaphoreTake+0x158>
 800a8bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8be:	2200      	movs	r2, #0
 800a8c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a8c4:	f001 ff22 	bl	800c70c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a8c8:	463a      	mov	r2, r7
 800a8ca:	f107 030c 	add.w	r3, r7, #12
 800a8ce:	4611      	mov	r1, r2
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	f000 ff55 	bl	800b780 <xTaskCheckForTimeOut>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d132      	bne.n	800a942 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a8dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a8de:	f000 f94f 	bl	800ab80 <prvIsQueueEmpty>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d026      	beq.n	800a936 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a8e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d109      	bne.n	800a904 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800a8f0:	f001 feda 	bl	800c6a8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a8f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8f6:	689b      	ldr	r3, [r3, #8]
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	f001 f8b3 	bl	800ba64 <xTaskPriorityInherit>
 800a8fe:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a900:	f001 ff04 	bl	800c70c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a906:	3324      	adds	r3, #36	; 0x24
 800a908:	683a      	ldr	r2, [r7, #0]
 800a90a:	4611      	mov	r1, r2
 800a90c:	4618      	mov	r0, r3
 800a90e:	f000 fe6b 	bl	800b5e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a912:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a914:	f000 f8e2 	bl	800aadc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a918:	f000 fc8e 	bl	800b238 <xTaskResumeAll>
 800a91c:	4603      	mov	r3, r0
 800a91e:	2b00      	cmp	r3, #0
 800a920:	f47f af67 	bne.w	800a7f2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800a924:	4b18      	ldr	r3, [pc, #96]	; (800a988 <xQueueSemaphoreTake+0x21c>)
 800a926:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a92a:	601a      	str	r2, [r3, #0]
 800a92c:	f3bf 8f4f 	dsb	sy
 800a930:	f3bf 8f6f 	isb	sy
 800a934:	e75d      	b.n	800a7f2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a936:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a938:	f000 f8d0 	bl	800aadc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a93c:	f000 fc7c 	bl	800b238 <xTaskResumeAll>
 800a940:	e757      	b.n	800a7f2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a942:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a944:	f000 f8ca 	bl	800aadc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a948:	f000 fc76 	bl	800b238 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a94c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a94e:	f000 f917 	bl	800ab80 <prvIsQueueEmpty>
 800a952:	4603      	mov	r3, r0
 800a954:	2b00      	cmp	r3, #0
 800a956:	f43f af4c 	beq.w	800a7f2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a95a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d00d      	beq.n	800a97c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800a960:	f001 fea2 	bl	800c6a8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a964:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a966:	f000 f811 	bl	800a98c <prvGetDisinheritPriorityAfterTimeout>
 800a96a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a96c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a96e:	689b      	ldr	r3, [r3, #8]
 800a970:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a972:	4618      	mov	r0, r3
 800a974:	f001 f94e 	bl	800bc14 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a978:	f001 fec8 	bl	800c70c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a97c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a97e:	4618      	mov	r0, r3
 800a980:	3738      	adds	r7, #56	; 0x38
 800a982:	46bd      	mov	sp, r7
 800a984:	bd80      	pop	{r7, pc}
 800a986:	bf00      	nop
 800a988:	e000ed04 	.word	0xe000ed04

0800a98c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a98c:	b480      	push	{r7}
 800a98e:	b085      	sub	sp, #20
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d006      	beq.n	800a9aa <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800a9a6:	60fb      	str	r3, [r7, #12]
 800a9a8:	e001      	b.n	800a9ae <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
	}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	3714      	adds	r7, #20
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ba:	4770      	bx	lr

0800a9bc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b086      	sub	sp, #24
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	60f8      	str	r0, [r7, #12]
 800a9c4:	60b9      	str	r1, [r7, #8]
 800a9c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9d0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d10d      	bne.n	800a9f6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d14d      	bne.n	800aa7e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	689b      	ldr	r3, [r3, #8]
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	f001 f8a4 	bl	800bb34 <xTaskPriorityDisinherit>
 800a9ec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	609a      	str	r2, [r3, #8]
 800a9f4:	e043      	b.n	800aa7e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d119      	bne.n	800aa30 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	6858      	ldr	r0, [r3, #4]
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa04:	461a      	mov	r2, r3
 800aa06:	68b9      	ldr	r1, [r7, #8]
 800aa08:	f002 fef2 	bl	800d7f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	685a      	ldr	r2, [r3, #4]
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa14:	441a      	add	r2, r3
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	685a      	ldr	r2, [r3, #4]
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	689b      	ldr	r3, [r3, #8]
 800aa22:	429a      	cmp	r2, r3
 800aa24:	d32b      	bcc.n	800aa7e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	681a      	ldr	r2, [r3, #0]
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	605a      	str	r2, [r3, #4]
 800aa2e:	e026      	b.n	800aa7e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	68d8      	ldr	r0, [r3, #12]
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa38:	461a      	mov	r2, r3
 800aa3a:	68b9      	ldr	r1, [r7, #8]
 800aa3c:	f002 fed8 	bl	800d7f0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	68da      	ldr	r2, [r3, #12]
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa48:	425b      	negs	r3, r3
 800aa4a:	441a      	add	r2, r3
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	68da      	ldr	r2, [r3, #12]
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	429a      	cmp	r2, r3
 800aa5a:	d207      	bcs.n	800aa6c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	689a      	ldr	r2, [r3, #8]
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa64:	425b      	negs	r3, r3
 800aa66:	441a      	add	r2, r3
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2b02      	cmp	r3, #2
 800aa70:	d105      	bne.n	800aa7e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aa72:	693b      	ldr	r3, [r7, #16]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d002      	beq.n	800aa7e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800aa78:	693b      	ldr	r3, [r7, #16]
 800aa7a:	3b01      	subs	r3, #1
 800aa7c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	1c5a      	adds	r2, r3, #1
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800aa86:	697b      	ldr	r3, [r7, #20]
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	3718      	adds	r7, #24
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bd80      	pop	{r7, pc}

0800aa90 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b082      	sub	sp, #8
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
 800aa98:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d018      	beq.n	800aad4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	68da      	ldr	r2, [r3, #12]
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaaa:	441a      	add	r2, r3
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	68da      	ldr	r2, [r3, #12]
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	689b      	ldr	r3, [r3, #8]
 800aab8:	429a      	cmp	r2, r3
 800aaba:	d303      	bcc.n	800aac4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681a      	ldr	r2, [r3, #0]
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	68d9      	ldr	r1, [r3, #12]
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aacc:	461a      	mov	r2, r3
 800aace:	6838      	ldr	r0, [r7, #0]
 800aad0:	f002 fe8e 	bl	800d7f0 <memcpy>
	}
}
 800aad4:	bf00      	nop
 800aad6:	3708      	adds	r7, #8
 800aad8:	46bd      	mov	sp, r7
 800aada:	bd80      	pop	{r7, pc}

0800aadc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b084      	sub	sp, #16
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800aae4:	f001 fde0 	bl	800c6a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aaee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aaf0:	e011      	b.n	800ab16 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d012      	beq.n	800ab20 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	3324      	adds	r3, #36	; 0x24
 800aafe:	4618      	mov	r0, r3
 800ab00:	f000 fdc4 	bl	800b68c <xTaskRemoveFromEventList>
 800ab04:	4603      	mov	r3, r0
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d001      	beq.n	800ab0e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ab0a:	f000 fe9d 	bl	800b848 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ab0e:	7bfb      	ldrb	r3, [r7, #15]
 800ab10:	3b01      	subs	r3, #1
 800ab12:	b2db      	uxtb	r3, r3
 800ab14:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ab16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	dce9      	bgt.n	800aaf2 <prvUnlockQueue+0x16>
 800ab1e:	e000      	b.n	800ab22 <prvUnlockQueue+0x46>
					break;
 800ab20:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	22ff      	movs	r2, #255	; 0xff
 800ab26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ab2a:	f001 fdef 	bl	800c70c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ab2e:	f001 fdbb 	bl	800c6a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ab38:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ab3a:	e011      	b.n	800ab60 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	691b      	ldr	r3, [r3, #16]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d012      	beq.n	800ab6a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	3310      	adds	r3, #16
 800ab48:	4618      	mov	r0, r3
 800ab4a:	f000 fd9f 	bl	800b68c <xTaskRemoveFromEventList>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d001      	beq.n	800ab58 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ab54:	f000 fe78 	bl	800b848 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ab58:	7bbb      	ldrb	r3, [r7, #14]
 800ab5a:	3b01      	subs	r3, #1
 800ab5c:	b2db      	uxtb	r3, r3
 800ab5e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ab60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	dce9      	bgt.n	800ab3c <prvUnlockQueue+0x60>
 800ab68:	e000      	b.n	800ab6c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ab6a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	22ff      	movs	r2, #255	; 0xff
 800ab70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ab74:	f001 fdca 	bl	800c70c <vPortExitCritical>
}
 800ab78:	bf00      	nop
 800ab7a:	3710      	adds	r7, #16
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}

0800ab80 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b084      	sub	sp, #16
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ab88:	f001 fd8e 	bl	800c6a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d102      	bne.n	800ab9a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ab94:	2301      	movs	r3, #1
 800ab96:	60fb      	str	r3, [r7, #12]
 800ab98:	e001      	b.n	800ab9e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ab9e:	f001 fdb5 	bl	800c70c <vPortExitCritical>

	return xReturn;
 800aba2:	68fb      	ldr	r3, [r7, #12]
}
 800aba4:	4618      	mov	r0, r3
 800aba6:	3710      	adds	r7, #16
 800aba8:	46bd      	mov	sp, r7
 800abaa:	bd80      	pop	{r7, pc}

0800abac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b084      	sub	sp, #16
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800abb4:	f001 fd78 	bl	800c6a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abc0:	429a      	cmp	r2, r3
 800abc2:	d102      	bne.n	800abca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800abc4:	2301      	movs	r3, #1
 800abc6:	60fb      	str	r3, [r7, #12]
 800abc8:	e001      	b.n	800abce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800abca:	2300      	movs	r3, #0
 800abcc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800abce:	f001 fd9d 	bl	800c70c <vPortExitCritical>

	return xReturn;
 800abd2:	68fb      	ldr	r3, [r7, #12]
}
 800abd4:	4618      	mov	r0, r3
 800abd6:	3710      	adds	r7, #16
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd80      	pop	{r7, pc}

0800abdc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800abdc:	b480      	push	{r7}
 800abde:	b085      	sub	sp, #20
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
 800abe4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800abe6:	2300      	movs	r3, #0
 800abe8:	60fb      	str	r3, [r7, #12]
 800abea:	e014      	b.n	800ac16 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800abec:	4a0e      	ldr	r2, [pc, #56]	; (800ac28 <vQueueAddToRegistry+0x4c>)
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d10b      	bne.n	800ac10 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800abf8:	490b      	ldr	r1, [pc, #44]	; (800ac28 <vQueueAddToRegistry+0x4c>)
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	683a      	ldr	r2, [r7, #0]
 800abfe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ac02:	4a09      	ldr	r2, [pc, #36]	; (800ac28 <vQueueAddToRegistry+0x4c>)
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	00db      	lsls	r3, r3, #3
 800ac08:	4413      	add	r3, r2
 800ac0a:	687a      	ldr	r2, [r7, #4]
 800ac0c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ac0e:	e005      	b.n	800ac1c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	3301      	adds	r3, #1
 800ac14:	60fb      	str	r3, [r7, #12]
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	2b07      	cmp	r3, #7
 800ac1a:	d9e7      	bls.n	800abec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ac1c:	bf00      	nop
 800ac1e:	3714      	adds	r7, #20
 800ac20:	46bd      	mov	sp, r7
 800ac22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac26:	4770      	bx	lr
 800ac28:	20006828 	.word	0x20006828

0800ac2c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b086      	sub	sp, #24
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	60f8      	str	r0, [r7, #12]
 800ac34:	60b9      	str	r1, [r7, #8]
 800ac36:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ac3c:	f001 fd34 	bl	800c6a8 <vPortEnterCritical>
 800ac40:	697b      	ldr	r3, [r7, #20]
 800ac42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ac46:	b25b      	sxtb	r3, r3
 800ac48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac4c:	d103      	bne.n	800ac56 <vQueueWaitForMessageRestricted+0x2a>
 800ac4e:	697b      	ldr	r3, [r7, #20]
 800ac50:	2200      	movs	r2, #0
 800ac52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ac56:	697b      	ldr	r3, [r7, #20]
 800ac58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac5c:	b25b      	sxtb	r3, r3
 800ac5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac62:	d103      	bne.n	800ac6c <vQueueWaitForMessageRestricted+0x40>
 800ac64:	697b      	ldr	r3, [r7, #20]
 800ac66:	2200      	movs	r2, #0
 800ac68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ac6c:	f001 fd4e 	bl	800c70c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ac70:	697b      	ldr	r3, [r7, #20]
 800ac72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d106      	bne.n	800ac86 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ac78:	697b      	ldr	r3, [r7, #20]
 800ac7a:	3324      	adds	r3, #36	; 0x24
 800ac7c:	687a      	ldr	r2, [r7, #4]
 800ac7e:	68b9      	ldr	r1, [r7, #8]
 800ac80:	4618      	mov	r0, r3
 800ac82:	f000 fcd7 	bl	800b634 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ac86:	6978      	ldr	r0, [r7, #20]
 800ac88:	f7ff ff28 	bl	800aadc <prvUnlockQueue>
	}
 800ac8c:	bf00      	nop
 800ac8e:	3718      	adds	r7, #24
 800ac90:	46bd      	mov	sp, r7
 800ac92:	bd80      	pop	{r7, pc}

0800ac94 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b08e      	sub	sp, #56	; 0x38
 800ac98:	af04      	add	r7, sp, #16
 800ac9a:	60f8      	str	r0, [r7, #12]
 800ac9c:	60b9      	str	r1, [r7, #8]
 800ac9e:	607a      	str	r2, [r7, #4]
 800aca0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800aca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d10b      	bne.n	800acc0 <xTaskCreateStatic+0x2c>
 800aca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acac:	b672      	cpsid	i
 800acae:	f383 8811 	msr	BASEPRI, r3
 800acb2:	f3bf 8f6f 	isb	sy
 800acb6:	f3bf 8f4f 	dsb	sy
 800acba:	b662      	cpsie	i
 800acbc:	623b      	str	r3, [r7, #32]
 800acbe:	e7fe      	b.n	800acbe <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 800acc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d10b      	bne.n	800acde <xTaskCreateStatic+0x4a>
 800acc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acca:	b672      	cpsid	i
 800accc:	f383 8811 	msr	BASEPRI, r3
 800acd0:	f3bf 8f6f 	isb	sy
 800acd4:	f3bf 8f4f 	dsb	sy
 800acd8:	b662      	cpsie	i
 800acda:	61fb      	str	r3, [r7, #28]
 800acdc:	e7fe      	b.n	800acdc <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800acde:	235c      	movs	r3, #92	; 0x5c
 800ace0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ace2:	693b      	ldr	r3, [r7, #16]
 800ace4:	2b5c      	cmp	r3, #92	; 0x5c
 800ace6:	d00b      	beq.n	800ad00 <xTaskCreateStatic+0x6c>
 800ace8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acec:	b672      	cpsid	i
 800acee:	f383 8811 	msr	BASEPRI, r3
 800acf2:	f3bf 8f6f 	isb	sy
 800acf6:	f3bf 8f4f 	dsb	sy
 800acfa:	b662      	cpsie	i
 800acfc:	61bb      	str	r3, [r7, #24]
 800acfe:	e7fe      	b.n	800acfe <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ad00:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ad02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d01e      	beq.n	800ad46 <xTaskCreateStatic+0xb2>
 800ad08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d01b      	beq.n	800ad46 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ad0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad10:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ad12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad16:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ad18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad1a:	2202      	movs	r2, #2
 800ad1c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ad20:	2300      	movs	r3, #0
 800ad22:	9303      	str	r3, [sp, #12]
 800ad24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad26:	9302      	str	r3, [sp, #8]
 800ad28:	f107 0314 	add.w	r3, r7, #20
 800ad2c:	9301      	str	r3, [sp, #4]
 800ad2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad30:	9300      	str	r3, [sp, #0]
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	687a      	ldr	r2, [r7, #4]
 800ad36:	68b9      	ldr	r1, [r7, #8]
 800ad38:	68f8      	ldr	r0, [r7, #12]
 800ad3a:	f000 f850 	bl	800adde <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ad3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ad40:	f000 f8de 	bl	800af00 <prvAddNewTaskToReadyList>
 800ad44:	e001      	b.n	800ad4a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800ad46:	2300      	movs	r3, #0
 800ad48:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ad4a:	697b      	ldr	r3, [r7, #20]
	}
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	3728      	adds	r7, #40	; 0x28
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bd80      	pop	{r7, pc}

0800ad54 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b08c      	sub	sp, #48	; 0x30
 800ad58:	af04      	add	r7, sp, #16
 800ad5a:	60f8      	str	r0, [r7, #12]
 800ad5c:	60b9      	str	r1, [r7, #8]
 800ad5e:	603b      	str	r3, [r7, #0]
 800ad60:	4613      	mov	r3, r2
 800ad62:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ad64:	88fb      	ldrh	r3, [r7, #6]
 800ad66:	009b      	lsls	r3, r3, #2
 800ad68:	4618      	mov	r0, r3
 800ad6a:	f001 fdbf 	bl	800c8ec <pvPortMalloc>
 800ad6e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ad70:	697b      	ldr	r3, [r7, #20]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d00e      	beq.n	800ad94 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ad76:	205c      	movs	r0, #92	; 0x5c
 800ad78:	f001 fdb8 	bl	800c8ec <pvPortMalloc>
 800ad7c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ad7e:	69fb      	ldr	r3, [r7, #28]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d003      	beq.n	800ad8c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ad84:	69fb      	ldr	r3, [r7, #28]
 800ad86:	697a      	ldr	r2, [r7, #20]
 800ad88:	631a      	str	r2, [r3, #48]	; 0x30
 800ad8a:	e005      	b.n	800ad98 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ad8c:	6978      	ldr	r0, [r7, #20]
 800ad8e:	f001 fe75 	bl	800ca7c <vPortFree>
 800ad92:	e001      	b.n	800ad98 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ad94:	2300      	movs	r3, #0
 800ad96:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ad98:	69fb      	ldr	r3, [r7, #28]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d017      	beq.n	800adce <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ad9e:	69fb      	ldr	r3, [r7, #28]
 800ada0:	2200      	movs	r2, #0
 800ada2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ada6:	88fa      	ldrh	r2, [r7, #6]
 800ada8:	2300      	movs	r3, #0
 800adaa:	9303      	str	r3, [sp, #12]
 800adac:	69fb      	ldr	r3, [r7, #28]
 800adae:	9302      	str	r3, [sp, #8]
 800adb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adb2:	9301      	str	r3, [sp, #4]
 800adb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adb6:	9300      	str	r3, [sp, #0]
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	68b9      	ldr	r1, [r7, #8]
 800adbc:	68f8      	ldr	r0, [r7, #12]
 800adbe:	f000 f80e 	bl	800adde <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800adc2:	69f8      	ldr	r0, [r7, #28]
 800adc4:	f000 f89c 	bl	800af00 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800adc8:	2301      	movs	r3, #1
 800adca:	61bb      	str	r3, [r7, #24]
 800adcc:	e002      	b.n	800add4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800adce:	f04f 33ff 	mov.w	r3, #4294967295
 800add2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800add4:	69bb      	ldr	r3, [r7, #24]
	}
 800add6:	4618      	mov	r0, r3
 800add8:	3720      	adds	r7, #32
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}

0800adde <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800adde:	b580      	push	{r7, lr}
 800ade0:	b088      	sub	sp, #32
 800ade2:	af00      	add	r7, sp, #0
 800ade4:	60f8      	str	r0, [r7, #12]
 800ade6:	60b9      	str	r1, [r7, #8]
 800ade8:	607a      	str	r2, [r7, #4]
 800adea:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800adec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adee:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	009b      	lsls	r3, r3, #2
 800adf4:	461a      	mov	r2, r3
 800adf6:	21a5      	movs	r1, #165	; 0xa5
 800adf8:	f002 fd05 	bl	800d806 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800adfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae00:	6879      	ldr	r1, [r7, #4]
 800ae02:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800ae06:	440b      	add	r3, r1
 800ae08:	009b      	lsls	r3, r3, #2
 800ae0a:	4413      	add	r3, r2
 800ae0c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ae0e:	69bb      	ldr	r3, [r7, #24]
 800ae10:	f023 0307 	bic.w	r3, r3, #7
 800ae14:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ae16:	69bb      	ldr	r3, [r7, #24]
 800ae18:	f003 0307 	and.w	r3, r3, #7
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d00b      	beq.n	800ae38 <prvInitialiseNewTask+0x5a>
 800ae20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae24:	b672      	cpsid	i
 800ae26:	f383 8811 	msr	BASEPRI, r3
 800ae2a:	f3bf 8f6f 	isb	sy
 800ae2e:	f3bf 8f4f 	dsb	sy
 800ae32:	b662      	cpsie	i
 800ae34:	617b      	str	r3, [r7, #20]
 800ae36:	e7fe      	b.n	800ae36 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d01f      	beq.n	800ae7e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ae3e:	2300      	movs	r3, #0
 800ae40:	61fb      	str	r3, [r7, #28]
 800ae42:	e012      	b.n	800ae6a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ae44:	68ba      	ldr	r2, [r7, #8]
 800ae46:	69fb      	ldr	r3, [r7, #28]
 800ae48:	4413      	add	r3, r2
 800ae4a:	7819      	ldrb	r1, [r3, #0]
 800ae4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae4e:	69fb      	ldr	r3, [r7, #28]
 800ae50:	4413      	add	r3, r2
 800ae52:	3334      	adds	r3, #52	; 0x34
 800ae54:	460a      	mov	r2, r1
 800ae56:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ae58:	68ba      	ldr	r2, [r7, #8]
 800ae5a:	69fb      	ldr	r3, [r7, #28]
 800ae5c:	4413      	add	r3, r2
 800ae5e:	781b      	ldrb	r3, [r3, #0]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d006      	beq.n	800ae72 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ae64:	69fb      	ldr	r3, [r7, #28]
 800ae66:	3301      	adds	r3, #1
 800ae68:	61fb      	str	r3, [r7, #28]
 800ae6a:	69fb      	ldr	r3, [r7, #28]
 800ae6c:	2b0f      	cmp	r3, #15
 800ae6e:	d9e9      	bls.n	800ae44 <prvInitialiseNewTask+0x66>
 800ae70:	e000      	b.n	800ae74 <prvInitialiseNewTask+0x96>
			{
				break;
 800ae72:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ae74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae76:	2200      	movs	r2, #0
 800ae78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ae7c:	e003      	b.n	800ae86 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ae7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae80:	2200      	movs	r2, #0
 800ae82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ae86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae88:	2b37      	cmp	r3, #55	; 0x37
 800ae8a:	d901      	bls.n	800ae90 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ae8c:	2337      	movs	r3, #55	; 0x37
 800ae8e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ae90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae94:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ae96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae9a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ae9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae9e:	2200      	movs	r2, #0
 800aea0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800aea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aea4:	3304      	adds	r3, #4
 800aea6:	4618      	mov	r0, r3
 800aea8:	f7fe ff48 	bl	8009d3c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800aeac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeae:	3318      	adds	r3, #24
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	f7fe ff43 	bl	8009d3c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800aeb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aeba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aebe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800aec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aec4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800aec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aec8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aeca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800aecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aece:	2200      	movs	r2, #0
 800aed0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800aed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aed4:	2200      	movs	r2, #0
 800aed6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800aeda:	683a      	ldr	r2, [r7, #0]
 800aedc:	68f9      	ldr	r1, [r7, #12]
 800aede:	69b8      	ldr	r0, [r7, #24]
 800aee0:	f001 fad8 	bl	800c494 <pxPortInitialiseStack>
 800aee4:	4602      	mov	r2, r0
 800aee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aee8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800aeea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d002      	beq.n	800aef6 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800aef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aef2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aef4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aef6:	bf00      	nop
 800aef8:	3720      	adds	r7, #32
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}
	...

0800af00 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b082      	sub	sp, #8
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800af08:	f001 fbce 	bl	800c6a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800af0c:	4b2d      	ldr	r3, [pc, #180]	; (800afc4 <prvAddNewTaskToReadyList+0xc4>)
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	3301      	adds	r3, #1
 800af12:	4a2c      	ldr	r2, [pc, #176]	; (800afc4 <prvAddNewTaskToReadyList+0xc4>)
 800af14:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800af16:	4b2c      	ldr	r3, [pc, #176]	; (800afc8 <prvAddNewTaskToReadyList+0xc8>)
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d109      	bne.n	800af32 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800af1e:	4a2a      	ldr	r2, [pc, #168]	; (800afc8 <prvAddNewTaskToReadyList+0xc8>)
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800af24:	4b27      	ldr	r3, [pc, #156]	; (800afc4 <prvAddNewTaskToReadyList+0xc4>)
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	2b01      	cmp	r3, #1
 800af2a:	d110      	bne.n	800af4e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800af2c:	f000 fcb0 	bl	800b890 <prvInitialiseTaskLists>
 800af30:	e00d      	b.n	800af4e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800af32:	4b26      	ldr	r3, [pc, #152]	; (800afcc <prvAddNewTaskToReadyList+0xcc>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d109      	bne.n	800af4e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800af3a:	4b23      	ldr	r3, [pc, #140]	; (800afc8 <prvAddNewTaskToReadyList+0xc8>)
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af44:	429a      	cmp	r2, r3
 800af46:	d802      	bhi.n	800af4e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800af48:	4a1f      	ldr	r2, [pc, #124]	; (800afc8 <prvAddNewTaskToReadyList+0xc8>)
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800af4e:	4b20      	ldr	r3, [pc, #128]	; (800afd0 <prvAddNewTaskToReadyList+0xd0>)
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	3301      	adds	r3, #1
 800af54:	4a1e      	ldr	r2, [pc, #120]	; (800afd0 <prvAddNewTaskToReadyList+0xd0>)
 800af56:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800af58:	4b1d      	ldr	r3, [pc, #116]	; (800afd0 <prvAddNewTaskToReadyList+0xd0>)
 800af5a:	681a      	ldr	r2, [r3, #0]
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af64:	4b1b      	ldr	r3, [pc, #108]	; (800afd4 <prvAddNewTaskToReadyList+0xd4>)
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	429a      	cmp	r2, r3
 800af6a:	d903      	bls.n	800af74 <prvAddNewTaskToReadyList+0x74>
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af70:	4a18      	ldr	r2, [pc, #96]	; (800afd4 <prvAddNewTaskToReadyList+0xd4>)
 800af72:	6013      	str	r3, [r2, #0]
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af78:	4613      	mov	r3, r2
 800af7a:	009b      	lsls	r3, r3, #2
 800af7c:	4413      	add	r3, r2
 800af7e:	009b      	lsls	r3, r3, #2
 800af80:	4a15      	ldr	r2, [pc, #84]	; (800afd8 <prvAddNewTaskToReadyList+0xd8>)
 800af82:	441a      	add	r2, r3
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	3304      	adds	r3, #4
 800af88:	4619      	mov	r1, r3
 800af8a:	4610      	mov	r0, r2
 800af8c:	f7fe fee3 	bl	8009d56 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800af90:	f001 fbbc 	bl	800c70c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800af94:	4b0d      	ldr	r3, [pc, #52]	; (800afcc <prvAddNewTaskToReadyList+0xcc>)
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d00e      	beq.n	800afba <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800af9c:	4b0a      	ldr	r3, [pc, #40]	; (800afc8 <prvAddNewTaskToReadyList+0xc8>)
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afa6:	429a      	cmp	r2, r3
 800afa8:	d207      	bcs.n	800afba <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800afaa:	4b0c      	ldr	r3, [pc, #48]	; (800afdc <prvAddNewTaskToReadyList+0xdc>)
 800afac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afb0:	601a      	str	r2, [r3, #0]
 800afb2:	f3bf 8f4f 	dsb	sy
 800afb6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800afba:	bf00      	nop
 800afbc:	3708      	adds	r7, #8
 800afbe:	46bd      	mov	sp, r7
 800afc0:	bd80      	pop	{r7, pc}
 800afc2:	bf00      	nop
 800afc4:	20000e50 	.word	0x20000e50
 800afc8:	2000097c 	.word	0x2000097c
 800afcc:	20000e5c 	.word	0x20000e5c
 800afd0:	20000e6c 	.word	0x20000e6c
 800afd4:	20000e58 	.word	0x20000e58
 800afd8:	20000980 	.word	0x20000980
 800afdc:	e000ed04 	.word	0xe000ed04

0800afe0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b08a      	sub	sp, #40	; 0x28
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
 800afe8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800afea:	2300      	movs	r3, #0
 800afec:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d10b      	bne.n	800b00c <vTaskDelayUntil+0x2c>
 800aff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aff8:	b672      	cpsid	i
 800affa:	f383 8811 	msr	BASEPRI, r3
 800affe:	f3bf 8f6f 	isb	sy
 800b002:	f3bf 8f4f 	dsb	sy
 800b006:	b662      	cpsie	i
 800b008:	617b      	str	r3, [r7, #20]
 800b00a:	e7fe      	b.n	800b00a <vTaskDelayUntil+0x2a>
		configASSERT( ( xTimeIncrement > 0U ) );
 800b00c:	683b      	ldr	r3, [r7, #0]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d10b      	bne.n	800b02a <vTaskDelayUntil+0x4a>
 800b012:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b016:	b672      	cpsid	i
 800b018:	f383 8811 	msr	BASEPRI, r3
 800b01c:	f3bf 8f6f 	isb	sy
 800b020:	f3bf 8f4f 	dsb	sy
 800b024:	b662      	cpsie	i
 800b026:	613b      	str	r3, [r7, #16]
 800b028:	e7fe      	b.n	800b028 <vTaskDelayUntil+0x48>
		configASSERT( uxSchedulerSuspended == 0 );
 800b02a:	4b2a      	ldr	r3, [pc, #168]	; (800b0d4 <vTaskDelayUntil+0xf4>)
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d00b      	beq.n	800b04a <vTaskDelayUntil+0x6a>
 800b032:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b036:	b672      	cpsid	i
 800b038:	f383 8811 	msr	BASEPRI, r3
 800b03c:	f3bf 8f6f 	isb	sy
 800b040:	f3bf 8f4f 	dsb	sy
 800b044:	b662      	cpsie	i
 800b046:	60fb      	str	r3, [r7, #12]
 800b048:	e7fe      	b.n	800b048 <vTaskDelayUntil+0x68>

		vTaskSuspendAll();
 800b04a:	f000 f8e7 	bl	800b21c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800b04e:	4b22      	ldr	r3, [pc, #136]	; (800b0d8 <vTaskDelayUntil+0xf8>)
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	683a      	ldr	r2, [r7, #0]
 800b05a:	4413      	add	r3, r2
 800b05c:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	6a3a      	ldr	r2, [r7, #32]
 800b064:	429a      	cmp	r2, r3
 800b066:	d20b      	bcs.n	800b080 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	69fa      	ldr	r2, [r7, #28]
 800b06e:	429a      	cmp	r2, r3
 800b070:	d211      	bcs.n	800b096 <vTaskDelayUntil+0xb6>
 800b072:	69fa      	ldr	r2, [r7, #28]
 800b074:	6a3b      	ldr	r3, [r7, #32]
 800b076:	429a      	cmp	r2, r3
 800b078:	d90d      	bls.n	800b096 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800b07a:	2301      	movs	r3, #1
 800b07c:	627b      	str	r3, [r7, #36]	; 0x24
 800b07e:	e00a      	b.n	800b096 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	69fa      	ldr	r2, [r7, #28]
 800b086:	429a      	cmp	r2, r3
 800b088:	d303      	bcc.n	800b092 <vTaskDelayUntil+0xb2>
 800b08a:	69fa      	ldr	r2, [r7, #28]
 800b08c:	6a3b      	ldr	r3, [r7, #32]
 800b08e:	429a      	cmp	r2, r3
 800b090:	d901      	bls.n	800b096 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800b092:	2301      	movs	r3, #1
 800b094:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	69fa      	ldr	r2, [r7, #28]
 800b09a:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800b09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d006      	beq.n	800b0b0 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800b0a2:	69fa      	ldr	r2, [r7, #28]
 800b0a4:	6a3b      	ldr	r3, [r7, #32]
 800b0a6:	1ad3      	subs	r3, r2, r3
 800b0a8:	2100      	movs	r1, #0
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	f000 fe4a 	bl	800bd44 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800b0b0:	f000 f8c2 	bl	800b238 <xTaskResumeAll>
 800b0b4:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b0b6:	69bb      	ldr	r3, [r7, #24]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d107      	bne.n	800b0cc <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 800b0bc:	4b07      	ldr	r3, [pc, #28]	; (800b0dc <vTaskDelayUntil+0xfc>)
 800b0be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0c2:	601a      	str	r2, [r3, #0]
 800b0c4:	f3bf 8f4f 	dsb	sy
 800b0c8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b0cc:	bf00      	nop
 800b0ce:	3728      	adds	r7, #40	; 0x28
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}
 800b0d4:	20000e78 	.word	0x20000e78
 800b0d8:	20000e54 	.word	0x20000e54
 800b0dc:	e000ed04 	.word	0xe000ed04

0800b0e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b084      	sub	sp, #16
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d018      	beq.n	800b124 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b0f2:	4b14      	ldr	r3, [pc, #80]	; (800b144 <vTaskDelay+0x64>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d00b      	beq.n	800b112 <vTaskDelay+0x32>
 800b0fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0fe:	b672      	cpsid	i
 800b100:	f383 8811 	msr	BASEPRI, r3
 800b104:	f3bf 8f6f 	isb	sy
 800b108:	f3bf 8f4f 	dsb	sy
 800b10c:	b662      	cpsie	i
 800b10e:	60bb      	str	r3, [r7, #8]
 800b110:	e7fe      	b.n	800b110 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800b112:	f000 f883 	bl	800b21c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b116:	2100      	movs	r1, #0
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	f000 fe13 	bl	800bd44 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b11e:	f000 f88b 	bl	800b238 <xTaskResumeAll>
 800b122:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d107      	bne.n	800b13a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b12a:	4b07      	ldr	r3, [pc, #28]	; (800b148 <vTaskDelay+0x68>)
 800b12c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b130:	601a      	str	r2, [r3, #0]
 800b132:	f3bf 8f4f 	dsb	sy
 800b136:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b13a:	bf00      	nop
 800b13c:	3710      	adds	r7, #16
 800b13e:	46bd      	mov	sp, r7
 800b140:	bd80      	pop	{r7, pc}
 800b142:	bf00      	nop
 800b144:	20000e78 	.word	0x20000e78
 800b148:	e000ed04 	.word	0xe000ed04

0800b14c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b08a      	sub	sp, #40	; 0x28
 800b150:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b152:	2300      	movs	r3, #0
 800b154:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b156:	2300      	movs	r3, #0
 800b158:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b15a:	463a      	mov	r2, r7
 800b15c:	1d39      	adds	r1, r7, #4
 800b15e:	f107 0308 	add.w	r3, r7, #8
 800b162:	4618      	mov	r0, r3
 800b164:	f7fe fd96 	bl	8009c94 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b168:	6839      	ldr	r1, [r7, #0]
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	68ba      	ldr	r2, [r7, #8]
 800b16e:	9202      	str	r2, [sp, #8]
 800b170:	9301      	str	r3, [sp, #4]
 800b172:	2300      	movs	r3, #0
 800b174:	9300      	str	r3, [sp, #0]
 800b176:	2300      	movs	r3, #0
 800b178:	460a      	mov	r2, r1
 800b17a:	4922      	ldr	r1, [pc, #136]	; (800b204 <vTaskStartScheduler+0xb8>)
 800b17c:	4822      	ldr	r0, [pc, #136]	; (800b208 <vTaskStartScheduler+0xbc>)
 800b17e:	f7ff fd89 	bl	800ac94 <xTaskCreateStatic>
 800b182:	4602      	mov	r2, r0
 800b184:	4b21      	ldr	r3, [pc, #132]	; (800b20c <vTaskStartScheduler+0xc0>)
 800b186:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b188:	4b20      	ldr	r3, [pc, #128]	; (800b20c <vTaskStartScheduler+0xc0>)
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d002      	beq.n	800b196 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b190:	2301      	movs	r3, #1
 800b192:	617b      	str	r3, [r7, #20]
 800b194:	e001      	b.n	800b19a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b196:	2300      	movs	r3, #0
 800b198:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b19a:	697b      	ldr	r3, [r7, #20]
 800b19c:	2b01      	cmp	r3, #1
 800b19e:	d102      	bne.n	800b1a6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b1a0:	f000 fe24 	bl	800bdec <xTimerCreateTimerTask>
 800b1a4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b1a6:	697b      	ldr	r3, [r7, #20]
 800b1a8:	2b01      	cmp	r3, #1
 800b1aa:	d117      	bne.n	800b1dc <vTaskStartScheduler+0x90>
 800b1ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1b0:	b672      	cpsid	i
 800b1b2:	f383 8811 	msr	BASEPRI, r3
 800b1b6:	f3bf 8f6f 	isb	sy
 800b1ba:	f3bf 8f4f 	dsb	sy
 800b1be:	b662      	cpsie	i
 800b1c0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b1c2:	4b13      	ldr	r3, [pc, #76]	; (800b210 <vTaskStartScheduler+0xc4>)
 800b1c4:	f04f 32ff 	mov.w	r2, #4294967295
 800b1c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b1ca:	4b12      	ldr	r3, [pc, #72]	; (800b214 <vTaskStartScheduler+0xc8>)
 800b1cc:	2201      	movs	r2, #1
 800b1ce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b1d0:	4b11      	ldr	r3, [pc, #68]	; (800b218 <vTaskStartScheduler+0xcc>)
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b1d6:	f001 f9eb 	bl	800c5b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b1da:	e00f      	b.n	800b1fc <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b1dc:	697b      	ldr	r3, [r7, #20]
 800b1de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1e2:	d10b      	bne.n	800b1fc <vTaskStartScheduler+0xb0>
 800b1e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1e8:	b672      	cpsid	i
 800b1ea:	f383 8811 	msr	BASEPRI, r3
 800b1ee:	f3bf 8f6f 	isb	sy
 800b1f2:	f3bf 8f4f 	dsb	sy
 800b1f6:	b662      	cpsie	i
 800b1f8:	60fb      	str	r3, [r7, #12]
 800b1fa:	e7fe      	b.n	800b1fa <vTaskStartScheduler+0xae>
}
 800b1fc:	bf00      	nop
 800b1fe:	3718      	adds	r7, #24
 800b200:	46bd      	mov	sp, r7
 800b202:	bd80      	pop	{r7, pc}
 800b204:	0800f2c0 	.word	0x0800f2c0
 800b208:	0800b861 	.word	0x0800b861
 800b20c:	20000e74 	.word	0x20000e74
 800b210:	20000e70 	.word	0x20000e70
 800b214:	20000e5c 	.word	0x20000e5c
 800b218:	20000e54 	.word	0x20000e54

0800b21c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b21c:	b480      	push	{r7}
 800b21e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b220:	4b04      	ldr	r3, [pc, #16]	; (800b234 <vTaskSuspendAll+0x18>)
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	3301      	adds	r3, #1
 800b226:	4a03      	ldr	r2, [pc, #12]	; (800b234 <vTaskSuspendAll+0x18>)
 800b228:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800b22a:	bf00      	nop
 800b22c:	46bd      	mov	sp, r7
 800b22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b232:	4770      	bx	lr
 800b234:	20000e78 	.word	0x20000e78

0800b238 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b084      	sub	sp, #16
 800b23c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b23e:	2300      	movs	r3, #0
 800b240:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b242:	2300      	movs	r3, #0
 800b244:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b246:	4b42      	ldr	r3, [pc, #264]	; (800b350 <xTaskResumeAll+0x118>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d10b      	bne.n	800b266 <xTaskResumeAll+0x2e>
 800b24e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b252:	b672      	cpsid	i
 800b254:	f383 8811 	msr	BASEPRI, r3
 800b258:	f3bf 8f6f 	isb	sy
 800b25c:	f3bf 8f4f 	dsb	sy
 800b260:	b662      	cpsie	i
 800b262:	603b      	str	r3, [r7, #0]
 800b264:	e7fe      	b.n	800b264 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b266:	f001 fa1f 	bl	800c6a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b26a:	4b39      	ldr	r3, [pc, #228]	; (800b350 <xTaskResumeAll+0x118>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	3b01      	subs	r3, #1
 800b270:	4a37      	ldr	r2, [pc, #220]	; (800b350 <xTaskResumeAll+0x118>)
 800b272:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b274:	4b36      	ldr	r3, [pc, #216]	; (800b350 <xTaskResumeAll+0x118>)
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d162      	bne.n	800b342 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b27c:	4b35      	ldr	r3, [pc, #212]	; (800b354 <xTaskResumeAll+0x11c>)
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d05e      	beq.n	800b342 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b284:	e02f      	b.n	800b2e6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b286:	4b34      	ldr	r3, [pc, #208]	; (800b358 <xTaskResumeAll+0x120>)
 800b288:	68db      	ldr	r3, [r3, #12]
 800b28a:	68db      	ldr	r3, [r3, #12]
 800b28c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	3318      	adds	r3, #24
 800b292:	4618      	mov	r0, r3
 800b294:	f7fe fdbc 	bl	8009e10 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	3304      	adds	r3, #4
 800b29c:	4618      	mov	r0, r3
 800b29e:	f7fe fdb7 	bl	8009e10 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2a6:	4b2d      	ldr	r3, [pc, #180]	; (800b35c <xTaskResumeAll+0x124>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	429a      	cmp	r2, r3
 800b2ac:	d903      	bls.n	800b2b6 <xTaskResumeAll+0x7e>
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2b2:	4a2a      	ldr	r2, [pc, #168]	; (800b35c <xTaskResumeAll+0x124>)
 800b2b4:	6013      	str	r3, [r2, #0]
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2ba:	4613      	mov	r3, r2
 800b2bc:	009b      	lsls	r3, r3, #2
 800b2be:	4413      	add	r3, r2
 800b2c0:	009b      	lsls	r3, r3, #2
 800b2c2:	4a27      	ldr	r2, [pc, #156]	; (800b360 <xTaskResumeAll+0x128>)
 800b2c4:	441a      	add	r2, r3
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	3304      	adds	r3, #4
 800b2ca:	4619      	mov	r1, r3
 800b2cc:	4610      	mov	r0, r2
 800b2ce:	f7fe fd42 	bl	8009d56 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2d6:	4b23      	ldr	r3, [pc, #140]	; (800b364 <xTaskResumeAll+0x12c>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2dc:	429a      	cmp	r2, r3
 800b2de:	d302      	bcc.n	800b2e6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b2e0:	4b21      	ldr	r3, [pc, #132]	; (800b368 <xTaskResumeAll+0x130>)
 800b2e2:	2201      	movs	r2, #1
 800b2e4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b2e6:	4b1c      	ldr	r3, [pc, #112]	; (800b358 <xTaskResumeAll+0x120>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d1cb      	bne.n	800b286 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d001      	beq.n	800b2f8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b2f4:	f000 fb68 	bl	800b9c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b2f8:	4b1c      	ldr	r3, [pc, #112]	; (800b36c <xTaskResumeAll+0x134>)
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d010      	beq.n	800b326 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b304:	f000 f858 	bl	800b3b8 <xTaskIncrementTick>
 800b308:	4603      	mov	r3, r0
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d002      	beq.n	800b314 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b30e:	4b16      	ldr	r3, [pc, #88]	; (800b368 <xTaskResumeAll+0x130>)
 800b310:	2201      	movs	r2, #1
 800b312:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	3b01      	subs	r3, #1
 800b318:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d1f1      	bne.n	800b304 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800b320:	4b12      	ldr	r3, [pc, #72]	; (800b36c <xTaskResumeAll+0x134>)
 800b322:	2200      	movs	r2, #0
 800b324:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b326:	4b10      	ldr	r3, [pc, #64]	; (800b368 <xTaskResumeAll+0x130>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d009      	beq.n	800b342 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b32e:	2301      	movs	r3, #1
 800b330:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b332:	4b0f      	ldr	r3, [pc, #60]	; (800b370 <xTaskResumeAll+0x138>)
 800b334:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b338:	601a      	str	r2, [r3, #0]
 800b33a:	f3bf 8f4f 	dsb	sy
 800b33e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b342:	f001 f9e3 	bl	800c70c <vPortExitCritical>

	return xAlreadyYielded;
 800b346:	68bb      	ldr	r3, [r7, #8]
}
 800b348:	4618      	mov	r0, r3
 800b34a:	3710      	adds	r7, #16
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}
 800b350:	20000e78 	.word	0x20000e78
 800b354:	20000e50 	.word	0x20000e50
 800b358:	20000e10 	.word	0x20000e10
 800b35c:	20000e58 	.word	0x20000e58
 800b360:	20000980 	.word	0x20000980
 800b364:	2000097c 	.word	0x2000097c
 800b368:	20000e64 	.word	0x20000e64
 800b36c:	20000e60 	.word	0x20000e60
 800b370:	e000ed04 	.word	0xe000ed04

0800b374 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b374:	b480      	push	{r7}
 800b376:	b083      	sub	sp, #12
 800b378:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b37a:	4b05      	ldr	r3, [pc, #20]	; (800b390 <xTaskGetTickCount+0x1c>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b380:	687b      	ldr	r3, [r7, #4]
}
 800b382:	4618      	mov	r0, r3
 800b384:	370c      	adds	r7, #12
 800b386:	46bd      	mov	sp, r7
 800b388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38c:	4770      	bx	lr
 800b38e:	bf00      	nop
 800b390:	20000e54 	.word	0x20000e54

0800b394 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b082      	sub	sp, #8
 800b398:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b39a:	f001 fa65 	bl	800c868 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b39e:	2300      	movs	r3, #0
 800b3a0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b3a2:	4b04      	ldr	r3, [pc, #16]	; (800b3b4 <xTaskGetTickCountFromISR+0x20>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b3a8:	683b      	ldr	r3, [r7, #0]
}
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	3708      	adds	r7, #8
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	bd80      	pop	{r7, pc}
 800b3b2:	bf00      	nop
 800b3b4:	20000e54 	.word	0x20000e54

0800b3b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b086      	sub	sp, #24
 800b3bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b3be:	2300      	movs	r3, #0
 800b3c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b3c2:	4b4f      	ldr	r3, [pc, #316]	; (800b500 <xTaskIncrementTick+0x148>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	f040 808a 	bne.w	800b4e0 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b3cc:	4b4d      	ldr	r3, [pc, #308]	; (800b504 <xTaskIncrementTick+0x14c>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	3301      	adds	r3, #1
 800b3d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b3d4:	4a4b      	ldr	r2, [pc, #300]	; (800b504 <xTaskIncrementTick+0x14c>)
 800b3d6:	693b      	ldr	r3, [r7, #16]
 800b3d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b3da:	693b      	ldr	r3, [r7, #16]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d121      	bne.n	800b424 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b3e0:	4b49      	ldr	r3, [pc, #292]	; (800b508 <xTaskIncrementTick+0x150>)
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d00b      	beq.n	800b402 <xTaskIncrementTick+0x4a>
 800b3ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3ee:	b672      	cpsid	i
 800b3f0:	f383 8811 	msr	BASEPRI, r3
 800b3f4:	f3bf 8f6f 	isb	sy
 800b3f8:	f3bf 8f4f 	dsb	sy
 800b3fc:	b662      	cpsie	i
 800b3fe:	603b      	str	r3, [r7, #0]
 800b400:	e7fe      	b.n	800b400 <xTaskIncrementTick+0x48>
 800b402:	4b41      	ldr	r3, [pc, #260]	; (800b508 <xTaskIncrementTick+0x150>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	60fb      	str	r3, [r7, #12]
 800b408:	4b40      	ldr	r3, [pc, #256]	; (800b50c <xTaskIncrementTick+0x154>)
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	4a3e      	ldr	r2, [pc, #248]	; (800b508 <xTaskIncrementTick+0x150>)
 800b40e:	6013      	str	r3, [r2, #0]
 800b410:	4a3e      	ldr	r2, [pc, #248]	; (800b50c <xTaskIncrementTick+0x154>)
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	6013      	str	r3, [r2, #0]
 800b416:	4b3e      	ldr	r3, [pc, #248]	; (800b510 <xTaskIncrementTick+0x158>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	3301      	adds	r3, #1
 800b41c:	4a3c      	ldr	r2, [pc, #240]	; (800b510 <xTaskIncrementTick+0x158>)
 800b41e:	6013      	str	r3, [r2, #0]
 800b420:	f000 fad2 	bl	800b9c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b424:	4b3b      	ldr	r3, [pc, #236]	; (800b514 <xTaskIncrementTick+0x15c>)
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	693a      	ldr	r2, [r7, #16]
 800b42a:	429a      	cmp	r2, r3
 800b42c:	d349      	bcc.n	800b4c2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b42e:	4b36      	ldr	r3, [pc, #216]	; (800b508 <xTaskIncrementTick+0x150>)
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d104      	bne.n	800b442 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b438:	4b36      	ldr	r3, [pc, #216]	; (800b514 <xTaskIncrementTick+0x15c>)
 800b43a:	f04f 32ff 	mov.w	r2, #4294967295
 800b43e:	601a      	str	r2, [r3, #0]
					break;
 800b440:	e03f      	b.n	800b4c2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b442:	4b31      	ldr	r3, [pc, #196]	; (800b508 <xTaskIncrementTick+0x150>)
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	68db      	ldr	r3, [r3, #12]
 800b448:	68db      	ldr	r3, [r3, #12]
 800b44a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b44c:	68bb      	ldr	r3, [r7, #8]
 800b44e:	685b      	ldr	r3, [r3, #4]
 800b450:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b452:	693a      	ldr	r2, [r7, #16]
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	429a      	cmp	r2, r3
 800b458:	d203      	bcs.n	800b462 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b45a:	4a2e      	ldr	r2, [pc, #184]	; (800b514 <xTaskIncrementTick+0x15c>)
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b460:	e02f      	b.n	800b4c2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b462:	68bb      	ldr	r3, [r7, #8]
 800b464:	3304      	adds	r3, #4
 800b466:	4618      	mov	r0, r3
 800b468:	f7fe fcd2 	bl	8009e10 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b46c:	68bb      	ldr	r3, [r7, #8]
 800b46e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b470:	2b00      	cmp	r3, #0
 800b472:	d004      	beq.n	800b47e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b474:	68bb      	ldr	r3, [r7, #8]
 800b476:	3318      	adds	r3, #24
 800b478:	4618      	mov	r0, r3
 800b47a:	f7fe fcc9 	bl	8009e10 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b47e:	68bb      	ldr	r3, [r7, #8]
 800b480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b482:	4b25      	ldr	r3, [pc, #148]	; (800b518 <xTaskIncrementTick+0x160>)
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	429a      	cmp	r2, r3
 800b488:	d903      	bls.n	800b492 <xTaskIncrementTick+0xda>
 800b48a:	68bb      	ldr	r3, [r7, #8]
 800b48c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b48e:	4a22      	ldr	r2, [pc, #136]	; (800b518 <xTaskIncrementTick+0x160>)
 800b490:	6013      	str	r3, [r2, #0]
 800b492:	68bb      	ldr	r3, [r7, #8]
 800b494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b496:	4613      	mov	r3, r2
 800b498:	009b      	lsls	r3, r3, #2
 800b49a:	4413      	add	r3, r2
 800b49c:	009b      	lsls	r3, r3, #2
 800b49e:	4a1f      	ldr	r2, [pc, #124]	; (800b51c <xTaskIncrementTick+0x164>)
 800b4a0:	441a      	add	r2, r3
 800b4a2:	68bb      	ldr	r3, [r7, #8]
 800b4a4:	3304      	adds	r3, #4
 800b4a6:	4619      	mov	r1, r3
 800b4a8:	4610      	mov	r0, r2
 800b4aa:	f7fe fc54 	bl	8009d56 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b4ae:	68bb      	ldr	r3, [r7, #8]
 800b4b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4b2:	4b1b      	ldr	r3, [pc, #108]	; (800b520 <xTaskIncrementTick+0x168>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4b8:	429a      	cmp	r2, r3
 800b4ba:	d3b8      	bcc.n	800b42e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b4bc:	2301      	movs	r3, #1
 800b4be:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b4c0:	e7b5      	b.n	800b42e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b4c2:	4b17      	ldr	r3, [pc, #92]	; (800b520 <xTaskIncrementTick+0x168>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4c8:	4914      	ldr	r1, [pc, #80]	; (800b51c <xTaskIncrementTick+0x164>)
 800b4ca:	4613      	mov	r3, r2
 800b4cc:	009b      	lsls	r3, r3, #2
 800b4ce:	4413      	add	r3, r2
 800b4d0:	009b      	lsls	r3, r3, #2
 800b4d2:	440b      	add	r3, r1
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	2b01      	cmp	r3, #1
 800b4d8:	d907      	bls.n	800b4ea <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800b4da:	2301      	movs	r3, #1
 800b4dc:	617b      	str	r3, [r7, #20]
 800b4de:	e004      	b.n	800b4ea <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b4e0:	4b10      	ldr	r3, [pc, #64]	; (800b524 <xTaskIncrementTick+0x16c>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	3301      	adds	r3, #1
 800b4e6:	4a0f      	ldr	r2, [pc, #60]	; (800b524 <xTaskIncrementTick+0x16c>)
 800b4e8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b4ea:	4b0f      	ldr	r3, [pc, #60]	; (800b528 <xTaskIncrementTick+0x170>)
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d001      	beq.n	800b4f6 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800b4f2:	2301      	movs	r3, #1
 800b4f4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b4f6:	697b      	ldr	r3, [r7, #20]
}
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	3718      	adds	r7, #24
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	bd80      	pop	{r7, pc}
 800b500:	20000e78 	.word	0x20000e78
 800b504:	20000e54 	.word	0x20000e54
 800b508:	20000e08 	.word	0x20000e08
 800b50c:	20000e0c 	.word	0x20000e0c
 800b510:	20000e68 	.word	0x20000e68
 800b514:	20000e70 	.word	0x20000e70
 800b518:	20000e58 	.word	0x20000e58
 800b51c:	20000980 	.word	0x20000980
 800b520:	2000097c 	.word	0x2000097c
 800b524:	20000e60 	.word	0x20000e60
 800b528:	20000e64 	.word	0x20000e64

0800b52c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b52c:	b480      	push	{r7}
 800b52e:	b085      	sub	sp, #20
 800b530:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b532:	4b28      	ldr	r3, [pc, #160]	; (800b5d4 <vTaskSwitchContext+0xa8>)
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d003      	beq.n	800b542 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b53a:	4b27      	ldr	r3, [pc, #156]	; (800b5d8 <vTaskSwitchContext+0xac>)
 800b53c:	2201      	movs	r2, #1
 800b53e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b540:	e042      	b.n	800b5c8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800b542:	4b25      	ldr	r3, [pc, #148]	; (800b5d8 <vTaskSwitchContext+0xac>)
 800b544:	2200      	movs	r2, #0
 800b546:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b548:	4b24      	ldr	r3, [pc, #144]	; (800b5dc <vTaskSwitchContext+0xb0>)
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	60fb      	str	r3, [r7, #12]
 800b54e:	e011      	b.n	800b574 <vTaskSwitchContext+0x48>
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d10b      	bne.n	800b56e <vTaskSwitchContext+0x42>
 800b556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b55a:	b672      	cpsid	i
 800b55c:	f383 8811 	msr	BASEPRI, r3
 800b560:	f3bf 8f6f 	isb	sy
 800b564:	f3bf 8f4f 	dsb	sy
 800b568:	b662      	cpsie	i
 800b56a:	607b      	str	r3, [r7, #4]
 800b56c:	e7fe      	b.n	800b56c <vTaskSwitchContext+0x40>
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	3b01      	subs	r3, #1
 800b572:	60fb      	str	r3, [r7, #12]
 800b574:	491a      	ldr	r1, [pc, #104]	; (800b5e0 <vTaskSwitchContext+0xb4>)
 800b576:	68fa      	ldr	r2, [r7, #12]
 800b578:	4613      	mov	r3, r2
 800b57a:	009b      	lsls	r3, r3, #2
 800b57c:	4413      	add	r3, r2
 800b57e:	009b      	lsls	r3, r3, #2
 800b580:	440b      	add	r3, r1
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d0e3      	beq.n	800b550 <vTaskSwitchContext+0x24>
 800b588:	68fa      	ldr	r2, [r7, #12]
 800b58a:	4613      	mov	r3, r2
 800b58c:	009b      	lsls	r3, r3, #2
 800b58e:	4413      	add	r3, r2
 800b590:	009b      	lsls	r3, r3, #2
 800b592:	4a13      	ldr	r2, [pc, #76]	; (800b5e0 <vTaskSwitchContext+0xb4>)
 800b594:	4413      	add	r3, r2
 800b596:	60bb      	str	r3, [r7, #8]
 800b598:	68bb      	ldr	r3, [r7, #8]
 800b59a:	685b      	ldr	r3, [r3, #4]
 800b59c:	685a      	ldr	r2, [r3, #4]
 800b59e:	68bb      	ldr	r3, [r7, #8]
 800b5a0:	605a      	str	r2, [r3, #4]
 800b5a2:	68bb      	ldr	r3, [r7, #8]
 800b5a4:	685a      	ldr	r2, [r3, #4]
 800b5a6:	68bb      	ldr	r3, [r7, #8]
 800b5a8:	3308      	adds	r3, #8
 800b5aa:	429a      	cmp	r2, r3
 800b5ac:	d104      	bne.n	800b5b8 <vTaskSwitchContext+0x8c>
 800b5ae:	68bb      	ldr	r3, [r7, #8]
 800b5b0:	685b      	ldr	r3, [r3, #4]
 800b5b2:	685a      	ldr	r2, [r3, #4]
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	605a      	str	r2, [r3, #4]
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	685b      	ldr	r3, [r3, #4]
 800b5bc:	68db      	ldr	r3, [r3, #12]
 800b5be:	4a09      	ldr	r2, [pc, #36]	; (800b5e4 <vTaskSwitchContext+0xb8>)
 800b5c0:	6013      	str	r3, [r2, #0]
 800b5c2:	4a06      	ldr	r2, [pc, #24]	; (800b5dc <vTaskSwitchContext+0xb0>)
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	6013      	str	r3, [r2, #0]
}
 800b5c8:	bf00      	nop
 800b5ca:	3714      	adds	r7, #20
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d2:	4770      	bx	lr
 800b5d4:	20000e78 	.word	0x20000e78
 800b5d8:	20000e64 	.word	0x20000e64
 800b5dc:	20000e58 	.word	0x20000e58
 800b5e0:	20000980 	.word	0x20000980
 800b5e4:	2000097c 	.word	0x2000097c

0800b5e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b084      	sub	sp, #16
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
 800b5f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d10b      	bne.n	800b610 <vTaskPlaceOnEventList+0x28>
 800b5f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5fc:	b672      	cpsid	i
 800b5fe:	f383 8811 	msr	BASEPRI, r3
 800b602:	f3bf 8f6f 	isb	sy
 800b606:	f3bf 8f4f 	dsb	sy
 800b60a:	b662      	cpsie	i
 800b60c:	60fb      	str	r3, [r7, #12]
 800b60e:	e7fe      	b.n	800b60e <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b610:	4b07      	ldr	r3, [pc, #28]	; (800b630 <vTaskPlaceOnEventList+0x48>)
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	3318      	adds	r3, #24
 800b616:	4619      	mov	r1, r3
 800b618:	6878      	ldr	r0, [r7, #4]
 800b61a:	f7fe fbc0 	bl	8009d9e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b61e:	2101      	movs	r1, #1
 800b620:	6838      	ldr	r0, [r7, #0]
 800b622:	f000 fb8f 	bl	800bd44 <prvAddCurrentTaskToDelayedList>
}
 800b626:	bf00      	nop
 800b628:	3710      	adds	r7, #16
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}
 800b62e:	bf00      	nop
 800b630:	2000097c 	.word	0x2000097c

0800b634 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b634:	b580      	push	{r7, lr}
 800b636:	b086      	sub	sp, #24
 800b638:	af00      	add	r7, sp, #0
 800b63a:	60f8      	str	r0, [r7, #12]
 800b63c:	60b9      	str	r1, [r7, #8]
 800b63e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d10b      	bne.n	800b65e <vTaskPlaceOnEventListRestricted+0x2a>
 800b646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b64a:	b672      	cpsid	i
 800b64c:	f383 8811 	msr	BASEPRI, r3
 800b650:	f3bf 8f6f 	isb	sy
 800b654:	f3bf 8f4f 	dsb	sy
 800b658:	b662      	cpsie	i
 800b65a:	617b      	str	r3, [r7, #20]
 800b65c:	e7fe      	b.n	800b65c <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b65e:	4b0a      	ldr	r3, [pc, #40]	; (800b688 <vTaskPlaceOnEventListRestricted+0x54>)
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	3318      	adds	r3, #24
 800b664:	4619      	mov	r1, r3
 800b666:	68f8      	ldr	r0, [r7, #12]
 800b668:	f7fe fb75 	bl	8009d56 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d002      	beq.n	800b678 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b672:	f04f 33ff 	mov.w	r3, #4294967295
 800b676:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b678:	6879      	ldr	r1, [r7, #4]
 800b67a:	68b8      	ldr	r0, [r7, #8]
 800b67c:	f000 fb62 	bl	800bd44 <prvAddCurrentTaskToDelayedList>
	}
 800b680:	bf00      	nop
 800b682:	3718      	adds	r7, #24
 800b684:	46bd      	mov	sp, r7
 800b686:	bd80      	pop	{r7, pc}
 800b688:	2000097c 	.word	0x2000097c

0800b68c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b086      	sub	sp, #24
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	68db      	ldr	r3, [r3, #12]
 800b698:	68db      	ldr	r3, [r3, #12]
 800b69a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b69c:	693b      	ldr	r3, [r7, #16]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d10b      	bne.n	800b6ba <xTaskRemoveFromEventList+0x2e>
 800b6a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6a6:	b672      	cpsid	i
 800b6a8:	f383 8811 	msr	BASEPRI, r3
 800b6ac:	f3bf 8f6f 	isb	sy
 800b6b0:	f3bf 8f4f 	dsb	sy
 800b6b4:	b662      	cpsie	i
 800b6b6:	60fb      	str	r3, [r7, #12]
 800b6b8:	e7fe      	b.n	800b6b8 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b6ba:	693b      	ldr	r3, [r7, #16]
 800b6bc:	3318      	adds	r3, #24
 800b6be:	4618      	mov	r0, r3
 800b6c0:	f7fe fba6 	bl	8009e10 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b6c4:	4b1d      	ldr	r3, [pc, #116]	; (800b73c <xTaskRemoveFromEventList+0xb0>)
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d11d      	bne.n	800b708 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b6cc:	693b      	ldr	r3, [r7, #16]
 800b6ce:	3304      	adds	r3, #4
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	f7fe fb9d 	bl	8009e10 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b6d6:	693b      	ldr	r3, [r7, #16]
 800b6d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6da:	4b19      	ldr	r3, [pc, #100]	; (800b740 <xTaskRemoveFromEventList+0xb4>)
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	429a      	cmp	r2, r3
 800b6e0:	d903      	bls.n	800b6ea <xTaskRemoveFromEventList+0x5e>
 800b6e2:	693b      	ldr	r3, [r7, #16]
 800b6e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6e6:	4a16      	ldr	r2, [pc, #88]	; (800b740 <xTaskRemoveFromEventList+0xb4>)
 800b6e8:	6013      	str	r3, [r2, #0]
 800b6ea:	693b      	ldr	r3, [r7, #16]
 800b6ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6ee:	4613      	mov	r3, r2
 800b6f0:	009b      	lsls	r3, r3, #2
 800b6f2:	4413      	add	r3, r2
 800b6f4:	009b      	lsls	r3, r3, #2
 800b6f6:	4a13      	ldr	r2, [pc, #76]	; (800b744 <xTaskRemoveFromEventList+0xb8>)
 800b6f8:	441a      	add	r2, r3
 800b6fa:	693b      	ldr	r3, [r7, #16]
 800b6fc:	3304      	adds	r3, #4
 800b6fe:	4619      	mov	r1, r3
 800b700:	4610      	mov	r0, r2
 800b702:	f7fe fb28 	bl	8009d56 <vListInsertEnd>
 800b706:	e005      	b.n	800b714 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b708:	693b      	ldr	r3, [r7, #16]
 800b70a:	3318      	adds	r3, #24
 800b70c:	4619      	mov	r1, r3
 800b70e:	480e      	ldr	r0, [pc, #56]	; (800b748 <xTaskRemoveFromEventList+0xbc>)
 800b710:	f7fe fb21 	bl	8009d56 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b714:	693b      	ldr	r3, [r7, #16]
 800b716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b718:	4b0c      	ldr	r3, [pc, #48]	; (800b74c <xTaskRemoveFromEventList+0xc0>)
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b71e:	429a      	cmp	r2, r3
 800b720:	d905      	bls.n	800b72e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b722:	2301      	movs	r3, #1
 800b724:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b726:	4b0a      	ldr	r3, [pc, #40]	; (800b750 <xTaskRemoveFromEventList+0xc4>)
 800b728:	2201      	movs	r2, #1
 800b72a:	601a      	str	r2, [r3, #0]
 800b72c:	e001      	b.n	800b732 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b72e:	2300      	movs	r3, #0
 800b730:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b732:	697b      	ldr	r3, [r7, #20]
}
 800b734:	4618      	mov	r0, r3
 800b736:	3718      	adds	r7, #24
 800b738:	46bd      	mov	sp, r7
 800b73a:	bd80      	pop	{r7, pc}
 800b73c:	20000e78 	.word	0x20000e78
 800b740:	20000e58 	.word	0x20000e58
 800b744:	20000980 	.word	0x20000980
 800b748:	20000e10 	.word	0x20000e10
 800b74c:	2000097c 	.word	0x2000097c
 800b750:	20000e64 	.word	0x20000e64

0800b754 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b754:	b480      	push	{r7}
 800b756:	b083      	sub	sp, #12
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b75c:	4b06      	ldr	r3, [pc, #24]	; (800b778 <vTaskInternalSetTimeOutState+0x24>)
 800b75e:	681a      	ldr	r2, [r3, #0]
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b764:	4b05      	ldr	r3, [pc, #20]	; (800b77c <vTaskInternalSetTimeOutState+0x28>)
 800b766:	681a      	ldr	r2, [r3, #0]
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	605a      	str	r2, [r3, #4]
}
 800b76c:	bf00      	nop
 800b76e:	370c      	adds	r7, #12
 800b770:	46bd      	mov	sp, r7
 800b772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b776:	4770      	bx	lr
 800b778:	20000e68 	.word	0x20000e68
 800b77c:	20000e54 	.word	0x20000e54

0800b780 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b088      	sub	sp, #32
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
 800b788:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d10b      	bne.n	800b7a8 <xTaskCheckForTimeOut+0x28>
 800b790:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b794:	b672      	cpsid	i
 800b796:	f383 8811 	msr	BASEPRI, r3
 800b79a:	f3bf 8f6f 	isb	sy
 800b79e:	f3bf 8f4f 	dsb	sy
 800b7a2:	b662      	cpsie	i
 800b7a4:	613b      	str	r3, [r7, #16]
 800b7a6:	e7fe      	b.n	800b7a6 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d10b      	bne.n	800b7c6 <xTaskCheckForTimeOut+0x46>
 800b7ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7b2:	b672      	cpsid	i
 800b7b4:	f383 8811 	msr	BASEPRI, r3
 800b7b8:	f3bf 8f6f 	isb	sy
 800b7bc:	f3bf 8f4f 	dsb	sy
 800b7c0:	b662      	cpsie	i
 800b7c2:	60fb      	str	r3, [r7, #12]
 800b7c4:	e7fe      	b.n	800b7c4 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800b7c6:	f000 ff6f 	bl	800c6a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b7ca:	4b1d      	ldr	r3, [pc, #116]	; (800b840 <xTaskCheckForTimeOut+0xc0>)
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	685b      	ldr	r3, [r3, #4]
 800b7d4:	69ba      	ldr	r2, [r7, #24]
 800b7d6:	1ad3      	subs	r3, r2, r3
 800b7d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7e2:	d102      	bne.n	800b7ea <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	61fb      	str	r3, [r7, #28]
 800b7e8:	e023      	b.n	800b832 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681a      	ldr	r2, [r3, #0]
 800b7ee:	4b15      	ldr	r3, [pc, #84]	; (800b844 <xTaskCheckForTimeOut+0xc4>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	429a      	cmp	r2, r3
 800b7f4:	d007      	beq.n	800b806 <xTaskCheckForTimeOut+0x86>
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	685b      	ldr	r3, [r3, #4]
 800b7fa:	69ba      	ldr	r2, [r7, #24]
 800b7fc:	429a      	cmp	r2, r3
 800b7fe:	d302      	bcc.n	800b806 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b800:	2301      	movs	r3, #1
 800b802:	61fb      	str	r3, [r7, #28]
 800b804:	e015      	b.n	800b832 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	697a      	ldr	r2, [r7, #20]
 800b80c:	429a      	cmp	r2, r3
 800b80e:	d20b      	bcs.n	800b828 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	681a      	ldr	r2, [r3, #0]
 800b814:	697b      	ldr	r3, [r7, #20]
 800b816:	1ad2      	subs	r2, r2, r3
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b81c:	6878      	ldr	r0, [r7, #4]
 800b81e:	f7ff ff99 	bl	800b754 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b822:	2300      	movs	r3, #0
 800b824:	61fb      	str	r3, [r7, #28]
 800b826:	e004      	b.n	800b832 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	2200      	movs	r2, #0
 800b82c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b82e:	2301      	movs	r3, #1
 800b830:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b832:	f000 ff6b 	bl	800c70c <vPortExitCritical>

	return xReturn;
 800b836:	69fb      	ldr	r3, [r7, #28]
}
 800b838:	4618      	mov	r0, r3
 800b83a:	3720      	adds	r7, #32
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bd80      	pop	{r7, pc}
 800b840:	20000e54 	.word	0x20000e54
 800b844:	20000e68 	.word	0x20000e68

0800b848 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b848:	b480      	push	{r7}
 800b84a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b84c:	4b03      	ldr	r3, [pc, #12]	; (800b85c <vTaskMissedYield+0x14>)
 800b84e:	2201      	movs	r2, #1
 800b850:	601a      	str	r2, [r3, #0]
}
 800b852:	bf00      	nop
 800b854:	46bd      	mov	sp, r7
 800b856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85a:	4770      	bx	lr
 800b85c:	20000e64 	.word	0x20000e64

0800b860 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b082      	sub	sp, #8
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b868:	f000 f852 	bl	800b910 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b86c:	4b06      	ldr	r3, [pc, #24]	; (800b888 <prvIdleTask+0x28>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	2b01      	cmp	r3, #1
 800b872:	d9f9      	bls.n	800b868 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b874:	4b05      	ldr	r3, [pc, #20]	; (800b88c <prvIdleTask+0x2c>)
 800b876:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b87a:	601a      	str	r2, [r3, #0]
 800b87c:	f3bf 8f4f 	dsb	sy
 800b880:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b884:	e7f0      	b.n	800b868 <prvIdleTask+0x8>
 800b886:	bf00      	nop
 800b888:	20000980 	.word	0x20000980
 800b88c:	e000ed04 	.word	0xe000ed04

0800b890 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b082      	sub	sp, #8
 800b894:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b896:	2300      	movs	r3, #0
 800b898:	607b      	str	r3, [r7, #4]
 800b89a:	e00c      	b.n	800b8b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b89c:	687a      	ldr	r2, [r7, #4]
 800b89e:	4613      	mov	r3, r2
 800b8a0:	009b      	lsls	r3, r3, #2
 800b8a2:	4413      	add	r3, r2
 800b8a4:	009b      	lsls	r3, r3, #2
 800b8a6:	4a12      	ldr	r2, [pc, #72]	; (800b8f0 <prvInitialiseTaskLists+0x60>)
 800b8a8:	4413      	add	r3, r2
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	f7fe fa26 	bl	8009cfc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	3301      	adds	r3, #1
 800b8b4:	607b      	str	r3, [r7, #4]
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	2b37      	cmp	r3, #55	; 0x37
 800b8ba:	d9ef      	bls.n	800b89c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b8bc:	480d      	ldr	r0, [pc, #52]	; (800b8f4 <prvInitialiseTaskLists+0x64>)
 800b8be:	f7fe fa1d 	bl	8009cfc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b8c2:	480d      	ldr	r0, [pc, #52]	; (800b8f8 <prvInitialiseTaskLists+0x68>)
 800b8c4:	f7fe fa1a 	bl	8009cfc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b8c8:	480c      	ldr	r0, [pc, #48]	; (800b8fc <prvInitialiseTaskLists+0x6c>)
 800b8ca:	f7fe fa17 	bl	8009cfc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b8ce:	480c      	ldr	r0, [pc, #48]	; (800b900 <prvInitialiseTaskLists+0x70>)
 800b8d0:	f7fe fa14 	bl	8009cfc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b8d4:	480b      	ldr	r0, [pc, #44]	; (800b904 <prvInitialiseTaskLists+0x74>)
 800b8d6:	f7fe fa11 	bl	8009cfc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b8da:	4b0b      	ldr	r3, [pc, #44]	; (800b908 <prvInitialiseTaskLists+0x78>)
 800b8dc:	4a05      	ldr	r2, [pc, #20]	; (800b8f4 <prvInitialiseTaskLists+0x64>)
 800b8de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b8e0:	4b0a      	ldr	r3, [pc, #40]	; (800b90c <prvInitialiseTaskLists+0x7c>)
 800b8e2:	4a05      	ldr	r2, [pc, #20]	; (800b8f8 <prvInitialiseTaskLists+0x68>)
 800b8e4:	601a      	str	r2, [r3, #0]
}
 800b8e6:	bf00      	nop
 800b8e8:	3708      	adds	r7, #8
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	bd80      	pop	{r7, pc}
 800b8ee:	bf00      	nop
 800b8f0:	20000980 	.word	0x20000980
 800b8f4:	20000de0 	.word	0x20000de0
 800b8f8:	20000df4 	.word	0x20000df4
 800b8fc:	20000e10 	.word	0x20000e10
 800b900:	20000e24 	.word	0x20000e24
 800b904:	20000e3c 	.word	0x20000e3c
 800b908:	20000e08 	.word	0x20000e08
 800b90c:	20000e0c 	.word	0x20000e0c

0800b910 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b082      	sub	sp, #8
 800b914:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b916:	e019      	b.n	800b94c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b918:	f000 fec6 	bl	800c6a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b91c:	4b0f      	ldr	r3, [pc, #60]	; (800b95c <prvCheckTasksWaitingTermination+0x4c>)
 800b91e:	68db      	ldr	r3, [r3, #12]
 800b920:	68db      	ldr	r3, [r3, #12]
 800b922:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	3304      	adds	r3, #4
 800b928:	4618      	mov	r0, r3
 800b92a:	f7fe fa71 	bl	8009e10 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b92e:	4b0c      	ldr	r3, [pc, #48]	; (800b960 <prvCheckTasksWaitingTermination+0x50>)
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	3b01      	subs	r3, #1
 800b934:	4a0a      	ldr	r2, [pc, #40]	; (800b960 <prvCheckTasksWaitingTermination+0x50>)
 800b936:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b938:	4b0a      	ldr	r3, [pc, #40]	; (800b964 <prvCheckTasksWaitingTermination+0x54>)
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	3b01      	subs	r3, #1
 800b93e:	4a09      	ldr	r2, [pc, #36]	; (800b964 <prvCheckTasksWaitingTermination+0x54>)
 800b940:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b942:	f000 fee3 	bl	800c70c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b946:	6878      	ldr	r0, [r7, #4]
 800b948:	f000 f80e 	bl	800b968 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b94c:	4b05      	ldr	r3, [pc, #20]	; (800b964 <prvCheckTasksWaitingTermination+0x54>)
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d1e1      	bne.n	800b918 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b954:	bf00      	nop
 800b956:	3708      	adds	r7, #8
 800b958:	46bd      	mov	sp, r7
 800b95a:	bd80      	pop	{r7, pc}
 800b95c:	20000e24 	.word	0x20000e24
 800b960:	20000e50 	.word	0x20000e50
 800b964:	20000e38 	.word	0x20000e38

0800b968 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b084      	sub	sp, #16
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b976:	2b00      	cmp	r3, #0
 800b978:	d108      	bne.n	800b98c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b97e:	4618      	mov	r0, r3
 800b980:	f001 f87c 	bl	800ca7c <vPortFree>
				vPortFree( pxTCB );
 800b984:	6878      	ldr	r0, [r7, #4]
 800b986:	f001 f879 	bl	800ca7c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b98a:	e019      	b.n	800b9c0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b992:	2b01      	cmp	r3, #1
 800b994:	d103      	bne.n	800b99e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b996:	6878      	ldr	r0, [r7, #4]
 800b998:	f001 f870 	bl	800ca7c <vPortFree>
	}
 800b99c:	e010      	b.n	800b9c0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b9a4:	2b02      	cmp	r3, #2
 800b9a6:	d00b      	beq.n	800b9c0 <prvDeleteTCB+0x58>
 800b9a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ac:	b672      	cpsid	i
 800b9ae:	f383 8811 	msr	BASEPRI, r3
 800b9b2:	f3bf 8f6f 	isb	sy
 800b9b6:	f3bf 8f4f 	dsb	sy
 800b9ba:	b662      	cpsie	i
 800b9bc:	60fb      	str	r3, [r7, #12]
 800b9be:	e7fe      	b.n	800b9be <prvDeleteTCB+0x56>
	}
 800b9c0:	bf00      	nop
 800b9c2:	3710      	adds	r7, #16
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	bd80      	pop	{r7, pc}

0800b9c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b9c8:	b480      	push	{r7}
 800b9ca:	b083      	sub	sp, #12
 800b9cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b9ce:	4b0c      	ldr	r3, [pc, #48]	; (800ba00 <prvResetNextTaskUnblockTime+0x38>)
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d104      	bne.n	800b9e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b9d8:	4b0a      	ldr	r3, [pc, #40]	; (800ba04 <prvResetNextTaskUnblockTime+0x3c>)
 800b9da:	f04f 32ff 	mov.w	r2, #4294967295
 800b9de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b9e0:	e008      	b.n	800b9f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9e2:	4b07      	ldr	r3, [pc, #28]	; (800ba00 <prvResetNextTaskUnblockTime+0x38>)
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	68db      	ldr	r3, [r3, #12]
 800b9e8:	68db      	ldr	r3, [r3, #12]
 800b9ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	685b      	ldr	r3, [r3, #4]
 800b9f0:	4a04      	ldr	r2, [pc, #16]	; (800ba04 <prvResetNextTaskUnblockTime+0x3c>)
 800b9f2:	6013      	str	r3, [r2, #0]
}
 800b9f4:	bf00      	nop
 800b9f6:	370c      	adds	r7, #12
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fe:	4770      	bx	lr
 800ba00:	20000e08 	.word	0x20000e08
 800ba04:	20000e70 	.word	0x20000e70

0800ba08 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800ba08:	b480      	push	{r7}
 800ba0a:	b083      	sub	sp, #12
 800ba0c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800ba0e:	4b05      	ldr	r3, [pc, #20]	; (800ba24 <xTaskGetCurrentTaskHandle+0x1c>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	607b      	str	r3, [r7, #4]

		return xReturn;
 800ba14:	687b      	ldr	r3, [r7, #4]
	}
 800ba16:	4618      	mov	r0, r3
 800ba18:	370c      	adds	r7, #12
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba20:	4770      	bx	lr
 800ba22:	bf00      	nop
 800ba24:	2000097c 	.word	0x2000097c

0800ba28 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ba28:	b480      	push	{r7}
 800ba2a:	b083      	sub	sp, #12
 800ba2c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ba2e:	4b0b      	ldr	r3, [pc, #44]	; (800ba5c <xTaskGetSchedulerState+0x34>)
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d102      	bne.n	800ba3c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ba36:	2301      	movs	r3, #1
 800ba38:	607b      	str	r3, [r7, #4]
 800ba3a:	e008      	b.n	800ba4e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba3c:	4b08      	ldr	r3, [pc, #32]	; (800ba60 <xTaskGetSchedulerState+0x38>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d102      	bne.n	800ba4a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ba44:	2302      	movs	r3, #2
 800ba46:	607b      	str	r3, [r7, #4]
 800ba48:	e001      	b.n	800ba4e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ba4e:	687b      	ldr	r3, [r7, #4]
	}
 800ba50:	4618      	mov	r0, r3
 800ba52:	370c      	adds	r7, #12
 800ba54:	46bd      	mov	sp, r7
 800ba56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5a:	4770      	bx	lr
 800ba5c:	20000e5c 	.word	0x20000e5c
 800ba60:	20000e78 	.word	0x20000e78

0800ba64 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b084      	sub	sp, #16
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ba70:	2300      	movs	r3, #0
 800ba72:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d051      	beq.n	800bb1e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ba7a:	68bb      	ldr	r3, [r7, #8]
 800ba7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba7e:	4b2a      	ldr	r3, [pc, #168]	; (800bb28 <xTaskPriorityInherit+0xc4>)
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba84:	429a      	cmp	r2, r3
 800ba86:	d241      	bcs.n	800bb0c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ba88:	68bb      	ldr	r3, [r7, #8]
 800ba8a:	699b      	ldr	r3, [r3, #24]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	db06      	blt.n	800ba9e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba90:	4b25      	ldr	r3, [pc, #148]	; (800bb28 <xTaskPriorityInherit+0xc4>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba96:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ba9a:	68bb      	ldr	r3, [r7, #8]
 800ba9c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ba9e:	68bb      	ldr	r3, [r7, #8]
 800baa0:	6959      	ldr	r1, [r3, #20]
 800baa2:	68bb      	ldr	r3, [r7, #8]
 800baa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baa6:	4613      	mov	r3, r2
 800baa8:	009b      	lsls	r3, r3, #2
 800baaa:	4413      	add	r3, r2
 800baac:	009b      	lsls	r3, r3, #2
 800baae:	4a1f      	ldr	r2, [pc, #124]	; (800bb2c <xTaskPriorityInherit+0xc8>)
 800bab0:	4413      	add	r3, r2
 800bab2:	4299      	cmp	r1, r3
 800bab4:	d122      	bne.n	800bafc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bab6:	68bb      	ldr	r3, [r7, #8]
 800bab8:	3304      	adds	r3, #4
 800baba:	4618      	mov	r0, r3
 800babc:	f7fe f9a8 	bl	8009e10 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bac0:	4b19      	ldr	r3, [pc, #100]	; (800bb28 <xTaskPriorityInherit+0xc4>)
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bac6:	68bb      	ldr	r3, [r7, #8]
 800bac8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bace:	4b18      	ldr	r3, [pc, #96]	; (800bb30 <xTaskPriorityInherit+0xcc>)
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	429a      	cmp	r2, r3
 800bad4:	d903      	bls.n	800bade <xTaskPriorityInherit+0x7a>
 800bad6:	68bb      	ldr	r3, [r7, #8]
 800bad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bada:	4a15      	ldr	r2, [pc, #84]	; (800bb30 <xTaskPriorityInherit+0xcc>)
 800badc:	6013      	str	r3, [r2, #0]
 800bade:	68bb      	ldr	r3, [r7, #8]
 800bae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bae2:	4613      	mov	r3, r2
 800bae4:	009b      	lsls	r3, r3, #2
 800bae6:	4413      	add	r3, r2
 800bae8:	009b      	lsls	r3, r3, #2
 800baea:	4a10      	ldr	r2, [pc, #64]	; (800bb2c <xTaskPriorityInherit+0xc8>)
 800baec:	441a      	add	r2, r3
 800baee:	68bb      	ldr	r3, [r7, #8]
 800baf0:	3304      	adds	r3, #4
 800baf2:	4619      	mov	r1, r3
 800baf4:	4610      	mov	r0, r2
 800baf6:	f7fe f92e 	bl	8009d56 <vListInsertEnd>
 800bafa:	e004      	b.n	800bb06 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bafc:	4b0a      	ldr	r3, [pc, #40]	; (800bb28 <xTaskPriorityInherit+0xc4>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb02:	68bb      	ldr	r3, [r7, #8]
 800bb04:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bb06:	2301      	movs	r3, #1
 800bb08:	60fb      	str	r3, [r7, #12]
 800bb0a:	e008      	b.n	800bb1e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bb0c:	68bb      	ldr	r3, [r7, #8]
 800bb0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bb10:	4b05      	ldr	r3, [pc, #20]	; (800bb28 <xTaskPriorityInherit+0xc4>)
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb16:	429a      	cmp	r2, r3
 800bb18:	d201      	bcs.n	800bb1e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800bb1a:	2301      	movs	r3, #1
 800bb1c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
	}
 800bb20:	4618      	mov	r0, r3
 800bb22:	3710      	adds	r7, #16
 800bb24:	46bd      	mov	sp, r7
 800bb26:	bd80      	pop	{r7, pc}
 800bb28:	2000097c 	.word	0x2000097c
 800bb2c:	20000980 	.word	0x20000980
 800bb30:	20000e58 	.word	0x20000e58

0800bb34 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b086      	sub	sp, #24
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bb40:	2300      	movs	r3, #0
 800bb42:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d058      	beq.n	800bbfc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bb4a:	4b2f      	ldr	r3, [pc, #188]	; (800bc08 <xTaskPriorityDisinherit+0xd4>)
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	693a      	ldr	r2, [r7, #16]
 800bb50:	429a      	cmp	r2, r3
 800bb52:	d00b      	beq.n	800bb6c <xTaskPriorityDisinherit+0x38>
 800bb54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb58:	b672      	cpsid	i
 800bb5a:	f383 8811 	msr	BASEPRI, r3
 800bb5e:	f3bf 8f6f 	isb	sy
 800bb62:	f3bf 8f4f 	dsb	sy
 800bb66:	b662      	cpsie	i
 800bb68:	60fb      	str	r3, [r7, #12]
 800bb6a:	e7fe      	b.n	800bb6a <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800bb6c:	693b      	ldr	r3, [r7, #16]
 800bb6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d10b      	bne.n	800bb8c <xTaskPriorityDisinherit+0x58>
 800bb74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb78:	b672      	cpsid	i
 800bb7a:	f383 8811 	msr	BASEPRI, r3
 800bb7e:	f3bf 8f6f 	isb	sy
 800bb82:	f3bf 8f4f 	dsb	sy
 800bb86:	b662      	cpsie	i
 800bb88:	60bb      	str	r3, [r7, #8]
 800bb8a:	e7fe      	b.n	800bb8a <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800bb8c:	693b      	ldr	r3, [r7, #16]
 800bb8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb90:	1e5a      	subs	r2, r3, #1
 800bb92:	693b      	ldr	r3, [r7, #16]
 800bb94:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bb96:	693b      	ldr	r3, [r7, #16]
 800bb98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb9a:	693b      	ldr	r3, [r7, #16]
 800bb9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb9e:	429a      	cmp	r2, r3
 800bba0:	d02c      	beq.n	800bbfc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bba2:	693b      	ldr	r3, [r7, #16]
 800bba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d128      	bne.n	800bbfc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bbaa:	693b      	ldr	r3, [r7, #16]
 800bbac:	3304      	adds	r3, #4
 800bbae:	4618      	mov	r0, r3
 800bbb0:	f7fe f92e 	bl	8009e10 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bbb4:	693b      	ldr	r3, [r7, #16]
 800bbb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bbb8:	693b      	ldr	r3, [r7, #16]
 800bbba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bbbc:	693b      	ldr	r3, [r7, #16]
 800bbbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbc0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bbc4:	693b      	ldr	r3, [r7, #16]
 800bbc6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bbc8:	693b      	ldr	r3, [r7, #16]
 800bbca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbcc:	4b0f      	ldr	r3, [pc, #60]	; (800bc0c <xTaskPriorityDisinherit+0xd8>)
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	429a      	cmp	r2, r3
 800bbd2:	d903      	bls.n	800bbdc <xTaskPriorityDisinherit+0xa8>
 800bbd4:	693b      	ldr	r3, [r7, #16]
 800bbd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbd8:	4a0c      	ldr	r2, [pc, #48]	; (800bc0c <xTaskPriorityDisinherit+0xd8>)
 800bbda:	6013      	str	r3, [r2, #0]
 800bbdc:	693b      	ldr	r3, [r7, #16]
 800bbde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbe0:	4613      	mov	r3, r2
 800bbe2:	009b      	lsls	r3, r3, #2
 800bbe4:	4413      	add	r3, r2
 800bbe6:	009b      	lsls	r3, r3, #2
 800bbe8:	4a09      	ldr	r2, [pc, #36]	; (800bc10 <xTaskPriorityDisinherit+0xdc>)
 800bbea:	441a      	add	r2, r3
 800bbec:	693b      	ldr	r3, [r7, #16]
 800bbee:	3304      	adds	r3, #4
 800bbf0:	4619      	mov	r1, r3
 800bbf2:	4610      	mov	r0, r2
 800bbf4:	f7fe f8af 	bl	8009d56 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bbf8:	2301      	movs	r3, #1
 800bbfa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bbfc:	697b      	ldr	r3, [r7, #20]
	}
 800bbfe:	4618      	mov	r0, r3
 800bc00:	3718      	adds	r7, #24
 800bc02:	46bd      	mov	sp, r7
 800bc04:	bd80      	pop	{r7, pc}
 800bc06:	bf00      	nop
 800bc08:	2000097c 	.word	0x2000097c
 800bc0c:	20000e58 	.word	0x20000e58
 800bc10:	20000980 	.word	0x20000980

0800bc14 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b088      	sub	sp, #32
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
 800bc1c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bc22:	2301      	movs	r3, #1
 800bc24:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d06c      	beq.n	800bd06 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bc2c:	69bb      	ldr	r3, [r7, #24]
 800bc2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d10b      	bne.n	800bc4c <vTaskPriorityDisinheritAfterTimeout+0x38>
 800bc34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc38:	b672      	cpsid	i
 800bc3a:	f383 8811 	msr	BASEPRI, r3
 800bc3e:	f3bf 8f6f 	isb	sy
 800bc42:	f3bf 8f4f 	dsb	sy
 800bc46:	b662      	cpsie	i
 800bc48:	60fb      	str	r3, [r7, #12]
 800bc4a:	e7fe      	b.n	800bc4a <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bc4c:	69bb      	ldr	r3, [r7, #24]
 800bc4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc50:	683a      	ldr	r2, [r7, #0]
 800bc52:	429a      	cmp	r2, r3
 800bc54:	d902      	bls.n	800bc5c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	61fb      	str	r3, [r7, #28]
 800bc5a:	e002      	b.n	800bc62 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bc5c:	69bb      	ldr	r3, [r7, #24]
 800bc5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc60:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bc62:	69bb      	ldr	r3, [r7, #24]
 800bc64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc66:	69fa      	ldr	r2, [r7, #28]
 800bc68:	429a      	cmp	r2, r3
 800bc6a:	d04c      	beq.n	800bd06 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bc6c:	69bb      	ldr	r3, [r7, #24]
 800bc6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc70:	697a      	ldr	r2, [r7, #20]
 800bc72:	429a      	cmp	r2, r3
 800bc74:	d147      	bne.n	800bd06 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bc76:	4b26      	ldr	r3, [pc, #152]	; (800bd10 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	69ba      	ldr	r2, [r7, #24]
 800bc7c:	429a      	cmp	r2, r3
 800bc7e:	d10b      	bne.n	800bc98 <vTaskPriorityDisinheritAfterTimeout+0x84>
 800bc80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc84:	b672      	cpsid	i
 800bc86:	f383 8811 	msr	BASEPRI, r3
 800bc8a:	f3bf 8f6f 	isb	sy
 800bc8e:	f3bf 8f4f 	dsb	sy
 800bc92:	b662      	cpsie	i
 800bc94:	60bb      	str	r3, [r7, #8]
 800bc96:	e7fe      	b.n	800bc96 <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bc98:	69bb      	ldr	r3, [r7, #24]
 800bc9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc9c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bc9e:	69bb      	ldr	r3, [r7, #24]
 800bca0:	69fa      	ldr	r2, [r7, #28]
 800bca2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bca4:	69bb      	ldr	r3, [r7, #24]
 800bca6:	699b      	ldr	r3, [r3, #24]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	db04      	blt.n	800bcb6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bcac:	69fb      	ldr	r3, [r7, #28]
 800bcae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bcb2:	69bb      	ldr	r3, [r7, #24]
 800bcb4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bcb6:	69bb      	ldr	r3, [r7, #24]
 800bcb8:	6959      	ldr	r1, [r3, #20]
 800bcba:	693a      	ldr	r2, [r7, #16]
 800bcbc:	4613      	mov	r3, r2
 800bcbe:	009b      	lsls	r3, r3, #2
 800bcc0:	4413      	add	r3, r2
 800bcc2:	009b      	lsls	r3, r3, #2
 800bcc4:	4a13      	ldr	r2, [pc, #76]	; (800bd14 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bcc6:	4413      	add	r3, r2
 800bcc8:	4299      	cmp	r1, r3
 800bcca:	d11c      	bne.n	800bd06 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bccc:	69bb      	ldr	r3, [r7, #24]
 800bcce:	3304      	adds	r3, #4
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	f7fe f89d 	bl	8009e10 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bcd6:	69bb      	ldr	r3, [r7, #24]
 800bcd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcda:	4b0f      	ldr	r3, [pc, #60]	; (800bd18 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	429a      	cmp	r2, r3
 800bce0:	d903      	bls.n	800bcea <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800bce2:	69bb      	ldr	r3, [r7, #24]
 800bce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bce6:	4a0c      	ldr	r2, [pc, #48]	; (800bd18 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800bce8:	6013      	str	r3, [r2, #0]
 800bcea:	69bb      	ldr	r3, [r7, #24]
 800bcec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcee:	4613      	mov	r3, r2
 800bcf0:	009b      	lsls	r3, r3, #2
 800bcf2:	4413      	add	r3, r2
 800bcf4:	009b      	lsls	r3, r3, #2
 800bcf6:	4a07      	ldr	r2, [pc, #28]	; (800bd14 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bcf8:	441a      	add	r2, r3
 800bcfa:	69bb      	ldr	r3, [r7, #24]
 800bcfc:	3304      	adds	r3, #4
 800bcfe:	4619      	mov	r1, r3
 800bd00:	4610      	mov	r0, r2
 800bd02:	f7fe f828 	bl	8009d56 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bd06:	bf00      	nop
 800bd08:	3720      	adds	r7, #32
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	bd80      	pop	{r7, pc}
 800bd0e:	bf00      	nop
 800bd10:	2000097c 	.word	0x2000097c
 800bd14:	20000980 	.word	0x20000980
 800bd18:	20000e58 	.word	0x20000e58

0800bd1c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bd1c:	b480      	push	{r7}
 800bd1e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bd20:	4b07      	ldr	r3, [pc, #28]	; (800bd40 <pvTaskIncrementMutexHeldCount+0x24>)
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d004      	beq.n	800bd32 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bd28:	4b05      	ldr	r3, [pc, #20]	; (800bd40 <pvTaskIncrementMutexHeldCount+0x24>)
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bd2e:	3201      	adds	r2, #1
 800bd30:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800bd32:	4b03      	ldr	r3, [pc, #12]	; (800bd40 <pvTaskIncrementMutexHeldCount+0x24>)
 800bd34:	681b      	ldr	r3, [r3, #0]
	}
 800bd36:	4618      	mov	r0, r3
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3e:	4770      	bx	lr
 800bd40:	2000097c 	.word	0x2000097c

0800bd44 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b084      	sub	sp, #16
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
 800bd4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bd4e:	4b21      	ldr	r3, [pc, #132]	; (800bdd4 <prvAddCurrentTaskToDelayedList+0x90>)
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd54:	4b20      	ldr	r3, [pc, #128]	; (800bdd8 <prvAddCurrentTaskToDelayedList+0x94>)
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	3304      	adds	r3, #4
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	f7fe f858 	bl	8009e10 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd66:	d10a      	bne.n	800bd7e <prvAddCurrentTaskToDelayedList+0x3a>
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d007      	beq.n	800bd7e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bd6e:	4b1a      	ldr	r3, [pc, #104]	; (800bdd8 <prvAddCurrentTaskToDelayedList+0x94>)
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	3304      	adds	r3, #4
 800bd74:	4619      	mov	r1, r3
 800bd76:	4819      	ldr	r0, [pc, #100]	; (800bddc <prvAddCurrentTaskToDelayedList+0x98>)
 800bd78:	f7fd ffed 	bl	8009d56 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bd7c:	e026      	b.n	800bdcc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bd7e:	68fa      	ldr	r2, [r7, #12]
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	4413      	add	r3, r2
 800bd84:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bd86:	4b14      	ldr	r3, [pc, #80]	; (800bdd8 <prvAddCurrentTaskToDelayedList+0x94>)
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	68ba      	ldr	r2, [r7, #8]
 800bd8c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bd8e:	68ba      	ldr	r2, [r7, #8]
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	429a      	cmp	r2, r3
 800bd94:	d209      	bcs.n	800bdaa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bd96:	4b12      	ldr	r3, [pc, #72]	; (800bde0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bd98:	681a      	ldr	r2, [r3, #0]
 800bd9a:	4b0f      	ldr	r3, [pc, #60]	; (800bdd8 <prvAddCurrentTaskToDelayedList+0x94>)
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	3304      	adds	r3, #4
 800bda0:	4619      	mov	r1, r3
 800bda2:	4610      	mov	r0, r2
 800bda4:	f7fd fffb 	bl	8009d9e <vListInsert>
}
 800bda8:	e010      	b.n	800bdcc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bdaa:	4b0e      	ldr	r3, [pc, #56]	; (800bde4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bdac:	681a      	ldr	r2, [r3, #0]
 800bdae:	4b0a      	ldr	r3, [pc, #40]	; (800bdd8 <prvAddCurrentTaskToDelayedList+0x94>)
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	3304      	adds	r3, #4
 800bdb4:	4619      	mov	r1, r3
 800bdb6:	4610      	mov	r0, r2
 800bdb8:	f7fd fff1 	bl	8009d9e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bdbc:	4b0a      	ldr	r3, [pc, #40]	; (800bde8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	68ba      	ldr	r2, [r7, #8]
 800bdc2:	429a      	cmp	r2, r3
 800bdc4:	d202      	bcs.n	800bdcc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bdc6:	4a08      	ldr	r2, [pc, #32]	; (800bde8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bdc8:	68bb      	ldr	r3, [r7, #8]
 800bdca:	6013      	str	r3, [r2, #0]
}
 800bdcc:	bf00      	nop
 800bdce:	3710      	adds	r7, #16
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	bd80      	pop	{r7, pc}
 800bdd4:	20000e54 	.word	0x20000e54
 800bdd8:	2000097c 	.word	0x2000097c
 800bddc:	20000e3c 	.word	0x20000e3c
 800bde0:	20000e0c 	.word	0x20000e0c
 800bde4:	20000e08 	.word	0x20000e08
 800bde8:	20000e70 	.word	0x20000e70

0800bdec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b08a      	sub	sp, #40	; 0x28
 800bdf0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bdf6:	f000 fb0d 	bl	800c414 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bdfa:	4b1d      	ldr	r3, [pc, #116]	; (800be70 <xTimerCreateTimerTask+0x84>)
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d021      	beq.n	800be46 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800be02:	2300      	movs	r3, #0
 800be04:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800be06:	2300      	movs	r3, #0
 800be08:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800be0a:	1d3a      	adds	r2, r7, #4
 800be0c:	f107 0108 	add.w	r1, r7, #8
 800be10:	f107 030c 	add.w	r3, r7, #12
 800be14:	4618      	mov	r0, r3
 800be16:	f7fd ff57 	bl	8009cc8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800be1a:	6879      	ldr	r1, [r7, #4]
 800be1c:	68bb      	ldr	r3, [r7, #8]
 800be1e:	68fa      	ldr	r2, [r7, #12]
 800be20:	9202      	str	r2, [sp, #8]
 800be22:	9301      	str	r3, [sp, #4]
 800be24:	2302      	movs	r3, #2
 800be26:	9300      	str	r3, [sp, #0]
 800be28:	2300      	movs	r3, #0
 800be2a:	460a      	mov	r2, r1
 800be2c:	4911      	ldr	r1, [pc, #68]	; (800be74 <xTimerCreateTimerTask+0x88>)
 800be2e:	4812      	ldr	r0, [pc, #72]	; (800be78 <xTimerCreateTimerTask+0x8c>)
 800be30:	f7fe ff30 	bl	800ac94 <xTaskCreateStatic>
 800be34:	4602      	mov	r2, r0
 800be36:	4b11      	ldr	r3, [pc, #68]	; (800be7c <xTimerCreateTimerTask+0x90>)
 800be38:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800be3a:	4b10      	ldr	r3, [pc, #64]	; (800be7c <xTimerCreateTimerTask+0x90>)
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d001      	beq.n	800be46 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800be42:	2301      	movs	r3, #1
 800be44:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800be46:	697b      	ldr	r3, [r7, #20]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d10b      	bne.n	800be64 <xTimerCreateTimerTask+0x78>
 800be4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be50:	b672      	cpsid	i
 800be52:	f383 8811 	msr	BASEPRI, r3
 800be56:	f3bf 8f6f 	isb	sy
 800be5a:	f3bf 8f4f 	dsb	sy
 800be5e:	b662      	cpsie	i
 800be60:	613b      	str	r3, [r7, #16]
 800be62:	e7fe      	b.n	800be62 <xTimerCreateTimerTask+0x76>
	return xReturn;
 800be64:	697b      	ldr	r3, [r7, #20]
}
 800be66:	4618      	mov	r0, r3
 800be68:	3718      	adds	r7, #24
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bd80      	pop	{r7, pc}
 800be6e:	bf00      	nop
 800be70:	20000eac 	.word	0x20000eac
 800be74:	0800f2c8 	.word	0x0800f2c8
 800be78:	0800bfb9 	.word	0x0800bfb9
 800be7c:	20000eb0 	.word	0x20000eb0

0800be80 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b08a      	sub	sp, #40	; 0x28
 800be84:	af00      	add	r7, sp, #0
 800be86:	60f8      	str	r0, [r7, #12]
 800be88:	60b9      	str	r1, [r7, #8]
 800be8a:	607a      	str	r2, [r7, #4]
 800be8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800be8e:	2300      	movs	r3, #0
 800be90:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d10b      	bne.n	800beb0 <xTimerGenericCommand+0x30>
 800be98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be9c:	b672      	cpsid	i
 800be9e:	f383 8811 	msr	BASEPRI, r3
 800bea2:	f3bf 8f6f 	isb	sy
 800bea6:	f3bf 8f4f 	dsb	sy
 800beaa:	b662      	cpsie	i
 800beac:	623b      	str	r3, [r7, #32]
 800beae:	e7fe      	b.n	800beae <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800beb0:	4b19      	ldr	r3, [pc, #100]	; (800bf18 <xTimerGenericCommand+0x98>)
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d02a      	beq.n	800bf0e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800beb8:	68bb      	ldr	r3, [r7, #8]
 800beba:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bec4:	68bb      	ldr	r3, [r7, #8]
 800bec6:	2b05      	cmp	r3, #5
 800bec8:	dc18      	bgt.n	800befc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800beca:	f7ff fdad 	bl	800ba28 <xTaskGetSchedulerState>
 800bece:	4603      	mov	r3, r0
 800bed0:	2b02      	cmp	r3, #2
 800bed2:	d109      	bne.n	800bee8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bed4:	4b10      	ldr	r3, [pc, #64]	; (800bf18 <xTimerGenericCommand+0x98>)
 800bed6:	6818      	ldr	r0, [r3, #0]
 800bed8:	f107 0110 	add.w	r1, r7, #16
 800bedc:	2300      	movs	r3, #0
 800bede:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bee0:	f7fe f9c4 	bl	800a26c <xQueueGenericSend>
 800bee4:	6278      	str	r0, [r7, #36]	; 0x24
 800bee6:	e012      	b.n	800bf0e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bee8:	4b0b      	ldr	r3, [pc, #44]	; (800bf18 <xTimerGenericCommand+0x98>)
 800beea:	6818      	ldr	r0, [r3, #0]
 800beec:	f107 0110 	add.w	r1, r7, #16
 800bef0:	2300      	movs	r3, #0
 800bef2:	2200      	movs	r2, #0
 800bef4:	f7fe f9ba 	bl	800a26c <xQueueGenericSend>
 800bef8:	6278      	str	r0, [r7, #36]	; 0x24
 800befa:	e008      	b.n	800bf0e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800befc:	4b06      	ldr	r3, [pc, #24]	; (800bf18 <xTimerGenericCommand+0x98>)
 800befe:	6818      	ldr	r0, [r3, #0]
 800bf00:	f107 0110 	add.w	r1, r7, #16
 800bf04:	2300      	movs	r3, #0
 800bf06:	683a      	ldr	r2, [r7, #0]
 800bf08:	f7fe fab2 	bl	800a470 <xQueueGenericSendFromISR>
 800bf0c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bf0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bf10:	4618      	mov	r0, r3
 800bf12:	3728      	adds	r7, #40	; 0x28
 800bf14:	46bd      	mov	sp, r7
 800bf16:	bd80      	pop	{r7, pc}
 800bf18:	20000eac 	.word	0x20000eac

0800bf1c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b088      	sub	sp, #32
 800bf20:	af02      	add	r7, sp, #8
 800bf22:	6078      	str	r0, [r7, #4]
 800bf24:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf26:	4b23      	ldr	r3, [pc, #140]	; (800bfb4 <prvProcessExpiredTimer+0x98>)
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	68db      	ldr	r3, [r3, #12]
 800bf2c:	68db      	ldr	r3, [r3, #12]
 800bf2e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bf30:	697b      	ldr	r3, [r7, #20]
 800bf32:	3304      	adds	r3, #4
 800bf34:	4618      	mov	r0, r3
 800bf36:	f7fd ff6b 	bl	8009e10 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bf3a:	697b      	ldr	r3, [r7, #20]
 800bf3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf40:	f003 0304 	and.w	r3, r3, #4
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d023      	beq.n	800bf90 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bf48:	697b      	ldr	r3, [r7, #20]
 800bf4a:	699a      	ldr	r2, [r3, #24]
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	18d1      	adds	r1, r2, r3
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	683a      	ldr	r2, [r7, #0]
 800bf54:	6978      	ldr	r0, [r7, #20]
 800bf56:	f000 f8d3 	bl	800c100 <prvInsertTimerInActiveList>
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d020      	beq.n	800bfa2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bf60:	2300      	movs	r3, #0
 800bf62:	9300      	str	r3, [sp, #0]
 800bf64:	2300      	movs	r3, #0
 800bf66:	687a      	ldr	r2, [r7, #4]
 800bf68:	2100      	movs	r1, #0
 800bf6a:	6978      	ldr	r0, [r7, #20]
 800bf6c:	f7ff ff88 	bl	800be80 <xTimerGenericCommand>
 800bf70:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bf72:	693b      	ldr	r3, [r7, #16]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d114      	bne.n	800bfa2 <prvProcessExpiredTimer+0x86>
 800bf78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf7c:	b672      	cpsid	i
 800bf7e:	f383 8811 	msr	BASEPRI, r3
 800bf82:	f3bf 8f6f 	isb	sy
 800bf86:	f3bf 8f4f 	dsb	sy
 800bf8a:	b662      	cpsie	i
 800bf8c:	60fb      	str	r3, [r7, #12]
 800bf8e:	e7fe      	b.n	800bf8e <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bf90:	697b      	ldr	r3, [r7, #20]
 800bf92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf96:	f023 0301 	bic.w	r3, r3, #1
 800bf9a:	b2da      	uxtb	r2, r3
 800bf9c:	697b      	ldr	r3, [r7, #20]
 800bf9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bfa2:	697b      	ldr	r3, [r7, #20]
 800bfa4:	6a1b      	ldr	r3, [r3, #32]
 800bfa6:	6978      	ldr	r0, [r7, #20]
 800bfa8:	4798      	blx	r3
}
 800bfaa:	bf00      	nop
 800bfac:	3718      	adds	r7, #24
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	bd80      	pop	{r7, pc}
 800bfb2:	bf00      	nop
 800bfb4:	20000ea4 	.word	0x20000ea4

0800bfb8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b084      	sub	sp, #16
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bfc0:	f107 0308 	add.w	r3, r7, #8
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	f000 f857 	bl	800c078 <prvGetNextExpireTime>
 800bfca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bfcc:	68bb      	ldr	r3, [r7, #8]
 800bfce:	4619      	mov	r1, r3
 800bfd0:	68f8      	ldr	r0, [r7, #12]
 800bfd2:	f000 f803 	bl	800bfdc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bfd6:	f000 f8d5 	bl	800c184 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bfda:	e7f1      	b.n	800bfc0 <prvTimerTask+0x8>

0800bfdc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b084      	sub	sp, #16
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
 800bfe4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bfe6:	f7ff f919 	bl	800b21c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bfea:	f107 0308 	add.w	r3, r7, #8
 800bfee:	4618      	mov	r0, r3
 800bff0:	f000 f866 	bl	800c0c0 <prvSampleTimeNow>
 800bff4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bff6:	68bb      	ldr	r3, [r7, #8]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d130      	bne.n	800c05e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d10a      	bne.n	800c018 <prvProcessTimerOrBlockTask+0x3c>
 800c002:	687a      	ldr	r2, [r7, #4]
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	429a      	cmp	r2, r3
 800c008:	d806      	bhi.n	800c018 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c00a:	f7ff f915 	bl	800b238 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c00e:	68f9      	ldr	r1, [r7, #12]
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	f7ff ff83 	bl	800bf1c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c016:	e024      	b.n	800c062 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c018:	683b      	ldr	r3, [r7, #0]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d008      	beq.n	800c030 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c01e:	4b13      	ldr	r3, [pc, #76]	; (800c06c <prvProcessTimerOrBlockTask+0x90>)
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d101      	bne.n	800c02c <prvProcessTimerOrBlockTask+0x50>
 800c028:	2301      	movs	r3, #1
 800c02a:	e000      	b.n	800c02e <prvProcessTimerOrBlockTask+0x52>
 800c02c:	2300      	movs	r3, #0
 800c02e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c030:	4b0f      	ldr	r3, [pc, #60]	; (800c070 <prvProcessTimerOrBlockTask+0x94>)
 800c032:	6818      	ldr	r0, [r3, #0]
 800c034:	687a      	ldr	r2, [r7, #4]
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	1ad3      	subs	r3, r2, r3
 800c03a:	683a      	ldr	r2, [r7, #0]
 800c03c:	4619      	mov	r1, r3
 800c03e:	f7fe fdf5 	bl	800ac2c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c042:	f7ff f8f9 	bl	800b238 <xTaskResumeAll>
 800c046:	4603      	mov	r3, r0
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d10a      	bne.n	800c062 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c04c:	4b09      	ldr	r3, [pc, #36]	; (800c074 <prvProcessTimerOrBlockTask+0x98>)
 800c04e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c052:	601a      	str	r2, [r3, #0]
 800c054:	f3bf 8f4f 	dsb	sy
 800c058:	f3bf 8f6f 	isb	sy
}
 800c05c:	e001      	b.n	800c062 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c05e:	f7ff f8eb 	bl	800b238 <xTaskResumeAll>
}
 800c062:	bf00      	nop
 800c064:	3710      	adds	r7, #16
 800c066:	46bd      	mov	sp, r7
 800c068:	bd80      	pop	{r7, pc}
 800c06a:	bf00      	nop
 800c06c:	20000ea8 	.word	0x20000ea8
 800c070:	20000eac 	.word	0x20000eac
 800c074:	e000ed04 	.word	0xe000ed04

0800c078 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c078:	b480      	push	{r7}
 800c07a:	b085      	sub	sp, #20
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c080:	4b0e      	ldr	r3, [pc, #56]	; (800c0bc <prvGetNextExpireTime+0x44>)
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d101      	bne.n	800c08e <prvGetNextExpireTime+0x16>
 800c08a:	2201      	movs	r2, #1
 800c08c:	e000      	b.n	800c090 <prvGetNextExpireTime+0x18>
 800c08e:	2200      	movs	r2, #0
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d105      	bne.n	800c0a8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c09c:	4b07      	ldr	r3, [pc, #28]	; (800c0bc <prvGetNextExpireTime+0x44>)
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	68db      	ldr	r3, [r3, #12]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	60fb      	str	r3, [r7, #12]
 800c0a6:	e001      	b.n	800c0ac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c0ac:	68fb      	ldr	r3, [r7, #12]
}
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	3714      	adds	r7, #20
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b8:	4770      	bx	lr
 800c0ba:	bf00      	nop
 800c0bc:	20000ea4 	.word	0x20000ea4

0800c0c0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b084      	sub	sp, #16
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c0c8:	f7ff f954 	bl	800b374 <xTaskGetTickCount>
 800c0cc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c0ce:	4b0b      	ldr	r3, [pc, #44]	; (800c0fc <prvSampleTimeNow+0x3c>)
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	68fa      	ldr	r2, [r7, #12]
 800c0d4:	429a      	cmp	r2, r3
 800c0d6:	d205      	bcs.n	800c0e4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c0d8:	f000 f936 	bl	800c348 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	2201      	movs	r2, #1
 800c0e0:	601a      	str	r2, [r3, #0]
 800c0e2:	e002      	b.n	800c0ea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c0ea:	4a04      	ldr	r2, [pc, #16]	; (800c0fc <prvSampleTimeNow+0x3c>)
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c0f0:	68fb      	ldr	r3, [r7, #12]
}
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	3710      	adds	r7, #16
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	bd80      	pop	{r7, pc}
 800c0fa:	bf00      	nop
 800c0fc:	20000eb4 	.word	0x20000eb4

0800c100 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b086      	sub	sp, #24
 800c104:	af00      	add	r7, sp, #0
 800c106:	60f8      	str	r0, [r7, #12]
 800c108:	60b9      	str	r1, [r7, #8]
 800c10a:	607a      	str	r2, [r7, #4]
 800c10c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c10e:	2300      	movs	r3, #0
 800c110:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	68ba      	ldr	r2, [r7, #8]
 800c116:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	68fa      	ldr	r2, [r7, #12]
 800c11c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c11e:	68ba      	ldr	r2, [r7, #8]
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	429a      	cmp	r2, r3
 800c124:	d812      	bhi.n	800c14c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c126:	687a      	ldr	r2, [r7, #4]
 800c128:	683b      	ldr	r3, [r7, #0]
 800c12a:	1ad2      	subs	r2, r2, r3
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	699b      	ldr	r3, [r3, #24]
 800c130:	429a      	cmp	r2, r3
 800c132:	d302      	bcc.n	800c13a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c134:	2301      	movs	r3, #1
 800c136:	617b      	str	r3, [r7, #20]
 800c138:	e01b      	b.n	800c172 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c13a:	4b10      	ldr	r3, [pc, #64]	; (800c17c <prvInsertTimerInActiveList+0x7c>)
 800c13c:	681a      	ldr	r2, [r3, #0]
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	3304      	adds	r3, #4
 800c142:	4619      	mov	r1, r3
 800c144:	4610      	mov	r0, r2
 800c146:	f7fd fe2a 	bl	8009d9e <vListInsert>
 800c14a:	e012      	b.n	800c172 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c14c:	687a      	ldr	r2, [r7, #4]
 800c14e:	683b      	ldr	r3, [r7, #0]
 800c150:	429a      	cmp	r2, r3
 800c152:	d206      	bcs.n	800c162 <prvInsertTimerInActiveList+0x62>
 800c154:	68ba      	ldr	r2, [r7, #8]
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	429a      	cmp	r2, r3
 800c15a:	d302      	bcc.n	800c162 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c15c:	2301      	movs	r3, #1
 800c15e:	617b      	str	r3, [r7, #20]
 800c160:	e007      	b.n	800c172 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c162:	4b07      	ldr	r3, [pc, #28]	; (800c180 <prvInsertTimerInActiveList+0x80>)
 800c164:	681a      	ldr	r2, [r3, #0]
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	3304      	adds	r3, #4
 800c16a:	4619      	mov	r1, r3
 800c16c:	4610      	mov	r0, r2
 800c16e:	f7fd fe16 	bl	8009d9e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c172:	697b      	ldr	r3, [r7, #20]
}
 800c174:	4618      	mov	r0, r3
 800c176:	3718      	adds	r7, #24
 800c178:	46bd      	mov	sp, r7
 800c17a:	bd80      	pop	{r7, pc}
 800c17c:	20000ea8 	.word	0x20000ea8
 800c180:	20000ea4 	.word	0x20000ea4

0800c184 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b08e      	sub	sp, #56	; 0x38
 800c188:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c18a:	e0cc      	b.n	800c326 <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	da19      	bge.n	800c1c6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c192:	1d3b      	adds	r3, r7, #4
 800c194:	3304      	adds	r3, #4
 800c196:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d10b      	bne.n	800c1b6 <prvProcessReceivedCommands+0x32>
 800c19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1a2:	b672      	cpsid	i
 800c1a4:	f383 8811 	msr	BASEPRI, r3
 800c1a8:	f3bf 8f6f 	isb	sy
 800c1ac:	f3bf 8f4f 	dsb	sy
 800c1b0:	b662      	cpsie	i
 800c1b2:	61fb      	str	r3, [r7, #28]
 800c1b4:	e7fe      	b.n	800c1b4 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c1b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c1bc:	6850      	ldr	r0, [r2, #4]
 800c1be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c1c0:	6892      	ldr	r2, [r2, #8]
 800c1c2:	4611      	mov	r1, r2
 800c1c4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	f2c0 80ab 	blt.w	800c324 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1d4:	695b      	ldr	r3, [r3, #20]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d004      	beq.n	800c1e4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c1da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1dc:	3304      	adds	r3, #4
 800c1de:	4618      	mov	r0, r3
 800c1e0:	f7fd fe16 	bl	8009e10 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c1e4:	463b      	mov	r3, r7
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f7ff ff6a 	bl	800c0c0 <prvSampleTimeNow>
 800c1ec:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	2b09      	cmp	r3, #9
 800c1f2:	f200 8098 	bhi.w	800c326 <prvProcessReceivedCommands+0x1a2>
 800c1f6:	a201      	add	r2, pc, #4	; (adr r2, 800c1fc <prvProcessReceivedCommands+0x78>)
 800c1f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1fc:	0800c225 	.word	0x0800c225
 800c200:	0800c225 	.word	0x0800c225
 800c204:	0800c225 	.word	0x0800c225
 800c208:	0800c29b 	.word	0x0800c29b
 800c20c:	0800c2af 	.word	0x0800c2af
 800c210:	0800c2fb 	.word	0x0800c2fb
 800c214:	0800c225 	.word	0x0800c225
 800c218:	0800c225 	.word	0x0800c225
 800c21c:	0800c29b 	.word	0x0800c29b
 800c220:	0800c2af 	.word	0x0800c2af
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c226:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c22a:	f043 0301 	orr.w	r3, r3, #1
 800c22e:	b2da      	uxtb	r2, r3
 800c230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c232:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c236:	68ba      	ldr	r2, [r7, #8]
 800c238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c23a:	699b      	ldr	r3, [r3, #24]
 800c23c:	18d1      	adds	r1, r2, r3
 800c23e:	68bb      	ldr	r3, [r7, #8]
 800c240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c242:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c244:	f7ff ff5c 	bl	800c100 <prvInsertTimerInActiveList>
 800c248:	4603      	mov	r3, r0
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d06b      	beq.n	800c326 <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c24e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c250:	6a1b      	ldr	r3, [r3, #32]
 800c252:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c254:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c258:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c25c:	f003 0304 	and.w	r3, r3, #4
 800c260:	2b00      	cmp	r3, #0
 800c262:	d060      	beq.n	800c326 <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c264:	68ba      	ldr	r2, [r7, #8]
 800c266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c268:	699b      	ldr	r3, [r3, #24]
 800c26a:	441a      	add	r2, r3
 800c26c:	2300      	movs	r3, #0
 800c26e:	9300      	str	r3, [sp, #0]
 800c270:	2300      	movs	r3, #0
 800c272:	2100      	movs	r1, #0
 800c274:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c276:	f7ff fe03 	bl	800be80 <xTimerGenericCommand>
 800c27a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c27c:	6a3b      	ldr	r3, [r7, #32]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d151      	bne.n	800c326 <prvProcessReceivedCommands+0x1a2>
 800c282:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c286:	b672      	cpsid	i
 800c288:	f383 8811 	msr	BASEPRI, r3
 800c28c:	f3bf 8f6f 	isb	sy
 800c290:	f3bf 8f4f 	dsb	sy
 800c294:	b662      	cpsie	i
 800c296:	61bb      	str	r3, [r7, #24]
 800c298:	e7fe      	b.n	800c298 <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c29a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c29c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c2a0:	f023 0301 	bic.w	r3, r3, #1
 800c2a4:	b2da      	uxtb	r2, r3
 800c2a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c2ac:	e03b      	b.n	800c326 <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c2ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c2b4:	f043 0301 	orr.w	r3, r3, #1
 800c2b8:	b2da      	uxtb	r2, r3
 800c2ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c2c0:	68ba      	ldr	r2, [r7, #8]
 800c2c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2c4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c2c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2c8:	699b      	ldr	r3, [r3, #24]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d10b      	bne.n	800c2e6 <prvProcessReceivedCommands+0x162>
 800c2ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2d2:	b672      	cpsid	i
 800c2d4:	f383 8811 	msr	BASEPRI, r3
 800c2d8:	f3bf 8f6f 	isb	sy
 800c2dc:	f3bf 8f4f 	dsb	sy
 800c2e0:	b662      	cpsie	i
 800c2e2:	617b      	str	r3, [r7, #20]
 800c2e4:	e7fe      	b.n	800c2e4 <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c2e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2e8:	699a      	ldr	r2, [r3, #24]
 800c2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ec:	18d1      	adds	r1, r2, r3
 800c2ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2f4:	f7ff ff04 	bl	800c100 <prvInsertTimerInActiveList>
					break;
 800c2f8:	e015      	b.n	800c326 <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c2fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c300:	f003 0302 	and.w	r3, r3, #2
 800c304:	2b00      	cmp	r3, #0
 800c306:	d103      	bne.n	800c310 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c308:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c30a:	f000 fbb7 	bl	800ca7c <vPortFree>
 800c30e:	e00a      	b.n	800c326 <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c312:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c316:	f023 0301 	bic.w	r3, r3, #1
 800c31a:	b2da      	uxtb	r2, r3
 800c31c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c31e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c322:	e000      	b.n	800c326 <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c324:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c326:	4b07      	ldr	r3, [pc, #28]	; (800c344 <prvProcessReceivedCommands+0x1c0>)
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	1d39      	adds	r1, r7, #4
 800c32c:	2200      	movs	r2, #0
 800c32e:	4618      	mov	r0, r3
 800c330:	f7fe f93a 	bl	800a5a8 <xQueueReceive>
 800c334:	4603      	mov	r3, r0
 800c336:	2b00      	cmp	r3, #0
 800c338:	f47f af28 	bne.w	800c18c <prvProcessReceivedCommands+0x8>
	}
}
 800c33c:	bf00      	nop
 800c33e:	3730      	adds	r7, #48	; 0x30
 800c340:	46bd      	mov	sp, r7
 800c342:	bd80      	pop	{r7, pc}
 800c344:	20000eac 	.word	0x20000eac

0800c348 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b088      	sub	sp, #32
 800c34c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c34e:	e049      	b.n	800c3e4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c350:	4b2e      	ldr	r3, [pc, #184]	; (800c40c <prvSwitchTimerLists+0xc4>)
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	68db      	ldr	r3, [r3, #12]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c35a:	4b2c      	ldr	r3, [pc, #176]	; (800c40c <prvSwitchTimerLists+0xc4>)
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	68db      	ldr	r3, [r3, #12]
 800c360:	68db      	ldr	r3, [r3, #12]
 800c362:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	3304      	adds	r3, #4
 800c368:	4618      	mov	r0, r3
 800c36a:	f7fd fd51 	bl	8009e10 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	6a1b      	ldr	r3, [r3, #32]
 800c372:	68f8      	ldr	r0, [r7, #12]
 800c374:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c37c:	f003 0304 	and.w	r3, r3, #4
 800c380:	2b00      	cmp	r3, #0
 800c382:	d02f      	beq.n	800c3e4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	699b      	ldr	r3, [r3, #24]
 800c388:	693a      	ldr	r2, [r7, #16]
 800c38a:	4413      	add	r3, r2
 800c38c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c38e:	68ba      	ldr	r2, [r7, #8]
 800c390:	693b      	ldr	r3, [r7, #16]
 800c392:	429a      	cmp	r2, r3
 800c394:	d90e      	bls.n	800c3b4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	68ba      	ldr	r2, [r7, #8]
 800c39a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	68fa      	ldr	r2, [r7, #12]
 800c3a0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c3a2:	4b1a      	ldr	r3, [pc, #104]	; (800c40c <prvSwitchTimerLists+0xc4>)
 800c3a4:	681a      	ldr	r2, [r3, #0]
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	3304      	adds	r3, #4
 800c3aa:	4619      	mov	r1, r3
 800c3ac:	4610      	mov	r0, r2
 800c3ae:	f7fd fcf6 	bl	8009d9e <vListInsert>
 800c3b2:	e017      	b.n	800c3e4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	9300      	str	r3, [sp, #0]
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	693a      	ldr	r2, [r7, #16]
 800c3bc:	2100      	movs	r1, #0
 800c3be:	68f8      	ldr	r0, [r7, #12]
 800c3c0:	f7ff fd5e 	bl	800be80 <xTimerGenericCommand>
 800c3c4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d10b      	bne.n	800c3e4 <prvSwitchTimerLists+0x9c>
 800c3cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3d0:	b672      	cpsid	i
 800c3d2:	f383 8811 	msr	BASEPRI, r3
 800c3d6:	f3bf 8f6f 	isb	sy
 800c3da:	f3bf 8f4f 	dsb	sy
 800c3de:	b662      	cpsie	i
 800c3e0:	603b      	str	r3, [r7, #0]
 800c3e2:	e7fe      	b.n	800c3e2 <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c3e4:	4b09      	ldr	r3, [pc, #36]	; (800c40c <prvSwitchTimerLists+0xc4>)
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d1b0      	bne.n	800c350 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c3ee:	4b07      	ldr	r3, [pc, #28]	; (800c40c <prvSwitchTimerLists+0xc4>)
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c3f4:	4b06      	ldr	r3, [pc, #24]	; (800c410 <prvSwitchTimerLists+0xc8>)
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	4a04      	ldr	r2, [pc, #16]	; (800c40c <prvSwitchTimerLists+0xc4>)
 800c3fa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c3fc:	4a04      	ldr	r2, [pc, #16]	; (800c410 <prvSwitchTimerLists+0xc8>)
 800c3fe:	697b      	ldr	r3, [r7, #20]
 800c400:	6013      	str	r3, [r2, #0]
}
 800c402:	bf00      	nop
 800c404:	3718      	adds	r7, #24
 800c406:	46bd      	mov	sp, r7
 800c408:	bd80      	pop	{r7, pc}
 800c40a:	bf00      	nop
 800c40c:	20000ea4 	.word	0x20000ea4
 800c410:	20000ea8 	.word	0x20000ea8

0800c414 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b082      	sub	sp, #8
 800c418:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c41a:	f000 f945 	bl	800c6a8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c41e:	4b15      	ldr	r3, [pc, #84]	; (800c474 <prvCheckForValidListAndQueue+0x60>)
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d120      	bne.n	800c468 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c426:	4814      	ldr	r0, [pc, #80]	; (800c478 <prvCheckForValidListAndQueue+0x64>)
 800c428:	f7fd fc68 	bl	8009cfc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c42c:	4813      	ldr	r0, [pc, #76]	; (800c47c <prvCheckForValidListAndQueue+0x68>)
 800c42e:	f7fd fc65 	bl	8009cfc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c432:	4b13      	ldr	r3, [pc, #76]	; (800c480 <prvCheckForValidListAndQueue+0x6c>)
 800c434:	4a10      	ldr	r2, [pc, #64]	; (800c478 <prvCheckForValidListAndQueue+0x64>)
 800c436:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c438:	4b12      	ldr	r3, [pc, #72]	; (800c484 <prvCheckForValidListAndQueue+0x70>)
 800c43a:	4a10      	ldr	r2, [pc, #64]	; (800c47c <prvCheckForValidListAndQueue+0x68>)
 800c43c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c43e:	2300      	movs	r3, #0
 800c440:	9300      	str	r3, [sp, #0]
 800c442:	4b11      	ldr	r3, [pc, #68]	; (800c488 <prvCheckForValidListAndQueue+0x74>)
 800c444:	4a11      	ldr	r2, [pc, #68]	; (800c48c <prvCheckForValidListAndQueue+0x78>)
 800c446:	2110      	movs	r1, #16
 800c448:	200a      	movs	r0, #10
 800c44a:	f7fd fd75 	bl	8009f38 <xQueueGenericCreateStatic>
 800c44e:	4602      	mov	r2, r0
 800c450:	4b08      	ldr	r3, [pc, #32]	; (800c474 <prvCheckForValidListAndQueue+0x60>)
 800c452:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c454:	4b07      	ldr	r3, [pc, #28]	; (800c474 <prvCheckForValidListAndQueue+0x60>)
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d005      	beq.n	800c468 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c45c:	4b05      	ldr	r3, [pc, #20]	; (800c474 <prvCheckForValidListAndQueue+0x60>)
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	490b      	ldr	r1, [pc, #44]	; (800c490 <prvCheckForValidListAndQueue+0x7c>)
 800c462:	4618      	mov	r0, r3
 800c464:	f7fe fbba 	bl	800abdc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c468:	f000 f950 	bl	800c70c <vPortExitCritical>
}
 800c46c:	bf00      	nop
 800c46e:	46bd      	mov	sp, r7
 800c470:	bd80      	pop	{r7, pc}
 800c472:	bf00      	nop
 800c474:	20000eac 	.word	0x20000eac
 800c478:	20000e7c 	.word	0x20000e7c
 800c47c:	20000e90 	.word	0x20000e90
 800c480:	20000ea4 	.word	0x20000ea4
 800c484:	20000ea8 	.word	0x20000ea8
 800c488:	20000f58 	.word	0x20000f58
 800c48c:	20000eb8 	.word	0x20000eb8
 800c490:	0800f2d0 	.word	0x0800f2d0

0800c494 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c494:	b480      	push	{r7}
 800c496:	b085      	sub	sp, #20
 800c498:	af00      	add	r7, sp, #0
 800c49a:	60f8      	str	r0, [r7, #12]
 800c49c:	60b9      	str	r1, [r7, #8]
 800c49e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	3b04      	subs	r3, #4
 800c4a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c4ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	3b04      	subs	r3, #4
 800c4b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c4b4:	68bb      	ldr	r3, [r7, #8]
 800c4b6:	f023 0201 	bic.w	r2, r3, #1
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	3b04      	subs	r3, #4
 800c4c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c4c4:	4a0c      	ldr	r2, [pc, #48]	; (800c4f8 <pxPortInitialiseStack+0x64>)
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	3b14      	subs	r3, #20
 800c4ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c4d0:	687a      	ldr	r2, [r7, #4]
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	3b04      	subs	r3, #4
 800c4da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	f06f 0202 	mvn.w	r2, #2
 800c4e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	3b20      	subs	r3, #32
 800c4e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c4ea:	68fb      	ldr	r3, [r7, #12]
}
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	3714      	adds	r7, #20
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f6:	4770      	bx	lr
 800c4f8:	0800c4fd 	.word	0x0800c4fd

0800c4fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c4fc:	b480      	push	{r7}
 800c4fe:	b085      	sub	sp, #20
 800c500:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c502:	2300      	movs	r3, #0
 800c504:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c506:	4b13      	ldr	r3, [pc, #76]	; (800c554 <prvTaskExitError+0x58>)
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c50e:	d00b      	beq.n	800c528 <prvTaskExitError+0x2c>
 800c510:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c514:	b672      	cpsid	i
 800c516:	f383 8811 	msr	BASEPRI, r3
 800c51a:	f3bf 8f6f 	isb	sy
 800c51e:	f3bf 8f4f 	dsb	sy
 800c522:	b662      	cpsie	i
 800c524:	60fb      	str	r3, [r7, #12]
 800c526:	e7fe      	b.n	800c526 <prvTaskExitError+0x2a>
 800c528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c52c:	b672      	cpsid	i
 800c52e:	f383 8811 	msr	BASEPRI, r3
 800c532:	f3bf 8f6f 	isb	sy
 800c536:	f3bf 8f4f 	dsb	sy
 800c53a:	b662      	cpsie	i
 800c53c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c53e:	bf00      	nop
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d0fc      	beq.n	800c540 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c546:	bf00      	nop
 800c548:	3714      	adds	r7, #20
 800c54a:	46bd      	mov	sp, r7
 800c54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c550:	4770      	bx	lr
 800c552:	bf00      	nop
 800c554:	2000011c 	.word	0x2000011c
	...

0800c560 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c560:	4b07      	ldr	r3, [pc, #28]	; (800c580 <pxCurrentTCBConst2>)
 800c562:	6819      	ldr	r1, [r3, #0]
 800c564:	6808      	ldr	r0, [r1, #0]
 800c566:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c56a:	f380 8809 	msr	PSP, r0
 800c56e:	f3bf 8f6f 	isb	sy
 800c572:	f04f 0000 	mov.w	r0, #0
 800c576:	f380 8811 	msr	BASEPRI, r0
 800c57a:	4770      	bx	lr
 800c57c:	f3af 8000 	nop.w

0800c580 <pxCurrentTCBConst2>:
 800c580:	2000097c 	.word	0x2000097c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c584:	bf00      	nop
 800c586:	bf00      	nop

0800c588 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c588:	4808      	ldr	r0, [pc, #32]	; (800c5ac <prvPortStartFirstTask+0x24>)
 800c58a:	6800      	ldr	r0, [r0, #0]
 800c58c:	6800      	ldr	r0, [r0, #0]
 800c58e:	f380 8808 	msr	MSP, r0
 800c592:	f04f 0000 	mov.w	r0, #0
 800c596:	f380 8814 	msr	CONTROL, r0
 800c59a:	b662      	cpsie	i
 800c59c:	b661      	cpsie	f
 800c59e:	f3bf 8f4f 	dsb	sy
 800c5a2:	f3bf 8f6f 	isb	sy
 800c5a6:	df00      	svc	0
 800c5a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c5aa:	bf00      	nop
 800c5ac:	e000ed08 	.word	0xe000ed08

0800c5b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b084      	sub	sp, #16
 800c5b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c5b6:	4b36      	ldr	r3, [pc, #216]	; (800c690 <xPortStartScheduler+0xe0>)
 800c5b8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	781b      	ldrb	r3, [r3, #0]
 800c5be:	b2db      	uxtb	r3, r3
 800c5c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	22ff      	movs	r2, #255	; 0xff
 800c5c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	781b      	ldrb	r3, [r3, #0]
 800c5cc:	b2db      	uxtb	r3, r3
 800c5ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c5d0:	78fb      	ldrb	r3, [r7, #3]
 800c5d2:	b2db      	uxtb	r3, r3
 800c5d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c5d8:	b2da      	uxtb	r2, r3
 800c5da:	4b2e      	ldr	r3, [pc, #184]	; (800c694 <xPortStartScheduler+0xe4>)
 800c5dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c5de:	4b2e      	ldr	r3, [pc, #184]	; (800c698 <xPortStartScheduler+0xe8>)
 800c5e0:	2207      	movs	r2, #7
 800c5e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c5e4:	e009      	b.n	800c5fa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c5e6:	4b2c      	ldr	r3, [pc, #176]	; (800c698 <xPortStartScheduler+0xe8>)
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	3b01      	subs	r3, #1
 800c5ec:	4a2a      	ldr	r2, [pc, #168]	; (800c698 <xPortStartScheduler+0xe8>)
 800c5ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c5f0:	78fb      	ldrb	r3, [r7, #3]
 800c5f2:	b2db      	uxtb	r3, r3
 800c5f4:	005b      	lsls	r3, r3, #1
 800c5f6:	b2db      	uxtb	r3, r3
 800c5f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c5fa:	78fb      	ldrb	r3, [r7, #3]
 800c5fc:	b2db      	uxtb	r3, r3
 800c5fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c602:	2b80      	cmp	r3, #128	; 0x80
 800c604:	d0ef      	beq.n	800c5e6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c606:	4b24      	ldr	r3, [pc, #144]	; (800c698 <xPortStartScheduler+0xe8>)
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	f1c3 0307 	rsb	r3, r3, #7
 800c60e:	2b04      	cmp	r3, #4
 800c610:	d00b      	beq.n	800c62a <xPortStartScheduler+0x7a>
 800c612:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c616:	b672      	cpsid	i
 800c618:	f383 8811 	msr	BASEPRI, r3
 800c61c:	f3bf 8f6f 	isb	sy
 800c620:	f3bf 8f4f 	dsb	sy
 800c624:	b662      	cpsie	i
 800c626:	60bb      	str	r3, [r7, #8]
 800c628:	e7fe      	b.n	800c628 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c62a:	4b1b      	ldr	r3, [pc, #108]	; (800c698 <xPortStartScheduler+0xe8>)
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	021b      	lsls	r3, r3, #8
 800c630:	4a19      	ldr	r2, [pc, #100]	; (800c698 <xPortStartScheduler+0xe8>)
 800c632:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c634:	4b18      	ldr	r3, [pc, #96]	; (800c698 <xPortStartScheduler+0xe8>)
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c63c:	4a16      	ldr	r2, [pc, #88]	; (800c698 <xPortStartScheduler+0xe8>)
 800c63e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	b2da      	uxtb	r2, r3
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c648:	4b14      	ldr	r3, [pc, #80]	; (800c69c <xPortStartScheduler+0xec>)
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	4a13      	ldr	r2, [pc, #76]	; (800c69c <xPortStartScheduler+0xec>)
 800c64e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c652:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c654:	4b11      	ldr	r3, [pc, #68]	; (800c69c <xPortStartScheduler+0xec>)
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	4a10      	ldr	r2, [pc, #64]	; (800c69c <xPortStartScheduler+0xec>)
 800c65a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c65e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c660:	f000 f8d4 	bl	800c80c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c664:	4b0e      	ldr	r3, [pc, #56]	; (800c6a0 <xPortStartScheduler+0xf0>)
 800c666:	2200      	movs	r2, #0
 800c668:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c66a:	f000 f8f3 	bl	800c854 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c66e:	4b0d      	ldr	r3, [pc, #52]	; (800c6a4 <xPortStartScheduler+0xf4>)
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	4a0c      	ldr	r2, [pc, #48]	; (800c6a4 <xPortStartScheduler+0xf4>)
 800c674:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c678:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c67a:	f7ff ff85 	bl	800c588 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c67e:	f7fe ff55 	bl	800b52c <vTaskSwitchContext>
	prvTaskExitError();
 800c682:	f7ff ff3b 	bl	800c4fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c686:	2300      	movs	r3, #0
}
 800c688:	4618      	mov	r0, r3
 800c68a:	3710      	adds	r7, #16
 800c68c:	46bd      	mov	sp, r7
 800c68e:	bd80      	pop	{r7, pc}
 800c690:	e000e400 	.word	0xe000e400
 800c694:	20000fa8 	.word	0x20000fa8
 800c698:	20000fac 	.word	0x20000fac
 800c69c:	e000ed20 	.word	0xe000ed20
 800c6a0:	2000011c 	.word	0x2000011c
 800c6a4:	e000ef34 	.word	0xe000ef34

0800c6a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c6a8:	b480      	push	{r7}
 800c6aa:	b083      	sub	sp, #12
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6b2:	b672      	cpsid	i
 800c6b4:	f383 8811 	msr	BASEPRI, r3
 800c6b8:	f3bf 8f6f 	isb	sy
 800c6bc:	f3bf 8f4f 	dsb	sy
 800c6c0:	b662      	cpsie	i
 800c6c2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c6c4:	4b0f      	ldr	r3, [pc, #60]	; (800c704 <vPortEnterCritical+0x5c>)
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	3301      	adds	r3, #1
 800c6ca:	4a0e      	ldr	r2, [pc, #56]	; (800c704 <vPortEnterCritical+0x5c>)
 800c6cc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c6ce:	4b0d      	ldr	r3, [pc, #52]	; (800c704 <vPortEnterCritical+0x5c>)
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	2b01      	cmp	r3, #1
 800c6d4:	d110      	bne.n	800c6f8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c6d6:	4b0c      	ldr	r3, [pc, #48]	; (800c708 <vPortEnterCritical+0x60>)
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	b2db      	uxtb	r3, r3
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d00b      	beq.n	800c6f8 <vPortEnterCritical+0x50>
 800c6e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6e4:	b672      	cpsid	i
 800c6e6:	f383 8811 	msr	BASEPRI, r3
 800c6ea:	f3bf 8f6f 	isb	sy
 800c6ee:	f3bf 8f4f 	dsb	sy
 800c6f2:	b662      	cpsie	i
 800c6f4:	603b      	str	r3, [r7, #0]
 800c6f6:	e7fe      	b.n	800c6f6 <vPortEnterCritical+0x4e>
	}
}
 800c6f8:	bf00      	nop
 800c6fa:	370c      	adds	r7, #12
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c702:	4770      	bx	lr
 800c704:	2000011c 	.word	0x2000011c
 800c708:	e000ed04 	.word	0xe000ed04

0800c70c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c70c:	b480      	push	{r7}
 800c70e:	b083      	sub	sp, #12
 800c710:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c712:	4b12      	ldr	r3, [pc, #72]	; (800c75c <vPortExitCritical+0x50>)
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d10b      	bne.n	800c732 <vPortExitCritical+0x26>
 800c71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c71e:	b672      	cpsid	i
 800c720:	f383 8811 	msr	BASEPRI, r3
 800c724:	f3bf 8f6f 	isb	sy
 800c728:	f3bf 8f4f 	dsb	sy
 800c72c:	b662      	cpsie	i
 800c72e:	607b      	str	r3, [r7, #4]
 800c730:	e7fe      	b.n	800c730 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800c732:	4b0a      	ldr	r3, [pc, #40]	; (800c75c <vPortExitCritical+0x50>)
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	3b01      	subs	r3, #1
 800c738:	4a08      	ldr	r2, [pc, #32]	; (800c75c <vPortExitCritical+0x50>)
 800c73a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c73c:	4b07      	ldr	r3, [pc, #28]	; (800c75c <vPortExitCritical+0x50>)
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d104      	bne.n	800c74e <vPortExitCritical+0x42>
 800c744:	2300      	movs	r3, #0
 800c746:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c748:	683b      	ldr	r3, [r7, #0]
 800c74a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800c74e:	bf00      	nop
 800c750:	370c      	adds	r7, #12
 800c752:	46bd      	mov	sp, r7
 800c754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c758:	4770      	bx	lr
 800c75a:	bf00      	nop
 800c75c:	2000011c 	.word	0x2000011c

0800c760 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c760:	f3ef 8009 	mrs	r0, PSP
 800c764:	f3bf 8f6f 	isb	sy
 800c768:	4b15      	ldr	r3, [pc, #84]	; (800c7c0 <pxCurrentTCBConst>)
 800c76a:	681a      	ldr	r2, [r3, #0]
 800c76c:	f01e 0f10 	tst.w	lr, #16
 800c770:	bf08      	it	eq
 800c772:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c776:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c77a:	6010      	str	r0, [r2, #0]
 800c77c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c780:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c784:	b672      	cpsid	i
 800c786:	f380 8811 	msr	BASEPRI, r0
 800c78a:	f3bf 8f4f 	dsb	sy
 800c78e:	f3bf 8f6f 	isb	sy
 800c792:	b662      	cpsie	i
 800c794:	f7fe feca 	bl	800b52c <vTaskSwitchContext>
 800c798:	f04f 0000 	mov.w	r0, #0
 800c79c:	f380 8811 	msr	BASEPRI, r0
 800c7a0:	bc09      	pop	{r0, r3}
 800c7a2:	6819      	ldr	r1, [r3, #0]
 800c7a4:	6808      	ldr	r0, [r1, #0]
 800c7a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7aa:	f01e 0f10 	tst.w	lr, #16
 800c7ae:	bf08      	it	eq
 800c7b0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c7b4:	f380 8809 	msr	PSP, r0
 800c7b8:	f3bf 8f6f 	isb	sy
 800c7bc:	4770      	bx	lr
 800c7be:	bf00      	nop

0800c7c0 <pxCurrentTCBConst>:
 800c7c0:	2000097c 	.word	0x2000097c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c7c4:	bf00      	nop
 800c7c6:	bf00      	nop

0800c7c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b082      	sub	sp, #8
 800c7cc:	af00      	add	r7, sp, #0
	__asm volatile
 800c7ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7d2:	b672      	cpsid	i
 800c7d4:	f383 8811 	msr	BASEPRI, r3
 800c7d8:	f3bf 8f6f 	isb	sy
 800c7dc:	f3bf 8f4f 	dsb	sy
 800c7e0:	b662      	cpsie	i
 800c7e2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c7e4:	f7fe fde8 	bl	800b3b8 <xTaskIncrementTick>
 800c7e8:	4603      	mov	r3, r0
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d003      	beq.n	800c7f6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c7ee:	4b06      	ldr	r3, [pc, #24]	; (800c808 <SysTick_Handler+0x40>)
 800c7f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7f4:	601a      	str	r2, [r3, #0]
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c7fa:	683b      	ldr	r3, [r7, #0]
 800c7fc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800c800:	bf00      	nop
 800c802:	3708      	adds	r7, #8
 800c804:	46bd      	mov	sp, r7
 800c806:	bd80      	pop	{r7, pc}
 800c808:	e000ed04 	.word	0xe000ed04

0800c80c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c80c:	b480      	push	{r7}
 800c80e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c810:	4b0b      	ldr	r3, [pc, #44]	; (800c840 <vPortSetupTimerInterrupt+0x34>)
 800c812:	2200      	movs	r2, #0
 800c814:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c816:	4b0b      	ldr	r3, [pc, #44]	; (800c844 <vPortSetupTimerInterrupt+0x38>)
 800c818:	2200      	movs	r2, #0
 800c81a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c81c:	4b0a      	ldr	r3, [pc, #40]	; (800c848 <vPortSetupTimerInterrupt+0x3c>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	4a0a      	ldr	r2, [pc, #40]	; (800c84c <vPortSetupTimerInterrupt+0x40>)
 800c822:	fba2 2303 	umull	r2, r3, r2, r3
 800c826:	099b      	lsrs	r3, r3, #6
 800c828:	4a09      	ldr	r2, [pc, #36]	; (800c850 <vPortSetupTimerInterrupt+0x44>)
 800c82a:	3b01      	subs	r3, #1
 800c82c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c82e:	4b04      	ldr	r3, [pc, #16]	; (800c840 <vPortSetupTimerInterrupt+0x34>)
 800c830:	2207      	movs	r2, #7
 800c832:	601a      	str	r2, [r3, #0]
}
 800c834:	bf00      	nop
 800c836:	46bd      	mov	sp, r7
 800c838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83c:	4770      	bx	lr
 800c83e:	bf00      	nop
 800c840:	e000e010 	.word	0xe000e010
 800c844:	e000e018 	.word	0xe000e018
 800c848:	20000000 	.word	0x20000000
 800c84c:	10624dd3 	.word	0x10624dd3
 800c850:	e000e014 	.word	0xe000e014

0800c854 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c854:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c864 <vPortEnableVFP+0x10>
 800c858:	6801      	ldr	r1, [r0, #0]
 800c85a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c85e:	6001      	str	r1, [r0, #0]
 800c860:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c862:	bf00      	nop
 800c864:	e000ed88 	.word	0xe000ed88

0800c868 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c868:	b480      	push	{r7}
 800c86a:	b085      	sub	sp, #20
 800c86c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c86e:	f3ef 8305 	mrs	r3, IPSR
 800c872:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	2b0f      	cmp	r3, #15
 800c878:	d915      	bls.n	800c8a6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c87a:	4a18      	ldr	r2, [pc, #96]	; (800c8dc <vPortValidateInterruptPriority+0x74>)
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	4413      	add	r3, r2
 800c880:	781b      	ldrb	r3, [r3, #0]
 800c882:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c884:	4b16      	ldr	r3, [pc, #88]	; (800c8e0 <vPortValidateInterruptPriority+0x78>)
 800c886:	781b      	ldrb	r3, [r3, #0]
 800c888:	7afa      	ldrb	r2, [r7, #11]
 800c88a:	429a      	cmp	r2, r3
 800c88c:	d20b      	bcs.n	800c8a6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c88e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c892:	b672      	cpsid	i
 800c894:	f383 8811 	msr	BASEPRI, r3
 800c898:	f3bf 8f6f 	isb	sy
 800c89c:	f3bf 8f4f 	dsb	sy
 800c8a0:	b662      	cpsie	i
 800c8a2:	607b      	str	r3, [r7, #4]
 800c8a4:	e7fe      	b.n	800c8a4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c8a6:	4b0f      	ldr	r3, [pc, #60]	; (800c8e4 <vPortValidateInterruptPriority+0x7c>)
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c8ae:	4b0e      	ldr	r3, [pc, #56]	; (800c8e8 <vPortValidateInterruptPriority+0x80>)
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	429a      	cmp	r2, r3
 800c8b4:	d90b      	bls.n	800c8ce <vPortValidateInterruptPriority+0x66>
 800c8b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ba:	b672      	cpsid	i
 800c8bc:	f383 8811 	msr	BASEPRI, r3
 800c8c0:	f3bf 8f6f 	isb	sy
 800c8c4:	f3bf 8f4f 	dsb	sy
 800c8c8:	b662      	cpsie	i
 800c8ca:	603b      	str	r3, [r7, #0]
 800c8cc:	e7fe      	b.n	800c8cc <vPortValidateInterruptPriority+0x64>
	}
 800c8ce:	bf00      	nop
 800c8d0:	3714      	adds	r7, #20
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d8:	4770      	bx	lr
 800c8da:	bf00      	nop
 800c8dc:	e000e3f0 	.word	0xe000e3f0
 800c8e0:	20000fa8 	.word	0x20000fa8
 800c8e4:	e000ed0c 	.word	0xe000ed0c
 800c8e8:	20000fac 	.word	0x20000fac

0800c8ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b08a      	sub	sp, #40	; 0x28
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c8f8:	f7fe fc90 	bl	800b21c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c8fc:	4b5a      	ldr	r3, [pc, #360]	; (800ca68 <pvPortMalloc+0x17c>)
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d101      	bne.n	800c908 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c904:	f000 f916 	bl	800cb34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c908:	4b58      	ldr	r3, [pc, #352]	; (800ca6c <pvPortMalloc+0x180>)
 800c90a:	681a      	ldr	r2, [r3, #0]
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	4013      	ands	r3, r2
 800c910:	2b00      	cmp	r3, #0
 800c912:	f040 8090 	bne.w	800ca36 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d01e      	beq.n	800c95a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c91c:	2208      	movs	r2, #8
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	4413      	add	r3, r2
 800c922:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	f003 0307 	and.w	r3, r3, #7
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d015      	beq.n	800c95a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	f023 0307 	bic.w	r3, r3, #7
 800c934:	3308      	adds	r3, #8
 800c936:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	f003 0307 	and.w	r3, r3, #7
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d00b      	beq.n	800c95a <pvPortMalloc+0x6e>
 800c942:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c946:	b672      	cpsid	i
 800c948:	f383 8811 	msr	BASEPRI, r3
 800c94c:	f3bf 8f6f 	isb	sy
 800c950:	f3bf 8f4f 	dsb	sy
 800c954:	b662      	cpsie	i
 800c956:	617b      	str	r3, [r7, #20]
 800c958:	e7fe      	b.n	800c958 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d06a      	beq.n	800ca36 <pvPortMalloc+0x14a>
 800c960:	4b43      	ldr	r3, [pc, #268]	; (800ca70 <pvPortMalloc+0x184>)
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	687a      	ldr	r2, [r7, #4]
 800c966:	429a      	cmp	r2, r3
 800c968:	d865      	bhi.n	800ca36 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c96a:	4b42      	ldr	r3, [pc, #264]	; (800ca74 <pvPortMalloc+0x188>)
 800c96c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c96e:	4b41      	ldr	r3, [pc, #260]	; (800ca74 <pvPortMalloc+0x188>)
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c974:	e004      	b.n	800c980 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c978:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c982:	685b      	ldr	r3, [r3, #4]
 800c984:	687a      	ldr	r2, [r7, #4]
 800c986:	429a      	cmp	r2, r3
 800c988:	d903      	bls.n	800c992 <pvPortMalloc+0xa6>
 800c98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d1f1      	bne.n	800c976 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c992:	4b35      	ldr	r3, [pc, #212]	; (800ca68 <pvPortMalloc+0x17c>)
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c998:	429a      	cmp	r2, r3
 800c99a:	d04c      	beq.n	800ca36 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c99c:	6a3b      	ldr	r3, [r7, #32]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	2208      	movs	r2, #8
 800c9a2:	4413      	add	r3, r2
 800c9a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c9a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9a8:	681a      	ldr	r2, [r3, #0]
 800c9aa:	6a3b      	ldr	r3, [r7, #32]
 800c9ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c9ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9b0:	685a      	ldr	r2, [r3, #4]
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	1ad2      	subs	r2, r2, r3
 800c9b6:	2308      	movs	r3, #8
 800c9b8:	005b      	lsls	r3, r3, #1
 800c9ba:	429a      	cmp	r2, r3
 800c9bc:	d920      	bls.n	800ca00 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c9be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	4413      	add	r3, r2
 800c9c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c9c6:	69bb      	ldr	r3, [r7, #24]
 800c9c8:	f003 0307 	and.w	r3, r3, #7
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d00b      	beq.n	800c9e8 <pvPortMalloc+0xfc>
 800c9d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9d4:	b672      	cpsid	i
 800c9d6:	f383 8811 	msr	BASEPRI, r3
 800c9da:	f3bf 8f6f 	isb	sy
 800c9de:	f3bf 8f4f 	dsb	sy
 800c9e2:	b662      	cpsie	i
 800c9e4:	613b      	str	r3, [r7, #16]
 800c9e6:	e7fe      	b.n	800c9e6 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c9e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ea:	685a      	ldr	r2, [r3, #4]
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	1ad2      	subs	r2, r2, r3
 800c9f0:	69bb      	ldr	r3, [r7, #24]
 800c9f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9f6:	687a      	ldr	r2, [r7, #4]
 800c9f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c9fa:	69b8      	ldr	r0, [r7, #24]
 800c9fc:	f000 f8fc 	bl	800cbf8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ca00:	4b1b      	ldr	r3, [pc, #108]	; (800ca70 <pvPortMalloc+0x184>)
 800ca02:	681a      	ldr	r2, [r3, #0]
 800ca04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca06:	685b      	ldr	r3, [r3, #4]
 800ca08:	1ad3      	subs	r3, r2, r3
 800ca0a:	4a19      	ldr	r2, [pc, #100]	; (800ca70 <pvPortMalloc+0x184>)
 800ca0c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ca0e:	4b18      	ldr	r3, [pc, #96]	; (800ca70 <pvPortMalloc+0x184>)
 800ca10:	681a      	ldr	r2, [r3, #0]
 800ca12:	4b19      	ldr	r3, [pc, #100]	; (800ca78 <pvPortMalloc+0x18c>)
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	429a      	cmp	r2, r3
 800ca18:	d203      	bcs.n	800ca22 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ca1a:	4b15      	ldr	r3, [pc, #84]	; (800ca70 <pvPortMalloc+0x184>)
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	4a16      	ldr	r2, [pc, #88]	; (800ca78 <pvPortMalloc+0x18c>)
 800ca20:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ca22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca24:	685a      	ldr	r2, [r3, #4]
 800ca26:	4b11      	ldr	r3, [pc, #68]	; (800ca6c <pvPortMalloc+0x180>)
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	431a      	orrs	r2, r3
 800ca2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca2e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ca30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca32:	2200      	movs	r2, #0
 800ca34:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ca36:	f7fe fbff 	bl	800b238 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ca3a:	69fb      	ldr	r3, [r7, #28]
 800ca3c:	f003 0307 	and.w	r3, r3, #7
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d00b      	beq.n	800ca5c <pvPortMalloc+0x170>
 800ca44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca48:	b672      	cpsid	i
 800ca4a:	f383 8811 	msr	BASEPRI, r3
 800ca4e:	f3bf 8f6f 	isb	sy
 800ca52:	f3bf 8f4f 	dsb	sy
 800ca56:	b662      	cpsie	i
 800ca58:	60fb      	str	r3, [r7, #12]
 800ca5a:	e7fe      	b.n	800ca5a <pvPortMalloc+0x16e>
	return pvReturn;
 800ca5c:	69fb      	ldr	r3, [r7, #28]
}
 800ca5e:	4618      	mov	r0, r3
 800ca60:	3728      	adds	r7, #40	; 0x28
 800ca62:	46bd      	mov	sp, r7
 800ca64:	bd80      	pop	{r7, pc}
 800ca66:	bf00      	nop
 800ca68:	20004bb8 	.word	0x20004bb8
 800ca6c:	20004bc4 	.word	0x20004bc4
 800ca70:	20004bbc 	.word	0x20004bbc
 800ca74:	20004bb0 	.word	0x20004bb0
 800ca78:	20004bc0 	.word	0x20004bc0

0800ca7c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b086      	sub	sp, #24
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d04a      	beq.n	800cb24 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ca8e:	2308      	movs	r3, #8
 800ca90:	425b      	negs	r3, r3
 800ca92:	697a      	ldr	r2, [r7, #20]
 800ca94:	4413      	add	r3, r2
 800ca96:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ca98:	697b      	ldr	r3, [r7, #20]
 800ca9a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ca9c:	693b      	ldr	r3, [r7, #16]
 800ca9e:	685a      	ldr	r2, [r3, #4]
 800caa0:	4b22      	ldr	r3, [pc, #136]	; (800cb2c <vPortFree+0xb0>)
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	4013      	ands	r3, r2
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d10b      	bne.n	800cac2 <vPortFree+0x46>
 800caaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caae:	b672      	cpsid	i
 800cab0:	f383 8811 	msr	BASEPRI, r3
 800cab4:	f3bf 8f6f 	isb	sy
 800cab8:	f3bf 8f4f 	dsb	sy
 800cabc:	b662      	cpsie	i
 800cabe:	60fb      	str	r3, [r7, #12]
 800cac0:	e7fe      	b.n	800cac0 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cac2:	693b      	ldr	r3, [r7, #16]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d00b      	beq.n	800cae2 <vPortFree+0x66>
 800caca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cace:	b672      	cpsid	i
 800cad0:	f383 8811 	msr	BASEPRI, r3
 800cad4:	f3bf 8f6f 	isb	sy
 800cad8:	f3bf 8f4f 	dsb	sy
 800cadc:	b662      	cpsie	i
 800cade:	60bb      	str	r3, [r7, #8]
 800cae0:	e7fe      	b.n	800cae0 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cae2:	693b      	ldr	r3, [r7, #16]
 800cae4:	685a      	ldr	r2, [r3, #4]
 800cae6:	4b11      	ldr	r3, [pc, #68]	; (800cb2c <vPortFree+0xb0>)
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	4013      	ands	r3, r2
 800caec:	2b00      	cmp	r3, #0
 800caee:	d019      	beq.n	800cb24 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800caf0:	693b      	ldr	r3, [r7, #16]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d115      	bne.n	800cb24 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800caf8:	693b      	ldr	r3, [r7, #16]
 800cafa:	685a      	ldr	r2, [r3, #4]
 800cafc:	4b0b      	ldr	r3, [pc, #44]	; (800cb2c <vPortFree+0xb0>)
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	43db      	mvns	r3, r3
 800cb02:	401a      	ands	r2, r3
 800cb04:	693b      	ldr	r3, [r7, #16]
 800cb06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cb08:	f7fe fb88 	bl	800b21c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cb0c:	693b      	ldr	r3, [r7, #16]
 800cb0e:	685a      	ldr	r2, [r3, #4]
 800cb10:	4b07      	ldr	r3, [pc, #28]	; (800cb30 <vPortFree+0xb4>)
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	4413      	add	r3, r2
 800cb16:	4a06      	ldr	r2, [pc, #24]	; (800cb30 <vPortFree+0xb4>)
 800cb18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cb1a:	6938      	ldr	r0, [r7, #16]
 800cb1c:	f000 f86c 	bl	800cbf8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800cb20:	f7fe fb8a 	bl	800b238 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cb24:	bf00      	nop
 800cb26:	3718      	adds	r7, #24
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	bd80      	pop	{r7, pc}
 800cb2c:	20004bc4 	.word	0x20004bc4
 800cb30:	20004bbc 	.word	0x20004bbc

0800cb34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cb34:	b480      	push	{r7}
 800cb36:	b085      	sub	sp, #20
 800cb38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cb3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800cb3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cb40:	4b27      	ldr	r3, [pc, #156]	; (800cbe0 <prvHeapInit+0xac>)
 800cb42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	f003 0307 	and.w	r3, r3, #7
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d00c      	beq.n	800cb68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	3307      	adds	r3, #7
 800cb52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	f023 0307 	bic.w	r3, r3, #7
 800cb5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cb5c:	68ba      	ldr	r2, [r7, #8]
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	1ad3      	subs	r3, r2, r3
 800cb62:	4a1f      	ldr	r2, [pc, #124]	; (800cbe0 <prvHeapInit+0xac>)
 800cb64:	4413      	add	r3, r2
 800cb66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cb6c:	4a1d      	ldr	r2, [pc, #116]	; (800cbe4 <prvHeapInit+0xb0>)
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cb72:	4b1c      	ldr	r3, [pc, #112]	; (800cbe4 <prvHeapInit+0xb0>)
 800cb74:	2200      	movs	r2, #0
 800cb76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	68ba      	ldr	r2, [r7, #8]
 800cb7c:	4413      	add	r3, r2
 800cb7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cb80:	2208      	movs	r2, #8
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	1a9b      	subs	r3, r3, r2
 800cb86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	f023 0307 	bic.w	r3, r3, #7
 800cb8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	4a15      	ldr	r2, [pc, #84]	; (800cbe8 <prvHeapInit+0xb4>)
 800cb94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cb96:	4b14      	ldr	r3, [pc, #80]	; (800cbe8 <prvHeapInit+0xb4>)
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cb9e:	4b12      	ldr	r3, [pc, #72]	; (800cbe8 <prvHeapInit+0xb4>)
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	2200      	movs	r2, #0
 800cba4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cbaa:	683b      	ldr	r3, [r7, #0]
 800cbac:	68fa      	ldr	r2, [r7, #12]
 800cbae:	1ad2      	subs	r2, r2, r3
 800cbb0:	683b      	ldr	r3, [r7, #0]
 800cbb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cbb4:	4b0c      	ldr	r3, [pc, #48]	; (800cbe8 <prvHeapInit+0xb4>)
 800cbb6:	681a      	ldr	r2, [r3, #0]
 800cbb8:	683b      	ldr	r3, [r7, #0]
 800cbba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cbbc:	683b      	ldr	r3, [r7, #0]
 800cbbe:	685b      	ldr	r3, [r3, #4]
 800cbc0:	4a0a      	ldr	r2, [pc, #40]	; (800cbec <prvHeapInit+0xb8>)
 800cbc2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cbc4:	683b      	ldr	r3, [r7, #0]
 800cbc6:	685b      	ldr	r3, [r3, #4]
 800cbc8:	4a09      	ldr	r2, [pc, #36]	; (800cbf0 <prvHeapInit+0xbc>)
 800cbca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cbcc:	4b09      	ldr	r3, [pc, #36]	; (800cbf4 <prvHeapInit+0xc0>)
 800cbce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cbd2:	601a      	str	r2, [r3, #0]
}
 800cbd4:	bf00      	nop
 800cbd6:	3714      	adds	r7, #20
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbde:	4770      	bx	lr
 800cbe0:	20000fb0 	.word	0x20000fb0
 800cbe4:	20004bb0 	.word	0x20004bb0
 800cbe8:	20004bb8 	.word	0x20004bb8
 800cbec:	20004bc0 	.word	0x20004bc0
 800cbf0:	20004bbc 	.word	0x20004bbc
 800cbf4:	20004bc4 	.word	0x20004bc4

0800cbf8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cbf8:	b480      	push	{r7}
 800cbfa:	b085      	sub	sp, #20
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cc00:	4b28      	ldr	r3, [pc, #160]	; (800cca4 <prvInsertBlockIntoFreeList+0xac>)
 800cc02:	60fb      	str	r3, [r7, #12]
 800cc04:	e002      	b.n	800cc0c <prvInsertBlockIntoFreeList+0x14>
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	60fb      	str	r3, [r7, #12]
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	687a      	ldr	r2, [r7, #4]
 800cc12:	429a      	cmp	r2, r3
 800cc14:	d8f7      	bhi.n	800cc06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	685b      	ldr	r3, [r3, #4]
 800cc1e:	68ba      	ldr	r2, [r7, #8]
 800cc20:	4413      	add	r3, r2
 800cc22:	687a      	ldr	r2, [r7, #4]
 800cc24:	429a      	cmp	r2, r3
 800cc26:	d108      	bne.n	800cc3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	685a      	ldr	r2, [r3, #4]
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	685b      	ldr	r3, [r3, #4]
 800cc30:	441a      	add	r2, r3
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	685b      	ldr	r3, [r3, #4]
 800cc42:	68ba      	ldr	r2, [r7, #8]
 800cc44:	441a      	add	r2, r3
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	429a      	cmp	r2, r3
 800cc4c:	d118      	bne.n	800cc80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	681a      	ldr	r2, [r3, #0]
 800cc52:	4b15      	ldr	r3, [pc, #84]	; (800cca8 <prvInsertBlockIntoFreeList+0xb0>)
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	429a      	cmp	r2, r3
 800cc58:	d00d      	beq.n	800cc76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	685a      	ldr	r2, [r3, #4]
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	685b      	ldr	r3, [r3, #4]
 800cc64:	441a      	add	r2, r3
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	681a      	ldr	r2, [r3, #0]
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	601a      	str	r2, [r3, #0]
 800cc74:	e008      	b.n	800cc88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cc76:	4b0c      	ldr	r3, [pc, #48]	; (800cca8 <prvInsertBlockIntoFreeList+0xb0>)
 800cc78:	681a      	ldr	r2, [r3, #0]
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	601a      	str	r2, [r3, #0]
 800cc7e:	e003      	b.n	800cc88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	681a      	ldr	r2, [r3, #0]
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cc88:	68fa      	ldr	r2, [r7, #12]
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	429a      	cmp	r2, r3
 800cc8e:	d002      	beq.n	800cc96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	687a      	ldr	r2, [r7, #4]
 800cc94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cc96:	bf00      	nop
 800cc98:	3714      	adds	r7, #20
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca0:	4770      	bx	lr
 800cca2:	bf00      	nop
 800cca4:	20004bb0 	.word	0x20004bb0
 800cca8:	20004bb8 	.word	0x20004bb8

0800ccac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ccb0:	2200      	movs	r2, #0
 800ccb2:	4912      	ldr	r1, [pc, #72]	; (800ccfc <MX_USB_DEVICE_Init+0x50>)
 800ccb4:	4812      	ldr	r0, [pc, #72]	; (800cd00 <MX_USB_DEVICE_Init+0x54>)
 800ccb6:	f7fb fbbf 	bl	8008438 <USBD_Init>
 800ccba:	4603      	mov	r3, r0
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d001      	beq.n	800ccc4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ccc0:	f7f4 fb46 	bl	8001350 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ccc4:	490f      	ldr	r1, [pc, #60]	; (800cd04 <MX_USB_DEVICE_Init+0x58>)
 800ccc6:	480e      	ldr	r0, [pc, #56]	; (800cd00 <MX_USB_DEVICE_Init+0x54>)
 800ccc8:	f7fb fbec 	bl	80084a4 <USBD_RegisterClass>
 800cccc:	4603      	mov	r3, r0
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d001      	beq.n	800ccd6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ccd2:	f7f4 fb3d 	bl	8001350 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ccd6:	490c      	ldr	r1, [pc, #48]	; (800cd08 <MX_USB_DEVICE_Init+0x5c>)
 800ccd8:	4809      	ldr	r0, [pc, #36]	; (800cd00 <MX_USB_DEVICE_Init+0x54>)
 800ccda:	f7fb fb11 	bl	8008300 <USBD_CDC_RegisterInterface>
 800ccde:	4603      	mov	r3, r0
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d001      	beq.n	800cce8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cce4:	f7f4 fb34 	bl	8001350 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cce8:	4805      	ldr	r0, [pc, #20]	; (800cd00 <MX_USB_DEVICE_Init+0x54>)
 800ccea:	f7fb fbfc 	bl	80084e6 <USBD_Start>
 800ccee:	4603      	mov	r3, r0
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d001      	beq.n	800ccf8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ccf4:	f7f4 fb2c 	bl	8001350 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ccf8:	bf00      	nop
 800ccfa:	bd80      	pop	{r7, pc}
 800ccfc:	20000134 	.word	0x20000134
 800cd00:	20006868 	.word	0x20006868
 800cd04:	20000018 	.word	0x20000018
 800cd08:	20000120 	.word	0x20000120

0800cd0c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cd10:	2200      	movs	r2, #0
 800cd12:	4905      	ldr	r1, [pc, #20]	; (800cd28 <CDC_Init_FS+0x1c>)
 800cd14:	4805      	ldr	r0, [pc, #20]	; (800cd2c <CDC_Init_FS+0x20>)
 800cd16:	f7fb fb08 	bl	800832a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cd1a:	4905      	ldr	r1, [pc, #20]	; (800cd30 <CDC_Init_FS+0x24>)
 800cd1c:	4803      	ldr	r0, [pc, #12]	; (800cd2c <CDC_Init_FS+0x20>)
 800cd1e:	f7fb fb1d 	bl	800835c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cd22:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cd24:	4618      	mov	r0, r3
 800cd26:	bd80      	pop	{r7, pc}
 800cd28:	20007338 	.word	0x20007338
 800cd2c:	20006868 	.word	0x20006868
 800cd30:	20006b38 	.word	0x20006b38

0800cd34 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cd34:	b480      	push	{r7}
 800cd36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cd38:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd42:	4770      	bx	lr

0800cd44 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cd44:	b480      	push	{r7}
 800cd46:	b083      	sub	sp, #12
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	4603      	mov	r3, r0
 800cd4c:	6039      	str	r1, [r7, #0]
 800cd4e:	71fb      	strb	r3, [r7, #7]
 800cd50:	4613      	mov	r3, r2
 800cd52:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800cd54:	79fb      	ldrb	r3, [r7, #7]
 800cd56:	2b23      	cmp	r3, #35	; 0x23
 800cd58:	d84a      	bhi.n	800cdf0 <CDC_Control_FS+0xac>
 800cd5a:	a201      	add	r2, pc, #4	; (adr r2, 800cd60 <CDC_Control_FS+0x1c>)
 800cd5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd60:	0800cdf1 	.word	0x0800cdf1
 800cd64:	0800cdf1 	.word	0x0800cdf1
 800cd68:	0800cdf1 	.word	0x0800cdf1
 800cd6c:	0800cdf1 	.word	0x0800cdf1
 800cd70:	0800cdf1 	.word	0x0800cdf1
 800cd74:	0800cdf1 	.word	0x0800cdf1
 800cd78:	0800cdf1 	.word	0x0800cdf1
 800cd7c:	0800cdf1 	.word	0x0800cdf1
 800cd80:	0800cdf1 	.word	0x0800cdf1
 800cd84:	0800cdf1 	.word	0x0800cdf1
 800cd88:	0800cdf1 	.word	0x0800cdf1
 800cd8c:	0800cdf1 	.word	0x0800cdf1
 800cd90:	0800cdf1 	.word	0x0800cdf1
 800cd94:	0800cdf1 	.word	0x0800cdf1
 800cd98:	0800cdf1 	.word	0x0800cdf1
 800cd9c:	0800cdf1 	.word	0x0800cdf1
 800cda0:	0800cdf1 	.word	0x0800cdf1
 800cda4:	0800cdf1 	.word	0x0800cdf1
 800cda8:	0800cdf1 	.word	0x0800cdf1
 800cdac:	0800cdf1 	.word	0x0800cdf1
 800cdb0:	0800cdf1 	.word	0x0800cdf1
 800cdb4:	0800cdf1 	.word	0x0800cdf1
 800cdb8:	0800cdf1 	.word	0x0800cdf1
 800cdbc:	0800cdf1 	.word	0x0800cdf1
 800cdc0:	0800cdf1 	.word	0x0800cdf1
 800cdc4:	0800cdf1 	.word	0x0800cdf1
 800cdc8:	0800cdf1 	.word	0x0800cdf1
 800cdcc:	0800cdf1 	.word	0x0800cdf1
 800cdd0:	0800cdf1 	.word	0x0800cdf1
 800cdd4:	0800cdf1 	.word	0x0800cdf1
 800cdd8:	0800cdf1 	.word	0x0800cdf1
 800cddc:	0800cdf1 	.word	0x0800cdf1
 800cde0:	0800cdf1 	.word	0x0800cdf1
 800cde4:	0800cdf1 	.word	0x0800cdf1
 800cde8:	0800cdf1 	.word	0x0800cdf1
 800cdec:	0800cdf1 	.word	0x0800cdf1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cdf0:	bf00      	nop
  }

  return (USBD_OK);
 800cdf2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	370c      	adds	r7, #12
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfe:	4770      	bx	lr

0800ce00 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b082      	sub	sp, #8
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
 800ce08:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ce0a:	6879      	ldr	r1, [r7, #4]
 800ce0c:	4805      	ldr	r0, [pc, #20]	; (800ce24 <CDC_Receive_FS+0x24>)
 800ce0e:	f7fb faa5 	bl	800835c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ce12:	4804      	ldr	r0, [pc, #16]	; (800ce24 <CDC_Receive_FS+0x24>)
 800ce14:	f7fb fae6 	bl	80083e4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ce18:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	3708      	adds	r7, #8
 800ce1e:	46bd      	mov	sp, r7
 800ce20:	bd80      	pop	{r7, pc}
 800ce22:	bf00      	nop
 800ce24:	20006868 	.word	0x20006868

0800ce28 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b084      	sub	sp, #16
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
 800ce30:	460b      	mov	r3, r1
 800ce32:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ce34:	2300      	movs	r3, #0
 800ce36:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ce38:	4b0d      	ldr	r3, [pc, #52]	; (800ce70 <CDC_Transmit_FS+0x48>)
 800ce3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ce3e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ce40:	68bb      	ldr	r3, [r7, #8]
 800ce42:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d001      	beq.n	800ce4e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ce4a:	2301      	movs	r3, #1
 800ce4c:	e00b      	b.n	800ce66 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ce4e:	887b      	ldrh	r3, [r7, #2]
 800ce50:	461a      	mov	r2, r3
 800ce52:	6879      	ldr	r1, [r7, #4]
 800ce54:	4806      	ldr	r0, [pc, #24]	; (800ce70 <CDC_Transmit_FS+0x48>)
 800ce56:	f7fb fa68 	bl	800832a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ce5a:	4805      	ldr	r0, [pc, #20]	; (800ce70 <CDC_Transmit_FS+0x48>)
 800ce5c:	f7fb fa92 	bl	8008384 <USBD_CDC_TransmitPacket>
 800ce60:	4603      	mov	r3, r0
 800ce62:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ce64:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce66:	4618      	mov	r0, r3
 800ce68:	3710      	adds	r7, #16
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	bd80      	pop	{r7, pc}
 800ce6e:	bf00      	nop
 800ce70:	20006868 	.word	0x20006868

0800ce74 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ce74:	b480      	push	{r7}
 800ce76:	b087      	sub	sp, #28
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	60f8      	str	r0, [r7, #12]
 800ce7c:	60b9      	str	r1, [r7, #8]
 800ce7e:	4613      	mov	r3, r2
 800ce80:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ce82:	2300      	movs	r3, #0
 800ce84:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ce86:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	371c      	adds	r7, #28
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce94:	4770      	bx	lr
	...

0800ce98 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce98:	b480      	push	{r7}
 800ce9a:	b083      	sub	sp, #12
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	4603      	mov	r3, r0
 800cea0:	6039      	str	r1, [r7, #0]
 800cea2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cea4:	683b      	ldr	r3, [r7, #0]
 800cea6:	2212      	movs	r2, #18
 800cea8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ceaa:	4b03      	ldr	r3, [pc, #12]	; (800ceb8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ceac:	4618      	mov	r0, r3
 800ceae:	370c      	adds	r7, #12
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb6:	4770      	bx	lr
 800ceb8:	20000154 	.word	0x20000154

0800cebc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cebc:	b480      	push	{r7}
 800cebe:	b083      	sub	sp, #12
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	4603      	mov	r3, r0
 800cec4:	6039      	str	r1, [r7, #0]
 800cec6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cec8:	683b      	ldr	r3, [r7, #0]
 800ceca:	2204      	movs	r2, #4
 800cecc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cece:	4b03      	ldr	r3, [pc, #12]	; (800cedc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ced0:	4618      	mov	r0, r3
 800ced2:	370c      	adds	r7, #12
 800ced4:	46bd      	mov	sp, r7
 800ced6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceda:	4770      	bx	lr
 800cedc:	20000174 	.word	0x20000174

0800cee0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b082      	sub	sp, #8
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	4603      	mov	r3, r0
 800cee8:	6039      	str	r1, [r7, #0]
 800ceea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ceec:	79fb      	ldrb	r3, [r7, #7]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d105      	bne.n	800cefe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cef2:	683a      	ldr	r2, [r7, #0]
 800cef4:	4907      	ldr	r1, [pc, #28]	; (800cf14 <USBD_FS_ProductStrDescriptor+0x34>)
 800cef6:	4808      	ldr	r0, [pc, #32]	; (800cf18 <USBD_FS_ProductStrDescriptor+0x38>)
 800cef8:	f7fc faed 	bl	80094d6 <USBD_GetString>
 800cefc:	e004      	b.n	800cf08 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cefe:	683a      	ldr	r2, [r7, #0]
 800cf00:	4904      	ldr	r1, [pc, #16]	; (800cf14 <USBD_FS_ProductStrDescriptor+0x34>)
 800cf02:	4805      	ldr	r0, [pc, #20]	; (800cf18 <USBD_FS_ProductStrDescriptor+0x38>)
 800cf04:	f7fc fae7 	bl	80094d6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cf08:	4b02      	ldr	r3, [pc, #8]	; (800cf14 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	3708      	adds	r7, #8
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	bd80      	pop	{r7, pc}
 800cf12:	bf00      	nop
 800cf14:	20007b38 	.word	0x20007b38
 800cf18:	0800f2d8 	.word	0x0800f2d8

0800cf1c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b082      	sub	sp, #8
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	4603      	mov	r3, r0
 800cf24:	6039      	str	r1, [r7, #0]
 800cf26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cf28:	683a      	ldr	r2, [r7, #0]
 800cf2a:	4904      	ldr	r1, [pc, #16]	; (800cf3c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cf2c:	4804      	ldr	r0, [pc, #16]	; (800cf40 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cf2e:	f7fc fad2 	bl	80094d6 <USBD_GetString>
  return USBD_StrDesc;
 800cf32:	4b02      	ldr	r3, [pc, #8]	; (800cf3c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cf34:	4618      	mov	r0, r3
 800cf36:	3708      	adds	r7, #8
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	bd80      	pop	{r7, pc}
 800cf3c:	20007b38 	.word	0x20007b38
 800cf40:	0800f2f0 	.word	0x0800f2f0

0800cf44 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf44:	b580      	push	{r7, lr}
 800cf46:	b082      	sub	sp, #8
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	4603      	mov	r3, r0
 800cf4c:	6039      	str	r1, [r7, #0]
 800cf4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cf50:	683b      	ldr	r3, [r7, #0]
 800cf52:	221a      	movs	r2, #26
 800cf54:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cf56:	f000 f855 	bl	800d004 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cf5a:	4b02      	ldr	r3, [pc, #8]	; (800cf64 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	3708      	adds	r7, #8
 800cf60:	46bd      	mov	sp, r7
 800cf62:	bd80      	pop	{r7, pc}
 800cf64:	20000178 	.word	0x20000178

0800cf68 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b082      	sub	sp, #8
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	4603      	mov	r3, r0
 800cf70:	6039      	str	r1, [r7, #0]
 800cf72:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cf74:	79fb      	ldrb	r3, [r7, #7]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d105      	bne.n	800cf86 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cf7a:	683a      	ldr	r2, [r7, #0]
 800cf7c:	4907      	ldr	r1, [pc, #28]	; (800cf9c <USBD_FS_ConfigStrDescriptor+0x34>)
 800cf7e:	4808      	ldr	r0, [pc, #32]	; (800cfa0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cf80:	f7fc faa9 	bl	80094d6 <USBD_GetString>
 800cf84:	e004      	b.n	800cf90 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cf86:	683a      	ldr	r2, [r7, #0]
 800cf88:	4904      	ldr	r1, [pc, #16]	; (800cf9c <USBD_FS_ConfigStrDescriptor+0x34>)
 800cf8a:	4805      	ldr	r0, [pc, #20]	; (800cfa0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cf8c:	f7fc faa3 	bl	80094d6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cf90:	4b02      	ldr	r3, [pc, #8]	; (800cf9c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cf92:	4618      	mov	r0, r3
 800cf94:	3708      	adds	r7, #8
 800cf96:	46bd      	mov	sp, r7
 800cf98:	bd80      	pop	{r7, pc}
 800cf9a:	bf00      	nop
 800cf9c:	20007b38 	.word	0x20007b38
 800cfa0:	0800f304 	.word	0x0800f304

0800cfa4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	b082      	sub	sp, #8
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	4603      	mov	r3, r0
 800cfac:	6039      	str	r1, [r7, #0]
 800cfae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cfb0:	79fb      	ldrb	r3, [r7, #7]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d105      	bne.n	800cfc2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cfb6:	683a      	ldr	r2, [r7, #0]
 800cfb8:	4907      	ldr	r1, [pc, #28]	; (800cfd8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cfba:	4808      	ldr	r0, [pc, #32]	; (800cfdc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cfbc:	f7fc fa8b 	bl	80094d6 <USBD_GetString>
 800cfc0:	e004      	b.n	800cfcc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cfc2:	683a      	ldr	r2, [r7, #0]
 800cfc4:	4904      	ldr	r1, [pc, #16]	; (800cfd8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cfc6:	4805      	ldr	r0, [pc, #20]	; (800cfdc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cfc8:	f7fc fa85 	bl	80094d6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cfcc:	4b02      	ldr	r3, [pc, #8]	; (800cfd8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cfce:	4618      	mov	r0, r3
 800cfd0:	3708      	adds	r7, #8
 800cfd2:	46bd      	mov	sp, r7
 800cfd4:	bd80      	pop	{r7, pc}
 800cfd6:	bf00      	nop
 800cfd8:	20007b38 	.word	0x20007b38
 800cfdc:	0800f310 	.word	0x0800f310

0800cfe0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cfe0:	b480      	push	{r7}
 800cfe2:	b083      	sub	sp, #12
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	4603      	mov	r3, r0
 800cfe8:	6039      	str	r1, [r7, #0]
 800cfea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800cfec:	683b      	ldr	r3, [r7, #0]
 800cfee:	220c      	movs	r2, #12
 800cff0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800cff2:	4b03      	ldr	r3, [pc, #12]	; (800d000 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800cff4:	4618      	mov	r0, r3
 800cff6:	370c      	adds	r7, #12
 800cff8:	46bd      	mov	sp, r7
 800cffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffe:	4770      	bx	lr
 800d000:	20000168 	.word	0x20000168

0800d004 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d004:	b580      	push	{r7, lr}
 800d006:	b084      	sub	sp, #16
 800d008:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d00a:	4b0f      	ldr	r3, [pc, #60]	; (800d048 <Get_SerialNum+0x44>)
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d010:	4b0e      	ldr	r3, [pc, #56]	; (800d04c <Get_SerialNum+0x48>)
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d016:	4b0e      	ldr	r3, [pc, #56]	; (800d050 <Get_SerialNum+0x4c>)
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d01c:	68fa      	ldr	r2, [r7, #12]
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	4413      	add	r3, r2
 800d022:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d009      	beq.n	800d03e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d02a:	2208      	movs	r2, #8
 800d02c:	4909      	ldr	r1, [pc, #36]	; (800d054 <Get_SerialNum+0x50>)
 800d02e:	68f8      	ldr	r0, [r7, #12]
 800d030:	f000 f814 	bl	800d05c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d034:	2204      	movs	r2, #4
 800d036:	4908      	ldr	r1, [pc, #32]	; (800d058 <Get_SerialNum+0x54>)
 800d038:	68b8      	ldr	r0, [r7, #8]
 800d03a:	f000 f80f 	bl	800d05c <IntToUnicode>
  }
}
 800d03e:	bf00      	nop
 800d040:	3710      	adds	r7, #16
 800d042:	46bd      	mov	sp, r7
 800d044:	bd80      	pop	{r7, pc}
 800d046:	bf00      	nop
 800d048:	1ff0f420 	.word	0x1ff0f420
 800d04c:	1ff0f424 	.word	0x1ff0f424
 800d050:	1ff0f428 	.word	0x1ff0f428
 800d054:	2000017a 	.word	0x2000017a
 800d058:	2000018a 	.word	0x2000018a

0800d05c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d05c:	b480      	push	{r7}
 800d05e:	b087      	sub	sp, #28
 800d060:	af00      	add	r7, sp, #0
 800d062:	60f8      	str	r0, [r7, #12]
 800d064:	60b9      	str	r1, [r7, #8]
 800d066:	4613      	mov	r3, r2
 800d068:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d06a:	2300      	movs	r3, #0
 800d06c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d06e:	2300      	movs	r3, #0
 800d070:	75fb      	strb	r3, [r7, #23]
 800d072:	e027      	b.n	800d0c4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	0f1b      	lsrs	r3, r3, #28
 800d078:	2b09      	cmp	r3, #9
 800d07a:	d80b      	bhi.n	800d094 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	0f1b      	lsrs	r3, r3, #28
 800d080:	b2da      	uxtb	r2, r3
 800d082:	7dfb      	ldrb	r3, [r7, #23]
 800d084:	005b      	lsls	r3, r3, #1
 800d086:	4619      	mov	r1, r3
 800d088:	68bb      	ldr	r3, [r7, #8]
 800d08a:	440b      	add	r3, r1
 800d08c:	3230      	adds	r2, #48	; 0x30
 800d08e:	b2d2      	uxtb	r2, r2
 800d090:	701a      	strb	r2, [r3, #0]
 800d092:	e00a      	b.n	800d0aa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	0f1b      	lsrs	r3, r3, #28
 800d098:	b2da      	uxtb	r2, r3
 800d09a:	7dfb      	ldrb	r3, [r7, #23]
 800d09c:	005b      	lsls	r3, r3, #1
 800d09e:	4619      	mov	r1, r3
 800d0a0:	68bb      	ldr	r3, [r7, #8]
 800d0a2:	440b      	add	r3, r1
 800d0a4:	3237      	adds	r2, #55	; 0x37
 800d0a6:	b2d2      	uxtb	r2, r2
 800d0a8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	011b      	lsls	r3, r3, #4
 800d0ae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d0b0:	7dfb      	ldrb	r3, [r7, #23]
 800d0b2:	005b      	lsls	r3, r3, #1
 800d0b4:	3301      	adds	r3, #1
 800d0b6:	68ba      	ldr	r2, [r7, #8]
 800d0b8:	4413      	add	r3, r2
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d0be:	7dfb      	ldrb	r3, [r7, #23]
 800d0c0:	3301      	adds	r3, #1
 800d0c2:	75fb      	strb	r3, [r7, #23]
 800d0c4:	7dfa      	ldrb	r2, [r7, #23]
 800d0c6:	79fb      	ldrb	r3, [r7, #7]
 800d0c8:	429a      	cmp	r2, r3
 800d0ca:	d3d3      	bcc.n	800d074 <IntToUnicode+0x18>
  }
}
 800d0cc:	bf00      	nop
 800d0ce:	371c      	adds	r7, #28
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d6:	4770      	bx	lr

0800d0d8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b08a      	sub	sp, #40	; 0x28
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d0e0:	f107 0314 	add.w	r3, r7, #20
 800d0e4:	2200      	movs	r2, #0
 800d0e6:	601a      	str	r2, [r3, #0]
 800d0e8:	605a      	str	r2, [r3, #4]
 800d0ea:	609a      	str	r2, [r3, #8]
 800d0ec:	60da      	str	r2, [r3, #12]
 800d0ee:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d0f8:	d13c      	bne.n	800d174 <HAL_PCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d0fa:	4b20      	ldr	r3, [pc, #128]	; (800d17c <HAL_PCD_MspInit+0xa4>)
 800d0fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0fe:	4a1f      	ldr	r2, [pc, #124]	; (800d17c <HAL_PCD_MspInit+0xa4>)
 800d100:	f043 0301 	orr.w	r3, r3, #1
 800d104:	6313      	str	r3, [r2, #48]	; 0x30
 800d106:	4b1d      	ldr	r3, [pc, #116]	; (800d17c <HAL_PCD_MspInit+0xa4>)
 800d108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d10a:	f003 0301 	and.w	r3, r3, #1
 800d10e:	613b      	str	r3, [r7, #16]
 800d110:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d112:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d116:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d118:	2302      	movs	r3, #2
 800d11a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d11c:	2300      	movs	r3, #0
 800d11e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d120:	2303      	movs	r3, #3
 800d122:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d124:	230a      	movs	r3, #10
 800d126:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d128:	f107 0314 	add.w	r3, r7, #20
 800d12c:	4619      	mov	r1, r3
 800d12e:	4814      	ldr	r0, [pc, #80]	; (800d180 <HAL_PCD_MspInit+0xa8>)
 800d130:	f7f5 ffde 	bl	80030f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d134:	4b11      	ldr	r3, [pc, #68]	; (800d17c <HAL_PCD_MspInit+0xa4>)
 800d136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d138:	4a10      	ldr	r2, [pc, #64]	; (800d17c <HAL_PCD_MspInit+0xa4>)
 800d13a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d13e:	6353      	str	r3, [r2, #52]	; 0x34
 800d140:	4b0e      	ldr	r3, [pc, #56]	; (800d17c <HAL_PCD_MspInit+0xa4>)
 800d142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d148:	60fb      	str	r3, [r7, #12]
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	4b0b      	ldr	r3, [pc, #44]	; (800d17c <HAL_PCD_MspInit+0xa4>)
 800d14e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d150:	4a0a      	ldr	r2, [pc, #40]	; (800d17c <HAL_PCD_MspInit+0xa4>)
 800d152:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d156:	6453      	str	r3, [r2, #68]	; 0x44
 800d158:	4b08      	ldr	r3, [pc, #32]	; (800d17c <HAL_PCD_MspInit+0xa4>)
 800d15a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d15c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d160:	60bb      	str	r3, [r7, #8]
 800d162:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800d164:	2200      	movs	r2, #0
 800d166:	2105      	movs	r1, #5
 800d168:	2043      	movs	r0, #67	; 0x43
 800d16a:	f7f5 ff97 	bl	800309c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d16e:	2043      	movs	r0, #67	; 0x43
 800d170:	f7f5 ffb0 	bl	80030d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d174:	bf00      	nop
 800d176:	3728      	adds	r7, #40	; 0x28
 800d178:	46bd      	mov	sp, r7
 800d17a:	bd80      	pop	{r7, pc}
 800d17c:	40023800 	.word	0x40023800
 800d180:	40020000 	.word	0x40020000

0800d184 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d184:	b580      	push	{r7, lr}
 800d186:	b082      	sub	sp, #8
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d198:	4619      	mov	r1, r3
 800d19a:	4610      	mov	r0, r2
 800d19c:	f7fb f9ee 	bl	800857c <USBD_LL_SetupStage>
}
 800d1a0:	bf00      	nop
 800d1a2:	3708      	adds	r7, #8
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	bd80      	pop	{r7, pc}

0800d1a8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	b082      	sub	sp, #8
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
 800d1b0:	460b      	mov	r3, r1
 800d1b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 800d1ba:	78fa      	ldrb	r2, [r7, #3]
 800d1bc:	6879      	ldr	r1, [r7, #4]
 800d1be:	4613      	mov	r3, r2
 800d1c0:	00db      	lsls	r3, r3, #3
 800d1c2:	1a9b      	subs	r3, r3, r2
 800d1c4:	009b      	lsls	r3, r3, #2
 800d1c6:	440b      	add	r3, r1
 800d1c8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d1cc:	681a      	ldr	r2, [r3, #0]
 800d1ce:	78fb      	ldrb	r3, [r7, #3]
 800d1d0:	4619      	mov	r1, r3
 800d1d2:	f7fb fa26 	bl	8008622 <USBD_LL_DataOutStage>
}
 800d1d6:	bf00      	nop
 800d1d8:	3708      	adds	r7, #8
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	bd80      	pop	{r7, pc}

0800d1de <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1de:	b580      	push	{r7, lr}
 800d1e0:	b082      	sub	sp, #8
 800d1e2:	af00      	add	r7, sp, #0
 800d1e4:	6078      	str	r0, [r7, #4]
 800d1e6:	460b      	mov	r3, r1
 800d1e8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 800d1f0:	78fa      	ldrb	r2, [r7, #3]
 800d1f2:	6879      	ldr	r1, [r7, #4]
 800d1f4:	4613      	mov	r3, r2
 800d1f6:	00db      	lsls	r3, r3, #3
 800d1f8:	1a9b      	subs	r3, r3, r2
 800d1fa:	009b      	lsls	r3, r3, #2
 800d1fc:	440b      	add	r3, r1
 800d1fe:	3348      	adds	r3, #72	; 0x48
 800d200:	681a      	ldr	r2, [r3, #0]
 800d202:	78fb      	ldrb	r3, [r7, #3]
 800d204:	4619      	mov	r1, r3
 800d206:	f7fb fa6f 	bl	80086e8 <USBD_LL_DataInStage>
}
 800d20a:	bf00      	nop
 800d20c:	3708      	adds	r7, #8
 800d20e:	46bd      	mov	sp, r7
 800d210:	bd80      	pop	{r7, pc}

0800d212 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d212:	b580      	push	{r7, lr}
 800d214:	b082      	sub	sp, #8
 800d216:	af00      	add	r7, sp, #0
 800d218:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800d220:	4618      	mov	r0, r3
 800d222:	f7fb fb73 	bl	800890c <USBD_LL_SOF>
}
 800d226:	bf00      	nop
 800d228:	3708      	adds	r7, #8
 800d22a:	46bd      	mov	sp, r7
 800d22c:	bd80      	pop	{r7, pc}

0800d22e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800d22e:	b580      	push	{r7, lr}
 800d230:	b084      	sub	sp, #16
 800d232:	af00      	add	r7, sp, #0
 800d234:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d236:	2301      	movs	r3, #1
 800d238:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	68db      	ldr	r3, [r3, #12]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d102      	bne.n	800d248 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d242:	2300      	movs	r3, #0
 800d244:	73fb      	strb	r3, [r7, #15]
 800d246:	e008      	b.n	800d25a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	68db      	ldr	r3, [r3, #12]
 800d24c:	2b02      	cmp	r3, #2
 800d24e:	d102      	bne.n	800d256 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d250:	2301      	movs	r3, #1
 800d252:	73fb      	strb	r3, [r7, #15]
 800d254:	e001      	b.n	800d25a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d256:	f7f4 f87b 	bl	8001350 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800d260:	7bfa      	ldrb	r2, [r7, #15]
 800d262:	4611      	mov	r1, r2
 800d264:	4618      	mov	r0, r3
 800d266:	f7fb fb16 	bl	8008896 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800d270:	4618      	mov	r0, r3
 800d272:	f7fb facf 	bl	8008814 <USBD_LL_Reset>
}
 800d276:	bf00      	nop
 800d278:	3710      	adds	r7, #16
 800d27a:	46bd      	mov	sp, r7
 800d27c:	bd80      	pop	{r7, pc}
	...

0800d280 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b082      	sub	sp, #8
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800d28e:	4618      	mov	r0, r3
 800d290:	f7fb fb11 	bl	80088b6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	687a      	ldr	r2, [r7, #4]
 800d2a0:	6812      	ldr	r2, [r2, #0]
 800d2a2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d2a6:	f043 0301 	orr.w	r3, r3, #1
 800d2aa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	6a1b      	ldr	r3, [r3, #32]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d005      	beq.n	800d2c0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d2b4:	4b04      	ldr	r3, [pc, #16]	; (800d2c8 <HAL_PCD_SuspendCallback+0x48>)
 800d2b6:	691b      	ldr	r3, [r3, #16]
 800d2b8:	4a03      	ldr	r2, [pc, #12]	; (800d2c8 <HAL_PCD_SuspendCallback+0x48>)
 800d2ba:	f043 0306 	orr.w	r3, r3, #6
 800d2be:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d2c0:	bf00      	nop
 800d2c2:	3708      	adds	r7, #8
 800d2c4:	46bd      	mov	sp, r7
 800d2c6:	bd80      	pop	{r7, pc}
 800d2c8:	e000ed00 	.word	0xe000ed00

0800d2cc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b082      	sub	sp, #8
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800d2da:	4618      	mov	r0, r3
 800d2dc:	f7fb fb00 	bl	80088e0 <USBD_LL_Resume>
}
 800d2e0:	bf00      	nop
 800d2e2:	3708      	adds	r7, #8
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	bd80      	pop	{r7, pc}

0800d2e8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b082      	sub	sp, #8
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
 800d2f0:	460b      	mov	r3, r1
 800d2f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800d2fa:	78fa      	ldrb	r2, [r7, #3]
 800d2fc:	4611      	mov	r1, r2
 800d2fe:	4618      	mov	r0, r3
 800d300:	f7fb fb2b 	bl	800895a <USBD_LL_IsoOUTIncomplete>
}
 800d304:	bf00      	nop
 800d306:	3708      	adds	r7, #8
 800d308:	46bd      	mov	sp, r7
 800d30a:	bd80      	pop	{r7, pc}

0800d30c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b082      	sub	sp, #8
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
 800d314:	460b      	mov	r3, r1
 800d316:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800d31e:	78fa      	ldrb	r2, [r7, #3]
 800d320:	4611      	mov	r1, r2
 800d322:	4618      	mov	r0, r3
 800d324:	f7fb fb0c 	bl	8008940 <USBD_LL_IsoINIncomplete>
}
 800d328:	bf00      	nop
 800d32a:	3708      	adds	r7, #8
 800d32c:	46bd      	mov	sp, r7
 800d32e:	bd80      	pop	{r7, pc}

0800d330 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d330:	b580      	push	{r7, lr}
 800d332:	b082      	sub	sp, #8
 800d334:	af00      	add	r7, sp, #0
 800d336:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800d33e:	4618      	mov	r0, r3
 800d340:	f7fb fb18 	bl	8008974 <USBD_LL_DevConnected>
}
 800d344:	bf00      	nop
 800d346:	3708      	adds	r7, #8
 800d348:	46bd      	mov	sp, r7
 800d34a:	bd80      	pop	{r7, pc}

0800d34c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b082      	sub	sp, #8
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800d35a:	4618      	mov	r0, r3
 800d35c:	f7fb fb15 	bl	800898a <USBD_LL_DevDisconnected>
}
 800d360:	bf00      	nop
 800d362:	3708      	adds	r7, #8
 800d364:	46bd      	mov	sp, r7
 800d366:	bd80      	pop	{r7, pc}

0800d368 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d368:	b580      	push	{r7, lr}
 800d36a:	b082      	sub	sp, #8
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	781b      	ldrb	r3, [r3, #0]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d13c      	bne.n	800d3f2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d378:	4a20      	ldr	r2, [pc, #128]	; (800d3fc <USBD_LL_Init+0x94>)
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	4a1e      	ldr	r2, [pc, #120]	; (800d3fc <USBD_LL_Init+0x94>)
 800d384:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d388:	4b1c      	ldr	r3, [pc, #112]	; (800d3fc <USBD_LL_Init+0x94>)
 800d38a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d38e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800d390:	4b1a      	ldr	r3, [pc, #104]	; (800d3fc <USBD_LL_Init+0x94>)
 800d392:	2206      	movs	r2, #6
 800d394:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d396:	4b19      	ldr	r3, [pc, #100]	; (800d3fc <USBD_LL_Init+0x94>)
 800d398:	2202      	movs	r2, #2
 800d39a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d39c:	4b17      	ldr	r3, [pc, #92]	; (800d3fc <USBD_LL_Init+0x94>)
 800d39e:	2200      	movs	r2, #0
 800d3a0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d3a2:	4b16      	ldr	r3, [pc, #88]	; (800d3fc <USBD_LL_Init+0x94>)
 800d3a4:	2202      	movs	r2, #2
 800d3a6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d3a8:	4b14      	ldr	r3, [pc, #80]	; (800d3fc <USBD_LL_Init+0x94>)
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d3ae:	4b13      	ldr	r3, [pc, #76]	; (800d3fc <USBD_LL_Init+0x94>)
 800d3b0:	2200      	movs	r2, #0
 800d3b2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d3b4:	4b11      	ldr	r3, [pc, #68]	; (800d3fc <USBD_LL_Init+0x94>)
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d3ba:	4b10      	ldr	r3, [pc, #64]	; (800d3fc <USBD_LL_Init+0x94>)
 800d3bc:	2200      	movs	r2, #0
 800d3be:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d3c0:	4b0e      	ldr	r3, [pc, #56]	; (800d3fc <USBD_LL_Init+0x94>)
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d3c6:	480d      	ldr	r0, [pc, #52]	; (800d3fc <USBD_LL_Init+0x94>)
 800d3c8:	f7f6 f83c 	bl	8003444 <HAL_PCD_Init>
 800d3cc:	4603      	mov	r3, r0
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d001      	beq.n	800d3d6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d3d2:	f7f3 ffbd 	bl	8001350 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d3d6:	2180      	movs	r1, #128	; 0x80
 800d3d8:	4808      	ldr	r0, [pc, #32]	; (800d3fc <USBD_LL_Init+0x94>)
 800d3da:	f7f7 f9bc 	bl	8004756 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d3de:	2240      	movs	r2, #64	; 0x40
 800d3e0:	2100      	movs	r1, #0
 800d3e2:	4806      	ldr	r0, [pc, #24]	; (800d3fc <USBD_LL_Init+0x94>)
 800d3e4:	f7f7 f970 	bl	80046c8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d3e8:	2280      	movs	r2, #128	; 0x80
 800d3ea:	2101      	movs	r1, #1
 800d3ec:	4803      	ldr	r0, [pc, #12]	; (800d3fc <USBD_LL_Init+0x94>)
 800d3ee:	f7f7 f96b 	bl	80046c8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d3f2:	2300      	movs	r3, #0
}
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	3708      	adds	r7, #8
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	bd80      	pop	{r7, pc}
 800d3fc:	20007d38 	.word	0x20007d38

0800d400 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d400:	b580      	push	{r7, lr}
 800d402:	b084      	sub	sp, #16
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d408:	2300      	movs	r3, #0
 800d40a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d40c:	2300      	movs	r3, #0
 800d40e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d416:	4618      	mov	r0, r3
 800d418:	f7f6 f938 	bl	800368c <HAL_PCD_Start>
 800d41c:	4603      	mov	r3, r0
 800d41e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 800d420:	7bfb      	ldrb	r3, [r7, #15]
 800d422:	4618      	mov	r0, r3
 800d424:	f000 f97e 	bl	800d724 <USBD_Get_USB_Status>
 800d428:	4603      	mov	r3, r0
 800d42a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800d42c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d42e:	4618      	mov	r0, r3
 800d430:	3710      	adds	r7, #16
 800d432:	46bd      	mov	sp, r7
 800d434:	bd80      	pop	{r7, pc}

0800d436 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d436:	b580      	push	{r7, lr}
 800d438:	b084      	sub	sp, #16
 800d43a:	af00      	add	r7, sp, #0
 800d43c:	6078      	str	r0, [r7, #4]
 800d43e:	4608      	mov	r0, r1
 800d440:	4611      	mov	r1, r2
 800d442:	461a      	mov	r2, r3
 800d444:	4603      	mov	r3, r0
 800d446:	70fb      	strb	r3, [r7, #3]
 800d448:	460b      	mov	r3, r1
 800d44a:	70bb      	strb	r3, [r7, #2]
 800d44c:	4613      	mov	r3, r2
 800d44e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d450:	2300      	movs	r3, #0
 800d452:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d454:	2300      	movs	r3, #0
 800d456:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d45e:	78bb      	ldrb	r3, [r7, #2]
 800d460:	883a      	ldrh	r2, [r7, #0]
 800d462:	78f9      	ldrb	r1, [r7, #3]
 800d464:	f7f6 fd38 	bl	8003ed8 <HAL_PCD_EP_Open>
 800d468:	4603      	mov	r3, r0
 800d46a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d46c:	7bfb      	ldrb	r3, [r7, #15]
 800d46e:	4618      	mov	r0, r3
 800d470:	f000 f958 	bl	800d724 <USBD_Get_USB_Status>
 800d474:	4603      	mov	r3, r0
 800d476:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800d478:	7bbb      	ldrb	r3, [r7, #14]
}
 800d47a:	4618      	mov	r0, r3
 800d47c:	3710      	adds	r7, #16
 800d47e:	46bd      	mov	sp, r7
 800d480:	bd80      	pop	{r7, pc}

0800d482 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d482:	b580      	push	{r7, lr}
 800d484:	b084      	sub	sp, #16
 800d486:	af00      	add	r7, sp, #0
 800d488:	6078      	str	r0, [r7, #4]
 800d48a:	460b      	mov	r3, r1
 800d48c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d48e:	2300      	movs	r3, #0
 800d490:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d492:	2300      	movs	r3, #0
 800d494:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d49c:	78fa      	ldrb	r2, [r7, #3]
 800d49e:	4611      	mov	r1, r2
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	f7f6 fd81 	bl	8003fa8 <HAL_PCD_EP_Close>
 800d4a6:	4603      	mov	r3, r0
 800d4a8:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 800d4aa:	7bfb      	ldrb	r3, [r7, #15]
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	f000 f939 	bl	800d724 <USBD_Get_USB_Status>
 800d4b2:	4603      	mov	r3, r0
 800d4b4:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800d4b6:	7bbb      	ldrb	r3, [r7, #14]
}
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	3710      	adds	r7, #16
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	bd80      	pop	{r7, pc}

0800d4c0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b084      	sub	sp, #16
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
 800d4c8:	460b      	mov	r3, r1
 800d4ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d4da:	78fa      	ldrb	r2, [r7, #3]
 800d4dc:	4611      	mov	r1, r2
 800d4de:	4618      	mov	r0, r3
 800d4e0:	f7f6 fe59 	bl	8004196 <HAL_PCD_EP_SetStall>
 800d4e4:	4603      	mov	r3, r0
 800d4e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d4e8:	7bfb      	ldrb	r3, [r7, #15]
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	f000 f91a 	bl	800d724 <USBD_Get_USB_Status>
 800d4f0:	4603      	mov	r3, r0
 800d4f2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800d4f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	3710      	adds	r7, #16
 800d4fa:	46bd      	mov	sp, r7
 800d4fc:	bd80      	pop	{r7, pc}

0800d4fe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d4fe:	b580      	push	{r7, lr}
 800d500:	b084      	sub	sp, #16
 800d502:	af00      	add	r7, sp, #0
 800d504:	6078      	str	r0, [r7, #4]
 800d506:	460b      	mov	r3, r1
 800d508:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d50a:	2300      	movs	r3, #0
 800d50c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d50e:	2300      	movs	r3, #0
 800d510:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d518:	78fa      	ldrb	r2, [r7, #3]
 800d51a:	4611      	mov	r1, r2
 800d51c:	4618      	mov	r0, r3
 800d51e:	f7f6 fe9e 	bl	800425e <HAL_PCD_EP_ClrStall>
 800d522:	4603      	mov	r3, r0
 800d524:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800d526:	7bfb      	ldrb	r3, [r7, #15]
 800d528:	4618      	mov	r0, r3
 800d52a:	f000 f8fb 	bl	800d724 <USBD_Get_USB_Status>
 800d52e:	4603      	mov	r3, r0
 800d530:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 800d532:	7bbb      	ldrb	r3, [r7, #14]
}
 800d534:	4618      	mov	r0, r3
 800d536:	3710      	adds	r7, #16
 800d538:	46bd      	mov	sp, r7
 800d53a:	bd80      	pop	{r7, pc}

0800d53c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d53c:	b480      	push	{r7}
 800d53e:	b085      	sub	sp, #20
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
 800d544:	460b      	mov	r3, r1
 800d546:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d54e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800d550:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d554:	2b00      	cmp	r3, #0
 800d556:	da0b      	bge.n	800d570 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800d558:	78fb      	ldrb	r3, [r7, #3]
 800d55a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d55e:	68f9      	ldr	r1, [r7, #12]
 800d560:	4613      	mov	r3, r2
 800d562:	00db      	lsls	r3, r3, #3
 800d564:	1a9b      	subs	r3, r3, r2
 800d566:	009b      	lsls	r3, r3, #2
 800d568:	440b      	add	r3, r1
 800d56a:	333e      	adds	r3, #62	; 0x3e
 800d56c:	781b      	ldrb	r3, [r3, #0]
 800d56e:	e00b      	b.n	800d588 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800d570:	78fb      	ldrb	r3, [r7, #3]
 800d572:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d576:	68f9      	ldr	r1, [r7, #12]
 800d578:	4613      	mov	r3, r2
 800d57a:	00db      	lsls	r3, r3, #3
 800d57c:	1a9b      	subs	r3, r3, r2
 800d57e:	009b      	lsls	r3, r3, #2
 800d580:	440b      	add	r3, r1
 800d582:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d586:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d588:	4618      	mov	r0, r3
 800d58a:	3714      	adds	r7, #20
 800d58c:	46bd      	mov	sp, r7
 800d58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d592:	4770      	bx	lr

0800d594 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b084      	sub	sp, #16
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
 800d59c:	460b      	mov	r3, r1
 800d59e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d5ae:	78fa      	ldrb	r2, [r7, #3]
 800d5b0:	4611      	mov	r1, r2
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	f7f6 fc6b 	bl	8003e8e <HAL_PCD_SetAddress>
 800d5b8:	4603      	mov	r3, r0
 800d5ba:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d5bc:	7bfb      	ldrb	r3, [r7, #15]
 800d5be:	4618      	mov	r0, r3
 800d5c0:	f000 f8b0 	bl	800d724 <USBD_Get_USB_Status>
 800d5c4:	4603      	mov	r3, r0
 800d5c6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800d5c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	3710      	adds	r7, #16
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	bd80      	pop	{r7, pc}

0800d5d2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d5d2:	b580      	push	{r7, lr}
 800d5d4:	b086      	sub	sp, #24
 800d5d6:	af00      	add	r7, sp, #0
 800d5d8:	60f8      	str	r0, [r7, #12]
 800d5da:	607a      	str	r2, [r7, #4]
 800d5dc:	603b      	str	r3, [r7, #0]
 800d5de:	460b      	mov	r3, r1
 800d5e0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d5f0:	7af9      	ldrb	r1, [r7, #11]
 800d5f2:	683b      	ldr	r3, [r7, #0]
 800d5f4:	687a      	ldr	r2, [r7, #4]
 800d5f6:	f7f6 fd84 	bl	8004102 <HAL_PCD_EP_Transmit>
 800d5fa:	4603      	mov	r3, r0
 800d5fc:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800d5fe:	7dfb      	ldrb	r3, [r7, #23]
 800d600:	4618      	mov	r0, r3
 800d602:	f000 f88f 	bl	800d724 <USBD_Get_USB_Status>
 800d606:	4603      	mov	r3, r0
 800d608:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800d60a:	7dbb      	ldrb	r3, [r7, #22]
}
 800d60c:	4618      	mov	r0, r3
 800d60e:	3718      	adds	r7, #24
 800d610:	46bd      	mov	sp, r7
 800d612:	bd80      	pop	{r7, pc}

0800d614 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d614:	b580      	push	{r7, lr}
 800d616:	b086      	sub	sp, #24
 800d618:	af00      	add	r7, sp, #0
 800d61a:	60f8      	str	r0, [r7, #12]
 800d61c:	607a      	str	r2, [r7, #4]
 800d61e:	603b      	str	r3, [r7, #0]
 800d620:	460b      	mov	r3, r1
 800d622:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d624:	2300      	movs	r3, #0
 800d626:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d628:	2300      	movs	r3, #0
 800d62a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d632:	7af9      	ldrb	r1, [r7, #11]
 800d634:	683b      	ldr	r3, [r7, #0]
 800d636:	687a      	ldr	r2, [r7, #4]
 800d638:	f7f6 fd00 	bl	800403c <HAL_PCD_EP_Receive>
 800d63c:	4603      	mov	r3, r0
 800d63e:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 800d640:	7dfb      	ldrb	r3, [r7, #23]
 800d642:	4618      	mov	r0, r3
 800d644:	f000 f86e 	bl	800d724 <USBD_Get_USB_Status>
 800d648:	4603      	mov	r3, r0
 800d64a:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 800d64c:	7dbb      	ldrb	r3, [r7, #22]
}
 800d64e:	4618      	mov	r0, r3
 800d650:	3718      	adds	r7, #24
 800d652:	46bd      	mov	sp, r7
 800d654:	bd80      	pop	{r7, pc}

0800d656 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d656:	b580      	push	{r7, lr}
 800d658:	b082      	sub	sp, #8
 800d65a:	af00      	add	r7, sp, #0
 800d65c:	6078      	str	r0, [r7, #4]
 800d65e:	460b      	mov	r3, r1
 800d660:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d668:	78fa      	ldrb	r2, [r7, #3]
 800d66a:	4611      	mov	r1, r2
 800d66c:	4618      	mov	r0, r3
 800d66e:	f7f6 fd30 	bl	80040d2 <HAL_PCD_EP_GetRxCount>
 800d672:	4603      	mov	r3, r0
}
 800d674:	4618      	mov	r0, r3
 800d676:	3708      	adds	r7, #8
 800d678:	46bd      	mov	sp, r7
 800d67a:	bd80      	pop	{r7, pc}

0800d67c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b082      	sub	sp, #8
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
 800d684:	460b      	mov	r3, r1
 800d686:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800d688:	78fb      	ldrb	r3, [r7, #3]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d002      	beq.n	800d694 <HAL_PCDEx_LPM_Callback+0x18>
 800d68e:	2b01      	cmp	r3, #1
 800d690:	d01f      	beq.n	800d6d2 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 800d692:	e03b      	b.n	800d70c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	6a1b      	ldr	r3, [r3, #32]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d007      	beq.n	800d6ac <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800d69c:	f000 f83c 	bl	800d718 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d6a0:	4b1c      	ldr	r3, [pc, #112]	; (800d714 <HAL_PCDEx_LPM_Callback+0x98>)
 800d6a2:	691b      	ldr	r3, [r3, #16]
 800d6a4:	4a1b      	ldr	r2, [pc, #108]	; (800d714 <HAL_PCDEx_LPM_Callback+0x98>)
 800d6a6:	f023 0306 	bic.w	r3, r3, #6
 800d6aa:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	687a      	ldr	r2, [r7, #4]
 800d6b8:	6812      	ldr	r2, [r2, #0]
 800d6ba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d6be:	f023 0301 	bic.w	r3, r3, #1
 800d6c2:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	f7fb f908 	bl	80088e0 <USBD_LL_Resume>
    break;
 800d6d0:	e01c      	b.n	800d70c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	687a      	ldr	r2, [r7, #4]
 800d6de:	6812      	ldr	r2, [r2, #0]
 800d6e0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d6e4:	f043 0301 	orr.w	r3, r3, #1
 800d6e8:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	f7fb f8e0 	bl	80088b6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	6a1b      	ldr	r3, [r3, #32]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d005      	beq.n	800d70a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d6fe:	4b05      	ldr	r3, [pc, #20]	; (800d714 <HAL_PCDEx_LPM_Callback+0x98>)
 800d700:	691b      	ldr	r3, [r3, #16]
 800d702:	4a04      	ldr	r2, [pc, #16]	; (800d714 <HAL_PCDEx_LPM_Callback+0x98>)
 800d704:	f043 0306 	orr.w	r3, r3, #6
 800d708:	6113      	str	r3, [r2, #16]
    break;   
 800d70a:	bf00      	nop
}
 800d70c:	bf00      	nop
 800d70e:	3708      	adds	r7, #8
 800d710:	46bd      	mov	sp, r7
 800d712:	bd80      	pop	{r7, pc}
 800d714:	e000ed00 	.word	0xe000ed00

0800d718 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800d71c:	f7f3 fc98 	bl	8001050 <SystemClock_Config>
}
 800d720:	bf00      	nop
 800d722:	bd80      	pop	{r7, pc}

0800d724 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d724:	b480      	push	{r7}
 800d726:	b085      	sub	sp, #20
 800d728:	af00      	add	r7, sp, #0
 800d72a:	4603      	mov	r3, r0
 800d72c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d72e:	2300      	movs	r3, #0
 800d730:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d732:	79fb      	ldrb	r3, [r7, #7]
 800d734:	2b03      	cmp	r3, #3
 800d736:	d817      	bhi.n	800d768 <USBD_Get_USB_Status+0x44>
 800d738:	a201      	add	r2, pc, #4	; (adr r2, 800d740 <USBD_Get_USB_Status+0x1c>)
 800d73a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d73e:	bf00      	nop
 800d740:	0800d751 	.word	0x0800d751
 800d744:	0800d757 	.word	0x0800d757
 800d748:	0800d75d 	.word	0x0800d75d
 800d74c:	0800d763 	.word	0x0800d763
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d750:	2300      	movs	r3, #0
 800d752:	73fb      	strb	r3, [r7, #15]
    break;
 800d754:	e00b      	b.n	800d76e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d756:	2303      	movs	r3, #3
 800d758:	73fb      	strb	r3, [r7, #15]
    break;
 800d75a:	e008      	b.n	800d76e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d75c:	2301      	movs	r3, #1
 800d75e:	73fb      	strb	r3, [r7, #15]
    break;
 800d760:	e005      	b.n	800d76e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d762:	2303      	movs	r3, #3
 800d764:	73fb      	strb	r3, [r7, #15]
    break;
 800d766:	e002      	b.n	800d76e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d768:	2303      	movs	r3, #3
 800d76a:	73fb      	strb	r3, [r7, #15]
    break;
 800d76c:	bf00      	nop
  }
  return usb_status;
 800d76e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d770:	4618      	mov	r0, r3
 800d772:	3714      	adds	r7, #20
 800d774:	46bd      	mov	sp, r7
 800d776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d77a:	4770      	bx	lr

0800d77c <__errno>:
 800d77c:	4b01      	ldr	r3, [pc, #4]	; (800d784 <__errno+0x8>)
 800d77e:	6818      	ldr	r0, [r3, #0]
 800d780:	4770      	bx	lr
 800d782:	bf00      	nop
 800d784:	20000194 	.word	0x20000194

0800d788 <__libc_init_array>:
 800d788:	b570      	push	{r4, r5, r6, lr}
 800d78a:	4e0d      	ldr	r6, [pc, #52]	; (800d7c0 <__libc_init_array+0x38>)
 800d78c:	4c0d      	ldr	r4, [pc, #52]	; (800d7c4 <__libc_init_array+0x3c>)
 800d78e:	1ba4      	subs	r4, r4, r6
 800d790:	10a4      	asrs	r4, r4, #2
 800d792:	2500      	movs	r5, #0
 800d794:	42a5      	cmp	r5, r4
 800d796:	d109      	bne.n	800d7ac <__libc_init_array+0x24>
 800d798:	4e0b      	ldr	r6, [pc, #44]	; (800d7c8 <__libc_init_array+0x40>)
 800d79a:	4c0c      	ldr	r4, [pc, #48]	; (800d7cc <__libc_init_array+0x44>)
 800d79c:	f001 fd22 	bl	800f1e4 <_init>
 800d7a0:	1ba4      	subs	r4, r4, r6
 800d7a2:	10a4      	asrs	r4, r4, #2
 800d7a4:	2500      	movs	r5, #0
 800d7a6:	42a5      	cmp	r5, r4
 800d7a8:	d105      	bne.n	800d7b6 <__libc_init_array+0x2e>
 800d7aa:	bd70      	pop	{r4, r5, r6, pc}
 800d7ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d7b0:	4798      	blx	r3
 800d7b2:	3501      	adds	r5, #1
 800d7b4:	e7ee      	b.n	800d794 <__libc_init_array+0xc>
 800d7b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d7ba:	4798      	blx	r3
 800d7bc:	3501      	adds	r5, #1
 800d7be:	e7f2      	b.n	800d7a6 <__libc_init_array+0x1e>
 800d7c0:	0800f478 	.word	0x0800f478
 800d7c4:	0800f478 	.word	0x0800f478
 800d7c8:	0800f478 	.word	0x0800f478
 800d7cc:	0800f47c 	.word	0x0800f47c

0800d7d0 <malloc>:
 800d7d0:	4b02      	ldr	r3, [pc, #8]	; (800d7dc <malloc+0xc>)
 800d7d2:	4601      	mov	r1, r0
 800d7d4:	6818      	ldr	r0, [r3, #0]
 800d7d6:	f000 b86d 	b.w	800d8b4 <_malloc_r>
 800d7da:	bf00      	nop
 800d7dc:	20000194 	.word	0x20000194

0800d7e0 <free>:
 800d7e0:	4b02      	ldr	r3, [pc, #8]	; (800d7ec <free+0xc>)
 800d7e2:	4601      	mov	r1, r0
 800d7e4:	6818      	ldr	r0, [r3, #0]
 800d7e6:	f000 b817 	b.w	800d818 <_free_r>
 800d7ea:	bf00      	nop
 800d7ec:	20000194 	.word	0x20000194

0800d7f0 <memcpy>:
 800d7f0:	b510      	push	{r4, lr}
 800d7f2:	1e43      	subs	r3, r0, #1
 800d7f4:	440a      	add	r2, r1
 800d7f6:	4291      	cmp	r1, r2
 800d7f8:	d100      	bne.n	800d7fc <memcpy+0xc>
 800d7fa:	bd10      	pop	{r4, pc}
 800d7fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d800:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d804:	e7f7      	b.n	800d7f6 <memcpy+0x6>

0800d806 <memset>:
 800d806:	4402      	add	r2, r0
 800d808:	4603      	mov	r3, r0
 800d80a:	4293      	cmp	r3, r2
 800d80c:	d100      	bne.n	800d810 <memset+0xa>
 800d80e:	4770      	bx	lr
 800d810:	f803 1b01 	strb.w	r1, [r3], #1
 800d814:	e7f9      	b.n	800d80a <memset+0x4>
	...

0800d818 <_free_r>:
 800d818:	b538      	push	{r3, r4, r5, lr}
 800d81a:	4605      	mov	r5, r0
 800d81c:	2900      	cmp	r1, #0
 800d81e:	d045      	beq.n	800d8ac <_free_r+0x94>
 800d820:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d824:	1f0c      	subs	r4, r1, #4
 800d826:	2b00      	cmp	r3, #0
 800d828:	bfb8      	it	lt
 800d82a:	18e4      	addlt	r4, r4, r3
 800d82c:	f000 f8e6 	bl	800d9fc <__malloc_lock>
 800d830:	4a1f      	ldr	r2, [pc, #124]	; (800d8b0 <_free_r+0x98>)
 800d832:	6813      	ldr	r3, [r2, #0]
 800d834:	4610      	mov	r0, r2
 800d836:	b933      	cbnz	r3, 800d846 <_free_r+0x2e>
 800d838:	6063      	str	r3, [r4, #4]
 800d83a:	6014      	str	r4, [r2, #0]
 800d83c:	4628      	mov	r0, r5
 800d83e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d842:	f000 b8dc 	b.w	800d9fe <__malloc_unlock>
 800d846:	42a3      	cmp	r3, r4
 800d848:	d90c      	bls.n	800d864 <_free_r+0x4c>
 800d84a:	6821      	ldr	r1, [r4, #0]
 800d84c:	1862      	adds	r2, r4, r1
 800d84e:	4293      	cmp	r3, r2
 800d850:	bf04      	itt	eq
 800d852:	681a      	ldreq	r2, [r3, #0]
 800d854:	685b      	ldreq	r3, [r3, #4]
 800d856:	6063      	str	r3, [r4, #4]
 800d858:	bf04      	itt	eq
 800d85a:	1852      	addeq	r2, r2, r1
 800d85c:	6022      	streq	r2, [r4, #0]
 800d85e:	6004      	str	r4, [r0, #0]
 800d860:	e7ec      	b.n	800d83c <_free_r+0x24>
 800d862:	4613      	mov	r3, r2
 800d864:	685a      	ldr	r2, [r3, #4]
 800d866:	b10a      	cbz	r2, 800d86c <_free_r+0x54>
 800d868:	42a2      	cmp	r2, r4
 800d86a:	d9fa      	bls.n	800d862 <_free_r+0x4a>
 800d86c:	6819      	ldr	r1, [r3, #0]
 800d86e:	1858      	adds	r0, r3, r1
 800d870:	42a0      	cmp	r0, r4
 800d872:	d10b      	bne.n	800d88c <_free_r+0x74>
 800d874:	6820      	ldr	r0, [r4, #0]
 800d876:	4401      	add	r1, r0
 800d878:	1858      	adds	r0, r3, r1
 800d87a:	4282      	cmp	r2, r0
 800d87c:	6019      	str	r1, [r3, #0]
 800d87e:	d1dd      	bne.n	800d83c <_free_r+0x24>
 800d880:	6810      	ldr	r0, [r2, #0]
 800d882:	6852      	ldr	r2, [r2, #4]
 800d884:	605a      	str	r2, [r3, #4]
 800d886:	4401      	add	r1, r0
 800d888:	6019      	str	r1, [r3, #0]
 800d88a:	e7d7      	b.n	800d83c <_free_r+0x24>
 800d88c:	d902      	bls.n	800d894 <_free_r+0x7c>
 800d88e:	230c      	movs	r3, #12
 800d890:	602b      	str	r3, [r5, #0]
 800d892:	e7d3      	b.n	800d83c <_free_r+0x24>
 800d894:	6820      	ldr	r0, [r4, #0]
 800d896:	1821      	adds	r1, r4, r0
 800d898:	428a      	cmp	r2, r1
 800d89a:	bf04      	itt	eq
 800d89c:	6811      	ldreq	r1, [r2, #0]
 800d89e:	6852      	ldreq	r2, [r2, #4]
 800d8a0:	6062      	str	r2, [r4, #4]
 800d8a2:	bf04      	itt	eq
 800d8a4:	1809      	addeq	r1, r1, r0
 800d8a6:	6021      	streq	r1, [r4, #0]
 800d8a8:	605c      	str	r4, [r3, #4]
 800d8aa:	e7c7      	b.n	800d83c <_free_r+0x24>
 800d8ac:	bd38      	pop	{r3, r4, r5, pc}
 800d8ae:	bf00      	nop
 800d8b0:	20004bc8 	.word	0x20004bc8

0800d8b4 <_malloc_r>:
 800d8b4:	b570      	push	{r4, r5, r6, lr}
 800d8b6:	1ccd      	adds	r5, r1, #3
 800d8b8:	f025 0503 	bic.w	r5, r5, #3
 800d8bc:	3508      	adds	r5, #8
 800d8be:	2d0c      	cmp	r5, #12
 800d8c0:	bf38      	it	cc
 800d8c2:	250c      	movcc	r5, #12
 800d8c4:	2d00      	cmp	r5, #0
 800d8c6:	4606      	mov	r6, r0
 800d8c8:	db01      	blt.n	800d8ce <_malloc_r+0x1a>
 800d8ca:	42a9      	cmp	r1, r5
 800d8cc:	d903      	bls.n	800d8d6 <_malloc_r+0x22>
 800d8ce:	230c      	movs	r3, #12
 800d8d0:	6033      	str	r3, [r6, #0]
 800d8d2:	2000      	movs	r0, #0
 800d8d4:	bd70      	pop	{r4, r5, r6, pc}
 800d8d6:	f000 f891 	bl	800d9fc <__malloc_lock>
 800d8da:	4a21      	ldr	r2, [pc, #132]	; (800d960 <_malloc_r+0xac>)
 800d8dc:	6814      	ldr	r4, [r2, #0]
 800d8de:	4621      	mov	r1, r4
 800d8e0:	b991      	cbnz	r1, 800d908 <_malloc_r+0x54>
 800d8e2:	4c20      	ldr	r4, [pc, #128]	; (800d964 <_malloc_r+0xb0>)
 800d8e4:	6823      	ldr	r3, [r4, #0]
 800d8e6:	b91b      	cbnz	r3, 800d8f0 <_malloc_r+0x3c>
 800d8e8:	4630      	mov	r0, r6
 800d8ea:	f000 f83d 	bl	800d968 <_sbrk_r>
 800d8ee:	6020      	str	r0, [r4, #0]
 800d8f0:	4629      	mov	r1, r5
 800d8f2:	4630      	mov	r0, r6
 800d8f4:	f000 f838 	bl	800d968 <_sbrk_r>
 800d8f8:	1c43      	adds	r3, r0, #1
 800d8fa:	d124      	bne.n	800d946 <_malloc_r+0x92>
 800d8fc:	230c      	movs	r3, #12
 800d8fe:	6033      	str	r3, [r6, #0]
 800d900:	4630      	mov	r0, r6
 800d902:	f000 f87c 	bl	800d9fe <__malloc_unlock>
 800d906:	e7e4      	b.n	800d8d2 <_malloc_r+0x1e>
 800d908:	680b      	ldr	r3, [r1, #0]
 800d90a:	1b5b      	subs	r3, r3, r5
 800d90c:	d418      	bmi.n	800d940 <_malloc_r+0x8c>
 800d90e:	2b0b      	cmp	r3, #11
 800d910:	d90f      	bls.n	800d932 <_malloc_r+0x7e>
 800d912:	600b      	str	r3, [r1, #0]
 800d914:	50cd      	str	r5, [r1, r3]
 800d916:	18cc      	adds	r4, r1, r3
 800d918:	4630      	mov	r0, r6
 800d91a:	f000 f870 	bl	800d9fe <__malloc_unlock>
 800d91e:	f104 000b 	add.w	r0, r4, #11
 800d922:	1d23      	adds	r3, r4, #4
 800d924:	f020 0007 	bic.w	r0, r0, #7
 800d928:	1ac3      	subs	r3, r0, r3
 800d92a:	d0d3      	beq.n	800d8d4 <_malloc_r+0x20>
 800d92c:	425a      	negs	r2, r3
 800d92e:	50e2      	str	r2, [r4, r3]
 800d930:	e7d0      	b.n	800d8d4 <_malloc_r+0x20>
 800d932:	428c      	cmp	r4, r1
 800d934:	684b      	ldr	r3, [r1, #4]
 800d936:	bf16      	itet	ne
 800d938:	6063      	strne	r3, [r4, #4]
 800d93a:	6013      	streq	r3, [r2, #0]
 800d93c:	460c      	movne	r4, r1
 800d93e:	e7eb      	b.n	800d918 <_malloc_r+0x64>
 800d940:	460c      	mov	r4, r1
 800d942:	6849      	ldr	r1, [r1, #4]
 800d944:	e7cc      	b.n	800d8e0 <_malloc_r+0x2c>
 800d946:	1cc4      	adds	r4, r0, #3
 800d948:	f024 0403 	bic.w	r4, r4, #3
 800d94c:	42a0      	cmp	r0, r4
 800d94e:	d005      	beq.n	800d95c <_malloc_r+0xa8>
 800d950:	1a21      	subs	r1, r4, r0
 800d952:	4630      	mov	r0, r6
 800d954:	f000 f808 	bl	800d968 <_sbrk_r>
 800d958:	3001      	adds	r0, #1
 800d95a:	d0cf      	beq.n	800d8fc <_malloc_r+0x48>
 800d95c:	6025      	str	r5, [r4, #0]
 800d95e:	e7db      	b.n	800d918 <_malloc_r+0x64>
 800d960:	20004bc8 	.word	0x20004bc8
 800d964:	20004bcc 	.word	0x20004bcc

0800d968 <_sbrk_r>:
 800d968:	b538      	push	{r3, r4, r5, lr}
 800d96a:	4c06      	ldr	r4, [pc, #24]	; (800d984 <_sbrk_r+0x1c>)
 800d96c:	2300      	movs	r3, #0
 800d96e:	4605      	mov	r5, r0
 800d970:	4608      	mov	r0, r1
 800d972:	6023      	str	r3, [r4, #0]
 800d974:	f7f3 fe76 	bl	8001664 <_sbrk>
 800d978:	1c43      	adds	r3, r0, #1
 800d97a:	d102      	bne.n	800d982 <_sbrk_r+0x1a>
 800d97c:	6823      	ldr	r3, [r4, #0]
 800d97e:	b103      	cbz	r3, 800d982 <_sbrk_r+0x1a>
 800d980:	602b      	str	r3, [r5, #0]
 800d982:	bd38      	pop	{r3, r4, r5, pc}
 800d984:	2000813c 	.word	0x2000813c

0800d988 <_vsniprintf_r>:
 800d988:	b530      	push	{r4, r5, lr}
 800d98a:	1e14      	subs	r4, r2, #0
 800d98c:	4605      	mov	r5, r0
 800d98e:	b09b      	sub	sp, #108	; 0x6c
 800d990:	4618      	mov	r0, r3
 800d992:	da05      	bge.n	800d9a0 <_vsniprintf_r+0x18>
 800d994:	238b      	movs	r3, #139	; 0x8b
 800d996:	602b      	str	r3, [r5, #0]
 800d998:	f04f 30ff 	mov.w	r0, #4294967295
 800d99c:	b01b      	add	sp, #108	; 0x6c
 800d99e:	bd30      	pop	{r4, r5, pc}
 800d9a0:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d9a4:	f8ad 300c 	strh.w	r3, [sp, #12]
 800d9a8:	bf14      	ite	ne
 800d9aa:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d9ae:	4623      	moveq	r3, r4
 800d9b0:	9302      	str	r3, [sp, #8]
 800d9b2:	9305      	str	r3, [sp, #20]
 800d9b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d9b8:	9100      	str	r1, [sp, #0]
 800d9ba:	9104      	str	r1, [sp, #16]
 800d9bc:	f8ad 300e 	strh.w	r3, [sp, #14]
 800d9c0:	4602      	mov	r2, r0
 800d9c2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d9c4:	4669      	mov	r1, sp
 800d9c6:	4628      	mov	r0, r5
 800d9c8:	f000 f874 	bl	800dab4 <_svfiprintf_r>
 800d9cc:	1c43      	adds	r3, r0, #1
 800d9ce:	bfbc      	itt	lt
 800d9d0:	238b      	movlt	r3, #139	; 0x8b
 800d9d2:	602b      	strlt	r3, [r5, #0]
 800d9d4:	2c00      	cmp	r4, #0
 800d9d6:	d0e1      	beq.n	800d99c <_vsniprintf_r+0x14>
 800d9d8:	9b00      	ldr	r3, [sp, #0]
 800d9da:	2200      	movs	r2, #0
 800d9dc:	701a      	strb	r2, [r3, #0]
 800d9de:	e7dd      	b.n	800d99c <_vsniprintf_r+0x14>

0800d9e0 <vsniprintf>:
 800d9e0:	b507      	push	{r0, r1, r2, lr}
 800d9e2:	9300      	str	r3, [sp, #0]
 800d9e4:	4613      	mov	r3, r2
 800d9e6:	460a      	mov	r2, r1
 800d9e8:	4601      	mov	r1, r0
 800d9ea:	4803      	ldr	r0, [pc, #12]	; (800d9f8 <vsniprintf+0x18>)
 800d9ec:	6800      	ldr	r0, [r0, #0]
 800d9ee:	f7ff ffcb 	bl	800d988 <_vsniprintf_r>
 800d9f2:	b003      	add	sp, #12
 800d9f4:	f85d fb04 	ldr.w	pc, [sp], #4
 800d9f8:	20000194 	.word	0x20000194

0800d9fc <__malloc_lock>:
 800d9fc:	4770      	bx	lr

0800d9fe <__malloc_unlock>:
 800d9fe:	4770      	bx	lr

0800da00 <__ssputs_r>:
 800da00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da04:	688e      	ldr	r6, [r1, #8]
 800da06:	429e      	cmp	r6, r3
 800da08:	4682      	mov	sl, r0
 800da0a:	460c      	mov	r4, r1
 800da0c:	4690      	mov	r8, r2
 800da0e:	4699      	mov	r9, r3
 800da10:	d837      	bhi.n	800da82 <__ssputs_r+0x82>
 800da12:	898a      	ldrh	r2, [r1, #12]
 800da14:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800da18:	d031      	beq.n	800da7e <__ssputs_r+0x7e>
 800da1a:	6825      	ldr	r5, [r4, #0]
 800da1c:	6909      	ldr	r1, [r1, #16]
 800da1e:	1a6f      	subs	r7, r5, r1
 800da20:	6965      	ldr	r5, [r4, #20]
 800da22:	2302      	movs	r3, #2
 800da24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800da28:	fb95 f5f3 	sdiv	r5, r5, r3
 800da2c:	f109 0301 	add.w	r3, r9, #1
 800da30:	443b      	add	r3, r7
 800da32:	429d      	cmp	r5, r3
 800da34:	bf38      	it	cc
 800da36:	461d      	movcc	r5, r3
 800da38:	0553      	lsls	r3, r2, #21
 800da3a:	d530      	bpl.n	800da9e <__ssputs_r+0x9e>
 800da3c:	4629      	mov	r1, r5
 800da3e:	f7ff ff39 	bl	800d8b4 <_malloc_r>
 800da42:	4606      	mov	r6, r0
 800da44:	b950      	cbnz	r0, 800da5c <__ssputs_r+0x5c>
 800da46:	230c      	movs	r3, #12
 800da48:	f8ca 3000 	str.w	r3, [sl]
 800da4c:	89a3      	ldrh	r3, [r4, #12]
 800da4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da52:	81a3      	strh	r3, [r4, #12]
 800da54:	f04f 30ff 	mov.w	r0, #4294967295
 800da58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da5c:	463a      	mov	r2, r7
 800da5e:	6921      	ldr	r1, [r4, #16]
 800da60:	f7ff fec6 	bl	800d7f0 <memcpy>
 800da64:	89a3      	ldrh	r3, [r4, #12]
 800da66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800da6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da6e:	81a3      	strh	r3, [r4, #12]
 800da70:	6126      	str	r6, [r4, #16]
 800da72:	6165      	str	r5, [r4, #20]
 800da74:	443e      	add	r6, r7
 800da76:	1bed      	subs	r5, r5, r7
 800da78:	6026      	str	r6, [r4, #0]
 800da7a:	60a5      	str	r5, [r4, #8]
 800da7c:	464e      	mov	r6, r9
 800da7e:	454e      	cmp	r6, r9
 800da80:	d900      	bls.n	800da84 <__ssputs_r+0x84>
 800da82:	464e      	mov	r6, r9
 800da84:	4632      	mov	r2, r6
 800da86:	4641      	mov	r1, r8
 800da88:	6820      	ldr	r0, [r4, #0]
 800da8a:	f000 fa93 	bl	800dfb4 <memmove>
 800da8e:	68a3      	ldr	r3, [r4, #8]
 800da90:	1b9b      	subs	r3, r3, r6
 800da92:	60a3      	str	r3, [r4, #8]
 800da94:	6823      	ldr	r3, [r4, #0]
 800da96:	441e      	add	r6, r3
 800da98:	6026      	str	r6, [r4, #0]
 800da9a:	2000      	movs	r0, #0
 800da9c:	e7dc      	b.n	800da58 <__ssputs_r+0x58>
 800da9e:	462a      	mov	r2, r5
 800daa0:	f000 faa1 	bl	800dfe6 <_realloc_r>
 800daa4:	4606      	mov	r6, r0
 800daa6:	2800      	cmp	r0, #0
 800daa8:	d1e2      	bne.n	800da70 <__ssputs_r+0x70>
 800daaa:	6921      	ldr	r1, [r4, #16]
 800daac:	4650      	mov	r0, sl
 800daae:	f7ff feb3 	bl	800d818 <_free_r>
 800dab2:	e7c8      	b.n	800da46 <__ssputs_r+0x46>

0800dab4 <_svfiprintf_r>:
 800dab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dab8:	461d      	mov	r5, r3
 800daba:	898b      	ldrh	r3, [r1, #12]
 800dabc:	061f      	lsls	r7, r3, #24
 800dabe:	b09d      	sub	sp, #116	; 0x74
 800dac0:	4680      	mov	r8, r0
 800dac2:	460c      	mov	r4, r1
 800dac4:	4616      	mov	r6, r2
 800dac6:	d50f      	bpl.n	800dae8 <_svfiprintf_r+0x34>
 800dac8:	690b      	ldr	r3, [r1, #16]
 800daca:	b96b      	cbnz	r3, 800dae8 <_svfiprintf_r+0x34>
 800dacc:	2140      	movs	r1, #64	; 0x40
 800dace:	f7ff fef1 	bl	800d8b4 <_malloc_r>
 800dad2:	6020      	str	r0, [r4, #0]
 800dad4:	6120      	str	r0, [r4, #16]
 800dad6:	b928      	cbnz	r0, 800dae4 <_svfiprintf_r+0x30>
 800dad8:	230c      	movs	r3, #12
 800dada:	f8c8 3000 	str.w	r3, [r8]
 800dade:	f04f 30ff 	mov.w	r0, #4294967295
 800dae2:	e0c8      	b.n	800dc76 <_svfiprintf_r+0x1c2>
 800dae4:	2340      	movs	r3, #64	; 0x40
 800dae6:	6163      	str	r3, [r4, #20]
 800dae8:	2300      	movs	r3, #0
 800daea:	9309      	str	r3, [sp, #36]	; 0x24
 800daec:	2320      	movs	r3, #32
 800daee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800daf2:	2330      	movs	r3, #48	; 0x30
 800daf4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800daf8:	9503      	str	r5, [sp, #12]
 800dafa:	f04f 0b01 	mov.w	fp, #1
 800dafe:	4637      	mov	r7, r6
 800db00:	463d      	mov	r5, r7
 800db02:	f815 3b01 	ldrb.w	r3, [r5], #1
 800db06:	b10b      	cbz	r3, 800db0c <_svfiprintf_r+0x58>
 800db08:	2b25      	cmp	r3, #37	; 0x25
 800db0a:	d13e      	bne.n	800db8a <_svfiprintf_r+0xd6>
 800db0c:	ebb7 0a06 	subs.w	sl, r7, r6
 800db10:	d00b      	beq.n	800db2a <_svfiprintf_r+0x76>
 800db12:	4653      	mov	r3, sl
 800db14:	4632      	mov	r2, r6
 800db16:	4621      	mov	r1, r4
 800db18:	4640      	mov	r0, r8
 800db1a:	f7ff ff71 	bl	800da00 <__ssputs_r>
 800db1e:	3001      	adds	r0, #1
 800db20:	f000 80a4 	beq.w	800dc6c <_svfiprintf_r+0x1b8>
 800db24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db26:	4453      	add	r3, sl
 800db28:	9309      	str	r3, [sp, #36]	; 0x24
 800db2a:	783b      	ldrb	r3, [r7, #0]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	f000 809d 	beq.w	800dc6c <_svfiprintf_r+0x1b8>
 800db32:	2300      	movs	r3, #0
 800db34:	f04f 32ff 	mov.w	r2, #4294967295
 800db38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800db3c:	9304      	str	r3, [sp, #16]
 800db3e:	9307      	str	r3, [sp, #28]
 800db40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800db44:	931a      	str	r3, [sp, #104]	; 0x68
 800db46:	462f      	mov	r7, r5
 800db48:	2205      	movs	r2, #5
 800db4a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800db4e:	4850      	ldr	r0, [pc, #320]	; (800dc90 <_svfiprintf_r+0x1dc>)
 800db50:	f7f2 fb66 	bl	8000220 <memchr>
 800db54:	9b04      	ldr	r3, [sp, #16]
 800db56:	b9d0      	cbnz	r0, 800db8e <_svfiprintf_r+0xda>
 800db58:	06d9      	lsls	r1, r3, #27
 800db5a:	bf44      	itt	mi
 800db5c:	2220      	movmi	r2, #32
 800db5e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800db62:	071a      	lsls	r2, r3, #28
 800db64:	bf44      	itt	mi
 800db66:	222b      	movmi	r2, #43	; 0x2b
 800db68:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800db6c:	782a      	ldrb	r2, [r5, #0]
 800db6e:	2a2a      	cmp	r2, #42	; 0x2a
 800db70:	d015      	beq.n	800db9e <_svfiprintf_r+0xea>
 800db72:	9a07      	ldr	r2, [sp, #28]
 800db74:	462f      	mov	r7, r5
 800db76:	2000      	movs	r0, #0
 800db78:	250a      	movs	r5, #10
 800db7a:	4639      	mov	r1, r7
 800db7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db80:	3b30      	subs	r3, #48	; 0x30
 800db82:	2b09      	cmp	r3, #9
 800db84:	d94d      	bls.n	800dc22 <_svfiprintf_r+0x16e>
 800db86:	b1b8      	cbz	r0, 800dbb8 <_svfiprintf_r+0x104>
 800db88:	e00f      	b.n	800dbaa <_svfiprintf_r+0xf6>
 800db8a:	462f      	mov	r7, r5
 800db8c:	e7b8      	b.n	800db00 <_svfiprintf_r+0x4c>
 800db8e:	4a40      	ldr	r2, [pc, #256]	; (800dc90 <_svfiprintf_r+0x1dc>)
 800db90:	1a80      	subs	r0, r0, r2
 800db92:	fa0b f000 	lsl.w	r0, fp, r0
 800db96:	4318      	orrs	r0, r3
 800db98:	9004      	str	r0, [sp, #16]
 800db9a:	463d      	mov	r5, r7
 800db9c:	e7d3      	b.n	800db46 <_svfiprintf_r+0x92>
 800db9e:	9a03      	ldr	r2, [sp, #12]
 800dba0:	1d11      	adds	r1, r2, #4
 800dba2:	6812      	ldr	r2, [r2, #0]
 800dba4:	9103      	str	r1, [sp, #12]
 800dba6:	2a00      	cmp	r2, #0
 800dba8:	db01      	blt.n	800dbae <_svfiprintf_r+0xfa>
 800dbaa:	9207      	str	r2, [sp, #28]
 800dbac:	e004      	b.n	800dbb8 <_svfiprintf_r+0x104>
 800dbae:	4252      	negs	r2, r2
 800dbb0:	f043 0302 	orr.w	r3, r3, #2
 800dbb4:	9207      	str	r2, [sp, #28]
 800dbb6:	9304      	str	r3, [sp, #16]
 800dbb8:	783b      	ldrb	r3, [r7, #0]
 800dbba:	2b2e      	cmp	r3, #46	; 0x2e
 800dbbc:	d10c      	bne.n	800dbd8 <_svfiprintf_r+0x124>
 800dbbe:	787b      	ldrb	r3, [r7, #1]
 800dbc0:	2b2a      	cmp	r3, #42	; 0x2a
 800dbc2:	d133      	bne.n	800dc2c <_svfiprintf_r+0x178>
 800dbc4:	9b03      	ldr	r3, [sp, #12]
 800dbc6:	1d1a      	adds	r2, r3, #4
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	9203      	str	r2, [sp, #12]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	bfb8      	it	lt
 800dbd0:	f04f 33ff 	movlt.w	r3, #4294967295
 800dbd4:	3702      	adds	r7, #2
 800dbd6:	9305      	str	r3, [sp, #20]
 800dbd8:	4d2e      	ldr	r5, [pc, #184]	; (800dc94 <_svfiprintf_r+0x1e0>)
 800dbda:	7839      	ldrb	r1, [r7, #0]
 800dbdc:	2203      	movs	r2, #3
 800dbde:	4628      	mov	r0, r5
 800dbe0:	f7f2 fb1e 	bl	8000220 <memchr>
 800dbe4:	b138      	cbz	r0, 800dbf6 <_svfiprintf_r+0x142>
 800dbe6:	2340      	movs	r3, #64	; 0x40
 800dbe8:	1b40      	subs	r0, r0, r5
 800dbea:	fa03 f000 	lsl.w	r0, r3, r0
 800dbee:	9b04      	ldr	r3, [sp, #16]
 800dbf0:	4303      	orrs	r3, r0
 800dbf2:	3701      	adds	r7, #1
 800dbf4:	9304      	str	r3, [sp, #16]
 800dbf6:	7839      	ldrb	r1, [r7, #0]
 800dbf8:	4827      	ldr	r0, [pc, #156]	; (800dc98 <_svfiprintf_r+0x1e4>)
 800dbfa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dbfe:	2206      	movs	r2, #6
 800dc00:	1c7e      	adds	r6, r7, #1
 800dc02:	f7f2 fb0d 	bl	8000220 <memchr>
 800dc06:	2800      	cmp	r0, #0
 800dc08:	d038      	beq.n	800dc7c <_svfiprintf_r+0x1c8>
 800dc0a:	4b24      	ldr	r3, [pc, #144]	; (800dc9c <_svfiprintf_r+0x1e8>)
 800dc0c:	bb13      	cbnz	r3, 800dc54 <_svfiprintf_r+0x1a0>
 800dc0e:	9b03      	ldr	r3, [sp, #12]
 800dc10:	3307      	adds	r3, #7
 800dc12:	f023 0307 	bic.w	r3, r3, #7
 800dc16:	3308      	adds	r3, #8
 800dc18:	9303      	str	r3, [sp, #12]
 800dc1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc1c:	444b      	add	r3, r9
 800dc1e:	9309      	str	r3, [sp, #36]	; 0x24
 800dc20:	e76d      	b.n	800dafe <_svfiprintf_r+0x4a>
 800dc22:	fb05 3202 	mla	r2, r5, r2, r3
 800dc26:	2001      	movs	r0, #1
 800dc28:	460f      	mov	r7, r1
 800dc2a:	e7a6      	b.n	800db7a <_svfiprintf_r+0xc6>
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	3701      	adds	r7, #1
 800dc30:	9305      	str	r3, [sp, #20]
 800dc32:	4619      	mov	r1, r3
 800dc34:	250a      	movs	r5, #10
 800dc36:	4638      	mov	r0, r7
 800dc38:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc3c:	3a30      	subs	r2, #48	; 0x30
 800dc3e:	2a09      	cmp	r2, #9
 800dc40:	d903      	bls.n	800dc4a <_svfiprintf_r+0x196>
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d0c8      	beq.n	800dbd8 <_svfiprintf_r+0x124>
 800dc46:	9105      	str	r1, [sp, #20]
 800dc48:	e7c6      	b.n	800dbd8 <_svfiprintf_r+0x124>
 800dc4a:	fb05 2101 	mla	r1, r5, r1, r2
 800dc4e:	2301      	movs	r3, #1
 800dc50:	4607      	mov	r7, r0
 800dc52:	e7f0      	b.n	800dc36 <_svfiprintf_r+0x182>
 800dc54:	ab03      	add	r3, sp, #12
 800dc56:	9300      	str	r3, [sp, #0]
 800dc58:	4622      	mov	r2, r4
 800dc5a:	4b11      	ldr	r3, [pc, #68]	; (800dca0 <_svfiprintf_r+0x1ec>)
 800dc5c:	a904      	add	r1, sp, #16
 800dc5e:	4640      	mov	r0, r8
 800dc60:	f3af 8000 	nop.w
 800dc64:	f1b0 3fff 	cmp.w	r0, #4294967295
 800dc68:	4681      	mov	r9, r0
 800dc6a:	d1d6      	bne.n	800dc1a <_svfiprintf_r+0x166>
 800dc6c:	89a3      	ldrh	r3, [r4, #12]
 800dc6e:	065b      	lsls	r3, r3, #25
 800dc70:	f53f af35 	bmi.w	800dade <_svfiprintf_r+0x2a>
 800dc74:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dc76:	b01d      	add	sp, #116	; 0x74
 800dc78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc7c:	ab03      	add	r3, sp, #12
 800dc7e:	9300      	str	r3, [sp, #0]
 800dc80:	4622      	mov	r2, r4
 800dc82:	4b07      	ldr	r3, [pc, #28]	; (800dca0 <_svfiprintf_r+0x1ec>)
 800dc84:	a904      	add	r1, sp, #16
 800dc86:	4640      	mov	r0, r8
 800dc88:	f000 f882 	bl	800dd90 <_printf_i>
 800dc8c:	e7ea      	b.n	800dc64 <_svfiprintf_r+0x1b0>
 800dc8e:	bf00      	nop
 800dc90:	0800f3f8 	.word	0x0800f3f8
 800dc94:	0800f3fe 	.word	0x0800f3fe
 800dc98:	0800f402 	.word	0x0800f402
 800dc9c:	00000000 	.word	0x00000000
 800dca0:	0800da01 	.word	0x0800da01

0800dca4 <_printf_common>:
 800dca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dca8:	4691      	mov	r9, r2
 800dcaa:	461f      	mov	r7, r3
 800dcac:	688a      	ldr	r2, [r1, #8]
 800dcae:	690b      	ldr	r3, [r1, #16]
 800dcb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dcb4:	4293      	cmp	r3, r2
 800dcb6:	bfb8      	it	lt
 800dcb8:	4613      	movlt	r3, r2
 800dcba:	f8c9 3000 	str.w	r3, [r9]
 800dcbe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dcc2:	4606      	mov	r6, r0
 800dcc4:	460c      	mov	r4, r1
 800dcc6:	b112      	cbz	r2, 800dcce <_printf_common+0x2a>
 800dcc8:	3301      	adds	r3, #1
 800dcca:	f8c9 3000 	str.w	r3, [r9]
 800dcce:	6823      	ldr	r3, [r4, #0]
 800dcd0:	0699      	lsls	r1, r3, #26
 800dcd2:	bf42      	ittt	mi
 800dcd4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800dcd8:	3302      	addmi	r3, #2
 800dcda:	f8c9 3000 	strmi.w	r3, [r9]
 800dcde:	6825      	ldr	r5, [r4, #0]
 800dce0:	f015 0506 	ands.w	r5, r5, #6
 800dce4:	d107      	bne.n	800dcf6 <_printf_common+0x52>
 800dce6:	f104 0a19 	add.w	sl, r4, #25
 800dcea:	68e3      	ldr	r3, [r4, #12]
 800dcec:	f8d9 2000 	ldr.w	r2, [r9]
 800dcf0:	1a9b      	subs	r3, r3, r2
 800dcf2:	42ab      	cmp	r3, r5
 800dcf4:	dc28      	bgt.n	800dd48 <_printf_common+0xa4>
 800dcf6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800dcfa:	6822      	ldr	r2, [r4, #0]
 800dcfc:	3300      	adds	r3, #0
 800dcfe:	bf18      	it	ne
 800dd00:	2301      	movne	r3, #1
 800dd02:	0692      	lsls	r2, r2, #26
 800dd04:	d42d      	bmi.n	800dd62 <_printf_common+0xbe>
 800dd06:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dd0a:	4639      	mov	r1, r7
 800dd0c:	4630      	mov	r0, r6
 800dd0e:	47c0      	blx	r8
 800dd10:	3001      	adds	r0, #1
 800dd12:	d020      	beq.n	800dd56 <_printf_common+0xb2>
 800dd14:	6823      	ldr	r3, [r4, #0]
 800dd16:	68e5      	ldr	r5, [r4, #12]
 800dd18:	f8d9 2000 	ldr.w	r2, [r9]
 800dd1c:	f003 0306 	and.w	r3, r3, #6
 800dd20:	2b04      	cmp	r3, #4
 800dd22:	bf08      	it	eq
 800dd24:	1aad      	subeq	r5, r5, r2
 800dd26:	68a3      	ldr	r3, [r4, #8]
 800dd28:	6922      	ldr	r2, [r4, #16]
 800dd2a:	bf0c      	ite	eq
 800dd2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dd30:	2500      	movne	r5, #0
 800dd32:	4293      	cmp	r3, r2
 800dd34:	bfc4      	itt	gt
 800dd36:	1a9b      	subgt	r3, r3, r2
 800dd38:	18ed      	addgt	r5, r5, r3
 800dd3a:	f04f 0900 	mov.w	r9, #0
 800dd3e:	341a      	adds	r4, #26
 800dd40:	454d      	cmp	r5, r9
 800dd42:	d11a      	bne.n	800dd7a <_printf_common+0xd6>
 800dd44:	2000      	movs	r0, #0
 800dd46:	e008      	b.n	800dd5a <_printf_common+0xb6>
 800dd48:	2301      	movs	r3, #1
 800dd4a:	4652      	mov	r2, sl
 800dd4c:	4639      	mov	r1, r7
 800dd4e:	4630      	mov	r0, r6
 800dd50:	47c0      	blx	r8
 800dd52:	3001      	adds	r0, #1
 800dd54:	d103      	bne.n	800dd5e <_printf_common+0xba>
 800dd56:	f04f 30ff 	mov.w	r0, #4294967295
 800dd5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd5e:	3501      	adds	r5, #1
 800dd60:	e7c3      	b.n	800dcea <_printf_common+0x46>
 800dd62:	18e1      	adds	r1, r4, r3
 800dd64:	1c5a      	adds	r2, r3, #1
 800dd66:	2030      	movs	r0, #48	; 0x30
 800dd68:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dd6c:	4422      	add	r2, r4
 800dd6e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dd72:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dd76:	3302      	adds	r3, #2
 800dd78:	e7c5      	b.n	800dd06 <_printf_common+0x62>
 800dd7a:	2301      	movs	r3, #1
 800dd7c:	4622      	mov	r2, r4
 800dd7e:	4639      	mov	r1, r7
 800dd80:	4630      	mov	r0, r6
 800dd82:	47c0      	blx	r8
 800dd84:	3001      	adds	r0, #1
 800dd86:	d0e6      	beq.n	800dd56 <_printf_common+0xb2>
 800dd88:	f109 0901 	add.w	r9, r9, #1
 800dd8c:	e7d8      	b.n	800dd40 <_printf_common+0x9c>
	...

0800dd90 <_printf_i>:
 800dd90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dd94:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800dd98:	460c      	mov	r4, r1
 800dd9a:	7e09      	ldrb	r1, [r1, #24]
 800dd9c:	b085      	sub	sp, #20
 800dd9e:	296e      	cmp	r1, #110	; 0x6e
 800dda0:	4617      	mov	r7, r2
 800dda2:	4606      	mov	r6, r0
 800dda4:	4698      	mov	r8, r3
 800dda6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dda8:	f000 80b3 	beq.w	800df12 <_printf_i+0x182>
 800ddac:	d822      	bhi.n	800ddf4 <_printf_i+0x64>
 800ddae:	2963      	cmp	r1, #99	; 0x63
 800ddb0:	d036      	beq.n	800de20 <_printf_i+0x90>
 800ddb2:	d80a      	bhi.n	800ddca <_printf_i+0x3a>
 800ddb4:	2900      	cmp	r1, #0
 800ddb6:	f000 80b9 	beq.w	800df2c <_printf_i+0x19c>
 800ddba:	2958      	cmp	r1, #88	; 0x58
 800ddbc:	f000 8083 	beq.w	800dec6 <_printf_i+0x136>
 800ddc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ddc4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800ddc8:	e032      	b.n	800de30 <_printf_i+0xa0>
 800ddca:	2964      	cmp	r1, #100	; 0x64
 800ddcc:	d001      	beq.n	800ddd2 <_printf_i+0x42>
 800ddce:	2969      	cmp	r1, #105	; 0x69
 800ddd0:	d1f6      	bne.n	800ddc0 <_printf_i+0x30>
 800ddd2:	6820      	ldr	r0, [r4, #0]
 800ddd4:	6813      	ldr	r3, [r2, #0]
 800ddd6:	0605      	lsls	r5, r0, #24
 800ddd8:	f103 0104 	add.w	r1, r3, #4
 800dddc:	d52a      	bpl.n	800de34 <_printf_i+0xa4>
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	6011      	str	r1, [r2, #0]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	da03      	bge.n	800ddee <_printf_i+0x5e>
 800dde6:	222d      	movs	r2, #45	; 0x2d
 800dde8:	425b      	negs	r3, r3
 800ddea:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800ddee:	486f      	ldr	r0, [pc, #444]	; (800dfac <_printf_i+0x21c>)
 800ddf0:	220a      	movs	r2, #10
 800ddf2:	e039      	b.n	800de68 <_printf_i+0xd8>
 800ddf4:	2973      	cmp	r1, #115	; 0x73
 800ddf6:	f000 809d 	beq.w	800df34 <_printf_i+0x1a4>
 800ddfa:	d808      	bhi.n	800de0e <_printf_i+0x7e>
 800ddfc:	296f      	cmp	r1, #111	; 0x6f
 800ddfe:	d020      	beq.n	800de42 <_printf_i+0xb2>
 800de00:	2970      	cmp	r1, #112	; 0x70
 800de02:	d1dd      	bne.n	800ddc0 <_printf_i+0x30>
 800de04:	6823      	ldr	r3, [r4, #0]
 800de06:	f043 0320 	orr.w	r3, r3, #32
 800de0a:	6023      	str	r3, [r4, #0]
 800de0c:	e003      	b.n	800de16 <_printf_i+0x86>
 800de0e:	2975      	cmp	r1, #117	; 0x75
 800de10:	d017      	beq.n	800de42 <_printf_i+0xb2>
 800de12:	2978      	cmp	r1, #120	; 0x78
 800de14:	d1d4      	bne.n	800ddc0 <_printf_i+0x30>
 800de16:	2378      	movs	r3, #120	; 0x78
 800de18:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800de1c:	4864      	ldr	r0, [pc, #400]	; (800dfb0 <_printf_i+0x220>)
 800de1e:	e055      	b.n	800decc <_printf_i+0x13c>
 800de20:	6813      	ldr	r3, [r2, #0]
 800de22:	1d19      	adds	r1, r3, #4
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	6011      	str	r1, [r2, #0]
 800de28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800de2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800de30:	2301      	movs	r3, #1
 800de32:	e08c      	b.n	800df4e <_printf_i+0x1be>
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	6011      	str	r1, [r2, #0]
 800de38:	f010 0f40 	tst.w	r0, #64	; 0x40
 800de3c:	bf18      	it	ne
 800de3e:	b21b      	sxthne	r3, r3
 800de40:	e7cf      	b.n	800dde2 <_printf_i+0x52>
 800de42:	6813      	ldr	r3, [r2, #0]
 800de44:	6825      	ldr	r5, [r4, #0]
 800de46:	1d18      	adds	r0, r3, #4
 800de48:	6010      	str	r0, [r2, #0]
 800de4a:	0628      	lsls	r0, r5, #24
 800de4c:	d501      	bpl.n	800de52 <_printf_i+0xc2>
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	e002      	b.n	800de58 <_printf_i+0xc8>
 800de52:	0668      	lsls	r0, r5, #25
 800de54:	d5fb      	bpl.n	800de4e <_printf_i+0xbe>
 800de56:	881b      	ldrh	r3, [r3, #0]
 800de58:	4854      	ldr	r0, [pc, #336]	; (800dfac <_printf_i+0x21c>)
 800de5a:	296f      	cmp	r1, #111	; 0x6f
 800de5c:	bf14      	ite	ne
 800de5e:	220a      	movne	r2, #10
 800de60:	2208      	moveq	r2, #8
 800de62:	2100      	movs	r1, #0
 800de64:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800de68:	6865      	ldr	r5, [r4, #4]
 800de6a:	60a5      	str	r5, [r4, #8]
 800de6c:	2d00      	cmp	r5, #0
 800de6e:	f2c0 8095 	blt.w	800df9c <_printf_i+0x20c>
 800de72:	6821      	ldr	r1, [r4, #0]
 800de74:	f021 0104 	bic.w	r1, r1, #4
 800de78:	6021      	str	r1, [r4, #0]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d13d      	bne.n	800defa <_printf_i+0x16a>
 800de7e:	2d00      	cmp	r5, #0
 800de80:	f040 808e 	bne.w	800dfa0 <_printf_i+0x210>
 800de84:	4665      	mov	r5, ip
 800de86:	2a08      	cmp	r2, #8
 800de88:	d10b      	bne.n	800dea2 <_printf_i+0x112>
 800de8a:	6823      	ldr	r3, [r4, #0]
 800de8c:	07db      	lsls	r3, r3, #31
 800de8e:	d508      	bpl.n	800dea2 <_printf_i+0x112>
 800de90:	6923      	ldr	r3, [r4, #16]
 800de92:	6862      	ldr	r2, [r4, #4]
 800de94:	429a      	cmp	r2, r3
 800de96:	bfde      	ittt	le
 800de98:	2330      	movle	r3, #48	; 0x30
 800de9a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800de9e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800dea2:	ebac 0305 	sub.w	r3, ip, r5
 800dea6:	6123      	str	r3, [r4, #16]
 800dea8:	f8cd 8000 	str.w	r8, [sp]
 800deac:	463b      	mov	r3, r7
 800deae:	aa03      	add	r2, sp, #12
 800deb0:	4621      	mov	r1, r4
 800deb2:	4630      	mov	r0, r6
 800deb4:	f7ff fef6 	bl	800dca4 <_printf_common>
 800deb8:	3001      	adds	r0, #1
 800deba:	d14d      	bne.n	800df58 <_printf_i+0x1c8>
 800debc:	f04f 30ff 	mov.w	r0, #4294967295
 800dec0:	b005      	add	sp, #20
 800dec2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dec6:	4839      	ldr	r0, [pc, #228]	; (800dfac <_printf_i+0x21c>)
 800dec8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800decc:	6813      	ldr	r3, [r2, #0]
 800dece:	6821      	ldr	r1, [r4, #0]
 800ded0:	1d1d      	adds	r5, r3, #4
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	6015      	str	r5, [r2, #0]
 800ded6:	060a      	lsls	r2, r1, #24
 800ded8:	d50b      	bpl.n	800def2 <_printf_i+0x162>
 800deda:	07ca      	lsls	r2, r1, #31
 800dedc:	bf44      	itt	mi
 800dede:	f041 0120 	orrmi.w	r1, r1, #32
 800dee2:	6021      	strmi	r1, [r4, #0]
 800dee4:	b91b      	cbnz	r3, 800deee <_printf_i+0x15e>
 800dee6:	6822      	ldr	r2, [r4, #0]
 800dee8:	f022 0220 	bic.w	r2, r2, #32
 800deec:	6022      	str	r2, [r4, #0]
 800deee:	2210      	movs	r2, #16
 800def0:	e7b7      	b.n	800de62 <_printf_i+0xd2>
 800def2:	064d      	lsls	r5, r1, #25
 800def4:	bf48      	it	mi
 800def6:	b29b      	uxthmi	r3, r3
 800def8:	e7ef      	b.n	800deda <_printf_i+0x14a>
 800defa:	4665      	mov	r5, ip
 800defc:	fbb3 f1f2 	udiv	r1, r3, r2
 800df00:	fb02 3311 	mls	r3, r2, r1, r3
 800df04:	5cc3      	ldrb	r3, [r0, r3]
 800df06:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800df0a:	460b      	mov	r3, r1
 800df0c:	2900      	cmp	r1, #0
 800df0e:	d1f5      	bne.n	800defc <_printf_i+0x16c>
 800df10:	e7b9      	b.n	800de86 <_printf_i+0xf6>
 800df12:	6813      	ldr	r3, [r2, #0]
 800df14:	6825      	ldr	r5, [r4, #0]
 800df16:	6961      	ldr	r1, [r4, #20]
 800df18:	1d18      	adds	r0, r3, #4
 800df1a:	6010      	str	r0, [r2, #0]
 800df1c:	0628      	lsls	r0, r5, #24
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	d501      	bpl.n	800df26 <_printf_i+0x196>
 800df22:	6019      	str	r1, [r3, #0]
 800df24:	e002      	b.n	800df2c <_printf_i+0x19c>
 800df26:	066a      	lsls	r2, r5, #25
 800df28:	d5fb      	bpl.n	800df22 <_printf_i+0x192>
 800df2a:	8019      	strh	r1, [r3, #0]
 800df2c:	2300      	movs	r3, #0
 800df2e:	6123      	str	r3, [r4, #16]
 800df30:	4665      	mov	r5, ip
 800df32:	e7b9      	b.n	800dea8 <_printf_i+0x118>
 800df34:	6813      	ldr	r3, [r2, #0]
 800df36:	1d19      	adds	r1, r3, #4
 800df38:	6011      	str	r1, [r2, #0]
 800df3a:	681d      	ldr	r5, [r3, #0]
 800df3c:	6862      	ldr	r2, [r4, #4]
 800df3e:	2100      	movs	r1, #0
 800df40:	4628      	mov	r0, r5
 800df42:	f7f2 f96d 	bl	8000220 <memchr>
 800df46:	b108      	cbz	r0, 800df4c <_printf_i+0x1bc>
 800df48:	1b40      	subs	r0, r0, r5
 800df4a:	6060      	str	r0, [r4, #4]
 800df4c:	6863      	ldr	r3, [r4, #4]
 800df4e:	6123      	str	r3, [r4, #16]
 800df50:	2300      	movs	r3, #0
 800df52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800df56:	e7a7      	b.n	800dea8 <_printf_i+0x118>
 800df58:	6923      	ldr	r3, [r4, #16]
 800df5a:	462a      	mov	r2, r5
 800df5c:	4639      	mov	r1, r7
 800df5e:	4630      	mov	r0, r6
 800df60:	47c0      	blx	r8
 800df62:	3001      	adds	r0, #1
 800df64:	d0aa      	beq.n	800debc <_printf_i+0x12c>
 800df66:	6823      	ldr	r3, [r4, #0]
 800df68:	079b      	lsls	r3, r3, #30
 800df6a:	d413      	bmi.n	800df94 <_printf_i+0x204>
 800df6c:	68e0      	ldr	r0, [r4, #12]
 800df6e:	9b03      	ldr	r3, [sp, #12]
 800df70:	4298      	cmp	r0, r3
 800df72:	bfb8      	it	lt
 800df74:	4618      	movlt	r0, r3
 800df76:	e7a3      	b.n	800dec0 <_printf_i+0x130>
 800df78:	2301      	movs	r3, #1
 800df7a:	464a      	mov	r2, r9
 800df7c:	4639      	mov	r1, r7
 800df7e:	4630      	mov	r0, r6
 800df80:	47c0      	blx	r8
 800df82:	3001      	adds	r0, #1
 800df84:	d09a      	beq.n	800debc <_printf_i+0x12c>
 800df86:	3501      	adds	r5, #1
 800df88:	68e3      	ldr	r3, [r4, #12]
 800df8a:	9a03      	ldr	r2, [sp, #12]
 800df8c:	1a9b      	subs	r3, r3, r2
 800df8e:	42ab      	cmp	r3, r5
 800df90:	dcf2      	bgt.n	800df78 <_printf_i+0x1e8>
 800df92:	e7eb      	b.n	800df6c <_printf_i+0x1dc>
 800df94:	2500      	movs	r5, #0
 800df96:	f104 0919 	add.w	r9, r4, #25
 800df9a:	e7f5      	b.n	800df88 <_printf_i+0x1f8>
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d1ac      	bne.n	800defa <_printf_i+0x16a>
 800dfa0:	7803      	ldrb	r3, [r0, #0]
 800dfa2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dfa6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dfaa:	e76c      	b.n	800de86 <_printf_i+0xf6>
 800dfac:	0800f409 	.word	0x0800f409
 800dfb0:	0800f41a 	.word	0x0800f41a

0800dfb4 <memmove>:
 800dfb4:	4288      	cmp	r0, r1
 800dfb6:	b510      	push	{r4, lr}
 800dfb8:	eb01 0302 	add.w	r3, r1, r2
 800dfbc:	d807      	bhi.n	800dfce <memmove+0x1a>
 800dfbe:	1e42      	subs	r2, r0, #1
 800dfc0:	4299      	cmp	r1, r3
 800dfc2:	d00a      	beq.n	800dfda <memmove+0x26>
 800dfc4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dfc8:	f802 4f01 	strb.w	r4, [r2, #1]!
 800dfcc:	e7f8      	b.n	800dfc0 <memmove+0xc>
 800dfce:	4283      	cmp	r3, r0
 800dfd0:	d9f5      	bls.n	800dfbe <memmove+0xa>
 800dfd2:	1881      	adds	r1, r0, r2
 800dfd4:	1ad2      	subs	r2, r2, r3
 800dfd6:	42d3      	cmn	r3, r2
 800dfd8:	d100      	bne.n	800dfdc <memmove+0x28>
 800dfda:	bd10      	pop	{r4, pc}
 800dfdc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dfe0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800dfe4:	e7f7      	b.n	800dfd6 <memmove+0x22>

0800dfe6 <_realloc_r>:
 800dfe6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfe8:	4607      	mov	r7, r0
 800dfea:	4614      	mov	r4, r2
 800dfec:	460e      	mov	r6, r1
 800dfee:	b921      	cbnz	r1, 800dffa <_realloc_r+0x14>
 800dff0:	4611      	mov	r1, r2
 800dff2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800dff6:	f7ff bc5d 	b.w	800d8b4 <_malloc_r>
 800dffa:	b922      	cbnz	r2, 800e006 <_realloc_r+0x20>
 800dffc:	f7ff fc0c 	bl	800d818 <_free_r>
 800e000:	4625      	mov	r5, r4
 800e002:	4628      	mov	r0, r5
 800e004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e006:	f000 f814 	bl	800e032 <_malloc_usable_size_r>
 800e00a:	42a0      	cmp	r0, r4
 800e00c:	d20f      	bcs.n	800e02e <_realloc_r+0x48>
 800e00e:	4621      	mov	r1, r4
 800e010:	4638      	mov	r0, r7
 800e012:	f7ff fc4f 	bl	800d8b4 <_malloc_r>
 800e016:	4605      	mov	r5, r0
 800e018:	2800      	cmp	r0, #0
 800e01a:	d0f2      	beq.n	800e002 <_realloc_r+0x1c>
 800e01c:	4631      	mov	r1, r6
 800e01e:	4622      	mov	r2, r4
 800e020:	f7ff fbe6 	bl	800d7f0 <memcpy>
 800e024:	4631      	mov	r1, r6
 800e026:	4638      	mov	r0, r7
 800e028:	f7ff fbf6 	bl	800d818 <_free_r>
 800e02c:	e7e9      	b.n	800e002 <_realloc_r+0x1c>
 800e02e:	4635      	mov	r5, r6
 800e030:	e7e7      	b.n	800e002 <_realloc_r+0x1c>

0800e032 <_malloc_usable_size_r>:
 800e032:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e036:	1f18      	subs	r0, r3, #4
 800e038:	2b00      	cmp	r3, #0
 800e03a:	bfbc      	itt	lt
 800e03c:	580b      	ldrlt	r3, [r1, r0]
 800e03e:	18c0      	addlt	r0, r0, r3
 800e040:	4770      	bx	lr

0800e042 <fmax>:
 800e042:	b508      	push	{r3, lr}
 800e044:	ed2d 8b04 	vpush	{d8-d9}
 800e048:	eeb0 8a40 	vmov.f32	s16, s0
 800e04c:	eef0 8a60 	vmov.f32	s17, s1
 800e050:	eeb0 9a41 	vmov.f32	s18, s2
 800e054:	eef0 9a61 	vmov.f32	s19, s3
 800e058:	f000 f842 	bl	800e0e0 <__fpclassifyd>
 800e05c:	b168      	cbz	r0, 800e07a <fmax+0x38>
 800e05e:	eeb0 0a49 	vmov.f32	s0, s18
 800e062:	eef0 0a69 	vmov.f32	s1, s19
 800e066:	f000 f83b 	bl	800e0e0 <__fpclassifyd>
 800e06a:	b150      	cbz	r0, 800e082 <fmax+0x40>
 800e06c:	ec53 2b19 	vmov	r2, r3, d9
 800e070:	ec51 0b18 	vmov	r0, r1, d8
 800e074:	f7f2 fd70 	bl	8000b58 <__aeabi_dcmpgt>
 800e078:	b918      	cbnz	r0, 800e082 <fmax+0x40>
 800e07a:	eeb0 8a49 	vmov.f32	s16, s18
 800e07e:	eef0 8a69 	vmov.f32	s17, s19
 800e082:	eeb0 0a48 	vmov.f32	s0, s16
 800e086:	eef0 0a68 	vmov.f32	s1, s17
 800e08a:	ecbd 8b04 	vpop	{d8-d9}
 800e08e:	bd08      	pop	{r3, pc}

0800e090 <fmin>:
 800e090:	b508      	push	{r3, lr}
 800e092:	ed2d 8b04 	vpush	{d8-d9}
 800e096:	eeb0 8a40 	vmov.f32	s16, s0
 800e09a:	eef0 8a60 	vmov.f32	s17, s1
 800e09e:	eeb0 9a41 	vmov.f32	s18, s2
 800e0a2:	eef0 9a61 	vmov.f32	s19, s3
 800e0a6:	f000 f81b 	bl	800e0e0 <__fpclassifyd>
 800e0aa:	b168      	cbz	r0, 800e0c8 <fmin+0x38>
 800e0ac:	eeb0 0a49 	vmov.f32	s0, s18
 800e0b0:	eef0 0a69 	vmov.f32	s1, s19
 800e0b4:	f000 f814 	bl	800e0e0 <__fpclassifyd>
 800e0b8:	b150      	cbz	r0, 800e0d0 <fmin+0x40>
 800e0ba:	ec53 2b19 	vmov	r2, r3, d9
 800e0be:	ec51 0b18 	vmov	r0, r1, d8
 800e0c2:	f7f2 fd2b 	bl	8000b1c <__aeabi_dcmplt>
 800e0c6:	b918      	cbnz	r0, 800e0d0 <fmin+0x40>
 800e0c8:	eeb0 8a49 	vmov.f32	s16, s18
 800e0cc:	eef0 8a69 	vmov.f32	s17, s19
 800e0d0:	eeb0 0a48 	vmov.f32	s0, s16
 800e0d4:	eef0 0a68 	vmov.f32	s1, s17
 800e0d8:	ecbd 8b04 	vpop	{d8-d9}
 800e0dc:	bd08      	pop	{r3, pc}
	...

0800e0e0 <__fpclassifyd>:
 800e0e0:	ec51 0b10 	vmov	r0, r1, d0
 800e0e4:	f031 4200 	bics.w	r2, r1, #2147483648	; 0x80000000
 800e0e8:	b510      	push	{r4, lr}
 800e0ea:	460b      	mov	r3, r1
 800e0ec:	d01b      	beq.n	800e126 <__fpclassifyd+0x46>
 800e0ee:	f5a1 1480 	sub.w	r4, r1, #1048576	; 0x100000
 800e0f2:	490f      	ldr	r1, [pc, #60]	; (800e130 <__fpclassifyd+0x50>)
 800e0f4:	428c      	cmp	r4, r1
 800e0f6:	d910      	bls.n	800e11a <__fpclassifyd+0x3a>
 800e0f8:	f103 43ff 	add.w	r3, r3, #2139095040	; 0x7f800000
 800e0fc:	490c      	ldr	r1, [pc, #48]	; (800e130 <__fpclassifyd+0x50>)
 800e0fe:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800e102:	428b      	cmp	r3, r1
 800e104:	d909      	bls.n	800e11a <__fpclassifyd+0x3a>
 800e106:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800e10a:	d308      	bcc.n	800e11e <__fpclassifyd+0x3e>
 800e10c:	4b09      	ldr	r3, [pc, #36]	; (800e134 <__fpclassifyd+0x54>)
 800e10e:	429a      	cmp	r2, r3
 800e110:	d107      	bne.n	800e122 <__fpclassifyd+0x42>
 800e112:	fab0 f080 	clz	r0, r0
 800e116:	0940      	lsrs	r0, r0, #5
 800e118:	bd10      	pop	{r4, pc}
 800e11a:	2004      	movs	r0, #4
 800e11c:	e7fc      	b.n	800e118 <__fpclassifyd+0x38>
 800e11e:	2003      	movs	r0, #3
 800e120:	e7fa      	b.n	800e118 <__fpclassifyd+0x38>
 800e122:	2000      	movs	r0, #0
 800e124:	e7f8      	b.n	800e118 <__fpclassifyd+0x38>
 800e126:	2800      	cmp	r0, #0
 800e128:	d1e6      	bne.n	800e0f8 <__fpclassifyd+0x18>
 800e12a:	2002      	movs	r0, #2
 800e12c:	e7f4      	b.n	800e118 <__fpclassifyd+0x38>
 800e12e:	bf00      	nop
 800e130:	7fdfffff 	.word	0x7fdfffff
 800e134:	7ff00000 	.word	0x7ff00000

0800e138 <pow>:
 800e138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e13c:	ed2d 8b04 	vpush	{d8-d9}
 800e140:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800e414 <pow+0x2dc>
 800e144:	b08d      	sub	sp, #52	; 0x34
 800e146:	ec57 6b10 	vmov	r6, r7, d0
 800e14a:	ec55 4b11 	vmov	r4, r5, d1
 800e14e:	f000 f963 	bl	800e418 <__ieee754_pow>
 800e152:	f999 3000 	ldrsb.w	r3, [r9]
 800e156:	9300      	str	r3, [sp, #0]
 800e158:	3301      	adds	r3, #1
 800e15a:	eeb0 8a40 	vmov.f32	s16, s0
 800e15e:	eef0 8a60 	vmov.f32	s17, s1
 800e162:	46c8      	mov	r8, r9
 800e164:	d05f      	beq.n	800e226 <pow+0xee>
 800e166:	4622      	mov	r2, r4
 800e168:	462b      	mov	r3, r5
 800e16a:	4620      	mov	r0, r4
 800e16c:	4629      	mov	r1, r5
 800e16e:	f7f2 fcfd 	bl	8000b6c <__aeabi_dcmpun>
 800e172:	4683      	mov	fp, r0
 800e174:	2800      	cmp	r0, #0
 800e176:	d156      	bne.n	800e226 <pow+0xee>
 800e178:	4632      	mov	r2, r6
 800e17a:	463b      	mov	r3, r7
 800e17c:	4630      	mov	r0, r6
 800e17e:	4639      	mov	r1, r7
 800e180:	f7f2 fcf4 	bl	8000b6c <__aeabi_dcmpun>
 800e184:	9001      	str	r0, [sp, #4]
 800e186:	b1e8      	cbz	r0, 800e1c4 <pow+0x8c>
 800e188:	2200      	movs	r2, #0
 800e18a:	2300      	movs	r3, #0
 800e18c:	4620      	mov	r0, r4
 800e18e:	4629      	mov	r1, r5
 800e190:	f7f2 fcba 	bl	8000b08 <__aeabi_dcmpeq>
 800e194:	2800      	cmp	r0, #0
 800e196:	d046      	beq.n	800e226 <pow+0xee>
 800e198:	2301      	movs	r3, #1
 800e19a:	9302      	str	r3, [sp, #8]
 800e19c:	4b96      	ldr	r3, [pc, #600]	; (800e3f8 <pow+0x2c0>)
 800e19e:	9303      	str	r3, [sp, #12]
 800e1a0:	4b96      	ldr	r3, [pc, #600]	; (800e3fc <pow+0x2c4>)
 800e1a2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800e1a6:	2200      	movs	r2, #0
 800e1a8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e1ac:	9b00      	ldr	r3, [sp, #0]
 800e1ae:	2b02      	cmp	r3, #2
 800e1b0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800e1b4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800e1b8:	d033      	beq.n	800e222 <pow+0xea>
 800e1ba:	a802      	add	r0, sp, #8
 800e1bc:	f000 fefb 	bl	800efb6 <matherr>
 800e1c0:	bb48      	cbnz	r0, 800e216 <pow+0xde>
 800e1c2:	e05d      	b.n	800e280 <pow+0x148>
 800e1c4:	f04f 0a00 	mov.w	sl, #0
 800e1c8:	f04f 0b00 	mov.w	fp, #0
 800e1cc:	4652      	mov	r2, sl
 800e1ce:	465b      	mov	r3, fp
 800e1d0:	4630      	mov	r0, r6
 800e1d2:	4639      	mov	r1, r7
 800e1d4:	f7f2 fc98 	bl	8000b08 <__aeabi_dcmpeq>
 800e1d8:	ec4b ab19 	vmov	d9, sl, fp
 800e1dc:	2800      	cmp	r0, #0
 800e1de:	d054      	beq.n	800e28a <pow+0x152>
 800e1e0:	4652      	mov	r2, sl
 800e1e2:	465b      	mov	r3, fp
 800e1e4:	4620      	mov	r0, r4
 800e1e6:	4629      	mov	r1, r5
 800e1e8:	f7f2 fc8e 	bl	8000b08 <__aeabi_dcmpeq>
 800e1ec:	4680      	mov	r8, r0
 800e1ee:	b318      	cbz	r0, 800e238 <pow+0x100>
 800e1f0:	2301      	movs	r3, #1
 800e1f2:	9302      	str	r3, [sp, #8]
 800e1f4:	4b80      	ldr	r3, [pc, #512]	; (800e3f8 <pow+0x2c0>)
 800e1f6:	9303      	str	r3, [sp, #12]
 800e1f8:	9b01      	ldr	r3, [sp, #4]
 800e1fa:	930a      	str	r3, [sp, #40]	; 0x28
 800e1fc:	9b00      	ldr	r3, [sp, #0]
 800e1fe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800e202:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800e206:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d0d5      	beq.n	800e1ba <pow+0x82>
 800e20e:	4b7b      	ldr	r3, [pc, #492]	; (800e3fc <pow+0x2c4>)
 800e210:	2200      	movs	r2, #0
 800e212:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e216:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e218:	b11b      	cbz	r3, 800e222 <pow+0xea>
 800e21a:	f7ff faaf 	bl	800d77c <__errno>
 800e21e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e220:	6003      	str	r3, [r0, #0]
 800e222:	ed9d 8b08 	vldr	d8, [sp, #32]
 800e226:	eeb0 0a48 	vmov.f32	s0, s16
 800e22a:	eef0 0a68 	vmov.f32	s1, s17
 800e22e:	b00d      	add	sp, #52	; 0x34
 800e230:	ecbd 8b04 	vpop	{d8-d9}
 800e234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e238:	ec45 4b10 	vmov	d0, r4, r5
 800e23c:	f000 feb3 	bl	800efa6 <finite>
 800e240:	2800      	cmp	r0, #0
 800e242:	d0f0      	beq.n	800e226 <pow+0xee>
 800e244:	4652      	mov	r2, sl
 800e246:	465b      	mov	r3, fp
 800e248:	4620      	mov	r0, r4
 800e24a:	4629      	mov	r1, r5
 800e24c:	f7f2 fc66 	bl	8000b1c <__aeabi_dcmplt>
 800e250:	2800      	cmp	r0, #0
 800e252:	d0e8      	beq.n	800e226 <pow+0xee>
 800e254:	2301      	movs	r3, #1
 800e256:	9302      	str	r3, [sp, #8]
 800e258:	4b67      	ldr	r3, [pc, #412]	; (800e3f8 <pow+0x2c0>)
 800e25a:	9303      	str	r3, [sp, #12]
 800e25c:	f999 3000 	ldrsb.w	r3, [r9]
 800e260:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800e264:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800e268:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800e26c:	b913      	cbnz	r3, 800e274 <pow+0x13c>
 800e26e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800e272:	e7a2      	b.n	800e1ba <pow+0x82>
 800e274:	4962      	ldr	r1, [pc, #392]	; (800e400 <pow+0x2c8>)
 800e276:	2000      	movs	r0, #0
 800e278:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e27c:	2b02      	cmp	r3, #2
 800e27e:	d19c      	bne.n	800e1ba <pow+0x82>
 800e280:	f7ff fa7c 	bl	800d77c <__errno>
 800e284:	2321      	movs	r3, #33	; 0x21
 800e286:	6003      	str	r3, [r0, #0]
 800e288:	e7c5      	b.n	800e216 <pow+0xde>
 800e28a:	eeb0 0a48 	vmov.f32	s0, s16
 800e28e:	eef0 0a68 	vmov.f32	s1, s17
 800e292:	f000 fe88 	bl	800efa6 <finite>
 800e296:	9000      	str	r0, [sp, #0]
 800e298:	2800      	cmp	r0, #0
 800e29a:	f040 8081 	bne.w	800e3a0 <pow+0x268>
 800e29e:	ec47 6b10 	vmov	d0, r6, r7
 800e2a2:	f000 fe80 	bl	800efa6 <finite>
 800e2a6:	2800      	cmp	r0, #0
 800e2a8:	d07a      	beq.n	800e3a0 <pow+0x268>
 800e2aa:	ec45 4b10 	vmov	d0, r4, r5
 800e2ae:	f000 fe7a 	bl	800efa6 <finite>
 800e2b2:	2800      	cmp	r0, #0
 800e2b4:	d074      	beq.n	800e3a0 <pow+0x268>
 800e2b6:	ec53 2b18 	vmov	r2, r3, d8
 800e2ba:	ee18 0a10 	vmov	r0, s16
 800e2be:	4619      	mov	r1, r3
 800e2c0:	f7f2 fc54 	bl	8000b6c <__aeabi_dcmpun>
 800e2c4:	f999 9000 	ldrsb.w	r9, [r9]
 800e2c8:	4b4b      	ldr	r3, [pc, #300]	; (800e3f8 <pow+0x2c0>)
 800e2ca:	b1b0      	cbz	r0, 800e2fa <pow+0x1c2>
 800e2cc:	2201      	movs	r2, #1
 800e2ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e2d2:	9b00      	ldr	r3, [sp, #0]
 800e2d4:	930a      	str	r3, [sp, #40]	; 0x28
 800e2d6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800e2da:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800e2de:	f1b9 0f00 	cmp.w	r9, #0
 800e2e2:	d0c4      	beq.n	800e26e <pow+0x136>
 800e2e4:	4652      	mov	r2, sl
 800e2e6:	465b      	mov	r3, fp
 800e2e8:	4650      	mov	r0, sl
 800e2ea:	4659      	mov	r1, fp
 800e2ec:	f7f2 face 	bl	800088c <__aeabi_ddiv>
 800e2f0:	f1b9 0f02 	cmp.w	r9, #2
 800e2f4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e2f8:	e7c1      	b.n	800e27e <pow+0x146>
 800e2fa:	2203      	movs	r2, #3
 800e2fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e300:	900a      	str	r0, [sp, #40]	; 0x28
 800e302:	4629      	mov	r1, r5
 800e304:	4620      	mov	r0, r4
 800e306:	2200      	movs	r2, #0
 800e308:	4b3e      	ldr	r3, [pc, #248]	; (800e404 <pow+0x2cc>)
 800e30a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800e30e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800e312:	f7f2 f991 	bl	8000638 <__aeabi_dmul>
 800e316:	4604      	mov	r4, r0
 800e318:	460d      	mov	r5, r1
 800e31a:	f1b9 0f00 	cmp.w	r9, #0
 800e31e:	d124      	bne.n	800e36a <pow+0x232>
 800e320:	4b39      	ldr	r3, [pc, #228]	; (800e408 <pow+0x2d0>)
 800e322:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800e326:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e32a:	4630      	mov	r0, r6
 800e32c:	4652      	mov	r2, sl
 800e32e:	465b      	mov	r3, fp
 800e330:	4639      	mov	r1, r7
 800e332:	f7f2 fbf3 	bl	8000b1c <__aeabi_dcmplt>
 800e336:	2800      	cmp	r0, #0
 800e338:	d056      	beq.n	800e3e8 <pow+0x2b0>
 800e33a:	ec45 4b10 	vmov	d0, r4, r5
 800e33e:	f000 fe47 	bl	800efd0 <rint>
 800e342:	4622      	mov	r2, r4
 800e344:	462b      	mov	r3, r5
 800e346:	ec51 0b10 	vmov	r0, r1, d0
 800e34a:	f7f2 fbdd 	bl	8000b08 <__aeabi_dcmpeq>
 800e34e:	b920      	cbnz	r0, 800e35a <pow+0x222>
 800e350:	4b2e      	ldr	r3, [pc, #184]	; (800e40c <pow+0x2d4>)
 800e352:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800e356:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e35a:	f998 3000 	ldrsb.w	r3, [r8]
 800e35e:	2b02      	cmp	r3, #2
 800e360:	d142      	bne.n	800e3e8 <pow+0x2b0>
 800e362:	f7ff fa0b 	bl	800d77c <__errno>
 800e366:	2322      	movs	r3, #34	; 0x22
 800e368:	e78d      	b.n	800e286 <pow+0x14e>
 800e36a:	4b29      	ldr	r3, [pc, #164]	; (800e410 <pow+0x2d8>)
 800e36c:	2200      	movs	r2, #0
 800e36e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e372:	4630      	mov	r0, r6
 800e374:	4652      	mov	r2, sl
 800e376:	465b      	mov	r3, fp
 800e378:	4639      	mov	r1, r7
 800e37a:	f7f2 fbcf 	bl	8000b1c <__aeabi_dcmplt>
 800e37e:	2800      	cmp	r0, #0
 800e380:	d0eb      	beq.n	800e35a <pow+0x222>
 800e382:	ec45 4b10 	vmov	d0, r4, r5
 800e386:	f000 fe23 	bl	800efd0 <rint>
 800e38a:	4622      	mov	r2, r4
 800e38c:	462b      	mov	r3, r5
 800e38e:	ec51 0b10 	vmov	r0, r1, d0
 800e392:	f7f2 fbb9 	bl	8000b08 <__aeabi_dcmpeq>
 800e396:	2800      	cmp	r0, #0
 800e398:	d1df      	bne.n	800e35a <pow+0x222>
 800e39a:	2200      	movs	r2, #0
 800e39c:	4b18      	ldr	r3, [pc, #96]	; (800e400 <pow+0x2c8>)
 800e39e:	e7da      	b.n	800e356 <pow+0x21e>
 800e3a0:	2200      	movs	r2, #0
 800e3a2:	2300      	movs	r3, #0
 800e3a4:	ec51 0b18 	vmov	r0, r1, d8
 800e3a8:	f7f2 fbae 	bl	8000b08 <__aeabi_dcmpeq>
 800e3ac:	2800      	cmp	r0, #0
 800e3ae:	f43f af3a 	beq.w	800e226 <pow+0xee>
 800e3b2:	ec47 6b10 	vmov	d0, r6, r7
 800e3b6:	f000 fdf6 	bl	800efa6 <finite>
 800e3ba:	2800      	cmp	r0, #0
 800e3bc:	f43f af33 	beq.w	800e226 <pow+0xee>
 800e3c0:	ec45 4b10 	vmov	d0, r4, r5
 800e3c4:	f000 fdef 	bl	800efa6 <finite>
 800e3c8:	2800      	cmp	r0, #0
 800e3ca:	f43f af2c 	beq.w	800e226 <pow+0xee>
 800e3ce:	2304      	movs	r3, #4
 800e3d0:	9302      	str	r3, [sp, #8]
 800e3d2:	4b09      	ldr	r3, [pc, #36]	; (800e3f8 <pow+0x2c0>)
 800e3d4:	9303      	str	r3, [sp, #12]
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	930a      	str	r3, [sp, #40]	; 0x28
 800e3da:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800e3de:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800e3e2:	ed8d 9b08 	vstr	d9, [sp, #32]
 800e3e6:	e7b8      	b.n	800e35a <pow+0x222>
 800e3e8:	a802      	add	r0, sp, #8
 800e3ea:	f000 fde4 	bl	800efb6 <matherr>
 800e3ee:	2800      	cmp	r0, #0
 800e3f0:	f47f af11 	bne.w	800e216 <pow+0xde>
 800e3f4:	e7b5      	b.n	800e362 <pow+0x22a>
 800e3f6:	bf00      	nop
 800e3f8:	0800f42b 	.word	0x0800f42b
 800e3fc:	3ff00000 	.word	0x3ff00000
 800e400:	fff00000 	.word	0xfff00000
 800e404:	3fe00000 	.word	0x3fe00000
 800e408:	47efffff 	.word	0x47efffff
 800e40c:	c7efffff 	.word	0xc7efffff
 800e410:	7ff00000 	.word	0x7ff00000
 800e414:	200001f8 	.word	0x200001f8

0800e418 <__ieee754_pow>:
 800e418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e41c:	b091      	sub	sp, #68	; 0x44
 800e41e:	ed8d 1b00 	vstr	d1, [sp]
 800e422:	e9dd 2900 	ldrd	r2, r9, [sp]
 800e426:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800e42a:	ea58 0302 	orrs.w	r3, r8, r2
 800e42e:	ec57 6b10 	vmov	r6, r7, d0
 800e432:	f000 84be 	beq.w	800edb2 <__ieee754_pow+0x99a>
 800e436:	4b7a      	ldr	r3, [pc, #488]	; (800e620 <__ieee754_pow+0x208>)
 800e438:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800e43c:	429c      	cmp	r4, r3
 800e43e:	463d      	mov	r5, r7
 800e440:	ee10 aa10 	vmov	sl, s0
 800e444:	dc09      	bgt.n	800e45a <__ieee754_pow+0x42>
 800e446:	d103      	bne.n	800e450 <__ieee754_pow+0x38>
 800e448:	b93e      	cbnz	r6, 800e45a <__ieee754_pow+0x42>
 800e44a:	45a0      	cmp	r8, r4
 800e44c:	dc0d      	bgt.n	800e46a <__ieee754_pow+0x52>
 800e44e:	e001      	b.n	800e454 <__ieee754_pow+0x3c>
 800e450:	4598      	cmp	r8, r3
 800e452:	dc02      	bgt.n	800e45a <__ieee754_pow+0x42>
 800e454:	4598      	cmp	r8, r3
 800e456:	d10e      	bne.n	800e476 <__ieee754_pow+0x5e>
 800e458:	b16a      	cbz	r2, 800e476 <__ieee754_pow+0x5e>
 800e45a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e45e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e462:	ea54 030a 	orrs.w	r3, r4, sl
 800e466:	f000 84a4 	beq.w	800edb2 <__ieee754_pow+0x99a>
 800e46a:	486e      	ldr	r0, [pc, #440]	; (800e624 <__ieee754_pow+0x20c>)
 800e46c:	b011      	add	sp, #68	; 0x44
 800e46e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e472:	f000 bda5 	b.w	800efc0 <nan>
 800e476:	2d00      	cmp	r5, #0
 800e478:	da53      	bge.n	800e522 <__ieee754_pow+0x10a>
 800e47a:	4b6b      	ldr	r3, [pc, #428]	; (800e628 <__ieee754_pow+0x210>)
 800e47c:	4598      	cmp	r8, r3
 800e47e:	dc4d      	bgt.n	800e51c <__ieee754_pow+0x104>
 800e480:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800e484:	4598      	cmp	r8, r3
 800e486:	dd4c      	ble.n	800e522 <__ieee754_pow+0x10a>
 800e488:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e48c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e490:	2b14      	cmp	r3, #20
 800e492:	dd26      	ble.n	800e4e2 <__ieee754_pow+0xca>
 800e494:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800e498:	fa22 f103 	lsr.w	r1, r2, r3
 800e49c:	fa01 f303 	lsl.w	r3, r1, r3
 800e4a0:	4293      	cmp	r3, r2
 800e4a2:	d13e      	bne.n	800e522 <__ieee754_pow+0x10a>
 800e4a4:	f001 0101 	and.w	r1, r1, #1
 800e4a8:	f1c1 0b02 	rsb	fp, r1, #2
 800e4ac:	2a00      	cmp	r2, #0
 800e4ae:	d15b      	bne.n	800e568 <__ieee754_pow+0x150>
 800e4b0:	4b5b      	ldr	r3, [pc, #364]	; (800e620 <__ieee754_pow+0x208>)
 800e4b2:	4598      	cmp	r8, r3
 800e4b4:	d124      	bne.n	800e500 <__ieee754_pow+0xe8>
 800e4b6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800e4ba:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800e4be:	ea53 030a 	orrs.w	r3, r3, sl
 800e4c2:	f000 8476 	beq.w	800edb2 <__ieee754_pow+0x99a>
 800e4c6:	4b59      	ldr	r3, [pc, #356]	; (800e62c <__ieee754_pow+0x214>)
 800e4c8:	429c      	cmp	r4, r3
 800e4ca:	dd2d      	ble.n	800e528 <__ieee754_pow+0x110>
 800e4cc:	f1b9 0f00 	cmp.w	r9, #0
 800e4d0:	f280 8473 	bge.w	800edba <__ieee754_pow+0x9a2>
 800e4d4:	2000      	movs	r0, #0
 800e4d6:	2100      	movs	r1, #0
 800e4d8:	ec41 0b10 	vmov	d0, r0, r1
 800e4dc:	b011      	add	sp, #68	; 0x44
 800e4de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4e2:	2a00      	cmp	r2, #0
 800e4e4:	d13e      	bne.n	800e564 <__ieee754_pow+0x14c>
 800e4e6:	f1c3 0314 	rsb	r3, r3, #20
 800e4ea:	fa48 f103 	asr.w	r1, r8, r3
 800e4ee:	fa01 f303 	lsl.w	r3, r1, r3
 800e4f2:	4543      	cmp	r3, r8
 800e4f4:	f040 8469 	bne.w	800edca <__ieee754_pow+0x9b2>
 800e4f8:	f001 0101 	and.w	r1, r1, #1
 800e4fc:	f1c1 0b02 	rsb	fp, r1, #2
 800e500:	4b4b      	ldr	r3, [pc, #300]	; (800e630 <__ieee754_pow+0x218>)
 800e502:	4598      	cmp	r8, r3
 800e504:	d118      	bne.n	800e538 <__ieee754_pow+0x120>
 800e506:	f1b9 0f00 	cmp.w	r9, #0
 800e50a:	f280 845a 	bge.w	800edc2 <__ieee754_pow+0x9aa>
 800e50e:	4948      	ldr	r1, [pc, #288]	; (800e630 <__ieee754_pow+0x218>)
 800e510:	4632      	mov	r2, r6
 800e512:	463b      	mov	r3, r7
 800e514:	2000      	movs	r0, #0
 800e516:	f7f2 f9b9 	bl	800088c <__aeabi_ddiv>
 800e51a:	e7dd      	b.n	800e4d8 <__ieee754_pow+0xc0>
 800e51c:	f04f 0b02 	mov.w	fp, #2
 800e520:	e7c4      	b.n	800e4ac <__ieee754_pow+0x94>
 800e522:	f04f 0b00 	mov.w	fp, #0
 800e526:	e7c1      	b.n	800e4ac <__ieee754_pow+0x94>
 800e528:	f1b9 0f00 	cmp.w	r9, #0
 800e52c:	dad2      	bge.n	800e4d4 <__ieee754_pow+0xbc>
 800e52e:	e9dd 0300 	ldrd	r0, r3, [sp]
 800e532:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e536:	e7cf      	b.n	800e4d8 <__ieee754_pow+0xc0>
 800e538:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800e53c:	d106      	bne.n	800e54c <__ieee754_pow+0x134>
 800e53e:	4632      	mov	r2, r6
 800e540:	463b      	mov	r3, r7
 800e542:	4610      	mov	r0, r2
 800e544:	4619      	mov	r1, r3
 800e546:	f7f2 f877 	bl	8000638 <__aeabi_dmul>
 800e54a:	e7c5      	b.n	800e4d8 <__ieee754_pow+0xc0>
 800e54c:	4b39      	ldr	r3, [pc, #228]	; (800e634 <__ieee754_pow+0x21c>)
 800e54e:	4599      	cmp	r9, r3
 800e550:	d10a      	bne.n	800e568 <__ieee754_pow+0x150>
 800e552:	2d00      	cmp	r5, #0
 800e554:	db08      	blt.n	800e568 <__ieee754_pow+0x150>
 800e556:	ec47 6b10 	vmov	d0, r6, r7
 800e55a:	b011      	add	sp, #68	; 0x44
 800e55c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e560:	f000 bc68 	b.w	800ee34 <__ieee754_sqrt>
 800e564:	f04f 0b00 	mov.w	fp, #0
 800e568:	ec47 6b10 	vmov	d0, r6, r7
 800e56c:	f000 fd12 	bl	800ef94 <fabs>
 800e570:	ec51 0b10 	vmov	r0, r1, d0
 800e574:	f1ba 0f00 	cmp.w	sl, #0
 800e578:	d127      	bne.n	800e5ca <__ieee754_pow+0x1b2>
 800e57a:	b124      	cbz	r4, 800e586 <__ieee754_pow+0x16e>
 800e57c:	4b2c      	ldr	r3, [pc, #176]	; (800e630 <__ieee754_pow+0x218>)
 800e57e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800e582:	429a      	cmp	r2, r3
 800e584:	d121      	bne.n	800e5ca <__ieee754_pow+0x1b2>
 800e586:	f1b9 0f00 	cmp.w	r9, #0
 800e58a:	da05      	bge.n	800e598 <__ieee754_pow+0x180>
 800e58c:	4602      	mov	r2, r0
 800e58e:	460b      	mov	r3, r1
 800e590:	2000      	movs	r0, #0
 800e592:	4927      	ldr	r1, [pc, #156]	; (800e630 <__ieee754_pow+0x218>)
 800e594:	f7f2 f97a 	bl	800088c <__aeabi_ddiv>
 800e598:	2d00      	cmp	r5, #0
 800e59a:	da9d      	bge.n	800e4d8 <__ieee754_pow+0xc0>
 800e59c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e5a0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e5a4:	ea54 030b 	orrs.w	r3, r4, fp
 800e5a8:	d108      	bne.n	800e5bc <__ieee754_pow+0x1a4>
 800e5aa:	4602      	mov	r2, r0
 800e5ac:	460b      	mov	r3, r1
 800e5ae:	4610      	mov	r0, r2
 800e5b0:	4619      	mov	r1, r3
 800e5b2:	f7f1 fe89 	bl	80002c8 <__aeabi_dsub>
 800e5b6:	4602      	mov	r2, r0
 800e5b8:	460b      	mov	r3, r1
 800e5ba:	e7ac      	b.n	800e516 <__ieee754_pow+0xfe>
 800e5bc:	f1bb 0f01 	cmp.w	fp, #1
 800e5c0:	d18a      	bne.n	800e4d8 <__ieee754_pow+0xc0>
 800e5c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e5c6:	4619      	mov	r1, r3
 800e5c8:	e786      	b.n	800e4d8 <__ieee754_pow+0xc0>
 800e5ca:	0fed      	lsrs	r5, r5, #31
 800e5cc:	1e6b      	subs	r3, r5, #1
 800e5ce:	930d      	str	r3, [sp, #52]	; 0x34
 800e5d0:	ea5b 0303 	orrs.w	r3, fp, r3
 800e5d4:	d102      	bne.n	800e5dc <__ieee754_pow+0x1c4>
 800e5d6:	4632      	mov	r2, r6
 800e5d8:	463b      	mov	r3, r7
 800e5da:	e7e8      	b.n	800e5ae <__ieee754_pow+0x196>
 800e5dc:	4b16      	ldr	r3, [pc, #88]	; (800e638 <__ieee754_pow+0x220>)
 800e5de:	4598      	cmp	r8, r3
 800e5e0:	f340 80fe 	ble.w	800e7e0 <__ieee754_pow+0x3c8>
 800e5e4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800e5e8:	4598      	cmp	r8, r3
 800e5ea:	dd0a      	ble.n	800e602 <__ieee754_pow+0x1ea>
 800e5ec:	4b0f      	ldr	r3, [pc, #60]	; (800e62c <__ieee754_pow+0x214>)
 800e5ee:	429c      	cmp	r4, r3
 800e5f0:	dc0d      	bgt.n	800e60e <__ieee754_pow+0x1f6>
 800e5f2:	f1b9 0f00 	cmp.w	r9, #0
 800e5f6:	f6bf af6d 	bge.w	800e4d4 <__ieee754_pow+0xbc>
 800e5fa:	a307      	add	r3, pc, #28	; (adr r3, 800e618 <__ieee754_pow+0x200>)
 800e5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e600:	e79f      	b.n	800e542 <__ieee754_pow+0x12a>
 800e602:	4b0e      	ldr	r3, [pc, #56]	; (800e63c <__ieee754_pow+0x224>)
 800e604:	429c      	cmp	r4, r3
 800e606:	ddf4      	ble.n	800e5f2 <__ieee754_pow+0x1da>
 800e608:	4b09      	ldr	r3, [pc, #36]	; (800e630 <__ieee754_pow+0x218>)
 800e60a:	429c      	cmp	r4, r3
 800e60c:	dd18      	ble.n	800e640 <__ieee754_pow+0x228>
 800e60e:	f1b9 0f00 	cmp.w	r9, #0
 800e612:	dcf2      	bgt.n	800e5fa <__ieee754_pow+0x1e2>
 800e614:	e75e      	b.n	800e4d4 <__ieee754_pow+0xbc>
 800e616:	bf00      	nop
 800e618:	8800759c 	.word	0x8800759c
 800e61c:	7e37e43c 	.word	0x7e37e43c
 800e620:	7ff00000 	.word	0x7ff00000
 800e624:	0800f3fd 	.word	0x0800f3fd
 800e628:	433fffff 	.word	0x433fffff
 800e62c:	3fefffff 	.word	0x3fefffff
 800e630:	3ff00000 	.word	0x3ff00000
 800e634:	3fe00000 	.word	0x3fe00000
 800e638:	41e00000 	.word	0x41e00000
 800e63c:	3feffffe 	.word	0x3feffffe
 800e640:	2200      	movs	r2, #0
 800e642:	4b63      	ldr	r3, [pc, #396]	; (800e7d0 <__ieee754_pow+0x3b8>)
 800e644:	f7f1 fe40 	bl	80002c8 <__aeabi_dsub>
 800e648:	a355      	add	r3, pc, #340	; (adr r3, 800e7a0 <__ieee754_pow+0x388>)
 800e64a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e64e:	4604      	mov	r4, r0
 800e650:	460d      	mov	r5, r1
 800e652:	f7f1 fff1 	bl	8000638 <__aeabi_dmul>
 800e656:	a354      	add	r3, pc, #336	; (adr r3, 800e7a8 <__ieee754_pow+0x390>)
 800e658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e65c:	4606      	mov	r6, r0
 800e65e:	460f      	mov	r7, r1
 800e660:	4620      	mov	r0, r4
 800e662:	4629      	mov	r1, r5
 800e664:	f7f1 ffe8 	bl	8000638 <__aeabi_dmul>
 800e668:	2200      	movs	r2, #0
 800e66a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e66e:	4b59      	ldr	r3, [pc, #356]	; (800e7d4 <__ieee754_pow+0x3bc>)
 800e670:	4620      	mov	r0, r4
 800e672:	4629      	mov	r1, r5
 800e674:	f7f1 ffe0 	bl	8000638 <__aeabi_dmul>
 800e678:	4602      	mov	r2, r0
 800e67a:	460b      	mov	r3, r1
 800e67c:	a14c      	add	r1, pc, #304	; (adr r1, 800e7b0 <__ieee754_pow+0x398>)
 800e67e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e682:	f7f1 fe21 	bl	80002c8 <__aeabi_dsub>
 800e686:	4622      	mov	r2, r4
 800e688:	462b      	mov	r3, r5
 800e68a:	f7f1 ffd5 	bl	8000638 <__aeabi_dmul>
 800e68e:	4602      	mov	r2, r0
 800e690:	460b      	mov	r3, r1
 800e692:	2000      	movs	r0, #0
 800e694:	4950      	ldr	r1, [pc, #320]	; (800e7d8 <__ieee754_pow+0x3c0>)
 800e696:	f7f1 fe17 	bl	80002c8 <__aeabi_dsub>
 800e69a:	4622      	mov	r2, r4
 800e69c:	462b      	mov	r3, r5
 800e69e:	4680      	mov	r8, r0
 800e6a0:	4689      	mov	r9, r1
 800e6a2:	4620      	mov	r0, r4
 800e6a4:	4629      	mov	r1, r5
 800e6a6:	f7f1 ffc7 	bl	8000638 <__aeabi_dmul>
 800e6aa:	4602      	mov	r2, r0
 800e6ac:	460b      	mov	r3, r1
 800e6ae:	4640      	mov	r0, r8
 800e6b0:	4649      	mov	r1, r9
 800e6b2:	f7f1 ffc1 	bl	8000638 <__aeabi_dmul>
 800e6b6:	a340      	add	r3, pc, #256	; (adr r3, 800e7b8 <__ieee754_pow+0x3a0>)
 800e6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6bc:	f7f1 ffbc 	bl	8000638 <__aeabi_dmul>
 800e6c0:	4602      	mov	r2, r0
 800e6c2:	460b      	mov	r3, r1
 800e6c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e6c8:	f7f1 fdfe 	bl	80002c8 <__aeabi_dsub>
 800e6cc:	4602      	mov	r2, r0
 800e6ce:	460b      	mov	r3, r1
 800e6d0:	4604      	mov	r4, r0
 800e6d2:	460d      	mov	r5, r1
 800e6d4:	4630      	mov	r0, r6
 800e6d6:	4639      	mov	r1, r7
 800e6d8:	f7f1 fdf8 	bl	80002cc <__adddf3>
 800e6dc:	2000      	movs	r0, #0
 800e6de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e6e2:	4632      	mov	r2, r6
 800e6e4:	463b      	mov	r3, r7
 800e6e6:	f7f1 fdef 	bl	80002c8 <__aeabi_dsub>
 800e6ea:	4602      	mov	r2, r0
 800e6ec:	460b      	mov	r3, r1
 800e6ee:	4620      	mov	r0, r4
 800e6f0:	4629      	mov	r1, r5
 800e6f2:	f7f1 fde9 	bl	80002c8 <__aeabi_dsub>
 800e6f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e6f8:	f10b 33ff 	add.w	r3, fp, #4294967295
 800e6fc:	4313      	orrs	r3, r2
 800e6fe:	4606      	mov	r6, r0
 800e700:	460f      	mov	r7, r1
 800e702:	f040 81eb 	bne.w	800eadc <__ieee754_pow+0x6c4>
 800e706:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800e7c0 <__ieee754_pow+0x3a8>
 800e70a:	e9dd 4500 	ldrd	r4, r5, [sp]
 800e70e:	2400      	movs	r4, #0
 800e710:	4622      	mov	r2, r4
 800e712:	462b      	mov	r3, r5
 800e714:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e718:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e71c:	f7f1 fdd4 	bl	80002c8 <__aeabi_dsub>
 800e720:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e724:	f7f1 ff88 	bl	8000638 <__aeabi_dmul>
 800e728:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e72c:	4680      	mov	r8, r0
 800e72e:	4689      	mov	r9, r1
 800e730:	4630      	mov	r0, r6
 800e732:	4639      	mov	r1, r7
 800e734:	f7f1 ff80 	bl	8000638 <__aeabi_dmul>
 800e738:	4602      	mov	r2, r0
 800e73a:	460b      	mov	r3, r1
 800e73c:	4640      	mov	r0, r8
 800e73e:	4649      	mov	r1, r9
 800e740:	f7f1 fdc4 	bl	80002cc <__adddf3>
 800e744:	4622      	mov	r2, r4
 800e746:	462b      	mov	r3, r5
 800e748:	4680      	mov	r8, r0
 800e74a:	4689      	mov	r9, r1
 800e74c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e750:	f7f1 ff72 	bl	8000638 <__aeabi_dmul>
 800e754:	460b      	mov	r3, r1
 800e756:	4604      	mov	r4, r0
 800e758:	460d      	mov	r5, r1
 800e75a:	4602      	mov	r2, r0
 800e75c:	4649      	mov	r1, r9
 800e75e:	4640      	mov	r0, r8
 800e760:	e9cd 4500 	strd	r4, r5, [sp]
 800e764:	f7f1 fdb2 	bl	80002cc <__adddf3>
 800e768:	4b1c      	ldr	r3, [pc, #112]	; (800e7dc <__ieee754_pow+0x3c4>)
 800e76a:	4299      	cmp	r1, r3
 800e76c:	4606      	mov	r6, r0
 800e76e:	460f      	mov	r7, r1
 800e770:	468b      	mov	fp, r1
 800e772:	f340 82f7 	ble.w	800ed64 <__ieee754_pow+0x94c>
 800e776:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800e77a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800e77e:	4303      	orrs	r3, r0
 800e780:	f000 81ea 	beq.w	800eb58 <__ieee754_pow+0x740>
 800e784:	a310      	add	r3, pc, #64	; (adr r3, 800e7c8 <__ieee754_pow+0x3b0>)
 800e786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e78a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e78e:	f7f1 ff53 	bl	8000638 <__aeabi_dmul>
 800e792:	a30d      	add	r3, pc, #52	; (adr r3, 800e7c8 <__ieee754_pow+0x3b0>)
 800e794:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e798:	e6d5      	b.n	800e546 <__ieee754_pow+0x12e>
 800e79a:	bf00      	nop
 800e79c:	f3af 8000 	nop.w
 800e7a0:	60000000 	.word	0x60000000
 800e7a4:	3ff71547 	.word	0x3ff71547
 800e7a8:	f85ddf44 	.word	0xf85ddf44
 800e7ac:	3e54ae0b 	.word	0x3e54ae0b
 800e7b0:	55555555 	.word	0x55555555
 800e7b4:	3fd55555 	.word	0x3fd55555
 800e7b8:	652b82fe 	.word	0x652b82fe
 800e7bc:	3ff71547 	.word	0x3ff71547
 800e7c0:	00000000 	.word	0x00000000
 800e7c4:	bff00000 	.word	0xbff00000
 800e7c8:	8800759c 	.word	0x8800759c
 800e7cc:	7e37e43c 	.word	0x7e37e43c
 800e7d0:	3ff00000 	.word	0x3ff00000
 800e7d4:	3fd00000 	.word	0x3fd00000
 800e7d8:	3fe00000 	.word	0x3fe00000
 800e7dc:	408fffff 	.word	0x408fffff
 800e7e0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800e7e4:	f04f 0200 	mov.w	r2, #0
 800e7e8:	da05      	bge.n	800e7f6 <__ieee754_pow+0x3de>
 800e7ea:	4bd3      	ldr	r3, [pc, #844]	; (800eb38 <__ieee754_pow+0x720>)
 800e7ec:	f7f1 ff24 	bl	8000638 <__aeabi_dmul>
 800e7f0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800e7f4:	460c      	mov	r4, r1
 800e7f6:	1523      	asrs	r3, r4, #20
 800e7f8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e7fc:	4413      	add	r3, r2
 800e7fe:	9309      	str	r3, [sp, #36]	; 0x24
 800e800:	4bce      	ldr	r3, [pc, #824]	; (800eb3c <__ieee754_pow+0x724>)
 800e802:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800e806:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800e80a:	429c      	cmp	r4, r3
 800e80c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e810:	dd08      	ble.n	800e824 <__ieee754_pow+0x40c>
 800e812:	4bcb      	ldr	r3, [pc, #812]	; (800eb40 <__ieee754_pow+0x728>)
 800e814:	429c      	cmp	r4, r3
 800e816:	f340 815e 	ble.w	800ead6 <__ieee754_pow+0x6be>
 800e81a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e81c:	3301      	adds	r3, #1
 800e81e:	9309      	str	r3, [sp, #36]	; 0x24
 800e820:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800e824:	f04f 0a00 	mov.w	sl, #0
 800e828:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800e82c:	930c      	str	r3, [sp, #48]	; 0x30
 800e82e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e830:	4bc4      	ldr	r3, [pc, #784]	; (800eb44 <__ieee754_pow+0x72c>)
 800e832:	4413      	add	r3, r2
 800e834:	ed93 7b00 	vldr	d7, [r3]
 800e838:	4629      	mov	r1, r5
 800e83a:	ec53 2b17 	vmov	r2, r3, d7
 800e83e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e842:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800e846:	f7f1 fd3f 	bl	80002c8 <__aeabi_dsub>
 800e84a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e84e:	4606      	mov	r6, r0
 800e850:	460f      	mov	r7, r1
 800e852:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e856:	f7f1 fd39 	bl	80002cc <__adddf3>
 800e85a:	4602      	mov	r2, r0
 800e85c:	460b      	mov	r3, r1
 800e85e:	2000      	movs	r0, #0
 800e860:	49b9      	ldr	r1, [pc, #740]	; (800eb48 <__ieee754_pow+0x730>)
 800e862:	f7f2 f813 	bl	800088c <__aeabi_ddiv>
 800e866:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800e86a:	4602      	mov	r2, r0
 800e86c:	460b      	mov	r3, r1
 800e86e:	4630      	mov	r0, r6
 800e870:	4639      	mov	r1, r7
 800e872:	f7f1 fee1 	bl	8000638 <__aeabi_dmul>
 800e876:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e87a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800e87e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e882:	2300      	movs	r3, #0
 800e884:	9302      	str	r3, [sp, #8]
 800e886:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e88a:	106d      	asrs	r5, r5, #1
 800e88c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800e890:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800e894:	2200      	movs	r2, #0
 800e896:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800e89a:	4640      	mov	r0, r8
 800e89c:	4649      	mov	r1, r9
 800e89e:	4614      	mov	r4, r2
 800e8a0:	461d      	mov	r5, r3
 800e8a2:	f7f1 fec9 	bl	8000638 <__aeabi_dmul>
 800e8a6:	4602      	mov	r2, r0
 800e8a8:	460b      	mov	r3, r1
 800e8aa:	4630      	mov	r0, r6
 800e8ac:	4639      	mov	r1, r7
 800e8ae:	f7f1 fd0b 	bl	80002c8 <__aeabi_dsub>
 800e8b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e8b6:	4606      	mov	r6, r0
 800e8b8:	460f      	mov	r7, r1
 800e8ba:	4620      	mov	r0, r4
 800e8bc:	4629      	mov	r1, r5
 800e8be:	f7f1 fd03 	bl	80002c8 <__aeabi_dsub>
 800e8c2:	4602      	mov	r2, r0
 800e8c4:	460b      	mov	r3, r1
 800e8c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e8ca:	f7f1 fcfd 	bl	80002c8 <__aeabi_dsub>
 800e8ce:	4642      	mov	r2, r8
 800e8d0:	464b      	mov	r3, r9
 800e8d2:	f7f1 feb1 	bl	8000638 <__aeabi_dmul>
 800e8d6:	4602      	mov	r2, r0
 800e8d8:	460b      	mov	r3, r1
 800e8da:	4630      	mov	r0, r6
 800e8dc:	4639      	mov	r1, r7
 800e8de:	f7f1 fcf3 	bl	80002c8 <__aeabi_dsub>
 800e8e2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800e8e6:	f7f1 fea7 	bl	8000638 <__aeabi_dmul>
 800e8ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e8ee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e8f2:	4610      	mov	r0, r2
 800e8f4:	4619      	mov	r1, r3
 800e8f6:	f7f1 fe9f 	bl	8000638 <__aeabi_dmul>
 800e8fa:	a37b      	add	r3, pc, #492	; (adr r3, 800eae8 <__ieee754_pow+0x6d0>)
 800e8fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e900:	4604      	mov	r4, r0
 800e902:	460d      	mov	r5, r1
 800e904:	f7f1 fe98 	bl	8000638 <__aeabi_dmul>
 800e908:	a379      	add	r3, pc, #484	; (adr r3, 800eaf0 <__ieee754_pow+0x6d8>)
 800e90a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e90e:	f7f1 fcdd 	bl	80002cc <__adddf3>
 800e912:	4622      	mov	r2, r4
 800e914:	462b      	mov	r3, r5
 800e916:	f7f1 fe8f 	bl	8000638 <__aeabi_dmul>
 800e91a:	a377      	add	r3, pc, #476	; (adr r3, 800eaf8 <__ieee754_pow+0x6e0>)
 800e91c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e920:	f7f1 fcd4 	bl	80002cc <__adddf3>
 800e924:	4622      	mov	r2, r4
 800e926:	462b      	mov	r3, r5
 800e928:	f7f1 fe86 	bl	8000638 <__aeabi_dmul>
 800e92c:	a374      	add	r3, pc, #464	; (adr r3, 800eb00 <__ieee754_pow+0x6e8>)
 800e92e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e932:	f7f1 fccb 	bl	80002cc <__adddf3>
 800e936:	4622      	mov	r2, r4
 800e938:	462b      	mov	r3, r5
 800e93a:	f7f1 fe7d 	bl	8000638 <__aeabi_dmul>
 800e93e:	a372      	add	r3, pc, #456	; (adr r3, 800eb08 <__ieee754_pow+0x6f0>)
 800e940:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e944:	f7f1 fcc2 	bl	80002cc <__adddf3>
 800e948:	4622      	mov	r2, r4
 800e94a:	462b      	mov	r3, r5
 800e94c:	f7f1 fe74 	bl	8000638 <__aeabi_dmul>
 800e950:	a36f      	add	r3, pc, #444	; (adr r3, 800eb10 <__ieee754_pow+0x6f8>)
 800e952:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e956:	f7f1 fcb9 	bl	80002cc <__adddf3>
 800e95a:	4622      	mov	r2, r4
 800e95c:	4606      	mov	r6, r0
 800e95e:	460f      	mov	r7, r1
 800e960:	462b      	mov	r3, r5
 800e962:	4620      	mov	r0, r4
 800e964:	4629      	mov	r1, r5
 800e966:	f7f1 fe67 	bl	8000638 <__aeabi_dmul>
 800e96a:	4602      	mov	r2, r0
 800e96c:	460b      	mov	r3, r1
 800e96e:	4630      	mov	r0, r6
 800e970:	4639      	mov	r1, r7
 800e972:	f7f1 fe61 	bl	8000638 <__aeabi_dmul>
 800e976:	4642      	mov	r2, r8
 800e978:	4604      	mov	r4, r0
 800e97a:	460d      	mov	r5, r1
 800e97c:	464b      	mov	r3, r9
 800e97e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e982:	f7f1 fca3 	bl	80002cc <__adddf3>
 800e986:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e98a:	f7f1 fe55 	bl	8000638 <__aeabi_dmul>
 800e98e:	4622      	mov	r2, r4
 800e990:	462b      	mov	r3, r5
 800e992:	f7f1 fc9b 	bl	80002cc <__adddf3>
 800e996:	4642      	mov	r2, r8
 800e998:	4606      	mov	r6, r0
 800e99a:	460f      	mov	r7, r1
 800e99c:	464b      	mov	r3, r9
 800e99e:	4640      	mov	r0, r8
 800e9a0:	4649      	mov	r1, r9
 800e9a2:	f7f1 fe49 	bl	8000638 <__aeabi_dmul>
 800e9a6:	2200      	movs	r2, #0
 800e9a8:	4b68      	ldr	r3, [pc, #416]	; (800eb4c <__ieee754_pow+0x734>)
 800e9aa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800e9ae:	f7f1 fc8d 	bl	80002cc <__adddf3>
 800e9b2:	4632      	mov	r2, r6
 800e9b4:	463b      	mov	r3, r7
 800e9b6:	f7f1 fc89 	bl	80002cc <__adddf3>
 800e9ba:	9802      	ldr	r0, [sp, #8]
 800e9bc:	460d      	mov	r5, r1
 800e9be:	4604      	mov	r4, r0
 800e9c0:	4602      	mov	r2, r0
 800e9c2:	460b      	mov	r3, r1
 800e9c4:	4640      	mov	r0, r8
 800e9c6:	4649      	mov	r1, r9
 800e9c8:	f7f1 fe36 	bl	8000638 <__aeabi_dmul>
 800e9cc:	2200      	movs	r2, #0
 800e9ce:	4680      	mov	r8, r0
 800e9d0:	4689      	mov	r9, r1
 800e9d2:	4b5e      	ldr	r3, [pc, #376]	; (800eb4c <__ieee754_pow+0x734>)
 800e9d4:	4620      	mov	r0, r4
 800e9d6:	4629      	mov	r1, r5
 800e9d8:	f7f1 fc76 	bl	80002c8 <__aeabi_dsub>
 800e9dc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e9e0:	f7f1 fc72 	bl	80002c8 <__aeabi_dsub>
 800e9e4:	4602      	mov	r2, r0
 800e9e6:	460b      	mov	r3, r1
 800e9e8:	4630      	mov	r0, r6
 800e9ea:	4639      	mov	r1, r7
 800e9ec:	f7f1 fc6c 	bl	80002c8 <__aeabi_dsub>
 800e9f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e9f4:	f7f1 fe20 	bl	8000638 <__aeabi_dmul>
 800e9f8:	4622      	mov	r2, r4
 800e9fa:	4606      	mov	r6, r0
 800e9fc:	460f      	mov	r7, r1
 800e9fe:	462b      	mov	r3, r5
 800ea00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ea04:	f7f1 fe18 	bl	8000638 <__aeabi_dmul>
 800ea08:	4602      	mov	r2, r0
 800ea0a:	460b      	mov	r3, r1
 800ea0c:	4630      	mov	r0, r6
 800ea0e:	4639      	mov	r1, r7
 800ea10:	f7f1 fc5c 	bl	80002cc <__adddf3>
 800ea14:	4606      	mov	r6, r0
 800ea16:	460f      	mov	r7, r1
 800ea18:	4602      	mov	r2, r0
 800ea1a:	460b      	mov	r3, r1
 800ea1c:	4640      	mov	r0, r8
 800ea1e:	4649      	mov	r1, r9
 800ea20:	f7f1 fc54 	bl	80002cc <__adddf3>
 800ea24:	9802      	ldr	r0, [sp, #8]
 800ea26:	a33c      	add	r3, pc, #240	; (adr r3, 800eb18 <__ieee754_pow+0x700>)
 800ea28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea2c:	4604      	mov	r4, r0
 800ea2e:	460d      	mov	r5, r1
 800ea30:	f7f1 fe02 	bl	8000638 <__aeabi_dmul>
 800ea34:	4642      	mov	r2, r8
 800ea36:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ea3a:	464b      	mov	r3, r9
 800ea3c:	4620      	mov	r0, r4
 800ea3e:	4629      	mov	r1, r5
 800ea40:	f7f1 fc42 	bl	80002c8 <__aeabi_dsub>
 800ea44:	4602      	mov	r2, r0
 800ea46:	460b      	mov	r3, r1
 800ea48:	4630      	mov	r0, r6
 800ea4a:	4639      	mov	r1, r7
 800ea4c:	f7f1 fc3c 	bl	80002c8 <__aeabi_dsub>
 800ea50:	a333      	add	r3, pc, #204	; (adr r3, 800eb20 <__ieee754_pow+0x708>)
 800ea52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea56:	f7f1 fdef 	bl	8000638 <__aeabi_dmul>
 800ea5a:	a333      	add	r3, pc, #204	; (adr r3, 800eb28 <__ieee754_pow+0x710>)
 800ea5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea60:	4606      	mov	r6, r0
 800ea62:	460f      	mov	r7, r1
 800ea64:	4620      	mov	r0, r4
 800ea66:	4629      	mov	r1, r5
 800ea68:	f7f1 fde6 	bl	8000638 <__aeabi_dmul>
 800ea6c:	4602      	mov	r2, r0
 800ea6e:	460b      	mov	r3, r1
 800ea70:	4630      	mov	r0, r6
 800ea72:	4639      	mov	r1, r7
 800ea74:	f7f1 fc2a 	bl	80002cc <__adddf3>
 800ea78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ea7a:	4b35      	ldr	r3, [pc, #212]	; (800eb50 <__ieee754_pow+0x738>)
 800ea7c:	4413      	add	r3, r2
 800ea7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea82:	f7f1 fc23 	bl	80002cc <__adddf3>
 800ea86:	4604      	mov	r4, r0
 800ea88:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ea8a:	460d      	mov	r5, r1
 800ea8c:	f7f1 fd6a 	bl	8000564 <__aeabi_i2d>
 800ea90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ea92:	4b30      	ldr	r3, [pc, #192]	; (800eb54 <__ieee754_pow+0x73c>)
 800ea94:	4413      	add	r3, r2
 800ea96:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ea9a:	4606      	mov	r6, r0
 800ea9c:	460f      	mov	r7, r1
 800ea9e:	4622      	mov	r2, r4
 800eaa0:	462b      	mov	r3, r5
 800eaa2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eaa6:	f7f1 fc11 	bl	80002cc <__adddf3>
 800eaaa:	4642      	mov	r2, r8
 800eaac:	464b      	mov	r3, r9
 800eaae:	f7f1 fc0d 	bl	80002cc <__adddf3>
 800eab2:	4632      	mov	r2, r6
 800eab4:	463b      	mov	r3, r7
 800eab6:	f7f1 fc09 	bl	80002cc <__adddf3>
 800eaba:	9802      	ldr	r0, [sp, #8]
 800eabc:	4632      	mov	r2, r6
 800eabe:	463b      	mov	r3, r7
 800eac0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800eac4:	f7f1 fc00 	bl	80002c8 <__aeabi_dsub>
 800eac8:	4642      	mov	r2, r8
 800eaca:	464b      	mov	r3, r9
 800eacc:	f7f1 fbfc 	bl	80002c8 <__aeabi_dsub>
 800ead0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ead4:	e607      	b.n	800e6e6 <__ieee754_pow+0x2ce>
 800ead6:	f04f 0a01 	mov.w	sl, #1
 800eada:	e6a5      	b.n	800e828 <__ieee754_pow+0x410>
 800eadc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800eb30 <__ieee754_pow+0x718>
 800eae0:	e613      	b.n	800e70a <__ieee754_pow+0x2f2>
 800eae2:	bf00      	nop
 800eae4:	f3af 8000 	nop.w
 800eae8:	4a454eef 	.word	0x4a454eef
 800eaec:	3fca7e28 	.word	0x3fca7e28
 800eaf0:	93c9db65 	.word	0x93c9db65
 800eaf4:	3fcd864a 	.word	0x3fcd864a
 800eaf8:	a91d4101 	.word	0xa91d4101
 800eafc:	3fd17460 	.word	0x3fd17460
 800eb00:	518f264d 	.word	0x518f264d
 800eb04:	3fd55555 	.word	0x3fd55555
 800eb08:	db6fabff 	.word	0xdb6fabff
 800eb0c:	3fdb6db6 	.word	0x3fdb6db6
 800eb10:	33333303 	.word	0x33333303
 800eb14:	3fe33333 	.word	0x3fe33333
 800eb18:	e0000000 	.word	0xe0000000
 800eb1c:	3feec709 	.word	0x3feec709
 800eb20:	dc3a03fd 	.word	0xdc3a03fd
 800eb24:	3feec709 	.word	0x3feec709
 800eb28:	145b01f5 	.word	0x145b01f5
 800eb2c:	be3e2fe0 	.word	0xbe3e2fe0
 800eb30:	00000000 	.word	0x00000000
 800eb34:	3ff00000 	.word	0x3ff00000
 800eb38:	43400000 	.word	0x43400000
 800eb3c:	0003988e 	.word	0x0003988e
 800eb40:	000bb679 	.word	0x000bb679
 800eb44:	0800f430 	.word	0x0800f430
 800eb48:	3ff00000 	.word	0x3ff00000
 800eb4c:	40080000 	.word	0x40080000
 800eb50:	0800f450 	.word	0x0800f450
 800eb54:	0800f440 	.word	0x0800f440
 800eb58:	a3b4      	add	r3, pc, #720	; (adr r3, 800ee2c <__ieee754_pow+0xa14>)
 800eb5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb5e:	4640      	mov	r0, r8
 800eb60:	4649      	mov	r1, r9
 800eb62:	f7f1 fbb3 	bl	80002cc <__adddf3>
 800eb66:	4622      	mov	r2, r4
 800eb68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800eb6c:	462b      	mov	r3, r5
 800eb6e:	4630      	mov	r0, r6
 800eb70:	4639      	mov	r1, r7
 800eb72:	f7f1 fba9 	bl	80002c8 <__aeabi_dsub>
 800eb76:	4602      	mov	r2, r0
 800eb78:	460b      	mov	r3, r1
 800eb7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eb7e:	f7f1 ffeb 	bl	8000b58 <__aeabi_dcmpgt>
 800eb82:	2800      	cmp	r0, #0
 800eb84:	f47f adfe 	bne.w	800e784 <__ieee754_pow+0x36c>
 800eb88:	4aa3      	ldr	r2, [pc, #652]	; (800ee18 <__ieee754_pow+0xa00>)
 800eb8a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800eb8e:	4293      	cmp	r3, r2
 800eb90:	f340 810a 	ble.w	800eda8 <__ieee754_pow+0x990>
 800eb94:	151b      	asrs	r3, r3, #20
 800eb96:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800eb9a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800eb9e:	fa4a f303 	asr.w	r3, sl, r3
 800eba2:	445b      	add	r3, fp
 800eba4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800eba8:	4e9c      	ldr	r6, [pc, #624]	; (800ee1c <__ieee754_pow+0xa04>)
 800ebaa:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800ebae:	4116      	asrs	r6, r2
 800ebb0:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800ebb4:	2000      	movs	r0, #0
 800ebb6:	ea23 0106 	bic.w	r1, r3, r6
 800ebba:	f1c2 0214 	rsb	r2, r2, #20
 800ebbe:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800ebc2:	fa4a fa02 	asr.w	sl, sl, r2
 800ebc6:	f1bb 0f00 	cmp.w	fp, #0
 800ebca:	4602      	mov	r2, r0
 800ebcc:	460b      	mov	r3, r1
 800ebce:	4620      	mov	r0, r4
 800ebd0:	4629      	mov	r1, r5
 800ebd2:	bfb8      	it	lt
 800ebd4:	f1ca 0a00 	rsblt	sl, sl, #0
 800ebd8:	f7f1 fb76 	bl	80002c8 <__aeabi_dsub>
 800ebdc:	e9cd 0100 	strd	r0, r1, [sp]
 800ebe0:	4642      	mov	r2, r8
 800ebe2:	464b      	mov	r3, r9
 800ebe4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ebe8:	f7f1 fb70 	bl	80002cc <__adddf3>
 800ebec:	2000      	movs	r0, #0
 800ebee:	a378      	add	r3, pc, #480	; (adr r3, 800edd0 <__ieee754_pow+0x9b8>)
 800ebf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebf4:	4604      	mov	r4, r0
 800ebf6:	460d      	mov	r5, r1
 800ebf8:	f7f1 fd1e 	bl	8000638 <__aeabi_dmul>
 800ebfc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ec00:	4606      	mov	r6, r0
 800ec02:	460f      	mov	r7, r1
 800ec04:	4620      	mov	r0, r4
 800ec06:	4629      	mov	r1, r5
 800ec08:	f7f1 fb5e 	bl	80002c8 <__aeabi_dsub>
 800ec0c:	4602      	mov	r2, r0
 800ec0e:	460b      	mov	r3, r1
 800ec10:	4640      	mov	r0, r8
 800ec12:	4649      	mov	r1, r9
 800ec14:	f7f1 fb58 	bl	80002c8 <__aeabi_dsub>
 800ec18:	a36f      	add	r3, pc, #444	; (adr r3, 800edd8 <__ieee754_pow+0x9c0>)
 800ec1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec1e:	f7f1 fd0b 	bl	8000638 <__aeabi_dmul>
 800ec22:	a36f      	add	r3, pc, #444	; (adr r3, 800ede0 <__ieee754_pow+0x9c8>)
 800ec24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec28:	4680      	mov	r8, r0
 800ec2a:	4689      	mov	r9, r1
 800ec2c:	4620      	mov	r0, r4
 800ec2e:	4629      	mov	r1, r5
 800ec30:	f7f1 fd02 	bl	8000638 <__aeabi_dmul>
 800ec34:	4602      	mov	r2, r0
 800ec36:	460b      	mov	r3, r1
 800ec38:	4640      	mov	r0, r8
 800ec3a:	4649      	mov	r1, r9
 800ec3c:	f7f1 fb46 	bl	80002cc <__adddf3>
 800ec40:	4604      	mov	r4, r0
 800ec42:	460d      	mov	r5, r1
 800ec44:	4602      	mov	r2, r0
 800ec46:	460b      	mov	r3, r1
 800ec48:	4630      	mov	r0, r6
 800ec4a:	4639      	mov	r1, r7
 800ec4c:	f7f1 fb3e 	bl	80002cc <__adddf3>
 800ec50:	4632      	mov	r2, r6
 800ec52:	463b      	mov	r3, r7
 800ec54:	4680      	mov	r8, r0
 800ec56:	4689      	mov	r9, r1
 800ec58:	f7f1 fb36 	bl	80002c8 <__aeabi_dsub>
 800ec5c:	4602      	mov	r2, r0
 800ec5e:	460b      	mov	r3, r1
 800ec60:	4620      	mov	r0, r4
 800ec62:	4629      	mov	r1, r5
 800ec64:	f7f1 fb30 	bl	80002c8 <__aeabi_dsub>
 800ec68:	4642      	mov	r2, r8
 800ec6a:	4606      	mov	r6, r0
 800ec6c:	460f      	mov	r7, r1
 800ec6e:	464b      	mov	r3, r9
 800ec70:	4640      	mov	r0, r8
 800ec72:	4649      	mov	r1, r9
 800ec74:	f7f1 fce0 	bl	8000638 <__aeabi_dmul>
 800ec78:	a35b      	add	r3, pc, #364	; (adr r3, 800ede8 <__ieee754_pow+0x9d0>)
 800ec7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec7e:	4604      	mov	r4, r0
 800ec80:	460d      	mov	r5, r1
 800ec82:	f7f1 fcd9 	bl	8000638 <__aeabi_dmul>
 800ec86:	a35a      	add	r3, pc, #360	; (adr r3, 800edf0 <__ieee754_pow+0x9d8>)
 800ec88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec8c:	f7f1 fb1c 	bl	80002c8 <__aeabi_dsub>
 800ec90:	4622      	mov	r2, r4
 800ec92:	462b      	mov	r3, r5
 800ec94:	f7f1 fcd0 	bl	8000638 <__aeabi_dmul>
 800ec98:	a357      	add	r3, pc, #348	; (adr r3, 800edf8 <__ieee754_pow+0x9e0>)
 800ec9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec9e:	f7f1 fb15 	bl	80002cc <__adddf3>
 800eca2:	4622      	mov	r2, r4
 800eca4:	462b      	mov	r3, r5
 800eca6:	f7f1 fcc7 	bl	8000638 <__aeabi_dmul>
 800ecaa:	a355      	add	r3, pc, #340	; (adr r3, 800ee00 <__ieee754_pow+0x9e8>)
 800ecac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecb0:	f7f1 fb0a 	bl	80002c8 <__aeabi_dsub>
 800ecb4:	4622      	mov	r2, r4
 800ecb6:	462b      	mov	r3, r5
 800ecb8:	f7f1 fcbe 	bl	8000638 <__aeabi_dmul>
 800ecbc:	a352      	add	r3, pc, #328	; (adr r3, 800ee08 <__ieee754_pow+0x9f0>)
 800ecbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecc2:	f7f1 fb03 	bl	80002cc <__adddf3>
 800ecc6:	4622      	mov	r2, r4
 800ecc8:	462b      	mov	r3, r5
 800ecca:	f7f1 fcb5 	bl	8000638 <__aeabi_dmul>
 800ecce:	4602      	mov	r2, r0
 800ecd0:	460b      	mov	r3, r1
 800ecd2:	4640      	mov	r0, r8
 800ecd4:	4649      	mov	r1, r9
 800ecd6:	f7f1 faf7 	bl	80002c8 <__aeabi_dsub>
 800ecda:	4604      	mov	r4, r0
 800ecdc:	460d      	mov	r5, r1
 800ecde:	4602      	mov	r2, r0
 800ece0:	460b      	mov	r3, r1
 800ece2:	4640      	mov	r0, r8
 800ece4:	4649      	mov	r1, r9
 800ece6:	f7f1 fca7 	bl	8000638 <__aeabi_dmul>
 800ecea:	2200      	movs	r2, #0
 800ecec:	e9cd 0100 	strd	r0, r1, [sp]
 800ecf0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ecf4:	4620      	mov	r0, r4
 800ecf6:	4629      	mov	r1, r5
 800ecf8:	f7f1 fae6 	bl	80002c8 <__aeabi_dsub>
 800ecfc:	4602      	mov	r2, r0
 800ecfe:	460b      	mov	r3, r1
 800ed00:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ed04:	f7f1 fdc2 	bl	800088c <__aeabi_ddiv>
 800ed08:	4632      	mov	r2, r6
 800ed0a:	4604      	mov	r4, r0
 800ed0c:	460d      	mov	r5, r1
 800ed0e:	463b      	mov	r3, r7
 800ed10:	4640      	mov	r0, r8
 800ed12:	4649      	mov	r1, r9
 800ed14:	f7f1 fc90 	bl	8000638 <__aeabi_dmul>
 800ed18:	4632      	mov	r2, r6
 800ed1a:	463b      	mov	r3, r7
 800ed1c:	f7f1 fad6 	bl	80002cc <__adddf3>
 800ed20:	4602      	mov	r2, r0
 800ed22:	460b      	mov	r3, r1
 800ed24:	4620      	mov	r0, r4
 800ed26:	4629      	mov	r1, r5
 800ed28:	f7f1 face 	bl	80002c8 <__aeabi_dsub>
 800ed2c:	4642      	mov	r2, r8
 800ed2e:	464b      	mov	r3, r9
 800ed30:	f7f1 faca 	bl	80002c8 <__aeabi_dsub>
 800ed34:	4602      	mov	r2, r0
 800ed36:	460b      	mov	r3, r1
 800ed38:	2000      	movs	r0, #0
 800ed3a:	4939      	ldr	r1, [pc, #228]	; (800ee20 <__ieee754_pow+0xa08>)
 800ed3c:	f7f1 fac4 	bl	80002c8 <__aeabi_dsub>
 800ed40:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800ed44:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800ed48:	4602      	mov	r2, r0
 800ed4a:	460b      	mov	r3, r1
 800ed4c:	da2f      	bge.n	800edae <__ieee754_pow+0x996>
 800ed4e:	4650      	mov	r0, sl
 800ed50:	ec43 2b10 	vmov	d0, r2, r3
 800ed54:	f000 f9c0 	bl	800f0d8 <scalbn>
 800ed58:	ec51 0b10 	vmov	r0, r1, d0
 800ed5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ed60:	f7ff bbf1 	b.w	800e546 <__ieee754_pow+0x12e>
 800ed64:	4b2f      	ldr	r3, [pc, #188]	; (800ee24 <__ieee754_pow+0xa0c>)
 800ed66:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ed6a:	429e      	cmp	r6, r3
 800ed6c:	f77f af0c 	ble.w	800eb88 <__ieee754_pow+0x770>
 800ed70:	4b2d      	ldr	r3, [pc, #180]	; (800ee28 <__ieee754_pow+0xa10>)
 800ed72:	440b      	add	r3, r1
 800ed74:	4303      	orrs	r3, r0
 800ed76:	d00b      	beq.n	800ed90 <__ieee754_pow+0x978>
 800ed78:	a325      	add	r3, pc, #148	; (adr r3, 800ee10 <__ieee754_pow+0x9f8>)
 800ed7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ed82:	f7f1 fc59 	bl	8000638 <__aeabi_dmul>
 800ed86:	a322      	add	r3, pc, #136	; (adr r3, 800ee10 <__ieee754_pow+0x9f8>)
 800ed88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed8c:	f7ff bbdb 	b.w	800e546 <__ieee754_pow+0x12e>
 800ed90:	4622      	mov	r2, r4
 800ed92:	462b      	mov	r3, r5
 800ed94:	f7f1 fa98 	bl	80002c8 <__aeabi_dsub>
 800ed98:	4642      	mov	r2, r8
 800ed9a:	464b      	mov	r3, r9
 800ed9c:	f7f1 fed2 	bl	8000b44 <__aeabi_dcmpge>
 800eda0:	2800      	cmp	r0, #0
 800eda2:	f43f aef1 	beq.w	800eb88 <__ieee754_pow+0x770>
 800eda6:	e7e7      	b.n	800ed78 <__ieee754_pow+0x960>
 800eda8:	f04f 0a00 	mov.w	sl, #0
 800edac:	e718      	b.n	800ebe0 <__ieee754_pow+0x7c8>
 800edae:	4621      	mov	r1, r4
 800edb0:	e7d4      	b.n	800ed5c <__ieee754_pow+0x944>
 800edb2:	2000      	movs	r0, #0
 800edb4:	491a      	ldr	r1, [pc, #104]	; (800ee20 <__ieee754_pow+0xa08>)
 800edb6:	f7ff bb8f 	b.w	800e4d8 <__ieee754_pow+0xc0>
 800edba:	e9dd 0100 	ldrd	r0, r1, [sp]
 800edbe:	f7ff bb8b 	b.w	800e4d8 <__ieee754_pow+0xc0>
 800edc2:	4630      	mov	r0, r6
 800edc4:	4639      	mov	r1, r7
 800edc6:	f7ff bb87 	b.w	800e4d8 <__ieee754_pow+0xc0>
 800edca:	4693      	mov	fp, r2
 800edcc:	f7ff bb98 	b.w	800e500 <__ieee754_pow+0xe8>
 800edd0:	00000000 	.word	0x00000000
 800edd4:	3fe62e43 	.word	0x3fe62e43
 800edd8:	fefa39ef 	.word	0xfefa39ef
 800eddc:	3fe62e42 	.word	0x3fe62e42
 800ede0:	0ca86c39 	.word	0x0ca86c39
 800ede4:	be205c61 	.word	0xbe205c61
 800ede8:	72bea4d0 	.word	0x72bea4d0
 800edec:	3e663769 	.word	0x3e663769
 800edf0:	c5d26bf1 	.word	0xc5d26bf1
 800edf4:	3ebbbd41 	.word	0x3ebbbd41
 800edf8:	af25de2c 	.word	0xaf25de2c
 800edfc:	3f11566a 	.word	0x3f11566a
 800ee00:	16bebd93 	.word	0x16bebd93
 800ee04:	3f66c16c 	.word	0x3f66c16c
 800ee08:	5555553e 	.word	0x5555553e
 800ee0c:	3fc55555 	.word	0x3fc55555
 800ee10:	c2f8f359 	.word	0xc2f8f359
 800ee14:	01a56e1f 	.word	0x01a56e1f
 800ee18:	3fe00000 	.word	0x3fe00000
 800ee1c:	000fffff 	.word	0x000fffff
 800ee20:	3ff00000 	.word	0x3ff00000
 800ee24:	4090cbff 	.word	0x4090cbff
 800ee28:	3f6f3400 	.word	0x3f6f3400
 800ee2c:	652b82fe 	.word	0x652b82fe
 800ee30:	3c971547 	.word	0x3c971547

0800ee34 <__ieee754_sqrt>:
 800ee34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee38:	4955      	ldr	r1, [pc, #340]	; (800ef90 <__ieee754_sqrt+0x15c>)
 800ee3a:	ec55 4b10 	vmov	r4, r5, d0
 800ee3e:	43a9      	bics	r1, r5
 800ee40:	462b      	mov	r3, r5
 800ee42:	462a      	mov	r2, r5
 800ee44:	d112      	bne.n	800ee6c <__ieee754_sqrt+0x38>
 800ee46:	ee10 2a10 	vmov	r2, s0
 800ee4a:	ee10 0a10 	vmov	r0, s0
 800ee4e:	4629      	mov	r1, r5
 800ee50:	f7f1 fbf2 	bl	8000638 <__aeabi_dmul>
 800ee54:	4602      	mov	r2, r0
 800ee56:	460b      	mov	r3, r1
 800ee58:	4620      	mov	r0, r4
 800ee5a:	4629      	mov	r1, r5
 800ee5c:	f7f1 fa36 	bl	80002cc <__adddf3>
 800ee60:	4604      	mov	r4, r0
 800ee62:	460d      	mov	r5, r1
 800ee64:	ec45 4b10 	vmov	d0, r4, r5
 800ee68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee6c:	2d00      	cmp	r5, #0
 800ee6e:	ee10 0a10 	vmov	r0, s0
 800ee72:	4621      	mov	r1, r4
 800ee74:	dc0f      	bgt.n	800ee96 <__ieee754_sqrt+0x62>
 800ee76:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ee7a:	4330      	orrs	r0, r6
 800ee7c:	d0f2      	beq.n	800ee64 <__ieee754_sqrt+0x30>
 800ee7e:	b155      	cbz	r5, 800ee96 <__ieee754_sqrt+0x62>
 800ee80:	ee10 2a10 	vmov	r2, s0
 800ee84:	4620      	mov	r0, r4
 800ee86:	4629      	mov	r1, r5
 800ee88:	f7f1 fa1e 	bl	80002c8 <__aeabi_dsub>
 800ee8c:	4602      	mov	r2, r0
 800ee8e:	460b      	mov	r3, r1
 800ee90:	f7f1 fcfc 	bl	800088c <__aeabi_ddiv>
 800ee94:	e7e4      	b.n	800ee60 <__ieee754_sqrt+0x2c>
 800ee96:	151b      	asrs	r3, r3, #20
 800ee98:	d073      	beq.n	800ef82 <__ieee754_sqrt+0x14e>
 800ee9a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ee9e:	07dd      	lsls	r5, r3, #31
 800eea0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800eea4:	bf48      	it	mi
 800eea6:	0fc8      	lsrmi	r0, r1, #31
 800eea8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800eeac:	bf44      	itt	mi
 800eeae:	0049      	lslmi	r1, r1, #1
 800eeb0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800eeb4:	2500      	movs	r5, #0
 800eeb6:	1058      	asrs	r0, r3, #1
 800eeb8:	0fcb      	lsrs	r3, r1, #31
 800eeba:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800eebe:	0049      	lsls	r1, r1, #1
 800eec0:	2316      	movs	r3, #22
 800eec2:	462c      	mov	r4, r5
 800eec4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800eec8:	19a7      	adds	r7, r4, r6
 800eeca:	4297      	cmp	r7, r2
 800eecc:	bfde      	ittt	le
 800eece:	19bc      	addle	r4, r7, r6
 800eed0:	1bd2      	suble	r2, r2, r7
 800eed2:	19ad      	addle	r5, r5, r6
 800eed4:	0fcf      	lsrs	r7, r1, #31
 800eed6:	3b01      	subs	r3, #1
 800eed8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800eedc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800eee0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800eee4:	d1f0      	bne.n	800eec8 <__ieee754_sqrt+0x94>
 800eee6:	f04f 0c20 	mov.w	ip, #32
 800eeea:	469e      	mov	lr, r3
 800eeec:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800eef0:	42a2      	cmp	r2, r4
 800eef2:	eb06 070e 	add.w	r7, r6, lr
 800eef6:	dc02      	bgt.n	800eefe <__ieee754_sqrt+0xca>
 800eef8:	d112      	bne.n	800ef20 <__ieee754_sqrt+0xec>
 800eefa:	428f      	cmp	r7, r1
 800eefc:	d810      	bhi.n	800ef20 <__ieee754_sqrt+0xec>
 800eefe:	2f00      	cmp	r7, #0
 800ef00:	eb07 0e06 	add.w	lr, r7, r6
 800ef04:	da42      	bge.n	800ef8c <__ieee754_sqrt+0x158>
 800ef06:	f1be 0f00 	cmp.w	lr, #0
 800ef0a:	db3f      	blt.n	800ef8c <__ieee754_sqrt+0x158>
 800ef0c:	f104 0801 	add.w	r8, r4, #1
 800ef10:	1b12      	subs	r2, r2, r4
 800ef12:	428f      	cmp	r7, r1
 800ef14:	bf88      	it	hi
 800ef16:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800ef1a:	1bc9      	subs	r1, r1, r7
 800ef1c:	4433      	add	r3, r6
 800ef1e:	4644      	mov	r4, r8
 800ef20:	0052      	lsls	r2, r2, #1
 800ef22:	f1bc 0c01 	subs.w	ip, ip, #1
 800ef26:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800ef2a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ef2e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ef32:	d1dd      	bne.n	800eef0 <__ieee754_sqrt+0xbc>
 800ef34:	430a      	orrs	r2, r1
 800ef36:	d006      	beq.n	800ef46 <__ieee754_sqrt+0x112>
 800ef38:	1c5c      	adds	r4, r3, #1
 800ef3a:	bf13      	iteet	ne
 800ef3c:	3301      	addne	r3, #1
 800ef3e:	3501      	addeq	r5, #1
 800ef40:	4663      	moveq	r3, ip
 800ef42:	f023 0301 	bicne.w	r3, r3, #1
 800ef46:	106a      	asrs	r2, r5, #1
 800ef48:	085b      	lsrs	r3, r3, #1
 800ef4a:	07e9      	lsls	r1, r5, #31
 800ef4c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800ef50:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800ef54:	bf48      	it	mi
 800ef56:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800ef5a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800ef5e:	461c      	mov	r4, r3
 800ef60:	e780      	b.n	800ee64 <__ieee754_sqrt+0x30>
 800ef62:	0aca      	lsrs	r2, r1, #11
 800ef64:	3815      	subs	r0, #21
 800ef66:	0549      	lsls	r1, r1, #21
 800ef68:	2a00      	cmp	r2, #0
 800ef6a:	d0fa      	beq.n	800ef62 <__ieee754_sqrt+0x12e>
 800ef6c:	02d6      	lsls	r6, r2, #11
 800ef6e:	d50a      	bpl.n	800ef86 <__ieee754_sqrt+0x152>
 800ef70:	f1c3 0420 	rsb	r4, r3, #32
 800ef74:	fa21 f404 	lsr.w	r4, r1, r4
 800ef78:	1e5d      	subs	r5, r3, #1
 800ef7a:	4099      	lsls	r1, r3
 800ef7c:	4322      	orrs	r2, r4
 800ef7e:	1b43      	subs	r3, r0, r5
 800ef80:	e78b      	b.n	800ee9a <__ieee754_sqrt+0x66>
 800ef82:	4618      	mov	r0, r3
 800ef84:	e7f0      	b.n	800ef68 <__ieee754_sqrt+0x134>
 800ef86:	0052      	lsls	r2, r2, #1
 800ef88:	3301      	adds	r3, #1
 800ef8a:	e7ef      	b.n	800ef6c <__ieee754_sqrt+0x138>
 800ef8c:	46a0      	mov	r8, r4
 800ef8e:	e7bf      	b.n	800ef10 <__ieee754_sqrt+0xdc>
 800ef90:	7ff00000 	.word	0x7ff00000

0800ef94 <fabs>:
 800ef94:	ec51 0b10 	vmov	r0, r1, d0
 800ef98:	ee10 2a10 	vmov	r2, s0
 800ef9c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800efa0:	ec43 2b10 	vmov	d0, r2, r3
 800efa4:	4770      	bx	lr

0800efa6 <finite>:
 800efa6:	ee10 3a90 	vmov	r3, s1
 800efaa:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800efae:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800efb2:	0fc0      	lsrs	r0, r0, #31
 800efb4:	4770      	bx	lr

0800efb6 <matherr>:
 800efb6:	2000      	movs	r0, #0
 800efb8:	4770      	bx	lr
 800efba:	0000      	movs	r0, r0
 800efbc:	0000      	movs	r0, r0
	...

0800efc0 <nan>:
 800efc0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800efc8 <nan+0x8>
 800efc4:	4770      	bx	lr
 800efc6:	bf00      	nop
 800efc8:	00000000 	.word	0x00000000
 800efcc:	7ff80000 	.word	0x7ff80000

0800efd0 <rint>:
 800efd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800efd2:	ec51 0b10 	vmov	r0, r1, d0
 800efd6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800efda:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800efde:	2e13      	cmp	r6, #19
 800efe0:	460b      	mov	r3, r1
 800efe2:	ee10 4a10 	vmov	r4, s0
 800efe6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800efea:	dc56      	bgt.n	800f09a <rint+0xca>
 800efec:	2e00      	cmp	r6, #0
 800efee:	da2b      	bge.n	800f048 <rint+0x78>
 800eff0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800eff4:	4302      	orrs	r2, r0
 800eff6:	d023      	beq.n	800f040 <rint+0x70>
 800eff8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800effc:	4302      	orrs	r2, r0
 800effe:	4254      	negs	r4, r2
 800f000:	4314      	orrs	r4, r2
 800f002:	0c4b      	lsrs	r3, r1, #17
 800f004:	0b24      	lsrs	r4, r4, #12
 800f006:	045b      	lsls	r3, r3, #17
 800f008:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800f00c:	ea44 0103 	orr.w	r1, r4, r3
 800f010:	460b      	mov	r3, r1
 800f012:	492f      	ldr	r1, [pc, #188]	; (800f0d0 <rint+0x100>)
 800f014:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800f018:	e9d1 6700 	ldrd	r6, r7, [r1]
 800f01c:	4602      	mov	r2, r0
 800f01e:	4639      	mov	r1, r7
 800f020:	4630      	mov	r0, r6
 800f022:	f7f1 f953 	bl	80002cc <__adddf3>
 800f026:	e9cd 0100 	strd	r0, r1, [sp]
 800f02a:	463b      	mov	r3, r7
 800f02c:	4632      	mov	r2, r6
 800f02e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f032:	f7f1 f949 	bl	80002c8 <__aeabi_dsub>
 800f036:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f03a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800f03e:	4639      	mov	r1, r7
 800f040:	ec41 0b10 	vmov	d0, r0, r1
 800f044:	b003      	add	sp, #12
 800f046:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f048:	4a22      	ldr	r2, [pc, #136]	; (800f0d4 <rint+0x104>)
 800f04a:	4132      	asrs	r2, r6
 800f04c:	ea01 0702 	and.w	r7, r1, r2
 800f050:	4307      	orrs	r7, r0
 800f052:	d0f5      	beq.n	800f040 <rint+0x70>
 800f054:	0852      	lsrs	r2, r2, #1
 800f056:	4011      	ands	r1, r2
 800f058:	430c      	orrs	r4, r1
 800f05a:	d00b      	beq.n	800f074 <rint+0xa4>
 800f05c:	ea23 0202 	bic.w	r2, r3, r2
 800f060:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800f064:	2e13      	cmp	r6, #19
 800f066:	fa43 f306 	asr.w	r3, r3, r6
 800f06a:	bf0c      	ite	eq
 800f06c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800f070:	2400      	movne	r4, #0
 800f072:	4313      	orrs	r3, r2
 800f074:	4916      	ldr	r1, [pc, #88]	; (800f0d0 <rint+0x100>)
 800f076:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800f07a:	4622      	mov	r2, r4
 800f07c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f080:	4620      	mov	r0, r4
 800f082:	4629      	mov	r1, r5
 800f084:	f7f1 f922 	bl	80002cc <__adddf3>
 800f088:	e9cd 0100 	strd	r0, r1, [sp]
 800f08c:	4622      	mov	r2, r4
 800f08e:	462b      	mov	r3, r5
 800f090:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f094:	f7f1 f918 	bl	80002c8 <__aeabi_dsub>
 800f098:	e7d2      	b.n	800f040 <rint+0x70>
 800f09a:	2e33      	cmp	r6, #51	; 0x33
 800f09c:	dd07      	ble.n	800f0ae <rint+0xde>
 800f09e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f0a2:	d1cd      	bne.n	800f040 <rint+0x70>
 800f0a4:	ee10 2a10 	vmov	r2, s0
 800f0a8:	f7f1 f910 	bl	80002cc <__adddf3>
 800f0ac:	e7c8      	b.n	800f040 <rint+0x70>
 800f0ae:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800f0b2:	f04f 32ff 	mov.w	r2, #4294967295
 800f0b6:	40f2      	lsrs	r2, r6
 800f0b8:	4210      	tst	r0, r2
 800f0ba:	d0c1      	beq.n	800f040 <rint+0x70>
 800f0bc:	0852      	lsrs	r2, r2, #1
 800f0be:	4210      	tst	r0, r2
 800f0c0:	bf1f      	itttt	ne
 800f0c2:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800f0c6:	ea20 0202 	bicne.w	r2, r0, r2
 800f0ca:	4134      	asrne	r4, r6
 800f0cc:	4314      	orrne	r4, r2
 800f0ce:	e7d1      	b.n	800f074 <rint+0xa4>
 800f0d0:	0800f460 	.word	0x0800f460
 800f0d4:	000fffff 	.word	0x000fffff

0800f0d8 <scalbn>:
 800f0d8:	b570      	push	{r4, r5, r6, lr}
 800f0da:	ec55 4b10 	vmov	r4, r5, d0
 800f0de:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800f0e2:	4606      	mov	r6, r0
 800f0e4:	462b      	mov	r3, r5
 800f0e6:	b9aa      	cbnz	r2, 800f114 <scalbn+0x3c>
 800f0e8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f0ec:	4323      	orrs	r3, r4
 800f0ee:	d03b      	beq.n	800f168 <scalbn+0x90>
 800f0f0:	4b31      	ldr	r3, [pc, #196]	; (800f1b8 <scalbn+0xe0>)
 800f0f2:	4629      	mov	r1, r5
 800f0f4:	2200      	movs	r2, #0
 800f0f6:	ee10 0a10 	vmov	r0, s0
 800f0fa:	f7f1 fa9d 	bl	8000638 <__aeabi_dmul>
 800f0fe:	4b2f      	ldr	r3, [pc, #188]	; (800f1bc <scalbn+0xe4>)
 800f100:	429e      	cmp	r6, r3
 800f102:	4604      	mov	r4, r0
 800f104:	460d      	mov	r5, r1
 800f106:	da12      	bge.n	800f12e <scalbn+0x56>
 800f108:	a327      	add	r3, pc, #156	; (adr r3, 800f1a8 <scalbn+0xd0>)
 800f10a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f10e:	f7f1 fa93 	bl	8000638 <__aeabi_dmul>
 800f112:	e009      	b.n	800f128 <scalbn+0x50>
 800f114:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800f118:	428a      	cmp	r2, r1
 800f11a:	d10c      	bne.n	800f136 <scalbn+0x5e>
 800f11c:	ee10 2a10 	vmov	r2, s0
 800f120:	4620      	mov	r0, r4
 800f122:	4629      	mov	r1, r5
 800f124:	f7f1 f8d2 	bl	80002cc <__adddf3>
 800f128:	4604      	mov	r4, r0
 800f12a:	460d      	mov	r5, r1
 800f12c:	e01c      	b.n	800f168 <scalbn+0x90>
 800f12e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f132:	460b      	mov	r3, r1
 800f134:	3a36      	subs	r2, #54	; 0x36
 800f136:	4432      	add	r2, r6
 800f138:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f13c:	428a      	cmp	r2, r1
 800f13e:	dd0b      	ble.n	800f158 <scalbn+0x80>
 800f140:	ec45 4b11 	vmov	d1, r4, r5
 800f144:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800f1b0 <scalbn+0xd8>
 800f148:	f000 f83c 	bl	800f1c4 <copysign>
 800f14c:	a318      	add	r3, pc, #96	; (adr r3, 800f1b0 <scalbn+0xd8>)
 800f14e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f152:	ec51 0b10 	vmov	r0, r1, d0
 800f156:	e7da      	b.n	800f10e <scalbn+0x36>
 800f158:	2a00      	cmp	r2, #0
 800f15a:	dd08      	ble.n	800f16e <scalbn+0x96>
 800f15c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f160:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f164:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f168:	ec45 4b10 	vmov	d0, r4, r5
 800f16c:	bd70      	pop	{r4, r5, r6, pc}
 800f16e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f172:	da0d      	bge.n	800f190 <scalbn+0xb8>
 800f174:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f178:	429e      	cmp	r6, r3
 800f17a:	ec45 4b11 	vmov	d1, r4, r5
 800f17e:	dce1      	bgt.n	800f144 <scalbn+0x6c>
 800f180:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800f1a8 <scalbn+0xd0>
 800f184:	f000 f81e 	bl	800f1c4 <copysign>
 800f188:	a307      	add	r3, pc, #28	; (adr r3, 800f1a8 <scalbn+0xd0>)
 800f18a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f18e:	e7e0      	b.n	800f152 <scalbn+0x7a>
 800f190:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f194:	3236      	adds	r2, #54	; 0x36
 800f196:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f19a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f19e:	4620      	mov	r0, r4
 800f1a0:	4629      	mov	r1, r5
 800f1a2:	2200      	movs	r2, #0
 800f1a4:	4b06      	ldr	r3, [pc, #24]	; (800f1c0 <scalbn+0xe8>)
 800f1a6:	e7b2      	b.n	800f10e <scalbn+0x36>
 800f1a8:	c2f8f359 	.word	0xc2f8f359
 800f1ac:	01a56e1f 	.word	0x01a56e1f
 800f1b0:	8800759c 	.word	0x8800759c
 800f1b4:	7e37e43c 	.word	0x7e37e43c
 800f1b8:	43500000 	.word	0x43500000
 800f1bc:	ffff3cb0 	.word	0xffff3cb0
 800f1c0:	3c900000 	.word	0x3c900000

0800f1c4 <copysign>:
 800f1c4:	ec51 0b10 	vmov	r0, r1, d0
 800f1c8:	ee11 0a90 	vmov	r0, s3
 800f1cc:	ee10 2a10 	vmov	r2, s0
 800f1d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800f1d4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800f1d8:	ea41 0300 	orr.w	r3, r1, r0
 800f1dc:	ec43 2b10 	vmov	d0, r2, r3
 800f1e0:	4770      	bx	lr
	...

0800f1e4 <_init>:
 800f1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1e6:	bf00      	nop
 800f1e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1ea:	bc08      	pop	{r3}
 800f1ec:	469e      	mov	lr, r3
 800f1ee:	4770      	bx	lr

0800f1f0 <_fini>:
 800f1f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1f2:	bf00      	nop
 800f1f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1f6:	bc08      	pop	{r3}
 800f1f8:	469e      	mov	lr, r3
 800f1fa:	4770      	bx	lr
