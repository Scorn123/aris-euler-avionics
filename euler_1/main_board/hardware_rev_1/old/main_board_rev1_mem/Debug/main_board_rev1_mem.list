
main_board_rev1_mem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c84  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08004e54  08004e54  00014e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ee8  08004ee8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004ee8  08004ee8  00014ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ef0  08004ef0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ef0  08004ef0  00014ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ef4  08004ef4  00014ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004ef8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008b0c  2000000c  08004f04  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008b18  08004f04  00028b18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015225  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002829  00000000  00000000  00035261  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001090  00000000  00000000  00037a90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f58  00000000  00000000  00038b20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002855  00000000  00000000  00039a78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d51f  00000000  00000000  0003c2cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ea894  00000000  00000000  000497ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00134080  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044a0  00000000  00000000  001340fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000000c 	.word	0x2000000c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004e3c 	.word	0x08004e3c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000010 	.word	0x20000010
 800020c:	08004e3c 	.word	0x08004e3c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b972 	b.w	800050c <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	4688      	mov	r8, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14b      	bne.n	80002e6 <__udivmoddi4+0xa6>
 800024e:	428a      	cmp	r2, r1
 8000250:	4615      	mov	r5, r2
 8000252:	d967      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0720 	rsb	r7, r2, #32
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	fa20 f707 	lsr.w	r7, r0, r7
 8000266:	4095      	lsls	r5, r2
 8000268:	ea47 0803 	orr.w	r8, r7, r3
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbb8 f7fe 	udiv	r7, r8, lr
 8000278:	fa1f fc85 	uxth.w	ip, r5
 800027c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000280:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000284:	fb07 f10c 	mul.w	r1, r7, ip
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18eb      	adds	r3, r5, r3
 800028e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000292:	f080 811b 	bcs.w	80004cc <__udivmoddi4+0x28c>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8118 	bls.w	80004cc <__udivmoddi4+0x28c>
 800029c:	3f02      	subs	r7, #2
 800029e:	442b      	add	r3, r5
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b4:	45a4      	cmp	ip, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	192c      	adds	r4, r5, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8107 	bcs.w	80004d0 <__udivmoddi4+0x290>
 80002c2:	45a4      	cmp	ip, r4
 80002c4:	f240 8104 	bls.w	80004d0 <__udivmoddi4+0x290>
 80002c8:	3802      	subs	r0, #2
 80002ca:	442c      	add	r4, r5
 80002cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d0:	eba4 040c 	sub.w	r4, r4, ip
 80002d4:	2700      	movs	r7, #0
 80002d6:	b11e      	cbz	r6, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c6 4300 	strd	r4, r3, [r6]
 80002e0:	4639      	mov	r1, r7
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d909      	bls.n	80002fe <__udivmoddi4+0xbe>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80eb 	beq.w	80004c6 <__udivmoddi4+0x286>
 80002f0:	2700      	movs	r7, #0
 80002f2:	e9c6 0100 	strd	r0, r1, [r6]
 80002f6:	4638      	mov	r0, r7
 80002f8:	4639      	mov	r1, r7
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	fab3 f783 	clz	r7, r3
 8000302:	2f00      	cmp	r7, #0
 8000304:	d147      	bne.n	8000396 <__udivmoddi4+0x156>
 8000306:	428b      	cmp	r3, r1
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xd0>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2c4>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb61 0303 	sbc.w	r3, r1, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4698      	mov	r8, r3
 800031a:	2e00      	cmp	r6, #0
 800031c:	d0e0      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800031e:	e9c6 4800 	strd	r4, r8, [r6]
 8000322:	e7dd      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000324:	b902      	cbnz	r2, 8000328 <__udivmoddi4+0xe8>
 8000326:	deff      	udf	#255	; 0xff
 8000328:	fab2 f282 	clz	r2, r2
 800032c:	2a00      	cmp	r2, #0
 800032e:	f040 808f 	bne.w	8000450 <__udivmoddi4+0x210>
 8000332:	1b49      	subs	r1, r1, r5
 8000334:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000338:	fa1f f885 	uxth.w	r8, r5
 800033c:	2701      	movs	r7, #1
 800033e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fb0e 111c 	mls	r1, lr, ip, r1
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb08 f10c 	mul.w	r1, r8, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x124>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f10c 30ff 	add.w	r0, ip, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4299      	cmp	r1, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 8000362:	4684      	mov	ip, r0
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	b2a3      	uxth	r3, r4
 8000368:	fbb1 f0fe 	udiv	r0, r1, lr
 800036c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000370:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000374:	fb08 f800 	mul.w	r8, r8, r0
 8000378:	45a0      	cmp	r8, r4
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x14c>
 800037c:	192c      	adds	r4, r5, r4
 800037e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x14a>
 8000384:	45a0      	cmp	r8, r4
 8000386:	f200 80b6 	bhi.w	80004f6 <__udivmoddi4+0x2b6>
 800038a:	4618      	mov	r0, r3
 800038c:	eba4 0408 	sub.w	r4, r4, r8
 8000390:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000394:	e79f      	b.n	80002d6 <__udivmoddi4+0x96>
 8000396:	f1c7 0c20 	rsb	ip, r7, #32
 800039a:	40bb      	lsls	r3, r7
 800039c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003a4:	fa01 f407 	lsl.w	r4, r1, r7
 80003a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003b4:	4325      	orrs	r5, r4
 80003b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ba:	0c2c      	lsrs	r4, r5, #16
 80003bc:	fb08 3319 	mls	r3, r8, r9, r3
 80003c0:	fa1f fa8e 	uxth.w	sl, lr
 80003c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c8:	fb09 f40a 	mul.w	r4, r9, sl
 80003cc:	429c      	cmp	r4, r3
 80003ce:	fa02 f207 	lsl.w	r2, r2, r7
 80003d2:	fa00 f107 	lsl.w	r1, r0, r7
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1e 0303 	adds.w	r3, lr, r3
 80003dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e0:	f080 8087 	bcs.w	80004f2 <__udivmoddi4+0x2b2>
 80003e4:	429c      	cmp	r4, r3
 80003e6:	f240 8084 	bls.w	80004f2 <__udivmoddi4+0x2b2>
 80003ea:	f1a9 0902 	sub.w	r9, r9, #2
 80003ee:	4473      	add	r3, lr
 80003f0:	1b1b      	subs	r3, r3, r4
 80003f2:	b2ad      	uxth	r5, r5
 80003f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f8:	fb08 3310 	mls	r3, r8, r0, r3
 80003fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000400:	fb00 fa0a 	mul.w	sl, r0, sl
 8000404:	45a2      	cmp	sl, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1e 0404 	adds.w	r4, lr, r4
 800040c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000410:	d26b      	bcs.n	80004ea <__udivmoddi4+0x2aa>
 8000412:	45a2      	cmp	sl, r4
 8000414:	d969      	bls.n	80004ea <__udivmoddi4+0x2aa>
 8000416:	3802      	subs	r0, #2
 8000418:	4474      	add	r4, lr
 800041a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800041e:	fba0 8902 	umull	r8, r9, r0, r2
 8000422:	eba4 040a 	sub.w	r4, r4, sl
 8000426:	454c      	cmp	r4, r9
 8000428:	46c2      	mov	sl, r8
 800042a:	464b      	mov	r3, r9
 800042c:	d354      	bcc.n	80004d8 <__udivmoddi4+0x298>
 800042e:	d051      	beq.n	80004d4 <__udivmoddi4+0x294>
 8000430:	2e00      	cmp	r6, #0
 8000432:	d069      	beq.n	8000508 <__udivmoddi4+0x2c8>
 8000434:	ebb1 050a 	subs.w	r5, r1, sl
 8000438:	eb64 0403 	sbc.w	r4, r4, r3
 800043c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000440:	40fd      	lsrs	r5, r7
 8000442:	40fc      	lsrs	r4, r7
 8000444:	ea4c 0505 	orr.w	r5, ip, r5
 8000448:	e9c6 5400 	strd	r5, r4, [r6]
 800044c:	2700      	movs	r7, #0
 800044e:	e747      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000450:	f1c2 0320 	rsb	r3, r2, #32
 8000454:	fa20 f703 	lsr.w	r7, r0, r3
 8000458:	4095      	lsls	r5, r2
 800045a:	fa01 f002 	lsl.w	r0, r1, r2
 800045e:	fa21 f303 	lsr.w	r3, r1, r3
 8000462:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000466:	4338      	orrs	r0, r7
 8000468:	0c01      	lsrs	r1, r0, #16
 800046a:	fbb3 f7fe 	udiv	r7, r3, lr
 800046e:	fa1f f885 	uxth.w	r8, r5
 8000472:	fb0e 3317 	mls	r3, lr, r7, r3
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb07 f308 	mul.w	r3, r7, r8
 800047e:	428b      	cmp	r3, r1
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x256>
 8000486:	1869      	adds	r1, r5, r1
 8000488:	f107 3cff 	add.w	ip, r7, #4294967295
 800048c:	d22f      	bcs.n	80004ee <__udivmoddi4+0x2ae>
 800048e:	428b      	cmp	r3, r1
 8000490:	d92d      	bls.n	80004ee <__udivmoddi4+0x2ae>
 8000492:	3f02      	subs	r7, #2
 8000494:	4429      	add	r1, r5
 8000496:	1acb      	subs	r3, r1, r3
 8000498:	b281      	uxth	r1, r0
 800049a:	fbb3 f0fe 	udiv	r0, r3, lr
 800049e:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a6:	fb00 f308 	mul.w	r3, r0, r8
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x27e>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004b4:	d217      	bcs.n	80004e6 <__udivmoddi4+0x2a6>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d915      	bls.n	80004e6 <__udivmoddi4+0x2a6>
 80004ba:	3802      	subs	r0, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004c4:	e73b      	b.n	800033e <__udivmoddi4+0xfe>
 80004c6:	4637      	mov	r7, r6
 80004c8:	4630      	mov	r0, r6
 80004ca:	e709      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004cc:	4607      	mov	r7, r0
 80004ce:	e6e7      	b.n	80002a0 <__udivmoddi4+0x60>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6fb      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d4:	4541      	cmp	r1, r8
 80004d6:	d2ab      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004dc:	eb69 020e 	sbc.w	r2, r9, lr
 80004e0:	3801      	subs	r0, #1
 80004e2:	4613      	mov	r3, r2
 80004e4:	e7a4      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e6:	4660      	mov	r0, ip
 80004e8:	e7e9      	b.n	80004be <__udivmoddi4+0x27e>
 80004ea:	4618      	mov	r0, r3
 80004ec:	e795      	b.n	800041a <__udivmoddi4+0x1da>
 80004ee:	4667      	mov	r7, ip
 80004f0:	e7d1      	b.n	8000496 <__udivmoddi4+0x256>
 80004f2:	4681      	mov	r9, r0
 80004f4:	e77c      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	442c      	add	r4, r5
 80004fa:	e747      	b.n	800038c <__udivmoddi4+0x14c>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	442b      	add	r3, r5
 8000502:	e72f      	b.n	8000364 <__udivmoddi4+0x124>
 8000504:	4638      	mov	r0, r7
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xda>
 8000508:	4637      	mov	r7, r6
 800050a:	e6e9      	b.n	80002e0 <__udivmoddi4+0xa0>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b590      	push	{r4, r7, lr}
 8000512:	b0a5      	sub	sp, #148	; 0x94
 8000514:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000516:	f000 fab6 	bl	8000a86 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051a:	f000 f895 	bl	8000648 <SystemClock_Config>
  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  osKernelInitialize();
 800051e:	f001 fa83 	bl	8001a28 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  /* Sensor Board Mutex */
  const osMutexAttr_t sb_mutex_attr = {
 8000522:	4b38      	ldr	r3, [pc, #224]	; (8000604 <main+0xf4>)
 8000524:	f107 0480 	add.w	r4, r7, #128	; 0x80
 8000528:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800052a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    osMutexPrioInherit,    // attr_bits
    NULL,                                     // memory for control block
    0U                                        // size for control block
  };

  sb_mutex = osMutexNew(&sb_mutex_attr);
 800052e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000532:	4618      	mov	r0, r3
 8000534:	f001 fbb8 	bl	8001ca8 <osMutexNew>
 8000538:	4602      	mov	r2, r0
 800053a:	4b33      	ldr	r3, [pc, #204]	; (8000608 <main+0xf8>)
 800053c:	601a      	str	r2, [r3, #0]

  const osMutexAttr_t gps_mutex_attr = {
 800053e:	4b33      	ldr	r3, [pc, #204]	; (800060c <main+0xfc>)
 8000540:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000544:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000546:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    osMutexPrioInherit,    // attr_bits
    NULL,                                     // memory for control block
    0U                                        // size for control block
  };

  gps_mutex = osMutexNew(&gps_mutex_attr);
 800054a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800054e:	4618      	mov	r0, r3
 8000550:	f001 fbaa 	bl	8001ca8 <osMutexNew>
 8000554:	4602      	mov	r2, r0
 8000556:	4b2e      	ldr	r3, [pc, #184]	; (8000610 <main+0x100>)
 8000558:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  const osThreadAttr_t defaultTask_attributes = {
 800055a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800055e:	2224      	movs	r2, #36	; 0x24
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f004 fc61 	bl	8004e2a <memset>
 8000568:	4b2a      	ldr	r3, [pc, #168]	; (8000614 <main+0x104>)
 800056a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800056c:	2380      	movs	r3, #128	; 0x80
 800056e:	663b      	str	r3, [r7, #96]	; 0x60
 8000570:	2318      	movs	r3, #24
 8000572:	667b      	str	r3, [r7, #100]	; 0x64
    .name = "defaultTask",
    .priority = (osPriority_t) osPriorityNormal,
    .stack_size = 128
  };
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000574:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000578:	461a      	mov	r2, r3
 800057a:	2100      	movs	r1, #0
 800057c:	4826      	ldr	r0, [pc, #152]	; (8000618 <main+0x108>)
 800057e:	f001 fabb 	bl	8001af8 <osThreadNew>
 8000582:	4602      	mov	r2, r0
 8000584:	4b25      	ldr	r3, [pc, #148]	; (800061c <main+0x10c>)
 8000586:	601a      	str	r2, [r3, #0]

  /* definition and creation of task_sb_read */
  const osThreadAttr_t task_sb_read_attributes = {
 8000588:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800058c:	2224      	movs	r2, #36	; 0x24
 800058e:	2100      	movs	r1, #0
 8000590:	4618      	mov	r0, r3
 8000592:	f004 fc4a 	bl	8004e2a <memset>
 8000596:	4b22      	ldr	r3, [pc, #136]	; (8000620 <main+0x110>)
 8000598:	62bb      	str	r3, [r7, #40]	; 0x28
 800059a:	4b22      	ldr	r3, [pc, #136]	; (8000624 <main+0x114>)
 800059c:	633b      	str	r3, [r7, #48]	; 0x30
 800059e:	235c      	movs	r3, #92	; 0x5c
 80005a0:	637b      	str	r3, [r7, #52]	; 0x34
 80005a2:	4b21      	ldr	r3, [pc, #132]	; (8000628 <main+0x118>)
 80005a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80005a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80005ac:	2318      	movs	r3, #24
 80005ae:	643b      	str	r3, [r7, #64]	; 0x40
    .stack_size = sizeof(task_sb_readBuffer),
    .cb_mem = &task_sb_readControlBlock,
    .cb_size = sizeof(task_sb_readControlBlock),
    .priority = (osPriority_t) osPriorityNormal,
  };
  task_sb_readHandle = osThreadNew(vTaskSbRead, NULL, &task_sb_read_attributes);
 80005b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005b4:	461a      	mov	r2, r3
 80005b6:	2100      	movs	r1, #0
 80005b8:	481c      	ldr	r0, [pc, #112]	; (800062c <main+0x11c>)
 80005ba:	f001 fa9d 	bl	8001af8 <osThreadNew>
 80005be:	4602      	mov	r2, r0
 80005c0:	4b1b      	ldr	r3, [pc, #108]	; (8000630 <main+0x120>)
 80005c2:	601a      	str	r2, [r3, #0]

  /* definition and creation of task_gps_read */
  const osThreadAttr_t task_gps_read_attributes = {
 80005c4:	1d3b      	adds	r3, r7, #4
 80005c6:	2224      	movs	r2, #36	; 0x24
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f004 fc2d 	bl	8004e2a <memset>
 80005d0:	4b18      	ldr	r3, [pc, #96]	; (8000634 <main+0x124>)
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	4b18      	ldr	r3, [pc, #96]	; (8000638 <main+0x128>)
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	235c      	movs	r3, #92	; 0x5c
 80005da:	613b      	str	r3, [r7, #16]
 80005dc:	4b17      	ldr	r3, [pc, #92]	; (800063c <main+0x12c>)
 80005de:	617b      	str	r3, [r7, #20]
 80005e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005e4:	61bb      	str	r3, [r7, #24]
 80005e6:	2318      	movs	r3, #24
 80005e8:	61fb      	str	r3, [r7, #28]
    .stack_size = sizeof(task_gps_readBuffer),
    .cb_mem = &task_gps_readControlBlock,
    .cb_size = sizeof(task_gps_readControlBlock),
    .priority = (osPriority_t) osPriorityNormal,
  };
  task_gps_readHandle = osThreadNew(vTaskGpsRead, NULL, &task_gps_read_attributes);
 80005ea:	1d3b      	adds	r3, r7, #4
 80005ec:	461a      	mov	r2, r3
 80005ee:	2100      	movs	r1, #0
 80005f0:	4813      	ldr	r0, [pc, #76]	; (8000640 <main+0x130>)
 80005f2:	f001 fa81 	bl	8001af8 <osThreadNew>
 80005f6:	4602      	mov	r2, r0
 80005f8:	4b12      	ldr	r3, [pc, #72]	; (8000644 <main+0x134>)
 80005fa:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005fc:	f001 fa48 	bl	8001a90 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000600:	e7fe      	b.n	8000600 <main+0xf0>
 8000602:	bf00      	nop
 8000604:	08004e8c 	.word	0x08004e8c
 8000608:	200069b8 	.word	0x200069b8
 800060c:	08004ea8 	.word	0x08004ea8
 8000610:	20006a8c 	.word	0x20006a8c
 8000614:	08004e54 	.word	0x08004e54
 8000618:	08000701 	.word	0x08000701
 800061c:	200049b4 	.word	0x200049b4
 8000620:	08004e60 	.word	0x08004e60
 8000624:	200069bc 	.word	0x200069bc
 8000628:	20006a90 	.word	0x20006a90
 800062c:	08000949 	.word	0x08000949
 8000630:	20006a88 	.word	0x20006a88
 8000634:	08004e70 	.word	0x08004e70
 8000638:	20004930 	.word	0x20004930
 800063c:	200049b8 	.word	0x200049b8
 8000640:	080008f5 	.word	0x080008f5
 8000644:	20008a90 	.word	0x20008a90

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b094      	sub	sp, #80	; 0x50
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 0320 	add.w	r3, r7, #32
 8000652:	2230      	movs	r2, #48	; 0x30
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f004 fbe7 	bl	8004e2a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	f107 030c 	add.w	r3, r7, #12
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800066c:	4b22      	ldr	r3, [pc, #136]	; (80006f8 <SystemClock_Config+0xb0>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000670:	4a21      	ldr	r2, [pc, #132]	; (80006f8 <SystemClock_Config+0xb0>)
 8000672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000676:	6413      	str	r3, [r2, #64]	; 0x40
 8000678:	4b1f      	ldr	r3, [pc, #124]	; (80006f8 <SystemClock_Config+0xb0>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000684:	4b1d      	ldr	r3, [pc, #116]	; (80006fc <SystemClock_Config+0xb4>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800068c:	4a1b      	ldr	r2, [pc, #108]	; (80006fc <SystemClock_Config+0xb4>)
 800068e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000692:	6013      	str	r3, [r2, #0]
 8000694:	4b19      	ldr	r3, [pc, #100]	; (80006fc <SystemClock_Config+0xb4>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a0:	2302      	movs	r3, #2
 80006a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a4:	2301      	movs	r3, #1
 80006a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a8:	2310      	movs	r3, #16
 80006aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b0:	f107 0320 	add.w	r3, r7, #32
 80006b4:	4618      	mov	r0, r3
 80006b6:	f000 faf5 	bl	8000ca4 <HAL_RCC_OscConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80006c0:	f000 f838 	bl	8000734 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c4:	230f      	movs	r3, #15
 80006c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006c8:	2300      	movs	r3, #0
 80006ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f000 fd50 	bl	8001184 <HAL_RCC_ClockConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006ea:	f000 f823 	bl	8000734 <Error_Handler>
  }
}
 80006ee:	bf00      	nop
 80006f0:	3750      	adds	r7, #80	; 0x50
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40023800 	.word	0x40023800
 80006fc:	40007000 	.word	0x40007000

08000700 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000708:	2001      	movs	r0, #1
 800070a:	f001 fa9f 	bl	8001c4c <osDelay>
 800070e:	e7fb      	b.n	8000708 <StartDefaultTask+0x8>

08000710 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a04      	ldr	r2, [pc, #16]	; (8000730 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800071e:	4293      	cmp	r3, r2
 8000720:	d101      	bne.n	8000726 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000722:	f000 f9bd 	bl	8000aa0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000726:	bf00      	nop
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40010000 	.word	0x40010000

08000734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000738:	bf00      	nop
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
	...

08000744 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800074a:	4b11      	ldr	r3, [pc, #68]	; (8000790 <HAL_MspInit+0x4c>)
 800074c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074e:	4a10      	ldr	r2, [pc, #64]	; (8000790 <HAL_MspInit+0x4c>)
 8000750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000754:	6413      	str	r3, [r2, #64]	; 0x40
 8000756:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <HAL_MspInit+0x4c>)
 8000758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000762:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <HAL_MspInit+0x4c>)
 8000764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000766:	4a0a      	ldr	r2, [pc, #40]	; (8000790 <HAL_MspInit+0x4c>)
 8000768:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800076c:	6453      	str	r3, [r2, #68]	; 0x44
 800076e:	4b08      	ldr	r3, [pc, #32]	; (8000790 <HAL_MspInit+0x4c>)
 8000770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000772:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000776:	603b      	str	r3, [r7, #0]
 8000778:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800077a:	2200      	movs	r2, #0
 800077c:	210f      	movs	r1, #15
 800077e:	f06f 0001 	mvn.w	r0, #1
 8000782:	f000 fa65 	bl	8000c50 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000786:	bf00      	nop
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40023800 	.word	0x40023800

08000794 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b08c      	sub	sp, #48	; 0x30
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800079c:	2300      	movs	r3, #0
 800079e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 80007a4:	2200      	movs	r2, #0
 80007a6:	6879      	ldr	r1, [r7, #4]
 80007a8:	2019      	movs	r0, #25
 80007aa:	f000 fa51 	bl	8000c50 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 80007ae:	2019      	movs	r0, #25
 80007b0:	f000 fa6a 	bl	8000c88 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80007b4:	4b1e      	ldr	r3, [pc, #120]	; (8000830 <HAL_InitTick+0x9c>)
 80007b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007b8:	4a1d      	ldr	r2, [pc, #116]	; (8000830 <HAL_InitTick+0x9c>)
 80007ba:	f043 0301 	orr.w	r3, r3, #1
 80007be:	6453      	str	r3, [r2, #68]	; 0x44
 80007c0:	4b1b      	ldr	r3, [pc, #108]	; (8000830 <HAL_InitTick+0x9c>)
 80007c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007c4:	f003 0301 	and.w	r3, r3, #1
 80007c8:	60fb      	str	r3, [r7, #12]
 80007ca:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007cc:	f107 0210 	add.w	r2, r7, #16
 80007d0:	f107 0314 	add.w	r3, r7, #20
 80007d4:	4611      	mov	r1, r2
 80007d6:	4618      	mov	r0, r3
 80007d8:	f000 fe8e 	bl	80014f8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80007dc:	f000 fe78 	bl	80014d0 <HAL_RCC_GetPCLK2Freq>
 80007e0:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80007e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007e4:	4a13      	ldr	r2, [pc, #76]	; (8000834 <HAL_InitTick+0xa0>)
 80007e6:	fba2 2303 	umull	r2, r3, r2, r3
 80007ea:	0c9b      	lsrs	r3, r3, #18
 80007ec:	3b01      	subs	r3, #1
 80007ee:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80007f0:	4b11      	ldr	r3, [pc, #68]	; (8000838 <HAL_InitTick+0xa4>)
 80007f2:	4a12      	ldr	r2, [pc, #72]	; (800083c <HAL_InitTick+0xa8>)
 80007f4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80007f6:	4b10      	ldr	r3, [pc, #64]	; (8000838 <HAL_InitTick+0xa4>)
 80007f8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007fc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80007fe:	4a0e      	ldr	r2, [pc, #56]	; (8000838 <HAL_InitTick+0xa4>)
 8000800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000802:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000804:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <HAL_InitTick+0xa4>)
 8000806:	2200      	movs	r2, #0
 8000808:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800080a:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <HAL_InitTick+0xa4>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000810:	4809      	ldr	r0, [pc, #36]	; (8000838 <HAL_InitTick+0xa4>)
 8000812:	f000 fea3 	bl	800155c <HAL_TIM_Base_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d104      	bne.n	8000826 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800081c:	4806      	ldr	r0, [pc, #24]	; (8000838 <HAL_InitTick+0xa4>)
 800081e:	f000 fed3 	bl	80015c8 <HAL_TIM_Base_Start_IT>
 8000822:	4603      	mov	r3, r0
 8000824:	e000      	b.n	8000828 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000826:	2301      	movs	r3, #1
}
 8000828:	4618      	mov	r0, r3
 800082a:	3730      	adds	r7, #48	; 0x30
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40023800 	.word	0x40023800
 8000834:	431bde83 	.word	0x431bde83
 8000838:	20008a94 	.word	0x20008a94
 800083c:	40010000 	.word	0x40010000

08000840 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr

0800084e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800084e:	b480      	push	{r7}
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000852:	e7fe      	b.n	8000852 <HardFault_Handler+0x4>

08000854 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000858:	e7fe      	b.n	8000858 <MemManage_Handler+0x4>

0800085a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800085e:	e7fe      	b.n	800085e <BusFault_Handler+0x4>

08000860 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000864:	e7fe      	b.n	8000864 <UsageFault_Handler+0x4>

08000866 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000866:	b480      	push	{r7}
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800086a:	bf00      	nop
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr

08000874 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000878:	4802      	ldr	r0, [pc, #8]	; (8000884 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800087a:	f000 fecf 	bl	800161c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20008a94 	.word	0x20008a94

08000888 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800088c:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <SystemInit+0x5c>)
 800088e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000892:	4a14      	ldr	r2, [pc, #80]	; (80008e4 <SystemInit+0x5c>)
 8000894:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000898:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800089c:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <SystemInit+0x60>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a11      	ldr	r2, [pc, #68]	; (80008e8 <SystemInit+0x60>)
 80008a2:	f043 0301 	orr.w	r3, r3, #1
 80008a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80008a8:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <SystemInit+0x60>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <SystemInit+0x60>)
 80008b0:	681a      	ldr	r2, [r3, #0]
 80008b2:	490d      	ldr	r1, [pc, #52]	; (80008e8 <SystemInit+0x60>)
 80008b4:	4b0d      	ldr	r3, [pc, #52]	; (80008ec <SystemInit+0x64>)
 80008b6:	4013      	ands	r3, r2
 80008b8:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <SystemInit+0x60>)
 80008bc:	4a0c      	ldr	r2, [pc, #48]	; (80008f0 <SystemInit+0x68>)
 80008be:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80008c0:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <SystemInit+0x60>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a08      	ldr	r2, [pc, #32]	; (80008e8 <SystemInit+0x60>)
 80008c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008ca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <SystemInit+0x60>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80008d2:	4b04      	ldr	r3, [pc, #16]	; (80008e4 <SystemInit+0x5c>)
 80008d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008d8:	609a      	str	r2, [r3, #8]
#endif
}
 80008da:	bf00      	nop
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr
 80008e4:	e000ed00 	.word	0xe000ed00
 80008e8:	40023800 	.word	0x40023800
 80008ec:	fef6ffff 	.word	0xfef6ffff
 80008f0:	24003010 	.word	0x24003010

080008f4 <vTaskGpsRead>:
 * @brief Function implementing the task_gps_read thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_vTaskGpsRead */
void vTaskGpsRead(void *argument) {
 80008f4:	b590      	push	{r4, r7, lr}
 80008f6:	b08b      	sub	sp, #44	; 0x2c
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
	for (;;) {
		/* acquire data from gps1 */

		/* acquire data from gps2 */

		if (osMutexAcquire(gps_mutex, GPS_MUTEX_TIMEOUT) == osOK) {
 80008fc:	4b0f      	ldr	r3, [pc, #60]	; (800093c <vTaskGpsRead+0x48>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	211e      	movs	r1, #30
 8000902:	4618      	mov	r0, r3
 8000904:	f001 fa6a 	bl	8001ddc <osMutexAcquire>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d112      	bne.n	8000934 <vTaskGpsRead+0x40>
			gps1 = rcv_gps1;
 800090e:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <vTaskGpsRead+0x4c>)
 8000910:	461c      	mov	r4, r3
 8000912:	f107 0318 	add.w	r3, r7, #24
 8000916:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000918:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			gps2 = rcv_gps2;
 800091c:	4b09      	ldr	r3, [pc, #36]	; (8000944 <vTaskGpsRead+0x50>)
 800091e:	461c      	mov	r4, r3
 8000920:	f107 0308 	add.w	r3, r7, #8
 8000924:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000926:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexRelease(gps_mutex);
 800092a:	4b04      	ldr	r3, [pc, #16]	; (800093c <vTaskGpsRead+0x48>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4618      	mov	r0, r3
 8000930:	f001 fab2 	bl	8001e98 <osMutexRelease>
		}

		osDelay(1);
 8000934:	2001      	movs	r0, #1
 8000936:	f001 f989 	bl	8001c4c <osDelay>
		if (osMutexAcquire(gps_mutex, GPS_MUTEX_TIMEOUT) == osOK) {
 800093a:	e7df      	b.n	80008fc <vTaskGpsRead+0x8>
 800093c:	20006a8c 	.word	0x20006a8c
 8000940:	20006a50 	.word	0x20006a50
 8000944:	20006a40 	.word	0x20006a40

08000948 <vTaskSbRead>:
 * @brief Function implementing the task_sb_read thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_vTaskSbRead */
void vTaskSbRead(void *argument) {
 8000948:	b5b0      	push	{r4, r5, r7, lr}
 800094a:	b0be      	sub	sp, #248	; 0xf8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
	baro_data b1, b2, b3;
	imu_data i1, i2, i3;
	sb_data rcv_sb1, rcv_sb2, rcv_sb3;
	for (;;) {
		/* acquire data from sb1 */
		rcv_sb1.imu = i1;
 8000950:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000954:	f107 05b8 	add.w	r5, r7, #184	; 0xb8
 8000958:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800095a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800095c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000960:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		rcv_sb1.baro = b1;
 8000964:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000968:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 800096c:	ca07      	ldmia	r2, {r0, r1, r2}
 800096e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		/* acquire data from sb2 */
		rcv_sb2.imu = i2;
 8000972:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8000976:	f107 059c 	add.w	r5, r7, #156	; 0x9c
 800097a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800097c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800097e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000982:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		rcv_sb2.baro = b2;
 8000986:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800098a:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 800098e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000990:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		/* acquire data from sb3 */
		rcv_sb3.imu = i3;
 8000994:	f107 0408 	add.w	r4, r7, #8
 8000998:	f107 0580 	add.w	r5, r7, #128	; 0x80
 800099c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800099e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		rcv_sb3.baro = b3;
 80009a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ac:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 80009b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80009b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

		if (osMutexAcquire(sb_mutex, SB_MUTEX_TIMEOUT) == osOK) {
 80009b6:	4b1b      	ldr	r3, [pc, #108]	; (8000a24 <vTaskSbRead+0xdc>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	211e      	movs	r1, #30
 80009bc:	4618      	mov	r0, r3
 80009be:	f001 fa0d 	bl	8001ddc <osMutexAcquire>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d128      	bne.n	8000a1a <vTaskSbRead+0xd2>
			sb1 = rcv_sb1;
 80009c8:	4b17      	ldr	r3, [pc, #92]	; (8000a28 <vTaskSbRead+0xe0>)
 80009ca:	461d      	mov	r5, r3
 80009cc:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80009d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009d8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80009dc:	e885 0003 	stmia.w	r5, {r0, r1}
			sb2 = rcv_sb2;
 80009e0:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <vTaskSbRead+0xe4>)
 80009e2:	461d      	mov	r5, r3
 80009e4:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80009e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009f0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80009f4:	e885 0003 	stmia.w	r5, {r0, r1}
			sb3 = rcv_sb3;
 80009f8:	4b0d      	ldr	r3, [pc, #52]	; (8000a30 <vTaskSbRead+0xe8>)
 80009fa:	461d      	mov	r5, r3
 80009fc:	f107 0408 	add.w	r4, r7, #8
 8000a00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a08:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000a0c:	e885 0003 	stmia.w	r5, {r0, r1}
			osMutexRelease(sb_mutex);
 8000a10:	4b04      	ldr	r3, [pc, #16]	; (8000a24 <vTaskSbRead+0xdc>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4618      	mov	r0, r3
 8000a16:	f001 fa3f 	bl	8001e98 <osMutexRelease>
		}
		osDelay(1);
 8000a1a:	2001      	movs	r0, #1
 8000a1c:	f001 f916 	bl	8001c4c <osDelay>
		rcv_sb1.imu = i1;
 8000a20:	e796      	b.n	8000950 <vTaskSbRead+0x8>
 8000a22:	bf00      	nop
 8000a24:	200069b8 	.word	0x200069b8
 8000a28:	20006a60 	.word	0x20006a60
 8000a2c:	20006a18 	.word	0x20006a18
 8000a30:	2000498c 	.word	0x2000498c

08000a34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a6c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a38:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a3a:	e003      	b.n	8000a44 <LoopCopyDataInit>

08000a3c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a3c:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a3e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a40:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a42:	3104      	adds	r1, #4

08000a44 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a44:	480b      	ldr	r0, [pc, #44]	; (8000a74 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000a46:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000a48:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a4a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a4c:	d3f6      	bcc.n	8000a3c <CopyDataInit>
  ldr  r2, =_sbss
 8000a4e:	4a0b      	ldr	r2, [pc, #44]	; (8000a7c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a50:	e002      	b.n	8000a58 <LoopFillZerobss>

08000a52 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a52:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000a54:	f842 3b04 	str.w	r3, [r2], #4

08000a58 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000a58:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000a5a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000a5c:	d3f9      	bcc.n	8000a52 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a5e:	f7ff ff13 	bl	8000888 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a62:	f004 f9b3 	bl	8004dcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a66:	f7ff fd53 	bl	8000510 <main>
  bx  lr    
 8000a6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a6c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8000a70:	08004ef8 	.word	0x08004ef8
  ldr  r0, =_sdata
 8000a74:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000a78:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000a7c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000a80:	20008b18 	.word	0x20008b18

08000a84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a84:	e7fe      	b.n	8000a84 <ADC_IRQHandler>

08000a86 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a86:	b580      	push	{r7, lr}
 8000a88:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a8a:	2003      	movs	r0, #3
 8000a8c:	f000 f8d5 	bl	8000c3a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a90:	2000      	movs	r0, #0
 8000a92:	f7ff fe7f 	bl	8000794 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000a96:	f7ff fe55 	bl	8000744 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000a9a:	2300      	movs	r3, #0
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aa4:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <HAL_IncTick+0x20>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <HAL_IncTick+0x24>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4413      	add	r3, r2
 8000ab0:	4a04      	ldr	r2, [pc, #16]	; (8000ac4 <HAL_IncTick+0x24>)
 8000ab2:	6013      	str	r3, [r2, #0]
}
 8000ab4:	bf00      	nop
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	20000004 	.word	0x20000004
 8000ac4:	20008ad4 	.word	0x20008ad4

08000ac8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  return uwTick;
 8000acc:	4b03      	ldr	r3, [pc, #12]	; (8000adc <HAL_GetTick+0x14>)
 8000ace:	681b      	ldr	r3, [r3, #0]
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	20008ad4 	.word	0x20008ad4

08000ae0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	f003 0307 	and.w	r3, r3, #7
 8000aee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000af0:	4b0b      	ldr	r3, [pc, #44]	; (8000b20 <__NVIC_SetPriorityGrouping+0x40>)
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000af6:	68ba      	ldr	r2, [r7, #8]
 8000af8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000afc:	4013      	ands	r3, r2
 8000afe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <__NVIC_SetPriorityGrouping+0x44>)
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b0e:	4a04      	ldr	r2, [pc, #16]	; (8000b20 <__NVIC_SetPriorityGrouping+0x40>)
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	60d3      	str	r3, [r2, #12]
}
 8000b14:	bf00      	nop
 8000b16:	3714      	adds	r7, #20
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	e000ed00 	.word	0xe000ed00
 8000b24:	05fa0000 	.word	0x05fa0000

08000b28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b2c:	4b04      	ldr	r3, [pc, #16]	; (8000b40 <__NVIC_GetPriorityGrouping+0x18>)
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	0a1b      	lsrs	r3, r3, #8
 8000b32:	f003 0307 	and.w	r3, r3, #7
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	db0b      	blt.n	8000b6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b56:	79fb      	ldrb	r3, [r7, #7]
 8000b58:	f003 021f 	and.w	r2, r3, #31
 8000b5c:	4907      	ldr	r1, [pc, #28]	; (8000b7c <__NVIC_EnableIRQ+0x38>)
 8000b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b62:	095b      	lsrs	r3, r3, #5
 8000b64:	2001      	movs	r0, #1
 8000b66:	fa00 f202 	lsl.w	r2, r0, r2
 8000b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b6e:	bf00      	nop
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	e000e100 	.word	0xe000e100

08000b80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	6039      	str	r1, [r7, #0]
 8000b8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	db0a      	blt.n	8000baa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	b2da      	uxtb	r2, r3
 8000b98:	490c      	ldr	r1, [pc, #48]	; (8000bcc <__NVIC_SetPriority+0x4c>)
 8000b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9e:	0112      	lsls	r2, r2, #4
 8000ba0:	b2d2      	uxtb	r2, r2
 8000ba2:	440b      	add	r3, r1
 8000ba4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ba8:	e00a      	b.n	8000bc0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	b2da      	uxtb	r2, r3
 8000bae:	4908      	ldr	r1, [pc, #32]	; (8000bd0 <__NVIC_SetPriority+0x50>)
 8000bb0:	79fb      	ldrb	r3, [r7, #7]
 8000bb2:	f003 030f 	and.w	r3, r3, #15
 8000bb6:	3b04      	subs	r3, #4
 8000bb8:	0112      	lsls	r2, r2, #4
 8000bba:	b2d2      	uxtb	r2, r2
 8000bbc:	440b      	add	r3, r1
 8000bbe:	761a      	strb	r2, [r3, #24]
}
 8000bc0:	bf00      	nop
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	e000e100 	.word	0xe000e100
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b089      	sub	sp, #36	; 0x24
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	60f8      	str	r0, [r7, #12]
 8000bdc:	60b9      	str	r1, [r7, #8]
 8000bde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	f003 0307 	and.w	r3, r3, #7
 8000be6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000be8:	69fb      	ldr	r3, [r7, #28]
 8000bea:	f1c3 0307 	rsb	r3, r3, #7
 8000bee:	2b04      	cmp	r3, #4
 8000bf0:	bf28      	it	cs
 8000bf2:	2304      	movcs	r3, #4
 8000bf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	3304      	adds	r3, #4
 8000bfa:	2b06      	cmp	r3, #6
 8000bfc:	d902      	bls.n	8000c04 <NVIC_EncodePriority+0x30>
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	3b03      	subs	r3, #3
 8000c02:	e000      	b.n	8000c06 <NVIC_EncodePriority+0x32>
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c08:	f04f 32ff 	mov.w	r2, #4294967295
 8000c0c:	69bb      	ldr	r3, [r7, #24]
 8000c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c12:	43da      	mvns	r2, r3
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	401a      	ands	r2, r3
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	fa01 f303 	lsl.w	r3, r1, r3
 8000c26:	43d9      	mvns	r1, r3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c2c:	4313      	orrs	r3, r2
         );
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3724      	adds	r7, #36	; 0x24
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr

08000c3a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b082      	sub	sp, #8
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c42:	6878      	ldr	r0, [r7, #4]
 8000c44:	f7ff ff4c 	bl	8000ae0 <__NVIC_SetPriorityGrouping>
}
 8000c48:	bf00      	nop
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
 8000c5c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c62:	f7ff ff61 	bl	8000b28 <__NVIC_GetPriorityGrouping>
 8000c66:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c68:	687a      	ldr	r2, [r7, #4]
 8000c6a:	68b9      	ldr	r1, [r7, #8]
 8000c6c:	6978      	ldr	r0, [r7, #20]
 8000c6e:	f7ff ffb1 	bl	8000bd4 <NVIC_EncodePriority>
 8000c72:	4602      	mov	r2, r0
 8000c74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c78:	4611      	mov	r1, r2
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f7ff ff80 	bl	8000b80 <__NVIC_SetPriority>
}
 8000c80:	bf00      	nop
 8000c82:	3718      	adds	r7, #24
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff ff54 	bl	8000b44 <__NVIC_EnableIRQ>
}
 8000c9c:	bf00      	nop
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b086      	sub	sp, #24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8000cac:	2300      	movs	r3, #0
 8000cae:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d101      	bne.n	8000cba <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e25c      	b.n	8001174 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f000 8087 	beq.w	8000dd6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000cc8:	4b96      	ldr	r3, [pc, #600]	; (8000f24 <HAL_RCC_OscConfig+0x280>)
 8000cca:	689b      	ldr	r3, [r3, #8]
 8000ccc:	f003 030c 	and.w	r3, r3, #12
 8000cd0:	2b04      	cmp	r3, #4
 8000cd2:	d00c      	beq.n	8000cee <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000cd4:	4b93      	ldr	r3, [pc, #588]	; (8000f24 <HAL_RCC_OscConfig+0x280>)
 8000cd6:	689b      	ldr	r3, [r3, #8]
 8000cd8:	f003 030c 	and.w	r3, r3, #12
 8000cdc:	2b08      	cmp	r3, #8
 8000cde:	d112      	bne.n	8000d06 <HAL_RCC_OscConfig+0x62>
 8000ce0:	4b90      	ldr	r3, [pc, #576]	; (8000f24 <HAL_RCC_OscConfig+0x280>)
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ce8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000cec:	d10b      	bne.n	8000d06 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cee:	4b8d      	ldr	r3, [pc, #564]	; (8000f24 <HAL_RCC_OscConfig+0x280>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d06c      	beq.n	8000dd4 <HAL_RCC_OscConfig+0x130>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d168      	bne.n	8000dd4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	e236      	b.n	8001174 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d0e:	d106      	bne.n	8000d1e <HAL_RCC_OscConfig+0x7a>
 8000d10:	4b84      	ldr	r3, [pc, #528]	; (8000f24 <HAL_RCC_OscConfig+0x280>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a83      	ldr	r2, [pc, #524]	; (8000f24 <HAL_RCC_OscConfig+0x280>)
 8000d16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d1a:	6013      	str	r3, [r2, #0]
 8000d1c:	e02e      	b.n	8000d7c <HAL_RCC_OscConfig+0xd8>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d10c      	bne.n	8000d40 <HAL_RCC_OscConfig+0x9c>
 8000d26:	4b7f      	ldr	r3, [pc, #508]	; (8000f24 <HAL_RCC_OscConfig+0x280>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a7e      	ldr	r2, [pc, #504]	; (8000f24 <HAL_RCC_OscConfig+0x280>)
 8000d2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d30:	6013      	str	r3, [r2, #0]
 8000d32:	4b7c      	ldr	r3, [pc, #496]	; (8000f24 <HAL_RCC_OscConfig+0x280>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a7b      	ldr	r2, [pc, #492]	; (8000f24 <HAL_RCC_OscConfig+0x280>)
 8000d38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d3c:	6013      	str	r3, [r2, #0]
 8000d3e:	e01d      	b.n	8000d7c <HAL_RCC_OscConfig+0xd8>
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d48:	d10c      	bne.n	8000d64 <HAL_RCC_OscConfig+0xc0>
 8000d4a:	4b76      	ldr	r3, [pc, #472]	; (8000f24 <HAL_RCC_OscConfig+0x280>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a75      	ldr	r2, [pc, #468]	; (8000f24 <HAL_RCC_OscConfig+0x280>)
 8000d50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d54:	6013      	str	r3, [r2, #0]
 8000d56:	4b73      	ldr	r3, [pc, #460]	; (8000f24 <HAL_RCC_OscConfig+0x280>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a72      	ldr	r2, [pc, #456]	; (8000f24 <HAL_RCC_OscConfig+0x280>)
 8000d5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d60:	6013      	str	r3, [r2, #0]
 8000d62:	e00b      	b.n	8000d7c <HAL_RCC_OscConfig+0xd8>
 8000d64:	4b6f      	ldr	r3, [pc, #444]	; (8000f24 <HAL_RCC_OscConfig+0x280>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a6e      	ldr	r2, [pc, #440]	; (8000f24 <HAL_RCC_OscConfig+0x280>)
 8000d6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d6e:	6013      	str	r3, [r2, #0]
 8000d70:	4b6c      	ldr	r3, [pc, #432]	; (8000f24 <HAL_RCC_OscConfig+0x280>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a6b      	ldr	r2, [pc, #428]	; (8000f24 <HAL_RCC_OscConfig+0x280>)
 8000d76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d013      	beq.n	8000dac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d84:	f7ff fea0 	bl	8000ac8 <HAL_GetTick>
 8000d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d8a:	e008      	b.n	8000d9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d8c:	f7ff fe9c 	bl	8000ac8 <HAL_GetTick>
 8000d90:	4602      	mov	r2, r0
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	2b64      	cmp	r3, #100	; 0x64
 8000d98:	d901      	bls.n	8000d9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	e1ea      	b.n	8001174 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d9e:	4b61      	ldr	r3, [pc, #388]	; (8000f24 <HAL_RCC_OscConfig+0x280>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d0f0      	beq.n	8000d8c <HAL_RCC_OscConfig+0xe8>
 8000daa:	e014      	b.n	8000dd6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dac:	f7ff fe8c 	bl	8000ac8 <HAL_GetTick>
 8000db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000db2:	e008      	b.n	8000dc6 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000db4:	f7ff fe88 	bl	8000ac8 <HAL_GetTick>
 8000db8:	4602      	mov	r2, r0
 8000dba:	693b      	ldr	r3, [r7, #16]
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	2b64      	cmp	r3, #100	; 0x64
 8000dc0:	d901      	bls.n	8000dc6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	e1d6      	b.n	8001174 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dc6:	4b57      	ldr	r3, [pc, #348]	; (8000f24 <HAL_RCC_OscConfig+0x280>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d1f0      	bne.n	8000db4 <HAL_RCC_OscConfig+0x110>
 8000dd2:	e000      	b.n	8000dd6 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f003 0302 	and.w	r3, r3, #2
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d069      	beq.n	8000eb6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000de2:	4b50      	ldr	r3, [pc, #320]	; (8000f24 <HAL_RCC_OscConfig+0x280>)
 8000de4:	689b      	ldr	r3, [r3, #8]
 8000de6:	f003 030c 	and.w	r3, r3, #12
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d00b      	beq.n	8000e06 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000dee:	4b4d      	ldr	r3, [pc, #308]	; (8000f24 <HAL_RCC_OscConfig+0x280>)
 8000df0:	689b      	ldr	r3, [r3, #8]
 8000df2:	f003 030c 	and.w	r3, r3, #12
 8000df6:	2b08      	cmp	r3, #8
 8000df8:	d11c      	bne.n	8000e34 <HAL_RCC_OscConfig+0x190>
 8000dfa:	4b4a      	ldr	r3, [pc, #296]	; (8000f24 <HAL_RCC_OscConfig+0x280>)
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d116      	bne.n	8000e34 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e06:	4b47      	ldr	r3, [pc, #284]	; (8000f24 <HAL_RCC_OscConfig+0x280>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f003 0302 	and.w	r3, r3, #2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d005      	beq.n	8000e1e <HAL_RCC_OscConfig+0x17a>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	68db      	ldr	r3, [r3, #12]
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d001      	beq.n	8000e1e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e1aa      	b.n	8001174 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e1e:	4b41      	ldr	r3, [pc, #260]	; (8000f24 <HAL_RCC_OscConfig+0x280>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	691b      	ldr	r3, [r3, #16]
 8000e2a:	00db      	lsls	r3, r3, #3
 8000e2c:	493d      	ldr	r1, [pc, #244]	; (8000f24 <HAL_RCC_OscConfig+0x280>)
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e32:	e040      	b.n	8000eb6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d023      	beq.n	8000e84 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e3c:	4b39      	ldr	r3, [pc, #228]	; (8000f24 <HAL_RCC_OscConfig+0x280>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a38      	ldr	r2, [pc, #224]	; (8000f24 <HAL_RCC_OscConfig+0x280>)
 8000e42:	f043 0301 	orr.w	r3, r3, #1
 8000e46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e48:	f7ff fe3e 	bl	8000ac8 <HAL_GetTick>
 8000e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e4e:	e008      	b.n	8000e62 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e50:	f7ff fe3a 	bl	8000ac8 <HAL_GetTick>
 8000e54:	4602      	mov	r2, r0
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	2b02      	cmp	r3, #2
 8000e5c:	d901      	bls.n	8000e62 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	e188      	b.n	8001174 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e62:	4b30      	ldr	r3, [pc, #192]	; (8000f24 <HAL_RCC_OscConfig+0x280>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f003 0302 	and.w	r3, r3, #2
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d0f0      	beq.n	8000e50 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e6e:	4b2d      	ldr	r3, [pc, #180]	; (8000f24 <HAL_RCC_OscConfig+0x280>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	691b      	ldr	r3, [r3, #16]
 8000e7a:	00db      	lsls	r3, r3, #3
 8000e7c:	4929      	ldr	r1, [pc, #164]	; (8000f24 <HAL_RCC_OscConfig+0x280>)
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	600b      	str	r3, [r1, #0]
 8000e82:	e018      	b.n	8000eb6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e84:	4b27      	ldr	r3, [pc, #156]	; (8000f24 <HAL_RCC_OscConfig+0x280>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a26      	ldr	r2, [pc, #152]	; (8000f24 <HAL_RCC_OscConfig+0x280>)
 8000e8a:	f023 0301 	bic.w	r3, r3, #1
 8000e8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e90:	f7ff fe1a 	bl	8000ac8 <HAL_GetTick>
 8000e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e96:	e008      	b.n	8000eaa <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e98:	f7ff fe16 	bl	8000ac8 <HAL_GetTick>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	2b02      	cmp	r3, #2
 8000ea4:	d901      	bls.n	8000eaa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	e164      	b.n	8001174 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eaa:	4b1e      	ldr	r3, [pc, #120]	; (8000f24 <HAL_RCC_OscConfig+0x280>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f003 0302 	and.w	r3, r3, #2
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d1f0      	bne.n	8000e98 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f003 0308 	and.w	r3, r3, #8
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d038      	beq.n	8000f34 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	695b      	ldr	r3, [r3, #20]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d019      	beq.n	8000efe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000eca:	4b16      	ldr	r3, [pc, #88]	; (8000f24 <HAL_RCC_OscConfig+0x280>)
 8000ecc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000ece:	4a15      	ldr	r2, [pc, #84]	; (8000f24 <HAL_RCC_OscConfig+0x280>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ed6:	f7ff fdf7 	bl	8000ac8 <HAL_GetTick>
 8000eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000edc:	e008      	b.n	8000ef0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ede:	f7ff fdf3 	bl	8000ac8 <HAL_GetTick>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	1ad3      	subs	r3, r2, r3
 8000ee8:	2b02      	cmp	r3, #2
 8000eea:	d901      	bls.n	8000ef0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000eec:	2303      	movs	r3, #3
 8000eee:	e141      	b.n	8001174 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <HAL_RCC_OscConfig+0x280>)
 8000ef2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000ef4:	f003 0302 	and.w	r3, r3, #2
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d0f0      	beq.n	8000ede <HAL_RCC_OscConfig+0x23a>
 8000efc:	e01a      	b.n	8000f34 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000efe:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <HAL_RCC_OscConfig+0x280>)
 8000f00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000f02:	4a08      	ldr	r2, [pc, #32]	; (8000f24 <HAL_RCC_OscConfig+0x280>)
 8000f04:	f023 0301 	bic.w	r3, r3, #1
 8000f08:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f0a:	f7ff fddd 	bl	8000ac8 <HAL_GetTick>
 8000f0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f10:	e00a      	b.n	8000f28 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f12:	f7ff fdd9 	bl	8000ac8 <HAL_GetTick>
 8000f16:	4602      	mov	r2, r0
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	1ad3      	subs	r3, r2, r3
 8000f1c:	2b02      	cmp	r3, #2
 8000f1e:	d903      	bls.n	8000f28 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8000f20:	2303      	movs	r3, #3
 8000f22:	e127      	b.n	8001174 <HAL_RCC_OscConfig+0x4d0>
 8000f24:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f28:	4b94      	ldr	r3, [pc, #592]	; (800117c <HAL_RCC_OscConfig+0x4d8>)
 8000f2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000f2c:	f003 0302 	and.w	r3, r3, #2
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d1ee      	bne.n	8000f12 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f003 0304 	and.w	r3, r3, #4
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	f000 80a4 	beq.w	800108a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f42:	4b8e      	ldr	r3, [pc, #568]	; (800117c <HAL_RCC_OscConfig+0x4d8>)
 8000f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d10d      	bne.n	8000f6a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f4e:	4b8b      	ldr	r3, [pc, #556]	; (800117c <HAL_RCC_OscConfig+0x4d8>)
 8000f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f52:	4a8a      	ldr	r2, [pc, #552]	; (800117c <HAL_RCC_OscConfig+0x4d8>)
 8000f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f58:	6413      	str	r3, [r2, #64]	; 0x40
 8000f5a:	4b88      	ldr	r3, [pc, #544]	; (800117c <HAL_RCC_OscConfig+0x4d8>)
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000f66:	2301      	movs	r3, #1
 8000f68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f6a:	4b85      	ldr	r3, [pc, #532]	; (8001180 <HAL_RCC_OscConfig+0x4dc>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d118      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8000f76:	4b82      	ldr	r3, [pc, #520]	; (8001180 <HAL_RCC_OscConfig+0x4dc>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a81      	ldr	r2, [pc, #516]	; (8001180 <HAL_RCC_OscConfig+0x4dc>)
 8000f7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f82:	f7ff fda1 	bl	8000ac8 <HAL_GetTick>
 8000f86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f88:	e008      	b.n	8000f9c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000f8a:	f7ff fd9d 	bl	8000ac8 <HAL_GetTick>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	1ad3      	subs	r3, r2, r3
 8000f94:	2b64      	cmp	r3, #100	; 0x64
 8000f96:	d901      	bls.n	8000f9c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	e0eb      	b.n	8001174 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f9c:	4b78      	ldr	r3, [pc, #480]	; (8001180 <HAL_RCC_OscConfig+0x4dc>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d0f0      	beq.n	8000f8a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	689b      	ldr	r3, [r3, #8]
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d106      	bne.n	8000fbe <HAL_RCC_OscConfig+0x31a>
 8000fb0:	4b72      	ldr	r3, [pc, #456]	; (800117c <HAL_RCC_OscConfig+0x4d8>)
 8000fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fb4:	4a71      	ldr	r2, [pc, #452]	; (800117c <HAL_RCC_OscConfig+0x4d8>)
 8000fb6:	f043 0301 	orr.w	r3, r3, #1
 8000fba:	6713      	str	r3, [r2, #112]	; 0x70
 8000fbc:	e02d      	b.n	800101a <HAL_RCC_OscConfig+0x376>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d10c      	bne.n	8000fe0 <HAL_RCC_OscConfig+0x33c>
 8000fc6:	4b6d      	ldr	r3, [pc, #436]	; (800117c <HAL_RCC_OscConfig+0x4d8>)
 8000fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fca:	4a6c      	ldr	r2, [pc, #432]	; (800117c <HAL_RCC_OscConfig+0x4d8>)
 8000fcc:	f023 0301 	bic.w	r3, r3, #1
 8000fd0:	6713      	str	r3, [r2, #112]	; 0x70
 8000fd2:	4b6a      	ldr	r3, [pc, #424]	; (800117c <HAL_RCC_OscConfig+0x4d8>)
 8000fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fd6:	4a69      	ldr	r2, [pc, #420]	; (800117c <HAL_RCC_OscConfig+0x4d8>)
 8000fd8:	f023 0304 	bic.w	r3, r3, #4
 8000fdc:	6713      	str	r3, [r2, #112]	; 0x70
 8000fde:	e01c      	b.n	800101a <HAL_RCC_OscConfig+0x376>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	2b05      	cmp	r3, #5
 8000fe6:	d10c      	bne.n	8001002 <HAL_RCC_OscConfig+0x35e>
 8000fe8:	4b64      	ldr	r3, [pc, #400]	; (800117c <HAL_RCC_OscConfig+0x4d8>)
 8000fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fec:	4a63      	ldr	r2, [pc, #396]	; (800117c <HAL_RCC_OscConfig+0x4d8>)
 8000fee:	f043 0304 	orr.w	r3, r3, #4
 8000ff2:	6713      	str	r3, [r2, #112]	; 0x70
 8000ff4:	4b61      	ldr	r3, [pc, #388]	; (800117c <HAL_RCC_OscConfig+0x4d8>)
 8000ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ff8:	4a60      	ldr	r2, [pc, #384]	; (800117c <HAL_RCC_OscConfig+0x4d8>)
 8000ffa:	f043 0301 	orr.w	r3, r3, #1
 8000ffe:	6713      	str	r3, [r2, #112]	; 0x70
 8001000:	e00b      	b.n	800101a <HAL_RCC_OscConfig+0x376>
 8001002:	4b5e      	ldr	r3, [pc, #376]	; (800117c <HAL_RCC_OscConfig+0x4d8>)
 8001004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001006:	4a5d      	ldr	r2, [pc, #372]	; (800117c <HAL_RCC_OscConfig+0x4d8>)
 8001008:	f023 0301 	bic.w	r3, r3, #1
 800100c:	6713      	str	r3, [r2, #112]	; 0x70
 800100e:	4b5b      	ldr	r3, [pc, #364]	; (800117c <HAL_RCC_OscConfig+0x4d8>)
 8001010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001012:	4a5a      	ldr	r2, [pc, #360]	; (800117c <HAL_RCC_OscConfig+0x4d8>)
 8001014:	f023 0304 	bic.w	r3, r3, #4
 8001018:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d015      	beq.n	800104e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001022:	f7ff fd51 	bl	8000ac8 <HAL_GetTick>
 8001026:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001028:	e00a      	b.n	8001040 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800102a:	f7ff fd4d 	bl	8000ac8 <HAL_GetTick>
 800102e:	4602      	mov	r2, r0
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	f241 3288 	movw	r2, #5000	; 0x1388
 8001038:	4293      	cmp	r3, r2
 800103a:	d901      	bls.n	8001040 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800103c:	2303      	movs	r3, #3
 800103e:	e099      	b.n	8001174 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001040:	4b4e      	ldr	r3, [pc, #312]	; (800117c <HAL_RCC_OscConfig+0x4d8>)
 8001042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001044:	f003 0302 	and.w	r3, r3, #2
 8001048:	2b00      	cmp	r3, #0
 800104a:	d0ee      	beq.n	800102a <HAL_RCC_OscConfig+0x386>
 800104c:	e014      	b.n	8001078 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800104e:	f7ff fd3b 	bl	8000ac8 <HAL_GetTick>
 8001052:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001054:	e00a      	b.n	800106c <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001056:	f7ff fd37 	bl	8000ac8 <HAL_GetTick>
 800105a:	4602      	mov	r2, r0
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	1ad3      	subs	r3, r2, r3
 8001060:	f241 3288 	movw	r2, #5000	; 0x1388
 8001064:	4293      	cmp	r3, r2
 8001066:	d901      	bls.n	800106c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001068:	2303      	movs	r3, #3
 800106a:	e083      	b.n	8001174 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800106c:	4b43      	ldr	r3, [pc, #268]	; (800117c <HAL_RCC_OscConfig+0x4d8>)
 800106e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001070:	f003 0302 	and.w	r3, r3, #2
 8001074:	2b00      	cmp	r3, #0
 8001076:	d1ee      	bne.n	8001056 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001078:	7dfb      	ldrb	r3, [r7, #23]
 800107a:	2b01      	cmp	r3, #1
 800107c:	d105      	bne.n	800108a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800107e:	4b3f      	ldr	r3, [pc, #252]	; (800117c <HAL_RCC_OscConfig+0x4d8>)
 8001080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001082:	4a3e      	ldr	r2, [pc, #248]	; (800117c <HAL_RCC_OscConfig+0x4d8>)
 8001084:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001088:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	699b      	ldr	r3, [r3, #24]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d06f      	beq.n	8001172 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001092:	4b3a      	ldr	r3, [pc, #232]	; (800117c <HAL_RCC_OscConfig+0x4d8>)
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	f003 030c 	and.w	r3, r3, #12
 800109a:	2b08      	cmp	r3, #8
 800109c:	d067      	beq.n	800116e <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	699b      	ldr	r3, [r3, #24]
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d149      	bne.n	800113a <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010a6:	4b35      	ldr	r3, [pc, #212]	; (800117c <HAL_RCC_OscConfig+0x4d8>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a34      	ldr	r2, [pc, #208]	; (800117c <HAL_RCC_OscConfig+0x4d8>)
 80010ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80010b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010b2:	f7ff fd09 	bl	8000ac8 <HAL_GetTick>
 80010b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010b8:	e008      	b.n	80010cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010ba:	f7ff fd05 	bl	8000ac8 <HAL_GetTick>
 80010be:	4602      	mov	r2, r0
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d901      	bls.n	80010cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80010c8:	2303      	movs	r3, #3
 80010ca:	e053      	b.n	8001174 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010cc:	4b2b      	ldr	r3, [pc, #172]	; (800117c <HAL_RCC_OscConfig+0x4d8>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d1f0      	bne.n	80010ba <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	69da      	ldr	r2, [r3, #28]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6a1b      	ldr	r3, [r3, #32]
 80010e0:	431a      	orrs	r2, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e6:	019b      	lsls	r3, r3, #6
 80010e8:	431a      	orrs	r2, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ee:	085b      	lsrs	r3, r3, #1
 80010f0:	3b01      	subs	r3, #1
 80010f2:	041b      	lsls	r3, r3, #16
 80010f4:	431a      	orrs	r2, r3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010fa:	061b      	lsls	r3, r3, #24
 80010fc:	4313      	orrs	r3, r2
 80010fe:	4a1f      	ldr	r2, [pc, #124]	; (800117c <HAL_RCC_OscConfig+0x4d8>)
 8001100:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001104:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001106:	4b1d      	ldr	r3, [pc, #116]	; (800117c <HAL_RCC_OscConfig+0x4d8>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a1c      	ldr	r2, [pc, #112]	; (800117c <HAL_RCC_OscConfig+0x4d8>)
 800110c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001110:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001112:	f7ff fcd9 	bl	8000ac8 <HAL_GetTick>
 8001116:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001118:	e008      	b.n	800112c <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800111a:	f7ff fcd5 	bl	8000ac8 <HAL_GetTick>
 800111e:	4602      	mov	r2, r0
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	2b02      	cmp	r3, #2
 8001126:	d901      	bls.n	800112c <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8001128:	2303      	movs	r3, #3
 800112a:	e023      	b.n	8001174 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800112c:	4b13      	ldr	r3, [pc, #76]	; (800117c <HAL_RCC_OscConfig+0x4d8>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001134:	2b00      	cmp	r3, #0
 8001136:	d0f0      	beq.n	800111a <HAL_RCC_OscConfig+0x476>
 8001138:	e01b      	b.n	8001172 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800113a:	4b10      	ldr	r3, [pc, #64]	; (800117c <HAL_RCC_OscConfig+0x4d8>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a0f      	ldr	r2, [pc, #60]	; (800117c <HAL_RCC_OscConfig+0x4d8>)
 8001140:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001144:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001146:	f7ff fcbf 	bl	8000ac8 <HAL_GetTick>
 800114a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800114c:	e008      	b.n	8001160 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800114e:	f7ff fcbb 	bl	8000ac8 <HAL_GetTick>
 8001152:	4602      	mov	r2, r0
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	2b02      	cmp	r3, #2
 800115a:	d901      	bls.n	8001160 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 800115c:	2303      	movs	r3, #3
 800115e:	e009      	b.n	8001174 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001160:	4b06      	ldr	r3, [pc, #24]	; (800117c <HAL_RCC_OscConfig+0x4d8>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001168:	2b00      	cmp	r3, #0
 800116a:	d1f0      	bne.n	800114e <HAL_RCC_OscConfig+0x4aa>
 800116c:	e001      	b.n	8001172 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e000      	b.n	8001174 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 8001172:	2300      	movs	r3, #0
}
 8001174:	4618      	mov	r0, r3
 8001176:	3718      	adds	r7, #24
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40023800 	.word	0x40023800
 8001180:	40007000 	.word	0x40007000

08001184 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d101      	bne.n	800119c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	e0ce      	b.n	800133a <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800119c:	4b69      	ldr	r3, [pc, #420]	; (8001344 <HAL_RCC_ClockConfig+0x1c0>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f003 030f 	and.w	r3, r3, #15
 80011a4:	683a      	ldr	r2, [r7, #0]
 80011a6:	429a      	cmp	r2, r3
 80011a8:	d910      	bls.n	80011cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011aa:	4b66      	ldr	r3, [pc, #408]	; (8001344 <HAL_RCC_ClockConfig+0x1c0>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f023 020f 	bic.w	r2, r3, #15
 80011b2:	4964      	ldr	r1, [pc, #400]	; (8001344 <HAL_RCC_ClockConfig+0x1c0>)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011ba:	4b62      	ldr	r3, [pc, #392]	; (8001344 <HAL_RCC_ClockConfig+0x1c0>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 030f 	and.w	r3, r3, #15
 80011c2:	683a      	ldr	r2, [r7, #0]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d001      	beq.n	80011cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e0b6      	b.n	800133a <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 0302 	and.w	r3, r3, #2
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d020      	beq.n	800121a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 0304 	and.w	r3, r3, #4
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d005      	beq.n	80011f0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011e4:	4b58      	ldr	r3, [pc, #352]	; (8001348 <HAL_RCC_ClockConfig+0x1c4>)
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	4a57      	ldr	r2, [pc, #348]	; (8001348 <HAL_RCC_ClockConfig+0x1c4>)
 80011ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80011ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f003 0308 	and.w	r3, r3, #8
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d005      	beq.n	8001208 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011fc:	4b52      	ldr	r3, [pc, #328]	; (8001348 <HAL_RCC_ClockConfig+0x1c4>)
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	4a51      	ldr	r2, [pc, #324]	; (8001348 <HAL_RCC_ClockConfig+0x1c4>)
 8001202:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001206:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001208:	4b4f      	ldr	r3, [pc, #316]	; (8001348 <HAL_RCC_ClockConfig+0x1c4>)
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	494c      	ldr	r1, [pc, #304]	; (8001348 <HAL_RCC_ClockConfig+0x1c4>)
 8001216:	4313      	orrs	r3, r2
 8001218:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	2b00      	cmp	r3, #0
 8001224:	d040      	beq.n	80012a8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d107      	bne.n	800123e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800122e:	4b46      	ldr	r3, [pc, #280]	; (8001348 <HAL_RCC_ClockConfig+0x1c4>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d115      	bne.n	8001266 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e07d      	b.n	800133a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	2b02      	cmp	r3, #2
 8001244:	d107      	bne.n	8001256 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001246:	4b40      	ldr	r3, [pc, #256]	; (8001348 <HAL_RCC_ClockConfig+0x1c4>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d109      	bne.n	8001266 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e071      	b.n	800133a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001256:	4b3c      	ldr	r3, [pc, #240]	; (8001348 <HAL_RCC_ClockConfig+0x1c4>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0302 	and.w	r3, r3, #2
 800125e:	2b00      	cmp	r3, #0
 8001260:	d101      	bne.n	8001266 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e069      	b.n	800133a <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001266:	4b38      	ldr	r3, [pc, #224]	; (8001348 <HAL_RCC_ClockConfig+0x1c4>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	f023 0203 	bic.w	r2, r3, #3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	4935      	ldr	r1, [pc, #212]	; (8001348 <HAL_RCC_ClockConfig+0x1c4>)
 8001274:	4313      	orrs	r3, r2
 8001276:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001278:	f7ff fc26 	bl	8000ac8 <HAL_GetTick>
 800127c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800127e:	e00a      	b.n	8001296 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001280:	f7ff fc22 	bl	8000ac8 <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	f241 3288 	movw	r2, #5000	; 0x1388
 800128e:	4293      	cmp	r3, r2
 8001290:	d901      	bls.n	8001296 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e051      	b.n	800133a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001296:	4b2c      	ldr	r3, [pc, #176]	; (8001348 <HAL_RCC_ClockConfig+0x1c4>)
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	f003 020c 	and.w	r2, r3, #12
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d1eb      	bne.n	8001280 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80012a8:	4b26      	ldr	r3, [pc, #152]	; (8001344 <HAL_RCC_ClockConfig+0x1c0>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 030f 	and.w	r3, r3, #15
 80012b0:	683a      	ldr	r2, [r7, #0]
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d210      	bcs.n	80012d8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012b6:	4b23      	ldr	r3, [pc, #140]	; (8001344 <HAL_RCC_ClockConfig+0x1c0>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f023 020f 	bic.w	r2, r3, #15
 80012be:	4921      	ldr	r1, [pc, #132]	; (8001344 <HAL_RCC_ClockConfig+0x1c0>)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012c6:	4b1f      	ldr	r3, [pc, #124]	; (8001344 <HAL_RCC_ClockConfig+0x1c0>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 030f 	and.w	r3, r3, #15
 80012ce:	683a      	ldr	r2, [r7, #0]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d001      	beq.n	80012d8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	e030      	b.n	800133a <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 0304 	and.w	r3, r3, #4
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d008      	beq.n	80012f6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012e4:	4b18      	ldr	r3, [pc, #96]	; (8001348 <HAL_RCC_ClockConfig+0x1c4>)
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	4915      	ldr	r1, [pc, #84]	; (8001348 <HAL_RCC_ClockConfig+0x1c4>)
 80012f2:	4313      	orrs	r3, r2
 80012f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0308 	and.w	r3, r3, #8
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d009      	beq.n	8001316 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001302:	4b11      	ldr	r3, [pc, #68]	; (8001348 <HAL_RCC_ClockConfig+0x1c4>)
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	691b      	ldr	r3, [r3, #16]
 800130e:	00db      	lsls	r3, r3, #3
 8001310:	490d      	ldr	r1, [pc, #52]	; (8001348 <HAL_RCC_ClockConfig+0x1c4>)
 8001312:	4313      	orrs	r3, r2
 8001314:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001316:	f000 f81d 	bl	8001354 <HAL_RCC_GetSysClockFreq>
 800131a:	4601      	mov	r1, r0
 800131c:	4b0a      	ldr	r3, [pc, #40]	; (8001348 <HAL_RCC_ClockConfig+0x1c4>)
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	091b      	lsrs	r3, r3, #4
 8001322:	f003 030f 	and.w	r3, r3, #15
 8001326:	4a09      	ldr	r2, [pc, #36]	; (800134c <HAL_RCC_ClockConfig+0x1c8>)
 8001328:	5cd3      	ldrb	r3, [r2, r3]
 800132a:	fa21 f303 	lsr.w	r3, r1, r3
 800132e:	4a08      	ldr	r2, [pc, #32]	; (8001350 <HAL_RCC_ClockConfig+0x1cc>)
 8001330:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001332:	2000      	movs	r0, #0
 8001334:	f7ff fa2e 	bl	8000794 <HAL_InitTick>

  return HAL_OK;
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40023c00 	.word	0x40023c00
 8001348:	40023800 	.word	0x40023800
 800134c:	08004ed0 	.word	0x08004ed0
 8001350:	20000000 	.word	0x20000000

08001354 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800135a:	2300      	movs	r3, #0
 800135c:	607b      	str	r3, [r7, #4]
 800135e:	2300      	movs	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	2300      	movs	r3, #0
 8001364:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800136a:	4b50      	ldr	r3, [pc, #320]	; (80014ac <HAL_RCC_GetSysClockFreq+0x158>)
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	f003 030c 	and.w	r3, r3, #12
 8001372:	2b04      	cmp	r3, #4
 8001374:	d007      	beq.n	8001386 <HAL_RCC_GetSysClockFreq+0x32>
 8001376:	2b08      	cmp	r3, #8
 8001378:	d008      	beq.n	800138c <HAL_RCC_GetSysClockFreq+0x38>
 800137a:	2b00      	cmp	r3, #0
 800137c:	f040 808d 	bne.w	800149a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001380:	4b4b      	ldr	r3, [pc, #300]	; (80014b0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001382:	60bb      	str	r3, [r7, #8]
       break;
 8001384:	e08c      	b.n	80014a0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001386:	4b4b      	ldr	r3, [pc, #300]	; (80014b4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001388:	60bb      	str	r3, [r7, #8]
      break;
 800138a:	e089      	b.n	80014a0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800138c:	4b47      	ldr	r3, [pc, #284]	; (80014ac <HAL_RCC_GetSysClockFreq+0x158>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001394:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001396:	4b45      	ldr	r3, [pc, #276]	; (80014ac <HAL_RCC_GetSysClockFreq+0x158>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d023      	beq.n	80013ea <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013a2:	4b42      	ldr	r3, [pc, #264]	; (80014ac <HAL_RCC_GetSysClockFreq+0x158>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	099b      	lsrs	r3, r3, #6
 80013a8:	f04f 0400 	mov.w	r4, #0
 80013ac:	f240 11ff 	movw	r1, #511	; 0x1ff
 80013b0:	f04f 0200 	mov.w	r2, #0
 80013b4:	ea03 0501 	and.w	r5, r3, r1
 80013b8:	ea04 0602 	and.w	r6, r4, r2
 80013bc:	4a3d      	ldr	r2, [pc, #244]	; (80014b4 <HAL_RCC_GetSysClockFreq+0x160>)
 80013be:	fb02 f106 	mul.w	r1, r2, r6
 80013c2:	2200      	movs	r2, #0
 80013c4:	fb02 f205 	mul.w	r2, r2, r5
 80013c8:	440a      	add	r2, r1
 80013ca:	493a      	ldr	r1, [pc, #232]	; (80014b4 <HAL_RCC_GetSysClockFreq+0x160>)
 80013cc:	fba5 0101 	umull	r0, r1, r5, r1
 80013d0:	1853      	adds	r3, r2, r1
 80013d2:	4619      	mov	r1, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f04f 0400 	mov.w	r4, #0
 80013da:	461a      	mov	r2, r3
 80013dc:	4623      	mov	r3, r4
 80013de:	f7fe ff17 	bl	8000210 <__aeabi_uldivmod>
 80013e2:	4603      	mov	r3, r0
 80013e4:	460c      	mov	r4, r1
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	e049      	b.n	800147e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013ea:	4b30      	ldr	r3, [pc, #192]	; (80014ac <HAL_RCC_GetSysClockFreq+0x158>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	099b      	lsrs	r3, r3, #6
 80013f0:	f04f 0400 	mov.w	r4, #0
 80013f4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80013f8:	f04f 0200 	mov.w	r2, #0
 80013fc:	ea03 0501 	and.w	r5, r3, r1
 8001400:	ea04 0602 	and.w	r6, r4, r2
 8001404:	4629      	mov	r1, r5
 8001406:	4632      	mov	r2, r6
 8001408:	f04f 0300 	mov.w	r3, #0
 800140c:	f04f 0400 	mov.w	r4, #0
 8001410:	0154      	lsls	r4, r2, #5
 8001412:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001416:	014b      	lsls	r3, r1, #5
 8001418:	4619      	mov	r1, r3
 800141a:	4622      	mov	r2, r4
 800141c:	1b49      	subs	r1, r1, r5
 800141e:	eb62 0206 	sbc.w	r2, r2, r6
 8001422:	f04f 0300 	mov.w	r3, #0
 8001426:	f04f 0400 	mov.w	r4, #0
 800142a:	0194      	lsls	r4, r2, #6
 800142c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001430:	018b      	lsls	r3, r1, #6
 8001432:	1a5b      	subs	r3, r3, r1
 8001434:	eb64 0402 	sbc.w	r4, r4, r2
 8001438:	f04f 0100 	mov.w	r1, #0
 800143c:	f04f 0200 	mov.w	r2, #0
 8001440:	00e2      	lsls	r2, r4, #3
 8001442:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001446:	00d9      	lsls	r1, r3, #3
 8001448:	460b      	mov	r3, r1
 800144a:	4614      	mov	r4, r2
 800144c:	195b      	adds	r3, r3, r5
 800144e:	eb44 0406 	adc.w	r4, r4, r6
 8001452:	f04f 0100 	mov.w	r1, #0
 8001456:	f04f 0200 	mov.w	r2, #0
 800145a:	02a2      	lsls	r2, r4, #10
 800145c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001460:	0299      	lsls	r1, r3, #10
 8001462:	460b      	mov	r3, r1
 8001464:	4614      	mov	r4, r2
 8001466:	4618      	mov	r0, r3
 8001468:	4621      	mov	r1, r4
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f04f 0400 	mov.w	r4, #0
 8001470:	461a      	mov	r2, r3
 8001472:	4623      	mov	r3, r4
 8001474:	f7fe fecc 	bl	8000210 <__aeabi_uldivmod>
 8001478:	4603      	mov	r3, r0
 800147a:	460c      	mov	r4, r1
 800147c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 800147e:	4b0b      	ldr	r3, [pc, #44]	; (80014ac <HAL_RCC_GetSysClockFreq+0x158>)
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	0c1b      	lsrs	r3, r3, #16
 8001484:	f003 0303 	and.w	r3, r3, #3
 8001488:	3301      	adds	r3, #1
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800148e:	68fa      	ldr	r2, [r7, #12]
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	fbb2 f3f3 	udiv	r3, r2, r3
 8001496:	60bb      	str	r3, [r7, #8]
      break;
 8001498:	e002      	b.n	80014a0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800149a:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <HAL_RCC_GetSysClockFreq+0x15c>)
 800149c:	60bb      	str	r3, [r7, #8]
      break;
 800149e:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014a0:	68bb      	ldr	r3, [r7, #8]
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3714      	adds	r7, #20
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40023800 	.word	0x40023800
 80014b0:	00f42400 	.word	0x00f42400
 80014b4:	017d7840 	.word	0x017d7840

080014b8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014bc:	4b03      	ldr	r3, [pc, #12]	; (80014cc <HAL_RCC_GetHCLKFreq+0x14>)
 80014be:	681b      	ldr	r3, [r3, #0]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	20000000 	.word	0x20000000

080014d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80014d4:	f7ff fff0 	bl	80014b8 <HAL_RCC_GetHCLKFreq>
 80014d8:	4601      	mov	r1, r0
 80014da:	4b05      	ldr	r3, [pc, #20]	; (80014f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	0b5b      	lsrs	r3, r3, #13
 80014e0:	f003 0307 	and.w	r3, r3, #7
 80014e4:	4a03      	ldr	r2, [pc, #12]	; (80014f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80014e6:	5cd3      	ldrb	r3, [r2, r3]
 80014e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40023800 	.word	0x40023800
 80014f4:	08004ee0 	.word	0x08004ee0

080014f8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	220f      	movs	r2, #15
 8001506:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001508:	4b12      	ldr	r3, [pc, #72]	; (8001554 <HAL_RCC_GetClockConfig+0x5c>)
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	f003 0203 	and.w	r2, r3, #3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001514:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <HAL_RCC_GetClockConfig+0x5c>)
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001520:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <HAL_RCC_GetClockConfig+0x5c>)
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800152c:	4b09      	ldr	r3, [pc, #36]	; (8001554 <HAL_RCC_GetClockConfig+0x5c>)
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	08db      	lsrs	r3, r3, #3
 8001532:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800153a:	4b07      	ldr	r3, [pc, #28]	; (8001558 <HAL_RCC_GetClockConfig+0x60>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 020f 	and.w	r2, r3, #15
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	601a      	str	r2, [r3, #0]
}
 8001546:	bf00      	nop
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	40023800 	.word	0x40023800
 8001558:	40023c00 	.word	0x40023c00

0800155c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d101      	bne.n	800156e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e01d      	b.n	80015aa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001574:	b2db      	uxtb	r3, r3
 8001576:	2b00      	cmp	r3, #0
 8001578:	d106      	bne.n	8001588 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f000 f815 	bl	80015b2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2202      	movs	r2, #2
 800158c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	3304      	adds	r3, #4
 8001598:	4619      	mov	r1, r3
 800159a:	4610      	mov	r0, r2
 800159c:	f000 f986 	bl	80018ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2201      	movs	r2, #1
 80015a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80015b2:	b480      	push	{r7}
 80015b4:	b083      	sub	sp, #12
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80015ba:	bf00      	nop
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
	...

080015c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	68da      	ldr	r2, [r3, #12]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f042 0201 	orr.w	r2, r2, #1
 80015de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	689a      	ldr	r2, [r3, #8]
 80015e6:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <HAL_TIM_Base_Start_IT+0x50>)
 80015e8:	4013      	ands	r3, r2
 80015ea:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	2b06      	cmp	r3, #6
 80015f0:	d00b      	beq.n	800160a <HAL_TIM_Base_Start_IT+0x42>
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015f8:	d007      	beq.n	800160a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f042 0201 	orr.w	r2, r2, #1
 8001608:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800160a:	2300      	movs	r3, #0
}
 800160c:	4618      	mov	r0, r3
 800160e:	3714      	adds	r7, #20
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	00010007 	.word	0x00010007

0800161c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	691b      	ldr	r3, [r3, #16]
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	2b02      	cmp	r3, #2
 8001630:	d122      	bne.n	8001678 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	f003 0302 	and.w	r3, r3, #2
 800163c:	2b02      	cmp	r3, #2
 800163e:	d11b      	bne.n	8001678 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f06f 0202 	mvn.w	r2, #2
 8001648:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2201      	movs	r2, #1
 800164e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	f003 0303 	and.w	r3, r3, #3
 800165a:	2b00      	cmp	r3, #0
 800165c:	d003      	beq.n	8001666 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f000 f905 	bl	800186e <HAL_TIM_IC_CaptureCallback>
 8001664:	e005      	b.n	8001672 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f000 f8f7 	bl	800185a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f000 f908 	bl	8001882 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	691b      	ldr	r3, [r3, #16]
 800167e:	f003 0304 	and.w	r3, r3, #4
 8001682:	2b04      	cmp	r3, #4
 8001684:	d122      	bne.n	80016cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	f003 0304 	and.w	r3, r3, #4
 8001690:	2b04      	cmp	r3, #4
 8001692:	d11b      	bne.n	80016cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f06f 0204 	mvn.w	r2, #4
 800169c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2202      	movs	r2, #2
 80016a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	699b      	ldr	r3, [r3, #24]
 80016aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d003      	beq.n	80016ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f000 f8db 	bl	800186e <HAL_TIM_IC_CaptureCallback>
 80016b8:	e005      	b.n	80016c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f000 f8cd 	bl	800185a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f000 f8de 	bl	8001882 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	691b      	ldr	r3, [r3, #16]
 80016d2:	f003 0308 	and.w	r3, r3, #8
 80016d6:	2b08      	cmp	r3, #8
 80016d8:	d122      	bne.n	8001720 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	f003 0308 	and.w	r3, r3, #8
 80016e4:	2b08      	cmp	r3, #8
 80016e6:	d11b      	bne.n	8001720 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f06f 0208 	mvn.w	r2, #8
 80016f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2204      	movs	r2, #4
 80016f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	69db      	ldr	r3, [r3, #28]
 80016fe:	f003 0303 	and.w	r3, r3, #3
 8001702:	2b00      	cmp	r3, #0
 8001704:	d003      	beq.n	800170e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f000 f8b1 	bl	800186e <HAL_TIM_IC_CaptureCallback>
 800170c:	e005      	b.n	800171a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f000 f8a3 	bl	800185a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f000 f8b4 	bl	8001882 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2200      	movs	r2, #0
 800171e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	691b      	ldr	r3, [r3, #16]
 8001726:	f003 0310 	and.w	r3, r3, #16
 800172a:	2b10      	cmp	r3, #16
 800172c:	d122      	bne.n	8001774 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	f003 0310 	and.w	r3, r3, #16
 8001738:	2b10      	cmp	r3, #16
 800173a:	d11b      	bne.n	8001774 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f06f 0210 	mvn.w	r2, #16
 8001744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2208      	movs	r2, #8
 800174a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	69db      	ldr	r3, [r3, #28]
 8001752:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001756:	2b00      	cmp	r3, #0
 8001758:	d003      	beq.n	8001762 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f000 f887 	bl	800186e <HAL_TIM_IC_CaptureCallback>
 8001760:	e005      	b.n	800176e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f000 f879 	bl	800185a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f000 f88a 	bl	8001882 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2200      	movs	r2, #0
 8001772:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	691b      	ldr	r3, [r3, #16]
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	2b01      	cmp	r3, #1
 8001780:	d10e      	bne.n	80017a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	f003 0301 	and.w	r3, r3, #1
 800178c:	2b01      	cmp	r3, #1
 800178e:	d107      	bne.n	80017a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f06f 0201 	mvn.w	r2, #1
 8001798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f7fe ffb8 	bl	8000710 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	691b      	ldr	r3, [r3, #16]
 80017a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017aa:	2b80      	cmp	r3, #128	; 0x80
 80017ac:	d10e      	bne.n	80017cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017b8:	2b80      	cmp	r3, #128	; 0x80
 80017ba:	d107      	bne.n	80017cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80017c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f000 f91a 	bl	8001a00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	691b      	ldr	r3, [r3, #16]
 80017d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017da:	d10e      	bne.n	80017fa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017e6:	2b80      	cmp	r3, #128	; 0x80
 80017e8:	d107      	bne.n	80017fa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80017f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f000 f90d 	bl	8001a14 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	691b      	ldr	r3, [r3, #16]
 8001800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001804:	2b40      	cmp	r3, #64	; 0x40
 8001806:	d10e      	bne.n	8001826 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001812:	2b40      	cmp	r3, #64	; 0x40
 8001814:	d107      	bne.n	8001826 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800181e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f000 f838 	bl	8001896 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	691b      	ldr	r3, [r3, #16]
 800182c:	f003 0320 	and.w	r3, r3, #32
 8001830:	2b20      	cmp	r3, #32
 8001832:	d10e      	bne.n	8001852 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	f003 0320 	and.w	r3, r3, #32
 800183e:	2b20      	cmp	r3, #32
 8001840:	d107      	bne.n	8001852 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f06f 0220 	mvn.w	r2, #32
 800184a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f000 f8cd 	bl	80019ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001852:	bf00      	nop
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800185a:	b480      	push	{r7}
 800185c:	b083      	sub	sp, #12
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800186e:	b480      	push	{r7}
 8001870:	b083      	sub	sp, #12
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr

08001882 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001882:	b480      	push	{r7}
 8001884:	b083      	sub	sp, #12
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr

08001896 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001896:	b480      	push	{r7}
 8001898:	b083      	sub	sp, #12
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800189e:	bf00      	nop
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
	...

080018ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4a40      	ldr	r2, [pc, #256]	; (80019c0 <TIM_Base_SetConfig+0x114>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d013      	beq.n	80018ec <TIM_Base_SetConfig+0x40>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018ca:	d00f      	beq.n	80018ec <TIM_Base_SetConfig+0x40>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4a3d      	ldr	r2, [pc, #244]	; (80019c4 <TIM_Base_SetConfig+0x118>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d00b      	beq.n	80018ec <TIM_Base_SetConfig+0x40>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4a3c      	ldr	r2, [pc, #240]	; (80019c8 <TIM_Base_SetConfig+0x11c>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d007      	beq.n	80018ec <TIM_Base_SetConfig+0x40>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4a3b      	ldr	r2, [pc, #236]	; (80019cc <TIM_Base_SetConfig+0x120>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d003      	beq.n	80018ec <TIM_Base_SetConfig+0x40>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4a3a      	ldr	r2, [pc, #232]	; (80019d0 <TIM_Base_SetConfig+0x124>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d108      	bne.n	80018fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	68fa      	ldr	r2, [r7, #12]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a2f      	ldr	r2, [pc, #188]	; (80019c0 <TIM_Base_SetConfig+0x114>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d02b      	beq.n	800195e <TIM_Base_SetConfig+0xb2>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800190c:	d027      	beq.n	800195e <TIM_Base_SetConfig+0xb2>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a2c      	ldr	r2, [pc, #176]	; (80019c4 <TIM_Base_SetConfig+0x118>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d023      	beq.n	800195e <TIM_Base_SetConfig+0xb2>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a2b      	ldr	r2, [pc, #172]	; (80019c8 <TIM_Base_SetConfig+0x11c>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d01f      	beq.n	800195e <TIM_Base_SetConfig+0xb2>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a2a      	ldr	r2, [pc, #168]	; (80019cc <TIM_Base_SetConfig+0x120>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d01b      	beq.n	800195e <TIM_Base_SetConfig+0xb2>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a29      	ldr	r2, [pc, #164]	; (80019d0 <TIM_Base_SetConfig+0x124>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d017      	beq.n	800195e <TIM_Base_SetConfig+0xb2>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a28      	ldr	r2, [pc, #160]	; (80019d4 <TIM_Base_SetConfig+0x128>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d013      	beq.n	800195e <TIM_Base_SetConfig+0xb2>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a27      	ldr	r2, [pc, #156]	; (80019d8 <TIM_Base_SetConfig+0x12c>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d00f      	beq.n	800195e <TIM_Base_SetConfig+0xb2>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a26      	ldr	r2, [pc, #152]	; (80019dc <TIM_Base_SetConfig+0x130>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d00b      	beq.n	800195e <TIM_Base_SetConfig+0xb2>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a25      	ldr	r2, [pc, #148]	; (80019e0 <TIM_Base_SetConfig+0x134>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d007      	beq.n	800195e <TIM_Base_SetConfig+0xb2>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a24      	ldr	r2, [pc, #144]	; (80019e4 <TIM_Base_SetConfig+0x138>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d003      	beq.n	800195e <TIM_Base_SetConfig+0xb2>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a23      	ldr	r2, [pc, #140]	; (80019e8 <TIM_Base_SetConfig+0x13c>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d108      	bne.n	8001970 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001964:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	68fa      	ldr	r2, [r7, #12]
 800196c:	4313      	orrs	r3, r2
 800196e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	695b      	ldr	r3, [r3, #20]
 800197a:	4313      	orrs	r3, r2
 800197c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	68fa      	ldr	r2, [r7, #12]
 8001982:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	689a      	ldr	r2, [r3, #8]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4a0a      	ldr	r2, [pc, #40]	; (80019c0 <TIM_Base_SetConfig+0x114>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d003      	beq.n	80019a4 <TIM_Base_SetConfig+0xf8>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4a0c      	ldr	r2, [pc, #48]	; (80019d0 <TIM_Base_SetConfig+0x124>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d103      	bne.n	80019ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	691a      	ldr	r2, [r3, #16]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2201      	movs	r2, #1
 80019b0:	615a      	str	r2, [r3, #20]
}
 80019b2:	bf00      	nop
 80019b4:	3714      	adds	r7, #20
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	40010000 	.word	0x40010000
 80019c4:	40000400 	.word	0x40000400
 80019c8:	40000800 	.word	0x40000800
 80019cc:	40000c00 	.word	0x40000c00
 80019d0:	40010400 	.word	0x40010400
 80019d4:	40014000 	.word	0x40014000
 80019d8:	40014400 	.word	0x40014400
 80019dc:	40014800 	.word	0x40014800
 80019e0:	40001800 	.word	0x40001800
 80019e4:	40001c00 	.word	0x40001c00
 80019e8:	40002000 	.word	0x40002000

080019ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80019f4:	bf00      	nop
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001a2e:	f3ef 8305 	mrs	r3, IPSR
 8001a32:	60bb      	str	r3, [r7, #8]
  return(result);
 8001a34:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d10f      	bne.n	8001a5a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a3a:	f3ef 8310 	mrs	r3, PRIMASK
 8001a3e:	607b      	str	r3, [r7, #4]
  return(result);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d109      	bne.n	8001a5a <osKernelInitialize+0x32>
 8001a46:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <osKernelInitialize+0x64>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d109      	bne.n	8001a62 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001a4e:	f3ef 8311 	mrs	r3, BASEPRI
 8001a52:	603b      	str	r3, [r7, #0]
  return(result);
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d003      	beq.n	8001a62 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8001a5a:	f06f 0305 	mvn.w	r3, #5
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	e00c      	b.n	8001a7c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001a62:	4b0a      	ldr	r3, [pc, #40]	; (8001a8c <osKernelInitialize+0x64>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d105      	bne.n	8001a76 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8001a6a:	4b08      	ldr	r3, [pc, #32]	; (8001a8c <osKernelInitialize+0x64>)
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001a70:	2300      	movs	r3, #0
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	e002      	b.n	8001a7c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8001a76:	f04f 33ff 	mov.w	r3, #4294967295
 8001a7a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3714      	adds	r7, #20
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	20000028 	.word	0x20000028

08001a90 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001a96:	f3ef 8305 	mrs	r3, IPSR
 8001a9a:	60bb      	str	r3, [r7, #8]
  return(result);
 8001a9c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d10f      	bne.n	8001ac2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001aa2:	f3ef 8310 	mrs	r3, PRIMASK
 8001aa6:	607b      	str	r3, [r7, #4]
  return(result);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d109      	bne.n	8001ac2 <osKernelStart+0x32>
 8001aae:	4b11      	ldr	r3, [pc, #68]	; (8001af4 <osKernelStart+0x64>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d109      	bne.n	8001aca <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001ab6:	f3ef 8311 	mrs	r3, BASEPRI
 8001aba:	603b      	str	r3, [r7, #0]
  return(result);
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <osKernelStart+0x3a>
    stat = osErrorISR;
 8001ac2:	f06f 0305 	mvn.w	r3, #5
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	e00e      	b.n	8001ae8 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8001aca:	4b0a      	ldr	r3, [pc, #40]	; (8001af4 <osKernelStart+0x64>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d107      	bne.n	8001ae2 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8001ad2:	4b08      	ldr	r3, [pc, #32]	; (8001af4 <osKernelStart+0x64>)
 8001ad4:	2202      	movs	r2, #2
 8001ad6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8001ad8:	f001 fbfe 	bl	80032d8 <vTaskStartScheduler>
      stat = osOK;
 8001adc:	2300      	movs	r3, #0
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	e002      	b.n	8001ae8 <osKernelStart+0x58>
    } else {
      stat = osError;
 8001ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ae6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	20000028 	.word	0x20000028

08001af8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b092      	sub	sp, #72	; 0x48
 8001afc:	af04      	add	r7, sp, #16
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001b04:	2300      	movs	r3, #0
 8001b06:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001b08:	f3ef 8305 	mrs	r3, IPSR
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8001b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	f040 8094 	bne.w	8001c3e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b16:	f3ef 8310 	mrs	r3, PRIMASK
 8001b1a:	623b      	str	r3, [r7, #32]
  return(result);
 8001b1c:	6a3b      	ldr	r3, [r7, #32]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	f040 808d 	bne.w	8001c3e <osThreadNew+0x146>
 8001b24:	4b48      	ldr	r3, [pc, #288]	; (8001c48 <osThreadNew+0x150>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d106      	bne.n	8001b3a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001b2c:	f3ef 8311 	mrs	r3, BASEPRI
 8001b30:	61fb      	str	r3, [r7, #28]
  return(result);
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	f040 8082 	bne.w	8001c3e <osThreadNew+0x146>
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d07e      	beq.n	8001c3e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8001b40:	2380      	movs	r3, #128	; 0x80
 8001b42:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8001b44:	2318      	movs	r3, #24
 8001b46:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8001b48:	2300      	movs	r3, #0
 8001b4a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8001b4c:	f107 031b 	add.w	r3, r7, #27
 8001b50:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8001b52:	f04f 33ff 	mov.w	r3, #4294967295
 8001b56:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d045      	beq.n	8001bea <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d002      	beq.n	8001b6c <osThreadNew+0x74>
        name = attr->name;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d002      	beq.n	8001b7a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d008      	beq.n	8001b92 <osThreadNew+0x9a>
 8001b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b82:	2b38      	cmp	r3, #56	; 0x38
 8001b84:	d805      	bhi.n	8001b92 <osThreadNew+0x9a>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <osThreadNew+0x9e>
        return (NULL);
 8001b92:	2300      	movs	r3, #0
 8001b94:	e054      	b.n	8001c40 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	695b      	ldr	r3, [r3, #20]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d003      	beq.n	8001ba6 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	695b      	ldr	r3, [r3, #20]
 8001ba2:	089b      	lsrs	r3, r3, #2
 8001ba4:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d00e      	beq.n	8001bcc <osThreadNew+0xd4>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	2b5b      	cmp	r3, #91	; 0x5b
 8001bb4:	d90a      	bls.n	8001bcc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d006      	beq.n	8001bcc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	695b      	ldr	r3, [r3, #20]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d002      	beq.n	8001bcc <osThreadNew+0xd4>
        mem = 1;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bca:	e010      	b.n	8001bee <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d10c      	bne.n	8001bee <osThreadNew+0xf6>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d108      	bne.n	8001bee <osThreadNew+0xf6>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	691b      	ldr	r3, [r3, #16]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d104      	bne.n	8001bee <osThreadNew+0xf6>
          mem = 0;
 8001be4:	2300      	movs	r3, #0
 8001be6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001be8:	e001      	b.n	8001bee <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8001bea:	2300      	movs	r3, #0
 8001bec:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8001bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d110      	bne.n	8001c16 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001bfc:	9202      	str	r2, [sp, #8]
 8001bfe:	9301      	str	r3, [sp, #4]
 8001c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c02:	9300      	str	r3, [sp, #0]
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c08:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001c0a:	68f8      	ldr	r0, [r7, #12]
 8001c0c:	f001 f992 	bl	8002f34 <xTaskCreateStatic>
 8001c10:	4603      	mov	r3, r0
 8001c12:	617b      	str	r3, [r7, #20]
 8001c14:	e013      	b.n	8001c3e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8001c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d110      	bne.n	8001c3e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	f107 0314 	add.w	r3, r7, #20
 8001c24:	9301      	str	r3, [sp, #4]
 8001c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c28:	9300      	str	r3, [sp, #0]
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001c2e:	68f8      	ldr	r0, [r7, #12]
 8001c30:	f001 f9df 	bl	8002ff2 <xTaskCreate>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d001      	beq.n	8001c3e <osThreadNew+0x146>
          hTask = NULL;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001c3e:	697b      	ldr	r3, [r7, #20]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3738      	adds	r7, #56	; 0x38
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20000028 	.word	0x20000028

08001c4c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001c54:	f3ef 8305 	mrs	r3, IPSR
 8001c58:	613b      	str	r3, [r7, #16]
  return(result);
 8001c5a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d10f      	bne.n	8001c80 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c60:	f3ef 8310 	mrs	r3, PRIMASK
 8001c64:	60fb      	str	r3, [r7, #12]
  return(result);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d109      	bne.n	8001c80 <osDelay+0x34>
 8001c6c:	4b0d      	ldr	r3, [pc, #52]	; (8001ca4 <osDelay+0x58>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d109      	bne.n	8001c88 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001c74:	f3ef 8311 	mrs	r3, BASEPRI
 8001c78:	60bb      	str	r3, [r7, #8]
  return(result);
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d003      	beq.n	8001c88 <osDelay+0x3c>
    stat = osErrorISR;
 8001c80:	f06f 0305 	mvn.w	r3, #5
 8001c84:	617b      	str	r3, [r7, #20]
 8001c86:	e007      	b.n	8001c98 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d002      	beq.n	8001c98 <osDelay+0x4c>
      vTaskDelay(ticks);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f001 faea 	bl	800326c <vTaskDelay>
    }
  }

  return (stat);
 8001c98:	697b      	ldr	r3, [r7, #20]
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3718      	adds	r7, #24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	20000028 	.word	0x20000028

08001ca8 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b08a      	sub	sp, #40	; 0x28
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001cb4:	f3ef 8305 	mrs	r3, IPSR
 8001cb8:	613b      	str	r3, [r7, #16]
  return(result);
 8001cba:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	f040 8085 	bne.w	8001dcc <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001cc2:	f3ef 8310 	mrs	r3, PRIMASK
 8001cc6:	60fb      	str	r3, [r7, #12]
  return(result);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d17e      	bne.n	8001dcc <osMutexNew+0x124>
 8001cce:	4b42      	ldr	r3, [pc, #264]	; (8001dd8 <osMutexNew+0x130>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d105      	bne.n	8001ce2 <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001cd6:	f3ef 8311 	mrs	r3, BASEPRI
 8001cda:	60bb      	str	r3, [r7, #8]
  return(result);
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d174      	bne.n	8001dcc <osMutexNew+0x124>
    if (attr != NULL) {
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d003      	beq.n	8001cf0 <osMutexNew+0x48>
      type = attr->attr_bits;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	623b      	str	r3, [r7, #32]
 8001cee:	e001      	b.n	8001cf4 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8001cf4:	6a3b      	ldr	r3, [r7, #32]
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d002      	beq.n	8001d04 <osMutexNew+0x5c>
      rmtx = 1U;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	61fb      	str	r3, [r7, #28]
 8001d02:	e001      	b.n	8001d08 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8001d04:	2300      	movs	r3, #0
 8001d06:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8001d08:	6a3b      	ldr	r3, [r7, #32]
 8001d0a:	f003 0308 	and.w	r3, r3, #8
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d15c      	bne.n	8001dcc <osMutexNew+0x124>
      mem = -1;
 8001d12:	f04f 33ff 	mov.w	r3, #4294967295
 8001d16:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d015      	beq.n	8001d4a <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d006      	beq.n	8001d34 <osMutexNew+0x8c>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	2b4f      	cmp	r3, #79	; 0x4f
 8001d2c:	d902      	bls.n	8001d34 <osMutexNew+0x8c>
          mem = 1;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	61bb      	str	r3, [r7, #24]
 8001d32:	e00c      	b.n	8001d4e <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d108      	bne.n	8001d4e <osMutexNew+0xa6>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d104      	bne.n	8001d4e <osMutexNew+0xa6>
            mem = 0;
 8001d44:	2300      	movs	r3, #0
 8001d46:	61bb      	str	r3, [r7, #24]
 8001d48:	e001      	b.n	8001d4e <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d112      	bne.n	8001d7a <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d007      	beq.n	8001d6a <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	4619      	mov	r1, r3
 8001d60:	2004      	movs	r0, #4
 8001d62:	f000 fb4b 	bl	80023fc <xQueueCreateMutexStatic>
 8001d66:	6278      	str	r0, [r7, #36]	; 0x24
 8001d68:	e016      	b.n	8001d98 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	4619      	mov	r1, r3
 8001d70:	2001      	movs	r0, #1
 8001d72:	f000 fb43 	bl	80023fc <xQueueCreateMutexStatic>
 8001d76:	6278      	str	r0, [r7, #36]	; 0x24
 8001d78:	e00e      	b.n	8001d98 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d10b      	bne.n	8001d98 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d004      	beq.n	8001d90 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8001d86:	2004      	movs	r0, #4
 8001d88:	f000 fb20 	bl	80023cc <xQueueCreateMutex>
 8001d8c:	6278      	str	r0, [r7, #36]	; 0x24
 8001d8e:	e003      	b.n	8001d98 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8001d90:	2001      	movs	r0, #1
 8001d92:	f000 fb1b 	bl	80023cc <xQueueCreateMutex>
 8001d96:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8001d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d00c      	beq.n	8001db8 <osMutexNew+0x110>
        if (attr != NULL) {
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d003      	beq.n	8001dac <osMutexNew+0x104>
          name = attr->name;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	617b      	str	r3, [r7, #20]
 8001daa:	e001      	b.n	8001db0 <osMutexNew+0x108>
        } else {
          name = NULL;
 8001dac:	2300      	movs	r3, #0
 8001dae:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8001db0:	6979      	ldr	r1, [r7, #20]
 8001db2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001db4:	f001 f862 	bl	8002e7c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8001db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d006      	beq.n	8001dcc <osMutexNew+0x124>
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d003      	beq.n	8001dcc <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8001dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc6:	f043 0301 	orr.w	r3, r3, #1
 8001dca:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8001dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3728      	adds	r7, #40	; 0x28
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	20000028 	.word	0x20000028

08001ddc <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b088      	sub	sp, #32
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f023 0301 	bic.w	r3, r3, #1
 8001dec:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8001df6:	2300      	movs	r3, #0
 8001df8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001dfa:	f3ef 8305 	mrs	r3, IPSR
 8001dfe:	613b      	str	r3, [r7, #16]
  return(result);
 8001e00:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d10f      	bne.n	8001e26 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e06:	f3ef 8310 	mrs	r3, PRIMASK
 8001e0a:	60fb      	str	r3, [r7, #12]
  return(result);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d109      	bne.n	8001e26 <osMutexAcquire+0x4a>
 8001e12:	4b20      	ldr	r3, [pc, #128]	; (8001e94 <osMutexAcquire+0xb8>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d109      	bne.n	8001e2e <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001e1a:	f3ef 8311 	mrs	r3, BASEPRI
 8001e1e:	60bb      	str	r3, [r7, #8]
  return(result);
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d003      	beq.n	8001e2e <osMutexAcquire+0x52>
    stat = osErrorISR;
 8001e26:	f06f 0305 	mvn.w	r3, #5
 8001e2a:	61fb      	str	r3, [r7, #28]
 8001e2c:	e02c      	b.n	8001e88 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d103      	bne.n	8001e3c <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8001e34:	f06f 0303 	mvn.w	r3, #3
 8001e38:	61fb      	str	r3, [r7, #28]
 8001e3a:	e025      	b.n	8001e88 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d011      	beq.n	8001e66 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8001e42:	6839      	ldr	r1, [r7, #0]
 8001e44:	69b8      	ldr	r0, [r7, #24]
 8001e46:	f000 fb29 	bl	800249c <xQueueTakeMutexRecursive>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d01b      	beq.n	8001e88 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d003      	beq.n	8001e5e <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8001e56:	f06f 0301 	mvn.w	r3, #1
 8001e5a:	61fb      	str	r3, [r7, #28]
 8001e5c:	e014      	b.n	8001e88 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8001e5e:	f06f 0302 	mvn.w	r3, #2
 8001e62:	61fb      	str	r3, [r7, #28]
 8001e64:	e010      	b.n	8001e88 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8001e66:	6839      	ldr	r1, [r7, #0]
 8001e68:	69b8      	ldr	r0, [r7, #24]
 8001e6a:	f000 fdcf 	bl	8002a0c <xQueueSemaphoreTake>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d009      	beq.n	8001e88 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8001e7a:	f06f 0301 	mvn.w	r3, #1
 8001e7e:	61fb      	str	r3, [r7, #28]
 8001e80:	e002      	b.n	8001e88 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8001e82:	f06f 0302 	mvn.w	r3, #2
 8001e86:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8001e88:	69fb      	ldr	r3, [r7, #28]
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3720      	adds	r7, #32
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20000028 	.word	0x20000028

08001e98 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b088      	sub	sp, #32
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f023 0301 	bic.w	r3, r3, #1
 8001ea6:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001eb4:	f3ef 8305 	mrs	r3, IPSR
 8001eb8:	613b      	str	r3, [r7, #16]
  return(result);
 8001eba:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d10f      	bne.n	8001ee0 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ec0:	f3ef 8310 	mrs	r3, PRIMASK
 8001ec4:	60fb      	str	r3, [r7, #12]
  return(result);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d109      	bne.n	8001ee0 <osMutexRelease+0x48>
 8001ecc:	4b19      	ldr	r3, [pc, #100]	; (8001f34 <osMutexRelease+0x9c>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d109      	bne.n	8001ee8 <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001ed4:	f3ef 8311 	mrs	r3, BASEPRI
 8001ed8:	60bb      	str	r3, [r7, #8]
  return(result);
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d003      	beq.n	8001ee8 <osMutexRelease+0x50>
    stat = osErrorISR;
 8001ee0:	f06f 0305 	mvn.w	r3, #5
 8001ee4:	61fb      	str	r3, [r7, #28]
 8001ee6:	e01f      	b.n	8001f28 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d103      	bne.n	8001ef6 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8001eee:	f06f 0303 	mvn.w	r3, #3
 8001ef2:	61fb      	str	r3, [r7, #28]
 8001ef4:	e018      	b.n	8001f28 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d009      	beq.n	8001f10 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8001efc:	69b8      	ldr	r0, [r7, #24]
 8001efe:	f000 fa98 	bl	8002432 <xQueueGiveMutexRecursive>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d00f      	beq.n	8001f28 <osMutexRelease+0x90>
        stat = osErrorResource;
 8001f08:	f06f 0302 	mvn.w	r3, #2
 8001f0c:	61fb      	str	r3, [r7, #28]
 8001f0e:	e00b      	b.n	8001f28 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8001f10:	2300      	movs	r3, #0
 8001f12:	2200      	movs	r2, #0
 8001f14:	2100      	movs	r1, #0
 8001f16:	69b8      	ldr	r0, [r7, #24]
 8001f18:	f000 faf8 	bl	800250c <xQueueGenericSend>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d002      	beq.n	8001f28 <osMutexRelease+0x90>
        stat = osErrorResource;
 8001f22:	f06f 0302 	mvn.w	r3, #2
 8001f26:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8001f28:	69fb      	ldr	r3, [r7, #28]
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3720      	adds	r7, #32
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	20000028 	.word	0x20000028

08001f38 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001f38:	b480      	push	{r7}
 8001f3a:	b085      	sub	sp, #20
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	4a07      	ldr	r2, [pc, #28]	; (8001f64 <vApplicationGetIdleTaskMemory+0x2c>)
 8001f48:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	4a06      	ldr	r2, [pc, #24]	; (8001f68 <vApplicationGetIdleTaskMemory+0x30>)
 8001f4e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2280      	movs	r2, #128	; 0x80
 8001f54:	601a      	str	r2, [r3, #0]
}
 8001f56:	bf00      	nop
 8001f58:	3714      	adds	r7, #20
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	2000002c 	.word	0x2000002c
 8001f68:	20000088 	.word	0x20000088

08001f6c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	4a07      	ldr	r2, [pc, #28]	; (8001f98 <vApplicationGetTimerTaskMemory+0x2c>)
 8001f7c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	4a06      	ldr	r2, [pc, #24]	; (8001f9c <vApplicationGetTimerTaskMemory+0x30>)
 8001f82:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f8a:	601a      	str	r2, [r3, #0]
}
 8001f8c:	bf00      	nop
 8001f8e:	3714      	adds	r7, #20
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	20000288 	.word	0x20000288
 8001f9c:	200002e4 	.word	0x200002e4

08001fa0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f103 0208 	add.w	r2, r3, #8
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fb8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f103 0208 	add.w	r2, r3, #8
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f103 0208 	add.w	r2, r3, #8
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001fee:	bf00      	nop
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr

08001ffa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	b085      	sub	sp, #20
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
 8002002:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	689a      	ldr	r2, [r3, #8]
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	683a      	ldr	r2, [r7, #0]
 8002024:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	1c5a      	adds	r2, r3, #1
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	601a      	str	r2, [r3, #0]
}
 8002036:	bf00      	nop
 8002038:	3714      	adds	r7, #20
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr

08002042 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002042:	b480      	push	{r7}
 8002044:	b085      	sub	sp, #20
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
 800204a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002058:	d103      	bne.n	8002062 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	e00c      	b.n	800207c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	3308      	adds	r3, #8
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	e002      	b.n	8002070 <vListInsert+0x2e>
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	60fb      	str	r3, [r7, #12]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	68ba      	ldr	r2, [r7, #8]
 8002078:	429a      	cmp	r2, r3
 800207a:	d2f6      	bcs.n	800206a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	685a      	ldr	r2, [r3, #4]
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	683a      	ldr	r2, [r7, #0]
 8002096:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	1c5a      	adds	r2, r3, #1
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	601a      	str	r2, [r3, #0]
}
 80020a8:	bf00      	nop
 80020aa:	3714      	adds	r7, #20
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80020b4:	b480      	push	{r7}
 80020b6:	b085      	sub	sp, #20
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	691b      	ldr	r3, [r3, #16]
 80020c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	6892      	ldr	r2, [r2, #8]
 80020ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	6852      	ldr	r2, [r2, #4]
 80020d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d103      	bne.n	80020e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689a      	ldr	r2, [r3, #8]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	1e5a      	subs	r2, r3, #1
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3714      	adds	r7, #20
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d10b      	bne.n	8002134 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800211c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002120:	b672      	cpsid	i
 8002122:	f383 8811 	msr	BASEPRI, r3
 8002126:	f3bf 8f6f 	isb	sy
 800212a:	f3bf 8f4f 	dsb	sy
 800212e:	b662      	cpsie	i
 8002130:	60bb      	str	r3, [r7, #8]
 8002132:	e7fe      	b.n	8002132 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8002134:	f002 fb48 	bl	80047c8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002140:	68f9      	ldr	r1, [r7, #12]
 8002142:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002144:	fb01 f303 	mul.w	r3, r1, r3
 8002148:	441a      	add	r2, r3
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2200      	movs	r2, #0
 8002152:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002164:	3b01      	subs	r3, #1
 8002166:	68f9      	ldr	r1, [r7, #12]
 8002168:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800216a:	fb01 f303 	mul.w	r3, r1, r3
 800216e:	441a      	add	r2, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	22ff      	movs	r2, #255	; 0xff
 8002178:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	22ff      	movs	r2, #255	; 0xff
 8002180:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d114      	bne.n	80021b4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d01a      	beq.n	80021c8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	3310      	adds	r3, #16
 8002196:	4618      	mov	r0, r3
 8002198:	f001 fb32 	bl	8003800 <xTaskRemoveFromEventList>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d012      	beq.n	80021c8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80021a2:	4b0d      	ldr	r3, [pc, #52]	; (80021d8 <xQueueGenericReset+0xd0>)
 80021a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021a8:	601a      	str	r2, [r3, #0]
 80021aa:	f3bf 8f4f 	dsb	sy
 80021ae:	f3bf 8f6f 	isb	sy
 80021b2:	e009      	b.n	80021c8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	3310      	adds	r3, #16
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7ff fef1 	bl	8001fa0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	3324      	adds	r3, #36	; 0x24
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff feec 	bl	8001fa0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80021c8:	f002 fb30 	bl	800482c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80021cc:	2301      	movs	r3, #1
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	e000ed04 	.word	0xe000ed04

080021dc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b08e      	sub	sp, #56	; 0x38
 80021e0:	af02      	add	r7, sp, #8
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
 80021e8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d10b      	bne.n	8002208 <xQueueGenericCreateStatic+0x2c>
 80021f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021f4:	b672      	cpsid	i
 80021f6:	f383 8811 	msr	BASEPRI, r3
 80021fa:	f3bf 8f6f 	isb	sy
 80021fe:	f3bf 8f4f 	dsb	sy
 8002202:	b662      	cpsie	i
 8002204:	62bb      	str	r3, [r7, #40]	; 0x28
 8002206:	e7fe      	b.n	8002206 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d10b      	bne.n	8002226 <xQueueGenericCreateStatic+0x4a>
 800220e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002212:	b672      	cpsid	i
 8002214:	f383 8811 	msr	BASEPRI, r3
 8002218:	f3bf 8f6f 	isb	sy
 800221c:	f3bf 8f4f 	dsb	sy
 8002220:	b662      	cpsie	i
 8002222:	627b      	str	r3, [r7, #36]	; 0x24
 8002224:	e7fe      	b.n	8002224 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d002      	beq.n	8002232 <xQueueGenericCreateStatic+0x56>
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <xQueueGenericCreateStatic+0x5a>
 8002232:	2301      	movs	r3, #1
 8002234:	e000      	b.n	8002238 <xQueueGenericCreateStatic+0x5c>
 8002236:	2300      	movs	r3, #0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d10b      	bne.n	8002254 <xQueueGenericCreateStatic+0x78>
 800223c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002240:	b672      	cpsid	i
 8002242:	f383 8811 	msr	BASEPRI, r3
 8002246:	f3bf 8f6f 	isb	sy
 800224a:	f3bf 8f4f 	dsb	sy
 800224e:	b662      	cpsie	i
 8002250:	623b      	str	r3, [r7, #32]
 8002252:	e7fe      	b.n	8002252 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d102      	bne.n	8002260 <xQueueGenericCreateStatic+0x84>
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d101      	bne.n	8002264 <xQueueGenericCreateStatic+0x88>
 8002260:	2301      	movs	r3, #1
 8002262:	e000      	b.n	8002266 <xQueueGenericCreateStatic+0x8a>
 8002264:	2300      	movs	r3, #0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d10b      	bne.n	8002282 <xQueueGenericCreateStatic+0xa6>
 800226a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800226e:	b672      	cpsid	i
 8002270:	f383 8811 	msr	BASEPRI, r3
 8002274:	f3bf 8f6f 	isb	sy
 8002278:	f3bf 8f4f 	dsb	sy
 800227c:	b662      	cpsie	i
 800227e:	61fb      	str	r3, [r7, #28]
 8002280:	e7fe      	b.n	8002280 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002282:	2350      	movs	r3, #80	; 0x50
 8002284:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	2b50      	cmp	r3, #80	; 0x50
 800228a:	d00b      	beq.n	80022a4 <xQueueGenericCreateStatic+0xc8>
 800228c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002290:	b672      	cpsid	i
 8002292:	f383 8811 	msr	BASEPRI, r3
 8002296:	f3bf 8f6f 	isb	sy
 800229a:	f3bf 8f4f 	dsb	sy
 800229e:	b662      	cpsie	i
 80022a0:	61bb      	str	r3, [r7, #24]
 80022a2:	e7fe      	b.n	80022a2 <xQueueGenericCreateStatic+0xc6>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80022a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00d      	beq.n	80022ca <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80022ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b0:	2201      	movs	r2, #1
 80022b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80022b6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80022ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022bc:	9300      	str	r3, [sp, #0]
 80022be:	4613      	mov	r3, r2
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	68b9      	ldr	r1, [r7, #8]
 80022c4:	68f8      	ldr	r0, [r7, #12]
 80022c6:	f000 f844 	bl	8002352 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80022ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3730      	adds	r7, #48	; 0x30
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b08a      	sub	sp, #40	; 0x28
 80022d8:	af02      	add	r7, sp, #8
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	4613      	mov	r3, r2
 80022e0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d10b      	bne.n	8002300 <xQueueGenericCreate+0x2c>
 80022e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022ec:	b672      	cpsid	i
 80022ee:	f383 8811 	msr	BASEPRI, r3
 80022f2:	f3bf 8f6f 	isb	sy
 80022f6:	f3bf 8f4f 	dsb	sy
 80022fa:	b662      	cpsie	i
 80022fc:	613b      	str	r3, [r7, #16]
 80022fe:	e7fe      	b.n	80022fe <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d102      	bne.n	800230c <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002306:	2300      	movs	r3, #0
 8002308:	61fb      	str	r3, [r7, #28]
 800230a:	e004      	b.n	8002316 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	68ba      	ldr	r2, [r7, #8]
 8002310:	fb02 f303 	mul.w	r3, r2, r3
 8002314:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	3350      	adds	r3, #80	; 0x50
 800231a:	4618      	mov	r0, r3
 800231c:	f002 fb76 	bl	8004a0c <pvPortMalloc>
 8002320:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d00f      	beq.n	8002348 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	3350      	adds	r3, #80	; 0x50
 800232c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	2200      	movs	r2, #0
 8002332:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002336:	79fa      	ldrb	r2, [r7, #7]
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	9300      	str	r3, [sp, #0]
 800233c:	4613      	mov	r3, r2
 800233e:	697a      	ldr	r2, [r7, #20]
 8002340:	68b9      	ldr	r1, [r7, #8]
 8002342:	68f8      	ldr	r0, [r7, #12]
 8002344:	f000 f805 	bl	8002352 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002348:	69bb      	ldr	r3, [r7, #24]
	}
 800234a:	4618      	mov	r0, r3
 800234c:	3720      	adds	r7, #32
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002352:	b580      	push	{r7, lr}
 8002354:	b084      	sub	sp, #16
 8002356:	af00      	add	r7, sp, #0
 8002358:	60f8      	str	r0, [r7, #12]
 800235a:	60b9      	str	r1, [r7, #8]
 800235c:	607a      	str	r2, [r7, #4]
 800235e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d103      	bne.n	800236e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	e002      	b.n	8002374 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	68ba      	ldr	r2, [r7, #8]
 800237e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002380:	2101      	movs	r1, #1
 8002382:	69b8      	ldr	r0, [r7, #24]
 8002384:	f7ff fec0 	bl	8002108 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	78fa      	ldrb	r2, [r7, #3]
 800238c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002390:	bf00      	nop
 8002392:	3710      	adds	r7, #16
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d00e      	beq.n	80023c4 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80023b8:	2300      	movs	r3, #0
 80023ba:	2200      	movs	r2, #0
 80023bc:	2100      	movs	r1, #0
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f000 f8a4 	bl	800250c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80023c4:	bf00      	nop
 80023c6:	3708      	adds	r7, #8
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}

080023cc <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b086      	sub	sp, #24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	4603      	mov	r3, r0
 80023d4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80023d6:	2301      	movs	r3, #1
 80023d8:	617b      	str	r3, [r7, #20]
 80023da:	2300      	movs	r3, #0
 80023dc:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80023de:	79fb      	ldrb	r3, [r7, #7]
 80023e0:	461a      	mov	r2, r3
 80023e2:	6939      	ldr	r1, [r7, #16]
 80023e4:	6978      	ldr	r0, [r7, #20]
 80023e6:	f7ff ff75 	bl	80022d4 <xQueueGenericCreate>
 80023ea:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80023ec:	68f8      	ldr	r0, [r7, #12]
 80023ee:	f7ff ffd3 	bl	8002398 <prvInitialiseMutex>

		return pxNewQueue;
 80023f2:	68fb      	ldr	r3, [r7, #12]
	}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3718      	adds	r7, #24
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b088      	sub	sp, #32
 8002400:	af02      	add	r7, sp, #8
 8002402:	4603      	mov	r3, r0
 8002404:	6039      	str	r1, [r7, #0]
 8002406:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002408:	2301      	movs	r3, #1
 800240a:	617b      	str	r3, [r7, #20]
 800240c:	2300      	movs	r3, #0
 800240e:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8002410:	79fb      	ldrb	r3, [r7, #7]
 8002412:	9300      	str	r3, [sp, #0]
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	2200      	movs	r2, #0
 8002418:	6939      	ldr	r1, [r7, #16]
 800241a:	6978      	ldr	r0, [r7, #20]
 800241c:	f7ff fede 	bl	80021dc <xQueueGenericCreateStatic>
 8002420:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8002422:	68f8      	ldr	r0, [r7, #12]
 8002424:	f7ff ffb8 	bl	8002398 <prvInitialiseMutex>

		return pxNewQueue;
 8002428:	68fb      	ldr	r3, [r7, #12]
	}
 800242a:	4618      	mov	r0, r3
 800242c:	3718      	adds	r7, #24
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8002432:	b590      	push	{r4, r7, lr}
 8002434:	b087      	sub	sp, #28
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d10b      	bne.n	800245c <xQueueGiveMutexRecursive+0x2a>
 8002444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002448:	b672      	cpsid	i
 800244a:	f383 8811 	msr	BASEPRI, r3
 800244e:	f3bf 8f6f 	isb	sy
 8002452:	f3bf 8f4f 	dsb	sy
 8002456:	b662      	cpsie	i
 8002458:	60fb      	str	r3, [r7, #12]
 800245a:	e7fe      	b.n	800245a <xQueueGiveMutexRecursive+0x28>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	685c      	ldr	r4, [r3, #4]
 8002460:	f001 fb92 	bl	8003b88 <xTaskGetCurrentTaskHandle>
 8002464:	4603      	mov	r3, r0
 8002466:	429c      	cmp	r4, r3
 8002468:	d111      	bne.n	800248e <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	1e5a      	subs	r2, r3, #1
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d105      	bne.n	8002488 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800247c:	2300      	movs	r3, #0
 800247e:	2200      	movs	r2, #0
 8002480:	2100      	movs	r1, #0
 8002482:	6938      	ldr	r0, [r7, #16]
 8002484:	f000 f842 	bl	800250c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8002488:	2301      	movs	r3, #1
 800248a:	617b      	str	r3, [r7, #20]
 800248c:	e001      	b.n	8002492 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800248e:	2300      	movs	r3, #0
 8002490:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8002492:	697b      	ldr	r3, [r7, #20]
	}
 8002494:	4618      	mov	r0, r3
 8002496:	371c      	adds	r7, #28
 8002498:	46bd      	mov	sp, r7
 800249a:	bd90      	pop	{r4, r7, pc}

0800249c <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800249c:	b590      	push	{r4, r7, lr}
 800249e:	b087      	sub	sp, #28
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d10b      	bne.n	80024c8 <xQueueTakeMutexRecursive+0x2c>
 80024b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024b4:	b672      	cpsid	i
 80024b6:	f383 8811 	msr	BASEPRI, r3
 80024ba:	f3bf 8f6f 	isb	sy
 80024be:	f3bf 8f4f 	dsb	sy
 80024c2:	b662      	cpsie	i
 80024c4:	60fb      	str	r3, [r7, #12]
 80024c6:	e7fe      	b.n	80024c6 <xQueueTakeMutexRecursive+0x2a>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	685c      	ldr	r4, [r3, #4]
 80024cc:	f001 fb5c 	bl	8003b88 <xTaskGetCurrentTaskHandle>
 80024d0:	4603      	mov	r3, r0
 80024d2:	429c      	cmp	r4, r3
 80024d4:	d107      	bne.n	80024e6 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	1c5a      	adds	r2, r3, #1
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80024e0:	2301      	movs	r3, #1
 80024e2:	617b      	str	r3, [r7, #20]
 80024e4:	e00c      	b.n	8002500 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80024e6:	6839      	ldr	r1, [r7, #0]
 80024e8:	6938      	ldr	r0, [r7, #16]
 80024ea:	f000 fa8f 	bl	8002a0c <xQueueSemaphoreTake>
 80024ee:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d004      	beq.n	8002500 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	1c5a      	adds	r2, r3, #1
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8002500:	697b      	ldr	r3, [r7, #20]
	}
 8002502:	4618      	mov	r0, r3
 8002504:	371c      	adds	r7, #28
 8002506:	46bd      	mov	sp, r7
 8002508:	bd90      	pop	{r4, r7, pc}
	...

0800250c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b08e      	sub	sp, #56	; 0x38
 8002510:	af00      	add	r7, sp, #0
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	607a      	str	r2, [r7, #4]
 8002518:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800251a:	2300      	movs	r3, #0
 800251c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002524:	2b00      	cmp	r3, #0
 8002526:	d10b      	bne.n	8002540 <xQueueGenericSend+0x34>
 8002528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800252c:	b672      	cpsid	i
 800252e:	f383 8811 	msr	BASEPRI, r3
 8002532:	f3bf 8f6f 	isb	sy
 8002536:	f3bf 8f4f 	dsb	sy
 800253a:	b662      	cpsie	i
 800253c:	62bb      	str	r3, [r7, #40]	; 0x28
 800253e:	e7fe      	b.n	800253e <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d103      	bne.n	800254e <xQueueGenericSend+0x42>
 8002546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	2b00      	cmp	r3, #0
 800254c:	d101      	bne.n	8002552 <xQueueGenericSend+0x46>
 800254e:	2301      	movs	r3, #1
 8002550:	e000      	b.n	8002554 <xQueueGenericSend+0x48>
 8002552:	2300      	movs	r3, #0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d10b      	bne.n	8002570 <xQueueGenericSend+0x64>
 8002558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800255c:	b672      	cpsid	i
 800255e:	f383 8811 	msr	BASEPRI, r3
 8002562:	f3bf 8f6f 	isb	sy
 8002566:	f3bf 8f4f 	dsb	sy
 800256a:	b662      	cpsie	i
 800256c:	627b      	str	r3, [r7, #36]	; 0x24
 800256e:	e7fe      	b.n	800256e <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	2b02      	cmp	r3, #2
 8002574:	d103      	bne.n	800257e <xQueueGenericSend+0x72>
 8002576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800257a:	2b01      	cmp	r3, #1
 800257c:	d101      	bne.n	8002582 <xQueueGenericSend+0x76>
 800257e:	2301      	movs	r3, #1
 8002580:	e000      	b.n	8002584 <xQueueGenericSend+0x78>
 8002582:	2300      	movs	r3, #0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d10b      	bne.n	80025a0 <xQueueGenericSend+0x94>
 8002588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800258c:	b672      	cpsid	i
 800258e:	f383 8811 	msr	BASEPRI, r3
 8002592:	f3bf 8f6f 	isb	sy
 8002596:	f3bf 8f4f 	dsb	sy
 800259a:	b662      	cpsie	i
 800259c:	623b      	str	r3, [r7, #32]
 800259e:	e7fe      	b.n	800259e <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80025a0:	f001 fb02 	bl	8003ba8 <xTaskGetSchedulerState>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d102      	bne.n	80025b0 <xQueueGenericSend+0xa4>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d101      	bne.n	80025b4 <xQueueGenericSend+0xa8>
 80025b0:	2301      	movs	r3, #1
 80025b2:	e000      	b.n	80025b6 <xQueueGenericSend+0xaa>
 80025b4:	2300      	movs	r3, #0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d10b      	bne.n	80025d2 <xQueueGenericSend+0xc6>
 80025ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025be:	b672      	cpsid	i
 80025c0:	f383 8811 	msr	BASEPRI, r3
 80025c4:	f3bf 8f6f 	isb	sy
 80025c8:	f3bf 8f4f 	dsb	sy
 80025cc:	b662      	cpsie	i
 80025ce:	61fb      	str	r3, [r7, #28]
 80025d0:	e7fe      	b.n	80025d0 <xQueueGenericSend+0xc4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80025d2:	f002 f8f9 	bl	80047c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80025d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025de:	429a      	cmp	r2, r3
 80025e0:	d302      	bcc.n	80025e8 <xQueueGenericSend+0xdc>
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d129      	bne.n	800263c <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80025e8:	683a      	ldr	r2, [r7, #0]
 80025ea:	68b9      	ldr	r1, [r7, #8]
 80025ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025ee:	f000 fb35 	bl	8002c5c <prvCopyDataToQueue>
 80025f2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80025f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d010      	beq.n	800261e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025fe:	3324      	adds	r3, #36	; 0x24
 8002600:	4618      	mov	r0, r3
 8002602:	f001 f8fd 	bl	8003800 <xTaskRemoveFromEventList>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d013      	beq.n	8002634 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800260c:	4b3f      	ldr	r3, [pc, #252]	; (800270c <xQueueGenericSend+0x200>)
 800260e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002612:	601a      	str	r2, [r3, #0]
 8002614:	f3bf 8f4f 	dsb	sy
 8002618:	f3bf 8f6f 	isb	sy
 800261c:	e00a      	b.n	8002634 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800261e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002620:	2b00      	cmp	r3, #0
 8002622:	d007      	beq.n	8002634 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002624:	4b39      	ldr	r3, [pc, #228]	; (800270c <xQueueGenericSend+0x200>)
 8002626:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	f3bf 8f4f 	dsb	sy
 8002630:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002634:	f002 f8fa 	bl	800482c <vPortExitCritical>
				return pdPASS;
 8002638:	2301      	movs	r3, #1
 800263a:	e063      	b.n	8002704 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d103      	bne.n	800264a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002642:	f002 f8f3 	bl	800482c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002646:	2300      	movs	r3, #0
 8002648:	e05c      	b.n	8002704 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800264a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800264c:	2b00      	cmp	r3, #0
 800264e:	d106      	bne.n	800265e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002650:	f107 0314 	add.w	r3, r7, #20
 8002654:	4618      	mov	r0, r3
 8002656:	f001 f937 	bl	80038c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800265a:	2301      	movs	r3, #1
 800265c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800265e:	f002 f8e5 	bl	800482c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002662:	f000 fea1 	bl	80033a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002666:	f002 f8af 	bl	80047c8 <vPortEnterCritical>
 800266a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800266c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002670:	b25b      	sxtb	r3, r3
 8002672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002676:	d103      	bne.n	8002680 <xQueueGenericSend+0x174>
 8002678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800267a:	2200      	movs	r2, #0
 800267c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002682:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002686:	b25b      	sxtb	r3, r3
 8002688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800268c:	d103      	bne.n	8002696 <xQueueGenericSend+0x18a>
 800268e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002690:	2200      	movs	r2, #0
 8002692:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002696:	f002 f8c9 	bl	800482c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800269a:	1d3a      	adds	r2, r7, #4
 800269c:	f107 0314 	add.w	r3, r7, #20
 80026a0:	4611      	mov	r1, r2
 80026a2:	4618      	mov	r0, r3
 80026a4:	f001 f926 	bl	80038f4 <xTaskCheckForTimeOut>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d124      	bne.n	80026f8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80026ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026b0:	f000 fbcc 	bl	8002e4c <prvIsQueueFull>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d018      	beq.n	80026ec <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80026ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026bc:	3310      	adds	r3, #16
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	4611      	mov	r1, r2
 80026c2:	4618      	mov	r0, r3
 80026c4:	f001 f84a 	bl	800375c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80026c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026ca:	f000 fb57 	bl	8002d7c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80026ce:	f000 fe79 	bl	80033c4 <xTaskResumeAll>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f47f af7c 	bne.w	80025d2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80026da:	4b0c      	ldr	r3, [pc, #48]	; (800270c <xQueueGenericSend+0x200>)
 80026dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	f3bf 8f4f 	dsb	sy
 80026e6:	f3bf 8f6f 	isb	sy
 80026ea:	e772      	b.n	80025d2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80026ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026ee:	f000 fb45 	bl	8002d7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80026f2:	f000 fe67 	bl	80033c4 <xTaskResumeAll>
 80026f6:	e76c      	b.n	80025d2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80026f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026fa:	f000 fb3f 	bl	8002d7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80026fe:	f000 fe61 	bl	80033c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002702:	2300      	movs	r3, #0
		}
	}
}
 8002704:	4618      	mov	r0, r3
 8002706:	3738      	adds	r7, #56	; 0x38
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	e000ed04 	.word	0xe000ed04

08002710 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b08e      	sub	sp, #56	; 0x38
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
 800271c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002724:	2b00      	cmp	r3, #0
 8002726:	d10b      	bne.n	8002740 <xQueueGenericSendFromISR+0x30>
 8002728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800272c:	b672      	cpsid	i
 800272e:	f383 8811 	msr	BASEPRI, r3
 8002732:	f3bf 8f6f 	isb	sy
 8002736:	f3bf 8f4f 	dsb	sy
 800273a:	b662      	cpsie	i
 800273c:	627b      	str	r3, [r7, #36]	; 0x24
 800273e:	e7fe      	b.n	800273e <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d103      	bne.n	800274e <xQueueGenericSendFromISR+0x3e>
 8002746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <xQueueGenericSendFromISR+0x42>
 800274e:	2301      	movs	r3, #1
 8002750:	e000      	b.n	8002754 <xQueueGenericSendFromISR+0x44>
 8002752:	2300      	movs	r3, #0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d10b      	bne.n	8002770 <xQueueGenericSendFromISR+0x60>
 8002758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800275c:	b672      	cpsid	i
 800275e:	f383 8811 	msr	BASEPRI, r3
 8002762:	f3bf 8f6f 	isb	sy
 8002766:	f3bf 8f4f 	dsb	sy
 800276a:	b662      	cpsie	i
 800276c:	623b      	str	r3, [r7, #32]
 800276e:	e7fe      	b.n	800276e <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	2b02      	cmp	r3, #2
 8002774:	d103      	bne.n	800277e <xQueueGenericSendFromISR+0x6e>
 8002776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800277a:	2b01      	cmp	r3, #1
 800277c:	d101      	bne.n	8002782 <xQueueGenericSendFromISR+0x72>
 800277e:	2301      	movs	r3, #1
 8002780:	e000      	b.n	8002784 <xQueueGenericSendFromISR+0x74>
 8002782:	2300      	movs	r3, #0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d10b      	bne.n	80027a0 <xQueueGenericSendFromISR+0x90>
 8002788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800278c:	b672      	cpsid	i
 800278e:	f383 8811 	msr	BASEPRI, r3
 8002792:	f3bf 8f6f 	isb	sy
 8002796:	f3bf 8f4f 	dsb	sy
 800279a:	b662      	cpsie	i
 800279c:	61fb      	str	r3, [r7, #28]
 800279e:	e7fe      	b.n	800279e <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80027a0:	f002 f8f2 	bl	8004988 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80027a4:	f3ef 8211 	mrs	r2, BASEPRI
 80027a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ac:	b672      	cpsid	i
 80027ae:	f383 8811 	msr	BASEPRI, r3
 80027b2:	f3bf 8f6f 	isb	sy
 80027b6:	f3bf 8f4f 	dsb	sy
 80027ba:	b662      	cpsie	i
 80027bc:	61ba      	str	r2, [r7, #24]
 80027be:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80027c0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80027c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80027c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d302      	bcc.n	80027d6 <xQueueGenericSendFromISR+0xc6>
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d12c      	bne.n	8002830 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80027d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80027e0:	683a      	ldr	r2, [r7, #0]
 80027e2:	68b9      	ldr	r1, [r7, #8]
 80027e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027e6:	f000 fa39 	bl	8002c5c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80027ea:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80027ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f2:	d112      	bne.n	800281a <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80027f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d016      	beq.n	800282a <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80027fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027fe:	3324      	adds	r3, #36	; 0x24
 8002800:	4618      	mov	r0, r3
 8002802:	f000 fffd 	bl	8003800 <xTaskRemoveFromEventList>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00e      	beq.n	800282a <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d00b      	beq.n	800282a <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2201      	movs	r2, #1
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	e007      	b.n	800282a <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800281a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800281e:	3301      	adds	r3, #1
 8002820:	b2db      	uxtb	r3, r3
 8002822:	b25a      	sxtb	r2, r3
 8002824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002826:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800282a:	2301      	movs	r3, #1
 800282c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800282e:	e001      	b.n	8002834 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002830:	2300      	movs	r3, #0
 8002832:	637b      	str	r3, [r7, #52]	; 0x34
 8002834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002836:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800283e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002840:	4618      	mov	r0, r3
 8002842:	3738      	adds	r7, #56	; 0x38
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b08c      	sub	sp, #48	; 0x30
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002854:	2300      	movs	r3, #0
 8002856:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800285c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800285e:	2b00      	cmp	r3, #0
 8002860:	d10b      	bne.n	800287a <xQueueReceive+0x32>
	__asm volatile
 8002862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002866:	b672      	cpsid	i
 8002868:	f383 8811 	msr	BASEPRI, r3
 800286c:	f3bf 8f6f 	isb	sy
 8002870:	f3bf 8f4f 	dsb	sy
 8002874:	b662      	cpsie	i
 8002876:	623b      	str	r3, [r7, #32]
 8002878:	e7fe      	b.n	8002878 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d103      	bne.n	8002888 <xQueueReceive+0x40>
 8002880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002884:	2b00      	cmp	r3, #0
 8002886:	d101      	bne.n	800288c <xQueueReceive+0x44>
 8002888:	2301      	movs	r3, #1
 800288a:	e000      	b.n	800288e <xQueueReceive+0x46>
 800288c:	2300      	movs	r3, #0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d10b      	bne.n	80028aa <xQueueReceive+0x62>
 8002892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002896:	b672      	cpsid	i
 8002898:	f383 8811 	msr	BASEPRI, r3
 800289c:	f3bf 8f6f 	isb	sy
 80028a0:	f3bf 8f4f 	dsb	sy
 80028a4:	b662      	cpsie	i
 80028a6:	61fb      	str	r3, [r7, #28]
 80028a8:	e7fe      	b.n	80028a8 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80028aa:	f001 f97d 	bl	8003ba8 <xTaskGetSchedulerState>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d102      	bne.n	80028ba <xQueueReceive+0x72>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d101      	bne.n	80028be <xQueueReceive+0x76>
 80028ba:	2301      	movs	r3, #1
 80028bc:	e000      	b.n	80028c0 <xQueueReceive+0x78>
 80028be:	2300      	movs	r3, #0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d10b      	bne.n	80028dc <xQueueReceive+0x94>
 80028c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028c8:	b672      	cpsid	i
 80028ca:	f383 8811 	msr	BASEPRI, r3
 80028ce:	f3bf 8f6f 	isb	sy
 80028d2:	f3bf 8f4f 	dsb	sy
 80028d6:	b662      	cpsie	i
 80028d8:	61bb      	str	r3, [r7, #24]
 80028da:	e7fe      	b.n	80028da <xQueueReceive+0x92>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80028dc:	f001 ff74 	bl	80047c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80028e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d01f      	beq.n	800292c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80028ec:	68b9      	ldr	r1, [r7, #8]
 80028ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028f0:	f000 fa1e 	bl	8002d30 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80028f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f6:	1e5a      	subs	r2, r3, #1
 80028f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028fa:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d00f      	beq.n	8002924 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002906:	3310      	adds	r3, #16
 8002908:	4618      	mov	r0, r3
 800290a:	f000 ff79 	bl	8003800 <xTaskRemoveFromEventList>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d007      	beq.n	8002924 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002914:	4b3c      	ldr	r3, [pc, #240]	; (8002a08 <xQueueReceive+0x1c0>)
 8002916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	f3bf 8f4f 	dsb	sy
 8002920:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002924:	f001 ff82 	bl	800482c <vPortExitCritical>
				return pdPASS;
 8002928:	2301      	movs	r3, #1
 800292a:	e069      	b.n	8002a00 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d103      	bne.n	800293a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002932:	f001 ff7b 	bl	800482c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002936:	2300      	movs	r3, #0
 8002938:	e062      	b.n	8002a00 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800293a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800293c:	2b00      	cmp	r3, #0
 800293e:	d106      	bne.n	800294e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002940:	f107 0310 	add.w	r3, r7, #16
 8002944:	4618      	mov	r0, r3
 8002946:	f000 ffbf 	bl	80038c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800294a:	2301      	movs	r3, #1
 800294c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800294e:	f001 ff6d 	bl	800482c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002952:	f000 fd29 	bl	80033a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002956:	f001 ff37 	bl	80047c8 <vPortEnterCritical>
 800295a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800295c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002960:	b25b      	sxtb	r3, r3
 8002962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002966:	d103      	bne.n	8002970 <xQueueReceive+0x128>
 8002968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800296a:	2200      	movs	r2, #0
 800296c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002972:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002976:	b25b      	sxtb	r3, r3
 8002978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800297c:	d103      	bne.n	8002986 <xQueueReceive+0x13e>
 800297e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002980:	2200      	movs	r2, #0
 8002982:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002986:	f001 ff51 	bl	800482c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800298a:	1d3a      	adds	r2, r7, #4
 800298c:	f107 0310 	add.w	r3, r7, #16
 8002990:	4611      	mov	r1, r2
 8002992:	4618      	mov	r0, r3
 8002994:	f000 ffae 	bl	80038f4 <xTaskCheckForTimeOut>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d123      	bne.n	80029e6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800299e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029a0:	f000 fa3e 	bl	8002e20 <prvIsQueueEmpty>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d017      	beq.n	80029da <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80029aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ac:	3324      	adds	r3, #36	; 0x24
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	4611      	mov	r1, r2
 80029b2:	4618      	mov	r0, r3
 80029b4:	f000 fed2 	bl	800375c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80029b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029ba:	f000 f9df 	bl	8002d7c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80029be:	f000 fd01 	bl	80033c4 <xTaskResumeAll>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d189      	bne.n	80028dc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80029c8:	4b0f      	ldr	r3, [pc, #60]	; (8002a08 <xQueueReceive+0x1c0>)
 80029ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029ce:	601a      	str	r2, [r3, #0]
 80029d0:	f3bf 8f4f 	dsb	sy
 80029d4:	f3bf 8f6f 	isb	sy
 80029d8:	e780      	b.n	80028dc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80029da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029dc:	f000 f9ce 	bl	8002d7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80029e0:	f000 fcf0 	bl	80033c4 <xTaskResumeAll>
 80029e4:	e77a      	b.n	80028dc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80029e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029e8:	f000 f9c8 	bl	8002d7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80029ec:	f000 fcea 	bl	80033c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80029f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029f2:	f000 fa15 	bl	8002e20 <prvIsQueueEmpty>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	f43f af6f 	beq.w	80028dc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80029fe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3730      	adds	r7, #48	; 0x30
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	e000ed04 	.word	0xe000ed04

08002a0c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b08e      	sub	sp, #56	; 0x38
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002a16:	2300      	movs	r3, #0
 8002a18:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d10b      	bne.n	8002a40 <xQueueSemaphoreTake+0x34>
 8002a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a2c:	b672      	cpsid	i
 8002a2e:	f383 8811 	msr	BASEPRI, r3
 8002a32:	f3bf 8f6f 	isb	sy
 8002a36:	f3bf 8f4f 	dsb	sy
 8002a3a:	b662      	cpsie	i
 8002a3c:	623b      	str	r3, [r7, #32]
 8002a3e:	e7fe      	b.n	8002a3e <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d00b      	beq.n	8002a60 <xQueueSemaphoreTake+0x54>
 8002a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a4c:	b672      	cpsid	i
 8002a4e:	f383 8811 	msr	BASEPRI, r3
 8002a52:	f3bf 8f6f 	isb	sy
 8002a56:	f3bf 8f4f 	dsb	sy
 8002a5a:	b662      	cpsie	i
 8002a5c:	61fb      	str	r3, [r7, #28]
 8002a5e:	e7fe      	b.n	8002a5e <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a60:	f001 f8a2 	bl	8003ba8 <xTaskGetSchedulerState>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d102      	bne.n	8002a70 <xQueueSemaphoreTake+0x64>
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d101      	bne.n	8002a74 <xQueueSemaphoreTake+0x68>
 8002a70:	2301      	movs	r3, #1
 8002a72:	e000      	b.n	8002a76 <xQueueSemaphoreTake+0x6a>
 8002a74:	2300      	movs	r3, #0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d10b      	bne.n	8002a92 <xQueueSemaphoreTake+0x86>
 8002a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a7e:	b672      	cpsid	i
 8002a80:	f383 8811 	msr	BASEPRI, r3
 8002a84:	f3bf 8f6f 	isb	sy
 8002a88:	f3bf 8f4f 	dsb	sy
 8002a8c:	b662      	cpsie	i
 8002a8e:	61bb      	str	r3, [r7, #24]
 8002a90:	e7fe      	b.n	8002a90 <xQueueSemaphoreTake+0x84>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002a92:	f001 fe99 	bl	80047c8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a9a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d024      	beq.n	8002aec <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa4:	1e5a      	subs	r2, r3, #1
 8002aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa8:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d104      	bne.n	8002abc <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8002ab2:	f001 f9fd 	bl	8003eb0 <pvTaskIncrementMutexHeldCount>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aba:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002abe:	691b      	ldr	r3, [r3, #16]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d00f      	beq.n	8002ae4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac6:	3310      	adds	r3, #16
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f000 fe99 	bl	8003800 <xTaskRemoveFromEventList>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d007      	beq.n	8002ae4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002ad4:	4b54      	ldr	r3, [pc, #336]	; (8002c28 <xQueueSemaphoreTake+0x21c>)
 8002ad6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ada:	601a      	str	r2, [r3, #0]
 8002adc:	f3bf 8f4f 	dsb	sy
 8002ae0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002ae4:	f001 fea2 	bl	800482c <vPortExitCritical>
				return pdPASS;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e098      	b.n	8002c1e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d112      	bne.n	8002b18 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d00b      	beq.n	8002b10 <xQueueSemaphoreTake+0x104>
 8002af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002afc:	b672      	cpsid	i
 8002afe:	f383 8811 	msr	BASEPRI, r3
 8002b02:	f3bf 8f6f 	isb	sy
 8002b06:	f3bf 8f4f 	dsb	sy
 8002b0a:	b662      	cpsie	i
 8002b0c:	617b      	str	r3, [r7, #20]
 8002b0e:	e7fe      	b.n	8002b0e <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8002b10:	f001 fe8c 	bl	800482c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002b14:	2300      	movs	r3, #0
 8002b16:	e082      	b.n	8002c1e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d106      	bne.n	8002b2c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002b1e:	f107 030c 	add.w	r3, r7, #12
 8002b22:	4618      	mov	r0, r3
 8002b24:	f000 fed0 	bl	80038c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002b2c:	f001 fe7e 	bl	800482c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002b30:	f000 fc3a 	bl	80033a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002b34:	f001 fe48 	bl	80047c8 <vPortEnterCritical>
 8002b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b3e:	b25b      	sxtb	r3, r3
 8002b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b44:	d103      	bne.n	8002b4e <xQueueSemaphoreTake+0x142>
 8002b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b54:	b25b      	sxtb	r3, r3
 8002b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b5a:	d103      	bne.n	8002b64 <xQueueSemaphoreTake+0x158>
 8002b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b64:	f001 fe62 	bl	800482c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b68:	463a      	mov	r2, r7
 8002b6a:	f107 030c 	add.w	r3, r7, #12
 8002b6e:	4611      	mov	r1, r2
 8002b70:	4618      	mov	r0, r3
 8002b72:	f000 febf 	bl	80038f4 <xTaskCheckForTimeOut>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d132      	bne.n	8002be2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002b7e:	f000 f94f 	bl	8002e20 <prvIsQueueEmpty>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d026      	beq.n	8002bd6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d109      	bne.n	8002ba4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8002b90:	f001 fe1a 	bl	80047c8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8002b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f001 f823 	bl	8003be4 <xTaskPriorityInherit>
 8002b9e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8002ba0:	f001 fe44 	bl	800482c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ba6:	3324      	adds	r3, #36	; 0x24
 8002ba8:	683a      	ldr	r2, [r7, #0]
 8002baa:	4611      	mov	r1, r2
 8002bac:	4618      	mov	r0, r3
 8002bae:	f000 fdd5 	bl	800375c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002bb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002bb4:	f000 f8e2 	bl	8002d7c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002bb8:	f000 fc04 	bl	80033c4 <xTaskResumeAll>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	f47f af67 	bne.w	8002a92 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8002bc4:	4b18      	ldr	r3, [pc, #96]	; (8002c28 <xQueueSemaphoreTake+0x21c>)
 8002bc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bca:	601a      	str	r2, [r3, #0]
 8002bcc:	f3bf 8f4f 	dsb	sy
 8002bd0:	f3bf 8f6f 	isb	sy
 8002bd4:	e75d      	b.n	8002a92 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8002bd6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002bd8:	f000 f8d0 	bl	8002d7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002bdc:	f000 fbf2 	bl	80033c4 <xTaskResumeAll>
 8002be0:	e757      	b.n	8002a92 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8002be2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002be4:	f000 f8ca 	bl	8002d7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002be8:	f000 fbec 	bl	80033c4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002bec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002bee:	f000 f917 	bl	8002e20 <prvIsQueueEmpty>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f43f af4c 	beq.w	8002a92 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8002bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d00d      	beq.n	8002c1c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8002c00:	f001 fde2 	bl	80047c8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002c04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002c06:	f000 f811 	bl	8002c2c <prvGetDisinheritPriorityAfterTimeout>
 8002c0a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8002c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c12:	4618      	mov	r0, r3
 8002c14:	f001 f8c4 	bl	8003da0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8002c18:	f001 fe08 	bl	800482c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002c1c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3738      	adds	r7, #56	; 0x38
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	e000ed04 	.word	0xe000ed04

08002c2c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d006      	beq.n	8002c4a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8002c46:	60fb      	str	r3, [r7, #12]
 8002c48:	e001      	b.n	8002c4e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
	}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3714      	adds	r7, #20
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b086      	sub	sp, #24
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c70:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d10d      	bne.n	8002c96 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d14d      	bne.n	8002d1e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f001 f81a 	bl	8003cc0 <xTaskPriorityDisinherit>
 8002c8c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	605a      	str	r2, [r3, #4]
 8002c94:	e043      	b.n	8002d1e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d119      	bne.n	8002cd0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6898      	ldr	r0, [r3, #8]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	68b9      	ldr	r1, [r7, #8]
 8002ca8:	f002 f8b4 	bl	8004e14 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	689a      	ldr	r2, [r3, #8]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb4:	441a      	add	r2, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	689a      	ldr	r2, [r3, #8]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d32b      	bcc.n	8002d1e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	609a      	str	r2, [r3, #8]
 8002cce:	e026      	b.n	8002d1e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	68d8      	ldr	r0, [r3, #12]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd8:	461a      	mov	r2, r3
 8002cda:	68b9      	ldr	r1, [r7, #8]
 8002cdc:	f002 f89a 	bl	8004e14 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	68da      	ldr	r2, [r3, #12]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce8:	425b      	negs	r3, r3
 8002cea:	441a      	add	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	68da      	ldr	r2, [r3, #12]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d207      	bcs.n	8002d0c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	685a      	ldr	r2, [r3, #4]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d04:	425b      	negs	r3, r3
 8002d06:	441a      	add	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d105      	bne.n	8002d1e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d002      	beq.n	8002d1e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	1c5a      	adds	r2, r3, #1
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002d26:	697b      	ldr	r3, [r7, #20]
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3718      	adds	r7, #24
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d018      	beq.n	8002d74 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68da      	ldr	r2, [r3, #12]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	441a      	add	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	68da      	ldr	r2, [r3, #12]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d303      	bcc.n	8002d64 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	68d9      	ldr	r1, [r3, #12]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	6838      	ldr	r0, [r7, #0]
 8002d70:	f002 f850 	bl	8004e14 <memcpy>
	}
}
 8002d74:	bf00      	nop
 8002d76:	3708      	adds	r7, #8
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002d84:	f001 fd20 	bl	80047c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d8e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d90:	e011      	b.n	8002db6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d012      	beq.n	8002dc0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	3324      	adds	r3, #36	; 0x24
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f000 fd2e 	bl	8003800 <xTaskRemoveFromEventList>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002daa:	f000 fe07 	bl	80039bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002dae:	7bfb      	ldrb	r3, [r7, #15]
 8002db0:	3b01      	subs	r3, #1
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	dce9      	bgt.n	8002d92 <prvUnlockQueue+0x16>
 8002dbe:	e000      	b.n	8002dc2 <prvUnlockQueue+0x46>
					break;
 8002dc0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	22ff      	movs	r2, #255	; 0xff
 8002dc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002dca:	f001 fd2f 	bl	800482c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002dce:	f001 fcfb 	bl	80047c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002dd8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002dda:	e011      	b.n	8002e00 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	691b      	ldr	r3, [r3, #16]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d012      	beq.n	8002e0a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	3310      	adds	r3, #16
 8002de8:	4618      	mov	r0, r3
 8002dea:	f000 fd09 	bl	8003800 <xTaskRemoveFromEventList>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002df4:	f000 fde2 	bl	80039bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002df8:	7bbb      	ldrb	r3, [r7, #14]
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002e00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	dce9      	bgt.n	8002ddc <prvUnlockQueue+0x60>
 8002e08:	e000      	b.n	8002e0c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002e0a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	22ff      	movs	r2, #255	; 0xff
 8002e10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002e14:	f001 fd0a 	bl	800482c <vPortExitCritical>
}
 8002e18:	bf00      	nop
 8002e1a:	3710      	adds	r7, #16
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002e28:	f001 fcce 	bl	80047c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d102      	bne.n	8002e3a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002e34:	2301      	movs	r3, #1
 8002e36:	60fb      	str	r3, [r7, #12]
 8002e38:	e001      	b.n	8002e3e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002e3e:	f001 fcf5 	bl	800482c <vPortExitCritical>

	return xReturn;
 8002e42:	68fb      	ldr	r3, [r7, #12]
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002e54:	f001 fcb8 	bl	80047c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d102      	bne.n	8002e6a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002e64:	2301      	movs	r3, #1
 8002e66:	60fb      	str	r3, [r7, #12]
 8002e68:	e001      	b.n	8002e6e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002e6e:	f001 fcdd 	bl	800482c <vPortExitCritical>

	return xReturn;
 8002e72:	68fb      	ldr	r3, [r7, #12]
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3710      	adds	r7, #16
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b085      	sub	sp, #20
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002e86:	2300      	movs	r3, #0
 8002e88:	60fb      	str	r3, [r7, #12]
 8002e8a:	e014      	b.n	8002eb6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002e8c:	4a0e      	ldr	r2, [pc, #56]	; (8002ec8 <vQueueAddToRegistry+0x4c>)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d10b      	bne.n	8002eb0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002e98:	490b      	ldr	r1, [pc, #44]	; (8002ec8 <vQueueAddToRegistry+0x4c>)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	683a      	ldr	r2, [r7, #0]
 8002e9e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002ea2:	4a09      	ldr	r2, [pc, #36]	; (8002ec8 <vQueueAddToRegistry+0x4c>)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	4413      	add	r3, r2
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002eae:	e005      	b.n	8002ebc <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	60fb      	str	r3, [r7, #12]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2b07      	cmp	r3, #7
 8002eba:	d9e7      	bls.n	8002e8c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002ebc:	bf00      	nop
 8002ebe:	3714      	adds	r7, #20
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr
 8002ec8:	20008ad8 	.word	0x20008ad8

08002ecc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b086      	sub	sp, #24
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002edc:	f001 fc74 	bl	80047c8 <vPortEnterCritical>
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ee6:	b25b      	sxtb	r3, r3
 8002ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eec:	d103      	bne.n	8002ef6 <vQueueWaitForMessageRestricted+0x2a>
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002efc:	b25b      	sxtb	r3, r3
 8002efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f02:	d103      	bne.n	8002f0c <vQueueWaitForMessageRestricted+0x40>
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f0c:	f001 fc8e 	bl	800482c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d106      	bne.n	8002f26 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	3324      	adds	r3, #36	; 0x24
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	68b9      	ldr	r1, [r7, #8]
 8002f20:	4618      	mov	r0, r3
 8002f22:	f000 fc41 	bl	80037a8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002f26:	6978      	ldr	r0, [r7, #20]
 8002f28:	f7ff ff28 	bl	8002d7c <prvUnlockQueue>
	}
 8002f2c:	bf00      	nop
 8002f2e:	3718      	adds	r7, #24
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b08e      	sub	sp, #56	; 0x38
 8002f38:	af04      	add	r7, sp, #16
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607a      	str	r2, [r7, #4]
 8002f40:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d10b      	bne.n	8002f60 <xTaskCreateStatic+0x2c>
 8002f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f4c:	b672      	cpsid	i
 8002f4e:	f383 8811 	msr	BASEPRI, r3
 8002f52:	f3bf 8f6f 	isb	sy
 8002f56:	f3bf 8f4f 	dsb	sy
 8002f5a:	b662      	cpsie	i
 8002f5c:	623b      	str	r3, [r7, #32]
 8002f5e:	e7fe      	b.n	8002f5e <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8002f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d10b      	bne.n	8002f7e <xTaskCreateStatic+0x4a>
 8002f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f6a:	b672      	cpsid	i
 8002f6c:	f383 8811 	msr	BASEPRI, r3
 8002f70:	f3bf 8f6f 	isb	sy
 8002f74:	f3bf 8f4f 	dsb	sy
 8002f78:	b662      	cpsie	i
 8002f7a:	61fb      	str	r3, [r7, #28]
 8002f7c:	e7fe      	b.n	8002f7c <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002f7e:	235c      	movs	r3, #92	; 0x5c
 8002f80:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	2b5c      	cmp	r3, #92	; 0x5c
 8002f86:	d00b      	beq.n	8002fa0 <xTaskCreateStatic+0x6c>
 8002f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f8c:	b672      	cpsid	i
 8002f8e:	f383 8811 	msr	BASEPRI, r3
 8002f92:	f3bf 8f6f 	isb	sy
 8002f96:	f3bf 8f4f 	dsb	sy
 8002f9a:	b662      	cpsie	i
 8002f9c:	61bb      	str	r3, [r7, #24]
 8002f9e:	e7fe      	b.n	8002f9e <xTaskCreateStatic+0x6a>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d01e      	beq.n	8002fe4 <xTaskCreateStatic+0xb0>
 8002fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d01b      	beq.n	8002fe4 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fb4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb8:	2202      	movs	r2, #2
 8002fba:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	9303      	str	r3, [sp, #12]
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc4:	9302      	str	r3, [sp, #8]
 8002fc6:	f107 0314 	add.w	r3, r7, #20
 8002fca:	9301      	str	r3, [sp, #4]
 8002fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fce:	9300      	str	r3, [sp, #0]
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	68b9      	ldr	r1, [r7, #8]
 8002fd6:	68f8      	ldr	r0, [r7, #12]
 8002fd8:	f000 f850 	bl	800307c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002fdc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002fde:	f000 f8d5 	bl	800318c <prvAddNewTaskToReadyList>
 8002fe2:	e001      	b.n	8002fe8 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002fe8:	697b      	ldr	r3, [r7, #20]
	}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3728      	adds	r7, #40	; 0x28
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b08c      	sub	sp, #48	; 0x30
 8002ff6:	af04      	add	r7, sp, #16
 8002ff8:	60f8      	str	r0, [r7, #12]
 8002ffa:	60b9      	str	r1, [r7, #8]
 8002ffc:	603b      	str	r3, [r7, #0]
 8002ffe:	4613      	mov	r3, r2
 8003000:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003002:	88fb      	ldrh	r3, [r7, #6]
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	4618      	mov	r0, r3
 8003008:	f001 fd00 	bl	8004a0c <pvPortMalloc>
 800300c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d00e      	beq.n	8003032 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003014:	205c      	movs	r0, #92	; 0x5c
 8003016:	f001 fcf9 	bl	8004a0c <pvPortMalloc>
 800301a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d003      	beq.n	800302a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	697a      	ldr	r2, [r7, #20]
 8003026:	631a      	str	r2, [r3, #48]	; 0x30
 8003028:	e005      	b.n	8003036 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800302a:	6978      	ldr	r0, [r7, #20]
 800302c:	f001 fdb6 	bl	8004b9c <vPortFree>
 8003030:	e001      	b.n	8003036 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003032:	2300      	movs	r3, #0
 8003034:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d017      	beq.n	800306c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003044:	88fa      	ldrh	r2, [r7, #6]
 8003046:	2300      	movs	r3, #0
 8003048:	9303      	str	r3, [sp, #12]
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	9302      	str	r3, [sp, #8]
 800304e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003050:	9301      	str	r3, [sp, #4]
 8003052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003054:	9300      	str	r3, [sp, #0]
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	68b9      	ldr	r1, [r7, #8]
 800305a:	68f8      	ldr	r0, [r7, #12]
 800305c:	f000 f80e 	bl	800307c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003060:	69f8      	ldr	r0, [r7, #28]
 8003062:	f000 f893 	bl	800318c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003066:	2301      	movs	r3, #1
 8003068:	61bb      	str	r3, [r7, #24]
 800306a:	e002      	b.n	8003072 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800306c:	f04f 33ff 	mov.w	r3, #4294967295
 8003070:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003072:	69bb      	ldr	r3, [r7, #24]
	}
 8003074:	4618      	mov	r0, r3
 8003076:	3720      	adds	r7, #32
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b088      	sub	sp, #32
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	607a      	str	r2, [r7, #4]
 8003088:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800308a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800308c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	461a      	mov	r2, r3
 8003094:	21a5      	movs	r1, #165	; 0xa5
 8003096:	f001 fec8 	bl	8004e2a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800309a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800309c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800309e:	6879      	ldr	r1, [r7, #4]
 80030a0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80030a4:	440b      	add	r3, r1
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	4413      	add	r3, r2
 80030aa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	f023 0307 	bic.w	r3, r3, #7
 80030b2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	f003 0307 	and.w	r3, r3, #7
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d00b      	beq.n	80030d6 <prvInitialiseNewTask+0x5a>
 80030be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c2:	b672      	cpsid	i
 80030c4:	f383 8811 	msr	BASEPRI, r3
 80030c8:	f3bf 8f6f 	isb	sy
 80030cc:	f3bf 8f4f 	dsb	sy
 80030d0:	b662      	cpsie	i
 80030d2:	617b      	str	r3, [r7, #20]
 80030d4:	e7fe      	b.n	80030d4 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80030d6:	2300      	movs	r3, #0
 80030d8:	61fb      	str	r3, [r7, #28]
 80030da:	e012      	b.n	8003102 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80030dc:	68ba      	ldr	r2, [r7, #8]
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	4413      	add	r3, r2
 80030e2:	7819      	ldrb	r1, [r3, #0]
 80030e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	4413      	add	r3, r2
 80030ea:	3334      	adds	r3, #52	; 0x34
 80030ec:	460a      	mov	r2, r1
 80030ee:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80030f0:	68ba      	ldr	r2, [r7, #8]
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	4413      	add	r3, r2
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d006      	beq.n	800310a <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	3301      	adds	r3, #1
 8003100:	61fb      	str	r3, [r7, #28]
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	2b0f      	cmp	r3, #15
 8003106:	d9e9      	bls.n	80030dc <prvInitialiseNewTask+0x60>
 8003108:	e000      	b.n	800310c <prvInitialiseNewTask+0x90>
		{
			break;
 800310a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800310c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800310e:	2200      	movs	r2, #0
 8003110:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003116:	2b37      	cmp	r3, #55	; 0x37
 8003118:	d901      	bls.n	800311e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800311a:	2337      	movs	r3, #55	; 0x37
 800311c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800311e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003120:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003122:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003126:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003128:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800312a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800312c:	2200      	movs	r2, #0
 800312e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003132:	3304      	adds	r3, #4
 8003134:	4618      	mov	r0, r3
 8003136:	f7fe ff53 	bl	8001fe0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800313a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800313c:	3318      	adds	r3, #24
 800313e:	4618      	mov	r0, r3
 8003140:	f7fe ff4e 	bl	8001fe0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003146:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003148:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800314a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800314c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003152:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003156:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003158:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800315a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800315c:	2200      	movs	r2, #0
 800315e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003162:	2200      	movs	r2, #0
 8003164:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003168:	683a      	ldr	r2, [r7, #0]
 800316a:	68f9      	ldr	r1, [r7, #12]
 800316c:	69b8      	ldr	r0, [r7, #24]
 800316e:	f001 fa1f 	bl	80045b0 <pxPortInitialiseStack>
 8003172:	4602      	mov	r2, r0
 8003174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003176:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800317a:	2b00      	cmp	r3, #0
 800317c:	d002      	beq.n	8003184 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800317e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003180:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003182:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003184:	bf00      	nop
 8003186:	3720      	adds	r7, #32
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003194:	f001 fb18 	bl	80047c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003198:	4b2d      	ldr	r3, [pc, #180]	; (8003250 <prvAddNewTaskToReadyList+0xc4>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	3301      	adds	r3, #1
 800319e:	4a2c      	ldr	r2, [pc, #176]	; (8003250 <prvAddNewTaskToReadyList+0xc4>)
 80031a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80031a2:	4b2c      	ldr	r3, [pc, #176]	; (8003254 <prvAddNewTaskToReadyList+0xc8>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d109      	bne.n	80031be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80031aa:	4a2a      	ldr	r2, [pc, #168]	; (8003254 <prvAddNewTaskToReadyList+0xc8>)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80031b0:	4b27      	ldr	r3, [pc, #156]	; (8003250 <prvAddNewTaskToReadyList+0xc4>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d110      	bne.n	80031da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80031b8:	f000 fc24 	bl	8003a04 <prvInitialiseTaskLists>
 80031bc:	e00d      	b.n	80031da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80031be:	4b26      	ldr	r3, [pc, #152]	; (8003258 <prvAddNewTaskToReadyList+0xcc>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d109      	bne.n	80031da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80031c6:	4b23      	ldr	r3, [pc, #140]	; (8003254 <prvAddNewTaskToReadyList+0xc8>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d802      	bhi.n	80031da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80031d4:	4a1f      	ldr	r2, [pc, #124]	; (8003254 <prvAddNewTaskToReadyList+0xc8>)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80031da:	4b20      	ldr	r3, [pc, #128]	; (800325c <prvAddNewTaskToReadyList+0xd0>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	3301      	adds	r3, #1
 80031e0:	4a1e      	ldr	r2, [pc, #120]	; (800325c <prvAddNewTaskToReadyList+0xd0>)
 80031e2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80031e4:	4b1d      	ldr	r3, [pc, #116]	; (800325c <prvAddNewTaskToReadyList+0xd0>)
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031f0:	4b1b      	ldr	r3, [pc, #108]	; (8003260 <prvAddNewTaskToReadyList+0xd4>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d903      	bls.n	8003200 <prvAddNewTaskToReadyList+0x74>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031fc:	4a18      	ldr	r2, [pc, #96]	; (8003260 <prvAddNewTaskToReadyList+0xd4>)
 80031fe:	6013      	str	r3, [r2, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003204:	4613      	mov	r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	4413      	add	r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	4a15      	ldr	r2, [pc, #84]	; (8003264 <prvAddNewTaskToReadyList+0xd8>)
 800320e:	441a      	add	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	3304      	adds	r3, #4
 8003214:	4619      	mov	r1, r3
 8003216:	4610      	mov	r0, r2
 8003218:	f7fe feef 	bl	8001ffa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800321c:	f001 fb06 	bl	800482c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003220:	4b0d      	ldr	r3, [pc, #52]	; (8003258 <prvAddNewTaskToReadyList+0xcc>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d00e      	beq.n	8003246 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003228:	4b0a      	ldr	r3, [pc, #40]	; (8003254 <prvAddNewTaskToReadyList+0xc8>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003232:	429a      	cmp	r2, r3
 8003234:	d207      	bcs.n	8003246 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003236:	4b0c      	ldr	r3, [pc, #48]	; (8003268 <prvAddNewTaskToReadyList+0xdc>)
 8003238:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800323c:	601a      	str	r2, [r3, #0]
 800323e:	f3bf 8f4f 	dsb	sy
 8003242:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003246:	bf00      	nop
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	20000bb8 	.word	0x20000bb8
 8003254:	200006e4 	.word	0x200006e4
 8003258:	20000bc4 	.word	0x20000bc4
 800325c:	20000bd4 	.word	0x20000bd4
 8003260:	20000bc0 	.word	0x20000bc0
 8003264:	200006e8 	.word	0x200006e8
 8003268:	e000ed04 	.word	0xe000ed04

0800326c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003274:	2300      	movs	r3, #0
 8003276:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d018      	beq.n	80032b0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800327e:	4b14      	ldr	r3, [pc, #80]	; (80032d0 <vTaskDelay+0x64>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00b      	beq.n	800329e <vTaskDelay+0x32>
 8003286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800328a:	b672      	cpsid	i
 800328c:	f383 8811 	msr	BASEPRI, r3
 8003290:	f3bf 8f6f 	isb	sy
 8003294:	f3bf 8f4f 	dsb	sy
 8003298:	b662      	cpsie	i
 800329a:	60bb      	str	r3, [r7, #8]
 800329c:	e7fe      	b.n	800329c <vTaskDelay+0x30>
			vTaskSuspendAll();
 800329e:	f000 f883 	bl	80033a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80032a2:	2100      	movs	r1, #0
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f000 fe17 	bl	8003ed8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80032aa:	f000 f88b 	bl	80033c4 <xTaskResumeAll>
 80032ae:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d107      	bne.n	80032c6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80032b6:	4b07      	ldr	r3, [pc, #28]	; (80032d4 <vTaskDelay+0x68>)
 80032b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032bc:	601a      	str	r2, [r3, #0]
 80032be:	f3bf 8f4f 	dsb	sy
 80032c2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80032c6:	bf00      	nop
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	20000be0 	.word	0x20000be0
 80032d4:	e000ed04 	.word	0xe000ed04

080032d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b08a      	sub	sp, #40	; 0x28
 80032dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80032de:	2300      	movs	r3, #0
 80032e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80032e2:	2300      	movs	r3, #0
 80032e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80032e6:	463a      	mov	r2, r7
 80032e8:	1d39      	adds	r1, r7, #4
 80032ea:	f107 0308 	add.w	r3, r7, #8
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7fe fe22 	bl	8001f38 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80032f4:	6839      	ldr	r1, [r7, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	68ba      	ldr	r2, [r7, #8]
 80032fa:	9202      	str	r2, [sp, #8]
 80032fc:	9301      	str	r3, [sp, #4]
 80032fe:	2300      	movs	r3, #0
 8003300:	9300      	str	r3, [sp, #0]
 8003302:	2300      	movs	r3, #0
 8003304:	460a      	mov	r2, r1
 8003306:	4922      	ldr	r1, [pc, #136]	; (8003390 <vTaskStartScheduler+0xb8>)
 8003308:	4822      	ldr	r0, [pc, #136]	; (8003394 <vTaskStartScheduler+0xbc>)
 800330a:	f7ff fe13 	bl	8002f34 <xTaskCreateStatic>
 800330e:	4602      	mov	r2, r0
 8003310:	4b21      	ldr	r3, [pc, #132]	; (8003398 <vTaskStartScheduler+0xc0>)
 8003312:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003314:	4b20      	ldr	r3, [pc, #128]	; (8003398 <vTaskStartScheduler+0xc0>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d002      	beq.n	8003322 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800331c:	2301      	movs	r3, #1
 800331e:	617b      	str	r3, [r7, #20]
 8003320:	e001      	b.n	8003326 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003322:	2300      	movs	r3, #0
 8003324:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d102      	bne.n	8003332 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800332c:	f000 fe28 	bl	8003f80 <xTimerCreateTimerTask>
 8003330:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d117      	bne.n	8003368 <vTaskStartScheduler+0x90>
 8003338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800333c:	b672      	cpsid	i
 800333e:	f383 8811 	msr	BASEPRI, r3
 8003342:	f3bf 8f6f 	isb	sy
 8003346:	f3bf 8f4f 	dsb	sy
 800334a:	b662      	cpsie	i
 800334c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800334e:	4b13      	ldr	r3, [pc, #76]	; (800339c <vTaskStartScheduler+0xc4>)
 8003350:	f04f 32ff 	mov.w	r2, #4294967295
 8003354:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003356:	4b12      	ldr	r3, [pc, #72]	; (80033a0 <vTaskStartScheduler+0xc8>)
 8003358:	2201      	movs	r2, #1
 800335a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800335c:	4b11      	ldr	r3, [pc, #68]	; (80033a4 <vTaskStartScheduler+0xcc>)
 800335e:	2200      	movs	r2, #0
 8003360:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003362:	f001 f9b5 	bl	80046d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003366:	e00f      	b.n	8003388 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800336e:	d10b      	bne.n	8003388 <vTaskStartScheduler+0xb0>
 8003370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003374:	b672      	cpsid	i
 8003376:	f383 8811 	msr	BASEPRI, r3
 800337a:	f3bf 8f6f 	isb	sy
 800337e:	f3bf 8f4f 	dsb	sy
 8003382:	b662      	cpsie	i
 8003384:	60fb      	str	r3, [r7, #12]
 8003386:	e7fe      	b.n	8003386 <vTaskStartScheduler+0xae>
}
 8003388:	bf00      	nop
 800338a:	3718      	adds	r7, #24
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	08004eb8 	.word	0x08004eb8
 8003394:	080039d5 	.word	0x080039d5
 8003398:	20000bdc 	.word	0x20000bdc
 800339c:	20000bd8 	.word	0x20000bd8
 80033a0:	20000bc4 	.word	0x20000bc4
 80033a4:	20000bbc 	.word	0x20000bbc

080033a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80033ac:	4b04      	ldr	r3, [pc, #16]	; (80033c0 <vTaskSuspendAll+0x18>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	3301      	adds	r3, #1
 80033b2:	4a03      	ldr	r2, [pc, #12]	; (80033c0 <vTaskSuspendAll+0x18>)
 80033b4:	6013      	str	r3, [r2, #0]
}
 80033b6:	bf00      	nop
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr
 80033c0:	20000be0 	.word	0x20000be0

080033c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80033ca:	2300      	movs	r3, #0
 80033cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80033ce:	2300      	movs	r3, #0
 80033d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80033d2:	4b42      	ldr	r3, [pc, #264]	; (80034dc <xTaskResumeAll+0x118>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d10b      	bne.n	80033f2 <xTaskResumeAll+0x2e>
 80033da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033de:	b672      	cpsid	i
 80033e0:	f383 8811 	msr	BASEPRI, r3
 80033e4:	f3bf 8f6f 	isb	sy
 80033e8:	f3bf 8f4f 	dsb	sy
 80033ec:	b662      	cpsie	i
 80033ee:	603b      	str	r3, [r7, #0]
 80033f0:	e7fe      	b.n	80033f0 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80033f2:	f001 f9e9 	bl	80047c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80033f6:	4b39      	ldr	r3, [pc, #228]	; (80034dc <xTaskResumeAll+0x118>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	3b01      	subs	r3, #1
 80033fc:	4a37      	ldr	r2, [pc, #220]	; (80034dc <xTaskResumeAll+0x118>)
 80033fe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003400:	4b36      	ldr	r3, [pc, #216]	; (80034dc <xTaskResumeAll+0x118>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d162      	bne.n	80034ce <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003408:	4b35      	ldr	r3, [pc, #212]	; (80034e0 <xTaskResumeAll+0x11c>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d05e      	beq.n	80034ce <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003410:	e02f      	b.n	8003472 <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003412:	4b34      	ldr	r3, [pc, #208]	; (80034e4 <xTaskResumeAll+0x120>)
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	3318      	adds	r3, #24
 800341e:	4618      	mov	r0, r3
 8003420:	f7fe fe48 	bl	80020b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	3304      	adds	r3, #4
 8003428:	4618      	mov	r0, r3
 800342a:	f7fe fe43 	bl	80020b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003432:	4b2d      	ldr	r3, [pc, #180]	; (80034e8 <xTaskResumeAll+0x124>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	429a      	cmp	r2, r3
 8003438:	d903      	bls.n	8003442 <xTaskResumeAll+0x7e>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800343e:	4a2a      	ldr	r2, [pc, #168]	; (80034e8 <xTaskResumeAll+0x124>)
 8003440:	6013      	str	r3, [r2, #0]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003446:	4613      	mov	r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	4413      	add	r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	4a27      	ldr	r2, [pc, #156]	; (80034ec <xTaskResumeAll+0x128>)
 8003450:	441a      	add	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	3304      	adds	r3, #4
 8003456:	4619      	mov	r1, r3
 8003458:	4610      	mov	r0, r2
 800345a:	f7fe fdce 	bl	8001ffa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003462:	4b23      	ldr	r3, [pc, #140]	; (80034f0 <xTaskResumeAll+0x12c>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003468:	429a      	cmp	r2, r3
 800346a:	d302      	bcc.n	8003472 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800346c:	4b21      	ldr	r3, [pc, #132]	; (80034f4 <xTaskResumeAll+0x130>)
 800346e:	2201      	movs	r2, #1
 8003470:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003472:	4b1c      	ldr	r3, [pc, #112]	; (80034e4 <xTaskResumeAll+0x120>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1cb      	bne.n	8003412 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003480:	f000 fb5c 	bl	8003b3c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003484:	4b1c      	ldr	r3, [pc, #112]	; (80034f8 <xTaskResumeAll+0x134>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d010      	beq.n	80034b2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003490:	f000 f846 	bl	8003520 <xTaskIncrementTick>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d002      	beq.n	80034a0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800349a:	4b16      	ldr	r3, [pc, #88]	; (80034f4 <xTaskResumeAll+0x130>)
 800349c:	2201      	movs	r2, #1
 800349e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	3b01      	subs	r3, #1
 80034a4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d1f1      	bne.n	8003490 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80034ac:	4b12      	ldr	r3, [pc, #72]	; (80034f8 <xTaskResumeAll+0x134>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80034b2:	4b10      	ldr	r3, [pc, #64]	; (80034f4 <xTaskResumeAll+0x130>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d009      	beq.n	80034ce <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80034ba:	2301      	movs	r3, #1
 80034bc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80034be:	4b0f      	ldr	r3, [pc, #60]	; (80034fc <xTaskResumeAll+0x138>)
 80034c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034c4:	601a      	str	r2, [r3, #0]
 80034c6:	f3bf 8f4f 	dsb	sy
 80034ca:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80034ce:	f001 f9ad 	bl	800482c <vPortExitCritical>

	return xAlreadyYielded;
 80034d2:	68bb      	ldr	r3, [r7, #8]
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3710      	adds	r7, #16
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	20000be0 	.word	0x20000be0
 80034e0:	20000bb8 	.word	0x20000bb8
 80034e4:	20000b78 	.word	0x20000b78
 80034e8:	20000bc0 	.word	0x20000bc0
 80034ec:	200006e8 	.word	0x200006e8
 80034f0:	200006e4 	.word	0x200006e4
 80034f4:	20000bcc 	.word	0x20000bcc
 80034f8:	20000bc8 	.word	0x20000bc8
 80034fc:	e000ed04 	.word	0xe000ed04

08003500 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003506:	4b05      	ldr	r3, [pc, #20]	; (800351c <xTaskGetTickCount+0x1c>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800350c:	687b      	ldr	r3, [r7, #4]
}
 800350e:	4618      	mov	r0, r3
 8003510:	370c      	adds	r7, #12
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop
 800351c:	20000bbc 	.word	0x20000bbc

08003520 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003526:	2300      	movs	r3, #0
 8003528:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800352a:	4b52      	ldr	r3, [pc, #328]	; (8003674 <xTaskIncrementTick+0x154>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2b00      	cmp	r3, #0
 8003530:	f040 808f 	bne.w	8003652 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003534:	4b50      	ldr	r3, [pc, #320]	; (8003678 <xTaskIncrementTick+0x158>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	3301      	adds	r3, #1
 800353a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800353c:	4a4e      	ldr	r2, [pc, #312]	; (8003678 <xTaskIncrementTick+0x158>)
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d121      	bne.n	800358c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003548:	4b4c      	ldr	r3, [pc, #304]	; (800367c <xTaskIncrementTick+0x15c>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00b      	beq.n	800356a <xTaskIncrementTick+0x4a>
 8003552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003556:	b672      	cpsid	i
 8003558:	f383 8811 	msr	BASEPRI, r3
 800355c:	f3bf 8f6f 	isb	sy
 8003560:	f3bf 8f4f 	dsb	sy
 8003564:	b662      	cpsie	i
 8003566:	603b      	str	r3, [r7, #0]
 8003568:	e7fe      	b.n	8003568 <xTaskIncrementTick+0x48>
 800356a:	4b44      	ldr	r3, [pc, #272]	; (800367c <xTaskIncrementTick+0x15c>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	60fb      	str	r3, [r7, #12]
 8003570:	4b43      	ldr	r3, [pc, #268]	; (8003680 <xTaskIncrementTick+0x160>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a41      	ldr	r2, [pc, #260]	; (800367c <xTaskIncrementTick+0x15c>)
 8003576:	6013      	str	r3, [r2, #0]
 8003578:	4a41      	ldr	r2, [pc, #260]	; (8003680 <xTaskIncrementTick+0x160>)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6013      	str	r3, [r2, #0]
 800357e:	4b41      	ldr	r3, [pc, #260]	; (8003684 <xTaskIncrementTick+0x164>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	3301      	adds	r3, #1
 8003584:	4a3f      	ldr	r2, [pc, #252]	; (8003684 <xTaskIncrementTick+0x164>)
 8003586:	6013      	str	r3, [r2, #0]
 8003588:	f000 fad8 	bl	8003b3c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800358c:	4b3e      	ldr	r3, [pc, #248]	; (8003688 <xTaskIncrementTick+0x168>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	429a      	cmp	r2, r3
 8003594:	d34e      	bcc.n	8003634 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003596:	4b39      	ldr	r3, [pc, #228]	; (800367c <xTaskIncrementTick+0x15c>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d101      	bne.n	80035a4 <xTaskIncrementTick+0x84>
 80035a0:	2301      	movs	r3, #1
 80035a2:	e000      	b.n	80035a6 <xTaskIncrementTick+0x86>
 80035a4:	2300      	movs	r3, #0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d004      	beq.n	80035b4 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035aa:	4b37      	ldr	r3, [pc, #220]	; (8003688 <xTaskIncrementTick+0x168>)
 80035ac:	f04f 32ff 	mov.w	r2, #4294967295
 80035b0:	601a      	str	r2, [r3, #0]
					break;
 80035b2:	e03f      	b.n	8003634 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80035b4:	4b31      	ldr	r3, [pc, #196]	; (800367c <xTaskIncrementTick+0x15c>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d203      	bcs.n	80035d4 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80035cc:	4a2e      	ldr	r2, [pc, #184]	; (8003688 <xTaskIncrementTick+0x168>)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6013      	str	r3, [r2, #0]
						break;
 80035d2:	e02f      	b.n	8003634 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	3304      	adds	r3, #4
 80035d8:	4618      	mov	r0, r3
 80035da:	f7fe fd6b 	bl	80020b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d004      	beq.n	80035f0 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	3318      	adds	r3, #24
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7fe fd62 	bl	80020b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035f4:	4b25      	ldr	r3, [pc, #148]	; (800368c <xTaskIncrementTick+0x16c>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d903      	bls.n	8003604 <xTaskIncrementTick+0xe4>
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003600:	4a22      	ldr	r2, [pc, #136]	; (800368c <xTaskIncrementTick+0x16c>)
 8003602:	6013      	str	r3, [r2, #0]
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003608:	4613      	mov	r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	4413      	add	r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	4a1f      	ldr	r2, [pc, #124]	; (8003690 <xTaskIncrementTick+0x170>)
 8003612:	441a      	add	r2, r3
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	3304      	adds	r3, #4
 8003618:	4619      	mov	r1, r3
 800361a:	4610      	mov	r0, r2
 800361c:	f7fe fced 	bl	8001ffa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003624:	4b1b      	ldr	r3, [pc, #108]	; (8003694 <xTaskIncrementTick+0x174>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362a:	429a      	cmp	r2, r3
 800362c:	d3b3      	bcc.n	8003596 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800362e:	2301      	movs	r3, #1
 8003630:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003632:	e7b0      	b.n	8003596 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003634:	4b17      	ldr	r3, [pc, #92]	; (8003694 <xTaskIncrementTick+0x174>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800363a:	4915      	ldr	r1, [pc, #84]	; (8003690 <xTaskIncrementTick+0x170>)
 800363c:	4613      	mov	r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	4413      	add	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	440b      	add	r3, r1
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d907      	bls.n	800365c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800364c:	2301      	movs	r3, #1
 800364e:	617b      	str	r3, [r7, #20]
 8003650:	e004      	b.n	800365c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003652:	4b11      	ldr	r3, [pc, #68]	; (8003698 <xTaskIncrementTick+0x178>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	3301      	adds	r3, #1
 8003658:	4a0f      	ldr	r2, [pc, #60]	; (8003698 <xTaskIncrementTick+0x178>)
 800365a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800365c:	4b0f      	ldr	r3, [pc, #60]	; (800369c <xTaskIncrementTick+0x17c>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d001      	beq.n	8003668 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 8003664:	2301      	movs	r3, #1
 8003666:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003668:	697b      	ldr	r3, [r7, #20]
}
 800366a:	4618      	mov	r0, r3
 800366c:	3718      	adds	r7, #24
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	20000be0 	.word	0x20000be0
 8003678:	20000bbc 	.word	0x20000bbc
 800367c:	20000b70 	.word	0x20000b70
 8003680:	20000b74 	.word	0x20000b74
 8003684:	20000bd0 	.word	0x20000bd0
 8003688:	20000bd8 	.word	0x20000bd8
 800368c:	20000bc0 	.word	0x20000bc0
 8003690:	200006e8 	.word	0x200006e8
 8003694:	200006e4 	.word	0x200006e4
 8003698:	20000bc8 	.word	0x20000bc8
 800369c:	20000bcc 	.word	0x20000bcc

080036a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80036a0:	b480      	push	{r7}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80036a6:	4b28      	ldr	r3, [pc, #160]	; (8003748 <vTaskSwitchContext+0xa8>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d003      	beq.n	80036b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80036ae:	4b27      	ldr	r3, [pc, #156]	; (800374c <vTaskSwitchContext+0xac>)
 80036b0:	2201      	movs	r2, #1
 80036b2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80036b4:	e042      	b.n	800373c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80036b6:	4b25      	ldr	r3, [pc, #148]	; (800374c <vTaskSwitchContext+0xac>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80036bc:	4b24      	ldr	r3, [pc, #144]	; (8003750 <vTaskSwitchContext+0xb0>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	60fb      	str	r3, [r7, #12]
 80036c2:	e011      	b.n	80036e8 <vTaskSwitchContext+0x48>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10b      	bne.n	80036e2 <vTaskSwitchContext+0x42>
 80036ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ce:	b672      	cpsid	i
 80036d0:	f383 8811 	msr	BASEPRI, r3
 80036d4:	f3bf 8f6f 	isb	sy
 80036d8:	f3bf 8f4f 	dsb	sy
 80036dc:	b662      	cpsie	i
 80036de:	607b      	str	r3, [r7, #4]
 80036e0:	e7fe      	b.n	80036e0 <vTaskSwitchContext+0x40>
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	3b01      	subs	r3, #1
 80036e6:	60fb      	str	r3, [r7, #12]
 80036e8:	491a      	ldr	r1, [pc, #104]	; (8003754 <vTaskSwitchContext+0xb4>)
 80036ea:	68fa      	ldr	r2, [r7, #12]
 80036ec:	4613      	mov	r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	4413      	add	r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	440b      	add	r3, r1
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d0e3      	beq.n	80036c4 <vTaskSwitchContext+0x24>
 80036fc:	68fa      	ldr	r2, [r7, #12]
 80036fe:	4613      	mov	r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	4413      	add	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	4a13      	ldr	r2, [pc, #76]	; (8003754 <vTaskSwitchContext+0xb4>)
 8003708:	4413      	add	r3, r2
 800370a:	60bb      	str	r3, [r7, #8]
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	685a      	ldr	r2, [r3, #4]
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	605a      	str	r2, [r3, #4]
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	685a      	ldr	r2, [r3, #4]
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	3308      	adds	r3, #8
 800371e:	429a      	cmp	r2, r3
 8003720:	d104      	bne.n	800372c <vTaskSwitchContext+0x8c>
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	685a      	ldr	r2, [r3, #4]
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	605a      	str	r2, [r3, #4]
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	4a09      	ldr	r2, [pc, #36]	; (8003758 <vTaskSwitchContext+0xb8>)
 8003734:	6013      	str	r3, [r2, #0]
 8003736:	4a06      	ldr	r2, [pc, #24]	; (8003750 <vTaskSwitchContext+0xb0>)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6013      	str	r3, [r2, #0]
}
 800373c:	bf00      	nop
 800373e:	3714      	adds	r7, #20
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr
 8003748:	20000be0 	.word	0x20000be0
 800374c:	20000bcc 	.word	0x20000bcc
 8003750:	20000bc0 	.word	0x20000bc0
 8003754:	200006e8 	.word	0x200006e8
 8003758:	200006e4 	.word	0x200006e4

0800375c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d10b      	bne.n	8003784 <vTaskPlaceOnEventList+0x28>
 800376c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003770:	b672      	cpsid	i
 8003772:	f383 8811 	msr	BASEPRI, r3
 8003776:	f3bf 8f6f 	isb	sy
 800377a:	f3bf 8f4f 	dsb	sy
 800377e:	b662      	cpsie	i
 8003780:	60fb      	str	r3, [r7, #12]
 8003782:	e7fe      	b.n	8003782 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003784:	4b07      	ldr	r3, [pc, #28]	; (80037a4 <vTaskPlaceOnEventList+0x48>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	3318      	adds	r3, #24
 800378a:	4619      	mov	r1, r3
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f7fe fc58 	bl	8002042 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003792:	2101      	movs	r1, #1
 8003794:	6838      	ldr	r0, [r7, #0]
 8003796:	f000 fb9f 	bl	8003ed8 <prvAddCurrentTaskToDelayedList>
}
 800379a:	bf00      	nop
 800379c:	3710      	adds	r7, #16
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	200006e4 	.word	0x200006e4

080037a8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b086      	sub	sp, #24
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d10b      	bne.n	80037d2 <vTaskPlaceOnEventListRestricted+0x2a>
 80037ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037be:	b672      	cpsid	i
 80037c0:	f383 8811 	msr	BASEPRI, r3
 80037c4:	f3bf 8f6f 	isb	sy
 80037c8:	f3bf 8f4f 	dsb	sy
 80037cc:	b662      	cpsie	i
 80037ce:	617b      	str	r3, [r7, #20]
 80037d0:	e7fe      	b.n	80037d0 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80037d2:	4b0a      	ldr	r3, [pc, #40]	; (80037fc <vTaskPlaceOnEventListRestricted+0x54>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	3318      	adds	r3, #24
 80037d8:	4619      	mov	r1, r3
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	f7fe fc0d 	bl	8001ffa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d002      	beq.n	80037ec <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80037e6:	f04f 33ff 	mov.w	r3, #4294967295
 80037ea:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80037ec:	6879      	ldr	r1, [r7, #4]
 80037ee:	68b8      	ldr	r0, [r7, #8]
 80037f0:	f000 fb72 	bl	8003ed8 <prvAddCurrentTaskToDelayedList>
	}
 80037f4:	bf00      	nop
 80037f6:	3718      	adds	r7, #24
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	200006e4 	.word	0x200006e4

08003800 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b086      	sub	sp, #24
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d10b      	bne.n	800382e <xTaskRemoveFromEventList+0x2e>
 8003816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800381a:	b672      	cpsid	i
 800381c:	f383 8811 	msr	BASEPRI, r3
 8003820:	f3bf 8f6f 	isb	sy
 8003824:	f3bf 8f4f 	dsb	sy
 8003828:	b662      	cpsie	i
 800382a:	60fb      	str	r3, [r7, #12]
 800382c:	e7fe      	b.n	800382c <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	3318      	adds	r3, #24
 8003832:	4618      	mov	r0, r3
 8003834:	f7fe fc3e 	bl	80020b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003838:	4b1d      	ldr	r3, [pc, #116]	; (80038b0 <xTaskRemoveFromEventList+0xb0>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d11d      	bne.n	800387c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	3304      	adds	r3, #4
 8003844:	4618      	mov	r0, r3
 8003846:	f7fe fc35 	bl	80020b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800384e:	4b19      	ldr	r3, [pc, #100]	; (80038b4 <xTaskRemoveFromEventList+0xb4>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	429a      	cmp	r2, r3
 8003854:	d903      	bls.n	800385e <xTaskRemoveFromEventList+0x5e>
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385a:	4a16      	ldr	r2, [pc, #88]	; (80038b4 <xTaskRemoveFromEventList+0xb4>)
 800385c:	6013      	str	r3, [r2, #0]
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003862:	4613      	mov	r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	4413      	add	r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	4a13      	ldr	r2, [pc, #76]	; (80038b8 <xTaskRemoveFromEventList+0xb8>)
 800386c:	441a      	add	r2, r3
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	3304      	adds	r3, #4
 8003872:	4619      	mov	r1, r3
 8003874:	4610      	mov	r0, r2
 8003876:	f7fe fbc0 	bl	8001ffa <vListInsertEnd>
 800387a:	e005      	b.n	8003888 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	3318      	adds	r3, #24
 8003880:	4619      	mov	r1, r3
 8003882:	480e      	ldr	r0, [pc, #56]	; (80038bc <xTaskRemoveFromEventList+0xbc>)
 8003884:	f7fe fbb9 	bl	8001ffa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800388c:	4b0c      	ldr	r3, [pc, #48]	; (80038c0 <xTaskRemoveFromEventList+0xc0>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003892:	429a      	cmp	r2, r3
 8003894:	d905      	bls.n	80038a2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003896:	2301      	movs	r3, #1
 8003898:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800389a:	4b0a      	ldr	r3, [pc, #40]	; (80038c4 <xTaskRemoveFromEventList+0xc4>)
 800389c:	2201      	movs	r2, #1
 800389e:	601a      	str	r2, [r3, #0]
 80038a0:	e001      	b.n	80038a6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80038a2:	2300      	movs	r3, #0
 80038a4:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80038a6:	697b      	ldr	r3, [r7, #20]
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3718      	adds	r7, #24
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	20000be0 	.word	0x20000be0
 80038b4:	20000bc0 	.word	0x20000bc0
 80038b8:	200006e8 	.word	0x200006e8
 80038bc:	20000b78 	.word	0x20000b78
 80038c0:	200006e4 	.word	0x200006e4
 80038c4:	20000bcc 	.word	0x20000bcc

080038c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80038d0:	4b06      	ldr	r3, [pc, #24]	; (80038ec <vTaskInternalSetTimeOutState+0x24>)
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80038d8:	4b05      	ldr	r3, [pc, #20]	; (80038f0 <vTaskInternalSetTimeOutState+0x28>)
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	605a      	str	r2, [r3, #4]
}
 80038e0:	bf00      	nop
 80038e2:	370c      	adds	r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr
 80038ec:	20000bd0 	.word	0x20000bd0
 80038f0:	20000bbc 	.word	0x20000bbc

080038f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b088      	sub	sp, #32
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d10b      	bne.n	800391c <xTaskCheckForTimeOut+0x28>
 8003904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003908:	b672      	cpsid	i
 800390a:	f383 8811 	msr	BASEPRI, r3
 800390e:	f3bf 8f6f 	isb	sy
 8003912:	f3bf 8f4f 	dsb	sy
 8003916:	b662      	cpsie	i
 8003918:	613b      	str	r3, [r7, #16]
 800391a:	e7fe      	b.n	800391a <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d10b      	bne.n	800393a <xTaskCheckForTimeOut+0x46>
 8003922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003926:	b672      	cpsid	i
 8003928:	f383 8811 	msr	BASEPRI, r3
 800392c:	f3bf 8f6f 	isb	sy
 8003930:	f3bf 8f4f 	dsb	sy
 8003934:	b662      	cpsie	i
 8003936:	60fb      	str	r3, [r7, #12]
 8003938:	e7fe      	b.n	8003938 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800393a:	f000 ff45 	bl	80047c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800393e:	4b1d      	ldr	r3, [pc, #116]	; (80039b4 <xTaskCheckForTimeOut+0xc0>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003956:	d102      	bne.n	800395e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003958:	2300      	movs	r3, #0
 800395a:	61fb      	str	r3, [r7, #28]
 800395c:	e023      	b.n	80039a6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	4b15      	ldr	r3, [pc, #84]	; (80039b8 <xTaskCheckForTimeOut+0xc4>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	429a      	cmp	r2, r3
 8003968:	d007      	beq.n	800397a <xTaskCheckForTimeOut+0x86>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	69ba      	ldr	r2, [r7, #24]
 8003970:	429a      	cmp	r2, r3
 8003972:	d302      	bcc.n	800397a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003974:	2301      	movs	r3, #1
 8003976:	61fb      	str	r3, [r7, #28]
 8003978:	e015      	b.n	80039a6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	697a      	ldr	r2, [r7, #20]
 8003980:	429a      	cmp	r2, r3
 8003982:	d20b      	bcs.n	800399c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	1ad2      	subs	r2, r2, r3
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f7ff ff99 	bl	80038c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003996:	2300      	movs	r3, #0
 8003998:	61fb      	str	r3, [r7, #28]
 800399a:	e004      	b.n	80039a6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	2200      	movs	r2, #0
 80039a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80039a2:	2301      	movs	r3, #1
 80039a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80039a6:	f000 ff41 	bl	800482c <vPortExitCritical>

	return xReturn;
 80039aa:	69fb      	ldr	r3, [r7, #28]
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3720      	adds	r7, #32
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	20000bbc 	.word	0x20000bbc
 80039b8:	20000bd0 	.word	0x20000bd0

080039bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80039bc:	b480      	push	{r7}
 80039be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80039c0:	4b03      	ldr	r3, [pc, #12]	; (80039d0 <vTaskMissedYield+0x14>)
 80039c2:	2201      	movs	r2, #1
 80039c4:	601a      	str	r2, [r3, #0]
}
 80039c6:	bf00      	nop
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr
 80039d0:	20000bcc 	.word	0x20000bcc

080039d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80039dc:	f000 f852 	bl	8003a84 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80039e0:	4b06      	ldr	r3, [pc, #24]	; (80039fc <prvIdleTask+0x28>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d9f9      	bls.n	80039dc <prvIdleTask+0x8>
			{
				taskYIELD();
 80039e8:	4b05      	ldr	r3, [pc, #20]	; (8003a00 <prvIdleTask+0x2c>)
 80039ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039ee:	601a      	str	r2, [r3, #0]
 80039f0:	f3bf 8f4f 	dsb	sy
 80039f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80039f8:	e7f0      	b.n	80039dc <prvIdleTask+0x8>
 80039fa:	bf00      	nop
 80039fc:	200006e8 	.word	0x200006e8
 8003a00:	e000ed04 	.word	0xe000ed04

08003a04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	607b      	str	r3, [r7, #4]
 8003a0e:	e00c      	b.n	8003a2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	4613      	mov	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	4413      	add	r3, r2
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	4a12      	ldr	r2, [pc, #72]	; (8003a64 <prvInitialiseTaskLists+0x60>)
 8003a1c:	4413      	add	r3, r2
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7fe fabe 	bl	8001fa0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	3301      	adds	r3, #1
 8003a28:	607b      	str	r3, [r7, #4]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2b37      	cmp	r3, #55	; 0x37
 8003a2e:	d9ef      	bls.n	8003a10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003a30:	480d      	ldr	r0, [pc, #52]	; (8003a68 <prvInitialiseTaskLists+0x64>)
 8003a32:	f7fe fab5 	bl	8001fa0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003a36:	480d      	ldr	r0, [pc, #52]	; (8003a6c <prvInitialiseTaskLists+0x68>)
 8003a38:	f7fe fab2 	bl	8001fa0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003a3c:	480c      	ldr	r0, [pc, #48]	; (8003a70 <prvInitialiseTaskLists+0x6c>)
 8003a3e:	f7fe faaf 	bl	8001fa0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003a42:	480c      	ldr	r0, [pc, #48]	; (8003a74 <prvInitialiseTaskLists+0x70>)
 8003a44:	f7fe faac 	bl	8001fa0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003a48:	480b      	ldr	r0, [pc, #44]	; (8003a78 <prvInitialiseTaskLists+0x74>)
 8003a4a:	f7fe faa9 	bl	8001fa0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003a4e:	4b0b      	ldr	r3, [pc, #44]	; (8003a7c <prvInitialiseTaskLists+0x78>)
 8003a50:	4a05      	ldr	r2, [pc, #20]	; (8003a68 <prvInitialiseTaskLists+0x64>)
 8003a52:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003a54:	4b0a      	ldr	r3, [pc, #40]	; (8003a80 <prvInitialiseTaskLists+0x7c>)
 8003a56:	4a05      	ldr	r2, [pc, #20]	; (8003a6c <prvInitialiseTaskLists+0x68>)
 8003a58:	601a      	str	r2, [r3, #0]
}
 8003a5a:	bf00      	nop
 8003a5c:	3708      	adds	r7, #8
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	200006e8 	.word	0x200006e8
 8003a68:	20000b48 	.word	0x20000b48
 8003a6c:	20000b5c 	.word	0x20000b5c
 8003a70:	20000b78 	.word	0x20000b78
 8003a74:	20000b8c 	.word	0x20000b8c
 8003a78:	20000ba4 	.word	0x20000ba4
 8003a7c:	20000b70 	.word	0x20000b70
 8003a80:	20000b74 	.word	0x20000b74

08003a84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a8a:	e019      	b.n	8003ac0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003a8c:	f000 fe9c 	bl	80047c8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003a90:	4b0f      	ldr	r3, [pc, #60]	; (8003ad0 <prvCheckTasksWaitingTermination+0x4c>)
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	3304      	adds	r3, #4
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7fe fb09 	bl	80020b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003aa2:	4b0c      	ldr	r3, [pc, #48]	; (8003ad4 <prvCheckTasksWaitingTermination+0x50>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	4a0a      	ldr	r2, [pc, #40]	; (8003ad4 <prvCheckTasksWaitingTermination+0x50>)
 8003aaa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003aac:	4b0a      	ldr	r3, [pc, #40]	; (8003ad8 <prvCheckTasksWaitingTermination+0x54>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	3b01      	subs	r3, #1
 8003ab2:	4a09      	ldr	r2, [pc, #36]	; (8003ad8 <prvCheckTasksWaitingTermination+0x54>)
 8003ab4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003ab6:	f000 feb9 	bl	800482c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f80e 	bl	8003adc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ac0:	4b05      	ldr	r3, [pc, #20]	; (8003ad8 <prvCheckTasksWaitingTermination+0x54>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1e1      	bne.n	8003a8c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003ac8:	bf00      	nop
 8003aca:	3708      	adds	r7, #8
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	20000b8c 	.word	0x20000b8c
 8003ad4:	20000bb8 	.word	0x20000bb8
 8003ad8:	20000ba0 	.word	0x20000ba0

08003adc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d108      	bne.n	8003b00 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af2:	4618      	mov	r0, r3
 8003af4:	f001 f852 	bl	8004b9c <vPortFree>
				vPortFree( pxTCB );
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f001 f84f 	bl	8004b9c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003afe:	e019      	b.n	8003b34 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d103      	bne.n	8003b12 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f001 f846 	bl	8004b9c <vPortFree>
	}
 8003b10:	e010      	b.n	8003b34 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d00b      	beq.n	8003b34 <prvDeleteTCB+0x58>
 8003b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b20:	b672      	cpsid	i
 8003b22:	f383 8811 	msr	BASEPRI, r3
 8003b26:	f3bf 8f6f 	isb	sy
 8003b2a:	f3bf 8f4f 	dsb	sy
 8003b2e:	b662      	cpsie	i
 8003b30:	60fb      	str	r3, [r7, #12]
 8003b32:	e7fe      	b.n	8003b32 <prvDeleteTCB+0x56>
	}
 8003b34:	bf00      	nop
 8003b36:	3710      	adds	r7, #16
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b42:	4b0f      	ldr	r3, [pc, #60]	; (8003b80 <prvResetNextTaskUnblockTime+0x44>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d101      	bne.n	8003b50 <prvResetNextTaskUnblockTime+0x14>
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e000      	b.n	8003b52 <prvResetNextTaskUnblockTime+0x16>
 8003b50:	2300      	movs	r3, #0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d004      	beq.n	8003b60 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003b56:	4b0b      	ldr	r3, [pc, #44]	; (8003b84 <prvResetNextTaskUnblockTime+0x48>)
 8003b58:	f04f 32ff 	mov.w	r2, #4294967295
 8003b5c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003b5e:	e008      	b.n	8003b72 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003b60:	4b07      	ldr	r3, [pc, #28]	; (8003b80 <prvResetNextTaskUnblockTime+0x44>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	4a05      	ldr	r2, [pc, #20]	; (8003b84 <prvResetNextTaskUnblockTime+0x48>)
 8003b70:	6013      	str	r3, [r2, #0]
}
 8003b72:	bf00      	nop
 8003b74:	370c      	adds	r7, #12
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	20000b70 	.word	0x20000b70
 8003b84:	20000bd8 	.word	0x20000bd8

08003b88 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8003b8e:	4b05      	ldr	r3, [pc, #20]	; (8003ba4 <xTaskGetCurrentTaskHandle+0x1c>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	607b      	str	r3, [r7, #4]

		return xReturn;
 8003b94:	687b      	ldr	r3, [r7, #4]
	}
 8003b96:	4618      	mov	r0, r3
 8003b98:	370c      	adds	r7, #12
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop
 8003ba4:	200006e4 	.word	0x200006e4

08003ba8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003bae:	4b0b      	ldr	r3, [pc, #44]	; (8003bdc <xTaskGetSchedulerState+0x34>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d102      	bne.n	8003bbc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	607b      	str	r3, [r7, #4]
 8003bba:	e008      	b.n	8003bce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bbc:	4b08      	ldr	r3, [pc, #32]	; (8003be0 <xTaskGetSchedulerState+0x38>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d102      	bne.n	8003bca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003bc4:	2302      	movs	r3, #2
 8003bc6:	607b      	str	r3, [r7, #4]
 8003bc8:	e001      	b.n	8003bce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003bce:	687b      	ldr	r3, [r7, #4]
	}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr
 8003bdc:	20000bc4 	.word	0x20000bc4
 8003be0:	20000be0 	.word	0x20000be0

08003be4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d056      	beq.n	8003ca8 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bfe:	4b2d      	ldr	r3, [pc, #180]	; (8003cb4 <xTaskPriorityInherit+0xd0>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d246      	bcs.n	8003c96 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	db06      	blt.n	8003c1e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c10:	4b28      	ldr	r3, [pc, #160]	; (8003cb4 <xTaskPriorityInherit+0xd0>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c16:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	6959      	ldr	r1, [r3, #20]
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c26:	4613      	mov	r3, r2
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	4413      	add	r3, r2
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	4a22      	ldr	r2, [pc, #136]	; (8003cb8 <xTaskPriorityInherit+0xd4>)
 8003c30:	4413      	add	r3, r2
 8003c32:	4299      	cmp	r1, r3
 8003c34:	d101      	bne.n	8003c3a <xTaskPriorityInherit+0x56>
 8003c36:	2301      	movs	r3, #1
 8003c38:	e000      	b.n	8003c3c <xTaskPriorityInherit+0x58>
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d022      	beq.n	8003c86 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	3304      	adds	r3, #4
 8003c44:	4618      	mov	r0, r3
 8003c46:	f7fe fa35 	bl	80020b4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003c4a:	4b1a      	ldr	r3, [pc, #104]	; (8003cb4 <xTaskPriorityInherit+0xd0>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c58:	4b18      	ldr	r3, [pc, #96]	; (8003cbc <xTaskPriorityInherit+0xd8>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d903      	bls.n	8003c68 <xTaskPriorityInherit+0x84>
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c64:	4a15      	ldr	r2, [pc, #84]	; (8003cbc <xTaskPriorityInherit+0xd8>)
 8003c66:	6013      	str	r3, [r2, #0]
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	4413      	add	r3, r2
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	4a10      	ldr	r2, [pc, #64]	; (8003cb8 <xTaskPriorityInherit+0xd4>)
 8003c76:	441a      	add	r2, r3
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	3304      	adds	r3, #4
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	4610      	mov	r0, r2
 8003c80:	f7fe f9bb 	bl	8001ffa <vListInsertEnd>
 8003c84:	e004      	b.n	8003c90 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003c86:	4b0b      	ldr	r3, [pc, #44]	; (8003cb4 <xTaskPriorityInherit+0xd0>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8003c90:	2301      	movs	r3, #1
 8003c92:	60fb      	str	r3, [r7, #12]
 8003c94:	e008      	b.n	8003ca8 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c9a:	4b06      	ldr	r3, [pc, #24]	; (8003cb4 <xTaskPriorityInherit+0xd0>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d201      	bcs.n	8003ca8 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
	}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3710      	adds	r7, #16
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	200006e4 	.word	0x200006e4
 8003cb8:	200006e8 	.word	0x200006e8
 8003cbc:	20000bc0 	.word	0x20000bc0

08003cc0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d058      	beq.n	8003d88 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003cd6:	4b2f      	ldr	r3, [pc, #188]	; (8003d94 <xTaskPriorityDisinherit+0xd4>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d00b      	beq.n	8003cf8 <xTaskPriorityDisinherit+0x38>
 8003ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce4:	b672      	cpsid	i
 8003ce6:	f383 8811 	msr	BASEPRI, r3
 8003cea:	f3bf 8f6f 	isb	sy
 8003cee:	f3bf 8f4f 	dsb	sy
 8003cf2:	b662      	cpsie	i
 8003cf4:	60fb      	str	r3, [r7, #12]
 8003cf6:	e7fe      	b.n	8003cf6 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d10b      	bne.n	8003d18 <xTaskPriorityDisinherit+0x58>
 8003d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d04:	b672      	cpsid	i
 8003d06:	f383 8811 	msr	BASEPRI, r3
 8003d0a:	f3bf 8f6f 	isb	sy
 8003d0e:	f3bf 8f4f 	dsb	sy
 8003d12:	b662      	cpsie	i
 8003d14:	60bb      	str	r3, [r7, #8]
 8003d16:	e7fe      	b.n	8003d16 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d1c:	1e5a      	subs	r2, r3, #1
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d02c      	beq.n	8003d88 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d128      	bne.n	8003d88 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	3304      	adds	r3, #4
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f7fe f9ba 	bl	80020b4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d58:	4b0f      	ldr	r3, [pc, #60]	; (8003d98 <xTaskPriorityDisinherit+0xd8>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d903      	bls.n	8003d68 <xTaskPriorityDisinherit+0xa8>
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d64:	4a0c      	ldr	r2, [pc, #48]	; (8003d98 <xTaskPriorityDisinherit+0xd8>)
 8003d66:	6013      	str	r3, [r2, #0]
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	4413      	add	r3, r2
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	4a09      	ldr	r2, [pc, #36]	; (8003d9c <xTaskPriorityDisinherit+0xdc>)
 8003d76:	441a      	add	r2, r3
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	3304      	adds	r3, #4
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	4610      	mov	r0, r2
 8003d80:	f7fe f93b 	bl	8001ffa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003d84:	2301      	movs	r3, #1
 8003d86:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003d88:	697b      	ldr	r3, [r7, #20]
	}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3718      	adds	r7, #24
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	200006e4 	.word	0x200006e4
 8003d98:	20000bc0 	.word	0x20000bc0
 8003d9c:	200006e8 	.word	0x200006e8

08003da0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b088      	sub	sp, #32
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8003dae:	2301      	movs	r3, #1
 8003db0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d071      	beq.n	8003e9c <vTaskPriorityDisinheritAfterTimeout+0xfc>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d10b      	bne.n	8003dd8 <vTaskPriorityDisinheritAfterTimeout+0x38>
 8003dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc4:	b672      	cpsid	i
 8003dc6:	f383 8811 	msr	BASEPRI, r3
 8003dca:	f3bf 8f6f 	isb	sy
 8003dce:	f3bf 8f4f 	dsb	sy
 8003dd2:	b662      	cpsie	i
 8003dd4:	60fb      	str	r3, [r7, #12]
 8003dd6:	e7fe      	b.n	8003dd6 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ddc:	683a      	ldr	r2, [r7, #0]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d902      	bls.n	8003de8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	61fb      	str	r3, [r7, #28]
 8003de6:	e002      	b.n	8003dee <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dec:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df2:	69fa      	ldr	r2, [r7, #28]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d051      	beq.n	8003e9c <vTaskPriorityDisinheritAfterTimeout+0xfc>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dfc:	697a      	ldr	r2, [r7, #20]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d14c      	bne.n	8003e9c <vTaskPriorityDisinheritAfterTimeout+0xfc>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8003e02:	4b28      	ldr	r3, [pc, #160]	; (8003ea4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	69ba      	ldr	r2, [r7, #24]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d10b      	bne.n	8003e24 <vTaskPriorityDisinheritAfterTimeout+0x84>
 8003e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e10:	b672      	cpsid	i
 8003e12:	f383 8811 	msr	BASEPRI, r3
 8003e16:	f3bf 8f6f 	isb	sy
 8003e1a:	f3bf 8f4f 	dsb	sy
 8003e1e:	b662      	cpsie	i
 8003e20:	60bb      	str	r3, [r7, #8]
 8003e22:	e7fe      	b.n	8003e22 <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e28:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	69fa      	ldr	r2, [r7, #28]
 8003e2e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	db04      	blt.n	8003e42 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	6959      	ldr	r1, [r3, #20]
 8003e46:	693a      	ldr	r2, [r7, #16]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	4413      	add	r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	4a15      	ldr	r2, [pc, #84]	; (8003ea8 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8003e52:	4413      	add	r3, r2
 8003e54:	4299      	cmp	r1, r3
 8003e56:	d101      	bne.n	8003e5c <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e000      	b.n	8003e5e <vTaskPriorityDisinheritAfterTimeout+0xbe>
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d01c      	beq.n	8003e9c <vTaskPriorityDisinheritAfterTimeout+0xfc>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	3304      	adds	r3, #4
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7fe f924 	bl	80020b4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e70:	4b0e      	ldr	r3, [pc, #56]	; (8003eac <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d903      	bls.n	8003e80 <vTaskPriorityDisinheritAfterTimeout+0xe0>
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7c:	4a0b      	ldr	r2, [pc, #44]	; (8003eac <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8003e7e:	6013      	str	r3, [r2, #0]
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e84:	4613      	mov	r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	4413      	add	r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	4a06      	ldr	r2, [pc, #24]	; (8003ea8 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8003e8e:	441a      	add	r2, r3
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	3304      	adds	r3, #4
 8003e94:	4619      	mov	r1, r3
 8003e96:	4610      	mov	r0, r2
 8003e98:	f7fe f8af 	bl	8001ffa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003e9c:	bf00      	nop
 8003e9e:	3720      	adds	r7, #32
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	200006e4 	.word	0x200006e4
 8003ea8:	200006e8 	.word	0x200006e8
 8003eac:	20000bc0 	.word	0x20000bc0

08003eb0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8003eb0:	b480      	push	{r7}
 8003eb2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8003eb4:	4b07      	ldr	r3, [pc, #28]	; (8003ed4 <pvTaskIncrementMutexHeldCount+0x24>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d004      	beq.n	8003ec6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8003ebc:	4b05      	ldr	r3, [pc, #20]	; (8003ed4 <pvTaskIncrementMutexHeldCount+0x24>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ec2:	3201      	adds	r2, #1
 8003ec4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8003ec6:	4b03      	ldr	r3, [pc, #12]	; (8003ed4 <pvTaskIncrementMutexHeldCount+0x24>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
	}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr
 8003ed4:	200006e4 	.word	0x200006e4

08003ed8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003ee2:	4b21      	ldr	r3, [pc, #132]	; (8003f68 <prvAddCurrentTaskToDelayedList+0x90>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ee8:	4b20      	ldr	r3, [pc, #128]	; (8003f6c <prvAddCurrentTaskToDelayedList+0x94>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	3304      	adds	r3, #4
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7fe f8e0 	bl	80020b4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003efa:	d10a      	bne.n	8003f12 <prvAddCurrentTaskToDelayedList+0x3a>
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d007      	beq.n	8003f12 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f02:	4b1a      	ldr	r3, [pc, #104]	; (8003f6c <prvAddCurrentTaskToDelayedList+0x94>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	3304      	adds	r3, #4
 8003f08:	4619      	mov	r1, r3
 8003f0a:	4819      	ldr	r0, [pc, #100]	; (8003f70 <prvAddCurrentTaskToDelayedList+0x98>)
 8003f0c:	f7fe f875 	bl	8001ffa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003f10:	e026      	b.n	8003f60 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4413      	add	r3, r2
 8003f18:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003f1a:	4b14      	ldr	r3, [pc, #80]	; (8003f6c <prvAddCurrentTaskToDelayedList+0x94>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68ba      	ldr	r2, [r7, #8]
 8003f20:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003f22:	68ba      	ldr	r2, [r7, #8]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d209      	bcs.n	8003f3e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f2a:	4b12      	ldr	r3, [pc, #72]	; (8003f74 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	4b0f      	ldr	r3, [pc, #60]	; (8003f6c <prvAddCurrentTaskToDelayedList+0x94>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	3304      	adds	r3, #4
 8003f34:	4619      	mov	r1, r3
 8003f36:	4610      	mov	r0, r2
 8003f38:	f7fe f883 	bl	8002042 <vListInsert>
}
 8003f3c:	e010      	b.n	8003f60 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f3e:	4b0e      	ldr	r3, [pc, #56]	; (8003f78 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	4b0a      	ldr	r3, [pc, #40]	; (8003f6c <prvAddCurrentTaskToDelayedList+0x94>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	3304      	adds	r3, #4
 8003f48:	4619      	mov	r1, r3
 8003f4a:	4610      	mov	r0, r2
 8003f4c:	f7fe f879 	bl	8002042 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003f50:	4b0a      	ldr	r3, [pc, #40]	; (8003f7c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68ba      	ldr	r2, [r7, #8]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d202      	bcs.n	8003f60 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003f5a:	4a08      	ldr	r2, [pc, #32]	; (8003f7c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	6013      	str	r3, [r2, #0]
}
 8003f60:	bf00      	nop
 8003f62:	3710      	adds	r7, #16
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	20000bbc 	.word	0x20000bbc
 8003f6c:	200006e4 	.word	0x200006e4
 8003f70:	20000ba4 	.word	0x20000ba4
 8003f74:	20000b74 	.word	0x20000b74
 8003f78:	20000b70 	.word	0x20000b70
 8003f7c:	20000bd8 	.word	0x20000bd8

08003f80 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b08a      	sub	sp, #40	; 0x28
 8003f84:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003f86:	2300      	movs	r3, #0
 8003f88:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003f8a:	f000 fad1 	bl	8004530 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003f8e:	4b1d      	ldr	r3, [pc, #116]	; (8004004 <xTimerCreateTimerTask+0x84>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d021      	beq.n	8003fda <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003f96:	2300      	movs	r3, #0
 8003f98:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003f9e:	1d3a      	adds	r2, r7, #4
 8003fa0:	f107 0108 	add.w	r1, r7, #8
 8003fa4:	f107 030c 	add.w	r3, r7, #12
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f7fd ffdf 	bl	8001f6c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003fae:	6879      	ldr	r1, [r7, #4]
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	68fa      	ldr	r2, [r7, #12]
 8003fb4:	9202      	str	r2, [sp, #8]
 8003fb6:	9301      	str	r3, [sp, #4]
 8003fb8:	2302      	movs	r3, #2
 8003fba:	9300      	str	r3, [sp, #0]
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	460a      	mov	r2, r1
 8003fc0:	4911      	ldr	r1, [pc, #68]	; (8004008 <xTimerCreateTimerTask+0x88>)
 8003fc2:	4812      	ldr	r0, [pc, #72]	; (800400c <xTimerCreateTimerTask+0x8c>)
 8003fc4:	f7fe ffb6 	bl	8002f34 <xTaskCreateStatic>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	4b11      	ldr	r3, [pc, #68]	; (8004010 <xTimerCreateTimerTask+0x90>)
 8003fcc:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003fce:	4b10      	ldr	r3, [pc, #64]	; (8004010 <xTimerCreateTimerTask+0x90>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d001      	beq.n	8003fda <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d10b      	bne.n	8003ff8 <xTimerCreateTimerTask+0x78>
 8003fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe4:	b672      	cpsid	i
 8003fe6:	f383 8811 	msr	BASEPRI, r3
 8003fea:	f3bf 8f6f 	isb	sy
 8003fee:	f3bf 8f4f 	dsb	sy
 8003ff2:	b662      	cpsie	i
 8003ff4:	613b      	str	r3, [r7, #16]
 8003ff6:	e7fe      	b.n	8003ff6 <xTimerCreateTimerTask+0x76>
	return xReturn;
 8003ff8:	697b      	ldr	r3, [r7, #20]
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3718      	adds	r7, #24
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	20000c14 	.word	0x20000c14
 8004008:	08004ec0 	.word	0x08004ec0
 800400c:	08004135 	.word	0x08004135
 8004010:	20000c18 	.word	0x20000c18

08004014 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b08a      	sub	sp, #40	; 0x28
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	607a      	str	r2, [r7, #4]
 8004020:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004022:	2300      	movs	r3, #0
 8004024:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d10b      	bne.n	8004044 <xTimerGenericCommand+0x30>
 800402c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004030:	b672      	cpsid	i
 8004032:	f383 8811 	msr	BASEPRI, r3
 8004036:	f3bf 8f6f 	isb	sy
 800403a:	f3bf 8f4f 	dsb	sy
 800403e:	b662      	cpsie	i
 8004040:	623b      	str	r3, [r7, #32]
 8004042:	e7fe      	b.n	8004042 <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004044:	4b19      	ldr	r3, [pc, #100]	; (80040ac <xTimerGenericCommand+0x98>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d02a      	beq.n	80040a2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	2b05      	cmp	r3, #5
 800405c:	dc18      	bgt.n	8004090 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800405e:	f7ff fda3 	bl	8003ba8 <xTaskGetSchedulerState>
 8004062:	4603      	mov	r3, r0
 8004064:	2b02      	cmp	r3, #2
 8004066:	d109      	bne.n	800407c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004068:	4b10      	ldr	r3, [pc, #64]	; (80040ac <xTimerGenericCommand+0x98>)
 800406a:	6818      	ldr	r0, [r3, #0]
 800406c:	f107 0110 	add.w	r1, r7, #16
 8004070:	2300      	movs	r3, #0
 8004072:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004074:	f7fe fa4a 	bl	800250c <xQueueGenericSend>
 8004078:	6278      	str	r0, [r7, #36]	; 0x24
 800407a:	e012      	b.n	80040a2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800407c:	4b0b      	ldr	r3, [pc, #44]	; (80040ac <xTimerGenericCommand+0x98>)
 800407e:	6818      	ldr	r0, [r3, #0]
 8004080:	f107 0110 	add.w	r1, r7, #16
 8004084:	2300      	movs	r3, #0
 8004086:	2200      	movs	r2, #0
 8004088:	f7fe fa40 	bl	800250c <xQueueGenericSend>
 800408c:	6278      	str	r0, [r7, #36]	; 0x24
 800408e:	e008      	b.n	80040a2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004090:	4b06      	ldr	r3, [pc, #24]	; (80040ac <xTimerGenericCommand+0x98>)
 8004092:	6818      	ldr	r0, [r3, #0]
 8004094:	f107 0110 	add.w	r1, r7, #16
 8004098:	2300      	movs	r3, #0
 800409a:	683a      	ldr	r2, [r7, #0]
 800409c:	f7fe fb38 	bl	8002710 <xQueueGenericSendFromISR>
 80040a0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80040a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3728      	adds	r7, #40	; 0x28
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	20000c14 	.word	0x20000c14

080040b0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b088      	sub	sp, #32
 80040b4:	af02      	add	r7, sp, #8
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80040ba:	4b1d      	ldr	r3, [pc, #116]	; (8004130 <prvProcessExpiredTimer+0x80>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	3304      	adds	r3, #4
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7fd fff3 	bl	80020b4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	69db      	ldr	r3, [r3, #28]
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d123      	bne.n	800411e <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	699a      	ldr	r2, [r3, #24]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	18d1      	adds	r1, r2, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	683a      	ldr	r2, [r7, #0]
 80040e2:	6978      	ldr	r0, [r7, #20]
 80040e4:	f000 f8ca 	bl	800427c <prvInsertTimerInActiveList>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d017      	beq.n	800411e <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80040ee:	2300      	movs	r3, #0
 80040f0:	9300      	str	r3, [sp, #0]
 80040f2:	2300      	movs	r3, #0
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	2100      	movs	r1, #0
 80040f8:	6978      	ldr	r0, [r7, #20]
 80040fa:	f7ff ff8b 	bl	8004014 <xTimerGenericCommand>
 80040fe:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10b      	bne.n	800411e <prvProcessExpiredTimer+0x6e>
 8004106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410a:	b672      	cpsid	i
 800410c:	f383 8811 	msr	BASEPRI, r3
 8004110:	f3bf 8f6f 	isb	sy
 8004114:	f3bf 8f4f 	dsb	sy
 8004118:	b662      	cpsie	i
 800411a:	60fb      	str	r3, [r7, #12]
 800411c:	e7fe      	b.n	800411c <prvProcessExpiredTimer+0x6c>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004122:	6978      	ldr	r0, [r7, #20]
 8004124:	4798      	blx	r3
}
 8004126:	bf00      	nop
 8004128:	3718      	adds	r7, #24
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	20000c0c 	.word	0x20000c0c

08004134 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800413c:	f107 0308 	add.w	r3, r7, #8
 8004140:	4618      	mov	r0, r3
 8004142:	f000 f857 	bl	80041f4 <prvGetNextExpireTime>
 8004146:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	4619      	mov	r1, r3
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	f000 f803 	bl	8004158 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004152:	f000 f8d5 	bl	8004300 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004156:	e7f1      	b.n	800413c <prvTimerTask+0x8>

08004158 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004162:	f7ff f921 	bl	80033a8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004166:	f107 0308 	add.w	r3, r7, #8
 800416a:	4618      	mov	r0, r3
 800416c:	f000 f866 	bl	800423c <prvSampleTimeNow>
 8004170:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d130      	bne.n	80041da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d10a      	bne.n	8004194 <prvProcessTimerOrBlockTask+0x3c>
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	429a      	cmp	r2, r3
 8004184:	d806      	bhi.n	8004194 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004186:	f7ff f91d 	bl	80033c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800418a:	68f9      	ldr	r1, [r7, #12]
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f7ff ff8f 	bl	80040b0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004192:	e024      	b.n	80041de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d008      	beq.n	80041ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800419a:	4b13      	ldr	r3, [pc, #76]	; (80041e8 <prvProcessTimerOrBlockTask+0x90>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	bf0c      	ite	eq
 80041a4:	2301      	moveq	r3, #1
 80041a6:	2300      	movne	r3, #0
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80041ac:	4b0f      	ldr	r3, [pc, #60]	; (80041ec <prvProcessTimerOrBlockTask+0x94>)
 80041ae:	6818      	ldr	r0, [r3, #0]
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	683a      	ldr	r2, [r7, #0]
 80041b8:	4619      	mov	r1, r3
 80041ba:	f7fe fe87 	bl	8002ecc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80041be:	f7ff f901 	bl	80033c4 <xTaskResumeAll>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d10a      	bne.n	80041de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80041c8:	4b09      	ldr	r3, [pc, #36]	; (80041f0 <prvProcessTimerOrBlockTask+0x98>)
 80041ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041ce:	601a      	str	r2, [r3, #0]
 80041d0:	f3bf 8f4f 	dsb	sy
 80041d4:	f3bf 8f6f 	isb	sy
}
 80041d8:	e001      	b.n	80041de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80041da:	f7ff f8f3 	bl	80033c4 <xTaskResumeAll>
}
 80041de:	bf00      	nop
 80041e0:	3710      	adds	r7, #16
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	20000c10 	.word	0x20000c10
 80041ec:	20000c14 	.word	0x20000c14
 80041f0:	e000ed04 	.word	0xe000ed04

080041f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80041f4:	b480      	push	{r7}
 80041f6:	b085      	sub	sp, #20
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80041fc:	4b0e      	ldr	r3, [pc, #56]	; (8004238 <prvGetNextExpireTime+0x44>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2b00      	cmp	r3, #0
 8004204:	bf0c      	ite	eq
 8004206:	2301      	moveq	r3, #1
 8004208:	2300      	movne	r3, #0
 800420a:	b2db      	uxtb	r3, r3
 800420c:	461a      	mov	r2, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d105      	bne.n	8004226 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800421a:	4b07      	ldr	r3, [pc, #28]	; (8004238 <prvGetNextExpireTime+0x44>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	60fb      	str	r3, [r7, #12]
 8004224:	e001      	b.n	800422a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004226:	2300      	movs	r3, #0
 8004228:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800422a:	68fb      	ldr	r3, [r7, #12]
}
 800422c:	4618      	mov	r0, r3
 800422e:	3714      	adds	r7, #20
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr
 8004238:	20000c0c 	.word	0x20000c0c

0800423c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004244:	f7ff f95c 	bl	8003500 <xTaskGetTickCount>
 8004248:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800424a:	4b0b      	ldr	r3, [pc, #44]	; (8004278 <prvSampleTimeNow+0x3c>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68fa      	ldr	r2, [r7, #12]
 8004250:	429a      	cmp	r2, r3
 8004252:	d205      	bcs.n	8004260 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004254:	f000 f90a 	bl	800446c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	601a      	str	r2, [r3, #0]
 800425e:	e002      	b.n	8004266 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004266:	4a04      	ldr	r2, [pc, #16]	; (8004278 <prvSampleTimeNow+0x3c>)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800426c:	68fb      	ldr	r3, [r7, #12]
}
 800426e:	4618      	mov	r0, r3
 8004270:	3710      	adds	r7, #16
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	20000c1c 	.word	0x20000c1c

0800427c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b086      	sub	sp, #24
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
 8004288:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800428a:	2300      	movs	r3, #0
 800428c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	68ba      	ldr	r2, [r7, #8]
 8004292:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800429a:	68ba      	ldr	r2, [r7, #8]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	429a      	cmp	r2, r3
 80042a0:	d812      	bhi.n	80042c8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	1ad2      	subs	r2, r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	699b      	ldr	r3, [r3, #24]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d302      	bcc.n	80042b6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80042b0:	2301      	movs	r3, #1
 80042b2:	617b      	str	r3, [r7, #20]
 80042b4:	e01b      	b.n	80042ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80042b6:	4b10      	ldr	r3, [pc, #64]	; (80042f8 <prvInsertTimerInActiveList+0x7c>)
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	3304      	adds	r3, #4
 80042be:	4619      	mov	r1, r3
 80042c0:	4610      	mov	r0, r2
 80042c2:	f7fd febe 	bl	8002042 <vListInsert>
 80042c6:	e012      	b.n	80042ee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d206      	bcs.n	80042de <prvInsertTimerInActiveList+0x62>
 80042d0:	68ba      	ldr	r2, [r7, #8]
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d302      	bcc.n	80042de <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80042d8:	2301      	movs	r3, #1
 80042da:	617b      	str	r3, [r7, #20]
 80042dc:	e007      	b.n	80042ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80042de:	4b07      	ldr	r3, [pc, #28]	; (80042fc <prvInsertTimerInActiveList+0x80>)
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	3304      	adds	r3, #4
 80042e6:	4619      	mov	r1, r3
 80042e8:	4610      	mov	r0, r2
 80042ea:	f7fd feaa 	bl	8002042 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80042ee:	697b      	ldr	r3, [r7, #20]
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3718      	adds	r7, #24
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	20000c10 	.word	0x20000c10
 80042fc:	20000c0c 	.word	0x20000c0c

08004300 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b08e      	sub	sp, #56	; 0x38
 8004304:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004306:	e09f      	b.n	8004448 <prvProcessReceivedCommands+0x148>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2b00      	cmp	r3, #0
 800430c:	da19      	bge.n	8004342 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800430e:	1d3b      	adds	r3, r7, #4
 8004310:	3304      	adds	r3, #4
 8004312:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004316:	2b00      	cmp	r3, #0
 8004318:	d10b      	bne.n	8004332 <prvProcessReceivedCommands+0x32>
 800431a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800431e:	b672      	cpsid	i
 8004320:	f383 8811 	msr	BASEPRI, r3
 8004324:	f3bf 8f6f 	isb	sy
 8004328:	f3bf 8f4f 	dsb	sy
 800432c:	b662      	cpsie	i
 800432e:	61fb      	str	r3, [r7, #28]
 8004330:	e7fe      	b.n	8004330 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004338:	6850      	ldr	r0, [r2, #4]
 800433a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800433c:	6892      	ldr	r2, [r2, #8]
 800433e:	4611      	mov	r1, r2
 8004340:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2b00      	cmp	r3, #0
 8004346:	db7e      	blt.n	8004446 <prvProcessReceivedCommands+0x146>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800434c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800434e:	695b      	ldr	r3, [r3, #20]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d004      	beq.n	800435e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004356:	3304      	adds	r3, #4
 8004358:	4618      	mov	r0, r3
 800435a:	f7fd feab 	bl	80020b4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800435e:	463b      	mov	r3, r7
 8004360:	4618      	mov	r0, r3
 8004362:	f7ff ff6b 	bl	800423c <prvSampleTimeNow>
 8004366:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2b09      	cmp	r3, #9
 800436c:	d86c      	bhi.n	8004448 <prvProcessReceivedCommands+0x148>
 800436e:	a201      	add	r2, pc, #4	; (adr r2, 8004374 <prvProcessReceivedCommands+0x74>)
 8004370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004374:	0800439d 	.word	0x0800439d
 8004378:	0800439d 	.word	0x0800439d
 800437c:	0800439d 	.word	0x0800439d
 8004380:	08004449 	.word	0x08004449
 8004384:	080043fb 	.word	0x080043fb
 8004388:	08004435 	.word	0x08004435
 800438c:	0800439d 	.word	0x0800439d
 8004390:	0800439d 	.word	0x0800439d
 8004394:	08004449 	.word	0x08004449
 8004398:	080043fb 	.word	0x080043fb
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800439c:	68ba      	ldr	r2, [r7, #8]
 800439e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a0:	699b      	ldr	r3, [r3, #24]
 80043a2:	18d1      	adds	r1, r2, r3
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043aa:	f7ff ff67 	bl	800427c <prvInsertTimerInActiveList>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d049      	beq.n	8004448 <prvProcessReceivedCommands+0x148>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80043b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043ba:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80043bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043be:	69db      	ldr	r3, [r3, #28]
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d141      	bne.n	8004448 <prvProcessReceivedCommands+0x148>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80043c4:	68ba      	ldr	r2, [r7, #8]
 80043c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	441a      	add	r2, r3
 80043cc:	2300      	movs	r3, #0
 80043ce:	9300      	str	r3, [sp, #0]
 80043d0:	2300      	movs	r3, #0
 80043d2:	2100      	movs	r1, #0
 80043d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043d6:	f7ff fe1d 	bl	8004014 <xTimerGenericCommand>
 80043da:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80043dc:	6a3b      	ldr	r3, [r7, #32]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d132      	bne.n	8004448 <prvProcessReceivedCommands+0x148>
 80043e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e6:	b672      	cpsid	i
 80043e8:	f383 8811 	msr	BASEPRI, r3
 80043ec:	f3bf 8f6f 	isb	sy
 80043f0:	f3bf 8f4f 	dsb	sy
 80043f4:	b662      	cpsie	i
 80043f6:	61bb      	str	r3, [r7, #24]
 80043f8:	e7fe      	b.n	80043f8 <prvProcessReceivedCommands+0xf8>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80043fa:	68ba      	ldr	r2, [r7, #8]
 80043fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043fe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d10b      	bne.n	8004420 <prvProcessReceivedCommands+0x120>
 8004408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800440c:	b672      	cpsid	i
 800440e:	f383 8811 	msr	BASEPRI, r3
 8004412:	f3bf 8f6f 	isb	sy
 8004416:	f3bf 8f4f 	dsb	sy
 800441a:	b662      	cpsie	i
 800441c:	617b      	str	r3, [r7, #20]
 800441e:	e7fe      	b.n	800441e <prvProcessReceivedCommands+0x11e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004422:	699a      	ldr	r2, [r3, #24]
 8004424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004426:	18d1      	adds	r1, r2, r3
 8004428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800442c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800442e:	f7ff ff25 	bl	800427c <prvInsertTimerInActiveList>
					break;
 8004432:	e009      	b.n	8004448 <prvProcessReceivedCommands+0x148>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004436:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800443a:	2b00      	cmp	r3, #0
 800443c:	d104      	bne.n	8004448 <prvProcessReceivedCommands+0x148>
						{
							vPortFree( pxTimer );
 800443e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004440:	f000 fbac 	bl	8004b9c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004444:	e000      	b.n	8004448 <prvProcessReceivedCommands+0x148>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004446:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004448:	4b07      	ldr	r3, [pc, #28]	; (8004468 <prvProcessReceivedCommands+0x168>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	1d39      	adds	r1, r7, #4
 800444e:	2200      	movs	r2, #0
 8004450:	4618      	mov	r0, r3
 8004452:	f7fe f9f9 	bl	8002848 <xQueueReceive>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	f47f af55 	bne.w	8004308 <prvProcessReceivedCommands+0x8>
	}
}
 800445e:	bf00      	nop
 8004460:	3730      	adds	r7, #48	; 0x30
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	20000c14 	.word	0x20000c14

0800446c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b088      	sub	sp, #32
 8004470:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004472:	e046      	b.n	8004502 <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004474:	4b2c      	ldr	r3, [pc, #176]	; (8004528 <prvSwitchTimerLists+0xbc>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800447e:	4b2a      	ldr	r3, [pc, #168]	; (8004528 <prvSwitchTimerLists+0xbc>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	3304      	adds	r3, #4
 800448c:	4618      	mov	r0, r3
 800448e:	f7fd fe11 	bl	80020b4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004496:	68f8      	ldr	r0, [r7, #12]
 8004498:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	69db      	ldr	r3, [r3, #28]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d12f      	bne.n	8004502 <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	693a      	ldr	r2, [r7, #16]
 80044a8:	4413      	add	r3, r2
 80044aa:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80044ac:	68ba      	ldr	r2, [r7, #8]
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d90e      	bls.n	80044d2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	68ba      	ldr	r2, [r7, #8]
 80044b8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80044c0:	4b19      	ldr	r3, [pc, #100]	; (8004528 <prvSwitchTimerLists+0xbc>)
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	3304      	adds	r3, #4
 80044c8:	4619      	mov	r1, r3
 80044ca:	4610      	mov	r0, r2
 80044cc:	f7fd fdb9 	bl	8002042 <vListInsert>
 80044d0:	e017      	b.n	8004502 <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80044d2:	2300      	movs	r3, #0
 80044d4:	9300      	str	r3, [sp, #0]
 80044d6:	2300      	movs	r3, #0
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	2100      	movs	r1, #0
 80044dc:	68f8      	ldr	r0, [r7, #12]
 80044de:	f7ff fd99 	bl	8004014 <xTimerGenericCommand>
 80044e2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d10b      	bne.n	8004502 <prvSwitchTimerLists+0x96>
 80044ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ee:	b672      	cpsid	i
 80044f0:	f383 8811 	msr	BASEPRI, r3
 80044f4:	f3bf 8f6f 	isb	sy
 80044f8:	f3bf 8f4f 	dsb	sy
 80044fc:	b662      	cpsie	i
 80044fe:	603b      	str	r3, [r7, #0]
 8004500:	e7fe      	b.n	8004500 <prvSwitchTimerLists+0x94>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004502:	4b09      	ldr	r3, [pc, #36]	; (8004528 <prvSwitchTimerLists+0xbc>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1b3      	bne.n	8004474 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800450c:	4b06      	ldr	r3, [pc, #24]	; (8004528 <prvSwitchTimerLists+0xbc>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004512:	4b06      	ldr	r3, [pc, #24]	; (800452c <prvSwitchTimerLists+0xc0>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a04      	ldr	r2, [pc, #16]	; (8004528 <prvSwitchTimerLists+0xbc>)
 8004518:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800451a:	4a04      	ldr	r2, [pc, #16]	; (800452c <prvSwitchTimerLists+0xc0>)
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	6013      	str	r3, [r2, #0]
}
 8004520:	bf00      	nop
 8004522:	3718      	adds	r7, #24
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	20000c0c 	.word	0x20000c0c
 800452c:	20000c10 	.word	0x20000c10

08004530 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004536:	f000 f947 	bl	80047c8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800453a:	4b15      	ldr	r3, [pc, #84]	; (8004590 <prvCheckForValidListAndQueue+0x60>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d120      	bne.n	8004584 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004542:	4814      	ldr	r0, [pc, #80]	; (8004594 <prvCheckForValidListAndQueue+0x64>)
 8004544:	f7fd fd2c 	bl	8001fa0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004548:	4813      	ldr	r0, [pc, #76]	; (8004598 <prvCheckForValidListAndQueue+0x68>)
 800454a:	f7fd fd29 	bl	8001fa0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800454e:	4b13      	ldr	r3, [pc, #76]	; (800459c <prvCheckForValidListAndQueue+0x6c>)
 8004550:	4a10      	ldr	r2, [pc, #64]	; (8004594 <prvCheckForValidListAndQueue+0x64>)
 8004552:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004554:	4b12      	ldr	r3, [pc, #72]	; (80045a0 <prvCheckForValidListAndQueue+0x70>)
 8004556:	4a10      	ldr	r2, [pc, #64]	; (8004598 <prvCheckForValidListAndQueue+0x68>)
 8004558:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800455a:	2300      	movs	r3, #0
 800455c:	9300      	str	r3, [sp, #0]
 800455e:	4b11      	ldr	r3, [pc, #68]	; (80045a4 <prvCheckForValidListAndQueue+0x74>)
 8004560:	4a11      	ldr	r2, [pc, #68]	; (80045a8 <prvCheckForValidListAndQueue+0x78>)
 8004562:	2110      	movs	r1, #16
 8004564:	200a      	movs	r0, #10
 8004566:	f7fd fe39 	bl	80021dc <xQueueGenericCreateStatic>
 800456a:	4602      	mov	r2, r0
 800456c:	4b08      	ldr	r3, [pc, #32]	; (8004590 <prvCheckForValidListAndQueue+0x60>)
 800456e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004570:	4b07      	ldr	r3, [pc, #28]	; (8004590 <prvCheckForValidListAndQueue+0x60>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d005      	beq.n	8004584 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004578:	4b05      	ldr	r3, [pc, #20]	; (8004590 <prvCheckForValidListAndQueue+0x60>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	490b      	ldr	r1, [pc, #44]	; (80045ac <prvCheckForValidListAndQueue+0x7c>)
 800457e:	4618      	mov	r0, r3
 8004580:	f7fe fc7c 	bl	8002e7c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004584:	f000 f952 	bl	800482c <vPortExitCritical>
}
 8004588:	bf00      	nop
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	20000c14 	.word	0x20000c14
 8004594:	20000be4 	.word	0x20000be4
 8004598:	20000bf8 	.word	0x20000bf8
 800459c:	20000c0c 	.word	0x20000c0c
 80045a0:	20000c10 	.word	0x20000c10
 80045a4:	20000cc0 	.word	0x20000cc0
 80045a8:	20000c20 	.word	0x20000c20
 80045ac:	08004ec8 	.word	0x08004ec8

080045b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	3b04      	subs	r3, #4
 80045c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80045c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	3b04      	subs	r3, #4
 80045ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	f023 0201 	bic.w	r2, r3, #1
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	3b04      	subs	r3, #4
 80045de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80045e0:	4a0c      	ldr	r2, [pc, #48]	; (8004614 <pxPortInitialiseStack+0x64>)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	3b14      	subs	r3, #20
 80045ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	3b04      	subs	r3, #4
 80045f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f06f 0202 	mvn.w	r2, #2
 80045fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	3b20      	subs	r3, #32
 8004604:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004606:	68fb      	ldr	r3, [r7, #12]
}
 8004608:	4618      	mov	r0, r3
 800460a:	3714      	adds	r7, #20
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr
 8004614:	08004619 	.word	0x08004619

08004618 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004618:	b480      	push	{r7}
 800461a:	b085      	sub	sp, #20
 800461c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800461e:	2300      	movs	r3, #0
 8004620:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004622:	4b13      	ldr	r3, [pc, #76]	; (8004670 <prvTaskExitError+0x58>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800462a:	d00b      	beq.n	8004644 <prvTaskExitError+0x2c>
 800462c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004630:	b672      	cpsid	i
 8004632:	f383 8811 	msr	BASEPRI, r3
 8004636:	f3bf 8f6f 	isb	sy
 800463a:	f3bf 8f4f 	dsb	sy
 800463e:	b662      	cpsie	i
 8004640:	60fb      	str	r3, [r7, #12]
 8004642:	e7fe      	b.n	8004642 <prvTaskExitError+0x2a>
 8004644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004648:	b672      	cpsid	i
 800464a:	f383 8811 	msr	BASEPRI, r3
 800464e:	f3bf 8f6f 	isb	sy
 8004652:	f3bf 8f4f 	dsb	sy
 8004656:	b662      	cpsie	i
 8004658:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800465a:	bf00      	nop
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d0fc      	beq.n	800465c <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004662:	bf00      	nop
 8004664:	3714      	adds	r7, #20
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	20000008 	.word	0x20000008
	...

08004680 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004680:	4b07      	ldr	r3, [pc, #28]	; (80046a0 <pxCurrentTCBConst2>)
 8004682:	6819      	ldr	r1, [r3, #0]
 8004684:	6808      	ldr	r0, [r1, #0]
 8004686:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800468a:	f380 8809 	msr	PSP, r0
 800468e:	f3bf 8f6f 	isb	sy
 8004692:	f04f 0000 	mov.w	r0, #0
 8004696:	f380 8811 	msr	BASEPRI, r0
 800469a:	4770      	bx	lr
 800469c:	f3af 8000 	nop.w

080046a0 <pxCurrentTCBConst2>:
 80046a0:	200006e4 	.word	0x200006e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80046a4:	bf00      	nop
 80046a6:	bf00      	nop

080046a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80046a8:	4808      	ldr	r0, [pc, #32]	; (80046cc <prvPortStartFirstTask+0x24>)
 80046aa:	6800      	ldr	r0, [r0, #0]
 80046ac:	6800      	ldr	r0, [r0, #0]
 80046ae:	f380 8808 	msr	MSP, r0
 80046b2:	f04f 0000 	mov.w	r0, #0
 80046b6:	f380 8814 	msr	CONTROL, r0
 80046ba:	b662      	cpsie	i
 80046bc:	b661      	cpsie	f
 80046be:	f3bf 8f4f 	dsb	sy
 80046c2:	f3bf 8f6f 	isb	sy
 80046c6:	df00      	svc	0
 80046c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80046ca:	bf00      	nop
 80046cc:	e000ed08 	.word	0xe000ed08

080046d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80046d6:	4b36      	ldr	r3, [pc, #216]	; (80047b0 <xPortStartScheduler+0xe0>)
 80046d8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	22ff      	movs	r2, #255	; 0xff
 80046e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80046f0:	78fb      	ldrb	r3, [r7, #3]
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80046f8:	b2da      	uxtb	r2, r3
 80046fa:	4b2e      	ldr	r3, [pc, #184]	; (80047b4 <xPortStartScheduler+0xe4>)
 80046fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80046fe:	4b2e      	ldr	r3, [pc, #184]	; (80047b8 <xPortStartScheduler+0xe8>)
 8004700:	2207      	movs	r2, #7
 8004702:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004704:	e009      	b.n	800471a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004706:	4b2c      	ldr	r3, [pc, #176]	; (80047b8 <xPortStartScheduler+0xe8>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	3b01      	subs	r3, #1
 800470c:	4a2a      	ldr	r2, [pc, #168]	; (80047b8 <xPortStartScheduler+0xe8>)
 800470e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004710:	78fb      	ldrb	r3, [r7, #3]
 8004712:	b2db      	uxtb	r3, r3
 8004714:	005b      	lsls	r3, r3, #1
 8004716:	b2db      	uxtb	r3, r3
 8004718:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800471a:	78fb      	ldrb	r3, [r7, #3]
 800471c:	b2db      	uxtb	r3, r3
 800471e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004722:	2b80      	cmp	r3, #128	; 0x80
 8004724:	d0ef      	beq.n	8004706 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004726:	4b24      	ldr	r3, [pc, #144]	; (80047b8 <xPortStartScheduler+0xe8>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f1c3 0307 	rsb	r3, r3, #7
 800472e:	2b04      	cmp	r3, #4
 8004730:	d00b      	beq.n	800474a <xPortStartScheduler+0x7a>
 8004732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004736:	b672      	cpsid	i
 8004738:	f383 8811 	msr	BASEPRI, r3
 800473c:	f3bf 8f6f 	isb	sy
 8004740:	f3bf 8f4f 	dsb	sy
 8004744:	b662      	cpsie	i
 8004746:	60bb      	str	r3, [r7, #8]
 8004748:	e7fe      	b.n	8004748 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800474a:	4b1b      	ldr	r3, [pc, #108]	; (80047b8 <xPortStartScheduler+0xe8>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	021b      	lsls	r3, r3, #8
 8004750:	4a19      	ldr	r2, [pc, #100]	; (80047b8 <xPortStartScheduler+0xe8>)
 8004752:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004754:	4b18      	ldr	r3, [pc, #96]	; (80047b8 <xPortStartScheduler+0xe8>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800475c:	4a16      	ldr	r2, [pc, #88]	; (80047b8 <xPortStartScheduler+0xe8>)
 800475e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	b2da      	uxtb	r2, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004768:	4b14      	ldr	r3, [pc, #80]	; (80047bc <xPortStartScheduler+0xec>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a13      	ldr	r2, [pc, #76]	; (80047bc <xPortStartScheduler+0xec>)
 800476e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004772:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004774:	4b11      	ldr	r3, [pc, #68]	; (80047bc <xPortStartScheduler+0xec>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a10      	ldr	r2, [pc, #64]	; (80047bc <xPortStartScheduler+0xec>)
 800477a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800477e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004780:	f000 f8d4 	bl	800492c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004784:	4b0e      	ldr	r3, [pc, #56]	; (80047c0 <xPortStartScheduler+0xf0>)
 8004786:	2200      	movs	r2, #0
 8004788:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800478a:	f000 f8f3 	bl	8004974 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800478e:	4b0d      	ldr	r3, [pc, #52]	; (80047c4 <xPortStartScheduler+0xf4>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a0c      	ldr	r2, [pc, #48]	; (80047c4 <xPortStartScheduler+0xf4>)
 8004794:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004798:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800479a:	f7ff ff85 	bl	80046a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800479e:	f7fe ff7f 	bl	80036a0 <vTaskSwitchContext>
	prvTaskExitError();
 80047a2:	f7ff ff39 	bl	8004618 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3710      	adds	r7, #16
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	e000e400 	.word	0xe000e400
 80047b4:	20000d10 	.word	0x20000d10
 80047b8:	20000d14 	.word	0x20000d14
 80047bc:	e000ed20 	.word	0xe000ed20
 80047c0:	20000008 	.word	0x20000008
 80047c4:	e000ef34 	.word	0xe000ef34

080047c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d2:	b672      	cpsid	i
 80047d4:	f383 8811 	msr	BASEPRI, r3
 80047d8:	f3bf 8f6f 	isb	sy
 80047dc:	f3bf 8f4f 	dsb	sy
 80047e0:	b662      	cpsie	i
 80047e2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80047e4:	4b0f      	ldr	r3, [pc, #60]	; (8004824 <vPortEnterCritical+0x5c>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	3301      	adds	r3, #1
 80047ea:	4a0e      	ldr	r2, [pc, #56]	; (8004824 <vPortEnterCritical+0x5c>)
 80047ec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80047ee:	4b0d      	ldr	r3, [pc, #52]	; (8004824 <vPortEnterCritical+0x5c>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d110      	bne.n	8004818 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80047f6:	4b0c      	ldr	r3, [pc, #48]	; (8004828 <vPortEnterCritical+0x60>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00b      	beq.n	8004818 <vPortEnterCritical+0x50>
 8004800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004804:	b672      	cpsid	i
 8004806:	f383 8811 	msr	BASEPRI, r3
 800480a:	f3bf 8f6f 	isb	sy
 800480e:	f3bf 8f4f 	dsb	sy
 8004812:	b662      	cpsie	i
 8004814:	603b      	str	r3, [r7, #0]
 8004816:	e7fe      	b.n	8004816 <vPortEnterCritical+0x4e>
	}
}
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr
 8004824:	20000008 	.word	0x20000008
 8004828:	e000ed04 	.word	0xe000ed04

0800482c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004832:	4b12      	ldr	r3, [pc, #72]	; (800487c <vPortExitCritical+0x50>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d10b      	bne.n	8004852 <vPortExitCritical+0x26>
 800483a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800483e:	b672      	cpsid	i
 8004840:	f383 8811 	msr	BASEPRI, r3
 8004844:	f3bf 8f6f 	isb	sy
 8004848:	f3bf 8f4f 	dsb	sy
 800484c:	b662      	cpsie	i
 800484e:	607b      	str	r3, [r7, #4]
 8004850:	e7fe      	b.n	8004850 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8004852:	4b0a      	ldr	r3, [pc, #40]	; (800487c <vPortExitCritical+0x50>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	3b01      	subs	r3, #1
 8004858:	4a08      	ldr	r2, [pc, #32]	; (800487c <vPortExitCritical+0x50>)
 800485a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800485c:	4b07      	ldr	r3, [pc, #28]	; (800487c <vPortExitCritical+0x50>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d104      	bne.n	800486e <vPortExitCritical+0x42>
 8004864:	2300      	movs	r3, #0
 8004866:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800486e:	bf00      	nop
 8004870:	370c      	adds	r7, #12
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	20000008 	.word	0x20000008

08004880 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004880:	f3ef 8009 	mrs	r0, PSP
 8004884:	f3bf 8f6f 	isb	sy
 8004888:	4b15      	ldr	r3, [pc, #84]	; (80048e0 <pxCurrentTCBConst>)
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	f01e 0f10 	tst.w	lr, #16
 8004890:	bf08      	it	eq
 8004892:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004896:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800489a:	6010      	str	r0, [r2, #0]
 800489c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80048a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80048a4:	b672      	cpsid	i
 80048a6:	f380 8811 	msr	BASEPRI, r0
 80048aa:	f3bf 8f4f 	dsb	sy
 80048ae:	f3bf 8f6f 	isb	sy
 80048b2:	b662      	cpsie	i
 80048b4:	f7fe fef4 	bl	80036a0 <vTaskSwitchContext>
 80048b8:	f04f 0000 	mov.w	r0, #0
 80048bc:	f380 8811 	msr	BASEPRI, r0
 80048c0:	bc09      	pop	{r0, r3}
 80048c2:	6819      	ldr	r1, [r3, #0]
 80048c4:	6808      	ldr	r0, [r1, #0]
 80048c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048ca:	f01e 0f10 	tst.w	lr, #16
 80048ce:	bf08      	it	eq
 80048d0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80048d4:	f380 8809 	msr	PSP, r0
 80048d8:	f3bf 8f6f 	isb	sy
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop

080048e0 <pxCurrentTCBConst>:
 80048e0:	200006e4 	.word	0x200006e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80048e4:	bf00      	nop
 80048e6:	bf00      	nop

080048e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
	__asm volatile
 80048ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f2:	b672      	cpsid	i
 80048f4:	f383 8811 	msr	BASEPRI, r3
 80048f8:	f3bf 8f6f 	isb	sy
 80048fc:	f3bf 8f4f 	dsb	sy
 8004900:	b662      	cpsie	i
 8004902:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004904:	f7fe fe0c 	bl	8003520 <xTaskIncrementTick>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d003      	beq.n	8004916 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800490e:	4b06      	ldr	r3, [pc, #24]	; (8004928 <SysTick_Handler+0x40>)
 8004910:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004914:	601a      	str	r2, [r3, #0]
 8004916:	2300      	movs	r3, #0
 8004918:	603b      	str	r3, [r7, #0]
	__asm volatile
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8004920:	bf00      	nop
 8004922:	3708      	adds	r7, #8
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	e000ed04 	.word	0xe000ed04

0800492c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800492c:	b480      	push	{r7}
 800492e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004930:	4b0b      	ldr	r3, [pc, #44]	; (8004960 <vPortSetupTimerInterrupt+0x34>)
 8004932:	2200      	movs	r2, #0
 8004934:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004936:	4b0b      	ldr	r3, [pc, #44]	; (8004964 <vPortSetupTimerInterrupt+0x38>)
 8004938:	2200      	movs	r2, #0
 800493a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800493c:	4b0a      	ldr	r3, [pc, #40]	; (8004968 <vPortSetupTimerInterrupt+0x3c>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a0a      	ldr	r2, [pc, #40]	; (800496c <vPortSetupTimerInterrupt+0x40>)
 8004942:	fba2 2303 	umull	r2, r3, r2, r3
 8004946:	099b      	lsrs	r3, r3, #6
 8004948:	4a09      	ldr	r2, [pc, #36]	; (8004970 <vPortSetupTimerInterrupt+0x44>)
 800494a:	3b01      	subs	r3, #1
 800494c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800494e:	4b04      	ldr	r3, [pc, #16]	; (8004960 <vPortSetupTimerInterrupt+0x34>)
 8004950:	2207      	movs	r2, #7
 8004952:	601a      	str	r2, [r3, #0]
}
 8004954:	bf00      	nop
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	e000e010 	.word	0xe000e010
 8004964:	e000e018 	.word	0xe000e018
 8004968:	20000000 	.word	0x20000000
 800496c:	10624dd3 	.word	0x10624dd3
 8004970:	e000e014 	.word	0xe000e014

08004974 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004974:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004984 <vPortEnableVFP+0x10>
 8004978:	6801      	ldr	r1, [r0, #0]
 800497a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800497e:	6001      	str	r1, [r0, #0]
 8004980:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004982:	bf00      	nop
 8004984:	e000ed88 	.word	0xe000ed88

08004988 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800498e:	f3ef 8305 	mrs	r3, IPSR
 8004992:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2b0f      	cmp	r3, #15
 8004998:	d915      	bls.n	80049c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800499a:	4a18      	ldr	r2, [pc, #96]	; (80049fc <vPortValidateInterruptPriority+0x74>)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	4413      	add	r3, r2
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80049a4:	4b16      	ldr	r3, [pc, #88]	; (8004a00 <vPortValidateInterruptPriority+0x78>)
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	7afa      	ldrb	r2, [r7, #11]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d20b      	bcs.n	80049c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80049ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b2:	b672      	cpsid	i
 80049b4:	f383 8811 	msr	BASEPRI, r3
 80049b8:	f3bf 8f6f 	isb	sy
 80049bc:	f3bf 8f4f 	dsb	sy
 80049c0:	b662      	cpsie	i
 80049c2:	607b      	str	r3, [r7, #4]
 80049c4:	e7fe      	b.n	80049c4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80049c6:	4b0f      	ldr	r3, [pc, #60]	; (8004a04 <vPortValidateInterruptPriority+0x7c>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80049ce:	4b0e      	ldr	r3, [pc, #56]	; (8004a08 <vPortValidateInterruptPriority+0x80>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d90b      	bls.n	80049ee <vPortValidateInterruptPriority+0x66>
 80049d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049da:	b672      	cpsid	i
 80049dc:	f383 8811 	msr	BASEPRI, r3
 80049e0:	f3bf 8f6f 	isb	sy
 80049e4:	f3bf 8f4f 	dsb	sy
 80049e8:	b662      	cpsie	i
 80049ea:	603b      	str	r3, [r7, #0]
 80049ec:	e7fe      	b.n	80049ec <vPortValidateInterruptPriority+0x64>
	}
 80049ee:	bf00      	nop
 80049f0:	3714      	adds	r7, #20
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	e000e3f0 	.word	0xe000e3f0
 8004a00:	20000d10 	.word	0x20000d10
 8004a04:	e000ed0c 	.word	0xe000ed0c
 8004a08:	20000d14 	.word	0x20000d14

08004a0c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b08a      	sub	sp, #40	; 0x28
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004a14:	2300      	movs	r3, #0
 8004a16:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004a18:	f7fe fcc6 	bl	80033a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004a1c:	4b5a      	ldr	r3, [pc, #360]	; (8004b88 <pvPortMalloc+0x17c>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d101      	bne.n	8004a28 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004a24:	f000 f916 	bl	8004c54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004a28:	4b58      	ldr	r3, [pc, #352]	; (8004b8c <pvPortMalloc+0x180>)
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4013      	ands	r3, r2
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	f040 8090 	bne.w	8004b56 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d01e      	beq.n	8004a7a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004a3c:	2208      	movs	r2, #8
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4413      	add	r3, r2
 8004a42:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f003 0307 	and.w	r3, r3, #7
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d015      	beq.n	8004a7a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f023 0307 	bic.w	r3, r3, #7
 8004a54:	3308      	adds	r3, #8
 8004a56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f003 0307 	and.w	r3, r3, #7
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00b      	beq.n	8004a7a <pvPortMalloc+0x6e>
 8004a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a66:	b672      	cpsid	i
 8004a68:	f383 8811 	msr	BASEPRI, r3
 8004a6c:	f3bf 8f6f 	isb	sy
 8004a70:	f3bf 8f4f 	dsb	sy
 8004a74:	b662      	cpsie	i
 8004a76:	617b      	str	r3, [r7, #20]
 8004a78:	e7fe      	b.n	8004a78 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d06a      	beq.n	8004b56 <pvPortMalloc+0x14a>
 8004a80:	4b43      	ldr	r3, [pc, #268]	; (8004b90 <pvPortMalloc+0x184>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d865      	bhi.n	8004b56 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004a8a:	4b42      	ldr	r3, [pc, #264]	; (8004b94 <pvPortMalloc+0x188>)
 8004a8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004a8e:	4b41      	ldr	r3, [pc, #260]	; (8004b94 <pvPortMalloc+0x188>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a94:	e004      	b.n	8004aa0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d903      	bls.n	8004ab2 <pvPortMalloc+0xa6>
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d1f1      	bne.n	8004a96 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004ab2:	4b35      	ldr	r3, [pc, #212]	; (8004b88 <pvPortMalloc+0x17c>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d04c      	beq.n	8004b56 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004abc:	6a3b      	ldr	r3, [r7, #32]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2208      	movs	r2, #8
 8004ac2:	4413      	add	r3, r2
 8004ac4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	6a3b      	ldr	r3, [r7, #32]
 8004acc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad0:	685a      	ldr	r2, [r3, #4]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	1ad2      	subs	r2, r2, r3
 8004ad6:	2308      	movs	r3, #8
 8004ad8:	005b      	lsls	r3, r3, #1
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d920      	bls.n	8004b20 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004ade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	f003 0307 	and.w	r3, r3, #7
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00b      	beq.n	8004b08 <pvPortMalloc+0xfc>
 8004af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af4:	b672      	cpsid	i
 8004af6:	f383 8811 	msr	BASEPRI, r3
 8004afa:	f3bf 8f6f 	isb	sy
 8004afe:	f3bf 8f4f 	dsb	sy
 8004b02:	b662      	cpsie	i
 8004b04:	613b      	str	r3, [r7, #16]
 8004b06:	e7fe      	b.n	8004b06 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0a:	685a      	ldr	r2, [r3, #4]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	1ad2      	subs	r2, r2, r3
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004b1a:	69b8      	ldr	r0, [r7, #24]
 8004b1c:	f000 f8fc 	bl	8004d18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004b20:	4b1b      	ldr	r3, [pc, #108]	; (8004b90 <pvPortMalloc+0x184>)
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	4a19      	ldr	r2, [pc, #100]	; (8004b90 <pvPortMalloc+0x184>)
 8004b2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004b2e:	4b18      	ldr	r3, [pc, #96]	; (8004b90 <pvPortMalloc+0x184>)
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	4b19      	ldr	r3, [pc, #100]	; (8004b98 <pvPortMalloc+0x18c>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d203      	bcs.n	8004b42 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004b3a:	4b15      	ldr	r3, [pc, #84]	; (8004b90 <pvPortMalloc+0x184>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a16      	ldr	r2, [pc, #88]	; (8004b98 <pvPortMalloc+0x18c>)
 8004b40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b44:	685a      	ldr	r2, [r3, #4]
 8004b46:	4b11      	ldr	r3, [pc, #68]	; (8004b8c <pvPortMalloc+0x180>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	431a      	orrs	r2, r3
 8004b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b52:	2200      	movs	r2, #0
 8004b54:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004b56:	f7fe fc35 	bl	80033c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	f003 0307 	and.w	r3, r3, #7
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d00b      	beq.n	8004b7c <pvPortMalloc+0x170>
 8004b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b68:	b672      	cpsid	i
 8004b6a:	f383 8811 	msr	BASEPRI, r3
 8004b6e:	f3bf 8f6f 	isb	sy
 8004b72:	f3bf 8f4f 	dsb	sy
 8004b76:	b662      	cpsie	i
 8004b78:	60fb      	str	r3, [r7, #12]
 8004b7a:	e7fe      	b.n	8004b7a <pvPortMalloc+0x16e>
	return pvReturn;
 8004b7c:	69fb      	ldr	r3, [r7, #28]
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3728      	adds	r7, #40	; 0x28
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	20004920 	.word	0x20004920
 8004b8c:	2000492c 	.word	0x2000492c
 8004b90:	20004924 	.word	0x20004924
 8004b94:	20004918 	.word	0x20004918
 8004b98:	20004928 	.word	0x20004928

08004b9c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b086      	sub	sp, #24
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d04a      	beq.n	8004c44 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004bae:	2308      	movs	r3, #8
 8004bb0:	425b      	negs	r3, r3
 8004bb2:	697a      	ldr	r2, [r7, #20]
 8004bb4:	4413      	add	r3, r2
 8004bb6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	685a      	ldr	r2, [r3, #4]
 8004bc0:	4b22      	ldr	r3, [pc, #136]	; (8004c4c <vPortFree+0xb0>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d10b      	bne.n	8004be2 <vPortFree+0x46>
 8004bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bce:	b672      	cpsid	i
 8004bd0:	f383 8811 	msr	BASEPRI, r3
 8004bd4:	f3bf 8f6f 	isb	sy
 8004bd8:	f3bf 8f4f 	dsb	sy
 8004bdc:	b662      	cpsie	i
 8004bde:	60fb      	str	r3, [r7, #12]
 8004be0:	e7fe      	b.n	8004be0 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00b      	beq.n	8004c02 <vPortFree+0x66>
 8004bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bee:	b672      	cpsid	i
 8004bf0:	f383 8811 	msr	BASEPRI, r3
 8004bf4:	f3bf 8f6f 	isb	sy
 8004bf8:	f3bf 8f4f 	dsb	sy
 8004bfc:	b662      	cpsie	i
 8004bfe:	60bb      	str	r3, [r7, #8]
 8004c00:	e7fe      	b.n	8004c00 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	685a      	ldr	r2, [r3, #4]
 8004c06:	4b11      	ldr	r3, [pc, #68]	; (8004c4c <vPortFree+0xb0>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d019      	beq.n	8004c44 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d115      	bne.n	8004c44 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	685a      	ldr	r2, [r3, #4]
 8004c1c:	4b0b      	ldr	r3, [pc, #44]	; (8004c4c <vPortFree+0xb0>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	43db      	mvns	r3, r3
 8004c22:	401a      	ands	r2, r3
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004c28:	f7fe fbbe 	bl	80033a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	685a      	ldr	r2, [r3, #4]
 8004c30:	4b07      	ldr	r3, [pc, #28]	; (8004c50 <vPortFree+0xb4>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4413      	add	r3, r2
 8004c36:	4a06      	ldr	r2, [pc, #24]	; (8004c50 <vPortFree+0xb4>)
 8004c38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c3a:	6938      	ldr	r0, [r7, #16]
 8004c3c:	f000 f86c 	bl	8004d18 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004c40:	f7fe fbc0 	bl	80033c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004c44:	bf00      	nop
 8004c46:	3718      	adds	r7, #24
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	2000492c 	.word	0x2000492c
 8004c50:	20004924 	.word	0x20004924

08004c54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004c54:	b480      	push	{r7}
 8004c56:	b085      	sub	sp, #20
 8004c58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004c5a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004c5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004c60:	4b27      	ldr	r3, [pc, #156]	; (8004d00 <prvHeapInit+0xac>)
 8004c62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f003 0307 	and.w	r3, r3, #7
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d00c      	beq.n	8004c88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	3307      	adds	r3, #7
 8004c72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f023 0307 	bic.w	r3, r3, #7
 8004c7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004c7c:	68ba      	ldr	r2, [r7, #8]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	4a1f      	ldr	r2, [pc, #124]	; (8004d00 <prvHeapInit+0xac>)
 8004c84:	4413      	add	r3, r2
 8004c86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004c8c:	4a1d      	ldr	r2, [pc, #116]	; (8004d04 <prvHeapInit+0xb0>)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004c92:	4b1c      	ldr	r3, [pc, #112]	; (8004d04 <prvHeapInit+0xb0>)
 8004c94:	2200      	movs	r2, #0
 8004c96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	68ba      	ldr	r2, [r7, #8]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004ca0:	2208      	movs	r2, #8
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	1a9b      	subs	r3, r3, r2
 8004ca6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f023 0307 	bic.w	r3, r3, #7
 8004cae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	4a15      	ldr	r2, [pc, #84]	; (8004d08 <prvHeapInit+0xb4>)
 8004cb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004cb6:	4b14      	ldr	r3, [pc, #80]	; (8004d08 <prvHeapInit+0xb4>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004cbe:	4b12      	ldr	r3, [pc, #72]	; (8004d08 <prvHeapInit+0xb4>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	68fa      	ldr	r2, [r7, #12]
 8004cce:	1ad2      	subs	r2, r2, r3
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004cd4:	4b0c      	ldr	r3, [pc, #48]	; (8004d08 <prvHeapInit+0xb4>)
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	4a0a      	ldr	r2, [pc, #40]	; (8004d0c <prvHeapInit+0xb8>)
 8004ce2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	4a09      	ldr	r2, [pc, #36]	; (8004d10 <prvHeapInit+0xbc>)
 8004cea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004cec:	4b09      	ldr	r3, [pc, #36]	; (8004d14 <prvHeapInit+0xc0>)
 8004cee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004cf2:	601a      	str	r2, [r3, #0]
}
 8004cf4:	bf00      	nop
 8004cf6:	3714      	adds	r7, #20
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr
 8004d00:	20000d18 	.word	0x20000d18
 8004d04:	20004918 	.word	0x20004918
 8004d08:	20004920 	.word	0x20004920
 8004d0c:	20004928 	.word	0x20004928
 8004d10:	20004924 	.word	0x20004924
 8004d14:	2000492c 	.word	0x2000492c

08004d18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b085      	sub	sp, #20
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004d20:	4b28      	ldr	r3, [pc, #160]	; (8004dc4 <prvInsertBlockIntoFreeList+0xac>)
 8004d22:	60fb      	str	r3, [r7, #12]
 8004d24:	e002      	b.n	8004d2c <prvInsertBlockIntoFreeList+0x14>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	60fb      	str	r3, [r7, #12]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d8f7      	bhi.n	8004d26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	68ba      	ldr	r2, [r7, #8]
 8004d40:	4413      	add	r3, r2
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d108      	bne.n	8004d5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	685a      	ldr	r2, [r3, #4]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	441a      	add	r2, r3
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	68ba      	ldr	r2, [r7, #8]
 8004d64:	441a      	add	r2, r3
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d118      	bne.n	8004da0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	4b15      	ldr	r3, [pc, #84]	; (8004dc8 <prvInsertBlockIntoFreeList+0xb0>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d00d      	beq.n	8004d96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	685a      	ldr	r2, [r3, #4]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	441a      	add	r2, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	601a      	str	r2, [r3, #0]
 8004d94:	e008      	b.n	8004da8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004d96:	4b0c      	ldr	r3, [pc, #48]	; (8004dc8 <prvInsertBlockIntoFreeList+0xb0>)
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	601a      	str	r2, [r3, #0]
 8004d9e:	e003      	b.n	8004da8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004da8:	68fa      	ldr	r2, [r7, #12]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d002      	beq.n	8004db6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004db6:	bf00      	nop
 8004db8:	3714      	adds	r7, #20
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr
 8004dc2:	bf00      	nop
 8004dc4:	20004918 	.word	0x20004918
 8004dc8:	20004920 	.word	0x20004920

08004dcc <__libc_init_array>:
 8004dcc:	b570      	push	{r4, r5, r6, lr}
 8004dce:	4e0d      	ldr	r6, [pc, #52]	; (8004e04 <__libc_init_array+0x38>)
 8004dd0:	4c0d      	ldr	r4, [pc, #52]	; (8004e08 <__libc_init_array+0x3c>)
 8004dd2:	1ba4      	subs	r4, r4, r6
 8004dd4:	10a4      	asrs	r4, r4, #2
 8004dd6:	2500      	movs	r5, #0
 8004dd8:	42a5      	cmp	r5, r4
 8004dda:	d109      	bne.n	8004df0 <__libc_init_array+0x24>
 8004ddc:	4e0b      	ldr	r6, [pc, #44]	; (8004e0c <__libc_init_array+0x40>)
 8004dde:	4c0c      	ldr	r4, [pc, #48]	; (8004e10 <__libc_init_array+0x44>)
 8004de0:	f000 f82c 	bl	8004e3c <_init>
 8004de4:	1ba4      	subs	r4, r4, r6
 8004de6:	10a4      	asrs	r4, r4, #2
 8004de8:	2500      	movs	r5, #0
 8004dea:	42a5      	cmp	r5, r4
 8004dec:	d105      	bne.n	8004dfa <__libc_init_array+0x2e>
 8004dee:	bd70      	pop	{r4, r5, r6, pc}
 8004df0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004df4:	4798      	blx	r3
 8004df6:	3501      	adds	r5, #1
 8004df8:	e7ee      	b.n	8004dd8 <__libc_init_array+0xc>
 8004dfa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004dfe:	4798      	blx	r3
 8004e00:	3501      	adds	r5, #1
 8004e02:	e7f2      	b.n	8004dea <__libc_init_array+0x1e>
 8004e04:	08004ef0 	.word	0x08004ef0
 8004e08:	08004ef0 	.word	0x08004ef0
 8004e0c:	08004ef0 	.word	0x08004ef0
 8004e10:	08004ef4 	.word	0x08004ef4

08004e14 <memcpy>:
 8004e14:	b510      	push	{r4, lr}
 8004e16:	1e43      	subs	r3, r0, #1
 8004e18:	440a      	add	r2, r1
 8004e1a:	4291      	cmp	r1, r2
 8004e1c:	d100      	bne.n	8004e20 <memcpy+0xc>
 8004e1e:	bd10      	pop	{r4, pc}
 8004e20:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e28:	e7f7      	b.n	8004e1a <memcpy+0x6>

08004e2a <memset>:
 8004e2a:	4402      	add	r2, r0
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d100      	bne.n	8004e34 <memset+0xa>
 8004e32:	4770      	bx	lr
 8004e34:	f803 1b01 	strb.w	r1, [r3], #1
 8004e38:	e7f9      	b.n	8004e2e <memset+0x4>
	...

08004e3c <_init>:
 8004e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e3e:	bf00      	nop
 8004e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e42:	bc08      	pop	{r3}
 8004e44:	469e      	mov	lr, r3
 8004e46:	4770      	bx	lr

08004e48 <_fini>:
 8004e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e4a:	bf00      	nop
 8004e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e4e:	bc08      	pop	{r3}
 8004e50:	469e      	mov	lr, r3
 8004e52:	4770      	bx	lr
