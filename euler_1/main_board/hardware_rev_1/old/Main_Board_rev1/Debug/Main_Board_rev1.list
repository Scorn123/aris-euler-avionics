
Main_Board_rev1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094d4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  080096a4  080096a4  000196a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009768  08009768  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08009768  08009768  00019768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009770  08009770  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009770  08009770  00019770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009774  08009774  00019774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08009778  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000692c  2000000c  08009784  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006938  08009784  00026938  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026a99  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000465e  00000000  00000000  00046ad5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000021a0  00000000  00000000  0004b138  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001f28  00000000  00000000  0004d2d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00005464  00000000  00000000  0004f200  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001c022  00000000  00000000  00054664  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00102a47  00000000  00000000  00070686  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001730cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008e0c  00000000  00000000  00173148  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000000c 	.word	0x2000000c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800968c 	.word	0x0800968c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000010 	.word	0x20000010
 800020c:	0800968c 	.word	0x0800968c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b972 	b.w	800050c <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	4688      	mov	r8, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14b      	bne.n	80002e6 <__udivmoddi4+0xa6>
 800024e:	428a      	cmp	r2, r1
 8000250:	4615      	mov	r5, r2
 8000252:	d967      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0720 	rsb	r7, r2, #32
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	fa20 f707 	lsr.w	r7, r0, r7
 8000266:	4095      	lsls	r5, r2
 8000268:	ea47 0803 	orr.w	r8, r7, r3
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbb8 f7fe 	udiv	r7, r8, lr
 8000278:	fa1f fc85 	uxth.w	ip, r5
 800027c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000280:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000284:	fb07 f10c 	mul.w	r1, r7, ip
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18eb      	adds	r3, r5, r3
 800028e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000292:	f080 811b 	bcs.w	80004cc <__udivmoddi4+0x28c>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8118 	bls.w	80004cc <__udivmoddi4+0x28c>
 800029c:	3f02      	subs	r7, #2
 800029e:	442b      	add	r3, r5
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b4:	45a4      	cmp	ip, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	192c      	adds	r4, r5, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8107 	bcs.w	80004d0 <__udivmoddi4+0x290>
 80002c2:	45a4      	cmp	ip, r4
 80002c4:	f240 8104 	bls.w	80004d0 <__udivmoddi4+0x290>
 80002c8:	3802      	subs	r0, #2
 80002ca:	442c      	add	r4, r5
 80002cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d0:	eba4 040c 	sub.w	r4, r4, ip
 80002d4:	2700      	movs	r7, #0
 80002d6:	b11e      	cbz	r6, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c6 4300 	strd	r4, r3, [r6]
 80002e0:	4639      	mov	r1, r7
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d909      	bls.n	80002fe <__udivmoddi4+0xbe>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80eb 	beq.w	80004c6 <__udivmoddi4+0x286>
 80002f0:	2700      	movs	r7, #0
 80002f2:	e9c6 0100 	strd	r0, r1, [r6]
 80002f6:	4638      	mov	r0, r7
 80002f8:	4639      	mov	r1, r7
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	fab3 f783 	clz	r7, r3
 8000302:	2f00      	cmp	r7, #0
 8000304:	d147      	bne.n	8000396 <__udivmoddi4+0x156>
 8000306:	428b      	cmp	r3, r1
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xd0>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2c4>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb61 0303 	sbc.w	r3, r1, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4698      	mov	r8, r3
 800031a:	2e00      	cmp	r6, #0
 800031c:	d0e0      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800031e:	e9c6 4800 	strd	r4, r8, [r6]
 8000322:	e7dd      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000324:	b902      	cbnz	r2, 8000328 <__udivmoddi4+0xe8>
 8000326:	deff      	udf	#255	; 0xff
 8000328:	fab2 f282 	clz	r2, r2
 800032c:	2a00      	cmp	r2, #0
 800032e:	f040 808f 	bne.w	8000450 <__udivmoddi4+0x210>
 8000332:	1b49      	subs	r1, r1, r5
 8000334:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000338:	fa1f f885 	uxth.w	r8, r5
 800033c:	2701      	movs	r7, #1
 800033e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fb0e 111c 	mls	r1, lr, ip, r1
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb08 f10c 	mul.w	r1, r8, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x124>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f10c 30ff 	add.w	r0, ip, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4299      	cmp	r1, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 8000362:	4684      	mov	ip, r0
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	b2a3      	uxth	r3, r4
 8000368:	fbb1 f0fe 	udiv	r0, r1, lr
 800036c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000370:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000374:	fb08 f800 	mul.w	r8, r8, r0
 8000378:	45a0      	cmp	r8, r4
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x14c>
 800037c:	192c      	adds	r4, r5, r4
 800037e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x14a>
 8000384:	45a0      	cmp	r8, r4
 8000386:	f200 80b6 	bhi.w	80004f6 <__udivmoddi4+0x2b6>
 800038a:	4618      	mov	r0, r3
 800038c:	eba4 0408 	sub.w	r4, r4, r8
 8000390:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000394:	e79f      	b.n	80002d6 <__udivmoddi4+0x96>
 8000396:	f1c7 0c20 	rsb	ip, r7, #32
 800039a:	40bb      	lsls	r3, r7
 800039c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003a4:	fa01 f407 	lsl.w	r4, r1, r7
 80003a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003b4:	4325      	orrs	r5, r4
 80003b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ba:	0c2c      	lsrs	r4, r5, #16
 80003bc:	fb08 3319 	mls	r3, r8, r9, r3
 80003c0:	fa1f fa8e 	uxth.w	sl, lr
 80003c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c8:	fb09 f40a 	mul.w	r4, r9, sl
 80003cc:	429c      	cmp	r4, r3
 80003ce:	fa02 f207 	lsl.w	r2, r2, r7
 80003d2:	fa00 f107 	lsl.w	r1, r0, r7
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1e 0303 	adds.w	r3, lr, r3
 80003dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e0:	f080 8087 	bcs.w	80004f2 <__udivmoddi4+0x2b2>
 80003e4:	429c      	cmp	r4, r3
 80003e6:	f240 8084 	bls.w	80004f2 <__udivmoddi4+0x2b2>
 80003ea:	f1a9 0902 	sub.w	r9, r9, #2
 80003ee:	4473      	add	r3, lr
 80003f0:	1b1b      	subs	r3, r3, r4
 80003f2:	b2ad      	uxth	r5, r5
 80003f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f8:	fb08 3310 	mls	r3, r8, r0, r3
 80003fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000400:	fb00 fa0a 	mul.w	sl, r0, sl
 8000404:	45a2      	cmp	sl, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1e 0404 	adds.w	r4, lr, r4
 800040c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000410:	d26b      	bcs.n	80004ea <__udivmoddi4+0x2aa>
 8000412:	45a2      	cmp	sl, r4
 8000414:	d969      	bls.n	80004ea <__udivmoddi4+0x2aa>
 8000416:	3802      	subs	r0, #2
 8000418:	4474      	add	r4, lr
 800041a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800041e:	fba0 8902 	umull	r8, r9, r0, r2
 8000422:	eba4 040a 	sub.w	r4, r4, sl
 8000426:	454c      	cmp	r4, r9
 8000428:	46c2      	mov	sl, r8
 800042a:	464b      	mov	r3, r9
 800042c:	d354      	bcc.n	80004d8 <__udivmoddi4+0x298>
 800042e:	d051      	beq.n	80004d4 <__udivmoddi4+0x294>
 8000430:	2e00      	cmp	r6, #0
 8000432:	d069      	beq.n	8000508 <__udivmoddi4+0x2c8>
 8000434:	ebb1 050a 	subs.w	r5, r1, sl
 8000438:	eb64 0403 	sbc.w	r4, r4, r3
 800043c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000440:	40fd      	lsrs	r5, r7
 8000442:	40fc      	lsrs	r4, r7
 8000444:	ea4c 0505 	orr.w	r5, ip, r5
 8000448:	e9c6 5400 	strd	r5, r4, [r6]
 800044c:	2700      	movs	r7, #0
 800044e:	e747      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000450:	f1c2 0320 	rsb	r3, r2, #32
 8000454:	fa20 f703 	lsr.w	r7, r0, r3
 8000458:	4095      	lsls	r5, r2
 800045a:	fa01 f002 	lsl.w	r0, r1, r2
 800045e:	fa21 f303 	lsr.w	r3, r1, r3
 8000462:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000466:	4338      	orrs	r0, r7
 8000468:	0c01      	lsrs	r1, r0, #16
 800046a:	fbb3 f7fe 	udiv	r7, r3, lr
 800046e:	fa1f f885 	uxth.w	r8, r5
 8000472:	fb0e 3317 	mls	r3, lr, r7, r3
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb07 f308 	mul.w	r3, r7, r8
 800047e:	428b      	cmp	r3, r1
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x256>
 8000486:	1869      	adds	r1, r5, r1
 8000488:	f107 3cff 	add.w	ip, r7, #4294967295
 800048c:	d22f      	bcs.n	80004ee <__udivmoddi4+0x2ae>
 800048e:	428b      	cmp	r3, r1
 8000490:	d92d      	bls.n	80004ee <__udivmoddi4+0x2ae>
 8000492:	3f02      	subs	r7, #2
 8000494:	4429      	add	r1, r5
 8000496:	1acb      	subs	r3, r1, r3
 8000498:	b281      	uxth	r1, r0
 800049a:	fbb3 f0fe 	udiv	r0, r3, lr
 800049e:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a6:	fb00 f308 	mul.w	r3, r0, r8
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x27e>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004b4:	d217      	bcs.n	80004e6 <__udivmoddi4+0x2a6>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d915      	bls.n	80004e6 <__udivmoddi4+0x2a6>
 80004ba:	3802      	subs	r0, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004c4:	e73b      	b.n	800033e <__udivmoddi4+0xfe>
 80004c6:	4637      	mov	r7, r6
 80004c8:	4630      	mov	r0, r6
 80004ca:	e709      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004cc:	4607      	mov	r7, r0
 80004ce:	e6e7      	b.n	80002a0 <__udivmoddi4+0x60>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6fb      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d4:	4541      	cmp	r1, r8
 80004d6:	d2ab      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004dc:	eb69 020e 	sbc.w	r2, r9, lr
 80004e0:	3801      	subs	r0, #1
 80004e2:	4613      	mov	r3, r2
 80004e4:	e7a4      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e6:	4660      	mov	r0, ip
 80004e8:	e7e9      	b.n	80004be <__udivmoddi4+0x27e>
 80004ea:	4618      	mov	r0, r3
 80004ec:	e795      	b.n	800041a <__udivmoddi4+0x1da>
 80004ee:	4667      	mov	r7, ip
 80004f0:	e7d1      	b.n	8000496 <__udivmoddi4+0x256>
 80004f2:	4681      	mov	r9, r0
 80004f4:	e77c      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	442c      	add	r4, r5
 80004fa:	e747      	b.n	800038c <__udivmoddi4+0x14c>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	442b      	add	r3, r5
 8000502:	e72f      	b.n	8000364 <__udivmoddi4+0x124>
 8000504:	4638      	mov	r0, r7
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xda>
 8000508:	4637      	mov	r7, r6
 800050a:	e6e9      	b.n	80002e0 <__udivmoddi4+0xa0>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b0da      	sub	sp, #360	; 0x168
 8000514:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000516:	f001 fd0a 	bl	8001f2e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051a:	f000 f9ef 	bl	80008fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051e:	f000 fe0d 	bl	800113c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000522:	f000 fa8f 	bl	8000a44 <MX_ADC1_Init>
  MX_CAN1_Init();
 8000526:	f000 fadf 	bl	8000ae8 <MX_CAN1_Init>
  MX_I2C1_Init();
 800052a:	f000 fb11 	bl	8000b50 <MX_I2C1_Init>
  MX_I2C2_Init();
 800052e:	f000 fb4f 	bl	8000bd0 <MX_I2C2_Init>
  MX_SDMMC1_SD_Init();
 8000532:	f000 fb8d 	bl	8000c50 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 8000536:	f000 fbbb 	bl	8000cb0 <MX_SPI1_Init>
  MX_SPI2_Init();
 800053a:	f000 fbf7 	bl	8000d2c <MX_SPI2_Init>
  MX_SPI3_Init();
 800053e:	f000 fc33 	bl	8000da8 <MX_SPI3_Init>
  MX_SPI4_Init();
 8000542:	f000 fc6f 	bl	8000e24 <MX_SPI4_Init>
  MX_UART4_Init();
 8000546:	f000 fcab 	bl	8000ea0 <MX_UART4_Init>
  MX_UART7_Init();
 800054a:	f000 fcd9 	bl	8000f00 <MX_UART7_Init>
  MX_USART1_UART_Init();
 800054e:	f000 fd07 	bl	8000f60 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000552:	f000 fd35 	bl	8000fc0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000556:	f000 fd63 	bl	8001020 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 800055a:	f000 fd91 	bl	8001080 <MX_USART6_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800055e:	f000 fdbf 	bl	80010e0 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  osKernelInitialize();
 8000562:	f006 fa13 	bl	800698c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  const osThreadAttr_t defaultTask_attributes = {
 8000566:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 800056a:	2224      	movs	r2, #36	; 0x24
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f009 f883 	bl	800967a <memset>
 8000574:	4bb1      	ldr	r3, [pc, #708]	; (800083c <main+0x32c>)
 8000576:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800057a:	2380      	movs	r3, #128	; 0x80
 800057c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8000580:	2318      	movs	r3, #24
 8000582:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    .name = "defaultTask",
    .priority = (osPriority_t) osPriorityNormal,
    .stack_size = 128
  };
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000586:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 800058a:	461a      	mov	r2, r3
 800058c:	2100      	movs	r1, #0
 800058e:	48ac      	ldr	r0, [pc, #688]	; (8000840 <main+0x330>)
 8000590:	f006 fa96 	bl	8006ac0 <osThreadNew>
 8000594:	4602      	mov	r2, r0
 8000596:	4bab      	ldr	r3, [pc, #684]	; (8000844 <main+0x334>)
 8000598:	601a      	str	r2, [r3, #0]

  /* definition and creation of task_sens_read */
  const osThreadAttr_t task_sens_read_attributes = {
 800059a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800059e:	2224      	movs	r2, #36	; 0x24
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f009 f869 	bl	800967a <memset>
 80005a8:	4ba7      	ldr	r3, [pc, #668]	; (8000848 <main+0x338>)
 80005aa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80005ae:	4ba7      	ldr	r3, [pc, #668]	; (800084c <main+0x33c>)
 80005b0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80005b4:	235c      	movs	r3, #92	; 0x5c
 80005b6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80005ba:	4ba5      	ldr	r3, [pc, #660]	; (8000850 <main+0x340>)
 80005bc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80005c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005c4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80005c8:	2318      	movs	r3, #24
 80005ca:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    .stack_size = sizeof(task_sens_readBuffer),
    .cb_mem = &task_sens_readControlBlock,
    .cb_size = sizeof(task_sens_readControlBlock),
    .priority = (osPriority_t) osPriorityNormal,
  };
  task_sens_readHandle = osThreadNew(vTaskSensRead, NULL, &task_sens_read_attributes);
 80005ce:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80005d2:	461a      	mov	r2, r3
 80005d4:	2100      	movs	r1, #0
 80005d6:	489f      	ldr	r0, [pc, #636]	; (8000854 <main+0x344>)
 80005d8:	f006 fa72 	bl	8006ac0 <osThreadNew>
 80005dc:	4602      	mov	r2, r0
 80005de:	4b9e      	ldr	r3, [pc, #632]	; (8000858 <main+0x348>)
 80005e0:	601a      	str	r2, [r3, #0]

  /* definition and creation of task_gps_read */
  const osThreadAttr_t task_gps_read_attributes = {
 80005e2:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80005e6:	2224      	movs	r2, #36	; 0x24
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f009 f845 	bl	800967a <memset>
 80005f0:	4b9a      	ldr	r3, [pc, #616]	; (800085c <main+0x34c>)
 80005f2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80005f6:	4b9a      	ldr	r3, [pc, #616]	; (8000860 <main+0x350>)
 80005f8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80005fc:	235c      	movs	r3, #92	; 0x5c
 80005fe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8000602:	4b98      	ldr	r3, [pc, #608]	; (8000864 <main+0x354>)
 8000604:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000608:	f44f 7300 	mov.w	r3, #512	; 0x200
 800060c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8000610:	2318      	movs	r3, #24
 8000612:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    .stack_size = sizeof(task_gps_readBuffer),
    .cb_mem = &task_gps_readControlBlock,
    .cb_size = sizeof(task_gps_readControlBlock),
    .priority = (osPriority_t) osPriorityNormal,
  };
  task_gps_readHandle = osThreadNew(vTaskGpsRead, NULL, &task_gps_read_attributes);
 8000616:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800061a:	461a      	mov	r2, r3
 800061c:	2100      	movs	r1, #0
 800061e:	4892      	ldr	r0, [pc, #584]	; (8000868 <main+0x358>)
 8000620:	f006 fa4e 	bl	8006ac0 <osThreadNew>
 8000624:	4602      	mov	r2, r0
 8000626:	4b91      	ldr	r3, [pc, #580]	; (800086c <main+0x35c>)
 8000628:	601a      	str	r2, [r3, #0]

  /* definition and creation of task_state_est */
  const osThreadAttr_t task_state_est_attributes = {
 800062a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800062e:	2224      	movs	r2, #36	; 0x24
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f009 f821 	bl	800967a <memset>
 8000638:	4b8d      	ldr	r3, [pc, #564]	; (8000870 <main+0x360>)
 800063a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800063e:	4b8d      	ldr	r3, [pc, #564]	; (8000874 <main+0x364>)
 8000640:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8000644:	235c      	movs	r3, #92	; 0x5c
 8000646:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800064a:	4b8b      	ldr	r3, [pc, #556]	; (8000878 <main+0x368>)
 800064c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000650:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000654:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8000658:	2318      	movs	r3, #24
 800065a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    .stack_size = sizeof(task_state_estBuffer),
    .cb_mem = &task_state_estControlBlock,
    .cb_size = sizeof(task_state_estControlBlock),
    .priority = (osPriority_t) osPriorityNormal,
  };
  task_state_estHandle = osThreadNew(vTaskStateEst, NULL, &task_state_est_attributes);
 800065e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000662:	461a      	mov	r2, r3
 8000664:	2100      	movs	r1, #0
 8000666:	4885      	ldr	r0, [pc, #532]	; (800087c <main+0x36c>)
 8000668:	f006 fa2a 	bl	8006ac0 <osThreadNew>
 800066c:	4602      	mov	r2, r0
 800066e:	4b84      	ldr	r3, [pc, #528]	; (8000880 <main+0x370>)
 8000670:	601a      	str	r2, [r3, #0]

  /* definition and creation of task_fsm */
  const osThreadAttr_t task_fsm_attributes = {
 8000672:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000676:	2224      	movs	r2, #36	; 0x24
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f008 fffd 	bl	800967a <memset>
 8000680:	4b80      	ldr	r3, [pc, #512]	; (8000884 <main+0x374>)
 8000682:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8000686:	4b80      	ldr	r3, [pc, #512]	; (8000888 <main+0x378>)
 8000688:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800068c:	235c      	movs	r3, #92	; 0x5c
 800068e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8000692:	4b7e      	ldr	r3, [pc, #504]	; (800088c <main+0x37c>)
 8000694:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8000698:	f44f 7300 	mov.w	r3, #512	; 0x200
 800069c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80006a0:	2318      	movs	r3, #24
 80006a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    .stack_size = sizeof(task_fsmBuffer),
    .cb_mem = &task_fsmControlBlock,
    .cb_size = sizeof(task_fsmControlBlock),
    .priority = (osPriority_t) osPriorityNormal,
  };
  task_fsmHandle = osThreadNew(vTaskFsm, NULL, &task_fsm_attributes);
 80006a6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80006aa:	461a      	mov	r2, r3
 80006ac:	2100      	movs	r1, #0
 80006ae:	4878      	ldr	r0, [pc, #480]	; (8000890 <main+0x380>)
 80006b0:	f006 fa06 	bl	8006ac0 <osThreadNew>
 80006b4:	4602      	mov	r2, r0
 80006b6:	4b77      	ldr	r3, [pc, #476]	; (8000894 <main+0x384>)
 80006b8:	601a      	str	r2, [r3, #0]

  /* definition and creation of task_controller */
  const osThreadAttr_t task_controller_attributes = {
 80006ba:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80006be:	2224      	movs	r2, #36	; 0x24
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f008 ffd9 	bl	800967a <memset>
 80006c8:	4b73      	ldr	r3, [pc, #460]	; (8000898 <main+0x388>)
 80006ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80006ce:	4b73      	ldr	r3, [pc, #460]	; (800089c <main+0x38c>)
 80006d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80006d4:	235c      	movs	r3, #92	; 0x5c
 80006d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80006da:	4b71      	ldr	r3, [pc, #452]	; (80008a0 <main+0x390>)
 80006dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80006e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80006e8:	2318      	movs	r3, #24
 80006ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    .stack_size = sizeof(task_controllerBuffer),
    .cb_mem = &task_controllerControlBlock,
    .cb_size = sizeof(task_controllerControlBlock),
    .priority = (osPriority_t) osPriorityNormal,
  };
  task_controllerHandle = osThreadNew(vTaskController, NULL, &task_controller_attributes);
 80006ee:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80006f2:	461a      	mov	r2, r3
 80006f4:	2100      	movs	r1, #0
 80006f6:	486b      	ldr	r0, [pc, #428]	; (80008a4 <main+0x394>)
 80006f8:	f006 f9e2 	bl	8006ac0 <osThreadNew>
 80006fc:	4602      	mov	r2, r0
 80006fe:	4b6a      	ldr	r3, [pc, #424]	; (80008a8 <main+0x398>)
 8000700:	601a      	str	r2, [r3, #0]

  /* definition and creation of task_motor_cont */
  const osThreadAttr_t task_motor_cont_attributes = {
 8000702:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000706:	2224      	movs	r2, #36	; 0x24
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f008 ffb5 	bl	800967a <memset>
 8000710:	4b66      	ldr	r3, [pc, #408]	; (80008ac <main+0x39c>)
 8000712:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000714:	4b66      	ldr	r3, [pc, #408]	; (80008b0 <main+0x3a0>)
 8000716:	677b      	str	r3, [r7, #116]	; 0x74
 8000718:	235c      	movs	r3, #92	; 0x5c
 800071a:	67bb      	str	r3, [r7, #120]	; 0x78
 800071c:	4b65      	ldr	r3, [pc, #404]	; (80008b4 <main+0x3a4>)
 800071e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000720:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000724:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000728:	2318      	movs	r3, #24
 800072a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    .stack_size = sizeof(task_motor_contBuffer),
    .cb_mem = &task_motor_contControlBlock,
    .cb_size = sizeof(task_motor_contControlBlock),
    .priority = (osPriority_t) osPriorityNormal,
  };
  task_motor_contHandle = osThreadNew(vTaskMotorCont, NULL, &task_motor_cont_attributes);
 800072e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000732:	461a      	mov	r2, r3
 8000734:	2100      	movs	r1, #0
 8000736:	4860      	ldr	r0, [pc, #384]	; (80008b8 <main+0x3a8>)
 8000738:	f006 f9c2 	bl	8006ac0 <osThreadNew>
 800073c:	4602      	mov	r2, r0
 800073e:	4b5f      	ldr	r3, [pc, #380]	; (80008bc <main+0x3ac>)
 8000740:	601a      	str	r2, [r3, #0]

  /* definition and creation of task_buzzer */
  const osThreadAttr_t task_buzzer_attributes = {
 8000742:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000746:	4618      	mov	r0, r3
 8000748:	2324      	movs	r3, #36	; 0x24
 800074a:	461a      	mov	r2, r3
 800074c:	2100      	movs	r1, #0
 800074e:	f008 ff94 	bl	800967a <memset>
 8000752:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000756:	4a5a      	ldr	r2, [pc, #360]	; (80008c0 <main+0x3b0>)
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800075e:	4a59      	ldr	r2, [pc, #356]	; (80008c4 <main+0x3b4>)
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000766:	225c      	movs	r2, #92	; 0x5c
 8000768:	60da      	str	r2, [r3, #12]
 800076a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800076e:	4a56      	ldr	r2, [pc, #344]	; (80008c8 <main+0x3b8>)
 8000770:	611a      	str	r2, [r3, #16]
 8000772:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000776:	f44f 7200 	mov.w	r2, #512	; 0x200
 800077a:	615a      	str	r2, [r3, #20]
 800077c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000780:	2218      	movs	r2, #24
 8000782:	619a      	str	r2, [r3, #24]
    .stack_size = sizeof(task_buzzerBuffer),
    .cb_mem = &task_buzzerControlBlock,
    .cb_size = sizeof(task_buzzerControlBlock),
    .priority = (osPriority_t) osPriorityNormal,
  };
  task_buzzerHandle = osThreadNew(vTaskBuzzer, NULL, &task_buzzer_attributes);
 8000784:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000788:	461a      	mov	r2, r3
 800078a:	2100      	movs	r1, #0
 800078c:	484f      	ldr	r0, [pc, #316]	; (80008cc <main+0x3bc>)
 800078e:	f006 f997 	bl	8006ac0 <osThreadNew>
 8000792:	4602      	mov	r2, r0
 8000794:	4b4e      	ldr	r3, [pc, #312]	; (80008d0 <main+0x3c0>)
 8000796:	601a      	str	r2, [r3, #0]

  /* definition and creation of task_downlink */
  const osThreadAttr_t task_downlink_attributes = {
 8000798:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800079c:	4618      	mov	r0, r3
 800079e:	2324      	movs	r3, #36	; 0x24
 80007a0:	461a      	mov	r2, r3
 80007a2:	2100      	movs	r1, #0
 80007a4:	f008 ff69 	bl	800967a <memset>
 80007a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ac:	4a49      	ldr	r2, [pc, #292]	; (80008d4 <main+0x3c4>)
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b4:	4a48      	ldr	r2, [pc, #288]	; (80008d8 <main+0x3c8>)
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007bc:	225c      	movs	r2, #92	; 0x5c
 80007be:	60da      	str	r2, [r3, #12]
 80007c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007c4:	4a45      	ldr	r2, [pc, #276]	; (80008dc <main+0x3cc>)
 80007c6:	611a      	str	r2, [r3, #16]
 80007c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007d0:	615a      	str	r2, [r3, #20]
 80007d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007d6:	2218      	movs	r2, #24
 80007d8:	619a      	str	r2, [r3, #24]
    .stack_size = sizeof(task_downlinkBuffer),
    .cb_mem = &task_downlinkControlBlock,
    .cb_size = sizeof(task_downlinkControlBlock),
    .priority = (osPriority_t) osPriorityNormal,
  };
  task_downlinkHandle = osThreadNew(vTaskDownlink, NULL, &task_downlink_attributes);
 80007da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007de:	461a      	mov	r2, r3
 80007e0:	2100      	movs	r1, #0
 80007e2:	483f      	ldr	r0, [pc, #252]	; (80008e0 <main+0x3d0>)
 80007e4:	f006 f96c 	bl	8006ac0 <osThreadNew>
 80007e8:	4602      	mov	r2, r0
 80007ea:	4b3e      	ldr	r3, [pc, #248]	; (80008e4 <main+0x3d4>)
 80007ec:	601a      	str	r2, [r3, #0]

  /* definition and creation of task_sd_card */
  const osThreadAttr_t task_sd_card_attributes = {
 80007ee:	463b      	mov	r3, r7
 80007f0:	4618      	mov	r0, r3
 80007f2:	2324      	movs	r3, #36	; 0x24
 80007f4:	461a      	mov	r2, r3
 80007f6:	2100      	movs	r1, #0
 80007f8:	f008 ff3f 	bl	800967a <memset>
 80007fc:	463b      	mov	r3, r7
 80007fe:	4a3a      	ldr	r2, [pc, #232]	; (80008e8 <main+0x3d8>)
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	463b      	mov	r3, r7
 8000804:	4a39      	ldr	r2, [pc, #228]	; (80008ec <main+0x3dc>)
 8000806:	609a      	str	r2, [r3, #8]
 8000808:	463b      	mov	r3, r7
 800080a:	225c      	movs	r2, #92	; 0x5c
 800080c:	60da      	str	r2, [r3, #12]
 800080e:	463b      	mov	r3, r7
 8000810:	4a37      	ldr	r2, [pc, #220]	; (80008f0 <main+0x3e0>)
 8000812:	611a      	str	r2, [r3, #16]
 8000814:	463b      	mov	r3, r7
 8000816:	f44f 7200 	mov.w	r2, #512	; 0x200
 800081a:	615a      	str	r2, [r3, #20]
 800081c:	463b      	mov	r3, r7
 800081e:	2218      	movs	r2, #24
 8000820:	619a      	str	r2, [r3, #24]
    .stack_size = sizeof(task_sd_cardBuffer),
    .cb_mem = &task_sd_cardControlBlock,
    .cb_size = sizeof(task_sd_cardControlBlock),
    .priority = (osPriority_t) osPriorityNormal,
  };
  task_sd_cardHandle = osThreadNew(vTaskSdCard, NULL, &task_sd_card_attributes);
 8000822:	463b      	mov	r3, r7
 8000824:	461a      	mov	r2, r3
 8000826:	2100      	movs	r1, #0
 8000828:	4832      	ldr	r0, [pc, #200]	; (80008f4 <main+0x3e4>)
 800082a:	f006 f949 	bl	8006ac0 <osThreadNew>
 800082e:	4602      	mov	r2, r0
 8000830:	4b31      	ldr	r3, [pc, #196]	; (80008f8 <main+0x3e8>)
 8000832:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000834:	f006 f8de 	bl	80069f4 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000838:	e7fe      	b.n	8000838 <main+0x328>
 800083a:	bf00      	nop
 800083c:	080096a4 	.word	0x080096a4
 8000840:	0800131d 	.word	0x0800131d
 8000844:	20004b8c 	.word	0x20004b8c
 8000848:	080096b0 	.word	0x080096b0
 800084c:	20006204 	.word	0x20006204
 8000850:	200057e8 	.word	0x200057e8
 8000854:	08001e75 	.word	0x08001e75
 8000858:	20005530 	.word	0x20005530
 800085c:	080096c0 	.word	0x080096c0
 8000860:	20004930 	.word	0x20004930
 8000864:	20004cf4 	.word	0x20004cf4
 8000868:	08001dd9 	.word	0x08001dd9
 800086c:	20006620 	.word	0x20006620
 8000870:	080096d0 	.word	0x080096d0
 8000874:	200054d0 	.word	0x200054d0
 8000878:	20005acc 	.word	0x20005acc
 800087c:	08001ea9 	.word	0x08001ea9
 8000880:	200057e4 	.word	0x200057e4
 8000884:	080096e0 	.word	0x080096e0
 8000888:	200053f0 	.word	0x200053f0
 800088c:	20005534 	.word	0x20005534
 8000890:	08001da5 	.word	0x08001da5
 8000894:	200068ac 	.word	0x200068ac
 8000898:	080096ec 	.word	0x080096ec
 800089c:	20005d28 	.word	0x20005d28
 80008a0:	2000664c 	.word	0x2000664c
 80008a4:	08001d3d 	.word	0x08001d3d
 80008a8:	200068b0 	.word	0x200068b0
 80008ac:	080096fc 	.word	0x080096fc
 80008b0:	20005394 	.word	0x20005394
 80008b4:	20005d84 	.word	0x20005d84
 80008b8:	08001e0d 	.word	0x08001e0d
 80008bc:	200057e0 	.word	0x200057e0
 80008c0:	0800970c 	.word	0x0800970c
 80008c4:	2000684c 	.word	0x2000684c
 80008c8:	20005f84 	.word	0x20005f84
 80008cc:	08001d19 	.word	0x08001d19
 80008d0:	2000552c 	.word	0x2000552c
 80008d4:	08009718 	.word	0x08009718
 80008d8:	20005ccc 	.word	0x20005ccc
 80008dc:	2000498c 	.word	0x2000498c
 80008e0:	08001d71 	.word	0x08001d71
 80008e4:	200068a8 	.word	0x200068a8
 80008e8:	08009728 	.word	0x08009728
 80008ec:	20006544 	.word	0x20006544
 80008f0:	20006344 	.word	0x20006344
 80008f4:	08001e41 	.word	0x08001e41
 80008f8:	20004ef4 	.word	0x20004ef4

080008fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b0b4      	sub	sp, #208	; 0xd0
 8000900:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000902:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000906:	2230      	movs	r2, #48	; 0x30
 8000908:	2100      	movs	r1, #0
 800090a:	4618      	mov	r0, r3
 800090c:	f008 feb5 	bl	800967a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000910:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]
 800091e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000920:	f107 0308 	add.w	r3, r7, #8
 8000924:	2284      	movs	r2, #132	; 0x84
 8000926:	2100      	movs	r1, #0
 8000928:	4618      	mov	r0, r3
 800092a:	f008 fea6 	bl	800967a <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800092e:	4b42      	ldr	r3, [pc, #264]	; (8000a38 <SystemClock_Config+0x13c>)
 8000930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000932:	4a41      	ldr	r2, [pc, #260]	; (8000a38 <SystemClock_Config+0x13c>)
 8000934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000938:	6413      	str	r3, [r2, #64]	; 0x40
 800093a:	4b3f      	ldr	r3, [pc, #252]	; (8000a38 <SystemClock_Config+0x13c>)
 800093c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000946:	4b3d      	ldr	r3, [pc, #244]	; (8000a3c <SystemClock_Config+0x140>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800094e:	4a3b      	ldr	r2, [pc, #236]	; (8000a3c <SystemClock_Config+0x140>)
 8000950:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000954:	6013      	str	r3, [r2, #0]
 8000956:	4b39      	ldr	r3, [pc, #228]	; (8000a3c <SystemClock_Config+0x140>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800095e:	603b      	str	r3, [r7, #0]
 8000960:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000962:	2303      	movs	r3, #3
 8000964:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000968:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800096c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000970:	2301      	movs	r3, #1
 8000972:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000976:	2310      	movs	r3, #16
 8000978:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800097c:	2302      	movs	r3, #2
 800097e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000982:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000986:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 15;
 800098a:	230f      	movs	r3, #15
 800098c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000990:	2390      	movs	r3, #144	; 0x90
 8000992:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000996:	2302      	movs	r3, #2
 8000998:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800099c:	2305      	movs	r3, #5
 800099e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80009a6:	4618      	mov	r0, r3
 80009a8:	f002 fb88 	bl	80030bc <HAL_RCC_OscConfig>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80009b2:	f000 fccd 	bl	8001350 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009b6:	230f      	movs	r3, #15
 80009b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009bc:	2300      	movs	r3, #0
 80009be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c2:	2300      	movs	r3, #0
 80009c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009c8:	2300      	movs	r3, #0
 80009ca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009ce:	2300      	movs	r3, #0
 80009d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009d4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80009d8:	2100      	movs	r1, #0
 80009da:	4618      	mov	r0, r3
 80009dc:	f002 fdde 	bl	800359c <HAL_RCC_ClockConfig>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <SystemClock_Config+0xee>
  {
    Error_Handler();
 80009e6:	f000 fcb3 	bl	8001350 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80009ea:	4b15      	ldr	r3, [pc, #84]	; (8000a40 <SystemClock_Config+0x144>)
 80009ec:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART6
                              |RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_UART7
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80009ee:	2300      	movs	r3, #0
 80009f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009f2:	2300      	movs	r3, #0
 80009f4:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80009f6:	2300      	movs	r3, #0
 80009f8:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80009fa:	2300      	movs	r3, #0
 80009fc:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80009fe:	2300      	movs	r3, #0
 8000a00:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8000a02:	2300      	movs	r3, #0
 8000a04:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a06:	2300      	movs	r3, #0
 8000a08:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_SYSCLK;
 8000a14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a1c:	f107 0308 	add.w	r3, r7, #8
 8000a20:	4618      	mov	r0, r3
 8000a22:	f002 ffbb 	bl	800399c <HAL_RCCEx_PeriphCLKConfig>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <SystemClock_Config+0x134>
  {
    Error_Handler();
 8000a2c:	f000 fc90 	bl	8001350 <Error_Handler>
  }
}
 8000a30:	bf00      	nop
 8000a32:	37d0      	adds	r7, #208	; 0xd0
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	40023800 	.word	0x40023800
 8000a3c:	40007000 	.word	0x40007000
 8000a40:	00a0dbc0 	.word	0x00a0dbc0

08000a44 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a4a:	463b      	mov	r3, r7
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000a56:	4b21      	ldr	r3, [pc, #132]	; (8000adc <MX_ADC1_Init+0x98>)
 8000a58:	4a21      	ldr	r2, [pc, #132]	; (8000ae0 <MX_ADC1_Init+0x9c>)
 8000a5a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000a5c:	4b1f      	ldr	r3, [pc, #124]	; (8000adc <MX_ADC1_Init+0x98>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a62:	4b1e      	ldr	r3, [pc, #120]	; (8000adc <MX_ADC1_Init+0x98>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a68:	4b1c      	ldr	r3, [pc, #112]	; (8000adc <MX_ADC1_Init+0x98>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a6e:	4b1b      	ldr	r3, [pc, #108]	; (8000adc <MX_ADC1_Init+0x98>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a74:	4b19      	ldr	r3, [pc, #100]	; (8000adc <MX_ADC1_Init+0x98>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a7c:	4b17      	ldr	r3, [pc, #92]	; (8000adc <MX_ADC1_Init+0x98>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a82:	4b16      	ldr	r3, [pc, #88]	; (8000adc <MX_ADC1_Init+0x98>)
 8000a84:	4a17      	ldr	r2, [pc, #92]	; (8000ae4 <MX_ADC1_Init+0xa0>)
 8000a86:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a88:	4b14      	ldr	r3, [pc, #80]	; (8000adc <MX_ADC1_Init+0x98>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000a8e:	4b13      	ldr	r3, [pc, #76]	; (8000adc <MX_ADC1_Init+0x98>)
 8000a90:	2201      	movs	r2, #1
 8000a92:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a94:	4b11      	ldr	r3, [pc, #68]	; (8000adc <MX_ADC1_Init+0x98>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a9c:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <MX_ADC1_Init+0x98>)
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000aa2:	480e      	ldr	r0, [pc, #56]	; (8000adc <MX_ADC1_Init+0x98>)
 8000aa4:	f001 fa92 	bl	8001fcc <HAL_ADC_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000aae:	f000 fc4f 	bl	8001350 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000ab2:	230f      	movs	r3, #15
 8000ab4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000aba:	2300      	movs	r3, #0
 8000abc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000abe:	463b      	mov	r3, r7
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4806      	ldr	r0, [pc, #24]	; (8000adc <MX_ADC1_Init+0x98>)
 8000ac4:	f001 fac6 	bl	8002054 <HAL_ADC_ConfigChannel>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000ace:	f000 fc3f 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ad2:	bf00      	nop
 8000ad4:	3710      	adds	r7, #16
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20005798 	.word	0x20005798
 8000ae0:	40012000 	.word	0x40012000
 8000ae4:	0f000001 	.word	0x0f000001

08000ae8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000aec:	4b16      	ldr	r3, [pc, #88]	; (8000b48 <MX_CAN1_Init+0x60>)
 8000aee:	4a17      	ldr	r2, [pc, #92]	; (8000b4c <MX_CAN1_Init+0x64>)
 8000af0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000af2:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <MX_CAN1_Init+0x60>)
 8000af4:	2210      	movs	r2, #16
 8000af6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000af8:	4b13      	ldr	r3, [pc, #76]	; (8000b48 <MX_CAN1_Init+0x60>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000afe:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <MX_CAN1_Init+0x60>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000b04:	4b10      	ldr	r3, [pc, #64]	; (8000b48 <MX_CAN1_Init+0x60>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000b0a:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <MX_CAN1_Init+0x60>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000b10:	4b0d      	ldr	r3, [pc, #52]	; (8000b48 <MX_CAN1_Init+0x60>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000b16:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <MX_CAN1_Init+0x60>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000b1c:	4b0a      	ldr	r3, [pc, #40]	; (8000b48 <MX_CAN1_Init+0x60>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000b22:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <MX_CAN1_Init+0x60>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000b28:	4b07      	ldr	r3, [pc, #28]	; (8000b48 <MX_CAN1_Init+0x60>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000b2e:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <MX_CAN1_Init+0x60>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000b34:	4804      	ldr	r0, [pc, #16]	; (8000b48 <MX_CAN1_Init+0x60>)
 8000b36:	f001 fcbb 	bl	80024b0 <HAL_CAN_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000b40:	f000 fc06 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20006624 	.word	0x20006624
 8000b4c:	40006400 	.word	0x40006400

08000b50 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b54:	4b1b      	ldr	r3, [pc, #108]	; (8000bc4 <MX_I2C1_Init+0x74>)
 8000b56:	4a1c      	ldr	r2, [pc, #112]	; (8000bc8 <MX_I2C1_Init+0x78>)
 8000b58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010061A;
 8000b5a:	4b1a      	ldr	r3, [pc, #104]	; (8000bc4 <MX_I2C1_Init+0x74>)
 8000b5c:	4a1b      	ldr	r2, [pc, #108]	; (8000bcc <MX_I2C1_Init+0x7c>)
 8000b5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b60:	4b18      	ldr	r3, [pc, #96]	; (8000bc4 <MX_I2C1_Init+0x74>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b66:	4b17      	ldr	r3, [pc, #92]	; (8000bc4 <MX_I2C1_Init+0x74>)
 8000b68:	2201      	movs	r2, #1
 8000b6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b6c:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <MX_I2C1_Init+0x74>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b72:	4b14      	ldr	r3, [pc, #80]	; (8000bc4 <MX_I2C1_Init+0x74>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b78:	4b12      	ldr	r3, [pc, #72]	; (8000bc4 <MX_I2C1_Init+0x74>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b7e:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <MX_I2C1_Init+0x74>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b84:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <MX_I2C1_Init+0x74>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b8a:	480e      	ldr	r0, [pc, #56]	; (8000bc4 <MX_I2C1_Init+0x74>)
 8000b8c:	f002 f832 	bl	8002bf4 <HAL_I2C_Init>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b96:	f000 fbdb 	bl	8001350 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4809      	ldr	r0, [pc, #36]	; (8000bc4 <MX_I2C1_Init+0x74>)
 8000b9e:	f002 f8b9 	bl	8002d14 <HAL_I2CEx_ConfigAnalogFilter>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ba8:	f000 fbd2 	bl	8001350 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bac:	2100      	movs	r1, #0
 8000bae:	4805      	ldr	r0, [pc, #20]	; (8000bc4 <MX_I2C1_Init+0x74>)
 8000bb0:	f002 f8fb 	bl	8002daa <HAL_I2CEx_ConfigDigitalFilter>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000bba:	f000 fbc9 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20004ef8 	.word	0x20004ef8
 8000bc8:	40005400 	.word	0x40005400
 8000bcc:	0010061a 	.word	0x0010061a

08000bd0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000bd4:	4b1b      	ldr	r3, [pc, #108]	; (8000c44 <MX_I2C2_Init+0x74>)
 8000bd6:	4a1c      	ldr	r2, [pc, #112]	; (8000c48 <MX_I2C2_Init+0x78>)
 8000bd8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 8000bda:	4b1a      	ldr	r3, [pc, #104]	; (8000c44 <MX_I2C2_Init+0x74>)
 8000bdc:	4a1b      	ldr	r2, [pc, #108]	; (8000c4c <MX_I2C2_Init+0x7c>)
 8000bde:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000be0:	4b18      	ldr	r3, [pc, #96]	; (8000c44 <MX_I2C2_Init+0x74>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000be6:	4b17      	ldr	r3, [pc, #92]	; (8000c44 <MX_I2C2_Init+0x74>)
 8000be8:	2201      	movs	r2, #1
 8000bea:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bec:	4b15      	ldr	r3, [pc, #84]	; (8000c44 <MX_I2C2_Init+0x74>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000bf2:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <MX_I2C2_Init+0x74>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bf8:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <MX_I2C2_Init+0x74>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bfe:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <MX_I2C2_Init+0x74>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c04:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <MX_I2C2_Init+0x74>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c0a:	480e      	ldr	r0, [pc, #56]	; (8000c44 <MX_I2C2_Init+0x74>)
 8000c0c:	f001 fff2 	bl	8002bf4 <HAL_I2C_Init>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000c16:	f000 fb9b 	bl	8001350 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	4809      	ldr	r0, [pc, #36]	; (8000c44 <MX_I2C2_Init+0x74>)
 8000c1e:	f002 f879 	bl	8002d14 <HAL_I2CEx_ConfigAnalogFilter>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000c28:	f000 fb92 	bl	8001350 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	4805      	ldr	r0, [pc, #20]	; (8000c44 <MX_I2C2_Init+0x74>)
 8000c30:	f002 f8bb 	bl	8002daa <HAL_I2CEx_ConfigDigitalFilter>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000c3a:	f000 fb89 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	20005348 	.word	0x20005348
 8000c48:	40005800 	.word	0x40005800
 8000c4c:	00303d5b 	.word	0x00303d5b

08000c50 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000c54:	4b14      	ldr	r3, [pc, #80]	; (8000ca8 <MX_SDMMC1_SD_Init+0x58>)
 8000c56:	4a15      	ldr	r2, [pc, #84]	; (8000cac <MX_SDMMC1_SD_Init+0x5c>)
 8000c58:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000c5a:	4b13      	ldr	r3, [pc, #76]	; (8000ca8 <MX_SDMMC1_SD_Init+0x58>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000c60:	4b11      	ldr	r3, [pc, #68]	; (8000ca8 <MX_SDMMC1_SD_Init+0x58>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000c66:	4b10      	ldr	r3, [pc, #64]	; (8000ca8 <MX_SDMMC1_SD_Init+0x58>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000c6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ca8 <MX_SDMMC1_SD_Init+0x58>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000c72:	4b0d      	ldr	r3, [pc, #52]	; (8000ca8 <MX_SDMMC1_SD_Init+0x58>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000c78:	4b0b      	ldr	r3, [pc, #44]	; (8000ca8 <MX_SDMMC1_SD_Init+0x58>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000c7e:	480a      	ldr	r0, [pc, #40]	; (8000ca8 <MX_SDMMC1_SD_Init+0x58>)
 8000c80:	f003 fa42 	bl	8004108 <HAL_SD_Init>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_SDMMC1_SD_Init+0x3e>
  {
    Error_Handler();
 8000c8a:	f000 fb61 	bl	8001350 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8000c8e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c92:	4805      	ldr	r0, [pc, #20]	; (8000ca8 <MX_SDMMC1_SD_Init+0x58>)
 8000c94:	f003 fcef 	bl	8004676 <HAL_SD_ConfigWideBusOperation>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_SDMMC1_SD_Init+0x52>
  {
    Error_Handler();
 8000c9e:	f000 fb57 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	2000544c 	.word	0x2000544c
 8000cac:	40012c00 	.word	0x40012c00

08000cb0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000cb4:	4b1b      	ldr	r3, [pc, #108]	; (8000d24 <MX_SPI1_Init+0x74>)
 8000cb6:	4a1c      	ldr	r2, [pc, #112]	; (8000d28 <MX_SPI1_Init+0x78>)
 8000cb8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cba:	4b1a      	ldr	r3, [pc, #104]	; (8000d24 <MX_SPI1_Init+0x74>)
 8000cbc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cc0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cc2:	4b18      	ldr	r3, [pc, #96]	; (8000d24 <MX_SPI1_Init+0x74>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000cc8:	4b16      	ldr	r3, [pc, #88]	; (8000d24 <MX_SPI1_Init+0x74>)
 8000cca:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000cce:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cd0:	4b14      	ldr	r3, [pc, #80]	; (8000d24 <MX_SPI1_Init+0x74>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cd6:	4b13      	ldr	r3, [pc, #76]	; (8000d24 <MX_SPI1_Init+0x74>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000cdc:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <MX_SPI1_Init+0x74>)
 8000cde:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000ce2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ce4:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <MX_SPI1_Init+0x74>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cea:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <MX_SPI1_Init+0x74>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cf0:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <MX_SPI1_Init+0x74>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cf6:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <MX_SPI1_Init+0x74>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000cfc:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <MX_SPI1_Init+0x74>)
 8000cfe:	2207      	movs	r2, #7
 8000d00:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d02:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <MX_SPI1_Init+0x74>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <MX_SPI1_Init+0x74>)
 8000d0a:	2208      	movs	r2, #8
 8000d0c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d0e:	4805      	ldr	r0, [pc, #20]	; (8000d24 <MX_SPI1_Init+0x74>)
 8000d10:	f004 f801 	bl	8004d16 <HAL_SPI_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000d1a:	f000 fb19 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	200062e0 	.word	0x200062e0
 8000d28:	40013000 	.word	0x40013000

08000d2c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000d30:	4b1b      	ldr	r3, [pc, #108]	; (8000da0 <MX_SPI2_Init+0x74>)
 8000d32:	4a1c      	ldr	r2, [pc, #112]	; (8000da4 <MX_SPI2_Init+0x78>)
 8000d34:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d36:	4b1a      	ldr	r3, [pc, #104]	; (8000da0 <MX_SPI2_Init+0x74>)
 8000d38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d3c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d3e:	4b18      	ldr	r3, [pc, #96]	; (8000da0 <MX_SPI2_Init+0x74>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000d44:	4b16      	ldr	r3, [pc, #88]	; (8000da0 <MX_SPI2_Init+0x74>)
 8000d46:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000d4a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d4c:	4b14      	ldr	r3, [pc, #80]	; (8000da0 <MX_SPI2_Init+0x74>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d52:	4b13      	ldr	r3, [pc, #76]	; (8000da0 <MX_SPI2_Init+0x74>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000d58:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <MX_SPI2_Init+0x74>)
 8000d5a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000d5e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d60:	4b0f      	ldr	r3, [pc, #60]	; (8000da0 <MX_SPI2_Init+0x74>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d66:	4b0e      	ldr	r3, [pc, #56]	; (8000da0 <MX_SPI2_Init+0x74>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <MX_SPI2_Init+0x74>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d72:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <MX_SPI2_Init+0x74>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000d78:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <MX_SPI2_Init+0x74>)
 8000d7a:	2207      	movs	r2, #7
 8000d7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d7e:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <MX_SPI2_Init+0x74>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d84:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <MX_SPI2_Init+0x74>)
 8000d86:	2208      	movs	r2, #8
 8000d88:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d8a:	4805      	ldr	r0, [pc, #20]	; (8000da0 <MX_SPI2_Init+0x74>)
 8000d8c:	f003 ffc3 	bl	8004d16 <HAL_SPI_Init>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000d96:	f000 fadb 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20004b90 	.word	0x20004b90
 8000da4:	40003800 	.word	0x40003800

08000da8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000dac:	4b1b      	ldr	r3, [pc, #108]	; (8000e1c <MX_SPI3_Init+0x74>)
 8000dae:	4a1c      	ldr	r2, [pc, #112]	; (8000e20 <MX_SPI3_Init+0x78>)
 8000db0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000db2:	4b1a      	ldr	r3, [pc, #104]	; (8000e1c <MX_SPI3_Init+0x74>)
 8000db4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000db8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000dba:	4b18      	ldr	r3, [pc, #96]	; (8000e1c <MX_SPI3_Init+0x74>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000dc0:	4b16      	ldr	r3, [pc, #88]	; (8000e1c <MX_SPI3_Init+0x74>)
 8000dc2:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000dc6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dc8:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <MX_SPI3_Init+0x74>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dce:	4b13      	ldr	r3, [pc, #76]	; (8000e1c <MX_SPI3_Init+0x74>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000dd4:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <MX_SPI3_Init+0x74>)
 8000dd6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000dda:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ddc:	4b0f      	ldr	r3, [pc, #60]	; (8000e1c <MX_SPI3_Init+0x74>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000de2:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <MX_SPI3_Init+0x74>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000de8:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <MX_SPI3_Init+0x74>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dee:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <MX_SPI3_Init+0x74>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000df4:	4b09      	ldr	r3, [pc, #36]	; (8000e1c <MX_SPI3_Init+0x74>)
 8000df6:	2207      	movs	r2, #7
 8000df8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000dfa:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <MX_SPI3_Init+0x74>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e00:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <MX_SPI3_Init+0x74>)
 8000e02:	2208      	movs	r2, #8
 8000e04:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000e06:	4805      	ldr	r0, [pc, #20]	; (8000e1c <MX_SPI3_Init+0x74>)
 8000e08:	f003 ff85 	bl	8004d16 <HAL_SPI_Init>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000e12:	f000 fa9d 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20005734 	.word	0x20005734
 8000e20:	40003c00 	.word	0x40003c00

08000e24 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000e28:	4b1b      	ldr	r3, [pc, #108]	; (8000e98 <MX_SPI4_Init+0x74>)
 8000e2a:	4a1c      	ldr	r2, [pc, #112]	; (8000e9c <MX_SPI4_Init+0x78>)
 8000e2c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000e2e:	4b1a      	ldr	r3, [pc, #104]	; (8000e98 <MX_SPI4_Init+0x74>)
 8000e30:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e34:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000e36:	4b18      	ldr	r3, [pc, #96]	; (8000e98 <MX_SPI4_Init+0x74>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8000e3c:	4b16      	ldr	r3, [pc, #88]	; (8000e98 <MX_SPI4_Init+0x74>)
 8000e3e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000e42:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e44:	4b14      	ldr	r3, [pc, #80]	; (8000e98 <MX_SPI4_Init+0x74>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e4a:	4b13      	ldr	r3, [pc, #76]	; (8000e98 <MX_SPI4_Init+0x74>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000e50:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <MX_SPI4_Init+0x74>)
 8000e52:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000e56:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e58:	4b0f      	ldr	r3, [pc, #60]	; (8000e98 <MX_SPI4_Init+0x74>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e5e:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <MX_SPI4_Init+0x74>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e64:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <MX_SPI4_Init+0x74>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e6a:	4b0b      	ldr	r3, [pc, #44]	; (8000e98 <MX_SPI4_Init+0x74>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8000e70:	4b09      	ldr	r3, [pc, #36]	; (8000e98 <MX_SPI4_Init+0x74>)
 8000e72:	2207      	movs	r2, #7
 8000e74:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e76:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <MX_SPI4_Init+0x74>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e7c:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <MX_SPI4_Init+0x74>)
 8000e7e:	2208      	movs	r2, #8
 8000e80:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000e82:	4805      	ldr	r0, [pc, #20]	; (8000e98 <MX_SPI4_Init+0x74>)
 8000e84:	f003 ff47 	bl	8004d16 <HAL_SPI_Init>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8000e8e:	f000 fa5f 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	20005a68 	.word	0x20005a68
 8000e9c:	40013400 	.word	0x40013400

08000ea0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000ea4:	4b14      	ldr	r3, [pc, #80]	; (8000ef8 <MX_UART4_Init+0x58>)
 8000ea6:	4a15      	ldr	r2, [pc, #84]	; (8000efc <MX_UART4_Init+0x5c>)
 8000ea8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000eaa:	4b13      	ldr	r3, [pc, #76]	; (8000ef8 <MX_UART4_Init+0x58>)
 8000eac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000eb0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000eb2:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <MX_UART4_Init+0x58>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000eb8:	4b0f      	ldr	r3, [pc, #60]	; (8000ef8 <MX_UART4_Init+0x58>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <MX_UART4_Init+0x58>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000ec4:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <MX_UART4_Init+0x58>)
 8000ec6:	220c      	movs	r2, #12
 8000ec8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eca:	4b0b      	ldr	r3, [pc, #44]	; (8000ef8 <MX_UART4_Init+0x58>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ed0:	4b09      	ldr	r3, [pc, #36]	; (8000ef8 <MX_UART4_Init+0x58>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ed6:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <MX_UART4_Init+0x58>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000edc:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <MX_UART4_Init+0x58>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000ee2:	4805      	ldr	r0, [pc, #20]	; (8000ef8 <MX_UART4_Init+0x58>)
 8000ee4:	f004 fa0e 	bl	8005304 <HAL_UART_Init>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000eee:	f000 fa2f 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20006260 	.word	0x20006260
 8000efc:	40004c00 	.word	0x40004c00

08000f00 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000f04:	4b14      	ldr	r3, [pc, #80]	; (8000f58 <MX_UART7_Init+0x58>)
 8000f06:	4a15      	ldr	r2, [pc, #84]	; (8000f5c <MX_UART7_Init+0x5c>)
 8000f08:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8000f0a:	4b13      	ldr	r3, [pc, #76]	; (8000f58 <MX_UART7_Init+0x58>)
 8000f0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f10:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000f12:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <MX_UART7_Init+0x58>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000f18:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <MX_UART7_Init+0x58>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000f1e:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <MX_UART7_Init+0x58>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000f24:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <MX_UART7_Init+0x58>)
 8000f26:	220c      	movs	r2, #12
 8000f28:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f2a:	4b0b      	ldr	r3, [pc, #44]	; (8000f58 <MX_UART7_Init+0x58>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f30:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <MX_UART7_Init+0x58>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f36:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <MX_UART7_Init+0x58>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f3c:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <MX_UART7_Init+0x58>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000f42:	4805      	ldr	r0, [pc, #20]	; (8000f58 <MX_UART7_Init+0x58>)
 8000f44:	f004 f9de 	bl	8005304 <HAL_UART_Init>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8000f4e:	f000 f9ff 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20004bf4 	.word	0x20004bf4
 8000f5c:	40007800 	.word	0x40007800

08000f60 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f64:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <MX_USART1_UART_Init+0x58>)
 8000f66:	4a15      	ldr	r2, [pc, #84]	; (8000fbc <MX_USART1_UART_Init+0x5c>)
 8000f68:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f6a:	4b13      	ldr	r3, [pc, #76]	; (8000fb8 <MX_USART1_UART_Init+0x58>)
 8000f6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f70:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <MX_USART1_UART_Init+0x58>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f78:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <MX_USART1_UART_Init+0x58>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <MX_USART1_UART_Init+0x58>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <MX_USART1_UART_Init+0x58>)
 8000f86:	220c      	movs	r2, #12
 8000f88:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f8a:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <MX_USART1_UART_Init+0x58>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f90:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <MX_USART1_UART_Init+0x58>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f96:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <MX_USART1_UART_Init+0x58>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f9c:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <MX_USART1_UART_Init+0x58>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fa2:	4805      	ldr	r0, [pc, #20]	; (8000fb8 <MX_USART1_UART_Init+0x58>)
 8000fa4:	f004 f9ae 	bl	8005304 <HAL_UART_Init>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000fae:	f000 f9cf 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	200059e8 	.word	0x200059e8
 8000fbc:	40011000 	.word	0x40011000

08000fc0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fc4:	4b14      	ldr	r3, [pc, #80]	; (8001018 <MX_USART2_UART_Init+0x58>)
 8000fc6:	4a15      	ldr	r2, [pc, #84]	; (800101c <MX_USART2_UART_Init+0x5c>)
 8000fc8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fca:	4b13      	ldr	r3, [pc, #76]	; (8001018 <MX_USART2_UART_Init+0x58>)
 8000fcc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fd0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fd2:	4b11      	ldr	r3, [pc, #68]	; (8001018 <MX_USART2_UART_Init+0x58>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fd8:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <MX_USART2_UART_Init+0x58>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fde:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <MX_USART2_UART_Init+0x58>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <MX_USART2_UART_Init+0x58>)
 8000fe6:	220c      	movs	r2, #12
 8000fe8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fea:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <MX_USART2_UART_Init+0x58>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ff0:	4b09      	ldr	r3, [pc, #36]	; (8001018 <MX_USART2_UART_Init+0x58>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ff6:	4b08      	ldr	r3, [pc, #32]	; (8001018 <MX_USART2_UART_Init+0x58>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <MX_USART2_UART_Init+0x58>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001002:	4805      	ldr	r0, [pc, #20]	; (8001018 <MX_USART2_UART_Init+0x58>)
 8001004:	f004 f97e 	bl	8005304 <HAL_UART_Init>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800100e:	f000 f99f 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	200065a0 	.word	0x200065a0
 800101c:	40004400 	.word	0x40004400

08001020 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001024:	4b14      	ldr	r3, [pc, #80]	; (8001078 <MX_USART3_UART_Init+0x58>)
 8001026:	4a15      	ldr	r2, [pc, #84]	; (800107c <MX_USART3_UART_Init+0x5c>)
 8001028:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800102a:	4b13      	ldr	r3, [pc, #76]	; (8001078 <MX_USART3_UART_Init+0x58>)
 800102c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001030:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001032:	4b11      	ldr	r3, [pc, #68]	; (8001078 <MX_USART3_UART_Init+0x58>)
 8001034:	2200      	movs	r2, #0
 8001036:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001038:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <MX_USART3_UART_Init+0x58>)
 800103a:	2200      	movs	r2, #0
 800103c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800103e:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <MX_USART3_UART_Init+0x58>)
 8001040:	2200      	movs	r2, #0
 8001042:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001044:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <MX_USART3_UART_Init+0x58>)
 8001046:	220c      	movs	r2, #12
 8001048:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800104a:	4b0b      	ldr	r3, [pc, #44]	; (8001078 <MX_USART3_UART_Init+0x58>)
 800104c:	2200      	movs	r2, #0
 800104e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001050:	4b09      	ldr	r3, [pc, #36]	; (8001078 <MX_USART3_UART_Init+0x58>)
 8001052:	2200      	movs	r2, #0
 8001054:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001056:	4b08      	ldr	r3, [pc, #32]	; (8001078 <MX_USART3_UART_Init+0x58>)
 8001058:	2200      	movs	r2, #0
 800105a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800105c:	4b06      	ldr	r3, [pc, #24]	; (8001078 <MX_USART3_UART_Init+0x58>)
 800105e:	2200      	movs	r2, #0
 8001060:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001062:	4805      	ldr	r0, [pc, #20]	; (8001078 <MX_USART3_UART_Init+0x58>)
 8001064:	f004 f94e 	bl	8005304 <HAL_UART_Init>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800106e:	f000 f96f 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20004c74 	.word	0x20004c74
 800107c:	40004800 	.word	0x40004800

08001080 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001084:	4b14      	ldr	r3, [pc, #80]	; (80010d8 <MX_USART6_UART_Init+0x58>)
 8001086:	4a15      	ldr	r2, [pc, #84]	; (80010dc <MX_USART6_UART_Init+0x5c>)
 8001088:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800108a:	4b13      	ldr	r3, [pc, #76]	; (80010d8 <MX_USART6_UART_Init+0x58>)
 800108c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001090:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001092:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <MX_USART6_UART_Init+0x58>)
 8001094:	2200      	movs	r2, #0
 8001096:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001098:	4b0f      	ldr	r3, [pc, #60]	; (80010d8 <MX_USART6_UART_Init+0x58>)
 800109a:	2200      	movs	r2, #0
 800109c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800109e:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <MX_USART6_UART_Init+0x58>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80010a4:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <MX_USART6_UART_Init+0x58>)
 80010a6:	220c      	movs	r2, #12
 80010a8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010aa:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <MX_USART6_UART_Init+0x58>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80010b0:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <MX_USART6_UART_Init+0x58>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010b6:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <MX_USART6_UART_Init+0x58>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010bc:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <MX_USART6_UART_Init+0x58>)
 80010be:	2200      	movs	r2, #0
 80010c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80010c2:	4805      	ldr	r0, [pc, #20]	; (80010d8 <MX_USART6_UART_Init+0x58>)
 80010c4:	f004 f91e 	bl	8005304 <HAL_UART_Init>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80010ce:	f000 f93f 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20006184 	.word	0x20006184
 80010dc:	40011400 	.word	0x40011400

080010e0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80010e4:	4b14      	ldr	r3, [pc, #80]	; (8001138 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010e6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80010ea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80010ec:	4b12      	ldr	r3, [pc, #72]	; (8001138 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010ee:	2206      	movs	r2, #6
 80010f0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80010f2:	4b11      	ldr	r3, [pc, #68]	; (8001138 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010f4:	2202      	movs	r2, #2
 80010f6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80010f8:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80010fe:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001100:	2202      	movs	r2, #2
 8001102:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001104:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001106:	2200      	movs	r2, #0
 8001108:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800110a:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800110c:	2200      	movs	r2, #0
 800110e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001110:	4b09      	ldr	r3, [pc, #36]	; (8001138 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001112:	2200      	movs	r2, #0
 8001114:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001116:	4b08      	ldr	r3, [pc, #32]	; (8001138 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001118:	2200      	movs	r2, #0
 800111a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800111e:	2200      	movs	r2, #0
 8001120:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001122:	4805      	ldr	r0, [pc, #20]	; (8001138 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001124:	f001 fe8d 	bl	8002e42 <HAL_PCD_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800112e:	f000 f90f 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20004f44 	.word	0x20004f44

0800113c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08c      	sub	sp, #48	; 0x30
 8001140:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001142:	f107 031c 	add.w	r3, r7, #28
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	609a      	str	r2, [r3, #8]
 800114e:	60da      	str	r2, [r3, #12]
 8001150:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001152:	4b6b      	ldr	r3, [pc, #428]	; (8001300 <MX_GPIO_Init+0x1c4>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a6a      	ldr	r2, [pc, #424]	; (8001300 <MX_GPIO_Init+0x1c4>)
 8001158:	f043 0310 	orr.w	r3, r3, #16
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b68      	ldr	r3, [pc, #416]	; (8001300 <MX_GPIO_Init+0x1c4>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f003 0310 	and.w	r3, r3, #16
 8001166:	61bb      	str	r3, [r7, #24]
 8001168:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800116a:	4b65      	ldr	r3, [pc, #404]	; (8001300 <MX_GPIO_Init+0x1c4>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	4a64      	ldr	r2, [pc, #400]	; (8001300 <MX_GPIO_Init+0x1c4>)
 8001170:	f043 0304 	orr.w	r3, r3, #4
 8001174:	6313      	str	r3, [r2, #48]	; 0x30
 8001176:	4b62      	ldr	r3, [pc, #392]	; (8001300 <MX_GPIO_Init+0x1c4>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	f003 0304 	and.w	r3, r3, #4
 800117e:	617b      	str	r3, [r7, #20]
 8001180:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001182:	4b5f      	ldr	r3, [pc, #380]	; (8001300 <MX_GPIO_Init+0x1c4>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	4a5e      	ldr	r2, [pc, #376]	; (8001300 <MX_GPIO_Init+0x1c4>)
 8001188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800118c:	6313      	str	r3, [r2, #48]	; 0x30
 800118e:	4b5c      	ldr	r3, [pc, #368]	; (8001300 <MX_GPIO_Init+0x1c4>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001196:	613b      	str	r3, [r7, #16]
 8001198:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800119a:	4b59      	ldr	r3, [pc, #356]	; (8001300 <MX_GPIO_Init+0x1c4>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	4a58      	ldr	r2, [pc, #352]	; (8001300 <MX_GPIO_Init+0x1c4>)
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	6313      	str	r3, [r2, #48]	; 0x30
 80011a6:	4b56      	ldr	r3, [pc, #344]	; (8001300 <MX_GPIO_Init+0x1c4>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b2:	4b53      	ldr	r3, [pc, #332]	; (8001300 <MX_GPIO_Init+0x1c4>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a52      	ldr	r2, [pc, #328]	; (8001300 <MX_GPIO_Init+0x1c4>)
 80011b8:	f043 0302 	orr.w	r3, r3, #2
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b50      	ldr	r3, [pc, #320]	; (8001300 <MX_GPIO_Init+0x1c4>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	60bb      	str	r3, [r7, #8]
 80011c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ca:	4b4d      	ldr	r3, [pc, #308]	; (8001300 <MX_GPIO_Init+0x1c4>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	4a4c      	ldr	r2, [pc, #304]	; (8001300 <MX_GPIO_Init+0x1c4>)
 80011d0:	f043 0308 	orr.w	r3, r3, #8
 80011d4:	6313      	str	r3, [r2, #48]	; 0x30
 80011d6:	4b4a      	ldr	r3, [pc, #296]	; (8001300 <MX_GPIO_Init+0x1c4>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	f003 0308 	and.w	r3, r3, #8
 80011de:	607b      	str	r3, [r7, #4]
 80011e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 80011e2:	2200      	movs	r2, #0
 80011e4:	2108      	movs	r1, #8
 80011e6:	4847      	ldr	r0, [pc, #284]	; (8001304 <MX_GPIO_Init+0x1c8>)
 80011e8:	f001 fcea 	bl	8002bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80011ec:	2200      	movs	r2, #0
 80011ee:	2102      	movs	r1, #2
 80011f0:	4845      	ldr	r0, [pc, #276]	; (8001308 <MX_GPIO_Init+0x1cc>)
 80011f2:	f001 fce5 	bl	8002bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80011f6:	2200      	movs	r2, #0
 80011f8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80011fc:	4843      	ldr	r0, [pc, #268]	; (800130c <MX_GPIO_Init+0x1d0>)
 80011fe:	f001 fcdf 	bl	8002bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001202:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001206:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001208:	2300      	movs	r3, #0
 800120a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001210:	f107 031c 	add.w	r3, r7, #28
 8001214:	4619      	mov	r1, r3
 8001216:	483b      	ldr	r0, [pc, #236]	; (8001304 <MX_GPIO_Init+0x1c8>)
 8001218:	f001 fb28 	bl	800286c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800121c:	2308      	movs	r3, #8
 800121e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001220:	2301      	movs	r3, #1
 8001222:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001228:	2300      	movs	r3, #0
 800122a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800122c:	f107 031c 	add.w	r3, r7, #28
 8001230:	4619      	mov	r1, r3
 8001232:	4834      	ldr	r0, [pc, #208]	; (8001304 <MX_GPIO_Init+0x1c8>)
 8001234:	f001 fb1a 	bl	800286c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001238:	2310      	movs	r3, #16
 800123a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800123c:	4b34      	ldr	r3, [pc, #208]	; (8001310 <MX_GPIO_Init+0x1d4>)
 800123e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001244:	f107 031c 	add.w	r3, r7, #28
 8001248:	4619      	mov	r1, r3
 800124a:	482e      	ldr	r0, [pc, #184]	; (8001304 <MX_GPIO_Init+0x1c8>)
 800124c:	f001 fb0e 	bl	800286c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001250:	2302      	movs	r3, #2
 8001252:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001254:	2301      	movs	r3, #1
 8001256:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125c:	2300      	movs	r3, #0
 800125e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001260:	f107 031c 	add.w	r3, r7, #28
 8001264:	4619      	mov	r1, r3
 8001266:	4828      	ldr	r0, [pc, #160]	; (8001308 <MX_GPIO_Init+0x1cc>)
 8001268:	f001 fb00 	bl	800286c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE9 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800126c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001270:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001272:	2301      	movs	r3, #1
 8001274:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127a:	2300      	movs	r3, #0
 800127c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800127e:	f107 031c 	add.w	r3, r7, #28
 8001282:	4619      	mov	r1, r3
 8001284:	4821      	ldr	r0, [pc, #132]	; (800130c <MX_GPIO_Init+0x1d0>)
 8001286:	f001 faf1 	bl	800286c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800128a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800128e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001290:	4b1f      	ldr	r3, [pc, #124]	; (8001310 <MX_GPIO_Init+0x1d4>)
 8001292:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001298:	f107 031c 	add.w	r3, r7, #28
 800129c:	4619      	mov	r1, r3
 800129e:	481d      	ldr	r0, [pc, #116]	; (8001314 <MX_GPIO_Init+0x1d8>)
 80012a0:	f001 fae4 	bl	800286c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80012a4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80012a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012aa:	2302      	movs	r3, #2
 80012ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ae:	2300      	movs	r3, #0
 80012b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b2:	2300      	movs	r3, #0
 80012b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80012b6:	2302      	movs	r3, #2
 80012b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012ba:	f107 031c 	add.w	r3, r7, #28
 80012be:	4619      	mov	r1, r3
 80012c0:	4814      	ldr	r0, [pc, #80]	; (8001314 <MX_GPIO_Init+0x1d8>)
 80012c2:	f001 fad3 	bl	800286c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80012c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012cc:	2300      	movs	r3, #0
 80012ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d4:	f107 031c 	add.w	r3, r7, #28
 80012d8:	4619      	mov	r1, r3
 80012da:	480f      	ldr	r0, [pc, #60]	; (8001318 <MX_GPIO_Init+0x1dc>)
 80012dc:	f001 fac6 	bl	800286c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80012e0:	2320      	movs	r3, #32
 80012e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012e4:	4b0a      	ldr	r3, [pc, #40]	; (8001310 <MX_GPIO_Init+0x1d4>)
 80012e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ec:	f107 031c 	add.w	r3, r7, #28
 80012f0:	4619      	mov	r1, r3
 80012f2:	4805      	ldr	r0, [pc, #20]	; (8001308 <MX_GPIO_Init+0x1cc>)
 80012f4:	f001 faba 	bl	800286c <HAL_GPIO_Init>

}
 80012f8:	bf00      	nop
 80012fa:	3730      	adds	r7, #48	; 0x30
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40023800 	.word	0x40023800
 8001304:	40020800 	.word	0x40020800
 8001308:	40020400 	.word	0x40020400
 800130c:	40021000 	.word	0x40021000
 8001310:	10110000 	.word	0x10110000
 8001314:	40020c00 	.word	0x40020c00
 8001318:	40020000 	.word	0x40020000

0800131c <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001324:	2001      	movs	r0, #1
 8001326:	f005 fc75 	bl	8006c14 <osDelay>
 800132a:	e7fb      	b.n	8001324 <StartDefaultTask+0x8>

0800132c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a04      	ldr	r2, [pc, #16]	; (800134c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d101      	bne.n	8001342 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800133e:	f000 fe03 	bl	8001f48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40010000 	.word	0x40010000

08001350 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
	...

08001360 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001366:	4b11      	ldr	r3, [pc, #68]	; (80013ac <HAL_MspInit+0x4c>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	4a10      	ldr	r2, [pc, #64]	; (80013ac <HAL_MspInit+0x4c>)
 800136c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001370:	6413      	str	r3, [r2, #64]	; 0x40
 8001372:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <HAL_MspInit+0x4c>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137a:	607b      	str	r3, [r7, #4]
 800137c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800137e:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <HAL_MspInit+0x4c>)
 8001380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001382:	4a0a      	ldr	r2, [pc, #40]	; (80013ac <HAL_MspInit+0x4c>)
 8001384:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001388:	6453      	str	r3, [r2, #68]	; 0x44
 800138a:	4b08      	ldr	r3, [pc, #32]	; (80013ac <HAL_MspInit+0x4c>)
 800138c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001392:	603b      	str	r3, [r7, #0]
 8001394:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001396:	2200      	movs	r2, #0
 8001398:	210f      	movs	r1, #15
 800139a:	f06f 0001 	mvn.w	r0, #1
 800139e:	f001 fa3b 	bl	8002818 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40023800 	.word	0x40023800

080013b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08a      	sub	sp, #40	; 0x28
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a21      	ldr	r2, [pc, #132]	; (8001454 <HAL_ADC_MspInit+0xa4>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d13b      	bne.n	800144a <HAL_ADC_MspInit+0x9a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013d2:	4b21      	ldr	r3, [pc, #132]	; (8001458 <HAL_ADC_MspInit+0xa8>)
 80013d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d6:	4a20      	ldr	r2, [pc, #128]	; (8001458 <HAL_ADC_MspInit+0xa8>)
 80013d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013dc:	6453      	str	r3, [r2, #68]	; 0x44
 80013de:	4b1e      	ldr	r3, [pc, #120]	; (8001458 <HAL_ADC_MspInit+0xa8>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013e6:	613b      	str	r3, [r7, #16]
 80013e8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ea:	4b1b      	ldr	r3, [pc, #108]	; (8001458 <HAL_ADC_MspInit+0xa8>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	4a1a      	ldr	r2, [pc, #104]	; (8001458 <HAL_ADC_MspInit+0xa8>)
 80013f0:	f043 0304 	orr.w	r3, r3, #4
 80013f4:	6313      	str	r3, [r2, #48]	; 0x30
 80013f6:	4b18      	ldr	r3, [pc, #96]	; (8001458 <HAL_ADC_MspInit+0xa8>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	f003 0304 	and.w	r3, r3, #4
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001402:	4b15      	ldr	r3, [pc, #84]	; (8001458 <HAL_ADC_MspInit+0xa8>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	4a14      	ldr	r2, [pc, #80]	; (8001458 <HAL_ADC_MspInit+0xa8>)
 8001408:	f043 0302 	orr.w	r3, r3, #2
 800140c:	6313      	str	r3, [r2, #48]	; 0x30
 800140e:	4b12      	ldr	r3, [pc, #72]	; (8001458 <HAL_ADC_MspInit+0xa8>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	60bb      	str	r3, [r7, #8]
 8001418:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_5;
 800141a:	2327      	movs	r3, #39	; 0x27
 800141c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800141e:	2303      	movs	r3, #3
 8001420:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001426:	f107 0314 	add.w	r3, r7, #20
 800142a:	4619      	mov	r1, r3
 800142c:	480b      	ldr	r0, [pc, #44]	; (800145c <HAL_ADC_MspInit+0xac>)
 800142e:	f001 fa1d 	bl	800286c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001432:	2301      	movs	r3, #1
 8001434:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001436:	2303      	movs	r3, #3
 8001438:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800143e:	f107 0314 	add.w	r3, r7, #20
 8001442:	4619      	mov	r1, r3
 8001444:	4806      	ldr	r0, [pc, #24]	; (8001460 <HAL_ADC_MspInit+0xb0>)
 8001446:	f001 fa11 	bl	800286c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800144a:	bf00      	nop
 800144c:	3728      	adds	r7, #40	; 0x28
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40012000 	.word	0x40012000
 8001458:	40023800 	.word	0x40023800
 800145c:	40020800 	.word	0x40020800
 8001460:	40020400 	.word	0x40020400

08001464 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08a      	sub	sp, #40	; 0x28
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146c:	f107 0314 	add.w	r3, r7, #20
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
 800147a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a17      	ldr	r2, [pc, #92]	; (80014e0 <HAL_CAN_MspInit+0x7c>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d127      	bne.n	80014d6 <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001486:	4b17      	ldr	r3, [pc, #92]	; (80014e4 <HAL_CAN_MspInit+0x80>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	4a16      	ldr	r2, [pc, #88]	; (80014e4 <HAL_CAN_MspInit+0x80>)
 800148c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001490:	6413      	str	r3, [r2, #64]	; 0x40
 8001492:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <HAL_CAN_MspInit+0x80>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800149a:	613b      	str	r3, [r7, #16]
 800149c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800149e:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <HAL_CAN_MspInit+0x80>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	4a10      	ldr	r2, [pc, #64]	; (80014e4 <HAL_CAN_MspInit+0x80>)
 80014a4:	f043 0308 	orr.w	r3, r3, #8
 80014a8:	6313      	str	r3, [r2, #48]	; 0x30
 80014aa:	4b0e      	ldr	r3, [pc, #56]	; (80014e4 <HAL_CAN_MspInit+0x80>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	f003 0308 	and.w	r3, r3, #8
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80014b6:	2303      	movs	r3, #3
 80014b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ba:	2302      	movs	r3, #2
 80014bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c2:	2303      	movs	r3, #3
 80014c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80014c6:	2309      	movs	r3, #9
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014ca:	f107 0314 	add.w	r3, r7, #20
 80014ce:	4619      	mov	r1, r3
 80014d0:	4805      	ldr	r0, [pc, #20]	; (80014e8 <HAL_CAN_MspInit+0x84>)
 80014d2:	f001 f9cb 	bl	800286c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80014d6:	bf00      	nop
 80014d8:	3728      	adds	r7, #40	; 0x28
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40006400 	.word	0x40006400
 80014e4:	40023800 	.word	0x40023800
 80014e8:	40020c00 	.word	0x40020c00

080014ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08c      	sub	sp, #48	; 0x30
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f4:	f107 031c 	add.w	r3, r7, #28
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a2e      	ldr	r2, [pc, #184]	; (80015c4 <HAL_I2C_MspInit+0xd8>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d128      	bne.n	8001560 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800150e:	4b2e      	ldr	r3, [pc, #184]	; (80015c8 <HAL_I2C_MspInit+0xdc>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	4a2d      	ldr	r2, [pc, #180]	; (80015c8 <HAL_I2C_MspInit+0xdc>)
 8001514:	f043 0302 	orr.w	r3, r3, #2
 8001518:	6313      	str	r3, [r2, #48]	; 0x30
 800151a:	4b2b      	ldr	r3, [pc, #172]	; (80015c8 <HAL_I2C_MspInit+0xdc>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	61bb      	str	r3, [r7, #24]
 8001524:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001526:	23c0      	movs	r3, #192	; 0xc0
 8001528:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800152a:	2312      	movs	r3, #18
 800152c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800152e:	2301      	movs	r3, #1
 8001530:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001532:	2303      	movs	r3, #3
 8001534:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001536:	2304      	movs	r3, #4
 8001538:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800153a:	f107 031c 	add.w	r3, r7, #28
 800153e:	4619      	mov	r1, r3
 8001540:	4822      	ldr	r0, [pc, #136]	; (80015cc <HAL_I2C_MspInit+0xe0>)
 8001542:	f001 f993 	bl	800286c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001546:	4b20      	ldr	r3, [pc, #128]	; (80015c8 <HAL_I2C_MspInit+0xdc>)
 8001548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154a:	4a1f      	ldr	r2, [pc, #124]	; (80015c8 <HAL_I2C_MspInit+0xdc>)
 800154c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001550:	6413      	str	r3, [r2, #64]	; 0x40
 8001552:	4b1d      	ldr	r3, [pc, #116]	; (80015c8 <HAL_I2C_MspInit+0xdc>)
 8001554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001556:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800155a:	617b      	str	r3, [r7, #20]
 800155c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800155e:	e02d      	b.n	80015bc <HAL_I2C_MspInit+0xd0>
  else if(hi2c->Instance==I2C2)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a1a      	ldr	r2, [pc, #104]	; (80015d0 <HAL_I2C_MspInit+0xe4>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d128      	bne.n	80015bc <HAL_I2C_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800156a:	4b17      	ldr	r3, [pc, #92]	; (80015c8 <HAL_I2C_MspInit+0xdc>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	4a16      	ldr	r2, [pc, #88]	; (80015c8 <HAL_I2C_MspInit+0xdc>)
 8001570:	f043 0302 	orr.w	r3, r3, #2
 8001574:	6313      	str	r3, [r2, #48]	; 0x30
 8001576:	4b14      	ldr	r3, [pc, #80]	; (80015c8 <HAL_I2C_MspInit+0xdc>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	613b      	str	r3, [r7, #16]
 8001580:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001582:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001586:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001588:	2312      	movs	r3, #18
 800158a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800158c:	2301      	movs	r3, #1
 800158e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001590:	2303      	movs	r3, #3
 8001592:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001594:	2304      	movs	r3, #4
 8001596:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001598:	f107 031c 	add.w	r3, r7, #28
 800159c:	4619      	mov	r1, r3
 800159e:	480b      	ldr	r0, [pc, #44]	; (80015cc <HAL_I2C_MspInit+0xe0>)
 80015a0:	f001 f964 	bl	800286c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80015a4:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <HAL_I2C_MspInit+0xdc>)
 80015a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a8:	4a07      	ldr	r2, [pc, #28]	; (80015c8 <HAL_I2C_MspInit+0xdc>)
 80015aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015ae:	6413      	str	r3, [r2, #64]	; 0x40
 80015b0:	4b05      	ldr	r3, [pc, #20]	; (80015c8 <HAL_I2C_MspInit+0xdc>)
 80015b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	68fb      	ldr	r3, [r7, #12]
}
 80015bc:	bf00      	nop
 80015be:	3730      	adds	r7, #48	; 0x30
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40005400 	.word	0x40005400
 80015c8:	40023800 	.word	0x40023800
 80015cc:	40020400 	.word	0x40020400
 80015d0:	40005800 	.word	0x40005800

080015d4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08a      	sub	sp, #40	; 0x28
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015dc:	f107 0314 	add.w	r3, r7, #20
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a25      	ldr	r2, [pc, #148]	; (8001688 <HAL_SD_MspInit+0xb4>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d144      	bne.n	8001680 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80015f6:	4b25      	ldr	r3, [pc, #148]	; (800168c <HAL_SD_MspInit+0xb8>)
 80015f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fa:	4a24      	ldr	r2, [pc, #144]	; (800168c <HAL_SD_MspInit+0xb8>)
 80015fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001600:	6453      	str	r3, [r2, #68]	; 0x44
 8001602:	4b22      	ldr	r3, [pc, #136]	; (800168c <HAL_SD_MspInit+0xb8>)
 8001604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001606:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800160a:	613b      	str	r3, [r7, #16]
 800160c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800160e:	4b1f      	ldr	r3, [pc, #124]	; (800168c <HAL_SD_MspInit+0xb8>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	4a1e      	ldr	r2, [pc, #120]	; (800168c <HAL_SD_MspInit+0xb8>)
 8001614:	f043 0304 	orr.w	r3, r3, #4
 8001618:	6313      	str	r3, [r2, #48]	; 0x30
 800161a:	4b1c      	ldr	r3, [pc, #112]	; (800168c <HAL_SD_MspInit+0xb8>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	f003 0304 	and.w	r3, r3, #4
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001626:	4b19      	ldr	r3, [pc, #100]	; (800168c <HAL_SD_MspInit+0xb8>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	4a18      	ldr	r2, [pc, #96]	; (800168c <HAL_SD_MspInit+0xb8>)
 800162c:	f043 0308 	orr.w	r3, r3, #8
 8001630:	6313      	str	r3, [r2, #48]	; 0x30
 8001632:	4b16      	ldr	r3, [pc, #88]	; (800168c <HAL_SD_MspInit+0xb8>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	f003 0308 	and.w	r3, r3, #8
 800163a:	60bb      	str	r3, [r7, #8]
 800163c:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800163e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001642:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001644:	2302      	movs	r3, #2
 8001646:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164c:	2303      	movs	r3, #3
 800164e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001650:	230c      	movs	r3, #12
 8001652:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001654:	f107 0314 	add.w	r3, r7, #20
 8001658:	4619      	mov	r1, r3
 800165a:	480d      	ldr	r0, [pc, #52]	; (8001690 <HAL_SD_MspInit+0xbc>)
 800165c:	f001 f906 	bl	800286c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001660:	2304      	movs	r3, #4
 8001662:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001664:	2302      	movs	r3, #2
 8001666:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001668:	2300      	movs	r3, #0
 800166a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800166c:	2303      	movs	r3, #3
 800166e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001670:	230c      	movs	r3, #12
 8001672:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001674:	f107 0314 	add.w	r3, r7, #20
 8001678:	4619      	mov	r1, r3
 800167a:	4806      	ldr	r0, [pc, #24]	; (8001694 <HAL_SD_MspInit+0xc0>)
 800167c:	f001 f8f6 	bl	800286c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001680:	bf00      	nop
 8001682:	3728      	adds	r7, #40	; 0x28
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	40012c00 	.word	0x40012c00
 800168c:	40023800 	.word	0x40023800
 8001690:	40020800 	.word	0x40020800
 8001694:	40020c00 	.word	0x40020c00

08001698 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b090      	sub	sp, #64	; 0x40
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a73      	ldr	r2, [pc, #460]	; (8001884 <HAL_SPI_MspInit+0x1ec>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d129      	bne.n	800170e <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016ba:	4b73      	ldr	r3, [pc, #460]	; (8001888 <HAL_SPI_MspInit+0x1f0>)
 80016bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016be:	4a72      	ldr	r2, [pc, #456]	; (8001888 <HAL_SPI_MspInit+0x1f0>)
 80016c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016c4:	6453      	str	r3, [r2, #68]	; 0x44
 80016c6:	4b70      	ldr	r3, [pc, #448]	; (8001888 <HAL_SPI_MspInit+0x1f0>)
 80016c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80016d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d2:	4b6d      	ldr	r3, [pc, #436]	; (8001888 <HAL_SPI_MspInit+0x1f0>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	4a6c      	ldr	r2, [pc, #432]	; (8001888 <HAL_SPI_MspInit+0x1f0>)
 80016d8:	f043 0301 	orr.w	r3, r3, #1
 80016dc:	6313      	str	r3, [r2, #48]	; 0x30
 80016de:	4b6a      	ldr	r3, [pc, #424]	; (8001888 <HAL_SPI_MspInit+0x1f0>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	627b      	str	r3, [r7, #36]	; 0x24
 80016e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA15     ------> SPI1_NSS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_15;
 80016ea:	f248 03e0 	movw	r3, #32992	; 0x80e0
 80016ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f0:	2302      	movs	r3, #2
 80016f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f8:	2303      	movs	r3, #3
 80016fa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016fc:	2305      	movs	r3, #5
 80016fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001700:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001704:	4619      	mov	r1, r3
 8001706:	4861      	ldr	r0, [pc, #388]	; (800188c <HAL_SPI_MspInit+0x1f4>)
 8001708:	f001 f8b0 	bl	800286c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 800170c:	e0b5      	b.n	800187a <HAL_SPI_MspInit+0x1e2>
  else if(hspi->Instance==SPI2)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a5f      	ldr	r2, [pc, #380]	; (8001890 <HAL_SPI_MspInit+0x1f8>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d129      	bne.n	800176c <HAL_SPI_MspInit+0xd4>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001718:	4b5b      	ldr	r3, [pc, #364]	; (8001888 <HAL_SPI_MspInit+0x1f0>)
 800171a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171c:	4a5a      	ldr	r2, [pc, #360]	; (8001888 <HAL_SPI_MspInit+0x1f0>)
 800171e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001722:	6413      	str	r3, [r2, #64]	; 0x40
 8001724:	4b58      	ldr	r3, [pc, #352]	; (8001888 <HAL_SPI_MspInit+0x1f0>)
 8001726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001728:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800172c:	623b      	str	r3, [r7, #32]
 800172e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001730:	4b55      	ldr	r3, [pc, #340]	; (8001888 <HAL_SPI_MspInit+0x1f0>)
 8001732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001734:	4a54      	ldr	r2, [pc, #336]	; (8001888 <HAL_SPI_MspInit+0x1f0>)
 8001736:	f043 0302 	orr.w	r3, r3, #2
 800173a:	6313      	str	r3, [r2, #48]	; 0x30
 800173c:	4b52      	ldr	r3, [pc, #328]	; (8001888 <HAL_SPI_MspInit+0x1f0>)
 800173e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001740:	f003 0302 	and.w	r3, r3, #2
 8001744:	61fb      	str	r3, [r7, #28]
 8001746:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001748:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800174c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174e:	2302      	movs	r3, #2
 8001750:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001756:	2303      	movs	r3, #3
 8001758:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800175a:	2305      	movs	r3, #5
 800175c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800175e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001762:	4619      	mov	r1, r3
 8001764:	484b      	ldr	r0, [pc, #300]	; (8001894 <HAL_SPI_MspInit+0x1fc>)
 8001766:	f001 f881 	bl	800286c <HAL_GPIO_Init>
}
 800176a:	e086      	b.n	800187a <HAL_SPI_MspInit+0x1e2>
  else if(hspi->Instance==SPI3)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a49      	ldr	r2, [pc, #292]	; (8001898 <HAL_SPI_MspInit+0x200>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d154      	bne.n	8001820 <HAL_SPI_MspInit+0x188>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001776:	4b44      	ldr	r3, [pc, #272]	; (8001888 <HAL_SPI_MspInit+0x1f0>)
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	4a43      	ldr	r2, [pc, #268]	; (8001888 <HAL_SPI_MspInit+0x1f0>)
 800177c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001780:	6413      	str	r3, [r2, #64]	; 0x40
 8001782:	4b41      	ldr	r3, [pc, #260]	; (8001888 <HAL_SPI_MspInit+0x1f0>)
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800178a:	61bb      	str	r3, [r7, #24]
 800178c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800178e:	4b3e      	ldr	r3, [pc, #248]	; (8001888 <HAL_SPI_MspInit+0x1f0>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	4a3d      	ldr	r2, [pc, #244]	; (8001888 <HAL_SPI_MspInit+0x1f0>)
 8001794:	f043 0301 	orr.w	r3, r3, #1
 8001798:	6313      	str	r3, [r2, #48]	; 0x30
 800179a:	4b3b      	ldr	r3, [pc, #236]	; (8001888 <HAL_SPI_MspInit+0x1f0>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	617b      	str	r3, [r7, #20]
 80017a4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a6:	4b38      	ldr	r3, [pc, #224]	; (8001888 <HAL_SPI_MspInit+0x1f0>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	4a37      	ldr	r2, [pc, #220]	; (8001888 <HAL_SPI_MspInit+0x1f0>)
 80017ac:	f043 0302 	orr.w	r3, r3, #2
 80017b0:	6313      	str	r3, [r2, #48]	; 0x30
 80017b2:	4b35      	ldr	r3, [pc, #212]	; (8001888 <HAL_SPI_MspInit+0x1f0>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	613b      	str	r3, [r7, #16]
 80017bc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80017be:	2310      	movs	r3, #16
 80017c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c2:	2302      	movs	r3, #2
 80017c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c6:	2300      	movs	r3, #0
 80017c8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ca:	2303      	movs	r3, #3
 80017cc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017ce:	2306      	movs	r3, #6
 80017d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017d6:	4619      	mov	r1, r3
 80017d8:	482c      	ldr	r0, [pc, #176]	; (800188c <HAL_SPI_MspInit+0x1f4>)
 80017da:	f001 f847 	bl	800286c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017de:	2304      	movs	r3, #4
 80017e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e2:	2302      	movs	r3, #2
 80017e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ea:	2303      	movs	r3, #3
 80017ec:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80017ee:	2307      	movs	r3, #7
 80017f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017f6:	4619      	mov	r1, r3
 80017f8:	4826      	ldr	r0, [pc, #152]	; (8001894 <HAL_SPI_MspInit+0x1fc>)
 80017fa:	f001 f837 	bl	800286c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80017fe:	2318      	movs	r3, #24
 8001800:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001802:	2302      	movs	r3, #2
 8001804:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	2300      	movs	r3, #0
 8001808:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180a:	2303      	movs	r3, #3
 800180c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800180e:	2306      	movs	r3, #6
 8001810:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001812:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001816:	4619      	mov	r1, r3
 8001818:	481e      	ldr	r0, [pc, #120]	; (8001894 <HAL_SPI_MspInit+0x1fc>)
 800181a:	f001 f827 	bl	800286c <HAL_GPIO_Init>
}
 800181e:	e02c      	b.n	800187a <HAL_SPI_MspInit+0x1e2>
  else if(hspi->Instance==SPI4)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a1d      	ldr	r2, [pc, #116]	; (800189c <HAL_SPI_MspInit+0x204>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d127      	bne.n	800187a <HAL_SPI_MspInit+0x1e2>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800182a:	4b17      	ldr	r3, [pc, #92]	; (8001888 <HAL_SPI_MspInit+0x1f0>)
 800182c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182e:	4a16      	ldr	r2, [pc, #88]	; (8001888 <HAL_SPI_MspInit+0x1f0>)
 8001830:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001834:	6453      	str	r3, [r2, #68]	; 0x44
 8001836:	4b14      	ldr	r3, [pc, #80]	; (8001888 <HAL_SPI_MspInit+0x1f0>)
 8001838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001842:	4b11      	ldr	r3, [pc, #68]	; (8001888 <HAL_SPI_MspInit+0x1f0>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	4a10      	ldr	r2, [pc, #64]	; (8001888 <HAL_SPI_MspInit+0x1f0>)
 8001848:	f043 0310 	orr.w	r3, r3, #16
 800184c:	6313      	str	r3, [r2, #48]	; 0x30
 800184e:	4b0e      	ldr	r3, [pc, #56]	; (8001888 <HAL_SPI_MspInit+0x1f0>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	f003 0310 	and.w	r3, r3, #16
 8001856:	60bb      	str	r3, [r7, #8]
 8001858:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800185a:	2374      	movs	r3, #116	; 0x74
 800185c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185e:	2302      	movs	r3, #2
 8001860:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	2300      	movs	r3, #0
 8001864:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001866:	2303      	movs	r3, #3
 8001868:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800186a:	2305      	movs	r3, #5
 800186c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800186e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001872:	4619      	mov	r1, r3
 8001874:	480a      	ldr	r0, [pc, #40]	; (80018a0 <HAL_SPI_MspInit+0x208>)
 8001876:	f000 fff9 	bl	800286c <HAL_GPIO_Init>
}
 800187a:	bf00      	nop
 800187c:	3740      	adds	r7, #64	; 0x40
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40013000 	.word	0x40013000
 8001888:	40023800 	.word	0x40023800
 800188c:	40020000 	.word	0x40020000
 8001890:	40003800 	.word	0x40003800
 8001894:	40020400 	.word	0x40020400
 8001898:	40003c00 	.word	0x40003c00
 800189c:	40013400 	.word	0x40013400
 80018a0:	40021000 	.word	0x40021000

080018a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b094      	sub	sp, #80	; 0x50
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a8b      	ldr	r2, [pc, #556]	; (8001af0 <HAL_UART_MspInit+0x24c>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d128      	bne.n	8001918 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80018c6:	4b8b      	ldr	r3, [pc, #556]	; (8001af4 <HAL_UART_MspInit+0x250>)
 80018c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ca:	4a8a      	ldr	r2, [pc, #552]	; (8001af4 <HAL_UART_MspInit+0x250>)
 80018cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80018d0:	6413      	str	r3, [r2, #64]	; 0x40
 80018d2:	4b88      	ldr	r3, [pc, #544]	; (8001af4 <HAL_UART_MspInit+0x250>)
 80018d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018da:	63bb      	str	r3, [r7, #56]	; 0x38
 80018dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018de:	4b85      	ldr	r3, [pc, #532]	; (8001af4 <HAL_UART_MspInit+0x250>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	4a84      	ldr	r2, [pc, #528]	; (8001af4 <HAL_UART_MspInit+0x250>)
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ea:	4b82      	ldr	r3, [pc, #520]	; (8001af4 <HAL_UART_MspInit+0x250>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	637b      	str	r3, [r7, #52]	; 0x34
 80018f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**UART4 GPIO Configuration    
    PA0/WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80018f6:	2303      	movs	r3, #3
 80018f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fa:	2302      	movs	r3, #2
 80018fc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001902:	2303      	movs	r3, #3
 8001904:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001906:	2308      	movs	r3, #8
 8001908:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800190e:	4619      	mov	r1, r3
 8001910:	4879      	ldr	r0, [pc, #484]	; (8001af8 <HAL_UART_MspInit+0x254>)
 8001912:	f000 ffab 	bl	800286c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001916:	e0e7      	b.n	8001ae8 <HAL_UART_MspInit+0x244>
  else if(huart->Instance==UART7)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a77      	ldr	r2, [pc, #476]	; (8001afc <HAL_UART_MspInit+0x258>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d129      	bne.n	8001976 <HAL_UART_MspInit+0xd2>
    __HAL_RCC_UART7_CLK_ENABLE();
 8001922:	4b74      	ldr	r3, [pc, #464]	; (8001af4 <HAL_UART_MspInit+0x250>)
 8001924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001926:	4a73      	ldr	r2, [pc, #460]	; (8001af4 <HAL_UART_MspInit+0x250>)
 8001928:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800192c:	6413      	str	r3, [r2, #64]	; 0x40
 800192e:	4b71      	ldr	r3, [pc, #452]	; (8001af4 <HAL_UART_MspInit+0x250>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001936:	633b      	str	r3, [r7, #48]	; 0x30
 8001938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800193a:	4b6e      	ldr	r3, [pc, #440]	; (8001af4 <HAL_UART_MspInit+0x250>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	4a6d      	ldr	r2, [pc, #436]	; (8001af4 <HAL_UART_MspInit+0x250>)
 8001940:	f043 0310 	orr.w	r3, r3, #16
 8001944:	6313      	str	r3, [r2, #48]	; 0x30
 8001946:	4b6b      	ldr	r3, [pc, #428]	; (8001af4 <HAL_UART_MspInit+0x250>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	f003 0310 	and.w	r3, r3, #16
 800194e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001952:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001956:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001958:	2302      	movs	r3, #2
 800195a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195c:	2300      	movs	r3, #0
 800195e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001960:	2303      	movs	r3, #3
 8001962:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8001964:	2308      	movs	r3, #8
 8001966:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001968:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800196c:	4619      	mov	r1, r3
 800196e:	4864      	ldr	r0, [pc, #400]	; (8001b00 <HAL_UART_MspInit+0x25c>)
 8001970:	f000 ff7c 	bl	800286c <HAL_GPIO_Init>
}
 8001974:	e0b8      	b.n	8001ae8 <HAL_UART_MspInit+0x244>
  else if(huart->Instance==USART1)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a62      	ldr	r2, [pc, #392]	; (8001b04 <HAL_UART_MspInit+0x260>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d129      	bne.n	80019d4 <HAL_UART_MspInit+0x130>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001980:	4b5c      	ldr	r3, [pc, #368]	; (8001af4 <HAL_UART_MspInit+0x250>)
 8001982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001984:	4a5b      	ldr	r2, [pc, #364]	; (8001af4 <HAL_UART_MspInit+0x250>)
 8001986:	f043 0310 	orr.w	r3, r3, #16
 800198a:	6453      	str	r3, [r2, #68]	; 0x44
 800198c:	4b59      	ldr	r3, [pc, #356]	; (8001af4 <HAL_UART_MspInit+0x250>)
 800198e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001990:	f003 0310 	and.w	r3, r3, #16
 8001994:	62bb      	str	r3, [r7, #40]	; 0x28
 8001996:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001998:	4b56      	ldr	r3, [pc, #344]	; (8001af4 <HAL_UART_MspInit+0x250>)
 800199a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199c:	4a55      	ldr	r2, [pc, #340]	; (8001af4 <HAL_UART_MspInit+0x250>)
 800199e:	f043 0301 	orr.w	r3, r3, #1
 80019a2:	6313      	str	r3, [r2, #48]	; 0x30
 80019a4:	4b53      	ldr	r3, [pc, #332]	; (8001af4 <HAL_UART_MspInit+0x250>)
 80019a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a8:	f003 0301 	and.w	r3, r3, #1
 80019ac:	627b      	str	r3, [r7, #36]	; 0x24
 80019ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80019b0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80019b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b6:	2302      	movs	r3, #2
 80019b8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019be:	2303      	movs	r3, #3
 80019c0:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019c2:	2307      	movs	r3, #7
 80019c4:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80019ca:	4619      	mov	r1, r3
 80019cc:	484a      	ldr	r0, [pc, #296]	; (8001af8 <HAL_UART_MspInit+0x254>)
 80019ce:	f000 ff4d 	bl	800286c <HAL_GPIO_Init>
}
 80019d2:	e089      	b.n	8001ae8 <HAL_UART_MspInit+0x244>
  else if(huart->Instance==USART2)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a4b      	ldr	r2, [pc, #300]	; (8001b08 <HAL_UART_MspInit+0x264>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d128      	bne.n	8001a30 <HAL_UART_MspInit+0x18c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80019de:	4b45      	ldr	r3, [pc, #276]	; (8001af4 <HAL_UART_MspInit+0x250>)
 80019e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e2:	4a44      	ldr	r2, [pc, #272]	; (8001af4 <HAL_UART_MspInit+0x250>)
 80019e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019e8:	6413      	str	r3, [r2, #64]	; 0x40
 80019ea:	4b42      	ldr	r3, [pc, #264]	; (8001af4 <HAL_UART_MspInit+0x250>)
 80019ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f2:	623b      	str	r3, [r7, #32]
 80019f4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f6:	4b3f      	ldr	r3, [pc, #252]	; (8001af4 <HAL_UART_MspInit+0x250>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	4a3e      	ldr	r2, [pc, #248]	; (8001af4 <HAL_UART_MspInit+0x250>)
 80019fc:	f043 0301 	orr.w	r3, r3, #1
 8001a00:	6313      	str	r3, [r2, #48]	; 0x30
 8001a02:	4b3c      	ldr	r3, [pc, #240]	; (8001af4 <HAL_UART_MspInit+0x250>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	61fb      	str	r3, [r7, #28]
 8001a0c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a0e:	230c      	movs	r3, #12
 8001a10:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a12:	2302      	movs	r3, #2
 8001a14:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a1e:	2307      	movs	r3, #7
 8001a20:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a22:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001a26:	4619      	mov	r1, r3
 8001a28:	4833      	ldr	r0, [pc, #204]	; (8001af8 <HAL_UART_MspInit+0x254>)
 8001a2a:	f000 ff1f 	bl	800286c <HAL_GPIO_Init>
}
 8001a2e:	e05b      	b.n	8001ae8 <HAL_UART_MspInit+0x244>
  else if(huart->Instance==USART3)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a35      	ldr	r2, [pc, #212]	; (8001b0c <HAL_UART_MspInit+0x268>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d129      	bne.n	8001a8e <HAL_UART_MspInit+0x1ea>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a3a:	4b2e      	ldr	r3, [pc, #184]	; (8001af4 <HAL_UART_MspInit+0x250>)
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	4a2d      	ldr	r2, [pc, #180]	; (8001af4 <HAL_UART_MspInit+0x250>)
 8001a40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a44:	6413      	str	r3, [r2, #64]	; 0x40
 8001a46:	4b2b      	ldr	r3, [pc, #172]	; (8001af4 <HAL_UART_MspInit+0x250>)
 8001a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a4e:	61bb      	str	r3, [r7, #24]
 8001a50:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a52:	4b28      	ldr	r3, [pc, #160]	; (8001af4 <HAL_UART_MspInit+0x250>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	4a27      	ldr	r2, [pc, #156]	; (8001af4 <HAL_UART_MspInit+0x250>)
 8001a58:	f043 0308 	orr.w	r3, r3, #8
 8001a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5e:	4b25      	ldr	r3, [pc, #148]	; (8001af4 <HAL_UART_MspInit+0x250>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	f003 0308 	and.w	r3, r3, #8
 8001a66:	617b      	str	r3, [r7, #20]
 8001a68:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a6a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a70:	2302      	movs	r3, #2
 8001a72:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a7c:	2307      	movs	r3, #7
 8001a7e:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a80:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001a84:	4619      	mov	r1, r3
 8001a86:	4822      	ldr	r0, [pc, #136]	; (8001b10 <HAL_UART_MspInit+0x26c>)
 8001a88:	f000 fef0 	bl	800286c <HAL_GPIO_Init>
}
 8001a8c:	e02c      	b.n	8001ae8 <HAL_UART_MspInit+0x244>
  else if(huart->Instance==USART6)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a20      	ldr	r2, [pc, #128]	; (8001b14 <HAL_UART_MspInit+0x270>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d127      	bne.n	8001ae8 <HAL_UART_MspInit+0x244>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001a98:	4b16      	ldr	r3, [pc, #88]	; (8001af4 <HAL_UART_MspInit+0x250>)
 8001a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9c:	4a15      	ldr	r2, [pc, #84]	; (8001af4 <HAL_UART_MspInit+0x250>)
 8001a9e:	f043 0320 	orr.w	r3, r3, #32
 8001aa2:	6453      	str	r3, [r2, #68]	; 0x44
 8001aa4:	4b13      	ldr	r3, [pc, #76]	; (8001af4 <HAL_UART_MspInit+0x250>)
 8001aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa8:	f003 0320 	and.w	r3, r3, #32
 8001aac:	613b      	str	r3, [r7, #16]
 8001aae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ab0:	4b10      	ldr	r3, [pc, #64]	; (8001af4 <HAL_UART_MspInit+0x250>)
 8001ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab4:	4a0f      	ldr	r2, [pc, #60]	; (8001af4 <HAL_UART_MspInit+0x250>)
 8001ab6:	f043 0304 	orr.w	r3, r3, #4
 8001aba:	6313      	str	r3, [r2, #48]	; 0x30
 8001abc:	4b0d      	ldr	r3, [pc, #52]	; (8001af4 <HAL_UART_MspInit+0x250>)
 8001abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac0:	f003 0304 	and.w	r3, r3, #4
 8001ac4:	60fb      	str	r3, [r7, #12]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ac8:	23c0      	movs	r3, #192	; 0xc0
 8001aca:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001acc:	2302      	movs	r3, #2
 8001ace:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001ad8:	2308      	movs	r3, #8
 8001ada:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001adc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	480d      	ldr	r0, [pc, #52]	; (8001b18 <HAL_UART_MspInit+0x274>)
 8001ae4:	f000 fec2 	bl	800286c <HAL_GPIO_Init>
}
 8001ae8:	bf00      	nop
 8001aea:	3750      	adds	r7, #80	; 0x50
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40004c00 	.word	0x40004c00
 8001af4:	40023800 	.word	0x40023800
 8001af8:	40020000 	.word	0x40020000
 8001afc:	40007800 	.word	0x40007800
 8001b00:	40021000 	.word	0x40021000
 8001b04:	40011000 	.word	0x40011000
 8001b08:	40004400 	.word	0x40004400
 8001b0c:	40004800 	.word	0x40004800
 8001b10:	40020c00 	.word	0x40020c00
 8001b14:	40011400 	.word	0x40011400
 8001b18:	40020800 	.word	0x40020800

08001b1c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b08a      	sub	sp, #40	; 0x28
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b24:	f107 0314 	add.w	r3, r7, #20
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	60da      	str	r2, [r3, #12]
 8001b32:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b3c:	d134      	bne.n	8001ba8 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b3e:	4b1c      	ldr	r3, [pc, #112]	; (8001bb0 <HAL_PCD_MspInit+0x94>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	4a1b      	ldr	r2, [pc, #108]	; (8001bb0 <HAL_PCD_MspInit+0x94>)
 8001b44:	f043 0301 	orr.w	r3, r3, #1
 8001b48:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4a:	4b19      	ldr	r3, [pc, #100]	; (8001bb0 <HAL_PCD_MspInit+0x94>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	613b      	str	r3, [r7, #16]
 8001b54:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001b56:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001b5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b60:	2300      	movs	r3, #0
 8001b62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b64:	2303      	movs	r3, #3
 8001b66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001b68:	230a      	movs	r3, #10
 8001b6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b6c:	f107 0314 	add.w	r3, r7, #20
 8001b70:	4619      	mov	r1, r3
 8001b72:	4810      	ldr	r0, [pc, #64]	; (8001bb4 <HAL_PCD_MspInit+0x98>)
 8001b74:	f000 fe7a 	bl	800286c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001b78:	4b0d      	ldr	r3, [pc, #52]	; (8001bb0 <HAL_PCD_MspInit+0x94>)
 8001b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b7c:	4a0c      	ldr	r2, [pc, #48]	; (8001bb0 <HAL_PCD_MspInit+0x94>)
 8001b7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b82:	6353      	str	r3, [r2, #52]	; 0x34
 8001b84:	4b0a      	ldr	r3, [pc, #40]	; (8001bb0 <HAL_PCD_MspInit+0x94>)
 8001b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	4b07      	ldr	r3, [pc, #28]	; (8001bb0 <HAL_PCD_MspInit+0x94>)
 8001b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b94:	4a06      	ldr	r2, [pc, #24]	; (8001bb0 <HAL_PCD_MspInit+0x94>)
 8001b96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b9a:	6453      	str	r3, [r2, #68]	; 0x44
 8001b9c:	4b04      	ldr	r3, [pc, #16]	; (8001bb0 <HAL_PCD_MspInit+0x94>)
 8001b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ba4:	60bb      	str	r3, [r7, #8]
 8001ba6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001ba8:	bf00      	nop
 8001baa:	3728      	adds	r7, #40	; 0x28
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	40020000 	.word	0x40020000

08001bb8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b08c      	sub	sp, #48	; 0x30
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8001bc8:	2200      	movs	r2, #0
 8001bca:	6879      	ldr	r1, [r7, #4]
 8001bcc:	2019      	movs	r0, #25
 8001bce:	f000 fe23 	bl	8002818 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8001bd2:	2019      	movs	r0, #25
 8001bd4:	f000 fe3c 	bl	8002850 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001bd8:	4b1e      	ldr	r3, [pc, #120]	; (8001c54 <HAL_InitTick+0x9c>)
 8001bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bdc:	4a1d      	ldr	r2, [pc, #116]	; (8001c54 <HAL_InitTick+0x9c>)
 8001bde:	f043 0301 	orr.w	r3, r3, #1
 8001be2:	6453      	str	r3, [r2, #68]	; 0x44
 8001be4:	4b1b      	ldr	r3, [pc, #108]	; (8001c54 <HAL_InitTick+0x9c>)
 8001be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be8:	f003 0301 	and.w	r3, r3, #1
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001bf0:	f107 0210 	add.w	r2, r7, #16
 8001bf4:	f107 0314 	add.w	r3, r7, #20
 8001bf8:	4611      	mov	r1, r2
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f001 fe9c 	bl	8003938 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001c00:	f001 fe86 	bl	8003910 <HAL_RCC_GetPCLK2Freq>
 8001c04:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c08:	4a13      	ldr	r2, [pc, #76]	; (8001c58 <HAL_InitTick+0xa0>)
 8001c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c0e:	0c9b      	lsrs	r3, r3, #18
 8001c10:	3b01      	subs	r3, #1
 8001c12:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001c14:	4b11      	ldr	r3, [pc, #68]	; (8001c5c <HAL_InitTick+0xa4>)
 8001c16:	4a12      	ldr	r2, [pc, #72]	; (8001c60 <HAL_InitTick+0xa8>)
 8001c18:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8001c1a:	4b10      	ldr	r3, [pc, #64]	; (8001c5c <HAL_InitTick+0xa4>)
 8001c1c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c20:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001c22:	4a0e      	ldr	r2, [pc, #56]	; (8001c5c <HAL_InitTick+0xa4>)
 8001c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c26:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001c28:	4b0c      	ldr	r3, [pc, #48]	; (8001c5c <HAL_InitTick+0xa4>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c2e:	4b0b      	ldr	r3, [pc, #44]	; (8001c5c <HAL_InitTick+0xa4>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001c34:	4809      	ldr	r0, [pc, #36]	; (8001c5c <HAL_InitTick+0xa4>)
 8001c36:	f003 f900 	bl	8004e3a <HAL_TIM_Base_Init>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d104      	bne.n	8001c4a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001c40:	4806      	ldr	r0, [pc, #24]	; (8001c5c <HAL_InitTick+0xa4>)
 8001c42:	f003 f92f 	bl	8004ea4 <HAL_TIM_Base_Start_IT>
 8001c46:	4603      	mov	r3, r0
 8001c48:	e000      	b.n	8001c4c <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3730      	adds	r7, #48	; 0x30
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40023800 	.word	0x40023800
 8001c58:	431bde83 	.word	0x431bde83
 8001c5c:	200068b4 	.word	0x200068b4
 8001c60:	40010000 	.word	0x40010000

08001c64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001c68:	bf00      	nop
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr

08001c72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c72:	b480      	push	{r7}
 8001c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c76:	e7fe      	b.n	8001c76 <HardFault_Handler+0x4>

08001c78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c7c:	e7fe      	b.n	8001c7c <MemManage_Handler+0x4>

08001c7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c82:	e7fe      	b.n	8001c82 <BusFault_Handler+0x4>

08001c84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c88:	e7fe      	b.n	8001c88 <UsageFault_Handler+0x4>

08001c8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c8e:	bf00      	nop
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c9c:	4802      	ldr	r0, [pc, #8]	; (8001ca8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001c9e:	f003 f92b 	bl	8004ef8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001ca2:	bf00      	nop
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	200068b4 	.word	0x200068b4

08001cac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cb0:	4b15      	ldr	r3, [pc, #84]	; (8001d08 <SystemInit+0x5c>)
 8001cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cb6:	4a14      	ldr	r2, [pc, #80]	; (8001d08 <SystemInit+0x5c>)
 8001cb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001cc0:	4b12      	ldr	r3, [pc, #72]	; (8001d0c <SystemInit+0x60>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a11      	ldr	r2, [pc, #68]	; (8001d0c <SystemInit+0x60>)
 8001cc6:	f043 0301 	orr.w	r3, r3, #1
 8001cca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001ccc:	4b0f      	ldr	r3, [pc, #60]	; (8001d0c <SystemInit+0x60>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001cd2:	4b0e      	ldr	r3, [pc, #56]	; (8001d0c <SystemInit+0x60>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	490d      	ldr	r1, [pc, #52]	; (8001d0c <SystemInit+0x60>)
 8001cd8:	4b0d      	ldr	r3, [pc, #52]	; (8001d10 <SystemInit+0x64>)
 8001cda:	4013      	ands	r3, r2
 8001cdc:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001cde:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <SystemInit+0x60>)
 8001ce0:	4a0c      	ldr	r2, [pc, #48]	; (8001d14 <SystemInit+0x68>)
 8001ce2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001ce4:	4b09      	ldr	r3, [pc, #36]	; (8001d0c <SystemInit+0x60>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a08      	ldr	r2, [pc, #32]	; (8001d0c <SystemInit+0x60>)
 8001cea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001cf0:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <SystemInit+0x60>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001cf6:	4b04      	ldr	r3, [pc, #16]	; (8001d08 <SystemInit+0x5c>)
 8001cf8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001cfc:	609a      	str	r2, [r3, #8]
#endif
}
 8001cfe:	bf00      	nop
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	e000ed00 	.word	0xe000ed00
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	fef6ffff 	.word	0xfef6ffff
 8001d14:	24003010 	.word	0x24003010

08001d18 <vTaskBuzzer>:
 *  Created on: Nov 29, 2019
 *      Author: Jonas
 */
#include "tasks/task_buzzer.h"

void vTaskBuzzer(void *argument) {
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]

	/* For periodic update */
	uint32_t tick_count, tick_update;

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8001d20:	f004 fe9c 	bl	8006a5c <osKernelGetTickCount>
 8001d24:	60f8      	str	r0, [r7, #12]
	tick_update = osKernelGetTickFreq() / BUZZER_FREQUENCY;
 8001d26:	f004 fec1 	bl	8006aac <osKernelGetTickFreq>
 8001d2a:	60b8      	str	r0, [r7, #8]
	for (;;) {
		tick_count += tick_update;
 8001d2c:	68fa      	ldr	r2, [r7, #12]
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	4413      	add	r3, r2
 8001d32:	60fb      	str	r3, [r7, #12]
		/* TODO: Actual Stuff */

		osDelayUntil(tick_count);
 8001d34:	68f8      	ldr	r0, [r7, #12]
 8001d36:	f004 ff9b 	bl	8006c70 <osDelayUntil>
		tick_count += tick_update;
 8001d3a:	e7f7      	b.n	8001d2c <vTaskBuzzer+0x14>

08001d3c <vTaskController>:
 *      Author: Jonas
 */

#include "tasks/task_controller.h"

void vTaskController(void *argument) {
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]

	/* For periodic update */
	uint32_t tick_count, tick_update;

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8001d44:	f004 fe8a 	bl	8006a5c <osKernelGetTickCount>
 8001d48:	60f8      	str	r0, [r7, #12]
	tick_update = osKernelGetTickFreq() / CONTROLLER_FREQUENCY;
 8001d4a:	f004 feaf 	bl	8006aac <osKernelGetTickFreq>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <vTaskController+0x30>)
 8001d52:	fba3 2302 	umull	r2, r3, r3, r2
 8001d56:	095b      	lsrs	r3, r3, #5
 8001d58:	60bb      	str	r3, [r7, #8]
	for (;;) {
		tick_count += tick_update;
 8001d5a:	68fa      	ldr	r2, [r7, #12]
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	4413      	add	r3, r2
 8001d60:	60fb      	str	r3, [r7, #12]
		/* TODO: Actual Stuff */

		osDelayUntil(tick_count);
 8001d62:	68f8      	ldr	r0, [r7, #12]
 8001d64:	f004 ff84 	bl	8006c70 <osDelayUntil>
		tick_count += tick_update;
 8001d68:	e7f7      	b.n	8001d5a <vTaskController+0x1e>
 8001d6a:	bf00      	nop
 8001d6c:	10624dd3 	.word	0x10624dd3

08001d70 <vTaskDownlink>:
 *      Author: Jonas
 */

#include "tasks/task_downlink.h"

void vTaskDownlink(void *argument) {
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]

	/* For periodic update */
	uint32_t tick_count, tick_update;

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8001d78:	f004 fe70 	bl	8006a5c <osKernelGetTickCount>
 8001d7c:	60f8      	str	r0, [r7, #12]
	tick_update = osKernelGetTickFreq() / DOWNLINK_FREQUENCY;
 8001d7e:	f004 fe95 	bl	8006aac <osKernelGetTickFreq>
 8001d82:	4602      	mov	r2, r0
 8001d84:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <vTaskDownlink+0x30>)
 8001d86:	fba3 2302 	umull	r2, r3, r3, r2
 8001d8a:	099b      	lsrs	r3, r3, #6
 8001d8c:	60bb      	str	r3, [r7, #8]
	for (;;) {
		tick_count += tick_update;
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	4413      	add	r3, r2
 8001d94:	60fb      	str	r3, [r7, #12]
		/* TODO: Actual Stuff */

		osDelayUntil(tick_count);
 8001d96:	68f8      	ldr	r0, [r7, #12]
 8001d98:	f004 ff6a 	bl	8006c70 <osDelayUntil>
		tick_count += tick_update;
 8001d9c:	e7f7      	b.n	8001d8e <vTaskDownlink+0x1e>
 8001d9e:	bf00      	nop
 8001da0:	10624dd3 	.word	0x10624dd3

08001da4 <vTaskFsm>:
 *      Author: Jonas
 */

#include "tasks/task_fsm.h"

void vTaskFsm(void *argument) {
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]

	/* For periodic update */
	uint32_t tick_count, tick_update;

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8001dac:	f004 fe56 	bl	8006a5c <osKernelGetTickCount>
 8001db0:	60f8      	str	r0, [r7, #12]
	tick_update = osKernelGetTickFreq() / FSM_FREQUENCY;
 8001db2:	f004 fe7b 	bl	8006aac <osKernelGetTickFreq>
 8001db6:	4602      	mov	r2, r0
 8001db8:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <vTaskFsm+0x30>)
 8001dba:	fba3 2302 	umull	r2, r3, r3, r2
 8001dbe:	099b      	lsrs	r3, r3, #6
 8001dc0:	60bb      	str	r3, [r7, #8]
	for (;;) {
		tick_count += tick_update;
 8001dc2:	68fa      	ldr	r2, [r7, #12]
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	60fb      	str	r3, [r7, #12]
		/* TODO: Actual Stuff */

		osDelayUntil(tick_count);
 8001dca:	68f8      	ldr	r0, [r7, #12]
 8001dcc:	f004 ff50 	bl	8006c70 <osDelayUntil>
		tick_count += tick_update;
 8001dd0:	e7f7      	b.n	8001dc2 <vTaskFsm+0x1e>
 8001dd2:	bf00      	nop
 8001dd4:	10624dd3 	.word	0x10624dd3

08001dd8 <vTaskGpsRead>:
 *      Author: Jonas
 */

#include "tasks/task_gps_read.h"

void vTaskGpsRead(void *argument) {
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]

	/* For periodic update */
	uint32_t tick_count, tick_update;

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8001de0:	f004 fe3c 	bl	8006a5c <osKernelGetTickCount>
 8001de4:	60f8      	str	r0, [r7, #12]
	tick_update = osKernelGetTickFreq() / GPS_READ_FREQUENCY;
 8001de6:	f004 fe61 	bl	8006aac <osKernelGetTickFreq>
 8001dea:	4602      	mov	r2, r0
 8001dec:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <vTaskGpsRead+0x30>)
 8001dee:	fba3 2302 	umull	r2, r3, r3, r2
 8001df2:	08db      	lsrs	r3, r3, #3
 8001df4:	60bb      	str	r3, [r7, #8]
	for (;;) {
		tick_count += tick_update;
 8001df6:	68fa      	ldr	r2, [r7, #12]
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	60fb      	str	r3, [r7, #12]
		/* TODO: Actual Stuff */

		osDelayUntil(tick_count);
 8001dfe:	68f8      	ldr	r0, [r7, #12]
 8001e00:	f004 ff36 	bl	8006c70 <osDelayUntil>
		tick_count += tick_update;
 8001e04:	e7f7      	b.n	8001df6 <vTaskGpsRead+0x1e>
 8001e06:	bf00      	nop
 8001e08:	cccccccd 	.word	0xcccccccd

08001e0c <vTaskMotorCont>:
 *      Author: Jonas
 */

#include "tasks/task_motor_cont.h"

void vTaskMotorCont(void *argument) {
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]

	/* For periodic update */
	uint32_t tick_count, tick_update;

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8001e14:	f004 fe22 	bl	8006a5c <osKernelGetTickCount>
 8001e18:	60f8      	str	r0, [r7, #12]
	tick_update = osKernelGetTickFreq() / MOTOR_CONTROLLER_FREQUENCY;
 8001e1a:	f004 fe47 	bl	8006aac <osKernelGetTickFreq>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	4b06      	ldr	r3, [pc, #24]	; (8001e3c <vTaskMotorCont+0x30>)
 8001e22:	fba3 2302 	umull	r2, r3, r3, r2
 8001e26:	095b      	lsrs	r3, r3, #5
 8001e28:	60bb      	str	r3, [r7, #8]
	for (;;) {
		tick_count += tick_update;
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	4413      	add	r3, r2
 8001e30:	60fb      	str	r3, [r7, #12]
		/* TODO: Actual Stuff */

		osDelayUntil(tick_count);
 8001e32:	68f8      	ldr	r0, [r7, #12]
 8001e34:	f004 ff1c 	bl	8006c70 <osDelayUntil>
		tick_count += tick_update;
 8001e38:	e7f7      	b.n	8001e2a <vTaskMotorCont+0x1e>
 8001e3a:	bf00      	nop
 8001e3c:	10624dd3 	.word	0x10624dd3

08001e40 <vTaskSdCard>:
 *      Author: Jonas
 */

#include "tasks/task_sd_card.h"

void vTaskSdCard(void *argument) {
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]

	/* For periodic update */
	uint32_t tick_count, tick_update;

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8001e48:	f004 fe08 	bl	8006a5c <osKernelGetTickCount>
 8001e4c:	60f8      	str	r0, [r7, #12]
	tick_update = osKernelGetTickFreq() / SD_CARD_WRITE_FREQUENCY;
 8001e4e:	f004 fe2d 	bl	8006aac <osKernelGetTickFreq>
 8001e52:	4602      	mov	r2, r0
 8001e54:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <vTaskSdCard+0x30>)
 8001e56:	fba3 2302 	umull	r2, r3, r3, r2
 8001e5a:	099b      	lsrs	r3, r3, #6
 8001e5c:	60bb      	str	r3, [r7, #8]
	for (;;) {
		tick_count += tick_update;
 8001e5e:	68fa      	ldr	r2, [r7, #12]
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	4413      	add	r3, r2
 8001e64:	60fb      	str	r3, [r7, #12]
		/* TODO: Actual Stuff */

		osDelayUntil(tick_count);
 8001e66:	68f8      	ldr	r0, [r7, #12]
 8001e68:	f004 ff02 	bl	8006c70 <osDelayUntil>
		tick_count += tick_update;
 8001e6c:	e7f7      	b.n	8001e5e <vTaskSdCard+0x1e>
 8001e6e:	bf00      	nop
 8001e70:	10624dd3 	.word	0x10624dd3

08001e74 <vTaskSensRead>:
 *      Author: Jonas
 */

#include "tasks/task_sens_read.h"

void vTaskSensRead(void *argument) {
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]

	/* For periodic update */
	uint32_t tick_count, tick_update;

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8001e7c:	f004 fdee 	bl	8006a5c <osKernelGetTickCount>
 8001e80:	60f8      	str	r0, [r7, #12]
	tick_update = osKernelGetTickFreq() / SENSOR_READ_FREQUENCY;
 8001e82:	f004 fe13 	bl	8006aac <osKernelGetTickFreq>
 8001e86:	4602      	mov	r2, r0
 8001e88:	4b06      	ldr	r3, [pc, #24]	; (8001ea4 <vTaskSensRead+0x30>)
 8001e8a:	fba3 2302 	umull	r2, r3, r3, r2
 8001e8e:	099b      	lsrs	r3, r3, #6
 8001e90:	60bb      	str	r3, [r7, #8]
	for (;;) {
		tick_count += tick_update;
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	4413      	add	r3, r2
 8001e98:	60fb      	str	r3, [r7, #12]
		/* TODO: Actual Stuff */

		osDelayUntil(tick_count);
 8001e9a:	68f8      	ldr	r0, [r7, #12]
 8001e9c:	f004 fee8 	bl	8006c70 <osDelayUntil>
		tick_count += tick_update;
 8001ea0:	e7f7      	b.n	8001e92 <vTaskSensRead+0x1e>
 8001ea2:	bf00      	nop
 8001ea4:	10624dd3 	.word	0x10624dd3

08001ea8 <vTaskStateEst>:
 *      Author: Jonas
 */

#include "tasks/task_state_est.h"

void vTaskStateEst(void *argument) {
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]

	/* For periodic update */
	uint32_t tick_count, tick_update;

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8001eb0:	f004 fdd4 	bl	8006a5c <osKernelGetTickCount>
 8001eb4:	60f8      	str	r0, [r7, #12]
	tick_update = osKernelGetTickFreq() / STATE_ESTIMATION_FREQUENCY;
 8001eb6:	f004 fdf9 	bl	8006aac <osKernelGetTickFreq>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	4b06      	ldr	r3, [pc, #24]	; (8001ed8 <vTaskStateEst+0x30>)
 8001ebe:	fba3 2302 	umull	r2, r3, r3, r2
 8001ec2:	099b      	lsrs	r3, r3, #6
 8001ec4:	60bb      	str	r3, [r7, #8]
	for (;;) {
		tick_count += tick_update;
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	4413      	add	r3, r2
 8001ecc:	60fb      	str	r3, [r7, #12]
		/* TODO: Actual Stuff */

		osDelayUntil(tick_count);
 8001ece:	68f8      	ldr	r0, [r7, #12]
 8001ed0:	f004 fece 	bl	8006c70 <osDelayUntil>
		tick_count += tick_update;
 8001ed4:	e7f7      	b.n	8001ec6 <vTaskStateEst+0x1e>
 8001ed6:	bf00      	nop
 8001ed8:	10624dd3 	.word	0x10624dd3

08001edc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001edc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f14 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001ee0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001ee2:	e003      	b.n	8001eec <LoopCopyDataInit>

08001ee4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001ee4:	4b0c      	ldr	r3, [pc, #48]	; (8001f18 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001ee6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001ee8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001eea:	3104      	adds	r1, #4

08001eec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001eec:	480b      	ldr	r0, [pc, #44]	; (8001f1c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001eee:	4b0c      	ldr	r3, [pc, #48]	; (8001f20 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ef0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001ef2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ef4:	d3f6      	bcc.n	8001ee4 <CopyDataInit>
  ldr  r2, =_sbss
 8001ef6:	4a0b      	ldr	r2, [pc, #44]	; (8001f24 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001ef8:	e002      	b.n	8001f00 <LoopFillZerobss>

08001efa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001efa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001efc:	f842 3b04 	str.w	r3, [r2], #4

08001f00 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001f00:	4b09      	ldr	r3, [pc, #36]	; (8001f28 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001f02:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001f04:	d3f9      	bcc.n	8001efa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f06:	f7ff fed1 	bl	8001cac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f0a:	f007 fb87 	bl	800961c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f0e:	f7fe faff 	bl	8000510 <main>
  bx  lr    
 8001f12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f14:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001f18:	08009778 	.word	0x08009778
  ldr  r0, =_sdata
 8001f1c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001f20:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001f24:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001f28:	20006938 	.word	0x20006938

08001f2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f2c:	e7fe      	b.n	8001f2c <ADC_IRQHandler>

08001f2e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f32:	2003      	movs	r0, #3
 8001f34:	f000 fc65 	bl	8002802 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f38:	2000      	movs	r0, #0
 8001f3a:	f7ff fe3d 	bl	8001bb8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001f3e:	f7ff fa0f 	bl	8001360 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f4c:	4b06      	ldr	r3, [pc, #24]	; (8001f68 <HAL_IncTick+0x20>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	461a      	mov	r2, r3
 8001f52:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <HAL_IncTick+0x24>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4413      	add	r3, r2
 8001f58:	4a04      	ldr	r2, [pc, #16]	; (8001f6c <HAL_IncTick+0x24>)
 8001f5a:	6013      	str	r3, [r2, #0]
}
 8001f5c:	bf00      	nop
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	20000004 	.word	0x20000004
 8001f6c:	200068f4 	.word	0x200068f4

08001f70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  return uwTick;
 8001f74:	4b03      	ldr	r3, [pc, #12]	; (8001f84 <HAL_GetTick+0x14>)
 8001f76:	681b      	ldr	r3, [r3, #0]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	200068f4 	.word	0x200068f4

08001f88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f90:	f7ff ffee 	bl	8001f70 <HAL_GetTick>
 8001f94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa0:	d005      	beq.n	8001fae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fa2:	4b09      	ldr	r3, [pc, #36]	; (8001fc8 <HAL_Delay+0x40>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	4413      	add	r3, r2
 8001fac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fae:	bf00      	nop
 8001fb0:	f7ff ffde 	bl	8001f70 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d8f7      	bhi.n	8001fb0 <HAL_Delay+0x28>
  {
  }
}
 8001fc0:	bf00      	nop
 8001fc2:	3710      	adds	r7, #16
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	20000004 	.word	0x20000004

08001fcc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d101      	bne.n	8001fe2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e031      	b.n	8002046 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d109      	bne.n	8001ffe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f7ff f9e0 	bl	80013b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002002:	f003 0310 	and.w	r3, r3, #16
 8002006:	2b00      	cmp	r3, #0
 8002008:	d116      	bne.n	8002038 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800200e:	4b10      	ldr	r3, [pc, #64]	; (8002050 <HAL_ADC_Init+0x84>)
 8002010:	4013      	ands	r3, r2
 8002012:	f043 0202 	orr.w	r2, r3, #2
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 f94e 	bl	80022bc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	f023 0303 	bic.w	r3, r3, #3
 800202e:	f043 0201 	orr.w	r2, r3, #1
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	641a      	str	r2, [r3, #64]	; 0x40
 8002036:	e001      	b.n	800203c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002044:	7bfb      	ldrb	r3, [r7, #15]
}
 8002046:	4618      	mov	r0, r3
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	ffffeefd 	.word	0xffffeefd

08002054 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800205e:	2300      	movs	r3, #0
 8002060:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002068:	2b01      	cmp	r3, #1
 800206a:	d101      	bne.n	8002070 <HAL_ADC_ConfigChannel+0x1c>
 800206c:	2302      	movs	r3, #2
 800206e:	e115      	b.n	800229c <HAL_ADC_ConfigChannel+0x248>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2b09      	cmp	r3, #9
 800207e:	d935      	bls.n	80020ec <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68d9      	ldr	r1, [r3, #12]
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	b29b      	uxth	r3, r3
 800208c:	461a      	mov	r2, r3
 800208e:	4613      	mov	r3, r2
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	4413      	add	r3, r2
 8002094:	3b1e      	subs	r3, #30
 8002096:	2207      	movs	r2, #7
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	43da      	mvns	r2, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	400a      	ands	r2, r1
 80020a4:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a7f      	ldr	r2, [pc, #508]	; (80022a8 <HAL_ADC_ConfigChannel+0x254>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d10a      	bne.n	80020c6 <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	68d9      	ldr	r1, [r3, #12]
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	061a      	lsls	r2, r3, #24
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	430a      	orrs	r2, r1
 80020c2:	60da      	str	r2, [r3, #12]
 80020c4:	e035      	b.n	8002132 <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68d9      	ldr	r1, [r3, #12]
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	689a      	ldr	r2, [r3, #8]
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	4618      	mov	r0, r3
 80020d8:	4603      	mov	r3, r0
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	4403      	add	r3, r0
 80020de:	3b1e      	subs	r3, #30
 80020e0:	409a      	lsls	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	430a      	orrs	r2, r1
 80020e8:	60da      	str	r2, [r3, #12]
 80020ea:	e022      	b.n	8002132 <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	6919      	ldr	r1, [r3, #16]
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	461a      	mov	r2, r3
 80020fa:	4613      	mov	r3, r2
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	4413      	add	r3, r2
 8002100:	2207      	movs	r2, #7
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	43da      	mvns	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	400a      	ands	r2, r1
 800210e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6919      	ldr	r1, [r3, #16]
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	689a      	ldr	r2, [r3, #8]
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	b29b      	uxth	r3, r3
 8002120:	4618      	mov	r0, r3
 8002122:	4603      	mov	r3, r0
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	4403      	add	r3, r0
 8002128:	409a      	lsls	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	430a      	orrs	r2, r1
 8002130:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	2b06      	cmp	r3, #6
 8002138:	d824      	bhi.n	8002184 <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685a      	ldr	r2, [r3, #4]
 8002144:	4613      	mov	r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	4413      	add	r3, r2
 800214a:	3b05      	subs	r3, #5
 800214c:	221f      	movs	r2, #31
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	43da      	mvns	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	400a      	ands	r2, r1
 800215a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	b29b      	uxth	r3, r3
 8002168:	4618      	mov	r0, r3
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685a      	ldr	r2, [r3, #4]
 800216e:	4613      	mov	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	4413      	add	r3, r2
 8002174:	3b05      	subs	r3, #5
 8002176:	fa00 f203 	lsl.w	r2, r0, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	430a      	orrs	r2, r1
 8002180:	635a      	str	r2, [r3, #52]	; 0x34
 8002182:	e04c      	b.n	800221e <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	2b0c      	cmp	r3, #12
 800218a:	d824      	bhi.n	80021d6 <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685a      	ldr	r2, [r3, #4]
 8002196:	4613      	mov	r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	4413      	add	r3, r2
 800219c:	3b23      	subs	r3, #35	; 0x23
 800219e:	221f      	movs	r2, #31
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	43da      	mvns	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	400a      	ands	r2, r1
 80021ac:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	4618      	mov	r0, r3
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685a      	ldr	r2, [r3, #4]
 80021c0:	4613      	mov	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4413      	add	r3, r2
 80021c6:	3b23      	subs	r3, #35	; 0x23
 80021c8:	fa00 f203 	lsl.w	r2, r0, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	430a      	orrs	r2, r1
 80021d2:	631a      	str	r2, [r3, #48]	; 0x30
 80021d4:	e023      	b.n	800221e <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685a      	ldr	r2, [r3, #4]
 80021e0:	4613      	mov	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	4413      	add	r3, r2
 80021e6:	3b41      	subs	r3, #65	; 0x41
 80021e8:	221f      	movs	r2, #31
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	43da      	mvns	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	400a      	ands	r2, r1
 80021f6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	b29b      	uxth	r3, r3
 8002204:	4618      	mov	r0, r3
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685a      	ldr	r2, [r3, #4]
 800220a:	4613      	mov	r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4413      	add	r3, r2
 8002210:	3b41      	subs	r3, #65	; 0x41
 8002212:	fa00 f203 	lsl.w	r2, r0, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	430a      	orrs	r2, r1
 800221c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a22      	ldr	r2, [pc, #136]	; (80022ac <HAL_ADC_ConfigChannel+0x258>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d109      	bne.n	800223c <HAL_ADC_ConfigChannel+0x1e8>
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2b12      	cmp	r3, #18
 800222e:	d105      	bne.n	800223c <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002230:	4b1f      	ldr	r3, [pc, #124]	; (80022b0 <HAL_ADC_ConfigChannel+0x25c>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	4a1e      	ldr	r2, [pc, #120]	; (80022b0 <HAL_ADC_ConfigChannel+0x25c>)
 8002236:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800223a:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a1a      	ldr	r2, [pc, #104]	; (80022ac <HAL_ADC_ConfigChannel+0x258>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d125      	bne.n	8002292 <HAL_ADC_ConfigChannel+0x23e>
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a17      	ldr	r2, [pc, #92]	; (80022a8 <HAL_ADC_ConfigChannel+0x254>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d003      	beq.n	8002258 <HAL_ADC_ConfigChannel+0x204>
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2b11      	cmp	r3, #17
 8002256:	d11c      	bne.n	8002292 <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002258:	4b15      	ldr	r3, [pc, #84]	; (80022b0 <HAL_ADC_ConfigChannel+0x25c>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	4a14      	ldr	r2, [pc, #80]	; (80022b0 <HAL_ADC_ConfigChannel+0x25c>)
 800225e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002262:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a0f      	ldr	r2, [pc, #60]	; (80022a8 <HAL_ADC_ConfigChannel+0x254>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d111      	bne.n	8002292 <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800226e:	4b11      	ldr	r3, [pc, #68]	; (80022b4 <HAL_ADC_ConfigChannel+0x260>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a11      	ldr	r2, [pc, #68]	; (80022b8 <HAL_ADC_ConfigChannel+0x264>)
 8002274:	fba2 2303 	umull	r2, r3, r2, r3
 8002278:	0c9a      	lsrs	r2, r3, #18
 800227a:	4613      	mov	r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	4413      	add	r3, r2
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002284:	e002      	b.n	800228c <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	3b01      	subs	r3, #1
 800228a:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1f9      	bne.n	8002286 <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	3714      	adds	r7, #20
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	10000012 	.word	0x10000012
 80022ac:	40012000 	.word	0x40012000
 80022b0:	40012300 	.word	0x40012300
 80022b4:	20000000 	.word	0x20000000
 80022b8:	431bde83 	.word	0x431bde83

080022bc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80022c4:	4b78      	ldr	r3, [pc, #480]	; (80024a8 <ADC_Init+0x1ec>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	4a77      	ldr	r2, [pc, #476]	; (80024a8 <ADC_Init+0x1ec>)
 80022ca:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80022ce:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80022d0:	4b75      	ldr	r3, [pc, #468]	; (80024a8 <ADC_Init+0x1ec>)
 80022d2:	685a      	ldr	r2, [r3, #4]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	4973      	ldr	r1, [pc, #460]	; (80024a8 <ADC_Init+0x1ec>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	685a      	ldr	r2, [r3, #4]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	6859      	ldr	r1, [r3, #4]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	021a      	lsls	r2, r3, #8
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	430a      	orrs	r2, r1
 8002300:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	685a      	ldr	r2, [r3, #4]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002310:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	6859      	ldr	r1, [r3, #4]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689a      	ldr	r2, [r3, #8]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	430a      	orrs	r2, r1
 8002322:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	689a      	ldr	r2, [r3, #8]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002332:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6899      	ldr	r1, [r3, #8]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	68da      	ldr	r2, [r3, #12]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	430a      	orrs	r2, r1
 8002344:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800234a:	4a58      	ldr	r2, [pc, #352]	; (80024ac <ADC_Init+0x1f0>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d022      	beq.n	8002396 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	689a      	ldr	r2, [r3, #8]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800235e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6899      	ldr	r1, [r3, #8]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	430a      	orrs	r2, r1
 8002370:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	689a      	ldr	r2, [r3, #8]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002380:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	6899      	ldr	r1, [r3, #8]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	430a      	orrs	r2, r1
 8002392:	609a      	str	r2, [r3, #8]
 8002394:	e00f      	b.n	80023b6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	689a      	ldr	r2, [r3, #8]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023b4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	689a      	ldr	r2, [r3, #8]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f022 0202 	bic.w	r2, r2, #2
 80023c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	6899      	ldr	r1, [r3, #8]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	005a      	lsls	r2, r3, #1
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	430a      	orrs	r2, r1
 80023d8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d01b      	beq.n	800241c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	685a      	ldr	r2, [r3, #4]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023f2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	685a      	ldr	r2, [r3, #4]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002402:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	6859      	ldr	r1, [r3, #4]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240e:	3b01      	subs	r3, #1
 8002410:	035a      	lsls	r2, r3, #13
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	430a      	orrs	r2, r1
 8002418:	605a      	str	r2, [r3, #4]
 800241a:	e007      	b.n	800242c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	685a      	ldr	r2, [r3, #4]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800242a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800243a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	69db      	ldr	r3, [r3, #28]
 8002446:	3b01      	subs	r3, #1
 8002448:	051a      	lsls	r2, r3, #20
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	430a      	orrs	r2, r1
 8002450:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	689a      	ldr	r2, [r3, #8]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002460:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	6899      	ldr	r1, [r3, #8]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800246e:	025a      	lsls	r2, r3, #9
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	430a      	orrs	r2, r1
 8002476:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	689a      	ldr	r2, [r3, #8]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002486:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6899      	ldr	r1, [r3, #8]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	029a      	lsls	r2, r3, #10
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	430a      	orrs	r2, r1
 800249a:	609a      	str	r2, [r3, #8]
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr
 80024a8:	40012300 	.word	0x40012300
 80024ac:	0f000001 	.word	0x0f000001

080024b0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d101      	bne.n	80024c2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e0ed      	b.n	800269e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d102      	bne.n	80024d4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f7fe ffc8 	bl	8001464 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f022 0202 	bic.w	r2, r2, #2
 80024e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024e4:	f7ff fd44 	bl	8001f70 <HAL_GetTick>
 80024e8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80024ea:	e012      	b.n	8002512 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80024ec:	f7ff fd40 	bl	8001f70 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b0a      	cmp	r3, #10
 80024f8:	d90b      	bls.n	8002512 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2205      	movs	r2, #5
 800250a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e0c5      	b.n	800269e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f003 0302 	and.w	r3, r3, #2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d1e5      	bne.n	80024ec <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f042 0201 	orr.w	r2, r2, #1
 800252e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002530:	f7ff fd1e 	bl	8001f70 <HAL_GetTick>
 8002534:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002536:	e012      	b.n	800255e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002538:	f7ff fd1a 	bl	8001f70 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b0a      	cmp	r3, #10
 8002544:	d90b      	bls.n	800255e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2205      	movs	r2, #5
 8002556:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e09f      	b.n	800269e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f003 0301 	and.w	r3, r3, #1
 8002568:	2b00      	cmp	r3, #0
 800256a:	d0e5      	beq.n	8002538 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	7e1b      	ldrb	r3, [r3, #24]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d108      	bne.n	8002586 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	e007      	b.n	8002596 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002594:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	7e5b      	ldrb	r3, [r3, #25]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d108      	bne.n	80025b0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025ac:	601a      	str	r2, [r3, #0]
 80025ae:	e007      	b.n	80025c0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025be:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	7e9b      	ldrb	r3, [r3, #26]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d108      	bne.n	80025da <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f042 0220 	orr.w	r2, r2, #32
 80025d6:	601a      	str	r2, [r3, #0]
 80025d8:	e007      	b.n	80025ea <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f022 0220 	bic.w	r2, r2, #32
 80025e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	7edb      	ldrb	r3, [r3, #27]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d108      	bne.n	8002604 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f022 0210 	bic.w	r2, r2, #16
 8002600:	601a      	str	r2, [r3, #0]
 8002602:	e007      	b.n	8002614 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f042 0210 	orr.w	r2, r2, #16
 8002612:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	7f1b      	ldrb	r3, [r3, #28]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d108      	bne.n	800262e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f042 0208 	orr.w	r2, r2, #8
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	e007      	b.n	800263e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 0208 	bic.w	r2, r2, #8
 800263c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	7f5b      	ldrb	r3, [r3, #29]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d108      	bne.n	8002658 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f042 0204 	orr.w	r2, r2, #4
 8002654:	601a      	str	r2, [r3, #0]
 8002656:	e007      	b.n	8002668 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f022 0204 	bic.w	r2, r2, #4
 8002666:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	689a      	ldr	r2, [r3, #8]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	431a      	orrs	r2, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	431a      	orrs	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	695b      	ldr	r3, [r3, #20]
 800267c:	ea42 0103 	orr.w	r1, r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	1e5a      	subs	r2, r3, #1
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	430a      	orrs	r2, r1
 800268c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
	...

080026a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f003 0307 	and.w	r3, r3, #7
 80026b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026b8:	4b0b      	ldr	r3, [pc, #44]	; (80026e8 <__NVIC_SetPriorityGrouping+0x40>)
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026be:	68ba      	ldr	r2, [r7, #8]
 80026c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026c4:	4013      	ands	r3, r2
 80026c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80026d0:	4b06      	ldr	r3, [pc, #24]	; (80026ec <__NVIC_SetPriorityGrouping+0x44>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026d6:	4a04      	ldr	r2, [pc, #16]	; (80026e8 <__NVIC_SetPriorityGrouping+0x40>)
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	60d3      	str	r3, [r2, #12]
}
 80026dc:	bf00      	nop
 80026de:	3714      	adds	r7, #20
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr
 80026e8:	e000ed00 	.word	0xe000ed00
 80026ec:	05fa0000 	.word	0x05fa0000

080026f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026f4:	4b04      	ldr	r3, [pc, #16]	; (8002708 <__NVIC_GetPriorityGrouping+0x18>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	0a1b      	lsrs	r3, r3, #8
 80026fa:	f003 0307 	and.w	r3, r3, #7
}
 80026fe:	4618      	mov	r0, r3
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr
 8002708:	e000ed00 	.word	0xe000ed00

0800270c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	4603      	mov	r3, r0
 8002714:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271a:	2b00      	cmp	r3, #0
 800271c:	db0b      	blt.n	8002736 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800271e:	79fb      	ldrb	r3, [r7, #7]
 8002720:	f003 021f 	and.w	r2, r3, #31
 8002724:	4907      	ldr	r1, [pc, #28]	; (8002744 <__NVIC_EnableIRQ+0x38>)
 8002726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272a:	095b      	lsrs	r3, r3, #5
 800272c:	2001      	movs	r0, #1
 800272e:	fa00 f202 	lsl.w	r2, r0, r2
 8002732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002736:	bf00      	nop
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	e000e100 	.word	0xe000e100

08002748 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	4603      	mov	r3, r0
 8002750:	6039      	str	r1, [r7, #0]
 8002752:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002758:	2b00      	cmp	r3, #0
 800275a:	db0a      	blt.n	8002772 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	b2da      	uxtb	r2, r3
 8002760:	490c      	ldr	r1, [pc, #48]	; (8002794 <__NVIC_SetPriority+0x4c>)
 8002762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002766:	0112      	lsls	r2, r2, #4
 8002768:	b2d2      	uxtb	r2, r2
 800276a:	440b      	add	r3, r1
 800276c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002770:	e00a      	b.n	8002788 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	b2da      	uxtb	r2, r3
 8002776:	4908      	ldr	r1, [pc, #32]	; (8002798 <__NVIC_SetPriority+0x50>)
 8002778:	79fb      	ldrb	r3, [r7, #7]
 800277a:	f003 030f 	and.w	r3, r3, #15
 800277e:	3b04      	subs	r3, #4
 8002780:	0112      	lsls	r2, r2, #4
 8002782:	b2d2      	uxtb	r2, r2
 8002784:	440b      	add	r3, r1
 8002786:	761a      	strb	r2, [r3, #24]
}
 8002788:	bf00      	nop
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr
 8002794:	e000e100 	.word	0xe000e100
 8002798:	e000ed00 	.word	0xe000ed00

0800279c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800279c:	b480      	push	{r7}
 800279e:	b089      	sub	sp, #36	; 0x24
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f003 0307 	and.w	r3, r3, #7
 80027ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	f1c3 0307 	rsb	r3, r3, #7
 80027b6:	2b04      	cmp	r3, #4
 80027b8:	bf28      	it	cs
 80027ba:	2304      	movcs	r3, #4
 80027bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	3304      	adds	r3, #4
 80027c2:	2b06      	cmp	r3, #6
 80027c4:	d902      	bls.n	80027cc <NVIC_EncodePriority+0x30>
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	3b03      	subs	r3, #3
 80027ca:	e000      	b.n	80027ce <NVIC_EncodePriority+0x32>
 80027cc:	2300      	movs	r3, #0
 80027ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027d0:	f04f 32ff 	mov.w	r2, #4294967295
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	fa02 f303 	lsl.w	r3, r2, r3
 80027da:	43da      	mvns	r2, r3
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	401a      	ands	r2, r3
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027e4:	f04f 31ff 	mov.w	r1, #4294967295
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	fa01 f303 	lsl.w	r3, r1, r3
 80027ee:	43d9      	mvns	r1, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027f4:	4313      	orrs	r3, r2
         );
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3724      	adds	r7, #36	; 0x24
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr

08002802 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	b082      	sub	sp, #8
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f7ff ff4c 	bl	80026a8 <__NVIC_SetPriorityGrouping>
}
 8002810:	bf00      	nop
 8002812:	3708      	adds	r7, #8
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002818:	b580      	push	{r7, lr}
 800281a:	b086      	sub	sp, #24
 800281c:	af00      	add	r7, sp, #0
 800281e:	4603      	mov	r3, r0
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
 8002824:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002826:	2300      	movs	r3, #0
 8002828:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800282a:	f7ff ff61 	bl	80026f0 <__NVIC_GetPriorityGrouping>
 800282e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	68b9      	ldr	r1, [r7, #8]
 8002834:	6978      	ldr	r0, [r7, #20]
 8002836:	f7ff ffb1 	bl	800279c <NVIC_EncodePriority>
 800283a:	4602      	mov	r2, r0
 800283c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002840:	4611      	mov	r1, r2
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff ff80 	bl	8002748 <__NVIC_SetPriority>
}
 8002848:	bf00      	nop
 800284a:	3718      	adds	r7, #24
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	4603      	mov	r3, r0
 8002858:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800285a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285e:	4618      	mov	r0, r3
 8002860:	f7ff ff54 	bl	800270c <__NVIC_EnableIRQ>
}
 8002864:	bf00      	nop
 8002866:	3708      	adds	r7, #8
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800286c:	b480      	push	{r7}
 800286e:	b089      	sub	sp, #36	; 0x24
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002876:	2300      	movs	r3, #0
 8002878:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800287a:	2300      	movs	r3, #0
 800287c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800287e:	2300      	movs	r3, #0
 8002880:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002882:	2300      	movs	r3, #0
 8002884:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002886:	2300      	movs	r3, #0
 8002888:	61fb      	str	r3, [r7, #28]
 800288a:	e175      	b.n	8002b78 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800288c:	2201      	movs	r2, #1
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	697a      	ldr	r2, [r7, #20]
 800289c:	4013      	ands	r3, r2
 800289e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	f040 8164 	bne.w	8002b72 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d003      	beq.n	80028ba <HAL_GPIO_Init+0x4e>
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	2b12      	cmp	r3, #18
 80028b8:	d123      	bne.n	8002902 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	08da      	lsrs	r2, r3, #3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	3208      	adds	r2, #8
 80028c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	f003 0307 	and.w	r3, r3, #7
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	220f      	movs	r2, #15
 80028d2:	fa02 f303 	lsl.w	r3, r2, r3
 80028d6:	43db      	mvns	r3, r3
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	4013      	ands	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	691a      	ldr	r2, [r3, #16]
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	f003 0307 	and.w	r3, r3, #7
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	fa02 f303 	lsl.w	r3, r2, r3
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	08da      	lsrs	r2, r3, #3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	3208      	adds	r2, #8
 80028fc:	69b9      	ldr	r1, [r7, #24]
 80028fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	2203      	movs	r2, #3
 800290e:	fa02 f303 	lsl.w	r3, r2, r3
 8002912:	43db      	mvns	r3, r3
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	4013      	ands	r3, r2
 8002918:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f003 0203 	and.w	r2, r3, #3
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	fa02 f303 	lsl.w	r3, r2, r3
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	4313      	orrs	r3, r2
 800292e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d00b      	beq.n	8002956 <HAL_GPIO_Init+0xea>
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	2b02      	cmp	r3, #2
 8002944:	d007      	beq.n	8002956 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800294a:	2b11      	cmp	r3, #17
 800294c:	d003      	beq.n	8002956 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	2b12      	cmp	r3, #18
 8002954:	d130      	bne.n	80029b8 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	2203      	movs	r2, #3
 8002962:	fa02 f303 	lsl.w	r3, r2, r3
 8002966:	43db      	mvns	r3, r3
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	4013      	ands	r3, r2
 800296c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	68da      	ldr	r2, [r3, #12]
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	fa02 f303 	lsl.w	r3, r2, r3
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	4313      	orrs	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800298c:	2201      	movs	r2, #1
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	43db      	mvns	r3, r3
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	4013      	ands	r3, r2
 800299a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	091b      	lsrs	r3, r3, #4
 80029a2:	f003 0201 	and.w	r2, r3, #1
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	2203      	movs	r2, #3
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	43db      	mvns	r3, r3
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	4013      	ands	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	689a      	ldr	r2, [r3, #8]
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	4313      	orrs	r3, r2
 80029e0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f000 80be 	beq.w	8002b72 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029f6:	4b65      	ldr	r3, [pc, #404]	; (8002b8c <HAL_GPIO_Init+0x320>)
 80029f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fa:	4a64      	ldr	r2, [pc, #400]	; (8002b8c <HAL_GPIO_Init+0x320>)
 80029fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a00:	6453      	str	r3, [r2, #68]	; 0x44
 8002a02:	4b62      	ldr	r3, [pc, #392]	; (8002b8c <HAL_GPIO_Init+0x320>)
 8002a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a0a:	60fb      	str	r3, [r7, #12]
 8002a0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002a0e:	4a60      	ldr	r2, [pc, #384]	; (8002b90 <HAL_GPIO_Init+0x324>)
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	089b      	lsrs	r3, r3, #2
 8002a14:	3302      	adds	r3, #2
 8002a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	f003 0303 	and.w	r3, r3, #3
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	220f      	movs	r2, #15
 8002a26:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2a:	43db      	mvns	r3, r3
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a57      	ldr	r2, [pc, #348]	; (8002b94 <HAL_GPIO_Init+0x328>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d037      	beq.n	8002aaa <HAL_GPIO_Init+0x23e>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a56      	ldr	r2, [pc, #344]	; (8002b98 <HAL_GPIO_Init+0x32c>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d031      	beq.n	8002aa6 <HAL_GPIO_Init+0x23a>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a55      	ldr	r2, [pc, #340]	; (8002b9c <HAL_GPIO_Init+0x330>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d02b      	beq.n	8002aa2 <HAL_GPIO_Init+0x236>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a54      	ldr	r2, [pc, #336]	; (8002ba0 <HAL_GPIO_Init+0x334>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d025      	beq.n	8002a9e <HAL_GPIO_Init+0x232>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a53      	ldr	r2, [pc, #332]	; (8002ba4 <HAL_GPIO_Init+0x338>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d01f      	beq.n	8002a9a <HAL_GPIO_Init+0x22e>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a52      	ldr	r2, [pc, #328]	; (8002ba8 <HAL_GPIO_Init+0x33c>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d019      	beq.n	8002a96 <HAL_GPIO_Init+0x22a>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a51      	ldr	r2, [pc, #324]	; (8002bac <HAL_GPIO_Init+0x340>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d013      	beq.n	8002a92 <HAL_GPIO_Init+0x226>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a50      	ldr	r2, [pc, #320]	; (8002bb0 <HAL_GPIO_Init+0x344>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d00d      	beq.n	8002a8e <HAL_GPIO_Init+0x222>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a4f      	ldr	r2, [pc, #316]	; (8002bb4 <HAL_GPIO_Init+0x348>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d007      	beq.n	8002a8a <HAL_GPIO_Init+0x21e>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a4e      	ldr	r2, [pc, #312]	; (8002bb8 <HAL_GPIO_Init+0x34c>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d101      	bne.n	8002a86 <HAL_GPIO_Init+0x21a>
 8002a82:	2309      	movs	r3, #9
 8002a84:	e012      	b.n	8002aac <HAL_GPIO_Init+0x240>
 8002a86:	230a      	movs	r3, #10
 8002a88:	e010      	b.n	8002aac <HAL_GPIO_Init+0x240>
 8002a8a:	2308      	movs	r3, #8
 8002a8c:	e00e      	b.n	8002aac <HAL_GPIO_Init+0x240>
 8002a8e:	2307      	movs	r3, #7
 8002a90:	e00c      	b.n	8002aac <HAL_GPIO_Init+0x240>
 8002a92:	2306      	movs	r3, #6
 8002a94:	e00a      	b.n	8002aac <HAL_GPIO_Init+0x240>
 8002a96:	2305      	movs	r3, #5
 8002a98:	e008      	b.n	8002aac <HAL_GPIO_Init+0x240>
 8002a9a:	2304      	movs	r3, #4
 8002a9c:	e006      	b.n	8002aac <HAL_GPIO_Init+0x240>
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e004      	b.n	8002aac <HAL_GPIO_Init+0x240>
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	e002      	b.n	8002aac <HAL_GPIO_Init+0x240>
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e000      	b.n	8002aac <HAL_GPIO_Init+0x240>
 8002aaa:	2300      	movs	r3, #0
 8002aac:	69fa      	ldr	r2, [r7, #28]
 8002aae:	f002 0203 	and.w	r2, r2, #3
 8002ab2:	0092      	lsls	r2, r2, #2
 8002ab4:	4093      	lsls	r3, r2
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002abc:	4934      	ldr	r1, [pc, #208]	; (8002b90 <HAL_GPIO_Init+0x324>)
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	089b      	lsrs	r3, r3, #2
 8002ac2:	3302      	adds	r3, #2
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002aca:	4b3c      	ldr	r3, [pc, #240]	; (8002bbc <HAL_GPIO_Init+0x350>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	43db      	mvns	r3, r3
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002aee:	4a33      	ldr	r2, [pc, #204]	; (8002bbc <HAL_GPIO_Init+0x350>)
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002af4:	4b31      	ldr	r3, [pc, #196]	; (8002bbc <HAL_GPIO_Init+0x350>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	43db      	mvns	r3, r3
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	4013      	ands	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d003      	beq.n	8002b18 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b18:	4a28      	ldr	r2, [pc, #160]	; (8002bbc <HAL_GPIO_Init+0x350>)
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b1e:	4b27      	ldr	r3, [pc, #156]	; (8002bbc <HAL_GPIO_Init+0x350>)
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	43db      	mvns	r3, r3
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d003      	beq.n	8002b42 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b42:	4a1e      	ldr	r2, [pc, #120]	; (8002bbc <HAL_GPIO_Init+0x350>)
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b48:	4b1c      	ldr	r3, [pc, #112]	; (8002bbc <HAL_GPIO_Init+0x350>)
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	43db      	mvns	r3, r3
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	4013      	ands	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d003      	beq.n	8002b6c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b6c:	4a13      	ldr	r2, [pc, #76]	; (8002bbc <HAL_GPIO_Init+0x350>)
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	3301      	adds	r3, #1
 8002b76:	61fb      	str	r3, [r7, #28]
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	2b0f      	cmp	r3, #15
 8002b7c:	f67f ae86 	bls.w	800288c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002b80:	bf00      	nop
 8002b82:	3724      	adds	r7, #36	; 0x24
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr
 8002b8c:	40023800 	.word	0x40023800
 8002b90:	40013800 	.word	0x40013800
 8002b94:	40020000 	.word	0x40020000
 8002b98:	40020400 	.word	0x40020400
 8002b9c:	40020800 	.word	0x40020800
 8002ba0:	40020c00 	.word	0x40020c00
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	40021400 	.word	0x40021400
 8002bac:	40021800 	.word	0x40021800
 8002bb0:	40021c00 	.word	0x40021c00
 8002bb4:	40022000 	.word	0x40022000
 8002bb8:	40022400 	.word	0x40022400
 8002bbc:	40013c00 	.word	0x40013c00

08002bc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	460b      	mov	r3, r1
 8002bca:	807b      	strh	r3, [r7, #2]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bd0:	787b      	ldrb	r3, [r7, #1]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bd6:	887a      	ldrh	r2, [r7, #2]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002bdc:	e003      	b.n	8002be6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002bde:	887b      	ldrh	r3, [r7, #2]
 8002be0:	041a      	lsls	r2, r3, #16
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	619a      	str	r2, [r3, #24]
}
 8002be6:	bf00      	nop
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
	...

08002bf4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e07f      	b.n	8002d06 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d106      	bne.n	8002c20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f7fe fc66 	bl	80014ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2224      	movs	r2, #36	; 0x24
 8002c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 0201 	bic.w	r2, r2, #1
 8002c36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685a      	ldr	r2, [r3, #4]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c44:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c54:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d107      	bne.n	8002c6e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	689a      	ldr	r2, [r3, #8]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c6a:	609a      	str	r2, [r3, #8]
 8002c6c:	e006      	b.n	8002c7c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	689a      	ldr	r2, [r3, #8]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002c7a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d104      	bne.n	8002c8e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c8c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	6859      	ldr	r1, [r3, #4]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	4b1d      	ldr	r3, [pc, #116]	; (8002d10 <HAL_I2C_Init+0x11c>)
 8002c9a:	430b      	orrs	r3, r1
 8002c9c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68da      	ldr	r2, [r3, #12]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002cac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	691a      	ldr	r2, [r3, #16]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	695b      	ldr	r3, [r3, #20]
 8002cb6:	ea42 0103 	orr.w	r1, r2, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	021a      	lsls	r2, r3, #8
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	69d9      	ldr	r1, [r3, #28]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a1a      	ldr	r2, [r3, #32]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f042 0201 	orr.w	r2, r2, #1
 8002ce6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2220      	movs	r2, #32
 8002cf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	02008000 	.word	0x02008000

08002d14 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	2b20      	cmp	r3, #32
 8002d28:	d138      	bne.n	8002d9c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d101      	bne.n	8002d38 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002d34:	2302      	movs	r3, #2
 8002d36:	e032      	b.n	8002d9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2224      	movs	r2, #36	; 0x24
 8002d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f022 0201 	bic.w	r2, r2, #1
 8002d56:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d66:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6819      	ldr	r1, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	683a      	ldr	r2, [r7, #0]
 8002d74:	430a      	orrs	r2, r1
 8002d76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f042 0201 	orr.w	r2, r2, #1
 8002d86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2220      	movs	r2, #32
 8002d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	e000      	b.n	8002d9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d9c:	2302      	movs	r3, #2
  }
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b085      	sub	sp, #20
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
 8002db2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	2b20      	cmp	r3, #32
 8002dbe:	d139      	bne.n	8002e34 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d101      	bne.n	8002dce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002dca:	2302      	movs	r3, #2
 8002dcc:	e033      	b.n	8002e36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2224      	movs	r2, #36	; 0x24
 8002dda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f022 0201 	bic.w	r2, r2, #1
 8002dec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002dfc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	021b      	lsls	r3, r3, #8
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68fa      	ldr	r2, [r7, #12]
 8002e0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f042 0201 	orr.w	r2, r2, #1
 8002e1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2220      	movs	r2, #32
 8002e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e30:	2300      	movs	r3, #0
 8002e32:	e000      	b.n	8002e36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002e34:	2302      	movs	r3, #2
  }
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3714      	adds	r7, #20
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr

08002e42 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002e42:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e44:	b08f      	sub	sp, #60	; 0x3c
 8002e46:	af0a      	add	r7, sp, #40	; 0x28
 8002e48:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d101      	bne.n	8002e54 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e10a      	b.n	800306a <HAL_PCD_Init+0x228>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d106      	bne.n	8002e6e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f7fe fe57 	bl	8001b1c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2203      	movs	r2, #3
 8002e72:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f003 fb20 	bl	80064c0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	603b      	str	r3, [r7, #0]
 8002e86:	687e      	ldr	r6, [r7, #4]
 8002e88:	466d      	mov	r5, sp
 8002e8a:	f106 0410 	add.w	r4, r6, #16
 8002e8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e96:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e9a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e9e:	1d33      	adds	r3, r6, #4
 8002ea0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ea2:	6838      	ldr	r0, [r7, #0]
 8002ea4:	f003 fab4 	bl	8006410 <USB_CoreInit>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d005      	beq.n	8002eba <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2202      	movs	r2, #2
 8002eb2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e0d7      	b.n	800306a <HAL_PCD_Init+0x228>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2100      	movs	r1, #0
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f003 fb0e 	bl	80064e2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	73fb      	strb	r3, [r7, #15]
 8002eca:	e04a      	b.n	8002f62 <HAL_PCD_Init+0x120>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ecc:	7bfa      	ldrb	r2, [r7, #15]
 8002ece:	6879      	ldr	r1, [r7, #4]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	1a9b      	subs	r3, r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	440b      	add	r3, r1
 8002eda:	333d      	adds	r3, #61	; 0x3d
 8002edc:	2201      	movs	r2, #1
 8002ede:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ee0:	7bfa      	ldrb	r2, [r7, #15]
 8002ee2:	6879      	ldr	r1, [r7, #4]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	1a9b      	subs	r3, r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	440b      	add	r3, r1
 8002eee:	333c      	adds	r3, #60	; 0x3c
 8002ef0:	7bfa      	ldrb	r2, [r7, #15]
 8002ef2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ef4:	7bfa      	ldrb	r2, [r7, #15]
 8002ef6:	7bfb      	ldrb	r3, [r7, #15]
 8002ef8:	b298      	uxth	r0, r3
 8002efa:	6879      	ldr	r1, [r7, #4]
 8002efc:	4613      	mov	r3, r2
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	1a9b      	subs	r3, r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	440b      	add	r3, r1
 8002f06:	3342      	adds	r3, #66	; 0x42
 8002f08:	4602      	mov	r2, r0
 8002f0a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002f0c:	7bfa      	ldrb	r2, [r7, #15]
 8002f0e:	6879      	ldr	r1, [r7, #4]
 8002f10:	4613      	mov	r3, r2
 8002f12:	00db      	lsls	r3, r3, #3
 8002f14:	1a9b      	subs	r3, r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	440b      	add	r3, r1
 8002f1a:	333f      	adds	r3, #63	; 0x3f
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002f20:	7bfa      	ldrb	r2, [r7, #15]
 8002f22:	6879      	ldr	r1, [r7, #4]
 8002f24:	4613      	mov	r3, r2
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	1a9b      	subs	r3, r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	440b      	add	r3, r1
 8002f2e:	3344      	adds	r3, #68	; 0x44
 8002f30:	2200      	movs	r2, #0
 8002f32:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002f34:	7bfa      	ldrb	r2, [r7, #15]
 8002f36:	6879      	ldr	r1, [r7, #4]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	1a9b      	subs	r3, r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	440b      	add	r3, r1
 8002f42:	3348      	adds	r3, #72	; 0x48
 8002f44:	2200      	movs	r2, #0
 8002f46:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002f48:	7bfa      	ldrb	r2, [r7, #15]
 8002f4a:	6879      	ldr	r1, [r7, #4]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	1a9b      	subs	r3, r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	440b      	add	r3, r1
 8002f56:	3350      	adds	r3, #80	; 0x50
 8002f58:	2200      	movs	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f5c:	7bfb      	ldrb	r3, [r7, #15]
 8002f5e:	3301      	adds	r3, #1
 8002f60:	73fb      	strb	r3, [r7, #15]
 8002f62:	7bfa      	ldrb	r2, [r7, #15]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d3af      	bcc.n	8002ecc <HAL_PCD_Init+0x8a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	73fb      	strb	r3, [r7, #15]
 8002f70:	e044      	b.n	8002ffc <HAL_PCD_Init+0x1ba>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f72:	7bfa      	ldrb	r2, [r7, #15]
 8002f74:	6879      	ldr	r1, [r7, #4]
 8002f76:	4613      	mov	r3, r2
 8002f78:	00db      	lsls	r3, r3, #3
 8002f7a:	1a9b      	subs	r3, r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	440b      	add	r3, r1
 8002f80:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002f84:	2200      	movs	r2, #0
 8002f86:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f88:	7bfa      	ldrb	r2, [r7, #15]
 8002f8a:	6879      	ldr	r1, [r7, #4]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	00db      	lsls	r3, r3, #3
 8002f90:	1a9b      	subs	r3, r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	440b      	add	r3, r1
 8002f96:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002f9a:	7bfa      	ldrb	r2, [r7, #15]
 8002f9c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f9e:	7bfa      	ldrb	r2, [r7, #15]
 8002fa0:	6879      	ldr	r1, [r7, #4]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	1a9b      	subs	r3, r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	440b      	add	r3, r1
 8002fac:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002fb4:	7bfa      	ldrb	r2, [r7, #15]
 8002fb6:	6879      	ldr	r1, [r7, #4]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	1a9b      	subs	r3, r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	440b      	add	r3, r1
 8002fc2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002fca:	7bfa      	ldrb	r2, [r7, #15]
 8002fcc:	6879      	ldr	r1, [r7, #4]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	00db      	lsls	r3, r3, #3
 8002fd2:	1a9b      	subs	r3, r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	440b      	add	r3, r1
 8002fd8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002fdc:	2200      	movs	r2, #0
 8002fde:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002fe0:	7bfa      	ldrb	r2, [r7, #15]
 8002fe2:	6879      	ldr	r1, [r7, #4]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	1a9b      	subs	r3, r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	440b      	add	r3, r1
 8002fee:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ff6:	7bfb      	ldrb	r3, [r7, #15]
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	73fb      	strb	r3, [r7, #15]
 8002ffc:	7bfa      	ldrb	r2, [r7, #15]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	429a      	cmp	r2, r3
 8003004:	d3b5      	bcc.n	8002f72 <HAL_PCD_Init+0x130>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	603b      	str	r3, [r7, #0]
 800300c:	687e      	ldr	r6, [r7, #4]
 800300e:	466d      	mov	r5, sp
 8003010:	f106 0410 	add.w	r4, r6, #16
 8003014:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003016:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003018:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800301a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800301c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003020:	e885 0003 	stmia.w	r5, {r0, r1}
 8003024:	1d33      	adds	r3, r6, #4
 8003026:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003028:	6838      	ldr	r0, [r7, #0]
 800302a:	f003 fa85 	bl	8006538 <USB_DevInit>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d005      	beq.n	8003040 <HAL_PCD_Init+0x1fe>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2202      	movs	r2, #2
 8003038:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e014      	b.n	800306a <HAL_PCD_Init+0x228>
  }

  hpcd->USB_Address = 0U;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003054:	2b01      	cmp	r3, #1
 8003056:	d102      	bne.n	800305e <HAL_PCD_Init+0x21c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 f80b 	bl	8003074 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4618      	mov	r0, r3
 8003064:	f003 fc45 	bl	80068f2 <USB_DevDisconnect>

  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3714      	adds	r7, #20
 800306e:	46bd      	mov	sp, r7
 8003070:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003074 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003074:	b480      	push	{r7}
 8003076:	b085      	sub	sp, #20
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2201      	movs	r2, #1
 8003086:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80030a2:	4b05      	ldr	r3, [pc, #20]	; (80030b8 <HAL_PCDEx_ActivateLPM+0x44>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3714      	adds	r7, #20
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr
 80030b8:	10000003 	.word	0x10000003

080030bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 80030c4:	2300      	movs	r3, #0
 80030c6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e25c      	b.n	800358c <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	2b00      	cmp	r3, #0
 80030dc:	f000 8087 	beq.w	80031ee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030e0:	4b96      	ldr	r3, [pc, #600]	; (800333c <HAL_RCC_OscConfig+0x280>)
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f003 030c 	and.w	r3, r3, #12
 80030e8:	2b04      	cmp	r3, #4
 80030ea:	d00c      	beq.n	8003106 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030ec:	4b93      	ldr	r3, [pc, #588]	; (800333c <HAL_RCC_OscConfig+0x280>)
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f003 030c 	and.w	r3, r3, #12
 80030f4:	2b08      	cmp	r3, #8
 80030f6:	d112      	bne.n	800311e <HAL_RCC_OscConfig+0x62>
 80030f8:	4b90      	ldr	r3, [pc, #576]	; (800333c <HAL_RCC_OscConfig+0x280>)
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003100:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003104:	d10b      	bne.n	800311e <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003106:	4b8d      	ldr	r3, [pc, #564]	; (800333c <HAL_RCC_OscConfig+0x280>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d06c      	beq.n	80031ec <HAL_RCC_OscConfig+0x130>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d168      	bne.n	80031ec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e236      	b.n	800358c <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003126:	d106      	bne.n	8003136 <HAL_RCC_OscConfig+0x7a>
 8003128:	4b84      	ldr	r3, [pc, #528]	; (800333c <HAL_RCC_OscConfig+0x280>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a83      	ldr	r2, [pc, #524]	; (800333c <HAL_RCC_OscConfig+0x280>)
 800312e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003132:	6013      	str	r3, [r2, #0]
 8003134:	e02e      	b.n	8003194 <HAL_RCC_OscConfig+0xd8>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d10c      	bne.n	8003158 <HAL_RCC_OscConfig+0x9c>
 800313e:	4b7f      	ldr	r3, [pc, #508]	; (800333c <HAL_RCC_OscConfig+0x280>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a7e      	ldr	r2, [pc, #504]	; (800333c <HAL_RCC_OscConfig+0x280>)
 8003144:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003148:	6013      	str	r3, [r2, #0]
 800314a:	4b7c      	ldr	r3, [pc, #496]	; (800333c <HAL_RCC_OscConfig+0x280>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a7b      	ldr	r2, [pc, #492]	; (800333c <HAL_RCC_OscConfig+0x280>)
 8003150:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003154:	6013      	str	r3, [r2, #0]
 8003156:	e01d      	b.n	8003194 <HAL_RCC_OscConfig+0xd8>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003160:	d10c      	bne.n	800317c <HAL_RCC_OscConfig+0xc0>
 8003162:	4b76      	ldr	r3, [pc, #472]	; (800333c <HAL_RCC_OscConfig+0x280>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a75      	ldr	r2, [pc, #468]	; (800333c <HAL_RCC_OscConfig+0x280>)
 8003168:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800316c:	6013      	str	r3, [r2, #0]
 800316e:	4b73      	ldr	r3, [pc, #460]	; (800333c <HAL_RCC_OscConfig+0x280>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a72      	ldr	r2, [pc, #456]	; (800333c <HAL_RCC_OscConfig+0x280>)
 8003174:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003178:	6013      	str	r3, [r2, #0]
 800317a:	e00b      	b.n	8003194 <HAL_RCC_OscConfig+0xd8>
 800317c:	4b6f      	ldr	r3, [pc, #444]	; (800333c <HAL_RCC_OscConfig+0x280>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a6e      	ldr	r2, [pc, #440]	; (800333c <HAL_RCC_OscConfig+0x280>)
 8003182:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003186:	6013      	str	r3, [r2, #0]
 8003188:	4b6c      	ldr	r3, [pc, #432]	; (800333c <HAL_RCC_OscConfig+0x280>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a6b      	ldr	r2, [pc, #428]	; (800333c <HAL_RCC_OscConfig+0x280>)
 800318e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003192:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d013      	beq.n	80031c4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800319c:	f7fe fee8 	bl	8001f70 <HAL_GetTick>
 80031a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031a2:	e008      	b.n	80031b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031a4:	f7fe fee4 	bl	8001f70 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b64      	cmp	r3, #100	; 0x64
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e1ea      	b.n	800358c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031b6:	4b61      	ldr	r3, [pc, #388]	; (800333c <HAL_RCC_OscConfig+0x280>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d0f0      	beq.n	80031a4 <HAL_RCC_OscConfig+0xe8>
 80031c2:	e014      	b.n	80031ee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c4:	f7fe fed4 	bl	8001f70 <HAL_GetTick>
 80031c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ca:	e008      	b.n	80031de <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031cc:	f7fe fed0 	bl	8001f70 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b64      	cmp	r3, #100	; 0x64
 80031d8:	d901      	bls.n	80031de <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e1d6      	b.n	800358c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031de:	4b57      	ldr	r3, [pc, #348]	; (800333c <HAL_RCC_OscConfig+0x280>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1f0      	bne.n	80031cc <HAL_RCC_OscConfig+0x110>
 80031ea:	e000      	b.n	80031ee <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d069      	beq.n	80032ce <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031fa:	4b50      	ldr	r3, [pc, #320]	; (800333c <HAL_RCC_OscConfig+0x280>)
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f003 030c 	and.w	r3, r3, #12
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00b      	beq.n	800321e <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003206:	4b4d      	ldr	r3, [pc, #308]	; (800333c <HAL_RCC_OscConfig+0x280>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f003 030c 	and.w	r3, r3, #12
 800320e:	2b08      	cmp	r3, #8
 8003210:	d11c      	bne.n	800324c <HAL_RCC_OscConfig+0x190>
 8003212:	4b4a      	ldr	r3, [pc, #296]	; (800333c <HAL_RCC_OscConfig+0x280>)
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d116      	bne.n	800324c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800321e:	4b47      	ldr	r3, [pc, #284]	; (800333c <HAL_RCC_OscConfig+0x280>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d005      	beq.n	8003236 <HAL_RCC_OscConfig+0x17a>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d001      	beq.n	8003236 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e1aa      	b.n	800358c <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003236:	4b41      	ldr	r3, [pc, #260]	; (800333c <HAL_RCC_OscConfig+0x280>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	493d      	ldr	r1, [pc, #244]	; (800333c <HAL_RCC_OscConfig+0x280>)
 8003246:	4313      	orrs	r3, r2
 8003248:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800324a:	e040      	b.n	80032ce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d023      	beq.n	800329c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003254:	4b39      	ldr	r3, [pc, #228]	; (800333c <HAL_RCC_OscConfig+0x280>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a38      	ldr	r2, [pc, #224]	; (800333c <HAL_RCC_OscConfig+0x280>)
 800325a:	f043 0301 	orr.w	r3, r3, #1
 800325e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003260:	f7fe fe86 	bl	8001f70 <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003268:	f7fe fe82 	bl	8001f70 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e188      	b.n	800358c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800327a:	4b30      	ldr	r3, [pc, #192]	; (800333c <HAL_RCC_OscConfig+0x280>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d0f0      	beq.n	8003268 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003286:	4b2d      	ldr	r3, [pc, #180]	; (800333c <HAL_RCC_OscConfig+0x280>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	4929      	ldr	r1, [pc, #164]	; (800333c <HAL_RCC_OscConfig+0x280>)
 8003296:	4313      	orrs	r3, r2
 8003298:	600b      	str	r3, [r1, #0]
 800329a:	e018      	b.n	80032ce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800329c:	4b27      	ldr	r3, [pc, #156]	; (800333c <HAL_RCC_OscConfig+0x280>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a26      	ldr	r2, [pc, #152]	; (800333c <HAL_RCC_OscConfig+0x280>)
 80032a2:	f023 0301 	bic.w	r3, r3, #1
 80032a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a8:	f7fe fe62 	bl	8001f70 <HAL_GetTick>
 80032ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ae:	e008      	b.n	80032c2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032b0:	f7fe fe5e 	bl	8001f70 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e164      	b.n	800358c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032c2:	4b1e      	ldr	r3, [pc, #120]	; (800333c <HAL_RCC_OscConfig+0x280>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1f0      	bne.n	80032b0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0308 	and.w	r3, r3, #8
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d038      	beq.n	800334c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d019      	beq.n	8003316 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032e2:	4b16      	ldr	r3, [pc, #88]	; (800333c <HAL_RCC_OscConfig+0x280>)
 80032e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032e6:	4a15      	ldr	r2, [pc, #84]	; (800333c <HAL_RCC_OscConfig+0x280>)
 80032e8:	f043 0301 	orr.w	r3, r3, #1
 80032ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ee:	f7fe fe3f 	bl	8001f70 <HAL_GetTick>
 80032f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032f4:	e008      	b.n	8003308 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032f6:	f7fe fe3b 	bl	8001f70 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d901      	bls.n	8003308 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e141      	b.n	800358c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003308:	4b0c      	ldr	r3, [pc, #48]	; (800333c <HAL_RCC_OscConfig+0x280>)
 800330a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800330c:	f003 0302 	and.w	r3, r3, #2
 8003310:	2b00      	cmp	r3, #0
 8003312:	d0f0      	beq.n	80032f6 <HAL_RCC_OscConfig+0x23a>
 8003314:	e01a      	b.n	800334c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003316:	4b09      	ldr	r3, [pc, #36]	; (800333c <HAL_RCC_OscConfig+0x280>)
 8003318:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800331a:	4a08      	ldr	r2, [pc, #32]	; (800333c <HAL_RCC_OscConfig+0x280>)
 800331c:	f023 0301 	bic.w	r3, r3, #1
 8003320:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003322:	f7fe fe25 	bl	8001f70 <HAL_GetTick>
 8003326:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003328:	e00a      	b.n	8003340 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800332a:	f7fe fe21 	bl	8001f70 <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	2b02      	cmp	r3, #2
 8003336:	d903      	bls.n	8003340 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e127      	b.n	800358c <HAL_RCC_OscConfig+0x4d0>
 800333c:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003340:	4b94      	ldr	r3, [pc, #592]	; (8003594 <HAL_RCC_OscConfig+0x4d8>)
 8003342:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003344:	f003 0302 	and.w	r3, r3, #2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d1ee      	bne.n	800332a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0304 	and.w	r3, r3, #4
 8003354:	2b00      	cmp	r3, #0
 8003356:	f000 80a4 	beq.w	80034a2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800335a:	4b8e      	ldr	r3, [pc, #568]	; (8003594 <HAL_RCC_OscConfig+0x4d8>)
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d10d      	bne.n	8003382 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003366:	4b8b      	ldr	r3, [pc, #556]	; (8003594 <HAL_RCC_OscConfig+0x4d8>)
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	4a8a      	ldr	r2, [pc, #552]	; (8003594 <HAL_RCC_OscConfig+0x4d8>)
 800336c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003370:	6413      	str	r3, [r2, #64]	; 0x40
 8003372:	4b88      	ldr	r3, [pc, #544]	; (8003594 <HAL_RCC_OscConfig+0x4d8>)
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800337a:	60fb      	str	r3, [r7, #12]
 800337c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800337e:	2301      	movs	r3, #1
 8003380:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003382:	4b85      	ldr	r3, [pc, #532]	; (8003598 <HAL_RCC_OscConfig+0x4dc>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800338a:	2b00      	cmp	r3, #0
 800338c:	d118      	bne.n	80033c0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800338e:	4b82      	ldr	r3, [pc, #520]	; (8003598 <HAL_RCC_OscConfig+0x4dc>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a81      	ldr	r2, [pc, #516]	; (8003598 <HAL_RCC_OscConfig+0x4dc>)
 8003394:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003398:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800339a:	f7fe fde9 	bl	8001f70 <HAL_GetTick>
 800339e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033a0:	e008      	b.n	80033b4 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80033a2:	f7fe fde5 	bl	8001f70 <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	2b64      	cmp	r3, #100	; 0x64
 80033ae:	d901      	bls.n	80033b4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e0eb      	b.n	800358c <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033b4:	4b78      	ldr	r3, [pc, #480]	; (8003598 <HAL_RCC_OscConfig+0x4dc>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d0f0      	beq.n	80033a2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d106      	bne.n	80033d6 <HAL_RCC_OscConfig+0x31a>
 80033c8:	4b72      	ldr	r3, [pc, #456]	; (8003594 <HAL_RCC_OscConfig+0x4d8>)
 80033ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033cc:	4a71      	ldr	r2, [pc, #452]	; (8003594 <HAL_RCC_OscConfig+0x4d8>)
 80033ce:	f043 0301 	orr.w	r3, r3, #1
 80033d2:	6713      	str	r3, [r2, #112]	; 0x70
 80033d4:	e02d      	b.n	8003432 <HAL_RCC_OscConfig+0x376>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10c      	bne.n	80033f8 <HAL_RCC_OscConfig+0x33c>
 80033de:	4b6d      	ldr	r3, [pc, #436]	; (8003594 <HAL_RCC_OscConfig+0x4d8>)
 80033e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e2:	4a6c      	ldr	r2, [pc, #432]	; (8003594 <HAL_RCC_OscConfig+0x4d8>)
 80033e4:	f023 0301 	bic.w	r3, r3, #1
 80033e8:	6713      	str	r3, [r2, #112]	; 0x70
 80033ea:	4b6a      	ldr	r3, [pc, #424]	; (8003594 <HAL_RCC_OscConfig+0x4d8>)
 80033ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ee:	4a69      	ldr	r2, [pc, #420]	; (8003594 <HAL_RCC_OscConfig+0x4d8>)
 80033f0:	f023 0304 	bic.w	r3, r3, #4
 80033f4:	6713      	str	r3, [r2, #112]	; 0x70
 80033f6:	e01c      	b.n	8003432 <HAL_RCC_OscConfig+0x376>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	2b05      	cmp	r3, #5
 80033fe:	d10c      	bne.n	800341a <HAL_RCC_OscConfig+0x35e>
 8003400:	4b64      	ldr	r3, [pc, #400]	; (8003594 <HAL_RCC_OscConfig+0x4d8>)
 8003402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003404:	4a63      	ldr	r2, [pc, #396]	; (8003594 <HAL_RCC_OscConfig+0x4d8>)
 8003406:	f043 0304 	orr.w	r3, r3, #4
 800340a:	6713      	str	r3, [r2, #112]	; 0x70
 800340c:	4b61      	ldr	r3, [pc, #388]	; (8003594 <HAL_RCC_OscConfig+0x4d8>)
 800340e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003410:	4a60      	ldr	r2, [pc, #384]	; (8003594 <HAL_RCC_OscConfig+0x4d8>)
 8003412:	f043 0301 	orr.w	r3, r3, #1
 8003416:	6713      	str	r3, [r2, #112]	; 0x70
 8003418:	e00b      	b.n	8003432 <HAL_RCC_OscConfig+0x376>
 800341a:	4b5e      	ldr	r3, [pc, #376]	; (8003594 <HAL_RCC_OscConfig+0x4d8>)
 800341c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800341e:	4a5d      	ldr	r2, [pc, #372]	; (8003594 <HAL_RCC_OscConfig+0x4d8>)
 8003420:	f023 0301 	bic.w	r3, r3, #1
 8003424:	6713      	str	r3, [r2, #112]	; 0x70
 8003426:	4b5b      	ldr	r3, [pc, #364]	; (8003594 <HAL_RCC_OscConfig+0x4d8>)
 8003428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342a:	4a5a      	ldr	r2, [pc, #360]	; (8003594 <HAL_RCC_OscConfig+0x4d8>)
 800342c:	f023 0304 	bic.w	r3, r3, #4
 8003430:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d015      	beq.n	8003466 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800343a:	f7fe fd99 	bl	8001f70 <HAL_GetTick>
 800343e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003440:	e00a      	b.n	8003458 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003442:	f7fe fd95 	bl	8001f70 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003450:	4293      	cmp	r3, r2
 8003452:	d901      	bls.n	8003458 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e099      	b.n	800358c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003458:	4b4e      	ldr	r3, [pc, #312]	; (8003594 <HAL_RCC_OscConfig+0x4d8>)
 800345a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800345c:	f003 0302 	and.w	r3, r3, #2
 8003460:	2b00      	cmp	r3, #0
 8003462:	d0ee      	beq.n	8003442 <HAL_RCC_OscConfig+0x386>
 8003464:	e014      	b.n	8003490 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003466:	f7fe fd83 	bl	8001f70 <HAL_GetTick>
 800346a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800346c:	e00a      	b.n	8003484 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800346e:	f7fe fd7f 	bl	8001f70 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	f241 3288 	movw	r2, #5000	; 0x1388
 800347c:	4293      	cmp	r3, r2
 800347e:	d901      	bls.n	8003484 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e083      	b.n	800358c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003484:	4b43      	ldr	r3, [pc, #268]	; (8003594 <HAL_RCC_OscConfig+0x4d8>)
 8003486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	2b00      	cmp	r3, #0
 800348e:	d1ee      	bne.n	800346e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003490:	7dfb      	ldrb	r3, [r7, #23]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d105      	bne.n	80034a2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003496:	4b3f      	ldr	r3, [pc, #252]	; (8003594 <HAL_RCC_OscConfig+0x4d8>)
 8003498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349a:	4a3e      	ldr	r2, [pc, #248]	; (8003594 <HAL_RCC_OscConfig+0x4d8>)
 800349c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d06f      	beq.n	800358a <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034aa:	4b3a      	ldr	r3, [pc, #232]	; (8003594 <HAL_RCC_OscConfig+0x4d8>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f003 030c 	and.w	r3, r3, #12
 80034b2:	2b08      	cmp	r3, #8
 80034b4:	d067      	beq.n	8003586 <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d149      	bne.n	8003552 <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034be:	4b35      	ldr	r3, [pc, #212]	; (8003594 <HAL_RCC_OscConfig+0x4d8>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a34      	ldr	r2, [pc, #208]	; (8003594 <HAL_RCC_OscConfig+0x4d8>)
 80034c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ca:	f7fe fd51 	bl	8001f70 <HAL_GetTick>
 80034ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034d0:	e008      	b.n	80034e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034d2:	f7fe fd4d 	bl	8001f70 <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d901      	bls.n	80034e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e053      	b.n	800358c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034e4:	4b2b      	ldr	r3, [pc, #172]	; (8003594 <HAL_RCC_OscConfig+0x4d8>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d1f0      	bne.n	80034d2 <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	69da      	ldr	r2, [r3, #28]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	431a      	orrs	r2, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fe:	019b      	lsls	r3, r3, #6
 8003500:	431a      	orrs	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003506:	085b      	lsrs	r3, r3, #1
 8003508:	3b01      	subs	r3, #1
 800350a:	041b      	lsls	r3, r3, #16
 800350c:	431a      	orrs	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003512:	061b      	lsls	r3, r3, #24
 8003514:	4313      	orrs	r3, r2
 8003516:	4a1f      	ldr	r2, [pc, #124]	; (8003594 <HAL_RCC_OscConfig+0x4d8>)
 8003518:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800351c:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800351e:	4b1d      	ldr	r3, [pc, #116]	; (8003594 <HAL_RCC_OscConfig+0x4d8>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a1c      	ldr	r2, [pc, #112]	; (8003594 <HAL_RCC_OscConfig+0x4d8>)
 8003524:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003528:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800352a:	f7fe fd21 	bl	8001f70 <HAL_GetTick>
 800352e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003530:	e008      	b.n	8003544 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003532:	f7fe fd1d 	bl	8001f70 <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	2b02      	cmp	r3, #2
 800353e:	d901      	bls.n	8003544 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e023      	b.n	800358c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003544:	4b13      	ldr	r3, [pc, #76]	; (8003594 <HAL_RCC_OscConfig+0x4d8>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d0f0      	beq.n	8003532 <HAL_RCC_OscConfig+0x476>
 8003550:	e01b      	b.n	800358a <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003552:	4b10      	ldr	r3, [pc, #64]	; (8003594 <HAL_RCC_OscConfig+0x4d8>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a0f      	ldr	r2, [pc, #60]	; (8003594 <HAL_RCC_OscConfig+0x4d8>)
 8003558:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800355c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800355e:	f7fe fd07 	bl	8001f70 <HAL_GetTick>
 8003562:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003564:	e008      	b.n	8003578 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003566:	f7fe fd03 	bl	8001f70 <HAL_GetTick>
 800356a:	4602      	mov	r2, r0
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	2b02      	cmp	r3, #2
 8003572:	d901      	bls.n	8003578 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e009      	b.n	800358c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003578:	4b06      	ldr	r3, [pc, #24]	; (8003594 <HAL_RCC_OscConfig+0x4d8>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d1f0      	bne.n	8003566 <HAL_RCC_OscConfig+0x4aa>
 8003584:	e001      	b.n	800358a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e000      	b.n	800358c <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	3718      	adds	r7, #24
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}
 8003594:	40023800 	.word	0x40023800
 8003598:	40007000 	.word	0x40007000

0800359c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80035a6:	2300      	movs	r3, #0
 80035a8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d101      	bne.n	80035b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e0ce      	b.n	8003752 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035b4:	4b69      	ldr	r3, [pc, #420]	; (800375c <HAL_RCC_ClockConfig+0x1c0>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 030f 	and.w	r3, r3, #15
 80035bc:	683a      	ldr	r2, [r7, #0]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d910      	bls.n	80035e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035c2:	4b66      	ldr	r3, [pc, #408]	; (800375c <HAL_RCC_ClockConfig+0x1c0>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f023 020f 	bic.w	r2, r3, #15
 80035ca:	4964      	ldr	r1, [pc, #400]	; (800375c <HAL_RCC_ClockConfig+0x1c0>)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035d2:	4b62      	ldr	r3, [pc, #392]	; (800375c <HAL_RCC_ClockConfig+0x1c0>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 030f 	and.w	r3, r3, #15
 80035da:	683a      	ldr	r2, [r7, #0]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d001      	beq.n	80035e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e0b6      	b.n	8003752 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d020      	beq.n	8003632 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0304 	and.w	r3, r3, #4
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d005      	beq.n	8003608 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035fc:	4b58      	ldr	r3, [pc, #352]	; (8003760 <HAL_RCC_ClockConfig+0x1c4>)
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	4a57      	ldr	r2, [pc, #348]	; (8003760 <HAL_RCC_ClockConfig+0x1c4>)
 8003602:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003606:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0308 	and.w	r3, r3, #8
 8003610:	2b00      	cmp	r3, #0
 8003612:	d005      	beq.n	8003620 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003614:	4b52      	ldr	r3, [pc, #328]	; (8003760 <HAL_RCC_ClockConfig+0x1c4>)
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	4a51      	ldr	r2, [pc, #324]	; (8003760 <HAL_RCC_ClockConfig+0x1c4>)
 800361a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800361e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003620:	4b4f      	ldr	r3, [pc, #316]	; (8003760 <HAL_RCC_ClockConfig+0x1c4>)
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	494c      	ldr	r1, [pc, #304]	; (8003760 <HAL_RCC_ClockConfig+0x1c4>)
 800362e:	4313      	orrs	r3, r2
 8003630:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b00      	cmp	r3, #0
 800363c:	d040      	beq.n	80036c0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d107      	bne.n	8003656 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003646:	4b46      	ldr	r3, [pc, #280]	; (8003760 <HAL_RCC_ClockConfig+0x1c4>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d115      	bne.n	800367e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e07d      	b.n	8003752 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	2b02      	cmp	r3, #2
 800365c:	d107      	bne.n	800366e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800365e:	4b40      	ldr	r3, [pc, #256]	; (8003760 <HAL_RCC_ClockConfig+0x1c4>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d109      	bne.n	800367e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e071      	b.n	8003752 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800366e:	4b3c      	ldr	r3, [pc, #240]	; (8003760 <HAL_RCC_ClockConfig+0x1c4>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e069      	b.n	8003752 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800367e:	4b38      	ldr	r3, [pc, #224]	; (8003760 <HAL_RCC_ClockConfig+0x1c4>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f023 0203 	bic.w	r2, r3, #3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	4935      	ldr	r1, [pc, #212]	; (8003760 <HAL_RCC_ClockConfig+0x1c4>)
 800368c:	4313      	orrs	r3, r2
 800368e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003690:	f7fe fc6e 	bl	8001f70 <HAL_GetTick>
 8003694:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003696:	e00a      	b.n	80036ae <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003698:	f7fe fc6a 	bl	8001f70 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e051      	b.n	8003752 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ae:	4b2c      	ldr	r3, [pc, #176]	; (8003760 <HAL_RCC_ClockConfig+0x1c4>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f003 020c 	and.w	r2, r3, #12
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	429a      	cmp	r2, r3
 80036be:	d1eb      	bne.n	8003698 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036c0:	4b26      	ldr	r3, [pc, #152]	; (800375c <HAL_RCC_ClockConfig+0x1c0>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 030f 	and.w	r3, r3, #15
 80036c8:	683a      	ldr	r2, [r7, #0]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d210      	bcs.n	80036f0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ce:	4b23      	ldr	r3, [pc, #140]	; (800375c <HAL_RCC_ClockConfig+0x1c0>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f023 020f 	bic.w	r2, r3, #15
 80036d6:	4921      	ldr	r1, [pc, #132]	; (800375c <HAL_RCC_ClockConfig+0x1c0>)
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	4313      	orrs	r3, r2
 80036dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036de:	4b1f      	ldr	r3, [pc, #124]	; (800375c <HAL_RCC_ClockConfig+0x1c0>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 030f 	and.w	r3, r3, #15
 80036e6:	683a      	ldr	r2, [r7, #0]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d001      	beq.n	80036f0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e030      	b.n	8003752 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0304 	and.w	r3, r3, #4
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d008      	beq.n	800370e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036fc:	4b18      	ldr	r3, [pc, #96]	; (8003760 <HAL_RCC_ClockConfig+0x1c4>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	4915      	ldr	r1, [pc, #84]	; (8003760 <HAL_RCC_ClockConfig+0x1c4>)
 800370a:	4313      	orrs	r3, r2
 800370c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0308 	and.w	r3, r3, #8
 8003716:	2b00      	cmp	r3, #0
 8003718:	d009      	beq.n	800372e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800371a:	4b11      	ldr	r3, [pc, #68]	; (8003760 <HAL_RCC_ClockConfig+0x1c4>)
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	490d      	ldr	r1, [pc, #52]	; (8003760 <HAL_RCC_ClockConfig+0x1c4>)
 800372a:	4313      	orrs	r3, r2
 800372c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800372e:	f000 f81d 	bl	800376c <HAL_RCC_GetSysClockFreq>
 8003732:	4601      	mov	r1, r0
 8003734:	4b0a      	ldr	r3, [pc, #40]	; (8003760 <HAL_RCC_ClockConfig+0x1c4>)
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	091b      	lsrs	r3, r3, #4
 800373a:	f003 030f 	and.w	r3, r3, #15
 800373e:	4a09      	ldr	r2, [pc, #36]	; (8003764 <HAL_RCC_ClockConfig+0x1c8>)
 8003740:	5cd3      	ldrb	r3, [r2, r3]
 8003742:	fa21 f303 	lsr.w	r3, r1, r3
 8003746:	4a08      	ldr	r2, [pc, #32]	; (8003768 <HAL_RCC_ClockConfig+0x1cc>)
 8003748:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800374a:	2000      	movs	r0, #0
 800374c:	f7fe fa34 	bl	8001bb8 <HAL_InitTick>

  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	40023c00 	.word	0x40023c00
 8003760:	40023800 	.word	0x40023800
 8003764:	08009750 	.word	0x08009750
 8003768:	20000000 	.word	0x20000000

0800376c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800376c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003772:	2300      	movs	r3, #0
 8003774:	607b      	str	r3, [r7, #4]
 8003776:	2300      	movs	r3, #0
 8003778:	60fb      	str	r3, [r7, #12]
 800377a:	2300      	movs	r3, #0
 800377c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800377e:	2300      	movs	r3, #0
 8003780:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003782:	4b50      	ldr	r3, [pc, #320]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x158>)
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f003 030c 	and.w	r3, r3, #12
 800378a:	2b04      	cmp	r3, #4
 800378c:	d007      	beq.n	800379e <HAL_RCC_GetSysClockFreq+0x32>
 800378e:	2b08      	cmp	r3, #8
 8003790:	d008      	beq.n	80037a4 <HAL_RCC_GetSysClockFreq+0x38>
 8003792:	2b00      	cmp	r3, #0
 8003794:	f040 808d 	bne.w	80038b2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003798:	4b4b      	ldr	r3, [pc, #300]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x15c>)
 800379a:	60bb      	str	r3, [r7, #8]
       break;
 800379c:	e08c      	b.n	80038b8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800379e:	4b4b      	ldr	r3, [pc, #300]	; (80038cc <HAL_RCC_GetSysClockFreq+0x160>)
 80037a0:	60bb      	str	r3, [r7, #8]
      break;
 80037a2:	e089      	b.n	80038b8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037a4:	4b47      	ldr	r3, [pc, #284]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x158>)
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037ac:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80037ae:	4b45      	ldr	r3, [pc, #276]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x158>)
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d023      	beq.n	8003802 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037ba:	4b42      	ldr	r3, [pc, #264]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x158>)
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	099b      	lsrs	r3, r3, #6
 80037c0:	f04f 0400 	mov.w	r4, #0
 80037c4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80037c8:	f04f 0200 	mov.w	r2, #0
 80037cc:	ea03 0501 	and.w	r5, r3, r1
 80037d0:	ea04 0602 	and.w	r6, r4, r2
 80037d4:	4a3d      	ldr	r2, [pc, #244]	; (80038cc <HAL_RCC_GetSysClockFreq+0x160>)
 80037d6:	fb02 f106 	mul.w	r1, r2, r6
 80037da:	2200      	movs	r2, #0
 80037dc:	fb02 f205 	mul.w	r2, r2, r5
 80037e0:	440a      	add	r2, r1
 80037e2:	493a      	ldr	r1, [pc, #232]	; (80038cc <HAL_RCC_GetSysClockFreq+0x160>)
 80037e4:	fba5 0101 	umull	r0, r1, r5, r1
 80037e8:	1853      	adds	r3, r2, r1
 80037ea:	4619      	mov	r1, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f04f 0400 	mov.w	r4, #0
 80037f2:	461a      	mov	r2, r3
 80037f4:	4623      	mov	r3, r4
 80037f6:	f7fc fd0b 	bl	8000210 <__aeabi_uldivmod>
 80037fa:	4603      	mov	r3, r0
 80037fc:	460c      	mov	r4, r1
 80037fe:	60fb      	str	r3, [r7, #12]
 8003800:	e049      	b.n	8003896 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003802:	4b30      	ldr	r3, [pc, #192]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x158>)
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	099b      	lsrs	r3, r3, #6
 8003808:	f04f 0400 	mov.w	r4, #0
 800380c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003810:	f04f 0200 	mov.w	r2, #0
 8003814:	ea03 0501 	and.w	r5, r3, r1
 8003818:	ea04 0602 	and.w	r6, r4, r2
 800381c:	4629      	mov	r1, r5
 800381e:	4632      	mov	r2, r6
 8003820:	f04f 0300 	mov.w	r3, #0
 8003824:	f04f 0400 	mov.w	r4, #0
 8003828:	0154      	lsls	r4, r2, #5
 800382a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800382e:	014b      	lsls	r3, r1, #5
 8003830:	4619      	mov	r1, r3
 8003832:	4622      	mov	r2, r4
 8003834:	1b49      	subs	r1, r1, r5
 8003836:	eb62 0206 	sbc.w	r2, r2, r6
 800383a:	f04f 0300 	mov.w	r3, #0
 800383e:	f04f 0400 	mov.w	r4, #0
 8003842:	0194      	lsls	r4, r2, #6
 8003844:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003848:	018b      	lsls	r3, r1, #6
 800384a:	1a5b      	subs	r3, r3, r1
 800384c:	eb64 0402 	sbc.w	r4, r4, r2
 8003850:	f04f 0100 	mov.w	r1, #0
 8003854:	f04f 0200 	mov.w	r2, #0
 8003858:	00e2      	lsls	r2, r4, #3
 800385a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800385e:	00d9      	lsls	r1, r3, #3
 8003860:	460b      	mov	r3, r1
 8003862:	4614      	mov	r4, r2
 8003864:	195b      	adds	r3, r3, r5
 8003866:	eb44 0406 	adc.w	r4, r4, r6
 800386a:	f04f 0100 	mov.w	r1, #0
 800386e:	f04f 0200 	mov.w	r2, #0
 8003872:	02a2      	lsls	r2, r4, #10
 8003874:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003878:	0299      	lsls	r1, r3, #10
 800387a:	460b      	mov	r3, r1
 800387c:	4614      	mov	r4, r2
 800387e:	4618      	mov	r0, r3
 8003880:	4621      	mov	r1, r4
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f04f 0400 	mov.w	r4, #0
 8003888:	461a      	mov	r2, r3
 800388a:	4623      	mov	r3, r4
 800388c:	f7fc fcc0 	bl	8000210 <__aeabi_uldivmod>
 8003890:	4603      	mov	r3, r0
 8003892:	460c      	mov	r4, r1
 8003894:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8003896:	4b0b      	ldr	r3, [pc, #44]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x158>)
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	0c1b      	lsrs	r3, r3, #16
 800389c:	f003 0303 	and.w	r3, r3, #3
 80038a0:	3301      	adds	r3, #1
 80038a2:	005b      	lsls	r3, r3, #1
 80038a4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ae:	60bb      	str	r3, [r7, #8]
      break;
 80038b0:	e002      	b.n	80038b8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038b2:	4b05      	ldr	r3, [pc, #20]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80038b4:	60bb      	str	r3, [r7, #8]
      break;
 80038b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038b8:	68bb      	ldr	r3, [r7, #8]
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3714      	adds	r7, #20
 80038be:	46bd      	mov	sp, r7
 80038c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038c2:	bf00      	nop
 80038c4:	40023800 	.word	0x40023800
 80038c8:	00f42400 	.word	0x00f42400
 80038cc:	017d7840 	.word	0x017d7840

080038d0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038d0:	b480      	push	{r7}
 80038d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038d4:	4b03      	ldr	r3, [pc, #12]	; (80038e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80038d6:	681b      	ldr	r3, [r3, #0]
}
 80038d8:	4618      	mov	r0, r3
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	20000000 	.word	0x20000000

080038e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80038ec:	f7ff fff0 	bl	80038d0 <HAL_RCC_GetHCLKFreq>
 80038f0:	4601      	mov	r1, r0
 80038f2:	4b05      	ldr	r3, [pc, #20]	; (8003908 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	0a9b      	lsrs	r3, r3, #10
 80038f8:	f003 0307 	and.w	r3, r3, #7
 80038fc:	4a03      	ldr	r2, [pc, #12]	; (800390c <HAL_RCC_GetPCLK1Freq+0x24>)
 80038fe:	5cd3      	ldrb	r3, [r2, r3]
 8003900:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003904:	4618      	mov	r0, r3
 8003906:	bd80      	pop	{r7, pc}
 8003908:	40023800 	.word	0x40023800
 800390c:	08009760 	.word	0x08009760

08003910 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003914:	f7ff ffdc 	bl	80038d0 <HAL_RCC_GetHCLKFreq>
 8003918:	4601      	mov	r1, r0
 800391a:	4b05      	ldr	r3, [pc, #20]	; (8003930 <HAL_RCC_GetPCLK2Freq+0x20>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	0b5b      	lsrs	r3, r3, #13
 8003920:	f003 0307 	and.w	r3, r3, #7
 8003924:	4a03      	ldr	r2, [pc, #12]	; (8003934 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003926:	5cd3      	ldrb	r3, [r2, r3]
 8003928:	fa21 f303 	lsr.w	r3, r1, r3
}
 800392c:	4618      	mov	r0, r3
 800392e:	bd80      	pop	{r7, pc}
 8003930:	40023800 	.word	0x40023800
 8003934:	08009760 	.word	0x08009760

08003938 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	220f      	movs	r2, #15
 8003946:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003948:	4b12      	ldr	r3, [pc, #72]	; (8003994 <HAL_RCC_GetClockConfig+0x5c>)
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f003 0203 	and.w	r2, r3, #3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003954:	4b0f      	ldr	r3, [pc, #60]	; (8003994 <HAL_RCC_GetClockConfig+0x5c>)
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003960:	4b0c      	ldr	r3, [pc, #48]	; (8003994 <HAL_RCC_GetClockConfig+0x5c>)
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800396c:	4b09      	ldr	r3, [pc, #36]	; (8003994 <HAL_RCC_GetClockConfig+0x5c>)
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	08db      	lsrs	r3, r3, #3
 8003972:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800397a:	4b07      	ldr	r3, [pc, #28]	; (8003998 <HAL_RCC_GetClockConfig+0x60>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 020f 	and.w	r2, r3, #15
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	601a      	str	r2, [r3, #0]
}
 8003986:	bf00      	nop
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop
 8003994:	40023800 	.word	0x40023800
 8003998:	40023c00 	.word	0x40023c00

0800399c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b088      	sub	sp, #32
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80039a4:	2300      	movs	r3, #0
 80039a6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80039a8:	2300      	movs	r3, #0
 80039aa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80039ac:	2300      	movs	r3, #0
 80039ae:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80039b0:	2300      	movs	r3, #0
 80039b2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80039b4:	2300      	movs	r3, #0
 80039b6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0301 	and.w	r3, r3, #1
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d012      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80039c4:	4b69      	ldr	r3, [pc, #420]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	4a68      	ldr	r2, [pc, #416]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039ca:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80039ce:	6093      	str	r3, [r2, #8]
 80039d0:	4b66      	ldr	r3, [pc, #408]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039d2:	689a      	ldr	r2, [r3, #8]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039d8:	4964      	ldr	r1, [pc, #400]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d101      	bne.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80039e6:	2301      	movs	r3, #1
 80039e8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d017      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039f6:	4b5d      	ldr	r3, [pc, #372]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a04:	4959      	ldr	r1, [pc, #356]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a14:	d101      	bne.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003a16:	2301      	movs	r3, #1
 8003a18:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d101      	bne.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003a22:	2301      	movs	r3, #1
 8003a24:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d017      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a32:	4b4e      	ldr	r3, [pc, #312]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a38:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a40:	494a      	ldr	r1, [pc, #296]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a50:	d101      	bne.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003a52:	2301      	movs	r3, #1
 8003a54:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d101      	bne.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d001      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0320 	and.w	r3, r3, #32
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f000 808b 	beq.w	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a80:	4b3a      	ldr	r3, [pc, #232]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a84:	4a39      	ldr	r2, [pc, #228]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a8a:	6413      	str	r3, [r2, #64]	; 0x40
 8003a8c:	4b37      	ldr	r3, [pc, #220]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a94:	60bb      	str	r3, [r7, #8]
 8003a96:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003a98:	4b35      	ldr	r3, [pc, #212]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a34      	ldr	r2, [pc, #208]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aa2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003aa4:	f7fe fa64 	bl	8001f70 <HAL_GetTick>
 8003aa8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003aaa:	e008      	b.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aac:	f7fe fa60 	bl	8001f70 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	2b64      	cmp	r3, #100	; 0x64
 8003ab8:	d901      	bls.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e31e      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x760>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003abe:	4b2c      	ldr	r3, [pc, #176]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d0f0      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003aca:	4b28      	ldr	r3, [pc, #160]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ace:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ad2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d035      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ade:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ae2:	693a      	ldr	r2, [r7, #16]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d02e      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ae8:	4b20      	ldr	r3, [pc, #128]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003af0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003af2:	4b1e      	ldr	r3, [pc, #120]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af6:	4a1d      	ldr	r2, [pc, #116]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003af8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003afc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003afe:	4b1b      	ldr	r3, [pc, #108]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b02:	4a1a      	ldr	r2, [pc, #104]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b08:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003b0a:	4a18      	ldr	r2, [pc, #96]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003b10:	4b16      	ldr	r3, [pc, #88]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b14:	f003 0301 	and.w	r3, r3, #1
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d114      	bne.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b1c:	f7fe fa28 	bl	8001f70 <HAL_GetTick>
 8003b20:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b22:	e00a      	b.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b24:	f7fe fa24 	bl	8001f70 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d901      	bls.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e2e0      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x760>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b3a:	4b0c      	ldr	r3, [pc, #48]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b3e:	f003 0302 	and.w	r3, r3, #2
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d0ee      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b52:	d111      	bne.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003b54:	4b05      	ldr	r3, [pc, #20]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003b60:	4b04      	ldr	r3, [pc, #16]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003b62:	400b      	ands	r3, r1
 8003b64:	4901      	ldr	r1, [pc, #4]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	608b      	str	r3, [r1, #8]
 8003b6a:	e00b      	b.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003b6c:	40023800 	.word	0x40023800
 8003b70:	40007000 	.word	0x40007000
 8003b74:	0ffffcff 	.word	0x0ffffcff
 8003b78:	4bac      	ldr	r3, [pc, #688]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	4aab      	ldr	r2, [pc, #684]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b7e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003b82:	6093      	str	r3, [r2, #8]
 8003b84:	4ba9      	ldr	r3, [pc, #676]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b86:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b90:	49a6      	ldr	r1, [pc, #664]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0310 	and.w	r3, r3, #16
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d010      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ba2:	4ba2      	ldr	r3, [pc, #648]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ba4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ba8:	4aa0      	ldr	r2, [pc, #640]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003baa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003bb2:	4b9e      	ldr	r3, [pc, #632]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bb4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bbc:	499b      	ldr	r1, [pc, #620]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d00a      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003bd0:	4b96      	ldr	r3, [pc, #600]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bd6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bde:	4993      	ldr	r1, [pc, #588]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00a      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003bf2:	4b8e      	ldr	r3, [pc, #568]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c00:	498a      	ldr	r1, [pc, #552]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d00a      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c14:	4b85      	ldr	r3, [pc, #532]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c1a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c22:	4982      	ldr	r1, [pc, #520]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d00a      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c36:	4b7d      	ldr	r3, [pc, #500]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c3c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c44:	4979      	ldr	r1, [pc, #484]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d00a      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c58:	4b74      	ldr	r3, [pc, #464]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c5e:	f023 0203 	bic.w	r2, r3, #3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c66:	4971      	ldr	r1, [pc, #452]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00a      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c7a:	4b6c      	ldr	r3, [pc, #432]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c80:	f023 020c 	bic.w	r2, r3, #12
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c88:	4968      	ldr	r1, [pc, #416]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00a      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c9c:	4b63      	ldr	r3, [pc, #396]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003caa:	4960      	ldr	r1, [pc, #384]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cac:	4313      	orrs	r3, r2
 8003cae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00a      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003cbe:	4b5b      	ldr	r3, [pc, #364]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ccc:	4957      	ldr	r1, [pc, #348]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d00a      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ce0:	4b52      	ldr	r3, [pc, #328]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cee:	494f      	ldr	r1, [pc, #316]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00a      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003d02:	4b4a      	ldr	r3, [pc, #296]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d08:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d10:	4946      	ldr	r1, [pc, #280]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d00a      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003d24:	4b41      	ldr	r3, [pc, #260]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d2a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d32:	493e      	ldr	r1, [pc, #248]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00a      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003d46:	4b39      	ldr	r3, [pc, #228]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d4c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d54:	4935      	ldr	r1, [pc, #212]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d00a      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003d68:	4b30      	ldr	r3, [pc, #192]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d6e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d76:	492d      	ldr	r1, [pc, #180]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d011      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003d8a:	4b28      	ldr	r3, [pc, #160]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d90:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d98:	4924      	ldr	r1, [pc, #144]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003da4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003da8:	d101      	bne.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003daa:	2301      	movs	r3, #1
 8003dac:	61bb      	str	r3, [r7, #24]
    pllsaiused = 1;
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d00a      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x434>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003dba:	4b1c      	ldr	r3, [pc, #112]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dc8:	4918      	ldr	r1, [pc, #96]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d00b      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003ddc:	4b13      	ldr	r3, [pc, #76]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dec:	490f      	ldr	r1, [pc, #60]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d005      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x46a>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e02:	f040 80d8 	bne.w	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x61a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003e06:	4b09      	ldr	r3, [pc, #36]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a08      	ldr	r2, [pc, #32]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e0c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e12:	f7fe f8ad 	bl	8001f70 <HAL_GetTick>
 8003e16:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e18:	e00a      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x494>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e1a:	f7fe f8a9 	bl	8001f70 <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	2b64      	cmp	r3, #100	; 0x64
 8003e26:	d903      	bls.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x494>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e167      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x760>
 8003e2c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e30:	4bad      	ldr	r3, [pc, #692]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d1ee      	bne.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x47e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0301 	and.w	r3, r3, #1
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d021      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d11d      	bne.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003e50:	4ba5      	ldr	r3, [pc, #660]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003e52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e56:	0c1b      	lsrs	r3, r3, #16
 8003e58:	f003 0303 	and.w	r3, r3, #3
 8003e5c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003e5e:	4ba2      	ldr	r3, [pc, #648]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003e60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e64:	0e1b      	lsrs	r3, r3, #24
 8003e66:	f003 030f 	and.w	r3, r3, #15
 8003e6a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	019a      	lsls	r2, r3, #6
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	041b      	lsls	r3, r3, #16
 8003e76:	431a      	orrs	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	061b      	lsls	r3, r3, #24
 8003e7c:	431a      	orrs	r2, r3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	071b      	lsls	r3, r3, #28
 8003e84:	4998      	ldr	r1, [pc, #608]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d004      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ea0:	d00a      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x51c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d02e      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x570>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003eb6:	d129      	bne.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x570>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003eb8:	4b8b      	ldr	r3, [pc, #556]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003eba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ebe:	0c1b      	lsrs	r3, r3, #16
 8003ec0:	f003 0303 	and.w	r3, r3, #3
 8003ec4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ec6:	4b88      	ldr	r3, [pc, #544]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003ec8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ecc:	0f1b      	lsrs	r3, r3, #28
 8003ece:	f003 0307 	and.w	r3, r3, #7
 8003ed2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	019a      	lsls	r2, r3, #6
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	041b      	lsls	r3, r3, #16
 8003ede:	431a      	orrs	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	061b      	lsls	r3, r3, #24
 8003ee6:	431a      	orrs	r2, r3
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	071b      	lsls	r3, r3, #28
 8003eec:	497e      	ldr	r1, [pc, #504]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003ef4:	4b7c      	ldr	r3, [pc, #496]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003ef6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003efa:	f023 021f 	bic.w	r2, r3, #31
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f02:	3b01      	subs	r3, #1
 8003f04:	4978      	ldr	r1, [pc, #480]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d01d      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003f18:	4b73      	ldr	r3, [pc, #460]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003f1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f1e:	0e1b      	lsrs	r3, r3, #24
 8003f20:	f003 030f 	and.w	r3, r3, #15
 8003f24:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f26:	4b70      	ldr	r3, [pc, #448]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003f28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f2c:	0f1b      	lsrs	r3, r3, #28
 8003f2e:	f003 0307 	and.w	r3, r3, #7
 8003f32:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	019a      	lsls	r2, r3, #6
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	041b      	lsls	r3, r3, #16
 8003f40:	431a      	orrs	r2, r3
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	061b      	lsls	r3, r3, #24
 8003f46:	431a      	orrs	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	071b      	lsls	r3, r3, #28
 8003f4c:	4966      	ldr	r1, [pc, #408]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d011      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	019a      	lsls	r2, r3, #6
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	041b      	lsls	r3, r3, #16
 8003f6c:	431a      	orrs	r2, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	061b      	lsls	r3, r3, #24
 8003f74:	431a      	orrs	r2, r3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	071b      	lsls	r3, r3, #28
 8003f7c:	495a      	ldr	r1, [pc, #360]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003f84:	4b58      	ldr	r3, [pc, #352]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a57      	ldr	r2, [pc, #348]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003f8a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f90:	f7fd ffee 	bl	8001f70 <HAL_GetTick>
 8003f94:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f96:	e008      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x60e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003f98:	f7fd ffea 	bl	8001f70 <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	2b64      	cmp	r3, #100	; 0x64
 8003fa4:	d901      	bls.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x60e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e0a8      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x760>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003faa:	4b4f      	ldr	r3, [pc, #316]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d0f0      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	f040 809e 	bne.w	80040fa <HAL_RCCEx_PeriphCLKConfig+0x75e>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003fbe:	4b4a      	ldr	r3, [pc, #296]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a49      	ldr	r2, [pc, #292]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003fc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fca:	f7fd ffd1 	bl	8001f70 <HAL_GetTick>
 8003fce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003fd0:	e008      	b.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003fd2:	f7fd ffcd 	bl	8001f70 <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	2b64      	cmp	r3, #100	; 0x64
 8003fde:	d901      	bls.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e08b      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x760>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003fe4:	4b40      	ldr	r3, [pc, #256]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003fec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ff0:	d0ef      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x636>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d003      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004002:	2b00      	cmp	r3, #0
 8004004:	d009      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x67e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800400e:	2b00      	cmp	r3, #0
 8004010:	d02e      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004016:	2b00      	cmp	r3, #0
 8004018:	d12a      	bne.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800401a:	4b33      	ldr	r3, [pc, #204]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800401c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004020:	0c1b      	lsrs	r3, r3, #16
 8004022:	f003 0303 	and.w	r3, r3, #3
 8004026:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004028:	4b2f      	ldr	r3, [pc, #188]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800402a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800402e:	0f1b      	lsrs	r3, r3, #28
 8004030:	f003 0307 	and.w	r3, r3, #7
 8004034:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	019a      	lsls	r2, r3, #6
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	041b      	lsls	r3, r3, #16
 8004040:	431a      	orrs	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	061b      	lsls	r3, r3, #24
 8004048:	431a      	orrs	r2, r3
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	071b      	lsls	r3, r3, #28
 800404e:	4926      	ldr	r1, [pc, #152]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8004050:	4313      	orrs	r3, r2
 8004052:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004056:	4b24      	ldr	r3, [pc, #144]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8004058:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800405c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004064:	3b01      	subs	r3, #1
 8004066:	021b      	lsls	r3, r3, #8
 8004068:	491f      	ldr	r1, [pc, #124]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800406a:	4313      	orrs	r3, r2
 800406c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d022      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x726>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004080:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004084:	d11d      	bne.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x726>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004086:	4b18      	ldr	r3, [pc, #96]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8004088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800408c:	0e1b      	lsrs	r3, r3, #24
 800408e:	f003 030f 	and.w	r3, r3, #15
 8004092:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004094:	4b14      	ldr	r3, [pc, #80]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8004096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800409a:	0f1b      	lsrs	r3, r3, #28
 800409c:	f003 0307 	and.w	r3, r3, #7
 80040a0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	019a      	lsls	r2, r3, #6
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a1b      	ldr	r3, [r3, #32]
 80040ac:	041b      	lsls	r3, r3, #16
 80040ae:	431a      	orrs	r2, r3
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	061b      	lsls	r3, r3, #24
 80040b4:	431a      	orrs	r2, r3
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	071b      	lsls	r3, r3, #28
 80040ba:	490b      	ldr	r1, [pc, #44]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80040c2:	4b09      	ldr	r3, [pc, #36]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a08      	ldr	r2, [pc, #32]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80040c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040ce:	f7fd ff4f 	bl	8001f70 <HAL_GetTick>
 80040d2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80040d4:	e00a      	b.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x750>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80040d6:	f7fd ff4b 	bl	8001f70 <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	2b64      	cmp	r3, #100	; 0x64
 80040e2:	d903      	bls.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x750>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e009      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x760>
 80040e8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80040ec:	4b05      	ldr	r3, [pc, #20]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040f8:	d1ed      	bne.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x73a>
      }
    }
  }
  return HAL_OK;
 80040fa:	2300      	movs	r3, #0
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3720      	adds	r7, #32
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}
 8004104:	40023800 	.word	0x40023800

08004108 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d101      	bne.n	800411a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e01d      	b.n	8004156 <HAL_SD_Init+0x4e>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004120:	b2db      	uxtb	r3, r3
 8004122:	2b00      	cmp	r3, #0
 8004124:	d105      	bne.n	8004132 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f7fd fa51 	bl	80015d4 <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2203      	movs	r2, #3
 8004136:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 f80f 	bl	800415e <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	3708      	adds	r7, #8
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}

0800415e <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800415e:	b5b0      	push	{r4, r5, r7, lr}
 8004160:	b08e      	sub	sp, #56	; 0x38
 8004162:	af04      	add	r7, sp, #16
 8004164:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8004166:	2300      	movs	r3, #0
 8004168:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800416a:	2300      	movs	r3, #0
 800416c:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800416e:	2300      	movs	r3, #0
 8004170:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8004172:	2300      	movs	r3, #0
 8004174:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8004176:	2300      	movs	r3, #0
 8004178:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800417a:	2300      	movs	r3, #0
 800417c:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800417e:	2376      	movs	r3, #118	; 0x76
 8004180:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681d      	ldr	r5, [r3, #0]
 8004186:	466c      	mov	r4, sp
 8004188:	f107 0318 	add.w	r3, r7, #24
 800418c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004190:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004194:	f107 030c 	add.w	r3, r7, #12
 8004198:	cb0e      	ldmia	r3, {r1, r2, r3}
 800419a:	4628      	mov	r0, r5
 800419c:	f001 fcbe 	bl	8005b1c <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd); 
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	685a      	ldr	r2, [r3, #4]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041ae:	605a      	str	r2, [r3, #4]
  
  /* Set Power State to ON */
  SDMMC_PowerState_ON(hsd->Instance);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4618      	mov	r0, r3
 80041b6:	f001 fcea 	bl	8005b8e <SDMMC_PowerState_ON>
  
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	685a      	ldr	r2, [r3, #4]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041c8:	605a      	str	r2, [r3, #4]
  
  /* Required power up waiting time before starting the SD initialization sequence */
  HAL_Delay(2);
 80041ca:	2002      	movs	r0, #2
 80041cc:	f7fd fedc 	bl	8001f88 <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f000 fb95 	bl	8004900 <SD_PowerON>
 80041d6:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80041d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00b      	beq.n	80041f6 <HAL_SD_InitCard+0x98>
  {
    hsd->State = HAL_SD_STATE_READY;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2201      	movs	r2, #1
 80041e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ec:	431a      	orrs	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e013      	b.n	800421e <HAL_SD_InitCard+0xc0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 fab9 	bl	800476e <SD_InitCard>
 80041fc:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80041fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00b      	beq.n	800421c <HAL_SD_InitCard+0xbe>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004212:	431a      	orrs	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e000      	b.n	800421e <HAL_SD_InitCard+0xc0>
  }

  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3728      	adds	r7, #40	; 0x28
 8004222:	46bd      	mov	sp, r7
 8004224:	bdb0      	pop	{r4, r5, r7, pc}

08004226 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004226:	b480      	push	{r7}
 8004228:	b085      	sub	sp, #20
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
 800422e:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0;
 8004230:	2300      	movs	r3, #0
 8004232:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0] & 0xFF000000U) >> 24;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004238:	0e1b      	lsrs	r3, r3, #24
 800423a:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	099b      	lsrs	r3, r3, #6
 8004240:	b2db      	uxtb	r3, r3
 8004242:	f003 0303 	and.w	r3, r3, #3
 8004246:	b2da      	uxtb	r2, r3
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	089b      	lsrs	r3, r3, #2
 8004250:	b2db      	uxtb	r3, r3
 8004252:	f003 030f 	and.w	r3, r3, #15
 8004256:	b2da      	uxtb	r2, r3
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	b2db      	uxtb	r3, r3
 8004260:	f003 0303 	and.w	r3, r3, #3
 8004264:	b2da      	uxtb	r2, r3
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0] & 0x00FF0000) >> 16;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800426e:	0c1b      	lsrs	r3, r3, #16
 8004270:	b2db      	uxtb	r3, r3
 8004272:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	b2da      	uxtb	r2, r3
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0] & 0x0000FF00) >> 8;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004280:	0a1b      	lsrs	r3, r3, #8
 8004282:	b2db      	uxtb	r3, r3
 8004284:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	b2da      	uxtb	r2, r3
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0] & 0x000000FF;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004292:	b2db      	uxtb	r3, r3
 8004294:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	b2da      	uxtb	r2, r3
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1] & 0xFF000000U) >> 24;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042a2:	0e1b      	lsrs	r3, r3, #24
 80042a4:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	011b      	lsls	r3, r3, #4
 80042ac:	b29a      	uxth	r2, r3
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1] & 0x00FF0000U) >> 16;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042b6:	0c1b      	lsrs	r3, r3, #16
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	88db      	ldrh	r3, [r3, #6]
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	091b      	lsrs	r3, r3, #4
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	f003 030f 	and.w	r3, r3, #15
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	4313      	orrs	r3, r2
 80042d0:	b29a      	uxth	r2, r3
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	f003 030f 	and.w	r3, r3, #15
 80042de:	b2da      	uxtb	r2, r3
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1] & 0x0000FF00U) >> 8;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042e8:	0a1b      	lsrs	r3, r3, #8
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	09db      	lsrs	r3, r3, #7
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	f003 0301 	and.w	r3, r3, #1
 80042f8:	b2da      	uxtb	r2, r3
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	099b      	lsrs	r3, r3, #6
 8004302:	b2db      	uxtb	r3, r3
 8004304:	f003 0301 	and.w	r3, r3, #1
 8004308:	b2da      	uxtb	r2, r3
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	095b      	lsrs	r3, r3, #5
 8004312:	b2db      	uxtb	r3, r3
 8004314:	f003 0301 	and.w	r3, r3, #1
 8004318:	b2da      	uxtb	r2, r3
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	091b      	lsrs	r3, r3, #4
 8004322:	b2db      	uxtb	r3, r3
 8004324:	f003 0301 	and.w	r3, r3, #1
 8004328:	b2da      	uxtb	r2, r3
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	2200      	movs	r2, #0
 8004332:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004338:	2b00      	cmp	r3, #0
 800433a:	f040 8086 	bne.w	800444a <HAL_SD_GetCardCSD+0x224>
  {
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	029b      	lsls	r3, r3, #10
 8004342:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800434e:	b2db      	uxtb	r3, r3
 8004350:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2;
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	691a      	ldr	r2, [r3, #16]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	431a      	orrs	r2, r3
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004364:	0e1b      	lsrs	r3, r3, #24
 8004366:	b2db      	uxtb	r3, r3
 8004368:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	691a      	ldr	r2, [r3, #16]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	099b      	lsrs	r3, r3, #6
 8004372:	f003 0303 	and.w	r3, r3, #3
 8004376:	431a      	orrs	r2, r3
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	08db      	lsrs	r3, r3, #3
 8004380:	b2db      	uxtb	r3, r3
 8004382:	f003 0307 	and.w	r3, r3, #7
 8004386:	b2da      	uxtb	r2, r3
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	b2db      	uxtb	r3, r3
 8004390:	f003 0307 	and.w	r3, r3, #7
 8004394:	b2da      	uxtb	r2, r3
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800439e:	0c1b      	lsrs	r3, r3, #16
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	095b      	lsrs	r3, r3, #5
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	f003 0307 	and.w	r3, r3, #7
 80043ae:	b2da      	uxtb	r2, r3
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	089b      	lsrs	r3, r3, #2
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	f003 0307 	and.w	r3, r3, #7
 80043be:	b2da      	uxtb	r2, r3
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	005b      	lsls	r3, r3, #1
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	f003 0306 	and.w	r3, r3, #6
 80043d0:	b2da      	uxtb	r2, r3
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043da:	0a1b      	lsrs	r3, r3, #8
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	7e1b      	ldrb	r3, [r3, #24]
 80043e4:	b2da      	uxtb	r2, r3
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	09db      	lsrs	r3, r3, #7
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	f003 0301 	and.w	r3, r3, #1
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	4313      	orrs	r3, r2
 80043f4:	b2da      	uxtb	r2, r3
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	1c5a      	adds	r2, r3, #1
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	7e1b      	ldrb	r3, [r3, #24]
 8004408:	b2db      	uxtb	r3, r3
 800440a:	3302      	adds	r3, #2
 800440c:	2201      	movs	r2, #1
 800440e:	409a      	lsls	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004414:	fb02 f203 	mul.w	r2, r2, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	7a1b      	ldrb	r3, [r3, #8]
 8004420:	b2db      	uxtb	r3, r3
 8004422:	461a      	mov	r2, r3
 8004424:	2301      	movs	r3, #1
 8004426:	4093      	lsls	r3, r2
 8004428:	461a      	mov	r2, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004436:	0a52      	lsrs	r2, r2, #9
 8004438:	fb02 f203 	mul.w	r2, r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004446:	661a      	str	r2, [r3, #96]	; 0x60
 8004448:	e04d      	b.n	80044e6 <HAL_SD_GetCardCSD+0x2c0>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800444e:	2b01      	cmp	r3, #1
 8004450:	d138      	bne.n	80044c4 <HAL_SD_GetCardCSD+0x29e>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004456:	b2db      	uxtb	r3, r3
 8004458:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	041b      	lsls	r3, r3, #16
 800445e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800446a:	0e1b      	lsrs	r3, r3, #24
 800446c:	b2db      	uxtb	r3, r3
 800446e:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8);
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	691a      	ldr	r2, [r3, #16]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	021b      	lsls	r3, r3, #8
 8004478:	431a      	orrs	r2, r3
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004482:	0c1b      	lsrs	r3, r3, #16
 8004484:	b2db      	uxtb	r3, r3
 8004486:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	691a      	ldr	r2, [r3, #16]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	431a      	orrs	r2, r3
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004498:	0a1b      	lsrs	r3, r3, #8
 800449a:	b2db      	uxtb	r3, r3
 800449c:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	3301      	adds	r3, #1
 80044a4:	029a      	lsls	r2, r3, #10
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	655a      	str	r2, [r3, #84]	; 0x54
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044b8:	659a      	str	r2, [r3, #88]	; 0x58
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	661a      	str	r2, [r3, #96]	; 0x60
 80044c2:	e010      	b.n	80044e6 <HAL_SD_GetCardCSD+0x2c0>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80044cc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2201      	movs	r2, #1
 80044de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e0c1      	b.n	800466a <HAL_SD_GetCardCSD+0x444>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	099b      	lsrs	r3, r3, #6
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	f003 0301 	and.w	r3, r3, #1
 80044f0:	b2da      	uxtb	r2, r3
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	005b      	lsls	r3, r3, #1
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8004502:	b2da      	uxtb	r2, r3
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800450c:	b2db      	uxtb	r3, r3
 800450e:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	7e9b      	ldrb	r3, [r3, #26]
 8004514:	b2da      	uxtb	r2, r3
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	09db      	lsrs	r3, r3, #7
 800451a:	b2db      	uxtb	r3, r3
 800451c:	f003 0301 	and.w	r3, r3, #1
 8004520:	b2db      	uxtb	r3, r3
 8004522:	4313      	orrs	r3, r2
 8004524:	b2da      	uxtb	r2, r3
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	b2db      	uxtb	r3, r3
 800452e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004532:	b2da      	uxtb	r2, r3
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000U) >> 24);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800453c:	0e1b      	lsrs	r3, r3, #24
 800453e:	b2db      	uxtb	r3, r3
 8004540:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	09db      	lsrs	r3, r3, #7
 8004546:	b2db      	uxtb	r3, r3
 8004548:	f003 0301 	and.w	r3, r3, #1
 800454c:	b2da      	uxtb	r2, r3
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	095b      	lsrs	r3, r3, #5
 8004556:	b2db      	uxtb	r3, r3
 8004558:	f003 0303 	and.w	r3, r3, #3
 800455c:	b2da      	uxtb	r2, r3
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	089b      	lsrs	r3, r3, #2
 8004566:	b2db      	uxtb	r3, r3
 8004568:	f003 0307 	and.w	r3, r3, #7
 800456c:	b2da      	uxtb	r2, r3
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	b2db      	uxtb	r3, r3
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	b2db      	uxtb	r3, r3
 800457a:	f003 030c 	and.w	r3, r3, #12
 800457e:	b2da      	uxtb	r2, r3
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x00FF0000) >> 16);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004588:	0c1b      	lsrs	r3, r3, #16
 800458a:	b2db      	uxtb	r3, r3
 800458c:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	7fdb      	ldrb	r3, [r3, #31]
 8004592:	b2da      	uxtb	r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	099b      	lsrs	r3, r3, #6
 8004598:	b2db      	uxtb	r3, r3
 800459a:	f003 0303 	and.w	r3, r3, #3
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	4313      	orrs	r3, r2
 80045a2:	b2da      	uxtb	r2, r3
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	095b      	lsrs	r3, r3, #5
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	f003 0301 	and.w	r3, r3, #1
 80045b2:	b2da      	uxtb	r2, r3
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0;
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	b2da      	uxtb	r2, r3
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x0000FF00) >> 8);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d6:	0a1b      	lsrs	r3, r3, #8
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	09db      	lsrs	r3, r3, #7
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	f003 0301 	and.w	r3, r3, #1
 80045e6:	b2da      	uxtb	r2, r3
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	099b      	lsrs	r3, r3, #6
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	f003 0301 	and.w	r3, r3, #1
 80045f8:	b2da      	uxtb	r2, r3
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	095b      	lsrs	r3, r3, #5
 8004604:	b2db      	uxtb	r3, r3
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	b2da      	uxtb	r2, r3
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	091b      	lsrs	r3, r3, #4
 8004616:	b2db      	uxtb	r3, r3
 8004618:	f003 0301 	and.w	r3, r3, #1
 800461c:	b2da      	uxtb	r2, r3
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	089b      	lsrs	r3, r3, #2
 8004628:	b2db      	uxtb	r3, r3
 800462a:	f003 0303 	and.w	r3, r3, #3
 800462e:	b2da      	uxtb	r2, r3
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	b2db      	uxtb	r3, r3
 800463a:	f003 0303 	and.w	r3, r3, #3
 800463e:	b2da      	uxtb	r2, r3
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3] & 0x000000FF);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800464a:	b2db      	uxtb	r3, r3
 800464c:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	085b      	lsrs	r3, r3, #1
 8004652:	b2db      	uxtb	r3, r3
 8004654:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004658:	b2da      	uxtb	r2, r3
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	3714      	adds	r7, #20
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr

08004676 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8004676:	b5b0      	push	{r4, r5, r7, lr}
 8004678:	b08e      	sub	sp, #56	; 0x38
 800467a:	af04      	add	r7, sp, #16
 800467c:	6078      	str	r0, [r7, #4]
 800467e:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8004680:	2300      	movs	r3, #0
 8004682:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2203      	movs	r2, #3
 8004688:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004690:	2b03      	cmp	r3, #3
 8004692:	d02e      	beq.n	80046f2 <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800469a:	d106      	bne.n	80046aa <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	639a      	str	r2, [r3, #56]	; 0x38
 80046a8:	e029      	b.n	80046fe <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046b0:	d10a      	bne.n	80046c8 <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 f9cc 	bl	8004a50 <SD_WideBus_Enable>
 80046b8:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c0:	431a      	orrs	r2, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	639a      	str	r2, [r3, #56]	; 0x38
 80046c6:	e01a      	b.n	80046fe <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d10a      	bne.n	80046e4 <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 fa0b 	bl	8004aea <SD_WideBus_Disable>
 80046d4:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046dc:	431a      	orrs	r2, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	639a      	str	r2, [r3, #56]	; 0x38
 80046e2:	e00c      	b.n	80046fe <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	639a      	str	r2, [r3, #56]	; 0x38
 80046f0:	e005      	b.n	80046fe <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00a      	beq.n	800471c <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800470e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e024      	b.n	8004766 <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	623b      	str	r3, [r7, #32]
    SDMMC_Init(hsd->Instance, Init);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681d      	ldr	r5, [r3, #0]
 8004742:	466c      	mov	r4, sp
 8004744:	f107 0318 	add.w	r3, r7, #24
 8004748:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800474c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004750:	f107 030c 	add.w	r3, r7, #12
 8004754:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004756:	4628      	mov	r0, r5
 8004758:	f001 f9e0 	bl	8005b1c <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3728      	adds	r7, #40	; 0x28
 800476a:	46bd      	mov	sp, r7
 800476c:	bdb0      	pop	{r4, r5, r7, pc}

0800476e <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800476e:	b5b0      	push	{r4, r5, r7, lr}
 8004770:	b094      	sub	sp, #80	; 0x50
 8004772:	af04      	add	r7, sp, #16
 8004774:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8004776:	2300      	movs	r3, #0
 8004778:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1;
 800477a:	2301      	movs	r3, #1
 800477c:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4618      	mov	r0, r3
 8004784:	f001 fa11 	bl	8005baa <SDMMC_GetPowerState>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d102      	bne.n	8004794 <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800478e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004792:	e0b1      	b.n	80048f8 <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004798:	2b03      	cmp	r3, #3
 800479a:	d02f      	beq.n	80047fc <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4618      	mov	r0, r3
 80047a2:	f001 fba4 	bl	8005eee <SDMMC_CmdSendCID>
 80047a6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80047a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d001      	beq.n	80047b2 <SD_InitCard+0x44>
    {
      return errorstate;
 80047ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047b0:	e0a2      	b.n	80048f8 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2100      	movs	r1, #0
 80047b8:	4618      	mov	r0, r3
 80047ba:	f001 fa3c 	bl	8005c36 <SDMMC_GetResponse>
 80047be:	4602      	mov	r2, r0
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2104      	movs	r1, #4
 80047ca:	4618      	mov	r0, r3
 80047cc:	f001 fa33 	bl	8005c36 <SDMMC_GetResponse>
 80047d0:	4602      	mov	r2, r0
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2108      	movs	r1, #8
 80047dc:	4618      	mov	r0, r3
 80047de:	f001 fa2a 	bl	8005c36 <SDMMC_GetResponse>
 80047e2:	4602      	mov	r2, r0
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	210c      	movs	r1, #12
 80047ee:	4618      	mov	r0, r3
 80047f0:	f001 fa21 	bl	8005c36 <SDMMC_GetResponse>
 80047f4:	4602      	mov	r2, r0
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004800:	2b03      	cmp	r3, #3
 8004802:	d00d      	beq.n	8004820 <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f107 020e 	add.w	r2, r7, #14
 800480c:	4611      	mov	r1, r2
 800480e:	4618      	mov	r0, r3
 8004810:	f001 fbae 	bl	8005f70 <SDMMC_CmdSetRelAdd>
 8004814:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004818:	2b00      	cmp	r3, #0
 800481a:	d001      	beq.n	8004820 <SD_InitCard+0xb2>
    {
      return errorstate;
 800481c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800481e:	e06b      	b.n	80048f8 <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004824:	2b03      	cmp	r3, #3
 8004826:	d036      	beq.n	8004896 <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004828:	89fb      	ldrh	r3, [r7, #14]
 800482a:	461a      	mov	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004838:	041b      	lsls	r3, r3, #16
 800483a:	4619      	mov	r1, r3
 800483c:	4610      	mov	r0, r2
 800483e:	f001 fb76 	bl	8005f2e <SDMMC_CmdSendCSD>
 8004842:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004846:	2b00      	cmp	r3, #0
 8004848:	d001      	beq.n	800484e <SD_InitCard+0xe0>
    {
      return errorstate;
 800484a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800484c:	e054      	b.n	80048f8 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2100      	movs	r1, #0
 8004854:	4618      	mov	r0, r3
 8004856:	f001 f9ee 	bl	8005c36 <SDMMC_GetResponse>
 800485a:	4602      	mov	r2, r0
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2104      	movs	r1, #4
 8004866:	4618      	mov	r0, r3
 8004868:	f001 f9e5 	bl	8005c36 <SDMMC_GetResponse>
 800486c:	4602      	mov	r2, r0
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2108      	movs	r1, #8
 8004878:	4618      	mov	r0, r3
 800487a:	f001 f9dc 	bl	8005c36 <SDMMC_GetResponse>
 800487e:	4602      	mov	r2, r0
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	210c      	movs	r1, #12
 800488a:	4618      	mov	r0, r3
 800488c:	f001 f9d3 	bl	8005c36 <SDMMC_GetResponse>
 8004890:	4602      	mov	r2, r0
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2104      	movs	r1, #4
 800489c:	4618      	mov	r0, r3
 800489e:	f001 f9ca 	bl	8005c36 <SDMMC_GetResponse>
 80048a2:	4603      	mov	r3, r0
 80048a4:	0d1a      	lsrs	r2, r3, #20
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 80048aa:	f107 0310 	add.w	r3, r7, #16
 80048ae:	4619      	mov	r1, r3
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f7ff fcb8 	bl	8004226 <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6819      	ldr	r1, [r3, #0]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048be:	041b      	lsls	r3, r3, #16
 80048c0:	f04f 0400 	mov.w	r4, #0
 80048c4:	461a      	mov	r2, r3
 80048c6:	4623      	mov	r3, r4
 80048c8:	4608      	mov	r0, r1
 80048ca:	f001 fa19 	bl	8005d00 <SDMMC_CmdSelDesel>
 80048ce:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80048d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d001      	beq.n	80048da <SD_InitCard+0x16c>
  {
    return errorstate;
 80048d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048d8:	e00e      	b.n	80048f8 <SD_InitCard+0x18a>
  }

  /* Configure SDMMC peripheral interface */     
  SDMMC_Init(hsd->Instance, hsd->Init);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681d      	ldr	r5, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	466c      	mov	r4, sp
 80048e2:	f103 0210 	add.w	r2, r3, #16
 80048e6:	ca07      	ldmia	r2, {r0, r1, r2}
 80048e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80048ec:	3304      	adds	r3, #4
 80048ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80048f0:	4628      	mov	r0, r5
 80048f2:	f001 f913 	bl	8005b1c <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80048f6:	2300      	movs	r3, #0
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3740      	adds	r7, #64	; 0x40
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bdb0      	pop	{r4, r5, r7, pc}

08004900 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b086      	sub	sp, #24
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8004908:	2300      	movs	r3, #0
 800490a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0, validvoltage = 0;
 800490c:	2300      	movs	r3, #0
 800490e:	617b      	str	r3, [r7, #20]
 8004910:	2300      	movs	r3, #0
 8004912:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8004914:	2300      	movs	r3, #0
 8004916:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4618      	mov	r0, r3
 800491e:	f001 fa14 	bl	8005d4a <SDMMC_CmdGoIdleState>
 8004922:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d001      	beq.n	800492e <SD_PowerON+0x2e>
  {
    return errorstate;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	e08c      	b.n	8004a48 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4618      	mov	r0, r3
 8004934:	f001 fa29 	bl	8005d8a <SDMMC_CmdOperCond>
 8004938:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d03d      	beq.n	80049bc <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 8004946:	e032      	b.n	80049ae <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	1c5a      	adds	r2, r3, #1
 800494c:	60ba      	str	r2, [r7, #8]
 800494e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004952:	4293      	cmp	r3, r2
 8004954:	d102      	bne.n	800495c <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004956:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800495a:	e075      	b.n	8004a48 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2100      	movs	r1, #0
 8004962:	4618      	mov	r0, r3
 8004964:	f001 fa32 	bl	8005dcc <SDMMC_CmdAppCommand>
 8004968:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d002      	beq.n	8004976 <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004970:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004974:	e068      	b.n	8004a48 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2100      	movs	r1, #0
 800497c:	4618      	mov	r0, r3
 800497e:	f001 fa49 	bl	8005e14 <SDMMC_CmdAppOperCommand>
 8004982:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d002      	beq.n	8004990 <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800498a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800498e:	e05b      	b.n	8004a48 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2100      	movs	r1, #0
 8004996:	4618      	mov	r0, r3
 8004998:	f001 f94d 	bl	8005c36 <SDMMC_GetResponse>
 800499c:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	0fdb      	lsrs	r3, r3, #31
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	bf0c      	ite	eq
 80049a6:	2301      	moveq	r3, #1
 80049a8:	2300      	movne	r3, #0
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d0c9      	beq.n	8004948 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	645a      	str	r2, [r3, #68]	; 0x44
 80049ba:	e044      	b.n	8004a46 <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 80049c2:	e031      	b.n	8004a28 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	1c5a      	adds	r2, r3, #1
 80049c8:	60ba      	str	r2, [r7, #8]
 80049ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d102      	bne.n	80049d8 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80049d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80049d6:	e037      	b.n	8004a48 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2100      	movs	r1, #0
 80049de:	4618      	mov	r0, r3
 80049e0:	f001 f9f4 	bl	8005dcc <SDMMC_CmdAppCommand>
 80049e4:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d001      	beq.n	80049f0 <SD_PowerON+0xf0>
      {
        return errorstate;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	e02b      	b.n	8004a48 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80049f8:	4618      	mov	r0, r3
 80049fa:	f001 fa0b 	bl	8005e14 <SDMMC_CmdAppOperCommand>
 80049fe:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d001      	beq.n	8004a0a <SD_PowerON+0x10a>
      {
        return errorstate;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	e01e      	b.n	8004a48 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	2100      	movs	r1, #0
 8004a10:	4618      	mov	r0, r3
 8004a12:	f001 f910 	bl	8005c36 <SDMMC_GetResponse>
 8004a16:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	0fdb      	lsrs	r3, r3, #31
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	bf0c      	ite	eq
 8004a20:	2301      	moveq	r3, #1
 8004a22:	2300      	movne	r3, #0
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d0ca      	beq.n	80049c4 <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d003      	beq.n	8004a40 <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	645a      	str	r2, [r3, #68]	; 0x44
 8004a3e:	e002      	b.n	8004a46 <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3718      	adds	r7, #24
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b086      	sub	sp, #24
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  uint32_t scr[2] = {0, 0};
 8004a58:	2300      	movs	r3, #0
 8004a5a:	60fb      	str	r3, [r7, #12]
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8004a60:	2300      	movs	r3, #0
 8004a62:	617b      	str	r3, [r7, #20]
  
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2100      	movs	r1, #0
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f001 f8e3 	bl	8005c36 <SDMMC_GetResponse>
 8004a70:	4603      	mov	r3, r0
 8004a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a7a:	d102      	bne.n	8004a82 <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004a7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a80:	e02f      	b.n	8004ae2 <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004a82:	f107 030c 	add.w	r3, r7, #12
 8004a86:	4619      	mov	r1, r3
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f000 f87b 	bl	8004b84 <SD_FindSCR>
 8004a8e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d001      	beq.n	8004a9a <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	e023      	b.n	8004ae2 <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d01c      	beq.n	8004ade <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aac:	041b      	lsls	r3, r3, #16
 8004aae:	4619      	mov	r1, r3
 8004ab0:	4610      	mov	r0, r2
 8004ab2:	f001 f98b 	bl	8005dcc <SDMMC_CmdAppCommand>
 8004ab6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d001      	beq.n	8004ac2 <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	e00f      	b.n	8004ae2 <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	2102      	movs	r1, #2
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f001 f9c9 	bl	8005e60 <SDMMC_CmdBusWidth>
 8004ace:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d001      	beq.n	8004ada <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	e003      	b.n	8004ae2 <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 8004ada:	2300      	movs	r3, #0
 8004adc:	e001      	b.n	8004ae2 <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004ade:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3718      	adds	r7, #24
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}

08004aea <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b086      	sub	sp, #24
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2] = {0, 0};
 8004af2:	2300      	movs	r3, #0
 8004af4:	60fb      	str	r3, [r7, #12]
 8004af6:	2300      	movs	r3, #0
 8004af8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8004afa:	2300      	movs	r3, #0
 8004afc:	617b      	str	r3, [r7, #20]
  
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	2100      	movs	r1, #0
 8004b04:	4618      	mov	r0, r3
 8004b06:	f001 f896 	bl	8005c36 <SDMMC_GetResponse>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b14:	d102      	bne.n	8004b1c <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004b16:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004b1a:	e02f      	b.n	8004b7c <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004b1c:	f107 030c 	add.w	r3, r7, #12
 8004b20:	4619      	mov	r1, r3
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 f82e 	bl	8004b84 <SD_FindSCR>
 8004b28:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d001      	beq.n	8004b34 <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	e023      	b.n	8004b7c <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d01c      	beq.n	8004b78 <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b46:	041b      	lsls	r3, r3, #16
 8004b48:	4619      	mov	r1, r3
 8004b4a:	4610      	mov	r0, r2
 8004b4c:	f001 f93e 	bl	8005dcc <SDMMC_CmdAppCommand>
 8004b50:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d001      	beq.n	8004b5c <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	e00f      	b.n	8004b7c <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	2100      	movs	r1, #0
 8004b62:	4618      	mov	r0, r3
 8004b64:	f001 f97c 	bl	8005e60 <SDMMC_CmdBusWidth>
 8004b68:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d001      	beq.n	8004b74 <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	e003      	b.n	8004b7c <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 8004b74:	2300      	movs	r3, #0
 8004b76:	e001      	b.n	8004b7c <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004b78:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3718      	adds	r7, #24
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004b84:	b590      	push	{r4, r7, lr}
 8004b86:	b08f      	sub	sp, #60	; 0x3c
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8004b92:	f7fd f9ed 	bl	8001f70 <HAL_GetTick>
 8004b96:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2] = {0, 0};
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	60fb      	str	r3, [r7, #12]
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2108      	movs	r1, #8
 8004baa:	4618      	mov	r0, r3
 8004bac:	f001 f884 	bl	8005cb8 <SDMMC_CmdBlockLength>
 8004bb0:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8004bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d001      	beq.n	8004bbc <SD_FindSCR+0x38>
  {
    return errorstate;
 8004bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bba:	e0a8      	b.n	8004d0e <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16));
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bc4:	041b      	lsls	r3, r3, #16
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	4610      	mov	r0, r2
 8004bca:	f001 f8ff 	bl	8005dcc <SDMMC_CmdAppCommand>
 8004bce:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8004bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d001      	beq.n	8004bda <SD_FindSCR+0x56>
  {
    return errorstate;
 8004bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd8:	e099      	b.n	8004d0e <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004bda:	f04f 33ff 	mov.w	r3, #4294967295
 8004bde:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8;
 8004be0:	2308      	movs	r3, #8
 8004be2:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8004be4:	2330      	movs	r3, #48	; 0x30
 8004be6:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004be8:	2302      	movs	r3, #2
 8004bea:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004bec:	2300      	movs	r3, #0
 8004bee:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	62bb      	str	r3, [r7, #40]	; 0x28
  SDMMC_ConfigData(hsd->Instance, &config);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f107 0214 	add.w	r2, r7, #20
 8004bfc:	4611      	mov	r1, r2
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f001 f82e 	bl	8005c60 <SDMMC_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f001 f94d 	bl	8005ea8 <SDMMC_CmdSendSCR>
 8004c0e:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8004c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d022      	beq.n	8004c5c <SD_FindSCR+0xd8>
  {
    return errorstate;
 8004c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c18:	e079      	b.n	8004d0e <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00e      	beq.n	8004c46 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6819      	ldr	r1, [r3, #0]
 8004c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	f107 020c 	add.w	r2, r7, #12
 8004c34:	18d4      	adds	r4, r2, r3
 8004c36:	4608      	mov	r0, r1
 8004c38:	f000 ff9c 	bl	8005b74 <SDMMC_ReadFIFO>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	6023      	str	r3, [r4, #0]
      index++;
 8004c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c42:	3301      	adds	r3, #1
 8004c44:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004c46:	f7fd f993 	bl	8001f70 <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c54:	d102      	bne.n	8004c5c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004c56:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004c5a:	e058      	b.n	8004d0e <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c62:	f240 432a 	movw	r3, #1066	; 0x42a
 8004c66:	4013      	ands	r3, r2
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d0d6      	beq.n	8004c1a <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c72:	f003 0308 	and.w	r3, r3, #8
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d005      	beq.n	8004c86 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2208      	movs	r2, #8
 8004c80:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004c82:	2308      	movs	r3, #8
 8004c84:	e043      	b.n	8004d0e <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c8c:	f003 0302 	and.w	r3, r3, #2
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d005      	beq.n	8004ca0 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2202      	movs	r2, #2
 8004c9a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004c9c:	2302      	movs	r3, #2
 8004c9e:	e036      	b.n	8004d0e <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ca6:	f003 0320 	and.w	r3, r3, #32
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d005      	beq.n	8004cba <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	2220      	movs	r2, #32
 8004cb4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 8004cb6:	2320      	movs	r3, #32
 8004cb8:	e029      	b.n	8004d0e <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004cc2:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	061a      	lsls	r2, r3, #24
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	021b      	lsls	r3, r3, #8
 8004ccc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004cd0:	431a      	orrs	r2, r3
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	0a1b      	lsrs	r3, r3, #8
 8004cd6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004cda:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	3304      	adds	r3, #4
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 8004ce6:	430a      	orrs	r2, r1
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004ce8:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	061a      	lsls	r2, r3, #24
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	021b      	lsls	r3, r3, #8
 8004cf2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004cf6:	431a      	orrs	r2, r3
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	0a1b      	lsrs	r3, r3, #8
 8004cfc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004d00:	431a      	orrs	r2, r3
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	0e1b      	lsrs	r3, r3, #24
 8004d06:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	373c      	adds	r7, #60	; 0x3c
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd90      	pop	{r4, r7, pc}

08004d16 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d16:	b580      	push	{r7, lr}
 8004d18:	b084      	sub	sp, #16
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d101      	bne.n	8004d28 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e084      	b.n	8004e32 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d106      	bne.n	8004d48 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f7fc fca8 	bl	8001698 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2202      	movs	r2, #2
 8004d4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d5e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d68:	d902      	bls.n	8004d70 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	60fb      	str	r3, [r7, #12]
 8004d6e:	e002      	b.n	8004d76 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004d70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d74:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004d7e:	d007      	beq.n	8004d90 <HAL_SPI_Init+0x7a>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d88:	d002      	beq.n	8004d90 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d10b      	bne.n	8004db0 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004da0:	d903      	bls.n	8004daa <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2202      	movs	r2, #2
 8004da6:	631a      	str	r2, [r3, #48]	; 0x30
 8004da8:	e002      	b.n	8004db0 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2201      	movs	r2, #1
 8004dae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	685a      	ldr	r2, [r3, #4]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	431a      	orrs	r2, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	431a      	orrs	r2, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	695b      	ldr	r3, [r3, #20]
 8004dc4:	431a      	orrs	r2, r3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dce:	431a      	orrs	r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	69db      	ldr	r3, [r3, #28]
 8004dd4:	431a      	orrs	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a1b      	ldr	r3, [r3, #32]
 8004dda:	ea42 0103 	orr.w	r1, r2, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	430a      	orrs	r2, r1
 8004de8:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	699b      	ldr	r3, [r3, #24]
 8004dee:	0c1b      	lsrs	r3, r3, #16
 8004df0:	f003 0204 	and.w	r2, r3, #4
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df8:	431a      	orrs	r2, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dfe:	431a      	orrs	r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	ea42 0103 	orr.w	r1, r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	430a      	orrs	r2, r1
 8004e10:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	69da      	ldr	r2, [r3, #28]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e20:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3710      	adds	r7, #16
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}

08004e3a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e3a:	b580      	push	{r7, lr}
 8004e3c:	b082      	sub	sp, #8
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d101      	bne.n	8004e4c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e01d      	b.n	8004e88 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d106      	bne.n	8004e66 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f000 f815 	bl	8004e90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2202      	movs	r2, #2
 8004e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	3304      	adds	r3, #4
 8004e76:	4619      	mov	r1, r3
 8004e78:	4610      	mov	r0, r2
 8004e7a:	f000 f985 	bl	8005188 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2201      	movs	r2, #1
 8004e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e86:	2300      	movs	r3, #0
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3708      	adds	r7, #8
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004e98:	bf00      	nop
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b085      	sub	sp, #20
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68da      	ldr	r2, [r3, #12]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f042 0201 	orr.w	r2, r2, #1
 8004eba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	689a      	ldr	r2, [r3, #8]
 8004ec2:	4b0c      	ldr	r3, [pc, #48]	; (8004ef4 <HAL_TIM_Base_Start_IT+0x50>)
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2b06      	cmp	r3, #6
 8004ecc:	d00b      	beq.n	8004ee6 <HAL_TIM_Base_Start_IT+0x42>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ed4:	d007      	beq.n	8004ee6 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f042 0201 	orr.w	r2, r2, #1
 8004ee4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ee6:	2300      	movs	r3, #0
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3714      	adds	r7, #20
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr
 8004ef4:	00010007 	.word	0x00010007

08004ef8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	f003 0302 	and.w	r3, r3, #2
 8004f0a:	2b02      	cmp	r3, #2
 8004f0c:	d122      	bne.n	8004f54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	f003 0302 	and.w	r3, r3, #2
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d11b      	bne.n	8004f54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f06f 0202 	mvn.w	r2, #2
 8004f24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	699b      	ldr	r3, [r3, #24]
 8004f32:	f003 0303 	and.w	r3, r3, #3
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d003      	beq.n	8004f42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 f905 	bl	800514a <HAL_TIM_IC_CaptureCallback>
 8004f40:	e005      	b.n	8004f4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 f8f7 	bl	8005136 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f000 f908 	bl	800515e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	f003 0304 	and.w	r3, r3, #4
 8004f5e:	2b04      	cmp	r3, #4
 8004f60:	d122      	bne.n	8004fa8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	f003 0304 	and.w	r3, r3, #4
 8004f6c:	2b04      	cmp	r3, #4
 8004f6e:	d11b      	bne.n	8004fa8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f06f 0204 	mvn.w	r2, #4
 8004f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2202      	movs	r2, #2
 8004f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	699b      	ldr	r3, [r3, #24]
 8004f86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d003      	beq.n	8004f96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 f8db 	bl	800514a <HAL_TIM_IC_CaptureCallback>
 8004f94:	e005      	b.n	8004fa2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 f8cd 	bl	8005136 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f000 f8de 	bl	800515e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	f003 0308 	and.w	r3, r3, #8
 8004fb2:	2b08      	cmp	r3, #8
 8004fb4:	d122      	bne.n	8004ffc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	f003 0308 	and.w	r3, r3, #8
 8004fc0:	2b08      	cmp	r3, #8
 8004fc2:	d11b      	bne.n	8004ffc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f06f 0208 	mvn.w	r2, #8
 8004fcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2204      	movs	r2, #4
 8004fd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	69db      	ldr	r3, [r3, #28]
 8004fda:	f003 0303 	and.w	r3, r3, #3
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d003      	beq.n	8004fea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 f8b1 	bl	800514a <HAL_TIM_IC_CaptureCallback>
 8004fe8:	e005      	b.n	8004ff6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 f8a3 	bl	8005136 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f000 f8b4 	bl	800515e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	f003 0310 	and.w	r3, r3, #16
 8005006:	2b10      	cmp	r3, #16
 8005008:	d122      	bne.n	8005050 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	f003 0310 	and.w	r3, r3, #16
 8005014:	2b10      	cmp	r3, #16
 8005016:	d11b      	bne.n	8005050 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f06f 0210 	mvn.w	r2, #16
 8005020:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2208      	movs	r2, #8
 8005026:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	69db      	ldr	r3, [r3, #28]
 800502e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005032:	2b00      	cmp	r3, #0
 8005034:	d003      	beq.n	800503e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 f887 	bl	800514a <HAL_TIM_IC_CaptureCallback>
 800503c:	e005      	b.n	800504a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 f879 	bl	8005136 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f000 f88a 	bl	800515e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	f003 0301 	and.w	r3, r3, #1
 800505a:	2b01      	cmp	r3, #1
 800505c:	d10e      	bne.n	800507c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	f003 0301 	and.w	r3, r3, #1
 8005068:	2b01      	cmp	r3, #1
 800506a:	d107      	bne.n	800507c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f06f 0201 	mvn.w	r2, #1
 8005074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f7fc f958 	bl	800132c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005086:	2b80      	cmp	r3, #128	; 0x80
 8005088:	d10e      	bne.n	80050a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005094:	2b80      	cmp	r3, #128	; 0x80
 8005096:	d107      	bne.n	80050a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80050a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f000 f91a 	bl	80052dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050b6:	d10e      	bne.n	80050d6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050c2:	2b80      	cmp	r3, #128	; 0x80
 80050c4:	d107      	bne.n	80050d6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80050ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 f90d 	bl	80052f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050e0:	2b40      	cmp	r3, #64	; 0x40
 80050e2:	d10e      	bne.n	8005102 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ee:	2b40      	cmp	r3, #64	; 0x40
 80050f0:	d107      	bne.n	8005102 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80050fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f000 f838 	bl	8005172 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	691b      	ldr	r3, [r3, #16]
 8005108:	f003 0320 	and.w	r3, r3, #32
 800510c:	2b20      	cmp	r3, #32
 800510e:	d10e      	bne.n	800512e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	f003 0320 	and.w	r3, r3, #32
 800511a:	2b20      	cmp	r3, #32
 800511c:	d107      	bne.n	800512e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f06f 0220 	mvn.w	r2, #32
 8005126:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f000 f8cd 	bl	80052c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800512e:	bf00      	nop
 8005130:	3708      	adds	r7, #8
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}

08005136 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005136:	b480      	push	{r7}
 8005138:	b083      	sub	sp, #12
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800513e:	bf00      	nop
 8005140:	370c      	adds	r7, #12
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr

0800514a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800514a:	b480      	push	{r7}
 800514c:	b083      	sub	sp, #12
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005152:	bf00      	nop
 8005154:	370c      	adds	r7, #12
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr

0800515e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800515e:	b480      	push	{r7}
 8005160:	b083      	sub	sp, #12
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005166:	bf00      	nop
 8005168:	370c      	adds	r7, #12
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr

08005172 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005172:	b480      	push	{r7}
 8005174:	b083      	sub	sp, #12
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800517a:	bf00      	nop
 800517c:	370c      	adds	r7, #12
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr
	...

08005188 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005188:	b480      	push	{r7}
 800518a:	b085      	sub	sp, #20
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	4a40      	ldr	r2, [pc, #256]	; (800529c <TIM_Base_SetConfig+0x114>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d013      	beq.n	80051c8 <TIM_Base_SetConfig+0x40>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051a6:	d00f      	beq.n	80051c8 <TIM_Base_SetConfig+0x40>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4a3d      	ldr	r2, [pc, #244]	; (80052a0 <TIM_Base_SetConfig+0x118>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d00b      	beq.n	80051c8 <TIM_Base_SetConfig+0x40>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4a3c      	ldr	r2, [pc, #240]	; (80052a4 <TIM_Base_SetConfig+0x11c>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d007      	beq.n	80051c8 <TIM_Base_SetConfig+0x40>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4a3b      	ldr	r2, [pc, #236]	; (80052a8 <TIM_Base_SetConfig+0x120>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d003      	beq.n	80051c8 <TIM_Base_SetConfig+0x40>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4a3a      	ldr	r2, [pc, #232]	; (80052ac <TIM_Base_SetConfig+0x124>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d108      	bne.n	80051da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	68fa      	ldr	r2, [r7, #12]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4a2f      	ldr	r2, [pc, #188]	; (800529c <TIM_Base_SetConfig+0x114>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d02b      	beq.n	800523a <TIM_Base_SetConfig+0xb2>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051e8:	d027      	beq.n	800523a <TIM_Base_SetConfig+0xb2>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a2c      	ldr	r2, [pc, #176]	; (80052a0 <TIM_Base_SetConfig+0x118>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d023      	beq.n	800523a <TIM_Base_SetConfig+0xb2>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a2b      	ldr	r2, [pc, #172]	; (80052a4 <TIM_Base_SetConfig+0x11c>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d01f      	beq.n	800523a <TIM_Base_SetConfig+0xb2>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a2a      	ldr	r2, [pc, #168]	; (80052a8 <TIM_Base_SetConfig+0x120>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d01b      	beq.n	800523a <TIM_Base_SetConfig+0xb2>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a29      	ldr	r2, [pc, #164]	; (80052ac <TIM_Base_SetConfig+0x124>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d017      	beq.n	800523a <TIM_Base_SetConfig+0xb2>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a28      	ldr	r2, [pc, #160]	; (80052b0 <TIM_Base_SetConfig+0x128>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d013      	beq.n	800523a <TIM_Base_SetConfig+0xb2>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a27      	ldr	r2, [pc, #156]	; (80052b4 <TIM_Base_SetConfig+0x12c>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d00f      	beq.n	800523a <TIM_Base_SetConfig+0xb2>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a26      	ldr	r2, [pc, #152]	; (80052b8 <TIM_Base_SetConfig+0x130>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d00b      	beq.n	800523a <TIM_Base_SetConfig+0xb2>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a25      	ldr	r2, [pc, #148]	; (80052bc <TIM_Base_SetConfig+0x134>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d007      	beq.n	800523a <TIM_Base_SetConfig+0xb2>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a24      	ldr	r2, [pc, #144]	; (80052c0 <TIM_Base_SetConfig+0x138>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d003      	beq.n	800523a <TIM_Base_SetConfig+0xb2>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a23      	ldr	r2, [pc, #140]	; (80052c4 <TIM_Base_SetConfig+0x13c>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d108      	bne.n	800524c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005240:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	4313      	orrs	r3, r2
 800524a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	695b      	ldr	r3, [r3, #20]
 8005256:	4313      	orrs	r3, r2
 8005258:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	689a      	ldr	r2, [r3, #8]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a0a      	ldr	r2, [pc, #40]	; (800529c <TIM_Base_SetConfig+0x114>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d003      	beq.n	8005280 <TIM_Base_SetConfig+0xf8>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a0c      	ldr	r2, [pc, #48]	; (80052ac <TIM_Base_SetConfig+0x124>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d103      	bne.n	8005288 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	691a      	ldr	r2, [r3, #16]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	615a      	str	r2, [r3, #20]
}
 800528e:	bf00      	nop
 8005290:	3714      	adds	r7, #20
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr
 800529a:	bf00      	nop
 800529c:	40010000 	.word	0x40010000
 80052a0:	40000400 	.word	0x40000400
 80052a4:	40000800 	.word	0x40000800
 80052a8:	40000c00 	.word	0x40000c00
 80052ac:	40010400 	.word	0x40010400
 80052b0:	40014000 	.word	0x40014000
 80052b4:	40014400 	.word	0x40014400
 80052b8:	40014800 	.word	0x40014800
 80052bc:	40001800 	.word	0x40001800
 80052c0:	40001c00 	.word	0x40001c00
 80052c4:	40002000 	.word	0x40002000

080052c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052d0:	bf00      	nop
 80052d2:	370c      	adds	r7, #12
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052e4:	bf00      	nop
 80052e6:	370c      	adds	r7, #12
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr

080052f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80052f8:	bf00      	nop
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d101      	bne.n	8005316 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e040      	b.n	8005398 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800531a:	2b00      	cmp	r3, #0
 800531c:	d106      	bne.n	800532c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f7fc fabc 	bl	80018a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2224      	movs	r2, #36	; 0x24
 8005330:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f022 0201 	bic.w	r2, r2, #1
 8005340:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f000 f82c 	bl	80053a0 <UART_SetConfig>
 8005348:	4603      	mov	r3, r0
 800534a:	2b01      	cmp	r3, #1
 800534c:	d101      	bne.n	8005352 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e022      	b.n	8005398 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005356:	2b00      	cmp	r3, #0
 8005358:	d002      	beq.n	8005360 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 fac4 	bl	80058e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	685a      	ldr	r2, [r3, #4]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800536e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	689a      	ldr	r2, [r3, #8]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800537e:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f042 0201 	orr.w	r2, r2, #1
 800538e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f000 fb4b 	bl	8005a2c <UART_CheckIdleState>
 8005396:	4603      	mov	r3, r0
}
 8005398:	4618      	mov	r0, r3
 800539a:	3708      	adds	r7, #8
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b088      	sub	sp, #32
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80053a8:	2300      	movs	r3, #0
 80053aa:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80053ac:	2300      	movs	r3, #0
 80053ae:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	689a      	ldr	r2, [r3, #8]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	691b      	ldr	r3, [r3, #16]
 80053b8:	431a      	orrs	r2, r3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	695b      	ldr	r3, [r3, #20]
 80053be:	431a      	orrs	r2, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	69db      	ldr	r3, [r3, #28]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	4bb1      	ldr	r3, [pc, #708]	; (8005694 <UART_SetConfig+0x2f4>)
 80053d0:	4013      	ands	r3, r2
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	6812      	ldr	r2, [r2, #0]
 80053d6:	6939      	ldr	r1, [r7, #16]
 80053d8:	430b      	orrs	r3, r1
 80053da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	68da      	ldr	r2, [r3, #12]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	430a      	orrs	r2, r1
 80053f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	699b      	ldr	r3, [r3, #24]
 80053f6:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6a1b      	ldr	r3, [r3, #32]
 80053fc:	693a      	ldr	r2, [r7, #16]
 80053fe:	4313      	orrs	r3, r2
 8005400:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	693a      	ldr	r2, [r7, #16]
 8005412:	430a      	orrs	r2, r1
 8005414:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a9f      	ldr	r2, [pc, #636]	; (8005698 <UART_SetConfig+0x2f8>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d121      	bne.n	8005464 <UART_SetConfig+0xc4>
 8005420:	4b9e      	ldr	r3, [pc, #632]	; (800569c <UART_SetConfig+0x2fc>)
 8005422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005426:	f003 0303 	and.w	r3, r3, #3
 800542a:	2b03      	cmp	r3, #3
 800542c:	d816      	bhi.n	800545c <UART_SetConfig+0xbc>
 800542e:	a201      	add	r2, pc, #4	; (adr r2, 8005434 <UART_SetConfig+0x94>)
 8005430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005434:	08005445 	.word	0x08005445
 8005438:	08005451 	.word	0x08005451
 800543c:	0800544b 	.word	0x0800544b
 8005440:	08005457 	.word	0x08005457
 8005444:	2301      	movs	r3, #1
 8005446:	77fb      	strb	r3, [r7, #31]
 8005448:	e151      	b.n	80056ee <UART_SetConfig+0x34e>
 800544a:	2302      	movs	r3, #2
 800544c:	77fb      	strb	r3, [r7, #31]
 800544e:	e14e      	b.n	80056ee <UART_SetConfig+0x34e>
 8005450:	2304      	movs	r3, #4
 8005452:	77fb      	strb	r3, [r7, #31]
 8005454:	e14b      	b.n	80056ee <UART_SetConfig+0x34e>
 8005456:	2308      	movs	r3, #8
 8005458:	77fb      	strb	r3, [r7, #31]
 800545a:	e148      	b.n	80056ee <UART_SetConfig+0x34e>
 800545c:	2310      	movs	r3, #16
 800545e:	77fb      	strb	r3, [r7, #31]
 8005460:	bf00      	nop
 8005462:	e144      	b.n	80056ee <UART_SetConfig+0x34e>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a8d      	ldr	r2, [pc, #564]	; (80056a0 <UART_SetConfig+0x300>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d134      	bne.n	80054d8 <UART_SetConfig+0x138>
 800546e:	4b8b      	ldr	r3, [pc, #556]	; (800569c <UART_SetConfig+0x2fc>)
 8005470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005474:	f003 030c 	and.w	r3, r3, #12
 8005478:	2b0c      	cmp	r3, #12
 800547a:	d829      	bhi.n	80054d0 <UART_SetConfig+0x130>
 800547c:	a201      	add	r2, pc, #4	; (adr r2, 8005484 <UART_SetConfig+0xe4>)
 800547e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005482:	bf00      	nop
 8005484:	080054b9 	.word	0x080054b9
 8005488:	080054d1 	.word	0x080054d1
 800548c:	080054d1 	.word	0x080054d1
 8005490:	080054d1 	.word	0x080054d1
 8005494:	080054c5 	.word	0x080054c5
 8005498:	080054d1 	.word	0x080054d1
 800549c:	080054d1 	.word	0x080054d1
 80054a0:	080054d1 	.word	0x080054d1
 80054a4:	080054bf 	.word	0x080054bf
 80054a8:	080054d1 	.word	0x080054d1
 80054ac:	080054d1 	.word	0x080054d1
 80054b0:	080054d1 	.word	0x080054d1
 80054b4:	080054cb 	.word	0x080054cb
 80054b8:	2300      	movs	r3, #0
 80054ba:	77fb      	strb	r3, [r7, #31]
 80054bc:	e117      	b.n	80056ee <UART_SetConfig+0x34e>
 80054be:	2302      	movs	r3, #2
 80054c0:	77fb      	strb	r3, [r7, #31]
 80054c2:	e114      	b.n	80056ee <UART_SetConfig+0x34e>
 80054c4:	2304      	movs	r3, #4
 80054c6:	77fb      	strb	r3, [r7, #31]
 80054c8:	e111      	b.n	80056ee <UART_SetConfig+0x34e>
 80054ca:	2308      	movs	r3, #8
 80054cc:	77fb      	strb	r3, [r7, #31]
 80054ce:	e10e      	b.n	80056ee <UART_SetConfig+0x34e>
 80054d0:	2310      	movs	r3, #16
 80054d2:	77fb      	strb	r3, [r7, #31]
 80054d4:	bf00      	nop
 80054d6:	e10a      	b.n	80056ee <UART_SetConfig+0x34e>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a71      	ldr	r2, [pc, #452]	; (80056a4 <UART_SetConfig+0x304>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d120      	bne.n	8005524 <UART_SetConfig+0x184>
 80054e2:	4b6e      	ldr	r3, [pc, #440]	; (800569c <UART_SetConfig+0x2fc>)
 80054e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054e8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80054ec:	2b10      	cmp	r3, #16
 80054ee:	d00f      	beq.n	8005510 <UART_SetConfig+0x170>
 80054f0:	2b10      	cmp	r3, #16
 80054f2:	d802      	bhi.n	80054fa <UART_SetConfig+0x15a>
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d005      	beq.n	8005504 <UART_SetConfig+0x164>
 80054f8:	e010      	b.n	800551c <UART_SetConfig+0x17c>
 80054fa:	2b20      	cmp	r3, #32
 80054fc:	d005      	beq.n	800550a <UART_SetConfig+0x16a>
 80054fe:	2b30      	cmp	r3, #48	; 0x30
 8005500:	d009      	beq.n	8005516 <UART_SetConfig+0x176>
 8005502:	e00b      	b.n	800551c <UART_SetConfig+0x17c>
 8005504:	2300      	movs	r3, #0
 8005506:	77fb      	strb	r3, [r7, #31]
 8005508:	e0f1      	b.n	80056ee <UART_SetConfig+0x34e>
 800550a:	2302      	movs	r3, #2
 800550c:	77fb      	strb	r3, [r7, #31]
 800550e:	e0ee      	b.n	80056ee <UART_SetConfig+0x34e>
 8005510:	2304      	movs	r3, #4
 8005512:	77fb      	strb	r3, [r7, #31]
 8005514:	e0eb      	b.n	80056ee <UART_SetConfig+0x34e>
 8005516:	2308      	movs	r3, #8
 8005518:	77fb      	strb	r3, [r7, #31]
 800551a:	e0e8      	b.n	80056ee <UART_SetConfig+0x34e>
 800551c:	2310      	movs	r3, #16
 800551e:	77fb      	strb	r3, [r7, #31]
 8005520:	bf00      	nop
 8005522:	e0e4      	b.n	80056ee <UART_SetConfig+0x34e>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a5f      	ldr	r2, [pc, #380]	; (80056a8 <UART_SetConfig+0x308>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d120      	bne.n	8005570 <UART_SetConfig+0x1d0>
 800552e:	4b5b      	ldr	r3, [pc, #364]	; (800569c <UART_SetConfig+0x2fc>)
 8005530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005534:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005538:	2b40      	cmp	r3, #64	; 0x40
 800553a:	d00f      	beq.n	800555c <UART_SetConfig+0x1bc>
 800553c:	2b40      	cmp	r3, #64	; 0x40
 800553e:	d802      	bhi.n	8005546 <UART_SetConfig+0x1a6>
 8005540:	2b00      	cmp	r3, #0
 8005542:	d005      	beq.n	8005550 <UART_SetConfig+0x1b0>
 8005544:	e010      	b.n	8005568 <UART_SetConfig+0x1c8>
 8005546:	2b80      	cmp	r3, #128	; 0x80
 8005548:	d005      	beq.n	8005556 <UART_SetConfig+0x1b6>
 800554a:	2bc0      	cmp	r3, #192	; 0xc0
 800554c:	d009      	beq.n	8005562 <UART_SetConfig+0x1c2>
 800554e:	e00b      	b.n	8005568 <UART_SetConfig+0x1c8>
 8005550:	2300      	movs	r3, #0
 8005552:	77fb      	strb	r3, [r7, #31]
 8005554:	e0cb      	b.n	80056ee <UART_SetConfig+0x34e>
 8005556:	2302      	movs	r3, #2
 8005558:	77fb      	strb	r3, [r7, #31]
 800555a:	e0c8      	b.n	80056ee <UART_SetConfig+0x34e>
 800555c:	2304      	movs	r3, #4
 800555e:	77fb      	strb	r3, [r7, #31]
 8005560:	e0c5      	b.n	80056ee <UART_SetConfig+0x34e>
 8005562:	2308      	movs	r3, #8
 8005564:	77fb      	strb	r3, [r7, #31]
 8005566:	e0c2      	b.n	80056ee <UART_SetConfig+0x34e>
 8005568:	2310      	movs	r3, #16
 800556a:	77fb      	strb	r3, [r7, #31]
 800556c:	bf00      	nop
 800556e:	e0be      	b.n	80056ee <UART_SetConfig+0x34e>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a4d      	ldr	r2, [pc, #308]	; (80056ac <UART_SetConfig+0x30c>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d124      	bne.n	80055c4 <UART_SetConfig+0x224>
 800557a:	4b48      	ldr	r3, [pc, #288]	; (800569c <UART_SetConfig+0x2fc>)
 800557c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005580:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005584:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005588:	d012      	beq.n	80055b0 <UART_SetConfig+0x210>
 800558a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800558e:	d802      	bhi.n	8005596 <UART_SetConfig+0x1f6>
 8005590:	2b00      	cmp	r3, #0
 8005592:	d007      	beq.n	80055a4 <UART_SetConfig+0x204>
 8005594:	e012      	b.n	80055bc <UART_SetConfig+0x21c>
 8005596:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800559a:	d006      	beq.n	80055aa <UART_SetConfig+0x20a>
 800559c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055a0:	d009      	beq.n	80055b6 <UART_SetConfig+0x216>
 80055a2:	e00b      	b.n	80055bc <UART_SetConfig+0x21c>
 80055a4:	2300      	movs	r3, #0
 80055a6:	77fb      	strb	r3, [r7, #31]
 80055a8:	e0a1      	b.n	80056ee <UART_SetConfig+0x34e>
 80055aa:	2302      	movs	r3, #2
 80055ac:	77fb      	strb	r3, [r7, #31]
 80055ae:	e09e      	b.n	80056ee <UART_SetConfig+0x34e>
 80055b0:	2304      	movs	r3, #4
 80055b2:	77fb      	strb	r3, [r7, #31]
 80055b4:	e09b      	b.n	80056ee <UART_SetConfig+0x34e>
 80055b6:	2308      	movs	r3, #8
 80055b8:	77fb      	strb	r3, [r7, #31]
 80055ba:	e098      	b.n	80056ee <UART_SetConfig+0x34e>
 80055bc:	2310      	movs	r3, #16
 80055be:	77fb      	strb	r3, [r7, #31]
 80055c0:	bf00      	nop
 80055c2:	e094      	b.n	80056ee <UART_SetConfig+0x34e>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a39      	ldr	r2, [pc, #228]	; (80056b0 <UART_SetConfig+0x310>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d124      	bne.n	8005618 <UART_SetConfig+0x278>
 80055ce:	4b33      	ldr	r3, [pc, #204]	; (800569c <UART_SetConfig+0x2fc>)
 80055d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80055d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055dc:	d012      	beq.n	8005604 <UART_SetConfig+0x264>
 80055de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055e2:	d802      	bhi.n	80055ea <UART_SetConfig+0x24a>
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d007      	beq.n	80055f8 <UART_SetConfig+0x258>
 80055e8:	e012      	b.n	8005610 <UART_SetConfig+0x270>
 80055ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055ee:	d006      	beq.n	80055fe <UART_SetConfig+0x25e>
 80055f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80055f4:	d009      	beq.n	800560a <UART_SetConfig+0x26a>
 80055f6:	e00b      	b.n	8005610 <UART_SetConfig+0x270>
 80055f8:	2301      	movs	r3, #1
 80055fa:	77fb      	strb	r3, [r7, #31]
 80055fc:	e077      	b.n	80056ee <UART_SetConfig+0x34e>
 80055fe:	2302      	movs	r3, #2
 8005600:	77fb      	strb	r3, [r7, #31]
 8005602:	e074      	b.n	80056ee <UART_SetConfig+0x34e>
 8005604:	2304      	movs	r3, #4
 8005606:	77fb      	strb	r3, [r7, #31]
 8005608:	e071      	b.n	80056ee <UART_SetConfig+0x34e>
 800560a:	2308      	movs	r3, #8
 800560c:	77fb      	strb	r3, [r7, #31]
 800560e:	e06e      	b.n	80056ee <UART_SetConfig+0x34e>
 8005610:	2310      	movs	r3, #16
 8005612:	77fb      	strb	r3, [r7, #31]
 8005614:	bf00      	nop
 8005616:	e06a      	b.n	80056ee <UART_SetConfig+0x34e>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a25      	ldr	r2, [pc, #148]	; (80056b4 <UART_SetConfig+0x314>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d124      	bne.n	800566c <UART_SetConfig+0x2cc>
 8005622:	4b1e      	ldr	r3, [pc, #120]	; (800569c <UART_SetConfig+0x2fc>)
 8005624:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005628:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800562c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005630:	d012      	beq.n	8005658 <UART_SetConfig+0x2b8>
 8005632:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005636:	d802      	bhi.n	800563e <UART_SetConfig+0x29e>
 8005638:	2b00      	cmp	r3, #0
 800563a:	d007      	beq.n	800564c <UART_SetConfig+0x2ac>
 800563c:	e012      	b.n	8005664 <UART_SetConfig+0x2c4>
 800563e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005642:	d006      	beq.n	8005652 <UART_SetConfig+0x2b2>
 8005644:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005648:	d009      	beq.n	800565e <UART_SetConfig+0x2be>
 800564a:	e00b      	b.n	8005664 <UART_SetConfig+0x2c4>
 800564c:	2300      	movs	r3, #0
 800564e:	77fb      	strb	r3, [r7, #31]
 8005650:	e04d      	b.n	80056ee <UART_SetConfig+0x34e>
 8005652:	2302      	movs	r3, #2
 8005654:	77fb      	strb	r3, [r7, #31]
 8005656:	e04a      	b.n	80056ee <UART_SetConfig+0x34e>
 8005658:	2304      	movs	r3, #4
 800565a:	77fb      	strb	r3, [r7, #31]
 800565c:	e047      	b.n	80056ee <UART_SetConfig+0x34e>
 800565e:	2308      	movs	r3, #8
 8005660:	77fb      	strb	r3, [r7, #31]
 8005662:	e044      	b.n	80056ee <UART_SetConfig+0x34e>
 8005664:	2310      	movs	r3, #16
 8005666:	77fb      	strb	r3, [r7, #31]
 8005668:	bf00      	nop
 800566a:	e040      	b.n	80056ee <UART_SetConfig+0x34e>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a11      	ldr	r2, [pc, #68]	; (80056b8 <UART_SetConfig+0x318>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d139      	bne.n	80056ea <UART_SetConfig+0x34a>
 8005676:	4b09      	ldr	r3, [pc, #36]	; (800569c <UART_SetConfig+0x2fc>)
 8005678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800567c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005680:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005684:	d027      	beq.n	80056d6 <UART_SetConfig+0x336>
 8005686:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800568a:	d817      	bhi.n	80056bc <UART_SetConfig+0x31c>
 800568c:	2b00      	cmp	r3, #0
 800568e:	d01c      	beq.n	80056ca <UART_SetConfig+0x32a>
 8005690:	e027      	b.n	80056e2 <UART_SetConfig+0x342>
 8005692:	bf00      	nop
 8005694:	efff69f3 	.word	0xefff69f3
 8005698:	40011000 	.word	0x40011000
 800569c:	40023800 	.word	0x40023800
 80056a0:	40004400 	.word	0x40004400
 80056a4:	40004800 	.word	0x40004800
 80056a8:	40004c00 	.word	0x40004c00
 80056ac:	40005000 	.word	0x40005000
 80056b0:	40011400 	.word	0x40011400
 80056b4:	40007800 	.word	0x40007800
 80056b8:	40007c00 	.word	0x40007c00
 80056bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056c0:	d006      	beq.n	80056d0 <UART_SetConfig+0x330>
 80056c2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80056c6:	d009      	beq.n	80056dc <UART_SetConfig+0x33c>
 80056c8:	e00b      	b.n	80056e2 <UART_SetConfig+0x342>
 80056ca:	2300      	movs	r3, #0
 80056cc:	77fb      	strb	r3, [r7, #31]
 80056ce:	e00e      	b.n	80056ee <UART_SetConfig+0x34e>
 80056d0:	2302      	movs	r3, #2
 80056d2:	77fb      	strb	r3, [r7, #31]
 80056d4:	e00b      	b.n	80056ee <UART_SetConfig+0x34e>
 80056d6:	2304      	movs	r3, #4
 80056d8:	77fb      	strb	r3, [r7, #31]
 80056da:	e008      	b.n	80056ee <UART_SetConfig+0x34e>
 80056dc:	2308      	movs	r3, #8
 80056de:	77fb      	strb	r3, [r7, #31]
 80056e0:	e005      	b.n	80056ee <UART_SetConfig+0x34e>
 80056e2:	2310      	movs	r3, #16
 80056e4:	77fb      	strb	r3, [r7, #31]
 80056e6:	bf00      	nop
 80056e8:	e001      	b.n	80056ee <UART_SetConfig+0x34e>
 80056ea:	2310      	movs	r3, #16
 80056ec:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	69db      	ldr	r3, [r3, #28]
 80056f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056f6:	d17c      	bne.n	80057f2 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 80056f8:	7ffb      	ldrb	r3, [r7, #31]
 80056fa:	2b08      	cmp	r3, #8
 80056fc:	d859      	bhi.n	80057b2 <UART_SetConfig+0x412>
 80056fe:	a201      	add	r2, pc, #4	; (adr r2, 8005704 <UART_SetConfig+0x364>)
 8005700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005704:	08005729 	.word	0x08005729
 8005708:	08005747 	.word	0x08005747
 800570c:	08005765 	.word	0x08005765
 8005710:	080057b3 	.word	0x080057b3
 8005714:	0800577d 	.word	0x0800577d
 8005718:	080057b3 	.word	0x080057b3
 800571c:	080057b3 	.word	0x080057b3
 8005720:	080057b3 	.word	0x080057b3
 8005724:	0800579b 	.word	0x0800579b
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005728:	f7fe f8de 	bl	80038e8 <HAL_RCC_GetPCLK1Freq>
 800572c:	4603      	mov	r3, r0
 800572e:	005a      	lsls	r2, r3, #1
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	085b      	lsrs	r3, r3, #1
 8005736:	441a      	add	r2, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005740:	b29b      	uxth	r3, r3
 8005742:	61bb      	str	r3, [r7, #24]
        break;
 8005744:	e038      	b.n	80057b8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005746:	f7fe f8e3 	bl	8003910 <HAL_RCC_GetPCLK2Freq>
 800574a:	4603      	mov	r3, r0
 800574c:	005a      	lsls	r2, r3, #1
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	085b      	lsrs	r3, r3, #1
 8005754:	441a      	add	r2, r3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	fbb2 f3f3 	udiv	r3, r2, r3
 800575e:	b29b      	uxth	r3, r3
 8005760:	61bb      	str	r3, [r7, #24]
        break;
 8005762:	e029      	b.n	80057b8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	085a      	lsrs	r2, r3, #1
 800576a:	4b5d      	ldr	r3, [pc, #372]	; (80058e0 <UART_SetConfig+0x540>)
 800576c:	4413      	add	r3, r2
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	6852      	ldr	r2, [r2, #4]
 8005772:	fbb3 f3f2 	udiv	r3, r3, r2
 8005776:	b29b      	uxth	r3, r3
 8005778:	61bb      	str	r3, [r7, #24]
        break;
 800577a:	e01d      	b.n	80057b8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800577c:	f7fd fff6 	bl	800376c <HAL_RCC_GetSysClockFreq>
 8005780:	4603      	mov	r3, r0
 8005782:	005a      	lsls	r2, r3, #1
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	085b      	lsrs	r3, r3, #1
 800578a:	441a      	add	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	fbb2 f3f3 	udiv	r3, r2, r3
 8005794:	b29b      	uxth	r3, r3
 8005796:	61bb      	str	r3, [r7, #24]
        break;
 8005798:	e00e      	b.n	80057b8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	085b      	lsrs	r3, r3, #1
 80057a0:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	61bb      	str	r3, [r7, #24]
        break;
 80057b0:	e002      	b.n	80057b8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	75fb      	strb	r3, [r7, #23]
        break;
 80057b6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057b8:	69bb      	ldr	r3, [r7, #24]
 80057ba:	2b0f      	cmp	r3, #15
 80057bc:	d916      	bls.n	80057ec <UART_SetConfig+0x44c>
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057c4:	d212      	bcs.n	80057ec <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80057c6:	69bb      	ldr	r3, [r7, #24]
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	f023 030f 	bic.w	r3, r3, #15
 80057ce:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	085b      	lsrs	r3, r3, #1
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	f003 0307 	and.w	r3, r3, #7
 80057da:	b29a      	uxth	r2, r3
 80057dc:	89fb      	ldrh	r3, [r7, #14]
 80057de:	4313      	orrs	r3, r2
 80057e0:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	89fa      	ldrh	r2, [r7, #14]
 80057e8:	60da      	str	r2, [r3, #12]
 80057ea:	e06e      	b.n	80058ca <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	75fb      	strb	r3, [r7, #23]
 80057f0:	e06b      	b.n	80058ca <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 80057f2:	7ffb      	ldrb	r3, [r7, #31]
 80057f4:	2b08      	cmp	r3, #8
 80057f6:	d857      	bhi.n	80058a8 <UART_SetConfig+0x508>
 80057f8:	a201      	add	r2, pc, #4	; (adr r2, 8005800 <UART_SetConfig+0x460>)
 80057fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057fe:	bf00      	nop
 8005800:	08005825 	.word	0x08005825
 8005804:	08005841 	.word	0x08005841
 8005808:	0800585d 	.word	0x0800585d
 800580c:	080058a9 	.word	0x080058a9
 8005810:	08005875 	.word	0x08005875
 8005814:	080058a9 	.word	0x080058a9
 8005818:	080058a9 	.word	0x080058a9
 800581c:	080058a9 	.word	0x080058a9
 8005820:	08005891 	.word	0x08005891
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005824:	f7fe f860 	bl	80038e8 <HAL_RCC_GetPCLK1Freq>
 8005828:	4602      	mov	r2, r0
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	085b      	lsrs	r3, r3, #1
 8005830:	441a      	add	r2, r3
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	fbb2 f3f3 	udiv	r3, r2, r3
 800583a:	b29b      	uxth	r3, r3
 800583c:	61bb      	str	r3, [r7, #24]
        break;
 800583e:	e036      	b.n	80058ae <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005840:	f7fe f866 	bl	8003910 <HAL_RCC_GetPCLK2Freq>
 8005844:	4602      	mov	r2, r0
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	085b      	lsrs	r3, r3, #1
 800584c:	441a      	add	r2, r3
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	fbb2 f3f3 	udiv	r3, r2, r3
 8005856:	b29b      	uxth	r3, r3
 8005858:	61bb      	str	r3, [r7, #24]
        break;
 800585a:	e028      	b.n	80058ae <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	085a      	lsrs	r2, r3, #1
 8005862:	4b20      	ldr	r3, [pc, #128]	; (80058e4 <UART_SetConfig+0x544>)
 8005864:	4413      	add	r3, r2
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	6852      	ldr	r2, [r2, #4]
 800586a:	fbb3 f3f2 	udiv	r3, r3, r2
 800586e:	b29b      	uxth	r3, r3
 8005870:	61bb      	str	r3, [r7, #24]
        break;
 8005872:	e01c      	b.n	80058ae <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005874:	f7fd ff7a 	bl	800376c <HAL_RCC_GetSysClockFreq>
 8005878:	4602      	mov	r2, r0
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	085b      	lsrs	r3, r3, #1
 8005880:	441a      	add	r2, r3
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	fbb2 f3f3 	udiv	r3, r2, r3
 800588a:	b29b      	uxth	r3, r3
 800588c:	61bb      	str	r3, [r7, #24]
        break;
 800588e:	e00e      	b.n	80058ae <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	085b      	lsrs	r3, r3, #1
 8005896:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	fbb2 f3f3 	udiv	r3, r2, r3
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	61bb      	str	r3, [r7, #24]
        break;
 80058a6:	e002      	b.n	80058ae <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	75fb      	strb	r3, [r7, #23]
        break;
 80058ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	2b0f      	cmp	r3, #15
 80058b2:	d908      	bls.n	80058c6 <UART_SetConfig+0x526>
 80058b4:	69bb      	ldr	r3, [r7, #24]
 80058b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058ba:	d204      	bcs.n	80058c6 <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	69ba      	ldr	r2, [r7, #24]
 80058c2:	60da      	str	r2, [r3, #12]
 80058c4:	e001      	b.n	80058ca <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80058d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3720      	adds	r7, #32
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}
 80058e0:	01e84800 	.word	0x01e84800
 80058e4:	00f42400 	.word	0x00f42400

080058e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f4:	f003 0301 	and.w	r3, r3, #1
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d00a      	beq.n	8005912 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	430a      	orrs	r2, r1
 8005910:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005916:	f003 0302 	and.w	r3, r3, #2
 800591a:	2b00      	cmp	r3, #0
 800591c:	d00a      	beq.n	8005934 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	430a      	orrs	r2, r1
 8005932:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005938:	f003 0304 	and.w	r3, r3, #4
 800593c:	2b00      	cmp	r3, #0
 800593e:	d00a      	beq.n	8005956 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	430a      	orrs	r2, r1
 8005954:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595a:	f003 0308 	and.w	r3, r3, #8
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00a      	beq.n	8005978 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	430a      	orrs	r2, r1
 8005976:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597c:	f003 0310 	and.w	r3, r3, #16
 8005980:	2b00      	cmp	r3, #0
 8005982:	d00a      	beq.n	800599a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	430a      	orrs	r2, r1
 8005998:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599e:	f003 0320 	and.w	r3, r3, #32
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00a      	beq.n	80059bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	430a      	orrs	r2, r1
 80059ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d01a      	beq.n	80059fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	430a      	orrs	r2, r1
 80059dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059e6:	d10a      	bne.n	80059fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	430a      	orrs	r2, r1
 80059fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00a      	beq.n	8005a20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	430a      	orrs	r2, r1
 8005a1e:	605a      	str	r2, [r3, #4]
  }
}
 8005a20:	bf00      	nop
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b086      	sub	sp, #24
 8005a30:	af02      	add	r7, sp, #8
 8005a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005a3a:	f7fc fa99 	bl	8001f70 <HAL_GetTick>
 8005a3e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 0308 	and.w	r3, r3, #8
 8005a4a:	2b08      	cmp	r3, #8
 8005a4c:	d10e      	bne.n	8005a6c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a4e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a52:	9300      	str	r3, [sp, #0]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f000 f814 	bl	8005a8a <UART_WaitOnFlagUntilTimeout>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d001      	beq.n	8005a6c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a68:	2303      	movs	r3, #3
 8005a6a:	e00a      	b.n	8005a82 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2220      	movs	r2, #32
 8005a70:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2220      	movs	r2, #32
 8005a76:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3710      	adds	r7, #16
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}

08005a8a <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005a8a:	b580      	push	{r7, lr}
 8005a8c:	b084      	sub	sp, #16
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	60f8      	str	r0, [r7, #12]
 8005a92:	60b9      	str	r1, [r7, #8]
 8005a94:	603b      	str	r3, [r7, #0]
 8005a96:	4613      	mov	r3, r2
 8005a98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a9a:	e02a      	b.n	8005af2 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a9c:	69bb      	ldr	r3, [r7, #24]
 8005a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aa2:	d026      	beq.n	8005af2 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005aa4:	f7fc fa64 	bl	8001f70 <HAL_GetTick>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	1ad3      	subs	r3, r2, r3
 8005aae:	69ba      	ldr	r2, [r7, #24]
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d302      	bcc.n	8005aba <UART_WaitOnFlagUntilTimeout+0x30>
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d11b      	bne.n	8005af2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005ac8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	689a      	ldr	r2, [r3, #8]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f022 0201 	bic.w	r2, r2, #1
 8005ad8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2220      	movs	r2, #32
 8005ade:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2220      	movs	r2, #32
 8005ae4:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	e00f      	b.n	8005b12 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	69da      	ldr	r2, [r3, #28]
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	4013      	ands	r3, r2
 8005afc:	68ba      	ldr	r2, [r7, #8]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	bf0c      	ite	eq
 8005b02:	2301      	moveq	r3, #1
 8005b04:	2300      	movne	r3, #0
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	461a      	mov	r2, r3
 8005b0a:	79fb      	ldrb	r3, [r7, #7]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d0c5      	beq.n	8005a9c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3710      	adds	r7, #16
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
	...

08005b1c <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8005b1c:	b084      	sub	sp, #16
 8005b1e:	b480      	push	{r7}
 8005b20:	b085      	sub	sp, #20
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
 8005b26:	f107 001c 	add.w	r0, r7, #28
 8005b2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005b32:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005b34:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005b36:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8005b3a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8005b3e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8005b42:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8005b46:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	685a      	ldr	r2, [r3, #4]
 8005b52:	4b07      	ldr	r3, [pc, #28]	; (8005b70 <SDMMC_Init+0x54>)
 8005b54:	4013      	ands	r3, r2
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	431a      	orrs	r2, r3
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005b5e:	2300      	movs	r3, #0
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3714      	adds	r7, #20
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	b004      	add	sp, #16
 8005b6c:	4770      	bx	lr
 8005b6e:	bf00      	nop
 8005b70:	ffff8100 	.word	0xffff8100

08005b74 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b083      	sub	sp, #12
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	370c      	adds	r7, #12
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr

08005b8e <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8005b8e:	b480      	push	{r7}
 8005b90:	b083      	sub	sp, #12
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2203      	movs	r2, #3
 8005b9a:	601a      	str	r2, [r3, #0]
  
  return HAL_OK; 
 8005b9c:	2300      	movs	r3, #0
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	370c      	adds	r7, #12
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr

08005baa <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8005baa:	b480      	push	{r7}
 8005bac:	b083      	sub	sp, #12
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 0303 	and.w	r3, r3, #3
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	370c      	adds	r7, #12
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr
	...

08005bc8 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b085      	sub	sp, #20
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005be6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005bec:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005bf2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005bf4:	68fa      	ldr	r2, [r7, #12]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	68da      	ldr	r2, [r3, #12]
 8005bfe:	4b06      	ldr	r3, [pc, #24]	; (8005c18 <SDMMC_SendCommand+0x50>)
 8005c00:	4013      	ands	r3, r2
 8005c02:	68fa      	ldr	r2, [r7, #12]
 8005c04:	431a      	orrs	r2, r3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8005c0a:	2300      	movs	r3, #0
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3714      	adds	r7, #20
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr
 8005c18:	fffff000 	.word	0xfffff000

08005c1c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	691b      	ldr	r3, [r3, #16]
 8005c28:	b2db      	uxtb	r3, r3
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	370c      	adds	r7, #12
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr

08005c36 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8005c36:	b480      	push	{r7}
 8005c38:	b085      	sub	sp, #20
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]
 8005c3e:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0;
 8005c40:	2300      	movs	r3, #0
 8005c42:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	3314      	adds	r3, #20
 8005c48:	461a      	mov	r2, r3
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	4413      	add	r3, r2
 8005c4e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
}  
 8005c54:	4618      	mov	r0, r3
 8005c56:	3714      	adds	r7, #20
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <SDMMC_ConfigData>:
  * @param  Data  pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b085      	sub	sp, #20
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	685a      	ldr	r2, [r3, #4]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005c86:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005c8c:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005c92:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005c94:	68fa      	ldr	r2, [r7, #12]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c9e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	431a      	orrs	r2, r3
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005caa:	2300      	movs	r3, #0

}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3714      	adds	r7, #20
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b088      	sub	sp, #32
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005cca:	2310      	movs	r3, #16
 8005ccc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005cce:	2340      	movs	r3, #64	; 0x40
 8005cd0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005cd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cda:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005cdc:	f107 0308 	add.w	r3, r7, #8
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f7ff ff70 	bl	8005bc8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8005ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cec:	2110      	movs	r1, #16
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 f98c 	bl	800600c <SDMMC_GetCmdResp1>
 8005cf4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005cf6:	69fb      	ldr	r3, [r7, #28]
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3720      	adds	r7, #32
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b08a      	sub	sp, #40	; 0x28
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005d14:	2307      	movs	r3, #7
 8005d16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005d18:	2340      	movs	r3, #64	; 0x40
 8005d1a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005d20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d24:	623b      	str	r3, [r7, #32]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005d26:	f107 0310 	add.w	r3, r7, #16
 8005d2a:	4619      	mov	r1, r3
 8005d2c:	68f8      	ldr	r0, [r7, #12]
 8005d2e:	f7ff ff4b 	bl	8005bc8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8005d32:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d36:	2107      	movs	r1, #7
 8005d38:	68f8      	ldr	r0, [r7, #12]
 8005d3a:	f000 f967 	bl	800600c <SDMMC_GetCmdResp1>
 8005d3e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8005d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3728      	adds	r7, #40	; 0x28
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}

08005d4a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8005d4a:	b580      	push	{r7, lr}
 8005d4c:	b088      	sub	sp, #32
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005d52:	2300      	movs	r3, #0
 8005d54:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0;
 8005d56:	2300      	movs	r3, #0
 8005d58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005d62:	2300      	movs	r3, #0
 8005d64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005d66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d6a:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005d6c:	f107 0308 	add.w	r3, r7, #8
 8005d70:	4619      	mov	r1, r3
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f7ff ff28 	bl	8005bc8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f000 f91d 	bl	8005fb8 <SDMMC_GetCmdError>
 8005d7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005d80:	69fb      	ldr	r3, [r7, #28]
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3720      	adds	r7, #32
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}

08005d8a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8005d8a:	b580      	push	{r7, lr}
 8005d8c:	b088      	sub	sp, #32
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005d92:	2300      	movs	r3, #0
 8005d94:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005d96:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8005d9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005d9c:	2308      	movs	r3, #8
 8005d9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005da0:	2340      	movs	r3, #64	; 0x40
 8005da2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005da4:	2300      	movs	r3, #0
 8005da6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005da8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005dac:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005dae:	f107 0308 	add.w	r3, r7, #8
 8005db2:	4619      	mov	r1, r3
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f7ff ff07 	bl	8005bc8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 faee 	bl	800639c <SDMMC_GetCmdResp7>
 8005dc0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005dc2:	69fb      	ldr	r3, [r7, #28]
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3720      	adds	r7, #32
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b088      	sub	sp, #32
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005dde:	2337      	movs	r3, #55	; 0x37
 8005de0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005de2:	2340      	movs	r3, #64	; 0x40
 8005de4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005de6:	2300      	movs	r3, #0
 8005de8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005dea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005dee:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005df0:	f107 0308 	add.w	r3, r7, #8
 8005df4:	4619      	mov	r1, r3
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f7ff fee6 	bl	8005bc8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8005dfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e00:	2137      	movs	r1, #55	; 0x37
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 f902 	bl	800600c <SDMMC_GetCmdResp1>
 8005e08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005e0a:	69fb      	ldr	r3, [r7, #28]
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3720      	adds	r7, #32
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t SdType)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b088      	sub	sp, #32
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8005e22:	683a      	ldr	r2, [r7, #0]
 8005e24:	4b0d      	ldr	r3, [pc, #52]	; (8005e5c <SDMMC_CmdAppOperCommand+0x48>)
 8005e26:	4313      	orrs	r3, r2
 8005e28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005e2a:	2329      	movs	r3, #41	; 0x29
 8005e2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005e2e:	2340      	movs	r3, #64	; 0x40
 8005e30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005e32:	2300      	movs	r3, #0
 8005e34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005e36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e3a:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005e3c:	f107 0308 	add.w	r3, r7, #8
 8005e40:	4619      	mov	r1, r3
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f7ff fec0 	bl	8005bc8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f000 fa05 	bl	8006258 <SDMMC_GetCmdResp3>
 8005e4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005e50:	69fb      	ldr	r3, [r7, #28]
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3720      	adds	r7, #32
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	80100000 	.word	0x80100000

08005e60 <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b088      	sub	sp, #32
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8005e72:	2306      	movs	r3, #6
 8005e74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005e76:	2340      	movs	r3, #64	; 0x40
 8005e78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005e7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e82:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005e84:	f107 0308 	add.w	r3, r7, #8
 8005e88:	4619      	mov	r1, r3
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f7ff fe9c 	bl	8005bc8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8005e90:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e94:	2106      	movs	r1, #6
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 f8b8 	bl	800600c <SDMMC_GetCmdResp1>
 8005e9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005e9e:	69fb      	ldr	r3, [r7, #28]
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3720      	adds	r7, #32
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b088      	sub	sp, #32
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8005eb8:	2333      	movs	r3, #51	; 0x33
 8005eba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005ebc:	2340      	movs	r3, #64	; 0x40
 8005ebe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005ec4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ec8:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005eca:	f107 0308 	add.w	r3, r7, #8
 8005ece:	4619      	mov	r1, r3
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f7ff fe79 	bl	8005bc8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8005ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eda:	2133      	movs	r1, #51	; 0x33
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f000 f895 	bl	800600c <SDMMC_GetCmdResp1>
 8005ee2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005ee4:	69fb      	ldr	r3, [r7, #28]
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3720      	adds	r7, #32
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}

08005eee <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8005eee:	b580      	push	{r7, lr}
 8005ef0:	b088      	sub	sp, #32
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0;
 8005efa:	2300      	movs	r3, #0
 8005efc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005efe:	2302      	movs	r3, #2
 8005f00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8005f02:	23c0      	movs	r3, #192	; 0xc0
 8005f04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005f06:	2300      	movs	r3, #0
 8005f08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005f0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f0e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005f10:	f107 0308 	add.w	r3, r7, #8
 8005f14:	4619      	mov	r1, r3
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f7ff fe56 	bl	8005bc8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f000 f95b 	bl	80061d8 <SDMMC_GetCmdResp2>
 8005f22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f24:	69fb      	ldr	r3, [r7, #28]
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3720      	adds	r7, #32
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}

08005f2e <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005f2e:	b580      	push	{r7, lr}
 8005f30:	b088      	sub	sp, #32
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
 8005f36:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005f40:	2309      	movs	r3, #9
 8005f42:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8005f44:	23c0      	movs	r3, #192	; 0xc0
 8005f46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005f4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f50:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005f52:	f107 0308 	add.w	r3, r7, #8
 8005f56:	4619      	mov	r1, r3
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f7ff fe35 	bl	8005bc8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 f93a 	bl	80061d8 <SDMMC_GetCmdResp2>
 8005f64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f66:	69fb      	ldr	r3, [r7, #28]
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3720      	adds	r7, #32
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b088      	sub	sp, #32
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005f82:	2303      	movs	r3, #3
 8005f84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005f86:	2340      	movs	r3, #64	; 0x40
 8005f88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005f8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f92:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005f94:	f107 0308 	add.w	r3, r7, #8
 8005f98:	4619      	mov	r1, r3
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f7ff fe14 	bl	8005bc8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005fa0:	683a      	ldr	r2, [r7, #0]
 8005fa2:	2103      	movs	r1, #3
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f000 f98b 	bl	80062c0 <SDMMC_GetCmdResp6>
 8005faa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005fac:	69fb      	ldr	r3, [r7, #28]
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3720      	adds	r7, #32
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}
	...

08005fb8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8005fb8:	b490      	push	{r4, r7}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005fc0:	4b10      	ldr	r3, [pc, #64]	; (8006004 <SDMMC_GetCmdError+0x4c>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a10      	ldr	r2, [pc, #64]	; (8006008 <SDMMC_GetCmdError+0x50>)
 8005fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8005fca:	0a5b      	lsrs	r3, r3, #9
 8005fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fd0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8005fd4:	4623      	mov	r3, r4
 8005fd6:	1e5c      	subs	r4, r3, #1
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d102      	bne.n	8005fe2 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005fdc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005fe0:	e00a      	b.n	8005ff8 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d0f2      	beq.n	8005fd4 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005ff4:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8005ff6:	2300      	movs	r3, #0
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3708      	adds	r7, #8
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bc90      	pop	{r4, r7}
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	20000000 	.word	0x20000000
 8006008:	10624dd3 	.word	0x10624dd3

0800600c <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800600c:	b590      	push	{r4, r7, lr}
 800600e:	b087      	sub	sp, #28
 8006010:	af00      	add	r7, sp, #0
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	460b      	mov	r3, r1
 8006016:	607a      	str	r2, [r7, #4]
 8006018:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 800601a:	4b6c      	ldr	r3, [pc, #432]	; (80061cc <SDMMC_GetCmdResp1+0x1c0>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a6c      	ldr	r2, [pc, #432]	; (80061d0 <SDMMC_GetCmdResp1+0x1c4>)
 8006020:	fba2 2303 	umull	r2, r3, r2, r3
 8006024:	0a5b      	lsrs	r3, r3, #9
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800602c:	4623      	mov	r3, r4
 800602e:	1e5c      	subs	r4, r3, #1
 8006030:	2b00      	cmp	r3, #0
 8006032:	d102      	bne.n	800603a <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006034:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006038:	e0c3      	b.n	80061c2 <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800603e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8006042:	2b00      	cmp	r3, #0
 8006044:	d0f2      	beq.n	800602c <SDMMC_GetCmdResp1+0x20>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800604a:	f003 0304 	and.w	r3, r3, #4
 800604e:	2b00      	cmp	r3, #0
 8006050:	d004      	beq.n	800605c <SDMMC_GetCmdResp1+0x50>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2204      	movs	r2, #4
 8006056:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006058:	2304      	movs	r3, #4
 800605a:	e0b2      	b.n	80061c2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006060:	f003 0301 	and.w	r3, r3, #1
 8006064:	2b00      	cmp	r3, #0
 8006066:	d004      	beq.n	8006072 <SDMMC_GetCmdResp1+0x66>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2201      	movs	r2, #1
 800606c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800606e:	2301      	movs	r3, #1
 8006070:	e0a7      	b.n	80061c2 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006072:	68f8      	ldr	r0, [r7, #12]
 8006074:	f7ff fdd2 	bl	8005c1c <SDMMC_GetCommandResponse>
 8006078:	4603      	mov	r3, r0
 800607a:	461a      	mov	r2, r3
 800607c:	7afb      	ldrb	r3, [r7, #11]
 800607e:	4293      	cmp	r3, r2
 8006080:	d001      	beq.n	8006086 <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006082:	2301      	movs	r3, #1
 8006084:	e09d      	b.n	80061c2 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800608c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800608e:	2100      	movs	r1, #0
 8006090:	68f8      	ldr	r0, [r7, #12]
 8006092:	f7ff fdd0 	bl	8005c36 <SDMMC_GetResponse>
 8006096:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006098:	697a      	ldr	r2, [r7, #20]
 800609a:	4b4e      	ldr	r3, [pc, #312]	; (80061d4 <SDMMC_GetCmdResp1+0x1c8>)
 800609c:	4013      	ands	r3, r2
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d101      	bne.n	80060a6 <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 80060a2:	2300      	movs	r3, #0
 80060a4:	e08d      	b.n	80061c2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	da02      	bge.n	80060b2 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80060ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80060b0:	e087      	b.n	80061c2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d001      	beq.n	80060c0 <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80060bc:	2340      	movs	r3, #64	; 0x40
 80060be:	e080      	b.n	80061c2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d001      	beq.n	80060ce <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80060ca:	2380      	movs	r3, #128	; 0x80
 80060cc:	e079      	b.n	80061c2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d002      	beq.n	80060de <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80060d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80060dc:	e071      	b.n	80061c2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d002      	beq.n	80060ee <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80060e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060ec:	e069      	b.n	80061c2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d002      	beq.n	80060fe <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80060f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060fc:	e061      	b.n	80061c2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006104:	2b00      	cmp	r3, #0
 8006106:	d002      	beq.n	800610e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006108:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800610c:	e059      	b.n	80061c2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006114:	2b00      	cmp	r3, #0
 8006116:	d002      	beq.n	800611e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006118:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800611c:	e051      	b.n	80061c2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006124:	2b00      	cmp	r3, #0
 8006126:	d002      	beq.n	800612e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006128:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800612c:	e049      	b.n	80061c2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006134:	2b00      	cmp	r3, #0
 8006136:	d002      	beq.n	800613e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006138:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800613c:	e041      	b.n	80061c2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006144:	2b00      	cmp	r3, #0
 8006146:	d002      	beq.n	800614e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 8006148:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800614c:	e039      	b.n	80061c2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006154:	2b00      	cmp	r3, #0
 8006156:	d002      	beq.n	800615e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006158:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800615c:	e031      	b.n	80061c2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006164:	2b00      	cmp	r3, #0
 8006166:	d002      	beq.n	800616e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006168:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800616c:	e029      	b.n	80061c2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006174:	2b00      	cmp	r3, #0
 8006176:	d002      	beq.n	800617e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006178:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800617c:	e021      	b.n	80061c2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006184:	2b00      	cmp	r3, #0
 8006186:	d002      	beq.n	800618e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006188:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800618c:	e019      	b.n	80061c2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006194:	2b00      	cmp	r3, #0
 8006196:	d002      	beq.n	800619e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006198:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800619c:	e011      	b.n	80061c2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d002      	beq.n	80061ae <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80061a8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80061ac:	e009      	b.n	80061c2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	f003 0308 	and.w	r3, r3, #8
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d002      	beq.n	80061be <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80061b8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80061bc:	e001      	b.n	80061c2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80061be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	371c      	adds	r7, #28
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd90      	pop	{r4, r7, pc}
 80061ca:	bf00      	nop
 80061cc:	20000000 	.word	0x20000000
 80061d0:	10624dd3 	.word	0x10624dd3
 80061d4:	fdffe008 	.word	0xfdffe008

080061d8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80061d8:	b490      	push	{r4, r7}
 80061da:	b082      	sub	sp, #8
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80061e0:	4b1b      	ldr	r3, [pc, #108]	; (8006250 <SDMMC_GetCmdResp2+0x78>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a1b      	ldr	r2, [pc, #108]	; (8006254 <SDMMC_GetCmdResp2+0x7c>)
 80061e6:	fba2 2303 	umull	r2, r3, r2, r3
 80061ea:	0a5b      	lsrs	r3, r3, #9
 80061ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80061f0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 80061f4:	4623      	mov	r3, r4
 80061f6:	1e5c      	subs	r4, r3, #1
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d102      	bne.n	8006202 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80061fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006200:	e020      	b.n	8006244 <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006206:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800620a:	2b00      	cmp	r3, #0
 800620c:	d0f2      	beq.n	80061f4 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006212:	f003 0304 	and.w	r3, r3, #4
 8006216:	2b00      	cmp	r3, #0
 8006218:	d004      	beq.n	8006224 <SDMMC_GetCmdResp2+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2204      	movs	r2, #4
 800621e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006220:	2304      	movs	r3, #4
 8006222:	e00f      	b.n	8006244 <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006228:	f003 0301 	and.w	r3, r3, #1
 800622c:	2b00      	cmp	r3, #0
 800622e:	d004      	beq.n	800623a <SDMMC_GetCmdResp2+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006236:	2301      	movs	r3, #1
 8006238:	e004      	b.n	8006244 <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006240:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	3708      	adds	r7, #8
 8006248:	46bd      	mov	sp, r7
 800624a:	bc90      	pop	{r4, r7}
 800624c:	4770      	bx	lr
 800624e:	bf00      	nop
 8006250:	20000000 	.word	0x20000000
 8006254:	10624dd3 	.word	0x10624dd3

08006258 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8006258:	b490      	push	{r4, r7}
 800625a:	b082      	sub	sp, #8
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8006260:	4b15      	ldr	r3, [pc, #84]	; (80062b8 <SDMMC_GetCmdResp3+0x60>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a15      	ldr	r2, [pc, #84]	; (80062bc <SDMMC_GetCmdResp3+0x64>)
 8006266:	fba2 2303 	umull	r2, r3, r2, r3
 800626a:	0a5b      	lsrs	r3, r3, #9
 800626c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006270:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8006274:	4623      	mov	r3, r4
 8006276:	1e5c      	subs	r4, r3, #1
 8006278:	2b00      	cmp	r3, #0
 800627a:	d102      	bne.n	8006282 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800627c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006280:	e015      	b.n	80062ae <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006286:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800628a:	2b00      	cmp	r3, #0
 800628c:	d0f2      	beq.n	8006274 <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006292:	f003 0304 	and.w	r3, r3, #4
 8006296:	2b00      	cmp	r3, #0
 8006298:	d004      	beq.n	80062a4 <SDMMC_GetCmdResp3+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2204      	movs	r2, #4
 800629e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80062a0:	2304      	movs	r3, #4
 80062a2:	e004      	b.n	80062ae <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80062aa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80062ac:	2300      	movs	r3, #0
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3708      	adds	r7, #8
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bc90      	pop	{r4, r7}
 80062b6:	4770      	bx	lr
 80062b8:	20000000 	.word	0x20000000
 80062bc:	10624dd3 	.word	0x10624dd3

080062c0 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80062c0:	b590      	push	{r4, r7, lr}
 80062c2:	b087      	sub	sp, #28
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	460b      	mov	r3, r1
 80062ca:	607a      	str	r2, [r7, #4]
 80062cc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80062ce:	4b31      	ldr	r3, [pc, #196]	; (8006394 <SDMMC_GetCmdResp6+0xd4>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a31      	ldr	r2, [pc, #196]	; (8006398 <SDMMC_GetCmdResp6+0xd8>)
 80062d4:	fba2 2303 	umull	r2, r3, r2, r3
 80062d8:	0a5b      	lsrs	r3, r3, #9
 80062da:	f241 3288 	movw	r2, #5000	; 0x1388
 80062de:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 80062e2:	4623      	mov	r3, r4
 80062e4:	1e5c      	subs	r4, r3, #1
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d102      	bne.n	80062f0 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 80062ea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80062ee:	e04c      	b.n	800638a <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062f4:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d0f2      	beq.n	80062e2 <SDMMC_GetCmdResp6+0x22>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006300:	f003 0304 	and.w	r3, r3, #4
 8006304:	2b00      	cmp	r3, #0
 8006306:	d004      	beq.n	8006312 <SDMMC_GetCmdResp6+0x52>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2204      	movs	r2, #4
 800630c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800630e:	2304      	movs	r3, #4
 8006310:	e03b      	b.n	800638a <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006316:	f003 0301 	and.w	r3, r3, #1
 800631a:	2b00      	cmp	r3, #0
 800631c:	d004      	beq.n	8006328 <SDMMC_GetCmdResp6+0x68>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2201      	movs	r2, #1
 8006322:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006324:	2301      	movs	r3, #1
 8006326:	e030      	b.n	800638a <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006328:	68f8      	ldr	r0, [r7, #12]
 800632a:	f7ff fc77 	bl	8005c1c <SDMMC_GetCommandResponse>
 800632e:	4603      	mov	r3, r0
 8006330:	461a      	mov	r2, r3
 8006332:	7afb      	ldrb	r3, [r7, #11]
 8006334:	4293      	cmp	r3, r2
 8006336:	d001      	beq.n	800633c <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006338:	2301      	movs	r3, #1
 800633a:	e026      	b.n	800638a <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006342:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8006344:	2100      	movs	r1, #0
 8006346:	68f8      	ldr	r0, [r7, #12]
 8006348:	f7ff fc75 	bl	8005c36 <SDMMC_GetResponse>
 800634c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006354:	2b00      	cmp	r3, #0
 8006356:	d106      	bne.n	8006366 <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	0c1b      	lsrs	r3, r3, #16
 800635c:	b29a      	uxth	r2, r3
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8006362:	2300      	movs	r3, #0
 8006364:	e011      	b.n	800638a <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800636c:	2b00      	cmp	r3, #0
 800636e:	d002      	beq.n	8006376 <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006370:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006374:	e009      	b.n	800638a <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800637c:	2b00      	cmp	r3, #0
 800637e:	d002      	beq.n	8006386 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006380:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006384:	e001      	b.n	800638a <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006386:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800638a:	4618      	mov	r0, r3
 800638c:	371c      	adds	r7, #28
 800638e:	46bd      	mov	sp, r7
 8006390:	bd90      	pop	{r4, r7, pc}
 8006392:	bf00      	nop
 8006394:	20000000 	.word	0x20000000
 8006398:	10624dd3 	.word	0x10624dd3

0800639c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800639c:	b490      	push	{r4, r7}
 800639e:	b082      	sub	sp, #8
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80063a4:	4b18      	ldr	r3, [pc, #96]	; (8006408 <SDMMC_GetCmdResp7+0x6c>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a18      	ldr	r2, [pc, #96]	; (800640c <SDMMC_GetCmdResp7+0x70>)
 80063aa:	fba2 2303 	umull	r2, r3, r2, r3
 80063ae:	0a5b      	lsrs	r3, r3, #9
 80063b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80063b4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 80063b8:	4623      	mov	r3, r4
 80063ba:	1e5c      	subs	r4, r3, #1
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d102      	bne.n	80063c6 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80063c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80063c4:	e01a      	b.n	80063fc <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063ca:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d0f2      	beq.n	80063b8 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063d6:	f003 0304 	and.w	r3, r3, #4
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d004      	beq.n	80063e8 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2240      	movs	r2, #64	; 0x40
 80063e2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80063e4:	2304      	movs	r3, #4
 80063e6:	e009      	b.n	80063fc <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d002      	beq.n	80063fa <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2240      	movs	r2, #64	; 0x40
 80063f8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80063fa:	2300      	movs	r3, #0
  
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3708      	adds	r7, #8
 8006400:	46bd      	mov	sp, r7
 8006402:	bc90      	pop	{r4, r7}
 8006404:	4770      	bx	lr
 8006406:	bf00      	nop
 8006408:	20000000 	.word	0x20000000
 800640c:	10624dd3 	.word	0x10624dd3

08006410 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006410:	b084      	sub	sp, #16
 8006412:	b580      	push	{r7, lr}
 8006414:	b084      	sub	sp, #16
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
 800641a:	f107 001c 	add.w	r0, r7, #28
 800641e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006424:	2b01      	cmp	r3, #1
 8006426:	d120      	bne.n	800646a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800642c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	68da      	ldr	r2, [r3, #12]
 8006438:	4b20      	ldr	r3, [pc, #128]	; (80064bc <USB_CoreInit+0xac>)
 800643a:	4013      	ands	r3, r2
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800644c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800644e:	2b01      	cmp	r3, #1
 8006450:	d105      	bne.n	800645e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	68db      	ldr	r3, [r3, #12]
 8006456:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 fa60 	bl	8006924 <USB_CoreReset>
 8006464:	4603      	mov	r3, r0
 8006466:	73fb      	strb	r3, [r7, #15]
 8006468:	e010      	b.n	800648c <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	68db      	ldr	r3, [r3, #12]
 800646e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 fa54 	bl	8006924 <USB_CoreReset>
 800647c:	4603      	mov	r3, r0
 800647e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006484:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800648c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800648e:	2b01      	cmp	r3, #1
 8006490:	d10b      	bne.n	80064aa <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	f043 0206 	orr.w	r2, r3, #6
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	f043 0220 	orr.w	r2, r3, #32
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80064aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3710      	adds	r7, #16
 80064b0:	46bd      	mov	sp, r7
 80064b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064b6:	b004      	add	sp, #16
 80064b8:	4770      	bx	lr
 80064ba:	bf00      	nop
 80064bc:	ffbdffbf 	.word	0xffbdffbf

080064c0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	f023 0201 	bic.w	r2, r3, #1
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	370c      	adds	r7, #12
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr

080064e2 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80064e2:	b580      	push	{r7, lr}
 80064e4:	b082      	sub	sp, #8
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	6078      	str	r0, [r7, #4]
 80064ea:	460b      	mov	r3, r1
 80064ec:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	68db      	ldr	r3, [r3, #12]
 80064f2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80064fa:	78fb      	ldrb	r3, [r7, #3]
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d106      	bne.n	800650e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	60da      	str	r2, [r3, #12]
 800650c:	e00b      	b.n	8006526 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800650e:	78fb      	ldrb	r3, [r7, #3]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d106      	bne.n	8006522 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	60da      	str	r2, [r3, #12]
 8006520:	e001      	b.n	8006526 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	e003      	b.n	800652e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006526:	2032      	movs	r0, #50	; 0x32
 8006528:	f7fb fd2e 	bl	8001f88 <HAL_Delay>

  return HAL_OK;
 800652c:	2300      	movs	r3, #0
}
 800652e:	4618      	mov	r0, r3
 8006530:	3708      	adds	r7, #8
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
	...

08006538 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006538:	b084      	sub	sp, #16
 800653a:	b580      	push	{r7, lr}
 800653c:	b086      	sub	sp, #24
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
 8006542:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006546:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800654a:	2300      	movs	r3, #0
 800654c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006552:	2300      	movs	r3, #0
 8006554:	613b      	str	r3, [r7, #16]
 8006556:	e009      	b.n	800656c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	3340      	adds	r3, #64	; 0x40
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	4413      	add	r3, r2
 8006562:	2200      	movs	r2, #0
 8006564:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	3301      	adds	r3, #1
 800656a:	613b      	str	r3, [r7, #16]
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	2b0e      	cmp	r3, #14
 8006570:	d9f2      	bls.n	8006558 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006572:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006574:	2b00      	cmp	r3, #0
 8006576:	d112      	bne.n	800659e <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800657c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	601a      	str	r2, [r3, #0]
 800659c:	e005      	b.n	80065aa <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80065b0:	461a      	mov	r2, r3
 80065b2:	2300      	movs	r3, #0
 80065b4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065bc:	4619      	mov	r1, r3
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065c4:	461a      	mov	r2, r3
 80065c6:	680b      	ldr	r3, [r1, #0]
 80065c8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80065ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d10c      	bne.n	80065ea <USB_DevInit+0xb2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 80065d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d104      	bne.n	80065e0 <USB_DevInit+0xa8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80065d6:	2100      	movs	r1, #0
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 f971 	bl	80068c0 <USB_SetDevSpeed>
 80065de:	e018      	b.n	8006612 <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80065e0:	2101      	movs	r1, #1
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 f96c 	bl	80068c0 <USB_SetDevSpeed>
 80065e8:	e013      	b.n	8006612 <USB_DevInit+0xda>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80065ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ec:	2b03      	cmp	r3, #3
 80065ee:	d10c      	bne.n	800660a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 80065f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d104      	bne.n	8006600 <USB_DevInit+0xc8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80065f6:	2100      	movs	r1, #0
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 f961 	bl	80068c0 <USB_SetDevSpeed>
 80065fe:	e008      	b.n	8006612 <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006600:	2101      	movs	r1, #1
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 f95c 	bl	80068c0 <USB_SetDevSpeed>
 8006608:	e003      	b.n	8006612 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Full speed phy */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800660a:	2103      	movs	r1, #3
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f000 f957 	bl	80068c0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006612:	2110      	movs	r1, #16
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f000 f90b 	bl	8006830 <USB_FlushTxFifo>
 800661a:	4603      	mov	r3, r0
 800661c:	2b00      	cmp	r3, #0
 800661e:	d001      	beq.n	8006624 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 f929 	bl	800687c <USB_FlushRxFifo>
 800662a:	4603      	mov	r3, r0
 800662c:	2b00      	cmp	r3, #0
 800662e:	d001      	beq.n	8006634 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800663a:	461a      	mov	r2, r3
 800663c:	2300      	movs	r3, #0
 800663e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006646:	461a      	mov	r2, r3
 8006648:	2300      	movs	r3, #0
 800664a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006652:	461a      	mov	r2, r3
 8006654:	2300      	movs	r3, #0
 8006656:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006658:	2300      	movs	r3, #0
 800665a:	613b      	str	r3, [r7, #16]
 800665c:	e043      	b.n	80066e6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	015a      	lsls	r2, r3, #5
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	4413      	add	r3, r2
 8006666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006670:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006674:	d118      	bne.n	80066a8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d10a      	bne.n	8006692 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	015a      	lsls	r2, r3, #5
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	4413      	add	r3, r2
 8006684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006688:	461a      	mov	r2, r3
 800668a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800668e:	6013      	str	r3, [r2, #0]
 8006690:	e013      	b.n	80066ba <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	015a      	lsls	r2, r3, #5
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	4413      	add	r3, r2
 800669a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800669e:	461a      	mov	r2, r3
 80066a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80066a4:	6013      	str	r3, [r2, #0]
 80066a6:	e008      	b.n	80066ba <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	015a      	lsls	r2, r3, #5
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	4413      	add	r3, r2
 80066b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066b4:	461a      	mov	r2, r3
 80066b6:	2300      	movs	r3, #0
 80066b8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	015a      	lsls	r2, r3, #5
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	4413      	add	r3, r2
 80066c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066c6:	461a      	mov	r2, r3
 80066c8:	2300      	movs	r3, #0
 80066ca:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	015a      	lsls	r2, r3, #5
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	4413      	add	r3, r2
 80066d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066d8:	461a      	mov	r2, r3
 80066da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80066de:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	3301      	adds	r3, #1
 80066e4:	613b      	str	r3, [r7, #16]
 80066e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e8:	693a      	ldr	r2, [r7, #16]
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d3b7      	bcc.n	800665e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066ee:	2300      	movs	r3, #0
 80066f0:	613b      	str	r3, [r7, #16]
 80066f2:	e043      	b.n	800677c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	015a      	lsls	r2, r3, #5
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	4413      	add	r3, r2
 80066fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006706:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800670a:	d118      	bne.n	800673e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d10a      	bne.n	8006728 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	015a      	lsls	r2, r3, #5
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	4413      	add	r3, r2
 800671a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800671e:	461a      	mov	r2, r3
 8006720:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006724:	6013      	str	r3, [r2, #0]
 8006726:	e013      	b.n	8006750 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	015a      	lsls	r2, r3, #5
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	4413      	add	r3, r2
 8006730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006734:	461a      	mov	r2, r3
 8006736:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800673a:	6013      	str	r3, [r2, #0]
 800673c:	e008      	b.n	8006750 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	015a      	lsls	r2, r3, #5
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	4413      	add	r3, r2
 8006746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800674a:	461a      	mov	r2, r3
 800674c:	2300      	movs	r3, #0
 800674e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	015a      	lsls	r2, r3, #5
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	4413      	add	r3, r2
 8006758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800675c:	461a      	mov	r2, r3
 800675e:	2300      	movs	r3, #0
 8006760:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	015a      	lsls	r2, r3, #5
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	4413      	add	r3, r2
 800676a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800676e:	461a      	mov	r2, r3
 8006770:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006774:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	3301      	adds	r3, #1
 800677a:	613b      	str	r3, [r7, #16]
 800677c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677e:	693a      	ldr	r2, [r7, #16]
 8006780:	429a      	cmp	r2, r3
 8006782:	d3b7      	bcc.n	80066f4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800678a:	691b      	ldr	r3, [r3, #16]
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006792:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006796:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8006798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800679a:	2b01      	cmp	r3, #1
 800679c:	d110      	bne.n	80067c0 <USB_DevInit+0x288>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067a4:	461a      	mov	r2, r3
 80067a6:	4b1e      	ldr	r3, [pc, #120]	; (8006820 <USB_DevInit+0x2e8>)
 80067a8:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067b8:	4619      	mov	r1, r3
 80067ba:	4b1a      	ldr	r3, [pc, #104]	; (8006824 <USB_DevInit+0x2ec>)
 80067bc:	4313      	orrs	r3, r2
 80067be:	630b      	str	r3, [r1, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80067cc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80067ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d105      	bne.n	80067e0 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	699b      	ldr	r3, [r3, #24]
 80067d8:	f043 0210 	orr.w	r2, r3, #16
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	699a      	ldr	r2, [r3, #24]
 80067e4:	4b10      	ldr	r3, [pc, #64]	; (8006828 <USB_DevInit+0x2f0>)
 80067e6:	4313      	orrs	r3, r2
 80067e8:	687a      	ldr	r2, [r7, #4]
 80067ea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80067ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d005      	beq.n	80067fe <USB_DevInit+0x2c6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	699b      	ldr	r3, [r3, #24]
 80067f6:	f043 0208 	orr.w	r2, r3, #8
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80067fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006800:	2b01      	cmp	r3, #1
 8006802:	d105      	bne.n	8006810 <USB_DevInit+0x2d8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	699a      	ldr	r2, [r3, #24]
 8006808:	4b08      	ldr	r3, [pc, #32]	; (800682c <USB_DevInit+0x2f4>)
 800680a:	4313      	orrs	r3, r2
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006810:	7dfb      	ldrb	r3, [r7, #23]
}
 8006812:	4618      	mov	r0, r3
 8006814:	3718      	adds	r7, #24
 8006816:	46bd      	mov	sp, r7
 8006818:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800681c:	b004      	add	sp, #16
 800681e:	4770      	bx	lr
 8006820:	00800100 	.word	0x00800100
 8006824:	00010003 	.word	0x00010003
 8006828:	803c3800 	.word	0x803c3800
 800682c:	40000004 	.word	0x40000004

08006830 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006830:	b480      	push	{r7}
 8006832:	b085      	sub	sp, #20
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800683a:	2300      	movs	r3, #0
 800683c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	019b      	lsls	r3, r3, #6
 8006842:	f043 0220 	orr.w	r2, r3, #32
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	3301      	adds	r3, #1
 800684e:	60fb      	str	r3, [r7, #12]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	4a09      	ldr	r2, [pc, #36]	; (8006878 <USB_FlushTxFifo+0x48>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d901      	bls.n	800685c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006858:	2303      	movs	r3, #3
 800685a:	e006      	b.n	800686a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	691b      	ldr	r3, [r3, #16]
 8006860:	f003 0320 	and.w	r3, r3, #32
 8006864:	2b20      	cmp	r3, #32
 8006866:	d0f0      	beq.n	800684a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006868:	2300      	movs	r3, #0
}
 800686a:	4618      	mov	r0, r3
 800686c:	3714      	adds	r7, #20
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr
 8006876:	bf00      	nop
 8006878:	00030d40 	.word	0x00030d40

0800687c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800687c:	b480      	push	{r7}
 800687e:	b085      	sub	sp, #20
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006884:	2300      	movs	r3, #0
 8006886:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2210      	movs	r2, #16
 800688c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	3301      	adds	r3, #1
 8006892:	60fb      	str	r3, [r7, #12]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	4a09      	ldr	r2, [pc, #36]	; (80068bc <USB_FlushRxFifo+0x40>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d901      	bls.n	80068a0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800689c:	2303      	movs	r3, #3
 800689e:	e006      	b.n	80068ae <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	691b      	ldr	r3, [r3, #16]
 80068a4:	f003 0310 	and.w	r3, r3, #16
 80068a8:	2b10      	cmp	r3, #16
 80068aa:	d0f0      	beq.n	800688e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3714      	adds	r7, #20
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr
 80068ba:	bf00      	nop
 80068bc:	00030d40 	.word	0x00030d40

080068c0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b085      	sub	sp, #20
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	460b      	mov	r3, r1
 80068ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	78fb      	ldrb	r3, [r7, #3]
 80068da:	68f9      	ldr	r1, [r7, #12]
 80068dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068e0:	4313      	orrs	r3, r2
 80068e2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3714      	adds	r7, #20
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr

080068f2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80068f2:	b580      	push	{r7, lr}
 80068f4:	b084      	sub	sp, #16
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	68fa      	ldr	r2, [r7, #12]
 8006908:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800690c:	f043 0302 	orr.w	r3, r3, #2
 8006910:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8006912:	2003      	movs	r0, #3
 8006914:	f7fb fb38 	bl	8001f88 <HAL_Delay>

  return HAL_OK;
 8006918:	2300      	movs	r3, #0
}
 800691a:	4618      	mov	r0, r3
 800691c:	3710      	adds	r7, #16
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
	...

08006924 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006924:	b480      	push	{r7}
 8006926:	b085      	sub	sp, #20
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800692c:	2300      	movs	r3, #0
 800692e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	3301      	adds	r3, #1
 8006934:	60fb      	str	r3, [r7, #12]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	4a13      	ldr	r2, [pc, #76]	; (8006988 <USB_CoreReset+0x64>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d901      	bls.n	8006942 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800693e:	2303      	movs	r3, #3
 8006940:	e01b      	b.n	800697a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	691b      	ldr	r3, [r3, #16]
 8006946:	2b00      	cmp	r3, #0
 8006948:	daf2      	bge.n	8006930 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800694a:	2300      	movs	r3, #0
 800694c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	691b      	ldr	r3, [r3, #16]
 8006952:	f043 0201 	orr.w	r2, r3, #1
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	3301      	adds	r3, #1
 800695e:	60fb      	str	r3, [r7, #12]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	4a09      	ldr	r2, [pc, #36]	; (8006988 <USB_CoreReset+0x64>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d901      	bls.n	800696c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006968:	2303      	movs	r3, #3
 800696a:	e006      	b.n	800697a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	691b      	ldr	r3, [r3, #16]
 8006970:	f003 0301 	and.w	r3, r3, #1
 8006974:	2b01      	cmp	r3, #1
 8006976:	d0f0      	beq.n	800695a <USB_CoreReset+0x36>

  return HAL_OK;
 8006978:	2300      	movs	r3, #0
}
 800697a:	4618      	mov	r0, r3
 800697c:	3714      	adds	r7, #20
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr
 8006986:	bf00      	nop
 8006988:	00030d40 	.word	0x00030d40

0800698c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800698c:	b480      	push	{r7}
 800698e:	b085      	sub	sp, #20
 8006990:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006992:	f3ef 8305 	mrs	r3, IPSR
 8006996:	60bb      	str	r3, [r7, #8]
  return(result);
 8006998:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800699a:	2b00      	cmp	r3, #0
 800699c:	d10f      	bne.n	80069be <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800699e:	f3ef 8310 	mrs	r3, PRIMASK
 80069a2:	607b      	str	r3, [r7, #4]
  return(result);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d109      	bne.n	80069be <osKernelInitialize+0x32>
 80069aa:	4b11      	ldr	r3, [pc, #68]	; (80069f0 <osKernelInitialize+0x64>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	2b02      	cmp	r3, #2
 80069b0:	d109      	bne.n	80069c6 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80069b2:	f3ef 8311 	mrs	r3, BASEPRI
 80069b6:	603b      	str	r3, [r7, #0]
  return(result);
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d003      	beq.n	80069c6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80069be:	f06f 0305 	mvn.w	r3, #5
 80069c2:	60fb      	str	r3, [r7, #12]
 80069c4:	e00c      	b.n	80069e0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80069c6:	4b0a      	ldr	r3, [pc, #40]	; (80069f0 <osKernelInitialize+0x64>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d105      	bne.n	80069da <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80069ce:	4b08      	ldr	r3, [pc, #32]	; (80069f0 <osKernelInitialize+0x64>)
 80069d0:	2201      	movs	r2, #1
 80069d2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80069d4:	2300      	movs	r3, #0
 80069d6:	60fb      	str	r3, [r7, #12]
 80069d8:	e002      	b.n	80069e0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80069da:	f04f 33ff 	mov.w	r3, #4294967295
 80069de:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80069e0:	68fb      	ldr	r3, [r7, #12]
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3714      	adds	r7, #20
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr
 80069ee:	bf00      	nop
 80069f0:	20000028 	.word	0x20000028

080069f4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069fa:	f3ef 8305 	mrs	r3, IPSR
 80069fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a00:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d10f      	bne.n	8006a26 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a06:	f3ef 8310 	mrs	r3, PRIMASK
 8006a0a:	607b      	str	r3, [r7, #4]
  return(result);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d109      	bne.n	8006a26 <osKernelStart+0x32>
 8006a12:	4b11      	ldr	r3, [pc, #68]	; (8006a58 <osKernelStart+0x64>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	2b02      	cmp	r3, #2
 8006a18:	d109      	bne.n	8006a2e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006a1a:	f3ef 8311 	mrs	r3, BASEPRI
 8006a1e:	603b      	str	r3, [r7, #0]
  return(result);
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d003      	beq.n	8006a2e <osKernelStart+0x3a>
    stat = osErrorISR;
 8006a26:	f06f 0305 	mvn.w	r3, #5
 8006a2a:	60fb      	str	r3, [r7, #12]
 8006a2c:	e00e      	b.n	8006a4c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8006a2e:	4b0a      	ldr	r3, [pc, #40]	; (8006a58 <osKernelStart+0x64>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d107      	bne.n	8006a46 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8006a36:	4b08      	ldr	r3, [pc, #32]	; (8006a58 <osKernelStart+0x64>)
 8006a38:	2202      	movs	r2, #2
 8006a3a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8006a3c:	f001 f97c 	bl	8007d38 <vTaskStartScheduler>
      stat = osOK;
 8006a40:	2300      	movs	r3, #0
 8006a42:	60fb      	str	r3, [r7, #12]
 8006a44:	e002      	b.n	8006a4c <osKernelStart+0x58>
    } else {
      stat = osError;
 8006a46:	f04f 33ff 	mov.w	r3, #4294967295
 8006a4a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3710      	adds	r7, #16
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop
 8006a58:	20000028 	.word	0x20000028

08006a5c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b084      	sub	sp, #16
 8006a60:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a62:	f3ef 8305 	mrs	r3, IPSR
 8006a66:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a68:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d10f      	bne.n	8006a8e <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a6e:	f3ef 8310 	mrs	r3, PRIMASK
 8006a72:	607b      	str	r3, [r7, #4]
  return(result);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d109      	bne.n	8006a8e <osKernelGetTickCount+0x32>
 8006a7a:	4b0b      	ldr	r3, [pc, #44]	; (8006aa8 <osKernelGetTickCount+0x4c>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	2b02      	cmp	r3, #2
 8006a80:	d109      	bne.n	8006a96 <osKernelGetTickCount+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006a82:	f3ef 8311 	mrs	r3, BASEPRI
 8006a86:	603b      	str	r3, [r7, #0]
  return(result);
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d003      	beq.n	8006a96 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8006a8e:	f001 fa77 	bl	8007f80 <xTaskGetTickCountFromISR>
 8006a92:	60f8      	str	r0, [r7, #12]
 8006a94:	e002      	b.n	8006a9c <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8006a96:	f001 fa63 	bl	8007f60 <xTaskGetTickCount>
 8006a9a:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3710      	adds	r7, #16
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
 8006aa6:	bf00      	nop
 8006aa8:	20000028 	.word	0x20000028

08006aac <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 8006aac:	b480      	push	{r7}
 8006aae:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 8006ab0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr
	...

08006ac0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b092      	sub	sp, #72	; 0x48
 8006ac4:	af04      	add	r7, sp, #16
 8006ac6:	60f8      	str	r0, [r7, #12]
 8006ac8:	60b9      	str	r1, [r7, #8]
 8006aca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006acc:	2300      	movs	r3, #0
 8006ace:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ad0:	f3ef 8305 	mrs	r3, IPSR
 8006ad4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	f040 8094 	bne.w	8006c06 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ade:	f3ef 8310 	mrs	r3, PRIMASK
 8006ae2:	623b      	str	r3, [r7, #32]
  return(result);
 8006ae4:	6a3b      	ldr	r3, [r7, #32]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	f040 808d 	bne.w	8006c06 <osThreadNew+0x146>
 8006aec:	4b48      	ldr	r3, [pc, #288]	; (8006c10 <osThreadNew+0x150>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	2b02      	cmp	r3, #2
 8006af2:	d106      	bne.n	8006b02 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006af4:	f3ef 8311 	mrs	r3, BASEPRI
 8006af8:	61fb      	str	r3, [r7, #28]
  return(result);
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	f040 8082 	bne.w	8006c06 <osThreadNew+0x146>
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d07e      	beq.n	8006c06 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8006b08:	2380      	movs	r3, #128	; 0x80
 8006b0a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8006b0c:	2318      	movs	r3, #24
 8006b0e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8006b10:	2300      	movs	r3, #0
 8006b12:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8006b14:	f107 031b 	add.w	r3, r7, #27
 8006b18:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8006b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8006b1e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d045      	beq.n	8006bb2 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d002      	beq.n	8006b34 <osThreadNew+0x74>
        name = attr->name;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	699b      	ldr	r3, [r3, #24]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d002      	beq.n	8006b42 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	699b      	ldr	r3, [r3, #24]
 8006b40:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d008      	beq.n	8006b5a <osThreadNew+0x9a>
 8006b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b4a:	2b38      	cmp	r3, #56	; 0x38
 8006b4c:	d805      	bhi.n	8006b5a <osThreadNew+0x9a>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	f003 0301 	and.w	r3, r3, #1
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d001      	beq.n	8006b5e <osThreadNew+0x9e>
        return (NULL);
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	e054      	b.n	8006c08 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	695b      	ldr	r3, [r3, #20]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d003      	beq.n	8006b6e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	695b      	ldr	r3, [r3, #20]
 8006b6a:	089b      	lsrs	r3, r3, #2
 8006b6c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d00e      	beq.n	8006b94 <osThreadNew+0xd4>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	68db      	ldr	r3, [r3, #12]
 8006b7a:	2b5b      	cmp	r3, #91	; 0x5b
 8006b7c:	d90a      	bls.n	8006b94 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d006      	beq.n	8006b94 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	695b      	ldr	r3, [r3, #20]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d002      	beq.n	8006b94 <osThreadNew+0xd4>
        mem = 1;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b92:	e010      	b.n	8006bb6 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d10c      	bne.n	8006bb6 <osThreadNew+0xf6>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	68db      	ldr	r3, [r3, #12]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d108      	bne.n	8006bb6 <osThreadNew+0xf6>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	691b      	ldr	r3, [r3, #16]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d104      	bne.n	8006bb6 <osThreadNew+0xf6>
          mem = 0;
 8006bac:	2300      	movs	r3, #0
 8006bae:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bb0:	e001      	b.n	8006bb6 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8006bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d110      	bne.n	8006bde <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006bc4:	9202      	str	r2, [sp, #8]
 8006bc6:	9301      	str	r3, [sp, #4]
 8006bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bca:	9300      	str	r3, [sp, #0]
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bd0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006bd2:	68f8      	ldr	r0, [r7, #12]
 8006bd4:	f000 fe5e 	bl	8007894 <xTaskCreateStatic>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	617b      	str	r3, [r7, #20]
 8006bdc:	e013      	b.n	8006c06 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8006bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d110      	bne.n	8006c06 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be6:	b29a      	uxth	r2, r3
 8006be8:	f107 0314 	add.w	r3, r7, #20
 8006bec:	9301      	str	r3, [sp, #4]
 8006bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf0:	9300      	str	r3, [sp, #0]
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006bf6:	68f8      	ldr	r0, [r7, #12]
 8006bf8:	f000 feab 	bl	8007952 <xTaskCreate>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d001      	beq.n	8006c06 <osThreadNew+0x146>
          hTask = NULL;
 8006c02:	2300      	movs	r3, #0
 8006c04:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006c06:	697b      	ldr	r3, [r7, #20]
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3738      	adds	r7, #56	; 0x38
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}
 8006c10:	20000028 	.word	0x20000028

08006c14 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b086      	sub	sp, #24
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c1c:	f3ef 8305 	mrs	r3, IPSR
 8006c20:	613b      	str	r3, [r7, #16]
  return(result);
 8006c22:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d10f      	bne.n	8006c48 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c28:	f3ef 8310 	mrs	r3, PRIMASK
 8006c2c:	60fb      	str	r3, [r7, #12]
  return(result);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d109      	bne.n	8006c48 <osDelay+0x34>
 8006c34:	4b0d      	ldr	r3, [pc, #52]	; (8006c6c <osDelay+0x58>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	2b02      	cmp	r3, #2
 8006c3a:	d109      	bne.n	8006c50 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006c3c:	f3ef 8311 	mrs	r3, BASEPRI
 8006c40:	60bb      	str	r3, [r7, #8]
  return(result);
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d003      	beq.n	8006c50 <osDelay+0x3c>
    stat = osErrorISR;
 8006c48:	f06f 0305 	mvn.w	r3, #5
 8006c4c:	617b      	str	r3, [r7, #20]
 8006c4e:	e007      	b.n	8006c60 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006c50:	2300      	movs	r3, #0
 8006c52:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d002      	beq.n	8006c60 <osDelay+0x4c>
      vTaskDelay(ticks);
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f001 f836 	bl	8007ccc <vTaskDelay>
    }
  }

  return (stat);
 8006c60:	697b      	ldr	r3, [r7, #20]
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3718      	adds	r7, #24
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
 8006c6a:	bf00      	nop
 8006c6c:	20000028 	.word	0x20000028

08006c70 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b088      	sub	sp, #32
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c78:	f3ef 8305 	mrs	r3, IPSR
 8006c7c:	61bb      	str	r3, [r7, #24]
  return(result);
 8006c7e:	69bb      	ldr	r3, [r7, #24]
  TickType_t tcnt;
  osStatus_t stat;

  if (IS_IRQ()) {
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d10f      	bne.n	8006ca4 <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c84:	f3ef 8310 	mrs	r3, PRIMASK
 8006c88:	617b      	str	r3, [r7, #20]
  return(result);
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d109      	bne.n	8006ca4 <osDelayUntil+0x34>
 8006c90:	4b10      	ldr	r3, [pc, #64]	; (8006cd4 <osDelayUntil+0x64>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	2b02      	cmp	r3, #2
 8006c96:	d109      	bne.n	8006cac <osDelayUntil+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006c98:	f3ef 8311 	mrs	r3, BASEPRI
 8006c9c:	613b      	str	r3, [r7, #16]
  return(result);
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d003      	beq.n	8006cac <osDelayUntil+0x3c>
    stat = osErrorISR;
 8006ca4:	f06f 0305 	mvn.w	r3, #5
 8006ca8:	61fb      	str	r3, [r7, #28]
 8006caa:	e00e      	b.n	8006cca <osDelayUntil+0x5a>
  }
  else {
    stat = osOK;
 8006cac:	2300      	movs	r3, #0
 8006cae:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 8006cb0:	f001 f956 	bl	8007f60 <xTaskGetTickCount>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	60fb      	str	r3, [r7, #12]

    vTaskDelayUntil (&tcnt, (TickType_t)(ticks - tcnt));
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	687a      	ldr	r2, [r7, #4]
 8006cbc:	1ad2      	subs	r2, r2, r3
 8006cbe:	f107 030c 	add.w	r3, r7, #12
 8006cc2:	4611      	mov	r1, r2
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f000 ff81 	bl	8007bcc <vTaskDelayUntil>
  }

  return (stat);
 8006cca:	69fb      	ldr	r3, [r7, #28]
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3720      	adds	r7, #32
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}
 8006cd4:	20000028 	.word	0x20000028

08006cd8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006cd8:	b480      	push	{r7}
 8006cda:	b085      	sub	sp, #20
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	60f8      	str	r0, [r7, #12]
 8006ce0:	60b9      	str	r1, [r7, #8]
 8006ce2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	4a07      	ldr	r2, [pc, #28]	; (8006d04 <vApplicationGetIdleTaskMemory+0x2c>)
 8006ce8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	4a06      	ldr	r2, [pc, #24]	; (8006d08 <vApplicationGetIdleTaskMemory+0x30>)
 8006cee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2280      	movs	r2, #128	; 0x80
 8006cf4:	601a      	str	r2, [r3, #0]
}
 8006cf6:	bf00      	nop
 8006cf8:	3714      	adds	r7, #20
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr
 8006d02:	bf00      	nop
 8006d04:	2000002c 	.word	0x2000002c
 8006d08:	20000088 	.word	0x20000088

08006d0c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006d0c:	b480      	push	{r7}
 8006d0e:	b085      	sub	sp, #20
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	4a07      	ldr	r2, [pc, #28]	; (8006d38 <vApplicationGetTimerTaskMemory+0x2c>)
 8006d1c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	4a06      	ldr	r2, [pc, #24]	; (8006d3c <vApplicationGetTimerTaskMemory+0x30>)
 8006d22:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006d2a:	601a      	str	r2, [r3, #0]
}
 8006d2c:	bf00      	nop
 8006d2e:	3714      	adds	r7, #20
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr
 8006d38:	20000288 	.word	0x20000288
 8006d3c:	200002e4 	.word	0x200002e4

08006d40 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f103 0208 	add.w	r2, r3, #8
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f04f 32ff 	mov.w	r2, #4294967295
 8006d58:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f103 0208 	add.w	r2, r3, #8
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f103 0208 	add.w	r2, r3, #8
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2200      	movs	r2, #0
 8006d72:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006d74:	bf00      	nop
 8006d76:	370c      	adds	r7, #12
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr

08006d80 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006d80:	b480      	push	{r7}
 8006d82:	b083      	sub	sp, #12
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006d8e:	bf00      	nop
 8006d90:	370c      	adds	r7, #12
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr

08006d9a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d9a:	b480      	push	{r7}
 8006d9c:	b085      	sub	sp, #20
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
 8006da2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	68fa      	ldr	r2, [r7, #12]
 8006dae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	689a      	ldr	r2, [r3, #8]
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	683a      	ldr	r2, [r7, #0]
 8006dbe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	683a      	ldr	r2, [r7, #0]
 8006dc4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	1c5a      	adds	r2, r3, #1
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	601a      	str	r2, [r3, #0]
}
 8006dd6:	bf00      	nop
 8006dd8:	3714      	adds	r7, #20
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr

08006de2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006de2:	b480      	push	{r7}
 8006de4:	b085      	sub	sp, #20
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]
 8006dea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006df8:	d103      	bne.n	8006e02 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	691b      	ldr	r3, [r3, #16]
 8006dfe:	60fb      	str	r3, [r7, #12]
 8006e00:	e00c      	b.n	8006e1c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	3308      	adds	r3, #8
 8006e06:	60fb      	str	r3, [r7, #12]
 8006e08:	e002      	b.n	8006e10 <vListInsert+0x2e>
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	60fb      	str	r3, [r7, #12]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	68ba      	ldr	r2, [r7, #8]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d2f6      	bcs.n	8006e0a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	685a      	ldr	r2, [r3, #4]
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	683a      	ldr	r2, [r7, #0]
 8006e2a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	68fa      	ldr	r2, [r7, #12]
 8006e30:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	683a      	ldr	r2, [r7, #0]
 8006e36:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	1c5a      	adds	r2, r3, #1
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	601a      	str	r2, [r3, #0]
}
 8006e48:	bf00      	nop
 8006e4a:	3714      	adds	r7, #20
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr

08006e54 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006e54:	b480      	push	{r7}
 8006e56:	b085      	sub	sp, #20
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	691b      	ldr	r3, [r3, #16]
 8006e60:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	6892      	ldr	r2, [r2, #8]
 8006e6a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	6852      	ldr	r2, [r2, #4]
 8006e74:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d103      	bne.n	8006e88 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	689a      	ldr	r2, [r3, #8]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	1e5a      	subs	r2, r3, #1
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3714      	adds	r7, #20
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr

08006ea8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d10b      	bne.n	8006ed4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec0:	b672      	cpsid	i
 8006ec2:	f383 8811 	msr	BASEPRI, r3
 8006ec6:	f3bf 8f6f 	isb	sy
 8006eca:	f3bf 8f4f 	dsb	sy
 8006ece:	b662      	cpsie	i
 8006ed0:	60bb      	str	r3, [r7, #8]
 8006ed2:	e7fe      	b.n	8006ed2 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8006ed4:	f002 f8a0 	bl	8009018 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ee0:	68f9      	ldr	r1, [r7, #12]
 8006ee2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006ee4:	fb01 f303 	mul.w	r3, r1, r3
 8006ee8:	441a      	add	r2, r3
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681a      	ldr	r2, [r3, #0]
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f04:	3b01      	subs	r3, #1
 8006f06:	68f9      	ldr	r1, [r7, #12]
 8006f08:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006f0a:	fb01 f303 	mul.w	r3, r1, r3
 8006f0e:	441a      	add	r2, r3
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	22ff      	movs	r2, #255	; 0xff
 8006f18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	22ff      	movs	r2, #255	; 0xff
 8006f20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d114      	bne.n	8006f54 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	691b      	ldr	r3, [r3, #16]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d01a      	beq.n	8006f68 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	3310      	adds	r3, #16
 8006f36:	4618      	mov	r0, r3
 8006f38:	f001 f9a4 	bl	8008284 <xTaskRemoveFromEventList>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d012      	beq.n	8006f68 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006f42:	4b0d      	ldr	r3, [pc, #52]	; (8006f78 <xQueueGenericReset+0xd0>)
 8006f44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f48:	601a      	str	r2, [r3, #0]
 8006f4a:	f3bf 8f4f 	dsb	sy
 8006f4e:	f3bf 8f6f 	isb	sy
 8006f52:	e009      	b.n	8006f68 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	3310      	adds	r3, #16
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f7ff fef1 	bl	8006d40 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	3324      	adds	r3, #36	; 0x24
 8006f62:	4618      	mov	r0, r3
 8006f64:	f7ff feec 	bl	8006d40 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006f68:	f002 f888 	bl	800907c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006f6c:	2301      	movs	r3, #1
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3710      	adds	r7, #16
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	bf00      	nop
 8006f78:	e000ed04 	.word	0xe000ed04

08006f7c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b08e      	sub	sp, #56	; 0x38
 8006f80:	af02      	add	r7, sp, #8
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	60b9      	str	r1, [r7, #8]
 8006f86:	607a      	str	r2, [r7, #4]
 8006f88:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d10b      	bne.n	8006fa8 <xQueueGenericCreateStatic+0x2c>
 8006f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f94:	b672      	cpsid	i
 8006f96:	f383 8811 	msr	BASEPRI, r3
 8006f9a:	f3bf 8f6f 	isb	sy
 8006f9e:	f3bf 8f4f 	dsb	sy
 8006fa2:	b662      	cpsie	i
 8006fa4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fa6:	e7fe      	b.n	8006fa6 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d10b      	bne.n	8006fc6 <xQueueGenericCreateStatic+0x4a>
 8006fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb2:	b672      	cpsid	i
 8006fb4:	f383 8811 	msr	BASEPRI, r3
 8006fb8:	f3bf 8f6f 	isb	sy
 8006fbc:	f3bf 8f4f 	dsb	sy
 8006fc0:	b662      	cpsie	i
 8006fc2:	627b      	str	r3, [r7, #36]	; 0x24
 8006fc4:	e7fe      	b.n	8006fc4 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d002      	beq.n	8006fd2 <xQueueGenericCreateStatic+0x56>
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d001      	beq.n	8006fd6 <xQueueGenericCreateStatic+0x5a>
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e000      	b.n	8006fd8 <xQueueGenericCreateStatic+0x5c>
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d10b      	bne.n	8006ff4 <xQueueGenericCreateStatic+0x78>
 8006fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe0:	b672      	cpsid	i
 8006fe2:	f383 8811 	msr	BASEPRI, r3
 8006fe6:	f3bf 8f6f 	isb	sy
 8006fea:	f3bf 8f4f 	dsb	sy
 8006fee:	b662      	cpsie	i
 8006ff0:	623b      	str	r3, [r7, #32]
 8006ff2:	e7fe      	b.n	8006ff2 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d102      	bne.n	8007000 <xQueueGenericCreateStatic+0x84>
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d101      	bne.n	8007004 <xQueueGenericCreateStatic+0x88>
 8007000:	2301      	movs	r3, #1
 8007002:	e000      	b.n	8007006 <xQueueGenericCreateStatic+0x8a>
 8007004:	2300      	movs	r3, #0
 8007006:	2b00      	cmp	r3, #0
 8007008:	d10b      	bne.n	8007022 <xQueueGenericCreateStatic+0xa6>
 800700a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800700e:	b672      	cpsid	i
 8007010:	f383 8811 	msr	BASEPRI, r3
 8007014:	f3bf 8f6f 	isb	sy
 8007018:	f3bf 8f4f 	dsb	sy
 800701c:	b662      	cpsie	i
 800701e:	61fb      	str	r3, [r7, #28]
 8007020:	e7fe      	b.n	8007020 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007022:	2350      	movs	r3, #80	; 0x50
 8007024:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	2b50      	cmp	r3, #80	; 0x50
 800702a:	d00b      	beq.n	8007044 <xQueueGenericCreateStatic+0xc8>
 800702c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007030:	b672      	cpsid	i
 8007032:	f383 8811 	msr	BASEPRI, r3
 8007036:	f3bf 8f6f 	isb	sy
 800703a:	f3bf 8f4f 	dsb	sy
 800703e:	b662      	cpsie	i
 8007040:	61bb      	str	r3, [r7, #24]
 8007042:	e7fe      	b.n	8007042 <xQueueGenericCreateStatic+0xc6>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800704a:	2b00      	cmp	r3, #0
 800704c:	d00d      	beq.n	800706a <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800704e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007050:	2201      	movs	r2, #1
 8007052:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007056:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800705a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800705c:	9300      	str	r3, [sp, #0]
 800705e:	4613      	mov	r3, r2
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	68b9      	ldr	r1, [r7, #8]
 8007064:	68f8      	ldr	r0, [r7, #12]
 8007066:	f000 f805 	bl	8007074 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800706a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800706c:	4618      	mov	r0, r3
 800706e:	3730      	adds	r7, #48	; 0x30
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b084      	sub	sp, #16
 8007078:	af00      	add	r7, sp, #0
 800707a:	60f8      	str	r0, [r7, #12]
 800707c:	60b9      	str	r1, [r7, #8]
 800707e:	607a      	str	r2, [r7, #4]
 8007080:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d103      	bne.n	8007090 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007088:	69bb      	ldr	r3, [r7, #24]
 800708a:	69ba      	ldr	r2, [r7, #24]
 800708c:	601a      	str	r2, [r3, #0]
 800708e:	e002      	b.n	8007096 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007090:	69bb      	ldr	r3, [r7, #24]
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007096:	69bb      	ldr	r3, [r7, #24]
 8007098:	68fa      	ldr	r2, [r7, #12]
 800709a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800709c:	69bb      	ldr	r3, [r7, #24]
 800709e:	68ba      	ldr	r2, [r7, #8]
 80070a0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80070a2:	2101      	movs	r1, #1
 80070a4:	69b8      	ldr	r0, [r7, #24]
 80070a6:	f7ff feff 	bl	8006ea8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80070aa:	69bb      	ldr	r3, [r7, #24]
 80070ac:	78fa      	ldrb	r2, [r7, #3]
 80070ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80070b2:	bf00      	nop
 80070b4:	3710      	adds	r7, #16
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}
	...

080070bc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b08e      	sub	sp, #56	; 0x38
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	60f8      	str	r0, [r7, #12]
 80070c4:	60b9      	str	r1, [r7, #8]
 80070c6:	607a      	str	r2, [r7, #4]
 80070c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80070ca:	2300      	movs	r3, #0
 80070cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80070d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d10b      	bne.n	80070f0 <xQueueGenericSend+0x34>
 80070d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070dc:	b672      	cpsid	i
 80070de:	f383 8811 	msr	BASEPRI, r3
 80070e2:	f3bf 8f6f 	isb	sy
 80070e6:	f3bf 8f4f 	dsb	sy
 80070ea:	b662      	cpsie	i
 80070ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80070ee:	e7fe      	b.n	80070ee <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d103      	bne.n	80070fe <xQueueGenericSend+0x42>
 80070f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d101      	bne.n	8007102 <xQueueGenericSend+0x46>
 80070fe:	2301      	movs	r3, #1
 8007100:	e000      	b.n	8007104 <xQueueGenericSend+0x48>
 8007102:	2300      	movs	r3, #0
 8007104:	2b00      	cmp	r3, #0
 8007106:	d10b      	bne.n	8007120 <xQueueGenericSend+0x64>
 8007108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800710c:	b672      	cpsid	i
 800710e:	f383 8811 	msr	BASEPRI, r3
 8007112:	f3bf 8f6f 	isb	sy
 8007116:	f3bf 8f4f 	dsb	sy
 800711a:	b662      	cpsie	i
 800711c:	627b      	str	r3, [r7, #36]	; 0x24
 800711e:	e7fe      	b.n	800711e <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	2b02      	cmp	r3, #2
 8007124:	d103      	bne.n	800712e <xQueueGenericSend+0x72>
 8007126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800712a:	2b01      	cmp	r3, #1
 800712c:	d101      	bne.n	8007132 <xQueueGenericSend+0x76>
 800712e:	2301      	movs	r3, #1
 8007130:	e000      	b.n	8007134 <xQueueGenericSend+0x78>
 8007132:	2300      	movs	r3, #0
 8007134:	2b00      	cmp	r3, #0
 8007136:	d10b      	bne.n	8007150 <xQueueGenericSend+0x94>
 8007138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800713c:	b672      	cpsid	i
 800713e:	f383 8811 	msr	BASEPRI, r3
 8007142:	f3bf 8f6f 	isb	sy
 8007146:	f3bf 8f4f 	dsb	sy
 800714a:	b662      	cpsie	i
 800714c:	623b      	str	r3, [r7, #32]
 800714e:	e7fe      	b.n	800714e <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007150:	f001 fa5c 	bl	800860c <xTaskGetSchedulerState>
 8007154:	4603      	mov	r3, r0
 8007156:	2b00      	cmp	r3, #0
 8007158:	d102      	bne.n	8007160 <xQueueGenericSend+0xa4>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d101      	bne.n	8007164 <xQueueGenericSend+0xa8>
 8007160:	2301      	movs	r3, #1
 8007162:	e000      	b.n	8007166 <xQueueGenericSend+0xaa>
 8007164:	2300      	movs	r3, #0
 8007166:	2b00      	cmp	r3, #0
 8007168:	d10b      	bne.n	8007182 <xQueueGenericSend+0xc6>
 800716a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800716e:	b672      	cpsid	i
 8007170:	f383 8811 	msr	BASEPRI, r3
 8007174:	f3bf 8f6f 	isb	sy
 8007178:	f3bf 8f4f 	dsb	sy
 800717c:	b662      	cpsie	i
 800717e:	61fb      	str	r3, [r7, #28]
 8007180:	e7fe      	b.n	8007180 <xQueueGenericSend+0xc4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007182:	f001 ff49 	bl	8009018 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007188:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800718a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800718c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800718e:	429a      	cmp	r2, r3
 8007190:	d302      	bcc.n	8007198 <xQueueGenericSend+0xdc>
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	2b02      	cmp	r3, #2
 8007196:	d129      	bne.n	80071ec <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007198:	683a      	ldr	r2, [r7, #0]
 800719a:	68b9      	ldr	r1, [r7, #8]
 800719c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800719e:	f000 fa0d 	bl	80075bc <prvCopyDataToQueue>
 80071a2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80071a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d010      	beq.n	80071ce <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80071ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ae:	3324      	adds	r3, #36	; 0x24
 80071b0:	4618      	mov	r0, r3
 80071b2:	f001 f867 	bl	8008284 <xTaskRemoveFromEventList>
 80071b6:	4603      	mov	r3, r0
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d013      	beq.n	80071e4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80071bc:	4b3f      	ldr	r3, [pc, #252]	; (80072bc <xQueueGenericSend+0x200>)
 80071be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071c2:	601a      	str	r2, [r3, #0]
 80071c4:	f3bf 8f4f 	dsb	sy
 80071c8:	f3bf 8f6f 	isb	sy
 80071cc:	e00a      	b.n	80071e4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80071ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d007      	beq.n	80071e4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80071d4:	4b39      	ldr	r3, [pc, #228]	; (80072bc <xQueueGenericSend+0x200>)
 80071d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071da:	601a      	str	r2, [r3, #0]
 80071dc:	f3bf 8f4f 	dsb	sy
 80071e0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80071e4:	f001 ff4a 	bl	800907c <vPortExitCritical>
				return pdPASS;
 80071e8:	2301      	movs	r3, #1
 80071ea:	e063      	b.n	80072b4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d103      	bne.n	80071fa <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80071f2:	f001 ff43 	bl	800907c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80071f6:	2300      	movs	r3, #0
 80071f8:	e05c      	b.n	80072b4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80071fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d106      	bne.n	800720e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007200:	f107 0314 	add.w	r3, r7, #20
 8007204:	4618      	mov	r0, r3
 8007206:	f001 f8a1 	bl	800834c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800720a:	2301      	movs	r3, #1
 800720c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800720e:	f001 ff35 	bl	800907c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007212:	f000 fdf9 	bl	8007e08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007216:	f001 feff 	bl	8009018 <vPortEnterCritical>
 800721a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800721c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007220:	b25b      	sxtb	r3, r3
 8007222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007226:	d103      	bne.n	8007230 <xQueueGenericSend+0x174>
 8007228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800722a:	2200      	movs	r2, #0
 800722c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007232:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007236:	b25b      	sxtb	r3, r3
 8007238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800723c:	d103      	bne.n	8007246 <xQueueGenericSend+0x18a>
 800723e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007240:	2200      	movs	r2, #0
 8007242:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007246:	f001 ff19 	bl	800907c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800724a:	1d3a      	adds	r2, r7, #4
 800724c:	f107 0314 	add.w	r3, r7, #20
 8007250:	4611      	mov	r1, r2
 8007252:	4618      	mov	r0, r3
 8007254:	f001 f890 	bl	8008378 <xTaskCheckForTimeOut>
 8007258:	4603      	mov	r3, r0
 800725a:	2b00      	cmp	r3, #0
 800725c:	d124      	bne.n	80072a8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800725e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007260:	f000 faa4 	bl	80077ac <prvIsQueueFull>
 8007264:	4603      	mov	r3, r0
 8007266:	2b00      	cmp	r3, #0
 8007268:	d018      	beq.n	800729c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800726a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800726c:	3310      	adds	r3, #16
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	4611      	mov	r1, r2
 8007272:	4618      	mov	r0, r3
 8007274:	f000 ffb4 	bl	80081e0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007278:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800727a:	f000 fa2f 	bl	80076dc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800727e:	f000 fdd1 	bl	8007e24 <xTaskResumeAll>
 8007282:	4603      	mov	r3, r0
 8007284:	2b00      	cmp	r3, #0
 8007286:	f47f af7c 	bne.w	8007182 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800728a:	4b0c      	ldr	r3, [pc, #48]	; (80072bc <xQueueGenericSend+0x200>)
 800728c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007290:	601a      	str	r2, [r3, #0]
 8007292:	f3bf 8f4f 	dsb	sy
 8007296:	f3bf 8f6f 	isb	sy
 800729a:	e772      	b.n	8007182 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800729c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800729e:	f000 fa1d 	bl	80076dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80072a2:	f000 fdbf 	bl	8007e24 <xTaskResumeAll>
 80072a6:	e76c      	b.n	8007182 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80072a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072aa:	f000 fa17 	bl	80076dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80072ae:	f000 fdb9 	bl	8007e24 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80072b2:	2300      	movs	r3, #0
		}
	}
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3738      	adds	r7, #56	; 0x38
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}
 80072bc:	e000ed04 	.word	0xe000ed04

080072c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b08e      	sub	sp, #56	; 0x38
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	60b9      	str	r1, [r7, #8]
 80072ca:	607a      	str	r2, [r7, #4]
 80072cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80072d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d10b      	bne.n	80072f0 <xQueueGenericSendFromISR+0x30>
 80072d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072dc:	b672      	cpsid	i
 80072de:	f383 8811 	msr	BASEPRI, r3
 80072e2:	f3bf 8f6f 	isb	sy
 80072e6:	f3bf 8f4f 	dsb	sy
 80072ea:	b662      	cpsie	i
 80072ec:	627b      	str	r3, [r7, #36]	; 0x24
 80072ee:	e7fe      	b.n	80072ee <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d103      	bne.n	80072fe <xQueueGenericSendFromISR+0x3e>
 80072f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d101      	bne.n	8007302 <xQueueGenericSendFromISR+0x42>
 80072fe:	2301      	movs	r3, #1
 8007300:	e000      	b.n	8007304 <xQueueGenericSendFromISR+0x44>
 8007302:	2300      	movs	r3, #0
 8007304:	2b00      	cmp	r3, #0
 8007306:	d10b      	bne.n	8007320 <xQueueGenericSendFromISR+0x60>
 8007308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800730c:	b672      	cpsid	i
 800730e:	f383 8811 	msr	BASEPRI, r3
 8007312:	f3bf 8f6f 	isb	sy
 8007316:	f3bf 8f4f 	dsb	sy
 800731a:	b662      	cpsie	i
 800731c:	623b      	str	r3, [r7, #32]
 800731e:	e7fe      	b.n	800731e <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	2b02      	cmp	r3, #2
 8007324:	d103      	bne.n	800732e <xQueueGenericSendFromISR+0x6e>
 8007326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800732a:	2b01      	cmp	r3, #1
 800732c:	d101      	bne.n	8007332 <xQueueGenericSendFromISR+0x72>
 800732e:	2301      	movs	r3, #1
 8007330:	e000      	b.n	8007334 <xQueueGenericSendFromISR+0x74>
 8007332:	2300      	movs	r3, #0
 8007334:	2b00      	cmp	r3, #0
 8007336:	d10b      	bne.n	8007350 <xQueueGenericSendFromISR+0x90>
 8007338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800733c:	b672      	cpsid	i
 800733e:	f383 8811 	msr	BASEPRI, r3
 8007342:	f3bf 8f6f 	isb	sy
 8007346:	f3bf 8f4f 	dsb	sy
 800734a:	b662      	cpsie	i
 800734c:	61fb      	str	r3, [r7, #28]
 800734e:	e7fe      	b.n	800734e <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007350:	f001 ff42 	bl	80091d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007354:	f3ef 8211 	mrs	r2, BASEPRI
 8007358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800735c:	b672      	cpsid	i
 800735e:	f383 8811 	msr	BASEPRI, r3
 8007362:	f3bf 8f6f 	isb	sy
 8007366:	f3bf 8f4f 	dsb	sy
 800736a:	b662      	cpsie	i
 800736c:	61ba      	str	r2, [r7, #24]
 800736e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007370:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007372:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007376:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800737a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800737c:	429a      	cmp	r2, r3
 800737e:	d302      	bcc.n	8007386 <xQueueGenericSendFromISR+0xc6>
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	2b02      	cmp	r3, #2
 8007384:	d12c      	bne.n	80073e0 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007388:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800738c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007390:	683a      	ldr	r2, [r7, #0]
 8007392:	68b9      	ldr	r1, [r7, #8]
 8007394:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007396:	f000 f911 	bl	80075bc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800739a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800739e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073a2:	d112      	bne.n	80073ca <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80073a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d016      	beq.n	80073da <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80073ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ae:	3324      	adds	r3, #36	; 0x24
 80073b0:	4618      	mov	r0, r3
 80073b2:	f000 ff67 	bl	8008284 <xTaskRemoveFromEventList>
 80073b6:	4603      	mov	r3, r0
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d00e      	beq.n	80073da <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d00b      	beq.n	80073da <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2201      	movs	r2, #1
 80073c6:	601a      	str	r2, [r3, #0]
 80073c8:	e007      	b.n	80073da <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80073ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80073ce:	3301      	adds	r3, #1
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	b25a      	sxtb	r2, r3
 80073d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80073da:	2301      	movs	r3, #1
 80073dc:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80073de:	e001      	b.n	80073e4 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80073e0:	2300      	movs	r3, #0
 80073e2:	637b      	str	r3, [r7, #52]	; 0x34
 80073e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80073ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3738      	adds	r7, #56	; 0x38
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b08c      	sub	sp, #48	; 0x30
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	60f8      	str	r0, [r7, #12]
 8007400:	60b9      	str	r1, [r7, #8]
 8007402:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007404:	2300      	movs	r3, #0
 8007406:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800740c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800740e:	2b00      	cmp	r3, #0
 8007410:	d10b      	bne.n	800742a <xQueueReceive+0x32>
	__asm volatile
 8007412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007416:	b672      	cpsid	i
 8007418:	f383 8811 	msr	BASEPRI, r3
 800741c:	f3bf 8f6f 	isb	sy
 8007420:	f3bf 8f4f 	dsb	sy
 8007424:	b662      	cpsie	i
 8007426:	623b      	str	r3, [r7, #32]
 8007428:	e7fe      	b.n	8007428 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d103      	bne.n	8007438 <xQueueReceive+0x40>
 8007430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007434:	2b00      	cmp	r3, #0
 8007436:	d101      	bne.n	800743c <xQueueReceive+0x44>
 8007438:	2301      	movs	r3, #1
 800743a:	e000      	b.n	800743e <xQueueReceive+0x46>
 800743c:	2300      	movs	r3, #0
 800743e:	2b00      	cmp	r3, #0
 8007440:	d10b      	bne.n	800745a <xQueueReceive+0x62>
 8007442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007446:	b672      	cpsid	i
 8007448:	f383 8811 	msr	BASEPRI, r3
 800744c:	f3bf 8f6f 	isb	sy
 8007450:	f3bf 8f4f 	dsb	sy
 8007454:	b662      	cpsie	i
 8007456:	61fb      	str	r3, [r7, #28]
 8007458:	e7fe      	b.n	8007458 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800745a:	f001 f8d7 	bl	800860c <xTaskGetSchedulerState>
 800745e:	4603      	mov	r3, r0
 8007460:	2b00      	cmp	r3, #0
 8007462:	d102      	bne.n	800746a <xQueueReceive+0x72>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d101      	bne.n	800746e <xQueueReceive+0x76>
 800746a:	2301      	movs	r3, #1
 800746c:	e000      	b.n	8007470 <xQueueReceive+0x78>
 800746e:	2300      	movs	r3, #0
 8007470:	2b00      	cmp	r3, #0
 8007472:	d10b      	bne.n	800748c <xQueueReceive+0x94>
 8007474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007478:	b672      	cpsid	i
 800747a:	f383 8811 	msr	BASEPRI, r3
 800747e:	f3bf 8f6f 	isb	sy
 8007482:	f3bf 8f4f 	dsb	sy
 8007486:	b662      	cpsie	i
 8007488:	61bb      	str	r3, [r7, #24]
 800748a:	e7fe      	b.n	800748a <xQueueReceive+0x92>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800748c:	f001 fdc4 	bl	8009018 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007494:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007498:	2b00      	cmp	r3, #0
 800749a:	d01f      	beq.n	80074dc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800749c:	68b9      	ldr	r1, [r7, #8]
 800749e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074a0:	f000 f8f6 	bl	8007690 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80074a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a6:	1e5a      	subs	r2, r3, #1
 80074a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074aa:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80074ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ae:	691b      	ldr	r3, [r3, #16]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d00f      	beq.n	80074d4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80074b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b6:	3310      	adds	r3, #16
 80074b8:	4618      	mov	r0, r3
 80074ba:	f000 fee3 	bl	8008284 <xTaskRemoveFromEventList>
 80074be:	4603      	mov	r3, r0
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d007      	beq.n	80074d4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80074c4:	4b3c      	ldr	r3, [pc, #240]	; (80075b8 <xQueueReceive+0x1c0>)
 80074c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074ca:	601a      	str	r2, [r3, #0]
 80074cc:	f3bf 8f4f 	dsb	sy
 80074d0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80074d4:	f001 fdd2 	bl	800907c <vPortExitCritical>
				return pdPASS;
 80074d8:	2301      	movs	r3, #1
 80074da:	e069      	b.n	80075b0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d103      	bne.n	80074ea <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80074e2:	f001 fdcb 	bl	800907c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80074e6:	2300      	movs	r3, #0
 80074e8:	e062      	b.n	80075b0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80074ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d106      	bne.n	80074fe <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80074f0:	f107 0310 	add.w	r3, r7, #16
 80074f4:	4618      	mov	r0, r3
 80074f6:	f000 ff29 	bl	800834c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80074fa:	2301      	movs	r3, #1
 80074fc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80074fe:	f001 fdbd 	bl	800907c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007502:	f000 fc81 	bl	8007e08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007506:	f001 fd87 	bl	8009018 <vPortEnterCritical>
 800750a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800750c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007510:	b25b      	sxtb	r3, r3
 8007512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007516:	d103      	bne.n	8007520 <xQueueReceive+0x128>
 8007518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800751a:	2200      	movs	r2, #0
 800751c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007522:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007526:	b25b      	sxtb	r3, r3
 8007528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800752c:	d103      	bne.n	8007536 <xQueueReceive+0x13e>
 800752e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007530:	2200      	movs	r2, #0
 8007532:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007536:	f001 fda1 	bl	800907c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800753a:	1d3a      	adds	r2, r7, #4
 800753c:	f107 0310 	add.w	r3, r7, #16
 8007540:	4611      	mov	r1, r2
 8007542:	4618      	mov	r0, r3
 8007544:	f000 ff18 	bl	8008378 <xTaskCheckForTimeOut>
 8007548:	4603      	mov	r3, r0
 800754a:	2b00      	cmp	r3, #0
 800754c:	d123      	bne.n	8007596 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800754e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007550:	f000 f916 	bl	8007780 <prvIsQueueEmpty>
 8007554:	4603      	mov	r3, r0
 8007556:	2b00      	cmp	r3, #0
 8007558:	d017      	beq.n	800758a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800755a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800755c:	3324      	adds	r3, #36	; 0x24
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	4611      	mov	r1, r2
 8007562:	4618      	mov	r0, r3
 8007564:	f000 fe3c 	bl	80081e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007568:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800756a:	f000 f8b7 	bl	80076dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800756e:	f000 fc59 	bl	8007e24 <xTaskResumeAll>
 8007572:	4603      	mov	r3, r0
 8007574:	2b00      	cmp	r3, #0
 8007576:	d189      	bne.n	800748c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007578:	4b0f      	ldr	r3, [pc, #60]	; (80075b8 <xQueueReceive+0x1c0>)
 800757a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800757e:	601a      	str	r2, [r3, #0]
 8007580:	f3bf 8f4f 	dsb	sy
 8007584:	f3bf 8f6f 	isb	sy
 8007588:	e780      	b.n	800748c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800758a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800758c:	f000 f8a6 	bl	80076dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007590:	f000 fc48 	bl	8007e24 <xTaskResumeAll>
 8007594:	e77a      	b.n	800748c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007596:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007598:	f000 f8a0 	bl	80076dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800759c:	f000 fc42 	bl	8007e24 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80075a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075a2:	f000 f8ed 	bl	8007780 <prvIsQueueEmpty>
 80075a6:	4603      	mov	r3, r0
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	f43f af6f 	beq.w	800748c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80075ae:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3730      	adds	r7, #48	; 0x30
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}
 80075b8:	e000ed04 	.word	0xe000ed04

080075bc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b086      	sub	sp, #24
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80075c8:	2300      	movs	r3, #0
 80075ca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075d0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d10d      	bne.n	80075f6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d14d      	bne.n	800767e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	4618      	mov	r0, r3
 80075e8:	f001 f82e 	bl	8008648 <xTaskPriorityDisinherit>
 80075ec:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2200      	movs	r2, #0
 80075f2:	605a      	str	r2, [r3, #4]
 80075f4:	e043      	b.n	800767e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d119      	bne.n	8007630 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	6898      	ldr	r0, [r3, #8]
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007604:	461a      	mov	r2, r3
 8007606:	68b9      	ldr	r1, [r7, #8]
 8007608:	f002 f82c 	bl	8009664 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	689a      	ldr	r2, [r3, #8]
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007614:	441a      	add	r2, r3
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	689a      	ldr	r2, [r3, #8]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	429a      	cmp	r2, r3
 8007624:	d32b      	bcc.n	800767e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681a      	ldr	r2, [r3, #0]
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	609a      	str	r2, [r3, #8]
 800762e:	e026      	b.n	800767e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	68d8      	ldr	r0, [r3, #12]
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007638:	461a      	mov	r2, r3
 800763a:	68b9      	ldr	r1, [r7, #8]
 800763c:	f002 f812 	bl	8009664 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	68da      	ldr	r2, [r3, #12]
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007648:	425b      	negs	r3, r3
 800764a:	441a      	add	r2, r3
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	68da      	ldr	r2, [r3, #12]
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	429a      	cmp	r2, r3
 800765a:	d207      	bcs.n	800766c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	685a      	ldr	r2, [r3, #4]
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007664:	425b      	negs	r3, r3
 8007666:	441a      	add	r2, r3
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2b02      	cmp	r3, #2
 8007670:	d105      	bne.n	800767e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d002      	beq.n	800767e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	3b01      	subs	r3, #1
 800767c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	1c5a      	adds	r2, r3, #1
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007686:	697b      	ldr	r3, [r7, #20]
}
 8007688:	4618      	mov	r0, r3
 800768a:	3718      	adds	r7, #24
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}

08007690 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b082      	sub	sp, #8
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d018      	beq.n	80076d4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	68da      	ldr	r2, [r3, #12]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076aa:	441a      	add	r2, r3
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	68da      	ldr	r2, [r3, #12]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d303      	bcc.n	80076c4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	68d9      	ldr	r1, [r3, #12]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076cc:	461a      	mov	r2, r3
 80076ce:	6838      	ldr	r0, [r7, #0]
 80076d0:	f001 ffc8 	bl	8009664 <memcpy>
	}
}
 80076d4:	bf00      	nop
 80076d6:	3708      	adds	r7, #8
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}

080076dc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b084      	sub	sp, #16
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80076e4:	f001 fc98 	bl	8009018 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076ee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80076f0:	e011      	b.n	8007716 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d012      	beq.n	8007720 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	3324      	adds	r3, #36	; 0x24
 80076fe:	4618      	mov	r0, r3
 8007700:	f000 fdc0 	bl	8008284 <xTaskRemoveFromEventList>
 8007704:	4603      	mov	r3, r0
 8007706:	2b00      	cmp	r3, #0
 8007708:	d001      	beq.n	800770e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800770a:	f000 fe99 	bl	8008440 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800770e:	7bfb      	ldrb	r3, [r7, #15]
 8007710:	3b01      	subs	r3, #1
 8007712:	b2db      	uxtb	r3, r3
 8007714:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007716:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800771a:	2b00      	cmp	r3, #0
 800771c:	dce9      	bgt.n	80076f2 <prvUnlockQueue+0x16>
 800771e:	e000      	b.n	8007722 <prvUnlockQueue+0x46>
					break;
 8007720:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	22ff      	movs	r2, #255	; 0xff
 8007726:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800772a:	f001 fca7 	bl	800907c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800772e:	f001 fc73 	bl	8009018 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007738:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800773a:	e011      	b.n	8007760 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	691b      	ldr	r3, [r3, #16]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d012      	beq.n	800776a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	3310      	adds	r3, #16
 8007748:	4618      	mov	r0, r3
 800774a:	f000 fd9b 	bl	8008284 <xTaskRemoveFromEventList>
 800774e:	4603      	mov	r3, r0
 8007750:	2b00      	cmp	r3, #0
 8007752:	d001      	beq.n	8007758 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007754:	f000 fe74 	bl	8008440 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007758:	7bbb      	ldrb	r3, [r7, #14]
 800775a:	3b01      	subs	r3, #1
 800775c:	b2db      	uxtb	r3, r3
 800775e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007760:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007764:	2b00      	cmp	r3, #0
 8007766:	dce9      	bgt.n	800773c <prvUnlockQueue+0x60>
 8007768:	e000      	b.n	800776c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800776a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	22ff      	movs	r2, #255	; 0xff
 8007770:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007774:	f001 fc82 	bl	800907c <vPortExitCritical>
}
 8007778:	bf00      	nop
 800777a:	3710      	adds	r7, #16
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}

08007780 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b084      	sub	sp, #16
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007788:	f001 fc46 	bl	8009018 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007790:	2b00      	cmp	r3, #0
 8007792:	d102      	bne.n	800779a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007794:	2301      	movs	r3, #1
 8007796:	60fb      	str	r3, [r7, #12]
 8007798:	e001      	b.n	800779e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800779a:	2300      	movs	r3, #0
 800779c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800779e:	f001 fc6d 	bl	800907c <vPortExitCritical>

	return xReturn;
 80077a2:	68fb      	ldr	r3, [r7, #12]
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3710      	adds	r7, #16
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80077b4:	f001 fc30 	bl	8009018 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d102      	bne.n	80077ca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80077c4:	2301      	movs	r3, #1
 80077c6:	60fb      	str	r3, [r7, #12]
 80077c8:	e001      	b.n	80077ce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80077ca:	2300      	movs	r3, #0
 80077cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80077ce:	f001 fc55 	bl	800907c <vPortExitCritical>

	return xReturn;
 80077d2:	68fb      	ldr	r3, [r7, #12]
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3710      	adds	r7, #16
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}

080077dc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80077dc:	b480      	push	{r7}
 80077de:	b085      	sub	sp, #20
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80077e6:	2300      	movs	r3, #0
 80077e8:	60fb      	str	r3, [r7, #12]
 80077ea:	e014      	b.n	8007816 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80077ec:	4a0e      	ldr	r2, [pc, #56]	; (8007828 <vQueueAddToRegistry+0x4c>)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d10b      	bne.n	8007810 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80077f8:	490b      	ldr	r1, [pc, #44]	; (8007828 <vQueueAddToRegistry+0x4c>)
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	683a      	ldr	r2, [r7, #0]
 80077fe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007802:	4a09      	ldr	r2, [pc, #36]	; (8007828 <vQueueAddToRegistry+0x4c>)
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	00db      	lsls	r3, r3, #3
 8007808:	4413      	add	r3, r2
 800780a:	687a      	ldr	r2, [r7, #4]
 800780c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800780e:	e005      	b.n	800781c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	3301      	adds	r3, #1
 8007814:	60fb      	str	r3, [r7, #12]
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2b07      	cmp	r3, #7
 800781a:	d9e7      	bls.n	80077ec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800781c:	bf00      	nop
 800781e:	3714      	adds	r7, #20
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr
 8007828:	200068f8 	.word	0x200068f8

0800782c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800782c:	b580      	push	{r7, lr}
 800782e:	b086      	sub	sp, #24
 8007830:	af00      	add	r7, sp, #0
 8007832:	60f8      	str	r0, [r7, #12]
 8007834:	60b9      	str	r1, [r7, #8]
 8007836:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800783c:	f001 fbec 	bl	8009018 <vPortEnterCritical>
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007846:	b25b      	sxtb	r3, r3
 8007848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800784c:	d103      	bne.n	8007856 <vQueueWaitForMessageRestricted+0x2a>
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	2200      	movs	r2, #0
 8007852:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800785c:	b25b      	sxtb	r3, r3
 800785e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007862:	d103      	bne.n	800786c <vQueueWaitForMessageRestricted+0x40>
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	2200      	movs	r2, #0
 8007868:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800786c:	f001 fc06 	bl	800907c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007874:	2b00      	cmp	r3, #0
 8007876:	d106      	bne.n	8007886 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	3324      	adds	r3, #36	; 0x24
 800787c:	687a      	ldr	r2, [r7, #4]
 800787e:	68b9      	ldr	r1, [r7, #8]
 8007880:	4618      	mov	r0, r3
 8007882:	f000 fcd3 	bl	800822c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007886:	6978      	ldr	r0, [r7, #20]
 8007888:	f7ff ff28 	bl	80076dc <prvUnlockQueue>
	}
 800788c:	bf00      	nop
 800788e:	3718      	adds	r7, #24
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007894:	b580      	push	{r7, lr}
 8007896:	b08e      	sub	sp, #56	; 0x38
 8007898:	af04      	add	r7, sp, #16
 800789a:	60f8      	str	r0, [r7, #12]
 800789c:	60b9      	str	r1, [r7, #8]
 800789e:	607a      	str	r2, [r7, #4]
 80078a0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80078a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d10b      	bne.n	80078c0 <xTaskCreateStatic+0x2c>
 80078a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ac:	b672      	cpsid	i
 80078ae:	f383 8811 	msr	BASEPRI, r3
 80078b2:	f3bf 8f6f 	isb	sy
 80078b6:	f3bf 8f4f 	dsb	sy
 80078ba:	b662      	cpsie	i
 80078bc:	623b      	str	r3, [r7, #32]
 80078be:	e7fe      	b.n	80078be <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 80078c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d10b      	bne.n	80078de <xTaskCreateStatic+0x4a>
 80078c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ca:	b672      	cpsid	i
 80078cc:	f383 8811 	msr	BASEPRI, r3
 80078d0:	f3bf 8f6f 	isb	sy
 80078d4:	f3bf 8f4f 	dsb	sy
 80078d8:	b662      	cpsie	i
 80078da:	61fb      	str	r3, [r7, #28]
 80078dc:	e7fe      	b.n	80078dc <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80078de:	235c      	movs	r3, #92	; 0x5c
 80078e0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	2b5c      	cmp	r3, #92	; 0x5c
 80078e6:	d00b      	beq.n	8007900 <xTaskCreateStatic+0x6c>
 80078e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ec:	b672      	cpsid	i
 80078ee:	f383 8811 	msr	BASEPRI, r3
 80078f2:	f3bf 8f6f 	isb	sy
 80078f6:	f3bf 8f4f 	dsb	sy
 80078fa:	b662      	cpsie	i
 80078fc:	61bb      	str	r3, [r7, #24]
 80078fe:	e7fe      	b.n	80078fe <xTaskCreateStatic+0x6a>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007902:	2b00      	cmp	r3, #0
 8007904:	d01e      	beq.n	8007944 <xTaskCreateStatic+0xb0>
 8007906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007908:	2b00      	cmp	r3, #0
 800790a:	d01b      	beq.n	8007944 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800790c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800790e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007912:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007914:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007918:	2202      	movs	r2, #2
 800791a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800791e:	2300      	movs	r3, #0
 8007920:	9303      	str	r3, [sp, #12]
 8007922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007924:	9302      	str	r3, [sp, #8]
 8007926:	f107 0314 	add.w	r3, r7, #20
 800792a:	9301      	str	r3, [sp, #4]
 800792c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800792e:	9300      	str	r3, [sp, #0]
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	687a      	ldr	r2, [r7, #4]
 8007934:	68b9      	ldr	r1, [r7, #8]
 8007936:	68f8      	ldr	r0, [r7, #12]
 8007938:	f000 f850 	bl	80079dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800793c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800793e:	f000 f8d5 	bl	8007aec <prvAddNewTaskToReadyList>
 8007942:	e001      	b.n	8007948 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8007944:	2300      	movs	r3, #0
 8007946:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007948:	697b      	ldr	r3, [r7, #20]
	}
 800794a:	4618      	mov	r0, r3
 800794c:	3728      	adds	r7, #40	; 0x28
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}

08007952 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007952:	b580      	push	{r7, lr}
 8007954:	b08c      	sub	sp, #48	; 0x30
 8007956:	af04      	add	r7, sp, #16
 8007958:	60f8      	str	r0, [r7, #12]
 800795a:	60b9      	str	r1, [r7, #8]
 800795c:	603b      	str	r3, [r7, #0]
 800795e:	4613      	mov	r3, r2
 8007960:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007962:	88fb      	ldrh	r3, [r7, #6]
 8007964:	009b      	lsls	r3, r3, #2
 8007966:	4618      	mov	r0, r3
 8007968:	f001 fc78 	bl	800925c <pvPortMalloc>
 800796c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d00e      	beq.n	8007992 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007974:	205c      	movs	r0, #92	; 0x5c
 8007976:	f001 fc71 	bl	800925c <pvPortMalloc>
 800797a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800797c:	69fb      	ldr	r3, [r7, #28]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d003      	beq.n	800798a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007982:	69fb      	ldr	r3, [r7, #28]
 8007984:	697a      	ldr	r2, [r7, #20]
 8007986:	631a      	str	r2, [r3, #48]	; 0x30
 8007988:	e005      	b.n	8007996 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800798a:	6978      	ldr	r0, [r7, #20]
 800798c:	f001 fd2e 	bl	80093ec <vPortFree>
 8007990:	e001      	b.n	8007996 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007992:	2300      	movs	r3, #0
 8007994:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007996:	69fb      	ldr	r3, [r7, #28]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d017      	beq.n	80079cc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800799c:	69fb      	ldr	r3, [r7, #28]
 800799e:	2200      	movs	r2, #0
 80079a0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80079a4:	88fa      	ldrh	r2, [r7, #6]
 80079a6:	2300      	movs	r3, #0
 80079a8:	9303      	str	r3, [sp, #12]
 80079aa:	69fb      	ldr	r3, [r7, #28]
 80079ac:	9302      	str	r3, [sp, #8]
 80079ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079b0:	9301      	str	r3, [sp, #4]
 80079b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b4:	9300      	str	r3, [sp, #0]
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	68b9      	ldr	r1, [r7, #8]
 80079ba:	68f8      	ldr	r0, [r7, #12]
 80079bc:	f000 f80e 	bl	80079dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80079c0:	69f8      	ldr	r0, [r7, #28]
 80079c2:	f000 f893 	bl	8007aec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80079c6:	2301      	movs	r3, #1
 80079c8:	61bb      	str	r3, [r7, #24]
 80079ca:	e002      	b.n	80079d2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80079cc:	f04f 33ff 	mov.w	r3, #4294967295
 80079d0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80079d2:	69bb      	ldr	r3, [r7, #24]
	}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3720      	adds	r7, #32
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}

080079dc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b088      	sub	sp, #32
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	60f8      	str	r0, [r7, #12]
 80079e4:	60b9      	str	r1, [r7, #8]
 80079e6:	607a      	str	r2, [r7, #4]
 80079e8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80079ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	009b      	lsls	r3, r3, #2
 80079f2:	461a      	mov	r2, r3
 80079f4:	21a5      	movs	r1, #165	; 0xa5
 80079f6:	f001 fe40 	bl	800967a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80079fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079fe:	6879      	ldr	r1, [r7, #4]
 8007a00:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007a04:	440b      	add	r3, r1
 8007a06:	009b      	lsls	r3, r3, #2
 8007a08:	4413      	add	r3, r2
 8007a0a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007a0c:	69bb      	ldr	r3, [r7, #24]
 8007a0e:	f023 0307 	bic.w	r3, r3, #7
 8007a12:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007a14:	69bb      	ldr	r3, [r7, #24]
 8007a16:	f003 0307 	and.w	r3, r3, #7
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d00b      	beq.n	8007a36 <prvInitialiseNewTask+0x5a>
 8007a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a22:	b672      	cpsid	i
 8007a24:	f383 8811 	msr	BASEPRI, r3
 8007a28:	f3bf 8f6f 	isb	sy
 8007a2c:	f3bf 8f4f 	dsb	sy
 8007a30:	b662      	cpsie	i
 8007a32:	617b      	str	r3, [r7, #20]
 8007a34:	e7fe      	b.n	8007a34 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a36:	2300      	movs	r3, #0
 8007a38:	61fb      	str	r3, [r7, #28]
 8007a3a:	e012      	b.n	8007a62 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007a3c:	68ba      	ldr	r2, [r7, #8]
 8007a3e:	69fb      	ldr	r3, [r7, #28]
 8007a40:	4413      	add	r3, r2
 8007a42:	7819      	ldrb	r1, [r3, #0]
 8007a44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a46:	69fb      	ldr	r3, [r7, #28]
 8007a48:	4413      	add	r3, r2
 8007a4a:	3334      	adds	r3, #52	; 0x34
 8007a4c:	460a      	mov	r2, r1
 8007a4e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007a50:	68ba      	ldr	r2, [r7, #8]
 8007a52:	69fb      	ldr	r3, [r7, #28]
 8007a54:	4413      	add	r3, r2
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d006      	beq.n	8007a6a <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a5c:	69fb      	ldr	r3, [r7, #28]
 8007a5e:	3301      	adds	r3, #1
 8007a60:	61fb      	str	r3, [r7, #28]
 8007a62:	69fb      	ldr	r3, [r7, #28]
 8007a64:	2b0f      	cmp	r3, #15
 8007a66:	d9e9      	bls.n	8007a3c <prvInitialiseNewTask+0x60>
 8007a68:	e000      	b.n	8007a6c <prvInitialiseNewTask+0x90>
		{
			break;
 8007a6a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a6e:	2200      	movs	r2, #0
 8007a70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a76:	2b37      	cmp	r3, #55	; 0x37
 8007a78:	d901      	bls.n	8007a7e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007a7a:	2337      	movs	r3, #55	; 0x37
 8007a7c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a82:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a88:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a92:	3304      	adds	r3, #4
 8007a94:	4618      	mov	r0, r3
 8007a96:	f7ff f973 	bl	8006d80 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a9c:	3318      	adds	r3, #24
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f7ff f96e 	bl	8006d80 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007aa8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aac:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ab8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007abc:	2200      	movs	r2, #0
 8007abe:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007ac8:	683a      	ldr	r2, [r7, #0]
 8007aca:	68f9      	ldr	r1, [r7, #12]
 8007acc:	69b8      	ldr	r0, [r7, #24]
 8007ace:	f001 f997 	bl	8008e00 <pxPortInitialiseStack>
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d002      	beq.n	8007ae4 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ae2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ae4:	bf00      	nop
 8007ae6:	3720      	adds	r7, #32
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}

08007aec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b082      	sub	sp, #8
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007af4:	f001 fa90 	bl	8009018 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007af8:	4b2d      	ldr	r3, [pc, #180]	; (8007bb0 <prvAddNewTaskToReadyList+0xc4>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	3301      	adds	r3, #1
 8007afe:	4a2c      	ldr	r2, [pc, #176]	; (8007bb0 <prvAddNewTaskToReadyList+0xc4>)
 8007b00:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007b02:	4b2c      	ldr	r3, [pc, #176]	; (8007bb4 <prvAddNewTaskToReadyList+0xc8>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d109      	bne.n	8007b1e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007b0a:	4a2a      	ldr	r2, [pc, #168]	; (8007bb4 <prvAddNewTaskToReadyList+0xc8>)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007b10:	4b27      	ldr	r3, [pc, #156]	; (8007bb0 <prvAddNewTaskToReadyList+0xc4>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d110      	bne.n	8007b3a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007b18:	f000 fcb6 	bl	8008488 <prvInitialiseTaskLists>
 8007b1c:	e00d      	b.n	8007b3a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007b1e:	4b26      	ldr	r3, [pc, #152]	; (8007bb8 <prvAddNewTaskToReadyList+0xcc>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d109      	bne.n	8007b3a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007b26:	4b23      	ldr	r3, [pc, #140]	; (8007bb4 <prvAddNewTaskToReadyList+0xc8>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d802      	bhi.n	8007b3a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007b34:	4a1f      	ldr	r2, [pc, #124]	; (8007bb4 <prvAddNewTaskToReadyList+0xc8>)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007b3a:	4b20      	ldr	r3, [pc, #128]	; (8007bbc <prvAddNewTaskToReadyList+0xd0>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	3301      	adds	r3, #1
 8007b40:	4a1e      	ldr	r2, [pc, #120]	; (8007bbc <prvAddNewTaskToReadyList+0xd0>)
 8007b42:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007b44:	4b1d      	ldr	r3, [pc, #116]	; (8007bbc <prvAddNewTaskToReadyList+0xd0>)
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b50:	4b1b      	ldr	r3, [pc, #108]	; (8007bc0 <prvAddNewTaskToReadyList+0xd4>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d903      	bls.n	8007b60 <prvAddNewTaskToReadyList+0x74>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b5c:	4a18      	ldr	r2, [pc, #96]	; (8007bc0 <prvAddNewTaskToReadyList+0xd4>)
 8007b5e:	6013      	str	r3, [r2, #0]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b64:	4613      	mov	r3, r2
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	4413      	add	r3, r2
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	4a15      	ldr	r2, [pc, #84]	; (8007bc4 <prvAddNewTaskToReadyList+0xd8>)
 8007b6e:	441a      	add	r2, r3
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	3304      	adds	r3, #4
 8007b74:	4619      	mov	r1, r3
 8007b76:	4610      	mov	r0, r2
 8007b78:	f7ff f90f 	bl	8006d9a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007b7c:	f001 fa7e 	bl	800907c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007b80:	4b0d      	ldr	r3, [pc, #52]	; (8007bb8 <prvAddNewTaskToReadyList+0xcc>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d00e      	beq.n	8007ba6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007b88:	4b0a      	ldr	r3, [pc, #40]	; (8007bb4 <prvAddNewTaskToReadyList+0xc8>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b92:	429a      	cmp	r2, r3
 8007b94:	d207      	bcs.n	8007ba6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007b96:	4b0c      	ldr	r3, [pc, #48]	; (8007bc8 <prvAddNewTaskToReadyList+0xdc>)
 8007b98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b9c:	601a      	str	r2, [r3, #0]
 8007b9e:	f3bf 8f4f 	dsb	sy
 8007ba2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ba6:	bf00      	nop
 8007ba8:	3708      	adds	r7, #8
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
 8007bae:	bf00      	nop
 8007bb0:	20000bb8 	.word	0x20000bb8
 8007bb4:	200006e4 	.word	0x200006e4
 8007bb8:	20000bc4 	.word	0x20000bc4
 8007bbc:	20000bd4 	.word	0x20000bd4
 8007bc0:	20000bc0 	.word	0x20000bc0
 8007bc4:	200006e8 	.word	0x200006e8
 8007bc8:	e000ed04 	.word	0xe000ed04

08007bcc <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b08a      	sub	sp, #40	; 0x28
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d10b      	bne.n	8007bf8 <vTaskDelayUntil+0x2c>
 8007be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be4:	b672      	cpsid	i
 8007be6:	f383 8811 	msr	BASEPRI, r3
 8007bea:	f3bf 8f6f 	isb	sy
 8007bee:	f3bf 8f4f 	dsb	sy
 8007bf2:	b662      	cpsie	i
 8007bf4:	617b      	str	r3, [r7, #20]
 8007bf6:	e7fe      	b.n	8007bf6 <vTaskDelayUntil+0x2a>
		configASSERT( ( xTimeIncrement > 0U ) );
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d10b      	bne.n	8007c16 <vTaskDelayUntil+0x4a>
 8007bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c02:	b672      	cpsid	i
 8007c04:	f383 8811 	msr	BASEPRI, r3
 8007c08:	f3bf 8f6f 	isb	sy
 8007c0c:	f3bf 8f4f 	dsb	sy
 8007c10:	b662      	cpsie	i
 8007c12:	613b      	str	r3, [r7, #16]
 8007c14:	e7fe      	b.n	8007c14 <vTaskDelayUntil+0x48>
		configASSERT( uxSchedulerSuspended == 0 );
 8007c16:	4b2a      	ldr	r3, [pc, #168]	; (8007cc0 <vTaskDelayUntil+0xf4>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d00b      	beq.n	8007c36 <vTaskDelayUntil+0x6a>
 8007c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c22:	b672      	cpsid	i
 8007c24:	f383 8811 	msr	BASEPRI, r3
 8007c28:	f3bf 8f6f 	isb	sy
 8007c2c:	f3bf 8f4f 	dsb	sy
 8007c30:	b662      	cpsie	i
 8007c32:	60fb      	str	r3, [r7, #12]
 8007c34:	e7fe      	b.n	8007c34 <vTaskDelayUntil+0x68>

		vTaskSuspendAll();
 8007c36:	f000 f8e7 	bl	8007e08 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8007c3a:	4b22      	ldr	r3, [pc, #136]	; (8007cc4 <vTaskDelayUntil+0xf8>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	683a      	ldr	r2, [r7, #0]
 8007c46:	4413      	add	r3, r2
 8007c48:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	6a3a      	ldr	r2, [r7, #32]
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d20b      	bcs.n	8007c6c <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	69fa      	ldr	r2, [r7, #28]
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d211      	bcs.n	8007c82 <vTaskDelayUntil+0xb6>
 8007c5e:	69fa      	ldr	r2, [r7, #28]
 8007c60:	6a3b      	ldr	r3, [r7, #32]
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d90d      	bls.n	8007c82 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8007c66:	2301      	movs	r3, #1
 8007c68:	627b      	str	r3, [r7, #36]	; 0x24
 8007c6a:	e00a      	b.n	8007c82 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	69fa      	ldr	r2, [r7, #28]
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d303      	bcc.n	8007c7e <vTaskDelayUntil+0xb2>
 8007c76:	69fa      	ldr	r2, [r7, #28]
 8007c78:	6a3b      	ldr	r3, [r7, #32]
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d901      	bls.n	8007c82 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	69fa      	ldr	r2, [r7, #28]
 8007c86:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8007c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d006      	beq.n	8007c9c <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8007c8e:	69fa      	ldr	r2, [r7, #28]
 8007c90:	6a3b      	ldr	r3, [r7, #32]
 8007c92:	1ad3      	subs	r3, r2, r3
 8007c94:	2100      	movs	r1, #0
 8007c96:	4618      	mov	r0, r3
 8007c98:	f000 fd46 	bl	8008728 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8007c9c:	f000 f8c2 	bl	8007e24 <xTaskResumeAll>
 8007ca0:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007ca2:	69bb      	ldr	r3, [r7, #24]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d107      	bne.n	8007cb8 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8007ca8:	4b07      	ldr	r3, [pc, #28]	; (8007cc8 <vTaskDelayUntil+0xfc>)
 8007caa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cae:	601a      	str	r2, [r3, #0]
 8007cb0:	f3bf 8f4f 	dsb	sy
 8007cb4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007cb8:	bf00      	nop
 8007cba:	3728      	adds	r7, #40	; 0x28
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}
 8007cc0:	20000be0 	.word	0x20000be0
 8007cc4:	20000bbc 	.word	0x20000bbc
 8007cc8:	e000ed04 	.word	0xe000ed04

08007ccc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b084      	sub	sp, #16
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d018      	beq.n	8007d10 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007cde:	4b14      	ldr	r3, [pc, #80]	; (8007d30 <vTaskDelay+0x64>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d00b      	beq.n	8007cfe <vTaskDelay+0x32>
 8007ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cea:	b672      	cpsid	i
 8007cec:	f383 8811 	msr	BASEPRI, r3
 8007cf0:	f3bf 8f6f 	isb	sy
 8007cf4:	f3bf 8f4f 	dsb	sy
 8007cf8:	b662      	cpsie	i
 8007cfa:	60bb      	str	r3, [r7, #8]
 8007cfc:	e7fe      	b.n	8007cfc <vTaskDelay+0x30>
			vTaskSuspendAll();
 8007cfe:	f000 f883 	bl	8007e08 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007d02:	2100      	movs	r1, #0
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f000 fd0f 	bl	8008728 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007d0a:	f000 f88b 	bl	8007e24 <xTaskResumeAll>
 8007d0e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d107      	bne.n	8007d26 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007d16:	4b07      	ldr	r3, [pc, #28]	; (8007d34 <vTaskDelay+0x68>)
 8007d18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d1c:	601a      	str	r2, [r3, #0]
 8007d1e:	f3bf 8f4f 	dsb	sy
 8007d22:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007d26:	bf00      	nop
 8007d28:	3710      	adds	r7, #16
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	bf00      	nop
 8007d30:	20000be0 	.word	0x20000be0
 8007d34:	e000ed04 	.word	0xe000ed04

08007d38 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b08a      	sub	sp, #40	; 0x28
 8007d3c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007d42:	2300      	movs	r3, #0
 8007d44:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007d46:	463a      	mov	r2, r7
 8007d48:	1d39      	adds	r1, r7, #4
 8007d4a:	f107 0308 	add.w	r3, r7, #8
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f7fe ffc2 	bl	8006cd8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007d54:	6839      	ldr	r1, [r7, #0]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	68ba      	ldr	r2, [r7, #8]
 8007d5a:	9202      	str	r2, [sp, #8]
 8007d5c:	9301      	str	r3, [sp, #4]
 8007d5e:	2300      	movs	r3, #0
 8007d60:	9300      	str	r3, [sp, #0]
 8007d62:	2300      	movs	r3, #0
 8007d64:	460a      	mov	r2, r1
 8007d66:	4922      	ldr	r1, [pc, #136]	; (8007df0 <vTaskStartScheduler+0xb8>)
 8007d68:	4822      	ldr	r0, [pc, #136]	; (8007df4 <vTaskStartScheduler+0xbc>)
 8007d6a:	f7ff fd93 	bl	8007894 <xTaskCreateStatic>
 8007d6e:	4602      	mov	r2, r0
 8007d70:	4b21      	ldr	r3, [pc, #132]	; (8007df8 <vTaskStartScheduler+0xc0>)
 8007d72:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007d74:	4b20      	ldr	r3, [pc, #128]	; (8007df8 <vTaskStartScheduler+0xc0>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d002      	beq.n	8007d82 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	617b      	str	r3, [r7, #20]
 8007d80:	e001      	b.n	8007d86 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007d82:	2300      	movs	r3, #0
 8007d84:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d102      	bne.n	8007d92 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007d8c:	f000 fd20 	bl	80087d0 <xTimerCreateTimerTask>
 8007d90:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d117      	bne.n	8007dc8 <vTaskStartScheduler+0x90>
 8007d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d9c:	b672      	cpsid	i
 8007d9e:	f383 8811 	msr	BASEPRI, r3
 8007da2:	f3bf 8f6f 	isb	sy
 8007da6:	f3bf 8f4f 	dsb	sy
 8007daa:	b662      	cpsie	i
 8007dac:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007dae:	4b13      	ldr	r3, [pc, #76]	; (8007dfc <vTaskStartScheduler+0xc4>)
 8007db0:	f04f 32ff 	mov.w	r2, #4294967295
 8007db4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007db6:	4b12      	ldr	r3, [pc, #72]	; (8007e00 <vTaskStartScheduler+0xc8>)
 8007db8:	2201      	movs	r2, #1
 8007dba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007dbc:	4b11      	ldr	r3, [pc, #68]	; (8007e04 <vTaskStartScheduler+0xcc>)
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007dc2:	f001 f8ad 	bl	8008f20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007dc6:	e00f      	b.n	8007de8 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dce:	d10b      	bne.n	8007de8 <vTaskStartScheduler+0xb0>
 8007dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd4:	b672      	cpsid	i
 8007dd6:	f383 8811 	msr	BASEPRI, r3
 8007dda:	f3bf 8f6f 	isb	sy
 8007dde:	f3bf 8f4f 	dsb	sy
 8007de2:	b662      	cpsie	i
 8007de4:	60fb      	str	r3, [r7, #12]
 8007de6:	e7fe      	b.n	8007de6 <vTaskStartScheduler+0xae>
}
 8007de8:	bf00      	nop
 8007dea:	3718      	adds	r7, #24
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}
 8007df0:	08009738 	.word	0x08009738
 8007df4:	08008459 	.word	0x08008459
 8007df8:	20000bdc 	.word	0x20000bdc
 8007dfc:	20000bd8 	.word	0x20000bd8
 8007e00:	20000bc4 	.word	0x20000bc4
 8007e04:	20000bbc 	.word	0x20000bbc

08007e08 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007e08:	b480      	push	{r7}
 8007e0a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007e0c:	4b04      	ldr	r3, [pc, #16]	; (8007e20 <vTaskSuspendAll+0x18>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	3301      	adds	r3, #1
 8007e12:	4a03      	ldr	r2, [pc, #12]	; (8007e20 <vTaskSuspendAll+0x18>)
 8007e14:	6013      	str	r3, [r2, #0]
}
 8007e16:	bf00      	nop
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr
 8007e20:	20000be0 	.word	0x20000be0

08007e24 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b084      	sub	sp, #16
 8007e28:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007e32:	4b42      	ldr	r3, [pc, #264]	; (8007f3c <xTaskResumeAll+0x118>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d10b      	bne.n	8007e52 <xTaskResumeAll+0x2e>
 8007e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e3e:	b672      	cpsid	i
 8007e40:	f383 8811 	msr	BASEPRI, r3
 8007e44:	f3bf 8f6f 	isb	sy
 8007e48:	f3bf 8f4f 	dsb	sy
 8007e4c:	b662      	cpsie	i
 8007e4e:	603b      	str	r3, [r7, #0]
 8007e50:	e7fe      	b.n	8007e50 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007e52:	f001 f8e1 	bl	8009018 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007e56:	4b39      	ldr	r3, [pc, #228]	; (8007f3c <xTaskResumeAll+0x118>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	3b01      	subs	r3, #1
 8007e5c:	4a37      	ldr	r2, [pc, #220]	; (8007f3c <xTaskResumeAll+0x118>)
 8007e5e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e60:	4b36      	ldr	r3, [pc, #216]	; (8007f3c <xTaskResumeAll+0x118>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d162      	bne.n	8007f2e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007e68:	4b35      	ldr	r3, [pc, #212]	; (8007f40 <xTaskResumeAll+0x11c>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d05e      	beq.n	8007f2e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007e70:	e02f      	b.n	8007ed2 <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007e72:	4b34      	ldr	r3, [pc, #208]	; (8007f44 <xTaskResumeAll+0x120>)
 8007e74:	68db      	ldr	r3, [r3, #12]
 8007e76:	68db      	ldr	r3, [r3, #12]
 8007e78:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	3318      	adds	r3, #24
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f7fe ffe8 	bl	8006e54 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	3304      	adds	r3, #4
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f7fe ffe3 	bl	8006e54 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e92:	4b2d      	ldr	r3, [pc, #180]	; (8007f48 <xTaskResumeAll+0x124>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d903      	bls.n	8007ea2 <xTaskResumeAll+0x7e>
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e9e:	4a2a      	ldr	r2, [pc, #168]	; (8007f48 <xTaskResumeAll+0x124>)
 8007ea0:	6013      	str	r3, [r2, #0]
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ea6:	4613      	mov	r3, r2
 8007ea8:	009b      	lsls	r3, r3, #2
 8007eaa:	4413      	add	r3, r2
 8007eac:	009b      	lsls	r3, r3, #2
 8007eae:	4a27      	ldr	r2, [pc, #156]	; (8007f4c <xTaskResumeAll+0x128>)
 8007eb0:	441a      	add	r2, r3
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	3304      	adds	r3, #4
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	4610      	mov	r0, r2
 8007eba:	f7fe ff6e 	bl	8006d9a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ec2:	4b23      	ldr	r3, [pc, #140]	; (8007f50 <xTaskResumeAll+0x12c>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	d302      	bcc.n	8007ed2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007ecc:	4b21      	ldr	r3, [pc, #132]	; (8007f54 <xTaskResumeAll+0x130>)
 8007ece:	2201      	movs	r2, #1
 8007ed0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007ed2:	4b1c      	ldr	r3, [pc, #112]	; (8007f44 <xTaskResumeAll+0x120>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d1cb      	bne.n	8007e72 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d001      	beq.n	8007ee4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007ee0:	f000 fb6e 	bl	80085c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007ee4:	4b1c      	ldr	r3, [pc, #112]	; (8007f58 <xTaskResumeAll+0x134>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d010      	beq.n	8007f12 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007ef0:	f000 f858 	bl	8007fa4 <xTaskIncrementTick>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d002      	beq.n	8007f00 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007efa:	4b16      	ldr	r3, [pc, #88]	; (8007f54 <xTaskResumeAll+0x130>)
 8007efc:	2201      	movs	r2, #1
 8007efe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	3b01      	subs	r3, #1
 8007f04:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d1f1      	bne.n	8007ef0 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8007f0c:	4b12      	ldr	r3, [pc, #72]	; (8007f58 <xTaskResumeAll+0x134>)
 8007f0e:	2200      	movs	r2, #0
 8007f10:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007f12:	4b10      	ldr	r3, [pc, #64]	; (8007f54 <xTaskResumeAll+0x130>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d009      	beq.n	8007f2e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007f1e:	4b0f      	ldr	r3, [pc, #60]	; (8007f5c <xTaskResumeAll+0x138>)
 8007f20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f24:	601a      	str	r2, [r3, #0]
 8007f26:	f3bf 8f4f 	dsb	sy
 8007f2a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007f2e:	f001 f8a5 	bl	800907c <vPortExitCritical>

	return xAlreadyYielded;
 8007f32:	68bb      	ldr	r3, [r7, #8]
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3710      	adds	r7, #16
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}
 8007f3c:	20000be0 	.word	0x20000be0
 8007f40:	20000bb8 	.word	0x20000bb8
 8007f44:	20000b78 	.word	0x20000b78
 8007f48:	20000bc0 	.word	0x20000bc0
 8007f4c:	200006e8 	.word	0x200006e8
 8007f50:	200006e4 	.word	0x200006e4
 8007f54:	20000bcc 	.word	0x20000bcc
 8007f58:	20000bc8 	.word	0x20000bc8
 8007f5c:	e000ed04 	.word	0xe000ed04

08007f60 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007f60:	b480      	push	{r7}
 8007f62:	b083      	sub	sp, #12
 8007f64:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007f66:	4b05      	ldr	r3, [pc, #20]	; (8007f7c <xTaskGetTickCount+0x1c>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007f6c:	687b      	ldr	r3, [r7, #4]
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	370c      	adds	r7, #12
 8007f72:	46bd      	mov	sp, r7
 8007f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f78:	4770      	bx	lr
 8007f7a:	bf00      	nop
 8007f7c:	20000bbc 	.word	0x20000bbc

08007f80 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b082      	sub	sp, #8
 8007f84:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007f86:	f001 f927 	bl	80091d8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007f8e:	4b04      	ldr	r3, [pc, #16]	; (8007fa0 <xTaskGetTickCountFromISR+0x20>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007f94:	683b      	ldr	r3, [r7, #0]
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3708      	adds	r7, #8
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}
 8007f9e:	bf00      	nop
 8007fa0:	20000bbc 	.word	0x20000bbc

08007fa4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b086      	sub	sp, #24
 8007fa8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007faa:	2300      	movs	r3, #0
 8007fac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fae:	4b52      	ldr	r3, [pc, #328]	; (80080f8 <xTaskIncrementTick+0x154>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	f040 808f 	bne.w	80080d6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007fb8:	4b50      	ldr	r3, [pc, #320]	; (80080fc <xTaskIncrementTick+0x158>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007fc0:	4a4e      	ldr	r2, [pc, #312]	; (80080fc <xTaskIncrementTick+0x158>)
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d121      	bne.n	8008010 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007fcc:	4b4c      	ldr	r3, [pc, #304]	; (8008100 <xTaskIncrementTick+0x15c>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d00b      	beq.n	8007fee <xTaskIncrementTick+0x4a>
 8007fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fda:	b672      	cpsid	i
 8007fdc:	f383 8811 	msr	BASEPRI, r3
 8007fe0:	f3bf 8f6f 	isb	sy
 8007fe4:	f3bf 8f4f 	dsb	sy
 8007fe8:	b662      	cpsie	i
 8007fea:	603b      	str	r3, [r7, #0]
 8007fec:	e7fe      	b.n	8007fec <xTaskIncrementTick+0x48>
 8007fee:	4b44      	ldr	r3, [pc, #272]	; (8008100 <xTaskIncrementTick+0x15c>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	60fb      	str	r3, [r7, #12]
 8007ff4:	4b43      	ldr	r3, [pc, #268]	; (8008104 <xTaskIncrementTick+0x160>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a41      	ldr	r2, [pc, #260]	; (8008100 <xTaskIncrementTick+0x15c>)
 8007ffa:	6013      	str	r3, [r2, #0]
 8007ffc:	4a41      	ldr	r2, [pc, #260]	; (8008104 <xTaskIncrementTick+0x160>)
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	6013      	str	r3, [r2, #0]
 8008002:	4b41      	ldr	r3, [pc, #260]	; (8008108 <xTaskIncrementTick+0x164>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	3301      	adds	r3, #1
 8008008:	4a3f      	ldr	r2, [pc, #252]	; (8008108 <xTaskIncrementTick+0x164>)
 800800a:	6013      	str	r3, [r2, #0]
 800800c:	f000 fad8 	bl	80085c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008010:	4b3e      	ldr	r3, [pc, #248]	; (800810c <xTaskIncrementTick+0x168>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	693a      	ldr	r2, [r7, #16]
 8008016:	429a      	cmp	r2, r3
 8008018:	d34e      	bcc.n	80080b8 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800801a:	4b39      	ldr	r3, [pc, #228]	; (8008100 <xTaskIncrementTick+0x15c>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d101      	bne.n	8008028 <xTaskIncrementTick+0x84>
 8008024:	2301      	movs	r3, #1
 8008026:	e000      	b.n	800802a <xTaskIncrementTick+0x86>
 8008028:	2300      	movs	r3, #0
 800802a:	2b00      	cmp	r3, #0
 800802c:	d004      	beq.n	8008038 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800802e:	4b37      	ldr	r3, [pc, #220]	; (800810c <xTaskIncrementTick+0x168>)
 8008030:	f04f 32ff 	mov.w	r2, #4294967295
 8008034:	601a      	str	r2, [r3, #0]
					break;
 8008036:	e03f      	b.n	80080b8 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008038:	4b31      	ldr	r3, [pc, #196]	; (8008100 <xTaskIncrementTick+0x15c>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	68db      	ldr	r3, [r3, #12]
 800803e:	68db      	ldr	r3, [r3, #12]
 8008040:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008048:	693a      	ldr	r2, [r7, #16]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	429a      	cmp	r2, r3
 800804e:	d203      	bcs.n	8008058 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008050:	4a2e      	ldr	r2, [pc, #184]	; (800810c <xTaskIncrementTick+0x168>)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6013      	str	r3, [r2, #0]
						break;
 8008056:	e02f      	b.n	80080b8 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	3304      	adds	r3, #4
 800805c:	4618      	mov	r0, r3
 800805e:	f7fe fef9 	bl	8006e54 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008066:	2b00      	cmp	r3, #0
 8008068:	d004      	beq.n	8008074 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	3318      	adds	r3, #24
 800806e:	4618      	mov	r0, r3
 8008070:	f7fe fef0 	bl	8006e54 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008078:	4b25      	ldr	r3, [pc, #148]	; (8008110 <xTaskIncrementTick+0x16c>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	429a      	cmp	r2, r3
 800807e:	d903      	bls.n	8008088 <xTaskIncrementTick+0xe4>
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008084:	4a22      	ldr	r2, [pc, #136]	; (8008110 <xTaskIncrementTick+0x16c>)
 8008086:	6013      	str	r3, [r2, #0]
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800808c:	4613      	mov	r3, r2
 800808e:	009b      	lsls	r3, r3, #2
 8008090:	4413      	add	r3, r2
 8008092:	009b      	lsls	r3, r3, #2
 8008094:	4a1f      	ldr	r2, [pc, #124]	; (8008114 <xTaskIncrementTick+0x170>)
 8008096:	441a      	add	r2, r3
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	3304      	adds	r3, #4
 800809c:	4619      	mov	r1, r3
 800809e:	4610      	mov	r0, r2
 80080a0:	f7fe fe7b 	bl	8006d9a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080a8:	4b1b      	ldr	r3, [pc, #108]	; (8008118 <xTaskIncrementTick+0x174>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ae:	429a      	cmp	r2, r3
 80080b0:	d3b3      	bcc.n	800801a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80080b2:	2301      	movs	r3, #1
 80080b4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80080b6:	e7b0      	b.n	800801a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80080b8:	4b17      	ldr	r3, [pc, #92]	; (8008118 <xTaskIncrementTick+0x174>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080be:	4915      	ldr	r1, [pc, #84]	; (8008114 <xTaskIncrementTick+0x170>)
 80080c0:	4613      	mov	r3, r2
 80080c2:	009b      	lsls	r3, r3, #2
 80080c4:	4413      	add	r3, r2
 80080c6:	009b      	lsls	r3, r3, #2
 80080c8:	440b      	add	r3, r1
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	2b01      	cmp	r3, #1
 80080ce:	d907      	bls.n	80080e0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80080d0:	2301      	movs	r3, #1
 80080d2:	617b      	str	r3, [r7, #20]
 80080d4:	e004      	b.n	80080e0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80080d6:	4b11      	ldr	r3, [pc, #68]	; (800811c <xTaskIncrementTick+0x178>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	3301      	adds	r3, #1
 80080dc:	4a0f      	ldr	r2, [pc, #60]	; (800811c <xTaskIncrementTick+0x178>)
 80080de:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80080e0:	4b0f      	ldr	r3, [pc, #60]	; (8008120 <xTaskIncrementTick+0x17c>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d001      	beq.n	80080ec <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 80080e8:	2301      	movs	r3, #1
 80080ea:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80080ec:	697b      	ldr	r3, [r7, #20]
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3718      	adds	r7, #24
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}
 80080f6:	bf00      	nop
 80080f8:	20000be0 	.word	0x20000be0
 80080fc:	20000bbc 	.word	0x20000bbc
 8008100:	20000b70 	.word	0x20000b70
 8008104:	20000b74 	.word	0x20000b74
 8008108:	20000bd0 	.word	0x20000bd0
 800810c:	20000bd8 	.word	0x20000bd8
 8008110:	20000bc0 	.word	0x20000bc0
 8008114:	200006e8 	.word	0x200006e8
 8008118:	200006e4 	.word	0x200006e4
 800811c:	20000bc8 	.word	0x20000bc8
 8008120:	20000bcc 	.word	0x20000bcc

08008124 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008124:	b480      	push	{r7}
 8008126:	b085      	sub	sp, #20
 8008128:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800812a:	4b28      	ldr	r3, [pc, #160]	; (80081cc <vTaskSwitchContext+0xa8>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d003      	beq.n	800813a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008132:	4b27      	ldr	r3, [pc, #156]	; (80081d0 <vTaskSwitchContext+0xac>)
 8008134:	2201      	movs	r2, #1
 8008136:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008138:	e042      	b.n	80081c0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800813a:	4b25      	ldr	r3, [pc, #148]	; (80081d0 <vTaskSwitchContext+0xac>)
 800813c:	2200      	movs	r2, #0
 800813e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008140:	4b24      	ldr	r3, [pc, #144]	; (80081d4 <vTaskSwitchContext+0xb0>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	60fb      	str	r3, [r7, #12]
 8008146:	e011      	b.n	800816c <vTaskSwitchContext+0x48>
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d10b      	bne.n	8008166 <vTaskSwitchContext+0x42>
 800814e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008152:	b672      	cpsid	i
 8008154:	f383 8811 	msr	BASEPRI, r3
 8008158:	f3bf 8f6f 	isb	sy
 800815c:	f3bf 8f4f 	dsb	sy
 8008160:	b662      	cpsie	i
 8008162:	607b      	str	r3, [r7, #4]
 8008164:	e7fe      	b.n	8008164 <vTaskSwitchContext+0x40>
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	3b01      	subs	r3, #1
 800816a:	60fb      	str	r3, [r7, #12]
 800816c:	491a      	ldr	r1, [pc, #104]	; (80081d8 <vTaskSwitchContext+0xb4>)
 800816e:	68fa      	ldr	r2, [r7, #12]
 8008170:	4613      	mov	r3, r2
 8008172:	009b      	lsls	r3, r3, #2
 8008174:	4413      	add	r3, r2
 8008176:	009b      	lsls	r3, r3, #2
 8008178:	440b      	add	r3, r1
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d0e3      	beq.n	8008148 <vTaskSwitchContext+0x24>
 8008180:	68fa      	ldr	r2, [r7, #12]
 8008182:	4613      	mov	r3, r2
 8008184:	009b      	lsls	r3, r3, #2
 8008186:	4413      	add	r3, r2
 8008188:	009b      	lsls	r3, r3, #2
 800818a:	4a13      	ldr	r2, [pc, #76]	; (80081d8 <vTaskSwitchContext+0xb4>)
 800818c:	4413      	add	r3, r2
 800818e:	60bb      	str	r3, [r7, #8]
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	685a      	ldr	r2, [r3, #4]
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	605a      	str	r2, [r3, #4]
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	685a      	ldr	r2, [r3, #4]
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	3308      	adds	r3, #8
 80081a2:	429a      	cmp	r2, r3
 80081a4:	d104      	bne.n	80081b0 <vTaskSwitchContext+0x8c>
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	685a      	ldr	r2, [r3, #4]
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	605a      	str	r2, [r3, #4]
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	68db      	ldr	r3, [r3, #12]
 80081b6:	4a09      	ldr	r2, [pc, #36]	; (80081dc <vTaskSwitchContext+0xb8>)
 80081b8:	6013      	str	r3, [r2, #0]
 80081ba:	4a06      	ldr	r2, [pc, #24]	; (80081d4 <vTaskSwitchContext+0xb0>)
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	6013      	str	r3, [r2, #0]
}
 80081c0:	bf00      	nop
 80081c2:	3714      	adds	r7, #20
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr
 80081cc:	20000be0 	.word	0x20000be0
 80081d0:	20000bcc 	.word	0x20000bcc
 80081d4:	20000bc0 	.word	0x20000bc0
 80081d8:	200006e8 	.word	0x200006e8
 80081dc:	200006e4 	.word	0x200006e4

080081e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b084      	sub	sp, #16
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d10b      	bne.n	8008208 <vTaskPlaceOnEventList+0x28>
 80081f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f4:	b672      	cpsid	i
 80081f6:	f383 8811 	msr	BASEPRI, r3
 80081fa:	f3bf 8f6f 	isb	sy
 80081fe:	f3bf 8f4f 	dsb	sy
 8008202:	b662      	cpsie	i
 8008204:	60fb      	str	r3, [r7, #12]
 8008206:	e7fe      	b.n	8008206 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008208:	4b07      	ldr	r3, [pc, #28]	; (8008228 <vTaskPlaceOnEventList+0x48>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	3318      	adds	r3, #24
 800820e:	4619      	mov	r1, r3
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f7fe fde6 	bl	8006de2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008216:	2101      	movs	r1, #1
 8008218:	6838      	ldr	r0, [r7, #0]
 800821a:	f000 fa85 	bl	8008728 <prvAddCurrentTaskToDelayedList>
}
 800821e:	bf00      	nop
 8008220:	3710      	adds	r7, #16
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}
 8008226:	bf00      	nop
 8008228:	200006e4 	.word	0x200006e4

0800822c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800822c:	b580      	push	{r7, lr}
 800822e:	b086      	sub	sp, #24
 8008230:	af00      	add	r7, sp, #0
 8008232:	60f8      	str	r0, [r7, #12]
 8008234:	60b9      	str	r1, [r7, #8]
 8008236:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d10b      	bne.n	8008256 <vTaskPlaceOnEventListRestricted+0x2a>
 800823e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008242:	b672      	cpsid	i
 8008244:	f383 8811 	msr	BASEPRI, r3
 8008248:	f3bf 8f6f 	isb	sy
 800824c:	f3bf 8f4f 	dsb	sy
 8008250:	b662      	cpsie	i
 8008252:	617b      	str	r3, [r7, #20]
 8008254:	e7fe      	b.n	8008254 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008256:	4b0a      	ldr	r3, [pc, #40]	; (8008280 <vTaskPlaceOnEventListRestricted+0x54>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	3318      	adds	r3, #24
 800825c:	4619      	mov	r1, r3
 800825e:	68f8      	ldr	r0, [r7, #12]
 8008260:	f7fe fd9b 	bl	8006d9a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d002      	beq.n	8008270 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800826a:	f04f 33ff 	mov.w	r3, #4294967295
 800826e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008270:	6879      	ldr	r1, [r7, #4]
 8008272:	68b8      	ldr	r0, [r7, #8]
 8008274:	f000 fa58 	bl	8008728 <prvAddCurrentTaskToDelayedList>
	}
 8008278:	bf00      	nop
 800827a:	3718      	adds	r7, #24
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}
 8008280:	200006e4 	.word	0x200006e4

08008284 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b086      	sub	sp, #24
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	68db      	ldr	r3, [r3, #12]
 8008290:	68db      	ldr	r3, [r3, #12]
 8008292:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d10b      	bne.n	80082b2 <xTaskRemoveFromEventList+0x2e>
 800829a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800829e:	b672      	cpsid	i
 80082a0:	f383 8811 	msr	BASEPRI, r3
 80082a4:	f3bf 8f6f 	isb	sy
 80082a8:	f3bf 8f4f 	dsb	sy
 80082ac:	b662      	cpsie	i
 80082ae:	60fb      	str	r3, [r7, #12]
 80082b0:	e7fe      	b.n	80082b0 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	3318      	adds	r3, #24
 80082b6:	4618      	mov	r0, r3
 80082b8:	f7fe fdcc 	bl	8006e54 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082bc:	4b1d      	ldr	r3, [pc, #116]	; (8008334 <xTaskRemoveFromEventList+0xb0>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d11d      	bne.n	8008300 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	3304      	adds	r3, #4
 80082c8:	4618      	mov	r0, r3
 80082ca:	f7fe fdc3 	bl	8006e54 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082d2:	4b19      	ldr	r3, [pc, #100]	; (8008338 <xTaskRemoveFromEventList+0xb4>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	429a      	cmp	r2, r3
 80082d8:	d903      	bls.n	80082e2 <xTaskRemoveFromEventList+0x5e>
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082de:	4a16      	ldr	r2, [pc, #88]	; (8008338 <xTaskRemoveFromEventList+0xb4>)
 80082e0:	6013      	str	r3, [r2, #0]
 80082e2:	693b      	ldr	r3, [r7, #16]
 80082e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082e6:	4613      	mov	r3, r2
 80082e8:	009b      	lsls	r3, r3, #2
 80082ea:	4413      	add	r3, r2
 80082ec:	009b      	lsls	r3, r3, #2
 80082ee:	4a13      	ldr	r2, [pc, #76]	; (800833c <xTaskRemoveFromEventList+0xb8>)
 80082f0:	441a      	add	r2, r3
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	3304      	adds	r3, #4
 80082f6:	4619      	mov	r1, r3
 80082f8:	4610      	mov	r0, r2
 80082fa:	f7fe fd4e 	bl	8006d9a <vListInsertEnd>
 80082fe:	e005      	b.n	800830c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008300:	693b      	ldr	r3, [r7, #16]
 8008302:	3318      	adds	r3, #24
 8008304:	4619      	mov	r1, r3
 8008306:	480e      	ldr	r0, [pc, #56]	; (8008340 <xTaskRemoveFromEventList+0xbc>)
 8008308:	f7fe fd47 	bl	8006d9a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008310:	4b0c      	ldr	r3, [pc, #48]	; (8008344 <xTaskRemoveFromEventList+0xc0>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008316:	429a      	cmp	r2, r3
 8008318:	d905      	bls.n	8008326 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800831a:	2301      	movs	r3, #1
 800831c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800831e:	4b0a      	ldr	r3, [pc, #40]	; (8008348 <xTaskRemoveFromEventList+0xc4>)
 8008320:	2201      	movs	r2, #1
 8008322:	601a      	str	r2, [r3, #0]
 8008324:	e001      	b.n	800832a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008326:	2300      	movs	r3, #0
 8008328:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800832a:	697b      	ldr	r3, [r7, #20]
}
 800832c:	4618      	mov	r0, r3
 800832e:	3718      	adds	r7, #24
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}
 8008334:	20000be0 	.word	0x20000be0
 8008338:	20000bc0 	.word	0x20000bc0
 800833c:	200006e8 	.word	0x200006e8
 8008340:	20000b78 	.word	0x20000b78
 8008344:	200006e4 	.word	0x200006e4
 8008348:	20000bcc 	.word	0x20000bcc

0800834c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800834c:	b480      	push	{r7}
 800834e:	b083      	sub	sp, #12
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008354:	4b06      	ldr	r3, [pc, #24]	; (8008370 <vTaskInternalSetTimeOutState+0x24>)
 8008356:	681a      	ldr	r2, [r3, #0]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800835c:	4b05      	ldr	r3, [pc, #20]	; (8008374 <vTaskInternalSetTimeOutState+0x28>)
 800835e:	681a      	ldr	r2, [r3, #0]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	605a      	str	r2, [r3, #4]
}
 8008364:	bf00      	nop
 8008366:	370c      	adds	r7, #12
 8008368:	46bd      	mov	sp, r7
 800836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836e:	4770      	bx	lr
 8008370:	20000bd0 	.word	0x20000bd0
 8008374:	20000bbc 	.word	0x20000bbc

08008378 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b088      	sub	sp, #32
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d10b      	bne.n	80083a0 <xTaskCheckForTimeOut+0x28>
 8008388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800838c:	b672      	cpsid	i
 800838e:	f383 8811 	msr	BASEPRI, r3
 8008392:	f3bf 8f6f 	isb	sy
 8008396:	f3bf 8f4f 	dsb	sy
 800839a:	b662      	cpsie	i
 800839c:	613b      	str	r3, [r7, #16]
 800839e:	e7fe      	b.n	800839e <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d10b      	bne.n	80083be <xTaskCheckForTimeOut+0x46>
 80083a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083aa:	b672      	cpsid	i
 80083ac:	f383 8811 	msr	BASEPRI, r3
 80083b0:	f3bf 8f6f 	isb	sy
 80083b4:	f3bf 8f4f 	dsb	sy
 80083b8:	b662      	cpsie	i
 80083ba:	60fb      	str	r3, [r7, #12]
 80083bc:	e7fe      	b.n	80083bc <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 80083be:	f000 fe2b 	bl	8009018 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80083c2:	4b1d      	ldr	r3, [pc, #116]	; (8008438 <xTaskCheckForTimeOut+0xc0>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	69ba      	ldr	r2, [r7, #24]
 80083ce:	1ad3      	subs	r3, r2, r3
 80083d0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083da:	d102      	bne.n	80083e2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80083dc:	2300      	movs	r3, #0
 80083de:	61fb      	str	r3, [r7, #28]
 80083e0:	e023      	b.n	800842a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681a      	ldr	r2, [r3, #0]
 80083e6:	4b15      	ldr	r3, [pc, #84]	; (800843c <xTaskCheckForTimeOut+0xc4>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	429a      	cmp	r2, r3
 80083ec:	d007      	beq.n	80083fe <xTaskCheckForTimeOut+0x86>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	69ba      	ldr	r2, [r7, #24]
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d302      	bcc.n	80083fe <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80083f8:	2301      	movs	r3, #1
 80083fa:	61fb      	str	r3, [r7, #28]
 80083fc:	e015      	b.n	800842a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	697a      	ldr	r2, [r7, #20]
 8008404:	429a      	cmp	r2, r3
 8008406:	d20b      	bcs.n	8008420 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	681a      	ldr	r2, [r3, #0]
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	1ad2      	subs	r2, r2, r3
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f7ff ff99 	bl	800834c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800841a:	2300      	movs	r3, #0
 800841c:	61fb      	str	r3, [r7, #28]
 800841e:	e004      	b.n	800842a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	2200      	movs	r2, #0
 8008424:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008426:	2301      	movs	r3, #1
 8008428:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800842a:	f000 fe27 	bl	800907c <vPortExitCritical>

	return xReturn;
 800842e:	69fb      	ldr	r3, [r7, #28]
}
 8008430:	4618      	mov	r0, r3
 8008432:	3720      	adds	r7, #32
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}
 8008438:	20000bbc 	.word	0x20000bbc
 800843c:	20000bd0 	.word	0x20000bd0

08008440 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008440:	b480      	push	{r7}
 8008442:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008444:	4b03      	ldr	r3, [pc, #12]	; (8008454 <vTaskMissedYield+0x14>)
 8008446:	2201      	movs	r2, #1
 8008448:	601a      	str	r2, [r3, #0]
}
 800844a:	bf00      	nop
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr
 8008454:	20000bcc 	.word	0x20000bcc

08008458 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b082      	sub	sp, #8
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008460:	f000 f852 	bl	8008508 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008464:	4b06      	ldr	r3, [pc, #24]	; (8008480 <prvIdleTask+0x28>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	2b01      	cmp	r3, #1
 800846a:	d9f9      	bls.n	8008460 <prvIdleTask+0x8>
			{
				taskYIELD();
 800846c:	4b05      	ldr	r3, [pc, #20]	; (8008484 <prvIdleTask+0x2c>)
 800846e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008472:	601a      	str	r2, [r3, #0]
 8008474:	f3bf 8f4f 	dsb	sy
 8008478:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800847c:	e7f0      	b.n	8008460 <prvIdleTask+0x8>
 800847e:	bf00      	nop
 8008480:	200006e8 	.word	0x200006e8
 8008484:	e000ed04 	.word	0xe000ed04

08008488 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b082      	sub	sp, #8
 800848c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800848e:	2300      	movs	r3, #0
 8008490:	607b      	str	r3, [r7, #4]
 8008492:	e00c      	b.n	80084ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008494:	687a      	ldr	r2, [r7, #4]
 8008496:	4613      	mov	r3, r2
 8008498:	009b      	lsls	r3, r3, #2
 800849a:	4413      	add	r3, r2
 800849c:	009b      	lsls	r3, r3, #2
 800849e:	4a12      	ldr	r2, [pc, #72]	; (80084e8 <prvInitialiseTaskLists+0x60>)
 80084a0:	4413      	add	r3, r2
 80084a2:	4618      	mov	r0, r3
 80084a4:	f7fe fc4c 	bl	8006d40 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	3301      	adds	r3, #1
 80084ac:	607b      	str	r3, [r7, #4]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2b37      	cmp	r3, #55	; 0x37
 80084b2:	d9ef      	bls.n	8008494 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80084b4:	480d      	ldr	r0, [pc, #52]	; (80084ec <prvInitialiseTaskLists+0x64>)
 80084b6:	f7fe fc43 	bl	8006d40 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80084ba:	480d      	ldr	r0, [pc, #52]	; (80084f0 <prvInitialiseTaskLists+0x68>)
 80084bc:	f7fe fc40 	bl	8006d40 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80084c0:	480c      	ldr	r0, [pc, #48]	; (80084f4 <prvInitialiseTaskLists+0x6c>)
 80084c2:	f7fe fc3d 	bl	8006d40 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80084c6:	480c      	ldr	r0, [pc, #48]	; (80084f8 <prvInitialiseTaskLists+0x70>)
 80084c8:	f7fe fc3a 	bl	8006d40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80084cc:	480b      	ldr	r0, [pc, #44]	; (80084fc <prvInitialiseTaskLists+0x74>)
 80084ce:	f7fe fc37 	bl	8006d40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80084d2:	4b0b      	ldr	r3, [pc, #44]	; (8008500 <prvInitialiseTaskLists+0x78>)
 80084d4:	4a05      	ldr	r2, [pc, #20]	; (80084ec <prvInitialiseTaskLists+0x64>)
 80084d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80084d8:	4b0a      	ldr	r3, [pc, #40]	; (8008504 <prvInitialiseTaskLists+0x7c>)
 80084da:	4a05      	ldr	r2, [pc, #20]	; (80084f0 <prvInitialiseTaskLists+0x68>)
 80084dc:	601a      	str	r2, [r3, #0]
}
 80084de:	bf00      	nop
 80084e0:	3708      	adds	r7, #8
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}
 80084e6:	bf00      	nop
 80084e8:	200006e8 	.word	0x200006e8
 80084ec:	20000b48 	.word	0x20000b48
 80084f0:	20000b5c 	.word	0x20000b5c
 80084f4:	20000b78 	.word	0x20000b78
 80084f8:	20000b8c 	.word	0x20000b8c
 80084fc:	20000ba4 	.word	0x20000ba4
 8008500:	20000b70 	.word	0x20000b70
 8008504:	20000b74 	.word	0x20000b74

08008508 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b082      	sub	sp, #8
 800850c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800850e:	e019      	b.n	8008544 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008510:	f000 fd82 	bl	8009018 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008514:	4b0f      	ldr	r3, [pc, #60]	; (8008554 <prvCheckTasksWaitingTermination+0x4c>)
 8008516:	68db      	ldr	r3, [r3, #12]
 8008518:	68db      	ldr	r3, [r3, #12]
 800851a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	3304      	adds	r3, #4
 8008520:	4618      	mov	r0, r3
 8008522:	f7fe fc97 	bl	8006e54 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008526:	4b0c      	ldr	r3, [pc, #48]	; (8008558 <prvCheckTasksWaitingTermination+0x50>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	3b01      	subs	r3, #1
 800852c:	4a0a      	ldr	r2, [pc, #40]	; (8008558 <prvCheckTasksWaitingTermination+0x50>)
 800852e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008530:	4b0a      	ldr	r3, [pc, #40]	; (800855c <prvCheckTasksWaitingTermination+0x54>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	3b01      	subs	r3, #1
 8008536:	4a09      	ldr	r2, [pc, #36]	; (800855c <prvCheckTasksWaitingTermination+0x54>)
 8008538:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800853a:	f000 fd9f 	bl	800907c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 f80e 	bl	8008560 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008544:	4b05      	ldr	r3, [pc, #20]	; (800855c <prvCheckTasksWaitingTermination+0x54>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d1e1      	bne.n	8008510 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800854c:	bf00      	nop
 800854e:	3708      	adds	r7, #8
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}
 8008554:	20000b8c 	.word	0x20000b8c
 8008558:	20000bb8 	.word	0x20000bb8
 800855c:	20000ba0 	.word	0x20000ba0

08008560 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008560:	b580      	push	{r7, lr}
 8008562:	b084      	sub	sp, #16
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800856e:	2b00      	cmp	r3, #0
 8008570:	d108      	bne.n	8008584 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008576:	4618      	mov	r0, r3
 8008578:	f000 ff38 	bl	80093ec <vPortFree>
				vPortFree( pxTCB );
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f000 ff35 	bl	80093ec <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008582:	e019      	b.n	80085b8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800858a:	2b01      	cmp	r3, #1
 800858c:	d103      	bne.n	8008596 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f000 ff2c 	bl	80093ec <vPortFree>
	}
 8008594:	e010      	b.n	80085b8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800859c:	2b02      	cmp	r3, #2
 800859e:	d00b      	beq.n	80085b8 <prvDeleteTCB+0x58>
 80085a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a4:	b672      	cpsid	i
 80085a6:	f383 8811 	msr	BASEPRI, r3
 80085aa:	f3bf 8f6f 	isb	sy
 80085ae:	f3bf 8f4f 	dsb	sy
 80085b2:	b662      	cpsie	i
 80085b4:	60fb      	str	r3, [r7, #12]
 80085b6:	e7fe      	b.n	80085b6 <prvDeleteTCB+0x56>
	}
 80085b8:	bf00      	nop
 80085ba:	3710      	adds	r7, #16
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}

080085c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80085c0:	b480      	push	{r7}
 80085c2:	b083      	sub	sp, #12
 80085c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80085c6:	4b0f      	ldr	r3, [pc, #60]	; (8008604 <prvResetNextTaskUnblockTime+0x44>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d101      	bne.n	80085d4 <prvResetNextTaskUnblockTime+0x14>
 80085d0:	2301      	movs	r3, #1
 80085d2:	e000      	b.n	80085d6 <prvResetNextTaskUnblockTime+0x16>
 80085d4:	2300      	movs	r3, #0
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d004      	beq.n	80085e4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80085da:	4b0b      	ldr	r3, [pc, #44]	; (8008608 <prvResetNextTaskUnblockTime+0x48>)
 80085dc:	f04f 32ff 	mov.w	r2, #4294967295
 80085e0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80085e2:	e008      	b.n	80085f6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80085e4:	4b07      	ldr	r3, [pc, #28]	; (8008604 <prvResetNextTaskUnblockTime+0x44>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	68db      	ldr	r3, [r3, #12]
 80085ea:	68db      	ldr	r3, [r3, #12]
 80085ec:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	4a05      	ldr	r2, [pc, #20]	; (8008608 <prvResetNextTaskUnblockTime+0x48>)
 80085f4:	6013      	str	r3, [r2, #0]
}
 80085f6:	bf00      	nop
 80085f8:	370c      	adds	r7, #12
 80085fa:	46bd      	mov	sp, r7
 80085fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008600:	4770      	bx	lr
 8008602:	bf00      	nop
 8008604:	20000b70 	.word	0x20000b70
 8008608:	20000bd8 	.word	0x20000bd8

0800860c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800860c:	b480      	push	{r7}
 800860e:	b083      	sub	sp, #12
 8008610:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008612:	4b0b      	ldr	r3, [pc, #44]	; (8008640 <xTaskGetSchedulerState+0x34>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d102      	bne.n	8008620 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800861a:	2301      	movs	r3, #1
 800861c:	607b      	str	r3, [r7, #4]
 800861e:	e008      	b.n	8008632 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008620:	4b08      	ldr	r3, [pc, #32]	; (8008644 <xTaskGetSchedulerState+0x38>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d102      	bne.n	800862e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008628:	2302      	movs	r3, #2
 800862a:	607b      	str	r3, [r7, #4]
 800862c:	e001      	b.n	8008632 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800862e:	2300      	movs	r3, #0
 8008630:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008632:	687b      	ldr	r3, [r7, #4]
	}
 8008634:	4618      	mov	r0, r3
 8008636:	370c      	adds	r7, #12
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr
 8008640:	20000bc4 	.word	0x20000bc4
 8008644:	20000be0 	.word	0x20000be0

08008648 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008648:	b580      	push	{r7, lr}
 800864a:	b086      	sub	sp, #24
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008654:	2300      	movs	r3, #0
 8008656:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d058      	beq.n	8008710 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800865e:	4b2f      	ldr	r3, [pc, #188]	; (800871c <xTaskPriorityDisinherit+0xd4>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	693a      	ldr	r2, [r7, #16]
 8008664:	429a      	cmp	r2, r3
 8008666:	d00b      	beq.n	8008680 <xTaskPriorityDisinherit+0x38>
 8008668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800866c:	b672      	cpsid	i
 800866e:	f383 8811 	msr	BASEPRI, r3
 8008672:	f3bf 8f6f 	isb	sy
 8008676:	f3bf 8f4f 	dsb	sy
 800867a:	b662      	cpsie	i
 800867c:	60fb      	str	r3, [r7, #12]
 800867e:	e7fe      	b.n	800867e <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008684:	2b00      	cmp	r3, #0
 8008686:	d10b      	bne.n	80086a0 <xTaskPriorityDisinherit+0x58>
 8008688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800868c:	b672      	cpsid	i
 800868e:	f383 8811 	msr	BASEPRI, r3
 8008692:	f3bf 8f6f 	isb	sy
 8008696:	f3bf 8f4f 	dsb	sy
 800869a:	b662      	cpsie	i
 800869c:	60bb      	str	r3, [r7, #8]
 800869e:	e7fe      	b.n	800869e <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086a4:	1e5a      	subs	r2, r3, #1
 80086a6:	693b      	ldr	r3, [r7, #16]
 80086a8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086b2:	429a      	cmp	r2, r3
 80086b4:	d02c      	beq.n	8008710 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d128      	bne.n	8008710 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	3304      	adds	r3, #4
 80086c2:	4618      	mov	r0, r3
 80086c4:	f7fe fbc6 	bl	8006e54 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086d4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80086dc:	693b      	ldr	r3, [r7, #16]
 80086de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086e0:	4b0f      	ldr	r3, [pc, #60]	; (8008720 <xTaskPriorityDisinherit+0xd8>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	429a      	cmp	r2, r3
 80086e6:	d903      	bls.n	80086f0 <xTaskPriorityDisinherit+0xa8>
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ec:	4a0c      	ldr	r2, [pc, #48]	; (8008720 <xTaskPriorityDisinherit+0xd8>)
 80086ee:	6013      	str	r3, [r2, #0]
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086f4:	4613      	mov	r3, r2
 80086f6:	009b      	lsls	r3, r3, #2
 80086f8:	4413      	add	r3, r2
 80086fa:	009b      	lsls	r3, r3, #2
 80086fc:	4a09      	ldr	r2, [pc, #36]	; (8008724 <xTaskPriorityDisinherit+0xdc>)
 80086fe:	441a      	add	r2, r3
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	3304      	adds	r3, #4
 8008704:	4619      	mov	r1, r3
 8008706:	4610      	mov	r0, r2
 8008708:	f7fe fb47 	bl	8006d9a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800870c:	2301      	movs	r3, #1
 800870e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008710:	697b      	ldr	r3, [r7, #20]
	}
 8008712:	4618      	mov	r0, r3
 8008714:	3718      	adds	r7, #24
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}
 800871a:	bf00      	nop
 800871c:	200006e4 	.word	0x200006e4
 8008720:	20000bc0 	.word	0x20000bc0
 8008724:	200006e8 	.word	0x200006e8

08008728 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b084      	sub	sp, #16
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008732:	4b21      	ldr	r3, [pc, #132]	; (80087b8 <prvAddCurrentTaskToDelayedList+0x90>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008738:	4b20      	ldr	r3, [pc, #128]	; (80087bc <prvAddCurrentTaskToDelayedList+0x94>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	3304      	adds	r3, #4
 800873e:	4618      	mov	r0, r3
 8008740:	f7fe fb88 	bl	8006e54 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800874a:	d10a      	bne.n	8008762 <prvAddCurrentTaskToDelayedList+0x3a>
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d007      	beq.n	8008762 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008752:	4b1a      	ldr	r3, [pc, #104]	; (80087bc <prvAddCurrentTaskToDelayedList+0x94>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	3304      	adds	r3, #4
 8008758:	4619      	mov	r1, r3
 800875a:	4819      	ldr	r0, [pc, #100]	; (80087c0 <prvAddCurrentTaskToDelayedList+0x98>)
 800875c:	f7fe fb1d 	bl	8006d9a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008760:	e026      	b.n	80087b0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008762:	68fa      	ldr	r2, [r7, #12]
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	4413      	add	r3, r2
 8008768:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800876a:	4b14      	ldr	r3, [pc, #80]	; (80087bc <prvAddCurrentTaskToDelayedList+0x94>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	68ba      	ldr	r2, [r7, #8]
 8008770:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008772:	68ba      	ldr	r2, [r7, #8]
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	429a      	cmp	r2, r3
 8008778:	d209      	bcs.n	800878e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800877a:	4b12      	ldr	r3, [pc, #72]	; (80087c4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800877c:	681a      	ldr	r2, [r3, #0]
 800877e:	4b0f      	ldr	r3, [pc, #60]	; (80087bc <prvAddCurrentTaskToDelayedList+0x94>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	3304      	adds	r3, #4
 8008784:	4619      	mov	r1, r3
 8008786:	4610      	mov	r0, r2
 8008788:	f7fe fb2b 	bl	8006de2 <vListInsert>
}
 800878c:	e010      	b.n	80087b0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800878e:	4b0e      	ldr	r3, [pc, #56]	; (80087c8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008790:	681a      	ldr	r2, [r3, #0]
 8008792:	4b0a      	ldr	r3, [pc, #40]	; (80087bc <prvAddCurrentTaskToDelayedList+0x94>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	3304      	adds	r3, #4
 8008798:	4619      	mov	r1, r3
 800879a:	4610      	mov	r0, r2
 800879c:	f7fe fb21 	bl	8006de2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80087a0:	4b0a      	ldr	r3, [pc, #40]	; (80087cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	68ba      	ldr	r2, [r7, #8]
 80087a6:	429a      	cmp	r2, r3
 80087a8:	d202      	bcs.n	80087b0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80087aa:	4a08      	ldr	r2, [pc, #32]	; (80087cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	6013      	str	r3, [r2, #0]
}
 80087b0:	bf00      	nop
 80087b2:	3710      	adds	r7, #16
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}
 80087b8:	20000bbc 	.word	0x20000bbc
 80087bc:	200006e4 	.word	0x200006e4
 80087c0:	20000ba4 	.word	0x20000ba4
 80087c4:	20000b74 	.word	0x20000b74
 80087c8:	20000b70 	.word	0x20000b70
 80087cc:	20000bd8 	.word	0x20000bd8

080087d0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b08a      	sub	sp, #40	; 0x28
 80087d4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80087d6:	2300      	movs	r3, #0
 80087d8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80087da:	f000 fad1 	bl	8008d80 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80087de:	4b1d      	ldr	r3, [pc, #116]	; (8008854 <xTimerCreateTimerTask+0x84>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d021      	beq.n	800882a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80087e6:	2300      	movs	r3, #0
 80087e8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80087ea:	2300      	movs	r3, #0
 80087ec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80087ee:	1d3a      	adds	r2, r7, #4
 80087f0:	f107 0108 	add.w	r1, r7, #8
 80087f4:	f107 030c 	add.w	r3, r7, #12
 80087f8:	4618      	mov	r0, r3
 80087fa:	f7fe fa87 	bl	8006d0c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80087fe:	6879      	ldr	r1, [r7, #4]
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	68fa      	ldr	r2, [r7, #12]
 8008804:	9202      	str	r2, [sp, #8]
 8008806:	9301      	str	r3, [sp, #4]
 8008808:	2302      	movs	r3, #2
 800880a:	9300      	str	r3, [sp, #0]
 800880c:	2300      	movs	r3, #0
 800880e:	460a      	mov	r2, r1
 8008810:	4911      	ldr	r1, [pc, #68]	; (8008858 <xTimerCreateTimerTask+0x88>)
 8008812:	4812      	ldr	r0, [pc, #72]	; (800885c <xTimerCreateTimerTask+0x8c>)
 8008814:	f7ff f83e 	bl	8007894 <xTaskCreateStatic>
 8008818:	4602      	mov	r2, r0
 800881a:	4b11      	ldr	r3, [pc, #68]	; (8008860 <xTimerCreateTimerTask+0x90>)
 800881c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800881e:	4b10      	ldr	r3, [pc, #64]	; (8008860 <xTimerCreateTimerTask+0x90>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d001      	beq.n	800882a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008826:	2301      	movs	r3, #1
 8008828:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d10b      	bne.n	8008848 <xTimerCreateTimerTask+0x78>
 8008830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008834:	b672      	cpsid	i
 8008836:	f383 8811 	msr	BASEPRI, r3
 800883a:	f3bf 8f6f 	isb	sy
 800883e:	f3bf 8f4f 	dsb	sy
 8008842:	b662      	cpsie	i
 8008844:	613b      	str	r3, [r7, #16]
 8008846:	e7fe      	b.n	8008846 <xTimerCreateTimerTask+0x76>
	return xReturn;
 8008848:	697b      	ldr	r3, [r7, #20]
}
 800884a:	4618      	mov	r0, r3
 800884c:	3718      	adds	r7, #24
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}
 8008852:	bf00      	nop
 8008854:	20000c14 	.word	0x20000c14
 8008858:	08009740 	.word	0x08009740
 800885c:	08008985 	.word	0x08008985
 8008860:	20000c18 	.word	0x20000c18

08008864 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b08a      	sub	sp, #40	; 0x28
 8008868:	af00      	add	r7, sp, #0
 800886a:	60f8      	str	r0, [r7, #12]
 800886c:	60b9      	str	r1, [r7, #8]
 800886e:	607a      	str	r2, [r7, #4]
 8008870:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008872:	2300      	movs	r3, #0
 8008874:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d10b      	bne.n	8008894 <xTimerGenericCommand+0x30>
 800887c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008880:	b672      	cpsid	i
 8008882:	f383 8811 	msr	BASEPRI, r3
 8008886:	f3bf 8f6f 	isb	sy
 800888a:	f3bf 8f4f 	dsb	sy
 800888e:	b662      	cpsie	i
 8008890:	623b      	str	r3, [r7, #32]
 8008892:	e7fe      	b.n	8008892 <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008894:	4b19      	ldr	r3, [pc, #100]	; (80088fc <xTimerGenericCommand+0x98>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d02a      	beq.n	80088f2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	2b05      	cmp	r3, #5
 80088ac:	dc18      	bgt.n	80088e0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80088ae:	f7ff fead 	bl	800860c <xTaskGetSchedulerState>
 80088b2:	4603      	mov	r3, r0
 80088b4:	2b02      	cmp	r3, #2
 80088b6:	d109      	bne.n	80088cc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80088b8:	4b10      	ldr	r3, [pc, #64]	; (80088fc <xTimerGenericCommand+0x98>)
 80088ba:	6818      	ldr	r0, [r3, #0]
 80088bc:	f107 0110 	add.w	r1, r7, #16
 80088c0:	2300      	movs	r3, #0
 80088c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088c4:	f7fe fbfa 	bl	80070bc <xQueueGenericSend>
 80088c8:	6278      	str	r0, [r7, #36]	; 0x24
 80088ca:	e012      	b.n	80088f2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80088cc:	4b0b      	ldr	r3, [pc, #44]	; (80088fc <xTimerGenericCommand+0x98>)
 80088ce:	6818      	ldr	r0, [r3, #0]
 80088d0:	f107 0110 	add.w	r1, r7, #16
 80088d4:	2300      	movs	r3, #0
 80088d6:	2200      	movs	r2, #0
 80088d8:	f7fe fbf0 	bl	80070bc <xQueueGenericSend>
 80088dc:	6278      	str	r0, [r7, #36]	; 0x24
 80088de:	e008      	b.n	80088f2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80088e0:	4b06      	ldr	r3, [pc, #24]	; (80088fc <xTimerGenericCommand+0x98>)
 80088e2:	6818      	ldr	r0, [r3, #0]
 80088e4:	f107 0110 	add.w	r1, r7, #16
 80088e8:	2300      	movs	r3, #0
 80088ea:	683a      	ldr	r2, [r7, #0]
 80088ec:	f7fe fce8 	bl	80072c0 <xQueueGenericSendFromISR>
 80088f0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80088f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3728      	adds	r7, #40	; 0x28
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}
 80088fc:	20000c14 	.word	0x20000c14

08008900 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b088      	sub	sp, #32
 8008904:	af02      	add	r7, sp, #8
 8008906:	6078      	str	r0, [r7, #4]
 8008908:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800890a:	4b1d      	ldr	r3, [pc, #116]	; (8008980 <prvProcessExpiredTimer+0x80>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	68db      	ldr	r3, [r3, #12]
 8008910:	68db      	ldr	r3, [r3, #12]
 8008912:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008914:	697b      	ldr	r3, [r7, #20]
 8008916:	3304      	adds	r3, #4
 8008918:	4618      	mov	r0, r3
 800891a:	f7fe fa9b 	bl	8006e54 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	69db      	ldr	r3, [r3, #28]
 8008922:	2b01      	cmp	r3, #1
 8008924:	d123      	bne.n	800896e <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	699a      	ldr	r2, [r3, #24]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	18d1      	adds	r1, r2, r3
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	683a      	ldr	r2, [r7, #0]
 8008932:	6978      	ldr	r0, [r7, #20]
 8008934:	f000 f8ca 	bl	8008acc <prvInsertTimerInActiveList>
 8008938:	4603      	mov	r3, r0
 800893a:	2b00      	cmp	r3, #0
 800893c:	d017      	beq.n	800896e <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800893e:	2300      	movs	r3, #0
 8008940:	9300      	str	r3, [sp, #0]
 8008942:	2300      	movs	r3, #0
 8008944:	687a      	ldr	r2, [r7, #4]
 8008946:	2100      	movs	r1, #0
 8008948:	6978      	ldr	r0, [r7, #20]
 800894a:	f7ff ff8b 	bl	8008864 <xTimerGenericCommand>
 800894e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d10b      	bne.n	800896e <prvProcessExpiredTimer+0x6e>
 8008956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800895a:	b672      	cpsid	i
 800895c:	f383 8811 	msr	BASEPRI, r3
 8008960:	f3bf 8f6f 	isb	sy
 8008964:	f3bf 8f4f 	dsb	sy
 8008968:	b662      	cpsie	i
 800896a:	60fb      	str	r3, [r7, #12]
 800896c:	e7fe      	b.n	800896c <prvProcessExpiredTimer+0x6c>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008972:	6978      	ldr	r0, [r7, #20]
 8008974:	4798      	blx	r3
}
 8008976:	bf00      	nop
 8008978:	3718      	adds	r7, #24
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}
 800897e:	bf00      	nop
 8008980:	20000c0c 	.word	0x20000c0c

08008984 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b084      	sub	sp, #16
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800898c:	f107 0308 	add.w	r3, r7, #8
 8008990:	4618      	mov	r0, r3
 8008992:	f000 f857 	bl	8008a44 <prvGetNextExpireTime>
 8008996:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	4619      	mov	r1, r3
 800899c:	68f8      	ldr	r0, [r7, #12]
 800899e:	f000 f803 	bl	80089a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80089a2:	f000 f8d5 	bl	8008b50 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80089a6:	e7f1      	b.n	800898c <prvTimerTask+0x8>

080089a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b084      	sub	sp, #16
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80089b2:	f7ff fa29 	bl	8007e08 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80089b6:	f107 0308 	add.w	r3, r7, #8
 80089ba:	4618      	mov	r0, r3
 80089bc:	f000 f866 	bl	8008a8c <prvSampleTimeNow>
 80089c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d130      	bne.n	8008a2a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d10a      	bne.n	80089e4 <prvProcessTimerOrBlockTask+0x3c>
 80089ce:	687a      	ldr	r2, [r7, #4]
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	429a      	cmp	r2, r3
 80089d4:	d806      	bhi.n	80089e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80089d6:	f7ff fa25 	bl	8007e24 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80089da:	68f9      	ldr	r1, [r7, #12]
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f7ff ff8f 	bl	8008900 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80089e2:	e024      	b.n	8008a2e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d008      	beq.n	80089fc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80089ea:	4b13      	ldr	r3, [pc, #76]	; (8008a38 <prvProcessTimerOrBlockTask+0x90>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	bf0c      	ite	eq
 80089f4:	2301      	moveq	r3, #1
 80089f6:	2300      	movne	r3, #0
 80089f8:	b2db      	uxtb	r3, r3
 80089fa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80089fc:	4b0f      	ldr	r3, [pc, #60]	; (8008a3c <prvProcessTimerOrBlockTask+0x94>)
 80089fe:	6818      	ldr	r0, [r3, #0]
 8008a00:	687a      	ldr	r2, [r7, #4]
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	1ad3      	subs	r3, r2, r3
 8008a06:	683a      	ldr	r2, [r7, #0]
 8008a08:	4619      	mov	r1, r3
 8008a0a:	f7fe ff0f 	bl	800782c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008a0e:	f7ff fa09 	bl	8007e24 <xTaskResumeAll>
 8008a12:	4603      	mov	r3, r0
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d10a      	bne.n	8008a2e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008a18:	4b09      	ldr	r3, [pc, #36]	; (8008a40 <prvProcessTimerOrBlockTask+0x98>)
 8008a1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a1e:	601a      	str	r2, [r3, #0]
 8008a20:	f3bf 8f4f 	dsb	sy
 8008a24:	f3bf 8f6f 	isb	sy
}
 8008a28:	e001      	b.n	8008a2e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008a2a:	f7ff f9fb 	bl	8007e24 <xTaskResumeAll>
}
 8008a2e:	bf00      	nop
 8008a30:	3710      	adds	r7, #16
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}
 8008a36:	bf00      	nop
 8008a38:	20000c10 	.word	0x20000c10
 8008a3c:	20000c14 	.word	0x20000c14
 8008a40:	e000ed04 	.word	0xe000ed04

08008a44 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008a44:	b480      	push	{r7}
 8008a46:	b085      	sub	sp, #20
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008a4c:	4b0e      	ldr	r3, [pc, #56]	; (8008a88 <prvGetNextExpireTime+0x44>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	bf0c      	ite	eq
 8008a56:	2301      	moveq	r3, #1
 8008a58:	2300      	movne	r3, #0
 8008a5a:	b2db      	uxtb	r3, r3
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d105      	bne.n	8008a76 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008a6a:	4b07      	ldr	r3, [pc, #28]	; (8008a88 <prvGetNextExpireTime+0x44>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	68db      	ldr	r3, [r3, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	60fb      	str	r3, [r7, #12]
 8008a74:	e001      	b.n	8008a7a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008a76:	2300      	movs	r3, #0
 8008a78:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3714      	adds	r7, #20
 8008a80:	46bd      	mov	sp, r7
 8008a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a86:	4770      	bx	lr
 8008a88:	20000c0c 	.word	0x20000c0c

08008a8c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b084      	sub	sp, #16
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008a94:	f7ff fa64 	bl	8007f60 <xTaskGetTickCount>
 8008a98:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008a9a:	4b0b      	ldr	r3, [pc, #44]	; (8008ac8 <prvSampleTimeNow+0x3c>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	68fa      	ldr	r2, [r7, #12]
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d205      	bcs.n	8008ab0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008aa4:	f000 f90a 	bl	8008cbc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2201      	movs	r2, #1
 8008aac:	601a      	str	r2, [r3, #0]
 8008aae:	e002      	b.n	8008ab6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008ab6:	4a04      	ldr	r2, [pc, #16]	; (8008ac8 <prvSampleTimeNow+0x3c>)
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008abc:	68fb      	ldr	r3, [r7, #12]
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3710      	adds	r7, #16
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}
 8008ac6:	bf00      	nop
 8008ac8:	20000c1c 	.word	0x20000c1c

08008acc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b086      	sub	sp, #24
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	60f8      	str	r0, [r7, #12]
 8008ad4:	60b9      	str	r1, [r7, #8]
 8008ad6:	607a      	str	r2, [r7, #4]
 8008ad8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008ada:	2300      	movs	r3, #0
 8008adc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	68ba      	ldr	r2, [r7, #8]
 8008ae2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	68fa      	ldr	r2, [r7, #12]
 8008ae8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008aea:	68ba      	ldr	r2, [r7, #8]
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	429a      	cmp	r2, r3
 8008af0:	d812      	bhi.n	8008b18 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008af2:	687a      	ldr	r2, [r7, #4]
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	1ad2      	subs	r2, r2, r3
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	699b      	ldr	r3, [r3, #24]
 8008afc:	429a      	cmp	r2, r3
 8008afe:	d302      	bcc.n	8008b06 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008b00:	2301      	movs	r3, #1
 8008b02:	617b      	str	r3, [r7, #20]
 8008b04:	e01b      	b.n	8008b3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008b06:	4b10      	ldr	r3, [pc, #64]	; (8008b48 <prvInsertTimerInActiveList+0x7c>)
 8008b08:	681a      	ldr	r2, [r3, #0]
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	3304      	adds	r3, #4
 8008b0e:	4619      	mov	r1, r3
 8008b10:	4610      	mov	r0, r2
 8008b12:	f7fe f966 	bl	8006de2 <vListInsert>
 8008b16:	e012      	b.n	8008b3e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008b18:	687a      	ldr	r2, [r7, #4]
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	d206      	bcs.n	8008b2e <prvInsertTimerInActiveList+0x62>
 8008b20:	68ba      	ldr	r2, [r7, #8]
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d302      	bcc.n	8008b2e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008b28:	2301      	movs	r3, #1
 8008b2a:	617b      	str	r3, [r7, #20]
 8008b2c:	e007      	b.n	8008b3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008b2e:	4b07      	ldr	r3, [pc, #28]	; (8008b4c <prvInsertTimerInActiveList+0x80>)
 8008b30:	681a      	ldr	r2, [r3, #0]
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	3304      	adds	r3, #4
 8008b36:	4619      	mov	r1, r3
 8008b38:	4610      	mov	r0, r2
 8008b3a:	f7fe f952 	bl	8006de2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008b3e:	697b      	ldr	r3, [r7, #20]
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	3718      	adds	r7, #24
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}
 8008b48:	20000c10 	.word	0x20000c10
 8008b4c:	20000c0c 	.word	0x20000c0c

08008b50 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b08e      	sub	sp, #56	; 0x38
 8008b54:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008b56:	e09f      	b.n	8008c98 <prvProcessReceivedCommands+0x148>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	da19      	bge.n	8008b92 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008b5e:	1d3b      	adds	r3, r7, #4
 8008b60:	3304      	adds	r3, #4
 8008b62:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d10b      	bne.n	8008b82 <prvProcessReceivedCommands+0x32>
 8008b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b6e:	b672      	cpsid	i
 8008b70:	f383 8811 	msr	BASEPRI, r3
 8008b74:	f3bf 8f6f 	isb	sy
 8008b78:	f3bf 8f4f 	dsb	sy
 8008b7c:	b662      	cpsie	i
 8008b7e:	61fb      	str	r3, [r7, #28]
 8008b80:	e7fe      	b.n	8008b80 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b88:	6850      	ldr	r0, [r2, #4]
 8008b8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b8c:	6892      	ldr	r2, [r2, #8]
 8008b8e:	4611      	mov	r1, r2
 8008b90:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	db7e      	blt.n	8008c96 <prvProcessReceivedCommands+0x146>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b9e:	695b      	ldr	r3, [r3, #20]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d004      	beq.n	8008bae <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba6:	3304      	adds	r3, #4
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f7fe f953 	bl	8006e54 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008bae:	463b      	mov	r3, r7
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f7ff ff6b 	bl	8008a8c <prvSampleTimeNow>
 8008bb6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2b09      	cmp	r3, #9
 8008bbc:	d86c      	bhi.n	8008c98 <prvProcessReceivedCommands+0x148>
 8008bbe:	a201      	add	r2, pc, #4	; (adr r2, 8008bc4 <prvProcessReceivedCommands+0x74>)
 8008bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bc4:	08008bed 	.word	0x08008bed
 8008bc8:	08008bed 	.word	0x08008bed
 8008bcc:	08008bed 	.word	0x08008bed
 8008bd0:	08008c99 	.word	0x08008c99
 8008bd4:	08008c4b 	.word	0x08008c4b
 8008bd8:	08008c85 	.word	0x08008c85
 8008bdc:	08008bed 	.word	0x08008bed
 8008be0:	08008bed 	.word	0x08008bed
 8008be4:	08008c99 	.word	0x08008c99
 8008be8:	08008c4b 	.word	0x08008c4b
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008bec:	68ba      	ldr	r2, [r7, #8]
 8008bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bf0:	699b      	ldr	r3, [r3, #24]
 8008bf2:	18d1      	adds	r1, r2, r3
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bfa:	f7ff ff67 	bl	8008acc <prvInsertTimerInActiveList>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d049      	beq.n	8008c98 <prvProcessReceivedCommands+0x148>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c0a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c0e:	69db      	ldr	r3, [r3, #28]
 8008c10:	2b01      	cmp	r3, #1
 8008c12:	d141      	bne.n	8008c98 <prvProcessReceivedCommands+0x148>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008c14:	68ba      	ldr	r2, [r7, #8]
 8008c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c18:	699b      	ldr	r3, [r3, #24]
 8008c1a:	441a      	add	r2, r3
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	9300      	str	r3, [sp, #0]
 8008c20:	2300      	movs	r3, #0
 8008c22:	2100      	movs	r1, #0
 8008c24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c26:	f7ff fe1d 	bl	8008864 <xTimerGenericCommand>
 8008c2a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008c2c:	6a3b      	ldr	r3, [r7, #32]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d132      	bne.n	8008c98 <prvProcessReceivedCommands+0x148>
 8008c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c36:	b672      	cpsid	i
 8008c38:	f383 8811 	msr	BASEPRI, r3
 8008c3c:	f3bf 8f6f 	isb	sy
 8008c40:	f3bf 8f4f 	dsb	sy
 8008c44:	b662      	cpsie	i
 8008c46:	61bb      	str	r3, [r7, #24]
 8008c48:	e7fe      	b.n	8008c48 <prvProcessReceivedCommands+0xf8>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008c4a:	68ba      	ldr	r2, [r7, #8]
 8008c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c4e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c52:	699b      	ldr	r3, [r3, #24]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d10b      	bne.n	8008c70 <prvProcessReceivedCommands+0x120>
 8008c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c5c:	b672      	cpsid	i
 8008c5e:	f383 8811 	msr	BASEPRI, r3
 8008c62:	f3bf 8f6f 	isb	sy
 8008c66:	f3bf 8f4f 	dsb	sy
 8008c6a:	b662      	cpsie	i
 8008c6c:	617b      	str	r3, [r7, #20]
 8008c6e:	e7fe      	b.n	8008c6e <prvProcessReceivedCommands+0x11e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c72:	699a      	ldr	r2, [r3, #24]
 8008c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c76:	18d1      	adds	r1, r2, r3
 8008c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c7e:	f7ff ff25 	bl	8008acc <prvInsertTimerInActiveList>
					break;
 8008c82:	e009      	b.n	8008c98 <prvProcessReceivedCommands+0x148>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c86:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d104      	bne.n	8008c98 <prvProcessReceivedCommands+0x148>
						{
							vPortFree( pxTimer );
 8008c8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c90:	f000 fbac 	bl	80093ec <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008c94:	e000      	b.n	8008c98 <prvProcessReceivedCommands+0x148>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008c96:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008c98:	4b07      	ldr	r3, [pc, #28]	; (8008cb8 <prvProcessReceivedCommands+0x168>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	1d39      	adds	r1, r7, #4
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f7fe fba9 	bl	80073f8 <xQueueReceive>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	f47f af55 	bne.w	8008b58 <prvProcessReceivedCommands+0x8>
	}
}
 8008cae:	bf00      	nop
 8008cb0:	3730      	adds	r7, #48	; 0x30
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}
 8008cb6:	bf00      	nop
 8008cb8:	20000c14 	.word	0x20000c14

08008cbc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b088      	sub	sp, #32
 8008cc0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008cc2:	e046      	b.n	8008d52 <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008cc4:	4b2c      	ldr	r3, [pc, #176]	; (8008d78 <prvSwitchTimerLists+0xbc>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	68db      	ldr	r3, [r3, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008cce:	4b2a      	ldr	r3, [pc, #168]	; (8008d78 <prvSwitchTimerLists+0xbc>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	68db      	ldr	r3, [r3, #12]
 8008cd4:	68db      	ldr	r3, [r3, #12]
 8008cd6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	3304      	adds	r3, #4
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f7fe f8b9 	bl	8006e54 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce6:	68f8      	ldr	r0, [r7, #12]
 8008ce8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	69db      	ldr	r3, [r3, #28]
 8008cee:	2b01      	cmp	r3, #1
 8008cf0:	d12f      	bne.n	8008d52 <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	699b      	ldr	r3, [r3, #24]
 8008cf6:	693a      	ldr	r2, [r7, #16]
 8008cf8:	4413      	add	r3, r2
 8008cfa:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008cfc:	68ba      	ldr	r2, [r7, #8]
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	429a      	cmp	r2, r3
 8008d02:	d90e      	bls.n	8008d22 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	68ba      	ldr	r2, [r7, #8]
 8008d08:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	68fa      	ldr	r2, [r7, #12]
 8008d0e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008d10:	4b19      	ldr	r3, [pc, #100]	; (8008d78 <prvSwitchTimerLists+0xbc>)
 8008d12:	681a      	ldr	r2, [r3, #0]
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	3304      	adds	r3, #4
 8008d18:	4619      	mov	r1, r3
 8008d1a:	4610      	mov	r0, r2
 8008d1c:	f7fe f861 	bl	8006de2 <vListInsert>
 8008d20:	e017      	b.n	8008d52 <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008d22:	2300      	movs	r3, #0
 8008d24:	9300      	str	r3, [sp, #0]
 8008d26:	2300      	movs	r3, #0
 8008d28:	693a      	ldr	r2, [r7, #16]
 8008d2a:	2100      	movs	r1, #0
 8008d2c:	68f8      	ldr	r0, [r7, #12]
 8008d2e:	f7ff fd99 	bl	8008864 <xTimerGenericCommand>
 8008d32:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d10b      	bne.n	8008d52 <prvSwitchTimerLists+0x96>
 8008d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d3e:	b672      	cpsid	i
 8008d40:	f383 8811 	msr	BASEPRI, r3
 8008d44:	f3bf 8f6f 	isb	sy
 8008d48:	f3bf 8f4f 	dsb	sy
 8008d4c:	b662      	cpsie	i
 8008d4e:	603b      	str	r3, [r7, #0]
 8008d50:	e7fe      	b.n	8008d50 <prvSwitchTimerLists+0x94>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008d52:	4b09      	ldr	r3, [pc, #36]	; (8008d78 <prvSwitchTimerLists+0xbc>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d1b3      	bne.n	8008cc4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008d5c:	4b06      	ldr	r3, [pc, #24]	; (8008d78 <prvSwitchTimerLists+0xbc>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008d62:	4b06      	ldr	r3, [pc, #24]	; (8008d7c <prvSwitchTimerLists+0xc0>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4a04      	ldr	r2, [pc, #16]	; (8008d78 <prvSwitchTimerLists+0xbc>)
 8008d68:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008d6a:	4a04      	ldr	r2, [pc, #16]	; (8008d7c <prvSwitchTimerLists+0xc0>)
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	6013      	str	r3, [r2, #0]
}
 8008d70:	bf00      	nop
 8008d72:	3718      	adds	r7, #24
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}
 8008d78:	20000c0c 	.word	0x20000c0c
 8008d7c:	20000c10 	.word	0x20000c10

08008d80 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b082      	sub	sp, #8
 8008d84:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008d86:	f000 f947 	bl	8009018 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008d8a:	4b15      	ldr	r3, [pc, #84]	; (8008de0 <prvCheckForValidListAndQueue+0x60>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d120      	bne.n	8008dd4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008d92:	4814      	ldr	r0, [pc, #80]	; (8008de4 <prvCheckForValidListAndQueue+0x64>)
 8008d94:	f7fd ffd4 	bl	8006d40 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008d98:	4813      	ldr	r0, [pc, #76]	; (8008de8 <prvCheckForValidListAndQueue+0x68>)
 8008d9a:	f7fd ffd1 	bl	8006d40 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008d9e:	4b13      	ldr	r3, [pc, #76]	; (8008dec <prvCheckForValidListAndQueue+0x6c>)
 8008da0:	4a10      	ldr	r2, [pc, #64]	; (8008de4 <prvCheckForValidListAndQueue+0x64>)
 8008da2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008da4:	4b12      	ldr	r3, [pc, #72]	; (8008df0 <prvCheckForValidListAndQueue+0x70>)
 8008da6:	4a10      	ldr	r2, [pc, #64]	; (8008de8 <prvCheckForValidListAndQueue+0x68>)
 8008da8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008daa:	2300      	movs	r3, #0
 8008dac:	9300      	str	r3, [sp, #0]
 8008dae:	4b11      	ldr	r3, [pc, #68]	; (8008df4 <prvCheckForValidListAndQueue+0x74>)
 8008db0:	4a11      	ldr	r2, [pc, #68]	; (8008df8 <prvCheckForValidListAndQueue+0x78>)
 8008db2:	2110      	movs	r1, #16
 8008db4:	200a      	movs	r0, #10
 8008db6:	f7fe f8e1 	bl	8006f7c <xQueueGenericCreateStatic>
 8008dba:	4602      	mov	r2, r0
 8008dbc:	4b08      	ldr	r3, [pc, #32]	; (8008de0 <prvCheckForValidListAndQueue+0x60>)
 8008dbe:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008dc0:	4b07      	ldr	r3, [pc, #28]	; (8008de0 <prvCheckForValidListAndQueue+0x60>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d005      	beq.n	8008dd4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008dc8:	4b05      	ldr	r3, [pc, #20]	; (8008de0 <prvCheckForValidListAndQueue+0x60>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	490b      	ldr	r1, [pc, #44]	; (8008dfc <prvCheckForValidListAndQueue+0x7c>)
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f7fe fd04 	bl	80077dc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008dd4:	f000 f952 	bl	800907c <vPortExitCritical>
}
 8008dd8:	bf00      	nop
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
 8008dde:	bf00      	nop
 8008de0:	20000c14 	.word	0x20000c14
 8008de4:	20000be4 	.word	0x20000be4
 8008de8:	20000bf8 	.word	0x20000bf8
 8008dec:	20000c0c 	.word	0x20000c0c
 8008df0:	20000c10 	.word	0x20000c10
 8008df4:	20000cc0 	.word	0x20000cc0
 8008df8:	20000c20 	.word	0x20000c20
 8008dfc:	08009748 	.word	0x08009748

08008e00 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008e00:	b480      	push	{r7}
 8008e02:	b085      	sub	sp, #20
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	60f8      	str	r0, [r7, #12]
 8008e08:	60b9      	str	r1, [r7, #8]
 8008e0a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	3b04      	subs	r3, #4
 8008e10:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008e18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	3b04      	subs	r3, #4
 8008e1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	f023 0201 	bic.w	r2, r3, #1
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	3b04      	subs	r3, #4
 8008e2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008e30:	4a0c      	ldr	r2, [pc, #48]	; (8008e64 <pxPortInitialiseStack+0x64>)
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	3b14      	subs	r3, #20
 8008e3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008e3c:	687a      	ldr	r2, [r7, #4]
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	3b04      	subs	r3, #4
 8008e46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	f06f 0202 	mvn.w	r2, #2
 8008e4e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	3b20      	subs	r3, #32
 8008e54:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008e56:	68fb      	ldr	r3, [r7, #12]
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3714      	adds	r7, #20
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr
 8008e64:	08008e69 	.word	0x08008e69

08008e68 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b085      	sub	sp, #20
 8008e6c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008e72:	4b13      	ldr	r3, [pc, #76]	; (8008ec0 <prvTaskExitError+0x58>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e7a:	d00b      	beq.n	8008e94 <prvTaskExitError+0x2c>
 8008e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e80:	b672      	cpsid	i
 8008e82:	f383 8811 	msr	BASEPRI, r3
 8008e86:	f3bf 8f6f 	isb	sy
 8008e8a:	f3bf 8f4f 	dsb	sy
 8008e8e:	b662      	cpsie	i
 8008e90:	60fb      	str	r3, [r7, #12]
 8008e92:	e7fe      	b.n	8008e92 <prvTaskExitError+0x2a>
 8008e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e98:	b672      	cpsid	i
 8008e9a:	f383 8811 	msr	BASEPRI, r3
 8008e9e:	f3bf 8f6f 	isb	sy
 8008ea2:	f3bf 8f4f 	dsb	sy
 8008ea6:	b662      	cpsie	i
 8008ea8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008eaa:	bf00      	nop
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d0fc      	beq.n	8008eac <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008eb2:	bf00      	nop
 8008eb4:	3714      	adds	r7, #20
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebc:	4770      	bx	lr
 8008ebe:	bf00      	nop
 8008ec0:	20000008 	.word	0x20000008
	...

08008ed0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008ed0:	4b07      	ldr	r3, [pc, #28]	; (8008ef0 <pxCurrentTCBConst2>)
 8008ed2:	6819      	ldr	r1, [r3, #0]
 8008ed4:	6808      	ldr	r0, [r1, #0]
 8008ed6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eda:	f380 8809 	msr	PSP, r0
 8008ede:	f3bf 8f6f 	isb	sy
 8008ee2:	f04f 0000 	mov.w	r0, #0
 8008ee6:	f380 8811 	msr	BASEPRI, r0
 8008eea:	4770      	bx	lr
 8008eec:	f3af 8000 	nop.w

08008ef0 <pxCurrentTCBConst2>:
 8008ef0:	200006e4 	.word	0x200006e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008ef4:	bf00      	nop
 8008ef6:	bf00      	nop

08008ef8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008ef8:	4808      	ldr	r0, [pc, #32]	; (8008f1c <prvPortStartFirstTask+0x24>)
 8008efa:	6800      	ldr	r0, [r0, #0]
 8008efc:	6800      	ldr	r0, [r0, #0]
 8008efe:	f380 8808 	msr	MSP, r0
 8008f02:	f04f 0000 	mov.w	r0, #0
 8008f06:	f380 8814 	msr	CONTROL, r0
 8008f0a:	b662      	cpsie	i
 8008f0c:	b661      	cpsie	f
 8008f0e:	f3bf 8f4f 	dsb	sy
 8008f12:	f3bf 8f6f 	isb	sy
 8008f16:	df00      	svc	0
 8008f18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008f1a:	bf00      	nop
 8008f1c:	e000ed08 	.word	0xe000ed08

08008f20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b084      	sub	sp, #16
 8008f24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008f26:	4b36      	ldr	r3, [pc, #216]	; (8009000 <xPortStartScheduler+0xe0>)
 8008f28:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	781b      	ldrb	r3, [r3, #0]
 8008f2e:	b2db      	uxtb	r3, r3
 8008f30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	22ff      	movs	r2, #255	; 0xff
 8008f36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	781b      	ldrb	r3, [r3, #0]
 8008f3c:	b2db      	uxtb	r3, r3
 8008f3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008f40:	78fb      	ldrb	r3, [r7, #3]
 8008f42:	b2db      	uxtb	r3, r3
 8008f44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008f48:	b2da      	uxtb	r2, r3
 8008f4a:	4b2e      	ldr	r3, [pc, #184]	; (8009004 <xPortStartScheduler+0xe4>)
 8008f4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008f4e:	4b2e      	ldr	r3, [pc, #184]	; (8009008 <xPortStartScheduler+0xe8>)
 8008f50:	2207      	movs	r2, #7
 8008f52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f54:	e009      	b.n	8008f6a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008f56:	4b2c      	ldr	r3, [pc, #176]	; (8009008 <xPortStartScheduler+0xe8>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	3b01      	subs	r3, #1
 8008f5c:	4a2a      	ldr	r2, [pc, #168]	; (8009008 <xPortStartScheduler+0xe8>)
 8008f5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008f60:	78fb      	ldrb	r3, [r7, #3]
 8008f62:	b2db      	uxtb	r3, r3
 8008f64:	005b      	lsls	r3, r3, #1
 8008f66:	b2db      	uxtb	r3, r3
 8008f68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f6a:	78fb      	ldrb	r3, [r7, #3]
 8008f6c:	b2db      	uxtb	r3, r3
 8008f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f72:	2b80      	cmp	r3, #128	; 0x80
 8008f74:	d0ef      	beq.n	8008f56 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008f76:	4b24      	ldr	r3, [pc, #144]	; (8009008 <xPortStartScheduler+0xe8>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f1c3 0307 	rsb	r3, r3, #7
 8008f7e:	2b04      	cmp	r3, #4
 8008f80:	d00b      	beq.n	8008f9a <xPortStartScheduler+0x7a>
 8008f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f86:	b672      	cpsid	i
 8008f88:	f383 8811 	msr	BASEPRI, r3
 8008f8c:	f3bf 8f6f 	isb	sy
 8008f90:	f3bf 8f4f 	dsb	sy
 8008f94:	b662      	cpsie	i
 8008f96:	60bb      	str	r3, [r7, #8]
 8008f98:	e7fe      	b.n	8008f98 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008f9a:	4b1b      	ldr	r3, [pc, #108]	; (8009008 <xPortStartScheduler+0xe8>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	021b      	lsls	r3, r3, #8
 8008fa0:	4a19      	ldr	r2, [pc, #100]	; (8009008 <xPortStartScheduler+0xe8>)
 8008fa2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008fa4:	4b18      	ldr	r3, [pc, #96]	; (8009008 <xPortStartScheduler+0xe8>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008fac:	4a16      	ldr	r2, [pc, #88]	; (8009008 <xPortStartScheduler+0xe8>)
 8008fae:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	b2da      	uxtb	r2, r3
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008fb8:	4b14      	ldr	r3, [pc, #80]	; (800900c <xPortStartScheduler+0xec>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	4a13      	ldr	r2, [pc, #76]	; (800900c <xPortStartScheduler+0xec>)
 8008fbe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008fc2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008fc4:	4b11      	ldr	r3, [pc, #68]	; (800900c <xPortStartScheduler+0xec>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4a10      	ldr	r2, [pc, #64]	; (800900c <xPortStartScheduler+0xec>)
 8008fca:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008fce:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008fd0:	f000 f8d4 	bl	800917c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008fd4:	4b0e      	ldr	r3, [pc, #56]	; (8009010 <xPortStartScheduler+0xf0>)
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008fda:	f000 f8f3 	bl	80091c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008fde:	4b0d      	ldr	r3, [pc, #52]	; (8009014 <xPortStartScheduler+0xf4>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	4a0c      	ldr	r2, [pc, #48]	; (8009014 <xPortStartScheduler+0xf4>)
 8008fe4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008fe8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008fea:	f7ff ff85 	bl	8008ef8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008fee:	f7ff f899 	bl	8008124 <vTaskSwitchContext>
	prvTaskExitError();
 8008ff2:	f7ff ff39 	bl	8008e68 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008ff6:	2300      	movs	r3, #0
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3710      	adds	r7, #16
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}
 8009000:	e000e400 	.word	0xe000e400
 8009004:	20000d10 	.word	0x20000d10
 8009008:	20000d14 	.word	0x20000d14
 800900c:	e000ed20 	.word	0xe000ed20
 8009010:	20000008 	.word	0x20000008
 8009014:	e000ef34 	.word	0xe000ef34

08009018 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009018:	b480      	push	{r7}
 800901a:	b083      	sub	sp, #12
 800901c:	af00      	add	r7, sp, #0
 800901e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009022:	b672      	cpsid	i
 8009024:	f383 8811 	msr	BASEPRI, r3
 8009028:	f3bf 8f6f 	isb	sy
 800902c:	f3bf 8f4f 	dsb	sy
 8009030:	b662      	cpsie	i
 8009032:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009034:	4b0f      	ldr	r3, [pc, #60]	; (8009074 <vPortEnterCritical+0x5c>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	3301      	adds	r3, #1
 800903a:	4a0e      	ldr	r2, [pc, #56]	; (8009074 <vPortEnterCritical+0x5c>)
 800903c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800903e:	4b0d      	ldr	r3, [pc, #52]	; (8009074 <vPortEnterCritical+0x5c>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	2b01      	cmp	r3, #1
 8009044:	d110      	bne.n	8009068 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009046:	4b0c      	ldr	r3, [pc, #48]	; (8009078 <vPortEnterCritical+0x60>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	b2db      	uxtb	r3, r3
 800904c:	2b00      	cmp	r3, #0
 800904e:	d00b      	beq.n	8009068 <vPortEnterCritical+0x50>
 8009050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009054:	b672      	cpsid	i
 8009056:	f383 8811 	msr	BASEPRI, r3
 800905a:	f3bf 8f6f 	isb	sy
 800905e:	f3bf 8f4f 	dsb	sy
 8009062:	b662      	cpsie	i
 8009064:	603b      	str	r3, [r7, #0]
 8009066:	e7fe      	b.n	8009066 <vPortEnterCritical+0x4e>
	}
}
 8009068:	bf00      	nop
 800906a:	370c      	adds	r7, #12
 800906c:	46bd      	mov	sp, r7
 800906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009072:	4770      	bx	lr
 8009074:	20000008 	.word	0x20000008
 8009078:	e000ed04 	.word	0xe000ed04

0800907c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800907c:	b480      	push	{r7}
 800907e:	b083      	sub	sp, #12
 8009080:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009082:	4b12      	ldr	r3, [pc, #72]	; (80090cc <vPortExitCritical+0x50>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d10b      	bne.n	80090a2 <vPortExitCritical+0x26>
 800908a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800908e:	b672      	cpsid	i
 8009090:	f383 8811 	msr	BASEPRI, r3
 8009094:	f3bf 8f6f 	isb	sy
 8009098:	f3bf 8f4f 	dsb	sy
 800909c:	b662      	cpsie	i
 800909e:	607b      	str	r3, [r7, #4]
 80090a0:	e7fe      	b.n	80090a0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 80090a2:	4b0a      	ldr	r3, [pc, #40]	; (80090cc <vPortExitCritical+0x50>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	3b01      	subs	r3, #1
 80090a8:	4a08      	ldr	r2, [pc, #32]	; (80090cc <vPortExitCritical+0x50>)
 80090aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80090ac:	4b07      	ldr	r3, [pc, #28]	; (80090cc <vPortExitCritical+0x50>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d104      	bne.n	80090be <vPortExitCritical+0x42>
 80090b4:	2300      	movs	r3, #0
 80090b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80090be:	bf00      	nop
 80090c0:	370c      	adds	r7, #12
 80090c2:	46bd      	mov	sp, r7
 80090c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c8:	4770      	bx	lr
 80090ca:	bf00      	nop
 80090cc:	20000008 	.word	0x20000008

080090d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80090d0:	f3ef 8009 	mrs	r0, PSP
 80090d4:	f3bf 8f6f 	isb	sy
 80090d8:	4b15      	ldr	r3, [pc, #84]	; (8009130 <pxCurrentTCBConst>)
 80090da:	681a      	ldr	r2, [r3, #0]
 80090dc:	f01e 0f10 	tst.w	lr, #16
 80090e0:	bf08      	it	eq
 80090e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80090e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090ea:	6010      	str	r0, [r2, #0]
 80090ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80090f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80090f4:	b672      	cpsid	i
 80090f6:	f380 8811 	msr	BASEPRI, r0
 80090fa:	f3bf 8f4f 	dsb	sy
 80090fe:	f3bf 8f6f 	isb	sy
 8009102:	b662      	cpsie	i
 8009104:	f7ff f80e 	bl	8008124 <vTaskSwitchContext>
 8009108:	f04f 0000 	mov.w	r0, #0
 800910c:	f380 8811 	msr	BASEPRI, r0
 8009110:	bc09      	pop	{r0, r3}
 8009112:	6819      	ldr	r1, [r3, #0]
 8009114:	6808      	ldr	r0, [r1, #0]
 8009116:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800911a:	f01e 0f10 	tst.w	lr, #16
 800911e:	bf08      	it	eq
 8009120:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009124:	f380 8809 	msr	PSP, r0
 8009128:	f3bf 8f6f 	isb	sy
 800912c:	4770      	bx	lr
 800912e:	bf00      	nop

08009130 <pxCurrentTCBConst>:
 8009130:	200006e4 	.word	0x200006e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009134:	bf00      	nop
 8009136:	bf00      	nop

08009138 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b082      	sub	sp, #8
 800913c:	af00      	add	r7, sp, #0
	__asm volatile
 800913e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009142:	b672      	cpsid	i
 8009144:	f383 8811 	msr	BASEPRI, r3
 8009148:	f3bf 8f6f 	isb	sy
 800914c:	f3bf 8f4f 	dsb	sy
 8009150:	b662      	cpsie	i
 8009152:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009154:	f7fe ff26 	bl	8007fa4 <xTaskIncrementTick>
 8009158:	4603      	mov	r3, r0
 800915a:	2b00      	cmp	r3, #0
 800915c:	d003      	beq.n	8009166 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800915e:	4b06      	ldr	r3, [pc, #24]	; (8009178 <SysTick_Handler+0x40>)
 8009160:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009164:	601a      	str	r2, [r3, #0]
 8009166:	2300      	movs	r3, #0
 8009168:	603b      	str	r3, [r7, #0]
	__asm volatile
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8009170:	bf00      	nop
 8009172:	3708      	adds	r7, #8
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}
 8009178:	e000ed04 	.word	0xe000ed04

0800917c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800917c:	b480      	push	{r7}
 800917e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009180:	4b0b      	ldr	r3, [pc, #44]	; (80091b0 <vPortSetupTimerInterrupt+0x34>)
 8009182:	2200      	movs	r2, #0
 8009184:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009186:	4b0b      	ldr	r3, [pc, #44]	; (80091b4 <vPortSetupTimerInterrupt+0x38>)
 8009188:	2200      	movs	r2, #0
 800918a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800918c:	4b0a      	ldr	r3, [pc, #40]	; (80091b8 <vPortSetupTimerInterrupt+0x3c>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4a0a      	ldr	r2, [pc, #40]	; (80091bc <vPortSetupTimerInterrupt+0x40>)
 8009192:	fba2 2303 	umull	r2, r3, r2, r3
 8009196:	099b      	lsrs	r3, r3, #6
 8009198:	4a09      	ldr	r2, [pc, #36]	; (80091c0 <vPortSetupTimerInterrupt+0x44>)
 800919a:	3b01      	subs	r3, #1
 800919c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800919e:	4b04      	ldr	r3, [pc, #16]	; (80091b0 <vPortSetupTimerInterrupt+0x34>)
 80091a0:	2207      	movs	r2, #7
 80091a2:	601a      	str	r2, [r3, #0]
}
 80091a4:	bf00      	nop
 80091a6:	46bd      	mov	sp, r7
 80091a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ac:	4770      	bx	lr
 80091ae:	bf00      	nop
 80091b0:	e000e010 	.word	0xe000e010
 80091b4:	e000e018 	.word	0xe000e018
 80091b8:	20000000 	.word	0x20000000
 80091bc:	10624dd3 	.word	0x10624dd3
 80091c0:	e000e014 	.word	0xe000e014

080091c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80091c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80091d4 <vPortEnableVFP+0x10>
 80091c8:	6801      	ldr	r1, [r0, #0]
 80091ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80091ce:	6001      	str	r1, [r0, #0]
 80091d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80091d2:	bf00      	nop
 80091d4:	e000ed88 	.word	0xe000ed88

080091d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80091d8:	b480      	push	{r7}
 80091da:	b085      	sub	sp, #20
 80091dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80091de:	f3ef 8305 	mrs	r3, IPSR
 80091e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2b0f      	cmp	r3, #15
 80091e8:	d915      	bls.n	8009216 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80091ea:	4a18      	ldr	r2, [pc, #96]	; (800924c <vPortValidateInterruptPriority+0x74>)
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	4413      	add	r3, r2
 80091f0:	781b      	ldrb	r3, [r3, #0]
 80091f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80091f4:	4b16      	ldr	r3, [pc, #88]	; (8009250 <vPortValidateInterruptPriority+0x78>)
 80091f6:	781b      	ldrb	r3, [r3, #0]
 80091f8:	7afa      	ldrb	r2, [r7, #11]
 80091fa:	429a      	cmp	r2, r3
 80091fc:	d20b      	bcs.n	8009216 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80091fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009202:	b672      	cpsid	i
 8009204:	f383 8811 	msr	BASEPRI, r3
 8009208:	f3bf 8f6f 	isb	sy
 800920c:	f3bf 8f4f 	dsb	sy
 8009210:	b662      	cpsie	i
 8009212:	607b      	str	r3, [r7, #4]
 8009214:	e7fe      	b.n	8009214 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009216:	4b0f      	ldr	r3, [pc, #60]	; (8009254 <vPortValidateInterruptPriority+0x7c>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800921e:	4b0e      	ldr	r3, [pc, #56]	; (8009258 <vPortValidateInterruptPriority+0x80>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	429a      	cmp	r2, r3
 8009224:	d90b      	bls.n	800923e <vPortValidateInterruptPriority+0x66>
 8009226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800922a:	b672      	cpsid	i
 800922c:	f383 8811 	msr	BASEPRI, r3
 8009230:	f3bf 8f6f 	isb	sy
 8009234:	f3bf 8f4f 	dsb	sy
 8009238:	b662      	cpsie	i
 800923a:	603b      	str	r3, [r7, #0]
 800923c:	e7fe      	b.n	800923c <vPortValidateInterruptPriority+0x64>
	}
 800923e:	bf00      	nop
 8009240:	3714      	adds	r7, #20
 8009242:	46bd      	mov	sp, r7
 8009244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009248:	4770      	bx	lr
 800924a:	bf00      	nop
 800924c:	e000e3f0 	.word	0xe000e3f0
 8009250:	20000d10 	.word	0x20000d10
 8009254:	e000ed0c 	.word	0xe000ed0c
 8009258:	20000d14 	.word	0x20000d14

0800925c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b08a      	sub	sp, #40	; 0x28
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009264:	2300      	movs	r3, #0
 8009266:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009268:	f7fe fdce 	bl	8007e08 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800926c:	4b5a      	ldr	r3, [pc, #360]	; (80093d8 <pvPortMalloc+0x17c>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d101      	bne.n	8009278 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009274:	f000 f916 	bl	80094a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009278:	4b58      	ldr	r3, [pc, #352]	; (80093dc <pvPortMalloc+0x180>)
 800927a:	681a      	ldr	r2, [r3, #0]
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	4013      	ands	r3, r2
 8009280:	2b00      	cmp	r3, #0
 8009282:	f040 8090 	bne.w	80093a6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d01e      	beq.n	80092ca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800928c:	2208      	movs	r2, #8
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	4413      	add	r3, r2
 8009292:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f003 0307 	and.w	r3, r3, #7
 800929a:	2b00      	cmp	r3, #0
 800929c:	d015      	beq.n	80092ca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	f023 0307 	bic.w	r3, r3, #7
 80092a4:	3308      	adds	r3, #8
 80092a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f003 0307 	and.w	r3, r3, #7
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d00b      	beq.n	80092ca <pvPortMalloc+0x6e>
 80092b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b6:	b672      	cpsid	i
 80092b8:	f383 8811 	msr	BASEPRI, r3
 80092bc:	f3bf 8f6f 	isb	sy
 80092c0:	f3bf 8f4f 	dsb	sy
 80092c4:	b662      	cpsie	i
 80092c6:	617b      	str	r3, [r7, #20]
 80092c8:	e7fe      	b.n	80092c8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d06a      	beq.n	80093a6 <pvPortMalloc+0x14a>
 80092d0:	4b43      	ldr	r3, [pc, #268]	; (80093e0 <pvPortMalloc+0x184>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	687a      	ldr	r2, [r7, #4]
 80092d6:	429a      	cmp	r2, r3
 80092d8:	d865      	bhi.n	80093a6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80092da:	4b42      	ldr	r3, [pc, #264]	; (80093e4 <pvPortMalloc+0x188>)
 80092dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80092de:	4b41      	ldr	r3, [pc, #260]	; (80093e4 <pvPortMalloc+0x188>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80092e4:	e004      	b.n	80092f0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80092e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80092ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80092f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f2:	685b      	ldr	r3, [r3, #4]
 80092f4:	687a      	ldr	r2, [r7, #4]
 80092f6:	429a      	cmp	r2, r3
 80092f8:	d903      	bls.n	8009302 <pvPortMalloc+0xa6>
 80092fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d1f1      	bne.n	80092e6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009302:	4b35      	ldr	r3, [pc, #212]	; (80093d8 <pvPortMalloc+0x17c>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009308:	429a      	cmp	r2, r3
 800930a:	d04c      	beq.n	80093a6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800930c:	6a3b      	ldr	r3, [r7, #32]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	2208      	movs	r2, #8
 8009312:	4413      	add	r3, r2
 8009314:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009318:	681a      	ldr	r2, [r3, #0]
 800931a:	6a3b      	ldr	r3, [r7, #32]
 800931c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800931e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009320:	685a      	ldr	r2, [r3, #4]
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	1ad2      	subs	r2, r2, r3
 8009326:	2308      	movs	r3, #8
 8009328:	005b      	lsls	r3, r3, #1
 800932a:	429a      	cmp	r2, r3
 800932c:	d920      	bls.n	8009370 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800932e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	4413      	add	r3, r2
 8009334:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009336:	69bb      	ldr	r3, [r7, #24]
 8009338:	f003 0307 	and.w	r3, r3, #7
 800933c:	2b00      	cmp	r3, #0
 800933e:	d00b      	beq.n	8009358 <pvPortMalloc+0xfc>
 8009340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009344:	b672      	cpsid	i
 8009346:	f383 8811 	msr	BASEPRI, r3
 800934a:	f3bf 8f6f 	isb	sy
 800934e:	f3bf 8f4f 	dsb	sy
 8009352:	b662      	cpsie	i
 8009354:	613b      	str	r3, [r7, #16]
 8009356:	e7fe      	b.n	8009356 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800935a:	685a      	ldr	r2, [r3, #4]
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	1ad2      	subs	r2, r2, r3
 8009360:	69bb      	ldr	r3, [r7, #24]
 8009362:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009366:	687a      	ldr	r2, [r7, #4]
 8009368:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800936a:	69b8      	ldr	r0, [r7, #24]
 800936c:	f000 f8fc 	bl	8009568 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009370:	4b1b      	ldr	r3, [pc, #108]	; (80093e0 <pvPortMalloc+0x184>)
 8009372:	681a      	ldr	r2, [r3, #0]
 8009374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009376:	685b      	ldr	r3, [r3, #4]
 8009378:	1ad3      	subs	r3, r2, r3
 800937a:	4a19      	ldr	r2, [pc, #100]	; (80093e0 <pvPortMalloc+0x184>)
 800937c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800937e:	4b18      	ldr	r3, [pc, #96]	; (80093e0 <pvPortMalloc+0x184>)
 8009380:	681a      	ldr	r2, [r3, #0]
 8009382:	4b19      	ldr	r3, [pc, #100]	; (80093e8 <pvPortMalloc+0x18c>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	429a      	cmp	r2, r3
 8009388:	d203      	bcs.n	8009392 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800938a:	4b15      	ldr	r3, [pc, #84]	; (80093e0 <pvPortMalloc+0x184>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	4a16      	ldr	r2, [pc, #88]	; (80093e8 <pvPortMalloc+0x18c>)
 8009390:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009394:	685a      	ldr	r2, [r3, #4]
 8009396:	4b11      	ldr	r3, [pc, #68]	; (80093dc <pvPortMalloc+0x180>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	431a      	orrs	r2, r3
 800939c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800939e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80093a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a2:	2200      	movs	r2, #0
 80093a4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80093a6:	f7fe fd3d 	bl	8007e24 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80093aa:	69fb      	ldr	r3, [r7, #28]
 80093ac:	f003 0307 	and.w	r3, r3, #7
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d00b      	beq.n	80093cc <pvPortMalloc+0x170>
 80093b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093b8:	b672      	cpsid	i
 80093ba:	f383 8811 	msr	BASEPRI, r3
 80093be:	f3bf 8f6f 	isb	sy
 80093c2:	f3bf 8f4f 	dsb	sy
 80093c6:	b662      	cpsie	i
 80093c8:	60fb      	str	r3, [r7, #12]
 80093ca:	e7fe      	b.n	80093ca <pvPortMalloc+0x16e>
	return pvReturn;
 80093cc:	69fb      	ldr	r3, [r7, #28]
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3728      	adds	r7, #40	; 0x28
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}
 80093d6:	bf00      	nop
 80093d8:	20004920 	.word	0x20004920
 80093dc:	2000492c 	.word	0x2000492c
 80093e0:	20004924 	.word	0x20004924
 80093e4:	20004918 	.word	0x20004918
 80093e8:	20004928 	.word	0x20004928

080093ec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b086      	sub	sp, #24
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d04a      	beq.n	8009494 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80093fe:	2308      	movs	r3, #8
 8009400:	425b      	negs	r3, r3
 8009402:	697a      	ldr	r2, [r7, #20]
 8009404:	4413      	add	r3, r2
 8009406:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	685a      	ldr	r2, [r3, #4]
 8009410:	4b22      	ldr	r3, [pc, #136]	; (800949c <vPortFree+0xb0>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4013      	ands	r3, r2
 8009416:	2b00      	cmp	r3, #0
 8009418:	d10b      	bne.n	8009432 <vPortFree+0x46>
 800941a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800941e:	b672      	cpsid	i
 8009420:	f383 8811 	msr	BASEPRI, r3
 8009424:	f3bf 8f6f 	isb	sy
 8009428:	f3bf 8f4f 	dsb	sy
 800942c:	b662      	cpsie	i
 800942e:	60fb      	str	r3, [r7, #12]
 8009430:	e7fe      	b.n	8009430 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009432:	693b      	ldr	r3, [r7, #16]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d00b      	beq.n	8009452 <vPortFree+0x66>
 800943a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800943e:	b672      	cpsid	i
 8009440:	f383 8811 	msr	BASEPRI, r3
 8009444:	f3bf 8f6f 	isb	sy
 8009448:	f3bf 8f4f 	dsb	sy
 800944c:	b662      	cpsie	i
 800944e:	60bb      	str	r3, [r7, #8]
 8009450:	e7fe      	b.n	8009450 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009452:	693b      	ldr	r3, [r7, #16]
 8009454:	685a      	ldr	r2, [r3, #4]
 8009456:	4b11      	ldr	r3, [pc, #68]	; (800949c <vPortFree+0xb0>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	4013      	ands	r3, r2
 800945c:	2b00      	cmp	r3, #0
 800945e:	d019      	beq.n	8009494 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009460:	693b      	ldr	r3, [r7, #16]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d115      	bne.n	8009494 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	685a      	ldr	r2, [r3, #4]
 800946c:	4b0b      	ldr	r3, [pc, #44]	; (800949c <vPortFree+0xb0>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	43db      	mvns	r3, r3
 8009472:	401a      	ands	r2, r3
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009478:	f7fe fcc6 	bl	8007e08 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800947c:	693b      	ldr	r3, [r7, #16]
 800947e:	685a      	ldr	r2, [r3, #4]
 8009480:	4b07      	ldr	r3, [pc, #28]	; (80094a0 <vPortFree+0xb4>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	4413      	add	r3, r2
 8009486:	4a06      	ldr	r2, [pc, #24]	; (80094a0 <vPortFree+0xb4>)
 8009488:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800948a:	6938      	ldr	r0, [r7, #16]
 800948c:	f000 f86c 	bl	8009568 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009490:	f7fe fcc8 	bl	8007e24 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009494:	bf00      	nop
 8009496:	3718      	adds	r7, #24
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}
 800949c:	2000492c 	.word	0x2000492c
 80094a0:	20004924 	.word	0x20004924

080094a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80094a4:	b480      	push	{r7}
 80094a6:	b085      	sub	sp, #20
 80094a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80094aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80094ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80094b0:	4b27      	ldr	r3, [pc, #156]	; (8009550 <prvHeapInit+0xac>)
 80094b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	f003 0307 	and.w	r3, r3, #7
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d00c      	beq.n	80094d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	3307      	adds	r3, #7
 80094c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	f023 0307 	bic.w	r3, r3, #7
 80094ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80094cc:	68ba      	ldr	r2, [r7, #8]
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	1ad3      	subs	r3, r2, r3
 80094d2:	4a1f      	ldr	r2, [pc, #124]	; (8009550 <prvHeapInit+0xac>)
 80094d4:	4413      	add	r3, r2
 80094d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80094dc:	4a1d      	ldr	r2, [pc, #116]	; (8009554 <prvHeapInit+0xb0>)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80094e2:	4b1c      	ldr	r3, [pc, #112]	; (8009554 <prvHeapInit+0xb0>)
 80094e4:	2200      	movs	r2, #0
 80094e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	68ba      	ldr	r2, [r7, #8]
 80094ec:	4413      	add	r3, r2
 80094ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80094f0:	2208      	movs	r2, #8
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	1a9b      	subs	r3, r3, r2
 80094f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	f023 0307 	bic.w	r3, r3, #7
 80094fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	4a15      	ldr	r2, [pc, #84]	; (8009558 <prvHeapInit+0xb4>)
 8009504:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009506:	4b14      	ldr	r3, [pc, #80]	; (8009558 <prvHeapInit+0xb4>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	2200      	movs	r2, #0
 800950c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800950e:	4b12      	ldr	r3, [pc, #72]	; (8009558 <prvHeapInit+0xb4>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	2200      	movs	r2, #0
 8009514:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	68fa      	ldr	r2, [r7, #12]
 800951e:	1ad2      	subs	r2, r2, r3
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009524:	4b0c      	ldr	r3, [pc, #48]	; (8009558 <prvHeapInit+0xb4>)
 8009526:	681a      	ldr	r2, [r3, #0]
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	685b      	ldr	r3, [r3, #4]
 8009530:	4a0a      	ldr	r2, [pc, #40]	; (800955c <prvHeapInit+0xb8>)
 8009532:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	685b      	ldr	r3, [r3, #4]
 8009538:	4a09      	ldr	r2, [pc, #36]	; (8009560 <prvHeapInit+0xbc>)
 800953a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800953c:	4b09      	ldr	r3, [pc, #36]	; (8009564 <prvHeapInit+0xc0>)
 800953e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009542:	601a      	str	r2, [r3, #0]
}
 8009544:	bf00      	nop
 8009546:	3714      	adds	r7, #20
 8009548:	46bd      	mov	sp, r7
 800954a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954e:	4770      	bx	lr
 8009550:	20000d18 	.word	0x20000d18
 8009554:	20004918 	.word	0x20004918
 8009558:	20004920 	.word	0x20004920
 800955c:	20004928 	.word	0x20004928
 8009560:	20004924 	.word	0x20004924
 8009564:	2000492c 	.word	0x2000492c

08009568 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009568:	b480      	push	{r7}
 800956a:	b085      	sub	sp, #20
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009570:	4b28      	ldr	r3, [pc, #160]	; (8009614 <prvInsertBlockIntoFreeList+0xac>)
 8009572:	60fb      	str	r3, [r7, #12]
 8009574:	e002      	b.n	800957c <prvInsertBlockIntoFreeList+0x14>
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	60fb      	str	r3, [r7, #12]
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	687a      	ldr	r2, [r7, #4]
 8009582:	429a      	cmp	r2, r3
 8009584:	d8f7      	bhi.n	8009576 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	685b      	ldr	r3, [r3, #4]
 800958e:	68ba      	ldr	r2, [r7, #8]
 8009590:	4413      	add	r3, r2
 8009592:	687a      	ldr	r2, [r7, #4]
 8009594:	429a      	cmp	r2, r3
 8009596:	d108      	bne.n	80095aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	685a      	ldr	r2, [r3, #4]
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	685b      	ldr	r3, [r3, #4]
 80095a0:	441a      	add	r2, r3
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	685b      	ldr	r3, [r3, #4]
 80095b2:	68ba      	ldr	r2, [r7, #8]
 80095b4:	441a      	add	r2, r3
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	429a      	cmp	r2, r3
 80095bc:	d118      	bne.n	80095f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681a      	ldr	r2, [r3, #0]
 80095c2:	4b15      	ldr	r3, [pc, #84]	; (8009618 <prvInsertBlockIntoFreeList+0xb0>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	429a      	cmp	r2, r3
 80095c8:	d00d      	beq.n	80095e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	685a      	ldr	r2, [r3, #4]
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	685b      	ldr	r3, [r3, #4]
 80095d4:	441a      	add	r2, r3
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	681a      	ldr	r2, [r3, #0]
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	601a      	str	r2, [r3, #0]
 80095e4:	e008      	b.n	80095f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80095e6:	4b0c      	ldr	r3, [pc, #48]	; (8009618 <prvInsertBlockIntoFreeList+0xb0>)
 80095e8:	681a      	ldr	r2, [r3, #0]
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	601a      	str	r2, [r3, #0]
 80095ee:	e003      	b.n	80095f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681a      	ldr	r2, [r3, #0]
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80095f8:	68fa      	ldr	r2, [r7, #12]
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	429a      	cmp	r2, r3
 80095fe:	d002      	beq.n	8009606 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	687a      	ldr	r2, [r7, #4]
 8009604:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009606:	bf00      	nop
 8009608:	3714      	adds	r7, #20
 800960a:	46bd      	mov	sp, r7
 800960c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009610:	4770      	bx	lr
 8009612:	bf00      	nop
 8009614:	20004918 	.word	0x20004918
 8009618:	20004920 	.word	0x20004920

0800961c <__libc_init_array>:
 800961c:	b570      	push	{r4, r5, r6, lr}
 800961e:	4e0d      	ldr	r6, [pc, #52]	; (8009654 <__libc_init_array+0x38>)
 8009620:	4c0d      	ldr	r4, [pc, #52]	; (8009658 <__libc_init_array+0x3c>)
 8009622:	1ba4      	subs	r4, r4, r6
 8009624:	10a4      	asrs	r4, r4, #2
 8009626:	2500      	movs	r5, #0
 8009628:	42a5      	cmp	r5, r4
 800962a:	d109      	bne.n	8009640 <__libc_init_array+0x24>
 800962c:	4e0b      	ldr	r6, [pc, #44]	; (800965c <__libc_init_array+0x40>)
 800962e:	4c0c      	ldr	r4, [pc, #48]	; (8009660 <__libc_init_array+0x44>)
 8009630:	f000 f82c 	bl	800968c <_init>
 8009634:	1ba4      	subs	r4, r4, r6
 8009636:	10a4      	asrs	r4, r4, #2
 8009638:	2500      	movs	r5, #0
 800963a:	42a5      	cmp	r5, r4
 800963c:	d105      	bne.n	800964a <__libc_init_array+0x2e>
 800963e:	bd70      	pop	{r4, r5, r6, pc}
 8009640:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009644:	4798      	blx	r3
 8009646:	3501      	adds	r5, #1
 8009648:	e7ee      	b.n	8009628 <__libc_init_array+0xc>
 800964a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800964e:	4798      	blx	r3
 8009650:	3501      	adds	r5, #1
 8009652:	e7f2      	b.n	800963a <__libc_init_array+0x1e>
 8009654:	08009770 	.word	0x08009770
 8009658:	08009770 	.word	0x08009770
 800965c:	08009770 	.word	0x08009770
 8009660:	08009774 	.word	0x08009774

08009664 <memcpy>:
 8009664:	b510      	push	{r4, lr}
 8009666:	1e43      	subs	r3, r0, #1
 8009668:	440a      	add	r2, r1
 800966a:	4291      	cmp	r1, r2
 800966c:	d100      	bne.n	8009670 <memcpy+0xc>
 800966e:	bd10      	pop	{r4, pc}
 8009670:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009674:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009678:	e7f7      	b.n	800966a <memcpy+0x6>

0800967a <memset>:
 800967a:	4402      	add	r2, r0
 800967c:	4603      	mov	r3, r0
 800967e:	4293      	cmp	r3, r2
 8009680:	d100      	bne.n	8009684 <memset+0xa>
 8009682:	4770      	bx	lr
 8009684:	f803 1b01 	strb.w	r1, [r3], #1
 8009688:	e7f9      	b.n	800967e <memset+0x4>
	...

0800968c <_init>:
 800968c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800968e:	bf00      	nop
 8009690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009692:	bc08      	pop	{r3}
 8009694:	469e      	mov	lr, r3
 8009696:	4770      	bx	lr

08009698 <_fini>:
 8009698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800969a:	bf00      	nop
 800969c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800969e:	bc08      	pop	{r3}
 80096a0:	469e      	mov	lr, r3
 80096a2:	4770      	bx	lr
