
main_board_rev1_sd_card.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011c8c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000650  08011e5c  08011e5c  00021e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080124ac  080124ac  000301f8  2**0
                  CONTENTS
  4 .ARM          00000008  080124ac  080124ac  000224ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080124b4  080124b4  000301f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080124b4  080124b4  000224b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080124b8  080124b8  000224b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  080124bc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009ed4  200001f8  080126b4  000301f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000a0cc  080126b4  0003a0cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003037a  00000000  00000000  00030228  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006068  00000000  00000000  000605a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000020a0  00000000  00000000  00066610  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001dc8  00000000  00000000  000686b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000a0a0  00000000  00000000  0006a478  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00020b06  00000000  00000000  00074518  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fbf58  00000000  00000000  0009501e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00190f76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008a0c  00000000  00000000  00190ff4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f8 	.word	0x200001f8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08011e44 	.word	0x08011e44

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001fc 	.word	0x200001fc
 800020c:	08011e44 	.word	0x08011e44

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b590      	push	{r4, r7, lr}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c6:	f000 fe9e 	bl	8001306 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ca:	f000 f86d 	bl	80006a8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  (DBGMCU)->APB1FZ = 0x7E01BFF;
 80005ce:	4b24      	ldr	r3, [pc, #144]	; (8000660 <main+0xa0>)
 80005d0:	4a24      	ldr	r2, [pc, #144]	; (8000664 <main+0xa4>)
 80005d2:	609a      	str	r2, [r3, #8]
  (DBGMCU)->APB2FZ = 0x70003;
 80005d4:	4b22      	ldr	r3, [pc, #136]	; (8000660 <main+0xa0>)
 80005d6:	4a24      	ldr	r2, [pc, #144]	; (8000668 <main+0xa8>)
 80005d8:	60da      	str	r2, [r3, #12]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80005da:	f010 fa47 	bl	8010a6c <MX_USB_DEVICE_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005de:	f000 f937 	bl	8000850 <MX_GPIO_Init>
  MX_DMA_Init();
 80005e2:	f000 f90f 	bl	8000804 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 80005e6:	f000 f8ed 	bl	80007c4 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80005ea:	f007 fd1f 	bl	800802c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005ee:	f00c fb0f 	bl	800cc10 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  /* Print Mutex */

#ifdef DEBUG
  const osMutexAttr_t print_mutex_attr = {
 80005f2:	4b1e      	ldr	r3, [pc, #120]	; (800066c <main+0xac>)
 80005f4:	463c      	mov	r4, r7
 80005f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    "print_mutex",                            // human readable mutex name
    osMutexPrioInherit,    					  // attr_bits
    NULL,                                     // memory for control block
    0U                                        // size for control block
  };
  print_mutex = osMutexNew(&print_mutex_attr);
 80005fc:	463b      	mov	r3, r7
 80005fe:	4618      	mov	r0, r3
 8000600:	f00c fc8e 	bl	800cf20 <osMutexNew>
 8000604:	4602      	mov	r2, r0
 8000606:	4b1a      	ldr	r3, [pc, #104]	; (8000670 <main+0xb0>)
 8000608:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  log_queue = osMessageQueueNew(LOG_QUEUE_SIZE, sizeof(log_entry_t), NULL);
 800060a:	2200      	movs	r2, #0
 800060c:	2128      	movs	r1, #40	; 0x28
 800060e:	2080      	movs	r0, #128	; 0x80
 8000610:	f00c ff60 	bl	800d4d4 <osMessageQueueNew>
 8000614:	4602      	mov	r2, r0
 8000616:	4b17      	ldr	r3, [pc, #92]	; (8000674 <main+0xb4>)
 8000618:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800061a:	4a17      	ldr	r2, [pc, #92]	; (8000678 <main+0xb8>)
 800061c:	2100      	movs	r1, #0
 800061e:	4817      	ldr	r0, [pc, #92]	; (800067c <main+0xbc>)
 8000620:	f00c fbaa 	bl	800cd78 <osThreadNew>
 8000624:	4602      	mov	r2, r0
 8000626:	4b16      	ldr	r3, [pc, #88]	; (8000680 <main+0xc0>)
 8000628:	601a      	str	r2, [r3, #0]

  /* creation of task_template */
  task_templateHandle = osThreadNew(vTaskTemplate, NULL, &task_template_attributes);
 800062a:	4a16      	ldr	r2, [pc, #88]	; (8000684 <main+0xc4>)
 800062c:	2100      	movs	r1, #0
 800062e:	4816      	ldr	r0, [pc, #88]	; (8000688 <main+0xc8>)
 8000630:	f00c fba2 	bl	800cd78 <osThreadNew>
 8000634:	4602      	mov	r2, r0
 8000636:	4b15      	ldr	r3, [pc, #84]	; (800068c <main+0xcc>)
 8000638:	601a      	str	r2, [r3, #0]

  /* creation of task_sd_card */
  task_sd_cardHandle = osThreadNew(vTaskSdCard, NULL, &task_sd_card_attributes);
 800063a:	4a15      	ldr	r2, [pc, #84]	; (8000690 <main+0xd0>)
 800063c:	2100      	movs	r1, #0
 800063e:	4815      	ldr	r0, [pc, #84]	; (8000694 <main+0xd4>)
 8000640:	f00c fb9a 	bl	800cd78 <osThreadNew>
 8000644:	4602      	mov	r2, r0
 8000646:	4b14      	ldr	r3, [pc, #80]	; (8000698 <main+0xd8>)
 8000648:	601a      	str	r2, [r3, #0]

  /* creation of task_sens_read */
  task_sens_readHandle = osThreadNew(vTaskSensRead, NULL, &task_sens_read_attributes);
 800064a:	4a14      	ldr	r2, [pc, #80]	; (800069c <main+0xdc>)
 800064c:	2100      	movs	r1, #0
 800064e:	4814      	ldr	r0, [pc, #80]	; (80006a0 <main+0xe0>)
 8000650:	f00c fb92 	bl	800cd78 <osThreadNew>
 8000654:	4602      	mov	r2, r0
 8000656:	4b13      	ldr	r3, [pc, #76]	; (80006a4 <main+0xe4>)
 8000658:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800065a:	f00c fb2f 	bl	800ccbc <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800065e:	e7fe      	b.n	800065e <main+0x9e>
 8000660:	e0042000 	.word	0xe0042000
 8000664:	07e01bff 	.word	0x07e01bff
 8000668:	00070003 	.word	0x00070003
 800066c:	08011ea4 	.word	0x08011ea4
 8000670:	20005d18 	.word	0x20005d18
 8000674:	20005dd8 	.word	0x20005dd8
 8000678:	08012334 	.word	0x08012334
 800067c:	080008c9 	.word	0x080008c9
 8000680:	20004b64 	.word	0x20004b64
 8000684:	08012358 	.word	0x08012358
 8000688:	08001289 	.word	0x08001289
 800068c:	20006e38 	.word	0x20006e38
 8000690:	0801237c 	.word	0x0801237c
 8000694:	08000e29 	.word	0x08000e29
 8000698:	20004b68 	.word	0x20004b68
 800069c:	080123a0 	.word	0x080123a0
 80006a0:	080011d5 	.word	0x080011d5
 80006a4:	20004bf0 	.word	0x20004bf0

080006a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b0b4      	sub	sp, #208	; 0xd0
 80006ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ae:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80006b2:	2230      	movs	r2, #48	; 0x30
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f010 ff85 	bl	80115c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006bc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
 80006ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006cc:	f107 0308 	add.w	r3, r7, #8
 80006d0:	2284      	movs	r2, #132	; 0x84
 80006d2:	2100      	movs	r1, #0
 80006d4:	4618      	mov	r0, r3
 80006d6:	f010 ff76 	bl	80115c6 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006da:	4b38      	ldr	r3, [pc, #224]	; (80007bc <SystemClock_Config+0x114>)
 80006dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006de:	4a37      	ldr	r2, [pc, #220]	; (80007bc <SystemClock_Config+0x114>)
 80006e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e4:	6413      	str	r3, [r2, #64]	; 0x40
 80006e6:	4b35      	ldr	r3, [pc, #212]	; (80007bc <SystemClock_Config+0x114>)
 80006e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006f2:	4b33      	ldr	r3, [pc, #204]	; (80007c0 <SystemClock_Config+0x118>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006fa:	4a31      	ldr	r2, [pc, #196]	; (80007c0 <SystemClock_Config+0x118>)
 80006fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000700:	6013      	str	r3, [r2, #0]
 8000702:	4b2f      	ldr	r3, [pc, #188]	; (80007c0 <SystemClock_Config+0x118>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800070a:	603b      	str	r3, [r7, #0]
 800070c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800070e:	2301      	movs	r3, #1
 8000710:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000714:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000718:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071c:	2302      	movs	r3, #2
 800071e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000722:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000726:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 800072a:	2304      	movs	r3, #4
 800072c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000730:	23a8      	movs	r3, #168	; 0xa8
 8000732:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000736:	2302      	movs	r3, #2
 8000738:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800073c:	2307      	movs	r3, #7
 800073e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000742:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000746:	4618      	mov	r0, r3
 8000748:	f002 fe1a 	bl	8003380 <HAL_RCC_OscConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000752:	f000 f8d3 	bl	80008fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000756:	230f      	movs	r3, #15
 8000758:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075c:	2302      	movs	r3, #2
 800075e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000762:	2300      	movs	r3, #0
 8000764:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000768:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800076c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000770:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000774:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000778:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800077c:	2105      	movs	r1, #5
 800077e:	4618      	mov	r0, r3
 8000780:	f003 f8a2 	bl	80038c8 <HAL_RCC_ClockConfig>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800078a:	f000 f8b7 	bl	80008fc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 800078e:	f44f 0320 	mov.w	r3, #10485760	; 0xa00000
 8000792:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000794:	2300      	movs	r3, #0
 8000796:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800079a:	2300      	movs	r3, #0
 800079c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007a0:	f107 0308 	add.w	r3, r7, #8
 80007a4:	4618      	mov	r0, r3
 80007a6:	f003 faa5 	bl	8003cf4 <HAL_RCCEx_PeriphCLKConfig>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 80007b0:	f000 f8a4 	bl	80008fc <Error_Handler>
  }
}
 80007b4:	bf00      	nop
 80007b6:	37d0      	adds	r7, #208	; 0xd0
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40007000 	.word	0x40007000

080007c4 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80007c8:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <MX_SDMMC1_SD_Init+0x38>)
 80007ca:	4a0d      	ldr	r2, [pc, #52]	; (8000800 <MX_SDMMC1_SD_Init+0x3c>)
 80007cc:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <MX_SDMMC1_SD_Init+0x38>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80007d4:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_SDMMC1_SD_Init+0x38>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80007da:	4b08      	ldr	r3, [pc, #32]	; (80007fc <MX_SDMMC1_SD_Init+0x38>)
 80007dc:	2200      	movs	r2, #0
 80007de:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_SDMMC1_SD_Init+0x38>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80007e6:	4b05      	ldr	r3, [pc, #20]	; (80007fc <MX_SDMMC1_SD_Init+0x38>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 80007ec:	4b03      	ldr	r3, [pc, #12]	; (80007fc <MX_SDMMC1_SD_Init+0x38>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr
 80007fc:	20004b6c 	.word	0x20004b6c
 8000800:	40012c00 	.word	0x40012c00

08000804 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800080a:	4b10      	ldr	r3, [pc, #64]	; (800084c <MX_DMA_Init+0x48>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a0f      	ldr	r2, [pc, #60]	; (800084c <MX_DMA_Init+0x48>)
 8000810:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b0d      	ldr	r3, [pc, #52]	; (800084c <MX_DMA_Init+0x48>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8000822:	2200      	movs	r2, #0
 8000824:	2105      	movs	r1, #5
 8000826:	203b      	movs	r0, #59	; 0x3b
 8000828:	f000 fe74 	bl	8001514 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800082c:	203b      	movs	r0, #59	; 0x3b
 800082e:	f000 fe8d 	bl	800154c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8000832:	2200      	movs	r2, #0
 8000834:	2105      	movs	r1, #5
 8000836:	2045      	movs	r0, #69	; 0x45
 8000838:	f000 fe6c 	bl	8001514 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800083c:	2045      	movs	r0, #69	; 0x45
 800083e:	f000 fe85 	bl	800154c <HAL_NVIC_EnableIRQ>

}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40023800 	.word	0x40023800

08000850 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000850:	b480      	push	{r7}
 8000852:	b085      	sub	sp, #20
 8000854:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000856:	4b1b      	ldr	r3, [pc, #108]	; (80008c4 <MX_GPIO_Init+0x74>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a1a      	ldr	r2, [pc, #104]	; (80008c4 <MX_GPIO_Init+0x74>)
 800085c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b18      	ldr	r3, [pc, #96]	; (80008c4 <MX_GPIO_Init+0x74>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800086e:	4b15      	ldr	r3, [pc, #84]	; (80008c4 <MX_GPIO_Init+0x74>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a14      	ldr	r2, [pc, #80]	; (80008c4 <MX_GPIO_Init+0x74>)
 8000874:	f043 0304 	orr.w	r3, r3, #4
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <MX_GPIO_Init+0x74>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0304 	and.w	r3, r3, #4
 8000882:	60bb      	str	r3, [r7, #8]
 8000884:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000886:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <MX_GPIO_Init+0x74>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a0e      	ldr	r2, [pc, #56]	; (80008c4 <MX_GPIO_Init+0x74>)
 800088c:	f043 0301 	orr.w	r3, r3, #1
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <MX_GPIO_Init+0x74>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800089e:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <MX_GPIO_Init+0x74>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a08      	ldr	r2, [pc, #32]	; (80008c4 <MX_GPIO_Init+0x74>)
 80008a4:	f043 0308 	orr.w	r3, r3, #8
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <MX_GPIO_Init+0x74>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0308 	and.w	r3, r3, #8
 80008b2:	603b      	str	r3, [r7, #0]
 80008b4:	683b      	ldr	r3, [r7, #0]

}
 80008b6:	bf00      	nop
 80008b8:	3714      	adds	r7, #20
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	40023800 	.word	0x40023800

080008c8 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  //MX_USB_DEVICE_Init();
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008d0:	2001      	movs	r0, #1
 80008d2:	f00c faf7 	bl	800cec4 <osDelay>
 80008d6:	e7fb      	b.n	80008d0 <StartDefaultTask+0x8>

080008d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a04      	ldr	r2, [pc, #16]	; (80008f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d101      	bne.n	80008ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008ea:	f000 fd19 	bl	8001320 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008ee:	bf00      	nop
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40000800 	.word	0x40000800

080008fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
	...

0800090c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000912:	4b11      	ldr	r3, [pc, #68]	; (8000958 <HAL_MspInit+0x4c>)
 8000914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000916:	4a10      	ldr	r2, [pc, #64]	; (8000958 <HAL_MspInit+0x4c>)
 8000918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800091c:	6413      	str	r3, [r2, #64]	; 0x40
 800091e:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <HAL_MspInit+0x4c>)
 8000920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092a:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <HAL_MspInit+0x4c>)
 800092c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092e:	4a0a      	ldr	r2, [pc, #40]	; (8000958 <HAL_MspInit+0x4c>)
 8000930:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000934:	6453      	str	r3, [r2, #68]	; 0x44
 8000936:	4b08      	ldr	r3, [pc, #32]	; (8000958 <HAL_MspInit+0x4c>)
 8000938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800093e:	603b      	str	r3, [r7, #0]
 8000940:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000942:	2200      	movs	r2, #0
 8000944:	210f      	movs	r1, #15
 8000946:	f06f 0001 	mvn.w	r0, #1
 800094a:	f000 fde3 	bl	8001514 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800094e:	bf00      	nop
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40023800 	.word	0x40023800

0800095c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08a      	sub	sp, #40	; 0x28
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000964:	f107 0314 	add.w	r3, r7, #20
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a6d      	ldr	r2, [pc, #436]	; (8000b30 <HAL_SD_MspInit+0x1d4>)
 800097a:	4293      	cmp	r3, r2
 800097c:	f040 80d4 	bne.w	8000b28 <HAL_SD_MspInit+0x1cc>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000980:	4b6c      	ldr	r3, [pc, #432]	; (8000b34 <HAL_SD_MspInit+0x1d8>)
 8000982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000984:	4a6b      	ldr	r2, [pc, #428]	; (8000b34 <HAL_SD_MspInit+0x1d8>)
 8000986:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800098a:	6453      	str	r3, [r2, #68]	; 0x44
 800098c:	4b69      	ldr	r3, [pc, #420]	; (8000b34 <HAL_SD_MspInit+0x1d8>)
 800098e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000990:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000994:	613b      	str	r3, [r7, #16]
 8000996:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000998:	4b66      	ldr	r3, [pc, #408]	; (8000b34 <HAL_SD_MspInit+0x1d8>)
 800099a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099c:	4a65      	ldr	r2, [pc, #404]	; (8000b34 <HAL_SD_MspInit+0x1d8>)
 800099e:	f043 0304 	orr.w	r3, r3, #4
 80009a2:	6313      	str	r3, [r2, #48]	; 0x30
 80009a4:	4b63      	ldr	r3, [pc, #396]	; (8000b34 <HAL_SD_MspInit+0x1d8>)
 80009a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a8:	f003 0304 	and.w	r3, r3, #4
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009b0:	4b60      	ldr	r3, [pc, #384]	; (8000b34 <HAL_SD_MspInit+0x1d8>)
 80009b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b4:	4a5f      	ldr	r2, [pc, #380]	; (8000b34 <HAL_SD_MspInit+0x1d8>)
 80009b6:	f043 0308 	orr.w	r3, r3, #8
 80009ba:	6313      	str	r3, [r2, #48]	; 0x30
 80009bc:	4b5d      	ldr	r3, [pc, #372]	; (8000b34 <HAL_SD_MspInit+0x1d8>)
 80009be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c0:	f003 0308 	and.w	r3, r3, #8
 80009c4:	60bb      	str	r3, [r7, #8]
 80009c6:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80009c8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80009cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ce:	2302      	movs	r3, #2
 80009d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009d2:	2301      	movs	r3, #1
 80009d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d6:	2303      	movs	r3, #3
 80009d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80009da:	230c      	movs	r3, #12
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009de:	f107 0314 	add.w	r3, r7, #20
 80009e2:	4619      	mov	r1, r3
 80009e4:	4854      	ldr	r0, [pc, #336]	; (8000b38 <HAL_SD_MspInit+0x1dc>)
 80009e6:	f001 f963 	bl	8001cb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80009ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f0:	2302      	movs	r3, #2
 80009f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f8:	2303      	movs	r3, #3
 80009fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80009fc:	230c      	movs	r3, #12
 80009fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a00:	f107 0314 	add.w	r3, r7, #20
 8000a04:	4619      	mov	r1, r3
 8000a06:	484c      	ldr	r0, [pc, #304]	; (8000b38 <HAL_SD_MspInit+0x1dc>)
 8000a08:	f001 f952 	bl	8001cb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a0c:	2304      	movs	r3, #4
 8000a0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a10:	2302      	movs	r3, #2
 8000a12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a14:	2301      	movs	r3, #1
 8000a16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000a1c:	230c      	movs	r3, #12
 8000a1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	4619      	mov	r1, r3
 8000a26:	4845      	ldr	r0, [pc, #276]	; (8000b3c <HAL_SD_MspInit+0x1e0>)
 8000a28:	f001 f942 	bl	8001cb0 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8000a2c:	4b44      	ldr	r3, [pc, #272]	; (8000b40 <HAL_SD_MspInit+0x1e4>)
 8000a2e:	4a45      	ldr	r2, [pc, #276]	; (8000b44 <HAL_SD_MspInit+0x1e8>)
 8000a30:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8000a32:	4b43      	ldr	r3, [pc, #268]	; (8000b40 <HAL_SD_MspInit+0x1e4>)
 8000a34:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a38:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a3a:	4b41      	ldr	r3, [pc, #260]	; (8000b40 <HAL_SD_MspInit+0x1e4>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a40:	4b3f      	ldr	r3, [pc, #252]	; (8000b40 <HAL_SD_MspInit+0x1e4>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a46:	4b3e      	ldr	r3, [pc, #248]	; (8000b40 <HAL_SD_MspInit+0x1e4>)
 8000a48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a4c:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a4e:	4b3c      	ldr	r3, [pc, #240]	; (8000b40 <HAL_SD_MspInit+0x1e4>)
 8000a50:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a54:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a56:	4b3a      	ldr	r3, [pc, #232]	; (8000b40 <HAL_SD_MspInit+0x1e4>)
 8000a58:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a5c:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8000a5e:	4b38      	ldr	r3, [pc, #224]	; (8000b40 <HAL_SD_MspInit+0x1e4>)
 8000a60:	2220      	movs	r2, #32
 8000a62:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a64:	4b36      	ldr	r3, [pc, #216]	; (8000b40 <HAL_SD_MspInit+0x1e4>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000a6a:	4b35      	ldr	r3, [pc, #212]	; (8000b40 <HAL_SD_MspInit+0x1e4>)
 8000a6c:	2204      	movs	r2, #4
 8000a6e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000a70:	4b33      	ldr	r3, [pc, #204]	; (8000b40 <HAL_SD_MspInit+0x1e4>)
 8000a72:	2203      	movs	r2, #3
 8000a74:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000a76:	4b32      	ldr	r3, [pc, #200]	; (8000b40 <HAL_SD_MspInit+0x1e4>)
 8000a78:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000a7c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000a7e:	4b30      	ldr	r3, [pc, #192]	; (8000b40 <HAL_SD_MspInit+0x1e4>)
 8000a80:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000a84:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8000a86:	482e      	ldr	r0, [pc, #184]	; (8000b40 <HAL_SD_MspInit+0x1e4>)
 8000a88:	f000 fd6e 	bl	8001568 <HAL_DMA_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <HAL_SD_MspInit+0x13a>
    {
      Error_Handler();
 8000a92:	f7ff ff33 	bl	80008fc <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4a29      	ldr	r2, [pc, #164]	; (8000b40 <HAL_SD_MspInit+0x1e4>)
 8000a9a:	641a      	str	r2, [r3, #64]	; 0x40
 8000a9c:	4a28      	ldr	r2, [pc, #160]	; (8000b40 <HAL_SD_MspInit+0x1e4>)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8000aa2:	4b29      	ldr	r3, [pc, #164]	; (8000b48 <HAL_SD_MspInit+0x1ec>)
 8000aa4:	4a29      	ldr	r2, [pc, #164]	; (8000b4c <HAL_SD_MspInit+0x1f0>)
 8000aa6:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8000aa8:	4b27      	ldr	r3, [pc, #156]	; (8000b48 <HAL_SD_MspInit+0x1ec>)
 8000aaa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000aae:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ab0:	4b25      	ldr	r3, [pc, #148]	; (8000b48 <HAL_SD_MspInit+0x1ec>)
 8000ab2:	2240      	movs	r2, #64	; 0x40
 8000ab4:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ab6:	4b24      	ldr	r3, [pc, #144]	; (8000b48 <HAL_SD_MspInit+0x1ec>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000abc:	4b22      	ldr	r3, [pc, #136]	; (8000b48 <HAL_SD_MspInit+0x1ec>)
 8000abe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ac2:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ac4:	4b20      	ldr	r3, [pc, #128]	; (8000b48 <HAL_SD_MspInit+0x1ec>)
 8000ac6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000aca:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000acc:	4b1e      	ldr	r3, [pc, #120]	; (8000b48 <HAL_SD_MspInit+0x1ec>)
 8000ace:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ad2:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8000ad4:	4b1c      	ldr	r3, [pc, #112]	; (8000b48 <HAL_SD_MspInit+0x1ec>)
 8000ad6:	2220      	movs	r2, #32
 8000ad8:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ada:	4b1b      	ldr	r3, [pc, #108]	; (8000b48 <HAL_SD_MspInit+0x1ec>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000ae0:	4b19      	ldr	r3, [pc, #100]	; (8000b48 <HAL_SD_MspInit+0x1ec>)
 8000ae2:	2204      	movs	r2, #4
 8000ae4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000ae6:	4b18      	ldr	r3, [pc, #96]	; (8000b48 <HAL_SD_MspInit+0x1ec>)
 8000ae8:	2203      	movs	r2, #3
 8000aea:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000aec:	4b16      	ldr	r3, [pc, #88]	; (8000b48 <HAL_SD_MspInit+0x1ec>)
 8000aee:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000af2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000af4:	4b14      	ldr	r3, [pc, #80]	; (8000b48 <HAL_SD_MspInit+0x1ec>)
 8000af6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000afa:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8000afc:	4812      	ldr	r0, [pc, #72]	; (8000b48 <HAL_SD_MspInit+0x1ec>)
 8000afe:	f000 fd33 	bl	8001568 <HAL_DMA_Init>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <HAL_SD_MspInit+0x1b0>
    {
      Error_Handler();
 8000b08:	f7ff fef8 	bl	80008fc <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	4a0e      	ldr	r2, [pc, #56]	; (8000b48 <HAL_SD_MspInit+0x1ec>)
 8000b10:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b12:	4a0d      	ldr	r2, [pc, #52]	; (8000b48 <HAL_SD_MspInit+0x1ec>)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2105      	movs	r1, #5
 8000b1c:	2031      	movs	r0, #49	; 0x31
 8000b1e:	f000 fcf9 	bl	8001514 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8000b22:	2031      	movs	r0, #49	; 0x31
 8000b24:	f000 fd12 	bl	800154c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8000b28:	bf00      	nop
 8000b2a:	3728      	adds	r7, #40	; 0x28
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40012c00 	.word	0x40012c00
 8000b34:	40023800 	.word	0x40023800
 8000b38:	40020800 	.word	0x40020800
 8000b3c:	40020c00 	.word	0x40020c00
 8000b40:	20005d1c 	.word	0x20005d1c
 8000b44:	40026458 	.word	0x40026458
 8000b48:	20006e3c 	.word	0x20006e3c
 8000b4c:	400264a0 	.word	0x400264a0

08000b50 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08c      	sub	sp, #48	; 0x30
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 8000b60:	2200      	movs	r2, #0
 8000b62:	6879      	ldr	r1, [r7, #4]
 8000b64:	201e      	movs	r0, #30
 8000b66:	f000 fcd5 	bl	8001514 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn); 
 8000b6a:	201e      	movs	r0, #30
 8000b6c:	f000 fcee 	bl	800154c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000b70:	4b1f      	ldr	r3, [pc, #124]	; (8000bf0 <HAL_InitTick+0xa0>)
 8000b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b74:	4a1e      	ldr	r2, [pc, #120]	; (8000bf0 <HAL_InitTick+0xa0>)
 8000b76:	f043 0304 	orr.w	r3, r3, #4
 8000b7a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b7c:	4b1c      	ldr	r3, [pc, #112]	; (8000bf0 <HAL_InitTick+0xa0>)
 8000b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b80:	f003 0304 	and.w	r3, r3, #4
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b88:	f107 0210 	add.w	r2, r7, #16
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	4611      	mov	r1, r2
 8000b92:	4618      	mov	r0, r3
 8000b94:	f003 f87c 	bl	8003c90 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000b98:	f003 f866 	bl	8003c68 <HAL_RCC_GetPCLK1Freq>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	005b      	lsls	r3, r3, #1
 8000ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ba4:	4a13      	ldr	r2, [pc, #76]	; (8000bf4 <HAL_InitTick+0xa4>)
 8000ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8000baa:	0c9b      	lsrs	r3, r3, #18
 8000bac:	3b01      	subs	r3, #1
 8000bae:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000bb0:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <HAL_InitTick+0xa8>)
 8000bb2:	4a12      	ldr	r2, [pc, #72]	; (8000bfc <HAL_InitTick+0xac>)
 8000bb4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 8000bb6:	4b10      	ldr	r3, [pc, #64]	; (8000bf8 <HAL_InitTick+0xa8>)
 8000bb8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bbc:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000bbe:	4a0e      	ldr	r2, [pc, #56]	; (8000bf8 <HAL_InitTick+0xa8>)
 8000bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bc2:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000bc4:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <HAL_InitTick+0xa8>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bca:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <HAL_InitTick+0xa8>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000bd0:	4809      	ldr	r0, [pc, #36]	; (8000bf8 <HAL_InitTick+0xa8>)
 8000bd2:	f004 ff3b 	bl	8005a4c <HAL_TIM_Base_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d104      	bne.n	8000be6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000bdc:	4806      	ldr	r0, [pc, #24]	; (8000bf8 <HAL_InitTick+0xa8>)
 8000bde:	f004 ff6b 	bl	8005ab8 <HAL_TIM_Base_Start_IT>
 8000be2:	4603      	mov	r3, r0
 8000be4:	e000      	b.n	8000be8 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3730      	adds	r7, #48	; 0x30
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	431bde83 	.word	0x431bde83
 8000bf8:	20007e9c 	.word	0x20007e9c
 8000bfc:	40000800 	.word	0x40000800

08000c00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr

08000c0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c12:	e7fe      	b.n	8000c12 <HardFault_Handler+0x4>

08000c14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <MemManage_Handler+0x4>

08000c1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c1e:	e7fe      	b.n	8000c1e <BusFault_Handler+0x4>

08000c20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <UsageFault_Handler+0x4>

08000c26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000c38:	4802      	ldr	r0, [pc, #8]	; (8000c44 <TIM4_IRQHandler+0x10>)
 8000c3a:	f004 ff67 	bl	8005b0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	20007e9c 	.word	0x20007e9c

08000c48 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8000c4c:	4802      	ldr	r0, [pc, #8]	; (8000c58 <SDMMC1_IRQHandler+0x10>)
 8000c4e:	f003 fe79 	bl	8004944 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	20004b6c 	.word	0x20004b6c

08000c5c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8000c60:	4802      	ldr	r0, [pc, #8]	; (8000c6c <DMA2_Stream3_IRQHandler+0x10>)
 8000c62:	f000 fdb1 	bl	80017c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20005d1c 	.word	0x20005d1c

08000c70 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000c74:	4802      	ldr	r0, [pc, #8]	; (8000c80 <OTG_FS_IRQHandler+0x10>)
 8000c76:	f001 fb0b 	bl	8002290 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	20009cc4 	.word	0x20009cc4

08000c84 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8000c88:	4802      	ldr	r0, [pc, #8]	; (8000c94 <DMA2_Stream6_IRQHandler+0x10>)
 8000c8a:	f000 fd9d 	bl	80017c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	20006e3c 	.word	0x20006e3c

08000c98 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000ca0:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <_sbrk+0x50>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d102      	bne.n	8000cae <_sbrk+0x16>
		heap_end = &end;
 8000ca8:	4b0f      	ldr	r3, [pc, #60]	; (8000ce8 <_sbrk+0x50>)
 8000caa:	4a10      	ldr	r2, [pc, #64]	; (8000cec <_sbrk+0x54>)
 8000cac:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000cae:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <_sbrk+0x50>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000cb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <_sbrk+0x50>)
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	4413      	add	r3, r2
 8000cbc:	466a      	mov	r2, sp
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d907      	bls.n	8000cd2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000cc2:	f010 fc3b 	bl	801153c <__errno>
 8000cc6:	4602      	mov	r2, r0
 8000cc8:	230c      	movs	r3, #12
 8000cca:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd0:	e006      	b.n	8000ce0 <_sbrk+0x48>
	}

	heap_end += incr;
 8000cd2:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <_sbrk+0x50>)
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4413      	add	r3, r2
 8000cda:	4a03      	ldr	r2, [pc, #12]	; (8000ce8 <_sbrk+0x50>)
 8000cdc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000cde:	68fb      	ldr	r3, [r7, #12]
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3710      	adds	r7, #16
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	20000214 	.word	0x20000214
 8000cec:	2000a0d0 	.word	0x2000a0d0

08000cf0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cf4:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <SystemInit+0x28>)
 8000cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cfa:	4a07      	ldr	r2, [pc, #28]	; (8000d18 <SystemInit+0x28>)
 8000cfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d04:	4b04      	ldr	r3, [pc, #16]	; (8000d18 <SystemInit+0x28>)
 8000d06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d0a:	609a      	str	r2, [r3, #8]
#endif
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <UsbPrint>:
#include <string.h>
#include <stdio.h>
#include <stdarg.h>


uint8_t UsbPrint(const char *format, ...) {
 8000d1c:	b40f      	push	{r0, r1, r2, r3}
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b082      	sub	sp, #8
 8000d22:	af00      	add	r7, sp, #0
	uint8_t ret = 1;
 8000d24:	2301      	movs	r3, #1
 8000d26:	71fb      	strb	r3, [r7, #7]
#ifdef DEBUG
	if (osMutexAcquire(print_mutex, 0U) == osOK) {
 8000d28:	4b14      	ldr	r3, [pc, #80]	; (8000d7c <UsbPrint+0x60>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f00c f990 	bl	800d054 <osMutexAcquire>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d118      	bne.n	8000d6c <UsbPrint+0x50>
		va_list argptr;
		va_start(argptr, format);
 8000d3a:	f107 0314 	add.w	r3, r7, #20
 8000d3e:	603b      	str	r3, [r7, #0]
		vsnprintf(print_buffer, PRINT_BUFFER_LEN, format, argptr);
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	21c8      	movs	r1, #200	; 0xc8
 8000d46:	480e      	ldr	r0, [pc, #56]	; (8000d80 <UsbPrint+0x64>)
 8000d48:	f010 fd4a 	bl	80117e0 <vsniprintf>
		va_end(argptr);
		ret = CDC_Transmit_FS((uint8_t*) print_buffer, strlen(print_buffer));
 8000d4c:	480c      	ldr	r0, [pc, #48]	; (8000d80 <UsbPrint+0x64>)
 8000d4e:	f7ff fa5f 	bl	8000210 <strlen>
 8000d52:	4603      	mov	r3, r0
 8000d54:	b29b      	uxth	r3, r3
 8000d56:	4619      	mov	r1, r3
 8000d58:	4809      	ldr	r0, [pc, #36]	; (8000d80 <UsbPrint+0x64>)
 8000d5a:	f00f ff45 	bl	8010be8 <CDC_Transmit_FS>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	71fb      	strb	r3, [r7, #7]
		osMutexRelease(print_mutex);
 8000d62:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <UsbPrint+0x60>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4618      	mov	r0, r3
 8000d68:	f00c f9d2 	bl	800d110 <osMutexRelease>
	}
#endif
	return ret;
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d78:	b004      	add	sp, #16
 8000d7a:	4770      	bx	lr
 8000d7c:	20005d18 	.word	0x20005d18
 8000d80:	20004bf4 	.word	0x20004bf4

08000d84 <formatLogData>:

void printLogHeader(char log_buffer[]) {
	sprintf(log_buffer, "Timestamp,Sensor Type,fkfkfkf");
}

void formatLogData(const log_entry_t *const log_entry, char log_buffer[]) {
 8000d84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d86:	b08d      	sub	sp, #52	; 0x34
 8000d88:	af08      	add	r7, sp, #32
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
	switch (log_entry->sens_type) {
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d002      	beq.n	8000d9c <formatLogData+0x18>
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d024      	beq.n	8000de4 <formatLogData+0x60>
				log_entry->sensor.baro.pressure,
				log_entry->sensor.baro.temperature,
				log_entry->sensor.baro.timestamp);
		break;
	}
}
 8000d9a:	e03d      	b.n	8000e18 <formatLogData+0x94>
		sprintf(log_buffer, "%ld,%d,%d,%ld,%ld,%ld,%ld,%ld,%ld\r\n",
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	6a1e      	ldr	r6, [r3, #32]
				log_entry->timestamp, log_entry->sensor_board_id,
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
		sprintf(log_buffer, "%ld,%d,%d,%ld,%ld,%ld,%ld,%ld,%ld\r\n",
 8000da6:	469c      	mov	ip, r3
				log_entry->sens_type, log_entry->sensor.imu.acc_x,
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	781b      	ldrb	r3, [r3, #0]
		sprintf(log_buffer, "%ld,%d,%d,%ld,%ld,%ld,%ld,%ld,%ld\r\n",
 8000dac:	607b      	str	r3, [r7, #4]
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	691b      	ldr	r3, [r3, #16]
 8000db2:	68fa      	ldr	r2, [r7, #12]
 8000db4:	6952      	ldr	r2, [r2, #20]
 8000db6:	68f9      	ldr	r1, [r7, #12]
 8000db8:	6989      	ldr	r1, [r1, #24]
 8000dba:	68f8      	ldr	r0, [r7, #12]
 8000dbc:	6840      	ldr	r0, [r0, #4]
 8000dbe:	68fc      	ldr	r4, [r7, #12]
 8000dc0:	68a4      	ldr	r4, [r4, #8]
 8000dc2:	68fd      	ldr	r5, [r7, #12]
 8000dc4:	68ed      	ldr	r5, [r5, #12]
 8000dc6:	9506      	str	r5, [sp, #24]
 8000dc8:	9405      	str	r4, [sp, #20]
 8000dca:	9004      	str	r0, [sp, #16]
 8000dcc:	9103      	str	r1, [sp, #12]
 8000dce:	9202      	str	r2, [sp, #8]
 8000dd0:	9301      	str	r3, [sp, #4]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	9300      	str	r3, [sp, #0]
 8000dd6:	4663      	mov	r3, ip
 8000dd8:	4632      	mov	r2, r6
 8000dda:	4911      	ldr	r1, [pc, #68]	; (8000e20 <formatLogData+0x9c>)
 8000ddc:	68b8      	ldr	r0, [r7, #8]
 8000dde:	f010 fcb3 	bl	8011748 <siprintf>
		break;
 8000de2:	e019      	b.n	8000e18 <formatLogData+0x94>
		sprintf(log_buffer, "%ld,%d,%d,%ld,%ld,%ld\r\n", log_entry->timestamp,
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	6a18      	ldr	r0, [r3, #32]
				log_entry->sensor_board_id, log_entry->sens_type,
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
		sprintf(log_buffer, "%ld,%d,%d,%ld,%ld,%ld\r\n", log_entry->timestamp,
 8000dee:	461d      	mov	r5, r3
				log_entry->sensor_board_id, log_entry->sens_type,
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	781b      	ldrb	r3, [r3, #0]
		sprintf(log_buffer, "%ld,%d,%d,%ld,%ld,%ld\r\n", log_entry->timestamp,
 8000df4:	461c      	mov	r4, r3
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	68fa      	ldr	r2, [r7, #12]
 8000dfc:	6892      	ldr	r2, [r2, #8]
 8000dfe:	68f9      	ldr	r1, [r7, #12]
 8000e00:	68c9      	ldr	r1, [r1, #12]
 8000e02:	9103      	str	r1, [sp, #12]
 8000e04:	9202      	str	r2, [sp, #8]
 8000e06:	9301      	str	r3, [sp, #4]
 8000e08:	9400      	str	r4, [sp, #0]
 8000e0a:	462b      	mov	r3, r5
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	4905      	ldr	r1, [pc, #20]	; (8000e24 <formatLogData+0xa0>)
 8000e10:	68b8      	ldr	r0, [r7, #8]
 8000e12:	f010 fc99 	bl	8011748 <siprintf>
		break;
 8000e16:	bf00      	nop
}
 8000e18:	bf00      	nop
 8000e1a:	3714      	adds	r7, #20
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e20:	08011ed4 	.word	0x08011ed4
 8000e24:	08011ef8 	.word	0x08011ef8

08000e28 <vTaskSdCard>:
		break;
	}
	return 20;
}

void vTaskSdCard(void *argument) {
 8000e28:	b5b0      	push	{r4, r5, r7, lr}
 8000e2a:	b0da      	sub	sp, #360	; 0x168
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	1d3b      	adds	r3, r7, #4
 8000e30:	6018      	str	r0, [r3, #0]
	FRESULT res;
	char EULER_LOG_FILE_NAME[13] = "";
 8000e32:	2300      	movs	r3, #0
 8000e34:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8000e38:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	721a      	strb	r2, [r3, #8]
	UsbPrint("[STORAGE TASK] Starting SD Card Task..\r\n");
 8000e44:	48ca      	ldr	r0, [pc, #808]	; (8001170 <vTaskSdCard+0x348>)
 8000e46:	f7ff ff69 	bl	8000d1c <UsbPrint>

	resetSDCard: UsbPrint("[STORAGE TASK] Mounting SD card\r\n");
 8000e4a:	48ca      	ldr	r0, [pc, #808]	; (8001174 <vTaskSdCard+0x34c>)
 8000e4c:	f7ff ff66 	bl	8000d1c <UsbPrint>
	do {
		res = f_mount(&EULER_FatFS, "", 1);
 8000e50:	2201      	movs	r2, #1
 8000e52:	49c9      	ldr	r1, [pc, #804]	; (8001178 <vTaskSdCard+0x350>)
 8000e54:	48c9      	ldr	r0, [pc, #804]	; (800117c <vTaskSdCard+0x354>)
 8000e56:	f00a fe5b 	bl	800bb10 <f_mount>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
		if (res != FR_OK) {
 8000e60:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d00b      	beq.n	8000e80 <vTaskSdCard+0x58>
			UsbPrint("[STORAGE TASK] Failed mounting SD card: %d\n", res);
 8000e68:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	48c4      	ldr	r0, [pc, #784]	; (8001180 <vTaskSdCard+0x358>)
 8000e70:	f7ff ff54 	bl	8000d1c <UsbPrint>
			// force sd card to be reinitialized
			disk.is_initialized[0] = 0;
 8000e74:	4bc3      	ldr	r3, [pc, #780]	; (8001184 <vTaskSdCard+0x35c>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	701a      	strb	r2, [r3, #0]
			osDelay(100);
 8000e7a:	2064      	movs	r0, #100	; 0x64
 8000e7c:	f00c f822 	bl	800cec4 <osDelay>
		}
	} while (res != FR_OK);
 8000e80:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d1e3      	bne.n	8000e50 <vTaskSdCard+0x28>

	if (!EULER_LOG_FILE_NAME[0]) {
 8000e88:	f897 3144 	ldrb.w	r3, [r7, #324]	; 0x144
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	f040 80ad 	bne.w	8000fec <vTaskSdCard+0x1c4>
		UsbPrint("[STORAGE TASK] Creating file name\r\n");
 8000e92:	48bd      	ldr	r0, [pc, #756]	; (8001188 <vTaskSdCard+0x360>)
 8000e94:	f7ff ff42 	bl	8000d1c <UsbPrint>

		unsigned int file_number = 1;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160

		DIR dj;
		FILINFO fno;
		res = f_findfirst(&dj, &fno, "", "LOG_???.TXT");
 8000e9e:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000ea2:	f107 0008 	add.w	r0, r7, #8
 8000ea6:	4bb9      	ldr	r3, [pc, #740]	; (800118c <vTaskSdCard+0x364>)
 8000ea8:	4ab3      	ldr	r2, [pc, #716]	; (8001178 <vTaskSdCard+0x350>)
 8000eaa:	f00b fde9 	bl	800ca80 <f_findfirst>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
		while (res == FR_OK && fno.fname[0]) {
 8000eb4:	e02e      	b.n	8000f14 <vTaskSdCard+0xec>
			unsigned int current_file_number = (fno.fname[4] - '0') * 100
 8000eb6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000eba:	7b5b      	ldrb	r3, [r3, #13]
 8000ebc:	3b30      	subs	r3, #48	; 0x30
 8000ebe:	2264      	movs	r2, #100	; 0x64
 8000ec0:	fb02 f103 	mul.w	r1, r2, r3
					+ (fno.fname[5] - '0') * 10 + (fno.fname[6] - '0');
 8000ec4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ec8:	7b9b      	ldrb	r3, [r3, #14]
 8000eca:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000ece:	4613      	mov	r3, r2
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	4413      	add	r3, r2
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	18ca      	adds	r2, r1, r3
 8000ed8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000edc:	7bdb      	ldrb	r3, [r3, #15]
 8000ede:	3b30      	subs	r3, #48	; 0x30
 8000ee0:	4413      	add	r3, r2
			unsigned int current_file_number = (fno.fname[4] - '0') * 100
 8000ee2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
			if (current_file_number + 1 > file_number) {
 8000ee6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8000eea:	3301      	adds	r3, #1
 8000eec:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	d204      	bcs.n	8000efe <vTaskSdCard+0xd6>
				file_number = current_file_number + 1;
 8000ef4:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8000ef8:	3301      	adds	r3, #1
 8000efa:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
			}
			res = f_findnext(&dj, &fno);
 8000efe:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000f02:	f107 0308 	add.w	r3, r7, #8
 8000f06:	4611      	mov	r1, r2
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f00b fd91 	bl	800ca30 <f_findnext>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
		while (res == FR_OK && fno.fname[0]) {
 8000f14:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d104      	bne.n	8000f26 <vTaskSdCard+0xfe>
 8000f1c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f20:	7a5b      	ldrb	r3, [r3, #9]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d1c7      	bne.n	8000eb6 <vTaskSdCard+0x8e>
		}
		if (res != FR_OK) {
 8000f26:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d006      	beq.n	8000f3c <vTaskSdCard+0x114>
			UsbPrint("[STORAGE TASK] Failed finding first or next file: %d\n",
 8000f2e:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8000f32:	4619      	mov	r1, r3
 8000f34:	4896      	ldr	r0, [pc, #600]	; (8001190 <vTaskSdCard+0x368>)
 8000f36:	f7ff fef1 	bl	8000d1c <UsbPrint>
					res);
			goto resetSDCard;
 8000f3a:	e786      	b.n	8000e4a <vTaskSdCard+0x22>
		}

		strcpy(EULER_LOG_FILE_NAME, "LOG_000.CSV");
 8000f3c:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8000f40:	4a94      	ldr	r2, [pc, #592]	; (8001194 <vTaskSdCard+0x36c>)
 8000f42:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f44:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		EULER_LOG_FILE_NAME[6] = '0' + file_number % 10;
 8000f48:	f8d7 1160 	ldr.w	r1, [r7, #352]	; 0x160
 8000f4c:	4b92      	ldr	r3, [pc, #584]	; (8001198 <vTaskSdCard+0x370>)
 8000f4e:	fba3 2301 	umull	r2, r3, r3, r1
 8000f52:	08da      	lsrs	r2, r3, #3
 8000f54:	4613      	mov	r3, r2
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	4413      	add	r3, r2
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	1aca      	subs	r2, r1, r3
 8000f5e:	b2d3      	uxtb	r3, r2
 8000f60:	3330      	adds	r3, #48	; 0x30
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	f887 314a 	strb.w	r3, [r7, #330]	; 0x14a
		EULER_LOG_FILE_NAME[5] = '0' + (file_number / 10) % 10;
 8000f68:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8000f6c:	4a8a      	ldr	r2, [pc, #552]	; (8001198 <vTaskSdCard+0x370>)
 8000f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f72:	08d9      	lsrs	r1, r3, #3
 8000f74:	4b88      	ldr	r3, [pc, #544]	; (8001198 <vTaskSdCard+0x370>)
 8000f76:	fba3 2301 	umull	r2, r3, r3, r1
 8000f7a:	08da      	lsrs	r2, r3, #3
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	4413      	add	r3, r2
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	1aca      	subs	r2, r1, r3
 8000f86:	b2d3      	uxtb	r3, r2
 8000f88:	3330      	adds	r3, #48	; 0x30
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	f887 3149 	strb.w	r3, [r7, #329]	; 0x149
		EULER_LOG_FILE_NAME[4] = '0' + (file_number / 100) % 10;
 8000f90:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8000f94:	4a81      	ldr	r2, [pc, #516]	; (800119c <vTaskSdCard+0x374>)
 8000f96:	fba2 2303 	umull	r2, r3, r2, r3
 8000f9a:	0959      	lsrs	r1, r3, #5
 8000f9c:	4b7e      	ldr	r3, [pc, #504]	; (8001198 <vTaskSdCard+0x370>)
 8000f9e:	fba3 2301 	umull	r2, r3, r3, r1
 8000fa2:	08da      	lsrs	r2, r3, #3
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	4413      	add	r3, r2
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	1aca      	subs	r2, r1, r3
 8000fae:	b2d3      	uxtb	r3, r2
 8000fb0:	3330      	adds	r3, #48	; 0x30
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	f887 3148 	strb.w	r3, [r7, #328]	; 0x148

		UsbPrint("[STORAGE TASK] Using file name: %s\n", EULER_LOG_FILE_NAME);
 8000fb8:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4878      	ldr	r0, [pc, #480]	; (80011a0 <vTaskSdCard+0x378>)
 8000fc0:	f7ff feac 	bl	8000d1c <UsbPrint>

		res = f_closedir(&dj);
 8000fc4:	f107 0308 	add.w	r3, r7, #8
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f00b fcc3 	bl	800c954 <f_closedir>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
		if (res != FR_OK) {
 8000fd4:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d007      	beq.n	8000fec <vTaskSdCard+0x1c4>
			UsbPrint("[STORAGE TASK] Failed closing directory: %d\n", res);
 8000fdc:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4870      	ldr	r0, [pc, #448]	; (80011a4 <vTaskSdCard+0x37c>)
 8000fe4:	f7ff fe9a 	bl	8000d1c <UsbPrint>
			goto resetSDCard;
 8000fe8:	bf00      	nop
 8000fea:	e72e      	b.n	8000e4a <vTaskSdCard+0x22>
		}
	}

	UsbPrint("[STORAGE TASK] Opening log file\n");
 8000fec:	486e      	ldr	r0, [pc, #440]	; (80011a8 <vTaskSdCard+0x380>)
 8000fee:	f7ff fe95 	bl	8000d1c <UsbPrint>
	res = f_open(&EULER_LOG_FILE, EULER_LOG_FILE_NAME,
 8000ff2:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8000ff6:	2212      	movs	r2, #18
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	486c      	ldr	r0, [pc, #432]	; (80011ac <vTaskSdCard+0x384>)
 8000ffc:	f00a fdec 	bl	800bbd8 <f_open>
 8001000:	4603      	mov	r3, r0
 8001002:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
	FA_OPEN_ALWAYS | FA_WRITE);
	if (res != FR_OK) {
 8001006:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 800100a:	2b00      	cmp	r3, #0
 800100c:	d006      	beq.n	800101c <vTaskSdCard+0x1f4>
		UsbPrint("[STORAGE TASK] Failed opening log file: %d\n", res);
 800100e:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8001012:	4619      	mov	r1, r3
 8001014:	4866      	ldr	r0, [pc, #408]	; (80011b0 <vTaskSdCard+0x388>)
 8001016:	f7ff fe81 	bl	8000d1c <UsbPrint>
		goto resetSDCard;
 800101a:	e716      	b.n	8000e4a <vTaskSdCard+0x22>
	}

	UsbPrint("[STORAGE TASK] Going to end of file\n");
 800101c:	4865      	ldr	r0, [pc, #404]	; (80011b4 <vTaskSdCard+0x38c>)
 800101e:	f7ff fe7d 	bl	8000d1c <UsbPrint>
	res = f_lseek(&EULER_LOG_FILE, f_size(&EULER_LOG_FILE));
 8001022:	4b62      	ldr	r3, [pc, #392]	; (80011ac <vTaskSdCard+0x384>)
 8001024:	68db      	ldr	r3, [r3, #12]
 8001026:	4619      	mov	r1, r3
 8001028:	4860      	ldr	r0, [pc, #384]	; (80011ac <vTaskSdCard+0x384>)
 800102a:	f00b f9c7 	bl	800c3bc <f_lseek>
 800102e:	4603      	mov	r3, r0
 8001030:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
	if (res != FR_OK) {
 8001034:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8001038:	2b00      	cmp	r3, #0
 800103a:	d006      	beq.n	800104a <vTaskSdCard+0x222>
		UsbPrint("[STORAGE TASK] Failed going to end of file: %d\n", res);
 800103c:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8001040:	4619      	mov	r1, r3
 8001042:	485d      	ldr	r0, [pc, #372]	; (80011b8 <vTaskSdCard+0x390>)
 8001044:	f7ff fe6a 	bl	8000d1c <UsbPrint>
		goto resetSDCard;
 8001048:	e6ff      	b.n	8000e4a <vTaskSdCard+0x22>
	}

	int msgCounter = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
	char log_buffer[200] = "COL_1,COL_2,COL_3,...\r\n";
 8001050:	4b5a      	ldr	r3, [pc, #360]	; (80011bc <vTaskSdCard+0x394>)
 8001052:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 8001056:	461d      	mov	r5, r3
 8001058:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800105a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800105c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001060:	e884 0003 	stmia.w	r4, {r0, r1}
 8001064:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001068:	22b0      	movs	r2, #176	; 0xb0
 800106a:	2100      	movs	r1, #0
 800106c:	4618      	mov	r0, r3
 800106e:	f010 faaa 	bl	80115c6 <memset>
	uint32_t num_bytes = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
	res = f_write(&EULER_LOG_FILE, log_buffer, strlen(log_buffer),
 8001078:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff f8c7 	bl	8000210 <strlen>
 8001082:	4602      	mov	r2, r0
 8001084:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8001088:	4b4d      	ldr	r3, [pc, #308]	; (80011c0 <vTaskSdCard+0x398>)
 800108a:	4848      	ldr	r0, [pc, #288]	; (80011ac <vTaskSdCard+0x384>)
 800108c:	f00a ff69 	bl	800bf62 <f_write>
 8001090:	4603      	mov	r3, r0
 8001092:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
			&EULER_bytesSD);
	if (res != FR_OK) {
 8001096:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 800109a:	2b00      	cmp	r3, #0
 800109c:	d006      	beq.n	80010ac <vTaskSdCard+0x284>
		UsbPrint("[STORAGE TASK] Failed writing to file: %d\n", res);
 800109e:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 80010a2:	4619      	mov	r1, r3
 80010a4:	4847      	ldr	r0, [pc, #284]	; (80011c4 <vTaskSdCard+0x39c>)
 80010a6:	f7ff fe39 	bl	8000d1c <UsbPrint>
		goto resetSDCard;
 80010aa:	e6ce      	b.n	8000e4a <vTaskSdCard+0x22>
	}
	log_entry_t log_entry = { 0 };
 80010ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010b0:	4618      	mov	r0, r3
 80010b2:	2328      	movs	r3, #40	; 0x28
 80010b4:	461a      	mov	r2, r3
 80010b6:	2100      	movs	r1, #0
 80010b8:	f010 fa85 	bl	80115c6 <memset>
	for (;;) {
		if (osMessageQueueGet(log_queue, &log_entry, NULL,
 80010bc:	4b42      	ldr	r3, [pc, #264]	; (80011c8 <vTaskSdCard+0x3a0>)
 80010be:	6818      	ldr	r0, [r3, #0]
 80010c0:	f107 0154 	add.w	r1, r7, #84	; 0x54
 80010c4:	f04f 33ff 	mov.w	r3, #4294967295
 80010c8:	2200      	movs	r2, #0
 80010ca:	f00c fafd 	bl	800d6c8 <osMessageQueueGet>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d1f3      	bne.n	80010bc <vTaskSdCard+0x294>
		osWaitForever) == osOK) {
			formatLogData(&log_entry, log_buffer);
 80010d4:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80010d8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010dc:	4611      	mov	r1, r2
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff fe50 	bl	8000d84 <formatLogData>
			num_bytes = strlen(log_buffer);
 80010e4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff f891 	bl	8000210 <strlen>
 80010ee:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154
			if (num_bytes > 0) {
 80010f2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d019      	beq.n	800112e <vTaskSdCard+0x306>
				res = f_write(&EULER_LOG_FILE, log_buffer, strlen(log_buffer),
 80010fa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff f886 	bl	8000210 <strlen>
 8001104:	4602      	mov	r2, r0
 8001106:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 800110a:	4b2d      	ldr	r3, [pc, #180]	; (80011c0 <vTaskSdCard+0x398>)
 800110c:	4827      	ldr	r0, [pc, #156]	; (80011ac <vTaskSdCard+0x384>)
 800110e:	f00a ff28 	bl	800bf62 <f_write>
 8001112:	4603      	mov	r3, r0
 8001114:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
						&EULER_bytesSD);
				if (res != FR_OK) {
 8001118:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 800111c:	2b00      	cmp	r3, #0
 800111e:	d006      	beq.n	800112e <vTaskSdCard+0x306>
					UsbPrint("[STORAGE TASK] Failed writing to file: %d\n",
 8001120:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8001124:	4619      	mov	r1, r3
 8001126:	4827      	ldr	r0, [pc, #156]	; (80011c4 <vTaskSdCard+0x39c>)
 8001128:	f7ff fdf8 	bl	8000d1c <UsbPrint>
							res);
					goto resetSDCard;
 800112c:	e68d      	b.n	8000e4a <vTaskSdCard+0x22>
				}
			}

			msgCounter++;
 800112e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001132:	3301      	adds	r3, #1
 8001134:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

			if (msgCounter >= SYNC_AFTER_COUNT) {
 8001138:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800113c:	2b7f      	cmp	r3, #127	; 0x7f
 800113e:	ddbd      	ble.n	80010bc <vTaskSdCard+0x294>
				msgCounter = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

				UsbPrint("[STORAGE TASK] Syncing file..\r\n");
 8001146:	4821      	ldr	r0, [pc, #132]	; (80011cc <vTaskSdCard+0x3a4>)
 8001148:	f7ff fde8 	bl	8000d1c <UsbPrint>
				res = f_sync(&EULER_LOG_FILE);
 800114c:	4817      	ldr	r0, [pc, #92]	; (80011ac <vTaskSdCard+0x384>)
 800114e:	f00b f8ac 	bl	800c2aa <f_sync>
 8001152:	4603      	mov	r3, r0
 8001154:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
				if (res != FR_OK) {
 8001158:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 800115c:	2b00      	cmp	r3, #0
 800115e:	d0ad      	beq.n	80010bc <vTaskSdCard+0x294>
					UsbPrint("[STORAGE TASK] Failed syncing file: %d\n", res);
 8001160:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8001164:	4619      	mov	r1, r3
 8001166:	481a      	ldr	r0, [pc, #104]	; (80011d0 <vTaskSdCard+0x3a8>)
 8001168:	f7ff fdd8 	bl	8000d1c <UsbPrint>
					goto resetSDCard;
 800116c:	e66d      	b.n	8000e4a <vTaskSdCard+0x22>
 800116e:	bf00      	nop
 8001170:	08011f10 	.word	0x08011f10
 8001174:	08011f3c 	.word	0x08011f3c
 8001178:	08011f60 	.word	0x08011f60
 800117c:	2000810c 	.word	0x2000810c
 8001180:	08011f64 	.word	0x08011f64
 8001184:	20000248 	.word	0x20000248
 8001188:	08011f90 	.word	0x08011f90
 800118c:	08011fb4 	.word	0x08011fb4
 8001190:	08011fc0 	.word	0x08011fc0
 8001194:	08011ff8 	.word	0x08011ff8
 8001198:	cccccccd 	.word	0xcccccccd
 800119c:	51eb851f 	.word	0x51eb851f
 80011a0:	08012004 	.word	0x08012004
 80011a4:	08012028 	.word	0x08012028
 80011a8:	08012058 	.word	0x08012058
 80011ac:	20007edc 	.word	0x20007edc
 80011b0:	0801207c 	.word	0x0801207c
 80011b4:	080120a8 	.word	0x080120a8
 80011b8:	080120d0 	.word	0x080120d0
 80011bc:	08012174 	.word	0x08012174
 80011c0:	20008340 	.word	0x20008340
 80011c4:	08012100 	.word	0x08012100
 80011c8:	20005dd8 	.word	0x20005dd8
 80011cc:	0801212c 	.word	0x0801212c
 80011d0:	0801214c 	.word	0x0801214c

080011d4 <vTaskSensRead>:
#include "util.h"
#include "cmsis_os.h"

#include "tasks/task_sens_read.h"

void vTaskSensRead(void *argument) {
 80011d4:	b5b0      	push	{r4, r5, r7, lr}
 80011d6:	b0a0      	sub	sp, #128	; 0x80
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
	imu_data imu1 = { .gyro_x = 1312, .gyro_y = 764, .gyro_z = -123, .acc_x =
 80011dc:	4b27      	ldr	r3, [pc, #156]	; (800127c <vTaskSensRead+0xa8>)
 80011de:	f107 0464 	add.w	r4, r7, #100	; 0x64
 80011e2:	461d      	mov	r5, r3
 80011e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			42738, .acc_y = 321, .acc_z = 777, .timestamp = 3 };
	baro_data baro1 = { .pressure = 123, .temperature = 13321, .timestamp = 3 };
 80011f0:	4a23      	ldr	r2, [pc, #140]	; (8001280 <vTaskSensRead+0xac>)
 80011f2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80011f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	log_entry_t log1 = { .sens_type = IMU, .sensor = { .imu = imu1 },
 80011fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001200:	2228      	movs	r2, #40	; 0x28
 8001202:	2100      	movs	r1, #0
 8001204:	4618      	mov	r0, r3
 8001206:	f010 f9de 	bl	80115c6 <memset>
 800120a:	f107 0434 	add.w	r4, r7, #52	; 0x34
 800120e:	f107 0564 	add.w	r5, r7, #100	; 0x64
 8001212:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001214:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001216:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800121a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			.sensor_board_id = 0 };
	log_entry_t log2 = { .sens_type = BARO, .sensor = { .baro = baro1 },
 800121e:	f107 0308 	add.w	r3, r7, #8
 8001222:	2228      	movs	r2, #40	; 0x28
 8001224:	2100      	movs	r1, #0
 8001226:	4618      	mov	r0, r3
 8001228:	f010 f9cd 	bl	80115c6 <memset>
 800122c:	2301      	movs	r3, #1
 800122e:	723b      	strb	r3, [r7, #8]
 8001230:	f107 030c 	add.w	r3, r7, #12
 8001234:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001238:	ca07      	ldmia	r2, {r0, r1, r2}
 800123a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800123e:	2302      	movs	r3, #2
 8001240:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			.sensor_board_id = 2 };

	for (;;) {
		log1.timestamp = osKernelGetTickCount();
 8001244:	f00b fd70 	bl	800cd28 <osKernelGetTickCount>
 8001248:	4603      	mov	r3, r0
 800124a:	653b      	str	r3, [r7, #80]	; 0x50
		log2.timestamp = osKernelGetTickCount();
 800124c:	f00b fd6c 	bl	800cd28 <osKernelGetTickCount>
 8001250:	4603      	mov	r3, r0
 8001252:	62bb      	str	r3, [r7, #40]	; 0x28
		//UsbPrint("[SENSOR READ TASK] Log elements in queue %ld!\n", osMessageQueueGetCount(log_queue));
		osMessageQueuePut(log_queue, &log1, 0U, 0U);
 8001254:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <vTaskSensRead+0xb0>)
 8001256:	6818      	ldr	r0, [r3, #0]
 8001258:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800125c:	2300      	movs	r3, #0
 800125e:	2200      	movs	r2, #0
 8001260:	f00c f9be 	bl	800d5e0 <osMessageQueuePut>
		osMessageQueuePut(log_queue, &log2, 0U, 0U);
 8001264:	4b07      	ldr	r3, [pc, #28]	; (8001284 <vTaskSensRead+0xb0>)
 8001266:	6818      	ldr	r0, [r3, #0]
 8001268:	f107 0108 	add.w	r1, r7, #8
 800126c:	2300      	movs	r3, #0
 800126e:	2200      	movs	r2, #0
 8001270:	f00c f9b6 	bl	800d5e0 <osMessageQueuePut>

		osDelay(100);
 8001274:	2064      	movs	r0, #100	; 0x64
 8001276:	f00b fe25 	bl	800cec4 <osDelay>
		log1.timestamp = osKernelGetTickCount();
 800127a:	e7e3      	b.n	8001244 <vTaskSensRead+0x70>
 800127c:	0801223c 	.word	0x0801223c
 8001280:	08012258 	.word	0x08012258
 8001284:	20005dd8 	.word	0x20005dd8

08001288 <vTaskTemplate>:
#include "util.h"

#include "tasks/task_template.h"


void vTaskTemplate(void *argument) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
	uint32_t out_int = 1;
 8001290:	2301      	movs	r3, #1
 8001292:	60fb      	str	r3, [r7, #12]
	char* out_str = "template";
 8001294:	4b05      	ldr	r3, [pc, #20]	; (80012ac <vTaskTemplate+0x24>)
 8001296:	60bb      	str	r3, [r7, #8]
	for (;;) {
		UsbPrint("[DBG] Hello from %s task %d!\n", out_str, out_int);
 8001298:	68fa      	ldr	r2, [r7, #12]
 800129a:	68b9      	ldr	r1, [r7, #8]
 800129c:	4804      	ldr	r0, [pc, #16]	; (80012b0 <vTaskTemplate+0x28>)
 800129e:	f7ff fd3d 	bl	8000d1c <UsbPrint>
		osDelay(1000);
 80012a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012a6:	f00b fe0d 	bl	800cec4 <osDelay>
		UsbPrint("[DBG] Hello from %s task %d!\n", out_str, out_int);
 80012aa:	e7f5      	b.n	8001298 <vTaskTemplate+0x10>
 80012ac:	08012264 	.word	0x08012264
 80012b0:	08012270 	.word	0x08012270

080012b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012ec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80012b8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80012ba:	e003      	b.n	80012c4 <LoopCopyDataInit>

080012bc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80012bc:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80012be:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80012c0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80012c2:	3104      	adds	r1, #4

080012c4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80012c4:	480b      	ldr	r0, [pc, #44]	; (80012f4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80012c6:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80012c8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80012ca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80012cc:	d3f6      	bcc.n	80012bc <CopyDataInit>
  ldr  r2, =_sbss
 80012ce:	4a0b      	ldr	r2, [pc, #44]	; (80012fc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80012d0:	e002      	b.n	80012d8 <LoopFillZerobss>

080012d2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80012d2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80012d4:	f842 3b04 	str.w	r3, [r2], #4

080012d8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80012d8:	4b09      	ldr	r3, [pc, #36]	; (8001300 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80012da:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80012dc:	d3f9      	bcc.n	80012d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012de:	f7ff fd07 	bl	8000cf0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012e2:	f010 f931 	bl	8011548 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012e6:	f7ff f96b 	bl	80005c0 <main>
  bx  lr    
 80012ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012ec:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80012f0:	080124bc 	.word	0x080124bc
  ldr  r0, =_sdata
 80012f4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80012f8:	200001f8 	.word	0x200001f8
  ldr  r2, =_sbss
 80012fc:	200001f8 	.word	0x200001f8
  ldr  r3, = _ebss
 8001300:	2000a0cc 	.word	0x2000a0cc

08001304 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001304:	e7fe      	b.n	8001304 <ADC_IRQHandler>

08001306 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800130a:	2003      	movs	r0, #3
 800130c:	f000 f8f7 	bl	80014fe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001310:	2000      	movs	r0, #0
 8001312:	f7ff fc1d 	bl	8000b50 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001316:	f7ff faf9 	bl	800090c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800131a:	2300      	movs	r3, #0
}
 800131c:	4618      	mov	r0, r3
 800131e:	bd80      	pop	{r7, pc}

08001320 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001324:	4b06      	ldr	r3, [pc, #24]	; (8001340 <HAL_IncTick+0x20>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	461a      	mov	r2, r3
 800132a:	4b06      	ldr	r3, [pc, #24]	; (8001344 <HAL_IncTick+0x24>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4413      	add	r3, r2
 8001330:	4a04      	ldr	r2, [pc, #16]	; (8001344 <HAL_IncTick+0x24>)
 8001332:	6013      	str	r3, [r2, #0]
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	20000008 	.word	0x20000008
 8001344:	20008344 	.word	0x20008344

08001348 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  return uwTick;
 800134c:	4b03      	ldr	r3, [pc, #12]	; (800135c <HAL_GetTick+0x14>)
 800134e:	681b      	ldr	r3, [r3, #0]
}
 8001350:	4618      	mov	r0, r3
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	20008344 	.word	0x20008344

08001360 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001368:	f7ff ffee 	bl	8001348 <HAL_GetTick>
 800136c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001378:	d005      	beq.n	8001386 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800137a:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <HAL_Delay+0x40>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	461a      	mov	r2, r3
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	4413      	add	r3, r2
 8001384:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001386:	bf00      	nop
 8001388:	f7ff ffde 	bl	8001348 <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	68fa      	ldr	r2, [r7, #12]
 8001394:	429a      	cmp	r2, r3
 8001396:	d8f7      	bhi.n	8001388 <HAL_Delay+0x28>
  {
  }
}
 8001398:	bf00      	nop
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	20000008 	.word	0x20000008

080013a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f003 0307 	and.w	r3, r3, #7
 80013b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013b4:	4b0b      	ldr	r3, [pc, #44]	; (80013e4 <__NVIC_SetPriorityGrouping+0x40>)
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ba:	68ba      	ldr	r2, [r7, #8]
 80013bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013c0:	4013      	ands	r3, r2
 80013c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013cc:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <__NVIC_SetPriorityGrouping+0x44>)
 80013ce:	4313      	orrs	r3, r2
 80013d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013d2:	4a04      	ldr	r2, [pc, #16]	; (80013e4 <__NVIC_SetPriorityGrouping+0x40>)
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	60d3      	str	r3, [r2, #12]
}
 80013d8:	bf00      	nop
 80013da:	3714      	adds	r7, #20
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	e000ed00 	.word	0xe000ed00
 80013e8:	05fa0000 	.word	0x05fa0000

080013ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013f0:	4b04      	ldr	r3, [pc, #16]	; (8001404 <__NVIC_GetPriorityGrouping+0x18>)
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	0a1b      	lsrs	r3, r3, #8
 80013f6:	f003 0307 	and.w	r3, r3, #7
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001416:	2b00      	cmp	r3, #0
 8001418:	db0b      	blt.n	8001432 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	f003 021f 	and.w	r2, r3, #31
 8001420:	4907      	ldr	r1, [pc, #28]	; (8001440 <__NVIC_EnableIRQ+0x38>)
 8001422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001426:	095b      	lsrs	r3, r3, #5
 8001428:	2001      	movs	r0, #1
 800142a:	fa00 f202 	lsl.w	r2, r0, r2
 800142e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001432:	bf00      	nop
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	e000e100 	.word	0xe000e100

08001444 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	6039      	str	r1, [r7, #0]
 800144e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001454:	2b00      	cmp	r3, #0
 8001456:	db0a      	blt.n	800146e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	b2da      	uxtb	r2, r3
 800145c:	490c      	ldr	r1, [pc, #48]	; (8001490 <__NVIC_SetPriority+0x4c>)
 800145e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001462:	0112      	lsls	r2, r2, #4
 8001464:	b2d2      	uxtb	r2, r2
 8001466:	440b      	add	r3, r1
 8001468:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800146c:	e00a      	b.n	8001484 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	b2da      	uxtb	r2, r3
 8001472:	4908      	ldr	r1, [pc, #32]	; (8001494 <__NVIC_SetPriority+0x50>)
 8001474:	79fb      	ldrb	r3, [r7, #7]
 8001476:	f003 030f 	and.w	r3, r3, #15
 800147a:	3b04      	subs	r3, #4
 800147c:	0112      	lsls	r2, r2, #4
 800147e:	b2d2      	uxtb	r2, r2
 8001480:	440b      	add	r3, r1
 8001482:	761a      	strb	r2, [r3, #24]
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	e000e100 	.word	0xe000e100
 8001494:	e000ed00 	.word	0xe000ed00

08001498 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001498:	b480      	push	{r7}
 800149a:	b089      	sub	sp, #36	; 0x24
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	f003 0307 	and.w	r3, r3, #7
 80014aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	f1c3 0307 	rsb	r3, r3, #7
 80014b2:	2b04      	cmp	r3, #4
 80014b4:	bf28      	it	cs
 80014b6:	2304      	movcs	r3, #4
 80014b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	3304      	adds	r3, #4
 80014be:	2b06      	cmp	r3, #6
 80014c0:	d902      	bls.n	80014c8 <NVIC_EncodePriority+0x30>
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	3b03      	subs	r3, #3
 80014c6:	e000      	b.n	80014ca <NVIC_EncodePriority+0x32>
 80014c8:	2300      	movs	r3, #0
 80014ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014cc:	f04f 32ff 	mov.w	r2, #4294967295
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	43da      	mvns	r2, r3
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	401a      	ands	r2, r3
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014e0:	f04f 31ff 	mov.w	r1, #4294967295
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ea:	43d9      	mvns	r1, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f0:	4313      	orrs	r3, r2
         );
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3724      	adds	r7, #36	; 0x24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b082      	sub	sp, #8
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f7ff ff4c 	bl	80013a4 <__NVIC_SetPriorityGrouping>
}
 800150c:	bf00      	nop
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
 8001520:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001522:	2300      	movs	r3, #0
 8001524:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001526:	f7ff ff61 	bl	80013ec <__NVIC_GetPriorityGrouping>
 800152a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	68b9      	ldr	r1, [r7, #8]
 8001530:	6978      	ldr	r0, [r7, #20]
 8001532:	f7ff ffb1 	bl	8001498 <NVIC_EncodePriority>
 8001536:	4602      	mov	r2, r0
 8001538:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800153c:	4611      	mov	r1, r2
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff ff80 	bl	8001444 <__NVIC_SetPriority>
}
 8001544:	bf00      	nop
 8001546:	3718      	adds	r7, #24
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff ff54 	bl	8001408 <__NVIC_EnableIRQ>
}
 8001560:	bf00      	nop
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001574:	f7ff fee8 	bl	8001348 <HAL_GetTick>
 8001578:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d101      	bne.n	8001584 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e099      	b.n	80016b8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2200      	movs	r2, #0
 8001588:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2202      	movs	r2, #2
 8001590:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f022 0201 	bic.w	r2, r2, #1
 80015a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015a4:	e00f      	b.n	80015c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015a6:	f7ff fecf 	bl	8001348 <HAL_GetTick>
 80015aa:	4602      	mov	r2, r0
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	2b05      	cmp	r3, #5
 80015b2:	d908      	bls.n	80015c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2220      	movs	r2, #32
 80015b8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2203      	movs	r2, #3
 80015be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e078      	b.n	80016b8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0301 	and.w	r3, r3, #1
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d1e8      	bne.n	80015a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80015dc:	697a      	ldr	r2, [r7, #20]
 80015de:	4b38      	ldr	r3, [pc, #224]	; (80016c0 <HAL_DMA_Init+0x158>)
 80015e0:	4013      	ands	r3, r2
 80015e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	685a      	ldr	r2, [r3, #4]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	691b      	ldr	r3, [r3, #16]
 80015f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800160a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6a1b      	ldr	r3, [r3, #32]
 8001610:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001612:	697a      	ldr	r2, [r7, #20]
 8001614:	4313      	orrs	r3, r2
 8001616:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161c:	2b04      	cmp	r3, #4
 800161e:	d107      	bne.n	8001630 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001628:	4313      	orrs	r3, r2
 800162a:	697a      	ldr	r2, [r7, #20]
 800162c:	4313      	orrs	r3, r2
 800162e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	697a      	ldr	r2, [r7, #20]
 8001636:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	f023 0307 	bic.w	r3, r3, #7
 8001646:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164c:	697a      	ldr	r2, [r7, #20]
 800164e:	4313      	orrs	r3, r2
 8001650:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001656:	2b04      	cmp	r3, #4
 8001658:	d117      	bne.n	800168a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800165e:	697a      	ldr	r2, [r7, #20]
 8001660:	4313      	orrs	r3, r2
 8001662:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001668:	2b00      	cmp	r3, #0
 800166a:	d00e      	beq.n	800168a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f000 faa5 	bl	8001bbc <DMA_CheckFifoParam>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d008      	beq.n	800168a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2240      	movs	r2, #64	; 0x40
 800167c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2201      	movs	r2, #1
 8001682:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001686:	2301      	movs	r3, #1
 8001688:	e016      	b.n	80016b8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	697a      	ldr	r2, [r7, #20]
 8001690:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f000 fa5c 	bl	8001b50 <DMA_CalcBaseAndBitshift>
 8001698:	4603      	mov	r3, r0
 800169a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016a0:	223f      	movs	r2, #63	; 0x3f
 80016a2:	409a      	lsls	r2, r3
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2201      	movs	r2, #1
 80016b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80016b6:	2300      	movs	r3, #0
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3718      	adds	r7, #24
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	f010803f 	.word	0xf010803f

080016c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
 80016d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016d2:	2300      	movs	r3, #0
 80016d4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016da:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d101      	bne.n	80016ea <HAL_DMA_Start_IT+0x26>
 80016e6:	2302      	movs	r3, #2
 80016e8:	e048      	b.n	800177c <HAL_DMA_Start_IT+0xb8>
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2201      	movs	r2, #1
 80016ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d137      	bne.n	800176e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	2202      	movs	r2, #2
 8001702:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2200      	movs	r2, #0
 800170a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	68b9      	ldr	r1, [r7, #8]
 8001712:	68f8      	ldr	r0, [r7, #12]
 8001714:	f000 f9ee 	bl	8001af4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800171c:	223f      	movs	r2, #63	; 0x3f
 800171e:	409a      	lsls	r2, r3
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f042 0216 	orr.w	r2, r2, #22
 8001732:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	695a      	ldr	r2, [r3, #20]
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001742:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001748:	2b00      	cmp	r3, #0
 800174a:	d007      	beq.n	800175c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f042 0208 	orr.w	r2, r2, #8
 800175a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f042 0201 	orr.w	r2, r2, #1
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	e005      	b.n	800177a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	2200      	movs	r2, #0
 8001772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001776:	2302      	movs	r3, #2
 8001778:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800177a:	7dfb      	ldrb	r3, [r7, #23]
}
 800177c:	4618      	mov	r0, r3
 800177e:	3718      	adds	r7, #24
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001792:	b2db      	uxtb	r3, r3
 8001794:	2b02      	cmp	r3, #2
 8001796:	d004      	beq.n	80017a2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2280      	movs	r2, #128	; 0x80
 800179c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e00c      	b.n	80017bc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2205      	movs	r2, #5
 80017a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f022 0201 	bic.w	r2, r2, #1
 80017b8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	4618      	mov	r0, r3
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80017d0:	2300      	movs	r3, #0
 80017d2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80017d4:	4b92      	ldr	r3, [pc, #584]	; (8001a20 <HAL_DMA_IRQHandler+0x258>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a92      	ldr	r2, [pc, #584]	; (8001a24 <HAL_DMA_IRQHandler+0x25c>)
 80017da:	fba2 2303 	umull	r2, r3, r2, r3
 80017de:	0a9b      	lsrs	r3, r3, #10
 80017e0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017f2:	2208      	movs	r2, #8
 80017f4:	409a      	lsls	r2, r3
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	4013      	ands	r3, r2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d01a      	beq.n	8001834 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0304 	and.w	r3, r3, #4
 8001808:	2b00      	cmp	r3, #0
 800180a:	d013      	beq.n	8001834 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f022 0204 	bic.w	r2, r2, #4
 800181a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001820:	2208      	movs	r2, #8
 8001822:	409a      	lsls	r2, r3
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800182c:	f043 0201 	orr.w	r2, r3, #1
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001838:	2201      	movs	r2, #1
 800183a:	409a      	lsls	r2, r3
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	4013      	ands	r3, r2
 8001840:	2b00      	cmp	r3, #0
 8001842:	d012      	beq.n	800186a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800184e:	2b00      	cmp	r3, #0
 8001850:	d00b      	beq.n	800186a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001856:	2201      	movs	r2, #1
 8001858:	409a      	lsls	r2, r3
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001862:	f043 0202 	orr.w	r2, r3, #2
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800186e:	2204      	movs	r2, #4
 8001870:	409a      	lsls	r2, r3
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	4013      	ands	r3, r2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d012      	beq.n	80018a0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0302 	and.w	r3, r3, #2
 8001884:	2b00      	cmp	r3, #0
 8001886:	d00b      	beq.n	80018a0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800188c:	2204      	movs	r2, #4
 800188e:	409a      	lsls	r2, r3
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001898:	f043 0204 	orr.w	r2, r3, #4
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018a4:	2210      	movs	r2, #16
 80018a6:	409a      	lsls	r2, r3
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	4013      	ands	r3, r2
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d043      	beq.n	8001938 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0308 	and.w	r3, r3, #8
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d03c      	beq.n	8001938 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018c2:	2210      	movs	r2, #16
 80018c4:	409a      	lsls	r2, r3
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d018      	beq.n	800190a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d108      	bne.n	80018f8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d024      	beq.n	8001938 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	4798      	blx	r3
 80018f6:	e01f      	b.n	8001938 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d01b      	beq.n	8001938 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	4798      	blx	r3
 8001908:	e016      	b.n	8001938 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001914:	2b00      	cmp	r3, #0
 8001916:	d107      	bne.n	8001928 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f022 0208 	bic.w	r2, r2, #8
 8001926:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192c:	2b00      	cmp	r3, #0
 800192e:	d003      	beq.n	8001938 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800193c:	2220      	movs	r2, #32
 800193e:	409a      	lsls	r2, r3
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	4013      	ands	r3, r2
 8001944:	2b00      	cmp	r3, #0
 8001946:	f000 808e 	beq.w	8001a66 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0310 	and.w	r3, r3, #16
 8001954:	2b00      	cmp	r3, #0
 8001956:	f000 8086 	beq.w	8001a66 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800195e:	2220      	movs	r2, #32
 8001960:	409a      	lsls	r2, r3
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800196c:	b2db      	uxtb	r3, r3
 800196e:	2b05      	cmp	r3, #5
 8001970:	d136      	bne.n	80019e0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f022 0216 	bic.w	r2, r2, #22
 8001980:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	695a      	ldr	r2, [r3, #20]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001990:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001996:	2b00      	cmp	r3, #0
 8001998:	d103      	bne.n	80019a2 <HAL_DMA_IRQHandler+0x1da>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d007      	beq.n	80019b2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f022 0208 	bic.w	r2, r2, #8
 80019b0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019b6:	223f      	movs	r2, #63	; 0x3f
 80019b8:	409a      	lsls	r2, r3
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2201      	movs	r2, #1
 80019ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d07d      	beq.n	8001ad2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	4798      	blx	r3
        }
        return;
 80019de:	e078      	b.n	8001ad2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d01c      	beq.n	8001a28 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d108      	bne.n	8001a0e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d030      	beq.n	8001a66 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	4798      	blx	r3
 8001a0c:	e02b      	b.n	8001a66 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d027      	beq.n	8001a66 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	4798      	blx	r3
 8001a1e:	e022      	b.n	8001a66 <HAL_DMA_IRQHandler+0x29e>
 8001a20:	20000000 	.word	0x20000000
 8001a24:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d10f      	bne.n	8001a56 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f022 0210 	bic.w	r2, r2, #16
 8001a44:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2201      	movs	r2, #1
 8001a52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d003      	beq.n	8001a66 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d032      	beq.n	8001ad4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d022      	beq.n	8001ac0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2205      	movs	r2, #5
 8001a7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f022 0201 	bic.w	r2, r2, #1
 8001a90:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	3301      	adds	r3, #1
 8001a96:	60bb      	str	r3, [r7, #8]
 8001a98:	697a      	ldr	r2, [r7, #20]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d307      	bcc.n	8001aae <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0301 	and.w	r3, r3, #1
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d1f2      	bne.n	8001a92 <HAL_DMA_IRQHandler+0x2ca>
 8001aac:	e000      	b.n	8001ab0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001aae:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2201      	movs	r2, #1
 8001abc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d005      	beq.n	8001ad4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	4798      	blx	r3
 8001ad0:	e000      	b.n	8001ad4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001ad2:	bf00      	nop
    }
  }
}
 8001ad4:	3718      	adds	r7, #24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop

08001adc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	607a      	str	r2, [r7, #4]
 8001b00:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b10:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	683a      	ldr	r2, [r7, #0]
 8001b18:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	2b40      	cmp	r3, #64	; 0x40
 8001b20:	d108      	bne.n	8001b34 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	68ba      	ldr	r2, [r7, #8]
 8001b30:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001b32:	e007      	b.n	8001b44 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	68ba      	ldr	r2, [r7, #8]
 8001b3a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	60da      	str	r2, [r3, #12]
}
 8001b44:	bf00      	nop
 8001b46:	3714      	adds	r7, #20
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	3b10      	subs	r3, #16
 8001b60:	4a13      	ldr	r2, [pc, #76]	; (8001bb0 <DMA_CalcBaseAndBitshift+0x60>)
 8001b62:	fba2 2303 	umull	r2, r3, r2, r3
 8001b66:	091b      	lsrs	r3, r3, #4
 8001b68:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001b6a:	4a12      	ldr	r2, [pc, #72]	; (8001bb4 <DMA_CalcBaseAndBitshift+0x64>)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	4413      	add	r3, r2
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	461a      	mov	r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2b03      	cmp	r3, #3
 8001b7c:	d908      	bls.n	8001b90 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	461a      	mov	r2, r3
 8001b84:	4b0c      	ldr	r3, [pc, #48]	; (8001bb8 <DMA_CalcBaseAndBitshift+0x68>)
 8001b86:	4013      	ands	r3, r2
 8001b88:	1d1a      	adds	r2, r3, #4
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	659a      	str	r2, [r3, #88]	; 0x58
 8001b8e:	e006      	b.n	8001b9e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	461a      	mov	r2, r3
 8001b96:	4b08      	ldr	r3, [pc, #32]	; (8001bb8 <DMA_CalcBaseAndBitshift+0x68>)
 8001b98:	4013      	ands	r3, r2
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3714      	adds	r7, #20
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	aaaaaaab 	.word	0xaaaaaaab
 8001bb4:	080123dc 	.word	0x080123dc
 8001bb8:	fffffc00 	.word	0xfffffc00

08001bbc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bcc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	699b      	ldr	r3, [r3, #24]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d11f      	bne.n	8001c16 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	2b03      	cmp	r3, #3
 8001bda:	d855      	bhi.n	8001c88 <DMA_CheckFifoParam+0xcc>
 8001bdc:	a201      	add	r2, pc, #4	; (adr r2, 8001be4 <DMA_CheckFifoParam+0x28>)
 8001bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001be2:	bf00      	nop
 8001be4:	08001bf5 	.word	0x08001bf5
 8001be8:	08001c07 	.word	0x08001c07
 8001bec:	08001bf5 	.word	0x08001bf5
 8001bf0:	08001c89 	.word	0x08001c89
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d045      	beq.n	8001c8c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c04:	e042      	b.n	8001c8c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c0e:	d13f      	bne.n	8001c90 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c14:	e03c      	b.n	8001c90 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c1e:	d121      	bne.n	8001c64 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	2b03      	cmp	r3, #3
 8001c24:	d836      	bhi.n	8001c94 <DMA_CheckFifoParam+0xd8>
 8001c26:	a201      	add	r2, pc, #4	; (adr r2, 8001c2c <DMA_CheckFifoParam+0x70>)
 8001c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c2c:	08001c3d 	.word	0x08001c3d
 8001c30:	08001c43 	.word	0x08001c43
 8001c34:	08001c3d 	.word	0x08001c3d
 8001c38:	08001c55 	.word	0x08001c55
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	73fb      	strb	r3, [r7, #15]
      break;
 8001c40:	e02f      	b.n	8001ca2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d024      	beq.n	8001c98 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c52:	e021      	b.n	8001c98 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c58:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c5c:	d11e      	bne.n	8001c9c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001c62:	e01b      	b.n	8001c9c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d902      	bls.n	8001c70 <DMA_CheckFifoParam+0xb4>
 8001c6a:	2b03      	cmp	r3, #3
 8001c6c:	d003      	beq.n	8001c76 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001c6e:	e018      	b.n	8001ca2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	73fb      	strb	r3, [r7, #15]
      break;
 8001c74:	e015      	b.n	8001ca2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d00e      	beq.n	8001ca0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	73fb      	strb	r3, [r7, #15]
      break;
 8001c86:	e00b      	b.n	8001ca0 <DMA_CheckFifoParam+0xe4>
      break;
 8001c88:	bf00      	nop
 8001c8a:	e00a      	b.n	8001ca2 <DMA_CheckFifoParam+0xe6>
      break;
 8001c8c:	bf00      	nop
 8001c8e:	e008      	b.n	8001ca2 <DMA_CheckFifoParam+0xe6>
      break;
 8001c90:	bf00      	nop
 8001c92:	e006      	b.n	8001ca2 <DMA_CheckFifoParam+0xe6>
      break;
 8001c94:	bf00      	nop
 8001c96:	e004      	b.n	8001ca2 <DMA_CheckFifoParam+0xe6>
      break;
 8001c98:	bf00      	nop
 8001c9a:	e002      	b.n	8001ca2 <DMA_CheckFifoParam+0xe6>
      break;   
 8001c9c:	bf00      	nop
 8001c9e:	e000      	b.n	8001ca2 <DMA_CheckFifoParam+0xe6>
      break;
 8001ca0:	bf00      	nop
    }
  } 
  
  return status; 
 8001ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3714      	adds	r7, #20
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b089      	sub	sp, #36	; 0x24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61fb      	str	r3, [r7, #28]
 8001cce:	e175      	b.n	8001fbc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	697a      	ldr	r2, [r7, #20]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	f040 8164 	bne.w	8001fb6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d00b      	beq.n	8001d0e <HAL_GPIO_Init+0x5e>
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d007      	beq.n	8001d0e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d02:	2b11      	cmp	r3, #17
 8001d04:	d003      	beq.n	8001d0e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	2b12      	cmp	r3, #18
 8001d0c:	d130      	bne.n	8001d70 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	2203      	movs	r2, #3
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4013      	ands	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	68da      	ldr	r2, [r3, #12]
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d44:	2201      	movs	r2, #1
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4013      	ands	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	091b      	lsrs	r3, r3, #4
 8001d5a:	f003 0201 	and.w	r2, r3, #1
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	2203      	movs	r2, #3
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	43db      	mvns	r3, r3
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4013      	ands	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	689a      	ldr	r2, [r3, #8]
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d003      	beq.n	8001db0 <HAL_GPIO_Init+0x100>
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	2b12      	cmp	r3, #18
 8001dae:	d123      	bne.n	8001df8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	08da      	lsrs	r2, r3, #3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	3208      	adds	r2, #8
 8001db8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	f003 0307 	and.w	r3, r3, #7
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	220f      	movs	r2, #15
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	691a      	ldr	r2, [r3, #16]
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	f003 0307 	and.w	r3, r3, #7
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	08da      	lsrs	r2, r3, #3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	3208      	adds	r2, #8
 8001df2:	69b9      	ldr	r1, [r7, #24]
 8001df4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	2203      	movs	r2, #3
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f003 0203 	and.w	r2, r3, #3
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	f000 80be 	beq.w	8001fb6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e3a:	4b65      	ldr	r3, [pc, #404]	; (8001fd0 <HAL_GPIO_Init+0x320>)
 8001e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3e:	4a64      	ldr	r2, [pc, #400]	; (8001fd0 <HAL_GPIO_Init+0x320>)
 8001e40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e44:	6453      	str	r3, [r2, #68]	; 0x44
 8001e46:	4b62      	ldr	r3, [pc, #392]	; (8001fd0 <HAL_GPIO_Init+0x320>)
 8001e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001e52:	4a60      	ldr	r2, [pc, #384]	; (8001fd4 <HAL_GPIO_Init+0x324>)
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	089b      	lsrs	r3, r3, #2
 8001e58:	3302      	adds	r3, #2
 8001e5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	f003 0303 	and.w	r3, r3, #3
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	220f      	movs	r2, #15
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	43db      	mvns	r3, r3
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	4013      	ands	r3, r2
 8001e74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a57      	ldr	r2, [pc, #348]	; (8001fd8 <HAL_GPIO_Init+0x328>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d037      	beq.n	8001eee <HAL_GPIO_Init+0x23e>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a56      	ldr	r2, [pc, #344]	; (8001fdc <HAL_GPIO_Init+0x32c>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d031      	beq.n	8001eea <HAL_GPIO_Init+0x23a>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a55      	ldr	r2, [pc, #340]	; (8001fe0 <HAL_GPIO_Init+0x330>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d02b      	beq.n	8001ee6 <HAL_GPIO_Init+0x236>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a54      	ldr	r2, [pc, #336]	; (8001fe4 <HAL_GPIO_Init+0x334>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d025      	beq.n	8001ee2 <HAL_GPIO_Init+0x232>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a53      	ldr	r2, [pc, #332]	; (8001fe8 <HAL_GPIO_Init+0x338>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d01f      	beq.n	8001ede <HAL_GPIO_Init+0x22e>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a52      	ldr	r2, [pc, #328]	; (8001fec <HAL_GPIO_Init+0x33c>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d019      	beq.n	8001eda <HAL_GPIO_Init+0x22a>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a51      	ldr	r2, [pc, #324]	; (8001ff0 <HAL_GPIO_Init+0x340>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d013      	beq.n	8001ed6 <HAL_GPIO_Init+0x226>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a50      	ldr	r2, [pc, #320]	; (8001ff4 <HAL_GPIO_Init+0x344>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d00d      	beq.n	8001ed2 <HAL_GPIO_Init+0x222>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a4f      	ldr	r2, [pc, #316]	; (8001ff8 <HAL_GPIO_Init+0x348>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d007      	beq.n	8001ece <HAL_GPIO_Init+0x21e>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a4e      	ldr	r2, [pc, #312]	; (8001ffc <HAL_GPIO_Init+0x34c>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d101      	bne.n	8001eca <HAL_GPIO_Init+0x21a>
 8001ec6:	2309      	movs	r3, #9
 8001ec8:	e012      	b.n	8001ef0 <HAL_GPIO_Init+0x240>
 8001eca:	230a      	movs	r3, #10
 8001ecc:	e010      	b.n	8001ef0 <HAL_GPIO_Init+0x240>
 8001ece:	2308      	movs	r3, #8
 8001ed0:	e00e      	b.n	8001ef0 <HAL_GPIO_Init+0x240>
 8001ed2:	2307      	movs	r3, #7
 8001ed4:	e00c      	b.n	8001ef0 <HAL_GPIO_Init+0x240>
 8001ed6:	2306      	movs	r3, #6
 8001ed8:	e00a      	b.n	8001ef0 <HAL_GPIO_Init+0x240>
 8001eda:	2305      	movs	r3, #5
 8001edc:	e008      	b.n	8001ef0 <HAL_GPIO_Init+0x240>
 8001ede:	2304      	movs	r3, #4
 8001ee0:	e006      	b.n	8001ef0 <HAL_GPIO_Init+0x240>
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e004      	b.n	8001ef0 <HAL_GPIO_Init+0x240>
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	e002      	b.n	8001ef0 <HAL_GPIO_Init+0x240>
 8001eea:	2301      	movs	r3, #1
 8001eec:	e000      	b.n	8001ef0 <HAL_GPIO_Init+0x240>
 8001eee:	2300      	movs	r3, #0
 8001ef0:	69fa      	ldr	r2, [r7, #28]
 8001ef2:	f002 0203 	and.w	r2, r2, #3
 8001ef6:	0092      	lsls	r2, r2, #2
 8001ef8:	4093      	lsls	r3, r2
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001f00:	4934      	ldr	r1, [pc, #208]	; (8001fd4 <HAL_GPIO_Init+0x324>)
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	089b      	lsrs	r3, r3, #2
 8001f06:	3302      	adds	r3, #2
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f0e:	4b3c      	ldr	r3, [pc, #240]	; (8002000 <HAL_GPIO_Init+0x350>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	43db      	mvns	r3, r3
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f32:	4a33      	ldr	r2, [pc, #204]	; (8002000 <HAL_GPIO_Init+0x350>)
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f38:	4b31      	ldr	r3, [pc, #196]	; (8002000 <HAL_GPIO_Init+0x350>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	43db      	mvns	r3, r3
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	4013      	ands	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d003      	beq.n	8001f5c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f5c:	4a28      	ldr	r2, [pc, #160]	; (8002000 <HAL_GPIO_Init+0x350>)
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f62:	4b27      	ldr	r3, [pc, #156]	; (8002000 <HAL_GPIO_Init+0x350>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f86:	4a1e      	ldr	r2, [pc, #120]	; (8002000 <HAL_GPIO_Init+0x350>)
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f8c:	4b1c      	ldr	r3, [pc, #112]	; (8002000 <HAL_GPIO_Init+0x350>)
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	43db      	mvns	r3, r3
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d003      	beq.n	8001fb0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fb0:	4a13      	ldr	r2, [pc, #76]	; (8002000 <HAL_GPIO_Init+0x350>)
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	61fb      	str	r3, [r7, #28]
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	2b0f      	cmp	r3, #15
 8001fc0:	f67f ae86 	bls.w	8001cd0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001fc4:	bf00      	nop
 8001fc6:	3724      	adds	r7, #36	; 0x24
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	40013800 	.word	0x40013800
 8001fd8:	40020000 	.word	0x40020000
 8001fdc:	40020400 	.word	0x40020400
 8001fe0:	40020800 	.word	0x40020800
 8001fe4:	40020c00 	.word	0x40020c00
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	40021400 	.word	0x40021400
 8001ff0:	40021800 	.word	0x40021800
 8001ff4:	40021c00 	.word	0x40021c00
 8001ff8:	40022000 	.word	0x40022000
 8001ffc:	40022400 	.word	0x40022400
 8002000:	40013c00 	.word	0x40013c00

08002004 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002004:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002006:	b08f      	sub	sp, #60	; 0x3c
 8002008:	af0a      	add	r7, sp, #40	; 0x28
 800200a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d101      	bne.n	8002016 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e116      	b.n	8002244 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002022:	b2db      	uxtb	r3, r3
 8002024:	2b00      	cmp	r3, #0
 8002026:	d106      	bne.n	8002036 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f00e ff31 	bl	8010e98 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2203      	movs	r2, #3
 800203a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002046:	2b00      	cmp	r3, #0
 8002048:	d102      	bne.n	8002050 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4618      	mov	r0, r3
 8002056:	f004 fdd2 	bl	8006bfe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	603b      	str	r3, [r7, #0]
 8002060:	687e      	ldr	r6, [r7, #4]
 8002062:	466d      	mov	r5, sp
 8002064:	f106 0410 	add.w	r4, r6, #16
 8002068:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800206a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800206c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800206e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002070:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002074:	e885 0003 	stmia.w	r5, {r0, r1}
 8002078:	1d33      	adds	r3, r6, #4
 800207a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800207c:	6838      	ldr	r0, [r7, #0]
 800207e:	f004 fcb3 	bl	80069e8 <USB_CoreInit>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d005      	beq.n	8002094 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2202      	movs	r2, #2
 800208c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e0d7      	b.n	8002244 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2100      	movs	r1, #0
 800209a:	4618      	mov	r0, r3
 800209c:	f004 fdc0 	bl	8006c20 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020a0:	2300      	movs	r3, #0
 80020a2:	73fb      	strb	r3, [r7, #15]
 80020a4:	e04a      	b.n	800213c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020a6:	7bfa      	ldrb	r2, [r7, #15]
 80020a8:	6879      	ldr	r1, [r7, #4]
 80020aa:	4613      	mov	r3, r2
 80020ac:	00db      	lsls	r3, r3, #3
 80020ae:	1a9b      	subs	r3, r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	440b      	add	r3, r1
 80020b4:	333d      	adds	r3, #61	; 0x3d
 80020b6:	2201      	movs	r2, #1
 80020b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80020ba:	7bfa      	ldrb	r2, [r7, #15]
 80020bc:	6879      	ldr	r1, [r7, #4]
 80020be:	4613      	mov	r3, r2
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	1a9b      	subs	r3, r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	440b      	add	r3, r1
 80020c8:	333c      	adds	r3, #60	; 0x3c
 80020ca:	7bfa      	ldrb	r2, [r7, #15]
 80020cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80020ce:	7bfa      	ldrb	r2, [r7, #15]
 80020d0:	7bfb      	ldrb	r3, [r7, #15]
 80020d2:	b298      	uxth	r0, r3
 80020d4:	6879      	ldr	r1, [r7, #4]
 80020d6:	4613      	mov	r3, r2
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	1a9b      	subs	r3, r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	440b      	add	r3, r1
 80020e0:	3342      	adds	r3, #66	; 0x42
 80020e2:	4602      	mov	r2, r0
 80020e4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80020e6:	7bfa      	ldrb	r2, [r7, #15]
 80020e8:	6879      	ldr	r1, [r7, #4]
 80020ea:	4613      	mov	r3, r2
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	1a9b      	subs	r3, r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	440b      	add	r3, r1
 80020f4:	333f      	adds	r3, #63	; 0x3f
 80020f6:	2200      	movs	r2, #0
 80020f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80020fa:	7bfa      	ldrb	r2, [r7, #15]
 80020fc:	6879      	ldr	r1, [r7, #4]
 80020fe:	4613      	mov	r3, r2
 8002100:	00db      	lsls	r3, r3, #3
 8002102:	1a9b      	subs	r3, r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	440b      	add	r3, r1
 8002108:	3344      	adds	r3, #68	; 0x44
 800210a:	2200      	movs	r2, #0
 800210c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800210e:	7bfa      	ldrb	r2, [r7, #15]
 8002110:	6879      	ldr	r1, [r7, #4]
 8002112:	4613      	mov	r3, r2
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	1a9b      	subs	r3, r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	440b      	add	r3, r1
 800211c:	3348      	adds	r3, #72	; 0x48
 800211e:	2200      	movs	r2, #0
 8002120:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002122:	7bfa      	ldrb	r2, [r7, #15]
 8002124:	6879      	ldr	r1, [r7, #4]
 8002126:	4613      	mov	r3, r2
 8002128:	00db      	lsls	r3, r3, #3
 800212a:	1a9b      	subs	r3, r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	440b      	add	r3, r1
 8002130:	3350      	adds	r3, #80	; 0x50
 8002132:	2200      	movs	r2, #0
 8002134:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002136:	7bfb      	ldrb	r3, [r7, #15]
 8002138:	3301      	adds	r3, #1
 800213a:	73fb      	strb	r3, [r7, #15]
 800213c:	7bfa      	ldrb	r2, [r7, #15]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	429a      	cmp	r2, r3
 8002144:	d3af      	bcc.n	80020a6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002146:	2300      	movs	r3, #0
 8002148:	73fb      	strb	r3, [r7, #15]
 800214a:	e044      	b.n	80021d6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800214c:	7bfa      	ldrb	r2, [r7, #15]
 800214e:	6879      	ldr	r1, [r7, #4]
 8002150:	4613      	mov	r3, r2
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	1a9b      	subs	r3, r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	440b      	add	r3, r1
 800215a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800215e:	2200      	movs	r2, #0
 8002160:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002162:	7bfa      	ldrb	r2, [r7, #15]
 8002164:	6879      	ldr	r1, [r7, #4]
 8002166:	4613      	mov	r3, r2
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	1a9b      	subs	r3, r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	440b      	add	r3, r1
 8002170:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002174:	7bfa      	ldrb	r2, [r7, #15]
 8002176:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002178:	7bfa      	ldrb	r2, [r7, #15]
 800217a:	6879      	ldr	r1, [r7, #4]
 800217c:	4613      	mov	r3, r2
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	1a9b      	subs	r3, r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	440b      	add	r3, r1
 8002186:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800218a:	2200      	movs	r2, #0
 800218c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800218e:	7bfa      	ldrb	r2, [r7, #15]
 8002190:	6879      	ldr	r1, [r7, #4]
 8002192:	4613      	mov	r3, r2
 8002194:	00db      	lsls	r3, r3, #3
 8002196:	1a9b      	subs	r3, r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	440b      	add	r3, r1
 800219c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80021a4:	7bfa      	ldrb	r2, [r7, #15]
 80021a6:	6879      	ldr	r1, [r7, #4]
 80021a8:	4613      	mov	r3, r2
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	1a9b      	subs	r3, r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	440b      	add	r3, r1
 80021b2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80021b6:	2200      	movs	r2, #0
 80021b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80021ba:	7bfa      	ldrb	r2, [r7, #15]
 80021bc:	6879      	ldr	r1, [r7, #4]
 80021be:	4613      	mov	r3, r2
 80021c0:	00db      	lsls	r3, r3, #3
 80021c2:	1a9b      	subs	r3, r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	440b      	add	r3, r1
 80021c8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021d0:	7bfb      	ldrb	r3, [r7, #15]
 80021d2:	3301      	adds	r3, #1
 80021d4:	73fb      	strb	r3, [r7, #15]
 80021d6:	7bfa      	ldrb	r2, [r7, #15]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d3b5      	bcc.n	800214c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	603b      	str	r3, [r7, #0]
 80021e6:	687e      	ldr	r6, [r7, #4]
 80021e8:	466d      	mov	r5, sp
 80021ea:	f106 0410 	add.w	r4, r6, #16
 80021ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80021fe:	1d33      	adds	r3, r6, #4
 8002200:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002202:	6838      	ldr	r0, [r7, #0]
 8002204:	f004 fd36 	bl	8006c74 <USB_DevInit>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d005      	beq.n	800221a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2202      	movs	r2, #2
 8002212:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e014      	b.n	8002244 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2201      	movs	r2, #1
 8002226:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222e:	2b01      	cmp	r3, #1
 8002230:	d102      	bne.n	8002238 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f001 f880 	bl	8003338 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4618      	mov	r0, r3
 800223e:	f005 fd85 	bl	8007d4c <USB_DevDisconnect>

  return HAL_OK;
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	3714      	adds	r7, #20
 8002248:	46bd      	mov	sp, r7
 800224a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800224c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800225a:	2b01      	cmp	r3, #1
 800225c:	d101      	bne.n	8002262 <HAL_PCD_Start+0x16>
 800225e:	2302      	movs	r3, #2
 8002260:	e012      	b.n	8002288 <HAL_PCD_Start+0x3c>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2201      	movs	r2, #1
 8002266:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DevConnect(hpcd->Instance);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4618      	mov	r0, r3
 8002270:	f005 fd54 	bl	8007d1c <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4618      	mov	r0, r3
 800227a:	f004 fcaf 	bl	8006bdc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	3708      	adds	r7, #8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002290:	b590      	push	{r4, r7, lr}
 8002292:	b08d      	sub	sp, #52	; 0x34
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800229e:	6a3b      	ldr	r3, [r7, #32]
 80022a0:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f005 fdfb 	bl	8007ea2 <USB_GetMode>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	f040 83ca 	bne.w	8002a48 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f005 fd5f 	bl	8007d7c <USB_ReadInterrupts>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	f000 83c0 	beq.w	8002a46 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f005 fd56 	bl	8007d7c <USB_ReadInterrupts>
 80022d0:	4603      	mov	r3, r0
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d107      	bne.n	80022ea <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	695a      	ldr	r2, [r3, #20]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f002 0202 	and.w	r2, r2, #2
 80022e8:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f005 fd44 	bl	8007d7c <USB_ReadInterrupts>
 80022f4:	4603      	mov	r3, r0
 80022f6:	f003 0310 	and.w	r3, r3, #16
 80022fa:	2b10      	cmp	r3, #16
 80022fc:	d161      	bne.n	80023c2 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	699a      	ldr	r2, [r3, #24]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f022 0210 	bic.w	r2, r2, #16
 800230c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800230e:	6a3b      	ldr	r3, [r7, #32]
 8002310:	6a1b      	ldr	r3, [r3, #32]
 8002312:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	f003 020f 	and.w	r2, r3, #15
 800231a:	4613      	mov	r3, r2
 800231c:	00db      	lsls	r3, r3, #3
 800231e:	1a9b      	subs	r3, r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	4413      	add	r3, r2
 800232a:	3304      	adds	r3, #4
 800232c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	0c5b      	lsrs	r3, r3, #17
 8002332:	f003 030f 	and.w	r3, r3, #15
 8002336:	2b02      	cmp	r3, #2
 8002338:	d124      	bne.n	8002384 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002340:	4013      	ands	r3, r2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d035      	beq.n	80023b2 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	091b      	lsrs	r3, r3, #4
 800234e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002350:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002354:	b29b      	uxth	r3, r3
 8002356:	461a      	mov	r2, r3
 8002358:	6a38      	ldr	r0, [r7, #32]
 800235a:	f005 fbbc 	bl	8007ad6 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	68da      	ldr	r2, [r3, #12]
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	091b      	lsrs	r3, r3, #4
 8002366:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800236a:	441a      	add	r2, r3
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	699a      	ldr	r2, [r3, #24]
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	091b      	lsrs	r3, r3, #4
 8002378:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800237c:	441a      	add	r2, r3
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	619a      	str	r2, [r3, #24]
 8002382:	e016      	b.n	80023b2 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	0c5b      	lsrs	r3, r3, #17
 8002388:	f003 030f 	and.w	r3, r3, #15
 800238c:	2b06      	cmp	r3, #6
 800238e:	d110      	bne.n	80023b2 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002396:	2208      	movs	r2, #8
 8002398:	4619      	mov	r1, r3
 800239a:	6a38      	ldr	r0, [r7, #32]
 800239c:	f005 fb9b 	bl	8007ad6 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	699a      	ldr	r2, [r3, #24]
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	091b      	lsrs	r3, r3, #4
 80023a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023ac:	441a      	add	r2, r3
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	699a      	ldr	r2, [r3, #24]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f042 0210 	orr.w	r2, r2, #16
 80023c0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f005 fcd8 	bl	8007d7c <USB_ReadInterrupts>
 80023cc:	4603      	mov	r3, r0
 80023ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023d2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80023d6:	d16e      	bne.n	80024b6 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80023d8:	2300      	movs	r3, #0
 80023da:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f005 fcde 	bl	8007da2 <USB_ReadDevAllOutEpInterrupt>
 80023e6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80023e8:	e062      	b.n	80024b0 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80023ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d057      	beq.n	80024a4 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023fa:	b2d2      	uxtb	r2, r2
 80023fc:	4611      	mov	r1, r2
 80023fe:	4618      	mov	r0, r3
 8002400:	f005 fd03 	bl	8007e0a <USB_ReadDevOutEPInterrupt>
 8002404:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	2b00      	cmp	r3, #0
 800240e:	d00c      	beq.n	800242a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002412:	015a      	lsls	r2, r3, #5
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	4413      	add	r3, r2
 8002418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800241c:	461a      	mov	r2, r3
 800241e:	2301      	movs	r3, #1
 8002420:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002422:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f000 fddd 	bl	8002fe4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	f003 0308 	and.w	r3, r3, #8
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00c      	beq.n	800244e <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002436:	015a      	lsls	r2, r3, #5
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	4413      	add	r3, r2
 800243c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002440:	461a      	mov	r2, r3
 8002442:	2308      	movs	r3, #8
 8002444:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002446:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f000 fed7 	bl	80031fc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	f003 0310 	and.w	r3, r3, #16
 8002454:	2b00      	cmp	r3, #0
 8002456:	d008      	beq.n	800246a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245a:	015a      	lsls	r2, r3, #5
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	4413      	add	r3, r2
 8002460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002464:	461a      	mov	r2, r3
 8002466:	2310      	movs	r3, #16
 8002468:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	f003 0320 	and.w	r3, r3, #32
 8002470:	2b00      	cmp	r3, #0
 8002472:	d008      	beq.n	8002486 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002476:	015a      	lsls	r2, r3, #5
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	4413      	add	r3, r2
 800247c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002480:	461a      	mov	r2, r3
 8002482:	2320      	movs	r3, #32
 8002484:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d009      	beq.n	80024a4 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002492:	015a      	lsls	r2, r3, #5
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	4413      	add	r3, r2
 8002498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800249c:	461a      	mov	r2, r3
 800249e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024a2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80024a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a6:	3301      	adds	r3, #1
 80024a8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80024aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ac:	085b      	lsrs	r3, r3, #1
 80024ae:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80024b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d199      	bne.n	80023ea <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f005 fc5e 	bl	8007d7c <USB_ReadInterrupts>
 80024c0:	4603      	mov	r3, r0
 80024c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80024ca:	f040 80c0 	bne.w	800264e <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f005 fc7f 	bl	8007dd6 <USB_ReadDevAllInEpInterrupt>
 80024d8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80024da:	2300      	movs	r3, #0
 80024dc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80024de:	e0b2      	b.n	8002646 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80024e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	f000 80a7 	beq.w	800263a <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024f2:	b2d2      	uxtb	r2, r2
 80024f4:	4611      	mov	r1, r2
 80024f6:	4618      	mov	r0, r3
 80024f8:	f005 fca5 	bl	8007e46 <USB_ReadDevInEPInterrupt>
 80024fc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	2b00      	cmp	r3, #0
 8002506:	d057      	beq.n	80025b8 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250a:	f003 030f 	and.w	r3, r3, #15
 800250e:	2201      	movs	r2, #1
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800251c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	43db      	mvns	r3, r3
 8002522:	69f9      	ldr	r1, [r7, #28]
 8002524:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002528:	4013      	ands	r3, r2
 800252a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800252c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252e:	015a      	lsls	r2, r3, #5
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	4413      	add	r3, r2
 8002534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002538:	461a      	mov	r2, r3
 800253a:	2301      	movs	r3, #1
 800253c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d132      	bne.n	80025ac <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002546:	6879      	ldr	r1, [r7, #4]
 8002548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800254a:	4613      	mov	r3, r2
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	1a9b      	subs	r3, r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	440b      	add	r3, r1
 8002554:	3348      	adds	r3, #72	; 0x48
 8002556:	6819      	ldr	r1, [r3, #0]
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800255c:	4613      	mov	r3, r2
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	1a9b      	subs	r3, r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	4403      	add	r3, r0
 8002566:	3344      	adds	r3, #68	; 0x44
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4419      	add	r1, r3
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002570:	4613      	mov	r3, r2
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	1a9b      	subs	r3, r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	4403      	add	r3, r0
 800257a:	3348      	adds	r3, #72	; 0x48
 800257c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800257e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002580:	2b00      	cmp	r3, #0
 8002582:	d113      	bne.n	80025ac <HAL_PCD_IRQHandler+0x31c>
 8002584:	6879      	ldr	r1, [r7, #4]
 8002586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002588:	4613      	mov	r3, r2
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	1a9b      	subs	r3, r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	440b      	add	r3, r1
 8002592:	3350      	adds	r3, #80	; 0x50
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d108      	bne.n	80025ac <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6818      	ldr	r0, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80025a4:	461a      	mov	r2, r3
 80025a6:	2101      	movs	r1, #1
 80025a8:	f005 fcae 	bl	8007f08 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80025ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	4619      	mov	r1, r3
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f00e fcf3 	bl	8010f9e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	f003 0308 	and.w	r3, r3, #8
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d008      	beq.n	80025d4 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	015a      	lsls	r2, r3, #5
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	4413      	add	r3, r2
 80025ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025ce:	461a      	mov	r2, r3
 80025d0:	2308      	movs	r3, #8
 80025d2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	f003 0310 	and.w	r3, r3, #16
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d008      	beq.n	80025f0 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80025de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e0:	015a      	lsls	r2, r3, #5
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	4413      	add	r3, r2
 80025e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025ea:	461a      	mov	r2, r3
 80025ec:	2310      	movs	r3, #16
 80025ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d008      	beq.n	800260c <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80025fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fc:	015a      	lsls	r2, r3, #5
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	4413      	add	r3, r2
 8002602:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002606:	461a      	mov	r2, r3
 8002608:	2340      	movs	r3, #64	; 0x40
 800260a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d008      	beq.n	8002628 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002618:	015a      	lsls	r2, r3, #5
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	4413      	add	r3, r2
 800261e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002622:	461a      	mov	r2, r3
 8002624:	2302      	movs	r3, #2
 8002626:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800262e:	2b00      	cmp	r3, #0
 8002630:	d003      	beq.n	800263a <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002632:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f000 fc48 	bl	8002eca <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263c:	3301      	adds	r3, #1
 800263e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002642:	085b      	lsrs	r3, r3, #1
 8002644:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002648:	2b00      	cmp	r3, #0
 800264a:	f47f af49 	bne.w	80024e0 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	f005 fb92 	bl	8007d7c <USB_ReadInterrupts>
 8002658:	4603      	mov	r3, r0
 800265a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800265e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002662:	d122      	bne.n	80026aa <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	69fa      	ldr	r2, [r7, #28]
 800266e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002672:	f023 0301 	bic.w	r3, r3, #1
 8002676:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800267e:	2b01      	cmp	r3, #1
 8002680:	d108      	bne.n	8002694 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800268a:	2100      	movs	r1, #0
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f00e fed5 	bl	801143c <HAL_PCDEx_LPM_Callback>
 8002692:	e002      	b.n	800269a <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f00e fcf9 	bl	801108c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	695a      	ldr	r2, [r3, #20]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80026a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f005 fb64 	bl	8007d7c <USB_ReadInterrupts>
 80026b4:	4603      	mov	r3, r0
 80026b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026be:	d112      	bne.n	80026e6 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f003 0301 	and.w	r3, r3, #1
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d102      	bne.n	80026d6 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f00e fcb5 	bl	8011040 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	695a      	ldr	r2, [r3, #20]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80026e4:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f005 fb46 	bl	8007d7c <USB_ReadInterrupts>
 80026f0:	4603      	mov	r3, r0
 80026f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026fa:	d121      	bne.n	8002740 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	695a      	ldr	r2, [r3, #20]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800270a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002712:	2b00      	cmp	r3, #0
 8002714:	d111      	bne.n	800273a <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2201      	movs	r2, #1
 800271a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002724:	089b      	lsrs	r3, r3, #2
 8002726:	f003 020f 	and.w	r2, r3, #15
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002730:	2101      	movs	r1, #1
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f00e fe82 	bl	801143c <HAL_PCDEx_LPM_Callback>
 8002738:	e002      	b.n	8002740 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f00e fc80 	bl	8011040 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4618      	mov	r0, r3
 8002746:	f005 fb19 	bl	8007d7c <USB_ReadInterrupts>
 800274a:	4603      	mov	r3, r0
 800274c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002750:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002754:	f040 80c7 	bne.w	80028e6 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	69fa      	ldr	r2, [r7, #28]
 8002762:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002766:	f023 0301 	bic.w	r3, r3, #1
 800276a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2110      	movs	r1, #16
 8002772:	4618      	mov	r0, r3
 8002774:	f004 fbec 	bl	8006f50 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002778:	2300      	movs	r3, #0
 800277a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800277c:	e056      	b.n	800282c <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800277e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002780:	015a      	lsls	r2, r3, #5
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	4413      	add	r3, r2
 8002786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800278a:	461a      	mov	r2, r3
 800278c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002790:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002794:	015a      	lsls	r2, r3, #5
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	4413      	add	r3, r2
 800279a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027a2:	0151      	lsls	r1, r2, #5
 80027a4:	69fa      	ldr	r2, [r7, #28]
 80027a6:	440a      	add	r2, r1
 80027a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80027ac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80027b0:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80027b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b4:	015a      	lsls	r2, r3, #5
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	4413      	add	r3, r2
 80027ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027c2:	0151      	lsls	r1, r2, #5
 80027c4:	69fa      	ldr	r2, [r7, #28]
 80027c6:	440a      	add	r2, r1
 80027c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80027cc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80027d0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80027d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d4:	015a      	lsls	r2, r3, #5
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	4413      	add	r3, r2
 80027da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027de:	461a      	mov	r2, r3
 80027e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80027e4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80027e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e8:	015a      	lsls	r2, r3, #5
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	4413      	add	r3, r2
 80027ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027f6:	0151      	lsls	r1, r2, #5
 80027f8:	69fa      	ldr	r2, [r7, #28]
 80027fa:	440a      	add	r2, r1
 80027fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002800:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002804:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002808:	015a      	lsls	r2, r3, #5
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	4413      	add	r3, r2
 800280e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002816:	0151      	lsls	r1, r2, #5
 8002818:	69fa      	ldr	r2, [r7, #28]
 800281a:	440a      	add	r2, r1
 800281c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002820:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002824:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002828:	3301      	adds	r3, #1
 800282a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002832:	429a      	cmp	r2, r3
 8002834:	d3a3      	bcc.n	800277e <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800283c:	69db      	ldr	r3, [r3, #28]
 800283e:	69fa      	ldr	r2, [r7, #28]
 8002840:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002844:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002848:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	2b00      	cmp	r3, #0
 8002850:	d016      	beq.n	8002880 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002858:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800285c:	69fa      	ldr	r2, [r7, #28]
 800285e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002862:	f043 030b 	orr.w	r3, r3, #11
 8002866:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002872:	69fa      	ldr	r2, [r7, #28]
 8002874:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002878:	f043 030b 	orr.w	r3, r3, #11
 800287c:	6453      	str	r3, [r2, #68]	; 0x44
 800287e:	e015      	b.n	80028ac <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002886:	695a      	ldr	r2, [r3, #20]
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800288e:	4619      	mov	r1, r3
 8002890:	f242 032b 	movw	r3, #8235	; 0x202b
 8002894:	4313      	orrs	r3, r2
 8002896:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	69fa      	ldr	r2, [r7, #28]
 80028a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028a6:	f043 030b 	orr.w	r3, r3, #11
 80028aa:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	69fa      	ldr	r2, [r7, #28]
 80028b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028ba:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80028be:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6818      	ldr	r0, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80028d0:	461a      	mov	r2, r3
 80028d2:	f005 fb19 	bl	8007f08 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	695a      	ldr	r2, [r3, #20]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80028e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f005 fa46 	bl	8007d7c <USB_ReadInterrupts>
 80028f0:	4603      	mov	r3, r0
 80028f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028fa:	d124      	bne.n	8002946 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4618      	mov	r0, r3
 8002902:	f005 fadd 	bl	8007ec0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4618      	mov	r0, r3
 800290c:	f004 fb81 	bl	8007012 <USB_GetDevSpeed>
 8002910:	4603      	mov	r3, r0
 8002912:	461a      	mov	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681c      	ldr	r4, [r3, #0]
 800291c:	f001 f998 	bl	8003c50 <HAL_RCC_GetHCLKFreq>
 8002920:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002926:	b2db      	uxtb	r3, r3
 8002928:	461a      	mov	r2, r3
 800292a:	4620      	mov	r0, r4
 800292c:	f004 f8b4 	bl	8006a98 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f00e fb5c 	bl	8010fee <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	695a      	ldr	r2, [r3, #20]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002944:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4618      	mov	r0, r3
 800294c:	f005 fa16 	bl	8007d7c <USB_ReadInterrupts>
 8002950:	4603      	mov	r3, r0
 8002952:	f003 0308 	and.w	r3, r3, #8
 8002956:	2b08      	cmp	r3, #8
 8002958:	d10a      	bne.n	8002970 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f00e fb39 	bl	8010fd2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	695a      	ldr	r2, [r3, #20]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f002 0208 	and.w	r2, r2, #8
 800296e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4618      	mov	r0, r3
 8002976:	f005 fa01 	bl	8007d7c <USB_ReadInterrupts>
 800297a:	4603      	mov	r3, r0
 800297c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002980:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002984:	d10f      	bne.n	80029a6 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002986:	2300      	movs	r3, #0
 8002988:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298c:	b2db      	uxtb	r3, r3
 800298e:	4619      	mov	r1, r3
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f00e fb9b 	bl	80110cc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	695a      	ldr	r2, [r3, #20]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80029a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f005 f9e6 	bl	8007d7c <USB_ReadInterrupts>
 80029b0:	4603      	mov	r3, r0
 80029b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029ba:	d10f      	bne.n	80029dc <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80029bc:	2300      	movs	r3, #0
 80029be:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80029c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	4619      	mov	r1, r3
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f00e fb6e 	bl	80110a8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	695a      	ldr	r2, [r3, #20]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80029da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f005 f9cb 	bl	8007d7c <USB_ReadInterrupts>
 80029e6:	4603      	mov	r3, r0
 80029e8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80029ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029f0:	d10a      	bne.n	8002a08 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f00e fb7c 	bl	80110f0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	695a      	ldr	r2, [r3, #20]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002a06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f005 f9b5 	bl	8007d7c <USB_ReadInterrupts>
 8002a12:	4603      	mov	r3, r0
 8002a14:	f003 0304 	and.w	r3, r3, #4
 8002a18:	2b04      	cmp	r3, #4
 8002a1a:	d115      	bne.n	8002a48 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	f003 0304 	and.w	r3, r3, #4
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d002      	beq.n	8002a34 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f00e fb6c 	bl	801110c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	6859      	ldr	r1, [r3, #4]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	69ba      	ldr	r2, [r7, #24]
 8002a40:	430a      	orrs	r2, r1
 8002a42:	605a      	str	r2, [r3, #4]
 8002a44:	e000      	b.n	8002a48 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8002a46:	bf00      	nop
    }
  }
}
 8002a48:	3734      	adds	r7, #52	; 0x34
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd90      	pop	{r4, r7, pc}

08002a4e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b082      	sub	sp, #8
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
 8002a56:	460b      	mov	r3, r1
 8002a58:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d101      	bne.n	8002a68 <HAL_PCD_SetAddress+0x1a>
 8002a64:	2302      	movs	r3, #2
 8002a66:	e013      	b.n	8002a90 <HAL_PCD_SetAddress+0x42>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	78fa      	ldrb	r2, [r7, #3]
 8002a74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	78fa      	ldrb	r2, [r7, #3]
 8002a7e:	4611      	mov	r1, r2
 8002a80:	4618      	mov	r0, r3
 8002a82:	f005 f925 	bl	8007cd0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3708      	adds	r7, #8
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	4608      	mov	r0, r1
 8002aa2:	4611      	mov	r1, r2
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	70fb      	strb	r3, [r7, #3]
 8002aaa:	460b      	mov	r3, r1
 8002aac:	803b      	strh	r3, [r7, #0]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ab6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	da0f      	bge.n	8002ade <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002abe:	78fb      	ldrb	r3, [r7, #3]
 8002ac0:	f003 020f 	and.w	r2, r3, #15
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	00db      	lsls	r3, r3, #3
 8002ac8:	1a9b      	subs	r3, r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	3338      	adds	r3, #56	; 0x38
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	3304      	adds	r3, #4
 8002ad4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	705a      	strb	r2, [r3, #1]
 8002adc:	e00f      	b.n	8002afe <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ade:	78fb      	ldrb	r3, [r7, #3]
 8002ae0:	f003 020f 	and.w	r2, r3, #15
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	00db      	lsls	r3, r3, #3
 8002ae8:	1a9b      	subs	r3, r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	4413      	add	r3, r2
 8002af4:	3304      	adds	r3, #4
 8002af6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2200      	movs	r2, #0
 8002afc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002afe:	78fb      	ldrb	r3, [r7, #3]
 8002b00:	f003 030f 	and.w	r3, r3, #15
 8002b04:	b2da      	uxtb	r2, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002b0a:	883a      	ldrh	r2, [r7, #0]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	78ba      	ldrb	r2, [r7, #2]
 8002b14:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	785b      	ldrb	r3, [r3, #1]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d004      	beq.n	8002b28 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002b28:	78bb      	ldrb	r3, [r7, #2]
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d102      	bne.n	8002b34 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2200      	movs	r2, #0
 8002b32:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d101      	bne.n	8002b42 <HAL_PCD_EP_Open+0xaa>
 8002b3e:	2302      	movs	r3, #2
 8002b40:	e00e      	b.n	8002b60 <HAL_PCD_EP_Open+0xc8>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68f9      	ldr	r1, [r7, #12]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f004 fa83 	bl	800705c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002b5e:	7afb      	ldrb	r3, [r7, #11]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3710      	adds	r7, #16
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	460b      	mov	r3, r1
 8002b72:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	da0f      	bge.n	8002b9c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b7c:	78fb      	ldrb	r3, [r7, #3]
 8002b7e:	f003 020f 	and.w	r2, r3, #15
 8002b82:	4613      	mov	r3, r2
 8002b84:	00db      	lsls	r3, r3, #3
 8002b86:	1a9b      	subs	r3, r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	3338      	adds	r3, #56	; 0x38
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	4413      	add	r3, r2
 8002b90:	3304      	adds	r3, #4
 8002b92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2201      	movs	r2, #1
 8002b98:	705a      	strb	r2, [r3, #1]
 8002b9a:	e00f      	b.n	8002bbc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b9c:	78fb      	ldrb	r3, [r7, #3]
 8002b9e:	f003 020f 	and.w	r2, r3, #15
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	00db      	lsls	r3, r3, #3
 8002ba6:	1a9b      	subs	r3, r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	3304      	adds	r3, #4
 8002bb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002bbc:	78fb      	ldrb	r3, [r7, #3]
 8002bbe:	f003 030f 	and.w	r3, r3, #15
 8002bc2:	b2da      	uxtb	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d101      	bne.n	8002bd6 <HAL_PCD_EP_Close+0x6e>
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	e00e      	b.n	8002bf4 <HAL_PCD_EP_Close+0x8c>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68f9      	ldr	r1, [r7, #12]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f004 fac1 	bl	800716c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3710      	adds	r7, #16
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b086      	sub	sp, #24
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	607a      	str	r2, [r7, #4]
 8002c06:	603b      	str	r3, [r7, #0]
 8002c08:	460b      	mov	r3, r1
 8002c0a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c0c:	7afb      	ldrb	r3, [r7, #11]
 8002c0e:	f003 020f 	and.w	r2, r3, #15
 8002c12:	4613      	mov	r3, r2
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	1a9b      	subs	r3, r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	4413      	add	r3, r2
 8002c22:	3304      	adds	r3, #4
 8002c24:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	683a      	ldr	r2, [r7, #0]
 8002c30:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	2200      	movs	r2, #0
 8002c36:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c3e:	7afb      	ldrb	r3, [r7, #11]
 8002c40:	f003 030f 	and.w	r3, r3, #15
 8002c44:	b2da      	uxtb	r2, r3
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d102      	bne.n	8002c58 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c58:	7afb      	ldrb	r3, [r7, #11]
 8002c5a:	f003 030f 	and.w	r3, r3, #15
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d109      	bne.n	8002c76 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6818      	ldr	r0, [r3, #0]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	6979      	ldr	r1, [r7, #20]
 8002c70:	f004 fda4 	bl	80077bc <USB_EP0StartXfer>
 8002c74:	e008      	b.n	8002c88 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6818      	ldr	r0, [r3, #0]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	461a      	mov	r2, r3
 8002c82:	6979      	ldr	r1, [r7, #20]
 8002c84:	f004 fb4e 	bl	8007324 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3718      	adds	r7, #24
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c92:	b480      	push	{r7}
 8002c94:	b083      	sub	sp, #12
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002c9e:	78fb      	ldrb	r3, [r7, #3]
 8002ca0:	f003 020f 	and.w	r2, r3, #15
 8002ca4:	6879      	ldr	r1, [r7, #4]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	00db      	lsls	r3, r3, #3
 8002caa:	1a9b      	subs	r3, r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	440b      	add	r3, r1
 8002cb0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002cb4:	681b      	ldr	r3, [r3, #0]
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr

08002cc2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b086      	sub	sp, #24
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	60f8      	str	r0, [r7, #12]
 8002cca:	607a      	str	r2, [r7, #4]
 8002ccc:	603b      	str	r3, [r7, #0]
 8002cce:	460b      	mov	r3, r1
 8002cd0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cd2:	7afb      	ldrb	r3, [r7, #11]
 8002cd4:	f003 020f 	and.w	r2, r3, #15
 8002cd8:	4613      	mov	r3, r2
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	1a9b      	subs	r3, r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	3338      	adds	r3, #56	; 0x38
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	3304      	adds	r3, #4
 8002ce8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	683a      	ldr	r2, [r7, #0]
 8002cf4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d02:	7afb      	ldrb	r3, [r7, #11]
 8002d04:	f003 030f 	and.w	r3, r3, #15
 8002d08:	b2da      	uxtb	r2, r3
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	691b      	ldr	r3, [r3, #16]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d102      	bne.n	8002d1c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d1c:	7afb      	ldrb	r3, [r7, #11]
 8002d1e:	f003 030f 	and.w	r3, r3, #15
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d109      	bne.n	8002d3a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6818      	ldr	r0, [r3, #0]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	461a      	mov	r2, r3
 8002d32:	6979      	ldr	r1, [r7, #20]
 8002d34:	f004 fd42 	bl	80077bc <USB_EP0StartXfer>
 8002d38:	e008      	b.n	8002d4c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6818      	ldr	r0, [r3, #0]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	461a      	mov	r2, r3
 8002d46:	6979      	ldr	r1, [r7, #20]
 8002d48:	f004 faec 	bl	8007324 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3718      	adds	r7, #24
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b084      	sub	sp, #16
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
 8002d5e:	460b      	mov	r3, r1
 8002d60:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002d62:	78fb      	ldrb	r3, [r7, #3]
 8002d64:	f003 020f 	and.w	r2, r3, #15
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d901      	bls.n	8002d74 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e050      	b.n	8002e16 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	da0f      	bge.n	8002d9c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d7c:	78fb      	ldrb	r3, [r7, #3]
 8002d7e:	f003 020f 	and.w	r2, r3, #15
 8002d82:	4613      	mov	r3, r2
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	1a9b      	subs	r3, r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	3338      	adds	r3, #56	; 0x38
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	4413      	add	r3, r2
 8002d90:	3304      	adds	r3, #4
 8002d92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2201      	movs	r2, #1
 8002d98:	705a      	strb	r2, [r3, #1]
 8002d9a:	e00d      	b.n	8002db8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002d9c:	78fa      	ldrb	r2, [r7, #3]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	00db      	lsls	r3, r3, #3
 8002da2:	1a9b      	subs	r3, r3, r2
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	4413      	add	r3, r2
 8002dae:	3304      	adds	r3, #4
 8002db0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dbe:	78fb      	ldrb	r3, [r7, #3]
 8002dc0:	f003 030f 	and.w	r3, r3, #15
 8002dc4:	b2da      	uxtb	r2, r3
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d101      	bne.n	8002dd8 <HAL_PCD_EP_SetStall+0x82>
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	e01e      	b.n	8002e16 <HAL_PCD_EP_SetStall+0xc0>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68f9      	ldr	r1, [r7, #12]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f004 fe9e 	bl	8007b28 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002dec:	78fb      	ldrb	r3, [r7, #3]
 8002dee:	f003 030f 	and.w	r3, r3, #15
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d10a      	bne.n	8002e0c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6818      	ldr	r0, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	b2d9      	uxtb	r1, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002e06:	461a      	mov	r2, r3
 8002e08:	f005 f87e 	bl	8007f08 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3710      	adds	r7, #16
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b084      	sub	sp, #16
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
 8002e26:	460b      	mov	r3, r1
 8002e28:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002e2a:	78fb      	ldrb	r3, [r7, #3]
 8002e2c:	f003 020f 	and.w	r2, r3, #15
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d901      	bls.n	8002e3c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e042      	b.n	8002ec2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	da0f      	bge.n	8002e64 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e44:	78fb      	ldrb	r3, [r7, #3]
 8002e46:	f003 020f 	and.w	r2, r3, #15
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	00db      	lsls	r3, r3, #3
 8002e4e:	1a9b      	subs	r3, r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	3338      	adds	r3, #56	; 0x38
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	4413      	add	r3, r2
 8002e58:	3304      	adds	r3, #4
 8002e5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	705a      	strb	r2, [r3, #1]
 8002e62:	e00f      	b.n	8002e84 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e64:	78fb      	ldrb	r3, [r7, #3]
 8002e66:	f003 020f 	and.w	r2, r3, #15
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	00db      	lsls	r3, r3, #3
 8002e6e:	1a9b      	subs	r3, r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	4413      	add	r3, r2
 8002e7a:	3304      	adds	r3, #4
 8002e7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2200      	movs	r2, #0
 8002e82:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e8a:	78fb      	ldrb	r3, [r7, #3]
 8002e8c:	f003 030f 	and.w	r3, r3, #15
 8002e90:	b2da      	uxtb	r2, r3
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d101      	bne.n	8002ea4 <HAL_PCD_EP_ClrStall+0x86>
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	e00e      	b.n	8002ec2 <HAL_PCD_EP_ClrStall+0xa4>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68f9      	ldr	r1, [r7, #12]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f004 fea6 	bl	8007c04 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b08a      	sub	sp, #40	; 0x28
 8002ece:	af02      	add	r7, sp, #8
 8002ed0:	6078      	str	r0, [r7, #4]
 8002ed2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002ede:	683a      	ldr	r2, [r7, #0]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	00db      	lsls	r3, r3, #3
 8002ee4:	1a9b      	subs	r3, r3, r2
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	3338      	adds	r3, #56	; 0x38
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	4413      	add	r3, r2
 8002eee:	3304      	adds	r3, #4
 8002ef0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	699a      	ldr	r2, [r3, #24]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d901      	bls.n	8002f02 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e06c      	b.n	8002fdc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	695a      	ldr	r2, [r3, #20]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	69fa      	ldr	r2, [r7, #28]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d902      	bls.n	8002f1e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	3303      	adds	r3, #3
 8002f22:	089b      	lsrs	r3, r3, #2
 8002f24:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f26:	e02b      	b.n	8002f80 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	695a      	ldr	r2, [r3, #20]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	69fa      	ldr	r2, [r7, #28]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d902      	bls.n	8002f44 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	3303      	adds	r3, #3
 8002f48:	089b      	lsrs	r3, r3, #2
 8002f4a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	68d9      	ldr	r1, [r3, #12]
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	b2da      	uxtb	r2, r3
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	9300      	str	r3, [sp, #0]
 8002f60:	4603      	mov	r3, r0
 8002f62:	6978      	ldr	r0, [r7, #20]
 8002f64:	f004 fd82 	bl	8007a6c <USB_WritePacket>

    ep->xfer_buff  += len;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	68da      	ldr	r2, [r3, #12]
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	441a      	add	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	699a      	ldr	r2, [r3, #24]
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	441a      	add	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	015a      	lsls	r2, r3, #5
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	4413      	add	r3, r2
 8002f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d809      	bhi.n	8002faa <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	699a      	ldr	r2, [r3, #24]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d203      	bcs.n	8002faa <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1be      	bne.n	8002f28 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	695a      	ldr	r2, [r3, #20]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d811      	bhi.n	8002fda <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	f003 030f 	and.w	r3, r3, #15
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	43db      	mvns	r3, r3
 8002fd0:	6939      	ldr	r1, [r7, #16]
 8002fd2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3720      	adds	r7, #32
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b086      	sub	sp, #24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	333c      	adds	r3, #60	; 0x3c
 8002ffc:	3304      	adds	r3, #4
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	015a      	lsls	r2, r3, #5
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	4413      	add	r3, r2
 800300a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	2b01      	cmp	r3, #1
 8003018:	f040 80a0 	bne.w	800315c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	f003 0308 	and.w	r3, r3, #8
 8003022:	2b00      	cmp	r3, #0
 8003024:	d015      	beq.n	8003052 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	4a72      	ldr	r2, [pc, #456]	; (80031f4 <PCD_EP_OutXfrComplete_int+0x210>)
 800302a:	4293      	cmp	r3, r2
 800302c:	f240 80dd 	bls.w	80031ea <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003036:	2b00      	cmp	r3, #0
 8003038:	f000 80d7 	beq.w	80031ea <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	015a      	lsls	r2, r3, #5
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	4413      	add	r3, r2
 8003044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003048:	461a      	mov	r2, r3
 800304a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800304e:	6093      	str	r3, [r2, #8]
 8003050:	e0cb      	b.n	80031ea <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	f003 0320 	and.w	r3, r3, #32
 8003058:	2b00      	cmp	r3, #0
 800305a:	d009      	beq.n	8003070 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	015a      	lsls	r2, r3, #5
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	4413      	add	r3, r2
 8003064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003068:	461a      	mov	r2, r3
 800306a:	2320      	movs	r3, #32
 800306c:	6093      	str	r3, [r2, #8]
 800306e:	e0bc      	b.n	80031ea <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003076:	2b00      	cmp	r3, #0
 8003078:	f040 80b7 	bne.w	80031ea <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	4a5d      	ldr	r2, [pc, #372]	; (80031f4 <PCD_EP_OutXfrComplete_int+0x210>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d90f      	bls.n	80030a4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00a      	beq.n	80030a4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	015a      	lsls	r2, r3, #5
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	4413      	add	r3, r2
 8003096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800309a:	461a      	mov	r2, r3
 800309c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030a0:	6093      	str	r3, [r2, #8]
 80030a2:	e0a2      	b.n	80031ea <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80030a4:	6879      	ldr	r1, [r7, #4]
 80030a6:	683a      	ldr	r2, [r7, #0]
 80030a8:	4613      	mov	r3, r2
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	1a9b      	subs	r3, r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	440b      	add	r3, r1
 80030b2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80030b6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	0159      	lsls	r1, r3, #5
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	440b      	add	r3, r1
 80030c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80030ca:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	683a      	ldr	r2, [r7, #0]
 80030d0:	4613      	mov	r3, r2
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	1a9b      	subs	r3, r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	4403      	add	r3, r0
 80030da:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80030de:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80030e0:	6879      	ldr	r1, [r7, #4]
 80030e2:	683a      	ldr	r2, [r7, #0]
 80030e4:	4613      	mov	r3, r2
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	1a9b      	subs	r3, r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	440b      	add	r3, r1
 80030ee:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80030f2:	6819      	ldr	r1, [r3, #0]
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	683a      	ldr	r2, [r7, #0]
 80030f8:	4613      	mov	r3, r2
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	1a9b      	subs	r3, r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	4403      	add	r3, r0
 8003102:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4419      	add	r1, r3
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	683a      	ldr	r2, [r7, #0]
 800310e:	4613      	mov	r3, r2
 8003110:	00db      	lsls	r3, r3, #3
 8003112:	1a9b      	subs	r3, r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	4403      	add	r3, r0
 8003118:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800311c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d114      	bne.n	800314e <PCD_EP_OutXfrComplete_int+0x16a>
 8003124:	6879      	ldr	r1, [r7, #4]
 8003126:	683a      	ldr	r2, [r7, #0]
 8003128:	4613      	mov	r3, r2
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	1a9b      	subs	r3, r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	440b      	add	r3, r1
 8003132:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d108      	bne.n	800314e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6818      	ldr	r0, [r3, #0]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003146:	461a      	mov	r2, r3
 8003148:	2101      	movs	r1, #1
 800314a:	f004 fedd 	bl	8007f08 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	b2db      	uxtb	r3, r3
 8003152:	4619      	mov	r1, r3
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f00d ff07 	bl	8010f68 <HAL_PCD_DataOutStageCallback>
 800315a:	e046      	b.n	80031ea <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	4a26      	ldr	r2, [pc, #152]	; (80031f8 <PCD_EP_OutXfrComplete_int+0x214>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d124      	bne.n	80031ae <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00a      	beq.n	8003184 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	015a      	lsls	r2, r3, #5
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	4413      	add	r3, r2
 8003176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800317a:	461a      	mov	r2, r3
 800317c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003180:	6093      	str	r3, [r2, #8]
 8003182:	e032      	b.n	80031ea <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	f003 0320 	and.w	r3, r3, #32
 800318a:	2b00      	cmp	r3, #0
 800318c:	d008      	beq.n	80031a0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	015a      	lsls	r2, r3, #5
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	4413      	add	r3, r2
 8003196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800319a:	461a      	mov	r2, r3
 800319c:	2320      	movs	r3, #32
 800319e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	4619      	mov	r1, r3
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f00d fede 	bl	8010f68 <HAL_PCD_DataOutStageCallback>
 80031ac:	e01d      	b.n	80031ea <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d114      	bne.n	80031de <PCD_EP_OutXfrComplete_int+0x1fa>
 80031b4:	6879      	ldr	r1, [r7, #4]
 80031b6:	683a      	ldr	r2, [r7, #0]
 80031b8:	4613      	mov	r3, r2
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	1a9b      	subs	r3, r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	440b      	add	r3, r1
 80031c2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d108      	bne.n	80031de <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6818      	ldr	r0, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80031d6:	461a      	mov	r2, r3
 80031d8:	2100      	movs	r1, #0
 80031da:	f004 fe95 	bl	8007f08 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	4619      	mov	r1, r3
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f00d febf 	bl	8010f68 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3718      	adds	r7, #24
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	4f54300a 	.word	0x4f54300a
 80031f8:	4f54310a 	.word	0x4f54310a

080031fc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b086      	sub	sp, #24
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	333c      	adds	r3, #60	; 0x3c
 8003214:	3304      	adds	r3, #4
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	015a      	lsls	r2, r3, #5
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	4413      	add	r3, r2
 8003222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	4a15      	ldr	r2, [pc, #84]	; (8003284 <PCD_EP_OutSetupPacket_int+0x88>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d90e      	bls.n	8003250 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003238:	2b00      	cmp	r3, #0
 800323a:	d009      	beq.n	8003250 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	015a      	lsls	r2, r3, #5
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	4413      	add	r3, r2
 8003244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003248:	461a      	mov	r2, r3
 800324a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800324e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f00d fe77 	bl	8010f44 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	4a0a      	ldr	r2, [pc, #40]	; (8003284 <PCD_EP_OutSetupPacket_int+0x88>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d90c      	bls.n	8003278 <PCD_EP_OutSetupPacket_int+0x7c>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d108      	bne.n	8003278 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6818      	ldr	r0, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003270:	461a      	mov	r2, r3
 8003272:	2101      	movs	r1, #1
 8003274:	f004 fe48 	bl	8007f08 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3718      	adds	r7, #24
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	4f54300a 	.word	0x4f54300a

08003288 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003288:	b480      	push	{r7}
 800328a:	b085      	sub	sp, #20
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	460b      	mov	r3, r1
 8003292:	70fb      	strb	r3, [r7, #3]
 8003294:	4613      	mov	r3, r2
 8003296:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80032a0:	78fb      	ldrb	r3, [r7, #3]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d107      	bne.n	80032b6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80032a6:	883b      	ldrh	r3, [r7, #0]
 80032a8:	0419      	lsls	r1, r3, #16
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68ba      	ldr	r2, [r7, #8]
 80032b0:	430a      	orrs	r2, r1
 80032b2:	629a      	str	r2, [r3, #40]	; 0x28
 80032b4:	e028      	b.n	8003308 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032bc:	0c1b      	lsrs	r3, r3, #16
 80032be:	68ba      	ldr	r2, [r7, #8]
 80032c0:	4413      	add	r3, r2
 80032c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80032c4:	2300      	movs	r3, #0
 80032c6:	73fb      	strb	r3, [r7, #15]
 80032c8:	e00d      	b.n	80032e6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	7bfb      	ldrb	r3, [r7, #15]
 80032d0:	3340      	adds	r3, #64	; 0x40
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	4413      	add	r3, r2
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	0c1b      	lsrs	r3, r3, #16
 80032da:	68ba      	ldr	r2, [r7, #8]
 80032dc:	4413      	add	r3, r2
 80032de:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80032e0:	7bfb      	ldrb	r3, [r7, #15]
 80032e2:	3301      	adds	r3, #1
 80032e4:	73fb      	strb	r3, [r7, #15]
 80032e6:	7bfa      	ldrb	r2, [r7, #15]
 80032e8:	78fb      	ldrb	r3, [r7, #3]
 80032ea:	3b01      	subs	r3, #1
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d3ec      	bcc.n	80032ca <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80032f0:	883b      	ldrh	r3, [r7, #0]
 80032f2:	0418      	lsls	r0, r3, #16
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6819      	ldr	r1, [r3, #0]
 80032f8:	78fb      	ldrb	r3, [r7, #3]
 80032fa:	3b01      	subs	r3, #1
 80032fc:	68ba      	ldr	r2, [r7, #8]
 80032fe:	4302      	orrs	r2, r0
 8003300:	3340      	adds	r3, #64	; 0x40
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	440b      	add	r3, r1
 8003306:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3714      	adds	r7, #20
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr

08003316 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003316:	b480      	push	{r7}
 8003318:	b083      	sub	sp, #12
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
 800331e:	460b      	mov	r3, r1
 8003320:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	887a      	ldrh	r2, [r7, #2]
 8003328:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800332a:	2300      	movs	r3, #0
}
 800332c:	4618      	mov	r0, r3
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2201      	movs	r2, #1
 800334a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003366:	4b05      	ldr	r3, [pc, #20]	; (800337c <HAL_PCDEx_ActivateLPM+0x44>)
 8003368:	4313      	orrs	r3, r2
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800336e:	2300      	movs	r3, #0
}
 8003370:	4618      	mov	r0, r3
 8003372:	3714      	adds	r7, #20
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr
 800337c:	10000003 	.word	0x10000003

08003380 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003388:	2300      	movs	r3, #0
 800338a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d101      	bne.n	8003396 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e291      	b.n	80038ba <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f000 8087 	beq.w	80034b2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033a4:	4b96      	ldr	r3, [pc, #600]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f003 030c 	and.w	r3, r3, #12
 80033ac:	2b04      	cmp	r3, #4
 80033ae:	d00c      	beq.n	80033ca <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033b0:	4b93      	ldr	r3, [pc, #588]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f003 030c 	and.w	r3, r3, #12
 80033b8:	2b08      	cmp	r3, #8
 80033ba:	d112      	bne.n	80033e2 <HAL_RCC_OscConfig+0x62>
 80033bc:	4b90      	ldr	r3, [pc, #576]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033c8:	d10b      	bne.n	80033e2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033ca:	4b8d      	ldr	r3, [pc, #564]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d06c      	beq.n	80034b0 <HAL_RCC_OscConfig+0x130>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d168      	bne.n	80034b0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e26b      	b.n	80038ba <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033ea:	d106      	bne.n	80033fa <HAL_RCC_OscConfig+0x7a>
 80033ec:	4b84      	ldr	r3, [pc, #528]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a83      	ldr	r2, [pc, #524]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 80033f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033f6:	6013      	str	r3, [r2, #0]
 80033f8:	e02e      	b.n	8003458 <HAL_RCC_OscConfig+0xd8>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10c      	bne.n	800341c <HAL_RCC_OscConfig+0x9c>
 8003402:	4b7f      	ldr	r3, [pc, #508]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a7e      	ldr	r2, [pc, #504]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 8003408:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800340c:	6013      	str	r3, [r2, #0]
 800340e:	4b7c      	ldr	r3, [pc, #496]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a7b      	ldr	r2, [pc, #492]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 8003414:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003418:	6013      	str	r3, [r2, #0]
 800341a:	e01d      	b.n	8003458 <HAL_RCC_OscConfig+0xd8>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003424:	d10c      	bne.n	8003440 <HAL_RCC_OscConfig+0xc0>
 8003426:	4b76      	ldr	r3, [pc, #472]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a75      	ldr	r2, [pc, #468]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 800342c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003430:	6013      	str	r3, [r2, #0]
 8003432:	4b73      	ldr	r3, [pc, #460]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a72      	ldr	r2, [pc, #456]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 8003438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800343c:	6013      	str	r3, [r2, #0]
 800343e:	e00b      	b.n	8003458 <HAL_RCC_OscConfig+0xd8>
 8003440:	4b6f      	ldr	r3, [pc, #444]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a6e      	ldr	r2, [pc, #440]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 8003446:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800344a:	6013      	str	r3, [r2, #0]
 800344c:	4b6c      	ldr	r3, [pc, #432]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a6b      	ldr	r2, [pc, #428]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 8003452:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003456:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d013      	beq.n	8003488 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003460:	f7fd ff72 	bl	8001348 <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003466:	e008      	b.n	800347a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003468:	f7fd ff6e 	bl	8001348 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b64      	cmp	r3, #100	; 0x64
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e21f      	b.n	80038ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800347a:	4b61      	ldr	r3, [pc, #388]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d0f0      	beq.n	8003468 <HAL_RCC_OscConfig+0xe8>
 8003486:	e014      	b.n	80034b2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003488:	f7fd ff5e 	bl	8001348 <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003490:	f7fd ff5a 	bl	8001348 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b64      	cmp	r3, #100	; 0x64
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e20b      	b.n	80038ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034a2:	4b57      	ldr	r3, [pc, #348]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1f0      	bne.n	8003490 <HAL_RCC_OscConfig+0x110>
 80034ae:	e000      	b.n	80034b2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d069      	beq.n	8003592 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034be:	4b50      	ldr	r3, [pc, #320]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f003 030c 	and.w	r3, r3, #12
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00b      	beq.n	80034e2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034ca:	4b4d      	ldr	r3, [pc, #308]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f003 030c 	and.w	r3, r3, #12
 80034d2:	2b08      	cmp	r3, #8
 80034d4:	d11c      	bne.n	8003510 <HAL_RCC_OscConfig+0x190>
 80034d6:	4b4a      	ldr	r3, [pc, #296]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d116      	bne.n	8003510 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034e2:	4b47      	ldr	r3, [pc, #284]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d005      	beq.n	80034fa <HAL_RCC_OscConfig+0x17a>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d001      	beq.n	80034fa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e1df      	b.n	80038ba <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034fa:	4b41      	ldr	r3, [pc, #260]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	493d      	ldr	r1, [pc, #244]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 800350a:	4313      	orrs	r3, r2
 800350c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800350e:	e040      	b.n	8003592 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d023      	beq.n	8003560 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003518:	4b39      	ldr	r3, [pc, #228]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a38      	ldr	r2, [pc, #224]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 800351e:	f043 0301 	orr.w	r3, r3, #1
 8003522:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003524:	f7fd ff10 	bl	8001348 <HAL_GetTick>
 8003528:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800352a:	e008      	b.n	800353e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800352c:	f7fd ff0c 	bl	8001348 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b02      	cmp	r3, #2
 8003538:	d901      	bls.n	800353e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e1bd      	b.n	80038ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800353e:	4b30      	ldr	r3, [pc, #192]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d0f0      	beq.n	800352c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800354a:	4b2d      	ldr	r3, [pc, #180]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	00db      	lsls	r3, r3, #3
 8003558:	4929      	ldr	r1, [pc, #164]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 800355a:	4313      	orrs	r3, r2
 800355c:	600b      	str	r3, [r1, #0]
 800355e:	e018      	b.n	8003592 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003560:	4b27      	ldr	r3, [pc, #156]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a26      	ldr	r2, [pc, #152]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 8003566:	f023 0301 	bic.w	r3, r3, #1
 800356a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800356c:	f7fd feec 	bl	8001348 <HAL_GetTick>
 8003570:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003572:	e008      	b.n	8003586 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003574:	f7fd fee8 	bl	8001348 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e199      	b.n	80038ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003586:	4b1e      	ldr	r3, [pc, #120]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1f0      	bne.n	8003574 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0308 	and.w	r3, r3, #8
 800359a:	2b00      	cmp	r3, #0
 800359c:	d038      	beq.n	8003610 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d019      	beq.n	80035da <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035a6:	4b16      	ldr	r3, [pc, #88]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 80035a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035aa:	4a15      	ldr	r2, [pc, #84]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 80035ac:	f043 0301 	orr.w	r3, r3, #1
 80035b0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b2:	f7fd fec9 	bl	8001348 <HAL_GetTick>
 80035b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035b8:	e008      	b.n	80035cc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035ba:	f7fd fec5 	bl	8001348 <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d901      	bls.n	80035cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e176      	b.n	80038ba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035cc:	4b0c      	ldr	r3, [pc, #48]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 80035ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035d0:	f003 0302 	and.w	r3, r3, #2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d0f0      	beq.n	80035ba <HAL_RCC_OscConfig+0x23a>
 80035d8:	e01a      	b.n	8003610 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035da:	4b09      	ldr	r3, [pc, #36]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 80035dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035de:	4a08      	ldr	r2, [pc, #32]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 80035e0:	f023 0301 	bic.w	r3, r3, #1
 80035e4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e6:	f7fd feaf 	bl	8001348 <HAL_GetTick>
 80035ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035ec:	e00a      	b.n	8003604 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035ee:	f7fd feab 	bl	8001348 <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d903      	bls.n	8003604 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e15c      	b.n	80038ba <HAL_RCC_OscConfig+0x53a>
 8003600:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003604:	4b91      	ldr	r3, [pc, #580]	; (800384c <HAL_RCC_OscConfig+0x4cc>)
 8003606:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003608:	f003 0302 	and.w	r3, r3, #2
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1ee      	bne.n	80035ee <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0304 	and.w	r3, r3, #4
 8003618:	2b00      	cmp	r3, #0
 800361a:	f000 80a4 	beq.w	8003766 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800361e:	4b8b      	ldr	r3, [pc, #556]	; (800384c <HAL_RCC_OscConfig+0x4cc>)
 8003620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10d      	bne.n	8003646 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800362a:	4b88      	ldr	r3, [pc, #544]	; (800384c <HAL_RCC_OscConfig+0x4cc>)
 800362c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362e:	4a87      	ldr	r2, [pc, #540]	; (800384c <HAL_RCC_OscConfig+0x4cc>)
 8003630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003634:	6413      	str	r3, [r2, #64]	; 0x40
 8003636:	4b85      	ldr	r3, [pc, #532]	; (800384c <HAL_RCC_OscConfig+0x4cc>)
 8003638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800363e:	60bb      	str	r3, [r7, #8]
 8003640:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003642:	2301      	movs	r3, #1
 8003644:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003646:	4b82      	ldr	r3, [pc, #520]	; (8003850 <HAL_RCC_OscConfig+0x4d0>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800364e:	2b00      	cmp	r3, #0
 8003650:	d118      	bne.n	8003684 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003652:	4b7f      	ldr	r3, [pc, #508]	; (8003850 <HAL_RCC_OscConfig+0x4d0>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a7e      	ldr	r2, [pc, #504]	; (8003850 <HAL_RCC_OscConfig+0x4d0>)
 8003658:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800365c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800365e:	f7fd fe73 	bl	8001348 <HAL_GetTick>
 8003662:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003664:	e008      	b.n	8003678 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003666:	f7fd fe6f 	bl	8001348 <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	2b64      	cmp	r3, #100	; 0x64
 8003672:	d901      	bls.n	8003678 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e120      	b.n	80038ba <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003678:	4b75      	ldr	r3, [pc, #468]	; (8003850 <HAL_RCC_OscConfig+0x4d0>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003680:	2b00      	cmp	r3, #0
 8003682:	d0f0      	beq.n	8003666 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	2b01      	cmp	r3, #1
 800368a:	d106      	bne.n	800369a <HAL_RCC_OscConfig+0x31a>
 800368c:	4b6f      	ldr	r3, [pc, #444]	; (800384c <HAL_RCC_OscConfig+0x4cc>)
 800368e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003690:	4a6e      	ldr	r2, [pc, #440]	; (800384c <HAL_RCC_OscConfig+0x4cc>)
 8003692:	f043 0301 	orr.w	r3, r3, #1
 8003696:	6713      	str	r3, [r2, #112]	; 0x70
 8003698:	e02d      	b.n	80036f6 <HAL_RCC_OscConfig+0x376>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10c      	bne.n	80036bc <HAL_RCC_OscConfig+0x33c>
 80036a2:	4b6a      	ldr	r3, [pc, #424]	; (800384c <HAL_RCC_OscConfig+0x4cc>)
 80036a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a6:	4a69      	ldr	r2, [pc, #420]	; (800384c <HAL_RCC_OscConfig+0x4cc>)
 80036a8:	f023 0301 	bic.w	r3, r3, #1
 80036ac:	6713      	str	r3, [r2, #112]	; 0x70
 80036ae:	4b67      	ldr	r3, [pc, #412]	; (800384c <HAL_RCC_OscConfig+0x4cc>)
 80036b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b2:	4a66      	ldr	r2, [pc, #408]	; (800384c <HAL_RCC_OscConfig+0x4cc>)
 80036b4:	f023 0304 	bic.w	r3, r3, #4
 80036b8:	6713      	str	r3, [r2, #112]	; 0x70
 80036ba:	e01c      	b.n	80036f6 <HAL_RCC_OscConfig+0x376>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	2b05      	cmp	r3, #5
 80036c2:	d10c      	bne.n	80036de <HAL_RCC_OscConfig+0x35e>
 80036c4:	4b61      	ldr	r3, [pc, #388]	; (800384c <HAL_RCC_OscConfig+0x4cc>)
 80036c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c8:	4a60      	ldr	r2, [pc, #384]	; (800384c <HAL_RCC_OscConfig+0x4cc>)
 80036ca:	f043 0304 	orr.w	r3, r3, #4
 80036ce:	6713      	str	r3, [r2, #112]	; 0x70
 80036d0:	4b5e      	ldr	r3, [pc, #376]	; (800384c <HAL_RCC_OscConfig+0x4cc>)
 80036d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d4:	4a5d      	ldr	r2, [pc, #372]	; (800384c <HAL_RCC_OscConfig+0x4cc>)
 80036d6:	f043 0301 	orr.w	r3, r3, #1
 80036da:	6713      	str	r3, [r2, #112]	; 0x70
 80036dc:	e00b      	b.n	80036f6 <HAL_RCC_OscConfig+0x376>
 80036de:	4b5b      	ldr	r3, [pc, #364]	; (800384c <HAL_RCC_OscConfig+0x4cc>)
 80036e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e2:	4a5a      	ldr	r2, [pc, #360]	; (800384c <HAL_RCC_OscConfig+0x4cc>)
 80036e4:	f023 0301 	bic.w	r3, r3, #1
 80036e8:	6713      	str	r3, [r2, #112]	; 0x70
 80036ea:	4b58      	ldr	r3, [pc, #352]	; (800384c <HAL_RCC_OscConfig+0x4cc>)
 80036ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ee:	4a57      	ldr	r2, [pc, #348]	; (800384c <HAL_RCC_OscConfig+0x4cc>)
 80036f0:	f023 0304 	bic.w	r3, r3, #4
 80036f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d015      	beq.n	800372a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036fe:	f7fd fe23 	bl	8001348 <HAL_GetTick>
 8003702:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003704:	e00a      	b.n	800371c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003706:	f7fd fe1f 	bl	8001348 <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	f241 3288 	movw	r2, #5000	; 0x1388
 8003714:	4293      	cmp	r3, r2
 8003716:	d901      	bls.n	800371c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e0ce      	b.n	80038ba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800371c:	4b4b      	ldr	r3, [pc, #300]	; (800384c <HAL_RCC_OscConfig+0x4cc>)
 800371e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	2b00      	cmp	r3, #0
 8003726:	d0ee      	beq.n	8003706 <HAL_RCC_OscConfig+0x386>
 8003728:	e014      	b.n	8003754 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800372a:	f7fd fe0d 	bl	8001348 <HAL_GetTick>
 800372e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003730:	e00a      	b.n	8003748 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003732:	f7fd fe09 	bl	8001348 <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003740:	4293      	cmp	r3, r2
 8003742:	d901      	bls.n	8003748 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e0b8      	b.n	80038ba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003748:	4b40      	ldr	r3, [pc, #256]	; (800384c <HAL_RCC_OscConfig+0x4cc>)
 800374a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800374c:	f003 0302 	and.w	r3, r3, #2
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1ee      	bne.n	8003732 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003754:	7dfb      	ldrb	r3, [r7, #23]
 8003756:	2b01      	cmp	r3, #1
 8003758:	d105      	bne.n	8003766 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800375a:	4b3c      	ldr	r3, [pc, #240]	; (800384c <HAL_RCC_OscConfig+0x4cc>)
 800375c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375e:	4a3b      	ldr	r2, [pc, #236]	; (800384c <HAL_RCC_OscConfig+0x4cc>)
 8003760:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003764:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	2b00      	cmp	r3, #0
 800376c:	f000 80a4 	beq.w	80038b8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003770:	4b36      	ldr	r3, [pc, #216]	; (800384c <HAL_RCC_OscConfig+0x4cc>)
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f003 030c 	and.w	r3, r3, #12
 8003778:	2b08      	cmp	r3, #8
 800377a:	d06b      	beq.n	8003854 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	2b02      	cmp	r3, #2
 8003782:	d149      	bne.n	8003818 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003784:	4b31      	ldr	r3, [pc, #196]	; (800384c <HAL_RCC_OscConfig+0x4cc>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a30      	ldr	r2, [pc, #192]	; (800384c <HAL_RCC_OscConfig+0x4cc>)
 800378a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800378e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003790:	f7fd fdda 	bl	8001348 <HAL_GetTick>
 8003794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003796:	e008      	b.n	80037aa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003798:	f7fd fdd6 	bl	8001348 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e087      	b.n	80038ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037aa:	4b28      	ldr	r3, [pc, #160]	; (800384c <HAL_RCC_OscConfig+0x4cc>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d1f0      	bne.n	8003798 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	69da      	ldr	r2, [r3, #28]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a1b      	ldr	r3, [r3, #32]
 80037be:	431a      	orrs	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c4:	019b      	lsls	r3, r3, #6
 80037c6:	431a      	orrs	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037cc:	085b      	lsrs	r3, r3, #1
 80037ce:	3b01      	subs	r3, #1
 80037d0:	041b      	lsls	r3, r3, #16
 80037d2:	431a      	orrs	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d8:	061b      	lsls	r3, r3, #24
 80037da:	4313      	orrs	r3, r2
 80037dc:	4a1b      	ldr	r2, [pc, #108]	; (800384c <HAL_RCC_OscConfig+0x4cc>)
 80037de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80037e2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037e4:	4b19      	ldr	r3, [pc, #100]	; (800384c <HAL_RCC_OscConfig+0x4cc>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a18      	ldr	r2, [pc, #96]	; (800384c <HAL_RCC_OscConfig+0x4cc>)
 80037ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f0:	f7fd fdaa 	bl	8001348 <HAL_GetTick>
 80037f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037f6:	e008      	b.n	800380a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037f8:	f7fd fda6 	bl	8001348 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b02      	cmp	r3, #2
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e057      	b.n	80038ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800380a:	4b10      	ldr	r3, [pc, #64]	; (800384c <HAL_RCC_OscConfig+0x4cc>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d0f0      	beq.n	80037f8 <HAL_RCC_OscConfig+0x478>
 8003816:	e04f      	b.n	80038b8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003818:	4b0c      	ldr	r3, [pc, #48]	; (800384c <HAL_RCC_OscConfig+0x4cc>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a0b      	ldr	r2, [pc, #44]	; (800384c <HAL_RCC_OscConfig+0x4cc>)
 800381e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003822:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003824:	f7fd fd90 	bl	8001348 <HAL_GetTick>
 8003828:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800382a:	e008      	b.n	800383e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800382c:	f7fd fd8c 	bl	8001348 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	2b02      	cmp	r3, #2
 8003838:	d901      	bls.n	800383e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e03d      	b.n	80038ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800383e:	4b03      	ldr	r3, [pc, #12]	; (800384c <HAL_RCC_OscConfig+0x4cc>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1f0      	bne.n	800382c <HAL_RCC_OscConfig+0x4ac>
 800384a:	e035      	b.n	80038b8 <HAL_RCC_OscConfig+0x538>
 800384c:	40023800 	.word	0x40023800
 8003850:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003854:	4b1b      	ldr	r3, [pc, #108]	; (80038c4 <HAL_RCC_OscConfig+0x544>)
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	2b01      	cmp	r3, #1
 8003860:	d028      	beq.n	80038b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800386c:	429a      	cmp	r2, r3
 800386e:	d121      	bne.n	80038b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800387a:	429a      	cmp	r2, r3
 800387c:	d11a      	bne.n	80038b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003884:	4013      	ands	r3, r2
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800388a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800388c:	4293      	cmp	r3, r2
 800388e:	d111      	bne.n	80038b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800389a:	085b      	lsrs	r3, r3, #1
 800389c:	3b01      	subs	r3, #1
 800389e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d107      	bne.n	80038b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ae:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d001      	beq.n	80038b8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e000      	b.n	80038ba <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3718      	adds	r7, #24
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	40023800 	.word	0x40023800

080038c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80038d2:	2300      	movs	r3, #0
 80038d4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d101      	bne.n	80038e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e0d0      	b.n	8003a82 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038e0:	4b6a      	ldr	r3, [pc, #424]	; (8003a8c <HAL_RCC_ClockConfig+0x1c4>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 030f 	and.w	r3, r3, #15
 80038e8:	683a      	ldr	r2, [r7, #0]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d910      	bls.n	8003910 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ee:	4b67      	ldr	r3, [pc, #412]	; (8003a8c <HAL_RCC_ClockConfig+0x1c4>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f023 020f 	bic.w	r2, r3, #15
 80038f6:	4965      	ldr	r1, [pc, #404]	; (8003a8c <HAL_RCC_ClockConfig+0x1c4>)
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038fe:	4b63      	ldr	r3, [pc, #396]	; (8003a8c <HAL_RCC_ClockConfig+0x1c4>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 030f 	and.w	r3, r3, #15
 8003906:	683a      	ldr	r2, [r7, #0]
 8003908:	429a      	cmp	r2, r3
 800390a:	d001      	beq.n	8003910 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e0b8      	b.n	8003a82 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d020      	beq.n	800395e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0304 	and.w	r3, r3, #4
 8003924:	2b00      	cmp	r3, #0
 8003926:	d005      	beq.n	8003934 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003928:	4b59      	ldr	r3, [pc, #356]	; (8003a90 <HAL_RCC_ClockConfig+0x1c8>)
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	4a58      	ldr	r2, [pc, #352]	; (8003a90 <HAL_RCC_ClockConfig+0x1c8>)
 800392e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003932:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0308 	and.w	r3, r3, #8
 800393c:	2b00      	cmp	r3, #0
 800393e:	d005      	beq.n	800394c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003940:	4b53      	ldr	r3, [pc, #332]	; (8003a90 <HAL_RCC_ClockConfig+0x1c8>)
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	4a52      	ldr	r2, [pc, #328]	; (8003a90 <HAL_RCC_ClockConfig+0x1c8>)
 8003946:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800394a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800394c:	4b50      	ldr	r3, [pc, #320]	; (8003a90 <HAL_RCC_ClockConfig+0x1c8>)
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	494d      	ldr	r1, [pc, #308]	; (8003a90 <HAL_RCC_ClockConfig+0x1c8>)
 800395a:	4313      	orrs	r3, r2
 800395c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	2b00      	cmp	r3, #0
 8003968:	d040      	beq.n	80039ec <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d107      	bne.n	8003982 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003972:	4b47      	ldr	r3, [pc, #284]	; (8003a90 <HAL_RCC_ClockConfig+0x1c8>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d115      	bne.n	80039aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e07f      	b.n	8003a82 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	2b02      	cmp	r3, #2
 8003988:	d107      	bne.n	800399a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800398a:	4b41      	ldr	r3, [pc, #260]	; (8003a90 <HAL_RCC_ClockConfig+0x1c8>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d109      	bne.n	80039aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e073      	b.n	8003a82 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800399a:	4b3d      	ldr	r3, [pc, #244]	; (8003a90 <HAL_RCC_ClockConfig+0x1c8>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d101      	bne.n	80039aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e06b      	b.n	8003a82 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039aa:	4b39      	ldr	r3, [pc, #228]	; (8003a90 <HAL_RCC_ClockConfig+0x1c8>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f023 0203 	bic.w	r2, r3, #3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	4936      	ldr	r1, [pc, #216]	; (8003a90 <HAL_RCC_ClockConfig+0x1c8>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039bc:	f7fd fcc4 	bl	8001348 <HAL_GetTick>
 80039c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039c2:	e00a      	b.n	80039da <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039c4:	f7fd fcc0 	bl	8001348 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d901      	bls.n	80039da <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e053      	b.n	8003a82 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039da:	4b2d      	ldr	r3, [pc, #180]	; (8003a90 <HAL_RCC_ClockConfig+0x1c8>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f003 020c 	and.w	r2, r3, #12
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d1eb      	bne.n	80039c4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039ec:	4b27      	ldr	r3, [pc, #156]	; (8003a8c <HAL_RCC_ClockConfig+0x1c4>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 030f 	and.w	r3, r3, #15
 80039f4:	683a      	ldr	r2, [r7, #0]
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d210      	bcs.n	8003a1c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039fa:	4b24      	ldr	r3, [pc, #144]	; (8003a8c <HAL_RCC_ClockConfig+0x1c4>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f023 020f 	bic.w	r2, r3, #15
 8003a02:	4922      	ldr	r1, [pc, #136]	; (8003a8c <HAL_RCC_ClockConfig+0x1c4>)
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a0a:	4b20      	ldr	r3, [pc, #128]	; (8003a8c <HAL_RCC_ClockConfig+0x1c4>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 030f 	and.w	r3, r3, #15
 8003a12:	683a      	ldr	r2, [r7, #0]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d001      	beq.n	8003a1c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e032      	b.n	8003a82 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0304 	and.w	r3, r3, #4
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d008      	beq.n	8003a3a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a28:	4b19      	ldr	r3, [pc, #100]	; (8003a90 <HAL_RCC_ClockConfig+0x1c8>)
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	4916      	ldr	r1, [pc, #88]	; (8003a90 <HAL_RCC_ClockConfig+0x1c8>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0308 	and.w	r3, r3, #8
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d009      	beq.n	8003a5a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a46:	4b12      	ldr	r3, [pc, #72]	; (8003a90 <HAL_RCC_ClockConfig+0x1c8>)
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	490e      	ldr	r1, [pc, #56]	; (8003a90 <HAL_RCC_ClockConfig+0x1c8>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a5a:	f000 f821 	bl	8003aa0 <HAL_RCC_GetSysClockFreq>
 8003a5e:	4601      	mov	r1, r0
 8003a60:	4b0b      	ldr	r3, [pc, #44]	; (8003a90 <HAL_RCC_ClockConfig+0x1c8>)
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	091b      	lsrs	r3, r3, #4
 8003a66:	f003 030f 	and.w	r3, r3, #15
 8003a6a:	4a0a      	ldr	r2, [pc, #40]	; (8003a94 <HAL_RCC_ClockConfig+0x1cc>)
 8003a6c:	5cd3      	ldrb	r3, [r2, r3]
 8003a6e:	fa21 f303 	lsr.w	r3, r1, r3
 8003a72:	4a09      	ldr	r2, [pc, #36]	; (8003a98 <HAL_RCC_ClockConfig+0x1d0>)
 8003a74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a76:	4b09      	ldr	r3, [pc, #36]	; (8003a9c <HAL_RCC_ClockConfig+0x1d4>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7fd f868 	bl	8000b50 <HAL_InitTick>

  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3710      	adds	r7, #16
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	40023c00 	.word	0x40023c00
 8003a90:	40023800 	.word	0x40023800
 8003a94:	080123c4 	.word	0x080123c4
 8003a98:	20000000 	.word	0x20000000
 8003a9c:	20000004 	.word	0x20000004

08003aa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003aa2:	b085      	sub	sp, #20
 8003aa4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	607b      	str	r3, [r7, #4]
 8003aaa:	2300      	movs	r3, #0
 8003aac:	60fb      	str	r3, [r7, #12]
 8003aae:	2300      	movs	r3, #0
 8003ab0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ab6:	4b63      	ldr	r3, [pc, #396]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f003 030c 	and.w	r3, r3, #12
 8003abe:	2b04      	cmp	r3, #4
 8003ac0:	d007      	beq.n	8003ad2 <HAL_RCC_GetSysClockFreq+0x32>
 8003ac2:	2b08      	cmp	r3, #8
 8003ac4:	d008      	beq.n	8003ad8 <HAL_RCC_GetSysClockFreq+0x38>
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	f040 80b4 	bne.w	8003c34 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003acc:	4b5e      	ldr	r3, [pc, #376]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003ace:	60bb      	str	r3, [r7, #8]
      break;
 8003ad0:	e0b3      	b.n	8003c3a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ad2:	4b5e      	ldr	r3, [pc, #376]	; (8003c4c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003ad4:	60bb      	str	r3, [r7, #8]
      break;
 8003ad6:	e0b0      	b.n	8003c3a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ad8:	4b5a      	ldr	r3, [pc, #360]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ae0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003ae2:	4b58      	ldr	r3, [pc, #352]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d04a      	beq.n	8003b84 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003aee:	4b55      	ldr	r3, [pc, #340]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	099b      	lsrs	r3, r3, #6
 8003af4:	f04f 0400 	mov.w	r4, #0
 8003af8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003afc:	f04f 0200 	mov.w	r2, #0
 8003b00:	ea03 0501 	and.w	r5, r3, r1
 8003b04:	ea04 0602 	and.w	r6, r4, r2
 8003b08:	4629      	mov	r1, r5
 8003b0a:	4632      	mov	r2, r6
 8003b0c:	f04f 0300 	mov.w	r3, #0
 8003b10:	f04f 0400 	mov.w	r4, #0
 8003b14:	0154      	lsls	r4, r2, #5
 8003b16:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003b1a:	014b      	lsls	r3, r1, #5
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	4622      	mov	r2, r4
 8003b20:	1b49      	subs	r1, r1, r5
 8003b22:	eb62 0206 	sbc.w	r2, r2, r6
 8003b26:	f04f 0300 	mov.w	r3, #0
 8003b2a:	f04f 0400 	mov.w	r4, #0
 8003b2e:	0194      	lsls	r4, r2, #6
 8003b30:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003b34:	018b      	lsls	r3, r1, #6
 8003b36:	1a5b      	subs	r3, r3, r1
 8003b38:	eb64 0402 	sbc.w	r4, r4, r2
 8003b3c:	f04f 0100 	mov.w	r1, #0
 8003b40:	f04f 0200 	mov.w	r2, #0
 8003b44:	00e2      	lsls	r2, r4, #3
 8003b46:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003b4a:	00d9      	lsls	r1, r3, #3
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	4614      	mov	r4, r2
 8003b50:	195b      	adds	r3, r3, r5
 8003b52:	eb44 0406 	adc.w	r4, r4, r6
 8003b56:	f04f 0100 	mov.w	r1, #0
 8003b5a:	f04f 0200 	mov.w	r2, #0
 8003b5e:	0262      	lsls	r2, r4, #9
 8003b60:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003b64:	0259      	lsls	r1, r3, #9
 8003b66:	460b      	mov	r3, r1
 8003b68:	4614      	mov	r4, r2
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	4621      	mov	r1, r4
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f04f 0400 	mov.w	r4, #0
 8003b74:	461a      	mov	r2, r3
 8003b76:	4623      	mov	r3, r4
 8003b78:	f7fc fba2 	bl	80002c0 <__aeabi_uldivmod>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	460c      	mov	r4, r1
 8003b80:	60fb      	str	r3, [r7, #12]
 8003b82:	e049      	b.n	8003c18 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b84:	4b2f      	ldr	r3, [pc, #188]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	099b      	lsrs	r3, r3, #6
 8003b8a:	f04f 0400 	mov.w	r4, #0
 8003b8e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003b92:	f04f 0200 	mov.w	r2, #0
 8003b96:	ea03 0501 	and.w	r5, r3, r1
 8003b9a:	ea04 0602 	and.w	r6, r4, r2
 8003b9e:	4629      	mov	r1, r5
 8003ba0:	4632      	mov	r2, r6
 8003ba2:	f04f 0300 	mov.w	r3, #0
 8003ba6:	f04f 0400 	mov.w	r4, #0
 8003baa:	0154      	lsls	r4, r2, #5
 8003bac:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003bb0:	014b      	lsls	r3, r1, #5
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	4622      	mov	r2, r4
 8003bb6:	1b49      	subs	r1, r1, r5
 8003bb8:	eb62 0206 	sbc.w	r2, r2, r6
 8003bbc:	f04f 0300 	mov.w	r3, #0
 8003bc0:	f04f 0400 	mov.w	r4, #0
 8003bc4:	0194      	lsls	r4, r2, #6
 8003bc6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003bca:	018b      	lsls	r3, r1, #6
 8003bcc:	1a5b      	subs	r3, r3, r1
 8003bce:	eb64 0402 	sbc.w	r4, r4, r2
 8003bd2:	f04f 0100 	mov.w	r1, #0
 8003bd6:	f04f 0200 	mov.w	r2, #0
 8003bda:	00e2      	lsls	r2, r4, #3
 8003bdc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003be0:	00d9      	lsls	r1, r3, #3
 8003be2:	460b      	mov	r3, r1
 8003be4:	4614      	mov	r4, r2
 8003be6:	195b      	adds	r3, r3, r5
 8003be8:	eb44 0406 	adc.w	r4, r4, r6
 8003bec:	f04f 0100 	mov.w	r1, #0
 8003bf0:	f04f 0200 	mov.w	r2, #0
 8003bf4:	02a2      	lsls	r2, r4, #10
 8003bf6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003bfa:	0299      	lsls	r1, r3, #10
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	4614      	mov	r4, r2
 8003c00:	4618      	mov	r0, r3
 8003c02:	4621      	mov	r1, r4
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f04f 0400 	mov.w	r4, #0
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	4623      	mov	r3, r4
 8003c0e:	f7fc fb57 	bl	80002c0 <__aeabi_uldivmod>
 8003c12:	4603      	mov	r3, r0
 8003c14:	460c      	mov	r4, r1
 8003c16:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003c18:	4b0a      	ldr	r3, [pc, #40]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	0c1b      	lsrs	r3, r3, #16
 8003c1e:	f003 0303 	and.w	r3, r3, #3
 8003c22:	3301      	adds	r3, #1
 8003c24:	005b      	lsls	r3, r3, #1
 8003c26:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c30:	60bb      	str	r3, [r7, #8]
      break;
 8003c32:	e002      	b.n	8003c3a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c34:	4b04      	ldr	r3, [pc, #16]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003c36:	60bb      	str	r3, [r7, #8]
      break;
 8003c38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c3a:	68bb      	ldr	r3, [r7, #8]
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3714      	adds	r7, #20
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c44:	40023800 	.word	0x40023800
 8003c48:	00f42400 	.word	0x00f42400
 8003c4c:	007a1200 	.word	0x007a1200

08003c50 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c50:	b480      	push	{r7}
 8003c52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c54:	4b03      	ldr	r3, [pc, #12]	; (8003c64 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c56:	681b      	ldr	r3, [r3, #0]
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	20000000 	.word	0x20000000

08003c68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c6c:	f7ff fff0 	bl	8003c50 <HAL_RCC_GetHCLKFreq>
 8003c70:	4601      	mov	r1, r0
 8003c72:	4b05      	ldr	r3, [pc, #20]	; (8003c88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	0a9b      	lsrs	r3, r3, #10
 8003c78:	f003 0307 	and.w	r3, r3, #7
 8003c7c:	4a03      	ldr	r2, [pc, #12]	; (8003c8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c7e:	5cd3      	ldrb	r3, [r2, r3]
 8003c80:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	40023800 	.word	0x40023800
 8003c8c:	080123d4 	.word	0x080123d4

08003c90 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	220f      	movs	r2, #15
 8003c9e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003ca0:	4b12      	ldr	r3, [pc, #72]	; (8003cec <HAL_RCC_GetClockConfig+0x5c>)
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f003 0203 	and.w	r2, r3, #3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003cac:	4b0f      	ldr	r3, [pc, #60]	; (8003cec <HAL_RCC_GetClockConfig+0x5c>)
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003cb8:	4b0c      	ldr	r3, [pc, #48]	; (8003cec <HAL_RCC_GetClockConfig+0x5c>)
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003cc4:	4b09      	ldr	r3, [pc, #36]	; (8003cec <HAL_RCC_GetClockConfig+0x5c>)
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	08db      	lsrs	r3, r3, #3
 8003cca:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003cd2:	4b07      	ldr	r3, [pc, #28]	; (8003cf0 <HAL_RCC_GetClockConfig+0x60>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 020f 	and.w	r2, r3, #15
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	601a      	str	r2, [r3, #0]
}
 8003cde:	bf00      	nop
 8003ce0:	370c      	adds	r7, #12
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	40023800 	.word	0x40023800
 8003cf0:	40023c00 	.word	0x40023c00

08003cf4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b088      	sub	sp, #32
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003d00:	2300      	movs	r3, #0
 8003d02:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003d04:	2300      	movs	r3, #0
 8003d06:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0301 	and.w	r3, r3, #1
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d012      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d1c:	4b69      	ldr	r3, [pc, #420]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	4a68      	ldr	r2, [pc, #416]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d22:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003d26:	6093      	str	r3, [r2, #8]
 8003d28:	4b66      	ldr	r3, [pc, #408]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d2a:	689a      	ldr	r2, [r3, #8]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d30:	4964      	ldr	r1, [pc, #400]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d017      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d4e:	4b5d      	ldr	r3, [pc, #372]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d5c:	4959      	ldr	r1, [pc, #356]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d6c:	d101      	bne.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d101      	bne.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d017      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d8a:	4b4e      	ldr	r3, [pc, #312]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d90:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d98:	494a      	ldr	r1, [pc, #296]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003da8:	d101      	bne.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003daa:	2301      	movs	r3, #1
 8003dac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d101      	bne.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003db6:	2301      	movs	r3, #1
 8003db8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0320 	and.w	r3, r3, #32
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	f000 808b 	beq.w	8003eee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003dd8:	4b3a      	ldr	r3, [pc, #232]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ddc:	4a39      	ldr	r2, [pc, #228]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003de2:	6413      	str	r3, [r2, #64]	; 0x40
 8003de4:	4b37      	ldr	r3, [pc, #220]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dec:	60bb      	str	r3, [r7, #8]
 8003dee:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003df0:	4b35      	ldr	r3, [pc, #212]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a34      	ldr	r2, [pc, #208]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003df6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dfc:	f7fd faa4 	bl	8001348 <HAL_GetTick>
 8003e00:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003e02:	e008      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e04:	f7fd faa0 	bl	8001348 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b64      	cmp	r3, #100	; 0x64
 8003e10:	d901      	bls.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e31e      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x760>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003e16:	4b2c      	ldr	r3, [pc, #176]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d0f0      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e22:	4b28      	ldr	r3, [pc, #160]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e2a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d035      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e3a:	693a      	ldr	r2, [r7, #16]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d02e      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e40:	4b20      	ldr	r3, [pc, #128]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e48:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e4a:	4b1e      	ldr	r3, [pc, #120]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e4e:	4a1d      	ldr	r2, [pc, #116]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e54:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e56:	4b1b      	ldr	r3, [pc, #108]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e5a:	4a1a      	ldr	r2, [pc, #104]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e60:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003e62:	4a18      	ldr	r2, [pc, #96]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003e68:	4b16      	ldr	r3, [pc, #88]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6c:	f003 0301 	and.w	r3, r3, #1
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d114      	bne.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e74:	f7fd fa68 	bl	8001348 <HAL_GetTick>
 8003e78:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e7a:	e00a      	b.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e7c:	f7fd fa64 	bl	8001348 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e2e0      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x760>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e92:	4b0c      	ldr	r3, [pc, #48]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e96:	f003 0302 	and.w	r3, r3, #2
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d0ee      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ea6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003eaa:	d111      	bne.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003eac:	4b05      	ldr	r3, [pc, #20]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003eb8:	4b04      	ldr	r3, [pc, #16]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003eba:	400b      	ands	r3, r1
 8003ebc:	4901      	ldr	r1, [pc, #4]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	608b      	str	r3, [r1, #8]
 8003ec2:	e00b      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003ec4:	40023800 	.word	0x40023800
 8003ec8:	40007000 	.word	0x40007000
 8003ecc:	0ffffcff 	.word	0x0ffffcff
 8003ed0:	4bac      	ldr	r3, [pc, #688]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	4aab      	ldr	r2, [pc, #684]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ed6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003eda:	6093      	str	r3, [r2, #8]
 8003edc:	4ba9      	ldr	r3, [pc, #676]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ede:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ee8:	49a6      	ldr	r1, [pc, #664]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0310 	and.w	r3, r3, #16
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d010      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003efa:	4ba2      	ldr	r3, [pc, #648]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003efc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f00:	4aa0      	ldr	r2, [pc, #640]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f06:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003f0a:	4b9e      	ldr	r3, [pc, #632]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f0c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f14:	499b      	ldr	r1, [pc, #620]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00a      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f28:	4b96      	ldr	r3, [pc, #600]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f2e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f36:	4993      	ldr	r1, [pc, #588]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00a      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f4a:	4b8e      	ldr	r3, [pc, #568]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f50:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f58:	498a      	ldr	r1, [pc, #552]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d00a      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f6c:	4b85      	ldr	r3, [pc, #532]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f72:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f7a:	4982      	ldr	r1, [pc, #520]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00a      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f8e:	4b7d      	ldr	r3, [pc, #500]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f94:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f9c:	4979      	ldr	r1, [pc, #484]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d00a      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003fb0:	4b74      	ldr	r3, [pc, #464]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb6:	f023 0203 	bic.w	r2, r3, #3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fbe:	4971      	ldr	r1, [pc, #452]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00a      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003fd2:	4b6c      	ldr	r3, [pc, #432]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fd8:	f023 020c 	bic.w	r2, r3, #12
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fe0:	4968      	ldr	r1, [pc, #416]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00a      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ff4:	4b63      	ldr	r3, [pc, #396]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ffa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004002:	4960      	ldr	r1, [pc, #384]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004004:	4313      	orrs	r3, r2
 8004006:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00a      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004016:	4b5b      	ldr	r3, [pc, #364]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800401c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004024:	4957      	ldr	r1, [pc, #348]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004026:	4313      	orrs	r3, r2
 8004028:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00a      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004038:	4b52      	ldr	r3, [pc, #328]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800403a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800403e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004046:	494f      	ldr	r1, [pc, #316]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004048:	4313      	orrs	r3, r2
 800404a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00a      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800405a:	4b4a      	ldr	r3, [pc, #296]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800405c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004060:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004068:	4946      	ldr	r1, [pc, #280]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800406a:	4313      	orrs	r3, r2
 800406c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d00a      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800407c:	4b41      	ldr	r3, [pc, #260]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800407e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004082:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800408a:	493e      	ldr	r1, [pc, #248]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800408c:	4313      	orrs	r3, r2
 800408e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00a      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800409e:	4b39      	ldr	r3, [pc, #228]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040ac:	4935      	ldr	r1, [pc, #212]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00a      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80040c0:	4b30      	ldr	r3, [pc, #192]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040ce:	492d      	ldr	r1, [pc, #180]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d011      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80040e2:	4b28      	ldr	r3, [pc, #160]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040f0:	4924      	ldr	r1, [pc, #144]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004100:	d101      	bne.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004102:	2301      	movs	r3, #1
 8004104:	61bb      	str	r3, [r7, #24]
    pllsaiused = 1;
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00a      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x434>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004112:	4b1c      	ldr	r3, [pc, #112]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004118:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004120:	4918      	ldr	r1, [pc, #96]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004122:	4313      	orrs	r3, r2
 8004124:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00b      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004134:	4b13      	ldr	r3, [pc, #76]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800413a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004144:	490f      	ldr	r1, [pc, #60]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004146:	4313      	orrs	r3, r2
 8004148:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	2b01      	cmp	r3, #1
 8004150:	d005      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x46a>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800415a:	f040 80d8 	bne.w	800430e <HAL_RCCEx_PeriphCLKConfig+0x61a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800415e:	4b09      	ldr	r3, [pc, #36]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a08      	ldr	r2, [pc, #32]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004164:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004168:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800416a:	f7fd f8ed 	bl	8001348 <HAL_GetTick>
 800416e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004170:	e00a      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x494>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004172:	f7fd f8e9 	bl	8001348 <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	2b64      	cmp	r3, #100	; 0x64
 800417e:	d903      	bls.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x494>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e167      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8004184:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004188:	4bad      	ldr	r3, [pc, #692]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d1ee      	bne.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x47e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0301 	and.w	r3, r3, #1
 800419c:	2b00      	cmp	r3, #0
 800419e:	d021      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d11d      	bne.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80041a8:	4ba5      	ldr	r3, [pc, #660]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80041aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041ae:	0c1b      	lsrs	r3, r3, #16
 80041b0:	f003 0303 	and.w	r3, r3, #3
 80041b4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80041b6:	4ba2      	ldr	r3, [pc, #648]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80041b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041bc:	0e1b      	lsrs	r3, r3, #24
 80041be:	f003 030f 	and.w	r3, r3, #15
 80041c2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	019a      	lsls	r2, r3, #6
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	041b      	lsls	r3, r3, #16
 80041ce:	431a      	orrs	r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	061b      	lsls	r3, r3, #24
 80041d4:	431a      	orrs	r2, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	071b      	lsls	r3, r3, #28
 80041dc:	4998      	ldr	r1, [pc, #608]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d004      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x506>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041f8:	d00a      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x51c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004202:	2b00      	cmp	r3, #0
 8004204:	d02e      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x570>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800420e:	d129      	bne.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x570>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004210:	4b8b      	ldr	r3, [pc, #556]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8004212:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004216:	0c1b      	lsrs	r3, r3, #16
 8004218:	f003 0303 	and.w	r3, r3, #3
 800421c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800421e:	4b88      	ldr	r3, [pc, #544]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8004220:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004224:	0f1b      	lsrs	r3, r3, #28
 8004226:	f003 0307 	and.w	r3, r3, #7
 800422a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	019a      	lsls	r2, r3, #6
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	041b      	lsls	r3, r3, #16
 8004236:	431a      	orrs	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	061b      	lsls	r3, r3, #24
 800423e:	431a      	orrs	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	071b      	lsls	r3, r3, #28
 8004244:	497e      	ldr	r1, [pc, #504]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8004246:	4313      	orrs	r3, r2
 8004248:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800424c:	4b7c      	ldr	r3, [pc, #496]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800424e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004252:	f023 021f 	bic.w	r2, r3, #31
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425a:	3b01      	subs	r3, #1
 800425c:	4978      	ldr	r1, [pc, #480]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800425e:	4313      	orrs	r3, r2
 8004260:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d01d      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004270:	4b73      	ldr	r3, [pc, #460]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8004272:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004276:	0e1b      	lsrs	r3, r3, #24
 8004278:	f003 030f 	and.w	r3, r3, #15
 800427c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800427e:	4b70      	ldr	r3, [pc, #448]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8004280:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004284:	0f1b      	lsrs	r3, r3, #28
 8004286:	f003 0307 	and.w	r3, r3, #7
 800428a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	019a      	lsls	r2, r3, #6
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	041b      	lsls	r3, r3, #16
 8004298:	431a      	orrs	r2, r3
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	061b      	lsls	r3, r3, #24
 800429e:	431a      	orrs	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	071b      	lsls	r3, r3, #28
 80042a4:	4966      	ldr	r1, [pc, #408]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d011      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x5e8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	019a      	lsls	r2, r3, #6
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	041b      	lsls	r3, r3, #16
 80042c4:	431a      	orrs	r2, r3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	061b      	lsls	r3, r3, #24
 80042cc:	431a      	orrs	r2, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	071b      	lsls	r3, r3, #28
 80042d4:	495a      	ldr	r1, [pc, #360]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80042dc:	4b58      	ldr	r3, [pc, #352]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a57      	ldr	r2, [pc, #348]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80042e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80042e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042e8:	f7fd f82e 	bl	8001348 <HAL_GetTick>
 80042ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042ee:	e008      	b.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x60e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80042f0:	f7fd f82a 	bl	8001348 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	2b64      	cmp	r3, #100	; 0x64
 80042fc:	d901      	bls.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x60e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e0a8      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x760>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004302:	4b4f      	ldr	r3, [pc, #316]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d0f0      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	2b01      	cmp	r3, #1
 8004312:	f040 809e 	bne.w	8004452 <HAL_RCCEx_PeriphCLKConfig+0x75e>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004316:	4b4a      	ldr	r3, [pc, #296]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a49      	ldr	r2, [pc, #292]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800431c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004320:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004322:	f7fd f811 	bl	8001348 <HAL_GetTick>
 8004326:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004328:	e008      	b.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800432a:	f7fd f80d 	bl	8001348 <HAL_GetTick>
 800432e:	4602      	mov	r2, r0
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	2b64      	cmp	r3, #100	; 0x64
 8004336:	d901      	bls.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004338:	2303      	movs	r3, #3
 800433a:	e08b      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x760>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800433c:	4b40      	ldr	r3, [pc, #256]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004344:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004348:	d0ef      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x636>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d003      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800435a:	2b00      	cmp	r3, #0
 800435c:	d009      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x67e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004366:	2b00      	cmp	r3, #0
 8004368:	d02e      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436e:	2b00      	cmp	r3, #0
 8004370:	d12a      	bne.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004372:	4b33      	ldr	r3, [pc, #204]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8004374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004378:	0c1b      	lsrs	r3, r3, #16
 800437a:	f003 0303 	and.w	r3, r3, #3
 800437e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004380:	4b2f      	ldr	r3, [pc, #188]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8004382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004386:	0f1b      	lsrs	r3, r3, #28
 8004388:	f003 0307 	and.w	r3, r3, #7
 800438c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	019a      	lsls	r2, r3, #6
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	041b      	lsls	r3, r3, #16
 8004398:	431a      	orrs	r2, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	699b      	ldr	r3, [r3, #24]
 800439e:	061b      	lsls	r3, r3, #24
 80043a0:	431a      	orrs	r2, r3
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	071b      	lsls	r3, r3, #28
 80043a6:	4926      	ldr	r1, [pc, #152]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80043ae:	4b24      	ldr	r3, [pc, #144]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80043b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043b4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043bc:	3b01      	subs	r3, #1
 80043be:	021b      	lsls	r3, r3, #8
 80043c0:	491f      	ldr	r1, [pc, #124]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d022      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x726>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043dc:	d11d      	bne.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x726>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80043de:	4b18      	ldr	r3, [pc, #96]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80043e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e4:	0e1b      	lsrs	r3, r3, #24
 80043e6:	f003 030f 	and.w	r3, r3, #15
 80043ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80043ec:	4b14      	ldr	r3, [pc, #80]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80043ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043f2:	0f1b      	lsrs	r3, r3, #28
 80043f4:	f003 0307 	and.w	r3, r3, #7
 80043f8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	695b      	ldr	r3, [r3, #20]
 80043fe:	019a      	lsls	r2, r3, #6
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a1b      	ldr	r3, [r3, #32]
 8004404:	041b      	lsls	r3, r3, #16
 8004406:	431a      	orrs	r2, r3
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	061b      	lsls	r3, r3, #24
 800440c:	431a      	orrs	r2, r3
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	071b      	lsls	r3, r3, #28
 8004412:	490b      	ldr	r1, [pc, #44]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8004414:	4313      	orrs	r3, r2
 8004416:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800441a:	4b09      	ldr	r3, [pc, #36]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a08      	ldr	r2, [pc, #32]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8004420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004424:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004426:	f7fc ff8f 	bl	8001348 <HAL_GetTick>
 800442a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800442c:	e00a      	b.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x750>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800442e:	f7fc ff8b 	bl	8001348 <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	2b64      	cmp	r3, #100	; 0x64
 800443a:	d903      	bls.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x750>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e009      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8004440:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004444:	4b05      	ldr	r3, [pc, #20]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x768>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800444c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004450:	d1ed      	bne.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x73a>
      }
    }
  }
  return HAL_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3720      	adds	r7, #32
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	40023800 	.word	0x40023800

08004460 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d101      	bne.n	8004472 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e022      	b.n	80044b8 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004478:	b2db      	uxtb	r3, r3
 800447a:	2b00      	cmp	r3, #0
 800447c:	d105      	bne.n	800448a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f7fc fa69 	bl	800095c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2203      	movs	r2, #3
 800448e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 f814 	bl	80044c0 <HAL_SD_InitCard>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d001      	beq.n	80044a2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e00a      	b.n	80044b8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2201      	movs	r2, #1
 80044b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3708      	adds	r7, #8
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80044c0:	b5b0      	push	{r4, r5, r7, lr}
 80044c2:	b08e      	sub	sp, #56	; 0x38
 80044c4:	af04      	add	r7, sp, #16
 80044c6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80044c8:	2300      	movs	r3, #0
 80044ca:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80044cc:	2300      	movs	r3, #0
 80044ce:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80044d0:	2300      	movs	r3, #0
 80044d2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80044d4:	2300      	movs	r3, #0
 80044d6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80044d8:	2300      	movs	r3, #0
 80044da:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80044dc:	2376      	movs	r3, #118	; 0x76
 80044de:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681d      	ldr	r5, [r3, #0]
 80044e4:	466c      	mov	r4, sp
 80044e6:	f107 0314 	add.w	r3, r7, #20
 80044ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80044ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80044f2:	f107 0308 	add.w	r3, r7, #8
 80044f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80044f8:	4628      	mov	r0, r5
 80044fa:	f001 fd0d 	bl	8005f18 <SDMMC_Init>
 80044fe:	4603      	mov	r3, r0
 8004500:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8004504:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004508:	2b00      	cmp	r3, #0
 800450a:	d001      	beq.n	8004510 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e03b      	b.n	8004588 <HAL_SD_InitCard+0xc8>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	685a      	ldr	r2, [r3, #4]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800451e:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4618      	mov	r0, r3
 8004526:	f001 fd41 	bl	8005fac <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	685a      	ldr	r2, [r3, #4]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004538:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 ffca 	bl	80054d4 <SD_PowerON>
 8004540:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004542:	6a3b      	ldr	r3, [r7, #32]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d00b      	beq.n	8004560 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004554:	6a3b      	ldr	r3, [r7, #32]
 8004556:	431a      	orrs	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e013      	b.n	8004588 <HAL_SD_InitCard+0xc8>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f000 fee9 	bl	8005338 <SD_InitCard>
 8004566:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004568:	6a3b      	ldr	r3, [r7, #32]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00b      	beq.n	8004586 <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2201      	movs	r2, #1
 8004572:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800457a:	6a3b      	ldr	r3, [r7, #32]
 800457c:	431a      	orrs	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e000      	b.n	8004588 <HAL_SD_InitCard+0xc8>
  }

  return HAL_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	3728      	adds	r7, #40	; 0x28
 800458c:	46bd      	mov	sp, r7
 800458e:	bdb0      	pop	{r4, r5, r7, pc}

08004590 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b08c      	sub	sp, #48	; 0x30
 8004594:	af00      	add	r7, sp, #0
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	60b9      	str	r1, [r7, #8]
 800459a:	607a      	str	r2, [r7, #4]
 800459c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d107      	bne.n	80045b8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ac:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e0cc      	b.n	8004752 <HAL_SD_ReadBlocks_DMA+0x1c2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	f040 80c5 	bne.w	8004750 <HAL_SD_ReadBlocks_DMA+0x1c0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80045cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	441a      	add	r2, r3
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d907      	bls.n	80045ea <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045de:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e0b3      	b.n	8004752 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2203      	movs	r2, #3
 80045ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2200      	movs	r2, #0
 80045f8:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8004608:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460e:	4a53      	ldr	r2, [pc, #332]	; (800475c <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8004610:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004616:	4a52      	ldr	r2, [pc, #328]	; (8004760 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8004618:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461e:	2200      	movs	r2, #0
 8004620:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	3380      	adds	r3, #128	; 0x80
 800462c:	4619      	mov	r1, r3
 800462e:	68ba      	ldr	r2, [r7, #8]
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	025b      	lsls	r3, r3, #9
 8004634:	089b      	lsrs	r3, r3, #2
 8004636:	f7fd f845 	bl	80016c4 <HAL_DMA_Start_IT>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d017      	beq.n	8004670 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800464e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a43      	ldr	r2, [pc, #268]	; (8004764 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8004656:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e070      	b.n	8004752 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f042 0208 	orr.w	r2, r2, #8
 800467e:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004684:	2b01      	cmp	r3, #1
 8004686:	d002      	beq.n	800468e <HAL_SD_ReadBlocks_DMA+0xfe>
      {
        add *= 512U;
 8004688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800468a:	025b      	lsls	r3, r3, #9
 800468c:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004696:	4618      	mov	r0, r3
 8004698:	f001 fd1c 	bl	80060d4 <SDMMC_CmdBlockLength>
 800469c:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800469e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00f      	beq.n	80046c4 <HAL_SD_ReadBlocks_DMA+0x134>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a2e      	ldr	r2, [pc, #184]	; (8004764 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 80046aa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b2:	431a      	orrs	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e046      	b.n	8004752 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80046c4:	f04f 33ff 	mov.w	r3, #4294967295
 80046c8:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	025b      	lsls	r3, r3, #9
 80046ce:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80046d0:	2390      	movs	r3, #144	; 0x90
 80046d2:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80046d4:	2302      	movs	r3, #2
 80046d6:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80046d8:	2300      	movs	r3, #0
 80046da:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80046dc:	2301      	movs	r3, #1
 80046de:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f107 0210 	add.w	r2, r7, #16
 80046e8:	4611      	mov	r1, r2
 80046ea:	4618      	mov	r0, r3
 80046ec:	f001 fcc6 	bl	800607c <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d90a      	bls.n	800470c <HAL_SD_ReadBlocks_DMA+0x17c>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2282      	movs	r2, #130	; 0x82
 80046fa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004702:	4618      	mov	r0, r3
 8004704:	f001 fd2a 	bl	800615c <SDMMC_CmdReadMultiBlock>
 8004708:	62f8      	str	r0, [r7, #44]	; 0x2c
 800470a:	e009      	b.n	8004720 <HAL_SD_ReadBlocks_DMA+0x190>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2281      	movs	r2, #129	; 0x81
 8004710:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004718:	4618      	mov	r0, r3
 800471a:	f001 fcfd 	bl	8006118 <SDMMC_CmdReadSingleBlock>
 800471e:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8004720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004722:	2b00      	cmp	r3, #0
 8004724:	d012      	beq.n	800474c <HAL_SD_ReadBlocks_DMA+0x1bc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a0e      	ldr	r2, [pc, #56]	; (8004764 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 800472c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004734:	431a      	orrs	r2, r3
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2201      	movs	r2, #1
 800473e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2200      	movs	r2, #0
 8004746:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e002      	b.n	8004752 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      return HAL_OK;
 800474c:	2300      	movs	r3, #0
 800474e:	e000      	b.n	8004752 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
  }
  else
  {
    return HAL_BUSY;
 8004750:	2302      	movs	r3, #2
  }
}
 8004752:	4618      	mov	r0, r3
 8004754:	3730      	adds	r7, #48	; 0x30
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	08005147 	.word	0x08005147
 8004760:	080051b9 	.word	0x080051b9
 8004764:	004005ff 	.word	0x004005ff

08004768 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b08c      	sub	sp, #48	; 0x30
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]
 8004774:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d107      	bne.n	8004790 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004784:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e0cf      	b.n	8004930 <HAL_SD_WriteBlocks_DMA+0x1c8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004796:	b2db      	uxtb	r3, r3
 8004798:	2b01      	cmp	r3, #1
 800479a:	f040 80c8 	bne.w	800492e <HAL_SD_WriteBlocks_DMA+0x1c6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80047a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	441a      	add	r2, r3
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d907      	bls.n	80047c2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e0b6      	b.n	8004930 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2203      	movs	r2, #3
 80047c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2200      	movs	r2, #0
 80047d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f042 021a 	orr.w	r2, r2, #26
 80047e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047e6:	4a54      	ldr	r2, [pc, #336]	; (8004938 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 80047e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ee:	4a53      	ldr	r2, [pc, #332]	; (800493c <HAL_SD_WriteBlocks_DMA+0x1d4>)
 80047f0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047f6:	2200      	movs	r2, #0
 80047f8:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d002      	beq.n	8004808 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8004802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004804:	025b      	lsls	r3, r3, #9
 8004806:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004810:	4618      	mov	r0, r3
 8004812:	f001 fc5f 	bl	80060d4 <SDMMC_CmdBlockLength>
 8004816:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00f      	beq.n	800483e <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a47      	ldr	r2, [pc, #284]	; (8004940 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8004824:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800482a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800482c:	431a      	orrs	r2, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2201      	movs	r2, #1
 8004836:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e078      	b.n	8004930 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	2b01      	cmp	r3, #1
 8004842:	d90a      	bls.n	800485a <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	22a0      	movs	r2, #160	; 0xa0
 8004848:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004850:	4618      	mov	r0, r3
 8004852:	f001 fcc7 	bl	80061e4 <SDMMC_CmdWriteMultiBlock>
 8004856:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004858:	e009      	b.n	800486e <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2290      	movs	r2, #144	; 0x90
 800485e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004866:	4618      	mov	r0, r3
 8004868:	f001 fc9a 	bl	80061a0 <SDMMC_CmdWriteSingleBlock>
 800486c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800486e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004870:	2b00      	cmp	r3, #0
 8004872:	d012      	beq.n	800489a <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a31      	ldr	r2, [pc, #196]	; (8004940 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800487a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004882:	431a      	orrs	r2, r3
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2200      	movs	r2, #0
 8004894:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e04a      	b.n	8004930 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f042 0208 	orr.w	r2, r2, #8
 80048a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80048ae:	68b9      	ldr	r1, [r7, #8]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	3380      	adds	r3, #128	; 0x80
 80048b6:	461a      	mov	r2, r3
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	025b      	lsls	r3, r3, #9
 80048bc:	089b      	lsrs	r3, r3, #2
 80048be:	f7fc ff01 	bl	80016c4 <HAL_DMA_Start_IT>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d01a      	beq.n	80048fe <HAL_SD_WriteBlocks_DMA+0x196>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f022 021a 	bic.w	r2, r2, #26
 80048d6:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a18      	ldr	r2, [pc, #96]	; (8004940 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80048de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2200      	movs	r2, #0
 80048f8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e018      	b.n	8004930 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80048fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004902:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	025b      	lsls	r3, r3, #9
 8004908:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800490a:	2390      	movs	r3, #144	; 0x90
 800490c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800490e:	2300      	movs	r3, #0
 8004910:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004912:	2300      	movs	r3, #0
 8004914:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8004916:	2301      	movs	r3, #1
 8004918:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f107 0210 	add.w	r2, r7, #16
 8004922:	4611      	mov	r1, r2
 8004924:	4618      	mov	r0, r3
 8004926:	f001 fba9 	bl	800607c <SDMMC_ConfigData>

      return HAL_OK;
 800492a:	2300      	movs	r3, #0
 800492c:	e000      	b.n	8004930 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
  }
  else
  {
    return HAL_BUSY;
 800492e:	2302      	movs	r3, #2
  }
}
 8004930:	4618      	mov	r0, r3
 8004932:	3730      	adds	r7, #48	; 0x30
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}
 8004938:	0800511d 	.word	0x0800511d
 800493c:	080051b9 	.word	0x080051b9
 8004940:	004005ff 	.word	0x004005ff

08004944 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004950:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004958:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800495c:	2b00      	cmp	r3, #0
 800495e:	d008      	beq.n	8004972 <HAL_SD_IRQHandler+0x2e>
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f003 0308 	and.w	r3, r3, #8
 8004966:	2b00      	cmp	r3, #0
 8004968:	d003      	beq.n	8004972 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 ffc8 	bl	8005900 <SD_Read_IT>
 8004970:	e153      	b.n	8004c1a <HAL_SD_IRQHandler+0x2d6>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800497c:	2b00      	cmp	r3, #0
 800497e:	f000 808d 	beq.w	8004a9c <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f44f 7280 	mov.w	r2, #256	; 0x100
 800498a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	4ba3      	ldr	r3, [pc, #652]	; (8004c24 <HAL_SD_IRQHandler+0x2e0>)
 8004998:	400b      	ands	r3, r1
 800499a:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f022 0201 	bic.w	r2, r2, #1
 80049aa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f003 0308 	and.w	r3, r3, #8
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d039      	beq.n	8004a2a <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f003 0302 	and.w	r3, r3, #2
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d104      	bne.n	80049ca <HAL_SD_IRQHandler+0x86>
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f003 0320 	and.w	r3, r3, #32
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d011      	beq.n	80049ee <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4618      	mov	r0, r3
 80049d0:	f001 fc2a 	bl	8006228 <SDMMC_CmdStopTransfer>
 80049d4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d008      	beq.n	80049ee <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	431a      	orrs	r2, r3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f000 f921 	bl	8004c30 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f240 523a 	movw	r2, #1338	; 0x53a
 80049f6:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f003 0301 	and.w	r3, r3, #1
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d104      	bne.n	8004a1a <HAL_SD_IRQHandler+0xd6>
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f003 0302 	and.w	r3, r3, #2
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d003      	beq.n	8004a22 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f003 fbac 	bl	8008178 <HAL_SD_RxCpltCallback>
 8004a20:	e0fb      	b.n	8004c1a <HAL_SD_IRQHandler+0x2d6>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f003 fb9e 	bl	8008164 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004a28:	e0f7      	b.n	8004c1a <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	f000 80f2 	beq.w	8004c1a <HAL_SD_IRQHandler+0x2d6>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f003 0320 	and.w	r3, r3, #32
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d011      	beq.n	8004a64 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4618      	mov	r0, r3
 8004a46:	f001 fbef 	bl	8006228 <SDMMC_CmdStopTransfer>
 8004a4a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d008      	beq.n	8004a64 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	431a      	orrs	r2, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 f8e6 	bl	8004c30 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f003 0301 	and.w	r3, r3, #1
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	f040 80d5 	bne.w	8004c1a <HAL_SD_IRQHandler+0x2d6>
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f003 0302 	and.w	r3, r3, #2
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	f040 80cf 	bne.w	8004c1a <HAL_SD_IRQHandler+0x2d6>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f022 0208 	bic.w	r2, r2, #8
 8004a8a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f003 fb65 	bl	8008164 <HAL_SD_TxCpltCallback>
}
 8004a9a:	e0be      	b.n	8004c1a <HAL_SD_IRQHandler+0x2d6>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d008      	beq.n	8004abc <HAL_SD_IRQHandler+0x178>
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f003 0308 	and.w	r3, r3, #8
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d003      	beq.n	8004abc <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f000 ff74 	bl	80059a2 <SD_Write_IT>
 8004aba:	e0ae      	b.n	8004c1a <HAL_SD_IRQHandler+0x2d6>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ac2:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	f000 80a7 	beq.w	8004c1a <HAL_SD_IRQHandler+0x2d6>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d005      	beq.n	8004ae6 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ade:	f043 0202 	orr.w	r2, r3, #2
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aec:	f003 0308 	and.w	r3, r3, #8
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d005      	beq.n	8004b00 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af8:	f043 0208 	orr.w	r2, r3, #8
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b06:	f003 0320 	and.w	r3, r3, #32
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d005      	beq.n	8004b1a <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b12:	f043 0220 	orr.w	r2, r3, #32
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b20:	f003 0310 	and.w	r3, r3, #16
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d005      	beq.n	8004b34 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2c:	f043 0210 	orr.w	r2, r3, #16
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f240 523a 	movw	r2, #1338	; 0x53a
 8004b3c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8004b4c:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4618      	mov	r0, r3
 8004b54:	f001 fb68 	bl	8006228 <SDMMC_CmdStopTransfer>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5e:	431a      	orrs	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f003 0308 	and.w	r3, r3, #8
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00a      	beq.n	8004b84 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2201      	movs	r2, #1
 8004b72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f000 f857 	bl	8004c30 <HAL_SD_ErrorCallback>
}
 8004b82:	e04a      	b.n	8004c1a <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d045      	beq.n	8004c1a <HAL_SD_IRQHandler+0x2d6>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f003 0310 	and.w	r3, r3, #16
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d104      	bne.n	8004ba2 <HAL_SD_IRQHandler+0x25e>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f003 0320 	and.w	r3, r3, #32
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d011      	beq.n	8004bc6 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba6:	4a20      	ldr	r2, [pc, #128]	; (8004c28 <HAL_SD_IRQHandler+0x2e4>)
 8004ba8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f7fc fde8 	bl	8001784 <HAL_DMA_Abort_IT>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d02f      	beq.n	8004c1a <HAL_SD_IRQHandler+0x2d6>
          SD_DMATxAbort(hsd->hdmatx);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f000 fb4c 	bl	800525c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004bc4:	e029      	b.n	8004c1a <HAL_SD_IRQHandler+0x2d6>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f003 0301 	and.w	r3, r3, #1
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d104      	bne.n	8004bda <HAL_SD_IRQHandler+0x296>
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f003 0302 	and.w	r3, r3, #2
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d011      	beq.n	8004bfe <HAL_SD_IRQHandler+0x2ba>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bde:	4a13      	ldr	r2, [pc, #76]	; (8004c2c <HAL_SD_IRQHandler+0x2e8>)
 8004be0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7fc fdcc 	bl	8001784 <HAL_DMA_Abort_IT>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d013      	beq.n	8004c1a <HAL_SD_IRQHandler+0x2d6>
          SD_DMARxAbort(hsd->hdmarx);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f000 fb67 	bl	80052ca <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004bfc:	e00d      	b.n	8004c1a <HAL_SD_IRQHandler+0x2d6>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f003 fa9c 	bl	8008150 <HAL_SD_AbortCallback>
}
 8004c18:	e7ff      	b.n	8004c1a <HAL_SD_IRQHandler+0x2d6>
 8004c1a:	bf00      	nop
 8004c1c:	3710      	adds	r7, #16
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	ffff3ec5 	.word	0xffff3ec5
 8004c28:	0800525d 	.word	0x0800525d
 8004c2c:	080052cb 	.word	0x080052cb

08004c30 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8004c38:	bf00      	nop
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c52:	0f9b      	lsrs	r3, r3, #30
 8004c54:	b2da      	uxtb	r2, r3
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c5e:	0e9b      	lsrs	r3, r3, #26
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	f003 030f 	and.w	r3, r3, #15
 8004c66:	b2da      	uxtb	r2, r3
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c70:	0e1b      	lsrs	r3, r3, #24
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	f003 0303 	and.w	r3, r3, #3
 8004c78:	b2da      	uxtb	r2, r3
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c82:	0c1b      	lsrs	r3, r3, #16
 8004c84:	b2da      	uxtb	r2, r3
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c8e:	0a1b      	lsrs	r3, r3, #8
 8004c90:	b2da      	uxtb	r2, r3
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c9a:	b2da      	uxtb	r2, r3
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ca4:	0d1b      	lsrs	r3, r3, #20
 8004ca6:	b29a      	uxth	r2, r3
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cb0:	0c1b      	lsrs	r3, r3, #16
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	f003 030f 	and.w	r3, r3, #15
 8004cb8:	b2da      	uxtb	r2, r3
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cc2:	0bdb      	lsrs	r3, r3, #15
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	f003 0301 	and.w	r3, r3, #1
 8004cca:	b2da      	uxtb	r2, r3
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cd4:	0b9b      	lsrs	r3, r3, #14
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	f003 0301 	and.w	r3, r3, #1
 8004cdc:	b2da      	uxtb	r2, r3
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ce6:	0b5b      	lsrs	r3, r3, #13
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	f003 0301 	and.w	r3, r3, #1
 8004cee:	b2da      	uxtb	r2, r3
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cf8:	0b1b      	lsrs	r3, r3, #12
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	f003 0301 	and.w	r3, r3, #1
 8004d00:	b2da      	uxtb	r2, r3
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d163      	bne.n	8004ddc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d18:	009a      	lsls	r2, r3, #2
 8004d1a:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004d1e:	4013      	ands	r3, r2
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004d24:	0f92      	lsrs	r2, r2, #30
 8004d26:	431a      	orrs	r2, r3
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d30:	0edb      	lsrs	r3, r3, #27
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	f003 0307 	and.w	r3, r3, #7
 8004d38:	b2da      	uxtb	r2, r3
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d42:	0e1b      	lsrs	r3, r3, #24
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	f003 0307 	and.w	r3, r3, #7
 8004d4a:	b2da      	uxtb	r2, r3
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d54:	0d5b      	lsrs	r3, r3, #21
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	f003 0307 	and.w	r3, r3, #7
 8004d5c:	b2da      	uxtb	r2, r3
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d66:	0c9b      	lsrs	r3, r3, #18
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	f003 0307 	and.w	r3, r3, #7
 8004d6e:	b2da      	uxtb	r2, r3
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d78:	0bdb      	lsrs	r3, r3, #15
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	f003 0307 	and.w	r3, r3, #7
 8004d80:	b2da      	uxtb	r2, r3
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	1c5a      	adds	r2, r3, #1
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	7e1b      	ldrb	r3, [r3, #24]
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	f003 0307 	and.w	r3, r3, #7
 8004d9a:	3302      	adds	r3, #2
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004da6:	fb02 f203 	mul.w	r2, r2, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	7a1b      	ldrb	r3, [r3, #8]
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	f003 030f 	and.w	r3, r3, #15
 8004db8:	2201      	movs	r2, #1
 8004dba:	409a      	lsls	r2, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004dc8:	0a52      	lsrs	r2, r2, #9
 8004dca:	fb02 f203 	mul.w	r2, r2, r3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004dd8:	661a      	str	r2, [r3, #96]	; 0x60
 8004dda:	e031      	b.n	8004e40 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d11d      	bne.n	8004e20 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004de8:	041b      	lsls	r3, r3, #16
 8004dea:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004df2:	0c1b      	lsrs	r3, r3, #16
 8004df4:	431a      	orrs	r2, r3
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	3301      	adds	r3, #1
 8004e00:	029a      	lsls	r2, r3, #10
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e14:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	661a      	str	r2, [r3, #96]	; 0x60
 8004e1e:	e00f      	b.n	8004e40 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a58      	ldr	r2, [pc, #352]	; (8004f88 <HAL_SD_GetCardCSD+0x344>)
 8004e26:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e2c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e09d      	b.n	8004f7c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e44:	0b9b      	lsrs	r3, r3, #14
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	f003 0301 	and.w	r3, r3, #1
 8004e4c:	b2da      	uxtb	r2, r3
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e56:	09db      	lsrs	r3, r3, #7
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e5e:	b2da      	uxtb	r2, r3
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e6e:	b2da      	uxtb	r2, r3
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e78:	0fdb      	lsrs	r3, r3, #31
 8004e7a:	b2da      	uxtb	r2, r3
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e84:	0f5b      	lsrs	r3, r3, #29
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	f003 0303 	and.w	r3, r3, #3
 8004e8c:	b2da      	uxtb	r2, r3
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e96:	0e9b      	lsrs	r3, r3, #26
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	f003 0307 	and.w	r3, r3, #7
 8004e9e:	b2da      	uxtb	r2, r3
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea8:	0d9b      	lsrs	r3, r3, #22
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	f003 030f 	and.w	r3, r3, #15
 8004eb0:	b2da      	uxtb	r2, r3
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eba:	0d5b      	lsrs	r3, r3, #21
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	b2da      	uxtb	r2, r3
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed6:	0c1b      	lsrs	r3, r3, #16
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	f003 0301 	and.w	r3, r3, #1
 8004ede:	b2da      	uxtb	r2, r3
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eea:	0bdb      	lsrs	r3, r3, #15
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	b2da      	uxtb	r2, r3
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004efe:	0b9b      	lsrs	r3, r3, #14
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	f003 0301 	and.w	r3, r3, #1
 8004f06:	b2da      	uxtb	r2, r3
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f12:	0b5b      	lsrs	r3, r3, #13
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	f003 0301 	and.w	r3, r3, #1
 8004f1a:	b2da      	uxtb	r2, r3
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f26:	0b1b      	lsrs	r3, r3, #12
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	f003 0301 	and.w	r3, r3, #1
 8004f2e:	b2da      	uxtb	r2, r3
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f3a:	0a9b      	lsrs	r3, r3, #10
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	f003 0303 	and.w	r3, r3, #3
 8004f42:	b2da      	uxtb	r2, r3
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f4e:	0a1b      	lsrs	r3, r3, #8
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	f003 0303 	and.w	r3, r3, #3
 8004f56:	b2da      	uxtb	r2, r3
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f62:	085b      	lsrs	r3, r3, #1
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f6a:	b2da      	uxtb	r2, r3
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	2201      	movs	r2, #1
 8004f76:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8004f7a:	2300      	movs	r3, #0
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	370c      	adds	r7, #12
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr
 8004f88:	004005ff 	.word	0x004005ff

08004f8c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8004fd6:	2300      	movs	r3, #0
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	370c      	adds	r7, #12
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8004fe4:	b5b0      	push	{r4, r5, r7, lr}
 8004fe6:	b08e      	sub	sp, #56	; 0x38
 8004fe8:	af04      	add	r7, sp, #16
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2203      	movs	r2, #3
 8004ff2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ffa:	2b03      	cmp	r3, #3
 8004ffc:	d02e      	beq.n	800505c <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005004:	d106      	bne.n	8005014 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	639a      	str	r2, [r3, #56]	; 0x38
 8005012:	e029      	b.n	8005068 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800501a:	d10a      	bne.n	8005032 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f000 fb0f 	bl	8005640 <SD_WideBus_Enable>
 8005022:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502a:	431a      	orrs	r2, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	639a      	str	r2, [r3, #56]	; 0x38
 8005030:	e01a      	b.n	8005068 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d10a      	bne.n	800504e <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f000 fb4c 	bl	80056d6 <SD_WideBus_Disable>
 800503e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005046:	431a      	orrs	r2, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	639a      	str	r2, [r3, #56]	; 0x38
 800504c:	e00c      	b.n	8005068 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005052:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	639a      	str	r2, [r3, #56]	; 0x38
 800505a:	e005      	b.n	8005068 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005060:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800506c:	2b00      	cmp	r3, #0
 800506e:	d009      	beq.n	8005084 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a18      	ldr	r2, [pc, #96]	; (80050d8 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8005076:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e024      	b.n	80050ce <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	695b      	ldr	r3, [r3, #20]
 800509e:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	699b      	ldr	r3, [r3, #24]
 80050a4:	623b      	str	r3, [r7, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681d      	ldr	r5, [r3, #0]
 80050aa:	466c      	mov	r4, sp
 80050ac:	f107 0318 	add.w	r3, r7, #24
 80050b0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80050b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80050b8:	f107 030c 	add.w	r3, r7, #12
 80050bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80050be:	4628      	mov	r0, r5
 80050c0:	f000 ff2a 	bl	8005f18 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80050cc:	2300      	movs	r3, #0
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3728      	adds	r7, #40	; 0x28
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bdb0      	pop	{r4, r5, r7, pc}
 80050d6:	bf00      	nop
 80050d8:	004005ff 	.word	0x004005ff

080050dc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b086      	sub	sp, #24
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80050e4:	2300      	movs	r3, #0
 80050e6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80050e8:	f107 030c 	add.w	r3, r7, #12
 80050ec:	4619      	mov	r1, r3
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 fa7e 	bl	80055f0 <SD_SendStatus>
 80050f4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d005      	beq.n	8005108 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	431a      	orrs	r2, r3
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	0a5b      	lsrs	r3, r3, #9
 800510c:	f003 030f 	and.w	r3, r3, #15
 8005110:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005112:	693b      	ldr	r3, [r7, #16]
}
 8005114:	4618      	mov	r0, r3
 8005116:	3718      	adds	r7, #24
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800511c:	b480      	push	{r7}
 800511e:	b085      	sub	sp, #20
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005128:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005138:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800513a:	bf00      	nop
 800513c:	3714      	adds	r7, #20
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr

08005146 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005146:	b580      	push	{r7, lr}
 8005148:	b084      	sub	sp, #16
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005152:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005158:	2b82      	cmp	r3, #130	; 0x82
 800515a:	d111      	bne.n	8005180 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4618      	mov	r0, r3
 8005162:	f001 f861 	bl	8006228 <SDMMC_CmdStopTransfer>
 8005166:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d008      	beq.n	8005180 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	431a      	orrs	r2, r3
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800517a:	68f8      	ldr	r0, [r7, #12]
 800517c:	f7ff fd58 	bl	8004c30 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f022 0208 	bic.w	r2, r2, #8
 800518e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f240 523a 	movw	r2, #1338	; 0x53a
 8005198:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2201      	movs	r2, #1
 800519e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2200      	movs	r2, #0
 80051a6:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	f002 ffe5 	bl	8008178 <HAL_SD_RxCpltCallback>
#endif
}
 80051ae:	bf00      	nop
 80051b0:	3710      	adds	r7, #16
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
	...

080051b8 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b086      	sub	sp, #24
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c4:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f7fc fc88 	bl	8001adc <HAL_DMA_GetError>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	d03e      	beq.n	8005250 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051d8:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051e0:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d002      	beq.n	80051ee <SD_DMAError+0x36>
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d12d      	bne.n	800524a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a19      	ldr	r2, [pc, #100]	; (8005258 <SD_DMAError+0xa0>)
 80051f4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8005204:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800520a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8005212:	6978      	ldr	r0, [r7, #20]
 8005214:	f7ff ff62 	bl	80050dc <HAL_SD_GetCardState>
 8005218:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	2b06      	cmp	r3, #6
 800521e:	d002      	beq.n	8005226 <SD_DMAError+0x6e>
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	2b05      	cmp	r3, #5
 8005224:	d10a      	bne.n	800523c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4618      	mov	r0, r3
 800522c:	f000 fffc 	bl	8006228 <SDMMC_CmdStopTransfer>
 8005230:	4602      	mov	r2, r0
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005236:	431a      	orrs	r2, r3
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	2200      	movs	r2, #0
 8005248:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800524a:	6978      	ldr	r0, [r7, #20]
 800524c:	f7ff fcf0 	bl	8004c30 <HAL_SD_ErrorCallback>
#endif
  }
}
 8005250:	bf00      	nop
 8005252:	3718      	adds	r7, #24
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}
 8005258:	004005ff 	.word	0x004005ff

0800525c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005268:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f240 523a 	movw	r2, #1338	; 0x53a
 8005272:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005274:	68f8      	ldr	r0, [r7, #12]
 8005276:	f7ff ff31 	bl	80050dc <HAL_SD_GetCardState>
 800527a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2200      	movs	r2, #0
 8005288:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	2b06      	cmp	r3, #6
 800528e:	d002      	beq.n	8005296 <SD_DMATxAbort+0x3a>
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	2b05      	cmp	r3, #5
 8005294:	d10a      	bne.n	80052ac <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4618      	mov	r0, r3
 800529c:	f000 ffc4 	bl	8006228 <SDMMC_CmdStopTransfer>
 80052a0:	4602      	mov	r2, r0
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a6:	431a      	orrs	r2, r3
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d103      	bne.n	80052bc <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80052b4:	68f8      	ldr	r0, [r7, #12]
 80052b6:	f002 ff4b 	bl	8008150 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80052ba:	e002      	b.n	80052c2 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80052bc:	68f8      	ldr	r0, [r7, #12]
 80052be:	f7ff fcb7 	bl	8004c30 <HAL_SD_ErrorCallback>
}
 80052c2:	bf00      	nop
 80052c4:	3710      	adds	r7, #16
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}

080052ca <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80052ca:	b580      	push	{r7, lr}
 80052cc:	b084      	sub	sp, #16
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d6:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f240 523a 	movw	r2, #1338	; 0x53a
 80052e0:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80052e2:	68f8      	ldr	r0, [r7, #12]
 80052e4:	f7ff fefa 	bl	80050dc <HAL_SD_GetCardState>
 80052e8:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	2b06      	cmp	r3, #6
 80052fc:	d002      	beq.n	8005304 <SD_DMARxAbort+0x3a>
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	2b05      	cmp	r3, #5
 8005302:	d10a      	bne.n	800531a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4618      	mov	r0, r3
 800530a:	f000 ff8d 	bl	8006228 <SDMMC_CmdStopTransfer>
 800530e:	4602      	mov	r2, r0
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005314:	431a      	orrs	r2, r3
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800531e:	2b00      	cmp	r3, #0
 8005320:	d103      	bne.n	800532a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8005322:	68f8      	ldr	r0, [r7, #12]
 8005324:	f002 ff14 	bl	8008150 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8005328:	e002      	b.n	8005330 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800532a:	68f8      	ldr	r0, [r7, #12]
 800532c:	f7ff fc80 	bl	8004c30 <HAL_SD_ErrorCallback>
}
 8005330:	bf00      	nop
 8005332:	3710      	adds	r7, #16
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005338:	b5b0      	push	{r4, r5, r7, lr}
 800533a:	b094      	sub	sp, #80	; 0x50
 800533c:	af04      	add	r7, sp, #16
 800533e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005340:	2301      	movs	r3, #1
 8005342:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4618      	mov	r0, r3
 800534a:	f000 fe3e 	bl	8005fca <SDMMC_GetPowerState>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d102      	bne.n	800535a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005354:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005358:	e0b7      	b.n	80054ca <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800535e:	2b03      	cmp	r3, #3
 8005360:	d02f      	beq.n	80053c2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4618      	mov	r0, r3
 8005368:	f001 f869 	bl	800643e <SDMMC_CmdSendCID>
 800536c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800536e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005370:	2b00      	cmp	r3, #0
 8005372:	d001      	beq.n	8005378 <SD_InitCard+0x40>
    {
      return errorstate;
 8005374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005376:	e0a8      	b.n	80054ca <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2100      	movs	r1, #0
 800537e:	4618      	mov	r0, r3
 8005380:	f000 fe69 	bl	8006056 <SDMMC_GetResponse>
 8005384:	4602      	mov	r2, r0
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	2104      	movs	r1, #4
 8005390:	4618      	mov	r0, r3
 8005392:	f000 fe60 	bl	8006056 <SDMMC_GetResponse>
 8005396:	4602      	mov	r2, r0
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2108      	movs	r1, #8
 80053a2:	4618      	mov	r0, r3
 80053a4:	f000 fe57 	bl	8006056 <SDMMC_GetResponse>
 80053a8:	4602      	mov	r2, r0
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	210c      	movs	r1, #12
 80053b4:	4618      	mov	r0, r3
 80053b6:	f000 fe4e 	bl	8006056 <SDMMC_GetResponse>
 80053ba:	4602      	mov	r2, r0
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053c6:	2b03      	cmp	r3, #3
 80053c8:	d00d      	beq.n	80053e6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f107 020e 	add.w	r2, r7, #14
 80053d2:	4611      	mov	r1, r2
 80053d4:	4618      	mov	r0, r3
 80053d6:	f001 f86f 	bl	80064b8 <SDMMC_CmdSetRelAdd>
 80053da:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80053dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d001      	beq.n	80053e6 <SD_InitCard+0xae>
    {
      return errorstate;
 80053e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053e4:	e071      	b.n	80054ca <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ea:	2b03      	cmp	r3, #3
 80053ec:	d036      	beq.n	800545c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80053ee:	89fb      	ldrh	r3, [r7, #14]
 80053f0:	461a      	mov	r2, r3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053fe:	041b      	lsls	r3, r3, #16
 8005400:	4619      	mov	r1, r3
 8005402:	4610      	mov	r0, r2
 8005404:	f001 f839 	bl	800647a <SDMMC_CmdSendCSD>
 8005408:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800540a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800540c:	2b00      	cmp	r3, #0
 800540e:	d001      	beq.n	8005414 <SD_InitCard+0xdc>
    {
      return errorstate;
 8005410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005412:	e05a      	b.n	80054ca <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2100      	movs	r1, #0
 800541a:	4618      	mov	r0, r3
 800541c:	f000 fe1b 	bl	8006056 <SDMMC_GetResponse>
 8005420:	4602      	mov	r2, r0
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2104      	movs	r1, #4
 800542c:	4618      	mov	r0, r3
 800542e:	f000 fe12 	bl	8006056 <SDMMC_GetResponse>
 8005432:	4602      	mov	r2, r0
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2108      	movs	r1, #8
 800543e:	4618      	mov	r0, r3
 8005440:	f000 fe09 	bl	8006056 <SDMMC_GetResponse>
 8005444:	4602      	mov	r2, r0
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	210c      	movs	r1, #12
 8005450:	4618      	mov	r0, r3
 8005452:	f000 fe00 	bl	8006056 <SDMMC_GetResponse>
 8005456:	4602      	mov	r2, r0
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2104      	movs	r1, #4
 8005462:	4618      	mov	r0, r3
 8005464:	f000 fdf7 	bl	8006056 <SDMMC_GetResponse>
 8005468:	4603      	mov	r3, r0
 800546a:	0d1a      	lsrs	r2, r3, #20
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005470:	f107 0310 	add.w	r3, r7, #16
 8005474:	4619      	mov	r1, r3
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f7ff fbe4 	bl	8004c44 <HAL_SD_GetCardCSD>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d002      	beq.n	8005488 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005482:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005486:	e020      	b.n	80054ca <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6819      	ldr	r1, [r3, #0]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005490:	041b      	lsls	r3, r3, #16
 8005492:	f04f 0400 	mov.w	r4, #0
 8005496:	461a      	mov	r2, r3
 8005498:	4623      	mov	r3, r4
 800549a:	4608      	mov	r0, r1
 800549c:	f000 fee6 	bl	800626c <SDMMC_CmdSelDesel>
 80054a0:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80054a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d001      	beq.n	80054ac <SD_InitCard+0x174>
  {
    return errorstate;
 80054a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054aa:	e00e      	b.n	80054ca <SD_InitCard+0x192>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681d      	ldr	r5, [r3, #0]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	466c      	mov	r4, sp
 80054b4:	f103 0210 	add.w	r2, r3, #16
 80054b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80054ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80054be:	3304      	adds	r3, #4
 80054c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80054c2:	4628      	mov	r0, r5
 80054c4:	f000 fd28 	bl	8005f18 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3740      	adds	r7, #64	; 0x40
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080054d4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b086      	sub	sp, #24
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80054dc:	2300      	movs	r3, #0
 80054de:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80054e0:	2300      	movs	r3, #0
 80054e2:	617b      	str	r3, [r7, #20]
 80054e4:	2300      	movs	r3, #0
 80054e6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4618      	mov	r0, r3
 80054ee:	f000 fee0 	bl	80062b2 <SDMMC_CmdGoIdleState>
 80054f2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d001      	beq.n	80054fe <SD_PowerON+0x2a>
  {
    return errorstate;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	e072      	b.n	80055e4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4618      	mov	r0, r3
 8005504:	f000 fef3 	bl	80062ee <SDMMC_CmdOperCond>
 8005508:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d00d      	beq.n	800552c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4618      	mov	r0, r3
 800551c:	f000 fec9 	bl	80062b2 <SDMMC_CmdGoIdleState>
 8005520:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d004      	beq.n	8005532 <SD_PowerON+0x5e>
    {
      return errorstate;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	e05b      	b.n	80055e4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005536:	2b01      	cmp	r3, #1
 8005538:	d137      	bne.n	80055aa <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2100      	movs	r1, #0
 8005540:	4618      	mov	r0, r3
 8005542:	f000 fef3 	bl	800632c <SDMMC_CmdAppCommand>
 8005546:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d02d      	beq.n	80055aa <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800554e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005552:	e047      	b.n	80055e4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2100      	movs	r1, #0
 800555a:	4618      	mov	r0, r3
 800555c:	f000 fee6 	bl	800632c <SDMMC_CmdAppCommand>
 8005560:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d001      	beq.n	800556c <SD_PowerON+0x98>
    {
      return errorstate;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	e03b      	b.n	80055e4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	491e      	ldr	r1, [pc, #120]	; (80055ec <SD_PowerON+0x118>)
 8005572:	4618      	mov	r0, r3
 8005574:	f000 fefc 	bl	8006370 <SDMMC_CmdAppOperCommand>
 8005578:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d002      	beq.n	8005586 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005580:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005584:	e02e      	b.n	80055e4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2100      	movs	r1, #0
 800558c:	4618      	mov	r0, r3
 800558e:	f000 fd62 	bl	8006056 <SDMMC_GetResponse>
 8005592:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	0fdb      	lsrs	r3, r3, #31
 8005598:	2b01      	cmp	r3, #1
 800559a:	d101      	bne.n	80055a0 <SD_PowerON+0xcc>
 800559c:	2301      	movs	r3, #1
 800559e:	e000      	b.n	80055a2 <SD_PowerON+0xce>
 80055a0:	2300      	movs	r3, #0
 80055a2:	613b      	str	r3, [r7, #16]

    count++;
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	3301      	adds	r3, #1
 80055a8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d802      	bhi.n	80055ba <SD_PowerON+0xe6>
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d0cc      	beq.n	8005554 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d902      	bls.n	80055ca <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80055c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80055c8:	e00c      	b.n	80055e4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d003      	beq.n	80055dc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	645a      	str	r2, [r3, #68]	; 0x44
 80055da:	e002      	b.n	80055e2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80055e2:	2300      	movs	r3, #0
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3718      	adds	r7, #24
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	c1100000 	.word	0xc1100000

080055f0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b084      	sub	sp, #16
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d102      	bne.n	8005606 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005600:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005604:	e018      	b.n	8005638 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800560e:	041b      	lsls	r3, r3, #16
 8005610:	4619      	mov	r1, r3
 8005612:	4610      	mov	r0, r2
 8005614:	f000 ff71 	bl	80064fa <SDMMC_CmdSendStatus>
 8005618:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d001      	beq.n	8005624 <SD_SendStatus+0x34>
  {
    return errorstate;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	e009      	b.n	8005638 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	2100      	movs	r1, #0
 800562a:	4618      	mov	r0, r3
 800562c:	f000 fd13 	bl	8006056 <SDMMC_GetResponse>
 8005630:	4602      	mov	r2, r0
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8005636:	2300      	movs	r3, #0
}
 8005638:	4618      	mov	r0, r3
 800563a:	3710      	adds	r7, #16
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}

08005640 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b086      	sub	sp, #24
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005648:	2300      	movs	r3, #0
 800564a:	60fb      	str	r3, [r7, #12]
 800564c:	2300      	movs	r3, #0
 800564e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2100      	movs	r1, #0
 8005656:	4618      	mov	r0, r3
 8005658:	f000 fcfd 	bl	8006056 <SDMMC_GetResponse>
 800565c:	4603      	mov	r3, r0
 800565e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005662:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005666:	d102      	bne.n	800566e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005668:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800566c:	e02f      	b.n	80056ce <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800566e:	f107 030c 	add.w	r3, r7, #12
 8005672:	4619      	mov	r1, r3
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f000 f879 	bl	800576c <SD_FindSCR>
 800567a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d001      	beq.n	8005686 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	e023      	b.n	80056ce <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d01c      	beq.n	80056ca <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005698:	041b      	lsls	r3, r3, #16
 800569a:	4619      	mov	r1, r3
 800569c:	4610      	mov	r0, r2
 800569e:	f000 fe45 	bl	800632c <SDMMC_CmdAppCommand>
 80056a2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d001      	beq.n	80056ae <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	e00f      	b.n	80056ce <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2102      	movs	r1, #2
 80056b4:	4618      	mov	r0, r3
 80056b6:	f000 fe7f 	bl	80063b8 <SDMMC_CmdBusWidth>
 80056ba:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d001      	beq.n	80056c6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	e003      	b.n	80056ce <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80056c6:	2300      	movs	r3, #0
 80056c8:	e001      	b.n	80056ce <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80056ca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3718      	adds	r7, #24
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}

080056d6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80056d6:	b580      	push	{r7, lr}
 80056d8:	b086      	sub	sp, #24
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80056de:	2300      	movs	r3, #0
 80056e0:	60fb      	str	r3, [r7, #12]
 80056e2:	2300      	movs	r3, #0
 80056e4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2100      	movs	r1, #0
 80056ec:	4618      	mov	r0, r3
 80056ee:	f000 fcb2 	bl	8006056 <SDMMC_GetResponse>
 80056f2:	4603      	mov	r3, r0
 80056f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80056fc:	d102      	bne.n	8005704 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80056fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005702:	e02f      	b.n	8005764 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005704:	f107 030c 	add.w	r3, r7, #12
 8005708:	4619      	mov	r1, r3
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 f82e 	bl	800576c <SD_FindSCR>
 8005710:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d001      	beq.n	800571c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	e023      	b.n	8005764 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005722:	2b00      	cmp	r3, #0
 8005724:	d01c      	beq.n	8005760 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800572e:	041b      	lsls	r3, r3, #16
 8005730:	4619      	mov	r1, r3
 8005732:	4610      	mov	r0, r2
 8005734:	f000 fdfa 	bl	800632c <SDMMC_CmdAppCommand>
 8005738:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d001      	beq.n	8005744 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	e00f      	b.n	8005764 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2100      	movs	r1, #0
 800574a:	4618      	mov	r0, r3
 800574c:	f000 fe34 	bl	80063b8 <SDMMC_CmdBusWidth>
 8005750:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d001      	beq.n	800575c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	e003      	b.n	8005764 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800575c:	2300      	movs	r3, #0
 800575e:	e001      	b.n	8005764 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005760:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005764:	4618      	mov	r0, r3
 8005766:	3718      	adds	r7, #24
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800576c:	b590      	push	{r4, r7, lr}
 800576e:	b08f      	sub	sp, #60	; 0x3c
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005776:	f7fb fde7 	bl	8001348 <HAL_GetTick>
 800577a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800577c:	2300      	movs	r3, #0
 800577e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8005780:	2300      	movs	r3, #0
 8005782:	60bb      	str	r3, [r7, #8]
 8005784:	2300      	movs	r3, #0
 8005786:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2108      	movs	r1, #8
 8005792:	4618      	mov	r0, r3
 8005794:	f000 fc9e 	bl	80060d4 <SDMMC_CmdBlockLength>
 8005798:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800579a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579c:	2b00      	cmp	r3, #0
 800579e:	d001      	beq.n	80057a4 <SD_FindSCR+0x38>
  {
    return errorstate;
 80057a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a2:	e0a9      	b.n	80058f8 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057ac:	041b      	lsls	r3, r3, #16
 80057ae:	4619      	mov	r1, r3
 80057b0:	4610      	mov	r0, r2
 80057b2:	f000 fdbb 	bl	800632c <SDMMC_CmdAppCommand>
 80057b6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80057b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d001      	beq.n	80057c2 <SD_FindSCR+0x56>
  {
    return errorstate;
 80057be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c0:	e09a      	b.n	80058f8 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80057c2:	f04f 33ff 	mov.w	r3, #4294967295
 80057c6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80057c8:	2308      	movs	r3, #8
 80057ca:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80057cc:	2330      	movs	r3, #48	; 0x30
 80057ce:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80057d0:	2302      	movs	r3, #2
 80057d2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80057d4:	2300      	movs	r3, #0
 80057d6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80057d8:	2301      	movs	r3, #1
 80057da:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f107 0210 	add.w	r2, r7, #16
 80057e4:	4611      	mov	r1, r2
 80057e6:	4618      	mov	r0, r3
 80057e8:	f000 fc48 	bl	800607c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4618      	mov	r0, r3
 80057f2:	f000 fe03 	bl	80063fc <SDMMC_CmdSendSCR>
 80057f6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80057f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d022      	beq.n	8005844 <SD_FindSCR+0xd8>
  {
    return errorstate;
 80057fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005800:	e07a      	b.n	80058f8 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005808:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800580c:	2b00      	cmp	r3, #0
 800580e:	d00e      	beq.n	800582e <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6819      	ldr	r1, [r3, #0]
 8005814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	f107 0208 	add.w	r2, r7, #8
 800581c:	18d4      	adds	r4, r2, r3
 800581e:	4608      	mov	r0, r1
 8005820:	f000 fba6 	bl	8005f70 <SDMMC_ReadFIFO>
 8005824:	4603      	mov	r3, r0
 8005826:	6023      	str	r3, [r4, #0]
      index++;
 8005828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800582a:	3301      	adds	r3, #1
 800582c:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800582e:	f7fb fd8b 	bl	8001348 <HAL_GetTick>
 8005832:	4602      	mov	r2, r0
 8005834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800583c:	d102      	bne.n	8005844 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800583e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005842:	e059      	b.n	80058f8 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800584a:	f240 432a 	movw	r3, #1066	; 0x42a
 800584e:	4013      	ands	r3, r2
 8005850:	2b00      	cmp	r3, #0
 8005852:	d0d6      	beq.n	8005802 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800585a:	f003 0308 	and.w	r3, r3, #8
 800585e:	2b00      	cmp	r3, #0
 8005860:	d005      	beq.n	800586e <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	2208      	movs	r2, #8
 8005868:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800586a:	2308      	movs	r3, #8
 800586c:	e044      	b.n	80058f8 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005874:	f003 0302 	and.w	r3, r3, #2
 8005878:	2b00      	cmp	r3, #0
 800587a:	d005      	beq.n	8005888 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	2202      	movs	r2, #2
 8005882:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005884:	2302      	movs	r3, #2
 8005886:	e037      	b.n	80058f8 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800588e:	f003 0320 	and.w	r3, r3, #32
 8005892:	2b00      	cmp	r3, #0
 8005894:	d005      	beq.n	80058a2 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	2220      	movs	r2, #32
 800589c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800589e:	2320      	movs	r3, #32
 80058a0:	e02a      	b.n	80058f8 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f240 523a 	movw	r2, #1338	; 0x53a
 80058aa:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	061a      	lsls	r2, r3, #24
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	021b      	lsls	r3, r3, #8
 80058b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80058b8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	0a1b      	lsrs	r3, r3, #8
 80058be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80058c2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	0e1b      	lsrs	r3, r3, #24
 80058c8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80058ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058cc:	601a      	str	r2, [r3, #0]
    scr++;
 80058ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058d0:	3304      	adds	r3, #4
 80058d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	061a      	lsls	r2, r3, #24
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	021b      	lsls	r3, r3, #8
 80058dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80058e0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	0a1b      	lsrs	r3, r3, #8
 80058e6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80058ea:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	0e1b      	lsrs	r3, r3, #24
 80058f0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80058f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	373c      	adds	r7, #60	; 0x3c
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd90      	pop	{r4, r7, pc}

08005900 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b086      	sub	sp, #24
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800590c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005912:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d03f      	beq.n	800599a <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800591a:	2300      	movs	r3, #0
 800591c:	617b      	str	r3, [r7, #20]
 800591e:	e033      	b.n	8005988 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4618      	mov	r0, r3
 8005926:	f000 fb23 	bl	8005f70 <SDMMC_ReadFIFO>
 800592a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	b2da      	uxtb	r2, r3
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	3301      	adds	r3, #1
 8005938:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	3b01      	subs	r3, #1
 800593e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	0a1b      	lsrs	r3, r3, #8
 8005944:	b2da      	uxtb	r2, r3
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	701a      	strb	r2, [r3, #0]
      tmp++;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	3301      	adds	r3, #1
 800594e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	3b01      	subs	r3, #1
 8005954:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	0c1b      	lsrs	r3, r3, #16
 800595a:	b2da      	uxtb	r2, r3
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	3301      	adds	r3, #1
 8005964:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	3b01      	subs	r3, #1
 800596a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	0e1b      	lsrs	r3, r3, #24
 8005970:	b2da      	uxtb	r2, r3
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	3301      	adds	r3, #1
 800597a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	3b01      	subs	r3, #1
 8005980:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	3301      	adds	r3, #1
 8005986:	617b      	str	r3, [r7, #20]
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	2b07      	cmp	r3, #7
 800598c:	d9c8      	bls.n	8005920 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	693a      	ldr	r2, [r7, #16]
 8005998:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800599a:	bf00      	nop
 800599c:	3718      	adds	r7, #24
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}

080059a2 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80059a2:	b580      	push	{r7, lr}
 80059a4:	b086      	sub	sp, #24
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a1b      	ldr	r3, [r3, #32]
 80059ae:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b4:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d043      	beq.n	8005a44 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80059bc:	2300      	movs	r3, #0
 80059be:	617b      	str	r3, [r7, #20]
 80059c0:	e037      	b.n	8005a32 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	3301      	adds	r3, #1
 80059cc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	3b01      	subs	r3, #1
 80059d2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	021a      	lsls	r2, r3, #8
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	4313      	orrs	r3, r2
 80059de:	60bb      	str	r3, [r7, #8]
      tmp++;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	3301      	adds	r3, #1
 80059e4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	3b01      	subs	r3, #1
 80059ea:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	041a      	lsls	r2, r3, #16
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	3301      	adds	r3, #1
 80059fc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	3b01      	subs	r3, #1
 8005a02:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	061a      	lsls	r2, r3, #24
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	3301      	adds	r3, #1
 8005a14:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	3b01      	subs	r3, #1
 8005a1a:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f107 0208 	add.w	r2, r7, #8
 8005a24:	4611      	mov	r1, r2
 8005a26:	4618      	mov	r0, r3
 8005a28:	f000 faaf 	bl	8005f8a <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	3301      	adds	r3, #1
 8005a30:	617b      	str	r3, [r7, #20]
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	2b07      	cmp	r3, #7
 8005a36:	d9c4      	bls.n	80059c2 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	68fa      	ldr	r2, [r7, #12]
 8005a3c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	693a      	ldr	r2, [r7, #16]
 8005a42:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8005a44:	bf00      	nop
 8005a46:	3718      	adds	r7, #24
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}

08005a4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b082      	sub	sp, #8
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d101      	bne.n	8005a5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e01d      	b.n	8005a9a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d106      	bne.n	8005a78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f000 f815 	bl	8005aa2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2202      	movs	r2, #2
 8005a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	3304      	adds	r3, #4
 8005a88:	4619      	mov	r1, r3
 8005a8a:	4610      	mov	r0, r2
 8005a8c:	f000 f986 	bl	8005d9c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a98:	2300      	movs	r3, #0
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3708      	adds	r7, #8
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}

08005aa2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005aa2:	b480      	push	{r7}
 8005aa4:	b083      	sub	sp, #12
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005aaa:	bf00      	nop
 8005aac:	370c      	adds	r7, #12
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
	...

08005ab8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b085      	sub	sp, #20
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68da      	ldr	r2, [r3, #12]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f042 0201 	orr.w	r2, r2, #1
 8005ace:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	689a      	ldr	r2, [r3, #8]
 8005ad6:	4b0c      	ldr	r3, [pc, #48]	; (8005b08 <HAL_TIM_Base_Start_IT+0x50>)
 8005ad8:	4013      	ands	r3, r2
 8005ada:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2b06      	cmp	r3, #6
 8005ae0:	d00b      	beq.n	8005afa <HAL_TIM_Base_Start_IT+0x42>
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ae8:	d007      	beq.n	8005afa <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f042 0201 	orr.w	r2, r2, #1
 8005af8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005afa:	2300      	movs	r3, #0
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3714      	adds	r7, #20
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr
 8005b08:	00010007 	.word	0x00010007

08005b0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b082      	sub	sp, #8
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	691b      	ldr	r3, [r3, #16]
 8005b1a:	f003 0302 	and.w	r3, r3, #2
 8005b1e:	2b02      	cmp	r3, #2
 8005b20:	d122      	bne.n	8005b68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	f003 0302 	and.w	r3, r3, #2
 8005b2c:	2b02      	cmp	r3, #2
 8005b2e:	d11b      	bne.n	8005b68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f06f 0202 	mvn.w	r2, #2
 8005b38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	699b      	ldr	r3, [r3, #24]
 8005b46:	f003 0303 	and.w	r3, r3, #3
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d003      	beq.n	8005b56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 f905 	bl	8005d5e <HAL_TIM_IC_CaptureCallback>
 8005b54:	e005      	b.n	8005b62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 f8f7 	bl	8005d4a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f000 f908 	bl	8005d72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	f003 0304 	and.w	r3, r3, #4
 8005b72:	2b04      	cmp	r3, #4
 8005b74:	d122      	bne.n	8005bbc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	f003 0304 	and.w	r3, r3, #4
 8005b80:	2b04      	cmp	r3, #4
 8005b82:	d11b      	bne.n	8005bbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f06f 0204 	mvn.w	r2, #4
 8005b8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2202      	movs	r2, #2
 8005b92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	699b      	ldr	r3, [r3, #24]
 8005b9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d003      	beq.n	8005baa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 f8db 	bl	8005d5e <HAL_TIM_IC_CaptureCallback>
 8005ba8:	e005      	b.n	8005bb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 f8cd 	bl	8005d4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f000 f8de 	bl	8005d72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	f003 0308 	and.w	r3, r3, #8
 8005bc6:	2b08      	cmp	r3, #8
 8005bc8:	d122      	bne.n	8005c10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	f003 0308 	and.w	r3, r3, #8
 8005bd4:	2b08      	cmp	r3, #8
 8005bd6:	d11b      	bne.n	8005c10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f06f 0208 	mvn.w	r2, #8
 8005be0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2204      	movs	r2, #4
 8005be6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	69db      	ldr	r3, [r3, #28]
 8005bee:	f003 0303 	and.w	r3, r3, #3
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d003      	beq.n	8005bfe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 f8b1 	bl	8005d5e <HAL_TIM_IC_CaptureCallback>
 8005bfc:	e005      	b.n	8005c0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 f8a3 	bl	8005d4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f000 f8b4 	bl	8005d72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	691b      	ldr	r3, [r3, #16]
 8005c16:	f003 0310 	and.w	r3, r3, #16
 8005c1a:	2b10      	cmp	r3, #16
 8005c1c:	d122      	bne.n	8005c64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	f003 0310 	and.w	r3, r3, #16
 8005c28:	2b10      	cmp	r3, #16
 8005c2a:	d11b      	bne.n	8005c64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f06f 0210 	mvn.w	r2, #16
 8005c34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2208      	movs	r2, #8
 8005c3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	69db      	ldr	r3, [r3, #28]
 8005c42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d003      	beq.n	8005c52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 f887 	bl	8005d5e <HAL_TIM_IC_CaptureCallback>
 8005c50:	e005      	b.n	8005c5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 f879 	bl	8005d4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f000 f88a 	bl	8005d72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	691b      	ldr	r3, [r3, #16]
 8005c6a:	f003 0301 	and.w	r3, r3, #1
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d10e      	bne.n	8005c90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	f003 0301 	and.w	r3, r3, #1
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d107      	bne.n	8005c90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f06f 0201 	mvn.w	r2, #1
 8005c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f7fa fe24 	bl	80008d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	691b      	ldr	r3, [r3, #16]
 8005c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c9a:	2b80      	cmp	r3, #128	; 0x80
 8005c9c:	d10e      	bne.n	8005cbc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ca8:	2b80      	cmp	r3, #128	; 0x80
 8005caa:	d107      	bne.n	8005cbc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005cb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 f91a 	bl	8005ef0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cca:	d10e      	bne.n	8005cea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cd6:	2b80      	cmp	r3, #128	; 0x80
 8005cd8:	d107      	bne.n	8005cea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005ce2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 f90d 	bl	8005f04 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	691b      	ldr	r3, [r3, #16]
 8005cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cf4:	2b40      	cmp	r3, #64	; 0x40
 8005cf6:	d10e      	bne.n	8005d16 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d02:	2b40      	cmp	r3, #64	; 0x40
 8005d04:	d107      	bne.n	8005d16 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 f838 	bl	8005d86 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	f003 0320 	and.w	r3, r3, #32
 8005d20:	2b20      	cmp	r3, #32
 8005d22:	d10e      	bne.n	8005d42 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	f003 0320 	and.w	r3, r3, #32
 8005d2e:	2b20      	cmp	r3, #32
 8005d30:	d107      	bne.n	8005d42 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f06f 0220 	mvn.w	r2, #32
 8005d3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f000 f8cd 	bl	8005edc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d42:	bf00      	nop
 8005d44:	3708      	adds	r7, #8
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}

08005d4a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d4a:	b480      	push	{r7}
 8005d4c:	b083      	sub	sp, #12
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d52:	bf00      	nop
 8005d54:	370c      	adds	r7, #12
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr

08005d5e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d5e:	b480      	push	{r7}
 8005d60:	b083      	sub	sp, #12
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d66:	bf00      	nop
 8005d68:	370c      	adds	r7, #12
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr

08005d72 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d72:	b480      	push	{r7}
 8005d74:	b083      	sub	sp, #12
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d7a:	bf00      	nop
 8005d7c:	370c      	adds	r7, #12
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr

08005d86 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d86:	b480      	push	{r7}
 8005d88:	b083      	sub	sp, #12
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d8e:	bf00      	nop
 8005d90:	370c      	adds	r7, #12
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr
	...

08005d9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b085      	sub	sp, #20
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a40      	ldr	r2, [pc, #256]	; (8005eb0 <TIM_Base_SetConfig+0x114>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d013      	beq.n	8005ddc <TIM_Base_SetConfig+0x40>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dba:	d00f      	beq.n	8005ddc <TIM_Base_SetConfig+0x40>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a3d      	ldr	r2, [pc, #244]	; (8005eb4 <TIM_Base_SetConfig+0x118>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d00b      	beq.n	8005ddc <TIM_Base_SetConfig+0x40>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4a3c      	ldr	r2, [pc, #240]	; (8005eb8 <TIM_Base_SetConfig+0x11c>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d007      	beq.n	8005ddc <TIM_Base_SetConfig+0x40>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4a3b      	ldr	r2, [pc, #236]	; (8005ebc <TIM_Base_SetConfig+0x120>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d003      	beq.n	8005ddc <TIM_Base_SetConfig+0x40>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a3a      	ldr	r2, [pc, #232]	; (8005ec0 <TIM_Base_SetConfig+0x124>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d108      	bne.n	8005dee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005de2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	68fa      	ldr	r2, [r7, #12]
 8005dea:	4313      	orrs	r3, r2
 8005dec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4a2f      	ldr	r2, [pc, #188]	; (8005eb0 <TIM_Base_SetConfig+0x114>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d02b      	beq.n	8005e4e <TIM_Base_SetConfig+0xb2>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dfc:	d027      	beq.n	8005e4e <TIM_Base_SetConfig+0xb2>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a2c      	ldr	r2, [pc, #176]	; (8005eb4 <TIM_Base_SetConfig+0x118>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d023      	beq.n	8005e4e <TIM_Base_SetConfig+0xb2>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a2b      	ldr	r2, [pc, #172]	; (8005eb8 <TIM_Base_SetConfig+0x11c>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d01f      	beq.n	8005e4e <TIM_Base_SetConfig+0xb2>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a2a      	ldr	r2, [pc, #168]	; (8005ebc <TIM_Base_SetConfig+0x120>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d01b      	beq.n	8005e4e <TIM_Base_SetConfig+0xb2>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a29      	ldr	r2, [pc, #164]	; (8005ec0 <TIM_Base_SetConfig+0x124>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d017      	beq.n	8005e4e <TIM_Base_SetConfig+0xb2>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a28      	ldr	r2, [pc, #160]	; (8005ec4 <TIM_Base_SetConfig+0x128>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d013      	beq.n	8005e4e <TIM_Base_SetConfig+0xb2>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a27      	ldr	r2, [pc, #156]	; (8005ec8 <TIM_Base_SetConfig+0x12c>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d00f      	beq.n	8005e4e <TIM_Base_SetConfig+0xb2>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a26      	ldr	r2, [pc, #152]	; (8005ecc <TIM_Base_SetConfig+0x130>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d00b      	beq.n	8005e4e <TIM_Base_SetConfig+0xb2>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4a25      	ldr	r2, [pc, #148]	; (8005ed0 <TIM_Base_SetConfig+0x134>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d007      	beq.n	8005e4e <TIM_Base_SetConfig+0xb2>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a24      	ldr	r2, [pc, #144]	; (8005ed4 <TIM_Base_SetConfig+0x138>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d003      	beq.n	8005e4e <TIM_Base_SetConfig+0xb2>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a23      	ldr	r2, [pc, #140]	; (8005ed8 <TIM_Base_SetConfig+0x13c>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d108      	bne.n	8005e60 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	68fa      	ldr	r2, [r7, #12]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	695b      	ldr	r3, [r3, #20]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	689a      	ldr	r2, [r3, #8]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4a0a      	ldr	r2, [pc, #40]	; (8005eb0 <TIM_Base_SetConfig+0x114>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d003      	beq.n	8005e94 <TIM_Base_SetConfig+0xf8>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	4a0c      	ldr	r2, [pc, #48]	; (8005ec0 <TIM_Base_SetConfig+0x124>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d103      	bne.n	8005e9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	691a      	ldr	r2, [r3, #16]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	615a      	str	r2, [r3, #20]
}
 8005ea2:	bf00      	nop
 8005ea4:	3714      	adds	r7, #20
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr
 8005eae:	bf00      	nop
 8005eb0:	40010000 	.word	0x40010000
 8005eb4:	40000400 	.word	0x40000400
 8005eb8:	40000800 	.word	0x40000800
 8005ebc:	40000c00 	.word	0x40000c00
 8005ec0:	40010400 	.word	0x40010400
 8005ec4:	40014000 	.word	0x40014000
 8005ec8:	40014400 	.word	0x40014400
 8005ecc:	40014800 	.word	0x40014800
 8005ed0:	40001800 	.word	0x40001800
 8005ed4:	40001c00 	.word	0x40001c00
 8005ed8:	40002000 	.word	0x40002000

08005edc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ee4:	bf00      	nop
 8005ee6:	370c      	adds	r7, #12
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ef8:	bf00      	nop
 8005efa:	370c      	adds	r7, #12
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005f0c:	bf00      	nop
 8005f0e:	370c      	adds	r7, #12
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8005f18:	b084      	sub	sp, #16
 8005f1a:	b480      	push	{r7}
 8005f1c:	b085      	sub	sp, #20
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
 8005f22:	f107 001c 	add.w	r0, r7, #28
 8005f26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005f2e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005f30:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005f32:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8005f36:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8005f3a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8005f3e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8005f42:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	685a      	ldr	r2, [r3, #4]
 8005f4e:	4b07      	ldr	r3, [pc, #28]	; (8005f6c <SDMMC_Init+0x54>)
 8005f50:	4013      	ands	r3, r2
 8005f52:	68fa      	ldr	r2, [r7, #12]
 8005f54:	431a      	orrs	r2, r3
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005f5a:	2300      	movs	r3, #0
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3714      	adds	r7, #20
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	b004      	add	sp, #16
 8005f68:	4770      	bx	lr
 8005f6a:	bf00      	nop
 8005f6c:	ffff8100 	.word	0xffff8100

08005f70 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b083      	sub	sp, #12
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	370c      	adds	r7, #12
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr

08005f8a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8005f8a:	b480      	push	{r7}
 8005f8c:	b083      	sub	sp, #12
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
 8005f92:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005f9e:	2300      	movs	r3, #0
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	370c      	adds	r7, #12
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b082      	sub	sp, #8
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2203      	movs	r2, #3
 8005fb8:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8005fba:	2002      	movs	r0, #2
 8005fbc:	f7fb f9d0 	bl	8001360 <HAL_Delay>
  
  return HAL_OK;
 8005fc0:	2300      	movs	r3, #0
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3708      	adds	r7, #8
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}

08005fca <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8005fca:	b480      	push	{r7}
 8005fcc:	b083      	sub	sp, #12
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f003 0303 	and.w	r3, r3, #3
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	370c      	adds	r7, #12
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr
	...

08005fe8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b085      	sub	sp, #20
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006006:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800600c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8006012:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	4313      	orrs	r3, r2
 8006018:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	68da      	ldr	r2, [r3, #12]
 800601e:	4b06      	ldr	r3, [pc, #24]	; (8006038 <SDMMC_SendCommand+0x50>)
 8006020:	4013      	ands	r3, r2
 8006022:	68fa      	ldr	r2, [r7, #12]
 8006024:	431a      	orrs	r2, r3
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800602a:	2300      	movs	r3, #0
}
 800602c:	4618      	mov	r0, r3
 800602e:	3714      	adds	r7, #20
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr
 8006038:	fffff000 	.word	0xfffff000

0800603c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	691b      	ldr	r3, [r3, #16]
 8006048:	b2db      	uxtb	r3, r3
}
 800604a:	4618      	mov	r0, r3
 800604c:	370c      	adds	r7, #12
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr

08006056 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8006056:	b480      	push	{r7}
 8006058:	b085      	sub	sp, #20
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]
 800605e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	3314      	adds	r3, #20
 8006064:	461a      	mov	r2, r3
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	4413      	add	r3, r2
 800606a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
}  
 8006070:	4618      	mov	r0, r3
 8006072:	3714      	adds	r7, #20
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr

0800607c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800607c:	b480      	push	{r7}
 800607e:	b085      	sub	sp, #20
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006086:	2300      	movs	r3, #0
 8006088:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	685a      	ldr	r2, [r3, #4]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80060a2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80060a8:	431a      	orrs	r2, r3
                       Data->DPSM);
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80060ae:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80060b0:	68fa      	ldr	r2, [r7, #12]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ba:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	431a      	orrs	r2, r3
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80060c6:	2300      	movs	r3, #0

}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3714      	adds	r7, #20
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b088      	sub	sp, #32
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80060e2:	2310      	movs	r3, #16
 80060e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80060e6:	2340      	movs	r3, #64	; 0x40
 80060e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80060ea:	2300      	movs	r3, #0
 80060ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80060ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80060f4:	f107 0308 	add.w	r3, r7, #8
 80060f8:	4619      	mov	r1, r3
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f7ff ff74 	bl	8005fe8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8006100:	f241 3288 	movw	r2, #5000	; 0x1388
 8006104:	2110      	movs	r1, #16
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 fa42 	bl	8006590 <SDMMC_GetCmdResp1>
 800610c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800610e:	69fb      	ldr	r3, [r7, #28]
}
 8006110:	4618      	mov	r0, r3
 8006112:	3720      	adds	r7, #32
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}

08006118 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b088      	sub	sp, #32
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8006126:	2311      	movs	r3, #17
 8006128:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800612a:	2340      	movs	r3, #64	; 0x40
 800612c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800612e:	2300      	movs	r3, #0
 8006130:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006132:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006136:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006138:	f107 0308 	add.w	r3, r7, #8
 800613c:	4619      	mov	r1, r3
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f7ff ff52 	bl	8005fe8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8006144:	f241 3288 	movw	r2, #5000	; 0x1388
 8006148:	2111      	movs	r1, #17
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 fa20 	bl	8006590 <SDMMC_GetCmdResp1>
 8006150:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006152:	69fb      	ldr	r3, [r7, #28]
}
 8006154:	4618      	mov	r0, r3
 8006156:	3720      	adds	r7, #32
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b088      	sub	sp, #32
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800616a:	2312      	movs	r3, #18
 800616c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800616e:	2340      	movs	r3, #64	; 0x40
 8006170:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006172:	2300      	movs	r3, #0
 8006174:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006176:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800617a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800617c:	f107 0308 	add.w	r3, r7, #8
 8006180:	4619      	mov	r1, r3
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f7ff ff30 	bl	8005fe8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8006188:	f241 3288 	movw	r2, #5000	; 0x1388
 800618c:	2112      	movs	r1, #18
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 f9fe 	bl	8006590 <SDMMC_GetCmdResp1>
 8006194:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006196:	69fb      	ldr	r3, [r7, #28]
}
 8006198:	4618      	mov	r0, r3
 800619a:	3720      	adds	r7, #32
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b088      	sub	sp, #32
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80061ae:	2318      	movs	r3, #24
 80061b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80061b2:	2340      	movs	r3, #64	; 0x40
 80061b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80061b6:	2300      	movs	r3, #0
 80061b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80061ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80061c0:	f107 0308 	add.w	r3, r7, #8
 80061c4:	4619      	mov	r1, r3
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f7ff ff0e 	bl	8005fe8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80061cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80061d0:	2118      	movs	r1, #24
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 f9dc 	bl	8006590 <SDMMC_GetCmdResp1>
 80061d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80061da:	69fb      	ldr	r3, [r7, #28]
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3720      	adds	r7, #32
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}

080061e4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b088      	sub	sp, #32
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80061f2:	2319      	movs	r3, #25
 80061f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80061f6:	2340      	movs	r3, #64	; 0x40
 80061f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80061fa:	2300      	movs	r3, #0
 80061fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80061fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006202:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006204:	f107 0308 	add.w	r3, r7, #8
 8006208:	4619      	mov	r1, r3
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f7ff feec 	bl	8005fe8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8006210:	f241 3288 	movw	r2, #5000	; 0x1388
 8006214:	2119      	movs	r1, #25
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 f9ba 	bl	8006590 <SDMMC_GetCmdResp1>
 800621c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800621e:	69fb      	ldr	r3, [r7, #28]
}
 8006220:	4618      	mov	r0, r3
 8006222:	3720      	adds	r7, #32
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b088      	sub	sp, #32
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8006230:	2300      	movs	r3, #0
 8006232:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8006234:	230c      	movs	r3, #12
 8006236:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006238:	2340      	movs	r3, #64	; 0x40
 800623a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800623c:	2300      	movs	r3, #0
 800623e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006240:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006244:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006246:	f107 0308 	add.w	r3, r7, #8
 800624a:	4619      	mov	r1, r3
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f7ff fecb 	bl	8005fe8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8006252:	4a05      	ldr	r2, [pc, #20]	; (8006268 <SDMMC_CmdStopTransfer+0x40>)
 8006254:	210c      	movs	r1, #12
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f000 f99a 	bl	8006590 <SDMMC_GetCmdResp1>
 800625c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800625e:	69fb      	ldr	r3, [r7, #28]
}
 8006260:	4618      	mov	r0, r3
 8006262:	3720      	adds	r7, #32
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}
 8006268:	05f5e100 	.word	0x05f5e100

0800626c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b08a      	sub	sp, #40	; 0x28
 8006270:	af00      	add	r7, sp, #0
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800627c:	2307      	movs	r3, #7
 800627e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006280:	2340      	movs	r3, #64	; 0x40
 8006282:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006284:	2300      	movs	r3, #0
 8006286:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006288:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800628c:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800628e:	f107 0310 	add.w	r3, r7, #16
 8006292:	4619      	mov	r1, r3
 8006294:	68f8      	ldr	r0, [r7, #12]
 8006296:	f7ff fea7 	bl	8005fe8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800629a:	f241 3288 	movw	r2, #5000	; 0x1388
 800629e:	2107      	movs	r1, #7
 80062a0:	68f8      	ldr	r0, [r7, #12]
 80062a2:	f000 f975 	bl	8006590 <SDMMC_GetCmdResp1>
 80062a6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80062a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3728      	adds	r7, #40	; 0x28
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}

080062b2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80062b2:	b580      	push	{r7, lr}
 80062b4:	b088      	sub	sp, #32
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80062ba:	2300      	movs	r3, #0
 80062bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80062be:	2300      	movs	r3, #0
 80062c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80062c2:	2300      	movs	r3, #0
 80062c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80062c6:	2300      	movs	r3, #0
 80062c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80062ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80062d0:	f107 0308 	add.w	r3, r7, #8
 80062d4:	4619      	mov	r1, r3
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f7ff fe86 	bl	8005fe8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f000 f92f 	bl	8006540 <SDMMC_GetCmdError>
 80062e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80062e4:	69fb      	ldr	r3, [r7, #28]
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3720      	adds	r7, #32
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}

080062ee <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80062ee:	b580      	push	{r7, lr}
 80062f0:	b088      	sub	sp, #32
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80062f6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80062fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80062fc:	2308      	movs	r3, #8
 80062fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006300:	2340      	movs	r3, #64	; 0x40
 8006302:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006304:	2300      	movs	r3, #0
 8006306:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006308:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800630c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800630e:	f107 0308 	add.w	r3, r7, #8
 8006312:	4619      	mov	r1, r3
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f7ff fe67 	bl	8005fe8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 fb18 	bl	8006950 <SDMMC_GetCmdResp7>
 8006320:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006322:	69fb      	ldr	r3, [r7, #28]
}
 8006324:	4618      	mov	r0, r3
 8006326:	3720      	adds	r7, #32
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}

0800632c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b088      	sub	sp, #32
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800633a:	2337      	movs	r3, #55	; 0x37
 800633c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800633e:	2340      	movs	r3, #64	; 0x40
 8006340:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006342:	2300      	movs	r3, #0
 8006344:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006346:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800634a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800634c:	f107 0308 	add.w	r3, r7, #8
 8006350:	4619      	mov	r1, r3
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f7ff fe48 	bl	8005fe8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8006358:	f241 3288 	movw	r2, #5000	; 0x1388
 800635c:	2137      	movs	r1, #55	; 0x37
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f000 f916 	bl	8006590 <SDMMC_GetCmdResp1>
 8006364:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006366:	69fb      	ldr	r3, [r7, #28]
}
 8006368:	4618      	mov	r0, r3
 800636a:	3720      	adds	r7, #32
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b088      	sub	sp, #32
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800637a:	683a      	ldr	r2, [r7, #0]
 800637c:	4b0d      	ldr	r3, [pc, #52]	; (80063b4 <SDMMC_CmdAppOperCommand+0x44>)
 800637e:	4313      	orrs	r3, r2
 8006380:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006382:	2329      	movs	r3, #41	; 0x29
 8006384:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006386:	2340      	movs	r3, #64	; 0x40
 8006388:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800638a:	2300      	movs	r3, #0
 800638c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800638e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006392:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006394:	f107 0308 	add.w	r3, r7, #8
 8006398:	4619      	mov	r1, r3
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f7ff fe24 	bl	8005fe8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f000 fa27 	bl	80067f4 <SDMMC_GetCmdResp3>
 80063a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80063a8:	69fb      	ldr	r3, [r7, #28]
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3720      	adds	r7, #32
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	80100000 	.word	0x80100000

080063b8 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b088      	sub	sp, #32
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80063c6:	2306      	movs	r3, #6
 80063c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80063ca:	2340      	movs	r3, #64	; 0x40
 80063cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80063ce:	2300      	movs	r3, #0
 80063d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80063d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80063d8:	f107 0308 	add.w	r3, r7, #8
 80063dc:	4619      	mov	r1, r3
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f7ff fe02 	bl	8005fe8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80063e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80063e8:	2106      	movs	r1, #6
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 f8d0 	bl	8006590 <SDMMC_GetCmdResp1>
 80063f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80063f2:	69fb      	ldr	r3, [r7, #28]
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3720      	adds	r7, #32
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b088      	sub	sp, #32
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8006404:	2300      	movs	r3, #0
 8006406:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8006408:	2333      	movs	r3, #51	; 0x33
 800640a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800640c:	2340      	movs	r3, #64	; 0x40
 800640e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006410:	2300      	movs	r3, #0
 8006412:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006414:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006418:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800641a:	f107 0308 	add.w	r3, r7, #8
 800641e:	4619      	mov	r1, r3
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f7ff fde1 	bl	8005fe8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8006426:	f241 3288 	movw	r2, #5000	; 0x1388
 800642a:	2133      	movs	r1, #51	; 0x33
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 f8af 	bl	8006590 <SDMMC_GetCmdResp1>
 8006432:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006434:	69fb      	ldr	r3, [r7, #28]
}
 8006436:	4618      	mov	r0, r3
 8006438:	3720      	adds	r7, #32
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}

0800643e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800643e:	b580      	push	{r7, lr}
 8006440:	b088      	sub	sp, #32
 8006442:	af00      	add	r7, sp, #0
 8006444:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006446:	2300      	movs	r3, #0
 8006448:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800644a:	2302      	movs	r3, #2
 800644c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800644e:	23c0      	movs	r3, #192	; 0xc0
 8006450:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006452:	2300      	movs	r3, #0
 8006454:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006456:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800645a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800645c:	f107 0308 	add.w	r3, r7, #8
 8006460:	4619      	mov	r1, r3
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f7ff fdc0 	bl	8005fe8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f000 f97d 	bl	8006768 <SDMMC_GetCmdResp2>
 800646e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006470:	69fb      	ldr	r3, [r7, #28]
}
 8006472:	4618      	mov	r0, r3
 8006474:	3720      	adds	r7, #32
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}

0800647a <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800647a:	b580      	push	{r7, lr}
 800647c:	b088      	sub	sp, #32
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
 8006482:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006488:	2309      	movs	r3, #9
 800648a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800648c:	23c0      	movs	r3, #192	; 0xc0
 800648e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006490:	2300      	movs	r3, #0
 8006492:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006494:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006498:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800649a:	f107 0308 	add.w	r3, r7, #8
 800649e:	4619      	mov	r1, r3
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f7ff fda1 	bl	8005fe8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 f95e 	bl	8006768 <SDMMC_GetCmdResp2>
 80064ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80064ae:	69fb      	ldr	r3, [r7, #28]
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3720      	adds	r7, #32
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b088      	sub	sp, #32
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80064c2:	2300      	movs	r3, #0
 80064c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80064c6:	2303      	movs	r3, #3
 80064c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80064ca:	2340      	movs	r3, #64	; 0x40
 80064cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80064ce:	2300      	movs	r3, #0
 80064d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80064d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80064d8:	f107 0308 	add.w	r3, r7, #8
 80064dc:	4619      	mov	r1, r3
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f7ff fd82 	bl	8005fe8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80064e4:	683a      	ldr	r2, [r7, #0]
 80064e6:	2103      	movs	r1, #3
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 f9bd 	bl	8006868 <SDMMC_GetCmdResp6>
 80064ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80064f0:	69fb      	ldr	r3, [r7, #28]
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3720      	adds	r7, #32
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}

080064fa <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80064fa:	b580      	push	{r7, lr}
 80064fc:	b088      	sub	sp, #32
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
 8006502:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8006508:	230d      	movs	r3, #13
 800650a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800650c:	2340      	movs	r3, #64	; 0x40
 800650e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006510:	2300      	movs	r3, #0
 8006512:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006514:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006518:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800651a:	f107 0308 	add.w	r3, r7, #8
 800651e:	4619      	mov	r1, r3
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f7ff fd61 	bl	8005fe8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8006526:	f241 3288 	movw	r2, #5000	; 0x1388
 800652a:	210d      	movs	r1, #13
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f000 f82f 	bl	8006590 <SDMMC_GetCmdResp1>
 8006532:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006534:	69fb      	ldr	r3, [r7, #28]
}
 8006536:	4618      	mov	r0, r3
 8006538:	3720      	adds	r7, #32
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
	...

08006540 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8006540:	b490      	push	{r4, r7}
 8006542:	b082      	sub	sp, #8
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006548:	4b0f      	ldr	r3, [pc, #60]	; (8006588 <SDMMC_GetCmdError+0x48>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a0f      	ldr	r2, [pc, #60]	; (800658c <SDMMC_GetCmdError+0x4c>)
 800654e:	fba2 2303 	umull	r2, r3, r2, r3
 8006552:	0a5b      	lsrs	r3, r3, #9
 8006554:	f241 3288 	movw	r2, #5000	; 0x1388
 8006558:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800655c:	4623      	mov	r3, r4
 800655e:	1e5c      	subs	r4, r3, #1
 8006560:	2b00      	cmp	r3, #0
 8006562:	d102      	bne.n	800656a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006564:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006568:	e009      	b.n	800657e <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800656e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006572:	2b00      	cmp	r3, #0
 8006574:	d0f2      	beq.n	800655c <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	22c5      	movs	r2, #197	; 0xc5
 800657a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800657c:	2300      	movs	r3, #0
}
 800657e:	4618      	mov	r0, r3
 8006580:	3708      	adds	r7, #8
 8006582:	46bd      	mov	sp, r7
 8006584:	bc90      	pop	{r4, r7}
 8006586:	4770      	bx	lr
 8006588:	20000000 	.word	0x20000000
 800658c:	10624dd3 	.word	0x10624dd3

08006590 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006590:	b590      	push	{r4, r7, lr}
 8006592:	b087      	sub	sp, #28
 8006594:	af00      	add	r7, sp, #0
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	460b      	mov	r3, r1
 800659a:	607a      	str	r2, [r7, #4]
 800659c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800659e:	4b6f      	ldr	r3, [pc, #444]	; (800675c <SDMMC_GetCmdResp1+0x1cc>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a6f      	ldr	r2, [pc, #444]	; (8006760 <SDMMC_GetCmdResp1+0x1d0>)
 80065a4:	fba2 2303 	umull	r2, r3, r2, r3
 80065a8:	0a5b      	lsrs	r3, r3, #9
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80065b0:	4623      	mov	r3, r4
 80065b2:	1e5c      	subs	r4, r3, #1
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d102      	bne.n	80065be <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80065b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80065bc:	e0c9      	b.n	8006752 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065c2:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d0f0      	beq.n	80065b0 <SDMMC_GetCmdResp1+0x20>
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d1eb      	bne.n	80065b0 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065dc:	f003 0304 	and.w	r3, r3, #4
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d004      	beq.n	80065ee <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2204      	movs	r2, #4
 80065e8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80065ea:	2304      	movs	r3, #4
 80065ec:	e0b1      	b.n	8006752 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065f2:	f003 0301 	and.w	r3, r3, #1
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d004      	beq.n	8006604 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2201      	movs	r2, #1
 80065fe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006600:	2301      	movs	r3, #1
 8006602:	e0a6      	b.n	8006752 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	22c5      	movs	r2, #197	; 0xc5
 8006608:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800660a:	68f8      	ldr	r0, [r7, #12]
 800660c:	f7ff fd16 	bl	800603c <SDMMC_GetCommandResponse>
 8006610:	4603      	mov	r3, r0
 8006612:	461a      	mov	r2, r3
 8006614:	7afb      	ldrb	r3, [r7, #11]
 8006616:	4293      	cmp	r3, r2
 8006618:	d001      	beq.n	800661e <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800661a:	2301      	movs	r3, #1
 800661c:	e099      	b.n	8006752 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800661e:	2100      	movs	r1, #0
 8006620:	68f8      	ldr	r0, [r7, #12]
 8006622:	f7ff fd18 	bl	8006056 <SDMMC_GetResponse>
 8006626:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006628:	693a      	ldr	r2, [r7, #16]
 800662a:	4b4e      	ldr	r3, [pc, #312]	; (8006764 <SDMMC_GetCmdResp1+0x1d4>)
 800662c:	4013      	ands	r3, r2
 800662e:	2b00      	cmp	r3, #0
 8006630:	d101      	bne.n	8006636 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8006632:	2300      	movs	r3, #0
 8006634:	e08d      	b.n	8006752 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	2b00      	cmp	r3, #0
 800663a:	da02      	bge.n	8006642 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800663c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006640:	e087      	b.n	8006752 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006648:	2b00      	cmp	r3, #0
 800664a:	d001      	beq.n	8006650 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800664c:	2340      	movs	r3, #64	; 0x40
 800664e:	e080      	b.n	8006752 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006656:	2b00      	cmp	r3, #0
 8006658:	d001      	beq.n	800665e <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800665a:	2380      	movs	r3, #128	; 0x80
 800665c:	e079      	b.n	8006752 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006664:	2b00      	cmp	r3, #0
 8006666:	d002      	beq.n	800666e <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006668:	f44f 7380 	mov.w	r3, #256	; 0x100
 800666c:	e071      	b.n	8006752 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006674:	2b00      	cmp	r3, #0
 8006676:	d002      	beq.n	800667e <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006678:	f44f 7300 	mov.w	r3, #512	; 0x200
 800667c:	e069      	b.n	8006752 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006684:	2b00      	cmp	r3, #0
 8006686:	d002      	beq.n	800668e <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006688:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800668c:	e061      	b.n	8006752 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006694:	2b00      	cmp	r3, #0
 8006696:	d002      	beq.n	800669e <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006698:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800669c:	e059      	b.n	8006752 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d002      	beq.n	80066ae <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80066a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80066ac:	e051      	b.n	8006752 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d002      	beq.n	80066be <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80066b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80066bc:	e049      	b.n	8006752 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d002      	beq.n	80066ce <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80066c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80066cc:	e041      	b.n	8006752 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d002      	beq.n	80066de <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 80066d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066dc:	e039      	b.n	8006752 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d002      	beq.n	80066ee <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80066e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80066ec:	e031      	b.n	8006752 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d002      	beq.n	80066fe <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80066f8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80066fc:	e029      	b.n	8006752 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006704:	2b00      	cmp	r3, #0
 8006706:	d002      	beq.n	800670e <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006708:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800670c:	e021      	b.n	8006752 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006714:	2b00      	cmp	r3, #0
 8006716:	d002      	beq.n	800671e <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006718:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800671c:	e019      	b.n	8006752 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006724:	2b00      	cmp	r3, #0
 8006726:	d002      	beq.n	800672e <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006728:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800672c:	e011      	b.n	8006752 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006734:	2b00      	cmp	r3, #0
 8006736:	d002      	beq.n	800673e <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006738:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800673c:	e009      	b.n	8006752 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	f003 0308 	and.w	r3, r3, #8
 8006744:	2b00      	cmp	r3, #0
 8006746:	d002      	beq.n	800674e <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006748:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800674c:	e001      	b.n	8006752 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800674e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006752:	4618      	mov	r0, r3
 8006754:	371c      	adds	r7, #28
 8006756:	46bd      	mov	sp, r7
 8006758:	bd90      	pop	{r4, r7, pc}
 800675a:	bf00      	nop
 800675c:	20000000 	.word	0x20000000
 8006760:	10624dd3 	.word	0x10624dd3
 8006764:	fdffe008 	.word	0xfdffe008

08006768 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8006768:	b490      	push	{r4, r7}
 800676a:	b084      	sub	sp, #16
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006770:	4b1e      	ldr	r3, [pc, #120]	; (80067ec <SDMMC_GetCmdResp2+0x84>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a1e      	ldr	r2, [pc, #120]	; (80067f0 <SDMMC_GetCmdResp2+0x88>)
 8006776:	fba2 2303 	umull	r2, r3, r2, r3
 800677a:	0a5b      	lsrs	r3, r3, #9
 800677c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006780:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006784:	4623      	mov	r3, r4
 8006786:	1e5c      	subs	r4, r3, #1
 8006788:	2b00      	cmp	r3, #0
 800678a:	d102      	bne.n	8006792 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800678c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006790:	e026      	b.n	80067e0 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006796:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d0f0      	beq.n	8006784 <SDMMC_GetCmdResp2+0x1c>
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d1eb      	bne.n	8006784 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067b0:	f003 0304 	and.w	r3, r3, #4
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d004      	beq.n	80067c2 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2204      	movs	r2, #4
 80067bc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80067be:	2304      	movs	r3, #4
 80067c0:	e00e      	b.n	80067e0 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067c6:	f003 0301 	and.w	r3, r3, #1
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d004      	beq.n	80067d8 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2201      	movs	r2, #1
 80067d2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80067d4:	2301      	movs	r3, #1
 80067d6:	e003      	b.n	80067e0 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	22c5      	movs	r2, #197	; 0xc5
 80067dc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80067de:	2300      	movs	r3, #0
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3710      	adds	r7, #16
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bc90      	pop	{r4, r7}
 80067e8:	4770      	bx	lr
 80067ea:	bf00      	nop
 80067ec:	20000000 	.word	0x20000000
 80067f0:	10624dd3 	.word	0x10624dd3

080067f4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80067f4:	b490      	push	{r4, r7}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80067fc:	4b18      	ldr	r3, [pc, #96]	; (8006860 <SDMMC_GetCmdResp3+0x6c>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a18      	ldr	r2, [pc, #96]	; (8006864 <SDMMC_GetCmdResp3+0x70>)
 8006802:	fba2 2303 	umull	r2, r3, r2, r3
 8006806:	0a5b      	lsrs	r3, r3, #9
 8006808:	f241 3288 	movw	r2, #5000	; 0x1388
 800680c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006810:	4623      	mov	r3, r4
 8006812:	1e5c      	subs	r4, r3, #1
 8006814:	2b00      	cmp	r3, #0
 8006816:	d102      	bne.n	800681e <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006818:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800681c:	e01b      	b.n	8006856 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006822:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800682a:	2b00      	cmp	r3, #0
 800682c:	d0f0      	beq.n	8006810 <SDMMC_GetCmdResp3+0x1c>
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006834:	2b00      	cmp	r3, #0
 8006836:	d1eb      	bne.n	8006810 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800683c:	f003 0304 	and.w	r3, r3, #4
 8006840:	2b00      	cmp	r3, #0
 8006842:	d004      	beq.n	800684e <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2204      	movs	r2, #4
 8006848:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800684a:	2304      	movs	r3, #4
 800684c:	e003      	b.n	8006856 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	22c5      	movs	r2, #197	; 0xc5
 8006852:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006854:	2300      	movs	r3, #0
}
 8006856:	4618      	mov	r0, r3
 8006858:	3710      	adds	r7, #16
 800685a:	46bd      	mov	sp, r7
 800685c:	bc90      	pop	{r4, r7}
 800685e:	4770      	bx	lr
 8006860:	20000000 	.word	0x20000000
 8006864:	10624dd3 	.word	0x10624dd3

08006868 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8006868:	b590      	push	{r4, r7, lr}
 800686a:	b087      	sub	sp, #28
 800686c:	af00      	add	r7, sp, #0
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	460b      	mov	r3, r1
 8006872:	607a      	str	r2, [r7, #4]
 8006874:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006876:	4b34      	ldr	r3, [pc, #208]	; (8006948 <SDMMC_GetCmdResp6+0xe0>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a34      	ldr	r2, [pc, #208]	; (800694c <SDMMC_GetCmdResp6+0xe4>)
 800687c:	fba2 2303 	umull	r2, r3, r2, r3
 8006880:	0a5b      	lsrs	r3, r3, #9
 8006882:	f241 3288 	movw	r2, #5000	; 0x1388
 8006886:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800688a:	4623      	mov	r3, r4
 800688c:	1e5c      	subs	r4, r3, #1
 800688e:	2b00      	cmp	r3, #0
 8006890:	d102      	bne.n	8006898 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006892:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006896:	e052      	b.n	800693e <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800689c:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d0f0      	beq.n	800688a <SDMMC_GetCmdResp6+0x22>
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d1eb      	bne.n	800688a <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068b6:	f003 0304 	and.w	r3, r3, #4
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d004      	beq.n	80068c8 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2204      	movs	r2, #4
 80068c2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80068c4:	2304      	movs	r3, #4
 80068c6:	e03a      	b.n	800693e <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068cc:	f003 0301 	and.w	r3, r3, #1
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d004      	beq.n	80068de <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2201      	movs	r2, #1
 80068d8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80068da:	2301      	movs	r3, #1
 80068dc:	e02f      	b.n	800693e <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80068de:	68f8      	ldr	r0, [r7, #12]
 80068e0:	f7ff fbac 	bl	800603c <SDMMC_GetCommandResponse>
 80068e4:	4603      	mov	r3, r0
 80068e6:	461a      	mov	r2, r3
 80068e8:	7afb      	ldrb	r3, [r7, #11]
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d001      	beq.n	80068f2 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80068ee:	2301      	movs	r3, #1
 80068f0:	e025      	b.n	800693e <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	22c5      	movs	r2, #197	; 0xc5
 80068f6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80068f8:	2100      	movs	r1, #0
 80068fa:	68f8      	ldr	r0, [r7, #12]
 80068fc:	f7ff fbab 	bl	8006056 <SDMMC_GetResponse>
 8006900:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006908:	2b00      	cmp	r3, #0
 800690a:	d106      	bne.n	800691a <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	0c1b      	lsrs	r3, r3, #16
 8006910:	b29a      	uxth	r2, r3
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8006916:	2300      	movs	r3, #0
 8006918:	e011      	b.n	800693e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006920:	2b00      	cmp	r3, #0
 8006922:	d002      	beq.n	800692a <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006924:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006928:	e009      	b.n	800693e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006930:	2b00      	cmp	r3, #0
 8006932:	d002      	beq.n	800693a <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006934:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006938:	e001      	b.n	800693e <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800693a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800693e:	4618      	mov	r0, r3
 8006940:	371c      	adds	r7, #28
 8006942:	46bd      	mov	sp, r7
 8006944:	bd90      	pop	{r4, r7, pc}
 8006946:	bf00      	nop
 8006948:	20000000 	.word	0x20000000
 800694c:	10624dd3 	.word	0x10624dd3

08006950 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8006950:	b490      	push	{r4, r7}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006958:	4b21      	ldr	r3, [pc, #132]	; (80069e0 <SDMMC_GetCmdResp7+0x90>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a21      	ldr	r2, [pc, #132]	; (80069e4 <SDMMC_GetCmdResp7+0x94>)
 800695e:	fba2 2303 	umull	r2, r3, r2, r3
 8006962:	0a5b      	lsrs	r3, r3, #9
 8006964:	f241 3288 	movw	r2, #5000	; 0x1388
 8006968:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800696c:	4623      	mov	r3, r4
 800696e:	1e5c      	subs	r4, r3, #1
 8006970:	2b00      	cmp	r3, #0
 8006972:	d102      	bne.n	800697a <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006974:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006978:	e02c      	b.n	80069d4 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800697e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006986:	2b00      	cmp	r3, #0
 8006988:	d0f0      	beq.n	800696c <SDMMC_GetCmdResp7+0x1c>
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006990:	2b00      	cmp	r3, #0
 8006992:	d1eb      	bne.n	800696c <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006998:	f003 0304 	and.w	r3, r3, #4
 800699c:	2b00      	cmp	r3, #0
 800699e:	d004      	beq.n	80069aa <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2204      	movs	r2, #4
 80069a4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80069a6:	2304      	movs	r3, #4
 80069a8:	e014      	b.n	80069d4 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069ae:	f003 0301 	and.w	r3, r3, #1
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d004      	beq.n	80069c0 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2201      	movs	r2, #1
 80069ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80069bc:	2301      	movs	r3, #1
 80069be:	e009      	b.n	80069d4 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d002      	beq.n	80069d2 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2240      	movs	r2, #64	; 0x40
 80069d0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80069d2:	2300      	movs	r3, #0
  
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3710      	adds	r7, #16
 80069d8:	46bd      	mov	sp, r7
 80069da:	bc90      	pop	{r4, r7}
 80069dc:	4770      	bx	lr
 80069de:	bf00      	nop
 80069e0:	20000000 	.word	0x20000000
 80069e4:	10624dd3 	.word	0x10624dd3

080069e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80069e8:	b084      	sub	sp, #16
 80069ea:	b580      	push	{r7, lr}
 80069ec:	b084      	sub	sp, #16
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
 80069f2:	f107 001c 	add.w	r0, r7, #28
 80069f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80069fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d120      	bne.n	8006a42 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a04:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	68da      	ldr	r2, [r3, #12]
 8006a10:	4b20      	ldr	r3, [pc, #128]	; (8006a94 <USB_CoreInit+0xac>)
 8006a12:	4013      	ands	r3, r2
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006a24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d105      	bne.n	8006a36 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	68db      	ldr	r3, [r3, #12]
 8006a2e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f001 fac4 	bl	8007fc4 <USB_CoreReset>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	73fb      	strb	r3, [r7, #15]
 8006a40:	e010      	b.n	8006a64 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	68db      	ldr	r3, [r3, #12]
 8006a46:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f001 fab8 	bl	8007fc4 <USB_CoreReset>
 8006a54:	4603      	mov	r3, r0
 8006a56:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a5c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d10b      	bne.n	8006a82 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	f043 0206 	orr.w	r2, r3, #6
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	f043 0220 	orr.w	r2, r3, #32
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3710      	adds	r7, #16
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a8e:	b004      	add	sp, #16
 8006a90:	4770      	bx	lr
 8006a92:	bf00      	nop
 8006a94:	ffbdffbf 	.word	0xffbdffbf

08006a98 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b087      	sub	sp, #28
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	60f8      	str	r0, [r7, #12]
 8006aa0:	60b9      	str	r1, [r7, #8]
 8006aa2:	4613      	mov	r3, r2
 8006aa4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006aa6:	79fb      	ldrb	r3, [r7, #7]
 8006aa8:	2b02      	cmp	r3, #2
 8006aaa:	d165      	bne.n	8006b78 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	4a41      	ldr	r2, [pc, #260]	; (8006bb4 <USB_SetTurnaroundTime+0x11c>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d906      	bls.n	8006ac2 <USB_SetTurnaroundTime+0x2a>
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	4a40      	ldr	r2, [pc, #256]	; (8006bb8 <USB_SetTurnaroundTime+0x120>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d802      	bhi.n	8006ac2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006abc:	230f      	movs	r3, #15
 8006abe:	617b      	str	r3, [r7, #20]
 8006ac0:	e062      	b.n	8006b88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	4a3c      	ldr	r2, [pc, #240]	; (8006bb8 <USB_SetTurnaroundTime+0x120>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d906      	bls.n	8006ad8 <USB_SetTurnaroundTime+0x40>
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	4a3b      	ldr	r2, [pc, #236]	; (8006bbc <USB_SetTurnaroundTime+0x124>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d802      	bhi.n	8006ad8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006ad2:	230e      	movs	r3, #14
 8006ad4:	617b      	str	r3, [r7, #20]
 8006ad6:	e057      	b.n	8006b88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	4a38      	ldr	r2, [pc, #224]	; (8006bbc <USB_SetTurnaroundTime+0x124>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d906      	bls.n	8006aee <USB_SetTurnaroundTime+0x56>
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	4a37      	ldr	r2, [pc, #220]	; (8006bc0 <USB_SetTurnaroundTime+0x128>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d802      	bhi.n	8006aee <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006ae8:	230d      	movs	r3, #13
 8006aea:	617b      	str	r3, [r7, #20]
 8006aec:	e04c      	b.n	8006b88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	4a33      	ldr	r2, [pc, #204]	; (8006bc0 <USB_SetTurnaroundTime+0x128>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d906      	bls.n	8006b04 <USB_SetTurnaroundTime+0x6c>
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	4a32      	ldr	r2, [pc, #200]	; (8006bc4 <USB_SetTurnaroundTime+0x12c>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d802      	bhi.n	8006b04 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006afe:	230c      	movs	r3, #12
 8006b00:	617b      	str	r3, [r7, #20]
 8006b02:	e041      	b.n	8006b88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	4a2f      	ldr	r2, [pc, #188]	; (8006bc4 <USB_SetTurnaroundTime+0x12c>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d906      	bls.n	8006b1a <USB_SetTurnaroundTime+0x82>
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	4a2e      	ldr	r2, [pc, #184]	; (8006bc8 <USB_SetTurnaroundTime+0x130>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d802      	bhi.n	8006b1a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006b14:	230b      	movs	r3, #11
 8006b16:	617b      	str	r3, [r7, #20]
 8006b18:	e036      	b.n	8006b88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	4a2a      	ldr	r2, [pc, #168]	; (8006bc8 <USB_SetTurnaroundTime+0x130>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d906      	bls.n	8006b30 <USB_SetTurnaroundTime+0x98>
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	4a29      	ldr	r2, [pc, #164]	; (8006bcc <USB_SetTurnaroundTime+0x134>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d802      	bhi.n	8006b30 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006b2a:	230a      	movs	r3, #10
 8006b2c:	617b      	str	r3, [r7, #20]
 8006b2e:	e02b      	b.n	8006b88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	4a26      	ldr	r2, [pc, #152]	; (8006bcc <USB_SetTurnaroundTime+0x134>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d906      	bls.n	8006b46 <USB_SetTurnaroundTime+0xae>
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	4a25      	ldr	r2, [pc, #148]	; (8006bd0 <USB_SetTurnaroundTime+0x138>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d802      	bhi.n	8006b46 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006b40:	2309      	movs	r3, #9
 8006b42:	617b      	str	r3, [r7, #20]
 8006b44:	e020      	b.n	8006b88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	4a21      	ldr	r2, [pc, #132]	; (8006bd0 <USB_SetTurnaroundTime+0x138>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d906      	bls.n	8006b5c <USB_SetTurnaroundTime+0xc4>
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	4a20      	ldr	r2, [pc, #128]	; (8006bd4 <USB_SetTurnaroundTime+0x13c>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d802      	bhi.n	8006b5c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006b56:	2308      	movs	r3, #8
 8006b58:	617b      	str	r3, [r7, #20]
 8006b5a:	e015      	b.n	8006b88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	4a1d      	ldr	r2, [pc, #116]	; (8006bd4 <USB_SetTurnaroundTime+0x13c>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d906      	bls.n	8006b72 <USB_SetTurnaroundTime+0xda>
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	4a1c      	ldr	r2, [pc, #112]	; (8006bd8 <USB_SetTurnaroundTime+0x140>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d802      	bhi.n	8006b72 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006b6c:	2307      	movs	r3, #7
 8006b6e:	617b      	str	r3, [r7, #20]
 8006b70:	e00a      	b.n	8006b88 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006b72:	2306      	movs	r3, #6
 8006b74:	617b      	str	r3, [r7, #20]
 8006b76:	e007      	b.n	8006b88 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006b78:	79fb      	ldrb	r3, [r7, #7]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d102      	bne.n	8006b84 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006b7e:	2309      	movs	r3, #9
 8006b80:	617b      	str	r3, [r7, #20]
 8006b82:	e001      	b.n	8006b88 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006b84:	2309      	movs	r3, #9
 8006b86:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	68db      	ldr	r3, [r3, #12]
 8006b8c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	68da      	ldr	r2, [r3, #12]
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	029b      	lsls	r3, r3, #10
 8006b9c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006ba0:	431a      	orrs	r2, r3
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006ba6:	2300      	movs	r3, #0
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	371c      	adds	r7, #28
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr
 8006bb4:	00d8acbf 	.word	0x00d8acbf
 8006bb8:	00e4e1bf 	.word	0x00e4e1bf
 8006bbc:	00f423ff 	.word	0x00f423ff
 8006bc0:	0106737f 	.word	0x0106737f
 8006bc4:	011a499f 	.word	0x011a499f
 8006bc8:	01312cff 	.word	0x01312cff
 8006bcc:	014ca43f 	.word	0x014ca43f
 8006bd0:	016e35ff 	.word	0x016e35ff
 8006bd4:	01a6ab1f 	.word	0x01a6ab1f
 8006bd8:	01e847ff 	.word	0x01e847ff

08006bdc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b083      	sub	sp, #12
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	f043 0201 	orr.w	r2, r3, #1
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	370c      	adds	r7, #12
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr

08006bfe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006bfe:	b480      	push	{r7}
 8006c00:	b083      	sub	sp, #12
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	f023 0201 	bic.w	r2, r3, #1
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c12:	2300      	movs	r3, #0
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	370c      	adds	r7, #12
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr

08006c20 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b082      	sub	sp, #8
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	460b      	mov	r3, r1
 8006c2a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	68db      	ldr	r3, [r3, #12]
 8006c30:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006c38:	78fb      	ldrb	r3, [r7, #3]
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d106      	bne.n	8006c4c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	68db      	ldr	r3, [r3, #12]
 8006c42:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	60da      	str	r2, [r3, #12]
 8006c4a:	e00b      	b.n	8006c64 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006c4c:	78fb      	ldrb	r3, [r7, #3]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d106      	bne.n	8006c60 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	60da      	str	r2, [r3, #12]
 8006c5e:	e001      	b.n	8006c64 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006c60:	2301      	movs	r3, #1
 8006c62:	e003      	b.n	8006c6c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006c64:	2032      	movs	r0, #50	; 0x32
 8006c66:	f7fa fb7b 	bl	8001360 <HAL_Delay>

  return HAL_OK;
 8006c6a:	2300      	movs	r3, #0
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3708      	adds	r7, #8
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c74:	b084      	sub	sp, #16
 8006c76:	b580      	push	{r7, lr}
 8006c78:	b086      	sub	sp, #24
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	6078      	str	r0, [r7, #4]
 8006c7e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006c82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006c86:	2300      	movs	r3, #0
 8006c88:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006c8e:	2300      	movs	r3, #0
 8006c90:	613b      	str	r3, [r7, #16]
 8006c92:	e009      	b.n	8006ca8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	3340      	adds	r3, #64	; 0x40
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	4413      	add	r3, r2
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	613b      	str	r3, [r7, #16]
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	2b0e      	cmp	r3, #14
 8006cac:	d9f2      	bls.n	8006c94 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006cae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d11c      	bne.n	8006cee <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	68fa      	ldr	r2, [r7, #12]
 8006cbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006cc2:	f043 0302 	orr.w	r3, r3, #2
 8006cc6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ccc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	601a      	str	r2, [r3, #0]
 8006cec:	e005      	b.n	8006cfa <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006d00:	461a      	mov	r2, r3
 8006d02:	2300      	movs	r3, #0
 8006d04:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d0c:	4619      	mov	r1, r3
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d14:	461a      	mov	r2, r3
 8006d16:	680b      	ldr	r3, [r1, #0]
 8006d18:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d10c      	bne.n	8006d3a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d104      	bne.n	8006d30 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006d26:	2100      	movs	r1, #0
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f000 f959 	bl	8006fe0 <USB_SetDevSpeed>
 8006d2e:	e018      	b.n	8006d62 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006d30:	2101      	movs	r1, #1
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 f954 	bl	8006fe0 <USB_SetDevSpeed>
 8006d38:	e013      	b.n	8006d62 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8006d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d3c:	2b03      	cmp	r3, #3
 8006d3e:	d10c      	bne.n	8006d5a <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d104      	bne.n	8006d50 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006d46:	2100      	movs	r1, #0
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f000 f949 	bl	8006fe0 <USB_SetDevSpeed>
 8006d4e:	e008      	b.n	8006d62 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006d50:	2101      	movs	r1, #1
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 f944 	bl	8006fe0 <USB_SetDevSpeed>
 8006d58:	e003      	b.n	8006d62 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006d5a:	2103      	movs	r1, #3
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 f93f 	bl	8006fe0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006d62:	2110      	movs	r1, #16
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 f8f3 	bl	8006f50 <USB_FlushTxFifo>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d001      	beq.n	8006d74 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8006d70:	2301      	movs	r3, #1
 8006d72:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f000 f911 	bl	8006f9c <USB_FlushRxFifo>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d001      	beq.n	8006d84 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8006d80:	2301      	movs	r3, #1
 8006d82:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d96:	461a      	mov	r2, r3
 8006d98:	2300      	movs	r3, #0
 8006d9a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006da2:	461a      	mov	r2, r3
 8006da4:	2300      	movs	r3, #0
 8006da6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006da8:	2300      	movs	r3, #0
 8006daa:	613b      	str	r3, [r7, #16]
 8006dac:	e043      	b.n	8006e36 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	015a      	lsls	r2, r3, #5
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	4413      	add	r3, r2
 8006db6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006dc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006dc4:	d118      	bne.n	8006df8 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d10a      	bne.n	8006de2 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	015a      	lsls	r2, r3, #5
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dd8:	461a      	mov	r2, r3
 8006dda:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006dde:	6013      	str	r3, [r2, #0]
 8006de0:	e013      	b.n	8006e0a <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	015a      	lsls	r2, r3, #5
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	4413      	add	r3, r2
 8006dea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dee:	461a      	mov	r2, r3
 8006df0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006df4:	6013      	str	r3, [r2, #0]
 8006df6:	e008      	b.n	8006e0a <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	015a      	lsls	r2, r3, #5
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	4413      	add	r3, r2
 8006e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e04:	461a      	mov	r2, r3
 8006e06:	2300      	movs	r3, #0
 8006e08:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	015a      	lsls	r2, r3, #5
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	4413      	add	r3, r2
 8006e12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e16:	461a      	mov	r2, r3
 8006e18:	2300      	movs	r3, #0
 8006e1a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	015a      	lsls	r2, r3, #5
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	4413      	add	r3, r2
 8006e24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e28:	461a      	mov	r2, r3
 8006e2a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006e2e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	3301      	adds	r3, #1
 8006e34:	613b      	str	r3, [r7, #16]
 8006e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e38:	693a      	ldr	r2, [r7, #16]
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d3b7      	bcc.n	8006dae <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e3e:	2300      	movs	r3, #0
 8006e40:	613b      	str	r3, [r7, #16]
 8006e42:	e043      	b.n	8006ecc <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	015a      	lsls	r2, r3, #5
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	4413      	add	r3, r2
 8006e4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e5a:	d118      	bne.n	8006e8e <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d10a      	bne.n	8006e78 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	015a      	lsls	r2, r3, #5
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	4413      	add	r3, r2
 8006e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e6e:	461a      	mov	r2, r3
 8006e70:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006e74:	6013      	str	r3, [r2, #0]
 8006e76:	e013      	b.n	8006ea0 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	015a      	lsls	r2, r3, #5
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	4413      	add	r3, r2
 8006e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e84:	461a      	mov	r2, r3
 8006e86:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006e8a:	6013      	str	r3, [r2, #0]
 8006e8c:	e008      	b.n	8006ea0 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	015a      	lsls	r2, r3, #5
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	4413      	add	r3, r2
 8006e96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	015a      	lsls	r2, r3, #5
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	4413      	add	r3, r2
 8006ea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eac:	461a      	mov	r2, r3
 8006eae:	2300      	movs	r3, #0
 8006eb0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	015a      	lsls	r2, r3, #5
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	4413      	add	r3, r2
 8006eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006ec4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	3301      	adds	r3, #1
 8006eca:	613b      	str	r3, [r7, #16]
 8006ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ece:	693a      	ldr	r2, [r7, #16]
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d3b7      	bcc.n	8006e44 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eda:	691b      	ldr	r3, [r3, #16]
 8006edc:	68fa      	ldr	r2, [r7, #12]
 8006ede:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ee2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ee6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2200      	movs	r2, #0
 8006eec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006ef4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d105      	bne.n	8006f08 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	699b      	ldr	r3, [r3, #24]
 8006f00:	f043 0210 	orr.w	r2, r3, #16
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	699a      	ldr	r2, [r3, #24]
 8006f0c:	4b0e      	ldr	r3, [pc, #56]	; (8006f48 <USB_DevInit+0x2d4>)
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006f14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d005      	beq.n	8006f26 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	699b      	ldr	r3, [r3, #24]
 8006f1e:	f043 0208 	orr.w	r2, r3, #8
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006f26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d105      	bne.n	8006f38 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	699a      	ldr	r2, [r3, #24]
 8006f30:	4b06      	ldr	r3, [pc, #24]	; (8006f4c <USB_DevInit+0x2d8>)
 8006f32:	4313      	orrs	r3, r2
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006f38:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3718      	adds	r7, #24
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f44:	b004      	add	sp, #16
 8006f46:	4770      	bx	lr
 8006f48:	803c3800 	.word	0x803c3800
 8006f4c:	40000004 	.word	0x40000004

08006f50 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b085      	sub	sp, #20
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	019b      	lsls	r3, r3, #6
 8006f62:	f043 0220 	orr.w	r2, r3, #32
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	3301      	adds	r3, #1
 8006f6e:	60fb      	str	r3, [r7, #12]
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	4a09      	ldr	r2, [pc, #36]	; (8006f98 <USB_FlushTxFifo+0x48>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d901      	bls.n	8006f7c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006f78:	2303      	movs	r3, #3
 8006f7a:	e006      	b.n	8006f8a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	691b      	ldr	r3, [r3, #16]
 8006f80:	f003 0320 	and.w	r3, r3, #32
 8006f84:	2b20      	cmp	r3, #32
 8006f86:	d0f0      	beq.n	8006f6a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006f88:	2300      	movs	r3, #0
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3714      	adds	r7, #20
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f94:	4770      	bx	lr
 8006f96:	bf00      	nop
 8006f98:	00030d40 	.word	0x00030d40

08006f9c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b085      	sub	sp, #20
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2210      	movs	r2, #16
 8006fac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	3301      	adds	r3, #1
 8006fb2:	60fb      	str	r3, [r7, #12]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	4a09      	ldr	r2, [pc, #36]	; (8006fdc <USB_FlushRxFifo+0x40>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d901      	bls.n	8006fc0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006fbc:	2303      	movs	r3, #3
 8006fbe:	e006      	b.n	8006fce <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	691b      	ldr	r3, [r3, #16]
 8006fc4:	f003 0310 	and.w	r3, r3, #16
 8006fc8:	2b10      	cmp	r3, #16
 8006fca:	d0f0      	beq.n	8006fae <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006fcc:	2300      	movs	r3, #0
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3714      	adds	r7, #20
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd8:	4770      	bx	lr
 8006fda:	bf00      	nop
 8006fdc:	00030d40 	.word	0x00030d40

08006fe0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b085      	sub	sp, #20
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	460b      	mov	r3, r1
 8006fea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	78fb      	ldrb	r3, [r7, #3]
 8006ffa:	68f9      	ldr	r1, [r7, #12]
 8006ffc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007000:	4313      	orrs	r3, r2
 8007002:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007004:	2300      	movs	r3, #0
}
 8007006:	4618      	mov	r0, r3
 8007008:	3714      	adds	r7, #20
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr

08007012 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007012:	b480      	push	{r7}
 8007014:	b087      	sub	sp, #28
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	f003 0306 	and.w	r3, r3, #6
 800702a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d102      	bne.n	8007038 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007032:	2300      	movs	r3, #0
 8007034:	75fb      	strb	r3, [r7, #23]
 8007036:	e00a      	b.n	800704e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2b02      	cmp	r3, #2
 800703c:	d002      	beq.n	8007044 <USB_GetDevSpeed+0x32>
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2b06      	cmp	r3, #6
 8007042:	d102      	bne.n	800704a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007044:	2302      	movs	r3, #2
 8007046:	75fb      	strb	r3, [r7, #23]
 8007048:	e001      	b.n	800704e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800704a:	230f      	movs	r3, #15
 800704c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800704e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007050:	4618      	mov	r0, r3
 8007052:	371c      	adds	r7, #28
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800705c:	b480      	push	{r7}
 800705e:	b085      	sub	sp, #20
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	785b      	ldrb	r3, [r3, #1]
 8007074:	2b01      	cmp	r3, #1
 8007076:	d139      	bne.n	80070ec <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800707e:	69da      	ldr	r2, [r3, #28]
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	f003 030f 	and.w	r3, r3, #15
 8007088:	2101      	movs	r1, #1
 800708a:	fa01 f303 	lsl.w	r3, r1, r3
 800708e:	b29b      	uxth	r3, r3
 8007090:	68f9      	ldr	r1, [r7, #12]
 8007092:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007096:	4313      	orrs	r3, r2
 8007098:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	015a      	lsls	r2, r3, #5
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	4413      	add	r3, r2
 80070a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d153      	bne.n	8007158 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	015a      	lsls	r2, r3, #5
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	4413      	add	r3, r2
 80070b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	78db      	ldrb	r3, [r3, #3]
 80070ca:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80070cc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	059b      	lsls	r3, r3, #22
 80070d2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80070d4:	431a      	orrs	r2, r3
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	0159      	lsls	r1, r3, #5
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	440b      	add	r3, r1
 80070de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070e2:	4619      	mov	r1, r3
 80070e4:	4b20      	ldr	r3, [pc, #128]	; (8007168 <USB_ActivateEndpoint+0x10c>)
 80070e6:	4313      	orrs	r3, r2
 80070e8:	600b      	str	r3, [r1, #0]
 80070ea:	e035      	b.n	8007158 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070f2:	69da      	ldr	r2, [r3, #28]
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	781b      	ldrb	r3, [r3, #0]
 80070f8:	f003 030f 	and.w	r3, r3, #15
 80070fc:	2101      	movs	r1, #1
 80070fe:	fa01 f303 	lsl.w	r3, r1, r3
 8007102:	041b      	lsls	r3, r3, #16
 8007104:	68f9      	ldr	r1, [r7, #12]
 8007106:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800710a:	4313      	orrs	r3, r2
 800710c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	015a      	lsls	r2, r3, #5
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	4413      	add	r3, r2
 8007116:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007120:	2b00      	cmp	r3, #0
 8007122:	d119      	bne.n	8007158 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	015a      	lsls	r2, r3, #5
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	4413      	add	r3, r2
 800712c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007130:	681a      	ldr	r2, [r3, #0]
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	689b      	ldr	r3, [r3, #8]
 8007136:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	78db      	ldrb	r3, [r3, #3]
 800713e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007140:	430b      	orrs	r3, r1
 8007142:	431a      	orrs	r2, r3
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	0159      	lsls	r1, r3, #5
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	440b      	add	r3, r1
 800714c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007150:	4619      	mov	r1, r3
 8007152:	4b05      	ldr	r3, [pc, #20]	; (8007168 <USB_ActivateEndpoint+0x10c>)
 8007154:	4313      	orrs	r3, r2
 8007156:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007158:	2300      	movs	r3, #0
}
 800715a:	4618      	mov	r0, r3
 800715c:	3714      	adds	r7, #20
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr
 8007166:	bf00      	nop
 8007168:	10008000 	.word	0x10008000

0800716c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800716c:	b480      	push	{r7}
 800716e:	b085      	sub	sp, #20
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	785b      	ldrb	r3, [r3, #1]
 8007184:	2b01      	cmp	r3, #1
 8007186:	d161      	bne.n	800724c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	015a      	lsls	r2, r3, #5
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	4413      	add	r3, r2
 8007190:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800719a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800719e:	d11f      	bne.n	80071e0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	015a      	lsls	r2, r3, #5
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	4413      	add	r3, r2
 80071a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	68ba      	ldr	r2, [r7, #8]
 80071b0:	0151      	lsls	r1, r2, #5
 80071b2:	68fa      	ldr	r2, [r7, #12]
 80071b4:	440a      	add	r2, r1
 80071b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071ba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80071be:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	015a      	lsls	r2, r3, #5
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	4413      	add	r3, r2
 80071c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	68ba      	ldr	r2, [r7, #8]
 80071d0:	0151      	lsls	r1, r2, #5
 80071d2:	68fa      	ldr	r2, [r7, #12]
 80071d4:	440a      	add	r2, r1
 80071d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80071de:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	781b      	ldrb	r3, [r3, #0]
 80071ec:	f003 030f 	and.w	r3, r3, #15
 80071f0:	2101      	movs	r1, #1
 80071f2:	fa01 f303 	lsl.w	r3, r1, r3
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	43db      	mvns	r3, r3
 80071fa:	68f9      	ldr	r1, [r7, #12]
 80071fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007200:	4013      	ands	r3, r2
 8007202:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800720a:	69da      	ldr	r2, [r3, #28]
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	781b      	ldrb	r3, [r3, #0]
 8007210:	f003 030f 	and.w	r3, r3, #15
 8007214:	2101      	movs	r1, #1
 8007216:	fa01 f303 	lsl.w	r3, r1, r3
 800721a:	b29b      	uxth	r3, r3
 800721c:	43db      	mvns	r3, r3
 800721e:	68f9      	ldr	r1, [r7, #12]
 8007220:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007224:	4013      	ands	r3, r2
 8007226:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	015a      	lsls	r2, r3, #5
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	4413      	add	r3, r2
 8007230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	0159      	lsls	r1, r3, #5
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	440b      	add	r3, r1
 800723e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007242:	4619      	mov	r1, r3
 8007244:	4b35      	ldr	r3, [pc, #212]	; (800731c <USB_DeactivateEndpoint+0x1b0>)
 8007246:	4013      	ands	r3, r2
 8007248:	600b      	str	r3, [r1, #0]
 800724a:	e060      	b.n	800730e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	015a      	lsls	r2, r3, #5
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	4413      	add	r3, r2
 8007254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800725e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007262:	d11f      	bne.n	80072a4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	015a      	lsls	r2, r3, #5
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	4413      	add	r3, r2
 800726c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	68ba      	ldr	r2, [r7, #8]
 8007274:	0151      	lsls	r1, r2, #5
 8007276:	68fa      	ldr	r2, [r7, #12]
 8007278:	440a      	add	r2, r1
 800727a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800727e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007282:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	015a      	lsls	r2, r3, #5
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	4413      	add	r3, r2
 800728c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	68ba      	ldr	r2, [r7, #8]
 8007294:	0151      	lsls	r1, r2, #5
 8007296:	68fa      	ldr	r2, [r7, #12]
 8007298:	440a      	add	r2, r1
 800729a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800729e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80072a2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	781b      	ldrb	r3, [r3, #0]
 80072b0:	f003 030f 	and.w	r3, r3, #15
 80072b4:	2101      	movs	r1, #1
 80072b6:	fa01 f303 	lsl.w	r3, r1, r3
 80072ba:	041b      	lsls	r3, r3, #16
 80072bc:	43db      	mvns	r3, r3
 80072be:	68f9      	ldr	r1, [r7, #12]
 80072c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072c4:	4013      	ands	r3, r2
 80072c6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072ce:	69da      	ldr	r2, [r3, #28]
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	f003 030f 	and.w	r3, r3, #15
 80072d8:	2101      	movs	r1, #1
 80072da:	fa01 f303 	lsl.w	r3, r1, r3
 80072de:	041b      	lsls	r3, r3, #16
 80072e0:	43db      	mvns	r3, r3
 80072e2:	68f9      	ldr	r1, [r7, #12]
 80072e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072e8:	4013      	ands	r3, r2
 80072ea:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	015a      	lsls	r2, r3, #5
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	4413      	add	r3, r2
 80072f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	0159      	lsls	r1, r3, #5
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	440b      	add	r3, r1
 8007302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007306:	4619      	mov	r1, r3
 8007308:	4b05      	ldr	r3, [pc, #20]	; (8007320 <USB_DeactivateEndpoint+0x1b4>)
 800730a:	4013      	ands	r3, r2
 800730c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800730e:	2300      	movs	r3, #0
}
 8007310:	4618      	mov	r0, r3
 8007312:	3714      	adds	r7, #20
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr
 800731c:	ec337800 	.word	0xec337800
 8007320:	eff37800 	.word	0xeff37800

08007324 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b08a      	sub	sp, #40	; 0x28
 8007328:	af02      	add	r7, sp, #8
 800732a:	60f8      	str	r0, [r7, #12]
 800732c:	60b9      	str	r1, [r7, #8]
 800732e:	4613      	mov	r3, r2
 8007330:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	781b      	ldrb	r3, [r3, #0]
 800733a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	785b      	ldrb	r3, [r3, #1]
 8007340:	2b01      	cmp	r3, #1
 8007342:	f040 8163 	bne.w	800760c <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	695b      	ldr	r3, [r3, #20]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d132      	bne.n	80073b4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800734e:	69bb      	ldr	r3, [r7, #24]
 8007350:	015a      	lsls	r2, r3, #5
 8007352:	69fb      	ldr	r3, [r7, #28]
 8007354:	4413      	add	r3, r2
 8007356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800735a:	691a      	ldr	r2, [r3, #16]
 800735c:	69bb      	ldr	r3, [r7, #24]
 800735e:	0159      	lsls	r1, r3, #5
 8007360:	69fb      	ldr	r3, [r7, #28]
 8007362:	440b      	add	r3, r1
 8007364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007368:	4619      	mov	r1, r3
 800736a:	4ba5      	ldr	r3, [pc, #660]	; (8007600 <USB_EPStartXfer+0x2dc>)
 800736c:	4013      	ands	r3, r2
 800736e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007370:	69bb      	ldr	r3, [r7, #24]
 8007372:	015a      	lsls	r2, r3, #5
 8007374:	69fb      	ldr	r3, [r7, #28]
 8007376:	4413      	add	r3, r2
 8007378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800737c:	691b      	ldr	r3, [r3, #16]
 800737e:	69ba      	ldr	r2, [r7, #24]
 8007380:	0151      	lsls	r1, r2, #5
 8007382:	69fa      	ldr	r2, [r7, #28]
 8007384:	440a      	add	r2, r1
 8007386:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800738a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800738e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007390:	69bb      	ldr	r3, [r7, #24]
 8007392:	015a      	lsls	r2, r3, #5
 8007394:	69fb      	ldr	r3, [r7, #28]
 8007396:	4413      	add	r3, r2
 8007398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800739c:	691a      	ldr	r2, [r3, #16]
 800739e:	69bb      	ldr	r3, [r7, #24]
 80073a0:	0159      	lsls	r1, r3, #5
 80073a2:	69fb      	ldr	r3, [r7, #28]
 80073a4:	440b      	add	r3, r1
 80073a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073aa:	4619      	mov	r1, r3
 80073ac:	4b95      	ldr	r3, [pc, #596]	; (8007604 <USB_EPStartXfer+0x2e0>)
 80073ae:	4013      	ands	r3, r2
 80073b0:	610b      	str	r3, [r1, #16]
 80073b2:	e074      	b.n	800749e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80073b4:	69bb      	ldr	r3, [r7, #24]
 80073b6:	015a      	lsls	r2, r3, #5
 80073b8:	69fb      	ldr	r3, [r7, #28]
 80073ba:	4413      	add	r3, r2
 80073bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073c0:	691a      	ldr	r2, [r3, #16]
 80073c2:	69bb      	ldr	r3, [r7, #24]
 80073c4:	0159      	lsls	r1, r3, #5
 80073c6:	69fb      	ldr	r3, [r7, #28]
 80073c8:	440b      	add	r3, r1
 80073ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073ce:	4619      	mov	r1, r3
 80073d0:	4b8c      	ldr	r3, [pc, #560]	; (8007604 <USB_EPStartXfer+0x2e0>)
 80073d2:	4013      	ands	r3, r2
 80073d4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80073d6:	69bb      	ldr	r3, [r7, #24]
 80073d8:	015a      	lsls	r2, r3, #5
 80073da:	69fb      	ldr	r3, [r7, #28]
 80073dc:	4413      	add	r3, r2
 80073de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073e2:	691a      	ldr	r2, [r3, #16]
 80073e4:	69bb      	ldr	r3, [r7, #24]
 80073e6:	0159      	lsls	r1, r3, #5
 80073e8:	69fb      	ldr	r3, [r7, #28]
 80073ea:	440b      	add	r3, r1
 80073ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073f0:	4619      	mov	r1, r3
 80073f2:	4b83      	ldr	r3, [pc, #524]	; (8007600 <USB_EPStartXfer+0x2dc>)
 80073f4:	4013      	ands	r3, r2
 80073f6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80073f8:	69bb      	ldr	r3, [r7, #24]
 80073fa:	015a      	lsls	r2, r3, #5
 80073fc:	69fb      	ldr	r3, [r7, #28]
 80073fe:	4413      	add	r3, r2
 8007400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007404:	691a      	ldr	r2, [r3, #16]
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	6959      	ldr	r1, [r3, #20]
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	440b      	add	r3, r1
 8007410:	1e59      	subs	r1, r3, #1
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	689b      	ldr	r3, [r3, #8]
 8007416:	fbb1 f3f3 	udiv	r3, r1, r3
 800741a:	04d9      	lsls	r1, r3, #19
 800741c:	4b7a      	ldr	r3, [pc, #488]	; (8007608 <USB_EPStartXfer+0x2e4>)
 800741e:	400b      	ands	r3, r1
 8007420:	69b9      	ldr	r1, [r7, #24]
 8007422:	0148      	lsls	r0, r1, #5
 8007424:	69f9      	ldr	r1, [r7, #28]
 8007426:	4401      	add	r1, r0
 8007428:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800742c:	4313      	orrs	r3, r2
 800742e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007430:	69bb      	ldr	r3, [r7, #24]
 8007432:	015a      	lsls	r2, r3, #5
 8007434:	69fb      	ldr	r3, [r7, #28]
 8007436:	4413      	add	r3, r2
 8007438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800743c:	691a      	ldr	r2, [r3, #16]
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	695b      	ldr	r3, [r3, #20]
 8007442:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007446:	69b9      	ldr	r1, [r7, #24]
 8007448:	0148      	lsls	r0, r1, #5
 800744a:	69f9      	ldr	r1, [r7, #28]
 800744c:	4401      	add	r1, r0
 800744e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007452:	4313      	orrs	r3, r2
 8007454:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	78db      	ldrb	r3, [r3, #3]
 800745a:	2b01      	cmp	r3, #1
 800745c:	d11f      	bne.n	800749e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800745e:	69bb      	ldr	r3, [r7, #24]
 8007460:	015a      	lsls	r2, r3, #5
 8007462:	69fb      	ldr	r3, [r7, #28]
 8007464:	4413      	add	r3, r2
 8007466:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800746a:	691b      	ldr	r3, [r3, #16]
 800746c:	69ba      	ldr	r2, [r7, #24]
 800746e:	0151      	lsls	r1, r2, #5
 8007470:	69fa      	ldr	r2, [r7, #28]
 8007472:	440a      	add	r2, r1
 8007474:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007478:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800747c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800747e:	69bb      	ldr	r3, [r7, #24]
 8007480:	015a      	lsls	r2, r3, #5
 8007482:	69fb      	ldr	r3, [r7, #28]
 8007484:	4413      	add	r3, r2
 8007486:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800748a:	691b      	ldr	r3, [r3, #16]
 800748c:	69ba      	ldr	r2, [r7, #24]
 800748e:	0151      	lsls	r1, r2, #5
 8007490:	69fa      	ldr	r2, [r7, #28]
 8007492:	440a      	add	r2, r1
 8007494:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007498:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800749c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800749e:	79fb      	ldrb	r3, [r7, #7]
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d14b      	bne.n	800753c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	691b      	ldr	r3, [r3, #16]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d009      	beq.n	80074c0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80074ac:	69bb      	ldr	r3, [r7, #24]
 80074ae:	015a      	lsls	r2, r3, #5
 80074b0:	69fb      	ldr	r3, [r7, #28]
 80074b2:	4413      	add	r3, r2
 80074b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074b8:	461a      	mov	r2, r3
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	691b      	ldr	r3, [r3, #16]
 80074be:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	78db      	ldrb	r3, [r3, #3]
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d128      	bne.n	800751a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80074c8:	69fb      	ldr	r3, [r7, #28]
 80074ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d110      	bne.n	80074fa <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80074d8:	69bb      	ldr	r3, [r7, #24]
 80074da:	015a      	lsls	r2, r3, #5
 80074dc:	69fb      	ldr	r3, [r7, #28]
 80074de:	4413      	add	r3, r2
 80074e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	69ba      	ldr	r2, [r7, #24]
 80074e8:	0151      	lsls	r1, r2, #5
 80074ea:	69fa      	ldr	r2, [r7, #28]
 80074ec:	440a      	add	r2, r1
 80074ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80074f6:	6013      	str	r3, [r2, #0]
 80074f8:	e00f      	b.n	800751a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80074fa:	69bb      	ldr	r3, [r7, #24]
 80074fc:	015a      	lsls	r2, r3, #5
 80074fe:	69fb      	ldr	r3, [r7, #28]
 8007500:	4413      	add	r3, r2
 8007502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	69ba      	ldr	r2, [r7, #24]
 800750a:	0151      	lsls	r1, r2, #5
 800750c:	69fa      	ldr	r2, [r7, #28]
 800750e:	440a      	add	r2, r1
 8007510:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007518:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800751a:	69bb      	ldr	r3, [r7, #24]
 800751c:	015a      	lsls	r2, r3, #5
 800751e:	69fb      	ldr	r3, [r7, #28]
 8007520:	4413      	add	r3, r2
 8007522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	69ba      	ldr	r2, [r7, #24]
 800752a:	0151      	lsls	r1, r2, #5
 800752c:	69fa      	ldr	r2, [r7, #28]
 800752e:	440a      	add	r2, r1
 8007530:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007534:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007538:	6013      	str	r3, [r2, #0]
 800753a:	e133      	b.n	80077a4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800753c:	69bb      	ldr	r3, [r7, #24]
 800753e:	015a      	lsls	r2, r3, #5
 8007540:	69fb      	ldr	r3, [r7, #28]
 8007542:	4413      	add	r3, r2
 8007544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	69ba      	ldr	r2, [r7, #24]
 800754c:	0151      	lsls	r1, r2, #5
 800754e:	69fa      	ldr	r2, [r7, #28]
 8007550:	440a      	add	r2, r1
 8007552:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007556:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800755a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	78db      	ldrb	r3, [r3, #3]
 8007560:	2b01      	cmp	r3, #1
 8007562:	d015      	beq.n	8007590 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	695b      	ldr	r3, [r3, #20]
 8007568:	2b00      	cmp	r3, #0
 800756a:	f000 811b 	beq.w	80077a4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800756e:	69fb      	ldr	r3, [r7, #28]
 8007570:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007574:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	f003 030f 	and.w	r3, r3, #15
 800757e:	2101      	movs	r1, #1
 8007580:	fa01 f303 	lsl.w	r3, r1, r3
 8007584:	69f9      	ldr	r1, [r7, #28]
 8007586:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800758a:	4313      	orrs	r3, r2
 800758c:	634b      	str	r3, [r1, #52]	; 0x34
 800758e:	e109      	b.n	80077a4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007590:	69fb      	ldr	r3, [r7, #28]
 8007592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800759c:	2b00      	cmp	r3, #0
 800759e:	d110      	bne.n	80075c2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80075a0:	69bb      	ldr	r3, [r7, #24]
 80075a2:	015a      	lsls	r2, r3, #5
 80075a4:	69fb      	ldr	r3, [r7, #28]
 80075a6:	4413      	add	r3, r2
 80075a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	69ba      	ldr	r2, [r7, #24]
 80075b0:	0151      	lsls	r1, r2, #5
 80075b2:	69fa      	ldr	r2, [r7, #28]
 80075b4:	440a      	add	r2, r1
 80075b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80075be:	6013      	str	r3, [r2, #0]
 80075c0:	e00f      	b.n	80075e2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80075c2:	69bb      	ldr	r3, [r7, #24]
 80075c4:	015a      	lsls	r2, r3, #5
 80075c6:	69fb      	ldr	r3, [r7, #28]
 80075c8:	4413      	add	r3, r2
 80075ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	69ba      	ldr	r2, [r7, #24]
 80075d2:	0151      	lsls	r1, r2, #5
 80075d4:	69fa      	ldr	r2, [r7, #28]
 80075d6:	440a      	add	r2, r1
 80075d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075e0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	68d9      	ldr	r1, [r3, #12]
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	781a      	ldrb	r2, [r3, #0]
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	695b      	ldr	r3, [r3, #20]
 80075ee:	b298      	uxth	r0, r3
 80075f0:	79fb      	ldrb	r3, [r7, #7]
 80075f2:	9300      	str	r3, [sp, #0]
 80075f4:	4603      	mov	r3, r0
 80075f6:	68f8      	ldr	r0, [r7, #12]
 80075f8:	f000 fa38 	bl	8007a6c <USB_WritePacket>
 80075fc:	e0d2      	b.n	80077a4 <USB_EPStartXfer+0x480>
 80075fe:	bf00      	nop
 8007600:	e007ffff 	.word	0xe007ffff
 8007604:	fff80000 	.word	0xfff80000
 8007608:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800760c:	69bb      	ldr	r3, [r7, #24]
 800760e:	015a      	lsls	r2, r3, #5
 8007610:	69fb      	ldr	r3, [r7, #28]
 8007612:	4413      	add	r3, r2
 8007614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007618:	691a      	ldr	r2, [r3, #16]
 800761a:	69bb      	ldr	r3, [r7, #24]
 800761c:	0159      	lsls	r1, r3, #5
 800761e:	69fb      	ldr	r3, [r7, #28]
 8007620:	440b      	add	r3, r1
 8007622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007626:	4619      	mov	r1, r3
 8007628:	4b61      	ldr	r3, [pc, #388]	; (80077b0 <USB_EPStartXfer+0x48c>)
 800762a:	4013      	ands	r3, r2
 800762c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800762e:	69bb      	ldr	r3, [r7, #24]
 8007630:	015a      	lsls	r2, r3, #5
 8007632:	69fb      	ldr	r3, [r7, #28]
 8007634:	4413      	add	r3, r2
 8007636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800763a:	691a      	ldr	r2, [r3, #16]
 800763c:	69bb      	ldr	r3, [r7, #24]
 800763e:	0159      	lsls	r1, r3, #5
 8007640:	69fb      	ldr	r3, [r7, #28]
 8007642:	440b      	add	r3, r1
 8007644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007648:	4619      	mov	r1, r3
 800764a:	4b5a      	ldr	r3, [pc, #360]	; (80077b4 <USB_EPStartXfer+0x490>)
 800764c:	4013      	ands	r3, r2
 800764e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	695b      	ldr	r3, [r3, #20]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d123      	bne.n	80076a0 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007658:	69bb      	ldr	r3, [r7, #24]
 800765a:	015a      	lsls	r2, r3, #5
 800765c:	69fb      	ldr	r3, [r7, #28]
 800765e:	4413      	add	r3, r2
 8007660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007664:	691a      	ldr	r2, [r3, #16]
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800766e:	69b9      	ldr	r1, [r7, #24]
 8007670:	0148      	lsls	r0, r1, #5
 8007672:	69f9      	ldr	r1, [r7, #28]
 8007674:	4401      	add	r1, r0
 8007676:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800767a:	4313      	orrs	r3, r2
 800767c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800767e:	69bb      	ldr	r3, [r7, #24]
 8007680:	015a      	lsls	r2, r3, #5
 8007682:	69fb      	ldr	r3, [r7, #28]
 8007684:	4413      	add	r3, r2
 8007686:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800768a:	691b      	ldr	r3, [r3, #16]
 800768c:	69ba      	ldr	r2, [r7, #24]
 800768e:	0151      	lsls	r1, r2, #5
 8007690:	69fa      	ldr	r2, [r7, #28]
 8007692:	440a      	add	r2, r1
 8007694:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007698:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800769c:	6113      	str	r3, [r2, #16]
 800769e:	e033      	b.n	8007708 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	695a      	ldr	r2, [r3, #20]
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	4413      	add	r3, r2
 80076aa:	1e5a      	subs	r2, r3, #1
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80076b4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80076b6:	69bb      	ldr	r3, [r7, #24]
 80076b8:	015a      	lsls	r2, r3, #5
 80076ba:	69fb      	ldr	r3, [r7, #28]
 80076bc:	4413      	add	r3, r2
 80076be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076c2:	691a      	ldr	r2, [r3, #16]
 80076c4:	8afb      	ldrh	r3, [r7, #22]
 80076c6:	04d9      	lsls	r1, r3, #19
 80076c8:	4b3b      	ldr	r3, [pc, #236]	; (80077b8 <USB_EPStartXfer+0x494>)
 80076ca:	400b      	ands	r3, r1
 80076cc:	69b9      	ldr	r1, [r7, #24]
 80076ce:	0148      	lsls	r0, r1, #5
 80076d0:	69f9      	ldr	r1, [r7, #28]
 80076d2:	4401      	add	r1, r0
 80076d4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80076d8:	4313      	orrs	r3, r2
 80076da:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80076dc:	69bb      	ldr	r3, [r7, #24]
 80076de:	015a      	lsls	r2, r3, #5
 80076e0:	69fb      	ldr	r3, [r7, #28]
 80076e2:	4413      	add	r3, r2
 80076e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076e8:	691a      	ldr	r2, [r3, #16]
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	8af9      	ldrh	r1, [r7, #22]
 80076f0:	fb01 f303 	mul.w	r3, r1, r3
 80076f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076f8:	69b9      	ldr	r1, [r7, #24]
 80076fa:	0148      	lsls	r0, r1, #5
 80076fc:	69f9      	ldr	r1, [r7, #28]
 80076fe:	4401      	add	r1, r0
 8007700:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007704:	4313      	orrs	r3, r2
 8007706:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007708:	79fb      	ldrb	r3, [r7, #7]
 800770a:	2b01      	cmp	r3, #1
 800770c:	d10d      	bne.n	800772a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d009      	beq.n	800772a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	68d9      	ldr	r1, [r3, #12]
 800771a:	69bb      	ldr	r3, [r7, #24]
 800771c:	015a      	lsls	r2, r3, #5
 800771e:	69fb      	ldr	r3, [r7, #28]
 8007720:	4413      	add	r3, r2
 8007722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007726:	460a      	mov	r2, r1
 8007728:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	78db      	ldrb	r3, [r3, #3]
 800772e:	2b01      	cmp	r3, #1
 8007730:	d128      	bne.n	8007784 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007732:	69fb      	ldr	r3, [r7, #28]
 8007734:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800773e:	2b00      	cmp	r3, #0
 8007740:	d110      	bne.n	8007764 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007742:	69bb      	ldr	r3, [r7, #24]
 8007744:	015a      	lsls	r2, r3, #5
 8007746:	69fb      	ldr	r3, [r7, #28]
 8007748:	4413      	add	r3, r2
 800774a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	69ba      	ldr	r2, [r7, #24]
 8007752:	0151      	lsls	r1, r2, #5
 8007754:	69fa      	ldr	r2, [r7, #28]
 8007756:	440a      	add	r2, r1
 8007758:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800775c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007760:	6013      	str	r3, [r2, #0]
 8007762:	e00f      	b.n	8007784 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007764:	69bb      	ldr	r3, [r7, #24]
 8007766:	015a      	lsls	r2, r3, #5
 8007768:	69fb      	ldr	r3, [r7, #28]
 800776a:	4413      	add	r3, r2
 800776c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	69ba      	ldr	r2, [r7, #24]
 8007774:	0151      	lsls	r1, r2, #5
 8007776:	69fa      	ldr	r2, [r7, #28]
 8007778:	440a      	add	r2, r1
 800777a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800777e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007782:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007784:	69bb      	ldr	r3, [r7, #24]
 8007786:	015a      	lsls	r2, r3, #5
 8007788:	69fb      	ldr	r3, [r7, #28]
 800778a:	4413      	add	r3, r2
 800778c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	69ba      	ldr	r2, [r7, #24]
 8007794:	0151      	lsls	r1, r2, #5
 8007796:	69fa      	ldr	r2, [r7, #28]
 8007798:	440a      	add	r2, r1
 800779a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800779e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80077a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80077a4:	2300      	movs	r3, #0
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3720      	adds	r7, #32
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
 80077ae:	bf00      	nop
 80077b0:	fff80000 	.word	0xfff80000
 80077b4:	e007ffff 	.word	0xe007ffff
 80077b8:	1ff80000 	.word	0x1ff80000

080077bc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80077bc:	b480      	push	{r7}
 80077be:	b087      	sub	sp, #28
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	60b9      	str	r1, [r7, #8]
 80077c6:	4613      	mov	r3, r2
 80077c8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	785b      	ldrb	r3, [r3, #1]
 80077d8:	2b01      	cmp	r3, #1
 80077da:	f040 80cd 	bne.w	8007978 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	695b      	ldr	r3, [r3, #20]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d132      	bne.n	800784c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	015a      	lsls	r2, r3, #5
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	4413      	add	r3, r2
 80077ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077f2:	691a      	ldr	r2, [r3, #16]
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	0159      	lsls	r1, r3, #5
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	440b      	add	r3, r1
 80077fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007800:	4619      	mov	r1, r3
 8007802:	4b98      	ldr	r3, [pc, #608]	; (8007a64 <USB_EP0StartXfer+0x2a8>)
 8007804:	4013      	ands	r3, r2
 8007806:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	015a      	lsls	r2, r3, #5
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	4413      	add	r3, r2
 8007810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007814:	691b      	ldr	r3, [r3, #16]
 8007816:	693a      	ldr	r2, [r7, #16]
 8007818:	0151      	lsls	r1, r2, #5
 800781a:	697a      	ldr	r2, [r7, #20]
 800781c:	440a      	add	r2, r1
 800781e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007822:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007826:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	015a      	lsls	r2, r3, #5
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	4413      	add	r3, r2
 8007830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007834:	691a      	ldr	r2, [r3, #16]
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	0159      	lsls	r1, r3, #5
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	440b      	add	r3, r1
 800783e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007842:	4619      	mov	r1, r3
 8007844:	4b88      	ldr	r3, [pc, #544]	; (8007a68 <USB_EP0StartXfer+0x2ac>)
 8007846:	4013      	ands	r3, r2
 8007848:	610b      	str	r3, [r1, #16]
 800784a:	e04e      	b.n	80078ea <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	015a      	lsls	r2, r3, #5
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	4413      	add	r3, r2
 8007854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007858:	691a      	ldr	r2, [r3, #16]
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	0159      	lsls	r1, r3, #5
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	440b      	add	r3, r1
 8007862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007866:	4619      	mov	r1, r3
 8007868:	4b7f      	ldr	r3, [pc, #508]	; (8007a68 <USB_EP0StartXfer+0x2ac>)
 800786a:	4013      	ands	r3, r2
 800786c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	015a      	lsls	r2, r3, #5
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	4413      	add	r3, r2
 8007876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800787a:	691a      	ldr	r2, [r3, #16]
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	0159      	lsls	r1, r3, #5
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	440b      	add	r3, r1
 8007884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007888:	4619      	mov	r1, r3
 800788a:	4b76      	ldr	r3, [pc, #472]	; (8007a64 <USB_EP0StartXfer+0x2a8>)
 800788c:	4013      	ands	r3, r2
 800788e:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	695a      	ldr	r2, [r3, #20]
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	429a      	cmp	r2, r3
 800789a:	d903      	bls.n	80078a4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	689a      	ldr	r2, [r3, #8]
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	015a      	lsls	r2, r3, #5
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	4413      	add	r3, r2
 80078ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078b0:	691b      	ldr	r3, [r3, #16]
 80078b2:	693a      	ldr	r2, [r7, #16]
 80078b4:	0151      	lsls	r1, r2, #5
 80078b6:	697a      	ldr	r2, [r7, #20]
 80078b8:	440a      	add	r2, r1
 80078ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80078c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	015a      	lsls	r2, r3, #5
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	4413      	add	r3, r2
 80078cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078d0:	691a      	ldr	r2, [r3, #16]
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	695b      	ldr	r3, [r3, #20]
 80078d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80078da:	6939      	ldr	r1, [r7, #16]
 80078dc:	0148      	lsls	r0, r1, #5
 80078de:	6979      	ldr	r1, [r7, #20]
 80078e0:	4401      	add	r1, r0
 80078e2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80078e6:	4313      	orrs	r3, r2
 80078e8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80078ea:	79fb      	ldrb	r3, [r7, #7]
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d11e      	bne.n	800792e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	691b      	ldr	r3, [r3, #16]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d009      	beq.n	800790c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	015a      	lsls	r2, r3, #5
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	4413      	add	r3, r2
 8007900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007904:	461a      	mov	r2, r3
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	691b      	ldr	r3, [r3, #16]
 800790a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	015a      	lsls	r2, r3, #5
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	4413      	add	r3, r2
 8007914:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	693a      	ldr	r2, [r7, #16]
 800791c:	0151      	lsls	r1, r2, #5
 800791e:	697a      	ldr	r2, [r7, #20]
 8007920:	440a      	add	r2, r1
 8007922:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007926:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800792a:	6013      	str	r3, [r2, #0]
 800792c:	e092      	b.n	8007a54 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	015a      	lsls	r2, r3, #5
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	4413      	add	r3, r2
 8007936:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	693a      	ldr	r2, [r7, #16]
 800793e:	0151      	lsls	r1, r2, #5
 8007940:	697a      	ldr	r2, [r7, #20]
 8007942:	440a      	add	r2, r1
 8007944:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007948:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800794c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	695b      	ldr	r3, [r3, #20]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d07e      	beq.n	8007a54 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800795c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	f003 030f 	and.w	r3, r3, #15
 8007966:	2101      	movs	r1, #1
 8007968:	fa01 f303 	lsl.w	r3, r1, r3
 800796c:	6979      	ldr	r1, [r7, #20]
 800796e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007972:	4313      	orrs	r3, r2
 8007974:	634b      	str	r3, [r1, #52]	; 0x34
 8007976:	e06d      	b.n	8007a54 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	015a      	lsls	r2, r3, #5
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	4413      	add	r3, r2
 8007980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007984:	691a      	ldr	r2, [r3, #16]
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	0159      	lsls	r1, r3, #5
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	440b      	add	r3, r1
 800798e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007992:	4619      	mov	r1, r3
 8007994:	4b34      	ldr	r3, [pc, #208]	; (8007a68 <USB_EP0StartXfer+0x2ac>)
 8007996:	4013      	ands	r3, r2
 8007998:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	015a      	lsls	r2, r3, #5
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	4413      	add	r3, r2
 80079a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079a6:	691a      	ldr	r2, [r3, #16]
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	0159      	lsls	r1, r3, #5
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	440b      	add	r3, r1
 80079b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079b4:	4619      	mov	r1, r3
 80079b6:	4b2b      	ldr	r3, [pc, #172]	; (8007a64 <USB_EP0StartXfer+0x2a8>)
 80079b8:	4013      	ands	r3, r2
 80079ba:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	695b      	ldr	r3, [r3, #20]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d003      	beq.n	80079cc <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	689a      	ldr	r2, [r3, #8]
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	015a      	lsls	r2, r3, #5
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	4413      	add	r3, r2
 80079d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079d8:	691b      	ldr	r3, [r3, #16]
 80079da:	693a      	ldr	r2, [r7, #16]
 80079dc:	0151      	lsls	r1, r2, #5
 80079de:	697a      	ldr	r2, [r7, #20]
 80079e0:	440a      	add	r2, r1
 80079e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80079ea:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	015a      	lsls	r2, r3, #5
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	4413      	add	r3, r2
 80079f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079f8:	691a      	ldr	r2, [r3, #16]
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	689b      	ldr	r3, [r3, #8]
 80079fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a02:	6939      	ldr	r1, [r7, #16]
 8007a04:	0148      	lsls	r0, r1, #5
 8007a06:	6979      	ldr	r1, [r7, #20]
 8007a08:	4401      	add	r1, r0
 8007a0a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007a12:	79fb      	ldrb	r3, [r7, #7]
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d10d      	bne.n	8007a34 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	68db      	ldr	r3, [r3, #12]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d009      	beq.n	8007a34 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	68d9      	ldr	r1, [r3, #12]
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	015a      	lsls	r2, r3, #5
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	4413      	add	r3, r2
 8007a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a30:	460a      	mov	r2, r1
 8007a32:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	015a      	lsls	r2, r3, #5
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	4413      	add	r3, r2
 8007a3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	693a      	ldr	r2, [r7, #16]
 8007a44:	0151      	lsls	r1, r2, #5
 8007a46:	697a      	ldr	r2, [r7, #20]
 8007a48:	440a      	add	r2, r1
 8007a4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a4e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007a52:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a54:	2300      	movs	r3, #0
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	371c      	adds	r7, #28
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr
 8007a62:	bf00      	nop
 8007a64:	e007ffff 	.word	0xe007ffff
 8007a68:	fff80000 	.word	0xfff80000

08007a6c <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b089      	sub	sp, #36	; 0x24
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	60f8      	str	r0, [r7, #12]
 8007a74:	60b9      	str	r1, [r7, #8]
 8007a76:	4611      	mov	r1, r2
 8007a78:	461a      	mov	r2, r3
 8007a7a:	460b      	mov	r3, r1
 8007a7c:	71fb      	strb	r3, [r7, #7]
 8007a7e:	4613      	mov	r3, r2
 8007a80:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8007a8a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d11a      	bne.n	8007ac8 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007a92:	88bb      	ldrh	r3, [r7, #4]
 8007a94:	3303      	adds	r3, #3
 8007a96:	089b      	lsrs	r3, r3, #2
 8007a98:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	61bb      	str	r3, [r7, #24]
 8007a9e:	e00f      	b.n	8007ac0 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007aa0:	79fb      	ldrb	r3, [r7, #7]
 8007aa2:	031a      	lsls	r2, r3, #12
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	4413      	add	r3, r2
 8007aa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007aac:	461a      	mov	r2, r3
 8007aae:	69fb      	ldr	r3, [r7, #28]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007ab4:	69fb      	ldr	r3, [r7, #28]
 8007ab6:	3304      	adds	r3, #4
 8007ab8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007aba:	69bb      	ldr	r3, [r7, #24]
 8007abc:	3301      	adds	r3, #1
 8007abe:	61bb      	str	r3, [r7, #24]
 8007ac0:	69ba      	ldr	r2, [r7, #24]
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d3eb      	bcc.n	8007aa0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007ac8:	2300      	movs	r3, #0
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3724      	adds	r7, #36	; 0x24
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad4:	4770      	bx	lr

08007ad6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007ad6:	b480      	push	{r7}
 8007ad8:	b089      	sub	sp, #36	; 0x24
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	60f8      	str	r0, [r7, #12]
 8007ade:	60b9      	str	r1, [r7, #8]
 8007ae0:	4613      	mov	r3, r2
 8007ae2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007aec:	88fb      	ldrh	r3, [r7, #6]
 8007aee:	3303      	adds	r3, #3
 8007af0:	089b      	lsrs	r3, r3, #2
 8007af2:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007af4:	2300      	movs	r3, #0
 8007af6:	61bb      	str	r3, [r7, #24]
 8007af8:	e00b      	b.n	8007b12 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b00:	681a      	ldr	r2, [r3, #0]
 8007b02:	69fb      	ldr	r3, [r7, #28]
 8007b04:	601a      	str	r2, [r3, #0]
    pDest++;
 8007b06:	69fb      	ldr	r3, [r7, #28]
 8007b08:	3304      	adds	r3, #4
 8007b0a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007b0c:	69bb      	ldr	r3, [r7, #24]
 8007b0e:	3301      	adds	r3, #1
 8007b10:	61bb      	str	r3, [r7, #24]
 8007b12:	69ba      	ldr	r2, [r7, #24]
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d3ef      	bcc.n	8007afa <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007b1a:	69fb      	ldr	r3, [r7, #28]
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3724      	adds	r7, #36	; 0x24
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr

08007b28 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b085      	sub	sp, #20
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	781b      	ldrb	r3, [r3, #0]
 8007b3a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	785b      	ldrb	r3, [r3, #1]
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d12c      	bne.n	8007b9e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	015a      	lsls	r2, r3, #5
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	4413      	add	r3, r2
 8007b4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	db12      	blt.n	8007b7c <USB_EPSetStall+0x54>
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d00f      	beq.n	8007b7c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	015a      	lsls	r2, r3, #5
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	4413      	add	r3, r2
 8007b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	68ba      	ldr	r2, [r7, #8]
 8007b6c:	0151      	lsls	r1, r2, #5
 8007b6e:	68fa      	ldr	r2, [r7, #12]
 8007b70:	440a      	add	r2, r1
 8007b72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b76:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007b7a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	015a      	lsls	r2, r3, #5
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	4413      	add	r3, r2
 8007b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	68ba      	ldr	r2, [r7, #8]
 8007b8c:	0151      	lsls	r1, r2, #5
 8007b8e:	68fa      	ldr	r2, [r7, #12]
 8007b90:	440a      	add	r2, r1
 8007b92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b96:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007b9a:	6013      	str	r3, [r2, #0]
 8007b9c:	e02b      	b.n	8007bf6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	015a      	lsls	r2, r3, #5
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	4413      	add	r3, r2
 8007ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	db12      	blt.n	8007bd6 <USB_EPSetStall+0xae>
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d00f      	beq.n	8007bd6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	015a      	lsls	r2, r3, #5
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	4413      	add	r3, r2
 8007bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	68ba      	ldr	r2, [r7, #8]
 8007bc6:	0151      	lsls	r1, r2, #5
 8007bc8:	68fa      	ldr	r2, [r7, #12]
 8007bca:	440a      	add	r2, r1
 8007bcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bd0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007bd4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	015a      	lsls	r2, r3, #5
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	4413      	add	r3, r2
 8007bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	68ba      	ldr	r2, [r7, #8]
 8007be6:	0151      	lsls	r1, r2, #5
 8007be8:	68fa      	ldr	r2, [r7, #12]
 8007bea:	440a      	add	r2, r1
 8007bec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bf0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007bf4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007bf6:	2300      	movs	r3, #0
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3714      	adds	r7, #20
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr

08007c04 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b085      	sub	sp, #20
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	781b      	ldrb	r3, [r3, #0]
 8007c16:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	785b      	ldrb	r3, [r3, #1]
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d128      	bne.n	8007c72 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	015a      	lsls	r2, r3, #5
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	4413      	add	r3, r2
 8007c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	68ba      	ldr	r2, [r7, #8]
 8007c30:	0151      	lsls	r1, r2, #5
 8007c32:	68fa      	ldr	r2, [r7, #12]
 8007c34:	440a      	add	r2, r1
 8007c36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c3a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c3e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	78db      	ldrb	r3, [r3, #3]
 8007c44:	2b03      	cmp	r3, #3
 8007c46:	d003      	beq.n	8007c50 <USB_EPClearStall+0x4c>
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	78db      	ldrb	r3, [r3, #3]
 8007c4c:	2b02      	cmp	r3, #2
 8007c4e:	d138      	bne.n	8007cc2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	015a      	lsls	r2, r3, #5
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	4413      	add	r3, r2
 8007c58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	68ba      	ldr	r2, [r7, #8]
 8007c60:	0151      	lsls	r1, r2, #5
 8007c62:	68fa      	ldr	r2, [r7, #12]
 8007c64:	440a      	add	r2, r1
 8007c66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c6e:	6013      	str	r3, [r2, #0]
 8007c70:	e027      	b.n	8007cc2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	015a      	lsls	r2, r3, #5
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	4413      	add	r3, r2
 8007c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	68ba      	ldr	r2, [r7, #8]
 8007c82:	0151      	lsls	r1, r2, #5
 8007c84:	68fa      	ldr	r2, [r7, #12]
 8007c86:	440a      	add	r2, r1
 8007c88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c8c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c90:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	78db      	ldrb	r3, [r3, #3]
 8007c96:	2b03      	cmp	r3, #3
 8007c98:	d003      	beq.n	8007ca2 <USB_EPClearStall+0x9e>
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	78db      	ldrb	r3, [r3, #3]
 8007c9e:	2b02      	cmp	r3, #2
 8007ca0:	d10f      	bne.n	8007cc2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	015a      	lsls	r2, r3, #5
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	4413      	add	r3, r2
 8007caa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	68ba      	ldr	r2, [r7, #8]
 8007cb2:	0151      	lsls	r1, r2, #5
 8007cb4:	68fa      	ldr	r2, [r7, #12]
 8007cb6:	440a      	add	r2, r1
 8007cb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cc0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007cc2:	2300      	movs	r3, #0
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3714      	adds	r7, #20
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr

08007cd0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b085      	sub	sp, #20
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	460b      	mov	r3, r1
 8007cda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	68fa      	ldr	r2, [r7, #12]
 8007cea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007cee:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007cf2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cfa:	681a      	ldr	r2, [r3, #0]
 8007cfc:	78fb      	ldrb	r3, [r7, #3]
 8007cfe:	011b      	lsls	r3, r3, #4
 8007d00:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007d04:	68f9      	ldr	r1, [r7, #12]
 8007d06:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007d0e:	2300      	movs	r3, #0
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3714      	adds	r7, #20
 8007d14:	46bd      	mov	sp, r7
 8007d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1a:	4770      	bx	lr

08007d1c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b084      	sub	sp, #16
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	68fa      	ldr	r2, [r7, #12]
 8007d32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d36:	f023 0302 	bic.w	r3, r3, #2
 8007d3a:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8007d3c:	2003      	movs	r0, #3
 8007d3e:	f7f9 fb0f 	bl	8001360 <HAL_Delay>

  return HAL_OK;
 8007d42:	2300      	movs	r3, #0
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3710      	adds	r7, #16
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}

08007d4c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b084      	sub	sp, #16
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	68fa      	ldr	r2, [r7, #12]
 8007d62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d66:	f043 0302 	orr.w	r3, r3, #2
 8007d6a:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8007d6c:	2003      	movs	r0, #3
 8007d6e:	f7f9 faf7 	bl	8001360 <HAL_Delay>

  return HAL_OK;
 8007d72:	2300      	movs	r3, #0
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3710      	adds	r7, #16
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b085      	sub	sp, #20
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	695b      	ldr	r3, [r3, #20]
 8007d88:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	699b      	ldr	r3, [r3, #24]
 8007d8e:	68fa      	ldr	r2, [r7, #12]
 8007d90:	4013      	ands	r3, r2
 8007d92:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007d94:	68fb      	ldr	r3, [r7, #12]
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3714      	adds	r7, #20
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr

08007da2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007da2:	b480      	push	{r7}
 8007da4:	b085      	sub	sp, #20
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007db4:	699b      	ldr	r3, [r3, #24]
 8007db6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dbe:	69db      	ldr	r3, [r3, #28]
 8007dc0:	68ba      	ldr	r2, [r7, #8]
 8007dc2:	4013      	ands	r3, r2
 8007dc4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	0c1b      	lsrs	r3, r3, #16
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3714      	adds	r7, #20
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd4:	4770      	bx	lr

08007dd6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007dd6:	b480      	push	{r7}
 8007dd8:	b085      	sub	sp, #20
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007de8:	699b      	ldr	r3, [r3, #24]
 8007dea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007df2:	69db      	ldr	r3, [r3, #28]
 8007df4:	68ba      	ldr	r2, [r7, #8]
 8007df6:	4013      	ands	r3, r2
 8007df8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	b29b      	uxth	r3, r3
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3714      	adds	r7, #20
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr

08007e0a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007e0a:	b480      	push	{r7}
 8007e0c:	b085      	sub	sp, #20
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
 8007e12:	460b      	mov	r3, r1
 8007e14:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007e1a:	78fb      	ldrb	r3, [r7, #3]
 8007e1c:	015a      	lsls	r2, r3, #5
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	4413      	add	r3, r2
 8007e22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e26:	689b      	ldr	r3, [r3, #8]
 8007e28:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e30:	695b      	ldr	r3, [r3, #20]
 8007e32:	68ba      	ldr	r2, [r7, #8]
 8007e34:	4013      	ands	r3, r2
 8007e36:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007e38:	68bb      	ldr	r3, [r7, #8]
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3714      	adds	r7, #20
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr

08007e46 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007e46:	b480      	push	{r7}
 8007e48:	b087      	sub	sp, #28
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
 8007e4e:	460b      	mov	r3, r1
 8007e50:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e5c:	691b      	ldr	r3, [r3, #16]
 8007e5e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e68:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007e6a:	78fb      	ldrb	r3, [r7, #3]
 8007e6c:	f003 030f 	and.w	r3, r3, #15
 8007e70:	68fa      	ldr	r2, [r7, #12]
 8007e72:	fa22 f303 	lsr.w	r3, r2, r3
 8007e76:	01db      	lsls	r3, r3, #7
 8007e78:	b2db      	uxtb	r3, r3
 8007e7a:	693a      	ldr	r2, [r7, #16]
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007e80:	78fb      	ldrb	r3, [r7, #3]
 8007e82:	015a      	lsls	r2, r3, #5
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	4413      	add	r3, r2
 8007e88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e8c:	689b      	ldr	r3, [r3, #8]
 8007e8e:	693a      	ldr	r2, [r7, #16]
 8007e90:	4013      	ands	r3, r2
 8007e92:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007e94:	68bb      	ldr	r3, [r7, #8]
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	371c      	adds	r7, #28
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea0:	4770      	bx	lr

08007ea2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007ea2:	b480      	push	{r7}
 8007ea4:	b083      	sub	sp, #12
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	695b      	ldr	r3, [r3, #20]
 8007eae:	f003 0301 	and.w	r3, r3, #1
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	370c      	adds	r7, #12
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr
	...

08007ec0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b085      	sub	sp, #20
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eda:	4619      	mov	r1, r3
 8007edc:	4b09      	ldr	r3, [pc, #36]	; (8007f04 <USB_ActivateSetup+0x44>)
 8007ede:	4013      	ands	r3, r2
 8007ee0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	68fa      	ldr	r2, [r7, #12]
 8007eec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ef4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007ef6:	2300      	movs	r3, #0
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3714      	adds	r7, #20
 8007efc:	46bd      	mov	sp, r7
 8007efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f02:	4770      	bx	lr
 8007f04:	fffff800 	.word	0xfffff800

08007f08 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b087      	sub	sp, #28
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	60f8      	str	r0, [r7, #12]
 8007f10:	460b      	mov	r3, r1
 8007f12:	607a      	str	r2, [r7, #4]
 8007f14:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	333c      	adds	r3, #60	; 0x3c
 8007f1e:	3304      	adds	r3, #4
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	4a26      	ldr	r2, [pc, #152]	; (8007fc0 <USB_EP0_OutStart+0xb8>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d90a      	bls.n	8007f42 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f3c:	d101      	bne.n	8007f42 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	e037      	b.n	8007fb2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f48:	461a      	mov	r2, r3
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f54:	691b      	ldr	r3, [r3, #16]
 8007f56:	697a      	ldr	r2, [r7, #20]
 8007f58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f5c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007f60:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f68:	691b      	ldr	r3, [r3, #16]
 8007f6a:	697a      	ldr	r2, [r7, #20]
 8007f6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f70:	f043 0318 	orr.w	r3, r3, #24
 8007f74:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f7c:	691b      	ldr	r3, [r3, #16]
 8007f7e:	697a      	ldr	r2, [r7, #20]
 8007f80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f84:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007f88:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007f8a:	7afb      	ldrb	r3, [r7, #11]
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d10f      	bne.n	8007fb0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f96:	461a      	mov	r2, r3
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	697a      	ldr	r2, [r7, #20]
 8007fa6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007faa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007fae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007fb0:	2300      	movs	r3, #0
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	371c      	adds	r7, #28
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr
 8007fbe:	bf00      	nop
 8007fc0:	4f54300a 	.word	0x4f54300a

08007fc4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b085      	sub	sp, #20
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	3301      	adds	r3, #1
 8007fd4:	60fb      	str	r3, [r7, #12]
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	4a13      	ldr	r2, [pc, #76]	; (8008028 <USB_CoreReset+0x64>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d901      	bls.n	8007fe2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007fde:	2303      	movs	r3, #3
 8007fe0:	e01b      	b.n	800801a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	691b      	ldr	r3, [r3, #16]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	daf2      	bge.n	8007fd0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007fea:	2300      	movs	r3, #0
 8007fec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	691b      	ldr	r3, [r3, #16]
 8007ff2:	f043 0201 	orr.w	r2, r3, #1
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	3301      	adds	r3, #1
 8007ffe:	60fb      	str	r3, [r7, #12]
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	4a09      	ldr	r2, [pc, #36]	; (8008028 <USB_CoreReset+0x64>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d901      	bls.n	800800c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008008:	2303      	movs	r3, #3
 800800a:	e006      	b.n	800801a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	691b      	ldr	r3, [r3, #16]
 8008010:	f003 0301 	and.w	r3, r3, #1
 8008014:	2b01      	cmp	r3, #1
 8008016:	d0f0      	beq.n	8007ffa <USB_CoreReset+0x36>

  return HAL_OK;
 8008018:	2300      	movs	r3, #0
}
 800801a:	4618      	mov	r0, r3
 800801c:	3714      	adds	r7, #20
 800801e:	46bd      	mov	sp, r7
 8008020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008024:	4770      	bx	lr
 8008026:	bf00      	nop
 8008028:	00030d40 	.word	0x00030d40

0800802c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800802c:	b580      	push	{r7, lr}
 800802e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8008030:	4904      	ldr	r1, [pc, #16]	; (8008044 <MX_FATFS_Init+0x18>)
 8008032:	4805      	ldr	r0, [pc, #20]	; (8008048 <MX_FATFS_Init+0x1c>)
 8008034:	f004 fd8e 	bl	800cb54 <FATFS_LinkDriver>
 8008038:	4603      	mov	r3, r0
 800803a:	461a      	mov	r2, r3
 800803c:	4b03      	ldr	r3, [pc, #12]	; (800804c <MX_FATFS_Init+0x20>)
 800803e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8008040:	bf00      	nop
 8008042:	bd80      	pop	{r7, pc}
 8008044:	2000834c 	.word	0x2000834c
 8008048:	080123e4 	.word	0x080123e4
 800804c:	20008348 	.word	0x20008348

08008050 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008050:	b480      	push	{r7}
 8008052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008054:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8008056:	4618      	mov	r0, r3
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr

08008060 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b082      	sub	sp, #8
 8008064:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8008066:	2300      	movs	r3, #0
 8008068:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800806a:	f000 f896 	bl	800819a <BSP_SD_IsDetected>
 800806e:	4603      	mov	r3, r0
 8008070:	2b01      	cmp	r3, #1
 8008072:	d001      	beq.n	8008078 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8008074:	2302      	movs	r3, #2
 8008076:	e012      	b.n	800809e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8008078:	480b      	ldr	r0, [pc, #44]	; (80080a8 <BSP_SD_Init+0x48>)
 800807a:	f7fc f9f1 	bl	8004460 <HAL_SD_Init>
 800807e:	4603      	mov	r3, r0
 8008080:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8008082:	79fb      	ldrb	r3, [r7, #7]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d109      	bne.n	800809c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8008088:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800808c:	4806      	ldr	r0, [pc, #24]	; (80080a8 <BSP_SD_Init+0x48>)
 800808e:	f7fc ffa9 	bl	8004fe4 <HAL_SD_ConfigWideBusOperation>
 8008092:	4603      	mov	r3, r0
 8008094:	2b00      	cmp	r3, #0
 8008096:	d001      	beq.n	800809c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8008098:	2301      	movs	r3, #1
 800809a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800809c:	79fb      	ldrb	r3, [r7, #7]
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3708      	adds	r7, #8
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
 80080a6:	bf00      	nop
 80080a8:	20004b6c 	.word	0x20004b6c

080080ac <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b086      	sub	sp, #24
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	60f8      	str	r0, [r7, #12]
 80080b4:	60b9      	str	r1, [r7, #8]
 80080b6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80080b8:	2300      	movs	r3, #0
 80080ba:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	68ba      	ldr	r2, [r7, #8]
 80080c0:	68f9      	ldr	r1, [r7, #12]
 80080c2:	4806      	ldr	r0, [pc, #24]	; (80080dc <BSP_SD_ReadBlocks_DMA+0x30>)
 80080c4:	f7fc fa64 	bl	8004590 <HAL_SD_ReadBlocks_DMA>
 80080c8:	4603      	mov	r3, r0
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d001      	beq.n	80080d2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80080ce:	2301      	movs	r3, #1
 80080d0:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 80080d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3718      	adds	r7, #24
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}
 80080dc:	20004b6c 	.word	0x20004b6c

080080e0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b086      	sub	sp, #24
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	60f8      	str	r0, [r7, #12]
 80080e8:	60b9      	str	r1, [r7, #8]
 80080ea:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80080ec:	2300      	movs	r3, #0
 80080ee:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	68ba      	ldr	r2, [r7, #8]
 80080f4:	68f9      	ldr	r1, [r7, #12]
 80080f6:	4806      	ldr	r0, [pc, #24]	; (8008110 <BSP_SD_WriteBlocks_DMA+0x30>)
 80080f8:	f7fc fb36 	bl	8004768 <HAL_SD_WriteBlocks_DMA>
 80080fc:	4603      	mov	r3, r0
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d001      	beq.n	8008106 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8008102:	2301      	movs	r3, #1
 8008104:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 8008106:	7dfb      	ldrb	r3, [r7, #23]
}
 8008108:	4618      	mov	r0, r3
 800810a:	3718      	adds	r7, #24
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}
 8008110:	20004b6c 	.word	0x20004b6c

08008114 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8008118:	4805      	ldr	r0, [pc, #20]	; (8008130 <BSP_SD_GetCardState+0x1c>)
 800811a:	f7fc ffdf 	bl	80050dc <HAL_SD_GetCardState>
 800811e:	4603      	mov	r3, r0
 8008120:	2b04      	cmp	r3, #4
 8008122:	bf14      	ite	ne
 8008124:	2301      	movne	r3, #1
 8008126:	2300      	moveq	r3, #0
 8008128:	b2db      	uxtb	r3, r3
}
 800812a:	4618      	mov	r0, r3
 800812c:	bd80      	pop	{r7, pc}
 800812e:	bf00      	nop
 8008130:	20004b6c 	.word	0x20004b6c

08008134 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b082      	sub	sp, #8
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800813c:	6879      	ldr	r1, [r7, #4]
 800813e:	4803      	ldr	r0, [pc, #12]	; (800814c <BSP_SD_GetCardInfo+0x18>)
 8008140:	f7fc ff24 	bl	8004f8c <HAL_SD_GetCardInfo>
}
 8008144:	bf00      	nop
 8008146:	3708      	adds	r7, #8
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}
 800814c:	20004b6c 	.word	0x20004b6c

08008150 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b082      	sub	sp, #8
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8008158:	f000 f818 	bl	800818c <BSP_SD_AbortCallback>
}
 800815c:	bf00      	nop
 800815e:	3708      	adds	r7, #8
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}

08008164 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b082      	sub	sp, #8
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800816c:	f000 f998 	bl	80084a0 <BSP_SD_WriteCpltCallback>
}
 8008170:	bf00      	nop
 8008172:	3708      	adds	r7, #8
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b082      	sub	sp, #8
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8008180:	f000 f9a0 	bl	80084c4 <BSP_SD_ReadCpltCallback>
}
 8008184:	bf00      	nop
 8008186:	3708      	adds	r7, #8
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}

0800818c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800818c:	b480      	push	{r7}
 800818e:	af00      	add	r7, sp, #0

}
 8008190:	bf00      	nop
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr

0800819a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800819a:	b480      	push	{r7}
 800819c:	b083      	sub	sp, #12
 800819e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80081a0:	2301      	movs	r3, #1
 80081a2:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 80081a4:	79fb      	ldrb	r3, [r7, #7]
 80081a6:	b2db      	uxtb	r3, r3
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	370c      	adds	r7, #12
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr

080081b4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b084      	sub	sp, #16
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 80081bc:	f004 fdb4 	bl	800cd28 <osKernelGetTickCount>
 80081c0:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 80081c2:	e006      	b.n	80081d2 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80081c4:	f7ff ffa6 	bl	8008114 <BSP_SD_GetCardState>
 80081c8:	4603      	mov	r3, r0
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d101      	bne.n	80081d2 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80081ce:	2300      	movs	r3, #0
 80081d0:	e009      	b.n	80081e6 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 80081d2:	f004 fda9 	bl	800cd28 <osKernelGetTickCount>
 80081d6:	4602      	mov	r2, r0
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	1ad3      	subs	r3, r2, r3
 80081dc:	687a      	ldr	r2, [r7, #4]
 80081de:	429a      	cmp	r2, r3
 80081e0:	d8f0      	bhi.n	80081c4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80081e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3710      	adds	r7, #16
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}
	...

080081f0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b082      	sub	sp, #8
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	4603      	mov	r3, r0
 80081f8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80081fa:	4b0b      	ldr	r3, [pc, #44]	; (8008228 <SD_CheckStatus+0x38>)
 80081fc:	2201      	movs	r2, #1
 80081fe:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008200:	f7ff ff88 	bl	8008114 <BSP_SD_GetCardState>
 8008204:	4603      	mov	r3, r0
 8008206:	2b00      	cmp	r3, #0
 8008208:	d107      	bne.n	800821a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800820a:	4b07      	ldr	r3, [pc, #28]	; (8008228 <SD_CheckStatus+0x38>)
 800820c:	781b      	ldrb	r3, [r3, #0]
 800820e:	b2db      	uxtb	r3, r3
 8008210:	f023 0301 	bic.w	r3, r3, #1
 8008214:	b2da      	uxtb	r2, r3
 8008216:	4b04      	ldr	r3, [pc, #16]	; (8008228 <SD_CheckStatus+0x38>)
 8008218:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800821a:	4b03      	ldr	r3, [pc, #12]	; (8008228 <SD_CheckStatus+0x38>)
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	b2db      	uxtb	r3, r3
}
 8008220:	4618      	mov	r0, r3
 8008222:	3708      	adds	r7, #8
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}
 8008228:	20000009 	.word	0x20000009

0800822c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b082      	sub	sp, #8
 8008230:	af00      	add	r7, sp, #0
 8008232:	4603      	mov	r3, r0
 8008234:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 8008236:	4b1c      	ldr	r3, [pc, #112]	; (80082a8 <SD_initialize+0x7c>)
 8008238:	2201      	movs	r2, #1
 800823a:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800823c:	f004 fd1c 	bl	800cc78 <osKernelGetState>
 8008240:	4603      	mov	r3, r0
 8008242:	2b02      	cmp	r3, #2
 8008244:	d129      	bne.n	800829a <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8008246:	f7ff ff0b 	bl	8008060 <BSP_SD_Init>
 800824a:	4603      	mov	r3, r0
 800824c:	2b00      	cmp	r3, #0
 800824e:	d107      	bne.n	8008260 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8008250:	79fb      	ldrb	r3, [r7, #7]
 8008252:	4618      	mov	r0, r3
 8008254:	f7ff ffcc 	bl	80081f0 <SD_CheckStatus>
 8008258:	4603      	mov	r3, r0
 800825a:	461a      	mov	r2, r3
 800825c:	4b12      	ldr	r3, [pc, #72]	; (80082a8 <SD_initialize+0x7c>)
 800825e:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8008260:	4b11      	ldr	r3, [pc, #68]	; (80082a8 <SD_initialize+0x7c>)
 8008262:	781b      	ldrb	r3, [r3, #0]
 8008264:	b2db      	uxtb	r3, r3
 8008266:	2b01      	cmp	r3, #1
 8008268:	d017      	beq.n	800829a <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800826a:	4b10      	ldr	r3, [pc, #64]	; (80082ac <SD_initialize+0x80>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d107      	bne.n	8008282 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 8008272:	2200      	movs	r2, #0
 8008274:	2102      	movs	r1, #2
 8008276:	200a      	movs	r0, #10
 8008278:	f005 f92c 	bl	800d4d4 <osMessageQueueNew>
 800827c:	4602      	mov	r2, r0
 800827e:	4b0b      	ldr	r3, [pc, #44]	; (80082ac <SD_initialize+0x80>)
 8008280:	601a      	str	r2, [r3, #0]
#endif
      }

      if (SDQueueID == NULL)
 8008282:	4b0a      	ldr	r3, [pc, #40]	; (80082ac <SD_initialize+0x80>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d107      	bne.n	800829a <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800828a:	4b07      	ldr	r3, [pc, #28]	; (80082a8 <SD_initialize+0x7c>)
 800828c:	781b      	ldrb	r3, [r3, #0]
 800828e:	b2db      	uxtb	r3, r3
 8008290:	f043 0301 	orr.w	r3, r3, #1
 8008294:	b2da      	uxtb	r2, r3
 8008296:	4b04      	ldr	r3, [pc, #16]	; (80082a8 <SD_initialize+0x7c>)
 8008298:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800829a:	4b03      	ldr	r3, [pc, #12]	; (80082a8 <SD_initialize+0x7c>)
 800829c:	781b      	ldrb	r3, [r3, #0]
 800829e:	b2db      	uxtb	r3, r3
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3708      	adds	r7, #8
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}
 80082a8:	20000009 	.word	0x20000009
 80082ac:	20000218 	.word	0x20000218

080082b0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b082      	sub	sp, #8
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	4603      	mov	r3, r0
 80082b8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80082ba:	79fb      	ldrb	r3, [r7, #7]
 80082bc:	4618      	mov	r0, r3
 80082be:	f7ff ff97 	bl	80081f0 <SD_CheckStatus>
 80082c2:	4603      	mov	r3, r0
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3708      	adds	r7, #8
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}

080082cc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b088      	sub	sp, #32
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	60b9      	str	r1, [r7, #8]
 80082d4:	607a      	str	r2, [r7, #4]
 80082d6:	603b      	str	r3, [r7, #0]
 80082d8:	4603      	mov	r3, r0
 80082da:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80082dc:	2301      	movs	r3, #1
 80082de:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80082e0:	f247 5030 	movw	r0, #30000	; 0x7530
 80082e4:	f7ff ff66 	bl	80081b4 <SD_CheckStatusWithTimeout>
 80082e8:	4603      	mov	r3, r0
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	da01      	bge.n	80082f2 <SD_read+0x26>
  {
    return res;
 80082ee:	7ffb      	ldrb	r3, [r7, #31]
 80082f0:	e02f      	b.n	8008352 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 80082f2:	683a      	ldr	r2, [r7, #0]
 80082f4:	6879      	ldr	r1, [r7, #4]
 80082f6:	68b8      	ldr	r0, [r7, #8]
 80082f8:	f7ff fed8 	bl	80080ac <BSP_SD_ReadBlocks_DMA>
 80082fc:	4603      	mov	r3, r0
 80082fe:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 8008300:	7fbb      	ldrb	r3, [r7, #30]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d124      	bne.n	8008350 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8008306:	4b15      	ldr	r3, [pc, #84]	; (800835c <SD_read+0x90>)
 8008308:	6818      	ldr	r0, [r3, #0]
 800830a:	f107 0112 	add.w	r1, r7, #18
 800830e:	f247 5330 	movw	r3, #30000	; 0x7530
 8008312:	2200      	movs	r2, #0
 8008314:	f005 f9d8 	bl	800d6c8 <osMessageQueueGet>
 8008318:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800831a:	69bb      	ldr	r3, [r7, #24]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d117      	bne.n	8008350 <SD_read+0x84>
 8008320:	8a7b      	ldrh	r3, [r7, #18]
 8008322:	2b01      	cmp	r3, #1
 8008324:	d114      	bne.n	8008350 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 8008326:	f004 fcff 	bl	800cd28 <osKernelGetTickCount>
 800832a:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800832c:	e007      	b.n	800833e <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800832e:	f7ff fef1 	bl	8008114 <BSP_SD_GetCardState>
 8008332:	4603      	mov	r3, r0
 8008334:	2b00      	cmp	r3, #0
 8008336:	d102      	bne.n	800833e <SD_read+0x72>
              {
                res = RES_OK;
 8008338:	2300      	movs	r3, #0
 800833a:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800833c:	e008      	b.n	8008350 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800833e:	f004 fcf3 	bl	800cd28 <osKernelGetTickCount>
 8008342:	4602      	mov	r2, r0
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	1ad3      	subs	r3, r2, r3
 8008348:	f247 522f 	movw	r2, #29999	; 0x752f
 800834c:	4293      	cmp	r3, r2
 800834e:	d9ee      	bls.n	800832e <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8008350:	7ffb      	ldrb	r3, [r7, #31]
}
 8008352:	4618      	mov	r0, r3
 8008354:	3720      	adds	r7, #32
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
 800835a:	bf00      	nop
 800835c:	20000218 	.word	0x20000218

08008360 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b088      	sub	sp, #32
 8008364:	af00      	add	r7, sp, #0
 8008366:	60b9      	str	r1, [r7, #8]
 8008368:	607a      	str	r2, [r7, #4]
 800836a:	603b      	str	r3, [r7, #0]
 800836c:	4603      	mov	r3, r0
 800836e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008370:	2301      	movs	r3, #1
 8008372:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8008374:	f247 5030 	movw	r0, #30000	; 0x7530
 8008378:	f7ff ff1c 	bl	80081b4 <SD_CheckStatusWithTimeout>
 800837c:	4603      	mov	r3, r0
 800837e:	2b00      	cmp	r3, #0
 8008380:	da01      	bge.n	8008386 <SD_write+0x26>
  {
    return res;
 8008382:	7ffb      	ldrb	r3, [r7, #31]
 8008384:	e02d      	b.n	80083e2 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8008386:	683a      	ldr	r2, [r7, #0]
 8008388:	6879      	ldr	r1, [r7, #4]
 800838a:	68b8      	ldr	r0, [r7, #8]
 800838c:	f7ff fea8 	bl	80080e0 <BSP_SD_WriteBlocks_DMA>
 8008390:	4603      	mov	r3, r0
 8008392:	2b00      	cmp	r3, #0
 8008394:	d124      	bne.n	80083e0 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8008396:	4b15      	ldr	r3, [pc, #84]	; (80083ec <SD_write+0x8c>)
 8008398:	6818      	ldr	r0, [r3, #0]
 800839a:	f107 0112 	add.w	r1, r7, #18
 800839e:	f247 5330 	movw	r3, #30000	; 0x7530
 80083a2:	2200      	movs	r2, #0
 80083a4:	f005 f990 	bl	800d6c8 <osMessageQueueGet>
 80083a8:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 80083aa:	69bb      	ldr	r3, [r7, #24]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d117      	bne.n	80083e0 <SD_write+0x80>
 80083b0:	8a7b      	ldrh	r3, [r7, #18]
 80083b2:	2b02      	cmp	r3, #2
 80083b4:	d114      	bne.n	80083e0 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 80083b6:	f004 fcb7 	bl	800cd28 <osKernelGetTickCount>
 80083ba:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 80083bc:	e007      	b.n	80083ce <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80083be:	f7ff fea9 	bl	8008114 <BSP_SD_GetCardState>
 80083c2:	4603      	mov	r3, r0
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d102      	bne.n	80083ce <SD_write+0x6e>
          {
            res = RES_OK;
 80083c8:	2300      	movs	r3, #0
 80083ca:	77fb      	strb	r3, [r7, #31]
            break;
 80083cc:	e008      	b.n	80083e0 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 80083ce:	f004 fcab 	bl	800cd28 <osKernelGetTickCount>
 80083d2:	4602      	mov	r2, r0
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	1ad3      	subs	r3, r2, r3
 80083d8:	f247 522f 	movw	r2, #29999	; 0x752f
 80083dc:	4293      	cmp	r3, r2
 80083de:	d9ee      	bls.n	80083be <SD_write+0x5e>
    }

  }
#endif

  return res;
 80083e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3720      	adds	r7, #32
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}
 80083ea:	bf00      	nop
 80083ec:	20000218 	.word	0x20000218

080083f0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b08c      	sub	sp, #48	; 0x30
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	4603      	mov	r3, r0
 80083f8:	603a      	str	r2, [r7, #0]
 80083fa:	71fb      	strb	r3, [r7, #7]
 80083fc:	460b      	mov	r3, r1
 80083fe:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008400:	2301      	movs	r3, #1
 8008402:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008406:	4b25      	ldr	r3, [pc, #148]	; (800849c <SD_ioctl+0xac>)
 8008408:	781b      	ldrb	r3, [r3, #0]
 800840a:	b2db      	uxtb	r3, r3
 800840c:	f003 0301 	and.w	r3, r3, #1
 8008410:	2b00      	cmp	r3, #0
 8008412:	d001      	beq.n	8008418 <SD_ioctl+0x28>
 8008414:	2303      	movs	r3, #3
 8008416:	e03c      	b.n	8008492 <SD_ioctl+0xa2>

  switch (cmd)
 8008418:	79bb      	ldrb	r3, [r7, #6]
 800841a:	2b03      	cmp	r3, #3
 800841c:	d834      	bhi.n	8008488 <SD_ioctl+0x98>
 800841e:	a201      	add	r2, pc, #4	; (adr r2, 8008424 <SD_ioctl+0x34>)
 8008420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008424:	08008435 	.word	0x08008435
 8008428:	0800843d 	.word	0x0800843d
 800842c:	08008455 	.word	0x08008455
 8008430:	0800846f 	.word	0x0800846f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8008434:	2300      	movs	r3, #0
 8008436:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800843a:	e028      	b.n	800848e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800843c:	f107 030c 	add.w	r3, r7, #12
 8008440:	4618      	mov	r0, r3
 8008442:	f7ff fe77 	bl	8008134 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8008446:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800844c:	2300      	movs	r3, #0
 800844e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008452:	e01c      	b.n	800848e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008454:	f107 030c 	add.w	r3, r7, #12
 8008458:	4618      	mov	r0, r3
 800845a:	f7ff fe6b 	bl	8008134 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800845e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008460:	b29a      	uxth	r2, r3
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8008466:	2300      	movs	r3, #0
 8008468:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800846c:	e00f      	b.n	800848e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800846e:	f107 030c 	add.w	r3, r7, #12
 8008472:	4618      	mov	r0, r3
 8008474:	f7ff fe5e 	bl	8008134 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8008478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800847a:	0a5a      	lsrs	r2, r3, #9
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008480:	2300      	movs	r3, #0
 8008482:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008486:	e002      	b.n	800848e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8008488:	2304      	movs	r3, #4
 800848a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800848e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008492:	4618      	mov	r0, r3
 8008494:	3730      	adds	r7, #48	; 0x30
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}
 800849a:	bf00      	nop
 800849c:	20000009 	.word	0x20000009

080084a0 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b082      	sub	sp, #8
 80084a4:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 80084a6:	2302      	movs	r3, #2
 80084a8:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 80084aa:	4b05      	ldr	r3, [pc, #20]	; (80084c0 <BSP_SD_WriteCpltCallback+0x20>)
 80084ac:	6818      	ldr	r0, [r3, #0]
 80084ae:	1db9      	adds	r1, r7, #6
 80084b0:	2300      	movs	r3, #0
 80084b2:	2200      	movs	r2, #0
 80084b4:	f005 f894 	bl	800d5e0 <osMessageQueuePut>
#endif
}
 80084b8:	bf00      	nop
 80084ba:	3708      	adds	r7, #8
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}
 80084c0:	20000218 	.word	0x20000218

080084c4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b082      	sub	sp, #8
 80084c8:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 80084ca:	2301      	movs	r3, #1
 80084cc:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 80084ce:	4b05      	ldr	r3, [pc, #20]	; (80084e4 <BSP_SD_ReadCpltCallback+0x20>)
 80084d0:	6818      	ldr	r0, [r3, #0]
 80084d2:	1db9      	adds	r1, r7, #6
 80084d4:	2300      	movs	r3, #0
 80084d6:	2200      	movs	r2, #0
 80084d8:	f005 f882 	bl	800d5e0 <osMessageQueuePut>
#endif
}
 80084dc:	bf00      	nop
 80084de:	3708      	adds	r7, #8
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}
 80084e4:	20000218 	.word	0x20000218

080084e8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b084      	sub	sp, #16
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	460b      	mov	r3, r1
 80084f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80084f4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80084f8:	f009 f84a 	bl	8011590 <malloc>
 80084fc:	4603      	mov	r3, r0
 80084fe:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d105      	bne.n	8008512 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2200      	movs	r2, #0
 800850a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800850e:	2302      	movs	r3, #2
 8008510:	e066      	b.n	80085e0 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	68fa      	ldr	r2, [r7, #12]
 8008516:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	7c1b      	ldrb	r3, [r3, #16]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d119      	bne.n	8008556 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008522:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008526:	2202      	movs	r2, #2
 8008528:	2181      	movs	r1, #129	; 0x81
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f008 fe63 	bl	80111f6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2201      	movs	r2, #1
 8008534:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008536:	f44f 7300 	mov.w	r3, #512	; 0x200
 800853a:	2202      	movs	r2, #2
 800853c:	2101      	movs	r1, #1
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f008 fe59 	bl	80111f6 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2201      	movs	r2, #1
 8008548:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2210      	movs	r2, #16
 8008550:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8008554:	e016      	b.n	8008584 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008556:	2340      	movs	r3, #64	; 0x40
 8008558:	2202      	movs	r2, #2
 800855a:	2181      	movs	r1, #129	; 0x81
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f008 fe4a 	bl	80111f6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2201      	movs	r2, #1
 8008566:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008568:	2340      	movs	r3, #64	; 0x40
 800856a:	2202      	movs	r2, #2
 800856c:	2101      	movs	r1, #1
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f008 fe41 	bl	80111f6 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2201      	movs	r2, #1
 8008578:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2210      	movs	r2, #16
 8008580:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008584:	2308      	movs	r3, #8
 8008586:	2203      	movs	r2, #3
 8008588:	2182      	movs	r1, #130	; 0x82
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f008 fe33 	bl	80111f6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2201      	movs	r2, #1
 8008594:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2200      	movs	r2, #0
 80085a6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2200      	movs	r2, #0
 80085ae:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	7c1b      	ldrb	r3, [r3, #16]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d109      	bne.n	80085ce <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80085c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80085c4:	2101      	movs	r1, #1
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f008 ff04 	bl	80113d4 <USBD_LL_PrepareReceive>
 80085cc:	e007      	b.n	80085de <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80085d4:	2340      	movs	r3, #64	; 0x40
 80085d6:	2101      	movs	r1, #1
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f008 fefb 	bl	80113d4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80085de:	2300      	movs	r3, #0
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3710      	adds	r7, #16
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b084      	sub	sp, #16
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	460b      	mov	r3, r1
 80085f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 80085f4:	2300      	movs	r3, #0
 80085f6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80085f8:	2181      	movs	r1, #129	; 0x81
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f008 fe21 	bl	8011242 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2200      	movs	r2, #0
 8008604:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008606:	2101      	movs	r1, #1
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f008 fe1a 	bl	8011242 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2200      	movs	r2, #0
 8008612:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008616:	2182      	movs	r1, #130	; 0x82
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f008 fe12 	bl	8011242 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2200      	movs	r2, #0
 8008622:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2200      	movs	r2, #0
 800862a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008634:	2b00      	cmp	r3, #0
 8008636:	d00e      	beq.n	8008656 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008648:	4618      	mov	r0, r3
 800864a:	f008 ffa9 	bl	80115a0 <free>
    pdev->pClassData = NULL;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2200      	movs	r2, #0
 8008652:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8008656:	7bfb      	ldrb	r3, [r7, #15]
}
 8008658:	4618      	mov	r0, r3
 800865a:	3710      	adds	r7, #16
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}

08008660 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b086      	sub	sp, #24
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
 8008668:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008670:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008672:	2300      	movs	r3, #0
 8008674:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008676:	2300      	movs	r3, #0
 8008678:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800867a:	2300      	movs	r3, #0
 800867c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	781b      	ldrb	r3, [r3, #0]
 8008682:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008686:	2b00      	cmp	r3, #0
 8008688:	d03a      	beq.n	8008700 <USBD_CDC_Setup+0xa0>
 800868a:	2b20      	cmp	r3, #32
 800868c:	f040 8097 	bne.w	80087be <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	88db      	ldrh	r3, [r3, #6]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d029      	beq.n	80086ec <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	781b      	ldrb	r3, [r3, #0]
 800869c:	b25b      	sxtb	r3, r3
 800869e:	2b00      	cmp	r3, #0
 80086a0:	da11      	bge.n	80086c6 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80086a8:	689b      	ldr	r3, [r3, #8]
 80086aa:	683a      	ldr	r2, [r7, #0]
 80086ac:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 80086ae:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80086b0:	683a      	ldr	r2, [r7, #0]
 80086b2:	88d2      	ldrh	r2, [r2, #6]
 80086b4:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80086b6:	6939      	ldr	r1, [r7, #16]
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	88db      	ldrh	r3, [r3, #6]
 80086bc:	461a      	mov	r2, r3
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f001 fac7 	bl	8009c52 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 80086c4:	e082      	b.n	80087cc <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	785a      	ldrb	r2, [r3, #1]
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	88db      	ldrh	r3, [r3, #6]
 80086d4:	b2da      	uxtb	r2, r3
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80086dc:	6939      	ldr	r1, [r7, #16]
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	88db      	ldrh	r3, [r3, #6]
 80086e2:	461a      	mov	r2, r3
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f001 fae0 	bl	8009caa <USBD_CtlPrepareRx>
    break;
 80086ea:	e06f      	b.n	80087cc <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80086f2:	689b      	ldr	r3, [r3, #8]
 80086f4:	683a      	ldr	r2, [r7, #0]
 80086f6:	7850      	ldrb	r0, [r2, #1]
 80086f8:	2200      	movs	r2, #0
 80086fa:	6839      	ldr	r1, [r7, #0]
 80086fc:	4798      	blx	r3
    break;
 80086fe:	e065      	b.n	80087cc <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	785b      	ldrb	r3, [r3, #1]
 8008704:	2b0b      	cmp	r3, #11
 8008706:	d84f      	bhi.n	80087a8 <USBD_CDC_Setup+0x148>
 8008708:	a201      	add	r2, pc, #4	; (adr r2, 8008710 <USBD_CDC_Setup+0xb0>)
 800870a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800870e:	bf00      	nop
 8008710:	08008741 	.word	0x08008741
 8008714:	080087b7 	.word	0x080087b7
 8008718:	080087a9 	.word	0x080087a9
 800871c:	080087a9 	.word	0x080087a9
 8008720:	080087a9 	.word	0x080087a9
 8008724:	080087a9 	.word	0x080087a9
 8008728:	080087a9 	.word	0x080087a9
 800872c:	080087a9 	.word	0x080087a9
 8008730:	080087a9 	.word	0x080087a9
 8008734:	080087a9 	.word	0x080087a9
 8008738:	08008769 	.word	0x08008769
 800873c:	08008791 	.word	0x08008791
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008746:	2b03      	cmp	r3, #3
 8008748:	d107      	bne.n	800875a <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800874a:	f107 030c 	add.w	r3, r7, #12
 800874e:	2202      	movs	r2, #2
 8008750:	4619      	mov	r1, r3
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f001 fa7d 	bl	8009c52 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8008758:	e030      	b.n	80087bc <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800875a:	6839      	ldr	r1, [r7, #0]
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f001 fa07 	bl	8009b70 <USBD_CtlError>
        ret = USBD_FAIL;
 8008762:	2303      	movs	r3, #3
 8008764:	75fb      	strb	r3, [r7, #23]
      break;
 8008766:	e029      	b.n	80087bc <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800876e:	2b03      	cmp	r3, #3
 8008770:	d107      	bne.n	8008782 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008772:	f107 030f 	add.w	r3, r7, #15
 8008776:	2201      	movs	r2, #1
 8008778:	4619      	mov	r1, r3
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f001 fa69 	bl	8009c52 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8008780:	e01c      	b.n	80087bc <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8008782:	6839      	ldr	r1, [r7, #0]
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f001 f9f3 	bl	8009b70 <USBD_CtlError>
        ret = USBD_FAIL;
 800878a:	2303      	movs	r3, #3
 800878c:	75fb      	strb	r3, [r7, #23]
      break;
 800878e:	e015      	b.n	80087bc <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008796:	2b03      	cmp	r3, #3
 8008798:	d00f      	beq.n	80087ba <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800879a:	6839      	ldr	r1, [r7, #0]
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f001 f9e7 	bl	8009b70 <USBD_CtlError>
        ret = USBD_FAIL;
 80087a2:	2303      	movs	r3, #3
 80087a4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80087a6:	e008      	b.n	80087ba <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 80087a8:	6839      	ldr	r1, [r7, #0]
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f001 f9e0 	bl	8009b70 <USBD_CtlError>
      ret = USBD_FAIL;
 80087b0:	2303      	movs	r3, #3
 80087b2:	75fb      	strb	r3, [r7, #23]
      break;
 80087b4:	e002      	b.n	80087bc <USBD_CDC_Setup+0x15c>
      break;
 80087b6:	bf00      	nop
 80087b8:	e008      	b.n	80087cc <USBD_CDC_Setup+0x16c>
      break;
 80087ba:	bf00      	nop
    }
    break;
 80087bc:	e006      	b.n	80087cc <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 80087be:	6839      	ldr	r1, [r7, #0]
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f001 f9d5 	bl	8009b70 <USBD_CtlError>
    ret = USBD_FAIL;
 80087c6:	2303      	movs	r3, #3
 80087c8:	75fb      	strb	r3, [r7, #23]
    break;
 80087ca:	bf00      	nop
  }

  return (uint8_t)ret;
 80087cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3718      	adds	r7, #24
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
 80087d6:	bf00      	nop

080087d8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b084      	sub	sp, #16
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
 80087e0:	460b      	mov	r3, r1
 80087e2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80087ea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d101      	bne.n	80087fa <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80087f6:	2303      	movs	r3, #3
 80087f8:	e049      	b.n	800888e <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008800:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008802:	78fa      	ldrb	r2, [r7, #3]
 8008804:	6879      	ldr	r1, [r7, #4]
 8008806:	4613      	mov	r3, r2
 8008808:	009b      	lsls	r3, r3, #2
 800880a:	4413      	add	r3, r2
 800880c:	009b      	lsls	r3, r3, #2
 800880e:	440b      	add	r3, r1
 8008810:	3318      	adds	r3, #24
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d029      	beq.n	800886c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008818:	78fa      	ldrb	r2, [r7, #3]
 800881a:	6879      	ldr	r1, [r7, #4]
 800881c:	4613      	mov	r3, r2
 800881e:	009b      	lsls	r3, r3, #2
 8008820:	4413      	add	r3, r2
 8008822:	009b      	lsls	r3, r3, #2
 8008824:	440b      	add	r3, r1
 8008826:	3318      	adds	r3, #24
 8008828:	681a      	ldr	r2, [r3, #0]
 800882a:	78f9      	ldrb	r1, [r7, #3]
 800882c:	68f8      	ldr	r0, [r7, #12]
 800882e:	460b      	mov	r3, r1
 8008830:	00db      	lsls	r3, r3, #3
 8008832:	1a5b      	subs	r3, r3, r1
 8008834:	009b      	lsls	r3, r3, #2
 8008836:	4403      	add	r3, r0
 8008838:	3344      	adds	r3, #68	; 0x44
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	fbb2 f1f3 	udiv	r1, r2, r3
 8008840:	fb03 f301 	mul.w	r3, r3, r1
 8008844:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008846:	2b00      	cmp	r3, #0
 8008848:	d110      	bne.n	800886c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800884a:	78fa      	ldrb	r2, [r7, #3]
 800884c:	6879      	ldr	r1, [r7, #4]
 800884e:	4613      	mov	r3, r2
 8008850:	009b      	lsls	r3, r3, #2
 8008852:	4413      	add	r3, r2
 8008854:	009b      	lsls	r3, r3, #2
 8008856:	440b      	add	r3, r1
 8008858:	3318      	adds	r3, #24
 800885a:	2200      	movs	r2, #0
 800885c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800885e:	78f9      	ldrb	r1, [r7, #3]
 8008860:	2300      	movs	r3, #0
 8008862:	2200      	movs	r2, #0
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f008 fd94 	bl	8011392 <USBD_LL_Transmit>
 800886a:	e00f      	b.n	800888c <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	2200      	movs	r2, #0
 8008870:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800887a:	691b      	ldr	r3, [r3, #16]
 800887c:	68ba      	ldr	r2, [r7, #8]
 800887e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008882:	68ba      	ldr	r2, [r7, #8]
 8008884:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008888:	78fa      	ldrb	r2, [r7, #3]
 800888a:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800888c:	2300      	movs	r3, #0
}
 800888e:	4618      	mov	r0, r3
 8008890:	3710      	adds	r7, #16
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}

08008896 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008896:	b580      	push	{r7, lr}
 8008898:	b084      	sub	sp, #16
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
 800889e:	460b      	mov	r3, r1
 80088a0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80088a8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d101      	bne.n	80088b8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80088b4:	2303      	movs	r3, #3
 80088b6:	e015      	b.n	80088e4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80088b8:	78fb      	ldrb	r3, [r7, #3]
 80088ba:	4619      	mov	r1, r3
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f008 fdaa 	bl	8011416 <USBD_LL_GetRxDataSize>
 80088c2:	4602      	mov	r2, r0
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80088d0:	68db      	ldr	r3, [r3, #12]
 80088d2:	68fa      	ldr	r2, [r7, #12]
 80088d4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80088d8:	68fa      	ldr	r2, [r7, #12]
 80088da:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80088de:	4611      	mov	r1, r2
 80088e0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80088e2:	2300      	movs	r3, #0
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3710      	adds	r7, #16
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}

080088ec <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b084      	sub	sp, #16
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80088fa:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008902:	2b00      	cmp	r3, #0
 8008904:	d015      	beq.n	8008932 <USBD_CDC_EP0_RxReady+0x46>
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800890c:	2bff      	cmp	r3, #255	; 0xff
 800890e:	d010      	beq.n	8008932 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008916:	689b      	ldr	r3, [r3, #8]
 8008918:	68fa      	ldr	r2, [r7, #12]
 800891a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800891e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008920:	68fa      	ldr	r2, [r7, #12]
 8008922:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008926:	b292      	uxth	r2, r2
 8008928:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	22ff      	movs	r2, #255	; 0xff
 800892e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8008932:	2300      	movs	r3, #0
}
 8008934:	4618      	mov	r0, r3
 8008936:	3710      	adds	r7, #16
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800893c:	b480      	push	{r7}
 800893e:	b083      	sub	sp, #12
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2243      	movs	r2, #67	; 0x43
 8008948:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800894a:	4b03      	ldr	r3, [pc, #12]	; (8008958 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800894c:	4618      	mov	r0, r3
 800894e:	370c      	adds	r7, #12
 8008950:	46bd      	mov	sp, r7
 8008952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008956:	4770      	bx	lr
 8008958:	20000094 	.word	0x20000094

0800895c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800895c:	b480      	push	{r7}
 800895e:	b083      	sub	sp, #12
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2243      	movs	r2, #67	; 0x43
 8008968:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800896a:	4b03      	ldr	r3, [pc, #12]	; (8008978 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800896c:	4618      	mov	r0, r3
 800896e:	370c      	adds	r7, #12
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr
 8008978:	20000050 	.word	0x20000050

0800897c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800897c:	b480      	push	{r7}
 800897e:	b083      	sub	sp, #12
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2243      	movs	r2, #67	; 0x43
 8008988:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800898a:	4b03      	ldr	r3, [pc, #12]	; (8008998 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800898c:	4618      	mov	r0, r3
 800898e:	370c      	adds	r7, #12
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr
 8008998:	200000d8 	.word	0x200000d8

0800899c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800899c:	b480      	push	{r7}
 800899e:	b083      	sub	sp, #12
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	220a      	movs	r2, #10
 80089a8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80089aa:	4b03      	ldr	r3, [pc, #12]	; (80089b8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	370c      	adds	r7, #12
 80089b0:	46bd      	mov	sp, r7
 80089b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b6:	4770      	bx	lr
 80089b8:	2000000c 	.word	0x2000000c

080089bc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80089bc:	b480      	push	{r7}
 80089be:	b083      	sub	sp, #12
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
 80089c4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d101      	bne.n	80089d0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80089cc:	2303      	movs	r3, #3
 80089ce:	e004      	b.n	80089da <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	683a      	ldr	r2, [r7, #0]
 80089d4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80089d8:	2300      	movs	r3, #0
}
 80089da:	4618      	mov	r0, r3
 80089dc:	370c      	adds	r7, #12
 80089de:	46bd      	mov	sp, r7
 80089e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e4:	4770      	bx	lr

080089e6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80089e6:	b480      	push	{r7}
 80089e8:	b087      	sub	sp, #28
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	60f8      	str	r0, [r7, #12]
 80089ee:	60b9      	str	r1, [r7, #8]
 80089f0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80089f8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	68ba      	ldr	r2, [r7, #8]
 80089fe:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008a0a:	2300      	movs	r3, #0
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	371c      	adds	r7, #28
 8008a10:	46bd      	mov	sp, r7
 8008a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a16:	4770      	bx	lr

08008a18 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b085      	sub	sp, #20
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a28:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	683a      	ldr	r2, [r7, #0]
 8008a2e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008a32:	2300      	movs	r3, #0
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3714      	adds	r7, #20
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3e:	4770      	bx	lr

08008a40 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b084      	sub	sp, #16
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a4e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008a50:	2301      	movs	r3, #1
 8008a52:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d101      	bne.n	8008a62 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008a5e:	2303      	movs	r3, #3
 8008a60:	e01a      	b.n	8008a98 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d114      	bne.n	8008a96 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	2201      	movs	r2, #1
 8008a70:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008a8a:	2181      	movs	r1, #129	; 0x81
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f008 fc80 	bl	8011392 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008a92:	2300      	movs	r3, #0
 8008a94:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3710      	adds	r7, #16
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b084      	sub	sp, #16
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008aae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d101      	bne.n	8008abe <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008aba:	2303      	movs	r3, #3
 8008abc:	e016      	b.n	8008aec <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	7c1b      	ldrb	r3, [r3, #16]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d109      	bne.n	8008ada <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008acc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ad0:	2101      	movs	r1, #1
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f008 fc7e 	bl	80113d4 <USBD_LL_PrepareReceive>
 8008ad8:	e007      	b.n	8008aea <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008ae0:	2340      	movs	r3, #64	; 0x40
 8008ae2:	2101      	movs	r1, #1
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f008 fc75 	bl	80113d4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008aea:	2300      	movs	r3, #0
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3710      	adds	r7, #16
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}

08008af4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b086      	sub	sp, #24
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	60f8      	str	r0, [r7, #12]
 8008afc:	60b9      	str	r1, [r7, #8]
 8008afe:	4613      	mov	r3, r2
 8008b00:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d101      	bne.n	8008b0c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008b08:	2303      	movs	r3, #3
 8008b0a:	e025      	b.n	8008b58 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d003      	beq.n	8008b1e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d003      	beq.n	8008b30 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d003      	beq.n	8008b3e <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	68ba      	ldr	r2, [r7, #8]
 8008b3a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	2201      	movs	r2, #1
 8008b42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	79fa      	ldrb	r2, [r7, #7]
 8008b4a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008b4c:	68f8      	ldr	r0, [r7, #12]
 8008b4e:	f008 faeb 	bl	8011128 <USBD_LL_Init>
 8008b52:	4603      	mov	r3, r0
 8008b54:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008b56:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3718      	adds	r7, #24
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}

08008b60 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b084      	sub	sp, #16
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
 8008b68:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d101      	bne.n	8008b78 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008b74:	2303      	movs	r3, #3
 8008b76:	e010      	b.n	8008b9a <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	683a      	ldr	r2, [r7, #0]
 8008b7c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b88:	f107 020e 	add.w	r2, r7, #14
 8008b8c:	4610      	mov	r0, r2
 8008b8e:	4798      	blx	r3
 8008b90:	4602      	mov	r2, r0
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8008b98:	2300      	movs	r3, #0
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3710      	adds	r7, #16
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}

08008ba2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008ba2:	b580      	push	{r7, lr}
 8008ba4:	b082      	sub	sp, #8
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f008 fb08 	bl	80111c0 <USBD_LL_Start>
 8008bb0:	4603      	mov	r3, r0
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3708      	adds	r7, #8
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}

08008bba <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008bba:	b480      	push	{r7}
 8008bbc:	b083      	sub	sp, #12
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008bc2:	2300      	movs	r3, #0
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	370c      	adds	r7, #12
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bce:	4770      	bx	lr

08008bd0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b084      	sub	sp, #16
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	460b      	mov	r3, r1
 8008bda:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008bdc:	2303      	movs	r3, #3
 8008bde:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d009      	beq.n	8008bfe <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	78fa      	ldrb	r2, [r7, #3]
 8008bf4:	4611      	mov	r1, r2
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	4798      	blx	r3
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	3710      	adds	r7, #16
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}

08008c08 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b082      	sub	sp, #8
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
 8008c10:	460b      	mov	r3, r1
 8008c12:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d007      	beq.n	8008c2e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	78fa      	ldrb	r2, [r7, #3]
 8008c28:	4611      	mov	r1, r2
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	4798      	blx	r3
  }

  return USBD_OK;
 8008c2e:	2300      	movs	r3, #0
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3708      	adds	r7, #8
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b084      	sub	sp, #16
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008c48:	6839      	ldr	r1, [r7, #0]
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f000 ff56 	bl	8009afc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2201      	movs	r2, #1
 8008c54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008c5e:	461a      	mov	r2, r3
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008c6c:	f003 031f 	and.w	r3, r3, #31
 8008c70:	2b01      	cmp	r3, #1
 8008c72:	d00e      	beq.n	8008c92 <USBD_LL_SetupStage+0x5a>
 8008c74:	2b01      	cmp	r3, #1
 8008c76:	d302      	bcc.n	8008c7e <USBD_LL_SetupStage+0x46>
 8008c78:	2b02      	cmp	r3, #2
 8008c7a:	d014      	beq.n	8008ca6 <USBD_LL_SetupStage+0x6e>
 8008c7c:	e01d      	b.n	8008cba <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008c84:	4619      	mov	r1, r3
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f000 fa18 	bl	80090bc <USBD_StdDevReq>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	73fb      	strb	r3, [r7, #15]
      break;
 8008c90:	e020      	b.n	8008cd4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008c98:	4619      	mov	r1, r3
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f000 fa7c 	bl	8009198 <USBD_StdItfReq>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	73fb      	strb	r3, [r7, #15]
      break;
 8008ca4:	e016      	b.n	8008cd4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008cac:	4619      	mov	r1, r3
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f000 fab8 	bl	8009224 <USBD_StdEPReq>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	73fb      	strb	r3, [r7, #15]
      break;
 8008cb8:	e00c      	b.n	8008cd4 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008cc0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008cc4:	b2db      	uxtb	r3, r3
 8008cc6:	4619      	mov	r1, r3
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f008 fad9 	bl	8011280 <USBD_LL_StallEP>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	73fb      	strb	r3, [r7, #15]
      break;
 8008cd2:	bf00      	nop
  }

  return ret;
 8008cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3710      	adds	r7, #16
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}

08008cde <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008cde:	b580      	push	{r7, lr}
 8008ce0:	b086      	sub	sp, #24
 8008ce2:	af00      	add	r7, sp, #0
 8008ce4:	60f8      	str	r0, [r7, #12]
 8008ce6:	460b      	mov	r3, r1
 8008ce8:	607a      	str	r2, [r7, #4]
 8008cea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008cec:	7afb      	ldrb	r3, [r7, #11]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d137      	bne.n	8008d62 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008cf8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008d00:	2b03      	cmp	r3, #3
 8008d02:	d14a      	bne.n	8008d9a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	689a      	ldr	r2, [r3, #8]
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	68db      	ldr	r3, [r3, #12]
 8008d0c:	429a      	cmp	r2, r3
 8008d0e:	d913      	bls.n	8008d38 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	689a      	ldr	r2, [r3, #8]
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	68db      	ldr	r3, [r3, #12]
 8008d18:	1ad2      	subs	r2, r2, r3
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	68da      	ldr	r2, [r3, #12]
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	689b      	ldr	r3, [r3, #8]
 8008d26:	4293      	cmp	r3, r2
 8008d28:	bf28      	it	cs
 8008d2a:	4613      	movcs	r3, r2
 8008d2c:	461a      	mov	r2, r3
 8008d2e:	6879      	ldr	r1, [r7, #4]
 8008d30:	68f8      	ldr	r0, [r7, #12]
 8008d32:	f000 ffd7 	bl	8009ce4 <USBD_CtlContinueRx>
 8008d36:	e030      	b.n	8008d9a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d3e:	691b      	ldr	r3, [r3, #16]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d00a      	beq.n	8008d5a <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008d4a:	2b03      	cmp	r3, #3
 8008d4c:	d105      	bne.n	8008d5a <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d54:	691b      	ldr	r3, [r3, #16]
 8008d56:	68f8      	ldr	r0, [r7, #12]
 8008d58:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8008d5a:	68f8      	ldr	r0, [r7, #12]
 8008d5c:	f000 ffd3 	bl	8009d06 <USBD_CtlSendStatus>
 8008d60:	e01b      	b.n	8008d9a <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d68:	699b      	ldr	r3, [r3, #24]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d013      	beq.n	8008d96 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008d74:	2b03      	cmp	r3, #3
 8008d76:	d10e      	bne.n	8008d96 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d7e:	699b      	ldr	r3, [r3, #24]
 8008d80:	7afa      	ldrb	r2, [r7, #11]
 8008d82:	4611      	mov	r1, r2
 8008d84:	68f8      	ldr	r0, [r7, #12]
 8008d86:	4798      	blx	r3
 8008d88:	4603      	mov	r3, r0
 8008d8a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008d8c:	7dfb      	ldrb	r3, [r7, #23]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d003      	beq.n	8008d9a <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8008d92:	7dfb      	ldrb	r3, [r7, #23]
 8008d94:	e002      	b.n	8008d9c <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008d96:	2303      	movs	r3, #3
 8008d98:	e000      	b.n	8008d9c <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8008d9a:	2300      	movs	r3, #0
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3718      	adds	r7, #24
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}

08008da4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b086      	sub	sp, #24
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	60f8      	str	r0, [r7, #12]
 8008dac:	460b      	mov	r3, r1
 8008dae:	607a      	str	r2, [r7, #4]
 8008db0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008db2:	7afb      	ldrb	r3, [r7, #11]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d16a      	bne.n	8008e8e <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	3314      	adds	r3, #20
 8008dbc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008dc4:	2b02      	cmp	r3, #2
 8008dc6:	d155      	bne.n	8008e74 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	689a      	ldr	r2, [r3, #8]
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	68db      	ldr	r3, [r3, #12]
 8008dd0:	429a      	cmp	r2, r3
 8008dd2:	d914      	bls.n	8008dfe <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008dd4:	693b      	ldr	r3, [r7, #16]
 8008dd6:	689a      	ldr	r2, [r3, #8]
 8008dd8:	693b      	ldr	r3, [r7, #16]
 8008dda:	68db      	ldr	r3, [r3, #12]
 8008ddc:	1ad2      	subs	r2, r2, r3
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	689b      	ldr	r3, [r3, #8]
 8008de6:	461a      	mov	r2, r3
 8008de8:	6879      	ldr	r1, [r7, #4]
 8008dea:	68f8      	ldr	r0, [r7, #12]
 8008dec:	f000 ff4c 	bl	8009c88 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008df0:	2300      	movs	r3, #0
 8008df2:	2200      	movs	r2, #0
 8008df4:	2100      	movs	r1, #0
 8008df6:	68f8      	ldr	r0, [r7, #12]
 8008df8:	f008 faec 	bl	80113d4 <USBD_LL_PrepareReceive>
 8008dfc:	e03a      	b.n	8008e74 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	68da      	ldr	r2, [r3, #12]
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	689b      	ldr	r3, [r3, #8]
 8008e06:	429a      	cmp	r2, r3
 8008e08:	d11c      	bne.n	8008e44 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	685a      	ldr	r2, [r3, #4]
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008e12:	429a      	cmp	r2, r3
 8008e14:	d316      	bcc.n	8008e44 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	685a      	ldr	r2, [r3, #4]
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008e20:	429a      	cmp	r2, r3
 8008e22:	d20f      	bcs.n	8008e44 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008e24:	2200      	movs	r2, #0
 8008e26:	2100      	movs	r1, #0
 8008e28:	68f8      	ldr	r0, [r7, #12]
 8008e2a:	f000 ff2d 	bl	8009c88 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	2200      	movs	r2, #0
 8008e32:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e36:	2300      	movs	r3, #0
 8008e38:	2200      	movs	r2, #0
 8008e3a:	2100      	movs	r1, #0
 8008e3c:	68f8      	ldr	r0, [r7, #12]
 8008e3e:	f008 fac9 	bl	80113d4 <USBD_LL_PrepareReceive>
 8008e42:	e017      	b.n	8008e74 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e4a:	68db      	ldr	r3, [r3, #12]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d00a      	beq.n	8008e66 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008e56:	2b03      	cmp	r3, #3
 8008e58:	d105      	bne.n	8008e66 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e60:	68db      	ldr	r3, [r3, #12]
 8008e62:	68f8      	ldr	r0, [r7, #12]
 8008e64:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e66:	2180      	movs	r1, #128	; 0x80
 8008e68:	68f8      	ldr	r0, [r7, #12]
 8008e6a:	f008 fa09 	bl	8011280 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008e6e:	68f8      	ldr	r0, [r7, #12]
 8008e70:	f000 ff5c 	bl	8009d2c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008e7a:	2b01      	cmp	r3, #1
 8008e7c:	d123      	bne.n	8008ec6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008e7e:	68f8      	ldr	r0, [r7, #12]
 8008e80:	f7ff fe9b 	bl	8008bba <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	2200      	movs	r2, #0
 8008e88:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008e8c:	e01b      	b.n	8008ec6 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e94:	695b      	ldr	r3, [r3, #20]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d013      	beq.n	8008ec2 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008ea0:	2b03      	cmp	r3, #3
 8008ea2:	d10e      	bne.n	8008ec2 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008eaa:	695b      	ldr	r3, [r3, #20]
 8008eac:	7afa      	ldrb	r2, [r7, #11]
 8008eae:	4611      	mov	r1, r2
 8008eb0:	68f8      	ldr	r0, [r7, #12]
 8008eb2:	4798      	blx	r3
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008eb8:	7dfb      	ldrb	r3, [r7, #23]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d003      	beq.n	8008ec6 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8008ebe:	7dfb      	ldrb	r3, [r7, #23]
 8008ec0:	e002      	b.n	8008ec8 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008ec2:	2303      	movs	r3, #3
 8008ec4:	e000      	b.n	8008ec8 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8008ec6:	2300      	movs	r3, #0
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3718      	adds	r7, #24
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}

08008ed0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b082      	sub	sp, #8
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2201      	movs	r2, #1
 8008edc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2200      	movs	r2, #0
 8008eec:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d009      	beq.n	8008f14 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f06:	685b      	ldr	r3, [r3, #4]
 8008f08:	687a      	ldr	r2, [r7, #4]
 8008f0a:	6852      	ldr	r2, [r2, #4]
 8008f0c:	b2d2      	uxtb	r2, r2
 8008f0e:	4611      	mov	r1, r2
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008f14:	2340      	movs	r3, #64	; 0x40
 8008f16:	2200      	movs	r2, #0
 8008f18:	2100      	movs	r1, #0
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f008 f96b 	bl	80111f6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2201      	movs	r2, #1
 8008f24:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2240      	movs	r2, #64	; 0x40
 8008f2c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008f30:	2340      	movs	r3, #64	; 0x40
 8008f32:	2200      	movs	r2, #0
 8008f34:	2180      	movs	r1, #128	; 0x80
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f008 f95d 	bl	80111f6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2201      	movs	r2, #1
 8008f40:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2240      	movs	r2, #64	; 0x40
 8008f46:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008f48:	2300      	movs	r3, #0
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3708      	adds	r7, #8
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}

08008f52 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008f52:	b480      	push	{r7}
 8008f54:	b083      	sub	sp, #12
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	6078      	str	r0, [r7, #4]
 8008f5a:	460b      	mov	r3, r1
 8008f5c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	78fa      	ldrb	r2, [r7, #3]
 8008f62:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008f64:	2300      	movs	r3, #0
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	370c      	adds	r7, #12
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f70:	4770      	bx	lr

08008f72 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008f72:	b480      	push	{r7}
 8008f74:	b083      	sub	sp, #12
 8008f76:	af00      	add	r7, sp, #0
 8008f78:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2204      	movs	r2, #4
 8008f8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008f8e:	2300      	movs	r3, #0
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	370c      	adds	r7, #12
 8008f94:	46bd      	mov	sp, r7
 8008f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9a:	4770      	bx	lr

08008f9c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b083      	sub	sp, #12
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008faa:	2b04      	cmp	r3, #4
 8008fac:	d105      	bne.n	8008fba <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008fba:	2300      	movs	r3, #0
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	370c      	adds	r7, #12
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr

08008fc8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b082      	sub	sp, #8
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fd6:	2b03      	cmp	r3, #3
 8008fd8:	d10b      	bne.n	8008ff2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fe0:	69db      	ldr	r3, [r3, #28]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d005      	beq.n	8008ff2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fec:	69db      	ldr	r3, [r3, #28]
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008ff2:	2300      	movs	r3, #0
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3708      	adds	r7, #8
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}

08008ffc <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b083      	sub	sp, #12
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	460b      	mov	r3, r1
 8009006:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8009008:	2300      	movs	r3, #0
}
 800900a:	4618      	mov	r0, r3
 800900c:	370c      	adds	r7, #12
 800900e:	46bd      	mov	sp, r7
 8009010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009014:	4770      	bx	lr

08009016 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009016:	b480      	push	{r7}
 8009018:	b083      	sub	sp, #12
 800901a:	af00      	add	r7, sp, #0
 800901c:	6078      	str	r0, [r7, #4]
 800901e:	460b      	mov	r3, r1
 8009020:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8009022:	2300      	movs	r3, #0
}
 8009024:	4618      	mov	r0, r3
 8009026:	370c      	adds	r7, #12
 8009028:	46bd      	mov	sp, r7
 800902a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902e:	4770      	bx	lr

08009030 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009030:	b480      	push	{r7}
 8009032:	b083      	sub	sp, #12
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009038:	2300      	movs	r3, #0
}
 800903a:	4618      	mov	r0, r3
 800903c:	370c      	adds	r7, #12
 800903e:	46bd      	mov	sp, r7
 8009040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009044:	4770      	bx	lr

08009046 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009046:	b580      	push	{r7, lr}
 8009048:	b082      	sub	sp, #8
 800904a:	af00      	add	r7, sp, #0
 800904c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2201      	movs	r2, #1
 8009052:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800905c:	2b00      	cmp	r3, #0
 800905e:	d009      	beq.n	8009074 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009066:	685b      	ldr	r3, [r3, #4]
 8009068:	687a      	ldr	r2, [r7, #4]
 800906a:	6852      	ldr	r2, [r2, #4]
 800906c:	b2d2      	uxtb	r2, r2
 800906e:	4611      	mov	r1, r2
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	4798      	blx	r3
  }

  return USBD_OK;
 8009074:	2300      	movs	r3, #0
}
 8009076:	4618      	mov	r0, r3
 8009078:	3708      	adds	r7, #8
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}

0800907e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800907e:	b480      	push	{r7}
 8009080:	b087      	sub	sp, #28
 8009082:	af00      	add	r7, sp, #0
 8009084:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	781b      	ldrb	r3, [r3, #0]
 800908e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	3301      	adds	r3, #1
 8009094:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	781b      	ldrb	r3, [r3, #0]
 800909a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800909c:	8a3b      	ldrh	r3, [r7, #16]
 800909e:	021b      	lsls	r3, r3, #8
 80090a0:	b21a      	sxth	r2, r3
 80090a2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80090a6:	4313      	orrs	r3, r2
 80090a8:	b21b      	sxth	r3, r3
 80090aa:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80090ac:	89fb      	ldrh	r3, [r7, #14]
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	371c      	adds	r7, #28
 80090b2:	46bd      	mov	sp, r7
 80090b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b8:	4770      	bx	lr
	...

080090bc <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b084      	sub	sp, #16
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80090c6:	2300      	movs	r3, #0
 80090c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	781b      	ldrb	r3, [r3, #0]
 80090ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80090d2:	2b20      	cmp	r3, #32
 80090d4:	d004      	beq.n	80090e0 <USBD_StdDevReq+0x24>
 80090d6:	2b40      	cmp	r3, #64	; 0x40
 80090d8:	d002      	beq.n	80090e0 <USBD_StdDevReq+0x24>
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d00a      	beq.n	80090f4 <USBD_StdDevReq+0x38>
 80090de:	e050      	b.n	8009182 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090e6:	689b      	ldr	r3, [r3, #8]
 80090e8:	6839      	ldr	r1, [r7, #0]
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	4798      	blx	r3
 80090ee:	4603      	mov	r3, r0
 80090f0:	73fb      	strb	r3, [r7, #15]
    break;
 80090f2:	e04b      	b.n	800918c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	785b      	ldrb	r3, [r3, #1]
 80090f8:	2b09      	cmp	r3, #9
 80090fa:	d83c      	bhi.n	8009176 <USBD_StdDevReq+0xba>
 80090fc:	a201      	add	r2, pc, #4	; (adr r2, 8009104 <USBD_StdDevReq+0x48>)
 80090fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009102:	bf00      	nop
 8009104:	08009159 	.word	0x08009159
 8009108:	0800916d 	.word	0x0800916d
 800910c:	08009177 	.word	0x08009177
 8009110:	08009163 	.word	0x08009163
 8009114:	08009177 	.word	0x08009177
 8009118:	08009137 	.word	0x08009137
 800911c:	0800912d 	.word	0x0800912d
 8009120:	08009177 	.word	0x08009177
 8009124:	0800914f 	.word	0x0800914f
 8009128:	08009141 	.word	0x08009141
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800912c:	6839      	ldr	r1, [r7, #0]
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f000 f9ce 	bl	80094d0 <USBD_GetDescriptor>
      break;
 8009134:	e024      	b.n	8009180 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8009136:	6839      	ldr	r1, [r7, #0]
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f000 fb5d 	bl	80097f8 <USBD_SetAddress>
      break;
 800913e:	e01f      	b.n	8009180 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8009140:	6839      	ldr	r1, [r7, #0]
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f000 fb9a 	bl	800987c <USBD_SetConfig>
 8009148:	4603      	mov	r3, r0
 800914a:	73fb      	strb	r3, [r7, #15]
      break;
 800914c:	e018      	b.n	8009180 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800914e:	6839      	ldr	r1, [r7, #0]
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f000 fc37 	bl	80099c4 <USBD_GetConfig>
      break;
 8009156:	e013      	b.n	8009180 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8009158:	6839      	ldr	r1, [r7, #0]
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f000 fc66 	bl	8009a2c <USBD_GetStatus>
      break;
 8009160:	e00e      	b.n	8009180 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8009162:	6839      	ldr	r1, [r7, #0]
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f000 fc94 	bl	8009a92 <USBD_SetFeature>
      break;
 800916a:	e009      	b.n	8009180 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800916c:	6839      	ldr	r1, [r7, #0]
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 fca3 	bl	8009aba <USBD_ClrFeature>
      break;
 8009174:	e004      	b.n	8009180 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8009176:	6839      	ldr	r1, [r7, #0]
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f000 fcf9 	bl	8009b70 <USBD_CtlError>
      break;
 800917e:	bf00      	nop
    }
    break;
 8009180:	e004      	b.n	800918c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8009182:	6839      	ldr	r1, [r7, #0]
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f000 fcf3 	bl	8009b70 <USBD_CtlError>
    break;
 800918a:	bf00      	nop
  }

  return ret;
 800918c:	7bfb      	ldrb	r3, [r7, #15]
}
 800918e:	4618      	mov	r0, r3
 8009190:	3710      	adds	r7, #16
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}
 8009196:	bf00      	nop

08009198 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b084      	sub	sp, #16
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
 80091a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80091a2:	2300      	movs	r3, #0
 80091a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	781b      	ldrb	r3, [r3, #0]
 80091aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80091ae:	2b20      	cmp	r3, #32
 80091b0:	d003      	beq.n	80091ba <USBD_StdItfReq+0x22>
 80091b2:	2b40      	cmp	r3, #64	; 0x40
 80091b4:	d001      	beq.n	80091ba <USBD_StdItfReq+0x22>
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d12a      	bne.n	8009210 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091c0:	3b01      	subs	r3, #1
 80091c2:	2b02      	cmp	r3, #2
 80091c4:	d81d      	bhi.n	8009202 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	889b      	ldrh	r3, [r3, #4]
 80091ca:	b2db      	uxtb	r3, r3
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	d813      	bhi.n	80091f8 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091d6:	689b      	ldr	r3, [r3, #8]
 80091d8:	6839      	ldr	r1, [r7, #0]
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	4798      	blx	r3
 80091de:	4603      	mov	r3, r0
 80091e0:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	88db      	ldrh	r3, [r3, #6]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d110      	bne.n	800920c <USBD_StdItfReq+0x74>
 80091ea:	7bfb      	ldrb	r3, [r7, #15]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d10d      	bne.n	800920c <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f000 fd88 	bl	8009d06 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80091f6:	e009      	b.n	800920c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80091f8:	6839      	ldr	r1, [r7, #0]
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f000 fcb8 	bl	8009b70 <USBD_CtlError>
      break;
 8009200:	e004      	b.n	800920c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8009202:	6839      	ldr	r1, [r7, #0]
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f000 fcb3 	bl	8009b70 <USBD_CtlError>
      break;
 800920a:	e000      	b.n	800920e <USBD_StdItfReq+0x76>
      break;
 800920c:	bf00      	nop
    }
    break;
 800920e:	e004      	b.n	800921a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8009210:	6839      	ldr	r1, [r7, #0]
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f000 fcac 	bl	8009b70 <USBD_CtlError>
    break;
 8009218:	bf00      	nop
  }

  return ret;
 800921a:	7bfb      	ldrb	r3, [r7, #15]
}
 800921c:	4618      	mov	r0, r3
 800921e:	3710      	adds	r7, #16
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}

08009224 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b084      	sub	sp, #16
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
 800922c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800922e:	2300      	movs	r3, #0
 8009230:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	889b      	ldrh	r3, [r3, #4]
 8009236:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	781b      	ldrb	r3, [r3, #0]
 800923c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009240:	2b20      	cmp	r3, #32
 8009242:	d004      	beq.n	800924e <USBD_StdEPReq+0x2a>
 8009244:	2b40      	cmp	r3, #64	; 0x40
 8009246:	d002      	beq.n	800924e <USBD_StdEPReq+0x2a>
 8009248:	2b00      	cmp	r3, #0
 800924a:	d00a      	beq.n	8009262 <USBD_StdEPReq+0x3e>
 800924c:	e135      	b.n	80094ba <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009254:	689b      	ldr	r3, [r3, #8]
 8009256:	6839      	ldr	r1, [r7, #0]
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	4798      	blx	r3
 800925c:	4603      	mov	r3, r0
 800925e:	73fb      	strb	r3, [r7, #15]
    break;
 8009260:	e130      	b.n	80094c4 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	785b      	ldrb	r3, [r3, #1]
 8009266:	2b01      	cmp	r3, #1
 8009268:	d03e      	beq.n	80092e8 <USBD_StdEPReq+0xc4>
 800926a:	2b03      	cmp	r3, #3
 800926c:	d002      	beq.n	8009274 <USBD_StdEPReq+0x50>
 800926e:	2b00      	cmp	r3, #0
 8009270:	d077      	beq.n	8009362 <USBD_StdEPReq+0x13e>
 8009272:	e11c      	b.n	80094ae <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800927a:	2b02      	cmp	r3, #2
 800927c:	d002      	beq.n	8009284 <USBD_StdEPReq+0x60>
 800927e:	2b03      	cmp	r3, #3
 8009280:	d015      	beq.n	80092ae <USBD_StdEPReq+0x8a>
 8009282:	e02b      	b.n	80092dc <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009284:	7bbb      	ldrb	r3, [r7, #14]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d00c      	beq.n	80092a4 <USBD_StdEPReq+0x80>
 800928a:	7bbb      	ldrb	r3, [r7, #14]
 800928c:	2b80      	cmp	r3, #128	; 0x80
 800928e:	d009      	beq.n	80092a4 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8009290:	7bbb      	ldrb	r3, [r7, #14]
 8009292:	4619      	mov	r1, r3
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f007 fff3 	bl	8011280 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800929a:	2180      	movs	r1, #128	; 0x80
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f007 ffef 	bl	8011280 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80092a2:	e020      	b.n	80092e6 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80092a4:	6839      	ldr	r1, [r7, #0]
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f000 fc62 	bl	8009b70 <USBD_CtlError>
        break;
 80092ac:	e01b      	b.n	80092e6 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	885b      	ldrh	r3, [r3, #2]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d10e      	bne.n	80092d4 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80092b6:	7bbb      	ldrb	r3, [r7, #14]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d00b      	beq.n	80092d4 <USBD_StdEPReq+0xb0>
 80092bc:	7bbb      	ldrb	r3, [r7, #14]
 80092be:	2b80      	cmp	r3, #128	; 0x80
 80092c0:	d008      	beq.n	80092d4 <USBD_StdEPReq+0xb0>
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	88db      	ldrh	r3, [r3, #6]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d104      	bne.n	80092d4 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80092ca:	7bbb      	ldrb	r3, [r7, #14]
 80092cc:	4619      	mov	r1, r3
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f007 ffd6 	bl	8011280 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f000 fd16 	bl	8009d06 <USBD_CtlSendStatus>

        break;
 80092da:	e004      	b.n	80092e6 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80092dc:	6839      	ldr	r1, [r7, #0]
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f000 fc46 	bl	8009b70 <USBD_CtlError>
        break;
 80092e4:	bf00      	nop
      }
      break;
 80092e6:	e0e7      	b.n	80094b8 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092ee:	2b02      	cmp	r3, #2
 80092f0:	d002      	beq.n	80092f8 <USBD_StdEPReq+0xd4>
 80092f2:	2b03      	cmp	r3, #3
 80092f4:	d015      	beq.n	8009322 <USBD_StdEPReq+0xfe>
 80092f6:	e02d      	b.n	8009354 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80092f8:	7bbb      	ldrb	r3, [r7, #14]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d00c      	beq.n	8009318 <USBD_StdEPReq+0xf4>
 80092fe:	7bbb      	ldrb	r3, [r7, #14]
 8009300:	2b80      	cmp	r3, #128	; 0x80
 8009302:	d009      	beq.n	8009318 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8009304:	7bbb      	ldrb	r3, [r7, #14]
 8009306:	4619      	mov	r1, r3
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f007 ffb9 	bl	8011280 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800930e:	2180      	movs	r1, #128	; 0x80
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f007 ffb5 	bl	8011280 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8009316:	e023      	b.n	8009360 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8009318:	6839      	ldr	r1, [r7, #0]
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 fc28 	bl	8009b70 <USBD_CtlError>
        break;
 8009320:	e01e      	b.n	8009360 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	885b      	ldrh	r3, [r3, #2]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d119      	bne.n	800935e <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800932a:	7bbb      	ldrb	r3, [r7, #14]
 800932c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009330:	2b00      	cmp	r3, #0
 8009332:	d004      	beq.n	800933e <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009334:	7bbb      	ldrb	r3, [r7, #14]
 8009336:	4619      	mov	r1, r3
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f007 ffc0 	bl	80112be <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f000 fce1 	bl	8009d06 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800934a:	689b      	ldr	r3, [r3, #8]
 800934c:	6839      	ldr	r1, [r7, #0]
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	4798      	blx	r3
        }
        break;
 8009352:	e004      	b.n	800935e <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8009354:	6839      	ldr	r1, [r7, #0]
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 fc0a 	bl	8009b70 <USBD_CtlError>
        break;
 800935c:	e000      	b.n	8009360 <USBD_StdEPReq+0x13c>
        break;
 800935e:	bf00      	nop
      }
      break;
 8009360:	e0aa      	b.n	80094b8 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009368:	2b02      	cmp	r3, #2
 800936a:	d002      	beq.n	8009372 <USBD_StdEPReq+0x14e>
 800936c:	2b03      	cmp	r3, #3
 800936e:	d032      	beq.n	80093d6 <USBD_StdEPReq+0x1b2>
 8009370:	e097      	b.n	80094a2 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009372:	7bbb      	ldrb	r3, [r7, #14]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d007      	beq.n	8009388 <USBD_StdEPReq+0x164>
 8009378:	7bbb      	ldrb	r3, [r7, #14]
 800937a:	2b80      	cmp	r3, #128	; 0x80
 800937c:	d004      	beq.n	8009388 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800937e:	6839      	ldr	r1, [r7, #0]
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f000 fbf5 	bl	8009b70 <USBD_CtlError>
          break;
 8009386:	e091      	b.n	80094ac <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009388:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800938c:	2b00      	cmp	r3, #0
 800938e:	da0b      	bge.n	80093a8 <USBD_StdEPReq+0x184>
 8009390:	7bbb      	ldrb	r3, [r7, #14]
 8009392:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009396:	4613      	mov	r3, r2
 8009398:	009b      	lsls	r3, r3, #2
 800939a:	4413      	add	r3, r2
 800939c:	009b      	lsls	r3, r3, #2
 800939e:	3310      	adds	r3, #16
 80093a0:	687a      	ldr	r2, [r7, #4]
 80093a2:	4413      	add	r3, r2
 80093a4:	3304      	adds	r3, #4
 80093a6:	e00b      	b.n	80093c0 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80093a8:	7bbb      	ldrb	r3, [r7, #14]
 80093aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80093ae:	4613      	mov	r3, r2
 80093b0:	009b      	lsls	r3, r3, #2
 80093b2:	4413      	add	r3, r2
 80093b4:	009b      	lsls	r3, r3, #2
 80093b6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80093ba:	687a      	ldr	r2, [r7, #4]
 80093bc:	4413      	add	r3, r2
 80093be:	3304      	adds	r3, #4
 80093c0:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	2200      	movs	r2, #0
 80093c6:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	2202      	movs	r2, #2
 80093cc:	4619      	mov	r1, r3
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 fc3f 	bl	8009c52 <USBD_CtlSendData>
        break;
 80093d4:	e06a      	b.n	80094ac <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80093d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	da11      	bge.n	8009402 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80093de:	7bbb      	ldrb	r3, [r7, #14]
 80093e0:	f003 020f 	and.w	r2, r3, #15
 80093e4:	6879      	ldr	r1, [r7, #4]
 80093e6:	4613      	mov	r3, r2
 80093e8:	009b      	lsls	r3, r3, #2
 80093ea:	4413      	add	r3, r2
 80093ec:	009b      	lsls	r3, r3, #2
 80093ee:	440b      	add	r3, r1
 80093f0:	3324      	adds	r3, #36	; 0x24
 80093f2:	881b      	ldrh	r3, [r3, #0]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d117      	bne.n	8009428 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80093f8:	6839      	ldr	r1, [r7, #0]
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f000 fbb8 	bl	8009b70 <USBD_CtlError>
            break;
 8009400:	e054      	b.n	80094ac <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009402:	7bbb      	ldrb	r3, [r7, #14]
 8009404:	f003 020f 	and.w	r2, r3, #15
 8009408:	6879      	ldr	r1, [r7, #4]
 800940a:	4613      	mov	r3, r2
 800940c:	009b      	lsls	r3, r3, #2
 800940e:	4413      	add	r3, r2
 8009410:	009b      	lsls	r3, r3, #2
 8009412:	440b      	add	r3, r1
 8009414:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009418:	881b      	ldrh	r3, [r3, #0]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d104      	bne.n	8009428 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800941e:	6839      	ldr	r1, [r7, #0]
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f000 fba5 	bl	8009b70 <USBD_CtlError>
            break;
 8009426:	e041      	b.n	80094ac <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009428:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800942c:	2b00      	cmp	r3, #0
 800942e:	da0b      	bge.n	8009448 <USBD_StdEPReq+0x224>
 8009430:	7bbb      	ldrb	r3, [r7, #14]
 8009432:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009436:	4613      	mov	r3, r2
 8009438:	009b      	lsls	r3, r3, #2
 800943a:	4413      	add	r3, r2
 800943c:	009b      	lsls	r3, r3, #2
 800943e:	3310      	adds	r3, #16
 8009440:	687a      	ldr	r2, [r7, #4]
 8009442:	4413      	add	r3, r2
 8009444:	3304      	adds	r3, #4
 8009446:	e00b      	b.n	8009460 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8009448:	7bbb      	ldrb	r3, [r7, #14]
 800944a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800944e:	4613      	mov	r3, r2
 8009450:	009b      	lsls	r3, r3, #2
 8009452:	4413      	add	r3, r2
 8009454:	009b      	lsls	r3, r3, #2
 8009456:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800945a:	687a      	ldr	r2, [r7, #4]
 800945c:	4413      	add	r3, r2
 800945e:	3304      	adds	r3, #4
 8009460:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009462:	7bbb      	ldrb	r3, [r7, #14]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d002      	beq.n	800946e <USBD_StdEPReq+0x24a>
 8009468:	7bbb      	ldrb	r3, [r7, #14]
 800946a:	2b80      	cmp	r3, #128	; 0x80
 800946c:	d103      	bne.n	8009476 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	2200      	movs	r2, #0
 8009472:	601a      	str	r2, [r3, #0]
 8009474:	e00e      	b.n	8009494 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009476:	7bbb      	ldrb	r3, [r7, #14]
 8009478:	4619      	mov	r1, r3
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f007 ff3e 	bl	80112fc <USBD_LL_IsStallEP>
 8009480:	4603      	mov	r3, r0
 8009482:	2b00      	cmp	r3, #0
 8009484:	d003      	beq.n	800948e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	2201      	movs	r2, #1
 800948a:	601a      	str	r2, [r3, #0]
 800948c:	e002      	b.n	8009494 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	2200      	movs	r2, #0
 8009492:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	2202      	movs	r2, #2
 8009498:	4619      	mov	r1, r3
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f000 fbd9 	bl	8009c52 <USBD_CtlSendData>
          break;
 80094a0:	e004      	b.n	80094ac <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 80094a2:	6839      	ldr	r1, [r7, #0]
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f000 fb63 	bl	8009b70 <USBD_CtlError>
        break;
 80094aa:	bf00      	nop
      }
      break;
 80094ac:	e004      	b.n	80094b8 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 80094ae:	6839      	ldr	r1, [r7, #0]
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	f000 fb5d 	bl	8009b70 <USBD_CtlError>
      break;
 80094b6:	bf00      	nop
    }
    break;
 80094b8:	e004      	b.n	80094c4 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 80094ba:	6839      	ldr	r1, [r7, #0]
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f000 fb57 	bl	8009b70 <USBD_CtlError>
    break;
 80094c2:	bf00      	nop
  }

  return ret;
 80094c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	3710      	adds	r7, #16
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}
	...

080094d0 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b084      	sub	sp, #16
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
 80094d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80094da:	2300      	movs	r3, #0
 80094dc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80094de:	2300      	movs	r3, #0
 80094e0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80094e2:	2300      	movs	r3, #0
 80094e4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	885b      	ldrh	r3, [r3, #2]
 80094ea:	0a1b      	lsrs	r3, r3, #8
 80094ec:	b29b      	uxth	r3, r3
 80094ee:	3b01      	subs	r3, #1
 80094f0:	2b0e      	cmp	r3, #14
 80094f2:	f200 8152 	bhi.w	800979a <USBD_GetDescriptor+0x2ca>
 80094f6:	a201      	add	r2, pc, #4	; (adr r2, 80094fc <USBD_GetDescriptor+0x2c>)
 80094f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094fc:	0800956d 	.word	0x0800956d
 8009500:	08009585 	.word	0x08009585
 8009504:	080095c5 	.word	0x080095c5
 8009508:	0800979b 	.word	0x0800979b
 800950c:	0800979b 	.word	0x0800979b
 8009510:	0800973b 	.word	0x0800973b
 8009514:	08009767 	.word	0x08009767
 8009518:	0800979b 	.word	0x0800979b
 800951c:	0800979b 	.word	0x0800979b
 8009520:	0800979b 	.word	0x0800979b
 8009524:	0800979b 	.word	0x0800979b
 8009528:	0800979b 	.word	0x0800979b
 800952c:	0800979b 	.word	0x0800979b
 8009530:	0800979b 	.word	0x0800979b
 8009534:	08009539 	.word	0x08009539
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800953e:	69db      	ldr	r3, [r3, #28]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d00b      	beq.n	800955c <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800954a:	69db      	ldr	r3, [r3, #28]
 800954c:	687a      	ldr	r2, [r7, #4]
 800954e:	7c12      	ldrb	r2, [r2, #16]
 8009550:	f107 0108 	add.w	r1, r7, #8
 8009554:	4610      	mov	r0, r2
 8009556:	4798      	blx	r3
 8009558:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800955a:	e126      	b.n	80097aa <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800955c:	6839      	ldr	r1, [r7, #0]
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f000 fb06 	bl	8009b70 <USBD_CtlError>
      err++;
 8009564:	7afb      	ldrb	r3, [r7, #11]
 8009566:	3301      	adds	r3, #1
 8009568:	72fb      	strb	r3, [r7, #11]
    break;
 800956a:	e11e      	b.n	80097aa <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	687a      	ldr	r2, [r7, #4]
 8009576:	7c12      	ldrb	r2, [r2, #16]
 8009578:	f107 0108 	add.w	r1, r7, #8
 800957c:	4610      	mov	r0, r2
 800957e:	4798      	blx	r3
 8009580:	60f8      	str	r0, [r7, #12]
    break;
 8009582:	e112      	b.n	80097aa <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	7c1b      	ldrb	r3, [r3, #16]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d10d      	bne.n	80095a8 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009594:	f107 0208 	add.w	r2, r7, #8
 8009598:	4610      	mov	r0, r2
 800959a:	4798      	blx	r3
 800959c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	3301      	adds	r3, #1
 80095a2:	2202      	movs	r2, #2
 80095a4:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80095a6:	e100      	b.n	80097aa <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095b0:	f107 0208 	add.w	r2, r7, #8
 80095b4:	4610      	mov	r0, r2
 80095b6:	4798      	blx	r3
 80095b8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	3301      	adds	r3, #1
 80095be:	2202      	movs	r2, #2
 80095c0:	701a      	strb	r2, [r3, #0]
    break;
 80095c2:	e0f2      	b.n	80097aa <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	885b      	ldrh	r3, [r3, #2]
 80095c8:	b2db      	uxtb	r3, r3
 80095ca:	2b05      	cmp	r3, #5
 80095cc:	f200 80ac 	bhi.w	8009728 <USBD_GetDescriptor+0x258>
 80095d0:	a201      	add	r2, pc, #4	; (adr r2, 80095d8 <USBD_GetDescriptor+0x108>)
 80095d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095d6:	bf00      	nop
 80095d8:	080095f1 	.word	0x080095f1
 80095dc:	08009625 	.word	0x08009625
 80095e0:	08009659 	.word	0x08009659
 80095e4:	0800968d 	.word	0x0800968d
 80095e8:	080096c1 	.word	0x080096c1
 80095ec:	080096f5 	.word	0x080096f5
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095f6:	685b      	ldr	r3, [r3, #4]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d00b      	beq.n	8009614 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009602:	685b      	ldr	r3, [r3, #4]
 8009604:	687a      	ldr	r2, [r7, #4]
 8009606:	7c12      	ldrb	r2, [r2, #16]
 8009608:	f107 0108 	add.w	r1, r7, #8
 800960c:	4610      	mov	r0, r2
 800960e:	4798      	blx	r3
 8009610:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009612:	e091      	b.n	8009738 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8009614:	6839      	ldr	r1, [r7, #0]
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f000 faaa 	bl	8009b70 <USBD_CtlError>
        err++;
 800961c:	7afb      	ldrb	r3, [r7, #11]
 800961e:	3301      	adds	r3, #1
 8009620:	72fb      	strb	r3, [r7, #11]
      break;
 8009622:	e089      	b.n	8009738 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800962a:	689b      	ldr	r3, [r3, #8]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d00b      	beq.n	8009648 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009636:	689b      	ldr	r3, [r3, #8]
 8009638:	687a      	ldr	r2, [r7, #4]
 800963a:	7c12      	ldrb	r2, [r2, #16]
 800963c:	f107 0108 	add.w	r1, r7, #8
 8009640:	4610      	mov	r0, r2
 8009642:	4798      	blx	r3
 8009644:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009646:	e077      	b.n	8009738 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8009648:	6839      	ldr	r1, [r7, #0]
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f000 fa90 	bl	8009b70 <USBD_CtlError>
        err++;
 8009650:	7afb      	ldrb	r3, [r7, #11]
 8009652:	3301      	adds	r3, #1
 8009654:	72fb      	strb	r3, [r7, #11]
      break;
 8009656:	e06f      	b.n	8009738 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800965e:	68db      	ldr	r3, [r3, #12]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d00b      	beq.n	800967c <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800966a:	68db      	ldr	r3, [r3, #12]
 800966c:	687a      	ldr	r2, [r7, #4]
 800966e:	7c12      	ldrb	r2, [r2, #16]
 8009670:	f107 0108 	add.w	r1, r7, #8
 8009674:	4610      	mov	r0, r2
 8009676:	4798      	blx	r3
 8009678:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800967a:	e05d      	b.n	8009738 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800967c:	6839      	ldr	r1, [r7, #0]
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f000 fa76 	bl	8009b70 <USBD_CtlError>
        err++;
 8009684:	7afb      	ldrb	r3, [r7, #11]
 8009686:	3301      	adds	r3, #1
 8009688:	72fb      	strb	r3, [r7, #11]
      break;
 800968a:	e055      	b.n	8009738 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009692:	691b      	ldr	r3, [r3, #16]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d00b      	beq.n	80096b0 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800969e:	691b      	ldr	r3, [r3, #16]
 80096a0:	687a      	ldr	r2, [r7, #4]
 80096a2:	7c12      	ldrb	r2, [r2, #16]
 80096a4:	f107 0108 	add.w	r1, r7, #8
 80096a8:	4610      	mov	r0, r2
 80096aa:	4798      	blx	r3
 80096ac:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80096ae:	e043      	b.n	8009738 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80096b0:	6839      	ldr	r1, [r7, #0]
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f000 fa5c 	bl	8009b70 <USBD_CtlError>
        err++;
 80096b8:	7afb      	ldrb	r3, [r7, #11]
 80096ba:	3301      	adds	r3, #1
 80096bc:	72fb      	strb	r3, [r7, #11]
      break;
 80096be:	e03b      	b.n	8009738 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096c6:	695b      	ldr	r3, [r3, #20]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d00b      	beq.n	80096e4 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096d2:	695b      	ldr	r3, [r3, #20]
 80096d4:	687a      	ldr	r2, [r7, #4]
 80096d6:	7c12      	ldrb	r2, [r2, #16]
 80096d8:	f107 0108 	add.w	r1, r7, #8
 80096dc:	4610      	mov	r0, r2
 80096de:	4798      	blx	r3
 80096e0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80096e2:	e029      	b.n	8009738 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80096e4:	6839      	ldr	r1, [r7, #0]
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f000 fa42 	bl	8009b70 <USBD_CtlError>
        err++;
 80096ec:	7afb      	ldrb	r3, [r7, #11]
 80096ee:	3301      	adds	r3, #1
 80096f0:	72fb      	strb	r3, [r7, #11]
      break;
 80096f2:	e021      	b.n	8009738 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096fa:	699b      	ldr	r3, [r3, #24]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d00b      	beq.n	8009718 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009706:	699b      	ldr	r3, [r3, #24]
 8009708:	687a      	ldr	r2, [r7, #4]
 800970a:	7c12      	ldrb	r2, [r2, #16]
 800970c:	f107 0108 	add.w	r1, r7, #8
 8009710:	4610      	mov	r0, r2
 8009712:	4798      	blx	r3
 8009714:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009716:	e00f      	b.n	8009738 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8009718:	6839      	ldr	r1, [r7, #0]
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f000 fa28 	bl	8009b70 <USBD_CtlError>
        err++;
 8009720:	7afb      	ldrb	r3, [r7, #11]
 8009722:	3301      	adds	r3, #1
 8009724:	72fb      	strb	r3, [r7, #11]
      break;
 8009726:	e007      	b.n	8009738 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8009728:	6839      	ldr	r1, [r7, #0]
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f000 fa20 	bl	8009b70 <USBD_CtlError>
      err++;
 8009730:	7afb      	ldrb	r3, [r7, #11]
 8009732:	3301      	adds	r3, #1
 8009734:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8009736:	bf00      	nop
    }
    break;
 8009738:	e037      	b.n	80097aa <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	7c1b      	ldrb	r3, [r3, #16]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d109      	bne.n	8009756 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800974a:	f107 0208 	add.w	r2, r7, #8
 800974e:	4610      	mov	r0, r2
 8009750:	4798      	blx	r3
 8009752:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8009754:	e029      	b.n	80097aa <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8009756:	6839      	ldr	r1, [r7, #0]
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	f000 fa09 	bl	8009b70 <USBD_CtlError>
      err++;
 800975e:	7afb      	ldrb	r3, [r7, #11]
 8009760:	3301      	adds	r3, #1
 8009762:	72fb      	strb	r3, [r7, #11]
    break;
 8009764:	e021      	b.n	80097aa <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	7c1b      	ldrb	r3, [r3, #16]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d10d      	bne.n	800978a <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009776:	f107 0208 	add.w	r2, r7, #8
 800977a:	4610      	mov	r0, r2
 800977c:	4798      	blx	r3
 800977e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	3301      	adds	r3, #1
 8009784:	2207      	movs	r2, #7
 8009786:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8009788:	e00f      	b.n	80097aa <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800978a:	6839      	ldr	r1, [r7, #0]
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f000 f9ef 	bl	8009b70 <USBD_CtlError>
      err++;
 8009792:	7afb      	ldrb	r3, [r7, #11]
 8009794:	3301      	adds	r3, #1
 8009796:	72fb      	strb	r3, [r7, #11]
    break;
 8009798:	e007      	b.n	80097aa <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800979a:	6839      	ldr	r1, [r7, #0]
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f000 f9e7 	bl	8009b70 <USBD_CtlError>
    err++;
 80097a2:	7afb      	ldrb	r3, [r7, #11]
 80097a4:	3301      	adds	r3, #1
 80097a6:	72fb      	strb	r3, [r7, #11]
    break;
 80097a8:	bf00      	nop
  }

  if (err != 0U)
 80097aa:	7afb      	ldrb	r3, [r7, #11]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d11e      	bne.n	80097ee <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	88db      	ldrh	r3, [r3, #6]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d016      	beq.n	80097e6 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 80097b8:	893b      	ldrh	r3, [r7, #8]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d00e      	beq.n	80097dc <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	88da      	ldrh	r2, [r3, #6]
 80097c2:	893b      	ldrh	r3, [r7, #8]
 80097c4:	4293      	cmp	r3, r2
 80097c6:	bf28      	it	cs
 80097c8:	4613      	movcs	r3, r2
 80097ca:	b29b      	uxth	r3, r3
 80097cc:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80097ce:	893b      	ldrh	r3, [r7, #8]
 80097d0:	461a      	mov	r2, r3
 80097d2:	68f9      	ldr	r1, [r7, #12]
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f000 fa3c 	bl	8009c52 <USBD_CtlSendData>
 80097da:	e009      	b.n	80097f0 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80097dc:	6839      	ldr	r1, [r7, #0]
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f000 f9c6 	bl	8009b70 <USBD_CtlError>
 80097e4:	e004      	b.n	80097f0 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f000 fa8d 	bl	8009d06 <USBD_CtlSendStatus>
 80097ec:	e000      	b.n	80097f0 <USBD_GetDescriptor+0x320>
    return;
 80097ee:	bf00      	nop
    }
  }
}
 80097f0:	3710      	adds	r7, #16
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}
 80097f6:	bf00      	nop

080097f8 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b084      	sub	sp, #16
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
 8009800:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	889b      	ldrh	r3, [r3, #4]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d130      	bne.n	800986c <USBD_SetAddress+0x74>
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	88db      	ldrh	r3, [r3, #6]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d12c      	bne.n	800986c <USBD_SetAddress+0x74>
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	885b      	ldrh	r3, [r3, #2]
 8009816:	2b7f      	cmp	r3, #127	; 0x7f
 8009818:	d828      	bhi.n	800986c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	885b      	ldrh	r3, [r3, #2]
 800981e:	b2db      	uxtb	r3, r3
 8009820:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009824:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800982c:	2b03      	cmp	r3, #3
 800982e:	d104      	bne.n	800983a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009830:	6839      	ldr	r1, [r7, #0]
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f000 f99c 	bl	8009b70 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009838:	e01c      	b.n	8009874 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	7bfa      	ldrb	r2, [r7, #15]
 800983e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009842:	7bfb      	ldrb	r3, [r7, #15]
 8009844:	4619      	mov	r1, r3
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f007 fd84 	bl	8011354 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f000 fa5a 	bl	8009d06 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009852:	7bfb      	ldrb	r3, [r7, #15]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d004      	beq.n	8009862 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2202      	movs	r2, #2
 800985c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009860:	e008      	b.n	8009874 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2201      	movs	r2, #1
 8009866:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800986a:	e003      	b.n	8009874 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800986c:	6839      	ldr	r1, [r7, #0]
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f000 f97e 	bl	8009b70 <USBD_CtlError>
  }
}
 8009874:	bf00      	nop
 8009876:	3710      	adds	r7, #16
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}

0800987c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b084      	sub	sp, #16
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
 8009884:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009886:	2300      	movs	r3, #0
 8009888:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	885b      	ldrh	r3, [r3, #2]
 800988e:	b2da      	uxtb	r2, r3
 8009890:	4b4b      	ldr	r3, [pc, #300]	; (80099c0 <USBD_SetConfig+0x144>)
 8009892:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009894:	4b4a      	ldr	r3, [pc, #296]	; (80099c0 <USBD_SetConfig+0x144>)
 8009896:	781b      	ldrb	r3, [r3, #0]
 8009898:	2b01      	cmp	r3, #1
 800989a:	d905      	bls.n	80098a8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800989c:	6839      	ldr	r1, [r7, #0]
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f000 f966 	bl	8009b70 <USBD_CtlError>
    return USBD_FAIL;
 80098a4:	2303      	movs	r3, #3
 80098a6:	e087      	b.n	80099b8 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098ae:	2b02      	cmp	r3, #2
 80098b0:	d002      	beq.n	80098b8 <USBD_SetConfig+0x3c>
 80098b2:	2b03      	cmp	r3, #3
 80098b4:	d025      	beq.n	8009902 <USBD_SetConfig+0x86>
 80098b6:	e071      	b.n	800999c <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80098b8:	4b41      	ldr	r3, [pc, #260]	; (80099c0 <USBD_SetConfig+0x144>)
 80098ba:	781b      	ldrb	r3, [r3, #0]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d01c      	beq.n	80098fa <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80098c0:	4b3f      	ldr	r3, [pc, #252]	; (80099c0 <USBD_SetConfig+0x144>)
 80098c2:	781b      	ldrb	r3, [r3, #0]
 80098c4:	461a      	mov	r2, r3
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80098ca:	4b3d      	ldr	r3, [pc, #244]	; (80099c0 <USBD_SetConfig+0x144>)
 80098cc:	781b      	ldrb	r3, [r3, #0]
 80098ce:	4619      	mov	r1, r3
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f7ff f97d 	bl	8008bd0 <USBD_SetClassConfig>
 80098d6:	4603      	mov	r3, r0
 80098d8:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80098da:	7bfb      	ldrb	r3, [r7, #15]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d004      	beq.n	80098ea <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 80098e0:	6839      	ldr	r1, [r7, #0]
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f000 f944 	bl	8009b70 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80098e8:	e065      	b.n	80099b6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f000 fa0b 	bl	8009d06 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2203      	movs	r2, #3
 80098f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80098f8:	e05d      	b.n	80099b6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f000 fa03 	bl	8009d06 <USBD_CtlSendStatus>
    break;
 8009900:	e059      	b.n	80099b6 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8009902:	4b2f      	ldr	r3, [pc, #188]	; (80099c0 <USBD_SetConfig+0x144>)
 8009904:	781b      	ldrb	r3, [r3, #0]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d112      	bne.n	8009930 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2202      	movs	r2, #2
 800990e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8009912:	4b2b      	ldr	r3, [pc, #172]	; (80099c0 <USBD_SetConfig+0x144>)
 8009914:	781b      	ldrb	r3, [r3, #0]
 8009916:	461a      	mov	r2, r3
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800991c:	4b28      	ldr	r3, [pc, #160]	; (80099c0 <USBD_SetConfig+0x144>)
 800991e:	781b      	ldrb	r3, [r3, #0]
 8009920:	4619      	mov	r1, r3
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f7ff f970 	bl	8008c08 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f000 f9ec 	bl	8009d06 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800992e:	e042      	b.n	80099b6 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8009930:	4b23      	ldr	r3, [pc, #140]	; (80099c0 <USBD_SetConfig+0x144>)
 8009932:	781b      	ldrb	r3, [r3, #0]
 8009934:	461a      	mov	r2, r3
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	685b      	ldr	r3, [r3, #4]
 800993a:	429a      	cmp	r2, r3
 800993c:	d02a      	beq.n	8009994 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	685b      	ldr	r3, [r3, #4]
 8009942:	b2db      	uxtb	r3, r3
 8009944:	4619      	mov	r1, r3
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f7ff f95e 	bl	8008c08 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800994c:	4b1c      	ldr	r3, [pc, #112]	; (80099c0 <USBD_SetConfig+0x144>)
 800994e:	781b      	ldrb	r3, [r3, #0]
 8009950:	461a      	mov	r2, r3
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8009956:	4b1a      	ldr	r3, [pc, #104]	; (80099c0 <USBD_SetConfig+0x144>)
 8009958:	781b      	ldrb	r3, [r3, #0]
 800995a:	4619      	mov	r1, r3
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f7ff f937 	bl	8008bd0 <USBD_SetClassConfig>
 8009962:	4603      	mov	r3, r0
 8009964:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8009966:	7bfb      	ldrb	r3, [r7, #15]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d00f      	beq.n	800998c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800996c:	6839      	ldr	r1, [r7, #0]
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f000 f8fe 	bl	8009b70 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	685b      	ldr	r3, [r3, #4]
 8009978:	b2db      	uxtb	r3, r3
 800997a:	4619      	mov	r1, r3
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f7ff f943 	bl	8008c08 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2202      	movs	r2, #2
 8009986:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800998a:	e014      	b.n	80099b6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f000 f9ba 	bl	8009d06 <USBD_CtlSendStatus>
    break;
 8009992:	e010      	b.n	80099b6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	f000 f9b6 	bl	8009d06 <USBD_CtlSendStatus>
    break;
 800999a:	e00c      	b.n	80099b6 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800999c:	6839      	ldr	r1, [r7, #0]
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f000 f8e6 	bl	8009b70 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80099a4:	4b06      	ldr	r3, [pc, #24]	; (80099c0 <USBD_SetConfig+0x144>)
 80099a6:	781b      	ldrb	r3, [r3, #0]
 80099a8:	4619      	mov	r1, r3
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f7ff f92c 	bl	8008c08 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80099b0:	2303      	movs	r3, #3
 80099b2:	73fb      	strb	r3, [r7, #15]
    break;
 80099b4:	bf00      	nop
  }

  return ret;
 80099b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	3710      	adds	r7, #16
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}
 80099c0:	2000021c 	.word	0x2000021c

080099c4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b082      	sub	sp, #8
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
 80099cc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	88db      	ldrh	r3, [r3, #6]
 80099d2:	2b01      	cmp	r3, #1
 80099d4:	d004      	beq.n	80099e0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80099d6:	6839      	ldr	r1, [r7, #0]
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f000 f8c9 	bl	8009b70 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80099de:	e021      	b.n	8009a24 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099e6:	2b01      	cmp	r3, #1
 80099e8:	db17      	blt.n	8009a1a <USBD_GetConfig+0x56>
 80099ea:	2b02      	cmp	r3, #2
 80099ec:	dd02      	ble.n	80099f4 <USBD_GetConfig+0x30>
 80099ee:	2b03      	cmp	r3, #3
 80099f0:	d00b      	beq.n	8009a0a <USBD_GetConfig+0x46>
 80099f2:	e012      	b.n	8009a1a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2200      	movs	r2, #0
 80099f8:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	3308      	adds	r3, #8
 80099fe:	2201      	movs	r2, #1
 8009a00:	4619      	mov	r1, r3
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f000 f925 	bl	8009c52 <USBD_CtlSendData>
      break;
 8009a08:	e00c      	b.n	8009a24 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	3304      	adds	r3, #4
 8009a0e:	2201      	movs	r2, #1
 8009a10:	4619      	mov	r1, r3
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f000 f91d 	bl	8009c52 <USBD_CtlSendData>
      break;
 8009a18:	e004      	b.n	8009a24 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8009a1a:	6839      	ldr	r1, [r7, #0]
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f000 f8a7 	bl	8009b70 <USBD_CtlError>
      break;
 8009a22:	bf00      	nop
}
 8009a24:	bf00      	nop
 8009a26:	3708      	adds	r7, #8
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}

08009a2c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b082      	sub	sp, #8
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
 8009a34:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a3c:	3b01      	subs	r3, #1
 8009a3e:	2b02      	cmp	r3, #2
 8009a40:	d81e      	bhi.n	8009a80 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	88db      	ldrh	r3, [r3, #6]
 8009a46:	2b02      	cmp	r3, #2
 8009a48:	d004      	beq.n	8009a54 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8009a4a:	6839      	ldr	r1, [r7, #0]
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f000 f88f 	bl	8009b70 <USBD_CtlError>
      break;
 8009a52:	e01a      	b.n	8009a8a <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2201      	movs	r2, #1
 8009a58:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d005      	beq.n	8009a70 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	68db      	ldr	r3, [r3, #12]
 8009a68:	f043 0202 	orr.w	r2, r3, #2
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	330c      	adds	r3, #12
 8009a74:	2202      	movs	r2, #2
 8009a76:	4619      	mov	r1, r3
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f000 f8ea 	bl	8009c52 <USBD_CtlSendData>
    break;
 8009a7e:	e004      	b.n	8009a8a <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8009a80:	6839      	ldr	r1, [r7, #0]
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f000 f874 	bl	8009b70 <USBD_CtlError>
    break;
 8009a88:	bf00      	nop
  }
}
 8009a8a:	bf00      	nop
 8009a8c:	3708      	adds	r7, #8
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}

08009a92 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a92:	b580      	push	{r7, lr}
 8009a94:	b082      	sub	sp, #8
 8009a96:	af00      	add	r7, sp, #0
 8009a98:	6078      	str	r0, [r7, #4]
 8009a9a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	885b      	ldrh	r3, [r3, #2]
 8009aa0:	2b01      	cmp	r3, #1
 8009aa2:	d106      	bne.n	8009ab2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f000 f92a 	bl	8009d06 <USBD_CtlSendStatus>
  }
}
 8009ab2:	bf00      	nop
 8009ab4:	3708      	adds	r7, #8
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}

08009aba <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009aba:	b580      	push	{r7, lr}
 8009abc:	b082      	sub	sp, #8
 8009abe:	af00      	add	r7, sp, #0
 8009ac0:	6078      	str	r0, [r7, #4]
 8009ac2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009aca:	3b01      	subs	r3, #1
 8009acc:	2b02      	cmp	r3, #2
 8009ace:	d80b      	bhi.n	8009ae8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	885b      	ldrh	r3, [r3, #2]
 8009ad4:	2b01      	cmp	r3, #1
 8009ad6:	d10c      	bne.n	8009af2 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2200      	movs	r2, #0
 8009adc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f000 f910 	bl	8009d06 <USBD_CtlSendStatus>
      }
      break;
 8009ae6:	e004      	b.n	8009af2 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009ae8:	6839      	ldr	r1, [r7, #0]
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f000 f840 	bl	8009b70 <USBD_CtlError>
      break;
 8009af0:	e000      	b.n	8009af4 <USBD_ClrFeature+0x3a>
      break;
 8009af2:	bf00      	nop
  }
}
 8009af4:	bf00      	nop
 8009af6:	3708      	adds	r7, #8
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}

08009afc <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b084      	sub	sp, #16
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
 8009b04:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	781a      	ldrb	r2, [r3, #0]
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	3301      	adds	r3, #1
 8009b16:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	781a      	ldrb	r2, [r3, #0]
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	3301      	adds	r3, #1
 8009b24:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009b26:	68f8      	ldr	r0, [r7, #12]
 8009b28:	f7ff faa9 	bl	800907e <SWAPBYTE>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	461a      	mov	r2, r3
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	3301      	adds	r3, #1
 8009b38:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	3301      	adds	r3, #1
 8009b3e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009b40:	68f8      	ldr	r0, [r7, #12]
 8009b42:	f7ff fa9c 	bl	800907e <SWAPBYTE>
 8009b46:	4603      	mov	r3, r0
 8009b48:	461a      	mov	r2, r3
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	3301      	adds	r3, #1
 8009b52:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	3301      	adds	r3, #1
 8009b58:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009b5a:	68f8      	ldr	r0, [r7, #12]
 8009b5c:	f7ff fa8f 	bl	800907e <SWAPBYTE>
 8009b60:	4603      	mov	r3, r0
 8009b62:	461a      	mov	r2, r3
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	80da      	strh	r2, [r3, #6]
}
 8009b68:	bf00      	nop
 8009b6a:	3710      	adds	r7, #16
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}

08009b70 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b082      	sub	sp, #8
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
 8009b78:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009b7a:	2180      	movs	r1, #128	; 0x80
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f007 fb7f 	bl	8011280 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009b82:	2100      	movs	r1, #0
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f007 fb7b 	bl	8011280 <USBD_LL_StallEP>
}
 8009b8a:	bf00      	nop
 8009b8c:	3708      	adds	r7, #8
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}

08009b92 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009b92:	b580      	push	{r7, lr}
 8009b94:	b086      	sub	sp, #24
 8009b96:	af00      	add	r7, sp, #0
 8009b98:	60f8      	str	r0, [r7, #12]
 8009b9a:	60b9      	str	r1, [r7, #8]
 8009b9c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d036      	beq.n	8009c16 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009bac:	6938      	ldr	r0, [r7, #16]
 8009bae:	f000 f836 	bl	8009c1e <USBD_GetLen>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	3301      	adds	r3, #1
 8009bb6:	b29b      	uxth	r3, r3
 8009bb8:	005b      	lsls	r3, r3, #1
 8009bba:	b29a      	uxth	r2, r3
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009bc0:	7dfb      	ldrb	r3, [r7, #23]
 8009bc2:	68ba      	ldr	r2, [r7, #8]
 8009bc4:	4413      	add	r3, r2
 8009bc6:	687a      	ldr	r2, [r7, #4]
 8009bc8:	7812      	ldrb	r2, [r2, #0]
 8009bca:	701a      	strb	r2, [r3, #0]
  idx++;
 8009bcc:	7dfb      	ldrb	r3, [r7, #23]
 8009bce:	3301      	adds	r3, #1
 8009bd0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009bd2:	7dfb      	ldrb	r3, [r7, #23]
 8009bd4:	68ba      	ldr	r2, [r7, #8]
 8009bd6:	4413      	add	r3, r2
 8009bd8:	2203      	movs	r2, #3
 8009bda:	701a      	strb	r2, [r3, #0]
  idx++;
 8009bdc:	7dfb      	ldrb	r3, [r7, #23]
 8009bde:	3301      	adds	r3, #1
 8009be0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009be2:	e013      	b.n	8009c0c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009be4:	7dfb      	ldrb	r3, [r7, #23]
 8009be6:	68ba      	ldr	r2, [r7, #8]
 8009be8:	4413      	add	r3, r2
 8009bea:	693a      	ldr	r2, [r7, #16]
 8009bec:	7812      	ldrb	r2, [r2, #0]
 8009bee:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009bf0:	693b      	ldr	r3, [r7, #16]
 8009bf2:	3301      	adds	r3, #1
 8009bf4:	613b      	str	r3, [r7, #16]
    idx++;
 8009bf6:	7dfb      	ldrb	r3, [r7, #23]
 8009bf8:	3301      	adds	r3, #1
 8009bfa:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009bfc:	7dfb      	ldrb	r3, [r7, #23]
 8009bfe:	68ba      	ldr	r2, [r7, #8]
 8009c00:	4413      	add	r3, r2
 8009c02:	2200      	movs	r2, #0
 8009c04:	701a      	strb	r2, [r3, #0]
    idx++;
 8009c06:	7dfb      	ldrb	r3, [r7, #23]
 8009c08:	3301      	adds	r3, #1
 8009c0a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009c0c:	693b      	ldr	r3, [r7, #16]
 8009c0e:	781b      	ldrb	r3, [r3, #0]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d1e7      	bne.n	8009be4 <USBD_GetString+0x52>
 8009c14:	e000      	b.n	8009c18 <USBD_GetString+0x86>
    return;
 8009c16:	bf00      	nop
  }
}
 8009c18:	3718      	adds	r7, #24
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}

08009c1e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009c1e:	b480      	push	{r7}
 8009c20:	b085      	sub	sp, #20
 8009c22:	af00      	add	r7, sp, #0
 8009c24:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009c26:	2300      	movs	r3, #0
 8009c28:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009c2e:	e005      	b.n	8009c3c <USBD_GetLen+0x1e>
  {
    len++;
 8009c30:	7bfb      	ldrb	r3, [r7, #15]
 8009c32:	3301      	adds	r3, #1
 8009c34:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	3301      	adds	r3, #1
 8009c3a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	781b      	ldrb	r3, [r3, #0]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d1f5      	bne.n	8009c30 <USBD_GetLen+0x12>
  }

  return len;
 8009c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	3714      	adds	r7, #20
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c50:	4770      	bx	lr

08009c52 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009c52:	b580      	push	{r7, lr}
 8009c54:	b084      	sub	sp, #16
 8009c56:	af00      	add	r7, sp, #0
 8009c58:	60f8      	str	r0, [r7, #12]
 8009c5a:	60b9      	str	r1, [r7, #8]
 8009c5c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	2202      	movs	r2, #2
 8009c62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	687a      	ldr	r2, [r7, #4]
 8009c6a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	687a      	ldr	r2, [r7, #4]
 8009c70:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	68ba      	ldr	r2, [r7, #8]
 8009c76:	2100      	movs	r1, #0
 8009c78:	68f8      	ldr	r0, [r7, #12]
 8009c7a:	f007 fb8a 	bl	8011392 <USBD_LL_Transmit>

  return USBD_OK;
 8009c7e:	2300      	movs	r3, #0
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	3710      	adds	r7, #16
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}

08009c88 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b084      	sub	sp, #16
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	60f8      	str	r0, [r7, #12]
 8009c90:	60b9      	str	r1, [r7, #8]
 8009c92:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	68ba      	ldr	r2, [r7, #8]
 8009c98:	2100      	movs	r1, #0
 8009c9a:	68f8      	ldr	r0, [r7, #12]
 8009c9c:	f007 fb79 	bl	8011392 <USBD_LL_Transmit>

  return USBD_OK;
 8009ca0:	2300      	movs	r3, #0
}
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	3710      	adds	r7, #16
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bd80      	pop	{r7, pc}

08009caa <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009caa:	b580      	push	{r7, lr}
 8009cac:	b084      	sub	sp, #16
 8009cae:	af00      	add	r7, sp, #0
 8009cb0:	60f8      	str	r0, [r7, #12]
 8009cb2:	60b9      	str	r1, [r7, #8]
 8009cb4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	2203      	movs	r2, #3
 8009cba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	687a      	ldr	r2, [r7, #4]
 8009cc2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	687a      	ldr	r2, [r7, #4]
 8009cca:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	68ba      	ldr	r2, [r7, #8]
 8009cd2:	2100      	movs	r1, #0
 8009cd4:	68f8      	ldr	r0, [r7, #12]
 8009cd6:	f007 fb7d 	bl	80113d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009cda:	2300      	movs	r3, #0
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	3710      	adds	r7, #16
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}

08009ce4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b084      	sub	sp, #16
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	60f8      	str	r0, [r7, #12]
 8009cec:	60b9      	str	r1, [r7, #8]
 8009cee:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	68ba      	ldr	r2, [r7, #8]
 8009cf4:	2100      	movs	r1, #0
 8009cf6:	68f8      	ldr	r0, [r7, #12]
 8009cf8:	f007 fb6c 	bl	80113d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009cfc:	2300      	movs	r3, #0
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	3710      	adds	r7, #16
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}

08009d06 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009d06:	b580      	push	{r7, lr}
 8009d08:	b082      	sub	sp, #8
 8009d0a:	af00      	add	r7, sp, #0
 8009d0c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2204      	movs	r2, #4
 8009d12:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009d16:	2300      	movs	r3, #0
 8009d18:	2200      	movs	r2, #0
 8009d1a:	2100      	movs	r1, #0
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f007 fb38 	bl	8011392 <USBD_LL_Transmit>

  return USBD_OK;
 8009d22:	2300      	movs	r3, #0
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	3708      	adds	r7, #8
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}

08009d2c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b082      	sub	sp, #8
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2205      	movs	r2, #5
 8009d38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	2200      	movs	r2, #0
 8009d40:	2100      	movs	r1, #0
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f007 fb46 	bl	80113d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009d48:	2300      	movs	r3, #0
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3708      	adds	r7, #8
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}
	...

08009d54 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b084      	sub	sp, #16
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009d5e:	79fb      	ldrb	r3, [r7, #7]
 8009d60:	4a08      	ldr	r2, [pc, #32]	; (8009d84 <disk_status+0x30>)
 8009d62:	009b      	lsls	r3, r3, #2
 8009d64:	4413      	add	r3, r2
 8009d66:	685b      	ldr	r3, [r3, #4]
 8009d68:	685b      	ldr	r3, [r3, #4]
 8009d6a:	79fa      	ldrb	r2, [r7, #7]
 8009d6c:	4905      	ldr	r1, [pc, #20]	; (8009d84 <disk_status+0x30>)
 8009d6e:	440a      	add	r2, r1
 8009d70:	7a12      	ldrb	r2, [r2, #8]
 8009d72:	4610      	mov	r0, r2
 8009d74:	4798      	blx	r3
 8009d76:	4603      	mov	r3, r0
 8009d78:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3710      	adds	r7, #16
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}
 8009d84:	20000248 	.word	0x20000248

08009d88 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b084      	sub	sp, #16
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	4603      	mov	r3, r0
 8009d90:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009d92:	2300      	movs	r3, #0
 8009d94:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009d96:	79fb      	ldrb	r3, [r7, #7]
 8009d98:	4a0d      	ldr	r2, [pc, #52]	; (8009dd0 <disk_initialize+0x48>)
 8009d9a:	5cd3      	ldrb	r3, [r2, r3]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d111      	bne.n	8009dc4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009da0:	79fb      	ldrb	r3, [r7, #7]
 8009da2:	4a0b      	ldr	r2, [pc, #44]	; (8009dd0 <disk_initialize+0x48>)
 8009da4:	2101      	movs	r1, #1
 8009da6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009da8:	79fb      	ldrb	r3, [r7, #7]
 8009daa:	4a09      	ldr	r2, [pc, #36]	; (8009dd0 <disk_initialize+0x48>)
 8009dac:	009b      	lsls	r3, r3, #2
 8009dae:	4413      	add	r3, r2
 8009db0:	685b      	ldr	r3, [r3, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	79fa      	ldrb	r2, [r7, #7]
 8009db6:	4906      	ldr	r1, [pc, #24]	; (8009dd0 <disk_initialize+0x48>)
 8009db8:	440a      	add	r2, r1
 8009dba:	7a12      	ldrb	r2, [r2, #8]
 8009dbc:	4610      	mov	r0, r2
 8009dbe:	4798      	blx	r3
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3710      	adds	r7, #16
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}
 8009dce:	bf00      	nop
 8009dd0:	20000248 	.word	0x20000248

08009dd4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009dd4:	b590      	push	{r4, r7, lr}
 8009dd6:	b087      	sub	sp, #28
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	60b9      	str	r1, [r7, #8]
 8009ddc:	607a      	str	r2, [r7, #4]
 8009dde:	603b      	str	r3, [r7, #0]
 8009de0:	4603      	mov	r3, r0
 8009de2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009de4:	7bfb      	ldrb	r3, [r7, #15]
 8009de6:	4a0a      	ldr	r2, [pc, #40]	; (8009e10 <disk_read+0x3c>)
 8009de8:	009b      	lsls	r3, r3, #2
 8009dea:	4413      	add	r3, r2
 8009dec:	685b      	ldr	r3, [r3, #4]
 8009dee:	689c      	ldr	r4, [r3, #8]
 8009df0:	7bfb      	ldrb	r3, [r7, #15]
 8009df2:	4a07      	ldr	r2, [pc, #28]	; (8009e10 <disk_read+0x3c>)
 8009df4:	4413      	add	r3, r2
 8009df6:	7a18      	ldrb	r0, [r3, #8]
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	687a      	ldr	r2, [r7, #4]
 8009dfc:	68b9      	ldr	r1, [r7, #8]
 8009dfe:	47a0      	blx	r4
 8009e00:	4603      	mov	r3, r0
 8009e02:	75fb      	strb	r3, [r7, #23]
  return res;
 8009e04:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	371c      	adds	r7, #28
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd90      	pop	{r4, r7, pc}
 8009e0e:	bf00      	nop
 8009e10:	20000248 	.word	0x20000248

08009e14 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009e14:	b590      	push	{r4, r7, lr}
 8009e16:	b087      	sub	sp, #28
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	60b9      	str	r1, [r7, #8]
 8009e1c:	607a      	str	r2, [r7, #4]
 8009e1e:	603b      	str	r3, [r7, #0]
 8009e20:	4603      	mov	r3, r0
 8009e22:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009e24:	7bfb      	ldrb	r3, [r7, #15]
 8009e26:	4a0a      	ldr	r2, [pc, #40]	; (8009e50 <disk_write+0x3c>)
 8009e28:	009b      	lsls	r3, r3, #2
 8009e2a:	4413      	add	r3, r2
 8009e2c:	685b      	ldr	r3, [r3, #4]
 8009e2e:	68dc      	ldr	r4, [r3, #12]
 8009e30:	7bfb      	ldrb	r3, [r7, #15]
 8009e32:	4a07      	ldr	r2, [pc, #28]	; (8009e50 <disk_write+0x3c>)
 8009e34:	4413      	add	r3, r2
 8009e36:	7a18      	ldrb	r0, [r3, #8]
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	687a      	ldr	r2, [r7, #4]
 8009e3c:	68b9      	ldr	r1, [r7, #8]
 8009e3e:	47a0      	blx	r4
 8009e40:	4603      	mov	r3, r0
 8009e42:	75fb      	strb	r3, [r7, #23]
  return res;
 8009e44:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	371c      	adds	r7, #28
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd90      	pop	{r4, r7, pc}
 8009e4e:	bf00      	nop
 8009e50:	20000248 	.word	0x20000248

08009e54 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b084      	sub	sp, #16
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	603a      	str	r2, [r7, #0]
 8009e5e:	71fb      	strb	r3, [r7, #7]
 8009e60:	460b      	mov	r3, r1
 8009e62:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009e64:	79fb      	ldrb	r3, [r7, #7]
 8009e66:	4a09      	ldr	r2, [pc, #36]	; (8009e8c <disk_ioctl+0x38>)
 8009e68:	009b      	lsls	r3, r3, #2
 8009e6a:	4413      	add	r3, r2
 8009e6c:	685b      	ldr	r3, [r3, #4]
 8009e6e:	691b      	ldr	r3, [r3, #16]
 8009e70:	79fa      	ldrb	r2, [r7, #7]
 8009e72:	4906      	ldr	r1, [pc, #24]	; (8009e8c <disk_ioctl+0x38>)
 8009e74:	440a      	add	r2, r1
 8009e76:	7a10      	ldrb	r0, [r2, #8]
 8009e78:	79b9      	ldrb	r1, [r7, #6]
 8009e7a:	683a      	ldr	r2, [r7, #0]
 8009e7c:	4798      	blx	r3
 8009e7e:	4603      	mov	r3, r0
 8009e80:	73fb      	strb	r3, [r7, #15]
  return res;
 8009e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e84:	4618      	mov	r0, r3
 8009e86:	3710      	adds	r7, #16
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}
 8009e8c:	20000248 	.word	0x20000248

08009e90 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009e90:	b480      	push	{r7}
 8009e92:	b085      	sub	sp, #20
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	3301      	adds	r3, #1
 8009e9c:	781b      	ldrb	r3, [r3, #0]
 8009e9e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009ea0:	89fb      	ldrh	r3, [r7, #14]
 8009ea2:	021b      	lsls	r3, r3, #8
 8009ea4:	b21a      	sxth	r2, r3
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	781b      	ldrb	r3, [r3, #0]
 8009eaa:	b21b      	sxth	r3, r3
 8009eac:	4313      	orrs	r3, r2
 8009eae:	b21b      	sxth	r3, r3
 8009eb0:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009eb2:	89fb      	ldrh	r3, [r7, #14]
}
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	3714      	adds	r7, #20
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebe:	4770      	bx	lr

08009ec0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	b085      	sub	sp, #20
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	3303      	adds	r3, #3
 8009ecc:	781b      	ldrb	r3, [r3, #0]
 8009ece:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	021b      	lsls	r3, r3, #8
 8009ed4:	687a      	ldr	r2, [r7, #4]
 8009ed6:	3202      	adds	r2, #2
 8009ed8:	7812      	ldrb	r2, [r2, #0]
 8009eda:	4313      	orrs	r3, r2
 8009edc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	021b      	lsls	r3, r3, #8
 8009ee2:	687a      	ldr	r2, [r7, #4]
 8009ee4:	3201      	adds	r2, #1
 8009ee6:	7812      	ldrb	r2, [r2, #0]
 8009ee8:	4313      	orrs	r3, r2
 8009eea:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	021b      	lsls	r3, r3, #8
 8009ef0:	687a      	ldr	r2, [r7, #4]
 8009ef2:	7812      	ldrb	r2, [r2, #0]
 8009ef4:	4313      	orrs	r3, r2
 8009ef6:	60fb      	str	r3, [r7, #12]
	return rv;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	3714      	adds	r7, #20
 8009efe:	46bd      	mov	sp, r7
 8009f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f04:	4770      	bx	lr

08009f06 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009f06:	b480      	push	{r7}
 8009f08:	b083      	sub	sp, #12
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	6078      	str	r0, [r7, #4]
 8009f0e:	460b      	mov	r3, r1
 8009f10:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	1c5a      	adds	r2, r3, #1
 8009f16:	607a      	str	r2, [r7, #4]
 8009f18:	887a      	ldrh	r2, [r7, #2]
 8009f1a:	b2d2      	uxtb	r2, r2
 8009f1c:	701a      	strb	r2, [r3, #0]
 8009f1e:	887b      	ldrh	r3, [r7, #2]
 8009f20:	0a1b      	lsrs	r3, r3, #8
 8009f22:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	1c5a      	adds	r2, r3, #1
 8009f28:	607a      	str	r2, [r7, #4]
 8009f2a:	887a      	ldrh	r2, [r7, #2]
 8009f2c:	b2d2      	uxtb	r2, r2
 8009f2e:	701a      	strb	r2, [r3, #0]
}
 8009f30:	bf00      	nop
 8009f32:	370c      	adds	r7, #12
 8009f34:	46bd      	mov	sp, r7
 8009f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3a:	4770      	bx	lr

08009f3c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b083      	sub	sp, #12
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
 8009f44:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	1c5a      	adds	r2, r3, #1
 8009f4a:	607a      	str	r2, [r7, #4]
 8009f4c:	683a      	ldr	r2, [r7, #0]
 8009f4e:	b2d2      	uxtb	r2, r2
 8009f50:	701a      	strb	r2, [r3, #0]
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	0a1b      	lsrs	r3, r3, #8
 8009f56:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	1c5a      	adds	r2, r3, #1
 8009f5c:	607a      	str	r2, [r7, #4]
 8009f5e:	683a      	ldr	r2, [r7, #0]
 8009f60:	b2d2      	uxtb	r2, r2
 8009f62:	701a      	strb	r2, [r3, #0]
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	0a1b      	lsrs	r3, r3, #8
 8009f68:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	1c5a      	adds	r2, r3, #1
 8009f6e:	607a      	str	r2, [r7, #4]
 8009f70:	683a      	ldr	r2, [r7, #0]
 8009f72:	b2d2      	uxtb	r2, r2
 8009f74:	701a      	strb	r2, [r3, #0]
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	0a1b      	lsrs	r3, r3, #8
 8009f7a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	1c5a      	adds	r2, r3, #1
 8009f80:	607a      	str	r2, [r7, #4]
 8009f82:	683a      	ldr	r2, [r7, #0]
 8009f84:	b2d2      	uxtb	r2, r2
 8009f86:	701a      	strb	r2, [r3, #0]
}
 8009f88:	bf00      	nop
 8009f8a:	370c      	adds	r7, #12
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f92:	4770      	bx	lr

08009f94 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009f94:	b480      	push	{r7}
 8009f96:	b087      	sub	sp, #28
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	60f8      	str	r0, [r7, #12]
 8009f9c:	60b9      	str	r1, [r7, #8]
 8009f9e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d00d      	beq.n	8009fca <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009fae:	693a      	ldr	r2, [r7, #16]
 8009fb0:	1c53      	adds	r3, r2, #1
 8009fb2:	613b      	str	r3, [r7, #16]
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	1c59      	adds	r1, r3, #1
 8009fb8:	6179      	str	r1, [r7, #20]
 8009fba:	7812      	ldrb	r2, [r2, #0]
 8009fbc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	3b01      	subs	r3, #1
 8009fc2:	607b      	str	r3, [r7, #4]
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d1f1      	bne.n	8009fae <mem_cpy+0x1a>
	}
}
 8009fca:	bf00      	nop
 8009fcc:	371c      	adds	r7, #28
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd4:	4770      	bx	lr

08009fd6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009fd6:	b480      	push	{r7}
 8009fd8:	b087      	sub	sp, #28
 8009fda:	af00      	add	r7, sp, #0
 8009fdc:	60f8      	str	r0, [r7, #12]
 8009fde:	60b9      	str	r1, [r7, #8]
 8009fe0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009fe6:	697b      	ldr	r3, [r7, #20]
 8009fe8:	1c5a      	adds	r2, r3, #1
 8009fea:	617a      	str	r2, [r7, #20]
 8009fec:	68ba      	ldr	r2, [r7, #8]
 8009fee:	b2d2      	uxtb	r2, r2
 8009ff0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	3b01      	subs	r3, #1
 8009ff6:	607b      	str	r3, [r7, #4]
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d1f3      	bne.n	8009fe6 <mem_set+0x10>
}
 8009ffe:	bf00      	nop
 800a000:	371c      	adds	r7, #28
 800a002:	46bd      	mov	sp, r7
 800a004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a008:	4770      	bx	lr

0800a00a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a00a:	b480      	push	{r7}
 800a00c:	b089      	sub	sp, #36	; 0x24
 800a00e:	af00      	add	r7, sp, #0
 800a010:	60f8      	str	r0, [r7, #12]
 800a012:	60b9      	str	r1, [r7, #8]
 800a014:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	61fb      	str	r3, [r7, #28]
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a01e:	2300      	movs	r3, #0
 800a020:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a022:	69fb      	ldr	r3, [r7, #28]
 800a024:	1c5a      	adds	r2, r3, #1
 800a026:	61fa      	str	r2, [r7, #28]
 800a028:	781b      	ldrb	r3, [r3, #0]
 800a02a:	4619      	mov	r1, r3
 800a02c:	69bb      	ldr	r3, [r7, #24]
 800a02e:	1c5a      	adds	r2, r3, #1
 800a030:	61ba      	str	r2, [r7, #24]
 800a032:	781b      	ldrb	r3, [r3, #0]
 800a034:	1acb      	subs	r3, r1, r3
 800a036:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	3b01      	subs	r3, #1
 800a03c:	607b      	str	r3, [r7, #4]
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d002      	beq.n	800a04a <mem_cmp+0x40>
 800a044:	697b      	ldr	r3, [r7, #20]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d0eb      	beq.n	800a022 <mem_cmp+0x18>

	return r;
 800a04a:	697b      	ldr	r3, [r7, #20]
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3724      	adds	r7, #36	; 0x24
 800a050:	46bd      	mov	sp, r7
 800a052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a056:	4770      	bx	lr

0800a058 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a058:	b480      	push	{r7}
 800a05a:	b083      	sub	sp, #12
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
 800a060:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a062:	e002      	b.n	800a06a <chk_chr+0x12>
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	3301      	adds	r3, #1
 800a068:	607b      	str	r3, [r7, #4]
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	781b      	ldrb	r3, [r3, #0]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d005      	beq.n	800a07e <chk_chr+0x26>
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	781b      	ldrb	r3, [r3, #0]
 800a076:	461a      	mov	r2, r3
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d1f2      	bne.n	800a064 <chk_chr+0xc>
	return *str;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	781b      	ldrb	r3, [r3, #0]
}
 800a082:	4618      	mov	r0, r3
 800a084:	370c      	adds	r7, #12
 800a086:	46bd      	mov	sp, r7
 800a088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08c:	4770      	bx	lr

0800a08e <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800a08e:	b580      	push	{r7, lr}
 800a090:	b082      	sub	sp, #8
 800a092:	af00      	add	r7, sp, #0
 800a094:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d009      	beq.n	800a0b0 <lock_fs+0x22>
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	68db      	ldr	r3, [r3, #12]
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	f002 fd8d 	bl	800cbc0 <ff_req_grant>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d001      	beq.n	800a0b0 <lock_fs+0x22>
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	e000      	b.n	800a0b2 <lock_fs+0x24>
 800a0b0:	2300      	movs	r3, #0
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	3708      	adds	r7, #8
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}

0800a0ba <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800a0ba:	b580      	push	{r7, lr}
 800a0bc:	b082      	sub	sp, #8
 800a0be:	af00      	add	r7, sp, #0
 800a0c0:	6078      	str	r0, [r7, #4]
 800a0c2:	460b      	mov	r3, r1
 800a0c4:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d00d      	beq.n	800a0e8 <unlock_fs+0x2e>
 800a0cc:	78fb      	ldrb	r3, [r7, #3]
 800a0ce:	2b0c      	cmp	r3, #12
 800a0d0:	d00a      	beq.n	800a0e8 <unlock_fs+0x2e>
 800a0d2:	78fb      	ldrb	r3, [r7, #3]
 800a0d4:	2b0b      	cmp	r3, #11
 800a0d6:	d007      	beq.n	800a0e8 <unlock_fs+0x2e>
 800a0d8:	78fb      	ldrb	r3, [r7, #3]
 800a0da:	2b0f      	cmp	r3, #15
 800a0dc:	d004      	beq.n	800a0e8 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	68db      	ldr	r3, [r3, #12]
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f002 fd81 	bl	800cbea <ff_rel_grant>
	}
}
 800a0e8:	bf00      	nop
 800a0ea:	3708      	adds	r7, #8
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bd80      	pop	{r7, pc}

0800a0f0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a0f0:	b480      	push	{r7}
 800a0f2:	b085      	sub	sp, #20
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
 800a0f8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	60bb      	str	r3, [r7, #8]
 800a0fe:	68bb      	ldr	r3, [r7, #8]
 800a100:	60fb      	str	r3, [r7, #12]
 800a102:	e029      	b.n	800a158 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a104:	4a27      	ldr	r2, [pc, #156]	; (800a1a4 <chk_lock+0xb4>)
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	011b      	lsls	r3, r3, #4
 800a10a:	4413      	add	r3, r2
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d01d      	beq.n	800a14e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a112:	4a24      	ldr	r2, [pc, #144]	; (800a1a4 <chk_lock+0xb4>)
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	011b      	lsls	r3, r3, #4
 800a118:	4413      	add	r3, r2
 800a11a:	681a      	ldr	r2, [r3, #0]
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	429a      	cmp	r2, r3
 800a122:	d116      	bne.n	800a152 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a124:	4a1f      	ldr	r2, [pc, #124]	; (800a1a4 <chk_lock+0xb4>)
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	011b      	lsls	r3, r3, #4
 800a12a:	4413      	add	r3, r2
 800a12c:	3304      	adds	r3, #4
 800a12e:	681a      	ldr	r2, [r3, #0]
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a134:	429a      	cmp	r2, r3
 800a136:	d10c      	bne.n	800a152 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a138:	4a1a      	ldr	r2, [pc, #104]	; (800a1a4 <chk_lock+0xb4>)
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	011b      	lsls	r3, r3, #4
 800a13e:	4413      	add	r3, r2
 800a140:	3308      	adds	r3, #8
 800a142:	681a      	ldr	r2, [r3, #0]
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a148:	429a      	cmp	r2, r3
 800a14a:	d102      	bne.n	800a152 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a14c:	e007      	b.n	800a15e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a14e:	2301      	movs	r3, #1
 800a150:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	3301      	adds	r3, #1
 800a156:	60fb      	str	r3, [r7, #12]
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	2b01      	cmp	r3, #1
 800a15c:	d9d2      	bls.n	800a104 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	2b02      	cmp	r3, #2
 800a162:	d109      	bne.n	800a178 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d102      	bne.n	800a170 <chk_lock+0x80>
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	2b02      	cmp	r3, #2
 800a16e:	d101      	bne.n	800a174 <chk_lock+0x84>
 800a170:	2300      	movs	r3, #0
 800a172:	e010      	b.n	800a196 <chk_lock+0xa6>
 800a174:	2312      	movs	r3, #18
 800a176:	e00e      	b.n	800a196 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d108      	bne.n	800a190 <chk_lock+0xa0>
 800a17e:	4a09      	ldr	r2, [pc, #36]	; (800a1a4 <chk_lock+0xb4>)
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	011b      	lsls	r3, r3, #4
 800a184:	4413      	add	r3, r2
 800a186:	330c      	adds	r3, #12
 800a188:	881b      	ldrh	r3, [r3, #0]
 800a18a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a18e:	d101      	bne.n	800a194 <chk_lock+0xa4>
 800a190:	2310      	movs	r3, #16
 800a192:	e000      	b.n	800a196 <chk_lock+0xa6>
 800a194:	2300      	movs	r3, #0
}
 800a196:	4618      	mov	r0, r3
 800a198:	3714      	adds	r7, #20
 800a19a:	46bd      	mov	sp, r7
 800a19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a0:	4770      	bx	lr
 800a1a2:	bf00      	nop
 800a1a4:	20000228 	.word	0x20000228

0800a1a8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b083      	sub	sp, #12
 800a1ac:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	607b      	str	r3, [r7, #4]
 800a1b2:	e002      	b.n	800a1ba <enq_lock+0x12>
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	3301      	adds	r3, #1
 800a1b8:	607b      	str	r3, [r7, #4]
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2b01      	cmp	r3, #1
 800a1be:	d806      	bhi.n	800a1ce <enq_lock+0x26>
 800a1c0:	4a09      	ldr	r2, [pc, #36]	; (800a1e8 <enq_lock+0x40>)
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	011b      	lsls	r3, r3, #4
 800a1c6:	4413      	add	r3, r2
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d1f2      	bne.n	800a1b4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2b02      	cmp	r3, #2
 800a1d2:	bf14      	ite	ne
 800a1d4:	2301      	movne	r3, #1
 800a1d6:	2300      	moveq	r3, #0
 800a1d8:	b2db      	uxtb	r3, r3
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	370c      	adds	r7, #12
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e4:	4770      	bx	lr
 800a1e6:	bf00      	nop
 800a1e8:	20000228 	.word	0x20000228

0800a1ec <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a1ec:	b480      	push	{r7}
 800a1ee:	b085      	sub	sp, #20
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
 800a1f4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	60fb      	str	r3, [r7, #12]
 800a1fa:	e01f      	b.n	800a23c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a1fc:	4a41      	ldr	r2, [pc, #260]	; (800a304 <inc_lock+0x118>)
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	011b      	lsls	r3, r3, #4
 800a202:	4413      	add	r3, r2
 800a204:	681a      	ldr	r2, [r3, #0]
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	429a      	cmp	r2, r3
 800a20c:	d113      	bne.n	800a236 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a20e:	4a3d      	ldr	r2, [pc, #244]	; (800a304 <inc_lock+0x118>)
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	011b      	lsls	r3, r3, #4
 800a214:	4413      	add	r3, r2
 800a216:	3304      	adds	r3, #4
 800a218:	681a      	ldr	r2, [r3, #0]
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a21e:	429a      	cmp	r2, r3
 800a220:	d109      	bne.n	800a236 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a222:	4a38      	ldr	r2, [pc, #224]	; (800a304 <inc_lock+0x118>)
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	011b      	lsls	r3, r3, #4
 800a228:	4413      	add	r3, r2
 800a22a:	3308      	adds	r3, #8
 800a22c:	681a      	ldr	r2, [r3, #0]
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a232:	429a      	cmp	r2, r3
 800a234:	d006      	beq.n	800a244 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	3301      	adds	r3, #1
 800a23a:	60fb      	str	r3, [r7, #12]
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	2b01      	cmp	r3, #1
 800a240:	d9dc      	bls.n	800a1fc <inc_lock+0x10>
 800a242:	e000      	b.n	800a246 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a244:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	2b02      	cmp	r3, #2
 800a24a:	d132      	bne.n	800a2b2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a24c:	2300      	movs	r3, #0
 800a24e:	60fb      	str	r3, [r7, #12]
 800a250:	e002      	b.n	800a258 <inc_lock+0x6c>
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	3301      	adds	r3, #1
 800a256:	60fb      	str	r3, [r7, #12]
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	2b01      	cmp	r3, #1
 800a25c:	d806      	bhi.n	800a26c <inc_lock+0x80>
 800a25e:	4a29      	ldr	r2, [pc, #164]	; (800a304 <inc_lock+0x118>)
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	011b      	lsls	r3, r3, #4
 800a264:	4413      	add	r3, r2
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d1f2      	bne.n	800a252 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	2b02      	cmp	r3, #2
 800a270:	d101      	bne.n	800a276 <inc_lock+0x8a>
 800a272:	2300      	movs	r3, #0
 800a274:	e040      	b.n	800a2f8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681a      	ldr	r2, [r3, #0]
 800a27a:	4922      	ldr	r1, [pc, #136]	; (800a304 <inc_lock+0x118>)
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	011b      	lsls	r3, r3, #4
 800a280:	440b      	add	r3, r1
 800a282:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	689a      	ldr	r2, [r3, #8]
 800a288:	491e      	ldr	r1, [pc, #120]	; (800a304 <inc_lock+0x118>)
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	011b      	lsls	r3, r3, #4
 800a28e:	440b      	add	r3, r1
 800a290:	3304      	adds	r3, #4
 800a292:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	695a      	ldr	r2, [r3, #20]
 800a298:	491a      	ldr	r1, [pc, #104]	; (800a304 <inc_lock+0x118>)
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	011b      	lsls	r3, r3, #4
 800a29e:	440b      	add	r3, r1
 800a2a0:	3308      	adds	r3, #8
 800a2a2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a2a4:	4a17      	ldr	r2, [pc, #92]	; (800a304 <inc_lock+0x118>)
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	011b      	lsls	r3, r3, #4
 800a2aa:	4413      	add	r3, r2
 800a2ac:	330c      	adds	r3, #12
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d009      	beq.n	800a2cc <inc_lock+0xe0>
 800a2b8:	4a12      	ldr	r2, [pc, #72]	; (800a304 <inc_lock+0x118>)
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	011b      	lsls	r3, r3, #4
 800a2be:	4413      	add	r3, r2
 800a2c0:	330c      	adds	r3, #12
 800a2c2:	881b      	ldrh	r3, [r3, #0]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d001      	beq.n	800a2cc <inc_lock+0xe0>
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	e015      	b.n	800a2f8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d108      	bne.n	800a2e4 <inc_lock+0xf8>
 800a2d2:	4a0c      	ldr	r2, [pc, #48]	; (800a304 <inc_lock+0x118>)
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	011b      	lsls	r3, r3, #4
 800a2d8:	4413      	add	r3, r2
 800a2da:	330c      	adds	r3, #12
 800a2dc:	881b      	ldrh	r3, [r3, #0]
 800a2de:	3301      	adds	r3, #1
 800a2e0:	b29a      	uxth	r2, r3
 800a2e2:	e001      	b.n	800a2e8 <inc_lock+0xfc>
 800a2e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a2e8:	4906      	ldr	r1, [pc, #24]	; (800a304 <inc_lock+0x118>)
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	011b      	lsls	r3, r3, #4
 800a2ee:	440b      	add	r3, r1
 800a2f0:	330c      	adds	r3, #12
 800a2f2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	3301      	adds	r3, #1
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	3714      	adds	r7, #20
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a302:	4770      	bx	lr
 800a304:	20000228 	.word	0x20000228

0800a308 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a308:	b480      	push	{r7}
 800a30a:	b085      	sub	sp, #20
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	3b01      	subs	r3, #1
 800a314:	607b      	str	r3, [r7, #4]
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2b01      	cmp	r3, #1
 800a31a:	d825      	bhi.n	800a368 <dec_lock+0x60>
		n = Files[i].ctr;
 800a31c:	4a17      	ldr	r2, [pc, #92]	; (800a37c <dec_lock+0x74>)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	011b      	lsls	r3, r3, #4
 800a322:	4413      	add	r3, r2
 800a324:	330c      	adds	r3, #12
 800a326:	881b      	ldrh	r3, [r3, #0]
 800a328:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a32a:	89fb      	ldrh	r3, [r7, #14]
 800a32c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a330:	d101      	bne.n	800a336 <dec_lock+0x2e>
 800a332:	2300      	movs	r3, #0
 800a334:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a336:	89fb      	ldrh	r3, [r7, #14]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d002      	beq.n	800a342 <dec_lock+0x3a>
 800a33c:	89fb      	ldrh	r3, [r7, #14]
 800a33e:	3b01      	subs	r3, #1
 800a340:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a342:	4a0e      	ldr	r2, [pc, #56]	; (800a37c <dec_lock+0x74>)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	011b      	lsls	r3, r3, #4
 800a348:	4413      	add	r3, r2
 800a34a:	330c      	adds	r3, #12
 800a34c:	89fa      	ldrh	r2, [r7, #14]
 800a34e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a350:	89fb      	ldrh	r3, [r7, #14]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d105      	bne.n	800a362 <dec_lock+0x5a>
 800a356:	4a09      	ldr	r2, [pc, #36]	; (800a37c <dec_lock+0x74>)
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	011b      	lsls	r3, r3, #4
 800a35c:	4413      	add	r3, r2
 800a35e:	2200      	movs	r2, #0
 800a360:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a362:	2300      	movs	r3, #0
 800a364:	737b      	strb	r3, [r7, #13]
 800a366:	e001      	b.n	800a36c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a368:	2302      	movs	r3, #2
 800a36a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a36c:	7b7b      	ldrb	r3, [r7, #13]
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3714      	adds	r7, #20
 800a372:	46bd      	mov	sp, r7
 800a374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a378:	4770      	bx	lr
 800a37a:	bf00      	nop
 800a37c:	20000228 	.word	0x20000228

0800a380 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a380:	b480      	push	{r7}
 800a382:	b085      	sub	sp, #20
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a388:	2300      	movs	r3, #0
 800a38a:	60fb      	str	r3, [r7, #12]
 800a38c:	e010      	b.n	800a3b0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a38e:	4a0d      	ldr	r2, [pc, #52]	; (800a3c4 <clear_lock+0x44>)
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	011b      	lsls	r3, r3, #4
 800a394:	4413      	add	r3, r2
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	687a      	ldr	r2, [r7, #4]
 800a39a:	429a      	cmp	r2, r3
 800a39c:	d105      	bne.n	800a3aa <clear_lock+0x2a>
 800a39e:	4a09      	ldr	r2, [pc, #36]	; (800a3c4 <clear_lock+0x44>)
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	011b      	lsls	r3, r3, #4
 800a3a4:	4413      	add	r3, r2
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	3301      	adds	r3, #1
 800a3ae:	60fb      	str	r3, [r7, #12]
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	2b01      	cmp	r3, #1
 800a3b4:	d9eb      	bls.n	800a38e <clear_lock+0xe>
	}
}
 800a3b6:	bf00      	nop
 800a3b8:	3714      	adds	r7, #20
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c0:	4770      	bx	lr
 800a3c2:	bf00      	nop
 800a3c4:	20000228 	.word	0x20000228

0800a3c8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b086      	sub	sp, #24
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	78db      	ldrb	r3, [r3, #3]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d034      	beq.n	800a446 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3e0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	7858      	ldrb	r0, [r3, #1]
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	697a      	ldr	r2, [r7, #20]
 800a3f0:	f7ff fd10 	bl	8009e14 <disk_write>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d002      	beq.n	800a400 <sync_window+0x38>
			res = FR_DISK_ERR;
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	73fb      	strb	r3, [r7, #15]
 800a3fe:	e022      	b.n	800a446 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2200      	movs	r2, #0
 800a404:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a40a:	697a      	ldr	r2, [r7, #20]
 800a40c:	1ad2      	subs	r2, r2, r3
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	69db      	ldr	r3, [r3, #28]
 800a412:	429a      	cmp	r2, r3
 800a414:	d217      	bcs.n	800a446 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	789b      	ldrb	r3, [r3, #2]
 800a41a:	613b      	str	r3, [r7, #16]
 800a41c:	e010      	b.n	800a440 <sync_window+0x78>
					wsect += fs->fsize;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	69db      	ldr	r3, [r3, #28]
 800a422:	697a      	ldr	r2, [r7, #20]
 800a424:	4413      	add	r3, r2
 800a426:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	7858      	ldrb	r0, [r3, #1]
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a432:	2301      	movs	r3, #1
 800a434:	697a      	ldr	r2, [r7, #20]
 800a436:	f7ff fced 	bl	8009e14 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a43a:	693b      	ldr	r3, [r7, #16]
 800a43c:	3b01      	subs	r3, #1
 800a43e:	613b      	str	r3, [r7, #16]
 800a440:	693b      	ldr	r3, [r7, #16]
 800a442:	2b01      	cmp	r3, #1
 800a444:	d8eb      	bhi.n	800a41e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a446:	7bfb      	ldrb	r3, [r7, #15]
}
 800a448:	4618      	mov	r0, r3
 800a44a:	3718      	adds	r7, #24
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}

0800a450 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b084      	sub	sp, #16
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
 800a458:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a45a:	2300      	movs	r3, #0
 800a45c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a462:	683a      	ldr	r2, [r7, #0]
 800a464:	429a      	cmp	r2, r3
 800a466:	d01b      	beq.n	800a4a0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f7ff ffad 	bl	800a3c8 <sync_window>
 800a46e:	4603      	mov	r3, r0
 800a470:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a472:	7bfb      	ldrb	r3, [r7, #15]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d113      	bne.n	800a4a0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	7858      	ldrb	r0, [r3, #1]
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a482:	2301      	movs	r3, #1
 800a484:	683a      	ldr	r2, [r7, #0]
 800a486:	f7ff fca5 	bl	8009dd4 <disk_read>
 800a48a:	4603      	mov	r3, r0
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d004      	beq.n	800a49a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a490:	f04f 33ff 	mov.w	r3, #4294967295
 800a494:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a496:	2301      	movs	r3, #1
 800a498:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	683a      	ldr	r2, [r7, #0]
 800a49e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800a4a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	3710      	adds	r7, #16
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}
	...

0800a4ac <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b084      	sub	sp, #16
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f7ff ff87 	bl	800a3c8 <sync_window>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a4be:	7bfb      	ldrb	r3, [r7, #15]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d158      	bne.n	800a576 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	781b      	ldrb	r3, [r3, #0]
 800a4c8:	2b03      	cmp	r3, #3
 800a4ca:	d148      	bne.n	800a55e <sync_fs+0xb2>
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	791b      	ldrb	r3, [r3, #4]
 800a4d0:	2b01      	cmp	r3, #1
 800a4d2:	d144      	bne.n	800a55e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	3334      	adds	r3, #52	; 0x34
 800a4d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a4dc:	2100      	movs	r1, #0
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f7ff fd79 	bl	8009fd6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	3334      	adds	r3, #52	; 0x34
 800a4e8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a4ec:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f7ff fd08 	bl	8009f06 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	3334      	adds	r3, #52	; 0x34
 800a4fa:	4921      	ldr	r1, [pc, #132]	; (800a580 <sync_fs+0xd4>)
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	f7ff fd1d 	bl	8009f3c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	3334      	adds	r3, #52	; 0x34
 800a506:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a50a:	491e      	ldr	r1, [pc, #120]	; (800a584 <sync_fs+0xd8>)
 800a50c:	4618      	mov	r0, r3
 800a50e:	f7ff fd15 	bl	8009f3c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	3334      	adds	r3, #52	; 0x34
 800a516:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	695b      	ldr	r3, [r3, #20]
 800a51e:	4619      	mov	r1, r3
 800a520:	4610      	mov	r0, r2
 800a522:	f7ff fd0b 	bl	8009f3c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	3334      	adds	r3, #52	; 0x34
 800a52a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	691b      	ldr	r3, [r3, #16]
 800a532:	4619      	mov	r1, r3
 800a534:	4610      	mov	r0, r2
 800a536:	f7ff fd01 	bl	8009f3c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6a1b      	ldr	r3, [r3, #32]
 800a53e:	1c5a      	adds	r2, r3, #1
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	7858      	ldrb	r0, [r3, #1]
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a552:	2301      	movs	r3, #1
 800a554:	f7ff fc5e 	bl	8009e14 <disk_write>
			fs->fsi_flag = 0;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2200      	movs	r2, #0
 800a55c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	785b      	ldrb	r3, [r3, #1]
 800a562:	2200      	movs	r2, #0
 800a564:	2100      	movs	r1, #0
 800a566:	4618      	mov	r0, r3
 800a568:	f7ff fc74 	bl	8009e54 <disk_ioctl>
 800a56c:	4603      	mov	r3, r0
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d001      	beq.n	800a576 <sync_fs+0xca>
 800a572:	2301      	movs	r3, #1
 800a574:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a576:	7bfb      	ldrb	r3, [r7, #15]
}
 800a578:	4618      	mov	r0, r3
 800a57a:	3710      	adds	r7, #16
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}
 800a580:	41615252 	.word	0x41615252
 800a584:	61417272 	.word	0x61417272

0800a588 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a588:	b480      	push	{r7}
 800a58a:	b083      	sub	sp, #12
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
 800a590:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	3b02      	subs	r3, #2
 800a596:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	699b      	ldr	r3, [r3, #24]
 800a59c:	3b02      	subs	r3, #2
 800a59e:	683a      	ldr	r2, [r7, #0]
 800a5a0:	429a      	cmp	r2, r3
 800a5a2:	d301      	bcc.n	800a5a8 <clust2sect+0x20>
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	e008      	b.n	800a5ba <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	895b      	ldrh	r3, [r3, #10]
 800a5ac:	461a      	mov	r2, r3
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	fb03 f202 	mul.w	r2, r3, r2
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5b8:	4413      	add	r3, r2
}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	370c      	adds	r7, #12
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c4:	4770      	bx	lr

0800a5c6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a5c6:	b580      	push	{r7, lr}
 800a5c8:	b086      	sub	sp, #24
 800a5ca:	af00      	add	r7, sp, #0
 800a5cc:	6078      	str	r0, [r7, #4]
 800a5ce:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	2b01      	cmp	r3, #1
 800a5da:	d904      	bls.n	800a5e6 <get_fat+0x20>
 800a5dc:	693b      	ldr	r3, [r7, #16]
 800a5de:	699b      	ldr	r3, [r3, #24]
 800a5e0:	683a      	ldr	r2, [r7, #0]
 800a5e2:	429a      	cmp	r2, r3
 800a5e4:	d302      	bcc.n	800a5ec <get_fat+0x26>
		val = 1;	/* Internal error */
 800a5e6:	2301      	movs	r3, #1
 800a5e8:	617b      	str	r3, [r7, #20]
 800a5ea:	e08c      	b.n	800a706 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a5ec:	f04f 33ff 	mov.w	r3, #4294967295
 800a5f0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	781b      	ldrb	r3, [r3, #0]
 800a5f6:	2b02      	cmp	r3, #2
 800a5f8:	d045      	beq.n	800a686 <get_fat+0xc0>
 800a5fa:	2b03      	cmp	r3, #3
 800a5fc:	d05d      	beq.n	800a6ba <get_fat+0xf4>
 800a5fe:	2b01      	cmp	r3, #1
 800a600:	d177      	bne.n	800a6f2 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	60fb      	str	r3, [r7, #12]
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	085b      	lsrs	r3, r3, #1
 800a60a:	68fa      	ldr	r2, [r7, #12]
 800a60c:	4413      	add	r3, r2
 800a60e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a610:	693b      	ldr	r3, [r7, #16]
 800a612:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	0a5b      	lsrs	r3, r3, #9
 800a618:	4413      	add	r3, r2
 800a61a:	4619      	mov	r1, r3
 800a61c:	6938      	ldr	r0, [r7, #16]
 800a61e:	f7ff ff17 	bl	800a450 <move_window>
 800a622:	4603      	mov	r3, r0
 800a624:	2b00      	cmp	r3, #0
 800a626:	d167      	bne.n	800a6f8 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	1c5a      	adds	r2, r3, #1
 800a62c:	60fa      	str	r2, [r7, #12]
 800a62e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a632:	693a      	ldr	r2, [r7, #16]
 800a634:	4413      	add	r3, r2
 800a636:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a63a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a63c:	693b      	ldr	r3, [r7, #16]
 800a63e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	0a5b      	lsrs	r3, r3, #9
 800a644:	4413      	add	r3, r2
 800a646:	4619      	mov	r1, r3
 800a648:	6938      	ldr	r0, [r7, #16]
 800a64a:	f7ff ff01 	bl	800a450 <move_window>
 800a64e:	4603      	mov	r3, r0
 800a650:	2b00      	cmp	r3, #0
 800a652:	d153      	bne.n	800a6fc <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a65a:	693a      	ldr	r2, [r7, #16]
 800a65c:	4413      	add	r3, r2
 800a65e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a662:	021b      	lsls	r3, r3, #8
 800a664:	461a      	mov	r2, r3
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	4313      	orrs	r3, r2
 800a66a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	f003 0301 	and.w	r3, r3, #1
 800a672:	2b00      	cmp	r3, #0
 800a674:	d002      	beq.n	800a67c <get_fat+0xb6>
 800a676:	68bb      	ldr	r3, [r7, #8]
 800a678:	091b      	lsrs	r3, r3, #4
 800a67a:	e002      	b.n	800a682 <get_fat+0xbc>
 800a67c:	68bb      	ldr	r3, [r7, #8]
 800a67e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a682:	617b      	str	r3, [r7, #20]
			break;
 800a684:	e03f      	b.n	800a706 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a686:	693b      	ldr	r3, [r7, #16]
 800a688:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	0a1b      	lsrs	r3, r3, #8
 800a68e:	4413      	add	r3, r2
 800a690:	4619      	mov	r1, r3
 800a692:	6938      	ldr	r0, [r7, #16]
 800a694:	f7ff fedc 	bl	800a450 <move_window>
 800a698:	4603      	mov	r3, r0
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d130      	bne.n	800a700 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a69e:	693b      	ldr	r3, [r7, #16]
 800a6a0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	005b      	lsls	r3, r3, #1
 800a6a8:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a6ac:	4413      	add	r3, r2
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	f7ff fbee 	bl	8009e90 <ld_word>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	617b      	str	r3, [r7, #20]
			break;
 800a6b8:	e025      	b.n	800a706 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a6ba:	693b      	ldr	r3, [r7, #16]
 800a6bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	09db      	lsrs	r3, r3, #7
 800a6c2:	4413      	add	r3, r2
 800a6c4:	4619      	mov	r1, r3
 800a6c6:	6938      	ldr	r0, [r7, #16]
 800a6c8:	f7ff fec2 	bl	800a450 <move_window>
 800a6cc:	4603      	mov	r3, r0
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d118      	bne.n	800a704 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a6d2:	693b      	ldr	r3, [r7, #16]
 800a6d4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	009b      	lsls	r3, r3, #2
 800a6dc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a6e0:	4413      	add	r3, r2
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f7ff fbec 	bl	8009ec0 <ld_dword>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a6ee:	617b      	str	r3, [r7, #20]
			break;
 800a6f0:	e009      	b.n	800a706 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	617b      	str	r3, [r7, #20]
 800a6f6:	e006      	b.n	800a706 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a6f8:	bf00      	nop
 800a6fa:	e004      	b.n	800a706 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a6fc:	bf00      	nop
 800a6fe:	e002      	b.n	800a706 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a700:	bf00      	nop
 800a702:	e000      	b.n	800a706 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a704:	bf00      	nop
		}
	}

	return val;
 800a706:	697b      	ldr	r3, [r7, #20]
}
 800a708:	4618      	mov	r0, r3
 800a70a:	3718      	adds	r7, #24
 800a70c:	46bd      	mov	sp, r7
 800a70e:	bd80      	pop	{r7, pc}

0800a710 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a710:	b590      	push	{r4, r7, lr}
 800a712:	b089      	sub	sp, #36	; 0x24
 800a714:	af00      	add	r7, sp, #0
 800a716:	60f8      	str	r0, [r7, #12]
 800a718:	60b9      	str	r1, [r7, #8]
 800a71a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a71c:	2302      	movs	r3, #2
 800a71e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	2b01      	cmp	r3, #1
 800a724:	f240 80d6 	bls.w	800a8d4 <put_fat+0x1c4>
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	699b      	ldr	r3, [r3, #24]
 800a72c:	68ba      	ldr	r2, [r7, #8]
 800a72e:	429a      	cmp	r2, r3
 800a730:	f080 80d0 	bcs.w	800a8d4 <put_fat+0x1c4>
		switch (fs->fs_type) {
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	781b      	ldrb	r3, [r3, #0]
 800a738:	2b02      	cmp	r3, #2
 800a73a:	d073      	beq.n	800a824 <put_fat+0x114>
 800a73c:	2b03      	cmp	r3, #3
 800a73e:	f000 8091 	beq.w	800a864 <put_fat+0x154>
 800a742:	2b01      	cmp	r3, #1
 800a744:	f040 80c6 	bne.w	800a8d4 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	61bb      	str	r3, [r7, #24]
 800a74c:	69bb      	ldr	r3, [r7, #24]
 800a74e:	085b      	lsrs	r3, r3, #1
 800a750:	69ba      	ldr	r2, [r7, #24]
 800a752:	4413      	add	r3, r2
 800a754:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a75a:	69bb      	ldr	r3, [r7, #24]
 800a75c:	0a5b      	lsrs	r3, r3, #9
 800a75e:	4413      	add	r3, r2
 800a760:	4619      	mov	r1, r3
 800a762:	68f8      	ldr	r0, [r7, #12]
 800a764:	f7ff fe74 	bl	800a450 <move_window>
 800a768:	4603      	mov	r3, r0
 800a76a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a76c:	7ffb      	ldrb	r3, [r7, #31]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	f040 80a9 	bne.w	800a8c6 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a77a:	69bb      	ldr	r3, [r7, #24]
 800a77c:	1c59      	adds	r1, r3, #1
 800a77e:	61b9      	str	r1, [r7, #24]
 800a780:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a784:	4413      	add	r3, r2
 800a786:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a788:	68bb      	ldr	r3, [r7, #8]
 800a78a:	f003 0301 	and.w	r3, r3, #1
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d00d      	beq.n	800a7ae <put_fat+0x9e>
 800a792:	697b      	ldr	r3, [r7, #20]
 800a794:	781b      	ldrb	r3, [r3, #0]
 800a796:	b25b      	sxtb	r3, r3
 800a798:	f003 030f 	and.w	r3, r3, #15
 800a79c:	b25a      	sxtb	r2, r3
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	b2db      	uxtb	r3, r3
 800a7a2:	011b      	lsls	r3, r3, #4
 800a7a4:	b25b      	sxtb	r3, r3
 800a7a6:	4313      	orrs	r3, r2
 800a7a8:	b25b      	sxtb	r3, r3
 800a7aa:	b2db      	uxtb	r3, r3
 800a7ac:	e001      	b.n	800a7b2 <put_fat+0xa2>
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	b2db      	uxtb	r3, r3
 800a7b2:	697a      	ldr	r2, [r7, #20]
 800a7b4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	2201      	movs	r2, #1
 800a7ba:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a7c0:	69bb      	ldr	r3, [r7, #24]
 800a7c2:	0a5b      	lsrs	r3, r3, #9
 800a7c4:	4413      	add	r3, r2
 800a7c6:	4619      	mov	r1, r3
 800a7c8:	68f8      	ldr	r0, [r7, #12]
 800a7ca:	f7ff fe41 	bl	800a450 <move_window>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a7d2:	7ffb      	ldrb	r3, [r7, #31]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d178      	bne.n	800a8ca <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a7de:	69bb      	ldr	r3, [r7, #24]
 800a7e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7e4:	4413      	add	r3, r2
 800a7e6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a7e8:	68bb      	ldr	r3, [r7, #8]
 800a7ea:	f003 0301 	and.w	r3, r3, #1
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d003      	beq.n	800a7fa <put_fat+0xea>
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	091b      	lsrs	r3, r3, #4
 800a7f6:	b2db      	uxtb	r3, r3
 800a7f8:	e00e      	b.n	800a818 <put_fat+0x108>
 800a7fa:	697b      	ldr	r3, [r7, #20]
 800a7fc:	781b      	ldrb	r3, [r3, #0]
 800a7fe:	b25b      	sxtb	r3, r3
 800a800:	f023 030f 	bic.w	r3, r3, #15
 800a804:	b25a      	sxtb	r2, r3
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	0a1b      	lsrs	r3, r3, #8
 800a80a:	b25b      	sxtb	r3, r3
 800a80c:	f003 030f 	and.w	r3, r3, #15
 800a810:	b25b      	sxtb	r3, r3
 800a812:	4313      	orrs	r3, r2
 800a814:	b25b      	sxtb	r3, r3
 800a816:	b2db      	uxtb	r3, r3
 800a818:	697a      	ldr	r2, [r7, #20]
 800a81a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	2201      	movs	r2, #1
 800a820:	70da      	strb	r2, [r3, #3]
			break;
 800a822:	e057      	b.n	800a8d4 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a828:	68bb      	ldr	r3, [r7, #8]
 800a82a:	0a1b      	lsrs	r3, r3, #8
 800a82c:	4413      	add	r3, r2
 800a82e:	4619      	mov	r1, r3
 800a830:	68f8      	ldr	r0, [r7, #12]
 800a832:	f7ff fe0d 	bl	800a450 <move_window>
 800a836:	4603      	mov	r3, r0
 800a838:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a83a:	7ffb      	ldrb	r3, [r7, #31]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d146      	bne.n	800a8ce <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a846:	68bb      	ldr	r3, [r7, #8]
 800a848:	005b      	lsls	r3, r3, #1
 800a84a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a84e:	4413      	add	r3, r2
 800a850:	687a      	ldr	r2, [r7, #4]
 800a852:	b292      	uxth	r2, r2
 800a854:	4611      	mov	r1, r2
 800a856:	4618      	mov	r0, r3
 800a858:	f7ff fb55 	bl	8009f06 <st_word>
			fs->wflag = 1;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	2201      	movs	r2, #1
 800a860:	70da      	strb	r2, [r3, #3]
			break;
 800a862:	e037      	b.n	800a8d4 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a868:	68bb      	ldr	r3, [r7, #8]
 800a86a:	09db      	lsrs	r3, r3, #7
 800a86c:	4413      	add	r3, r2
 800a86e:	4619      	mov	r1, r3
 800a870:	68f8      	ldr	r0, [r7, #12]
 800a872:	f7ff fded 	bl	800a450 <move_window>
 800a876:	4603      	mov	r3, r0
 800a878:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a87a:	7ffb      	ldrb	r3, [r7, #31]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d128      	bne.n	800a8d2 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	009b      	lsls	r3, r3, #2
 800a890:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a894:	4413      	add	r3, r2
 800a896:	4618      	mov	r0, r3
 800a898:	f7ff fb12 	bl	8009ec0 <ld_dword>
 800a89c:	4603      	mov	r3, r0
 800a89e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a8a2:	4323      	orrs	r3, r4
 800a8a4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a8ac:	68bb      	ldr	r3, [r7, #8]
 800a8ae:	009b      	lsls	r3, r3, #2
 800a8b0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a8b4:	4413      	add	r3, r2
 800a8b6:	6879      	ldr	r1, [r7, #4]
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	f7ff fb3f 	bl	8009f3c <st_dword>
			fs->wflag = 1;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	2201      	movs	r2, #1
 800a8c2:	70da      	strb	r2, [r3, #3]
			break;
 800a8c4:	e006      	b.n	800a8d4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800a8c6:	bf00      	nop
 800a8c8:	e004      	b.n	800a8d4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800a8ca:	bf00      	nop
 800a8cc:	e002      	b.n	800a8d4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800a8ce:	bf00      	nop
 800a8d0:	e000      	b.n	800a8d4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800a8d2:	bf00      	nop
		}
	}
	return res;
 800a8d4:	7ffb      	ldrb	r3, [r7, #31]
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	3724      	adds	r7, #36	; 0x24
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd90      	pop	{r4, r7, pc}

0800a8de <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a8de:	b580      	push	{r7, lr}
 800a8e0:	b088      	sub	sp, #32
 800a8e2:	af00      	add	r7, sp, #0
 800a8e4:	60f8      	str	r0, [r7, #12]
 800a8e6:	60b9      	str	r1, [r7, #8]
 800a8e8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	2b01      	cmp	r3, #1
 800a8f8:	d904      	bls.n	800a904 <remove_chain+0x26>
 800a8fa:	69bb      	ldr	r3, [r7, #24]
 800a8fc:	699b      	ldr	r3, [r3, #24]
 800a8fe:	68ba      	ldr	r2, [r7, #8]
 800a900:	429a      	cmp	r2, r3
 800a902:	d301      	bcc.n	800a908 <remove_chain+0x2a>
 800a904:	2302      	movs	r3, #2
 800a906:	e04b      	b.n	800a9a0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d00c      	beq.n	800a928 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a90e:	f04f 32ff 	mov.w	r2, #4294967295
 800a912:	6879      	ldr	r1, [r7, #4]
 800a914:	69b8      	ldr	r0, [r7, #24]
 800a916:	f7ff fefb 	bl	800a710 <put_fat>
 800a91a:	4603      	mov	r3, r0
 800a91c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a91e:	7ffb      	ldrb	r3, [r7, #31]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d001      	beq.n	800a928 <remove_chain+0x4a>
 800a924:	7ffb      	ldrb	r3, [r7, #31]
 800a926:	e03b      	b.n	800a9a0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a928:	68b9      	ldr	r1, [r7, #8]
 800a92a:	68f8      	ldr	r0, [r7, #12]
 800a92c:	f7ff fe4b 	bl	800a5c6 <get_fat>
 800a930:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a932:	697b      	ldr	r3, [r7, #20]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d031      	beq.n	800a99c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a938:	697b      	ldr	r3, [r7, #20]
 800a93a:	2b01      	cmp	r3, #1
 800a93c:	d101      	bne.n	800a942 <remove_chain+0x64>
 800a93e:	2302      	movs	r3, #2
 800a940:	e02e      	b.n	800a9a0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a942:	697b      	ldr	r3, [r7, #20]
 800a944:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a948:	d101      	bne.n	800a94e <remove_chain+0x70>
 800a94a:	2301      	movs	r3, #1
 800a94c:	e028      	b.n	800a9a0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a94e:	2200      	movs	r2, #0
 800a950:	68b9      	ldr	r1, [r7, #8]
 800a952:	69b8      	ldr	r0, [r7, #24]
 800a954:	f7ff fedc 	bl	800a710 <put_fat>
 800a958:	4603      	mov	r3, r0
 800a95a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a95c:	7ffb      	ldrb	r3, [r7, #31]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d001      	beq.n	800a966 <remove_chain+0x88>
 800a962:	7ffb      	ldrb	r3, [r7, #31]
 800a964:	e01c      	b.n	800a9a0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a966:	69bb      	ldr	r3, [r7, #24]
 800a968:	695a      	ldr	r2, [r3, #20]
 800a96a:	69bb      	ldr	r3, [r7, #24]
 800a96c:	699b      	ldr	r3, [r3, #24]
 800a96e:	3b02      	subs	r3, #2
 800a970:	429a      	cmp	r2, r3
 800a972:	d20b      	bcs.n	800a98c <remove_chain+0xae>
			fs->free_clst++;
 800a974:	69bb      	ldr	r3, [r7, #24]
 800a976:	695b      	ldr	r3, [r3, #20]
 800a978:	1c5a      	adds	r2, r3, #1
 800a97a:	69bb      	ldr	r3, [r7, #24]
 800a97c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800a97e:	69bb      	ldr	r3, [r7, #24]
 800a980:	791b      	ldrb	r3, [r3, #4]
 800a982:	f043 0301 	orr.w	r3, r3, #1
 800a986:	b2da      	uxtb	r2, r3
 800a988:	69bb      	ldr	r3, [r7, #24]
 800a98a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a98c:	697b      	ldr	r3, [r7, #20]
 800a98e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a990:	69bb      	ldr	r3, [r7, #24]
 800a992:	699b      	ldr	r3, [r3, #24]
 800a994:	68ba      	ldr	r2, [r7, #8]
 800a996:	429a      	cmp	r2, r3
 800a998:	d3c6      	bcc.n	800a928 <remove_chain+0x4a>
 800a99a:	e000      	b.n	800a99e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a99c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a99e:	2300      	movs	r3, #0
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	3720      	adds	r7, #32
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	bd80      	pop	{r7, pc}

0800a9a8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b088      	sub	sp, #32
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
 800a9b0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d10d      	bne.n	800a9da <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a9be:	693b      	ldr	r3, [r7, #16]
 800a9c0:	691b      	ldr	r3, [r3, #16]
 800a9c2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a9c4:	69bb      	ldr	r3, [r7, #24]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d004      	beq.n	800a9d4 <create_chain+0x2c>
 800a9ca:	693b      	ldr	r3, [r7, #16]
 800a9cc:	699b      	ldr	r3, [r3, #24]
 800a9ce:	69ba      	ldr	r2, [r7, #24]
 800a9d0:	429a      	cmp	r2, r3
 800a9d2:	d31b      	bcc.n	800aa0c <create_chain+0x64>
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	61bb      	str	r3, [r7, #24]
 800a9d8:	e018      	b.n	800aa0c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a9da:	6839      	ldr	r1, [r7, #0]
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	f7ff fdf2 	bl	800a5c6 <get_fat>
 800a9e2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	2b01      	cmp	r3, #1
 800a9e8:	d801      	bhi.n	800a9ee <create_chain+0x46>
 800a9ea:	2301      	movs	r3, #1
 800a9ec:	e070      	b.n	800aad0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9f4:	d101      	bne.n	800a9fa <create_chain+0x52>
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	e06a      	b.n	800aad0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a9fa:	693b      	ldr	r3, [r7, #16]
 800a9fc:	699b      	ldr	r3, [r3, #24]
 800a9fe:	68fa      	ldr	r2, [r7, #12]
 800aa00:	429a      	cmp	r2, r3
 800aa02:	d201      	bcs.n	800aa08 <create_chain+0x60>
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	e063      	b.n	800aad0 <create_chain+0x128>
		scl = clst;
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800aa0c:	69bb      	ldr	r3, [r7, #24]
 800aa0e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800aa10:	69fb      	ldr	r3, [r7, #28]
 800aa12:	3301      	adds	r3, #1
 800aa14:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800aa16:	693b      	ldr	r3, [r7, #16]
 800aa18:	699b      	ldr	r3, [r3, #24]
 800aa1a:	69fa      	ldr	r2, [r7, #28]
 800aa1c:	429a      	cmp	r2, r3
 800aa1e:	d307      	bcc.n	800aa30 <create_chain+0x88>
				ncl = 2;
 800aa20:	2302      	movs	r3, #2
 800aa22:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800aa24:	69fa      	ldr	r2, [r7, #28]
 800aa26:	69bb      	ldr	r3, [r7, #24]
 800aa28:	429a      	cmp	r2, r3
 800aa2a:	d901      	bls.n	800aa30 <create_chain+0x88>
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	e04f      	b.n	800aad0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800aa30:	69f9      	ldr	r1, [r7, #28]
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	f7ff fdc7 	bl	800a5c6 <get_fat>
 800aa38:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d00e      	beq.n	800aa5e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	2b01      	cmp	r3, #1
 800aa44:	d003      	beq.n	800aa4e <create_chain+0xa6>
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa4c:	d101      	bne.n	800aa52 <create_chain+0xaa>
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	e03e      	b.n	800aad0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800aa52:	69fa      	ldr	r2, [r7, #28]
 800aa54:	69bb      	ldr	r3, [r7, #24]
 800aa56:	429a      	cmp	r2, r3
 800aa58:	d1da      	bne.n	800aa10 <create_chain+0x68>
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	e038      	b.n	800aad0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800aa5e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800aa60:	f04f 32ff 	mov.w	r2, #4294967295
 800aa64:	69f9      	ldr	r1, [r7, #28]
 800aa66:	6938      	ldr	r0, [r7, #16]
 800aa68:	f7ff fe52 	bl	800a710 <put_fat>
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800aa70:	7dfb      	ldrb	r3, [r7, #23]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d109      	bne.n	800aa8a <create_chain+0xe2>
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d006      	beq.n	800aa8a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800aa7c:	69fa      	ldr	r2, [r7, #28]
 800aa7e:	6839      	ldr	r1, [r7, #0]
 800aa80:	6938      	ldr	r0, [r7, #16]
 800aa82:	f7ff fe45 	bl	800a710 <put_fat>
 800aa86:	4603      	mov	r3, r0
 800aa88:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800aa8a:	7dfb      	ldrb	r3, [r7, #23]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d116      	bne.n	800aabe <create_chain+0x116>
		fs->last_clst = ncl;
 800aa90:	693b      	ldr	r3, [r7, #16]
 800aa92:	69fa      	ldr	r2, [r7, #28]
 800aa94:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800aa96:	693b      	ldr	r3, [r7, #16]
 800aa98:	695a      	ldr	r2, [r3, #20]
 800aa9a:	693b      	ldr	r3, [r7, #16]
 800aa9c:	699b      	ldr	r3, [r3, #24]
 800aa9e:	3b02      	subs	r3, #2
 800aaa0:	429a      	cmp	r2, r3
 800aaa2:	d804      	bhi.n	800aaae <create_chain+0x106>
 800aaa4:	693b      	ldr	r3, [r7, #16]
 800aaa6:	695b      	ldr	r3, [r3, #20]
 800aaa8:	1e5a      	subs	r2, r3, #1
 800aaaa:	693b      	ldr	r3, [r7, #16]
 800aaac:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800aaae:	693b      	ldr	r3, [r7, #16]
 800aab0:	791b      	ldrb	r3, [r3, #4]
 800aab2:	f043 0301 	orr.w	r3, r3, #1
 800aab6:	b2da      	uxtb	r2, r3
 800aab8:	693b      	ldr	r3, [r7, #16]
 800aaba:	711a      	strb	r2, [r3, #4]
 800aabc:	e007      	b.n	800aace <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800aabe:	7dfb      	ldrb	r3, [r7, #23]
 800aac0:	2b01      	cmp	r3, #1
 800aac2:	d102      	bne.n	800aaca <create_chain+0x122>
 800aac4:	f04f 33ff 	mov.w	r3, #4294967295
 800aac8:	e000      	b.n	800aacc <create_chain+0x124>
 800aaca:	2301      	movs	r3, #1
 800aacc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800aace:	69fb      	ldr	r3, [r7, #28]
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	3720      	adds	r7, #32
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}

0800aad8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800aad8:	b480      	push	{r7}
 800aada:	b087      	sub	sp, #28
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
 800aae0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaec:	3304      	adds	r3, #4
 800aaee:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	0a5b      	lsrs	r3, r3, #9
 800aaf4:	68fa      	ldr	r2, [r7, #12]
 800aaf6:	8952      	ldrh	r2, [r2, #10]
 800aaf8:	fbb3 f3f2 	udiv	r3, r3, r2
 800aafc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800aafe:	693b      	ldr	r3, [r7, #16]
 800ab00:	1d1a      	adds	r2, r3, #4
 800ab02:	613a      	str	r2, [r7, #16]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d101      	bne.n	800ab12 <clmt_clust+0x3a>
 800ab0e:	2300      	movs	r3, #0
 800ab10:	e010      	b.n	800ab34 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800ab12:	697a      	ldr	r2, [r7, #20]
 800ab14:	68bb      	ldr	r3, [r7, #8]
 800ab16:	429a      	cmp	r2, r3
 800ab18:	d307      	bcc.n	800ab2a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800ab1a:	697a      	ldr	r2, [r7, #20]
 800ab1c:	68bb      	ldr	r3, [r7, #8]
 800ab1e:	1ad3      	subs	r3, r2, r3
 800ab20:	617b      	str	r3, [r7, #20]
 800ab22:	693b      	ldr	r3, [r7, #16]
 800ab24:	3304      	adds	r3, #4
 800ab26:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ab28:	e7e9      	b.n	800aafe <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800ab2a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ab2c:	693b      	ldr	r3, [r7, #16]
 800ab2e:	681a      	ldr	r2, [r3, #0]
 800ab30:	697b      	ldr	r3, [r7, #20]
 800ab32:	4413      	add	r3, r2
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	371c      	adds	r7, #28
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3e:	4770      	bx	lr

0800ab40 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b086      	sub	sp, #24
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
 800ab48:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ab56:	d204      	bcs.n	800ab62 <dir_sdi+0x22>
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	f003 031f 	and.w	r3, r3, #31
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d001      	beq.n	800ab66 <dir_sdi+0x26>
		return FR_INT_ERR;
 800ab62:	2302      	movs	r3, #2
 800ab64:	e063      	b.n	800ac2e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	683a      	ldr	r2, [r7, #0]
 800ab6a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	689b      	ldr	r3, [r3, #8]
 800ab70:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ab72:	697b      	ldr	r3, [r7, #20]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d106      	bne.n	800ab86 <dir_sdi+0x46>
 800ab78:	693b      	ldr	r3, [r7, #16]
 800ab7a:	781b      	ldrb	r3, [r3, #0]
 800ab7c:	2b02      	cmp	r3, #2
 800ab7e:	d902      	bls.n	800ab86 <dir_sdi+0x46>
		clst = fs->dirbase;
 800ab80:	693b      	ldr	r3, [r7, #16]
 800ab82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab84:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ab86:	697b      	ldr	r3, [r7, #20]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d10c      	bne.n	800aba6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	095b      	lsrs	r3, r3, #5
 800ab90:	693a      	ldr	r2, [r7, #16]
 800ab92:	8912      	ldrh	r2, [r2, #8]
 800ab94:	4293      	cmp	r3, r2
 800ab96:	d301      	bcc.n	800ab9c <dir_sdi+0x5c>
 800ab98:	2302      	movs	r3, #2
 800ab9a:	e048      	b.n	800ac2e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800ab9c:	693b      	ldr	r3, [r7, #16]
 800ab9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	61da      	str	r2, [r3, #28]
 800aba4:	e029      	b.n	800abfa <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800aba6:	693b      	ldr	r3, [r7, #16]
 800aba8:	895b      	ldrh	r3, [r3, #10]
 800abaa:	025b      	lsls	r3, r3, #9
 800abac:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800abae:	e019      	b.n	800abe4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	6979      	ldr	r1, [r7, #20]
 800abb4:	4618      	mov	r0, r3
 800abb6:	f7ff fd06 	bl	800a5c6 <get_fat>
 800abba:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800abbc:	697b      	ldr	r3, [r7, #20]
 800abbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abc2:	d101      	bne.n	800abc8 <dir_sdi+0x88>
 800abc4:	2301      	movs	r3, #1
 800abc6:	e032      	b.n	800ac2e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800abc8:	697b      	ldr	r3, [r7, #20]
 800abca:	2b01      	cmp	r3, #1
 800abcc:	d904      	bls.n	800abd8 <dir_sdi+0x98>
 800abce:	693b      	ldr	r3, [r7, #16]
 800abd0:	699b      	ldr	r3, [r3, #24]
 800abd2:	697a      	ldr	r2, [r7, #20]
 800abd4:	429a      	cmp	r2, r3
 800abd6:	d301      	bcc.n	800abdc <dir_sdi+0x9c>
 800abd8:	2302      	movs	r3, #2
 800abda:	e028      	b.n	800ac2e <dir_sdi+0xee>
			ofs -= csz;
 800abdc:	683a      	ldr	r2, [r7, #0]
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	1ad3      	subs	r3, r2, r3
 800abe2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800abe4:	683a      	ldr	r2, [r7, #0]
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	429a      	cmp	r2, r3
 800abea:	d2e1      	bcs.n	800abb0 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800abec:	6979      	ldr	r1, [r7, #20]
 800abee:	6938      	ldr	r0, [r7, #16]
 800abf0:	f7ff fcca 	bl	800a588 <clust2sect>
 800abf4:	4602      	mov	r2, r0
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	697a      	ldr	r2, [r7, #20]
 800abfe:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	69db      	ldr	r3, [r3, #28]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d101      	bne.n	800ac0c <dir_sdi+0xcc>
 800ac08:	2302      	movs	r3, #2
 800ac0a:	e010      	b.n	800ac2e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	69da      	ldr	r2, [r3, #28]
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	0a5b      	lsrs	r3, r3, #9
 800ac14:	441a      	add	r2, r3
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ac1a:	693b      	ldr	r3, [r7, #16]
 800ac1c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac26:	441a      	add	r2, r3
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ac2c:	2300      	movs	r3, #0
}
 800ac2e:	4618      	mov	r0, r3
 800ac30:	3718      	adds	r7, #24
 800ac32:	46bd      	mov	sp, r7
 800ac34:	bd80      	pop	{r7, pc}

0800ac36 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ac36:	b580      	push	{r7, lr}
 800ac38:	b086      	sub	sp, #24
 800ac3a:	af00      	add	r7, sp, #0
 800ac3c:	6078      	str	r0, [r7, #4]
 800ac3e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	695b      	ldr	r3, [r3, #20]
 800ac4a:	3320      	adds	r3, #32
 800ac4c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	69db      	ldr	r3, [r3, #28]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d003      	beq.n	800ac5e <dir_next+0x28>
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ac5c:	d301      	bcc.n	800ac62 <dir_next+0x2c>
 800ac5e:	2304      	movs	r3, #4
 800ac60:	e0aa      	b.n	800adb8 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ac62:	68bb      	ldr	r3, [r7, #8]
 800ac64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	f040 8098 	bne.w	800ad9e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	69db      	ldr	r3, [r3, #28]
 800ac72:	1c5a      	adds	r2, r3, #1
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	699b      	ldr	r3, [r3, #24]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d10b      	bne.n	800ac98 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ac80:	68bb      	ldr	r3, [r7, #8]
 800ac82:	095b      	lsrs	r3, r3, #5
 800ac84:	68fa      	ldr	r2, [r7, #12]
 800ac86:	8912      	ldrh	r2, [r2, #8]
 800ac88:	4293      	cmp	r3, r2
 800ac8a:	f0c0 8088 	bcc.w	800ad9e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	2200      	movs	r2, #0
 800ac92:	61da      	str	r2, [r3, #28]
 800ac94:	2304      	movs	r3, #4
 800ac96:	e08f      	b.n	800adb8 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	0a5b      	lsrs	r3, r3, #9
 800ac9c:	68fa      	ldr	r2, [r7, #12]
 800ac9e:	8952      	ldrh	r2, [r2, #10]
 800aca0:	3a01      	subs	r2, #1
 800aca2:	4013      	ands	r3, r2
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d17a      	bne.n	800ad9e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800aca8:	687a      	ldr	r2, [r7, #4]
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	699b      	ldr	r3, [r3, #24]
 800acae:	4619      	mov	r1, r3
 800acb0:	4610      	mov	r0, r2
 800acb2:	f7ff fc88 	bl	800a5c6 <get_fat>
 800acb6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800acb8:	697b      	ldr	r3, [r7, #20]
 800acba:	2b01      	cmp	r3, #1
 800acbc:	d801      	bhi.n	800acc2 <dir_next+0x8c>
 800acbe:	2302      	movs	r3, #2
 800acc0:	e07a      	b.n	800adb8 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800acc2:	697b      	ldr	r3, [r7, #20]
 800acc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acc8:	d101      	bne.n	800acce <dir_next+0x98>
 800acca:	2301      	movs	r3, #1
 800accc:	e074      	b.n	800adb8 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	699b      	ldr	r3, [r3, #24]
 800acd2:	697a      	ldr	r2, [r7, #20]
 800acd4:	429a      	cmp	r2, r3
 800acd6:	d358      	bcc.n	800ad8a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d104      	bne.n	800ace8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	2200      	movs	r2, #0
 800ace2:	61da      	str	r2, [r3, #28]
 800ace4:	2304      	movs	r3, #4
 800ace6:	e067      	b.n	800adb8 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ace8:	687a      	ldr	r2, [r7, #4]
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	699b      	ldr	r3, [r3, #24]
 800acee:	4619      	mov	r1, r3
 800acf0:	4610      	mov	r0, r2
 800acf2:	f7ff fe59 	bl	800a9a8 <create_chain>
 800acf6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800acf8:	697b      	ldr	r3, [r7, #20]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d101      	bne.n	800ad02 <dir_next+0xcc>
 800acfe:	2307      	movs	r3, #7
 800ad00:	e05a      	b.n	800adb8 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ad02:	697b      	ldr	r3, [r7, #20]
 800ad04:	2b01      	cmp	r3, #1
 800ad06:	d101      	bne.n	800ad0c <dir_next+0xd6>
 800ad08:	2302      	movs	r3, #2
 800ad0a:	e055      	b.n	800adb8 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ad0c:	697b      	ldr	r3, [r7, #20]
 800ad0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad12:	d101      	bne.n	800ad18 <dir_next+0xe2>
 800ad14:	2301      	movs	r3, #1
 800ad16:	e04f      	b.n	800adb8 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ad18:	68f8      	ldr	r0, [r7, #12]
 800ad1a:	f7ff fb55 	bl	800a3c8 <sync_window>
 800ad1e:	4603      	mov	r3, r0
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d001      	beq.n	800ad28 <dir_next+0xf2>
 800ad24:	2301      	movs	r3, #1
 800ad26:	e047      	b.n	800adb8 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	3334      	adds	r3, #52	; 0x34
 800ad2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ad30:	2100      	movs	r1, #0
 800ad32:	4618      	mov	r0, r3
 800ad34:	f7ff f94f 	bl	8009fd6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ad38:	2300      	movs	r3, #0
 800ad3a:	613b      	str	r3, [r7, #16]
 800ad3c:	6979      	ldr	r1, [r7, #20]
 800ad3e:	68f8      	ldr	r0, [r7, #12]
 800ad40:	f7ff fc22 	bl	800a588 <clust2sect>
 800ad44:	4602      	mov	r2, r0
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	631a      	str	r2, [r3, #48]	; 0x30
 800ad4a:	e012      	b.n	800ad72 <dir_next+0x13c>
						fs->wflag = 1;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	2201      	movs	r2, #1
 800ad50:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ad52:	68f8      	ldr	r0, [r7, #12]
 800ad54:	f7ff fb38 	bl	800a3c8 <sync_window>
 800ad58:	4603      	mov	r3, r0
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d001      	beq.n	800ad62 <dir_next+0x12c>
 800ad5e:	2301      	movs	r3, #1
 800ad60:	e02a      	b.n	800adb8 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ad62:	693b      	ldr	r3, [r7, #16]
 800ad64:	3301      	adds	r3, #1
 800ad66:	613b      	str	r3, [r7, #16]
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad6c:	1c5a      	adds	r2, r3, #1
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	631a      	str	r2, [r3, #48]	; 0x30
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	895b      	ldrh	r3, [r3, #10]
 800ad76:	461a      	mov	r2, r3
 800ad78:	693b      	ldr	r3, [r7, #16]
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	d3e6      	bcc.n	800ad4c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad82:	693b      	ldr	r3, [r7, #16]
 800ad84:	1ad2      	subs	r2, r2, r3
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	697a      	ldr	r2, [r7, #20]
 800ad8e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800ad90:	6979      	ldr	r1, [r7, #20]
 800ad92:	68f8      	ldr	r0, [r7, #12]
 800ad94:	f7ff fbf8 	bl	800a588 <clust2sect>
 800ad98:	4602      	mov	r2, r0
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	68ba      	ldr	r2, [r7, #8]
 800ada2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adb0:	441a      	add	r2, r3
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800adb6:	2300      	movs	r3, #0
}
 800adb8:	4618      	mov	r0, r3
 800adba:	3718      	adds	r7, #24
 800adbc:	46bd      	mov	sp, r7
 800adbe:	bd80      	pop	{r7, pc}

0800adc0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b086      	sub	sp, #24
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
 800adc8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800add0:	2100      	movs	r1, #0
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f7ff feb4 	bl	800ab40 <dir_sdi>
 800add8:	4603      	mov	r3, r0
 800adda:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800addc:	7dfb      	ldrb	r3, [r7, #23]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d12b      	bne.n	800ae3a <dir_alloc+0x7a>
		n = 0;
 800ade2:	2300      	movs	r3, #0
 800ade4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	69db      	ldr	r3, [r3, #28]
 800adea:	4619      	mov	r1, r3
 800adec:	68f8      	ldr	r0, [r7, #12]
 800adee:	f7ff fb2f 	bl	800a450 <move_window>
 800adf2:	4603      	mov	r3, r0
 800adf4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800adf6:	7dfb      	ldrb	r3, [r7, #23]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d11d      	bne.n	800ae38 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	6a1b      	ldr	r3, [r3, #32]
 800ae00:	781b      	ldrb	r3, [r3, #0]
 800ae02:	2be5      	cmp	r3, #229	; 0xe5
 800ae04:	d004      	beq.n	800ae10 <dir_alloc+0x50>
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6a1b      	ldr	r3, [r3, #32]
 800ae0a:	781b      	ldrb	r3, [r3, #0]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d107      	bne.n	800ae20 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ae10:	693b      	ldr	r3, [r7, #16]
 800ae12:	3301      	adds	r3, #1
 800ae14:	613b      	str	r3, [r7, #16]
 800ae16:	693a      	ldr	r2, [r7, #16]
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	429a      	cmp	r2, r3
 800ae1c:	d102      	bne.n	800ae24 <dir_alloc+0x64>
 800ae1e:	e00c      	b.n	800ae3a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ae20:	2300      	movs	r3, #0
 800ae22:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ae24:	2101      	movs	r1, #1
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	f7ff ff05 	bl	800ac36 <dir_next>
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ae30:	7dfb      	ldrb	r3, [r7, #23]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d0d7      	beq.n	800ade6 <dir_alloc+0x26>
 800ae36:	e000      	b.n	800ae3a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ae38:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ae3a:	7dfb      	ldrb	r3, [r7, #23]
 800ae3c:	2b04      	cmp	r3, #4
 800ae3e:	d101      	bne.n	800ae44 <dir_alloc+0x84>
 800ae40:	2307      	movs	r3, #7
 800ae42:	75fb      	strb	r3, [r7, #23]
	return res;
 800ae44:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae46:	4618      	mov	r0, r3
 800ae48:	3718      	adds	r7, #24
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bd80      	pop	{r7, pc}

0800ae4e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800ae4e:	b580      	push	{r7, lr}
 800ae50:	b084      	sub	sp, #16
 800ae52:	af00      	add	r7, sp, #0
 800ae54:	6078      	str	r0, [r7, #4]
 800ae56:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	331a      	adds	r3, #26
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	f7ff f817 	bl	8009e90 <ld_word>
 800ae62:	4603      	mov	r3, r0
 800ae64:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	781b      	ldrb	r3, [r3, #0]
 800ae6a:	2b03      	cmp	r3, #3
 800ae6c:	d109      	bne.n	800ae82 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	3314      	adds	r3, #20
 800ae72:	4618      	mov	r0, r3
 800ae74:	f7ff f80c 	bl	8009e90 <ld_word>
 800ae78:	4603      	mov	r3, r0
 800ae7a:	041b      	lsls	r3, r3, #16
 800ae7c:	68fa      	ldr	r2, [r7, #12]
 800ae7e:	4313      	orrs	r3, r2
 800ae80:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ae82:	68fb      	ldr	r3, [r7, #12]
}
 800ae84:	4618      	mov	r0, r3
 800ae86:	3710      	adds	r7, #16
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	bd80      	pop	{r7, pc}

0800ae8c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b084      	sub	sp, #16
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	60f8      	str	r0, [r7, #12]
 800ae94:	60b9      	str	r1, [r7, #8]
 800ae96:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ae98:	68bb      	ldr	r3, [r7, #8]
 800ae9a:	331a      	adds	r3, #26
 800ae9c:	687a      	ldr	r2, [r7, #4]
 800ae9e:	b292      	uxth	r2, r2
 800aea0:	4611      	mov	r1, r2
 800aea2:	4618      	mov	r0, r3
 800aea4:	f7ff f82f 	bl	8009f06 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	781b      	ldrb	r3, [r3, #0]
 800aeac:	2b03      	cmp	r3, #3
 800aeae:	d109      	bne.n	800aec4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	f103 0214 	add.w	r2, r3, #20
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	0c1b      	lsrs	r3, r3, #16
 800aeba:	b29b      	uxth	r3, r3
 800aebc:	4619      	mov	r1, r3
 800aebe:	4610      	mov	r0, r2
 800aec0:	f7ff f821 	bl	8009f06 <st_word>
	}
}
 800aec4:	bf00      	nop
 800aec6:	3710      	adds	r7, #16
 800aec8:	46bd      	mov	sp, r7
 800aeca:	bd80      	pop	{r7, pc}

0800aecc <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b086      	sub	sp, #24
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
 800aed4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800aed6:	2304      	movs	r3, #4
 800aed8:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800aee0:	e03c      	b.n	800af5c <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	69db      	ldr	r3, [r3, #28]
 800aee6:	4619      	mov	r1, r3
 800aee8:	6938      	ldr	r0, [r7, #16]
 800aeea:	f7ff fab1 	bl	800a450 <move_window>
 800aeee:	4603      	mov	r3, r0
 800aef0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800aef2:	7dfb      	ldrb	r3, [r7, #23]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d136      	bne.n	800af66 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	6a1b      	ldr	r3, [r3, #32]
 800aefc:	781b      	ldrb	r3, [r3, #0]
 800aefe:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800af00:	7bfb      	ldrb	r3, [r7, #15]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d102      	bne.n	800af0c <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800af06:	2304      	movs	r3, #4
 800af08:	75fb      	strb	r3, [r7, #23]
 800af0a:	e031      	b.n	800af70 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	6a1b      	ldr	r3, [r3, #32]
 800af10:	330b      	adds	r3, #11
 800af12:	781b      	ldrb	r3, [r3, #0]
 800af14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800af18:	73bb      	strb	r3, [r7, #14]
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	7bba      	ldrb	r2, [r7, #14]
 800af1e:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800af20:	7bfb      	ldrb	r3, [r7, #15]
 800af22:	2be5      	cmp	r3, #229	; 0xe5
 800af24:	d011      	beq.n	800af4a <dir_read+0x7e>
 800af26:	7bfb      	ldrb	r3, [r7, #15]
 800af28:	2b2e      	cmp	r3, #46	; 0x2e
 800af2a:	d00e      	beq.n	800af4a <dir_read+0x7e>
 800af2c:	7bbb      	ldrb	r3, [r7, #14]
 800af2e:	2b0f      	cmp	r3, #15
 800af30:	d00b      	beq.n	800af4a <dir_read+0x7e>
 800af32:	7bbb      	ldrb	r3, [r7, #14]
 800af34:	f023 0320 	bic.w	r3, r3, #32
 800af38:	2b08      	cmp	r3, #8
 800af3a:	bf0c      	ite	eq
 800af3c:	2301      	moveq	r3, #1
 800af3e:	2300      	movne	r3, #0
 800af40:	b2db      	uxtb	r3, r3
 800af42:	461a      	mov	r2, r3
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	4293      	cmp	r3, r2
 800af48:	d00f      	beq.n	800af6a <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800af4a:	2100      	movs	r1, #0
 800af4c:	6878      	ldr	r0, [r7, #4]
 800af4e:	f7ff fe72 	bl	800ac36 <dir_next>
 800af52:	4603      	mov	r3, r0
 800af54:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800af56:	7dfb      	ldrb	r3, [r7, #23]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d108      	bne.n	800af6e <dir_read+0xa2>
	while (dp->sect) {
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	69db      	ldr	r3, [r3, #28]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d1be      	bne.n	800aee2 <dir_read+0x16>
 800af64:	e004      	b.n	800af70 <dir_read+0xa4>
		if (res != FR_OK) break;
 800af66:	bf00      	nop
 800af68:	e002      	b.n	800af70 <dir_read+0xa4>
				break;
 800af6a:	bf00      	nop
 800af6c:	e000      	b.n	800af70 <dir_read+0xa4>
		if (res != FR_OK) break;
 800af6e:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800af70:	7dfb      	ldrb	r3, [r7, #23]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d002      	beq.n	800af7c <dir_read+0xb0>
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	2200      	movs	r2, #0
 800af7a:	61da      	str	r2, [r3, #28]
	return res;
 800af7c:	7dfb      	ldrb	r3, [r7, #23]
}
 800af7e:	4618      	mov	r0, r3
 800af80:	3718      	adds	r7, #24
 800af82:	46bd      	mov	sp, r7
 800af84:	bd80      	pop	{r7, pc}

0800af86 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800af86:	b580      	push	{r7, lr}
 800af88:	b086      	sub	sp, #24
 800af8a:	af00      	add	r7, sp, #0
 800af8c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800af94:	2100      	movs	r1, #0
 800af96:	6878      	ldr	r0, [r7, #4]
 800af98:	f7ff fdd2 	bl	800ab40 <dir_sdi>
 800af9c:	4603      	mov	r3, r0
 800af9e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800afa0:	7dfb      	ldrb	r3, [r7, #23]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d001      	beq.n	800afaa <dir_find+0x24>
 800afa6:	7dfb      	ldrb	r3, [r7, #23]
 800afa8:	e03e      	b.n	800b028 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	69db      	ldr	r3, [r3, #28]
 800afae:	4619      	mov	r1, r3
 800afb0:	6938      	ldr	r0, [r7, #16]
 800afb2:	f7ff fa4d 	bl	800a450 <move_window>
 800afb6:	4603      	mov	r3, r0
 800afb8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800afba:	7dfb      	ldrb	r3, [r7, #23]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d12f      	bne.n	800b020 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	6a1b      	ldr	r3, [r3, #32]
 800afc4:	781b      	ldrb	r3, [r3, #0]
 800afc6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800afc8:	7bfb      	ldrb	r3, [r7, #15]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d102      	bne.n	800afd4 <dir_find+0x4e>
 800afce:	2304      	movs	r3, #4
 800afd0:	75fb      	strb	r3, [r7, #23]
 800afd2:	e028      	b.n	800b026 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	6a1b      	ldr	r3, [r3, #32]
 800afd8:	330b      	adds	r3, #11
 800afda:	781b      	ldrb	r3, [r3, #0]
 800afdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800afe0:	b2da      	uxtb	r2, r3
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	6a1b      	ldr	r3, [r3, #32]
 800afea:	330b      	adds	r3, #11
 800afec:	781b      	ldrb	r3, [r3, #0]
 800afee:	f003 0308 	and.w	r3, r3, #8
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d10a      	bne.n	800b00c <dir_find+0x86>
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	6a18      	ldr	r0, [r3, #32]
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	3324      	adds	r3, #36	; 0x24
 800affe:	220b      	movs	r2, #11
 800b000:	4619      	mov	r1, r3
 800b002:	f7ff f802 	bl	800a00a <mem_cmp>
 800b006:	4603      	mov	r3, r0
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d00b      	beq.n	800b024 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b00c:	2100      	movs	r1, #0
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	f7ff fe11 	bl	800ac36 <dir_next>
 800b014:	4603      	mov	r3, r0
 800b016:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b018:	7dfb      	ldrb	r3, [r7, #23]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d0c5      	beq.n	800afaa <dir_find+0x24>
 800b01e:	e002      	b.n	800b026 <dir_find+0xa0>
		if (res != FR_OK) break;
 800b020:	bf00      	nop
 800b022:	e000      	b.n	800b026 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b024:	bf00      	nop

	return res;
 800b026:	7dfb      	ldrb	r3, [r7, #23]
}
 800b028:	4618      	mov	r0, r3
 800b02a:	3718      	adds	r7, #24
 800b02c:	46bd      	mov	sp, r7
 800b02e:	bd80      	pop	{r7, pc}

0800b030 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b084      	sub	sp, #16
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800b03e:	2101      	movs	r1, #1
 800b040:	6878      	ldr	r0, [r7, #4]
 800b042:	f7ff febd 	bl	800adc0 <dir_alloc>
 800b046:	4603      	mov	r3, r0
 800b048:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b04a:	7bfb      	ldrb	r3, [r7, #15]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d11c      	bne.n	800b08a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	69db      	ldr	r3, [r3, #28]
 800b054:	4619      	mov	r1, r3
 800b056:	68b8      	ldr	r0, [r7, #8]
 800b058:	f7ff f9fa 	bl	800a450 <move_window>
 800b05c:	4603      	mov	r3, r0
 800b05e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b060:	7bfb      	ldrb	r3, [r7, #15]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d111      	bne.n	800b08a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6a1b      	ldr	r3, [r3, #32]
 800b06a:	2220      	movs	r2, #32
 800b06c:	2100      	movs	r1, #0
 800b06e:	4618      	mov	r0, r3
 800b070:	f7fe ffb1 	bl	8009fd6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	6a18      	ldr	r0, [r3, #32]
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	3324      	adds	r3, #36	; 0x24
 800b07c:	220b      	movs	r2, #11
 800b07e:	4619      	mov	r1, r3
 800b080:	f7fe ff88 	bl	8009f94 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800b084:	68bb      	ldr	r3, [r7, #8]
 800b086:	2201      	movs	r2, #1
 800b088:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b08a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b08c:	4618      	mov	r0, r3
 800b08e:	3710      	adds	r7, #16
 800b090:	46bd      	mov	sp, r7
 800b092:	bd80      	pop	{r7, pc}

0800b094 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b086      	sub	sp, #24
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
 800b09c:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800b09e:	683b      	ldr	r3, [r7, #0]
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	69db      	ldr	r3, [r3, #28]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d04e      	beq.n	800b14a <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	613b      	str	r3, [r7, #16]
 800b0b0:	693b      	ldr	r3, [r7, #16]
 800b0b2:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800b0b4:	e021      	b.n	800b0fa <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	6a1a      	ldr	r2, [r3, #32]
 800b0ba:	697b      	ldr	r3, [r7, #20]
 800b0bc:	1c59      	adds	r1, r3, #1
 800b0be:	6179      	str	r1, [r7, #20]
 800b0c0:	4413      	add	r3, r2
 800b0c2:	781b      	ldrb	r3, [r3, #0]
 800b0c4:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800b0c6:	7bfb      	ldrb	r3, [r7, #15]
 800b0c8:	2b20      	cmp	r3, #32
 800b0ca:	d100      	bne.n	800b0ce <get_fileinfo+0x3a>
 800b0cc:	e015      	b.n	800b0fa <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800b0ce:	7bfb      	ldrb	r3, [r7, #15]
 800b0d0:	2b05      	cmp	r3, #5
 800b0d2:	d101      	bne.n	800b0d8 <get_fileinfo+0x44>
 800b0d4:	23e5      	movs	r3, #229	; 0xe5
 800b0d6:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800b0d8:	697b      	ldr	r3, [r7, #20]
 800b0da:	2b09      	cmp	r3, #9
 800b0dc:	d106      	bne.n	800b0ec <get_fileinfo+0x58>
 800b0de:	693b      	ldr	r3, [r7, #16]
 800b0e0:	1c5a      	adds	r2, r3, #1
 800b0e2:	613a      	str	r2, [r7, #16]
 800b0e4:	683a      	ldr	r2, [r7, #0]
 800b0e6:	4413      	add	r3, r2
 800b0e8:	222e      	movs	r2, #46	; 0x2e
 800b0ea:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800b0ec:	693b      	ldr	r3, [r7, #16]
 800b0ee:	1c5a      	adds	r2, r3, #1
 800b0f0:	613a      	str	r2, [r7, #16]
 800b0f2:	683a      	ldr	r2, [r7, #0]
 800b0f4:	4413      	add	r3, r2
 800b0f6:	7bfa      	ldrb	r2, [r7, #15]
 800b0f8:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800b0fa:	697b      	ldr	r3, [r7, #20]
 800b0fc:	2b0a      	cmp	r3, #10
 800b0fe:	d9da      	bls.n	800b0b6 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800b100:	683a      	ldr	r2, [r7, #0]
 800b102:	693b      	ldr	r3, [r7, #16]
 800b104:	4413      	add	r3, r2
 800b106:	3309      	adds	r3, #9
 800b108:	2200      	movs	r2, #0
 800b10a:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6a1b      	ldr	r3, [r3, #32]
 800b110:	7ada      	ldrb	r2, [r3, #11]
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	6a1b      	ldr	r3, [r3, #32]
 800b11a:	331c      	adds	r3, #28
 800b11c:	4618      	mov	r0, r3
 800b11e:	f7fe fecf 	bl	8009ec0 <ld_dword>
 800b122:	4602      	mov	r2, r0
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	6a1b      	ldr	r3, [r3, #32]
 800b12c:	3316      	adds	r3, #22
 800b12e:	4618      	mov	r0, r3
 800b130:	f7fe fec6 	bl	8009ec0 <ld_dword>
 800b134:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800b136:	68bb      	ldr	r3, [r7, #8]
 800b138:	b29a      	uxth	r2, r3
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	80da      	strh	r2, [r3, #6]
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	0c1b      	lsrs	r3, r3, #16
 800b142:	b29a      	uxth	r2, r3
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	809a      	strh	r2, [r3, #4]
 800b148:	e000      	b.n	800b14c <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800b14a:	bf00      	nop
}
 800b14c:	3718      	adds	r7, #24
 800b14e:	46bd      	mov	sp, r7
 800b150:	bd80      	pop	{r7, pc}
	...

0800b154 <get_achar>:

static
WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
)
{
 800b154:	b480      	push	{r7}
 800b156:	b085      	sub	sp, #20
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	1c59      	adds	r1, r3, #1
 800b162:	687a      	ldr	r2, [r7, #4]
 800b164:	6011      	str	r1, [r2, #0]
 800b166:	781b      	ldrb	r3, [r3, #0]
 800b168:	81fb      	strh	r3, [r7, #14]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800b16a:	89fb      	ldrh	r3, [r7, #14]
 800b16c:	2b60      	cmp	r3, #96	; 0x60
 800b16e:	d905      	bls.n	800b17c <get_achar+0x28>
 800b170:	89fb      	ldrh	r3, [r7, #14]
 800b172:	2b7a      	cmp	r3, #122	; 0x7a
 800b174:	d802      	bhi.n	800b17c <get_achar+0x28>
 800b176:	89fb      	ldrh	r3, [r7, #14]
 800b178:	3b20      	subs	r3, #32
 800b17a:	81fb      	strh	r3, [r7, #14]
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800b17c:	89fb      	ldrh	r3, [r7, #14]
 800b17e:	2b7f      	cmp	r3, #127	; 0x7f
 800b180:	d904      	bls.n	800b18c <get_achar+0x38>
 800b182:	89fb      	ldrh	r3, [r7, #14]
 800b184:	3b80      	subs	r3, #128	; 0x80
 800b186:	4a05      	ldr	r2, [pc, #20]	; (800b19c <get_achar+0x48>)
 800b188:	5cd3      	ldrb	r3, [r2, r3]
 800b18a:	81fb      	strh	r3, [r7, #14]
#else
	if (IsDBCS1(chr) && IsDBCS2(**ptr)) {		/* Get DBC 2nd byte if needed */
		chr = chr << 8 | (BYTE)*(*ptr)++;
	}
#endif
	return chr;
 800b18c:	89fb      	ldrh	r3, [r7, #14]
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 800b18e:	4618      	mov	r0, r3
 800b190:	3714      	adds	r7, #20
 800b192:	46bd      	mov	sp, r7
 800b194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b198:	4770      	bx	lr
 800b19a:	bf00      	nop
 800b19c:	080123f8 	.word	0x080123f8

0800b1a0 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b08a      	sub	sp, #40	; 0x28
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	60f8      	str	r0, [r7, #12]
 800b1a8:	60b9      	str	r1, [r7, #8]
 800b1aa:	607a      	str	r2, [r7, #4]
 800b1ac:	603b      	str	r3, [r7, #0]
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 800b1ae:	e009      	b.n	800b1c4 <pattern_matching+0x24>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 800b1b0:	f107 0308 	add.w	r3, r7, #8
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	f7ff ffcd 	bl	800b154 <get_achar>
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d101      	bne.n	800b1c4 <pattern_matching+0x24>
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	e064      	b.n	800b28e <pattern_matching+0xee>
	while (skip--) {				/* Pre-skip name chars */
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	1e5a      	subs	r2, r3, #1
 800b1c8:	607a      	str	r2, [r7, #4]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d1f0      	bne.n	800b1b0 <pattern_matching+0x10>
	}
	if (!*pat && inf) return 1;		/* (short circuit) */
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	781b      	ldrb	r3, [r3, #0]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d104      	bne.n	800b1e0 <pattern_matching+0x40>
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d001      	beq.n	800b1e0 <pattern_matching+0x40>
 800b1dc:	2301      	movs	r3, #1
 800b1de:	e056      	b.n	800b28e <pattern_matching+0xee>

	do {
		pp = pat; np = nam;			/* Top of pattern and name to match */
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	617b      	str	r3, [r7, #20]
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	613b      	str	r3, [r7, #16]
		for (;;) {
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 800b1e8:	697b      	ldr	r3, [r7, #20]
 800b1ea:	781b      	ldrb	r3, [r3, #0]
 800b1ec:	2b3f      	cmp	r3, #63	; 0x3f
 800b1ee:	d003      	beq.n	800b1f8 <pattern_matching+0x58>
 800b1f0:	697b      	ldr	r3, [r7, #20]
 800b1f2:	781b      	ldrb	r3, [r3, #0]
 800b1f4:	2b2a      	cmp	r3, #42	; 0x2a
 800b1f6:	d126      	bne.n	800b246 <pattern_matching+0xa6>
				nm = nx = 0;
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	61fb      	str	r3, [r7, #28]
 800b1fc:	69fb      	ldr	r3, [r7, #28]
 800b1fe:	623b      	str	r3, [r7, #32]
				do {				/* Analyze the wildcard chars */
					if (*pp++ == '?') nm++; else nx = 1;
 800b200:	697b      	ldr	r3, [r7, #20]
 800b202:	1c5a      	adds	r2, r3, #1
 800b204:	617a      	str	r2, [r7, #20]
 800b206:	781b      	ldrb	r3, [r3, #0]
 800b208:	2b3f      	cmp	r3, #63	; 0x3f
 800b20a:	d103      	bne.n	800b214 <pattern_matching+0x74>
 800b20c:	6a3b      	ldr	r3, [r7, #32]
 800b20e:	3301      	adds	r3, #1
 800b210:	623b      	str	r3, [r7, #32]
 800b212:	e001      	b.n	800b218 <pattern_matching+0x78>
 800b214:	2301      	movs	r3, #1
 800b216:	61fb      	str	r3, [r7, #28]
				} while (*pp == '?' || *pp == '*');
 800b218:	697b      	ldr	r3, [r7, #20]
 800b21a:	781b      	ldrb	r3, [r3, #0]
 800b21c:	2b3f      	cmp	r3, #63	; 0x3f
 800b21e:	d0ef      	beq.n	800b200 <pattern_matching+0x60>
 800b220:	697b      	ldr	r3, [r7, #20]
 800b222:	781b      	ldrb	r3, [r3, #0]
 800b224:	2b2a      	cmp	r3, #42	; 0x2a
 800b226:	d0eb      	beq.n	800b200 <pattern_matching+0x60>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 800b228:	6978      	ldr	r0, [r7, #20]
 800b22a:	6939      	ldr	r1, [r7, #16]
 800b22c:	69fb      	ldr	r3, [r7, #28]
 800b22e:	6a3a      	ldr	r2, [r7, #32]
 800b230:	f7ff ffb6 	bl	800b1a0 <pattern_matching>
 800b234:	4603      	mov	r3, r0
 800b236:	2b00      	cmp	r3, #0
 800b238:	d001      	beq.n	800b23e <pattern_matching+0x9e>
 800b23a:	2301      	movs	r3, #1
 800b23c:	e027      	b.n	800b28e <pattern_matching+0xee>
				nc = *np; break;	/* Branch mismatched */
 800b23e:	693b      	ldr	r3, [r7, #16]
 800b240:	781b      	ldrb	r3, [r3, #0]
 800b242:	84fb      	strh	r3, [r7, #38]	; 0x26
 800b244:	e017      	b.n	800b276 <pattern_matching+0xd6>
			}
			pc = get_achar(&pp);	/* Get a pattern char */
 800b246:	f107 0314 	add.w	r3, r7, #20
 800b24a:	4618      	mov	r0, r3
 800b24c:	f7ff ff82 	bl	800b154 <get_achar>
 800b250:	4603      	mov	r3, r0
 800b252:	837b      	strh	r3, [r7, #26]
			nc = get_achar(&np);	/* Get a name char */
 800b254:	f107 0310 	add.w	r3, r7, #16
 800b258:	4618      	mov	r0, r3
 800b25a:	f7ff ff7b 	bl	800b154 <get_achar>
 800b25e:	4603      	mov	r3, r0
 800b260:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (pc != nc) break;	/* Branch mismatched? */
 800b262:	8b7a      	ldrh	r2, [r7, #26]
 800b264:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b266:	429a      	cmp	r2, r3
 800b268:	d104      	bne.n	800b274 <pattern_matching+0xd4>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 800b26a:	8b7b      	ldrh	r3, [r7, #26]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d1bb      	bne.n	800b1e8 <pattern_matching+0x48>
 800b270:	2301      	movs	r3, #1
 800b272:	e00c      	b.n	800b28e <pattern_matching+0xee>
			if (pc != nc) break;	/* Branch mismatched? */
 800b274:	bf00      	nop
		}
		get_achar(&nam);			/* nam++ */
 800b276:	f107 0308 	add.w	r3, r7, #8
 800b27a:	4618      	mov	r0, r3
 800b27c:	f7ff ff6a 	bl	800b154 <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d002      	beq.n	800b28c <pattern_matching+0xec>
 800b286:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d1a9      	bne.n	800b1e0 <pattern_matching+0x40>

	return 0;
 800b28c:	2300      	movs	r3, #0
}
 800b28e:	4618      	mov	r0, r3
 800b290:	3728      	adds	r7, #40	; 0x28
 800b292:	46bd      	mov	sp, r7
 800b294:	bd80      	pop	{r7, pc}
	...

0800b298 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b088      	sub	sp, #32
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
 800b2a0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	60fb      	str	r3, [r7, #12]
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	3324      	adds	r3, #36	; 0x24
 800b2ac:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800b2ae:	220b      	movs	r2, #11
 800b2b0:	2120      	movs	r1, #32
 800b2b2:	68b8      	ldr	r0, [r7, #8]
 800b2b4:	f7fe fe8f 	bl	8009fd6 <mem_set>
	si = i = 0; ni = 8;
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	613b      	str	r3, [r7, #16]
 800b2bc:	693b      	ldr	r3, [r7, #16]
 800b2be:	617b      	str	r3, [r7, #20]
 800b2c0:	2308      	movs	r3, #8
 800b2c2:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800b2c4:	697b      	ldr	r3, [r7, #20]
 800b2c6:	1c5a      	adds	r2, r3, #1
 800b2c8:	617a      	str	r2, [r7, #20]
 800b2ca:	68fa      	ldr	r2, [r7, #12]
 800b2cc:	4413      	add	r3, r2
 800b2ce:	781b      	ldrb	r3, [r3, #0]
 800b2d0:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b2d2:	7ffb      	ldrb	r3, [r7, #31]
 800b2d4:	2b20      	cmp	r3, #32
 800b2d6:	d94e      	bls.n	800b376 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800b2d8:	7ffb      	ldrb	r3, [r7, #31]
 800b2da:	2b2f      	cmp	r3, #47	; 0x2f
 800b2dc:	d006      	beq.n	800b2ec <create_name+0x54>
 800b2de:	7ffb      	ldrb	r3, [r7, #31]
 800b2e0:	2b5c      	cmp	r3, #92	; 0x5c
 800b2e2:	d110      	bne.n	800b306 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b2e4:	e002      	b.n	800b2ec <create_name+0x54>
 800b2e6:	697b      	ldr	r3, [r7, #20]
 800b2e8:	3301      	adds	r3, #1
 800b2ea:	617b      	str	r3, [r7, #20]
 800b2ec:	68fa      	ldr	r2, [r7, #12]
 800b2ee:	697b      	ldr	r3, [r7, #20]
 800b2f0:	4413      	add	r3, r2
 800b2f2:	781b      	ldrb	r3, [r3, #0]
 800b2f4:	2b2f      	cmp	r3, #47	; 0x2f
 800b2f6:	d0f6      	beq.n	800b2e6 <create_name+0x4e>
 800b2f8:	68fa      	ldr	r2, [r7, #12]
 800b2fa:	697b      	ldr	r3, [r7, #20]
 800b2fc:	4413      	add	r3, r2
 800b2fe:	781b      	ldrb	r3, [r3, #0]
 800b300:	2b5c      	cmp	r3, #92	; 0x5c
 800b302:	d0f0      	beq.n	800b2e6 <create_name+0x4e>
			break;
 800b304:	e038      	b.n	800b378 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800b306:	7ffb      	ldrb	r3, [r7, #31]
 800b308:	2b2e      	cmp	r3, #46	; 0x2e
 800b30a:	d003      	beq.n	800b314 <create_name+0x7c>
 800b30c:	693a      	ldr	r2, [r7, #16]
 800b30e:	69bb      	ldr	r3, [r7, #24]
 800b310:	429a      	cmp	r2, r3
 800b312:	d30c      	bcc.n	800b32e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800b314:	69bb      	ldr	r3, [r7, #24]
 800b316:	2b0b      	cmp	r3, #11
 800b318:	d002      	beq.n	800b320 <create_name+0x88>
 800b31a:	7ffb      	ldrb	r3, [r7, #31]
 800b31c:	2b2e      	cmp	r3, #46	; 0x2e
 800b31e:	d001      	beq.n	800b324 <create_name+0x8c>
 800b320:	2306      	movs	r3, #6
 800b322:	e044      	b.n	800b3ae <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800b324:	2308      	movs	r3, #8
 800b326:	613b      	str	r3, [r7, #16]
 800b328:	230b      	movs	r3, #11
 800b32a:	61bb      	str	r3, [r7, #24]
			continue;
 800b32c:	e022      	b.n	800b374 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800b32e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b332:	2b00      	cmp	r3, #0
 800b334:	da04      	bge.n	800b340 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800b336:	7ffb      	ldrb	r3, [r7, #31]
 800b338:	3b80      	subs	r3, #128	; 0x80
 800b33a:	4a1f      	ldr	r2, [pc, #124]	; (800b3b8 <create_name+0x120>)
 800b33c:	5cd3      	ldrb	r3, [r2, r3]
 800b33e:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800b340:	7ffb      	ldrb	r3, [r7, #31]
 800b342:	4619      	mov	r1, r3
 800b344:	481d      	ldr	r0, [pc, #116]	; (800b3bc <create_name+0x124>)
 800b346:	f7fe fe87 	bl	800a058 <chk_chr>
 800b34a:	4603      	mov	r3, r0
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d001      	beq.n	800b354 <create_name+0xbc>
 800b350:	2306      	movs	r3, #6
 800b352:	e02c      	b.n	800b3ae <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800b354:	7ffb      	ldrb	r3, [r7, #31]
 800b356:	2b60      	cmp	r3, #96	; 0x60
 800b358:	d905      	bls.n	800b366 <create_name+0xce>
 800b35a:	7ffb      	ldrb	r3, [r7, #31]
 800b35c:	2b7a      	cmp	r3, #122	; 0x7a
 800b35e:	d802      	bhi.n	800b366 <create_name+0xce>
 800b360:	7ffb      	ldrb	r3, [r7, #31]
 800b362:	3b20      	subs	r3, #32
 800b364:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800b366:	693b      	ldr	r3, [r7, #16]
 800b368:	1c5a      	adds	r2, r3, #1
 800b36a:	613a      	str	r2, [r7, #16]
 800b36c:	68ba      	ldr	r2, [r7, #8]
 800b36e:	4413      	add	r3, r2
 800b370:	7ffa      	ldrb	r2, [r7, #31]
 800b372:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800b374:	e7a6      	b.n	800b2c4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b376:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800b378:	68fa      	ldr	r2, [r7, #12]
 800b37a:	697b      	ldr	r3, [r7, #20]
 800b37c:	441a      	add	r2, r3
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800b382:	693b      	ldr	r3, [r7, #16]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d101      	bne.n	800b38c <create_name+0xf4>
 800b388:	2306      	movs	r3, #6
 800b38a:	e010      	b.n	800b3ae <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b38c:	68bb      	ldr	r3, [r7, #8]
 800b38e:	781b      	ldrb	r3, [r3, #0]
 800b390:	2be5      	cmp	r3, #229	; 0xe5
 800b392:	d102      	bne.n	800b39a <create_name+0x102>
 800b394:	68bb      	ldr	r3, [r7, #8]
 800b396:	2205      	movs	r2, #5
 800b398:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b39a:	7ffb      	ldrb	r3, [r7, #31]
 800b39c:	2b20      	cmp	r3, #32
 800b39e:	d801      	bhi.n	800b3a4 <create_name+0x10c>
 800b3a0:	2204      	movs	r2, #4
 800b3a2:	e000      	b.n	800b3a6 <create_name+0x10e>
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	68bb      	ldr	r3, [r7, #8]
 800b3a8:	330b      	adds	r3, #11
 800b3aa:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800b3ac:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	3720      	adds	r7, #32
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}
 800b3b6:	bf00      	nop
 800b3b8:	080123f8 	.word	0x080123f8
 800b3bc:	08012290 	.word	0x08012290

0800b3c0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b086      	sub	sp, #24
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
 800b3c8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b3ce:	693b      	ldr	r3, [r7, #16]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b3d4:	e002      	b.n	800b3dc <follow_path+0x1c>
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	3301      	adds	r3, #1
 800b3da:	603b      	str	r3, [r7, #0]
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	781b      	ldrb	r3, [r3, #0]
 800b3e0:	2b2f      	cmp	r3, #47	; 0x2f
 800b3e2:	d0f8      	beq.n	800b3d6 <follow_path+0x16>
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	781b      	ldrb	r3, [r3, #0]
 800b3e8:	2b5c      	cmp	r3, #92	; 0x5c
 800b3ea:	d0f4      	beq.n	800b3d6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b3ec:	693b      	ldr	r3, [r7, #16]
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	781b      	ldrb	r3, [r3, #0]
 800b3f6:	2b1f      	cmp	r3, #31
 800b3f8:	d80a      	bhi.n	800b410 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	2280      	movs	r2, #128	; 0x80
 800b3fe:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800b402:	2100      	movs	r1, #0
 800b404:	6878      	ldr	r0, [r7, #4]
 800b406:	f7ff fb9b 	bl	800ab40 <dir_sdi>
 800b40a:	4603      	mov	r3, r0
 800b40c:	75fb      	strb	r3, [r7, #23]
 800b40e:	e043      	b.n	800b498 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b410:	463b      	mov	r3, r7
 800b412:	4619      	mov	r1, r3
 800b414:	6878      	ldr	r0, [r7, #4]
 800b416:	f7ff ff3f 	bl	800b298 <create_name>
 800b41a:	4603      	mov	r3, r0
 800b41c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b41e:	7dfb      	ldrb	r3, [r7, #23]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d134      	bne.n	800b48e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b424:	6878      	ldr	r0, [r7, #4]
 800b426:	f7ff fdae 	bl	800af86 <dir_find>
 800b42a:	4603      	mov	r3, r0
 800b42c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b434:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b436:	7dfb      	ldrb	r3, [r7, #23]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d00a      	beq.n	800b452 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b43c:	7dfb      	ldrb	r3, [r7, #23]
 800b43e:	2b04      	cmp	r3, #4
 800b440:	d127      	bne.n	800b492 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b442:	7afb      	ldrb	r3, [r7, #11]
 800b444:	f003 0304 	and.w	r3, r3, #4
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d122      	bne.n	800b492 <follow_path+0xd2>
 800b44c:	2305      	movs	r3, #5
 800b44e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b450:	e01f      	b.n	800b492 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b452:	7afb      	ldrb	r3, [r7, #11]
 800b454:	f003 0304 	and.w	r3, r3, #4
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d11c      	bne.n	800b496 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b45c:	693b      	ldr	r3, [r7, #16]
 800b45e:	799b      	ldrb	r3, [r3, #6]
 800b460:	f003 0310 	and.w	r3, r3, #16
 800b464:	2b00      	cmp	r3, #0
 800b466:	d102      	bne.n	800b46e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800b468:	2305      	movs	r3, #5
 800b46a:	75fb      	strb	r3, [r7, #23]
 800b46c:	e014      	b.n	800b498 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	695b      	ldr	r3, [r3, #20]
 800b478:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b47c:	4413      	add	r3, r2
 800b47e:	4619      	mov	r1, r3
 800b480:	68f8      	ldr	r0, [r7, #12]
 800b482:	f7ff fce4 	bl	800ae4e <ld_clust>
 800b486:	4602      	mov	r2, r0
 800b488:	693b      	ldr	r3, [r7, #16]
 800b48a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b48c:	e7c0      	b.n	800b410 <follow_path+0x50>
			if (res != FR_OK) break;
 800b48e:	bf00      	nop
 800b490:	e002      	b.n	800b498 <follow_path+0xd8>
				break;
 800b492:	bf00      	nop
 800b494:	e000      	b.n	800b498 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b496:	bf00      	nop
			}
		}
	}

	return res;
 800b498:	7dfb      	ldrb	r3, [r7, #23]
}
 800b49a:	4618      	mov	r0, r3
 800b49c:	3718      	adds	r7, #24
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bd80      	pop	{r7, pc}

0800b4a2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b4a2:	b480      	push	{r7}
 800b4a4:	b087      	sub	sp, #28
 800b4a6:	af00      	add	r7, sp, #0
 800b4a8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b4aa:	f04f 33ff 	mov.w	r3, #4294967295
 800b4ae:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d031      	beq.n	800b51c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	617b      	str	r3, [r7, #20]
 800b4be:	e002      	b.n	800b4c6 <get_ldnumber+0x24>
 800b4c0:	697b      	ldr	r3, [r7, #20]
 800b4c2:	3301      	adds	r3, #1
 800b4c4:	617b      	str	r3, [r7, #20]
 800b4c6:	697b      	ldr	r3, [r7, #20]
 800b4c8:	781b      	ldrb	r3, [r3, #0]
 800b4ca:	2b20      	cmp	r3, #32
 800b4cc:	d903      	bls.n	800b4d6 <get_ldnumber+0x34>
 800b4ce:	697b      	ldr	r3, [r7, #20]
 800b4d0:	781b      	ldrb	r3, [r3, #0]
 800b4d2:	2b3a      	cmp	r3, #58	; 0x3a
 800b4d4:	d1f4      	bne.n	800b4c0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b4d6:	697b      	ldr	r3, [r7, #20]
 800b4d8:	781b      	ldrb	r3, [r3, #0]
 800b4da:	2b3a      	cmp	r3, #58	; 0x3a
 800b4dc:	d11c      	bne.n	800b518 <get_ldnumber+0x76>
			tp = *path;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	1c5a      	adds	r2, r3, #1
 800b4e8:	60fa      	str	r2, [r7, #12]
 800b4ea:	781b      	ldrb	r3, [r3, #0]
 800b4ec:	3b30      	subs	r3, #48	; 0x30
 800b4ee:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	2b09      	cmp	r3, #9
 800b4f4:	d80e      	bhi.n	800b514 <get_ldnumber+0x72>
 800b4f6:	68fa      	ldr	r2, [r7, #12]
 800b4f8:	697b      	ldr	r3, [r7, #20]
 800b4fa:	429a      	cmp	r2, r3
 800b4fc:	d10a      	bne.n	800b514 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b4fe:	68bb      	ldr	r3, [r7, #8]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d107      	bne.n	800b514 <get_ldnumber+0x72>
					vol = (int)i;
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b508:	697b      	ldr	r3, [r7, #20]
 800b50a:	3301      	adds	r3, #1
 800b50c:	617b      	str	r3, [r7, #20]
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	697a      	ldr	r2, [r7, #20]
 800b512:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b514:	693b      	ldr	r3, [r7, #16]
 800b516:	e002      	b.n	800b51e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b518:	2300      	movs	r3, #0
 800b51a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b51c:	693b      	ldr	r3, [r7, #16]
}
 800b51e:	4618      	mov	r0, r3
 800b520:	371c      	adds	r7, #28
 800b522:	46bd      	mov	sp, r7
 800b524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b528:	4770      	bx	lr
	...

0800b52c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b082      	sub	sp, #8
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
 800b534:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	2200      	movs	r2, #0
 800b53a:	70da      	strb	r2, [r3, #3]
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	f04f 32ff 	mov.w	r2, #4294967295
 800b542:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b544:	6839      	ldr	r1, [r7, #0]
 800b546:	6878      	ldr	r0, [r7, #4]
 800b548:	f7fe ff82 	bl	800a450 <move_window>
 800b54c:	4603      	mov	r3, r0
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d001      	beq.n	800b556 <check_fs+0x2a>
 800b552:	2304      	movs	r3, #4
 800b554:	e038      	b.n	800b5c8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	3334      	adds	r3, #52	; 0x34
 800b55a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b55e:	4618      	mov	r0, r3
 800b560:	f7fe fc96 	bl	8009e90 <ld_word>
 800b564:	4603      	mov	r3, r0
 800b566:	461a      	mov	r2, r3
 800b568:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b56c:	429a      	cmp	r2, r3
 800b56e:	d001      	beq.n	800b574 <check_fs+0x48>
 800b570:	2303      	movs	r3, #3
 800b572:	e029      	b.n	800b5c8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b57a:	2be9      	cmp	r3, #233	; 0xe9
 800b57c:	d009      	beq.n	800b592 <check_fs+0x66>
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b584:	2beb      	cmp	r3, #235	; 0xeb
 800b586:	d11e      	bne.n	800b5c6 <check_fs+0x9a>
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800b58e:	2b90      	cmp	r3, #144	; 0x90
 800b590:	d119      	bne.n	800b5c6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	3334      	adds	r3, #52	; 0x34
 800b596:	3336      	adds	r3, #54	; 0x36
 800b598:	4618      	mov	r0, r3
 800b59a:	f7fe fc91 	bl	8009ec0 <ld_dword>
 800b59e:	4603      	mov	r3, r0
 800b5a0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b5a4:	4a0a      	ldr	r2, [pc, #40]	; (800b5d0 <check_fs+0xa4>)
 800b5a6:	4293      	cmp	r3, r2
 800b5a8:	d101      	bne.n	800b5ae <check_fs+0x82>
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	e00c      	b.n	800b5c8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	3334      	adds	r3, #52	; 0x34
 800b5b2:	3352      	adds	r3, #82	; 0x52
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	f7fe fc83 	bl	8009ec0 <ld_dword>
 800b5ba:	4602      	mov	r2, r0
 800b5bc:	4b05      	ldr	r3, [pc, #20]	; (800b5d4 <check_fs+0xa8>)
 800b5be:	429a      	cmp	r2, r3
 800b5c0:	d101      	bne.n	800b5c6 <check_fs+0x9a>
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	e000      	b.n	800b5c8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b5c6:	2302      	movs	r3, #2
}
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	3708      	adds	r7, #8
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	bd80      	pop	{r7, pc}
 800b5d0:	00544146 	.word	0x00544146
 800b5d4:	33544146 	.word	0x33544146

0800b5d8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b096      	sub	sp, #88	; 0x58
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	60f8      	str	r0, [r7, #12]
 800b5e0:	60b9      	str	r1, [r7, #8]
 800b5e2:	4613      	mov	r3, r2
 800b5e4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b5e6:	68bb      	ldr	r3, [r7, #8]
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b5ec:	68f8      	ldr	r0, [r7, #12]
 800b5ee:	f7ff ff58 	bl	800b4a2 <get_ldnumber>
 800b5f2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b5f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	da01      	bge.n	800b5fe <find_volume+0x26>
 800b5fa:	230b      	movs	r3, #11
 800b5fc:	e236      	b.n	800ba6c <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b5fe:	4aac      	ldr	r2, [pc, #688]	; (800b8b0 <find_volume+0x2d8>)
 800b600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b606:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d101      	bne.n	800b612 <find_volume+0x3a>
 800b60e:	230c      	movs	r3, #12
 800b610:	e22c      	b.n	800ba6c <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 800b612:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b614:	f7fe fd3b 	bl	800a08e <lock_fs>
 800b618:	4603      	mov	r3, r0
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d101      	bne.n	800b622 <find_volume+0x4a>
 800b61e:	230f      	movs	r3, #15
 800b620:	e224      	b.n	800ba6c <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b626:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b628:	79fb      	ldrb	r3, [r7, #7]
 800b62a:	f023 0301 	bic.w	r3, r3, #1
 800b62e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b632:	781b      	ldrb	r3, [r3, #0]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d01a      	beq.n	800b66e <find_volume+0x96>
		stat = disk_status(fs->drv);
 800b638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b63a:	785b      	ldrb	r3, [r3, #1]
 800b63c:	4618      	mov	r0, r3
 800b63e:	f7fe fb89 	bl	8009d54 <disk_status>
 800b642:	4603      	mov	r3, r0
 800b644:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b648:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b64c:	f003 0301 	and.w	r3, r3, #1
 800b650:	2b00      	cmp	r3, #0
 800b652:	d10c      	bne.n	800b66e <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b654:	79fb      	ldrb	r3, [r7, #7]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d007      	beq.n	800b66a <find_volume+0x92>
 800b65a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b65e:	f003 0304 	and.w	r3, r3, #4
 800b662:	2b00      	cmp	r3, #0
 800b664:	d001      	beq.n	800b66a <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800b666:	230a      	movs	r3, #10
 800b668:	e200      	b.n	800ba6c <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 800b66a:	2300      	movs	r3, #0
 800b66c:	e1fe      	b.n	800ba6c <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b66e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b670:	2200      	movs	r2, #0
 800b672:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b676:	b2da      	uxtb	r2, r3
 800b678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b67a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b67c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b67e:	785b      	ldrb	r3, [r3, #1]
 800b680:	4618      	mov	r0, r3
 800b682:	f7fe fb81 	bl	8009d88 <disk_initialize>
 800b686:	4603      	mov	r3, r0
 800b688:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b68c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b690:	f003 0301 	and.w	r3, r3, #1
 800b694:	2b00      	cmp	r3, #0
 800b696:	d001      	beq.n	800b69c <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b698:	2303      	movs	r3, #3
 800b69a:	e1e7      	b.n	800ba6c <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b69c:	79fb      	ldrb	r3, [r7, #7]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d007      	beq.n	800b6b2 <find_volume+0xda>
 800b6a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b6a6:	f003 0304 	and.w	r3, r3, #4
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d001      	beq.n	800b6b2 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800b6ae:	230a      	movs	r3, #10
 800b6b0:	e1dc      	b.n	800ba6c <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b6b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b6b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b6ba:	f7ff ff37 	bl	800b52c <check_fs>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b6c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b6c8:	2b02      	cmp	r3, #2
 800b6ca:	d14b      	bne.n	800b764 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	643b      	str	r3, [r7, #64]	; 0x40
 800b6d0:	e01f      	b.n	800b712 <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b6d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6d4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b6d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b6da:	011b      	lsls	r3, r3, #4
 800b6dc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b6e0:	4413      	add	r3, r2
 800b6e2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b6e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6e6:	3304      	adds	r3, #4
 800b6e8:	781b      	ldrb	r3, [r3, #0]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d006      	beq.n	800b6fc <find_volume+0x124>
 800b6ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6f0:	3308      	adds	r3, #8
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	f7fe fbe4 	bl	8009ec0 <ld_dword>
 800b6f8:	4602      	mov	r2, r0
 800b6fa:	e000      	b.n	800b6fe <find_volume+0x126>
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b700:	009b      	lsls	r3, r3, #2
 800b702:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800b706:	440b      	add	r3, r1
 800b708:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b70c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b70e:	3301      	adds	r3, #1
 800b710:	643b      	str	r3, [r7, #64]	; 0x40
 800b712:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b714:	2b03      	cmp	r3, #3
 800b716:	d9dc      	bls.n	800b6d2 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b718:	2300      	movs	r3, #0
 800b71a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b71c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d002      	beq.n	800b728 <find_volume+0x150>
 800b722:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b724:	3b01      	subs	r3, #1
 800b726:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b728:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b72a:	009b      	lsls	r3, r3, #2
 800b72c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b730:	4413      	add	r3, r2
 800b732:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b736:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b738:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d005      	beq.n	800b74a <find_volume+0x172>
 800b73e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b740:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b742:	f7ff fef3 	bl	800b52c <check_fs>
 800b746:	4603      	mov	r3, r0
 800b748:	e000      	b.n	800b74c <find_volume+0x174>
 800b74a:	2303      	movs	r3, #3
 800b74c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b750:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b754:	2b01      	cmp	r3, #1
 800b756:	d905      	bls.n	800b764 <find_volume+0x18c>
 800b758:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b75a:	3301      	adds	r3, #1
 800b75c:	643b      	str	r3, [r7, #64]	; 0x40
 800b75e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b760:	2b03      	cmp	r3, #3
 800b762:	d9e1      	bls.n	800b728 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b764:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b768:	2b04      	cmp	r3, #4
 800b76a:	d101      	bne.n	800b770 <find_volume+0x198>
 800b76c:	2301      	movs	r3, #1
 800b76e:	e17d      	b.n	800ba6c <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b770:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b774:	2b01      	cmp	r3, #1
 800b776:	d901      	bls.n	800b77c <find_volume+0x1a4>
 800b778:	230d      	movs	r3, #13
 800b77a:	e177      	b.n	800ba6c <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b77c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b77e:	3334      	adds	r3, #52	; 0x34
 800b780:	330b      	adds	r3, #11
 800b782:	4618      	mov	r0, r3
 800b784:	f7fe fb84 	bl	8009e90 <ld_word>
 800b788:	4603      	mov	r3, r0
 800b78a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b78e:	d001      	beq.n	800b794 <find_volume+0x1bc>
 800b790:	230d      	movs	r3, #13
 800b792:	e16b      	b.n	800ba6c <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b796:	3334      	adds	r3, #52	; 0x34
 800b798:	3316      	adds	r3, #22
 800b79a:	4618      	mov	r0, r3
 800b79c:	f7fe fb78 	bl	8009e90 <ld_word>
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b7a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d106      	bne.n	800b7b8 <find_volume+0x1e0>
 800b7aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ac:	3334      	adds	r3, #52	; 0x34
 800b7ae:	3324      	adds	r3, #36	; 0x24
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	f7fe fb85 	bl	8009ec0 <ld_dword>
 800b7b6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800b7b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b7bc:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b7be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7c0:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800b7c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7c6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b7c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ca:	789b      	ldrb	r3, [r3, #2]
 800b7cc:	2b01      	cmp	r3, #1
 800b7ce:	d005      	beq.n	800b7dc <find_volume+0x204>
 800b7d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7d2:	789b      	ldrb	r3, [r3, #2]
 800b7d4:	2b02      	cmp	r3, #2
 800b7d6:	d001      	beq.n	800b7dc <find_volume+0x204>
 800b7d8:	230d      	movs	r3, #13
 800b7da:	e147      	b.n	800ba6c <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b7dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7de:	789b      	ldrb	r3, [r3, #2]
 800b7e0:	461a      	mov	r2, r3
 800b7e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7e4:	fb02 f303 	mul.w	r3, r2, r3
 800b7e8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b7ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b7f0:	b29a      	uxth	r2, r3
 800b7f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7f4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b7f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7f8:	895b      	ldrh	r3, [r3, #10]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d008      	beq.n	800b810 <find_volume+0x238>
 800b7fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b800:	895b      	ldrh	r3, [r3, #10]
 800b802:	461a      	mov	r2, r3
 800b804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b806:	895b      	ldrh	r3, [r3, #10]
 800b808:	3b01      	subs	r3, #1
 800b80a:	4013      	ands	r3, r2
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d001      	beq.n	800b814 <find_volume+0x23c>
 800b810:	230d      	movs	r3, #13
 800b812:	e12b      	b.n	800ba6c <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b816:	3334      	adds	r3, #52	; 0x34
 800b818:	3311      	adds	r3, #17
 800b81a:	4618      	mov	r0, r3
 800b81c:	f7fe fb38 	bl	8009e90 <ld_word>
 800b820:	4603      	mov	r3, r0
 800b822:	461a      	mov	r2, r3
 800b824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b826:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b82a:	891b      	ldrh	r3, [r3, #8]
 800b82c:	f003 030f 	and.w	r3, r3, #15
 800b830:	b29b      	uxth	r3, r3
 800b832:	2b00      	cmp	r3, #0
 800b834:	d001      	beq.n	800b83a <find_volume+0x262>
 800b836:	230d      	movs	r3, #13
 800b838:	e118      	b.n	800ba6c <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b83a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b83c:	3334      	adds	r3, #52	; 0x34
 800b83e:	3313      	adds	r3, #19
 800b840:	4618      	mov	r0, r3
 800b842:	f7fe fb25 	bl	8009e90 <ld_word>
 800b846:	4603      	mov	r3, r0
 800b848:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b84a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d106      	bne.n	800b85e <find_volume+0x286>
 800b850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b852:	3334      	adds	r3, #52	; 0x34
 800b854:	3320      	adds	r3, #32
 800b856:	4618      	mov	r0, r3
 800b858:	f7fe fb32 	bl	8009ec0 <ld_dword>
 800b85c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b85e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b860:	3334      	adds	r3, #52	; 0x34
 800b862:	330e      	adds	r3, #14
 800b864:	4618      	mov	r0, r3
 800b866:	f7fe fb13 	bl	8009e90 <ld_word>
 800b86a:	4603      	mov	r3, r0
 800b86c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b86e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b870:	2b00      	cmp	r3, #0
 800b872:	d101      	bne.n	800b878 <find_volume+0x2a0>
 800b874:	230d      	movs	r3, #13
 800b876:	e0f9      	b.n	800ba6c <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b878:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b87a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b87c:	4413      	add	r3, r2
 800b87e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b880:	8912      	ldrh	r2, [r2, #8]
 800b882:	0912      	lsrs	r2, r2, #4
 800b884:	b292      	uxth	r2, r2
 800b886:	4413      	add	r3, r2
 800b888:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b88a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b88c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b88e:	429a      	cmp	r2, r3
 800b890:	d201      	bcs.n	800b896 <find_volume+0x2be>
 800b892:	230d      	movs	r3, #13
 800b894:	e0ea      	b.n	800ba6c <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b896:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b89a:	1ad3      	subs	r3, r2, r3
 800b89c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b89e:	8952      	ldrh	r2, [r2, #10]
 800b8a0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b8a4:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b8a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d103      	bne.n	800b8b4 <find_volume+0x2dc>
 800b8ac:	230d      	movs	r3, #13
 800b8ae:	e0dd      	b.n	800ba6c <find_volume+0x494>
 800b8b0:	20000220 	.word	0x20000220
		fmt = FS_FAT32;
 800b8b4:	2303      	movs	r3, #3
 800b8b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8bc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b8c0:	4293      	cmp	r3, r2
 800b8c2:	d802      	bhi.n	800b8ca <find_volume+0x2f2>
 800b8c4:	2302      	movs	r3, #2
 800b8c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8cc:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b8d0:	4293      	cmp	r3, r2
 800b8d2:	d802      	bhi.n	800b8da <find_volume+0x302>
 800b8d4:	2301      	movs	r3, #1
 800b8d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8dc:	1c9a      	adds	r2, r3, #2
 800b8de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8e0:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800b8e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b8e6:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b8e8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b8ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8ec:	441a      	add	r2, r3
 800b8ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8f0:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800b8f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b8f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8f6:	441a      	add	r2, r3
 800b8f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8fa:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800b8fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b900:	2b03      	cmp	r3, #3
 800b902:	d11e      	bne.n	800b942 <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b906:	3334      	adds	r3, #52	; 0x34
 800b908:	332a      	adds	r3, #42	; 0x2a
 800b90a:	4618      	mov	r0, r3
 800b90c:	f7fe fac0 	bl	8009e90 <ld_word>
 800b910:	4603      	mov	r3, r0
 800b912:	2b00      	cmp	r3, #0
 800b914:	d001      	beq.n	800b91a <find_volume+0x342>
 800b916:	230d      	movs	r3, #13
 800b918:	e0a8      	b.n	800ba6c <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b91a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b91c:	891b      	ldrh	r3, [r3, #8]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d001      	beq.n	800b926 <find_volume+0x34e>
 800b922:	230d      	movs	r3, #13
 800b924:	e0a2      	b.n	800ba6c <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b928:	3334      	adds	r3, #52	; 0x34
 800b92a:	332c      	adds	r3, #44	; 0x2c
 800b92c:	4618      	mov	r0, r3
 800b92e:	f7fe fac7 	bl	8009ec0 <ld_dword>
 800b932:	4602      	mov	r2, r0
 800b934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b936:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b93a:	699b      	ldr	r3, [r3, #24]
 800b93c:	009b      	lsls	r3, r3, #2
 800b93e:	647b      	str	r3, [r7, #68]	; 0x44
 800b940:	e01f      	b.n	800b982 <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b944:	891b      	ldrh	r3, [r3, #8]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d101      	bne.n	800b94e <find_volume+0x376>
 800b94a:	230d      	movs	r3, #13
 800b94c:	e08e      	b.n	800ba6c <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b94e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b950:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b952:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b954:	441a      	add	r2, r3
 800b956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b958:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b95a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b95e:	2b02      	cmp	r3, #2
 800b960:	d103      	bne.n	800b96a <find_volume+0x392>
 800b962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b964:	699b      	ldr	r3, [r3, #24]
 800b966:	005b      	lsls	r3, r3, #1
 800b968:	e00a      	b.n	800b980 <find_volume+0x3a8>
 800b96a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b96c:	699a      	ldr	r2, [r3, #24]
 800b96e:	4613      	mov	r3, r2
 800b970:	005b      	lsls	r3, r3, #1
 800b972:	4413      	add	r3, r2
 800b974:	085a      	lsrs	r2, r3, #1
 800b976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b978:	699b      	ldr	r3, [r3, #24]
 800b97a:	f003 0301 	and.w	r3, r3, #1
 800b97e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b980:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b984:	69da      	ldr	r2, [r3, #28]
 800b986:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b988:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b98c:	0a5b      	lsrs	r3, r3, #9
 800b98e:	429a      	cmp	r2, r3
 800b990:	d201      	bcs.n	800b996 <find_volume+0x3be>
 800b992:	230d      	movs	r3, #13
 800b994:	e06a      	b.n	800ba6c <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b998:	f04f 32ff 	mov.w	r2, #4294967295
 800b99c:	615a      	str	r2, [r3, #20]
 800b99e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9a0:	695a      	ldr	r2, [r3, #20]
 800b9a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9a4:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800b9a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9a8:	2280      	movs	r2, #128	; 0x80
 800b9aa:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b9ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b9b0:	2b03      	cmp	r3, #3
 800b9b2:	d149      	bne.n	800ba48 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b9b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9b6:	3334      	adds	r3, #52	; 0x34
 800b9b8:	3330      	adds	r3, #48	; 0x30
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	f7fe fa68 	bl	8009e90 <ld_word>
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	2b01      	cmp	r3, #1
 800b9c4:	d140      	bne.n	800ba48 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b9c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9c8:	3301      	adds	r3, #1
 800b9ca:	4619      	mov	r1, r3
 800b9cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b9ce:	f7fe fd3f 	bl	800a450 <move_window>
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d137      	bne.n	800ba48 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 800b9d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9da:	2200      	movs	r2, #0
 800b9dc:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b9de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9e0:	3334      	adds	r3, #52	; 0x34
 800b9e2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	f7fe fa52 	bl	8009e90 <ld_word>
 800b9ec:	4603      	mov	r3, r0
 800b9ee:	461a      	mov	r2, r3
 800b9f0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b9f4:	429a      	cmp	r2, r3
 800b9f6:	d127      	bne.n	800ba48 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b9f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9fa:	3334      	adds	r3, #52	; 0x34
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	f7fe fa5f 	bl	8009ec0 <ld_dword>
 800ba02:	4602      	mov	r2, r0
 800ba04:	4b1b      	ldr	r3, [pc, #108]	; (800ba74 <find_volume+0x49c>)
 800ba06:	429a      	cmp	r2, r3
 800ba08:	d11e      	bne.n	800ba48 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ba0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba0c:	3334      	adds	r3, #52	; 0x34
 800ba0e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ba12:	4618      	mov	r0, r3
 800ba14:	f7fe fa54 	bl	8009ec0 <ld_dword>
 800ba18:	4602      	mov	r2, r0
 800ba1a:	4b17      	ldr	r3, [pc, #92]	; (800ba78 <find_volume+0x4a0>)
 800ba1c:	429a      	cmp	r2, r3
 800ba1e:	d113      	bne.n	800ba48 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ba20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba22:	3334      	adds	r3, #52	; 0x34
 800ba24:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f7fe fa49 	bl	8009ec0 <ld_dword>
 800ba2e:	4602      	mov	r2, r0
 800ba30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba32:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ba34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba36:	3334      	adds	r3, #52	; 0x34
 800ba38:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	f7fe fa3f 	bl	8009ec0 <ld_dword>
 800ba42:	4602      	mov	r2, r0
 800ba44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba46:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ba48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba4a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800ba4e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ba50:	4b0a      	ldr	r3, [pc, #40]	; (800ba7c <find_volume+0x4a4>)
 800ba52:	881b      	ldrh	r3, [r3, #0]
 800ba54:	3301      	adds	r3, #1
 800ba56:	b29a      	uxth	r2, r3
 800ba58:	4b08      	ldr	r3, [pc, #32]	; (800ba7c <find_volume+0x4a4>)
 800ba5a:	801a      	strh	r2, [r3, #0]
 800ba5c:	4b07      	ldr	r3, [pc, #28]	; (800ba7c <find_volume+0x4a4>)
 800ba5e:	881a      	ldrh	r2, [r3, #0]
 800ba60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba62:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ba64:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ba66:	f7fe fc8b 	bl	800a380 <clear_lock>
#endif
	return FR_OK;
 800ba6a:	2300      	movs	r3, #0
}
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	3758      	adds	r7, #88	; 0x58
 800ba70:	46bd      	mov	sp, r7
 800ba72:	bd80      	pop	{r7, pc}
 800ba74:	41615252 	.word	0x41615252
 800ba78:	61417272 	.word	0x61417272
 800ba7c:	20000224 	.word	0x20000224

0800ba80 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b084      	sub	sp, #16
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
 800ba88:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ba8a:	2309      	movs	r3, #9
 800ba8c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d02e      	beq.n	800baf2 <validate+0x72>
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d02a      	beq.n	800baf2 <validate+0x72>
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	781b      	ldrb	r3, [r3, #0]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d025      	beq.n	800baf2 <validate+0x72>
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	889a      	ldrh	r2, [r3, #4]
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	88db      	ldrh	r3, [r3, #6]
 800bab0:	429a      	cmp	r2, r3
 800bab2:	d11e      	bne.n	800baf2 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	4618      	mov	r0, r3
 800baba:	f7fe fae8 	bl	800a08e <lock_fs>
 800babe:	4603      	mov	r3, r0
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d014      	beq.n	800baee <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	785b      	ldrb	r3, [r3, #1]
 800baca:	4618      	mov	r0, r3
 800bacc:	f7fe f942 	bl	8009d54 <disk_status>
 800bad0:	4603      	mov	r3, r0
 800bad2:	f003 0301 	and.w	r3, r3, #1
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d102      	bne.n	800bae0 <validate+0x60>
				res = FR_OK;
 800bada:	2300      	movs	r3, #0
 800badc:	73fb      	strb	r3, [r7, #15]
 800bade:	e008      	b.n	800baf2 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	2100      	movs	r1, #0
 800bae6:	4618      	mov	r0, r3
 800bae8:	f7fe fae7 	bl	800a0ba <unlock_fs>
 800baec:	e001      	b.n	800baf2 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800baee:	230f      	movs	r3, #15
 800baf0:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800baf2:	7bfb      	ldrb	r3, [r7, #15]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d102      	bne.n	800bafe <validate+0x7e>
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	e000      	b.n	800bb00 <validate+0x80>
 800bafe:	2300      	movs	r3, #0
 800bb00:	683a      	ldr	r2, [r7, #0]
 800bb02:	6013      	str	r3, [r2, #0]
	return res;
 800bb04:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb06:	4618      	mov	r0, r3
 800bb08:	3710      	adds	r7, #16
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd80      	pop	{r7, pc}
	...

0800bb10 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b088      	sub	sp, #32
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	60f8      	str	r0, [r7, #12]
 800bb18:	60b9      	str	r1, [r7, #8]
 800bb1a:	4613      	mov	r3, r2
 800bb1c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800bb1e:	68bb      	ldr	r3, [r7, #8]
 800bb20:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800bb22:	f107 0310 	add.w	r3, r7, #16
 800bb26:	4618      	mov	r0, r3
 800bb28:	f7ff fcbb 	bl	800b4a2 <get_ldnumber>
 800bb2c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800bb2e:	69fb      	ldr	r3, [r7, #28]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	da01      	bge.n	800bb38 <f_mount+0x28>
 800bb34:	230b      	movs	r3, #11
 800bb36:	e048      	b.n	800bbca <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800bb38:	4a26      	ldr	r2, [pc, #152]	; (800bbd4 <f_mount+0xc4>)
 800bb3a:	69fb      	ldr	r3, [r7, #28]
 800bb3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb40:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800bb42:	69bb      	ldr	r3, [r7, #24]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d00f      	beq.n	800bb68 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800bb48:	69b8      	ldr	r0, [r7, #24]
 800bb4a:	f7fe fc19 	bl	800a380 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800bb4e:	69bb      	ldr	r3, [r7, #24]
 800bb50:	68db      	ldr	r3, [r3, #12]
 800bb52:	4618      	mov	r0, r3
 800bb54:	f001 f828 	bl	800cba8 <ff_del_syncobj>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d101      	bne.n	800bb62 <f_mount+0x52>
 800bb5e:	2302      	movs	r3, #2
 800bb60:	e033      	b.n	800bbca <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800bb62:	69bb      	ldr	r3, [r7, #24]
 800bb64:	2200      	movs	r2, #0
 800bb66:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d00f      	beq.n	800bb8e <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	2200      	movs	r2, #0
 800bb72:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800bb74:	69fb      	ldr	r3, [r7, #28]
 800bb76:	b2da      	uxtb	r2, r3
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	330c      	adds	r3, #12
 800bb7c:	4619      	mov	r1, r3
 800bb7e:	4610      	mov	r0, r2
 800bb80:	f000 fff7 	bl	800cb72 <ff_cre_syncobj>
 800bb84:	4603      	mov	r3, r0
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d101      	bne.n	800bb8e <f_mount+0x7e>
 800bb8a:	2302      	movs	r3, #2
 800bb8c:	e01d      	b.n	800bbca <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800bb8e:	68fa      	ldr	r2, [r7, #12]
 800bb90:	4910      	ldr	r1, [pc, #64]	; (800bbd4 <f_mount+0xc4>)
 800bb92:	69fb      	ldr	r3, [r7, #28]
 800bb94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d002      	beq.n	800bba4 <f_mount+0x94>
 800bb9e:	79fb      	ldrb	r3, [r7, #7]
 800bba0:	2b01      	cmp	r3, #1
 800bba2:	d001      	beq.n	800bba8 <f_mount+0x98>
 800bba4:	2300      	movs	r3, #0
 800bba6:	e010      	b.n	800bbca <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800bba8:	f107 010c 	add.w	r1, r7, #12
 800bbac:	f107 0308 	add.w	r3, r7, #8
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f7ff fd10 	bl	800b5d8 <find_volume>
 800bbb8:	4603      	mov	r3, r0
 800bbba:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	7dfa      	ldrb	r2, [r7, #23]
 800bbc0:	4611      	mov	r1, r2
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	f7fe fa79 	bl	800a0ba <unlock_fs>
 800bbc8:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbca:	4618      	mov	r0, r3
 800bbcc:	3720      	adds	r7, #32
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	bd80      	pop	{r7, pc}
 800bbd2:	bf00      	nop
 800bbd4:	20000220 	.word	0x20000220

0800bbd8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b09a      	sub	sp, #104	; 0x68
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	60f8      	str	r0, [r7, #12]
 800bbe0:	60b9      	str	r1, [r7, #8]
 800bbe2:	4613      	mov	r3, r2
 800bbe4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d101      	bne.n	800bbf0 <f_open+0x18>
 800bbec:	2309      	movs	r3, #9
 800bbee:	e1b4      	b.n	800bf5a <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800bbf0:	79fb      	ldrb	r3, [r7, #7]
 800bbf2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bbf6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800bbf8:	79fa      	ldrb	r2, [r7, #7]
 800bbfa:	f107 0114 	add.w	r1, r7, #20
 800bbfe:	f107 0308 	add.w	r3, r7, #8
 800bc02:	4618      	mov	r0, r3
 800bc04:	f7ff fce8 	bl	800b5d8 <find_volume>
 800bc08:	4603      	mov	r3, r0
 800bc0a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800bc0e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	f040 8191 	bne.w	800bf3a <f_open+0x362>
		dj.obj.fs = fs;
 800bc18:	697b      	ldr	r3, [r7, #20]
 800bc1a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800bc1c:	68ba      	ldr	r2, [r7, #8]
 800bc1e:	f107 0318 	add.w	r3, r7, #24
 800bc22:	4611      	mov	r1, r2
 800bc24:	4618      	mov	r0, r3
 800bc26:	f7ff fbcb 	bl	800b3c0 <follow_path>
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800bc30:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d11a      	bne.n	800bc6e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800bc38:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800bc3c:	b25b      	sxtb	r3, r3
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	da03      	bge.n	800bc4a <f_open+0x72>
				res = FR_INVALID_NAME;
 800bc42:	2306      	movs	r3, #6
 800bc44:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800bc48:	e011      	b.n	800bc6e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bc4a:	79fb      	ldrb	r3, [r7, #7]
 800bc4c:	f023 0301 	bic.w	r3, r3, #1
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	bf14      	ite	ne
 800bc54:	2301      	movne	r3, #1
 800bc56:	2300      	moveq	r3, #0
 800bc58:	b2db      	uxtb	r3, r3
 800bc5a:	461a      	mov	r2, r3
 800bc5c:	f107 0318 	add.w	r3, r7, #24
 800bc60:	4611      	mov	r1, r2
 800bc62:	4618      	mov	r0, r3
 800bc64:	f7fe fa44 	bl	800a0f0 <chk_lock>
 800bc68:	4603      	mov	r3, r0
 800bc6a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800bc6e:	79fb      	ldrb	r3, [r7, #7]
 800bc70:	f003 031c 	and.w	r3, r3, #28
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d07f      	beq.n	800bd78 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800bc78:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d017      	beq.n	800bcb0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800bc80:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bc84:	2b04      	cmp	r3, #4
 800bc86:	d10e      	bne.n	800bca6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800bc88:	f7fe fa8e 	bl	800a1a8 <enq_lock>
 800bc8c:	4603      	mov	r3, r0
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d006      	beq.n	800bca0 <f_open+0xc8>
 800bc92:	f107 0318 	add.w	r3, r7, #24
 800bc96:	4618      	mov	r0, r3
 800bc98:	f7ff f9ca 	bl	800b030 <dir_register>
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	e000      	b.n	800bca2 <f_open+0xca>
 800bca0:	2312      	movs	r3, #18
 800bca2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800bca6:	79fb      	ldrb	r3, [r7, #7]
 800bca8:	f043 0308 	orr.w	r3, r3, #8
 800bcac:	71fb      	strb	r3, [r7, #7]
 800bcae:	e010      	b.n	800bcd2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800bcb0:	7fbb      	ldrb	r3, [r7, #30]
 800bcb2:	f003 0311 	and.w	r3, r3, #17
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d003      	beq.n	800bcc2 <f_open+0xea>
					res = FR_DENIED;
 800bcba:	2307      	movs	r3, #7
 800bcbc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800bcc0:	e007      	b.n	800bcd2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800bcc2:	79fb      	ldrb	r3, [r7, #7]
 800bcc4:	f003 0304 	and.w	r3, r3, #4
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d002      	beq.n	800bcd2 <f_open+0xfa>
 800bccc:	2308      	movs	r3, #8
 800bcce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800bcd2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d168      	bne.n	800bdac <f_open+0x1d4>
 800bcda:	79fb      	ldrb	r3, [r7, #7]
 800bcdc:	f003 0308 	and.w	r3, r3, #8
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d063      	beq.n	800bdac <f_open+0x1d4>
				dw = GET_FATTIME();
 800bce4:	f7fc f9b4 	bl	8008050 <get_fattime>
 800bce8:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800bcea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcec:	330e      	adds	r3, #14
 800bcee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	f7fe f923 	bl	8009f3c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800bcf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcf8:	3316      	adds	r3, #22
 800bcfa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	f7fe f91d 	bl	8009f3c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800bd02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd04:	330b      	adds	r3, #11
 800bd06:	2220      	movs	r2, #32
 800bd08:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800bd0a:	697b      	ldr	r3, [r7, #20]
 800bd0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bd0e:	4611      	mov	r1, r2
 800bd10:	4618      	mov	r0, r3
 800bd12:	f7ff f89c 	bl	800ae4e <ld_clust>
 800bd16:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800bd18:	697b      	ldr	r3, [r7, #20]
 800bd1a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	4618      	mov	r0, r3
 800bd20:	f7ff f8b4 	bl	800ae8c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800bd24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd26:	331c      	adds	r3, #28
 800bd28:	2100      	movs	r1, #0
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	f7fe f906 	bl	8009f3c <st_dword>
					fs->wflag = 1;
 800bd30:	697b      	ldr	r3, [r7, #20]
 800bd32:	2201      	movs	r2, #1
 800bd34:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800bd36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d037      	beq.n	800bdac <f_open+0x1d4>
						dw = fs->winsect;
 800bd3c:	697b      	ldr	r3, [r7, #20]
 800bd3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd40:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800bd42:	f107 0318 	add.w	r3, r7, #24
 800bd46:	2200      	movs	r2, #0
 800bd48:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	f7fe fdc7 	bl	800a8de <remove_chain>
 800bd50:	4603      	mov	r3, r0
 800bd52:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800bd56:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d126      	bne.n	800bdac <f_open+0x1d4>
							res = move_window(fs, dw);
 800bd5e:	697b      	ldr	r3, [r7, #20]
 800bd60:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bd62:	4618      	mov	r0, r3
 800bd64:	f7fe fb74 	bl	800a450 <move_window>
 800bd68:	4603      	mov	r3, r0
 800bd6a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800bd6e:	697b      	ldr	r3, [r7, #20]
 800bd70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bd72:	3a01      	subs	r2, #1
 800bd74:	611a      	str	r2, [r3, #16]
 800bd76:	e019      	b.n	800bdac <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800bd78:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d115      	bne.n	800bdac <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800bd80:	7fbb      	ldrb	r3, [r7, #30]
 800bd82:	f003 0310 	and.w	r3, r3, #16
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d003      	beq.n	800bd92 <f_open+0x1ba>
					res = FR_NO_FILE;
 800bd8a:	2304      	movs	r3, #4
 800bd8c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800bd90:	e00c      	b.n	800bdac <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800bd92:	79fb      	ldrb	r3, [r7, #7]
 800bd94:	f003 0302 	and.w	r3, r3, #2
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d007      	beq.n	800bdac <f_open+0x1d4>
 800bd9c:	7fbb      	ldrb	r3, [r7, #30]
 800bd9e:	f003 0301 	and.w	r3, r3, #1
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d002      	beq.n	800bdac <f_open+0x1d4>
						res = FR_DENIED;
 800bda6:	2307      	movs	r3, #7
 800bda8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800bdac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d128      	bne.n	800be06 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800bdb4:	79fb      	ldrb	r3, [r7, #7]
 800bdb6:	f003 0308 	and.w	r3, r3, #8
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d003      	beq.n	800bdc6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800bdbe:	79fb      	ldrb	r3, [r7, #7]
 800bdc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bdc4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800bdc6:	697b      	ldr	r3, [r7, #20]
 800bdc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800bdce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bdd4:	79fb      	ldrb	r3, [r7, #7]
 800bdd6:	f023 0301 	bic.w	r3, r3, #1
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	bf14      	ite	ne
 800bdde:	2301      	movne	r3, #1
 800bde0:	2300      	moveq	r3, #0
 800bde2:	b2db      	uxtb	r3, r3
 800bde4:	461a      	mov	r2, r3
 800bde6:	f107 0318 	add.w	r3, r7, #24
 800bdea:	4611      	mov	r1, r2
 800bdec:	4618      	mov	r0, r3
 800bdee:	f7fe f9fd 	bl	800a1ec <inc_lock>
 800bdf2:	4602      	mov	r2, r0
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	691b      	ldr	r3, [r3, #16]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d102      	bne.n	800be06 <f_open+0x22e>
 800be00:	2302      	movs	r3, #2
 800be02:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800be06:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	f040 8095 	bne.w	800bf3a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800be10:	697b      	ldr	r3, [r7, #20]
 800be12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800be14:	4611      	mov	r1, r2
 800be16:	4618      	mov	r0, r3
 800be18:	f7ff f819 	bl	800ae4e <ld_clust>
 800be1c:	4602      	mov	r2, r0
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800be22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be24:	331c      	adds	r3, #28
 800be26:	4618      	mov	r0, r3
 800be28:	f7fe f84a 	bl	8009ec0 <ld_dword>
 800be2c:	4602      	mov	r2, r0
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	2200      	movs	r2, #0
 800be36:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800be38:	697a      	ldr	r2, [r7, #20]
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800be3e:	697b      	ldr	r3, [r7, #20]
 800be40:	88da      	ldrh	r2, [r3, #6]
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	79fa      	ldrb	r2, [r7, #7]
 800be4a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	2200      	movs	r2, #0
 800be50:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	2200      	movs	r2, #0
 800be56:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	2200      	movs	r2, #0
 800be5c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	3330      	adds	r3, #48	; 0x30
 800be62:	f44f 7200 	mov.w	r2, #512	; 0x200
 800be66:	2100      	movs	r1, #0
 800be68:	4618      	mov	r0, r3
 800be6a:	f7fe f8b4 	bl	8009fd6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800be6e:	79fb      	ldrb	r3, [r7, #7]
 800be70:	f003 0320 	and.w	r3, r3, #32
 800be74:	2b00      	cmp	r3, #0
 800be76:	d060      	beq.n	800bf3a <f_open+0x362>
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	68db      	ldr	r3, [r3, #12]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d05c      	beq.n	800bf3a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	68da      	ldr	r2, [r3, #12]
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800be88:	697b      	ldr	r3, [r7, #20]
 800be8a:	895b      	ldrh	r3, [r3, #10]
 800be8c:	025b      	lsls	r3, r3, #9
 800be8e:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	689b      	ldr	r3, [r3, #8]
 800be94:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	68db      	ldr	r3, [r3, #12]
 800be9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800be9c:	e016      	b.n	800becc <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800bea2:	4618      	mov	r0, r3
 800bea4:	f7fe fb8f 	bl	800a5c6 <get_fat>
 800bea8:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800beaa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800beac:	2b01      	cmp	r3, #1
 800beae:	d802      	bhi.n	800beb6 <f_open+0x2de>
 800beb0:	2302      	movs	r3, #2
 800beb2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800beb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800beb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bebc:	d102      	bne.n	800bec4 <f_open+0x2ec>
 800bebe:	2301      	movs	r3, #1
 800bec0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800bec4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bec6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bec8:	1ad3      	subs	r3, r2, r3
 800beca:	65fb      	str	r3, [r7, #92]	; 0x5c
 800becc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d103      	bne.n	800bedc <f_open+0x304>
 800bed4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bed6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bed8:	429a      	cmp	r2, r3
 800beda:	d8e0      	bhi.n	800be9e <f_open+0x2c6>
				}
				fp->clust = clst;
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bee0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800bee2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d127      	bne.n	800bf3a <f_open+0x362>
 800beea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800beec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d022      	beq.n	800bf3a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800bef4:	697b      	ldr	r3, [r7, #20]
 800bef6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800bef8:	4618      	mov	r0, r3
 800befa:	f7fe fb45 	bl	800a588 <clust2sect>
 800befe:	64f8      	str	r0, [r7, #76]	; 0x4c
 800bf00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d103      	bne.n	800bf0e <f_open+0x336>
						res = FR_INT_ERR;
 800bf06:	2302      	movs	r3, #2
 800bf08:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800bf0c:	e015      	b.n	800bf3a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800bf0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf10:	0a5a      	lsrs	r2, r3, #9
 800bf12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf14:	441a      	add	r2, r3
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800bf1a:	697b      	ldr	r3, [r7, #20]
 800bf1c:	7858      	ldrb	r0, [r3, #1]
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	6a1a      	ldr	r2, [r3, #32]
 800bf28:	2301      	movs	r3, #1
 800bf2a:	f7fd ff53 	bl	8009dd4 <disk_read>
 800bf2e:	4603      	mov	r3, r0
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d002      	beq.n	800bf3a <f_open+0x362>
 800bf34:	2301      	movs	r3, #1
 800bf36:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800bf3a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d002      	beq.n	800bf48 <f_open+0x370>
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	2200      	movs	r2, #0
 800bf46:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800bf48:	697b      	ldr	r3, [r7, #20]
 800bf4a:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800bf4e:	4611      	mov	r1, r2
 800bf50:	4618      	mov	r0, r3
 800bf52:	f7fe f8b2 	bl	800a0ba <unlock_fs>
 800bf56:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	3768      	adds	r7, #104	; 0x68
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	bd80      	pop	{r7, pc}

0800bf62 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800bf62:	b580      	push	{r7, lr}
 800bf64:	b08c      	sub	sp, #48	; 0x30
 800bf66:	af00      	add	r7, sp, #0
 800bf68:	60f8      	str	r0, [r7, #12]
 800bf6a:	60b9      	str	r1, [r7, #8]
 800bf6c:	607a      	str	r2, [r7, #4]
 800bf6e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800bf70:	68bb      	ldr	r3, [r7, #8]
 800bf72:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800bf74:	683b      	ldr	r3, [r7, #0]
 800bf76:	2200      	movs	r2, #0
 800bf78:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	f107 0210 	add.w	r2, r7, #16
 800bf80:	4611      	mov	r1, r2
 800bf82:	4618      	mov	r0, r3
 800bf84:	f7ff fd7c 	bl	800ba80 <validate>
 800bf88:	4603      	mov	r3, r0
 800bf8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800bf8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d107      	bne.n	800bfa6 <f_write+0x44>
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	7d5b      	ldrb	r3, [r3, #21]
 800bf9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800bf9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d009      	beq.n	800bfba <f_write+0x58>
 800bfa6:	693b      	ldr	r3, [r7, #16]
 800bfa8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800bfac:	4611      	mov	r1, r2
 800bfae:	4618      	mov	r0, r3
 800bfb0:	f7fe f883 	bl	800a0ba <unlock_fs>
 800bfb4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bfb8:	e173      	b.n	800c2a2 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	7d1b      	ldrb	r3, [r3, #20]
 800bfbe:	f003 0302 	and.w	r3, r3, #2
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d106      	bne.n	800bfd4 <f_write+0x72>
 800bfc6:	693b      	ldr	r3, [r7, #16]
 800bfc8:	2107      	movs	r1, #7
 800bfca:	4618      	mov	r0, r3
 800bfcc:	f7fe f875 	bl	800a0ba <unlock_fs>
 800bfd0:	2307      	movs	r3, #7
 800bfd2:	e166      	b.n	800c2a2 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	699a      	ldr	r2, [r3, #24]
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	441a      	add	r2, r3
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	699b      	ldr	r3, [r3, #24]
 800bfe0:	429a      	cmp	r2, r3
 800bfe2:	f080 814b 	bcs.w	800c27c <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	699b      	ldr	r3, [r3, #24]
 800bfea:	43db      	mvns	r3, r3
 800bfec:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800bfee:	e145      	b.n	800c27c <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	699b      	ldr	r3, [r3, #24]
 800bff4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	f040 8101 	bne.w	800c200 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	699b      	ldr	r3, [r3, #24]
 800c002:	0a5b      	lsrs	r3, r3, #9
 800c004:	693a      	ldr	r2, [r7, #16]
 800c006:	8952      	ldrh	r2, [r2, #10]
 800c008:	3a01      	subs	r2, #1
 800c00a:	4013      	ands	r3, r2
 800c00c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800c00e:	69bb      	ldr	r3, [r7, #24]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d14d      	bne.n	800c0b0 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	699b      	ldr	r3, [r3, #24]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d10c      	bne.n	800c036 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	689b      	ldr	r3, [r3, #8]
 800c020:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800c022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c024:	2b00      	cmp	r3, #0
 800c026:	d11a      	bne.n	800c05e <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	2100      	movs	r1, #0
 800c02c:	4618      	mov	r0, r3
 800c02e:	f7fe fcbb 	bl	800a9a8 <create_chain>
 800c032:	62b8      	str	r0, [r7, #40]	; 0x28
 800c034:	e013      	b.n	800c05e <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d007      	beq.n	800c04e <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	699b      	ldr	r3, [r3, #24]
 800c042:	4619      	mov	r1, r3
 800c044:	68f8      	ldr	r0, [r7, #12]
 800c046:	f7fe fd47 	bl	800aad8 <clmt_clust>
 800c04a:	62b8      	str	r0, [r7, #40]	; 0x28
 800c04c:	e007      	b.n	800c05e <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c04e:	68fa      	ldr	r2, [r7, #12]
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	69db      	ldr	r3, [r3, #28]
 800c054:	4619      	mov	r1, r3
 800c056:	4610      	mov	r0, r2
 800c058:	f7fe fca6 	bl	800a9a8 <create_chain>
 800c05c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c05e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c060:	2b00      	cmp	r3, #0
 800c062:	f000 8110 	beq.w	800c286 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c068:	2b01      	cmp	r3, #1
 800c06a:	d109      	bne.n	800c080 <f_write+0x11e>
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	2202      	movs	r2, #2
 800c070:	755a      	strb	r2, [r3, #21]
 800c072:	693b      	ldr	r3, [r7, #16]
 800c074:	2102      	movs	r1, #2
 800c076:	4618      	mov	r0, r3
 800c078:	f7fe f81f 	bl	800a0ba <unlock_fs>
 800c07c:	2302      	movs	r3, #2
 800c07e:	e110      	b.n	800c2a2 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c082:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c086:	d109      	bne.n	800c09c <f_write+0x13a>
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	2201      	movs	r2, #1
 800c08c:	755a      	strb	r2, [r3, #21]
 800c08e:	693b      	ldr	r3, [r7, #16]
 800c090:	2101      	movs	r1, #1
 800c092:	4618      	mov	r0, r3
 800c094:	f7fe f811 	bl	800a0ba <unlock_fs>
 800c098:	2301      	movs	r3, #1
 800c09a:	e102      	b.n	800c2a2 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c0a0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	689b      	ldr	r3, [r3, #8]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d102      	bne.n	800c0b0 <f_write+0x14e>
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c0ae:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	7d1b      	ldrb	r3, [r3, #20]
 800c0b4:	b25b      	sxtb	r3, r3
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	da1d      	bge.n	800c0f6 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c0ba:	693b      	ldr	r3, [r7, #16]
 800c0bc:	7858      	ldrb	r0, [r3, #1]
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	6a1a      	ldr	r2, [r3, #32]
 800c0c8:	2301      	movs	r3, #1
 800c0ca:	f7fd fea3 	bl	8009e14 <disk_write>
 800c0ce:	4603      	mov	r3, r0
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d009      	beq.n	800c0e8 <f_write+0x186>
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	2201      	movs	r2, #1
 800c0d8:	755a      	strb	r2, [r3, #21]
 800c0da:	693b      	ldr	r3, [r7, #16]
 800c0dc:	2101      	movs	r1, #1
 800c0de:	4618      	mov	r0, r3
 800c0e0:	f7fd ffeb 	bl	800a0ba <unlock_fs>
 800c0e4:	2301      	movs	r3, #1
 800c0e6:	e0dc      	b.n	800c2a2 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	7d1b      	ldrb	r3, [r3, #20]
 800c0ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c0f0:	b2da      	uxtb	r2, r3
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c0f6:	693a      	ldr	r2, [r7, #16]
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	69db      	ldr	r3, [r3, #28]
 800c0fc:	4619      	mov	r1, r3
 800c0fe:	4610      	mov	r0, r2
 800c100:	f7fe fa42 	bl	800a588 <clust2sect>
 800c104:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c106:	697b      	ldr	r3, [r7, #20]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d109      	bne.n	800c120 <f_write+0x1be>
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	2202      	movs	r2, #2
 800c110:	755a      	strb	r2, [r3, #21]
 800c112:	693b      	ldr	r3, [r7, #16]
 800c114:	2102      	movs	r1, #2
 800c116:	4618      	mov	r0, r3
 800c118:	f7fd ffcf 	bl	800a0ba <unlock_fs>
 800c11c:	2302      	movs	r3, #2
 800c11e:	e0c0      	b.n	800c2a2 <f_write+0x340>
			sect += csect;
 800c120:	697a      	ldr	r2, [r7, #20]
 800c122:	69bb      	ldr	r3, [r7, #24]
 800c124:	4413      	add	r3, r2
 800c126:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	0a5b      	lsrs	r3, r3, #9
 800c12c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c12e:	6a3b      	ldr	r3, [r7, #32]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d041      	beq.n	800c1b8 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c134:	69ba      	ldr	r2, [r7, #24]
 800c136:	6a3b      	ldr	r3, [r7, #32]
 800c138:	4413      	add	r3, r2
 800c13a:	693a      	ldr	r2, [r7, #16]
 800c13c:	8952      	ldrh	r2, [r2, #10]
 800c13e:	4293      	cmp	r3, r2
 800c140:	d905      	bls.n	800c14e <f_write+0x1ec>
					cc = fs->csize - csect;
 800c142:	693b      	ldr	r3, [r7, #16]
 800c144:	895b      	ldrh	r3, [r3, #10]
 800c146:	461a      	mov	r2, r3
 800c148:	69bb      	ldr	r3, [r7, #24]
 800c14a:	1ad3      	subs	r3, r2, r3
 800c14c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c14e:	693b      	ldr	r3, [r7, #16]
 800c150:	7858      	ldrb	r0, [r3, #1]
 800c152:	6a3b      	ldr	r3, [r7, #32]
 800c154:	697a      	ldr	r2, [r7, #20]
 800c156:	69f9      	ldr	r1, [r7, #28]
 800c158:	f7fd fe5c 	bl	8009e14 <disk_write>
 800c15c:	4603      	mov	r3, r0
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d009      	beq.n	800c176 <f_write+0x214>
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	2201      	movs	r2, #1
 800c166:	755a      	strb	r2, [r3, #21]
 800c168:	693b      	ldr	r3, [r7, #16]
 800c16a:	2101      	movs	r1, #1
 800c16c:	4618      	mov	r0, r3
 800c16e:	f7fd ffa4 	bl	800a0ba <unlock_fs>
 800c172:	2301      	movs	r3, #1
 800c174:	e095      	b.n	800c2a2 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	6a1a      	ldr	r2, [r3, #32]
 800c17a:	697b      	ldr	r3, [r7, #20]
 800c17c:	1ad3      	subs	r3, r2, r3
 800c17e:	6a3a      	ldr	r2, [r7, #32]
 800c180:	429a      	cmp	r2, r3
 800c182:	d915      	bls.n	800c1b0 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	6a1a      	ldr	r2, [r3, #32]
 800c18e:	697b      	ldr	r3, [r7, #20]
 800c190:	1ad3      	subs	r3, r2, r3
 800c192:	025b      	lsls	r3, r3, #9
 800c194:	69fa      	ldr	r2, [r7, #28]
 800c196:	4413      	add	r3, r2
 800c198:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c19c:	4619      	mov	r1, r3
 800c19e:	f7fd fef9 	bl	8009f94 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	7d1b      	ldrb	r3, [r3, #20]
 800c1a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c1aa:	b2da      	uxtb	r2, r3
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c1b0:	6a3b      	ldr	r3, [r7, #32]
 800c1b2:	025b      	lsls	r3, r3, #9
 800c1b4:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800c1b6:	e044      	b.n	800c242 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	6a1b      	ldr	r3, [r3, #32]
 800c1bc:	697a      	ldr	r2, [r7, #20]
 800c1be:	429a      	cmp	r2, r3
 800c1c0:	d01b      	beq.n	800c1fa <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	699a      	ldr	r2, [r3, #24]
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c1ca:	429a      	cmp	r2, r3
 800c1cc:	d215      	bcs.n	800c1fa <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800c1ce:	693b      	ldr	r3, [r7, #16]
 800c1d0:	7858      	ldrb	r0, [r3, #1]
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c1d8:	2301      	movs	r3, #1
 800c1da:	697a      	ldr	r2, [r7, #20]
 800c1dc:	f7fd fdfa 	bl	8009dd4 <disk_read>
 800c1e0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d009      	beq.n	800c1fa <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	2201      	movs	r2, #1
 800c1ea:	755a      	strb	r2, [r3, #21]
 800c1ec:	693b      	ldr	r3, [r7, #16]
 800c1ee:	2101      	movs	r1, #1
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	f7fd ff62 	bl	800a0ba <unlock_fs>
 800c1f6:	2301      	movs	r3, #1
 800c1f8:	e053      	b.n	800c2a2 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	697a      	ldr	r2, [r7, #20]
 800c1fe:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	699b      	ldr	r3, [r3, #24]
 800c204:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c208:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800c20c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800c20e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	429a      	cmp	r2, r3
 800c214:	d901      	bls.n	800c21a <f_write+0x2b8>
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	699b      	ldr	r3, [r3, #24]
 800c224:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c228:	4413      	add	r3, r2
 800c22a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c22c:	69f9      	ldr	r1, [r7, #28]
 800c22e:	4618      	mov	r0, r3
 800c230:	f7fd feb0 	bl	8009f94 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	7d1b      	ldrb	r3, [r3, #20]
 800c238:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c23c:	b2da      	uxtb	r2, r3
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800c242:	69fa      	ldr	r2, [r7, #28]
 800c244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c246:	4413      	add	r3, r2
 800c248:	61fb      	str	r3, [r7, #28]
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	699a      	ldr	r2, [r3, #24]
 800c24e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c250:	441a      	add	r2, r3
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	619a      	str	r2, [r3, #24]
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	68da      	ldr	r2, [r3, #12]
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	699b      	ldr	r3, [r3, #24]
 800c25e:	429a      	cmp	r2, r3
 800c260:	bf38      	it	cc
 800c262:	461a      	movcc	r2, r3
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	60da      	str	r2, [r3, #12]
 800c268:	683b      	ldr	r3, [r7, #0]
 800c26a:	681a      	ldr	r2, [r3, #0]
 800c26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c26e:	441a      	add	r2, r3
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	601a      	str	r2, [r3, #0]
 800c274:	687a      	ldr	r2, [r7, #4]
 800c276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c278:	1ad3      	subs	r3, r2, r3
 800c27a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	f47f aeb6 	bne.w	800bff0 <f_write+0x8e>
 800c284:	e000      	b.n	800c288 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c286:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	7d1b      	ldrb	r3, [r3, #20]
 800c28c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c290:	b2da      	uxtb	r2, r3
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800c296:	693b      	ldr	r3, [r7, #16]
 800c298:	2100      	movs	r1, #0
 800c29a:	4618      	mov	r0, r3
 800c29c:	f7fd ff0d 	bl	800a0ba <unlock_fs>
 800c2a0:	2300      	movs	r3, #0
}
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	3730      	adds	r7, #48	; 0x30
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	bd80      	pop	{r7, pc}

0800c2aa <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c2aa:	b580      	push	{r7, lr}
 800c2ac:	b086      	sub	sp, #24
 800c2ae:	af00      	add	r7, sp, #0
 800c2b0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	f107 0208 	add.w	r2, r7, #8
 800c2b8:	4611      	mov	r1, r2
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	f7ff fbe0 	bl	800ba80 <validate>
 800c2c0:	4603      	mov	r3, r0
 800c2c2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c2c4:	7dfb      	ldrb	r3, [r7, #23]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d16d      	bne.n	800c3a6 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	7d1b      	ldrb	r3, [r3, #20]
 800c2ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d067      	beq.n	800c3a6 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	7d1b      	ldrb	r3, [r3, #20]
 800c2da:	b25b      	sxtb	r3, r3
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	da1a      	bge.n	800c316 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c2e0:	68bb      	ldr	r3, [r7, #8]
 800c2e2:	7858      	ldrb	r0, [r3, #1]
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	6a1a      	ldr	r2, [r3, #32]
 800c2ee:	2301      	movs	r3, #1
 800c2f0:	f7fd fd90 	bl	8009e14 <disk_write>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d006      	beq.n	800c308 <f_sync+0x5e>
 800c2fa:	68bb      	ldr	r3, [r7, #8]
 800c2fc:	2101      	movs	r1, #1
 800c2fe:	4618      	mov	r0, r3
 800c300:	f7fd fedb 	bl	800a0ba <unlock_fs>
 800c304:	2301      	movs	r3, #1
 800c306:	e055      	b.n	800c3b4 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	7d1b      	ldrb	r3, [r3, #20]
 800c30c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c310:	b2da      	uxtb	r2, r3
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800c316:	f7fb fe9b 	bl	8008050 <get_fattime>
 800c31a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800c31c:	68ba      	ldr	r2, [r7, #8]
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c322:	4619      	mov	r1, r3
 800c324:	4610      	mov	r0, r2
 800c326:	f7fe f893 	bl	800a450 <move_window>
 800c32a:	4603      	mov	r3, r0
 800c32c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800c32e:	7dfb      	ldrb	r3, [r7, #23]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d138      	bne.n	800c3a6 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c338:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	330b      	adds	r3, #11
 800c33e:	781a      	ldrb	r2, [r3, #0]
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	330b      	adds	r3, #11
 800c344:	f042 0220 	orr.w	r2, r2, #32
 800c348:	b2d2      	uxtb	r2, r2
 800c34a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	6818      	ldr	r0, [r3, #0]
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	689b      	ldr	r3, [r3, #8]
 800c354:	461a      	mov	r2, r3
 800c356:	68f9      	ldr	r1, [r7, #12]
 800c358:	f7fe fd98 	bl	800ae8c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	f103 021c 	add.w	r2, r3, #28
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	68db      	ldr	r3, [r3, #12]
 800c366:	4619      	mov	r1, r3
 800c368:	4610      	mov	r0, r2
 800c36a:	f7fd fde7 	bl	8009f3c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	3316      	adds	r3, #22
 800c372:	6939      	ldr	r1, [r7, #16]
 800c374:	4618      	mov	r0, r3
 800c376:	f7fd fde1 	bl	8009f3c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	3312      	adds	r3, #18
 800c37e:	2100      	movs	r1, #0
 800c380:	4618      	mov	r0, r3
 800c382:	f7fd fdc0 	bl	8009f06 <st_word>
					fs->wflag = 1;
 800c386:	68bb      	ldr	r3, [r7, #8]
 800c388:	2201      	movs	r2, #1
 800c38a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c38c:	68bb      	ldr	r3, [r7, #8]
 800c38e:	4618      	mov	r0, r3
 800c390:	f7fe f88c 	bl	800a4ac <sync_fs>
 800c394:	4603      	mov	r3, r0
 800c396:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	7d1b      	ldrb	r3, [r3, #20]
 800c39c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c3a0:	b2da      	uxtb	r2, r3
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800c3a6:	68bb      	ldr	r3, [r7, #8]
 800c3a8:	7dfa      	ldrb	r2, [r7, #23]
 800c3aa:	4611      	mov	r1, r2
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	f7fd fe84 	bl	800a0ba <unlock_fs>
 800c3b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	3718      	adds	r7, #24
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	bd80      	pop	{r7, pc}

0800c3bc <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b090      	sub	sp, #64	; 0x40
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
 800c3c4:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	f107 0208 	add.w	r2, r7, #8
 800c3cc:	4611      	mov	r1, r2
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	f7ff fb56 	bl	800ba80 <validate>
 800c3d4:	4603      	mov	r3, r0
 800c3d6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800c3da:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d103      	bne.n	800c3ea <f_lseek+0x2e>
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	7d5b      	ldrb	r3, [r3, #21]
 800c3e6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800c3ea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d009      	beq.n	800c406 <f_lseek+0x4a>
 800c3f2:	68bb      	ldr	r3, [r7, #8]
 800c3f4:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800c3f8:	4611      	mov	r1, r2
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	f7fd fe5d 	bl	800a0ba <unlock_fs>
 800c400:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c404:	e229      	b.n	800c85a <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	f000 80ea 	beq.w	800c5e4 <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800c410:	683b      	ldr	r3, [r7, #0]
 800c412:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c416:	d164      	bne.n	800c4e2 <f_lseek+0x126>
			tbl = fp->cltbl;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c41c:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800c41e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c420:	1d1a      	adds	r2, r3, #4
 800c422:	627a      	str	r2, [r7, #36]	; 0x24
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	617b      	str	r3, [r7, #20]
 800c428:	2302      	movs	r3, #2
 800c42a:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	689b      	ldr	r3, [r3, #8]
 800c430:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800c432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c434:	2b00      	cmp	r3, #0
 800c436:	d044      	beq.n	800c4c2 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800c438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c43a:	613b      	str	r3, [r7, #16]
 800c43c:	2300      	movs	r3, #0
 800c43e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c442:	3302      	adds	r3, #2
 800c444:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800c446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c448:	60fb      	str	r3, [r7, #12]
 800c44a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c44c:	3301      	adds	r3, #1
 800c44e:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c454:	4618      	mov	r0, r3
 800c456:	f7fe f8b6 	bl	800a5c6 <get_fat>
 800c45a:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800c45c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c45e:	2b01      	cmp	r3, #1
 800c460:	d809      	bhi.n	800c476 <f_lseek+0xba>
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	2202      	movs	r2, #2
 800c466:	755a      	strb	r2, [r3, #21]
 800c468:	68bb      	ldr	r3, [r7, #8]
 800c46a:	2102      	movs	r1, #2
 800c46c:	4618      	mov	r0, r3
 800c46e:	f7fd fe24 	bl	800a0ba <unlock_fs>
 800c472:	2302      	movs	r3, #2
 800c474:	e1f1      	b.n	800c85a <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c47c:	d109      	bne.n	800c492 <f_lseek+0xd6>
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	2201      	movs	r2, #1
 800c482:	755a      	strb	r2, [r3, #21]
 800c484:	68bb      	ldr	r3, [r7, #8]
 800c486:	2101      	movs	r1, #1
 800c488:	4618      	mov	r0, r3
 800c48a:	f7fd fe16 	bl	800a0ba <unlock_fs>
 800c48e:	2301      	movs	r3, #1
 800c490:	e1e3      	b.n	800c85a <f_lseek+0x49e>
					} while (cl == pcl + 1);
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	3301      	adds	r3, #1
 800c496:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c498:	429a      	cmp	r2, r3
 800c49a:	d0d4      	beq.n	800c446 <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800c49c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c49e:	697b      	ldr	r3, [r7, #20]
 800c4a0:	429a      	cmp	r2, r3
 800c4a2:	d809      	bhi.n	800c4b8 <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 800c4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4a6:	1d1a      	adds	r2, r3, #4
 800c4a8:	627a      	str	r2, [r7, #36]	; 0x24
 800c4aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c4ac:	601a      	str	r2, [r3, #0]
 800c4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4b0:	1d1a      	adds	r2, r3, #4
 800c4b2:	627a      	str	r2, [r7, #36]	; 0x24
 800c4b4:	693a      	ldr	r2, [r7, #16]
 800c4b6:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800c4b8:	68bb      	ldr	r3, [r7, #8]
 800c4ba:	699b      	ldr	r3, [r3, #24]
 800c4bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4be:	429a      	cmp	r2, r3
 800c4c0:	d3ba      	bcc.n	800c438 <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c4c8:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800c4ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c4cc:	697b      	ldr	r3, [r7, #20]
 800c4ce:	429a      	cmp	r2, r3
 800c4d0:	d803      	bhi.n	800c4da <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 800c4d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4d4:	2200      	movs	r2, #0
 800c4d6:	601a      	str	r2, [r3, #0]
 800c4d8:	e1b6      	b.n	800c848 <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800c4da:	2311      	movs	r3, #17
 800c4dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800c4e0:	e1b2      	b.n	800c848 <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	68db      	ldr	r3, [r3, #12]
 800c4e6:	683a      	ldr	r2, [r7, #0]
 800c4e8:	429a      	cmp	r2, r3
 800c4ea:	d902      	bls.n	800c4f2 <f_lseek+0x136>
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	68db      	ldr	r3, [r3, #12]
 800c4f0:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	683a      	ldr	r2, [r7, #0]
 800c4f6:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800c4f8:	683b      	ldr	r3, [r7, #0]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	f000 81a4 	beq.w	800c848 <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800c500:	683b      	ldr	r3, [r7, #0]
 800c502:	3b01      	subs	r3, #1
 800c504:	4619      	mov	r1, r3
 800c506:	6878      	ldr	r0, [r7, #4]
 800c508:	f7fe fae6 	bl	800aad8 <clmt_clust>
 800c50c:	4602      	mov	r2, r0
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800c512:	68ba      	ldr	r2, [r7, #8]
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	69db      	ldr	r3, [r3, #28]
 800c518:	4619      	mov	r1, r3
 800c51a:	4610      	mov	r0, r2
 800c51c:	f7fe f834 	bl	800a588 <clust2sect>
 800c520:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800c522:	69bb      	ldr	r3, [r7, #24]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d109      	bne.n	800c53c <f_lseek+0x180>
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	2202      	movs	r2, #2
 800c52c:	755a      	strb	r2, [r3, #21]
 800c52e:	68bb      	ldr	r3, [r7, #8]
 800c530:	2102      	movs	r1, #2
 800c532:	4618      	mov	r0, r3
 800c534:	f7fd fdc1 	bl	800a0ba <unlock_fs>
 800c538:	2302      	movs	r3, #2
 800c53a:	e18e      	b.n	800c85a <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	3b01      	subs	r3, #1
 800c540:	0a5b      	lsrs	r3, r3, #9
 800c542:	68ba      	ldr	r2, [r7, #8]
 800c544:	8952      	ldrh	r2, [r2, #10]
 800c546:	3a01      	subs	r2, #1
 800c548:	4013      	ands	r3, r2
 800c54a:	69ba      	ldr	r2, [r7, #24]
 800c54c:	4413      	add	r3, r2
 800c54e:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	699b      	ldr	r3, [r3, #24]
 800c554:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c558:	2b00      	cmp	r3, #0
 800c55a:	f000 8175 	beq.w	800c848 <f_lseek+0x48c>
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	6a1b      	ldr	r3, [r3, #32]
 800c562:	69ba      	ldr	r2, [r7, #24]
 800c564:	429a      	cmp	r2, r3
 800c566:	f000 816f 	beq.w	800c848 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	7d1b      	ldrb	r3, [r3, #20]
 800c56e:	b25b      	sxtb	r3, r3
 800c570:	2b00      	cmp	r3, #0
 800c572:	da1d      	bge.n	800c5b0 <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c574:	68bb      	ldr	r3, [r7, #8]
 800c576:	7858      	ldrb	r0, [r3, #1]
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	6a1a      	ldr	r2, [r3, #32]
 800c582:	2301      	movs	r3, #1
 800c584:	f7fd fc46 	bl	8009e14 <disk_write>
 800c588:	4603      	mov	r3, r0
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d009      	beq.n	800c5a2 <f_lseek+0x1e6>
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	2201      	movs	r2, #1
 800c592:	755a      	strb	r2, [r3, #21]
 800c594:	68bb      	ldr	r3, [r7, #8]
 800c596:	2101      	movs	r1, #1
 800c598:	4618      	mov	r0, r3
 800c59a:	f7fd fd8e 	bl	800a0ba <unlock_fs>
 800c59e:	2301      	movs	r3, #1
 800c5a0:	e15b      	b.n	800c85a <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	7d1b      	ldrb	r3, [r3, #20]
 800c5a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c5aa:	b2da      	uxtb	r2, r3
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800c5b0:	68bb      	ldr	r3, [r7, #8]
 800c5b2:	7858      	ldrb	r0, [r3, #1]
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c5ba:	2301      	movs	r3, #1
 800c5bc:	69ba      	ldr	r2, [r7, #24]
 800c5be:	f7fd fc09 	bl	8009dd4 <disk_read>
 800c5c2:	4603      	mov	r3, r0
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d009      	beq.n	800c5dc <f_lseek+0x220>
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	2201      	movs	r2, #1
 800c5cc:	755a      	strb	r2, [r3, #21]
 800c5ce:	68bb      	ldr	r3, [r7, #8]
 800c5d0:	2101      	movs	r1, #1
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	f7fd fd71 	bl	800a0ba <unlock_fs>
 800c5d8:	2301      	movs	r3, #1
 800c5da:	e13e      	b.n	800c85a <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	69ba      	ldr	r2, [r7, #24]
 800c5e0:	621a      	str	r2, [r3, #32]
 800c5e2:	e131      	b.n	800c848 <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	68db      	ldr	r3, [r3, #12]
 800c5e8:	683a      	ldr	r2, [r7, #0]
 800c5ea:	429a      	cmp	r2, r3
 800c5ec:	d908      	bls.n	800c600 <f_lseek+0x244>
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	7d1b      	ldrb	r3, [r3, #20]
 800c5f2:	f003 0302 	and.w	r3, r3, #2
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d102      	bne.n	800c600 <f_lseek+0x244>
			ofs = fp->obj.objsize;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	68db      	ldr	r3, [r3, #12]
 800c5fe:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	699b      	ldr	r3, [r3, #24]
 800c604:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800c606:	2300      	movs	r3, #0
 800c608:	637b      	str	r3, [r7, #52]	; 0x34
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c60e:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800c610:	683b      	ldr	r3, [r7, #0]
 800c612:	2b00      	cmp	r3, #0
 800c614:	f000 80c0 	beq.w	800c798 <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800c618:	68bb      	ldr	r3, [r7, #8]
 800c61a:	895b      	ldrh	r3, [r3, #10]
 800c61c:	025b      	lsls	r3, r3, #9
 800c61e:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800c620:	6a3b      	ldr	r3, [r7, #32]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d01b      	beq.n	800c65e <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800c626:	683b      	ldr	r3, [r7, #0]
 800c628:	1e5a      	subs	r2, r3, #1
 800c62a:	69fb      	ldr	r3, [r7, #28]
 800c62c:	fbb2 f2f3 	udiv	r2, r2, r3
 800c630:	6a3b      	ldr	r3, [r7, #32]
 800c632:	1e59      	subs	r1, r3, #1
 800c634:	69fb      	ldr	r3, [r7, #28]
 800c636:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800c63a:	429a      	cmp	r2, r3
 800c63c:	d30f      	bcc.n	800c65e <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800c63e:	6a3b      	ldr	r3, [r7, #32]
 800c640:	1e5a      	subs	r2, r3, #1
 800c642:	69fb      	ldr	r3, [r7, #28]
 800c644:	425b      	negs	r3, r3
 800c646:	401a      	ands	r2, r3
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	699b      	ldr	r3, [r3, #24]
 800c650:	683a      	ldr	r2, [r7, #0]
 800c652:	1ad3      	subs	r3, r2, r3
 800c654:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	69db      	ldr	r3, [r3, #28]
 800c65a:	63bb      	str	r3, [r7, #56]	; 0x38
 800c65c:	e02c      	b.n	800c6b8 <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	689b      	ldr	r3, [r3, #8]
 800c662:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800c664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c666:	2b00      	cmp	r3, #0
 800c668:	d123      	bne.n	800c6b2 <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	2100      	movs	r1, #0
 800c66e:	4618      	mov	r0, r3
 800c670:	f7fe f99a 	bl	800a9a8 <create_chain>
 800c674:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c678:	2b01      	cmp	r3, #1
 800c67a:	d109      	bne.n	800c690 <f_lseek+0x2d4>
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	2202      	movs	r2, #2
 800c680:	755a      	strb	r2, [r3, #21]
 800c682:	68bb      	ldr	r3, [r7, #8]
 800c684:	2102      	movs	r1, #2
 800c686:	4618      	mov	r0, r3
 800c688:	f7fd fd17 	bl	800a0ba <unlock_fs>
 800c68c:	2302      	movs	r3, #2
 800c68e:	e0e4      	b.n	800c85a <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c692:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c696:	d109      	bne.n	800c6ac <f_lseek+0x2f0>
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2201      	movs	r2, #1
 800c69c:	755a      	strb	r2, [r3, #21]
 800c69e:	68bb      	ldr	r3, [r7, #8]
 800c6a0:	2101      	movs	r1, #1
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	f7fd fd09 	bl	800a0ba <unlock_fs>
 800c6a8:	2301      	movs	r3, #1
 800c6aa:	e0d6      	b.n	800c85a <f_lseek+0x49e>
					fp->obj.sclust = clst;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c6b0:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c6b6:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800c6b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d06c      	beq.n	800c798 <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 800c6be:	e044      	b.n	800c74a <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 800c6c0:	683a      	ldr	r2, [r7, #0]
 800c6c2:	69fb      	ldr	r3, [r7, #28]
 800c6c4:	1ad3      	subs	r3, r2, r3
 800c6c6:	603b      	str	r3, [r7, #0]
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	699a      	ldr	r2, [r3, #24]
 800c6cc:	69fb      	ldr	r3, [r7, #28]
 800c6ce:	441a      	add	r2, r3
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	7d1b      	ldrb	r3, [r3, #20]
 800c6d8:	f003 0302 	and.w	r3, r3, #2
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d00b      	beq.n	800c6f8 <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	f7fe f95f 	bl	800a9a8 <create_chain>
 800c6ea:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800c6ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d108      	bne.n	800c704 <f_lseek+0x348>
							ofs = 0; break;
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	603b      	str	r3, [r7, #0]
 800c6f6:	e02c      	b.n	800c752 <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	f7fd ff62 	bl	800a5c6 <get_fat>
 800c702:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c70a:	d109      	bne.n	800c720 <f_lseek+0x364>
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	2201      	movs	r2, #1
 800c710:	755a      	strb	r2, [r3, #21]
 800c712:	68bb      	ldr	r3, [r7, #8]
 800c714:	2101      	movs	r1, #1
 800c716:	4618      	mov	r0, r3
 800c718:	f7fd fccf 	bl	800a0ba <unlock_fs>
 800c71c:	2301      	movs	r3, #1
 800c71e:	e09c      	b.n	800c85a <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800c720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c722:	2b01      	cmp	r3, #1
 800c724:	d904      	bls.n	800c730 <f_lseek+0x374>
 800c726:	68bb      	ldr	r3, [r7, #8]
 800c728:	699b      	ldr	r3, [r3, #24]
 800c72a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c72c:	429a      	cmp	r2, r3
 800c72e:	d309      	bcc.n	800c744 <f_lseek+0x388>
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2202      	movs	r2, #2
 800c734:	755a      	strb	r2, [r3, #21]
 800c736:	68bb      	ldr	r3, [r7, #8]
 800c738:	2102      	movs	r1, #2
 800c73a:	4618      	mov	r0, r3
 800c73c:	f7fd fcbd 	bl	800a0ba <unlock_fs>
 800c740:	2302      	movs	r3, #2
 800c742:	e08a      	b.n	800c85a <f_lseek+0x49e>
					fp->clust = clst;
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c748:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800c74a:	683a      	ldr	r2, [r7, #0]
 800c74c:	69fb      	ldr	r3, [r7, #28]
 800c74e:	429a      	cmp	r2, r3
 800c750:	d8b6      	bhi.n	800c6c0 <f_lseek+0x304>
				}
				fp->fptr += ofs;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	699a      	ldr	r2, [r3, #24]
 800c756:	683b      	ldr	r3, [r7, #0]
 800c758:	441a      	add	r2, r3
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800c75e:	683b      	ldr	r3, [r7, #0]
 800c760:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c764:	2b00      	cmp	r3, #0
 800c766:	d017      	beq.n	800c798 <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800c768:	68bb      	ldr	r3, [r7, #8]
 800c76a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c76c:	4618      	mov	r0, r3
 800c76e:	f7fd ff0b 	bl	800a588 <clust2sect>
 800c772:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800c774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c776:	2b00      	cmp	r3, #0
 800c778:	d109      	bne.n	800c78e <f_lseek+0x3d2>
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	2202      	movs	r2, #2
 800c77e:	755a      	strb	r2, [r3, #21]
 800c780:	68bb      	ldr	r3, [r7, #8]
 800c782:	2102      	movs	r1, #2
 800c784:	4618      	mov	r0, r3
 800c786:	f7fd fc98 	bl	800a0ba <unlock_fs>
 800c78a:	2302      	movs	r3, #2
 800c78c:	e065      	b.n	800c85a <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 800c78e:	683b      	ldr	r3, [r7, #0]
 800c790:	0a5b      	lsrs	r3, r3, #9
 800c792:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c794:	4413      	add	r3, r2
 800c796:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	699a      	ldr	r2, [r3, #24]
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	68db      	ldr	r3, [r3, #12]
 800c7a0:	429a      	cmp	r2, r3
 800c7a2:	d90a      	bls.n	800c7ba <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	699a      	ldr	r2, [r3, #24]
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	7d1b      	ldrb	r3, [r3, #20]
 800c7b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7b4:	b2da      	uxtb	r2, r3
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	699b      	ldr	r3, [r3, #24]
 800c7be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d040      	beq.n	800c848 <f_lseek+0x48c>
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	6a1b      	ldr	r3, [r3, #32]
 800c7ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c7cc:	429a      	cmp	r2, r3
 800c7ce:	d03b      	beq.n	800c848 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	7d1b      	ldrb	r3, [r3, #20]
 800c7d4:	b25b      	sxtb	r3, r3
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	da1d      	bge.n	800c816 <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c7da:	68bb      	ldr	r3, [r7, #8]
 800c7dc:	7858      	ldrb	r0, [r3, #1]
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	6a1a      	ldr	r2, [r3, #32]
 800c7e8:	2301      	movs	r3, #1
 800c7ea:	f7fd fb13 	bl	8009e14 <disk_write>
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d009      	beq.n	800c808 <f_lseek+0x44c>
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2201      	movs	r2, #1
 800c7f8:	755a      	strb	r2, [r3, #21]
 800c7fa:	68bb      	ldr	r3, [r7, #8]
 800c7fc:	2101      	movs	r1, #1
 800c7fe:	4618      	mov	r0, r3
 800c800:	f7fd fc5b 	bl	800a0ba <unlock_fs>
 800c804:	2301      	movs	r3, #1
 800c806:	e028      	b.n	800c85a <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	7d1b      	ldrb	r3, [r3, #20]
 800c80c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c810:	b2da      	uxtb	r2, r3
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c816:	68bb      	ldr	r3, [r7, #8]
 800c818:	7858      	ldrb	r0, [r3, #1]
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c820:	2301      	movs	r3, #1
 800c822:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c824:	f7fd fad6 	bl	8009dd4 <disk_read>
 800c828:	4603      	mov	r3, r0
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d009      	beq.n	800c842 <f_lseek+0x486>
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	2201      	movs	r2, #1
 800c832:	755a      	strb	r2, [r3, #21]
 800c834:	68bb      	ldr	r3, [r7, #8]
 800c836:	2101      	movs	r1, #1
 800c838:	4618      	mov	r0, r3
 800c83a:	f7fd fc3e 	bl	800a0ba <unlock_fs>
 800c83e:	2301      	movs	r3, #1
 800c840:	e00b      	b.n	800c85a <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c846:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800c848:	68bb      	ldr	r3, [r7, #8]
 800c84a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800c84e:	4611      	mov	r1, r2
 800c850:	4618      	mov	r0, r3
 800c852:	f7fd fc32 	bl	800a0ba <unlock_fs>
 800c856:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800c85a:	4618      	mov	r0, r3
 800c85c:	3740      	adds	r7, #64	; 0x40
 800c85e:	46bd      	mov	sp, r7
 800c860:	bd80      	pop	{r7, pc}

0800c862 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800c862:	b580      	push	{r7, lr}
 800c864:	b086      	sub	sp, #24
 800c866:	af00      	add	r7, sp, #0
 800c868:	6078      	str	r0, [r7, #4]
 800c86a:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d101      	bne.n	800c876 <f_opendir+0x14>
 800c872:	2309      	movs	r3, #9
 800c874:	e06a      	b.n	800c94c <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800c87a:	f107 010c 	add.w	r1, r7, #12
 800c87e:	463b      	mov	r3, r7
 800c880:	2200      	movs	r2, #0
 800c882:	4618      	mov	r0, r3
 800c884:	f7fe fea8 	bl	800b5d8 <find_volume>
 800c888:	4603      	mov	r3, r0
 800c88a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c88c:	7dfb      	ldrb	r3, [r7, #23]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d14f      	bne.n	800c932 <f_opendir+0xd0>
		obj->fs = fs;
 800c892:	68fa      	ldr	r2, [r7, #12]
 800c894:	693b      	ldr	r3, [r7, #16]
 800c896:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800c898:	683b      	ldr	r3, [r7, #0]
 800c89a:	4619      	mov	r1, r3
 800c89c:	6878      	ldr	r0, [r7, #4]
 800c89e:	f7fe fd8f 	bl	800b3c0 <follow_path>
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800c8a6:	7dfb      	ldrb	r3, [r7, #23]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d13d      	bne.n	800c928 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c8b2:	b25b      	sxtb	r3, r3
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	db12      	blt.n	800c8de <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800c8b8:	693b      	ldr	r3, [r7, #16]
 800c8ba:	799b      	ldrb	r3, [r3, #6]
 800c8bc:	f003 0310 	and.w	r3, r3, #16
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d00a      	beq.n	800c8da <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800c8c4:	68fa      	ldr	r2, [r7, #12]
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	6a1b      	ldr	r3, [r3, #32]
 800c8ca:	4619      	mov	r1, r3
 800c8cc:	4610      	mov	r0, r2
 800c8ce:	f7fe fabe 	bl	800ae4e <ld_clust>
 800c8d2:	4602      	mov	r2, r0
 800c8d4:	693b      	ldr	r3, [r7, #16]
 800c8d6:	609a      	str	r2, [r3, #8]
 800c8d8:	e001      	b.n	800c8de <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800c8da:	2305      	movs	r3, #5
 800c8dc:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800c8de:	7dfb      	ldrb	r3, [r7, #23]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d121      	bne.n	800c928 <f_opendir+0xc6>
				obj->id = fs->id;
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	88da      	ldrh	r2, [r3, #6]
 800c8e8:	693b      	ldr	r3, [r7, #16]
 800c8ea:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800c8ec:	2100      	movs	r1, #0
 800c8ee:	6878      	ldr	r0, [r7, #4]
 800c8f0:	f7fe f926 	bl	800ab40 <dir_sdi>
 800c8f4:	4603      	mov	r3, r0
 800c8f6:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800c8f8:	7dfb      	ldrb	r3, [r7, #23]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d114      	bne.n	800c928 <f_opendir+0xc6>
					if (obj->sclust) {
 800c8fe:	693b      	ldr	r3, [r7, #16]
 800c900:	689b      	ldr	r3, [r3, #8]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d00d      	beq.n	800c922 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800c906:	2100      	movs	r1, #0
 800c908:	6878      	ldr	r0, [r7, #4]
 800c90a:	f7fd fc6f 	bl	800a1ec <inc_lock>
 800c90e:	4602      	mov	r2, r0
 800c910:	693b      	ldr	r3, [r7, #16]
 800c912:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800c914:	693b      	ldr	r3, [r7, #16]
 800c916:	691b      	ldr	r3, [r3, #16]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d105      	bne.n	800c928 <f_opendir+0xc6>
 800c91c:	2312      	movs	r3, #18
 800c91e:	75fb      	strb	r3, [r7, #23]
 800c920:	e002      	b.n	800c928 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800c922:	693b      	ldr	r3, [r7, #16]
 800c924:	2200      	movs	r2, #0
 800c926:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800c928:	7dfb      	ldrb	r3, [r7, #23]
 800c92a:	2b04      	cmp	r3, #4
 800c92c:	d101      	bne.n	800c932 <f_opendir+0xd0>
 800c92e:	2305      	movs	r3, #5
 800c930:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800c932:	7dfb      	ldrb	r3, [r7, #23]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d002      	beq.n	800c93e <f_opendir+0xdc>
 800c938:	693b      	ldr	r3, [r7, #16]
 800c93a:	2200      	movs	r2, #0
 800c93c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	7dfa      	ldrb	r2, [r7, #23]
 800c942:	4611      	mov	r1, r2
 800c944:	4618      	mov	r0, r3
 800c946:	f7fd fbb8 	bl	800a0ba <unlock_fs>
 800c94a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c94c:	4618      	mov	r0, r3
 800c94e:	3718      	adds	r7, #24
 800c950:	46bd      	mov	sp, r7
 800c952:	bd80      	pop	{r7, pc}

0800c954 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b084      	sub	sp, #16
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	f107 0208 	add.w	r2, r7, #8
 800c962:	4611      	mov	r1, r2
 800c964:	4618      	mov	r0, r3
 800c966:	f7ff f88b 	bl	800ba80 <validate>
 800c96a:	4603      	mov	r3, r0
 800c96c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c96e:	7bfb      	ldrb	r3, [r7, #15]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d115      	bne.n	800c9a0 <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	691b      	ldr	r3, [r3, #16]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d006      	beq.n	800c98a <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	691b      	ldr	r3, [r3, #16]
 800c980:	4618      	mov	r0, r3
 800c982:	f7fd fcc1 	bl	800a308 <dec_lock>
 800c986:	4603      	mov	r3, r0
 800c988:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800c98a:	7bfb      	ldrb	r3, [r7, #15]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d102      	bne.n	800c996 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	2200      	movs	r2, #0
 800c994:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 800c996:	68bb      	ldr	r3, [r7, #8]
 800c998:	2100      	movs	r1, #0
 800c99a:	4618      	mov	r0, r3
 800c99c:	f7fd fb8d 	bl	800a0ba <unlock_fs>
#endif
	}
	return res;
 800c9a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	3710      	adds	r7, #16
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	bd80      	pop	{r7, pc}

0800c9aa <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800c9aa:	b580      	push	{r7, lr}
 800c9ac:	b084      	sub	sp, #16
 800c9ae:	af00      	add	r7, sp, #0
 800c9b0:	6078      	str	r0, [r7, #4]
 800c9b2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	f107 0208 	add.w	r2, r7, #8
 800c9ba:	4611      	mov	r1, r2
 800c9bc:	4618      	mov	r0, r3
 800c9be:	f7ff f85f 	bl	800ba80 <validate>
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c9c6:	7bfb      	ldrb	r3, [r7, #15]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d126      	bne.n	800ca1a <f_readdir+0x70>
		if (!fno) {
 800c9cc:	683b      	ldr	r3, [r7, #0]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d106      	bne.n	800c9e0 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800c9d2:	2100      	movs	r1, #0
 800c9d4:	6878      	ldr	r0, [r7, #4]
 800c9d6:	f7fe f8b3 	bl	800ab40 <dir_sdi>
 800c9da:	4603      	mov	r3, r0
 800c9dc:	73fb      	strb	r3, [r7, #15]
 800c9de:	e01c      	b.n	800ca1a <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800c9e0:	2100      	movs	r1, #0
 800c9e2:	6878      	ldr	r0, [r7, #4]
 800c9e4:	f7fe fa72 	bl	800aecc <dir_read>
 800c9e8:	4603      	mov	r3, r0
 800c9ea:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800c9ec:	7bfb      	ldrb	r3, [r7, #15]
 800c9ee:	2b04      	cmp	r3, #4
 800c9f0:	d101      	bne.n	800c9f6 <f_readdir+0x4c>
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800c9f6:	7bfb      	ldrb	r3, [r7, #15]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d10e      	bne.n	800ca1a <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800c9fc:	6839      	ldr	r1, [r7, #0]
 800c9fe:	6878      	ldr	r0, [r7, #4]
 800ca00:	f7fe fb48 	bl	800b094 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800ca04:	2100      	movs	r1, #0
 800ca06:	6878      	ldr	r0, [r7, #4]
 800ca08:	f7fe f915 	bl	800ac36 <dir_next>
 800ca0c:	4603      	mov	r3, r0
 800ca0e:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800ca10:	7bfb      	ldrb	r3, [r7, #15]
 800ca12:	2b04      	cmp	r3, #4
 800ca14:	d101      	bne.n	800ca1a <f_readdir+0x70>
 800ca16:	2300      	movs	r3, #0
 800ca18:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800ca1a:	68bb      	ldr	r3, [r7, #8]
 800ca1c:	7bfa      	ldrb	r2, [r7, #15]
 800ca1e:	4611      	mov	r1, r2
 800ca20:	4618      	mov	r0, r3
 800ca22:	f7fd fb4a 	bl	800a0ba <unlock_fs>
 800ca26:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca28:	4618      	mov	r0, r3
 800ca2a:	3710      	adds	r7, #16
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	bd80      	pop	{r7, pc}

0800ca30 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b084      	sub	sp, #16
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
 800ca38:	6039      	str	r1, [r7, #0]
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 800ca3a:	6839      	ldr	r1, [r7, #0]
 800ca3c:	6878      	ldr	r0, [r7, #4]
 800ca3e:	f7ff ffb4 	bl	800c9aa <f_readdir>
 800ca42:	4603      	mov	r3, r0
 800ca44:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 800ca46:	7bfb      	ldrb	r3, [r7, #15]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d114      	bne.n	800ca76 <f_findnext+0x46>
 800ca4c:	683b      	ldr	r3, [r7, #0]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d011      	beq.n	800ca76 <f_findnext+0x46>
 800ca52:	683b      	ldr	r3, [r7, #0]
 800ca54:	7a5b      	ldrb	r3, [r3, #9]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d00d      	beq.n	800ca76 <f_findnext+0x46>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ca5e:	683b      	ldr	r3, [r7, #0]
 800ca60:	f103 0109 	add.w	r1, r3, #9
 800ca64:	2300      	movs	r3, #0
 800ca66:	2200      	movs	r2, #0
 800ca68:	f7fe fb9a 	bl	800b1a0 <pattern_matching>
 800ca6c:	4603      	mov	r3, r0
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d100      	bne.n	800ca74 <f_findnext+0x44>
		res = f_readdir(dp, fno);		/* Get a directory item */
 800ca72:	e7e2      	b.n	800ca3a <f_findnext+0xa>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 800ca74:	bf00      	nop
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
 800ca76:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca78:	4618      	mov	r0, r3
 800ca7a:	3710      	adds	r7, #16
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	bd80      	pop	{r7, pc}

0800ca80 <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b086      	sub	sp, #24
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	60f8      	str	r0, [r7, #12]
 800ca88:	60b9      	str	r1, [r7, #8]
 800ca8a:	607a      	str	r2, [r7, #4]
 800ca8c:	603b      	str	r3, [r7, #0]
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	683a      	ldr	r2, [r7, #0]
 800ca92:	631a      	str	r2, [r3, #48]	; 0x30
	res = f_opendir(dp, path);		/* Open the target directory */
 800ca94:	6879      	ldr	r1, [r7, #4]
 800ca96:	68f8      	ldr	r0, [r7, #12]
 800ca98:	f7ff fee3 	bl	800c862 <f_opendir>
 800ca9c:	4603      	mov	r3, r0
 800ca9e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800caa0:	7dfb      	ldrb	r3, [r7, #23]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d105      	bne.n	800cab2 <f_findfirst+0x32>
		res = f_findnext(dp, fno);	/* Find the first item */
 800caa6:	68b9      	ldr	r1, [r7, #8]
 800caa8:	68f8      	ldr	r0, [r7, #12]
 800caaa:	f7ff ffc1 	bl	800ca30 <f_findnext>
 800caae:	4603      	mov	r3, r0
 800cab0:	75fb      	strb	r3, [r7, #23]
	}
	return res;
 800cab2:	7dfb      	ldrb	r3, [r7, #23]
}
 800cab4:	4618      	mov	r0, r3
 800cab6:	3718      	adds	r7, #24
 800cab8:	46bd      	mov	sp, r7
 800caba:	bd80      	pop	{r7, pc}

0800cabc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800cabc:	b480      	push	{r7}
 800cabe:	b087      	sub	sp, #28
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	60f8      	str	r0, [r7, #12]
 800cac4:	60b9      	str	r1, [r7, #8]
 800cac6:	4613      	mov	r3, r2
 800cac8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800caca:	2301      	movs	r3, #1
 800cacc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800cace:	2300      	movs	r3, #0
 800cad0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800cad2:	4b1f      	ldr	r3, [pc, #124]	; (800cb50 <FATFS_LinkDriverEx+0x94>)
 800cad4:	7a5b      	ldrb	r3, [r3, #9]
 800cad6:	b2db      	uxtb	r3, r3
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d131      	bne.n	800cb40 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800cadc:	4b1c      	ldr	r3, [pc, #112]	; (800cb50 <FATFS_LinkDriverEx+0x94>)
 800cade:	7a5b      	ldrb	r3, [r3, #9]
 800cae0:	b2db      	uxtb	r3, r3
 800cae2:	461a      	mov	r2, r3
 800cae4:	4b1a      	ldr	r3, [pc, #104]	; (800cb50 <FATFS_LinkDriverEx+0x94>)
 800cae6:	2100      	movs	r1, #0
 800cae8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800caea:	4b19      	ldr	r3, [pc, #100]	; (800cb50 <FATFS_LinkDriverEx+0x94>)
 800caec:	7a5b      	ldrb	r3, [r3, #9]
 800caee:	b2db      	uxtb	r3, r3
 800caf0:	4a17      	ldr	r2, [pc, #92]	; (800cb50 <FATFS_LinkDriverEx+0x94>)
 800caf2:	009b      	lsls	r3, r3, #2
 800caf4:	4413      	add	r3, r2
 800caf6:	68fa      	ldr	r2, [r7, #12]
 800caf8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800cafa:	4b15      	ldr	r3, [pc, #84]	; (800cb50 <FATFS_LinkDriverEx+0x94>)
 800cafc:	7a5b      	ldrb	r3, [r3, #9]
 800cafe:	b2db      	uxtb	r3, r3
 800cb00:	461a      	mov	r2, r3
 800cb02:	4b13      	ldr	r3, [pc, #76]	; (800cb50 <FATFS_LinkDriverEx+0x94>)
 800cb04:	4413      	add	r3, r2
 800cb06:	79fa      	ldrb	r2, [r7, #7]
 800cb08:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800cb0a:	4b11      	ldr	r3, [pc, #68]	; (800cb50 <FATFS_LinkDriverEx+0x94>)
 800cb0c:	7a5b      	ldrb	r3, [r3, #9]
 800cb0e:	b2db      	uxtb	r3, r3
 800cb10:	1c5a      	adds	r2, r3, #1
 800cb12:	b2d1      	uxtb	r1, r2
 800cb14:	4a0e      	ldr	r2, [pc, #56]	; (800cb50 <FATFS_LinkDriverEx+0x94>)
 800cb16:	7251      	strb	r1, [r2, #9]
 800cb18:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800cb1a:	7dbb      	ldrb	r3, [r7, #22]
 800cb1c:	3330      	adds	r3, #48	; 0x30
 800cb1e:	b2da      	uxtb	r2, r3
 800cb20:	68bb      	ldr	r3, [r7, #8]
 800cb22:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800cb24:	68bb      	ldr	r3, [r7, #8]
 800cb26:	3301      	adds	r3, #1
 800cb28:	223a      	movs	r2, #58	; 0x3a
 800cb2a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800cb2c:	68bb      	ldr	r3, [r7, #8]
 800cb2e:	3302      	adds	r3, #2
 800cb30:	222f      	movs	r2, #47	; 0x2f
 800cb32:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800cb34:	68bb      	ldr	r3, [r7, #8]
 800cb36:	3303      	adds	r3, #3
 800cb38:	2200      	movs	r2, #0
 800cb3a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800cb40:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb42:	4618      	mov	r0, r3
 800cb44:	371c      	adds	r7, #28
 800cb46:	46bd      	mov	sp, r7
 800cb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4c:	4770      	bx	lr
 800cb4e:	bf00      	nop
 800cb50:	20000248 	.word	0x20000248

0800cb54 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b082      	sub	sp, #8
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
 800cb5c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800cb5e:	2200      	movs	r2, #0
 800cb60:	6839      	ldr	r1, [r7, #0]
 800cb62:	6878      	ldr	r0, [r7, #4]
 800cb64:	f7ff ffaa 	bl	800cabc <FATFS_LinkDriverEx>
 800cb68:	4603      	mov	r3, r0
}
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	3708      	adds	r7, #8
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	bd80      	pop	{r7, pc}

0800cb72 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800cb72:	b580      	push	{r7, lr}
 800cb74:	b084      	sub	sp, #16
 800cb76:	af00      	add	r7, sp, #0
 800cb78:	4603      	mov	r3, r0
 800cb7a:	6039      	str	r1, [r7, #0]
 800cb7c:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800cb7e:	2200      	movs	r2, #0
 800cb80:	2101      	movs	r1, #1
 800cb82:	2001      	movs	r0, #1
 800cb84:	f000 fb14 	bl	800d1b0 <osSemaphoreNew>
 800cb88:	4602      	mov	r2, r0
 800cb8a:	683b      	ldr	r3, [r7, #0]
 800cb8c:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 800cb8e:	683b      	ldr	r3, [r7, #0]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	bf14      	ite	ne
 800cb96:	2301      	movne	r3, #1
 800cb98:	2300      	moveq	r3, #0
 800cb9a:	b2db      	uxtb	r3, r3
 800cb9c:	60fb      	str	r3, [r7, #12]

    return ret;
 800cb9e:	68fb      	ldr	r3, [r7, #12]
}
 800cba0:	4618      	mov	r0, r3
 800cba2:	3710      	adds	r7, #16
 800cba4:	46bd      	mov	sp, r7
 800cba6:	bd80      	pop	{r7, pc}

0800cba8 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b082      	sub	sp, #8
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800cbb0:	6878      	ldr	r0, [r7, #4]
 800cbb2:	f000 fc59 	bl	800d468 <osSemaphoreDelete>
#endif
    return 1;
 800cbb6:	2301      	movs	r3, #1
}
 800cbb8:	4618      	mov	r0, r3
 800cbba:	3708      	adds	r7, #8
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	bd80      	pop	{r7, pc}

0800cbc0 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b084      	sub	sp, #16
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800cbc8:	2300      	movs	r3, #0
 800cbca:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800cbcc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800cbd0:	6878      	ldr	r0, [r7, #4]
 800cbd2:	f000 fb8b 	bl	800d2ec <osSemaphoreAcquire>
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d101      	bne.n	800cbe0 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800cbdc:	2301      	movs	r3, #1
 800cbde:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800cbe0:	68fb      	ldr	r3, [r7, #12]
}
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	3710      	adds	r7, #16
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	bd80      	pop	{r7, pc}

0800cbea <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800cbea:	b580      	push	{r7, lr}
 800cbec:	b082      	sub	sp, #8
 800cbee:	af00      	add	r7, sp, #0
 800cbf0:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800cbf2:	6878      	ldr	r0, [r7, #4]
 800cbf4:	f000 fbe0 	bl	800d3b8 <osSemaphoreRelease>
#endif
}
 800cbf8:	bf00      	nop
 800cbfa:	3708      	adds	r7, #8
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	bd80      	pop	{r7, pc}

0800cc00 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800cc00:	b480      	push	{r7}
 800cc02:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800cc04:	bf00      	nop
 800cc06:	46bd      	mov	sp, r7
 800cc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0c:	4770      	bx	lr
	...

0800cc10 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800cc10:	b480      	push	{r7}
 800cc12:	b085      	sub	sp, #20
 800cc14:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cc16:	f3ef 8305 	mrs	r3, IPSR
 800cc1a:	60bb      	str	r3, [r7, #8]
  return(result);
 800cc1c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d10f      	bne.n	800cc42 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc22:	f3ef 8310 	mrs	r3, PRIMASK
 800cc26:	607b      	str	r3, [r7, #4]
  return(result);
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d105      	bne.n	800cc3a <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cc2e:	f3ef 8311 	mrs	r3, BASEPRI
 800cc32:	603b      	str	r3, [r7, #0]
  return(result);
 800cc34:	683b      	ldr	r3, [r7, #0]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d007      	beq.n	800cc4a <osKernelInitialize+0x3a>
 800cc3a:	4b0e      	ldr	r3, [pc, #56]	; (800cc74 <osKernelInitialize+0x64>)
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	2b02      	cmp	r3, #2
 800cc40:	d103      	bne.n	800cc4a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800cc42:	f06f 0305 	mvn.w	r3, #5
 800cc46:	60fb      	str	r3, [r7, #12]
 800cc48:	e00c      	b.n	800cc64 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800cc4a:	4b0a      	ldr	r3, [pc, #40]	; (800cc74 <osKernelInitialize+0x64>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d105      	bne.n	800cc5e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800cc52:	4b08      	ldr	r3, [pc, #32]	; (800cc74 <osKernelInitialize+0x64>)
 800cc54:	2201      	movs	r2, #1
 800cc56:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800cc58:	2300      	movs	r3, #0
 800cc5a:	60fb      	str	r3, [r7, #12]
 800cc5c:	e002      	b.n	800cc64 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800cc5e:	f04f 33ff 	mov.w	r3, #4294967295
 800cc62:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800cc64:	68fb      	ldr	r3, [r7, #12]
}
 800cc66:	4618      	mov	r0, r3
 800cc68:	3714      	adds	r7, #20
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc70:	4770      	bx	lr
 800cc72:	bf00      	nop
 800cc74:	20000254 	.word	0x20000254

0800cc78 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b082      	sub	sp, #8
 800cc7c:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800cc7e:	f002 fdb1 	bl	800f7e4 <xTaskGetSchedulerState>
 800cc82:	4603      	mov	r3, r0
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d004      	beq.n	800cc92 <osKernelGetState+0x1a>
 800cc88:	2b02      	cmp	r3, #2
 800cc8a:	d105      	bne.n	800cc98 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800cc8c:	2302      	movs	r3, #2
 800cc8e:	607b      	str	r3, [r7, #4]
      break;
 800cc90:	e00c      	b.n	800ccac <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800cc92:	2303      	movs	r3, #3
 800cc94:	607b      	str	r3, [r7, #4]
      break;
 800cc96:	e009      	b.n	800ccac <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800cc98:	4b07      	ldr	r3, [pc, #28]	; (800ccb8 <osKernelGetState+0x40>)
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	2b01      	cmp	r3, #1
 800cc9e:	d102      	bne.n	800cca6 <osKernelGetState+0x2e>
        state = osKernelReady;
 800cca0:	2301      	movs	r3, #1
 800cca2:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800cca4:	e001      	b.n	800ccaa <osKernelGetState+0x32>
        state = osKernelInactive;
 800cca6:	2300      	movs	r3, #0
 800cca8:	607b      	str	r3, [r7, #4]
      break;
 800ccaa:	bf00      	nop
  }

  return (state);
 800ccac:	687b      	ldr	r3, [r7, #4]
}
 800ccae:	4618      	mov	r0, r3
 800ccb0:	3708      	adds	r7, #8
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	bd80      	pop	{r7, pc}
 800ccb6:	bf00      	nop
 800ccb8:	20000254 	.word	0x20000254

0800ccbc <osKernelStart>:

osStatus_t osKernelStart (void) {
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	b084      	sub	sp, #16
 800ccc0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ccc2:	f3ef 8305 	mrs	r3, IPSR
 800ccc6:	60bb      	str	r3, [r7, #8]
  return(result);
 800ccc8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d10f      	bne.n	800ccee <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ccce:	f3ef 8310 	mrs	r3, PRIMASK
 800ccd2:	607b      	str	r3, [r7, #4]
  return(result);
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d105      	bne.n	800cce6 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ccda:	f3ef 8311 	mrs	r3, BASEPRI
 800ccde:	603b      	str	r3, [r7, #0]
  return(result);
 800cce0:	683b      	ldr	r3, [r7, #0]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d007      	beq.n	800ccf6 <osKernelStart+0x3a>
 800cce6:	4b0f      	ldr	r3, [pc, #60]	; (800cd24 <osKernelStart+0x68>)
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	2b02      	cmp	r3, #2
 800ccec:	d103      	bne.n	800ccf6 <osKernelStart+0x3a>
    stat = osErrorISR;
 800ccee:	f06f 0305 	mvn.w	r3, #5
 800ccf2:	60fb      	str	r3, [r7, #12]
 800ccf4:	e010      	b.n	800cd18 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ccf6:	4b0b      	ldr	r3, [pc, #44]	; (800cd24 <osKernelStart+0x68>)
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	2b01      	cmp	r3, #1
 800ccfc:	d109      	bne.n	800cd12 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ccfe:	f7ff ff7f 	bl	800cc00 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800cd02:	4b08      	ldr	r3, [pc, #32]	; (800cd24 <osKernelStart+0x68>)
 800cd04:	2202      	movs	r2, #2
 800cd06:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800cd08:	f002 f8fe 	bl	800ef08 <vTaskStartScheduler>
      stat = osOK;
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	60fb      	str	r3, [r7, #12]
 800cd10:	e002      	b.n	800cd18 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800cd12:	f04f 33ff 	mov.w	r3, #4294967295
 800cd16:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800cd18:	68fb      	ldr	r3, [r7, #12]
}
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	3710      	adds	r7, #16
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	bd80      	pop	{r7, pc}
 800cd22:	bf00      	nop
 800cd24:	20000254 	.word	0x20000254

0800cd28 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b084      	sub	sp, #16
 800cd2c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd2e:	f3ef 8305 	mrs	r3, IPSR
 800cd32:	60bb      	str	r3, [r7, #8]
  return(result);
 800cd34:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d10f      	bne.n	800cd5a <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cd3a:	f3ef 8310 	mrs	r3, PRIMASK
 800cd3e:	607b      	str	r3, [r7, #4]
  return(result);
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d105      	bne.n	800cd52 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cd46:	f3ef 8311 	mrs	r3, BASEPRI
 800cd4a:	603b      	str	r3, [r7, #0]
  return(result);
 800cd4c:	683b      	ldr	r3, [r7, #0]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d007      	beq.n	800cd62 <osKernelGetTickCount+0x3a>
 800cd52:	4b08      	ldr	r3, [pc, #32]	; (800cd74 <osKernelGetTickCount+0x4c>)
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	2b02      	cmp	r3, #2
 800cd58:	d103      	bne.n	800cd62 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800cd5a:	f002 f9f9 	bl	800f150 <xTaskGetTickCountFromISR>
 800cd5e:	60f8      	str	r0, [r7, #12]
 800cd60:	e002      	b.n	800cd68 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 800cd62:	f002 f9e5 	bl	800f130 <xTaskGetTickCount>
 800cd66:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 800cd68:	68fb      	ldr	r3, [r7, #12]
}
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	3710      	adds	r7, #16
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	bd80      	pop	{r7, pc}
 800cd72:	bf00      	nop
 800cd74:	20000254 	.word	0x20000254

0800cd78 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b090      	sub	sp, #64	; 0x40
 800cd7c:	af04      	add	r7, sp, #16
 800cd7e:	60f8      	str	r0, [r7, #12]
 800cd80:	60b9      	str	r1, [r7, #8]
 800cd82:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800cd84:	2300      	movs	r3, #0
 800cd86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd88:	f3ef 8305 	mrs	r3, IPSR
 800cd8c:	61fb      	str	r3, [r7, #28]
  return(result);
 800cd8e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	f040 808f 	bne.w	800ceb4 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cd96:	f3ef 8310 	mrs	r3, PRIMASK
 800cd9a:	61bb      	str	r3, [r7, #24]
  return(result);
 800cd9c:	69bb      	ldr	r3, [r7, #24]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d105      	bne.n	800cdae <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cda2:	f3ef 8311 	mrs	r3, BASEPRI
 800cda6:	617b      	str	r3, [r7, #20]
  return(result);
 800cda8:	697b      	ldr	r3, [r7, #20]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d003      	beq.n	800cdb6 <osThreadNew+0x3e>
 800cdae:	4b44      	ldr	r3, [pc, #272]	; (800cec0 <osThreadNew+0x148>)
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	2b02      	cmp	r3, #2
 800cdb4:	d07e      	beq.n	800ceb4 <osThreadNew+0x13c>
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d07b      	beq.n	800ceb4 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800cdbc:	2380      	movs	r3, #128	; 0x80
 800cdbe:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800cdc0:	2318      	movs	r3, #24
 800cdc2:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800cdc8:	f04f 33ff 	mov.w	r3, #4294967295
 800cdcc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d045      	beq.n	800ce60 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d002      	beq.n	800cde2 <osThreadNew+0x6a>
        name = attr->name;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	699b      	ldr	r3, [r3, #24]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d002      	beq.n	800cdf0 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	699b      	ldr	r3, [r3, #24]
 800cdee:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800cdf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d008      	beq.n	800ce08 <osThreadNew+0x90>
 800cdf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdf8:	2b38      	cmp	r3, #56	; 0x38
 800cdfa:	d805      	bhi.n	800ce08 <osThreadNew+0x90>
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	685b      	ldr	r3, [r3, #4]
 800ce00:	f003 0301 	and.w	r3, r3, #1
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d001      	beq.n	800ce0c <osThreadNew+0x94>
        return (NULL);
 800ce08:	2300      	movs	r3, #0
 800ce0a:	e054      	b.n	800ceb6 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	695b      	ldr	r3, [r3, #20]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d003      	beq.n	800ce1c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	695b      	ldr	r3, [r3, #20]
 800ce18:	089b      	lsrs	r3, r3, #2
 800ce1a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	689b      	ldr	r3, [r3, #8]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d00e      	beq.n	800ce42 <osThreadNew+0xca>
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	68db      	ldr	r3, [r3, #12]
 800ce28:	2b5b      	cmp	r3, #91	; 0x5b
 800ce2a:	d90a      	bls.n	800ce42 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d006      	beq.n	800ce42 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	695b      	ldr	r3, [r3, #20]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d002      	beq.n	800ce42 <osThreadNew+0xca>
        mem = 1;
 800ce3c:	2301      	movs	r3, #1
 800ce3e:	623b      	str	r3, [r7, #32]
 800ce40:	e010      	b.n	800ce64 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	689b      	ldr	r3, [r3, #8]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d10c      	bne.n	800ce64 <osThreadNew+0xec>
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	68db      	ldr	r3, [r3, #12]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d108      	bne.n	800ce64 <osThreadNew+0xec>
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	691b      	ldr	r3, [r3, #16]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d104      	bne.n	800ce64 <osThreadNew+0xec>
          mem = 0;
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	623b      	str	r3, [r7, #32]
 800ce5e:	e001      	b.n	800ce64 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800ce60:	2300      	movs	r3, #0
 800ce62:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800ce64:	6a3b      	ldr	r3, [r7, #32]
 800ce66:	2b01      	cmp	r3, #1
 800ce68:	d110      	bne.n	800ce8c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800ce6e:	687a      	ldr	r2, [r7, #4]
 800ce70:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ce72:	9202      	str	r2, [sp, #8]
 800ce74:	9301      	str	r3, [sp, #4]
 800ce76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce78:	9300      	str	r3, [sp, #0]
 800ce7a:	68bb      	ldr	r3, [r7, #8]
 800ce7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ce80:	68f8      	ldr	r0, [r7, #12]
 800ce82:	f001 fe65 	bl	800eb50 <xTaskCreateStatic>
 800ce86:	4603      	mov	r3, r0
 800ce88:	613b      	str	r3, [r7, #16]
 800ce8a:	e013      	b.n	800ceb4 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800ce8c:	6a3b      	ldr	r3, [r7, #32]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d110      	bne.n	800ceb4 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ce92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce94:	b29a      	uxth	r2, r3
 800ce96:	f107 0310 	add.w	r3, r7, #16
 800ce9a:	9301      	str	r3, [sp, #4]
 800ce9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce9e:	9300      	str	r3, [sp, #0]
 800cea0:	68bb      	ldr	r3, [r7, #8]
 800cea2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cea4:	68f8      	ldr	r0, [r7, #12]
 800cea6:	f001 feb3 	bl	800ec10 <xTaskCreate>
 800ceaa:	4603      	mov	r3, r0
 800ceac:	2b01      	cmp	r3, #1
 800ceae:	d001      	beq.n	800ceb4 <osThreadNew+0x13c>
          hTask = NULL;
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ceb4:	693b      	ldr	r3, [r7, #16]
}
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	3730      	adds	r7, #48	; 0x30
 800ceba:	46bd      	mov	sp, r7
 800cebc:	bd80      	pop	{r7, pc}
 800cebe:	bf00      	nop
 800cec0:	20000254 	.word	0x20000254

0800cec4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800cec4:	b580      	push	{r7, lr}
 800cec6:	b086      	sub	sp, #24
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cecc:	f3ef 8305 	mrs	r3, IPSR
 800ced0:	613b      	str	r3, [r7, #16]
  return(result);
 800ced2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d10f      	bne.n	800cef8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ced8:	f3ef 8310 	mrs	r3, PRIMASK
 800cedc:	60fb      	str	r3, [r7, #12]
  return(result);
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d105      	bne.n	800cef0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cee4:	f3ef 8311 	mrs	r3, BASEPRI
 800cee8:	60bb      	str	r3, [r7, #8]
  return(result);
 800ceea:	68bb      	ldr	r3, [r7, #8]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d007      	beq.n	800cf00 <osDelay+0x3c>
 800cef0:	4b0a      	ldr	r3, [pc, #40]	; (800cf1c <osDelay+0x58>)
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	2b02      	cmp	r3, #2
 800cef6:	d103      	bne.n	800cf00 <osDelay+0x3c>
    stat = osErrorISR;
 800cef8:	f06f 0305 	mvn.w	r3, #5
 800cefc:	617b      	str	r3, [r7, #20]
 800cefe:	e007      	b.n	800cf10 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800cf00:	2300      	movs	r3, #0
 800cf02:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d002      	beq.n	800cf10 <osDelay+0x4c>
      vTaskDelay(ticks);
 800cf0a:	6878      	ldr	r0, [r7, #4]
 800cf0c:	f001 ffc6 	bl	800ee9c <vTaskDelay>
    }
  }

  return (stat);
 800cf10:	697b      	ldr	r3, [r7, #20]
}
 800cf12:	4618      	mov	r0, r3
 800cf14:	3718      	adds	r7, #24
 800cf16:	46bd      	mov	sp, r7
 800cf18:	bd80      	pop	{r7, pc}
 800cf1a:	bf00      	nop
 800cf1c:	20000254 	.word	0x20000254

0800cf20 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b08a      	sub	sp, #40	; 0x28
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800cf28:	2300      	movs	r3, #0
 800cf2a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cf2c:	f3ef 8305 	mrs	r3, IPSR
 800cf30:	613b      	str	r3, [r7, #16]
  return(result);
 800cf32:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	f040 8085 	bne.w	800d044 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cf3a:	f3ef 8310 	mrs	r3, PRIMASK
 800cf3e:	60fb      	str	r3, [r7, #12]
  return(result);
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d105      	bne.n	800cf52 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cf46:	f3ef 8311 	mrs	r3, BASEPRI
 800cf4a:	60bb      	str	r3, [r7, #8]
  return(result);
 800cf4c:	68bb      	ldr	r3, [r7, #8]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d003      	beq.n	800cf5a <osMutexNew+0x3a>
 800cf52:	4b3f      	ldr	r3, [pc, #252]	; (800d050 <osMutexNew+0x130>)
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	2b02      	cmp	r3, #2
 800cf58:	d074      	beq.n	800d044 <osMutexNew+0x124>
    if (attr != NULL) {
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d003      	beq.n	800cf68 <osMutexNew+0x48>
      type = attr->attr_bits;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	685b      	ldr	r3, [r3, #4]
 800cf64:	623b      	str	r3, [r7, #32]
 800cf66:	e001      	b.n	800cf6c <osMutexNew+0x4c>
    } else {
      type = 0U;
 800cf68:	2300      	movs	r3, #0
 800cf6a:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800cf6c:	6a3b      	ldr	r3, [r7, #32]
 800cf6e:	f003 0301 	and.w	r3, r3, #1
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d002      	beq.n	800cf7c <osMutexNew+0x5c>
      rmtx = 1U;
 800cf76:	2301      	movs	r3, #1
 800cf78:	61fb      	str	r3, [r7, #28]
 800cf7a:	e001      	b.n	800cf80 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800cf80:	6a3b      	ldr	r3, [r7, #32]
 800cf82:	f003 0308 	and.w	r3, r3, #8
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d15c      	bne.n	800d044 <osMutexNew+0x124>
      mem = -1;
 800cf8a:	f04f 33ff 	mov.w	r3, #4294967295
 800cf8e:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d015      	beq.n	800cfc2 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	689b      	ldr	r3, [r3, #8]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d006      	beq.n	800cfac <osMutexNew+0x8c>
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	68db      	ldr	r3, [r3, #12]
 800cfa2:	2b4f      	cmp	r3, #79	; 0x4f
 800cfa4:	d902      	bls.n	800cfac <osMutexNew+0x8c>
          mem = 1;
 800cfa6:	2301      	movs	r3, #1
 800cfa8:	61bb      	str	r3, [r7, #24]
 800cfaa:	e00c      	b.n	800cfc6 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	689b      	ldr	r3, [r3, #8]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d108      	bne.n	800cfc6 <osMutexNew+0xa6>
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	68db      	ldr	r3, [r3, #12]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d104      	bne.n	800cfc6 <osMutexNew+0xa6>
            mem = 0;
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	61bb      	str	r3, [r7, #24]
 800cfc0:	e001      	b.n	800cfc6 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800cfc6:	69bb      	ldr	r3, [r7, #24]
 800cfc8:	2b01      	cmp	r3, #1
 800cfca:	d112      	bne.n	800cff2 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800cfcc:	69fb      	ldr	r3, [r7, #28]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d007      	beq.n	800cfe2 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	689b      	ldr	r3, [r3, #8]
 800cfd6:	4619      	mov	r1, r3
 800cfd8:	2004      	movs	r0, #4
 800cfda:	f000 fe4c 	bl	800dc76 <xQueueCreateMutexStatic>
 800cfde:	6278      	str	r0, [r7, #36]	; 0x24
 800cfe0:	e016      	b.n	800d010 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	689b      	ldr	r3, [r3, #8]
 800cfe6:	4619      	mov	r1, r3
 800cfe8:	2001      	movs	r0, #1
 800cfea:	f000 fe44 	bl	800dc76 <xQueueCreateMutexStatic>
 800cfee:	6278      	str	r0, [r7, #36]	; 0x24
 800cff0:	e00e      	b.n	800d010 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800cff2:	69bb      	ldr	r3, [r7, #24]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d10b      	bne.n	800d010 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800cff8:	69fb      	ldr	r3, [r7, #28]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d004      	beq.n	800d008 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800cffe:	2004      	movs	r0, #4
 800d000:	f000 fe21 	bl	800dc46 <xQueueCreateMutex>
 800d004:	6278      	str	r0, [r7, #36]	; 0x24
 800d006:	e003      	b.n	800d010 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800d008:	2001      	movs	r0, #1
 800d00a:	f000 fe1c 	bl	800dc46 <xQueueCreateMutex>
 800d00e:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800d010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d012:	2b00      	cmp	r3, #0
 800d014:	d00c      	beq.n	800d030 <osMutexNew+0x110>
        if (attr != NULL) {
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d003      	beq.n	800d024 <osMutexNew+0x104>
          name = attr->name;
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	617b      	str	r3, [r7, #20]
 800d022:	e001      	b.n	800d028 <osMutexNew+0x108>
        } else {
          name = NULL;
 800d024:	2300      	movs	r3, #0
 800d026:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800d028:	6979      	ldr	r1, [r7, #20]
 800d02a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d02c:	f001 fd0a 	bl	800ea44 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800d030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d032:	2b00      	cmp	r3, #0
 800d034:	d006      	beq.n	800d044 <osMutexNew+0x124>
 800d036:	69fb      	ldr	r3, [r7, #28]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d003      	beq.n	800d044 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800d03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d03e:	f043 0301 	orr.w	r3, r3, #1
 800d042:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800d044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d046:	4618      	mov	r0, r3
 800d048:	3728      	adds	r7, #40	; 0x28
 800d04a:	46bd      	mov	sp, r7
 800d04c:	bd80      	pop	{r7, pc}
 800d04e:	bf00      	nop
 800d050:	20000254 	.word	0x20000254

0800d054 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800d054:	b580      	push	{r7, lr}
 800d056:	b088      	sub	sp, #32
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
 800d05c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	f023 0301 	bic.w	r3, r3, #1
 800d064:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	f003 0301 	and.w	r3, r3, #1
 800d06c:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800d06e:	2300      	movs	r3, #0
 800d070:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d072:	f3ef 8305 	mrs	r3, IPSR
 800d076:	613b      	str	r3, [r7, #16]
  return(result);
 800d078:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d10f      	bne.n	800d09e <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d07e:	f3ef 8310 	mrs	r3, PRIMASK
 800d082:	60fb      	str	r3, [r7, #12]
  return(result);
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d105      	bne.n	800d096 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d08a:	f3ef 8311 	mrs	r3, BASEPRI
 800d08e:	60bb      	str	r3, [r7, #8]
  return(result);
 800d090:	68bb      	ldr	r3, [r7, #8]
 800d092:	2b00      	cmp	r3, #0
 800d094:	d007      	beq.n	800d0a6 <osMutexAcquire+0x52>
 800d096:	4b1d      	ldr	r3, [pc, #116]	; (800d10c <osMutexAcquire+0xb8>)
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	2b02      	cmp	r3, #2
 800d09c:	d103      	bne.n	800d0a6 <osMutexAcquire+0x52>
    stat = osErrorISR;
 800d09e:	f06f 0305 	mvn.w	r3, #5
 800d0a2:	61fb      	str	r3, [r7, #28]
 800d0a4:	e02c      	b.n	800d100 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800d0a6:	69bb      	ldr	r3, [r7, #24]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d103      	bne.n	800d0b4 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800d0ac:	f06f 0303 	mvn.w	r3, #3
 800d0b0:	61fb      	str	r3, [r7, #28]
 800d0b2:	e025      	b.n	800d100 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800d0b4:	697b      	ldr	r3, [r7, #20]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d011      	beq.n	800d0de <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800d0ba:	6839      	ldr	r1, [r7, #0]
 800d0bc:	69b8      	ldr	r0, [r7, #24]
 800d0be:	f000 fe2a 	bl	800dd16 <xQueueTakeMutexRecursive>
 800d0c2:	4603      	mov	r3, r0
 800d0c4:	2b01      	cmp	r3, #1
 800d0c6:	d01b      	beq.n	800d100 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800d0c8:	683b      	ldr	r3, [r7, #0]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d003      	beq.n	800d0d6 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800d0ce:	f06f 0301 	mvn.w	r3, #1
 800d0d2:	61fb      	str	r3, [r7, #28]
 800d0d4:	e014      	b.n	800d100 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800d0d6:	f06f 0302 	mvn.w	r3, #2
 800d0da:	61fb      	str	r3, [r7, #28]
 800d0dc:	e010      	b.n	800d100 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800d0de:	6839      	ldr	r1, [r7, #0]
 800d0e0:	69b8      	ldr	r0, [r7, #24]
 800d0e2:	f001 f9cf 	bl	800e484 <xQueueSemaphoreTake>
 800d0e6:	4603      	mov	r3, r0
 800d0e8:	2b01      	cmp	r3, #1
 800d0ea:	d009      	beq.n	800d100 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800d0ec:	683b      	ldr	r3, [r7, #0]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d003      	beq.n	800d0fa <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800d0f2:	f06f 0301 	mvn.w	r3, #1
 800d0f6:	61fb      	str	r3, [r7, #28]
 800d0f8:	e002      	b.n	800d100 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800d0fa:	f06f 0302 	mvn.w	r3, #2
 800d0fe:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800d100:	69fb      	ldr	r3, [r7, #28]
}
 800d102:	4618      	mov	r0, r3
 800d104:	3720      	adds	r7, #32
 800d106:	46bd      	mov	sp, r7
 800d108:	bd80      	pop	{r7, pc}
 800d10a:	bf00      	nop
 800d10c:	20000254 	.word	0x20000254

0800d110 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800d110:	b580      	push	{r7, lr}
 800d112:	b088      	sub	sp, #32
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	f023 0301 	bic.w	r3, r3, #1
 800d11e:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	f003 0301 	and.w	r3, r3, #1
 800d126:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800d128:	2300      	movs	r3, #0
 800d12a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d12c:	f3ef 8305 	mrs	r3, IPSR
 800d130:	613b      	str	r3, [r7, #16]
  return(result);
 800d132:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800d134:	2b00      	cmp	r3, #0
 800d136:	d10f      	bne.n	800d158 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d138:	f3ef 8310 	mrs	r3, PRIMASK
 800d13c:	60fb      	str	r3, [r7, #12]
  return(result);
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d105      	bne.n	800d150 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d144:	f3ef 8311 	mrs	r3, BASEPRI
 800d148:	60bb      	str	r3, [r7, #8]
  return(result);
 800d14a:	68bb      	ldr	r3, [r7, #8]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d007      	beq.n	800d160 <osMutexRelease+0x50>
 800d150:	4b16      	ldr	r3, [pc, #88]	; (800d1ac <osMutexRelease+0x9c>)
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	2b02      	cmp	r3, #2
 800d156:	d103      	bne.n	800d160 <osMutexRelease+0x50>
    stat = osErrorISR;
 800d158:	f06f 0305 	mvn.w	r3, #5
 800d15c:	61fb      	str	r3, [r7, #28]
 800d15e:	e01f      	b.n	800d1a0 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800d160:	69bb      	ldr	r3, [r7, #24]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d103      	bne.n	800d16e <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800d166:	f06f 0303 	mvn.w	r3, #3
 800d16a:	61fb      	str	r3, [r7, #28]
 800d16c:	e018      	b.n	800d1a0 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800d16e:	697b      	ldr	r3, [r7, #20]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d009      	beq.n	800d188 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800d174:	69b8      	ldr	r0, [r7, #24]
 800d176:	f000 fd99 	bl	800dcac <xQueueGiveMutexRecursive>
 800d17a:	4603      	mov	r3, r0
 800d17c:	2b01      	cmp	r3, #1
 800d17e:	d00f      	beq.n	800d1a0 <osMutexRelease+0x90>
        stat = osErrorResource;
 800d180:	f06f 0302 	mvn.w	r3, #2
 800d184:	61fb      	str	r3, [r7, #28]
 800d186:	e00b      	b.n	800d1a0 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800d188:	2300      	movs	r3, #0
 800d18a:	2200      	movs	r2, #0
 800d18c:	2100      	movs	r1, #0
 800d18e:	69b8      	ldr	r0, [r7, #24]
 800d190:	f000 fe66 	bl	800de60 <xQueueGenericSend>
 800d194:	4603      	mov	r3, r0
 800d196:	2b01      	cmp	r3, #1
 800d198:	d002      	beq.n	800d1a0 <osMutexRelease+0x90>
        stat = osErrorResource;
 800d19a:	f06f 0302 	mvn.w	r3, #2
 800d19e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800d1a0:	69fb      	ldr	r3, [r7, #28]
}
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	3720      	adds	r7, #32
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	bd80      	pop	{r7, pc}
 800d1aa:	bf00      	nop
 800d1ac:	20000254 	.word	0x20000254

0800d1b0 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b08c      	sub	sp, #48	; 0x30
 800d1b4:	af02      	add	r7, sp, #8
 800d1b6:	60f8      	str	r0, [r7, #12]
 800d1b8:	60b9      	str	r1, [r7, #8]
 800d1ba:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800d1bc:	2300      	movs	r3, #0
 800d1be:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d1c0:	f3ef 8305 	mrs	r3, IPSR
 800d1c4:	61bb      	str	r3, [r7, #24]
  return(result);
 800d1c6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	f040 8087 	bne.w	800d2dc <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d1ce:	f3ef 8310 	mrs	r3, PRIMASK
 800d1d2:	617b      	str	r3, [r7, #20]
  return(result);
 800d1d4:	697b      	ldr	r3, [r7, #20]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d105      	bne.n	800d1e6 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d1da:	f3ef 8311 	mrs	r3, BASEPRI
 800d1de:	613b      	str	r3, [r7, #16]
  return(result);
 800d1e0:	693b      	ldr	r3, [r7, #16]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d003      	beq.n	800d1ee <osSemaphoreNew+0x3e>
 800d1e6:	4b40      	ldr	r3, [pc, #256]	; (800d2e8 <osSemaphoreNew+0x138>)
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	2b02      	cmp	r3, #2
 800d1ec:	d076      	beq.n	800d2dc <osSemaphoreNew+0x12c>
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d073      	beq.n	800d2dc <osSemaphoreNew+0x12c>
 800d1f4:	68ba      	ldr	r2, [r7, #8]
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	429a      	cmp	r2, r3
 800d1fa:	d86f      	bhi.n	800d2dc <osSemaphoreNew+0x12c>
    mem = -1;
 800d1fc:	f04f 33ff 	mov.w	r3, #4294967295
 800d200:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d015      	beq.n	800d234 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	689b      	ldr	r3, [r3, #8]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d006      	beq.n	800d21e <osSemaphoreNew+0x6e>
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	68db      	ldr	r3, [r3, #12]
 800d214:	2b4f      	cmp	r3, #79	; 0x4f
 800d216:	d902      	bls.n	800d21e <osSemaphoreNew+0x6e>
        mem = 1;
 800d218:	2301      	movs	r3, #1
 800d21a:	623b      	str	r3, [r7, #32]
 800d21c:	e00c      	b.n	800d238 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	689b      	ldr	r3, [r3, #8]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d108      	bne.n	800d238 <osSemaphoreNew+0x88>
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	68db      	ldr	r3, [r3, #12]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d104      	bne.n	800d238 <osSemaphoreNew+0x88>
          mem = 0;
 800d22e:	2300      	movs	r3, #0
 800d230:	623b      	str	r3, [r7, #32]
 800d232:	e001      	b.n	800d238 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800d234:	2300      	movs	r3, #0
 800d236:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800d238:	6a3b      	ldr	r3, [r7, #32]
 800d23a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d23e:	d04d      	beq.n	800d2dc <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	2b01      	cmp	r3, #1
 800d244:	d129      	bne.n	800d29a <osSemaphoreNew+0xea>
        if (mem == 1) {
 800d246:	6a3b      	ldr	r3, [r7, #32]
 800d248:	2b01      	cmp	r3, #1
 800d24a:	d10b      	bne.n	800d264 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	689a      	ldr	r2, [r3, #8]
 800d250:	2303      	movs	r3, #3
 800d252:	9300      	str	r3, [sp, #0]
 800d254:	4613      	mov	r3, r2
 800d256:	2200      	movs	r2, #0
 800d258:	2100      	movs	r1, #0
 800d25a:	2001      	movs	r0, #1
 800d25c:	f000 fbf8 	bl	800da50 <xQueueGenericCreateStatic>
 800d260:	6278      	str	r0, [r7, #36]	; 0x24
 800d262:	e005      	b.n	800d270 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800d264:	2203      	movs	r2, #3
 800d266:	2100      	movs	r1, #0
 800d268:	2001      	movs	r0, #1
 800d26a:	f000 fc6e 	bl	800db4a <xQueueGenericCreate>
 800d26e:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800d270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d272:	2b00      	cmp	r3, #0
 800d274:	d022      	beq.n	800d2bc <osSemaphoreNew+0x10c>
 800d276:	68bb      	ldr	r3, [r7, #8]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d01f      	beq.n	800d2bc <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800d27c:	2300      	movs	r3, #0
 800d27e:	2200      	movs	r2, #0
 800d280:	2100      	movs	r1, #0
 800d282:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d284:	f000 fdec 	bl	800de60 <xQueueGenericSend>
 800d288:	4603      	mov	r3, r0
 800d28a:	2b01      	cmp	r3, #1
 800d28c:	d016      	beq.n	800d2bc <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 800d28e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d290:	f001 fa8b 	bl	800e7aa <vQueueDelete>
            hSemaphore = NULL;
 800d294:	2300      	movs	r3, #0
 800d296:	627b      	str	r3, [r7, #36]	; 0x24
 800d298:	e010      	b.n	800d2bc <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 800d29a:	6a3b      	ldr	r3, [r7, #32]
 800d29c:	2b01      	cmp	r3, #1
 800d29e:	d108      	bne.n	800d2b2 <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	689b      	ldr	r3, [r3, #8]
 800d2a4:	461a      	mov	r2, r3
 800d2a6:	68b9      	ldr	r1, [r7, #8]
 800d2a8:	68f8      	ldr	r0, [r7, #12]
 800d2aa:	f000 fd6b 	bl	800dd84 <xQueueCreateCountingSemaphoreStatic>
 800d2ae:	6278      	str	r0, [r7, #36]	; 0x24
 800d2b0:	e004      	b.n	800d2bc <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800d2b2:	68b9      	ldr	r1, [r7, #8]
 800d2b4:	68f8      	ldr	r0, [r7, #12]
 800d2b6:	f000 fd9e 	bl	800ddf6 <xQueueCreateCountingSemaphore>
 800d2ba:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800d2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d00c      	beq.n	800d2dc <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d003      	beq.n	800d2d0 <osSemaphoreNew+0x120>
          name = attr->name;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	61fb      	str	r3, [r7, #28]
 800d2ce:	e001      	b.n	800d2d4 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800d2d4:	69f9      	ldr	r1, [r7, #28]
 800d2d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d2d8:	f001 fbb4 	bl	800ea44 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800d2dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d2de:	4618      	mov	r0, r3
 800d2e0:	3728      	adds	r7, #40	; 0x28
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	bd80      	pop	{r7, pc}
 800d2e6:	bf00      	nop
 800d2e8:	20000254 	.word	0x20000254

0800d2ec <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b088      	sub	sp, #32
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]
 800d2f4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800d2fe:	69bb      	ldr	r3, [r7, #24]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d103      	bne.n	800d30c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800d304:	f06f 0303 	mvn.w	r3, #3
 800d308:	61fb      	str	r3, [r7, #28]
 800d30a:	e04b      	b.n	800d3a4 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d30c:	f3ef 8305 	mrs	r3, IPSR
 800d310:	617b      	str	r3, [r7, #20]
  return(result);
 800d312:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800d314:	2b00      	cmp	r3, #0
 800d316:	d10f      	bne.n	800d338 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d318:	f3ef 8310 	mrs	r3, PRIMASK
 800d31c:	613b      	str	r3, [r7, #16]
  return(result);
 800d31e:	693b      	ldr	r3, [r7, #16]
 800d320:	2b00      	cmp	r3, #0
 800d322:	d105      	bne.n	800d330 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d324:	f3ef 8311 	mrs	r3, BASEPRI
 800d328:	60fb      	str	r3, [r7, #12]
  return(result);
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d026      	beq.n	800d37e <osSemaphoreAcquire+0x92>
 800d330:	4b1f      	ldr	r3, [pc, #124]	; (800d3b0 <osSemaphoreAcquire+0xc4>)
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	2b02      	cmp	r3, #2
 800d336:	d122      	bne.n	800d37e <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800d338:	683b      	ldr	r3, [r7, #0]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d003      	beq.n	800d346 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800d33e:	f06f 0303 	mvn.w	r3, #3
 800d342:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800d344:	e02d      	b.n	800d3a2 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800d346:	2300      	movs	r3, #0
 800d348:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800d34a:	f107 0308 	add.w	r3, r7, #8
 800d34e:	461a      	mov	r2, r3
 800d350:	2100      	movs	r1, #0
 800d352:	69b8      	ldr	r0, [r7, #24]
 800d354:	f001 f9a6 	bl	800e6a4 <xQueueReceiveFromISR>
 800d358:	4603      	mov	r3, r0
 800d35a:	2b01      	cmp	r3, #1
 800d35c:	d003      	beq.n	800d366 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800d35e:	f06f 0302 	mvn.w	r3, #2
 800d362:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800d364:	e01d      	b.n	800d3a2 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800d366:	68bb      	ldr	r3, [r7, #8]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d01a      	beq.n	800d3a2 <osSemaphoreAcquire+0xb6>
 800d36c:	4b11      	ldr	r3, [pc, #68]	; (800d3b4 <osSemaphoreAcquire+0xc8>)
 800d36e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d372:	601a      	str	r2, [r3, #0]
 800d374:	f3bf 8f4f 	dsb	sy
 800d378:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800d37c:	e011      	b.n	800d3a2 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800d37e:	6839      	ldr	r1, [r7, #0]
 800d380:	69b8      	ldr	r0, [r7, #24]
 800d382:	f001 f87f 	bl	800e484 <xQueueSemaphoreTake>
 800d386:	4603      	mov	r3, r0
 800d388:	2b01      	cmp	r3, #1
 800d38a:	d00b      	beq.n	800d3a4 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800d38c:	683b      	ldr	r3, [r7, #0]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d003      	beq.n	800d39a <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800d392:	f06f 0301 	mvn.w	r3, #1
 800d396:	61fb      	str	r3, [r7, #28]
 800d398:	e004      	b.n	800d3a4 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800d39a:	f06f 0302 	mvn.w	r3, #2
 800d39e:	61fb      	str	r3, [r7, #28]
 800d3a0:	e000      	b.n	800d3a4 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800d3a2:	bf00      	nop
      }
    }
  }

  return (stat);
 800d3a4:	69fb      	ldr	r3, [r7, #28]
}
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	3720      	adds	r7, #32
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	bd80      	pop	{r7, pc}
 800d3ae:	bf00      	nop
 800d3b0:	20000254 	.word	0x20000254
 800d3b4:	e000ed04 	.word	0xe000ed04

0800d3b8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b088      	sub	sp, #32
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800d3c8:	69bb      	ldr	r3, [r7, #24]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d103      	bne.n	800d3d6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800d3ce:	f06f 0303 	mvn.w	r3, #3
 800d3d2:	61fb      	str	r3, [r7, #28]
 800d3d4:	e03e      	b.n	800d454 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d3d6:	f3ef 8305 	mrs	r3, IPSR
 800d3da:	617b      	str	r3, [r7, #20]
  return(result);
 800d3dc:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d10f      	bne.n	800d402 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d3e2:	f3ef 8310 	mrs	r3, PRIMASK
 800d3e6:	613b      	str	r3, [r7, #16]
  return(result);
 800d3e8:	693b      	ldr	r3, [r7, #16]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d105      	bne.n	800d3fa <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d3ee:	f3ef 8311 	mrs	r3, BASEPRI
 800d3f2:	60fb      	str	r3, [r7, #12]
  return(result);
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d01e      	beq.n	800d438 <osSemaphoreRelease+0x80>
 800d3fa:	4b19      	ldr	r3, [pc, #100]	; (800d460 <osSemaphoreRelease+0xa8>)
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	2b02      	cmp	r3, #2
 800d400:	d11a      	bne.n	800d438 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800d402:	2300      	movs	r3, #0
 800d404:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d406:	f107 0308 	add.w	r3, r7, #8
 800d40a:	4619      	mov	r1, r3
 800d40c:	69b8      	ldr	r0, [r7, #24]
 800d40e:	f000 fec5 	bl	800e19c <xQueueGiveFromISR>
 800d412:	4603      	mov	r3, r0
 800d414:	2b01      	cmp	r3, #1
 800d416:	d003      	beq.n	800d420 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800d418:	f06f 0302 	mvn.w	r3, #2
 800d41c:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d41e:	e018      	b.n	800d452 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800d420:	68bb      	ldr	r3, [r7, #8]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d015      	beq.n	800d452 <osSemaphoreRelease+0x9a>
 800d426:	4b0f      	ldr	r3, [pc, #60]	; (800d464 <osSemaphoreRelease+0xac>)
 800d428:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d42c:	601a      	str	r2, [r3, #0]
 800d42e:	f3bf 8f4f 	dsb	sy
 800d432:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d436:	e00c      	b.n	800d452 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800d438:	2300      	movs	r3, #0
 800d43a:	2200      	movs	r2, #0
 800d43c:	2100      	movs	r1, #0
 800d43e:	69b8      	ldr	r0, [r7, #24]
 800d440:	f000 fd0e 	bl	800de60 <xQueueGenericSend>
 800d444:	4603      	mov	r3, r0
 800d446:	2b01      	cmp	r3, #1
 800d448:	d004      	beq.n	800d454 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800d44a:	f06f 0302 	mvn.w	r3, #2
 800d44e:	61fb      	str	r3, [r7, #28]
 800d450:	e000      	b.n	800d454 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d452:	bf00      	nop
    }
  }

  return (stat);
 800d454:	69fb      	ldr	r3, [r7, #28]
}
 800d456:	4618      	mov	r0, r3
 800d458:	3720      	adds	r7, #32
 800d45a:	46bd      	mov	sp, r7
 800d45c:	bd80      	pop	{r7, pc}
 800d45e:	bf00      	nop
 800d460:	20000254 	.word	0x20000254
 800d464:	e000ed04 	.word	0xe000ed04

0800d468 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800d468:	b580      	push	{r7, lr}
 800d46a:	b088      	sub	sp, #32
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d474:	f3ef 8305 	mrs	r3, IPSR
 800d478:	617b      	str	r3, [r7, #20]
  return(result);
 800d47a:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d10f      	bne.n	800d4a0 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d480:	f3ef 8310 	mrs	r3, PRIMASK
 800d484:	613b      	str	r3, [r7, #16]
  return(result);
 800d486:	693b      	ldr	r3, [r7, #16]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d105      	bne.n	800d498 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d48c:	f3ef 8311 	mrs	r3, BASEPRI
 800d490:	60fb      	str	r3, [r7, #12]
  return(result);
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d007      	beq.n	800d4a8 <osSemaphoreDelete+0x40>
 800d498:	4b0d      	ldr	r3, [pc, #52]	; (800d4d0 <osSemaphoreDelete+0x68>)
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	2b02      	cmp	r3, #2
 800d49e:	d103      	bne.n	800d4a8 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 800d4a0:	f06f 0305 	mvn.w	r3, #5
 800d4a4:	61fb      	str	r3, [r7, #28]
 800d4a6:	e00e      	b.n	800d4c6 <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 800d4a8:	69bb      	ldr	r3, [r7, #24]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d103      	bne.n	800d4b6 <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 800d4ae:	f06f 0303 	mvn.w	r3, #3
 800d4b2:	61fb      	str	r3, [r7, #28]
 800d4b4:	e007      	b.n	800d4c6 <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800d4b6:	69b8      	ldr	r0, [r7, #24]
 800d4b8:	f001 faec 	bl	800ea94 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800d4bc:	2300      	movs	r3, #0
 800d4be:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 800d4c0:	69b8      	ldr	r0, [r7, #24]
 800d4c2:	f001 f972 	bl	800e7aa <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800d4c6:	69fb      	ldr	r3, [r7, #28]
}
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	3720      	adds	r7, #32
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	bd80      	pop	{r7, pc}
 800d4d0:	20000254 	.word	0x20000254

0800d4d4 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b08c      	sub	sp, #48	; 0x30
 800d4d8:	af02      	add	r7, sp, #8
 800d4da:	60f8      	str	r0, [r7, #12]
 800d4dc:	60b9      	str	r1, [r7, #8]
 800d4de:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d4e4:	f3ef 8305 	mrs	r3, IPSR
 800d4e8:	61bb      	str	r3, [r7, #24]
  return(result);
 800d4ea:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d170      	bne.n	800d5d2 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d4f0:	f3ef 8310 	mrs	r3, PRIMASK
 800d4f4:	617b      	str	r3, [r7, #20]
  return(result);
 800d4f6:	697b      	ldr	r3, [r7, #20]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d105      	bne.n	800d508 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d4fc:	f3ef 8311 	mrs	r3, BASEPRI
 800d500:	613b      	str	r3, [r7, #16]
  return(result);
 800d502:	693b      	ldr	r3, [r7, #16]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d003      	beq.n	800d510 <osMessageQueueNew+0x3c>
 800d508:	4b34      	ldr	r3, [pc, #208]	; (800d5dc <osMessageQueueNew+0x108>)
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	2b02      	cmp	r3, #2
 800d50e:	d060      	beq.n	800d5d2 <osMessageQueueNew+0xfe>
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	2b00      	cmp	r3, #0
 800d514:	d05d      	beq.n	800d5d2 <osMessageQueueNew+0xfe>
 800d516:	68bb      	ldr	r3, [r7, #8]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d05a      	beq.n	800d5d2 <osMessageQueueNew+0xfe>
    mem = -1;
 800d51c:	f04f 33ff 	mov.w	r3, #4294967295
 800d520:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	2b00      	cmp	r3, #0
 800d526:	d029      	beq.n	800d57c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	689b      	ldr	r3, [r3, #8]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d012      	beq.n	800d556 <osMessageQueueNew+0x82>
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	68db      	ldr	r3, [r3, #12]
 800d534:	2b4f      	cmp	r3, #79	; 0x4f
 800d536:	d90e      	bls.n	800d556 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d00a      	beq.n	800d556 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	695a      	ldr	r2, [r3, #20]
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	68b9      	ldr	r1, [r7, #8]
 800d548:	fb01 f303 	mul.w	r3, r1, r3
 800d54c:	429a      	cmp	r2, r3
 800d54e:	d302      	bcc.n	800d556 <osMessageQueueNew+0x82>
        mem = 1;
 800d550:	2301      	movs	r3, #1
 800d552:	623b      	str	r3, [r7, #32]
 800d554:	e014      	b.n	800d580 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	689b      	ldr	r3, [r3, #8]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d110      	bne.n	800d580 <osMessageQueueNew+0xac>
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	68db      	ldr	r3, [r3, #12]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d10c      	bne.n	800d580 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d108      	bne.n	800d580 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	695b      	ldr	r3, [r3, #20]
 800d572:	2b00      	cmp	r3, #0
 800d574:	d104      	bne.n	800d580 <osMessageQueueNew+0xac>
          mem = 0;
 800d576:	2300      	movs	r3, #0
 800d578:	623b      	str	r3, [r7, #32]
 800d57a:	e001      	b.n	800d580 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800d57c:	2300      	movs	r3, #0
 800d57e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800d580:	6a3b      	ldr	r3, [r7, #32]
 800d582:	2b01      	cmp	r3, #1
 800d584:	d10c      	bne.n	800d5a0 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	691a      	ldr	r2, [r3, #16]
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	6899      	ldr	r1, [r3, #8]
 800d58e:	2300      	movs	r3, #0
 800d590:	9300      	str	r3, [sp, #0]
 800d592:	460b      	mov	r3, r1
 800d594:	68b9      	ldr	r1, [r7, #8]
 800d596:	68f8      	ldr	r0, [r7, #12]
 800d598:	f000 fa5a 	bl	800da50 <xQueueGenericCreateStatic>
 800d59c:	6278      	str	r0, [r7, #36]	; 0x24
 800d59e:	e008      	b.n	800d5b2 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 800d5a0:	6a3b      	ldr	r3, [r7, #32]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d105      	bne.n	800d5b2 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	68b9      	ldr	r1, [r7, #8]
 800d5aa:	68f8      	ldr	r0, [r7, #12]
 800d5ac:	f000 facd 	bl	800db4a <xQueueGenericCreate>
 800d5b0:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800d5b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d00c      	beq.n	800d5d2 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d003      	beq.n	800d5c6 <osMessageQueueNew+0xf2>
        name = attr->name;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	61fb      	str	r3, [r7, #28]
 800d5c4:	e001      	b.n	800d5ca <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800d5ca:	69f9      	ldr	r1, [r7, #28]
 800d5cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d5ce:	f001 fa39 	bl	800ea44 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800d5d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	3728      	adds	r7, #40	; 0x28
 800d5d8:	46bd      	mov	sp, r7
 800d5da:	bd80      	pop	{r7, pc}
 800d5dc:	20000254 	.word	0x20000254

0800d5e0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b08a      	sub	sp, #40	; 0x28
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	60f8      	str	r0, [r7, #12]
 800d5e8:	60b9      	str	r1, [r7, #8]
 800d5ea:	603b      	str	r3, [r7, #0]
 800d5ec:	4613      	mov	r3, r2
 800d5ee:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d5f8:	f3ef 8305 	mrs	r3, IPSR
 800d5fc:	61fb      	str	r3, [r7, #28]
  return(result);
 800d5fe:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800d600:	2b00      	cmp	r3, #0
 800d602:	d10f      	bne.n	800d624 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d604:	f3ef 8310 	mrs	r3, PRIMASK
 800d608:	61bb      	str	r3, [r7, #24]
  return(result);
 800d60a:	69bb      	ldr	r3, [r7, #24]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d105      	bne.n	800d61c <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d610:	f3ef 8311 	mrs	r3, BASEPRI
 800d614:	617b      	str	r3, [r7, #20]
  return(result);
 800d616:	697b      	ldr	r3, [r7, #20]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d02c      	beq.n	800d676 <osMessageQueuePut+0x96>
 800d61c:	4b28      	ldr	r3, [pc, #160]	; (800d6c0 <osMessageQueuePut+0xe0>)
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	2b02      	cmp	r3, #2
 800d622:	d128      	bne.n	800d676 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d624:	6a3b      	ldr	r3, [r7, #32]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d005      	beq.n	800d636 <osMessageQueuePut+0x56>
 800d62a:	68bb      	ldr	r3, [r7, #8]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d002      	beq.n	800d636 <osMessageQueuePut+0x56>
 800d630:	683b      	ldr	r3, [r7, #0]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d003      	beq.n	800d63e <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800d636:	f06f 0303 	mvn.w	r3, #3
 800d63a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d63c:	e039      	b.n	800d6b2 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800d63e:	2300      	movs	r3, #0
 800d640:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800d642:	f107 0210 	add.w	r2, r7, #16
 800d646:	2300      	movs	r3, #0
 800d648:	68b9      	ldr	r1, [r7, #8]
 800d64a:	6a38      	ldr	r0, [r7, #32]
 800d64c:	f000 fd0a 	bl	800e064 <xQueueGenericSendFromISR>
 800d650:	4603      	mov	r3, r0
 800d652:	2b01      	cmp	r3, #1
 800d654:	d003      	beq.n	800d65e <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800d656:	f06f 0302 	mvn.w	r3, #2
 800d65a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d65c:	e029      	b.n	800d6b2 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800d65e:	693b      	ldr	r3, [r7, #16]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d026      	beq.n	800d6b2 <osMessageQueuePut+0xd2>
 800d664:	4b17      	ldr	r3, [pc, #92]	; (800d6c4 <osMessageQueuePut+0xe4>)
 800d666:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d66a:	601a      	str	r2, [r3, #0]
 800d66c:	f3bf 8f4f 	dsb	sy
 800d670:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d674:	e01d      	b.n	800d6b2 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d676:	6a3b      	ldr	r3, [r7, #32]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d002      	beq.n	800d682 <osMessageQueuePut+0xa2>
 800d67c:	68bb      	ldr	r3, [r7, #8]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d103      	bne.n	800d68a <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800d682:	f06f 0303 	mvn.w	r3, #3
 800d686:	627b      	str	r3, [r7, #36]	; 0x24
 800d688:	e014      	b.n	800d6b4 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d68a:	2300      	movs	r3, #0
 800d68c:	683a      	ldr	r2, [r7, #0]
 800d68e:	68b9      	ldr	r1, [r7, #8]
 800d690:	6a38      	ldr	r0, [r7, #32]
 800d692:	f000 fbe5 	bl	800de60 <xQueueGenericSend>
 800d696:	4603      	mov	r3, r0
 800d698:	2b01      	cmp	r3, #1
 800d69a:	d00b      	beq.n	800d6b4 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800d69c:	683b      	ldr	r3, [r7, #0]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d003      	beq.n	800d6aa <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800d6a2:	f06f 0301 	mvn.w	r3, #1
 800d6a6:	627b      	str	r3, [r7, #36]	; 0x24
 800d6a8:	e004      	b.n	800d6b4 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800d6aa:	f06f 0302 	mvn.w	r3, #2
 800d6ae:	627b      	str	r3, [r7, #36]	; 0x24
 800d6b0:	e000      	b.n	800d6b4 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d6b2:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800d6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	3728      	adds	r7, #40	; 0x28
 800d6ba:	46bd      	mov	sp, r7
 800d6bc:	bd80      	pop	{r7, pc}
 800d6be:	bf00      	nop
 800d6c0:	20000254 	.word	0x20000254
 800d6c4:	e000ed04 	.word	0xe000ed04

0800d6c8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	b08a      	sub	sp, #40	; 0x28
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	60f8      	str	r0, [r7, #12]
 800d6d0:	60b9      	str	r1, [r7, #8]
 800d6d2:	607a      	str	r2, [r7, #4]
 800d6d4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d6da:	2300      	movs	r3, #0
 800d6dc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d6de:	f3ef 8305 	mrs	r3, IPSR
 800d6e2:	61fb      	str	r3, [r7, #28]
  return(result);
 800d6e4:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d10f      	bne.n	800d70a <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d6ea:	f3ef 8310 	mrs	r3, PRIMASK
 800d6ee:	61bb      	str	r3, [r7, #24]
  return(result);
 800d6f0:	69bb      	ldr	r3, [r7, #24]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d105      	bne.n	800d702 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d6f6:	f3ef 8311 	mrs	r3, BASEPRI
 800d6fa:	617b      	str	r3, [r7, #20]
  return(result);
 800d6fc:	697b      	ldr	r3, [r7, #20]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d02c      	beq.n	800d75c <osMessageQueueGet+0x94>
 800d702:	4b28      	ldr	r3, [pc, #160]	; (800d7a4 <osMessageQueueGet+0xdc>)
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	2b02      	cmp	r3, #2
 800d708:	d128      	bne.n	800d75c <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d70a:	6a3b      	ldr	r3, [r7, #32]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d005      	beq.n	800d71c <osMessageQueueGet+0x54>
 800d710:	68bb      	ldr	r3, [r7, #8]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d002      	beq.n	800d71c <osMessageQueueGet+0x54>
 800d716:	683b      	ldr	r3, [r7, #0]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d003      	beq.n	800d724 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800d71c:	f06f 0303 	mvn.w	r3, #3
 800d720:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d722:	e038      	b.n	800d796 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800d724:	2300      	movs	r3, #0
 800d726:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800d728:	f107 0310 	add.w	r3, r7, #16
 800d72c:	461a      	mov	r2, r3
 800d72e:	68b9      	ldr	r1, [r7, #8]
 800d730:	6a38      	ldr	r0, [r7, #32]
 800d732:	f000 ffb7 	bl	800e6a4 <xQueueReceiveFromISR>
 800d736:	4603      	mov	r3, r0
 800d738:	2b01      	cmp	r3, #1
 800d73a:	d003      	beq.n	800d744 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800d73c:	f06f 0302 	mvn.w	r3, #2
 800d740:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d742:	e028      	b.n	800d796 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800d744:	693b      	ldr	r3, [r7, #16]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d025      	beq.n	800d796 <osMessageQueueGet+0xce>
 800d74a:	4b17      	ldr	r3, [pc, #92]	; (800d7a8 <osMessageQueueGet+0xe0>)
 800d74c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d750:	601a      	str	r2, [r3, #0]
 800d752:	f3bf 8f4f 	dsb	sy
 800d756:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d75a:	e01c      	b.n	800d796 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d75c:	6a3b      	ldr	r3, [r7, #32]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d002      	beq.n	800d768 <osMessageQueueGet+0xa0>
 800d762:	68bb      	ldr	r3, [r7, #8]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d103      	bne.n	800d770 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800d768:	f06f 0303 	mvn.w	r3, #3
 800d76c:	627b      	str	r3, [r7, #36]	; 0x24
 800d76e:	e013      	b.n	800d798 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d770:	683a      	ldr	r2, [r7, #0]
 800d772:	68b9      	ldr	r1, [r7, #8]
 800d774:	6a38      	ldr	r0, [r7, #32]
 800d776:	f000 fda3 	bl	800e2c0 <xQueueReceive>
 800d77a:	4603      	mov	r3, r0
 800d77c:	2b01      	cmp	r3, #1
 800d77e:	d00b      	beq.n	800d798 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800d780:	683b      	ldr	r3, [r7, #0]
 800d782:	2b00      	cmp	r3, #0
 800d784:	d003      	beq.n	800d78e <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800d786:	f06f 0301 	mvn.w	r3, #1
 800d78a:	627b      	str	r3, [r7, #36]	; 0x24
 800d78c:	e004      	b.n	800d798 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800d78e:	f06f 0302 	mvn.w	r3, #2
 800d792:	627b      	str	r3, [r7, #36]	; 0x24
 800d794:	e000      	b.n	800d798 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d796:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800d798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d79a:	4618      	mov	r0, r3
 800d79c:	3728      	adds	r7, #40	; 0x28
 800d79e:	46bd      	mov	sp, r7
 800d7a0:	bd80      	pop	{r7, pc}
 800d7a2:	bf00      	nop
 800d7a4:	20000254 	.word	0x20000254
 800d7a8:	e000ed04 	.word	0xe000ed04

0800d7ac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d7ac:	b480      	push	{r7}
 800d7ae:	b085      	sub	sp, #20
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	60f8      	str	r0, [r7, #12]
 800d7b4:	60b9      	str	r1, [r7, #8]
 800d7b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	4a07      	ldr	r2, [pc, #28]	; (800d7d8 <vApplicationGetIdleTaskMemory+0x2c>)
 800d7bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d7be:	68bb      	ldr	r3, [r7, #8]
 800d7c0:	4a06      	ldr	r2, [pc, #24]	; (800d7dc <vApplicationGetIdleTaskMemory+0x30>)
 800d7c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	2280      	movs	r2, #128	; 0x80
 800d7c8:	601a      	str	r2, [r3, #0]
}
 800d7ca:	bf00      	nop
 800d7cc:	3714      	adds	r7, #20
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d4:	4770      	bx	lr
 800d7d6:	bf00      	nop
 800d7d8:	20000258 	.word	0x20000258
 800d7dc:	200002b4 	.word	0x200002b4

0800d7e0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d7e0:	b480      	push	{r7}
 800d7e2:	b085      	sub	sp, #20
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	60f8      	str	r0, [r7, #12]
 800d7e8:	60b9      	str	r1, [r7, #8]
 800d7ea:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	4a07      	ldr	r2, [pc, #28]	; (800d80c <vApplicationGetTimerTaskMemory+0x2c>)
 800d7f0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d7f2:	68bb      	ldr	r3, [r7, #8]
 800d7f4:	4a06      	ldr	r2, [pc, #24]	; (800d810 <vApplicationGetTimerTaskMemory+0x30>)
 800d7f6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d7fe:	601a      	str	r2, [r3, #0]
}
 800d800:	bf00      	nop
 800d802:	3714      	adds	r7, #20
 800d804:	46bd      	mov	sp, r7
 800d806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80a:	4770      	bx	lr
 800d80c:	200004b4 	.word	0x200004b4
 800d810:	20000510 	.word	0x20000510

0800d814 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d814:	b480      	push	{r7}
 800d816:	b083      	sub	sp, #12
 800d818:	af00      	add	r7, sp, #0
 800d81a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	f103 0208 	add.w	r2, r3, #8
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	f04f 32ff 	mov.w	r2, #4294967295
 800d82c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	f103 0208 	add.w	r2, r3, #8
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	f103 0208 	add.w	r2, r3, #8
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	2200      	movs	r2, #0
 800d846:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d848:	bf00      	nop
 800d84a:	370c      	adds	r7, #12
 800d84c:	46bd      	mov	sp, r7
 800d84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d852:	4770      	bx	lr

0800d854 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d854:	b480      	push	{r7}
 800d856:	b083      	sub	sp, #12
 800d858:	af00      	add	r7, sp, #0
 800d85a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	2200      	movs	r2, #0
 800d860:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d862:	bf00      	nop
 800d864:	370c      	adds	r7, #12
 800d866:	46bd      	mov	sp, r7
 800d868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86c:	4770      	bx	lr

0800d86e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d86e:	b480      	push	{r7}
 800d870:	b085      	sub	sp, #20
 800d872:	af00      	add	r7, sp, #0
 800d874:	6078      	str	r0, [r7, #4]
 800d876:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	685b      	ldr	r3, [r3, #4]
 800d87c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d87e:	683b      	ldr	r3, [r7, #0]
 800d880:	68fa      	ldr	r2, [r7, #12]
 800d882:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	689a      	ldr	r2, [r3, #8]
 800d888:	683b      	ldr	r3, [r7, #0]
 800d88a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	689b      	ldr	r3, [r3, #8]
 800d890:	683a      	ldr	r2, [r7, #0]
 800d892:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	683a      	ldr	r2, [r7, #0]
 800d898:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d89a:	683b      	ldr	r3, [r7, #0]
 800d89c:	687a      	ldr	r2, [r7, #4]
 800d89e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	1c5a      	adds	r2, r3, #1
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	601a      	str	r2, [r3, #0]
}
 800d8aa:	bf00      	nop
 800d8ac:	3714      	adds	r7, #20
 800d8ae:	46bd      	mov	sp, r7
 800d8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b4:	4770      	bx	lr

0800d8b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d8b6:	b480      	push	{r7}
 800d8b8:	b085      	sub	sp, #20
 800d8ba:	af00      	add	r7, sp, #0
 800d8bc:	6078      	str	r0, [r7, #4]
 800d8be:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d8c0:	683b      	ldr	r3, [r7, #0]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d8c6:	68bb      	ldr	r3, [r7, #8]
 800d8c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8cc:	d103      	bne.n	800d8d6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	691b      	ldr	r3, [r3, #16]
 800d8d2:	60fb      	str	r3, [r7, #12]
 800d8d4:	e00c      	b.n	800d8f0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	3308      	adds	r3, #8
 800d8da:	60fb      	str	r3, [r7, #12]
 800d8dc:	e002      	b.n	800d8e4 <vListInsert+0x2e>
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	685b      	ldr	r3, [r3, #4]
 800d8e2:	60fb      	str	r3, [r7, #12]
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	685b      	ldr	r3, [r3, #4]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	68ba      	ldr	r2, [r7, #8]
 800d8ec:	429a      	cmp	r2, r3
 800d8ee:	d2f6      	bcs.n	800d8de <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	685a      	ldr	r2, [r3, #4]
 800d8f4:	683b      	ldr	r3, [r7, #0]
 800d8f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d8f8:	683b      	ldr	r3, [r7, #0]
 800d8fa:	685b      	ldr	r3, [r3, #4]
 800d8fc:	683a      	ldr	r2, [r7, #0]
 800d8fe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d900:	683b      	ldr	r3, [r7, #0]
 800d902:	68fa      	ldr	r2, [r7, #12]
 800d904:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	683a      	ldr	r2, [r7, #0]
 800d90a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d90c:	683b      	ldr	r3, [r7, #0]
 800d90e:	687a      	ldr	r2, [r7, #4]
 800d910:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	1c5a      	adds	r2, r3, #1
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	601a      	str	r2, [r3, #0]
}
 800d91c:	bf00      	nop
 800d91e:	3714      	adds	r7, #20
 800d920:	46bd      	mov	sp, r7
 800d922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d926:	4770      	bx	lr

0800d928 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d928:	b480      	push	{r7}
 800d92a:	b085      	sub	sp, #20
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	691b      	ldr	r3, [r3, #16]
 800d934:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	685b      	ldr	r3, [r3, #4]
 800d93a:	687a      	ldr	r2, [r7, #4]
 800d93c:	6892      	ldr	r2, [r2, #8]
 800d93e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	689b      	ldr	r3, [r3, #8]
 800d944:	687a      	ldr	r2, [r7, #4]
 800d946:	6852      	ldr	r2, [r2, #4]
 800d948:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	685b      	ldr	r3, [r3, #4]
 800d94e:	687a      	ldr	r2, [r7, #4]
 800d950:	429a      	cmp	r2, r3
 800d952:	d103      	bne.n	800d95c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	689a      	ldr	r2, [r3, #8]
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	2200      	movs	r2, #0
 800d960:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	1e5a      	subs	r2, r3, #1
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	681b      	ldr	r3, [r3, #0]
}
 800d970:	4618      	mov	r0, r3
 800d972:	3714      	adds	r7, #20
 800d974:	46bd      	mov	sp, r7
 800d976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97a:	4770      	bx	lr

0800d97c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b084      	sub	sp, #16
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
 800d984:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d10b      	bne.n	800d9a8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d990:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d994:	b672      	cpsid	i
 800d996:	f383 8811 	msr	BASEPRI, r3
 800d99a:	f3bf 8f6f 	isb	sy
 800d99e:	f3bf 8f4f 	dsb	sy
 800d9a2:	b662      	cpsie	i
 800d9a4:	60bb      	str	r3, [r7, #8]
 800d9a6:	e7fe      	b.n	800d9a6 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800d9a8:	f002 fd5e 	bl	8010468 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	681a      	ldr	r2, [r3, #0]
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9b4:	68f9      	ldr	r1, [r7, #12]
 800d9b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d9b8:	fb01 f303 	mul.w	r3, r1, r3
 800d9bc:	441a      	add	r2, r3
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	2200      	movs	r2, #0
 800d9c6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	681a      	ldr	r2, [r3, #0]
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	681a      	ldr	r2, [r3, #0]
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9d8:	3b01      	subs	r3, #1
 800d9da:	68f9      	ldr	r1, [r7, #12]
 800d9dc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d9de:	fb01 f303 	mul.w	r3, r1, r3
 800d9e2:	441a      	add	r2, r3
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	22ff      	movs	r2, #255	; 0xff
 800d9ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	22ff      	movs	r2, #255	; 0xff
 800d9f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d9f8:	683b      	ldr	r3, [r7, #0]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d114      	bne.n	800da28 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	691b      	ldr	r3, [r3, #16]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d01a      	beq.n	800da3c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	3310      	adds	r3, #16
 800da0a:	4618      	mov	r0, r3
 800da0c:	f001 fd1c 	bl	800f448 <xTaskRemoveFromEventList>
 800da10:	4603      	mov	r3, r0
 800da12:	2b00      	cmp	r3, #0
 800da14:	d012      	beq.n	800da3c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800da16:	4b0d      	ldr	r3, [pc, #52]	; (800da4c <xQueueGenericReset+0xd0>)
 800da18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da1c:	601a      	str	r2, [r3, #0]
 800da1e:	f3bf 8f4f 	dsb	sy
 800da22:	f3bf 8f6f 	isb	sy
 800da26:	e009      	b.n	800da3c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	3310      	adds	r3, #16
 800da2c:	4618      	mov	r0, r3
 800da2e:	f7ff fef1 	bl	800d814 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	3324      	adds	r3, #36	; 0x24
 800da36:	4618      	mov	r0, r3
 800da38:	f7ff feec 	bl	800d814 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800da3c:	f002 fd46 	bl	80104cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800da40:	2301      	movs	r3, #1
}
 800da42:	4618      	mov	r0, r3
 800da44:	3710      	adds	r7, #16
 800da46:	46bd      	mov	sp, r7
 800da48:	bd80      	pop	{r7, pc}
 800da4a:	bf00      	nop
 800da4c:	e000ed04 	.word	0xe000ed04

0800da50 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800da50:	b580      	push	{r7, lr}
 800da52:	b08e      	sub	sp, #56	; 0x38
 800da54:	af02      	add	r7, sp, #8
 800da56:	60f8      	str	r0, [r7, #12]
 800da58:	60b9      	str	r1, [r7, #8]
 800da5a:	607a      	str	r2, [r7, #4]
 800da5c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d10b      	bne.n	800da7c <xQueueGenericCreateStatic+0x2c>
 800da64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da68:	b672      	cpsid	i
 800da6a:	f383 8811 	msr	BASEPRI, r3
 800da6e:	f3bf 8f6f 	isb	sy
 800da72:	f3bf 8f4f 	dsb	sy
 800da76:	b662      	cpsie	i
 800da78:	62bb      	str	r3, [r7, #40]	; 0x28
 800da7a:	e7fe      	b.n	800da7a <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800da7c:	683b      	ldr	r3, [r7, #0]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d10b      	bne.n	800da9a <xQueueGenericCreateStatic+0x4a>
 800da82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da86:	b672      	cpsid	i
 800da88:	f383 8811 	msr	BASEPRI, r3
 800da8c:	f3bf 8f6f 	isb	sy
 800da90:	f3bf 8f4f 	dsb	sy
 800da94:	b662      	cpsie	i
 800da96:	627b      	str	r3, [r7, #36]	; 0x24
 800da98:	e7fe      	b.n	800da98 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d002      	beq.n	800daa6 <xQueueGenericCreateStatic+0x56>
 800daa0:	68bb      	ldr	r3, [r7, #8]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d001      	beq.n	800daaa <xQueueGenericCreateStatic+0x5a>
 800daa6:	2301      	movs	r3, #1
 800daa8:	e000      	b.n	800daac <xQueueGenericCreateStatic+0x5c>
 800daaa:	2300      	movs	r3, #0
 800daac:	2b00      	cmp	r3, #0
 800daae:	d10b      	bne.n	800dac8 <xQueueGenericCreateStatic+0x78>
 800dab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dab4:	b672      	cpsid	i
 800dab6:	f383 8811 	msr	BASEPRI, r3
 800daba:	f3bf 8f6f 	isb	sy
 800dabe:	f3bf 8f4f 	dsb	sy
 800dac2:	b662      	cpsie	i
 800dac4:	623b      	str	r3, [r7, #32]
 800dac6:	e7fe      	b.n	800dac6 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d102      	bne.n	800dad4 <xQueueGenericCreateStatic+0x84>
 800dace:	68bb      	ldr	r3, [r7, #8]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d101      	bne.n	800dad8 <xQueueGenericCreateStatic+0x88>
 800dad4:	2301      	movs	r3, #1
 800dad6:	e000      	b.n	800dada <xQueueGenericCreateStatic+0x8a>
 800dad8:	2300      	movs	r3, #0
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d10b      	bne.n	800daf6 <xQueueGenericCreateStatic+0xa6>
 800dade:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dae2:	b672      	cpsid	i
 800dae4:	f383 8811 	msr	BASEPRI, r3
 800dae8:	f3bf 8f6f 	isb	sy
 800daec:	f3bf 8f4f 	dsb	sy
 800daf0:	b662      	cpsie	i
 800daf2:	61fb      	str	r3, [r7, #28]
 800daf4:	e7fe      	b.n	800daf4 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800daf6:	2350      	movs	r3, #80	; 0x50
 800daf8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800dafa:	697b      	ldr	r3, [r7, #20]
 800dafc:	2b50      	cmp	r3, #80	; 0x50
 800dafe:	d00b      	beq.n	800db18 <xQueueGenericCreateStatic+0xc8>
 800db00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db04:	b672      	cpsid	i
 800db06:	f383 8811 	msr	BASEPRI, r3
 800db0a:	f3bf 8f6f 	isb	sy
 800db0e:	f3bf 8f4f 	dsb	sy
 800db12:	b662      	cpsie	i
 800db14:	61bb      	str	r3, [r7, #24]
 800db16:	e7fe      	b.n	800db16 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800db18:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800db1a:	683b      	ldr	r3, [r7, #0]
 800db1c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800db1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db20:	2b00      	cmp	r3, #0
 800db22:	d00d      	beq.n	800db40 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800db24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db26:	2201      	movs	r2, #1
 800db28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800db2c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800db30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db32:	9300      	str	r3, [sp, #0]
 800db34:	4613      	mov	r3, r2
 800db36:	687a      	ldr	r2, [r7, #4]
 800db38:	68b9      	ldr	r1, [r7, #8]
 800db3a:	68f8      	ldr	r0, [r7, #12]
 800db3c:	f000 f846 	bl	800dbcc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800db40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800db42:	4618      	mov	r0, r3
 800db44:	3730      	adds	r7, #48	; 0x30
 800db46:	46bd      	mov	sp, r7
 800db48:	bd80      	pop	{r7, pc}

0800db4a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800db4a:	b580      	push	{r7, lr}
 800db4c:	b08a      	sub	sp, #40	; 0x28
 800db4e:	af02      	add	r7, sp, #8
 800db50:	60f8      	str	r0, [r7, #12]
 800db52:	60b9      	str	r1, [r7, #8]
 800db54:	4613      	mov	r3, r2
 800db56:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d10b      	bne.n	800db76 <xQueueGenericCreate+0x2c>
 800db5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db62:	b672      	cpsid	i
 800db64:	f383 8811 	msr	BASEPRI, r3
 800db68:	f3bf 8f6f 	isb	sy
 800db6c:	f3bf 8f4f 	dsb	sy
 800db70:	b662      	cpsie	i
 800db72:	613b      	str	r3, [r7, #16]
 800db74:	e7fe      	b.n	800db74 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800db76:	68bb      	ldr	r3, [r7, #8]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d102      	bne.n	800db82 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800db7c:	2300      	movs	r3, #0
 800db7e:	61fb      	str	r3, [r7, #28]
 800db80:	e004      	b.n	800db8c <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	68ba      	ldr	r2, [r7, #8]
 800db86:	fb02 f303 	mul.w	r3, r2, r3
 800db8a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800db8c:	69fb      	ldr	r3, [r7, #28]
 800db8e:	3350      	adds	r3, #80	; 0x50
 800db90:	4618      	mov	r0, r3
 800db92:	f002 fd8b 	bl	80106ac <pvPortMalloc>
 800db96:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800db98:	69bb      	ldr	r3, [r7, #24]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d011      	beq.n	800dbc2 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800db9e:	69bb      	ldr	r3, [r7, #24]
 800dba0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dba2:	697b      	ldr	r3, [r7, #20]
 800dba4:	3350      	adds	r3, #80	; 0x50
 800dba6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800dba8:	69bb      	ldr	r3, [r7, #24]
 800dbaa:	2200      	movs	r2, #0
 800dbac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800dbb0:	79fa      	ldrb	r2, [r7, #7]
 800dbb2:	69bb      	ldr	r3, [r7, #24]
 800dbb4:	9300      	str	r3, [sp, #0]
 800dbb6:	4613      	mov	r3, r2
 800dbb8:	697a      	ldr	r2, [r7, #20]
 800dbba:	68b9      	ldr	r1, [r7, #8]
 800dbbc:	68f8      	ldr	r0, [r7, #12]
 800dbbe:	f000 f805 	bl	800dbcc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800dbc2:	69bb      	ldr	r3, [r7, #24]
	}
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	3720      	adds	r7, #32
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	bd80      	pop	{r7, pc}

0800dbcc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b084      	sub	sp, #16
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	60f8      	str	r0, [r7, #12]
 800dbd4:	60b9      	str	r1, [r7, #8]
 800dbd6:	607a      	str	r2, [r7, #4]
 800dbd8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800dbda:	68bb      	ldr	r3, [r7, #8]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d103      	bne.n	800dbe8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800dbe0:	69bb      	ldr	r3, [r7, #24]
 800dbe2:	69ba      	ldr	r2, [r7, #24]
 800dbe4:	601a      	str	r2, [r3, #0]
 800dbe6:	e002      	b.n	800dbee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800dbe8:	69bb      	ldr	r3, [r7, #24]
 800dbea:	687a      	ldr	r2, [r7, #4]
 800dbec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800dbee:	69bb      	ldr	r3, [r7, #24]
 800dbf0:	68fa      	ldr	r2, [r7, #12]
 800dbf2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800dbf4:	69bb      	ldr	r3, [r7, #24]
 800dbf6:	68ba      	ldr	r2, [r7, #8]
 800dbf8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800dbfa:	2101      	movs	r1, #1
 800dbfc:	69b8      	ldr	r0, [r7, #24]
 800dbfe:	f7ff febd 	bl	800d97c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800dc02:	69bb      	ldr	r3, [r7, #24]
 800dc04:	78fa      	ldrb	r2, [r7, #3]
 800dc06:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800dc0a:	bf00      	nop
 800dc0c:	3710      	adds	r7, #16
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	bd80      	pop	{r7, pc}

0800dc12 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800dc12:	b580      	push	{r7, lr}
 800dc14:	b082      	sub	sp, #8
 800dc16:	af00      	add	r7, sp, #0
 800dc18:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d00e      	beq.n	800dc3e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	2200      	movs	r2, #0
 800dc24:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	2200      	movs	r2, #0
 800dc2a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	2200      	movs	r2, #0
 800dc30:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800dc32:	2300      	movs	r3, #0
 800dc34:	2200      	movs	r2, #0
 800dc36:	2100      	movs	r1, #0
 800dc38:	6878      	ldr	r0, [r7, #4]
 800dc3a:	f000 f911 	bl	800de60 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800dc3e:	bf00      	nop
 800dc40:	3708      	adds	r7, #8
 800dc42:	46bd      	mov	sp, r7
 800dc44:	bd80      	pop	{r7, pc}

0800dc46 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800dc46:	b580      	push	{r7, lr}
 800dc48:	b086      	sub	sp, #24
 800dc4a:	af00      	add	r7, sp, #0
 800dc4c:	4603      	mov	r3, r0
 800dc4e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800dc50:	2301      	movs	r3, #1
 800dc52:	617b      	str	r3, [r7, #20]
 800dc54:	2300      	movs	r3, #0
 800dc56:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800dc58:	79fb      	ldrb	r3, [r7, #7]
 800dc5a:	461a      	mov	r2, r3
 800dc5c:	6939      	ldr	r1, [r7, #16]
 800dc5e:	6978      	ldr	r0, [r7, #20]
 800dc60:	f7ff ff73 	bl	800db4a <xQueueGenericCreate>
 800dc64:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800dc66:	68f8      	ldr	r0, [r7, #12]
 800dc68:	f7ff ffd3 	bl	800dc12 <prvInitialiseMutex>

		return xNewQueue;
 800dc6c:	68fb      	ldr	r3, [r7, #12]
	}
 800dc6e:	4618      	mov	r0, r3
 800dc70:	3718      	adds	r7, #24
 800dc72:	46bd      	mov	sp, r7
 800dc74:	bd80      	pop	{r7, pc}

0800dc76 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800dc76:	b580      	push	{r7, lr}
 800dc78:	b088      	sub	sp, #32
 800dc7a:	af02      	add	r7, sp, #8
 800dc7c:	4603      	mov	r3, r0
 800dc7e:	6039      	str	r1, [r7, #0]
 800dc80:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800dc82:	2301      	movs	r3, #1
 800dc84:	617b      	str	r3, [r7, #20]
 800dc86:	2300      	movs	r3, #0
 800dc88:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800dc8a:	79fb      	ldrb	r3, [r7, #7]
 800dc8c:	9300      	str	r3, [sp, #0]
 800dc8e:	683b      	ldr	r3, [r7, #0]
 800dc90:	2200      	movs	r2, #0
 800dc92:	6939      	ldr	r1, [r7, #16]
 800dc94:	6978      	ldr	r0, [r7, #20]
 800dc96:	f7ff fedb 	bl	800da50 <xQueueGenericCreateStatic>
 800dc9a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800dc9c:	68f8      	ldr	r0, [r7, #12]
 800dc9e:	f7ff ffb8 	bl	800dc12 <prvInitialiseMutex>

		return xNewQueue;
 800dca2:	68fb      	ldr	r3, [r7, #12]
	}
 800dca4:	4618      	mov	r0, r3
 800dca6:	3718      	adds	r7, #24
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	bd80      	pop	{r7, pc}

0800dcac <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800dcac:	b590      	push	{r4, r7, lr}
 800dcae:	b087      	sub	sp, #28
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800dcb8:	693b      	ldr	r3, [r7, #16]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d10b      	bne.n	800dcd6 <xQueueGiveMutexRecursive+0x2a>
 800dcbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcc2:	b672      	cpsid	i
 800dcc4:	f383 8811 	msr	BASEPRI, r3
 800dcc8:	f3bf 8f6f 	isb	sy
 800dccc:	f3bf 8f4f 	dsb	sy
 800dcd0:	b662      	cpsie	i
 800dcd2:	60fb      	str	r3, [r7, #12]
 800dcd4:	e7fe      	b.n	800dcd4 <xQueueGiveMutexRecursive+0x28>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800dcd6:	693b      	ldr	r3, [r7, #16]
 800dcd8:	689c      	ldr	r4, [r3, #8]
 800dcda:	f001 fd73 	bl	800f7c4 <xTaskGetCurrentTaskHandle>
 800dcde:	4603      	mov	r3, r0
 800dce0:	429c      	cmp	r4, r3
 800dce2:	d111      	bne.n	800dd08 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800dce4:	693b      	ldr	r3, [r7, #16]
 800dce6:	68db      	ldr	r3, [r3, #12]
 800dce8:	1e5a      	subs	r2, r3, #1
 800dcea:	693b      	ldr	r3, [r7, #16]
 800dcec:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800dcee:	693b      	ldr	r3, [r7, #16]
 800dcf0:	68db      	ldr	r3, [r3, #12]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d105      	bne.n	800dd02 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	2200      	movs	r2, #0
 800dcfa:	2100      	movs	r1, #0
 800dcfc:	6938      	ldr	r0, [r7, #16]
 800dcfe:	f000 f8af 	bl	800de60 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800dd02:	2301      	movs	r3, #1
 800dd04:	617b      	str	r3, [r7, #20]
 800dd06:	e001      	b.n	800dd0c <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800dd08:	2300      	movs	r3, #0
 800dd0a:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800dd0c:	697b      	ldr	r3, [r7, #20]
	}
 800dd0e:	4618      	mov	r0, r3
 800dd10:	371c      	adds	r7, #28
 800dd12:	46bd      	mov	sp, r7
 800dd14:	bd90      	pop	{r4, r7, pc}

0800dd16 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800dd16:	b590      	push	{r4, r7, lr}
 800dd18:	b087      	sub	sp, #28
 800dd1a:	af00      	add	r7, sp, #0
 800dd1c:	6078      	str	r0, [r7, #4]
 800dd1e:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800dd24:	693b      	ldr	r3, [r7, #16]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d10b      	bne.n	800dd42 <xQueueTakeMutexRecursive+0x2c>
 800dd2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd2e:	b672      	cpsid	i
 800dd30:	f383 8811 	msr	BASEPRI, r3
 800dd34:	f3bf 8f6f 	isb	sy
 800dd38:	f3bf 8f4f 	dsb	sy
 800dd3c:	b662      	cpsie	i
 800dd3e:	60fb      	str	r3, [r7, #12]
 800dd40:	e7fe      	b.n	800dd40 <xQueueTakeMutexRecursive+0x2a>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800dd42:	693b      	ldr	r3, [r7, #16]
 800dd44:	689c      	ldr	r4, [r3, #8]
 800dd46:	f001 fd3d 	bl	800f7c4 <xTaskGetCurrentTaskHandle>
 800dd4a:	4603      	mov	r3, r0
 800dd4c:	429c      	cmp	r4, r3
 800dd4e:	d107      	bne.n	800dd60 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800dd50:	693b      	ldr	r3, [r7, #16]
 800dd52:	68db      	ldr	r3, [r3, #12]
 800dd54:	1c5a      	adds	r2, r3, #1
 800dd56:	693b      	ldr	r3, [r7, #16]
 800dd58:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800dd5a:	2301      	movs	r3, #1
 800dd5c:	617b      	str	r3, [r7, #20]
 800dd5e:	e00c      	b.n	800dd7a <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800dd60:	6839      	ldr	r1, [r7, #0]
 800dd62:	6938      	ldr	r0, [r7, #16]
 800dd64:	f000 fb8e 	bl	800e484 <xQueueSemaphoreTake>
 800dd68:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800dd6a:	697b      	ldr	r3, [r7, #20]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d004      	beq.n	800dd7a <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800dd70:	693b      	ldr	r3, [r7, #16]
 800dd72:	68db      	ldr	r3, [r3, #12]
 800dd74:	1c5a      	adds	r2, r3, #1
 800dd76:	693b      	ldr	r3, [r7, #16]
 800dd78:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800dd7a:	697b      	ldr	r3, [r7, #20]
	}
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	371c      	adds	r7, #28
 800dd80:	46bd      	mov	sp, r7
 800dd82:	bd90      	pop	{r4, r7, pc}

0800dd84 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800dd84:	b580      	push	{r7, lr}
 800dd86:	b08a      	sub	sp, #40	; 0x28
 800dd88:	af02      	add	r7, sp, #8
 800dd8a:	60f8      	str	r0, [r7, #12]
 800dd8c:	60b9      	str	r1, [r7, #8]
 800dd8e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d10b      	bne.n	800ddae <xQueueCreateCountingSemaphoreStatic+0x2a>
 800dd96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd9a:	b672      	cpsid	i
 800dd9c:	f383 8811 	msr	BASEPRI, r3
 800dda0:	f3bf 8f6f 	isb	sy
 800dda4:	f3bf 8f4f 	dsb	sy
 800dda8:	b662      	cpsie	i
 800ddaa:	61bb      	str	r3, [r7, #24]
 800ddac:	e7fe      	b.n	800ddac <xQueueCreateCountingSemaphoreStatic+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ddae:	68ba      	ldr	r2, [r7, #8]
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	429a      	cmp	r2, r3
 800ddb4:	d90b      	bls.n	800ddce <xQueueCreateCountingSemaphoreStatic+0x4a>
 800ddb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddba:	b672      	cpsid	i
 800ddbc:	f383 8811 	msr	BASEPRI, r3
 800ddc0:	f3bf 8f6f 	isb	sy
 800ddc4:	f3bf 8f4f 	dsb	sy
 800ddc8:	b662      	cpsie	i
 800ddca:	617b      	str	r3, [r7, #20]
 800ddcc:	e7fe      	b.n	800ddcc <xQueueCreateCountingSemaphoreStatic+0x48>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ddce:	2302      	movs	r3, #2
 800ddd0:	9300      	str	r3, [sp, #0]
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	2200      	movs	r2, #0
 800ddd6:	2100      	movs	r1, #0
 800ddd8:	68f8      	ldr	r0, [r7, #12]
 800ddda:	f7ff fe39 	bl	800da50 <xQueueGenericCreateStatic>
 800ddde:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800dde0:	69fb      	ldr	r3, [r7, #28]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d002      	beq.n	800ddec <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800dde6:	69fb      	ldr	r3, [r7, #28]
 800dde8:	68ba      	ldr	r2, [r7, #8]
 800ddea:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800ddec:	69fb      	ldr	r3, [r7, #28]
	}
 800ddee:	4618      	mov	r0, r3
 800ddf0:	3720      	adds	r7, #32
 800ddf2:	46bd      	mov	sp, r7
 800ddf4:	bd80      	pop	{r7, pc}

0800ddf6 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800ddf6:	b580      	push	{r7, lr}
 800ddf8:	b086      	sub	sp, #24
 800ddfa:	af00      	add	r7, sp, #0
 800ddfc:	6078      	str	r0, [r7, #4]
 800ddfe:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d10b      	bne.n	800de1e <xQueueCreateCountingSemaphore+0x28>
 800de06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de0a:	b672      	cpsid	i
 800de0c:	f383 8811 	msr	BASEPRI, r3
 800de10:	f3bf 8f6f 	isb	sy
 800de14:	f3bf 8f4f 	dsb	sy
 800de18:	b662      	cpsie	i
 800de1a:	613b      	str	r3, [r7, #16]
 800de1c:	e7fe      	b.n	800de1c <xQueueCreateCountingSemaphore+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800de1e:	683a      	ldr	r2, [r7, #0]
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	429a      	cmp	r2, r3
 800de24:	d90b      	bls.n	800de3e <xQueueCreateCountingSemaphore+0x48>
 800de26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de2a:	b672      	cpsid	i
 800de2c:	f383 8811 	msr	BASEPRI, r3
 800de30:	f3bf 8f6f 	isb	sy
 800de34:	f3bf 8f4f 	dsb	sy
 800de38:	b662      	cpsie	i
 800de3a:	60fb      	str	r3, [r7, #12]
 800de3c:	e7fe      	b.n	800de3c <xQueueCreateCountingSemaphore+0x46>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800de3e:	2202      	movs	r2, #2
 800de40:	2100      	movs	r1, #0
 800de42:	6878      	ldr	r0, [r7, #4]
 800de44:	f7ff fe81 	bl	800db4a <xQueueGenericCreate>
 800de48:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800de4a:	697b      	ldr	r3, [r7, #20]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d002      	beq.n	800de56 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800de50:	697b      	ldr	r3, [r7, #20]
 800de52:	683a      	ldr	r2, [r7, #0]
 800de54:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800de56:	697b      	ldr	r3, [r7, #20]
	}
 800de58:	4618      	mov	r0, r3
 800de5a:	3718      	adds	r7, #24
 800de5c:	46bd      	mov	sp, r7
 800de5e:	bd80      	pop	{r7, pc}

0800de60 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800de60:	b580      	push	{r7, lr}
 800de62:	b08e      	sub	sp, #56	; 0x38
 800de64:	af00      	add	r7, sp, #0
 800de66:	60f8      	str	r0, [r7, #12]
 800de68:	60b9      	str	r1, [r7, #8]
 800de6a:	607a      	str	r2, [r7, #4]
 800de6c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800de6e:	2300      	movs	r3, #0
 800de70:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800de76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d10b      	bne.n	800de94 <xQueueGenericSend+0x34>
 800de7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de80:	b672      	cpsid	i
 800de82:	f383 8811 	msr	BASEPRI, r3
 800de86:	f3bf 8f6f 	isb	sy
 800de8a:	f3bf 8f4f 	dsb	sy
 800de8e:	b662      	cpsie	i
 800de90:	62bb      	str	r3, [r7, #40]	; 0x28
 800de92:	e7fe      	b.n	800de92 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800de94:	68bb      	ldr	r3, [r7, #8]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d103      	bne.n	800dea2 <xQueueGenericSend+0x42>
 800de9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d101      	bne.n	800dea6 <xQueueGenericSend+0x46>
 800dea2:	2301      	movs	r3, #1
 800dea4:	e000      	b.n	800dea8 <xQueueGenericSend+0x48>
 800dea6:	2300      	movs	r3, #0
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d10b      	bne.n	800dec4 <xQueueGenericSend+0x64>
 800deac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800deb0:	b672      	cpsid	i
 800deb2:	f383 8811 	msr	BASEPRI, r3
 800deb6:	f3bf 8f6f 	isb	sy
 800deba:	f3bf 8f4f 	dsb	sy
 800debe:	b662      	cpsie	i
 800dec0:	627b      	str	r3, [r7, #36]	; 0x24
 800dec2:	e7fe      	b.n	800dec2 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dec4:	683b      	ldr	r3, [r7, #0]
 800dec6:	2b02      	cmp	r3, #2
 800dec8:	d103      	bne.n	800ded2 <xQueueGenericSend+0x72>
 800deca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800decc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dece:	2b01      	cmp	r3, #1
 800ded0:	d101      	bne.n	800ded6 <xQueueGenericSend+0x76>
 800ded2:	2301      	movs	r3, #1
 800ded4:	e000      	b.n	800ded8 <xQueueGenericSend+0x78>
 800ded6:	2300      	movs	r3, #0
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d10b      	bne.n	800def4 <xQueueGenericSend+0x94>
 800dedc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dee0:	b672      	cpsid	i
 800dee2:	f383 8811 	msr	BASEPRI, r3
 800dee6:	f3bf 8f6f 	isb	sy
 800deea:	f3bf 8f4f 	dsb	sy
 800deee:	b662      	cpsie	i
 800def0:	623b      	str	r3, [r7, #32]
 800def2:	e7fe      	b.n	800def2 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800def4:	f001 fc76 	bl	800f7e4 <xTaskGetSchedulerState>
 800def8:	4603      	mov	r3, r0
 800defa:	2b00      	cmp	r3, #0
 800defc:	d102      	bne.n	800df04 <xQueueGenericSend+0xa4>
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d101      	bne.n	800df08 <xQueueGenericSend+0xa8>
 800df04:	2301      	movs	r3, #1
 800df06:	e000      	b.n	800df0a <xQueueGenericSend+0xaa>
 800df08:	2300      	movs	r3, #0
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d10b      	bne.n	800df26 <xQueueGenericSend+0xc6>
 800df0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df12:	b672      	cpsid	i
 800df14:	f383 8811 	msr	BASEPRI, r3
 800df18:	f3bf 8f6f 	isb	sy
 800df1c:	f3bf 8f4f 	dsb	sy
 800df20:	b662      	cpsie	i
 800df22:	61fb      	str	r3, [r7, #28]
 800df24:	e7fe      	b.n	800df24 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800df26:	f002 fa9f 	bl	8010468 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800df2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800df2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df32:	429a      	cmp	r2, r3
 800df34:	d302      	bcc.n	800df3c <xQueueGenericSend+0xdc>
 800df36:	683b      	ldr	r3, [r7, #0]
 800df38:	2b02      	cmp	r3, #2
 800df3a:	d129      	bne.n	800df90 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800df3c:	683a      	ldr	r2, [r7, #0]
 800df3e:	68b9      	ldr	r1, [r7, #8]
 800df40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800df42:	f000 fc6e 	bl	800e822 <prvCopyDataToQueue>
 800df46:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800df48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d010      	beq.n	800df72 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800df50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df52:	3324      	adds	r3, #36	; 0x24
 800df54:	4618      	mov	r0, r3
 800df56:	f001 fa77 	bl	800f448 <xTaskRemoveFromEventList>
 800df5a:	4603      	mov	r3, r0
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d013      	beq.n	800df88 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800df60:	4b3f      	ldr	r3, [pc, #252]	; (800e060 <xQueueGenericSend+0x200>)
 800df62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df66:	601a      	str	r2, [r3, #0]
 800df68:	f3bf 8f4f 	dsb	sy
 800df6c:	f3bf 8f6f 	isb	sy
 800df70:	e00a      	b.n	800df88 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800df72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df74:	2b00      	cmp	r3, #0
 800df76:	d007      	beq.n	800df88 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800df78:	4b39      	ldr	r3, [pc, #228]	; (800e060 <xQueueGenericSend+0x200>)
 800df7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df7e:	601a      	str	r2, [r3, #0]
 800df80:	f3bf 8f4f 	dsb	sy
 800df84:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800df88:	f002 faa0 	bl	80104cc <vPortExitCritical>
				return pdPASS;
 800df8c:	2301      	movs	r3, #1
 800df8e:	e063      	b.n	800e058 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d103      	bne.n	800df9e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800df96:	f002 fa99 	bl	80104cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800df9a:	2300      	movs	r3, #0
 800df9c:	e05c      	b.n	800e058 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800df9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d106      	bne.n	800dfb2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dfa4:	f107 0314 	add.w	r3, r7, #20
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	f001 fab1 	bl	800f510 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dfae:	2301      	movs	r3, #1
 800dfb0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dfb2:	f002 fa8b 	bl	80104cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dfb6:	f001 f80f 	bl	800efd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dfba:	f002 fa55 	bl	8010468 <vPortEnterCritical>
 800dfbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dfc4:	b25b      	sxtb	r3, r3
 800dfc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfca:	d103      	bne.n	800dfd4 <xQueueGenericSend+0x174>
 800dfcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfce:	2200      	movs	r2, #0
 800dfd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dfd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dfda:	b25b      	sxtb	r3, r3
 800dfdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfe0:	d103      	bne.n	800dfea <xQueueGenericSend+0x18a>
 800dfe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfe4:	2200      	movs	r2, #0
 800dfe6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dfea:	f002 fa6f 	bl	80104cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dfee:	1d3a      	adds	r2, r7, #4
 800dff0:	f107 0314 	add.w	r3, r7, #20
 800dff4:	4611      	mov	r1, r2
 800dff6:	4618      	mov	r0, r3
 800dff8:	f001 faa0 	bl	800f53c <xTaskCheckForTimeOut>
 800dffc:	4603      	mov	r3, r0
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d124      	bne.n	800e04c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e002:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e004:	f000 fd05 	bl	800ea12 <prvIsQueueFull>
 800e008:	4603      	mov	r3, r0
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d018      	beq.n	800e040 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e010:	3310      	adds	r3, #16
 800e012:	687a      	ldr	r2, [r7, #4]
 800e014:	4611      	mov	r1, r2
 800e016:	4618      	mov	r0, r3
 800e018:	f001 f9c4 	bl	800f3a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e01c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e01e:	f000 fc90 	bl	800e942 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e022:	f000 ffe7 	bl	800eff4 <xTaskResumeAll>
 800e026:	4603      	mov	r3, r0
 800e028:	2b00      	cmp	r3, #0
 800e02a:	f47f af7c 	bne.w	800df26 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800e02e:	4b0c      	ldr	r3, [pc, #48]	; (800e060 <xQueueGenericSend+0x200>)
 800e030:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e034:	601a      	str	r2, [r3, #0]
 800e036:	f3bf 8f4f 	dsb	sy
 800e03a:	f3bf 8f6f 	isb	sy
 800e03e:	e772      	b.n	800df26 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e040:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e042:	f000 fc7e 	bl	800e942 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e046:	f000 ffd5 	bl	800eff4 <xTaskResumeAll>
 800e04a:	e76c      	b.n	800df26 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e04c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e04e:	f000 fc78 	bl	800e942 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e052:	f000 ffcf 	bl	800eff4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e056:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e058:	4618      	mov	r0, r3
 800e05a:	3738      	adds	r7, #56	; 0x38
 800e05c:	46bd      	mov	sp, r7
 800e05e:	bd80      	pop	{r7, pc}
 800e060:	e000ed04 	.word	0xe000ed04

0800e064 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e064:	b580      	push	{r7, lr}
 800e066:	b08e      	sub	sp, #56	; 0x38
 800e068:	af00      	add	r7, sp, #0
 800e06a:	60f8      	str	r0, [r7, #12]
 800e06c:	60b9      	str	r1, [r7, #8]
 800e06e:	607a      	str	r2, [r7, #4]
 800e070:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d10b      	bne.n	800e094 <xQueueGenericSendFromISR+0x30>
 800e07c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e080:	b672      	cpsid	i
 800e082:	f383 8811 	msr	BASEPRI, r3
 800e086:	f3bf 8f6f 	isb	sy
 800e08a:	f3bf 8f4f 	dsb	sy
 800e08e:	b662      	cpsie	i
 800e090:	627b      	str	r3, [r7, #36]	; 0x24
 800e092:	e7fe      	b.n	800e092 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e094:	68bb      	ldr	r3, [r7, #8]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d103      	bne.n	800e0a2 <xQueueGenericSendFromISR+0x3e>
 800e09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e09c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d101      	bne.n	800e0a6 <xQueueGenericSendFromISR+0x42>
 800e0a2:	2301      	movs	r3, #1
 800e0a4:	e000      	b.n	800e0a8 <xQueueGenericSendFromISR+0x44>
 800e0a6:	2300      	movs	r3, #0
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d10b      	bne.n	800e0c4 <xQueueGenericSendFromISR+0x60>
 800e0ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0b0:	b672      	cpsid	i
 800e0b2:	f383 8811 	msr	BASEPRI, r3
 800e0b6:	f3bf 8f6f 	isb	sy
 800e0ba:	f3bf 8f4f 	dsb	sy
 800e0be:	b662      	cpsie	i
 800e0c0:	623b      	str	r3, [r7, #32]
 800e0c2:	e7fe      	b.n	800e0c2 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e0c4:	683b      	ldr	r3, [r7, #0]
 800e0c6:	2b02      	cmp	r3, #2
 800e0c8:	d103      	bne.n	800e0d2 <xQueueGenericSendFromISR+0x6e>
 800e0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0ce:	2b01      	cmp	r3, #1
 800e0d0:	d101      	bne.n	800e0d6 <xQueueGenericSendFromISR+0x72>
 800e0d2:	2301      	movs	r3, #1
 800e0d4:	e000      	b.n	800e0d8 <xQueueGenericSendFromISR+0x74>
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d10b      	bne.n	800e0f4 <xQueueGenericSendFromISR+0x90>
 800e0dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0e0:	b672      	cpsid	i
 800e0e2:	f383 8811 	msr	BASEPRI, r3
 800e0e6:	f3bf 8f6f 	isb	sy
 800e0ea:	f3bf 8f4f 	dsb	sy
 800e0ee:	b662      	cpsie	i
 800e0f0:	61fb      	str	r3, [r7, #28]
 800e0f2:	e7fe      	b.n	800e0f2 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e0f4:	f002 fa98 	bl	8010628 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e0f8:	f3ef 8211 	mrs	r2, BASEPRI
 800e0fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e100:	b672      	cpsid	i
 800e102:	f383 8811 	msr	BASEPRI, r3
 800e106:	f3bf 8f6f 	isb	sy
 800e10a:	f3bf 8f4f 	dsb	sy
 800e10e:	b662      	cpsie	i
 800e110:	61ba      	str	r2, [r7, #24]
 800e112:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e114:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e116:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e11a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e11c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e11e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e120:	429a      	cmp	r2, r3
 800e122:	d302      	bcc.n	800e12a <xQueueGenericSendFromISR+0xc6>
 800e124:	683b      	ldr	r3, [r7, #0]
 800e126:	2b02      	cmp	r3, #2
 800e128:	d12c      	bne.n	800e184 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e12c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e130:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e134:	683a      	ldr	r2, [r7, #0]
 800e136:	68b9      	ldr	r1, [r7, #8]
 800e138:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e13a:	f000 fb72 	bl	800e822 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e13e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800e142:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e146:	d112      	bne.n	800e16e <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e14a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d016      	beq.n	800e17e <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e152:	3324      	adds	r3, #36	; 0x24
 800e154:	4618      	mov	r0, r3
 800e156:	f001 f977 	bl	800f448 <xTaskRemoveFromEventList>
 800e15a:	4603      	mov	r3, r0
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d00e      	beq.n	800e17e <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d00b      	beq.n	800e17e <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	2201      	movs	r2, #1
 800e16a:	601a      	str	r2, [r3, #0]
 800e16c:	e007      	b.n	800e17e <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e16e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e172:	3301      	adds	r3, #1
 800e174:	b2db      	uxtb	r3, r3
 800e176:	b25a      	sxtb	r2, r3
 800e178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e17a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e17e:	2301      	movs	r3, #1
 800e180:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800e182:	e001      	b.n	800e188 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e184:	2300      	movs	r3, #0
 800e186:	637b      	str	r3, [r7, #52]	; 0x34
 800e188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e18a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e18c:	693b      	ldr	r3, [r7, #16]
 800e18e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e194:	4618      	mov	r0, r3
 800e196:	3738      	adds	r7, #56	; 0x38
 800e198:	46bd      	mov	sp, r7
 800e19a:	bd80      	pop	{r7, pc}

0800e19c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e19c:	b580      	push	{r7, lr}
 800e19e:	b08e      	sub	sp, #56	; 0x38
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	6078      	str	r0, [r7, #4]
 800e1a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800e1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d10b      	bne.n	800e1c8 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800e1b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1b4:	b672      	cpsid	i
 800e1b6:	f383 8811 	msr	BASEPRI, r3
 800e1ba:	f3bf 8f6f 	isb	sy
 800e1be:	f3bf 8f4f 	dsb	sy
 800e1c2:	b662      	cpsie	i
 800e1c4:	623b      	str	r3, [r7, #32]
 800e1c6:	e7fe      	b.n	800e1c6 <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e1c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d00b      	beq.n	800e1e8 <xQueueGiveFromISR+0x4c>
 800e1d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1d4:	b672      	cpsid	i
 800e1d6:	f383 8811 	msr	BASEPRI, r3
 800e1da:	f3bf 8f6f 	isb	sy
 800e1de:	f3bf 8f4f 	dsb	sy
 800e1e2:	b662      	cpsie	i
 800e1e4:	61fb      	str	r3, [r7, #28]
 800e1e6:	e7fe      	b.n	800e1e6 <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800e1e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d103      	bne.n	800e1f8 <xQueueGiveFromISR+0x5c>
 800e1f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1f2:	689b      	ldr	r3, [r3, #8]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d101      	bne.n	800e1fc <xQueueGiveFromISR+0x60>
 800e1f8:	2301      	movs	r3, #1
 800e1fa:	e000      	b.n	800e1fe <xQueueGiveFromISR+0x62>
 800e1fc:	2300      	movs	r3, #0
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d10b      	bne.n	800e21a <xQueueGiveFromISR+0x7e>
 800e202:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e206:	b672      	cpsid	i
 800e208:	f383 8811 	msr	BASEPRI, r3
 800e20c:	f3bf 8f6f 	isb	sy
 800e210:	f3bf 8f4f 	dsb	sy
 800e214:	b662      	cpsie	i
 800e216:	61bb      	str	r3, [r7, #24]
 800e218:	e7fe      	b.n	800e218 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e21a:	f002 fa05 	bl	8010628 <vPortValidateInterruptPriority>
	__asm volatile
 800e21e:	f3ef 8211 	mrs	r2, BASEPRI
 800e222:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e226:	b672      	cpsid	i
 800e228:	f383 8811 	msr	BASEPRI, r3
 800e22c:	f3bf 8f6f 	isb	sy
 800e230:	f3bf 8f4f 	dsb	sy
 800e234:	b662      	cpsie	i
 800e236:	617a      	str	r2, [r7, #20]
 800e238:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800e23a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e23c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e23e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e242:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800e244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e248:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e24a:	429a      	cmp	r2, r3
 800e24c:	d22b      	bcs.n	800e2a6 <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e24e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e250:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e254:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e25a:	1c5a      	adds	r2, r3, #1
 800e25c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e25e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e260:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e264:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e268:	d112      	bne.n	800e290 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e26c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d016      	beq.n	800e2a0 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e274:	3324      	adds	r3, #36	; 0x24
 800e276:	4618      	mov	r0, r3
 800e278:	f001 f8e6 	bl	800f448 <xTaskRemoveFromEventList>
 800e27c:	4603      	mov	r3, r0
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d00e      	beq.n	800e2a0 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e282:	683b      	ldr	r3, [r7, #0]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d00b      	beq.n	800e2a0 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e288:	683b      	ldr	r3, [r7, #0]
 800e28a:	2201      	movs	r2, #1
 800e28c:	601a      	str	r2, [r3, #0]
 800e28e:	e007      	b.n	800e2a0 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e290:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e294:	3301      	adds	r3, #1
 800e296:	b2db      	uxtb	r3, r3
 800e298:	b25a      	sxtb	r2, r3
 800e29a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e29c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e2a0:	2301      	movs	r3, #1
 800e2a2:	637b      	str	r3, [r7, #52]	; 0x34
 800e2a4:	e001      	b.n	800e2aa <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e2a6:	2300      	movs	r3, #0
 800e2a8:	637b      	str	r3, [r7, #52]	; 0x34
 800e2aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2ac:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e2b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	3738      	adds	r7, #56	; 0x38
 800e2ba:	46bd      	mov	sp, r7
 800e2bc:	bd80      	pop	{r7, pc}
	...

0800e2c0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e2c0:	b580      	push	{r7, lr}
 800e2c2:	b08c      	sub	sp, #48	; 0x30
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	60f8      	str	r0, [r7, #12]
 800e2c8:	60b9      	str	r1, [r7, #8]
 800e2ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e2cc:	2300      	movs	r3, #0
 800e2ce:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e2d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d10b      	bne.n	800e2f2 <xQueueReceive+0x32>
	__asm volatile
 800e2da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2de:	b672      	cpsid	i
 800e2e0:	f383 8811 	msr	BASEPRI, r3
 800e2e4:	f3bf 8f6f 	isb	sy
 800e2e8:	f3bf 8f4f 	dsb	sy
 800e2ec:	b662      	cpsie	i
 800e2ee:	623b      	str	r3, [r7, #32]
 800e2f0:	e7fe      	b.n	800e2f0 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e2f2:	68bb      	ldr	r3, [r7, #8]
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d103      	bne.n	800e300 <xQueueReceive+0x40>
 800e2f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d101      	bne.n	800e304 <xQueueReceive+0x44>
 800e300:	2301      	movs	r3, #1
 800e302:	e000      	b.n	800e306 <xQueueReceive+0x46>
 800e304:	2300      	movs	r3, #0
 800e306:	2b00      	cmp	r3, #0
 800e308:	d10b      	bne.n	800e322 <xQueueReceive+0x62>
 800e30a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e30e:	b672      	cpsid	i
 800e310:	f383 8811 	msr	BASEPRI, r3
 800e314:	f3bf 8f6f 	isb	sy
 800e318:	f3bf 8f4f 	dsb	sy
 800e31c:	b662      	cpsie	i
 800e31e:	61fb      	str	r3, [r7, #28]
 800e320:	e7fe      	b.n	800e320 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e322:	f001 fa5f 	bl	800f7e4 <xTaskGetSchedulerState>
 800e326:	4603      	mov	r3, r0
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d102      	bne.n	800e332 <xQueueReceive+0x72>
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d101      	bne.n	800e336 <xQueueReceive+0x76>
 800e332:	2301      	movs	r3, #1
 800e334:	e000      	b.n	800e338 <xQueueReceive+0x78>
 800e336:	2300      	movs	r3, #0
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d10b      	bne.n	800e354 <xQueueReceive+0x94>
 800e33c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e340:	b672      	cpsid	i
 800e342:	f383 8811 	msr	BASEPRI, r3
 800e346:	f3bf 8f6f 	isb	sy
 800e34a:	f3bf 8f4f 	dsb	sy
 800e34e:	b662      	cpsie	i
 800e350:	61bb      	str	r3, [r7, #24]
 800e352:	e7fe      	b.n	800e352 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e354:	f002 f888 	bl	8010468 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e35a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e35c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e35e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e360:	2b00      	cmp	r3, #0
 800e362:	d01f      	beq.n	800e3a4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e364:	68b9      	ldr	r1, [r7, #8]
 800e366:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e368:	f000 fac5 	bl	800e8f6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e36e:	1e5a      	subs	r2, r3, #1
 800e370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e372:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e376:	691b      	ldr	r3, [r3, #16]
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d00f      	beq.n	800e39c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e37c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e37e:	3310      	adds	r3, #16
 800e380:	4618      	mov	r0, r3
 800e382:	f001 f861 	bl	800f448 <xTaskRemoveFromEventList>
 800e386:	4603      	mov	r3, r0
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d007      	beq.n	800e39c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e38c:	4b3c      	ldr	r3, [pc, #240]	; (800e480 <xQueueReceive+0x1c0>)
 800e38e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e392:	601a      	str	r2, [r3, #0]
 800e394:	f3bf 8f4f 	dsb	sy
 800e398:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e39c:	f002 f896 	bl	80104cc <vPortExitCritical>
				return pdPASS;
 800e3a0:	2301      	movs	r3, #1
 800e3a2:	e069      	b.n	800e478 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d103      	bne.n	800e3b2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e3aa:	f002 f88f 	bl	80104cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	e062      	b.n	800e478 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e3b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d106      	bne.n	800e3c6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e3b8:	f107 0310 	add.w	r3, r7, #16
 800e3bc:	4618      	mov	r0, r3
 800e3be:	f001 f8a7 	bl	800f510 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e3c2:	2301      	movs	r3, #1
 800e3c4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e3c6:	f002 f881 	bl	80104cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e3ca:	f000 fe05 	bl	800efd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e3ce:	f002 f84b 	bl	8010468 <vPortEnterCritical>
 800e3d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e3d8:	b25b      	sxtb	r3, r3
 800e3da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3de:	d103      	bne.n	800e3e8 <xQueueReceive+0x128>
 800e3e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3e2:	2200      	movs	r2, #0
 800e3e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e3e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e3ee:	b25b      	sxtb	r3, r3
 800e3f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3f4:	d103      	bne.n	800e3fe <xQueueReceive+0x13e>
 800e3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3f8:	2200      	movs	r2, #0
 800e3fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e3fe:	f002 f865 	bl	80104cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e402:	1d3a      	adds	r2, r7, #4
 800e404:	f107 0310 	add.w	r3, r7, #16
 800e408:	4611      	mov	r1, r2
 800e40a:	4618      	mov	r0, r3
 800e40c:	f001 f896 	bl	800f53c <xTaskCheckForTimeOut>
 800e410:	4603      	mov	r3, r0
 800e412:	2b00      	cmp	r3, #0
 800e414:	d123      	bne.n	800e45e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e416:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e418:	f000 fae5 	bl	800e9e6 <prvIsQueueEmpty>
 800e41c:	4603      	mov	r3, r0
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d017      	beq.n	800e452 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e424:	3324      	adds	r3, #36	; 0x24
 800e426:	687a      	ldr	r2, [r7, #4]
 800e428:	4611      	mov	r1, r2
 800e42a:	4618      	mov	r0, r3
 800e42c:	f000 ffba 	bl	800f3a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e430:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e432:	f000 fa86 	bl	800e942 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e436:	f000 fddd 	bl	800eff4 <xTaskResumeAll>
 800e43a:	4603      	mov	r3, r0
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d189      	bne.n	800e354 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800e440:	4b0f      	ldr	r3, [pc, #60]	; (800e480 <xQueueReceive+0x1c0>)
 800e442:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e446:	601a      	str	r2, [r3, #0]
 800e448:	f3bf 8f4f 	dsb	sy
 800e44c:	f3bf 8f6f 	isb	sy
 800e450:	e780      	b.n	800e354 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e452:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e454:	f000 fa75 	bl	800e942 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e458:	f000 fdcc 	bl	800eff4 <xTaskResumeAll>
 800e45c:	e77a      	b.n	800e354 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e45e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e460:	f000 fa6f 	bl	800e942 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e464:	f000 fdc6 	bl	800eff4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e468:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e46a:	f000 fabc 	bl	800e9e6 <prvIsQueueEmpty>
 800e46e:	4603      	mov	r3, r0
 800e470:	2b00      	cmp	r3, #0
 800e472:	f43f af6f 	beq.w	800e354 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e476:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e478:	4618      	mov	r0, r3
 800e47a:	3730      	adds	r7, #48	; 0x30
 800e47c:	46bd      	mov	sp, r7
 800e47e:	bd80      	pop	{r7, pc}
 800e480:	e000ed04 	.word	0xe000ed04

0800e484 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800e484:	b580      	push	{r7, lr}
 800e486:	b08e      	sub	sp, #56	; 0x38
 800e488:	af00      	add	r7, sp, #0
 800e48a:	6078      	str	r0, [r7, #4]
 800e48c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800e48e:	2300      	movs	r3, #0
 800e490:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800e496:	2300      	movs	r3, #0
 800e498:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e49a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d10b      	bne.n	800e4b8 <xQueueSemaphoreTake+0x34>
 800e4a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4a4:	b672      	cpsid	i
 800e4a6:	f383 8811 	msr	BASEPRI, r3
 800e4aa:	f3bf 8f6f 	isb	sy
 800e4ae:	f3bf 8f4f 	dsb	sy
 800e4b2:	b662      	cpsie	i
 800e4b4:	623b      	str	r3, [r7, #32]
 800e4b6:	e7fe      	b.n	800e4b6 <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e4b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d00b      	beq.n	800e4d8 <xQueueSemaphoreTake+0x54>
 800e4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4c4:	b672      	cpsid	i
 800e4c6:	f383 8811 	msr	BASEPRI, r3
 800e4ca:	f3bf 8f6f 	isb	sy
 800e4ce:	f3bf 8f4f 	dsb	sy
 800e4d2:	b662      	cpsie	i
 800e4d4:	61fb      	str	r3, [r7, #28]
 800e4d6:	e7fe      	b.n	800e4d6 <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e4d8:	f001 f984 	bl	800f7e4 <xTaskGetSchedulerState>
 800e4dc:	4603      	mov	r3, r0
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d102      	bne.n	800e4e8 <xQueueSemaphoreTake+0x64>
 800e4e2:	683b      	ldr	r3, [r7, #0]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d101      	bne.n	800e4ec <xQueueSemaphoreTake+0x68>
 800e4e8:	2301      	movs	r3, #1
 800e4ea:	e000      	b.n	800e4ee <xQueueSemaphoreTake+0x6a>
 800e4ec:	2300      	movs	r3, #0
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d10b      	bne.n	800e50a <xQueueSemaphoreTake+0x86>
 800e4f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4f6:	b672      	cpsid	i
 800e4f8:	f383 8811 	msr	BASEPRI, r3
 800e4fc:	f3bf 8f6f 	isb	sy
 800e500:	f3bf 8f4f 	dsb	sy
 800e504:	b662      	cpsie	i
 800e506:	61bb      	str	r3, [r7, #24]
 800e508:	e7fe      	b.n	800e508 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e50a:	f001 ffad 	bl	8010468 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800e50e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e512:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800e514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e516:	2b00      	cmp	r3, #0
 800e518:	d024      	beq.n	800e564 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800e51a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e51c:	1e5a      	subs	r2, r3, #1
 800e51e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e520:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d104      	bne.n	800e534 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800e52a:	f001 fad5 	bl	800fad8 <pvTaskIncrementMutexHeldCount>
 800e52e:	4602      	mov	r2, r0
 800e530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e532:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e536:	691b      	ldr	r3, [r3, #16]
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d00f      	beq.n	800e55c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e53c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e53e:	3310      	adds	r3, #16
 800e540:	4618      	mov	r0, r3
 800e542:	f000 ff81 	bl	800f448 <xTaskRemoveFromEventList>
 800e546:	4603      	mov	r3, r0
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d007      	beq.n	800e55c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e54c:	4b54      	ldr	r3, [pc, #336]	; (800e6a0 <xQueueSemaphoreTake+0x21c>)
 800e54e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e552:	601a      	str	r2, [r3, #0]
 800e554:	f3bf 8f4f 	dsb	sy
 800e558:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e55c:	f001 ffb6 	bl	80104cc <vPortExitCritical>
				return pdPASS;
 800e560:	2301      	movs	r3, #1
 800e562:	e098      	b.n	800e696 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e564:	683b      	ldr	r3, [r7, #0]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d112      	bne.n	800e590 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800e56a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d00b      	beq.n	800e588 <xQueueSemaphoreTake+0x104>
 800e570:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e574:	b672      	cpsid	i
 800e576:	f383 8811 	msr	BASEPRI, r3
 800e57a:	f3bf 8f6f 	isb	sy
 800e57e:	f3bf 8f4f 	dsb	sy
 800e582:	b662      	cpsie	i
 800e584:	617b      	str	r3, [r7, #20]
 800e586:	e7fe      	b.n	800e586 <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800e588:	f001 ffa0 	bl	80104cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e58c:	2300      	movs	r3, #0
 800e58e:	e082      	b.n	800e696 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e592:	2b00      	cmp	r3, #0
 800e594:	d106      	bne.n	800e5a4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e596:	f107 030c 	add.w	r3, r7, #12
 800e59a:	4618      	mov	r0, r3
 800e59c:	f000 ffb8 	bl	800f510 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e5a0:	2301      	movs	r3, #1
 800e5a2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e5a4:	f001 ff92 	bl	80104cc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e5a8:	f000 fd16 	bl	800efd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e5ac:	f001 ff5c 	bl	8010468 <vPortEnterCritical>
 800e5b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e5b6:	b25b      	sxtb	r3, r3
 800e5b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5bc:	d103      	bne.n	800e5c6 <xQueueSemaphoreTake+0x142>
 800e5be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5c0:	2200      	movs	r2, #0
 800e5c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e5c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e5cc:	b25b      	sxtb	r3, r3
 800e5ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5d2:	d103      	bne.n	800e5dc <xQueueSemaphoreTake+0x158>
 800e5d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5d6:	2200      	movs	r2, #0
 800e5d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e5dc:	f001 ff76 	bl	80104cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e5e0:	463a      	mov	r2, r7
 800e5e2:	f107 030c 	add.w	r3, r7, #12
 800e5e6:	4611      	mov	r1, r2
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	f000 ffa7 	bl	800f53c <xTaskCheckForTimeOut>
 800e5ee:	4603      	mov	r3, r0
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d132      	bne.n	800e65a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e5f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e5f6:	f000 f9f6 	bl	800e9e6 <prvIsQueueEmpty>
 800e5fa:	4603      	mov	r3, r0
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d026      	beq.n	800e64e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	2b00      	cmp	r3, #0
 800e606:	d109      	bne.n	800e61c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800e608:	f001 ff2e 	bl	8010468 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e60c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e60e:	689b      	ldr	r3, [r3, #8]
 800e610:	4618      	mov	r0, r3
 800e612:	f001 f905 	bl	800f820 <xTaskPriorityInherit>
 800e616:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800e618:	f001 ff58 	bl	80104cc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e61c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e61e:	3324      	adds	r3, #36	; 0x24
 800e620:	683a      	ldr	r2, [r7, #0]
 800e622:	4611      	mov	r1, r2
 800e624:	4618      	mov	r0, r3
 800e626:	f000 febd 	bl	800f3a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e62a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e62c:	f000 f989 	bl	800e942 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e630:	f000 fce0 	bl	800eff4 <xTaskResumeAll>
 800e634:	4603      	mov	r3, r0
 800e636:	2b00      	cmp	r3, #0
 800e638:	f47f af67 	bne.w	800e50a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800e63c:	4b18      	ldr	r3, [pc, #96]	; (800e6a0 <xQueueSemaphoreTake+0x21c>)
 800e63e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e642:	601a      	str	r2, [r3, #0]
 800e644:	f3bf 8f4f 	dsb	sy
 800e648:	f3bf 8f6f 	isb	sy
 800e64c:	e75d      	b.n	800e50a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800e64e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e650:	f000 f977 	bl	800e942 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e654:	f000 fcce 	bl	800eff4 <xTaskResumeAll>
 800e658:	e757      	b.n	800e50a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800e65a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e65c:	f000 f971 	bl	800e942 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e660:	f000 fcc8 	bl	800eff4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e664:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e666:	f000 f9be 	bl	800e9e6 <prvIsQueueEmpty>
 800e66a:	4603      	mov	r3, r0
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	f43f af4c 	beq.w	800e50a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800e672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e674:	2b00      	cmp	r3, #0
 800e676:	d00d      	beq.n	800e694 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800e678:	f001 fef6 	bl	8010468 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800e67c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e67e:	f000 f8b8 	bl	800e7f2 <prvGetDisinheritPriorityAfterTimeout>
 800e682:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800e684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e686:	689b      	ldr	r3, [r3, #8]
 800e688:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e68a:	4618      	mov	r0, r3
 800e68c:	f001 f9a0 	bl	800f9d0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800e690:	f001 ff1c 	bl	80104cc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e694:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e696:	4618      	mov	r0, r3
 800e698:	3738      	adds	r7, #56	; 0x38
 800e69a:	46bd      	mov	sp, r7
 800e69c:	bd80      	pop	{r7, pc}
 800e69e:	bf00      	nop
 800e6a0:	e000ed04 	.word	0xe000ed04

0800e6a4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	b08e      	sub	sp, #56	; 0x38
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	60f8      	str	r0, [r7, #12]
 800e6ac:	60b9      	str	r1, [r7, #8]
 800e6ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e6b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d10b      	bne.n	800e6d2 <xQueueReceiveFromISR+0x2e>
 800e6ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6be:	b672      	cpsid	i
 800e6c0:	f383 8811 	msr	BASEPRI, r3
 800e6c4:	f3bf 8f6f 	isb	sy
 800e6c8:	f3bf 8f4f 	dsb	sy
 800e6cc:	b662      	cpsie	i
 800e6ce:	623b      	str	r3, [r7, #32]
 800e6d0:	e7fe      	b.n	800e6d0 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e6d2:	68bb      	ldr	r3, [r7, #8]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d103      	bne.n	800e6e0 <xQueueReceiveFromISR+0x3c>
 800e6d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d101      	bne.n	800e6e4 <xQueueReceiveFromISR+0x40>
 800e6e0:	2301      	movs	r3, #1
 800e6e2:	e000      	b.n	800e6e6 <xQueueReceiveFromISR+0x42>
 800e6e4:	2300      	movs	r3, #0
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d10b      	bne.n	800e702 <xQueueReceiveFromISR+0x5e>
 800e6ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6ee:	b672      	cpsid	i
 800e6f0:	f383 8811 	msr	BASEPRI, r3
 800e6f4:	f3bf 8f6f 	isb	sy
 800e6f8:	f3bf 8f4f 	dsb	sy
 800e6fc:	b662      	cpsie	i
 800e6fe:	61fb      	str	r3, [r7, #28]
 800e700:	e7fe      	b.n	800e700 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e702:	f001 ff91 	bl	8010628 <vPortValidateInterruptPriority>
	__asm volatile
 800e706:	f3ef 8211 	mrs	r2, BASEPRI
 800e70a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e70e:	b672      	cpsid	i
 800e710:	f383 8811 	msr	BASEPRI, r3
 800e714:	f3bf 8f6f 	isb	sy
 800e718:	f3bf 8f4f 	dsb	sy
 800e71c:	b662      	cpsie	i
 800e71e:	61ba      	str	r2, [r7, #24]
 800e720:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e722:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e724:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e72a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e72c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d02f      	beq.n	800e792 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800e732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e734:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e738:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e73c:	68b9      	ldr	r1, [r7, #8]
 800e73e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e740:	f000 f8d9 	bl	800e8f6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e746:	1e5a      	subs	r2, r3, #1
 800e748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e74a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800e74c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e750:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e754:	d112      	bne.n	800e77c <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e758:	691b      	ldr	r3, [r3, #16]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d016      	beq.n	800e78c <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e75e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e760:	3310      	adds	r3, #16
 800e762:	4618      	mov	r0, r3
 800e764:	f000 fe70 	bl	800f448 <xTaskRemoveFromEventList>
 800e768:	4603      	mov	r3, r0
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d00e      	beq.n	800e78c <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	2b00      	cmp	r3, #0
 800e772:	d00b      	beq.n	800e78c <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	2201      	movs	r2, #1
 800e778:	601a      	str	r2, [r3, #0]
 800e77a:	e007      	b.n	800e78c <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e77c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e780:	3301      	adds	r3, #1
 800e782:	b2db      	uxtb	r3, r3
 800e784:	b25a      	sxtb	r2, r3
 800e786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e788:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800e78c:	2301      	movs	r3, #1
 800e78e:	637b      	str	r3, [r7, #52]	; 0x34
 800e790:	e001      	b.n	800e796 <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 800e792:	2300      	movs	r3, #0
 800e794:	637b      	str	r3, [r7, #52]	; 0x34
 800e796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e798:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e79a:	693b      	ldr	r3, [r7, #16]
 800e79c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e7a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e7a2:	4618      	mov	r0, r3
 800e7a4:	3738      	adds	r7, #56	; 0x38
 800e7a6:	46bd      	mov	sp, r7
 800e7a8:	bd80      	pop	{r7, pc}

0800e7aa <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800e7aa:	b580      	push	{r7, lr}
 800e7ac:	b084      	sub	sp, #16
 800e7ae:	af00      	add	r7, sp, #0
 800e7b0:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d10b      	bne.n	800e7d4 <vQueueDelete+0x2a>
	__asm volatile
 800e7bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7c0:	b672      	cpsid	i
 800e7c2:	f383 8811 	msr	BASEPRI, r3
 800e7c6:	f3bf 8f6f 	isb	sy
 800e7ca:	f3bf 8f4f 	dsb	sy
 800e7ce:	b662      	cpsie	i
 800e7d0:	60bb      	str	r3, [r7, #8]
 800e7d2:	e7fe      	b.n	800e7d2 <vQueueDelete+0x28>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800e7d4:	68f8      	ldr	r0, [r7, #12]
 800e7d6:	f000 f95d 	bl	800ea94 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d102      	bne.n	800e7ea <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800e7e4:	68f8      	ldr	r0, [r7, #12]
 800e7e6:	f002 f829 	bl	801083c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800e7ea:	bf00      	nop
 800e7ec:	3710      	adds	r7, #16
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	bd80      	pop	{r7, pc}

0800e7f2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800e7f2:	b480      	push	{r7}
 800e7f4:	b085      	sub	sp, #20
 800e7f6:	af00      	add	r7, sp, #0
 800e7f8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d006      	beq.n	800e810 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800e80c:	60fb      	str	r3, [r7, #12]
 800e80e:	e001      	b.n	800e814 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800e810:	2300      	movs	r3, #0
 800e812:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800e814:	68fb      	ldr	r3, [r7, #12]
	}
 800e816:	4618      	mov	r0, r3
 800e818:	3714      	adds	r7, #20
 800e81a:	46bd      	mov	sp, r7
 800e81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e820:	4770      	bx	lr

0800e822 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e822:	b580      	push	{r7, lr}
 800e824:	b086      	sub	sp, #24
 800e826:	af00      	add	r7, sp, #0
 800e828:	60f8      	str	r0, [r7, #12]
 800e82a:	60b9      	str	r1, [r7, #8]
 800e82c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e82e:	2300      	movs	r3, #0
 800e830:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e836:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d10d      	bne.n	800e85c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d14d      	bne.n	800e8e4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	689b      	ldr	r3, [r3, #8]
 800e84c:	4618      	mov	r0, r3
 800e84e:	f001 f84f 	bl	800f8f0 <xTaskPriorityDisinherit>
 800e852:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	2200      	movs	r2, #0
 800e858:	609a      	str	r2, [r3, #8]
 800e85a:	e043      	b.n	800e8e4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d119      	bne.n	800e896 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	6858      	ldr	r0, [r3, #4]
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e86a:	461a      	mov	r2, r3
 800e86c:	68b9      	ldr	r1, [r7, #8]
 800e86e:	f002 fe9f 	bl	80115b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	685a      	ldr	r2, [r3, #4]
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e87a:	441a      	add	r2, r3
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	685a      	ldr	r2, [r3, #4]
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	689b      	ldr	r3, [r3, #8]
 800e888:	429a      	cmp	r2, r3
 800e88a:	d32b      	bcc.n	800e8e4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	681a      	ldr	r2, [r3, #0]
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	605a      	str	r2, [r3, #4]
 800e894:	e026      	b.n	800e8e4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	68d8      	ldr	r0, [r3, #12]
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e89e:	461a      	mov	r2, r3
 800e8a0:	68b9      	ldr	r1, [r7, #8]
 800e8a2:	f002 fe85 	bl	80115b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	68da      	ldr	r2, [r3, #12]
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8ae:	425b      	negs	r3, r3
 800e8b0:	441a      	add	r2, r3
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	68da      	ldr	r2, [r3, #12]
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	429a      	cmp	r2, r3
 800e8c0:	d207      	bcs.n	800e8d2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	689a      	ldr	r2, [r3, #8]
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8ca:	425b      	negs	r3, r3
 800e8cc:	441a      	add	r2, r3
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	2b02      	cmp	r3, #2
 800e8d6:	d105      	bne.n	800e8e4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e8d8:	693b      	ldr	r3, [r7, #16]
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d002      	beq.n	800e8e4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e8de:	693b      	ldr	r3, [r7, #16]
 800e8e0:	3b01      	subs	r3, #1
 800e8e2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e8e4:	693b      	ldr	r3, [r7, #16]
 800e8e6:	1c5a      	adds	r2, r3, #1
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e8ec:	697b      	ldr	r3, [r7, #20]
}
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	3718      	adds	r7, #24
 800e8f2:	46bd      	mov	sp, r7
 800e8f4:	bd80      	pop	{r7, pc}

0800e8f6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e8f6:	b580      	push	{r7, lr}
 800e8f8:	b082      	sub	sp, #8
 800e8fa:	af00      	add	r7, sp, #0
 800e8fc:	6078      	str	r0, [r7, #4]
 800e8fe:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e904:	2b00      	cmp	r3, #0
 800e906:	d018      	beq.n	800e93a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	68da      	ldr	r2, [r3, #12]
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e910:	441a      	add	r2, r3
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	68da      	ldr	r2, [r3, #12]
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	689b      	ldr	r3, [r3, #8]
 800e91e:	429a      	cmp	r2, r3
 800e920:	d303      	bcc.n	800e92a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	681a      	ldr	r2, [r3, #0]
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	68d9      	ldr	r1, [r3, #12]
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e932:	461a      	mov	r2, r3
 800e934:	6838      	ldr	r0, [r7, #0]
 800e936:	f002 fe3b 	bl	80115b0 <memcpy>
	}
}
 800e93a:	bf00      	nop
 800e93c:	3708      	adds	r7, #8
 800e93e:	46bd      	mov	sp, r7
 800e940:	bd80      	pop	{r7, pc}

0800e942 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e942:	b580      	push	{r7, lr}
 800e944:	b084      	sub	sp, #16
 800e946:	af00      	add	r7, sp, #0
 800e948:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e94a:	f001 fd8d 	bl	8010468 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e954:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e956:	e011      	b.n	800e97c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d012      	beq.n	800e986 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	3324      	adds	r3, #36	; 0x24
 800e964:	4618      	mov	r0, r3
 800e966:	f000 fd6f 	bl	800f448 <xTaskRemoveFromEventList>
 800e96a:	4603      	mov	r3, r0
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d001      	beq.n	800e974 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e970:	f000 fe48 	bl	800f604 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e974:	7bfb      	ldrb	r3, [r7, #15]
 800e976:	3b01      	subs	r3, #1
 800e978:	b2db      	uxtb	r3, r3
 800e97a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e97c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e980:	2b00      	cmp	r3, #0
 800e982:	dce9      	bgt.n	800e958 <prvUnlockQueue+0x16>
 800e984:	e000      	b.n	800e988 <prvUnlockQueue+0x46>
					break;
 800e986:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	22ff      	movs	r2, #255	; 0xff
 800e98c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e990:	f001 fd9c 	bl	80104cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e994:	f001 fd68 	bl	8010468 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e99e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e9a0:	e011      	b.n	800e9c6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	691b      	ldr	r3, [r3, #16]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d012      	beq.n	800e9d0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	3310      	adds	r3, #16
 800e9ae:	4618      	mov	r0, r3
 800e9b0:	f000 fd4a 	bl	800f448 <xTaskRemoveFromEventList>
 800e9b4:	4603      	mov	r3, r0
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d001      	beq.n	800e9be <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e9ba:	f000 fe23 	bl	800f604 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e9be:	7bbb      	ldrb	r3, [r7, #14]
 800e9c0:	3b01      	subs	r3, #1
 800e9c2:	b2db      	uxtb	r3, r3
 800e9c4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e9c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	dce9      	bgt.n	800e9a2 <prvUnlockQueue+0x60>
 800e9ce:	e000      	b.n	800e9d2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e9d0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	22ff      	movs	r2, #255	; 0xff
 800e9d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e9da:	f001 fd77 	bl	80104cc <vPortExitCritical>
}
 800e9de:	bf00      	nop
 800e9e0:	3710      	adds	r7, #16
 800e9e2:	46bd      	mov	sp, r7
 800e9e4:	bd80      	pop	{r7, pc}

0800e9e6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e9e6:	b580      	push	{r7, lr}
 800e9e8:	b084      	sub	sp, #16
 800e9ea:	af00      	add	r7, sp, #0
 800e9ec:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e9ee:	f001 fd3b 	bl	8010468 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d102      	bne.n	800ea00 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e9fa:	2301      	movs	r3, #1
 800e9fc:	60fb      	str	r3, [r7, #12]
 800e9fe:	e001      	b.n	800ea04 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ea00:	2300      	movs	r3, #0
 800ea02:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ea04:	f001 fd62 	bl	80104cc <vPortExitCritical>

	return xReturn;
 800ea08:	68fb      	ldr	r3, [r7, #12]
}
 800ea0a:	4618      	mov	r0, r3
 800ea0c:	3710      	adds	r7, #16
 800ea0e:	46bd      	mov	sp, r7
 800ea10:	bd80      	pop	{r7, pc}

0800ea12 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ea12:	b580      	push	{r7, lr}
 800ea14:	b084      	sub	sp, #16
 800ea16:	af00      	add	r7, sp, #0
 800ea18:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ea1a:	f001 fd25 	bl	8010468 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea26:	429a      	cmp	r2, r3
 800ea28:	d102      	bne.n	800ea30 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ea2a:	2301      	movs	r3, #1
 800ea2c:	60fb      	str	r3, [r7, #12]
 800ea2e:	e001      	b.n	800ea34 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ea30:	2300      	movs	r3, #0
 800ea32:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ea34:	f001 fd4a 	bl	80104cc <vPortExitCritical>

	return xReturn;
 800ea38:	68fb      	ldr	r3, [r7, #12]
}
 800ea3a:	4618      	mov	r0, r3
 800ea3c:	3710      	adds	r7, #16
 800ea3e:	46bd      	mov	sp, r7
 800ea40:	bd80      	pop	{r7, pc}
	...

0800ea44 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ea44:	b480      	push	{r7}
 800ea46:	b085      	sub	sp, #20
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	6078      	str	r0, [r7, #4]
 800ea4c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ea4e:	2300      	movs	r3, #0
 800ea50:	60fb      	str	r3, [r7, #12]
 800ea52:	e014      	b.n	800ea7e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ea54:	4a0e      	ldr	r2, [pc, #56]	; (800ea90 <vQueueAddToRegistry+0x4c>)
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d10b      	bne.n	800ea78 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ea60:	490b      	ldr	r1, [pc, #44]	; (800ea90 <vQueueAddToRegistry+0x4c>)
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	683a      	ldr	r2, [r7, #0]
 800ea66:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ea6a:	4a09      	ldr	r2, [pc, #36]	; (800ea90 <vQueueAddToRegistry+0x4c>)
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	00db      	lsls	r3, r3, #3
 800ea70:	4413      	add	r3, r2
 800ea72:	687a      	ldr	r2, [r7, #4]
 800ea74:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ea76:	e005      	b.n	800ea84 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	3301      	adds	r3, #1
 800ea7c:	60fb      	str	r3, [r7, #12]
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	2b07      	cmp	r3, #7
 800ea82:	d9e7      	bls.n	800ea54 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ea84:	bf00      	nop
 800ea86:	3714      	adds	r7, #20
 800ea88:	46bd      	mov	sp, r7
 800ea8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea8e:	4770      	bx	lr
 800ea90:	200087b4 	.word	0x200087b4

0800ea94 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800ea94:	b480      	push	{r7}
 800ea96:	b085      	sub	sp, #20
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ea9c:	2300      	movs	r3, #0
 800ea9e:	60fb      	str	r3, [r7, #12]
 800eaa0:	e016      	b.n	800ead0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800eaa2:	4a10      	ldr	r2, [pc, #64]	; (800eae4 <vQueueUnregisterQueue+0x50>)
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	00db      	lsls	r3, r3, #3
 800eaa8:	4413      	add	r3, r2
 800eaaa:	685b      	ldr	r3, [r3, #4]
 800eaac:	687a      	ldr	r2, [r7, #4]
 800eaae:	429a      	cmp	r2, r3
 800eab0:	d10b      	bne.n	800eaca <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800eab2:	4a0c      	ldr	r2, [pc, #48]	; (800eae4 <vQueueUnregisterQueue+0x50>)
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	2100      	movs	r1, #0
 800eab8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800eabc:	4a09      	ldr	r2, [pc, #36]	; (800eae4 <vQueueUnregisterQueue+0x50>)
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	00db      	lsls	r3, r3, #3
 800eac2:	4413      	add	r3, r2
 800eac4:	2200      	movs	r2, #0
 800eac6:	605a      	str	r2, [r3, #4]
				break;
 800eac8:	e005      	b.n	800ead6 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	3301      	adds	r3, #1
 800eace:	60fb      	str	r3, [r7, #12]
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	2b07      	cmp	r3, #7
 800ead4:	d9e5      	bls.n	800eaa2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800ead6:	bf00      	nop
 800ead8:	3714      	adds	r7, #20
 800eada:	46bd      	mov	sp, r7
 800eadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae0:	4770      	bx	lr
 800eae2:	bf00      	nop
 800eae4:	200087b4 	.word	0x200087b4

0800eae8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800eae8:	b580      	push	{r7, lr}
 800eaea:	b086      	sub	sp, #24
 800eaec:	af00      	add	r7, sp, #0
 800eaee:	60f8      	str	r0, [r7, #12]
 800eaf0:	60b9      	str	r1, [r7, #8]
 800eaf2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800eaf8:	f001 fcb6 	bl	8010468 <vPortEnterCritical>
 800eafc:	697b      	ldr	r3, [r7, #20]
 800eafe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800eb02:	b25b      	sxtb	r3, r3
 800eb04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb08:	d103      	bne.n	800eb12 <vQueueWaitForMessageRestricted+0x2a>
 800eb0a:	697b      	ldr	r3, [r7, #20]
 800eb0c:	2200      	movs	r2, #0
 800eb0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eb12:	697b      	ldr	r3, [r7, #20]
 800eb14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eb18:	b25b      	sxtb	r3, r3
 800eb1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb1e:	d103      	bne.n	800eb28 <vQueueWaitForMessageRestricted+0x40>
 800eb20:	697b      	ldr	r3, [r7, #20]
 800eb22:	2200      	movs	r2, #0
 800eb24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eb28:	f001 fcd0 	bl	80104cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800eb2c:	697b      	ldr	r3, [r7, #20]
 800eb2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d106      	bne.n	800eb42 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800eb34:	697b      	ldr	r3, [r7, #20]
 800eb36:	3324      	adds	r3, #36	; 0x24
 800eb38:	687a      	ldr	r2, [r7, #4]
 800eb3a:	68b9      	ldr	r1, [r7, #8]
 800eb3c:	4618      	mov	r0, r3
 800eb3e:	f000 fc57 	bl	800f3f0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800eb42:	6978      	ldr	r0, [r7, #20]
 800eb44:	f7ff fefd 	bl	800e942 <prvUnlockQueue>
	}
 800eb48:	bf00      	nop
 800eb4a:	3718      	adds	r7, #24
 800eb4c:	46bd      	mov	sp, r7
 800eb4e:	bd80      	pop	{r7, pc}

0800eb50 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800eb50:	b580      	push	{r7, lr}
 800eb52:	b08e      	sub	sp, #56	; 0x38
 800eb54:	af04      	add	r7, sp, #16
 800eb56:	60f8      	str	r0, [r7, #12]
 800eb58:	60b9      	str	r1, [r7, #8]
 800eb5a:	607a      	str	r2, [r7, #4]
 800eb5c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800eb5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d10b      	bne.n	800eb7c <xTaskCreateStatic+0x2c>
 800eb64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb68:	b672      	cpsid	i
 800eb6a:	f383 8811 	msr	BASEPRI, r3
 800eb6e:	f3bf 8f6f 	isb	sy
 800eb72:	f3bf 8f4f 	dsb	sy
 800eb76:	b662      	cpsie	i
 800eb78:	623b      	str	r3, [r7, #32]
 800eb7a:	e7fe      	b.n	800eb7a <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 800eb7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d10b      	bne.n	800eb9a <xTaskCreateStatic+0x4a>
 800eb82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb86:	b672      	cpsid	i
 800eb88:	f383 8811 	msr	BASEPRI, r3
 800eb8c:	f3bf 8f6f 	isb	sy
 800eb90:	f3bf 8f4f 	dsb	sy
 800eb94:	b662      	cpsie	i
 800eb96:	61fb      	str	r3, [r7, #28]
 800eb98:	e7fe      	b.n	800eb98 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800eb9a:	235c      	movs	r3, #92	; 0x5c
 800eb9c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800eb9e:	693b      	ldr	r3, [r7, #16]
 800eba0:	2b5c      	cmp	r3, #92	; 0x5c
 800eba2:	d00b      	beq.n	800ebbc <xTaskCreateStatic+0x6c>
 800eba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eba8:	b672      	cpsid	i
 800ebaa:	f383 8811 	msr	BASEPRI, r3
 800ebae:	f3bf 8f6f 	isb	sy
 800ebb2:	f3bf 8f4f 	dsb	sy
 800ebb6:	b662      	cpsie	i
 800ebb8:	61bb      	str	r3, [r7, #24]
 800ebba:	e7fe      	b.n	800ebba <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ebbc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ebbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d01e      	beq.n	800ec02 <xTaskCreateStatic+0xb2>
 800ebc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d01b      	beq.n	800ec02 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ebca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebcc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ebce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ebd2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ebd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebd6:	2202      	movs	r2, #2
 800ebd8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ebdc:	2300      	movs	r3, #0
 800ebde:	9303      	str	r3, [sp, #12]
 800ebe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebe2:	9302      	str	r3, [sp, #8]
 800ebe4:	f107 0314 	add.w	r3, r7, #20
 800ebe8:	9301      	str	r3, [sp, #4]
 800ebea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebec:	9300      	str	r3, [sp, #0]
 800ebee:	683b      	ldr	r3, [r7, #0]
 800ebf0:	687a      	ldr	r2, [r7, #4]
 800ebf2:	68b9      	ldr	r1, [r7, #8]
 800ebf4:	68f8      	ldr	r0, [r7, #12]
 800ebf6:	f000 f850 	bl	800ec9a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ebfa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ebfc:	f000 f8de 	bl	800edbc <prvAddNewTaskToReadyList>
 800ec00:	e001      	b.n	800ec06 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800ec02:	2300      	movs	r3, #0
 800ec04:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ec06:	697b      	ldr	r3, [r7, #20]
	}
 800ec08:	4618      	mov	r0, r3
 800ec0a:	3728      	adds	r7, #40	; 0x28
 800ec0c:	46bd      	mov	sp, r7
 800ec0e:	bd80      	pop	{r7, pc}

0800ec10 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ec10:	b580      	push	{r7, lr}
 800ec12:	b08c      	sub	sp, #48	; 0x30
 800ec14:	af04      	add	r7, sp, #16
 800ec16:	60f8      	str	r0, [r7, #12]
 800ec18:	60b9      	str	r1, [r7, #8]
 800ec1a:	603b      	str	r3, [r7, #0]
 800ec1c:	4613      	mov	r3, r2
 800ec1e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ec20:	88fb      	ldrh	r3, [r7, #6]
 800ec22:	009b      	lsls	r3, r3, #2
 800ec24:	4618      	mov	r0, r3
 800ec26:	f001 fd41 	bl	80106ac <pvPortMalloc>
 800ec2a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ec2c:	697b      	ldr	r3, [r7, #20]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d00e      	beq.n	800ec50 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ec32:	205c      	movs	r0, #92	; 0x5c
 800ec34:	f001 fd3a 	bl	80106ac <pvPortMalloc>
 800ec38:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ec3a:	69fb      	ldr	r3, [r7, #28]
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d003      	beq.n	800ec48 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ec40:	69fb      	ldr	r3, [r7, #28]
 800ec42:	697a      	ldr	r2, [r7, #20]
 800ec44:	631a      	str	r2, [r3, #48]	; 0x30
 800ec46:	e005      	b.n	800ec54 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ec48:	6978      	ldr	r0, [r7, #20]
 800ec4a:	f001 fdf7 	bl	801083c <vPortFree>
 800ec4e:	e001      	b.n	800ec54 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ec50:	2300      	movs	r3, #0
 800ec52:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ec54:	69fb      	ldr	r3, [r7, #28]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d017      	beq.n	800ec8a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ec5a:	69fb      	ldr	r3, [r7, #28]
 800ec5c:	2200      	movs	r2, #0
 800ec5e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ec62:	88fa      	ldrh	r2, [r7, #6]
 800ec64:	2300      	movs	r3, #0
 800ec66:	9303      	str	r3, [sp, #12]
 800ec68:	69fb      	ldr	r3, [r7, #28]
 800ec6a:	9302      	str	r3, [sp, #8]
 800ec6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec6e:	9301      	str	r3, [sp, #4]
 800ec70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec72:	9300      	str	r3, [sp, #0]
 800ec74:	683b      	ldr	r3, [r7, #0]
 800ec76:	68b9      	ldr	r1, [r7, #8]
 800ec78:	68f8      	ldr	r0, [r7, #12]
 800ec7a:	f000 f80e 	bl	800ec9a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ec7e:	69f8      	ldr	r0, [r7, #28]
 800ec80:	f000 f89c 	bl	800edbc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ec84:	2301      	movs	r3, #1
 800ec86:	61bb      	str	r3, [r7, #24]
 800ec88:	e002      	b.n	800ec90 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ec8a:	f04f 33ff 	mov.w	r3, #4294967295
 800ec8e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ec90:	69bb      	ldr	r3, [r7, #24]
	}
 800ec92:	4618      	mov	r0, r3
 800ec94:	3720      	adds	r7, #32
 800ec96:	46bd      	mov	sp, r7
 800ec98:	bd80      	pop	{r7, pc}

0800ec9a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ec9a:	b580      	push	{r7, lr}
 800ec9c:	b088      	sub	sp, #32
 800ec9e:	af00      	add	r7, sp, #0
 800eca0:	60f8      	str	r0, [r7, #12]
 800eca2:	60b9      	str	r1, [r7, #8]
 800eca4:	607a      	str	r2, [r7, #4]
 800eca6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800eca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecaa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	009b      	lsls	r3, r3, #2
 800ecb0:	461a      	mov	r2, r3
 800ecb2:	21a5      	movs	r1, #165	; 0xa5
 800ecb4:	f002 fc87 	bl	80115c6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ecb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ecbc:	6879      	ldr	r1, [r7, #4]
 800ecbe:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800ecc2:	440b      	add	r3, r1
 800ecc4:	009b      	lsls	r3, r3, #2
 800ecc6:	4413      	add	r3, r2
 800ecc8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ecca:	69bb      	ldr	r3, [r7, #24]
 800eccc:	f023 0307 	bic.w	r3, r3, #7
 800ecd0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ecd2:	69bb      	ldr	r3, [r7, #24]
 800ecd4:	f003 0307 	and.w	r3, r3, #7
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d00b      	beq.n	800ecf4 <prvInitialiseNewTask+0x5a>
 800ecdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ece0:	b672      	cpsid	i
 800ece2:	f383 8811 	msr	BASEPRI, r3
 800ece6:	f3bf 8f6f 	isb	sy
 800ecea:	f3bf 8f4f 	dsb	sy
 800ecee:	b662      	cpsie	i
 800ecf0:	617b      	str	r3, [r7, #20]
 800ecf2:	e7fe      	b.n	800ecf2 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ecf4:	68bb      	ldr	r3, [r7, #8]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d01f      	beq.n	800ed3a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ecfa:	2300      	movs	r3, #0
 800ecfc:	61fb      	str	r3, [r7, #28]
 800ecfe:	e012      	b.n	800ed26 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ed00:	68ba      	ldr	r2, [r7, #8]
 800ed02:	69fb      	ldr	r3, [r7, #28]
 800ed04:	4413      	add	r3, r2
 800ed06:	7819      	ldrb	r1, [r3, #0]
 800ed08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed0a:	69fb      	ldr	r3, [r7, #28]
 800ed0c:	4413      	add	r3, r2
 800ed0e:	3334      	adds	r3, #52	; 0x34
 800ed10:	460a      	mov	r2, r1
 800ed12:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ed14:	68ba      	ldr	r2, [r7, #8]
 800ed16:	69fb      	ldr	r3, [r7, #28]
 800ed18:	4413      	add	r3, r2
 800ed1a:	781b      	ldrb	r3, [r3, #0]
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d006      	beq.n	800ed2e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ed20:	69fb      	ldr	r3, [r7, #28]
 800ed22:	3301      	adds	r3, #1
 800ed24:	61fb      	str	r3, [r7, #28]
 800ed26:	69fb      	ldr	r3, [r7, #28]
 800ed28:	2b0f      	cmp	r3, #15
 800ed2a:	d9e9      	bls.n	800ed00 <prvInitialiseNewTask+0x66>
 800ed2c:	e000      	b.n	800ed30 <prvInitialiseNewTask+0x96>
			{
				break;
 800ed2e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ed30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed32:	2200      	movs	r2, #0
 800ed34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ed38:	e003      	b.n	800ed42 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ed3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed3c:	2200      	movs	r2, #0
 800ed3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ed42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed44:	2b37      	cmp	r3, #55	; 0x37
 800ed46:	d901      	bls.n	800ed4c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ed48:	2337      	movs	r3, #55	; 0x37
 800ed4a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ed4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ed50:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ed52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ed56:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ed58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed5a:	2200      	movs	r2, #0
 800ed5c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ed5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed60:	3304      	adds	r3, #4
 800ed62:	4618      	mov	r0, r3
 800ed64:	f7fe fd76 	bl	800d854 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ed68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed6a:	3318      	adds	r3, #24
 800ed6c:	4618      	mov	r0, r3
 800ed6e:	f7fe fd71 	bl	800d854 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ed72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed76:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed7a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ed7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed80:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ed82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed86:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ed88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed8a:	2200      	movs	r2, #0
 800ed8c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ed8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed90:	2200      	movs	r2, #0
 800ed92:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ed96:	683a      	ldr	r2, [r7, #0]
 800ed98:	68f9      	ldr	r1, [r7, #12]
 800ed9a:	69b8      	ldr	r0, [r7, #24]
 800ed9c:	f001 fa58 	bl	8010250 <pxPortInitialiseStack>
 800eda0:	4602      	mov	r2, r0
 800eda2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eda4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800eda6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d002      	beq.n	800edb2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800edac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800edb0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800edb2:	bf00      	nop
 800edb4:	3720      	adds	r7, #32
 800edb6:	46bd      	mov	sp, r7
 800edb8:	bd80      	pop	{r7, pc}
	...

0800edbc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800edbc:	b580      	push	{r7, lr}
 800edbe:	b082      	sub	sp, #8
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800edc4:	f001 fb50 	bl	8010468 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800edc8:	4b2d      	ldr	r3, [pc, #180]	; (800ee80 <prvAddNewTaskToReadyList+0xc4>)
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	3301      	adds	r3, #1
 800edce:	4a2c      	ldr	r2, [pc, #176]	; (800ee80 <prvAddNewTaskToReadyList+0xc4>)
 800edd0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800edd2:	4b2c      	ldr	r3, [pc, #176]	; (800ee84 <prvAddNewTaskToReadyList+0xc8>)
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d109      	bne.n	800edee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800edda:	4a2a      	ldr	r2, [pc, #168]	; (800ee84 <prvAddNewTaskToReadyList+0xc8>)
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ede0:	4b27      	ldr	r3, [pc, #156]	; (800ee80 <prvAddNewTaskToReadyList+0xc4>)
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	2b01      	cmp	r3, #1
 800ede6:	d110      	bne.n	800ee0a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ede8:	f000 fc30 	bl	800f64c <prvInitialiseTaskLists>
 800edec:	e00d      	b.n	800ee0a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800edee:	4b26      	ldr	r3, [pc, #152]	; (800ee88 <prvAddNewTaskToReadyList+0xcc>)
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d109      	bne.n	800ee0a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800edf6:	4b23      	ldr	r3, [pc, #140]	; (800ee84 <prvAddNewTaskToReadyList+0xc8>)
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee00:	429a      	cmp	r2, r3
 800ee02:	d802      	bhi.n	800ee0a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ee04:	4a1f      	ldr	r2, [pc, #124]	; (800ee84 <prvAddNewTaskToReadyList+0xc8>)
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ee0a:	4b20      	ldr	r3, [pc, #128]	; (800ee8c <prvAddNewTaskToReadyList+0xd0>)
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	3301      	adds	r3, #1
 800ee10:	4a1e      	ldr	r2, [pc, #120]	; (800ee8c <prvAddNewTaskToReadyList+0xd0>)
 800ee12:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ee14:	4b1d      	ldr	r3, [pc, #116]	; (800ee8c <prvAddNewTaskToReadyList+0xd0>)
 800ee16:	681a      	ldr	r2, [r3, #0]
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee20:	4b1b      	ldr	r3, [pc, #108]	; (800ee90 <prvAddNewTaskToReadyList+0xd4>)
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	429a      	cmp	r2, r3
 800ee26:	d903      	bls.n	800ee30 <prvAddNewTaskToReadyList+0x74>
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee2c:	4a18      	ldr	r2, [pc, #96]	; (800ee90 <prvAddNewTaskToReadyList+0xd4>)
 800ee2e:	6013      	str	r3, [r2, #0]
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee34:	4613      	mov	r3, r2
 800ee36:	009b      	lsls	r3, r3, #2
 800ee38:	4413      	add	r3, r2
 800ee3a:	009b      	lsls	r3, r3, #2
 800ee3c:	4a15      	ldr	r2, [pc, #84]	; (800ee94 <prvAddNewTaskToReadyList+0xd8>)
 800ee3e:	441a      	add	r2, r3
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	3304      	adds	r3, #4
 800ee44:	4619      	mov	r1, r3
 800ee46:	4610      	mov	r0, r2
 800ee48:	f7fe fd11 	bl	800d86e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ee4c:	f001 fb3e 	bl	80104cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ee50:	4b0d      	ldr	r3, [pc, #52]	; (800ee88 <prvAddNewTaskToReadyList+0xcc>)
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d00e      	beq.n	800ee76 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ee58:	4b0a      	ldr	r3, [pc, #40]	; (800ee84 <prvAddNewTaskToReadyList+0xc8>)
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee62:	429a      	cmp	r2, r3
 800ee64:	d207      	bcs.n	800ee76 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ee66:	4b0c      	ldr	r3, [pc, #48]	; (800ee98 <prvAddNewTaskToReadyList+0xdc>)
 800ee68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee6c:	601a      	str	r2, [r3, #0]
 800ee6e:	f3bf 8f4f 	dsb	sy
 800ee72:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ee76:	bf00      	nop
 800ee78:	3708      	adds	r7, #8
 800ee7a:	46bd      	mov	sp, r7
 800ee7c:	bd80      	pop	{r7, pc}
 800ee7e:	bf00      	nop
 800ee80:	20000de4 	.word	0x20000de4
 800ee84:	20000910 	.word	0x20000910
 800ee88:	20000df0 	.word	0x20000df0
 800ee8c:	20000e00 	.word	0x20000e00
 800ee90:	20000dec 	.word	0x20000dec
 800ee94:	20000914 	.word	0x20000914
 800ee98:	e000ed04 	.word	0xe000ed04

0800ee9c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ee9c:	b580      	push	{r7, lr}
 800ee9e:	b084      	sub	sp, #16
 800eea0:	af00      	add	r7, sp, #0
 800eea2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800eea4:	2300      	movs	r3, #0
 800eea6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d018      	beq.n	800eee0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800eeae:	4b14      	ldr	r3, [pc, #80]	; (800ef00 <vTaskDelay+0x64>)
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d00b      	beq.n	800eece <vTaskDelay+0x32>
 800eeb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeba:	b672      	cpsid	i
 800eebc:	f383 8811 	msr	BASEPRI, r3
 800eec0:	f3bf 8f6f 	isb	sy
 800eec4:	f3bf 8f4f 	dsb	sy
 800eec8:	b662      	cpsie	i
 800eeca:	60bb      	str	r3, [r7, #8]
 800eecc:	e7fe      	b.n	800eecc <vTaskDelay+0x30>
			vTaskSuspendAll();
 800eece:	f000 f883 	bl	800efd8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800eed2:	2100      	movs	r1, #0
 800eed4:	6878      	ldr	r0, [r7, #4]
 800eed6:	f000 fe13 	bl	800fb00 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800eeda:	f000 f88b 	bl	800eff4 <xTaskResumeAll>
 800eede:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d107      	bne.n	800eef6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800eee6:	4b07      	ldr	r3, [pc, #28]	; (800ef04 <vTaskDelay+0x68>)
 800eee8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eeec:	601a      	str	r2, [r3, #0]
 800eeee:	f3bf 8f4f 	dsb	sy
 800eef2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800eef6:	bf00      	nop
 800eef8:	3710      	adds	r7, #16
 800eefa:	46bd      	mov	sp, r7
 800eefc:	bd80      	pop	{r7, pc}
 800eefe:	bf00      	nop
 800ef00:	20000e0c 	.word	0x20000e0c
 800ef04:	e000ed04 	.word	0xe000ed04

0800ef08 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ef08:	b580      	push	{r7, lr}
 800ef0a:	b08a      	sub	sp, #40	; 0x28
 800ef0c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ef0e:	2300      	movs	r3, #0
 800ef10:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ef12:	2300      	movs	r3, #0
 800ef14:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ef16:	463a      	mov	r2, r7
 800ef18:	1d39      	adds	r1, r7, #4
 800ef1a:	f107 0308 	add.w	r3, r7, #8
 800ef1e:	4618      	mov	r0, r3
 800ef20:	f7fe fc44 	bl	800d7ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ef24:	6839      	ldr	r1, [r7, #0]
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	68ba      	ldr	r2, [r7, #8]
 800ef2a:	9202      	str	r2, [sp, #8]
 800ef2c:	9301      	str	r3, [sp, #4]
 800ef2e:	2300      	movs	r3, #0
 800ef30:	9300      	str	r3, [sp, #0]
 800ef32:	2300      	movs	r3, #0
 800ef34:	460a      	mov	r2, r1
 800ef36:	4922      	ldr	r1, [pc, #136]	; (800efc0 <vTaskStartScheduler+0xb8>)
 800ef38:	4822      	ldr	r0, [pc, #136]	; (800efc4 <vTaskStartScheduler+0xbc>)
 800ef3a:	f7ff fe09 	bl	800eb50 <xTaskCreateStatic>
 800ef3e:	4602      	mov	r2, r0
 800ef40:	4b21      	ldr	r3, [pc, #132]	; (800efc8 <vTaskStartScheduler+0xc0>)
 800ef42:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ef44:	4b20      	ldr	r3, [pc, #128]	; (800efc8 <vTaskStartScheduler+0xc0>)
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d002      	beq.n	800ef52 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ef4c:	2301      	movs	r3, #1
 800ef4e:	617b      	str	r3, [r7, #20]
 800ef50:	e001      	b.n	800ef56 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ef52:	2300      	movs	r3, #0
 800ef54:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ef56:	697b      	ldr	r3, [r7, #20]
 800ef58:	2b01      	cmp	r3, #1
 800ef5a:	d102      	bne.n	800ef62 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ef5c:	f000 fe24 	bl	800fba8 <xTimerCreateTimerTask>
 800ef60:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ef62:	697b      	ldr	r3, [r7, #20]
 800ef64:	2b01      	cmp	r3, #1
 800ef66:	d117      	bne.n	800ef98 <vTaskStartScheduler+0x90>
 800ef68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef6c:	b672      	cpsid	i
 800ef6e:	f383 8811 	msr	BASEPRI, r3
 800ef72:	f3bf 8f6f 	isb	sy
 800ef76:	f3bf 8f4f 	dsb	sy
 800ef7a:	b662      	cpsie	i
 800ef7c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ef7e:	4b13      	ldr	r3, [pc, #76]	; (800efcc <vTaskStartScheduler+0xc4>)
 800ef80:	f04f 32ff 	mov.w	r2, #4294967295
 800ef84:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ef86:	4b12      	ldr	r3, [pc, #72]	; (800efd0 <vTaskStartScheduler+0xc8>)
 800ef88:	2201      	movs	r2, #1
 800ef8a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ef8c:	4b11      	ldr	r3, [pc, #68]	; (800efd4 <vTaskStartScheduler+0xcc>)
 800ef8e:	2200      	movs	r2, #0
 800ef90:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ef92:	f001 f9ed 	bl	8010370 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ef96:	e00f      	b.n	800efb8 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ef98:	697b      	ldr	r3, [r7, #20]
 800ef9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef9e:	d10b      	bne.n	800efb8 <vTaskStartScheduler+0xb0>
 800efa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efa4:	b672      	cpsid	i
 800efa6:	f383 8811 	msr	BASEPRI, r3
 800efaa:	f3bf 8f6f 	isb	sy
 800efae:	f3bf 8f4f 	dsb	sy
 800efb2:	b662      	cpsie	i
 800efb4:	60fb      	str	r3, [r7, #12]
 800efb6:	e7fe      	b.n	800efb6 <vTaskStartScheduler+0xae>
}
 800efb8:	bf00      	nop
 800efba:	3718      	adds	r7, #24
 800efbc:	46bd      	mov	sp, r7
 800efbe:	bd80      	pop	{r7, pc}
 800efc0:	080122d4 	.word	0x080122d4
 800efc4:	0800f61d 	.word	0x0800f61d
 800efc8:	20000e08 	.word	0x20000e08
 800efcc:	20000e04 	.word	0x20000e04
 800efd0:	20000df0 	.word	0x20000df0
 800efd4:	20000de8 	.word	0x20000de8

0800efd8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800efd8:	b480      	push	{r7}
 800efda:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800efdc:	4b04      	ldr	r3, [pc, #16]	; (800eff0 <vTaskSuspendAll+0x18>)
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	3301      	adds	r3, #1
 800efe2:	4a03      	ldr	r2, [pc, #12]	; (800eff0 <vTaskSuspendAll+0x18>)
 800efe4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800efe6:	bf00      	nop
 800efe8:	46bd      	mov	sp, r7
 800efea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efee:	4770      	bx	lr
 800eff0:	20000e0c 	.word	0x20000e0c

0800eff4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800eff4:	b580      	push	{r7, lr}
 800eff6:	b084      	sub	sp, #16
 800eff8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800effa:	2300      	movs	r3, #0
 800effc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800effe:	2300      	movs	r3, #0
 800f000:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f002:	4b42      	ldr	r3, [pc, #264]	; (800f10c <xTaskResumeAll+0x118>)
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d10b      	bne.n	800f022 <xTaskResumeAll+0x2e>
 800f00a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f00e:	b672      	cpsid	i
 800f010:	f383 8811 	msr	BASEPRI, r3
 800f014:	f3bf 8f6f 	isb	sy
 800f018:	f3bf 8f4f 	dsb	sy
 800f01c:	b662      	cpsie	i
 800f01e:	603b      	str	r3, [r7, #0]
 800f020:	e7fe      	b.n	800f020 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f022:	f001 fa21 	bl	8010468 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f026:	4b39      	ldr	r3, [pc, #228]	; (800f10c <xTaskResumeAll+0x118>)
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	3b01      	subs	r3, #1
 800f02c:	4a37      	ldr	r2, [pc, #220]	; (800f10c <xTaskResumeAll+0x118>)
 800f02e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f030:	4b36      	ldr	r3, [pc, #216]	; (800f10c <xTaskResumeAll+0x118>)
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	2b00      	cmp	r3, #0
 800f036:	d162      	bne.n	800f0fe <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f038:	4b35      	ldr	r3, [pc, #212]	; (800f110 <xTaskResumeAll+0x11c>)
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d05e      	beq.n	800f0fe <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f040:	e02f      	b.n	800f0a2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f042:	4b34      	ldr	r3, [pc, #208]	; (800f114 <xTaskResumeAll+0x120>)
 800f044:	68db      	ldr	r3, [r3, #12]
 800f046:	68db      	ldr	r3, [r3, #12]
 800f048:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	3318      	adds	r3, #24
 800f04e:	4618      	mov	r0, r3
 800f050:	f7fe fc6a 	bl	800d928 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	3304      	adds	r3, #4
 800f058:	4618      	mov	r0, r3
 800f05a:	f7fe fc65 	bl	800d928 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f062:	4b2d      	ldr	r3, [pc, #180]	; (800f118 <xTaskResumeAll+0x124>)
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	429a      	cmp	r2, r3
 800f068:	d903      	bls.n	800f072 <xTaskResumeAll+0x7e>
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f06e:	4a2a      	ldr	r2, [pc, #168]	; (800f118 <xTaskResumeAll+0x124>)
 800f070:	6013      	str	r3, [r2, #0]
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f076:	4613      	mov	r3, r2
 800f078:	009b      	lsls	r3, r3, #2
 800f07a:	4413      	add	r3, r2
 800f07c:	009b      	lsls	r3, r3, #2
 800f07e:	4a27      	ldr	r2, [pc, #156]	; (800f11c <xTaskResumeAll+0x128>)
 800f080:	441a      	add	r2, r3
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	3304      	adds	r3, #4
 800f086:	4619      	mov	r1, r3
 800f088:	4610      	mov	r0, r2
 800f08a:	f7fe fbf0 	bl	800d86e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f092:	4b23      	ldr	r3, [pc, #140]	; (800f120 <xTaskResumeAll+0x12c>)
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f098:	429a      	cmp	r2, r3
 800f09a:	d302      	bcc.n	800f0a2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800f09c:	4b21      	ldr	r3, [pc, #132]	; (800f124 <xTaskResumeAll+0x130>)
 800f09e:	2201      	movs	r2, #1
 800f0a0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f0a2:	4b1c      	ldr	r3, [pc, #112]	; (800f114 <xTaskResumeAll+0x120>)
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d1cb      	bne.n	800f042 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d001      	beq.n	800f0b4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f0b0:	f000 fb68 	bl	800f784 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800f0b4:	4b1c      	ldr	r3, [pc, #112]	; (800f128 <xTaskResumeAll+0x134>)
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d010      	beq.n	800f0e2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f0c0:	f000 f858 	bl	800f174 <xTaskIncrementTick>
 800f0c4:	4603      	mov	r3, r0
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d002      	beq.n	800f0d0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800f0ca:	4b16      	ldr	r3, [pc, #88]	; (800f124 <xTaskResumeAll+0x130>)
 800f0cc:	2201      	movs	r2, #1
 800f0ce:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	3b01      	subs	r3, #1
 800f0d4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d1f1      	bne.n	800f0c0 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800f0dc:	4b12      	ldr	r3, [pc, #72]	; (800f128 <xTaskResumeAll+0x134>)
 800f0de:	2200      	movs	r2, #0
 800f0e0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f0e2:	4b10      	ldr	r3, [pc, #64]	; (800f124 <xTaskResumeAll+0x130>)
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d009      	beq.n	800f0fe <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f0ea:	2301      	movs	r3, #1
 800f0ec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f0ee:	4b0f      	ldr	r3, [pc, #60]	; (800f12c <xTaskResumeAll+0x138>)
 800f0f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f0f4:	601a      	str	r2, [r3, #0]
 800f0f6:	f3bf 8f4f 	dsb	sy
 800f0fa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f0fe:	f001 f9e5 	bl	80104cc <vPortExitCritical>

	return xAlreadyYielded;
 800f102:	68bb      	ldr	r3, [r7, #8]
}
 800f104:	4618      	mov	r0, r3
 800f106:	3710      	adds	r7, #16
 800f108:	46bd      	mov	sp, r7
 800f10a:	bd80      	pop	{r7, pc}
 800f10c:	20000e0c 	.word	0x20000e0c
 800f110:	20000de4 	.word	0x20000de4
 800f114:	20000da4 	.word	0x20000da4
 800f118:	20000dec 	.word	0x20000dec
 800f11c:	20000914 	.word	0x20000914
 800f120:	20000910 	.word	0x20000910
 800f124:	20000df8 	.word	0x20000df8
 800f128:	20000df4 	.word	0x20000df4
 800f12c:	e000ed04 	.word	0xe000ed04

0800f130 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f130:	b480      	push	{r7}
 800f132:	b083      	sub	sp, #12
 800f134:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f136:	4b05      	ldr	r3, [pc, #20]	; (800f14c <xTaskGetTickCount+0x1c>)
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f13c:	687b      	ldr	r3, [r7, #4]
}
 800f13e:	4618      	mov	r0, r3
 800f140:	370c      	adds	r7, #12
 800f142:	46bd      	mov	sp, r7
 800f144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f148:	4770      	bx	lr
 800f14a:	bf00      	nop
 800f14c:	20000de8 	.word	0x20000de8

0800f150 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800f150:	b580      	push	{r7, lr}
 800f152:	b082      	sub	sp, #8
 800f154:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f156:	f001 fa67 	bl	8010628 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800f15a:	2300      	movs	r3, #0
 800f15c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800f15e:	4b04      	ldr	r3, [pc, #16]	; (800f170 <xTaskGetTickCountFromISR+0x20>)
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f164:	683b      	ldr	r3, [r7, #0]
}
 800f166:	4618      	mov	r0, r3
 800f168:	3708      	adds	r7, #8
 800f16a:	46bd      	mov	sp, r7
 800f16c:	bd80      	pop	{r7, pc}
 800f16e:	bf00      	nop
 800f170:	20000de8 	.word	0x20000de8

0800f174 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f174:	b580      	push	{r7, lr}
 800f176:	b086      	sub	sp, #24
 800f178:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f17a:	2300      	movs	r3, #0
 800f17c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f17e:	4b4f      	ldr	r3, [pc, #316]	; (800f2bc <xTaskIncrementTick+0x148>)
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	2b00      	cmp	r3, #0
 800f184:	f040 808a 	bne.w	800f29c <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f188:	4b4d      	ldr	r3, [pc, #308]	; (800f2c0 <xTaskIncrementTick+0x14c>)
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	3301      	adds	r3, #1
 800f18e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f190:	4a4b      	ldr	r2, [pc, #300]	; (800f2c0 <xTaskIncrementTick+0x14c>)
 800f192:	693b      	ldr	r3, [r7, #16]
 800f194:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f196:	693b      	ldr	r3, [r7, #16]
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d121      	bne.n	800f1e0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800f19c:	4b49      	ldr	r3, [pc, #292]	; (800f2c4 <xTaskIncrementTick+0x150>)
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d00b      	beq.n	800f1be <xTaskIncrementTick+0x4a>
 800f1a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1aa:	b672      	cpsid	i
 800f1ac:	f383 8811 	msr	BASEPRI, r3
 800f1b0:	f3bf 8f6f 	isb	sy
 800f1b4:	f3bf 8f4f 	dsb	sy
 800f1b8:	b662      	cpsie	i
 800f1ba:	603b      	str	r3, [r7, #0]
 800f1bc:	e7fe      	b.n	800f1bc <xTaskIncrementTick+0x48>
 800f1be:	4b41      	ldr	r3, [pc, #260]	; (800f2c4 <xTaskIncrementTick+0x150>)
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	60fb      	str	r3, [r7, #12]
 800f1c4:	4b40      	ldr	r3, [pc, #256]	; (800f2c8 <xTaskIncrementTick+0x154>)
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	4a3e      	ldr	r2, [pc, #248]	; (800f2c4 <xTaskIncrementTick+0x150>)
 800f1ca:	6013      	str	r3, [r2, #0]
 800f1cc:	4a3e      	ldr	r2, [pc, #248]	; (800f2c8 <xTaskIncrementTick+0x154>)
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	6013      	str	r3, [r2, #0]
 800f1d2:	4b3e      	ldr	r3, [pc, #248]	; (800f2cc <xTaskIncrementTick+0x158>)
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	3301      	adds	r3, #1
 800f1d8:	4a3c      	ldr	r2, [pc, #240]	; (800f2cc <xTaskIncrementTick+0x158>)
 800f1da:	6013      	str	r3, [r2, #0]
 800f1dc:	f000 fad2 	bl	800f784 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f1e0:	4b3b      	ldr	r3, [pc, #236]	; (800f2d0 <xTaskIncrementTick+0x15c>)
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	693a      	ldr	r2, [r7, #16]
 800f1e6:	429a      	cmp	r2, r3
 800f1e8:	d349      	bcc.n	800f27e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f1ea:	4b36      	ldr	r3, [pc, #216]	; (800f2c4 <xTaskIncrementTick+0x150>)
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d104      	bne.n	800f1fe <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f1f4:	4b36      	ldr	r3, [pc, #216]	; (800f2d0 <xTaskIncrementTick+0x15c>)
 800f1f6:	f04f 32ff 	mov.w	r2, #4294967295
 800f1fa:	601a      	str	r2, [r3, #0]
					break;
 800f1fc:	e03f      	b.n	800f27e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f1fe:	4b31      	ldr	r3, [pc, #196]	; (800f2c4 <xTaskIncrementTick+0x150>)
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	68db      	ldr	r3, [r3, #12]
 800f204:	68db      	ldr	r3, [r3, #12]
 800f206:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f208:	68bb      	ldr	r3, [r7, #8]
 800f20a:	685b      	ldr	r3, [r3, #4]
 800f20c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f20e:	693a      	ldr	r2, [r7, #16]
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	429a      	cmp	r2, r3
 800f214:	d203      	bcs.n	800f21e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f216:	4a2e      	ldr	r2, [pc, #184]	; (800f2d0 <xTaskIncrementTick+0x15c>)
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f21c:	e02f      	b.n	800f27e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f21e:	68bb      	ldr	r3, [r7, #8]
 800f220:	3304      	adds	r3, #4
 800f222:	4618      	mov	r0, r3
 800f224:	f7fe fb80 	bl	800d928 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f228:	68bb      	ldr	r3, [r7, #8]
 800f22a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d004      	beq.n	800f23a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f230:	68bb      	ldr	r3, [r7, #8]
 800f232:	3318      	adds	r3, #24
 800f234:	4618      	mov	r0, r3
 800f236:	f7fe fb77 	bl	800d928 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f23a:	68bb      	ldr	r3, [r7, #8]
 800f23c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f23e:	4b25      	ldr	r3, [pc, #148]	; (800f2d4 <xTaskIncrementTick+0x160>)
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	429a      	cmp	r2, r3
 800f244:	d903      	bls.n	800f24e <xTaskIncrementTick+0xda>
 800f246:	68bb      	ldr	r3, [r7, #8]
 800f248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f24a:	4a22      	ldr	r2, [pc, #136]	; (800f2d4 <xTaskIncrementTick+0x160>)
 800f24c:	6013      	str	r3, [r2, #0]
 800f24e:	68bb      	ldr	r3, [r7, #8]
 800f250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f252:	4613      	mov	r3, r2
 800f254:	009b      	lsls	r3, r3, #2
 800f256:	4413      	add	r3, r2
 800f258:	009b      	lsls	r3, r3, #2
 800f25a:	4a1f      	ldr	r2, [pc, #124]	; (800f2d8 <xTaskIncrementTick+0x164>)
 800f25c:	441a      	add	r2, r3
 800f25e:	68bb      	ldr	r3, [r7, #8]
 800f260:	3304      	adds	r3, #4
 800f262:	4619      	mov	r1, r3
 800f264:	4610      	mov	r0, r2
 800f266:	f7fe fb02 	bl	800d86e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f26a:	68bb      	ldr	r3, [r7, #8]
 800f26c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f26e:	4b1b      	ldr	r3, [pc, #108]	; (800f2dc <xTaskIncrementTick+0x168>)
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f274:	429a      	cmp	r2, r3
 800f276:	d3b8      	bcc.n	800f1ea <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800f278:	2301      	movs	r3, #1
 800f27a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f27c:	e7b5      	b.n	800f1ea <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f27e:	4b17      	ldr	r3, [pc, #92]	; (800f2dc <xTaskIncrementTick+0x168>)
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f284:	4914      	ldr	r1, [pc, #80]	; (800f2d8 <xTaskIncrementTick+0x164>)
 800f286:	4613      	mov	r3, r2
 800f288:	009b      	lsls	r3, r3, #2
 800f28a:	4413      	add	r3, r2
 800f28c:	009b      	lsls	r3, r3, #2
 800f28e:	440b      	add	r3, r1
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	2b01      	cmp	r3, #1
 800f294:	d907      	bls.n	800f2a6 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800f296:	2301      	movs	r3, #1
 800f298:	617b      	str	r3, [r7, #20]
 800f29a:	e004      	b.n	800f2a6 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800f29c:	4b10      	ldr	r3, [pc, #64]	; (800f2e0 <xTaskIncrementTick+0x16c>)
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	3301      	adds	r3, #1
 800f2a2:	4a0f      	ldr	r2, [pc, #60]	; (800f2e0 <xTaskIncrementTick+0x16c>)
 800f2a4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800f2a6:	4b0f      	ldr	r3, [pc, #60]	; (800f2e4 <xTaskIncrementTick+0x170>)
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d001      	beq.n	800f2b2 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800f2ae:	2301      	movs	r3, #1
 800f2b0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800f2b2:	697b      	ldr	r3, [r7, #20]
}
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	3718      	adds	r7, #24
 800f2b8:	46bd      	mov	sp, r7
 800f2ba:	bd80      	pop	{r7, pc}
 800f2bc:	20000e0c 	.word	0x20000e0c
 800f2c0:	20000de8 	.word	0x20000de8
 800f2c4:	20000d9c 	.word	0x20000d9c
 800f2c8:	20000da0 	.word	0x20000da0
 800f2cc:	20000dfc 	.word	0x20000dfc
 800f2d0:	20000e04 	.word	0x20000e04
 800f2d4:	20000dec 	.word	0x20000dec
 800f2d8:	20000914 	.word	0x20000914
 800f2dc:	20000910 	.word	0x20000910
 800f2e0:	20000df4 	.word	0x20000df4
 800f2e4:	20000df8 	.word	0x20000df8

0800f2e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f2e8:	b480      	push	{r7}
 800f2ea:	b085      	sub	sp, #20
 800f2ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f2ee:	4b28      	ldr	r3, [pc, #160]	; (800f390 <vTaskSwitchContext+0xa8>)
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d003      	beq.n	800f2fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f2f6:	4b27      	ldr	r3, [pc, #156]	; (800f394 <vTaskSwitchContext+0xac>)
 800f2f8:	2201      	movs	r2, #1
 800f2fa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f2fc:	e042      	b.n	800f384 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800f2fe:	4b25      	ldr	r3, [pc, #148]	; (800f394 <vTaskSwitchContext+0xac>)
 800f300:	2200      	movs	r2, #0
 800f302:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f304:	4b24      	ldr	r3, [pc, #144]	; (800f398 <vTaskSwitchContext+0xb0>)
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	60fb      	str	r3, [r7, #12]
 800f30a:	e011      	b.n	800f330 <vTaskSwitchContext+0x48>
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d10b      	bne.n	800f32a <vTaskSwitchContext+0x42>
 800f312:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f316:	b672      	cpsid	i
 800f318:	f383 8811 	msr	BASEPRI, r3
 800f31c:	f3bf 8f6f 	isb	sy
 800f320:	f3bf 8f4f 	dsb	sy
 800f324:	b662      	cpsie	i
 800f326:	607b      	str	r3, [r7, #4]
 800f328:	e7fe      	b.n	800f328 <vTaskSwitchContext+0x40>
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	3b01      	subs	r3, #1
 800f32e:	60fb      	str	r3, [r7, #12]
 800f330:	491a      	ldr	r1, [pc, #104]	; (800f39c <vTaskSwitchContext+0xb4>)
 800f332:	68fa      	ldr	r2, [r7, #12]
 800f334:	4613      	mov	r3, r2
 800f336:	009b      	lsls	r3, r3, #2
 800f338:	4413      	add	r3, r2
 800f33a:	009b      	lsls	r3, r3, #2
 800f33c:	440b      	add	r3, r1
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	2b00      	cmp	r3, #0
 800f342:	d0e3      	beq.n	800f30c <vTaskSwitchContext+0x24>
 800f344:	68fa      	ldr	r2, [r7, #12]
 800f346:	4613      	mov	r3, r2
 800f348:	009b      	lsls	r3, r3, #2
 800f34a:	4413      	add	r3, r2
 800f34c:	009b      	lsls	r3, r3, #2
 800f34e:	4a13      	ldr	r2, [pc, #76]	; (800f39c <vTaskSwitchContext+0xb4>)
 800f350:	4413      	add	r3, r2
 800f352:	60bb      	str	r3, [r7, #8]
 800f354:	68bb      	ldr	r3, [r7, #8]
 800f356:	685b      	ldr	r3, [r3, #4]
 800f358:	685a      	ldr	r2, [r3, #4]
 800f35a:	68bb      	ldr	r3, [r7, #8]
 800f35c:	605a      	str	r2, [r3, #4]
 800f35e:	68bb      	ldr	r3, [r7, #8]
 800f360:	685a      	ldr	r2, [r3, #4]
 800f362:	68bb      	ldr	r3, [r7, #8]
 800f364:	3308      	adds	r3, #8
 800f366:	429a      	cmp	r2, r3
 800f368:	d104      	bne.n	800f374 <vTaskSwitchContext+0x8c>
 800f36a:	68bb      	ldr	r3, [r7, #8]
 800f36c:	685b      	ldr	r3, [r3, #4]
 800f36e:	685a      	ldr	r2, [r3, #4]
 800f370:	68bb      	ldr	r3, [r7, #8]
 800f372:	605a      	str	r2, [r3, #4]
 800f374:	68bb      	ldr	r3, [r7, #8]
 800f376:	685b      	ldr	r3, [r3, #4]
 800f378:	68db      	ldr	r3, [r3, #12]
 800f37a:	4a09      	ldr	r2, [pc, #36]	; (800f3a0 <vTaskSwitchContext+0xb8>)
 800f37c:	6013      	str	r3, [r2, #0]
 800f37e:	4a06      	ldr	r2, [pc, #24]	; (800f398 <vTaskSwitchContext+0xb0>)
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	6013      	str	r3, [r2, #0]
}
 800f384:	bf00      	nop
 800f386:	3714      	adds	r7, #20
 800f388:	46bd      	mov	sp, r7
 800f38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f38e:	4770      	bx	lr
 800f390:	20000e0c 	.word	0x20000e0c
 800f394:	20000df8 	.word	0x20000df8
 800f398:	20000dec 	.word	0x20000dec
 800f39c:	20000914 	.word	0x20000914
 800f3a0:	20000910 	.word	0x20000910

0800f3a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f3a4:	b580      	push	{r7, lr}
 800f3a6:	b084      	sub	sp, #16
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	6078      	str	r0, [r7, #4]
 800f3ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d10b      	bne.n	800f3cc <vTaskPlaceOnEventList+0x28>
 800f3b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3b8:	b672      	cpsid	i
 800f3ba:	f383 8811 	msr	BASEPRI, r3
 800f3be:	f3bf 8f6f 	isb	sy
 800f3c2:	f3bf 8f4f 	dsb	sy
 800f3c6:	b662      	cpsie	i
 800f3c8:	60fb      	str	r3, [r7, #12]
 800f3ca:	e7fe      	b.n	800f3ca <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f3cc:	4b07      	ldr	r3, [pc, #28]	; (800f3ec <vTaskPlaceOnEventList+0x48>)
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	3318      	adds	r3, #24
 800f3d2:	4619      	mov	r1, r3
 800f3d4:	6878      	ldr	r0, [r7, #4]
 800f3d6:	f7fe fa6e 	bl	800d8b6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f3da:	2101      	movs	r1, #1
 800f3dc:	6838      	ldr	r0, [r7, #0]
 800f3de:	f000 fb8f 	bl	800fb00 <prvAddCurrentTaskToDelayedList>
}
 800f3e2:	bf00      	nop
 800f3e4:	3710      	adds	r7, #16
 800f3e6:	46bd      	mov	sp, r7
 800f3e8:	bd80      	pop	{r7, pc}
 800f3ea:	bf00      	nop
 800f3ec:	20000910 	.word	0x20000910

0800f3f0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f3f0:	b580      	push	{r7, lr}
 800f3f2:	b086      	sub	sp, #24
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	60f8      	str	r0, [r7, #12]
 800f3f8:	60b9      	str	r1, [r7, #8]
 800f3fa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d10b      	bne.n	800f41a <vTaskPlaceOnEventListRestricted+0x2a>
 800f402:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f406:	b672      	cpsid	i
 800f408:	f383 8811 	msr	BASEPRI, r3
 800f40c:	f3bf 8f6f 	isb	sy
 800f410:	f3bf 8f4f 	dsb	sy
 800f414:	b662      	cpsie	i
 800f416:	617b      	str	r3, [r7, #20]
 800f418:	e7fe      	b.n	800f418 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f41a:	4b0a      	ldr	r3, [pc, #40]	; (800f444 <vTaskPlaceOnEventListRestricted+0x54>)
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	3318      	adds	r3, #24
 800f420:	4619      	mov	r1, r3
 800f422:	68f8      	ldr	r0, [r7, #12]
 800f424:	f7fe fa23 	bl	800d86e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d002      	beq.n	800f434 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800f42e:	f04f 33ff 	mov.w	r3, #4294967295
 800f432:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f434:	6879      	ldr	r1, [r7, #4]
 800f436:	68b8      	ldr	r0, [r7, #8]
 800f438:	f000 fb62 	bl	800fb00 <prvAddCurrentTaskToDelayedList>
	}
 800f43c:	bf00      	nop
 800f43e:	3718      	adds	r7, #24
 800f440:	46bd      	mov	sp, r7
 800f442:	bd80      	pop	{r7, pc}
 800f444:	20000910 	.word	0x20000910

0800f448 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f448:	b580      	push	{r7, lr}
 800f44a:	b086      	sub	sp, #24
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	68db      	ldr	r3, [r3, #12]
 800f454:	68db      	ldr	r3, [r3, #12]
 800f456:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f458:	693b      	ldr	r3, [r7, #16]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d10b      	bne.n	800f476 <xTaskRemoveFromEventList+0x2e>
 800f45e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f462:	b672      	cpsid	i
 800f464:	f383 8811 	msr	BASEPRI, r3
 800f468:	f3bf 8f6f 	isb	sy
 800f46c:	f3bf 8f4f 	dsb	sy
 800f470:	b662      	cpsie	i
 800f472:	60fb      	str	r3, [r7, #12]
 800f474:	e7fe      	b.n	800f474 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f476:	693b      	ldr	r3, [r7, #16]
 800f478:	3318      	adds	r3, #24
 800f47a:	4618      	mov	r0, r3
 800f47c:	f7fe fa54 	bl	800d928 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f480:	4b1d      	ldr	r3, [pc, #116]	; (800f4f8 <xTaskRemoveFromEventList+0xb0>)
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	2b00      	cmp	r3, #0
 800f486:	d11d      	bne.n	800f4c4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f488:	693b      	ldr	r3, [r7, #16]
 800f48a:	3304      	adds	r3, #4
 800f48c:	4618      	mov	r0, r3
 800f48e:	f7fe fa4b 	bl	800d928 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f492:	693b      	ldr	r3, [r7, #16]
 800f494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f496:	4b19      	ldr	r3, [pc, #100]	; (800f4fc <xTaskRemoveFromEventList+0xb4>)
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	429a      	cmp	r2, r3
 800f49c:	d903      	bls.n	800f4a6 <xTaskRemoveFromEventList+0x5e>
 800f49e:	693b      	ldr	r3, [r7, #16]
 800f4a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4a2:	4a16      	ldr	r2, [pc, #88]	; (800f4fc <xTaskRemoveFromEventList+0xb4>)
 800f4a4:	6013      	str	r3, [r2, #0]
 800f4a6:	693b      	ldr	r3, [r7, #16]
 800f4a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4aa:	4613      	mov	r3, r2
 800f4ac:	009b      	lsls	r3, r3, #2
 800f4ae:	4413      	add	r3, r2
 800f4b0:	009b      	lsls	r3, r3, #2
 800f4b2:	4a13      	ldr	r2, [pc, #76]	; (800f500 <xTaskRemoveFromEventList+0xb8>)
 800f4b4:	441a      	add	r2, r3
 800f4b6:	693b      	ldr	r3, [r7, #16]
 800f4b8:	3304      	adds	r3, #4
 800f4ba:	4619      	mov	r1, r3
 800f4bc:	4610      	mov	r0, r2
 800f4be:	f7fe f9d6 	bl	800d86e <vListInsertEnd>
 800f4c2:	e005      	b.n	800f4d0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f4c4:	693b      	ldr	r3, [r7, #16]
 800f4c6:	3318      	adds	r3, #24
 800f4c8:	4619      	mov	r1, r3
 800f4ca:	480e      	ldr	r0, [pc, #56]	; (800f504 <xTaskRemoveFromEventList+0xbc>)
 800f4cc:	f7fe f9cf 	bl	800d86e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f4d0:	693b      	ldr	r3, [r7, #16]
 800f4d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4d4:	4b0c      	ldr	r3, [pc, #48]	; (800f508 <xTaskRemoveFromEventList+0xc0>)
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4da:	429a      	cmp	r2, r3
 800f4dc:	d905      	bls.n	800f4ea <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f4de:	2301      	movs	r3, #1
 800f4e0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f4e2:	4b0a      	ldr	r3, [pc, #40]	; (800f50c <xTaskRemoveFromEventList+0xc4>)
 800f4e4:	2201      	movs	r2, #1
 800f4e6:	601a      	str	r2, [r3, #0]
 800f4e8:	e001      	b.n	800f4ee <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f4ee:	697b      	ldr	r3, [r7, #20]
}
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	3718      	adds	r7, #24
 800f4f4:	46bd      	mov	sp, r7
 800f4f6:	bd80      	pop	{r7, pc}
 800f4f8:	20000e0c 	.word	0x20000e0c
 800f4fc:	20000dec 	.word	0x20000dec
 800f500:	20000914 	.word	0x20000914
 800f504:	20000da4 	.word	0x20000da4
 800f508:	20000910 	.word	0x20000910
 800f50c:	20000df8 	.word	0x20000df8

0800f510 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f510:	b480      	push	{r7}
 800f512:	b083      	sub	sp, #12
 800f514:	af00      	add	r7, sp, #0
 800f516:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f518:	4b06      	ldr	r3, [pc, #24]	; (800f534 <vTaskInternalSetTimeOutState+0x24>)
 800f51a:	681a      	ldr	r2, [r3, #0]
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f520:	4b05      	ldr	r3, [pc, #20]	; (800f538 <vTaskInternalSetTimeOutState+0x28>)
 800f522:	681a      	ldr	r2, [r3, #0]
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	605a      	str	r2, [r3, #4]
}
 800f528:	bf00      	nop
 800f52a:	370c      	adds	r7, #12
 800f52c:	46bd      	mov	sp, r7
 800f52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f532:	4770      	bx	lr
 800f534:	20000dfc 	.word	0x20000dfc
 800f538:	20000de8 	.word	0x20000de8

0800f53c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f53c:	b580      	push	{r7, lr}
 800f53e:	b088      	sub	sp, #32
 800f540:	af00      	add	r7, sp, #0
 800f542:	6078      	str	r0, [r7, #4]
 800f544:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d10b      	bne.n	800f564 <xTaskCheckForTimeOut+0x28>
 800f54c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f550:	b672      	cpsid	i
 800f552:	f383 8811 	msr	BASEPRI, r3
 800f556:	f3bf 8f6f 	isb	sy
 800f55a:	f3bf 8f4f 	dsb	sy
 800f55e:	b662      	cpsie	i
 800f560:	613b      	str	r3, [r7, #16]
 800f562:	e7fe      	b.n	800f562 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800f564:	683b      	ldr	r3, [r7, #0]
 800f566:	2b00      	cmp	r3, #0
 800f568:	d10b      	bne.n	800f582 <xTaskCheckForTimeOut+0x46>
 800f56a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f56e:	b672      	cpsid	i
 800f570:	f383 8811 	msr	BASEPRI, r3
 800f574:	f3bf 8f6f 	isb	sy
 800f578:	f3bf 8f4f 	dsb	sy
 800f57c:	b662      	cpsie	i
 800f57e:	60fb      	str	r3, [r7, #12]
 800f580:	e7fe      	b.n	800f580 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800f582:	f000 ff71 	bl	8010468 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f586:	4b1d      	ldr	r3, [pc, #116]	; (800f5fc <xTaskCheckForTimeOut+0xc0>)
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	685b      	ldr	r3, [r3, #4]
 800f590:	69ba      	ldr	r2, [r7, #24]
 800f592:	1ad3      	subs	r3, r2, r3
 800f594:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f596:	683b      	ldr	r3, [r7, #0]
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f59e:	d102      	bne.n	800f5a6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f5a0:	2300      	movs	r3, #0
 800f5a2:	61fb      	str	r3, [r7, #28]
 800f5a4:	e023      	b.n	800f5ee <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	681a      	ldr	r2, [r3, #0]
 800f5aa:	4b15      	ldr	r3, [pc, #84]	; (800f600 <xTaskCheckForTimeOut+0xc4>)
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	429a      	cmp	r2, r3
 800f5b0:	d007      	beq.n	800f5c2 <xTaskCheckForTimeOut+0x86>
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	685b      	ldr	r3, [r3, #4]
 800f5b6:	69ba      	ldr	r2, [r7, #24]
 800f5b8:	429a      	cmp	r2, r3
 800f5ba:	d302      	bcc.n	800f5c2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f5bc:	2301      	movs	r3, #1
 800f5be:	61fb      	str	r3, [r7, #28]
 800f5c0:	e015      	b.n	800f5ee <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f5c2:	683b      	ldr	r3, [r7, #0]
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	697a      	ldr	r2, [r7, #20]
 800f5c8:	429a      	cmp	r2, r3
 800f5ca:	d20b      	bcs.n	800f5e4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f5cc:	683b      	ldr	r3, [r7, #0]
 800f5ce:	681a      	ldr	r2, [r3, #0]
 800f5d0:	697b      	ldr	r3, [r7, #20]
 800f5d2:	1ad2      	subs	r2, r2, r3
 800f5d4:	683b      	ldr	r3, [r7, #0]
 800f5d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f5d8:	6878      	ldr	r0, [r7, #4]
 800f5da:	f7ff ff99 	bl	800f510 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f5de:	2300      	movs	r3, #0
 800f5e0:	61fb      	str	r3, [r7, #28]
 800f5e2:	e004      	b.n	800f5ee <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800f5e4:	683b      	ldr	r3, [r7, #0]
 800f5e6:	2200      	movs	r2, #0
 800f5e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f5ea:	2301      	movs	r3, #1
 800f5ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f5ee:	f000 ff6d 	bl	80104cc <vPortExitCritical>

	return xReturn;
 800f5f2:	69fb      	ldr	r3, [r7, #28]
}
 800f5f4:	4618      	mov	r0, r3
 800f5f6:	3720      	adds	r7, #32
 800f5f8:	46bd      	mov	sp, r7
 800f5fa:	bd80      	pop	{r7, pc}
 800f5fc:	20000de8 	.word	0x20000de8
 800f600:	20000dfc 	.word	0x20000dfc

0800f604 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f604:	b480      	push	{r7}
 800f606:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f608:	4b03      	ldr	r3, [pc, #12]	; (800f618 <vTaskMissedYield+0x14>)
 800f60a:	2201      	movs	r2, #1
 800f60c:	601a      	str	r2, [r3, #0]
}
 800f60e:	bf00      	nop
 800f610:	46bd      	mov	sp, r7
 800f612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f616:	4770      	bx	lr
 800f618:	20000df8 	.word	0x20000df8

0800f61c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f61c:	b580      	push	{r7, lr}
 800f61e:	b082      	sub	sp, #8
 800f620:	af00      	add	r7, sp, #0
 800f622:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f624:	f000 f852 	bl	800f6cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f628:	4b06      	ldr	r3, [pc, #24]	; (800f644 <prvIdleTask+0x28>)
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	2b01      	cmp	r3, #1
 800f62e:	d9f9      	bls.n	800f624 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f630:	4b05      	ldr	r3, [pc, #20]	; (800f648 <prvIdleTask+0x2c>)
 800f632:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f636:	601a      	str	r2, [r3, #0]
 800f638:	f3bf 8f4f 	dsb	sy
 800f63c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f640:	e7f0      	b.n	800f624 <prvIdleTask+0x8>
 800f642:	bf00      	nop
 800f644:	20000914 	.word	0x20000914
 800f648:	e000ed04 	.word	0xe000ed04

0800f64c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f64c:	b580      	push	{r7, lr}
 800f64e:	b082      	sub	sp, #8
 800f650:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f652:	2300      	movs	r3, #0
 800f654:	607b      	str	r3, [r7, #4]
 800f656:	e00c      	b.n	800f672 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f658:	687a      	ldr	r2, [r7, #4]
 800f65a:	4613      	mov	r3, r2
 800f65c:	009b      	lsls	r3, r3, #2
 800f65e:	4413      	add	r3, r2
 800f660:	009b      	lsls	r3, r3, #2
 800f662:	4a12      	ldr	r2, [pc, #72]	; (800f6ac <prvInitialiseTaskLists+0x60>)
 800f664:	4413      	add	r3, r2
 800f666:	4618      	mov	r0, r3
 800f668:	f7fe f8d4 	bl	800d814 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	3301      	adds	r3, #1
 800f670:	607b      	str	r3, [r7, #4]
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	2b37      	cmp	r3, #55	; 0x37
 800f676:	d9ef      	bls.n	800f658 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f678:	480d      	ldr	r0, [pc, #52]	; (800f6b0 <prvInitialiseTaskLists+0x64>)
 800f67a:	f7fe f8cb 	bl	800d814 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f67e:	480d      	ldr	r0, [pc, #52]	; (800f6b4 <prvInitialiseTaskLists+0x68>)
 800f680:	f7fe f8c8 	bl	800d814 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f684:	480c      	ldr	r0, [pc, #48]	; (800f6b8 <prvInitialiseTaskLists+0x6c>)
 800f686:	f7fe f8c5 	bl	800d814 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f68a:	480c      	ldr	r0, [pc, #48]	; (800f6bc <prvInitialiseTaskLists+0x70>)
 800f68c:	f7fe f8c2 	bl	800d814 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f690:	480b      	ldr	r0, [pc, #44]	; (800f6c0 <prvInitialiseTaskLists+0x74>)
 800f692:	f7fe f8bf 	bl	800d814 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f696:	4b0b      	ldr	r3, [pc, #44]	; (800f6c4 <prvInitialiseTaskLists+0x78>)
 800f698:	4a05      	ldr	r2, [pc, #20]	; (800f6b0 <prvInitialiseTaskLists+0x64>)
 800f69a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f69c:	4b0a      	ldr	r3, [pc, #40]	; (800f6c8 <prvInitialiseTaskLists+0x7c>)
 800f69e:	4a05      	ldr	r2, [pc, #20]	; (800f6b4 <prvInitialiseTaskLists+0x68>)
 800f6a0:	601a      	str	r2, [r3, #0]
}
 800f6a2:	bf00      	nop
 800f6a4:	3708      	adds	r7, #8
 800f6a6:	46bd      	mov	sp, r7
 800f6a8:	bd80      	pop	{r7, pc}
 800f6aa:	bf00      	nop
 800f6ac:	20000914 	.word	0x20000914
 800f6b0:	20000d74 	.word	0x20000d74
 800f6b4:	20000d88 	.word	0x20000d88
 800f6b8:	20000da4 	.word	0x20000da4
 800f6bc:	20000db8 	.word	0x20000db8
 800f6c0:	20000dd0 	.word	0x20000dd0
 800f6c4:	20000d9c 	.word	0x20000d9c
 800f6c8:	20000da0 	.word	0x20000da0

0800f6cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f6cc:	b580      	push	{r7, lr}
 800f6ce:	b082      	sub	sp, #8
 800f6d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f6d2:	e019      	b.n	800f708 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f6d4:	f000 fec8 	bl	8010468 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f6d8:	4b0f      	ldr	r3, [pc, #60]	; (800f718 <prvCheckTasksWaitingTermination+0x4c>)
 800f6da:	68db      	ldr	r3, [r3, #12]
 800f6dc:	68db      	ldr	r3, [r3, #12]
 800f6de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	3304      	adds	r3, #4
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	f7fe f91f 	bl	800d928 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f6ea:	4b0c      	ldr	r3, [pc, #48]	; (800f71c <prvCheckTasksWaitingTermination+0x50>)
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	3b01      	subs	r3, #1
 800f6f0:	4a0a      	ldr	r2, [pc, #40]	; (800f71c <prvCheckTasksWaitingTermination+0x50>)
 800f6f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f6f4:	4b0a      	ldr	r3, [pc, #40]	; (800f720 <prvCheckTasksWaitingTermination+0x54>)
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	3b01      	subs	r3, #1
 800f6fa:	4a09      	ldr	r2, [pc, #36]	; (800f720 <prvCheckTasksWaitingTermination+0x54>)
 800f6fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f6fe:	f000 fee5 	bl	80104cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f702:	6878      	ldr	r0, [r7, #4]
 800f704:	f000 f80e 	bl	800f724 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f708:	4b05      	ldr	r3, [pc, #20]	; (800f720 <prvCheckTasksWaitingTermination+0x54>)
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d1e1      	bne.n	800f6d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f710:	bf00      	nop
 800f712:	3708      	adds	r7, #8
 800f714:	46bd      	mov	sp, r7
 800f716:	bd80      	pop	{r7, pc}
 800f718:	20000db8 	.word	0x20000db8
 800f71c:	20000de4 	.word	0x20000de4
 800f720:	20000dcc 	.word	0x20000dcc

0800f724 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f724:	b580      	push	{r7, lr}
 800f726:	b084      	sub	sp, #16
 800f728:	af00      	add	r7, sp, #0
 800f72a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f732:	2b00      	cmp	r3, #0
 800f734:	d108      	bne.n	800f748 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f73a:	4618      	mov	r0, r3
 800f73c:	f001 f87e 	bl	801083c <vPortFree>
				vPortFree( pxTCB );
 800f740:	6878      	ldr	r0, [r7, #4]
 800f742:	f001 f87b 	bl	801083c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f746:	e019      	b.n	800f77c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f74e:	2b01      	cmp	r3, #1
 800f750:	d103      	bne.n	800f75a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800f752:	6878      	ldr	r0, [r7, #4]
 800f754:	f001 f872 	bl	801083c <vPortFree>
	}
 800f758:	e010      	b.n	800f77c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f760:	2b02      	cmp	r3, #2
 800f762:	d00b      	beq.n	800f77c <prvDeleteTCB+0x58>
 800f764:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f768:	b672      	cpsid	i
 800f76a:	f383 8811 	msr	BASEPRI, r3
 800f76e:	f3bf 8f6f 	isb	sy
 800f772:	f3bf 8f4f 	dsb	sy
 800f776:	b662      	cpsie	i
 800f778:	60fb      	str	r3, [r7, #12]
 800f77a:	e7fe      	b.n	800f77a <prvDeleteTCB+0x56>
	}
 800f77c:	bf00      	nop
 800f77e:	3710      	adds	r7, #16
 800f780:	46bd      	mov	sp, r7
 800f782:	bd80      	pop	{r7, pc}

0800f784 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f784:	b480      	push	{r7}
 800f786:	b083      	sub	sp, #12
 800f788:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f78a:	4b0c      	ldr	r3, [pc, #48]	; (800f7bc <prvResetNextTaskUnblockTime+0x38>)
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	2b00      	cmp	r3, #0
 800f792:	d104      	bne.n	800f79e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f794:	4b0a      	ldr	r3, [pc, #40]	; (800f7c0 <prvResetNextTaskUnblockTime+0x3c>)
 800f796:	f04f 32ff 	mov.w	r2, #4294967295
 800f79a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f79c:	e008      	b.n	800f7b0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f79e:	4b07      	ldr	r3, [pc, #28]	; (800f7bc <prvResetNextTaskUnblockTime+0x38>)
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	68db      	ldr	r3, [r3, #12]
 800f7a4:	68db      	ldr	r3, [r3, #12]
 800f7a6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	685b      	ldr	r3, [r3, #4]
 800f7ac:	4a04      	ldr	r2, [pc, #16]	; (800f7c0 <prvResetNextTaskUnblockTime+0x3c>)
 800f7ae:	6013      	str	r3, [r2, #0]
}
 800f7b0:	bf00      	nop
 800f7b2:	370c      	adds	r7, #12
 800f7b4:	46bd      	mov	sp, r7
 800f7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ba:	4770      	bx	lr
 800f7bc:	20000d9c 	.word	0x20000d9c
 800f7c0:	20000e04 	.word	0x20000e04

0800f7c4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800f7c4:	b480      	push	{r7}
 800f7c6:	b083      	sub	sp, #12
 800f7c8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800f7ca:	4b05      	ldr	r3, [pc, #20]	; (800f7e0 <xTaskGetCurrentTaskHandle+0x1c>)
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	607b      	str	r3, [r7, #4]

		return xReturn;
 800f7d0:	687b      	ldr	r3, [r7, #4]
	}
 800f7d2:	4618      	mov	r0, r3
 800f7d4:	370c      	adds	r7, #12
 800f7d6:	46bd      	mov	sp, r7
 800f7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7dc:	4770      	bx	lr
 800f7de:	bf00      	nop
 800f7e0:	20000910 	.word	0x20000910

0800f7e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f7e4:	b480      	push	{r7}
 800f7e6:	b083      	sub	sp, #12
 800f7e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f7ea:	4b0b      	ldr	r3, [pc, #44]	; (800f818 <xTaskGetSchedulerState+0x34>)
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d102      	bne.n	800f7f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f7f2:	2301      	movs	r3, #1
 800f7f4:	607b      	str	r3, [r7, #4]
 800f7f6:	e008      	b.n	800f80a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f7f8:	4b08      	ldr	r3, [pc, #32]	; (800f81c <xTaskGetSchedulerState+0x38>)
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d102      	bne.n	800f806 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f800:	2302      	movs	r3, #2
 800f802:	607b      	str	r3, [r7, #4]
 800f804:	e001      	b.n	800f80a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f806:	2300      	movs	r3, #0
 800f808:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f80a:	687b      	ldr	r3, [r7, #4]
	}
 800f80c:	4618      	mov	r0, r3
 800f80e:	370c      	adds	r7, #12
 800f810:	46bd      	mov	sp, r7
 800f812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f816:	4770      	bx	lr
 800f818:	20000df0 	.word	0x20000df0
 800f81c:	20000e0c 	.word	0x20000e0c

0800f820 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800f820:	b580      	push	{r7, lr}
 800f822:	b084      	sub	sp, #16
 800f824:	af00      	add	r7, sp, #0
 800f826:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800f82c:	2300      	movs	r3, #0
 800f82e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d051      	beq.n	800f8da <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f836:	68bb      	ldr	r3, [r7, #8]
 800f838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f83a:	4b2a      	ldr	r3, [pc, #168]	; (800f8e4 <xTaskPriorityInherit+0xc4>)
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f840:	429a      	cmp	r2, r3
 800f842:	d241      	bcs.n	800f8c8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f844:	68bb      	ldr	r3, [r7, #8]
 800f846:	699b      	ldr	r3, [r3, #24]
 800f848:	2b00      	cmp	r3, #0
 800f84a:	db06      	blt.n	800f85a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f84c:	4b25      	ldr	r3, [pc, #148]	; (800f8e4 <xTaskPriorityInherit+0xc4>)
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f852:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f856:	68bb      	ldr	r3, [r7, #8]
 800f858:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800f85a:	68bb      	ldr	r3, [r7, #8]
 800f85c:	6959      	ldr	r1, [r3, #20]
 800f85e:	68bb      	ldr	r3, [r7, #8]
 800f860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f862:	4613      	mov	r3, r2
 800f864:	009b      	lsls	r3, r3, #2
 800f866:	4413      	add	r3, r2
 800f868:	009b      	lsls	r3, r3, #2
 800f86a:	4a1f      	ldr	r2, [pc, #124]	; (800f8e8 <xTaskPriorityInherit+0xc8>)
 800f86c:	4413      	add	r3, r2
 800f86e:	4299      	cmp	r1, r3
 800f870:	d122      	bne.n	800f8b8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f872:	68bb      	ldr	r3, [r7, #8]
 800f874:	3304      	adds	r3, #4
 800f876:	4618      	mov	r0, r3
 800f878:	f7fe f856 	bl	800d928 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f87c:	4b19      	ldr	r3, [pc, #100]	; (800f8e4 <xTaskPriorityInherit+0xc4>)
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f882:	68bb      	ldr	r3, [r7, #8]
 800f884:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800f886:	68bb      	ldr	r3, [r7, #8]
 800f888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f88a:	4b18      	ldr	r3, [pc, #96]	; (800f8ec <xTaskPriorityInherit+0xcc>)
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	429a      	cmp	r2, r3
 800f890:	d903      	bls.n	800f89a <xTaskPriorityInherit+0x7a>
 800f892:	68bb      	ldr	r3, [r7, #8]
 800f894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f896:	4a15      	ldr	r2, [pc, #84]	; (800f8ec <xTaskPriorityInherit+0xcc>)
 800f898:	6013      	str	r3, [r2, #0]
 800f89a:	68bb      	ldr	r3, [r7, #8]
 800f89c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f89e:	4613      	mov	r3, r2
 800f8a0:	009b      	lsls	r3, r3, #2
 800f8a2:	4413      	add	r3, r2
 800f8a4:	009b      	lsls	r3, r3, #2
 800f8a6:	4a10      	ldr	r2, [pc, #64]	; (800f8e8 <xTaskPriorityInherit+0xc8>)
 800f8a8:	441a      	add	r2, r3
 800f8aa:	68bb      	ldr	r3, [r7, #8]
 800f8ac:	3304      	adds	r3, #4
 800f8ae:	4619      	mov	r1, r3
 800f8b0:	4610      	mov	r0, r2
 800f8b2:	f7fd ffdc 	bl	800d86e <vListInsertEnd>
 800f8b6:	e004      	b.n	800f8c2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f8b8:	4b0a      	ldr	r3, [pc, #40]	; (800f8e4 <xTaskPriorityInherit+0xc4>)
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8be:	68bb      	ldr	r3, [r7, #8]
 800f8c0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800f8c2:	2301      	movs	r3, #1
 800f8c4:	60fb      	str	r3, [r7, #12]
 800f8c6:	e008      	b.n	800f8da <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800f8c8:	68bb      	ldr	r3, [r7, #8]
 800f8ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f8cc:	4b05      	ldr	r3, [pc, #20]	; (800f8e4 <xTaskPriorityInherit+0xc4>)
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8d2:	429a      	cmp	r2, r3
 800f8d4:	d201      	bcs.n	800f8da <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800f8d6:	2301      	movs	r3, #1
 800f8d8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f8da:	68fb      	ldr	r3, [r7, #12]
	}
 800f8dc:	4618      	mov	r0, r3
 800f8de:	3710      	adds	r7, #16
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	bd80      	pop	{r7, pc}
 800f8e4:	20000910 	.word	0x20000910
 800f8e8:	20000914 	.word	0x20000914
 800f8ec:	20000dec 	.word	0x20000dec

0800f8f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f8f0:	b580      	push	{r7, lr}
 800f8f2:	b086      	sub	sp, #24
 800f8f4:	af00      	add	r7, sp, #0
 800f8f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f8fc:	2300      	movs	r3, #0
 800f8fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	2b00      	cmp	r3, #0
 800f904:	d058      	beq.n	800f9b8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f906:	4b2f      	ldr	r3, [pc, #188]	; (800f9c4 <xTaskPriorityDisinherit+0xd4>)
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	693a      	ldr	r2, [r7, #16]
 800f90c:	429a      	cmp	r2, r3
 800f90e:	d00b      	beq.n	800f928 <xTaskPriorityDisinherit+0x38>
 800f910:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f914:	b672      	cpsid	i
 800f916:	f383 8811 	msr	BASEPRI, r3
 800f91a:	f3bf 8f6f 	isb	sy
 800f91e:	f3bf 8f4f 	dsb	sy
 800f922:	b662      	cpsie	i
 800f924:	60fb      	str	r3, [r7, #12]
 800f926:	e7fe      	b.n	800f926 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800f928:	693b      	ldr	r3, [r7, #16]
 800f92a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d10b      	bne.n	800f948 <xTaskPriorityDisinherit+0x58>
 800f930:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f934:	b672      	cpsid	i
 800f936:	f383 8811 	msr	BASEPRI, r3
 800f93a:	f3bf 8f6f 	isb	sy
 800f93e:	f3bf 8f4f 	dsb	sy
 800f942:	b662      	cpsie	i
 800f944:	60bb      	str	r3, [r7, #8]
 800f946:	e7fe      	b.n	800f946 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800f948:	693b      	ldr	r3, [r7, #16]
 800f94a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f94c:	1e5a      	subs	r2, r3, #1
 800f94e:	693b      	ldr	r3, [r7, #16]
 800f950:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f952:	693b      	ldr	r3, [r7, #16]
 800f954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f956:	693b      	ldr	r3, [r7, #16]
 800f958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f95a:	429a      	cmp	r2, r3
 800f95c:	d02c      	beq.n	800f9b8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f95e:	693b      	ldr	r3, [r7, #16]
 800f960:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f962:	2b00      	cmp	r3, #0
 800f964:	d128      	bne.n	800f9b8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f966:	693b      	ldr	r3, [r7, #16]
 800f968:	3304      	adds	r3, #4
 800f96a:	4618      	mov	r0, r3
 800f96c:	f7fd ffdc 	bl	800d928 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f970:	693b      	ldr	r3, [r7, #16]
 800f972:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f974:	693b      	ldr	r3, [r7, #16]
 800f976:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f978:	693b      	ldr	r3, [r7, #16]
 800f97a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f97c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f980:	693b      	ldr	r3, [r7, #16]
 800f982:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f984:	693b      	ldr	r3, [r7, #16]
 800f986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f988:	4b0f      	ldr	r3, [pc, #60]	; (800f9c8 <xTaskPriorityDisinherit+0xd8>)
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	429a      	cmp	r2, r3
 800f98e:	d903      	bls.n	800f998 <xTaskPriorityDisinherit+0xa8>
 800f990:	693b      	ldr	r3, [r7, #16]
 800f992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f994:	4a0c      	ldr	r2, [pc, #48]	; (800f9c8 <xTaskPriorityDisinherit+0xd8>)
 800f996:	6013      	str	r3, [r2, #0]
 800f998:	693b      	ldr	r3, [r7, #16]
 800f99a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f99c:	4613      	mov	r3, r2
 800f99e:	009b      	lsls	r3, r3, #2
 800f9a0:	4413      	add	r3, r2
 800f9a2:	009b      	lsls	r3, r3, #2
 800f9a4:	4a09      	ldr	r2, [pc, #36]	; (800f9cc <xTaskPriorityDisinherit+0xdc>)
 800f9a6:	441a      	add	r2, r3
 800f9a8:	693b      	ldr	r3, [r7, #16]
 800f9aa:	3304      	adds	r3, #4
 800f9ac:	4619      	mov	r1, r3
 800f9ae:	4610      	mov	r0, r2
 800f9b0:	f7fd ff5d 	bl	800d86e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f9b4:	2301      	movs	r3, #1
 800f9b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f9b8:	697b      	ldr	r3, [r7, #20]
	}
 800f9ba:	4618      	mov	r0, r3
 800f9bc:	3718      	adds	r7, #24
 800f9be:	46bd      	mov	sp, r7
 800f9c0:	bd80      	pop	{r7, pc}
 800f9c2:	bf00      	nop
 800f9c4:	20000910 	.word	0x20000910
 800f9c8:	20000dec 	.word	0x20000dec
 800f9cc:	20000914 	.word	0x20000914

0800f9d0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800f9d0:	b580      	push	{r7, lr}
 800f9d2:	b088      	sub	sp, #32
 800f9d4:	af00      	add	r7, sp, #0
 800f9d6:	6078      	str	r0, [r7, #4]
 800f9d8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800f9de:	2301      	movs	r3, #1
 800f9e0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d06c      	beq.n	800fac2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800f9e8:	69bb      	ldr	r3, [r7, #24]
 800f9ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d10b      	bne.n	800fa08 <vTaskPriorityDisinheritAfterTimeout+0x38>
 800f9f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9f4:	b672      	cpsid	i
 800f9f6:	f383 8811 	msr	BASEPRI, r3
 800f9fa:	f3bf 8f6f 	isb	sy
 800f9fe:	f3bf 8f4f 	dsb	sy
 800fa02:	b662      	cpsie	i
 800fa04:	60fb      	str	r3, [r7, #12]
 800fa06:	e7fe      	b.n	800fa06 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800fa08:	69bb      	ldr	r3, [r7, #24]
 800fa0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fa0c:	683a      	ldr	r2, [r7, #0]
 800fa0e:	429a      	cmp	r2, r3
 800fa10:	d902      	bls.n	800fa18 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800fa12:	683b      	ldr	r3, [r7, #0]
 800fa14:	61fb      	str	r3, [r7, #28]
 800fa16:	e002      	b.n	800fa1e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800fa18:	69bb      	ldr	r3, [r7, #24]
 800fa1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fa1c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800fa1e:	69bb      	ldr	r3, [r7, #24]
 800fa20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa22:	69fa      	ldr	r2, [r7, #28]
 800fa24:	429a      	cmp	r2, r3
 800fa26:	d04c      	beq.n	800fac2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800fa28:	69bb      	ldr	r3, [r7, #24]
 800fa2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fa2c:	697a      	ldr	r2, [r7, #20]
 800fa2e:	429a      	cmp	r2, r3
 800fa30:	d147      	bne.n	800fac2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800fa32:	4b26      	ldr	r3, [pc, #152]	; (800facc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	69ba      	ldr	r2, [r7, #24]
 800fa38:	429a      	cmp	r2, r3
 800fa3a:	d10b      	bne.n	800fa54 <vTaskPriorityDisinheritAfterTimeout+0x84>
 800fa3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa40:	b672      	cpsid	i
 800fa42:	f383 8811 	msr	BASEPRI, r3
 800fa46:	f3bf 8f6f 	isb	sy
 800fa4a:	f3bf 8f4f 	dsb	sy
 800fa4e:	b662      	cpsie	i
 800fa50:	60bb      	str	r3, [r7, #8]
 800fa52:	e7fe      	b.n	800fa52 <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800fa54:	69bb      	ldr	r3, [r7, #24]
 800fa56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa58:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800fa5a:	69bb      	ldr	r3, [r7, #24]
 800fa5c:	69fa      	ldr	r2, [r7, #28]
 800fa5e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fa60:	69bb      	ldr	r3, [r7, #24]
 800fa62:	699b      	ldr	r3, [r3, #24]
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	db04      	blt.n	800fa72 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fa68:	69fb      	ldr	r3, [r7, #28]
 800fa6a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800fa6e:	69bb      	ldr	r3, [r7, #24]
 800fa70:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800fa72:	69bb      	ldr	r3, [r7, #24]
 800fa74:	6959      	ldr	r1, [r3, #20]
 800fa76:	693a      	ldr	r2, [r7, #16]
 800fa78:	4613      	mov	r3, r2
 800fa7a:	009b      	lsls	r3, r3, #2
 800fa7c:	4413      	add	r3, r2
 800fa7e:	009b      	lsls	r3, r3, #2
 800fa80:	4a13      	ldr	r2, [pc, #76]	; (800fad0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800fa82:	4413      	add	r3, r2
 800fa84:	4299      	cmp	r1, r3
 800fa86:	d11c      	bne.n	800fac2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fa88:	69bb      	ldr	r3, [r7, #24]
 800fa8a:	3304      	adds	r3, #4
 800fa8c:	4618      	mov	r0, r3
 800fa8e:	f7fd ff4b 	bl	800d928 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800fa92:	69bb      	ldr	r3, [r7, #24]
 800fa94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa96:	4b0f      	ldr	r3, [pc, #60]	; (800fad4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	429a      	cmp	r2, r3
 800fa9c:	d903      	bls.n	800faa6 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800fa9e:	69bb      	ldr	r3, [r7, #24]
 800faa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800faa2:	4a0c      	ldr	r2, [pc, #48]	; (800fad4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800faa4:	6013      	str	r3, [r2, #0]
 800faa6:	69bb      	ldr	r3, [r7, #24]
 800faa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800faaa:	4613      	mov	r3, r2
 800faac:	009b      	lsls	r3, r3, #2
 800faae:	4413      	add	r3, r2
 800fab0:	009b      	lsls	r3, r3, #2
 800fab2:	4a07      	ldr	r2, [pc, #28]	; (800fad0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800fab4:	441a      	add	r2, r3
 800fab6:	69bb      	ldr	r3, [r7, #24]
 800fab8:	3304      	adds	r3, #4
 800faba:	4619      	mov	r1, r3
 800fabc:	4610      	mov	r0, r2
 800fabe:	f7fd fed6 	bl	800d86e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fac2:	bf00      	nop
 800fac4:	3720      	adds	r7, #32
 800fac6:	46bd      	mov	sp, r7
 800fac8:	bd80      	pop	{r7, pc}
 800faca:	bf00      	nop
 800facc:	20000910 	.word	0x20000910
 800fad0:	20000914 	.word	0x20000914
 800fad4:	20000dec 	.word	0x20000dec

0800fad8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800fad8:	b480      	push	{r7}
 800fada:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800fadc:	4b07      	ldr	r3, [pc, #28]	; (800fafc <pvTaskIncrementMutexHeldCount+0x24>)
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d004      	beq.n	800faee <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800fae4:	4b05      	ldr	r3, [pc, #20]	; (800fafc <pvTaskIncrementMutexHeldCount+0x24>)
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800faea:	3201      	adds	r2, #1
 800faec:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800faee:	4b03      	ldr	r3, [pc, #12]	; (800fafc <pvTaskIncrementMutexHeldCount+0x24>)
 800faf0:	681b      	ldr	r3, [r3, #0]
	}
 800faf2:	4618      	mov	r0, r3
 800faf4:	46bd      	mov	sp, r7
 800faf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fafa:	4770      	bx	lr
 800fafc:	20000910 	.word	0x20000910

0800fb00 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800fb00:	b580      	push	{r7, lr}
 800fb02:	b084      	sub	sp, #16
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	6078      	str	r0, [r7, #4]
 800fb08:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800fb0a:	4b21      	ldr	r3, [pc, #132]	; (800fb90 <prvAddCurrentTaskToDelayedList+0x90>)
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fb10:	4b20      	ldr	r3, [pc, #128]	; (800fb94 <prvAddCurrentTaskToDelayedList+0x94>)
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	3304      	adds	r3, #4
 800fb16:	4618      	mov	r0, r3
 800fb18:	f7fd ff06 	bl	800d928 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb22:	d10a      	bne.n	800fb3a <prvAddCurrentTaskToDelayedList+0x3a>
 800fb24:	683b      	ldr	r3, [r7, #0]
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d007      	beq.n	800fb3a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fb2a:	4b1a      	ldr	r3, [pc, #104]	; (800fb94 <prvAddCurrentTaskToDelayedList+0x94>)
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	3304      	adds	r3, #4
 800fb30:	4619      	mov	r1, r3
 800fb32:	4819      	ldr	r0, [pc, #100]	; (800fb98 <prvAddCurrentTaskToDelayedList+0x98>)
 800fb34:	f7fd fe9b 	bl	800d86e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800fb38:	e026      	b.n	800fb88 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800fb3a:	68fa      	ldr	r2, [r7, #12]
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	4413      	add	r3, r2
 800fb40:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800fb42:	4b14      	ldr	r3, [pc, #80]	; (800fb94 <prvAddCurrentTaskToDelayedList+0x94>)
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	68ba      	ldr	r2, [r7, #8]
 800fb48:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800fb4a:	68ba      	ldr	r2, [r7, #8]
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	429a      	cmp	r2, r3
 800fb50:	d209      	bcs.n	800fb66 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fb52:	4b12      	ldr	r3, [pc, #72]	; (800fb9c <prvAddCurrentTaskToDelayedList+0x9c>)
 800fb54:	681a      	ldr	r2, [r3, #0]
 800fb56:	4b0f      	ldr	r3, [pc, #60]	; (800fb94 <prvAddCurrentTaskToDelayedList+0x94>)
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	3304      	adds	r3, #4
 800fb5c:	4619      	mov	r1, r3
 800fb5e:	4610      	mov	r0, r2
 800fb60:	f7fd fea9 	bl	800d8b6 <vListInsert>
}
 800fb64:	e010      	b.n	800fb88 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fb66:	4b0e      	ldr	r3, [pc, #56]	; (800fba0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800fb68:	681a      	ldr	r2, [r3, #0]
 800fb6a:	4b0a      	ldr	r3, [pc, #40]	; (800fb94 <prvAddCurrentTaskToDelayedList+0x94>)
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	3304      	adds	r3, #4
 800fb70:	4619      	mov	r1, r3
 800fb72:	4610      	mov	r0, r2
 800fb74:	f7fd fe9f 	bl	800d8b6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800fb78:	4b0a      	ldr	r3, [pc, #40]	; (800fba4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	68ba      	ldr	r2, [r7, #8]
 800fb7e:	429a      	cmp	r2, r3
 800fb80:	d202      	bcs.n	800fb88 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800fb82:	4a08      	ldr	r2, [pc, #32]	; (800fba4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800fb84:	68bb      	ldr	r3, [r7, #8]
 800fb86:	6013      	str	r3, [r2, #0]
}
 800fb88:	bf00      	nop
 800fb8a:	3710      	adds	r7, #16
 800fb8c:	46bd      	mov	sp, r7
 800fb8e:	bd80      	pop	{r7, pc}
 800fb90:	20000de8 	.word	0x20000de8
 800fb94:	20000910 	.word	0x20000910
 800fb98:	20000dd0 	.word	0x20000dd0
 800fb9c:	20000da0 	.word	0x20000da0
 800fba0:	20000d9c 	.word	0x20000d9c
 800fba4:	20000e04 	.word	0x20000e04

0800fba8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800fba8:	b580      	push	{r7, lr}
 800fbaa:	b08a      	sub	sp, #40	; 0x28
 800fbac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800fbae:	2300      	movs	r3, #0
 800fbb0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800fbb2:	f000 fb0d 	bl	80101d0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800fbb6:	4b1d      	ldr	r3, [pc, #116]	; (800fc2c <xTimerCreateTimerTask+0x84>)
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d021      	beq.n	800fc02 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800fbbe:	2300      	movs	r3, #0
 800fbc0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800fbc2:	2300      	movs	r3, #0
 800fbc4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800fbc6:	1d3a      	adds	r2, r7, #4
 800fbc8:	f107 0108 	add.w	r1, r7, #8
 800fbcc:	f107 030c 	add.w	r3, r7, #12
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	f7fd fe05 	bl	800d7e0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800fbd6:	6879      	ldr	r1, [r7, #4]
 800fbd8:	68bb      	ldr	r3, [r7, #8]
 800fbda:	68fa      	ldr	r2, [r7, #12]
 800fbdc:	9202      	str	r2, [sp, #8]
 800fbde:	9301      	str	r3, [sp, #4]
 800fbe0:	2302      	movs	r3, #2
 800fbe2:	9300      	str	r3, [sp, #0]
 800fbe4:	2300      	movs	r3, #0
 800fbe6:	460a      	mov	r2, r1
 800fbe8:	4911      	ldr	r1, [pc, #68]	; (800fc30 <xTimerCreateTimerTask+0x88>)
 800fbea:	4812      	ldr	r0, [pc, #72]	; (800fc34 <xTimerCreateTimerTask+0x8c>)
 800fbec:	f7fe ffb0 	bl	800eb50 <xTaskCreateStatic>
 800fbf0:	4602      	mov	r2, r0
 800fbf2:	4b11      	ldr	r3, [pc, #68]	; (800fc38 <xTimerCreateTimerTask+0x90>)
 800fbf4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800fbf6:	4b10      	ldr	r3, [pc, #64]	; (800fc38 <xTimerCreateTimerTask+0x90>)
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d001      	beq.n	800fc02 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800fbfe:	2301      	movs	r3, #1
 800fc00:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800fc02:	697b      	ldr	r3, [r7, #20]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d10b      	bne.n	800fc20 <xTimerCreateTimerTask+0x78>
 800fc08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc0c:	b672      	cpsid	i
 800fc0e:	f383 8811 	msr	BASEPRI, r3
 800fc12:	f3bf 8f6f 	isb	sy
 800fc16:	f3bf 8f4f 	dsb	sy
 800fc1a:	b662      	cpsie	i
 800fc1c:	613b      	str	r3, [r7, #16]
 800fc1e:	e7fe      	b.n	800fc1e <xTimerCreateTimerTask+0x76>
	return xReturn;
 800fc20:	697b      	ldr	r3, [r7, #20]
}
 800fc22:	4618      	mov	r0, r3
 800fc24:	3718      	adds	r7, #24
 800fc26:	46bd      	mov	sp, r7
 800fc28:	bd80      	pop	{r7, pc}
 800fc2a:	bf00      	nop
 800fc2c:	20000e40 	.word	0x20000e40
 800fc30:	080122dc 	.word	0x080122dc
 800fc34:	0800fd75 	.word	0x0800fd75
 800fc38:	20000e44 	.word	0x20000e44

0800fc3c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800fc3c:	b580      	push	{r7, lr}
 800fc3e:	b08a      	sub	sp, #40	; 0x28
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	60f8      	str	r0, [r7, #12]
 800fc44:	60b9      	str	r1, [r7, #8]
 800fc46:	607a      	str	r2, [r7, #4]
 800fc48:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800fc4a:	2300      	movs	r3, #0
 800fc4c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d10b      	bne.n	800fc6c <xTimerGenericCommand+0x30>
 800fc54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc58:	b672      	cpsid	i
 800fc5a:	f383 8811 	msr	BASEPRI, r3
 800fc5e:	f3bf 8f6f 	isb	sy
 800fc62:	f3bf 8f4f 	dsb	sy
 800fc66:	b662      	cpsie	i
 800fc68:	623b      	str	r3, [r7, #32]
 800fc6a:	e7fe      	b.n	800fc6a <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800fc6c:	4b19      	ldr	r3, [pc, #100]	; (800fcd4 <xTimerGenericCommand+0x98>)
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d02a      	beq.n	800fcca <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800fc74:	68bb      	ldr	r3, [r7, #8]
 800fc76:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800fc80:	68bb      	ldr	r3, [r7, #8]
 800fc82:	2b05      	cmp	r3, #5
 800fc84:	dc18      	bgt.n	800fcb8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800fc86:	f7ff fdad 	bl	800f7e4 <xTaskGetSchedulerState>
 800fc8a:	4603      	mov	r3, r0
 800fc8c:	2b02      	cmp	r3, #2
 800fc8e:	d109      	bne.n	800fca4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800fc90:	4b10      	ldr	r3, [pc, #64]	; (800fcd4 <xTimerGenericCommand+0x98>)
 800fc92:	6818      	ldr	r0, [r3, #0]
 800fc94:	f107 0110 	add.w	r1, r7, #16
 800fc98:	2300      	movs	r3, #0
 800fc9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc9c:	f7fe f8e0 	bl	800de60 <xQueueGenericSend>
 800fca0:	6278      	str	r0, [r7, #36]	; 0x24
 800fca2:	e012      	b.n	800fcca <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800fca4:	4b0b      	ldr	r3, [pc, #44]	; (800fcd4 <xTimerGenericCommand+0x98>)
 800fca6:	6818      	ldr	r0, [r3, #0]
 800fca8:	f107 0110 	add.w	r1, r7, #16
 800fcac:	2300      	movs	r3, #0
 800fcae:	2200      	movs	r2, #0
 800fcb0:	f7fe f8d6 	bl	800de60 <xQueueGenericSend>
 800fcb4:	6278      	str	r0, [r7, #36]	; 0x24
 800fcb6:	e008      	b.n	800fcca <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800fcb8:	4b06      	ldr	r3, [pc, #24]	; (800fcd4 <xTimerGenericCommand+0x98>)
 800fcba:	6818      	ldr	r0, [r3, #0]
 800fcbc:	f107 0110 	add.w	r1, r7, #16
 800fcc0:	2300      	movs	r3, #0
 800fcc2:	683a      	ldr	r2, [r7, #0]
 800fcc4:	f7fe f9ce 	bl	800e064 <xQueueGenericSendFromISR>
 800fcc8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800fcca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fccc:	4618      	mov	r0, r3
 800fcce:	3728      	adds	r7, #40	; 0x28
 800fcd0:	46bd      	mov	sp, r7
 800fcd2:	bd80      	pop	{r7, pc}
 800fcd4:	20000e40 	.word	0x20000e40

0800fcd8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800fcd8:	b580      	push	{r7, lr}
 800fcda:	b088      	sub	sp, #32
 800fcdc:	af02      	add	r7, sp, #8
 800fcde:	6078      	str	r0, [r7, #4]
 800fce0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fce2:	4b23      	ldr	r3, [pc, #140]	; (800fd70 <prvProcessExpiredTimer+0x98>)
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	68db      	ldr	r3, [r3, #12]
 800fce8:	68db      	ldr	r3, [r3, #12]
 800fcea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fcec:	697b      	ldr	r3, [r7, #20]
 800fcee:	3304      	adds	r3, #4
 800fcf0:	4618      	mov	r0, r3
 800fcf2:	f7fd fe19 	bl	800d928 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fcf6:	697b      	ldr	r3, [r7, #20]
 800fcf8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fcfc:	f003 0304 	and.w	r3, r3, #4
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d023      	beq.n	800fd4c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800fd04:	697b      	ldr	r3, [r7, #20]
 800fd06:	699a      	ldr	r2, [r3, #24]
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	18d1      	adds	r1, r2, r3
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	683a      	ldr	r2, [r7, #0]
 800fd10:	6978      	ldr	r0, [r7, #20]
 800fd12:	f000 f8d3 	bl	800febc <prvInsertTimerInActiveList>
 800fd16:	4603      	mov	r3, r0
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d020      	beq.n	800fd5e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fd1c:	2300      	movs	r3, #0
 800fd1e:	9300      	str	r3, [sp, #0]
 800fd20:	2300      	movs	r3, #0
 800fd22:	687a      	ldr	r2, [r7, #4]
 800fd24:	2100      	movs	r1, #0
 800fd26:	6978      	ldr	r0, [r7, #20]
 800fd28:	f7ff ff88 	bl	800fc3c <xTimerGenericCommand>
 800fd2c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800fd2e:	693b      	ldr	r3, [r7, #16]
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d114      	bne.n	800fd5e <prvProcessExpiredTimer+0x86>
 800fd34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd38:	b672      	cpsid	i
 800fd3a:	f383 8811 	msr	BASEPRI, r3
 800fd3e:	f3bf 8f6f 	isb	sy
 800fd42:	f3bf 8f4f 	dsb	sy
 800fd46:	b662      	cpsie	i
 800fd48:	60fb      	str	r3, [r7, #12]
 800fd4a:	e7fe      	b.n	800fd4a <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fd4c:	697b      	ldr	r3, [r7, #20]
 800fd4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fd52:	f023 0301 	bic.w	r3, r3, #1
 800fd56:	b2da      	uxtb	r2, r3
 800fd58:	697b      	ldr	r3, [r7, #20]
 800fd5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fd5e:	697b      	ldr	r3, [r7, #20]
 800fd60:	6a1b      	ldr	r3, [r3, #32]
 800fd62:	6978      	ldr	r0, [r7, #20]
 800fd64:	4798      	blx	r3
}
 800fd66:	bf00      	nop
 800fd68:	3718      	adds	r7, #24
 800fd6a:	46bd      	mov	sp, r7
 800fd6c:	bd80      	pop	{r7, pc}
 800fd6e:	bf00      	nop
 800fd70:	20000e38 	.word	0x20000e38

0800fd74 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800fd74:	b580      	push	{r7, lr}
 800fd76:	b084      	sub	sp, #16
 800fd78:	af00      	add	r7, sp, #0
 800fd7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fd7c:	f107 0308 	add.w	r3, r7, #8
 800fd80:	4618      	mov	r0, r3
 800fd82:	f000 f857 	bl	800fe34 <prvGetNextExpireTime>
 800fd86:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800fd88:	68bb      	ldr	r3, [r7, #8]
 800fd8a:	4619      	mov	r1, r3
 800fd8c:	68f8      	ldr	r0, [r7, #12]
 800fd8e:	f000 f803 	bl	800fd98 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800fd92:	f000 f8d5 	bl	800ff40 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fd96:	e7f1      	b.n	800fd7c <prvTimerTask+0x8>

0800fd98 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800fd98:	b580      	push	{r7, lr}
 800fd9a:	b084      	sub	sp, #16
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	6078      	str	r0, [r7, #4]
 800fda0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800fda2:	f7ff f919 	bl	800efd8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fda6:	f107 0308 	add.w	r3, r7, #8
 800fdaa:	4618      	mov	r0, r3
 800fdac:	f000 f866 	bl	800fe7c <prvSampleTimeNow>
 800fdb0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800fdb2:	68bb      	ldr	r3, [r7, #8]
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d130      	bne.n	800fe1a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800fdb8:	683b      	ldr	r3, [r7, #0]
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d10a      	bne.n	800fdd4 <prvProcessTimerOrBlockTask+0x3c>
 800fdbe:	687a      	ldr	r2, [r7, #4]
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	429a      	cmp	r2, r3
 800fdc4:	d806      	bhi.n	800fdd4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800fdc6:	f7ff f915 	bl	800eff4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800fdca:	68f9      	ldr	r1, [r7, #12]
 800fdcc:	6878      	ldr	r0, [r7, #4]
 800fdce:	f7ff ff83 	bl	800fcd8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800fdd2:	e024      	b.n	800fe1e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800fdd4:	683b      	ldr	r3, [r7, #0]
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d008      	beq.n	800fdec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800fdda:	4b13      	ldr	r3, [pc, #76]	; (800fe28 <prvProcessTimerOrBlockTask+0x90>)
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d101      	bne.n	800fde8 <prvProcessTimerOrBlockTask+0x50>
 800fde4:	2301      	movs	r3, #1
 800fde6:	e000      	b.n	800fdea <prvProcessTimerOrBlockTask+0x52>
 800fde8:	2300      	movs	r3, #0
 800fdea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800fdec:	4b0f      	ldr	r3, [pc, #60]	; (800fe2c <prvProcessTimerOrBlockTask+0x94>)
 800fdee:	6818      	ldr	r0, [r3, #0]
 800fdf0:	687a      	ldr	r2, [r7, #4]
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	1ad3      	subs	r3, r2, r3
 800fdf6:	683a      	ldr	r2, [r7, #0]
 800fdf8:	4619      	mov	r1, r3
 800fdfa:	f7fe fe75 	bl	800eae8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800fdfe:	f7ff f8f9 	bl	800eff4 <xTaskResumeAll>
 800fe02:	4603      	mov	r3, r0
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d10a      	bne.n	800fe1e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800fe08:	4b09      	ldr	r3, [pc, #36]	; (800fe30 <prvProcessTimerOrBlockTask+0x98>)
 800fe0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe0e:	601a      	str	r2, [r3, #0]
 800fe10:	f3bf 8f4f 	dsb	sy
 800fe14:	f3bf 8f6f 	isb	sy
}
 800fe18:	e001      	b.n	800fe1e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800fe1a:	f7ff f8eb 	bl	800eff4 <xTaskResumeAll>
}
 800fe1e:	bf00      	nop
 800fe20:	3710      	adds	r7, #16
 800fe22:	46bd      	mov	sp, r7
 800fe24:	bd80      	pop	{r7, pc}
 800fe26:	bf00      	nop
 800fe28:	20000e3c 	.word	0x20000e3c
 800fe2c:	20000e40 	.word	0x20000e40
 800fe30:	e000ed04 	.word	0xe000ed04

0800fe34 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800fe34:	b480      	push	{r7}
 800fe36:	b085      	sub	sp, #20
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800fe3c:	4b0e      	ldr	r3, [pc, #56]	; (800fe78 <prvGetNextExpireTime+0x44>)
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d101      	bne.n	800fe4a <prvGetNextExpireTime+0x16>
 800fe46:	2201      	movs	r2, #1
 800fe48:	e000      	b.n	800fe4c <prvGetNextExpireTime+0x18>
 800fe4a:	2200      	movs	r2, #0
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d105      	bne.n	800fe64 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fe58:	4b07      	ldr	r3, [pc, #28]	; (800fe78 <prvGetNextExpireTime+0x44>)
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	68db      	ldr	r3, [r3, #12]
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	60fb      	str	r3, [r7, #12]
 800fe62:	e001      	b.n	800fe68 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800fe64:	2300      	movs	r3, #0
 800fe66:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800fe68:	68fb      	ldr	r3, [r7, #12]
}
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	3714      	adds	r7, #20
 800fe6e:	46bd      	mov	sp, r7
 800fe70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe74:	4770      	bx	lr
 800fe76:	bf00      	nop
 800fe78:	20000e38 	.word	0x20000e38

0800fe7c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800fe7c:	b580      	push	{r7, lr}
 800fe7e:	b084      	sub	sp, #16
 800fe80:	af00      	add	r7, sp, #0
 800fe82:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800fe84:	f7ff f954 	bl	800f130 <xTaskGetTickCount>
 800fe88:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800fe8a:	4b0b      	ldr	r3, [pc, #44]	; (800feb8 <prvSampleTimeNow+0x3c>)
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	68fa      	ldr	r2, [r7, #12]
 800fe90:	429a      	cmp	r2, r3
 800fe92:	d205      	bcs.n	800fea0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800fe94:	f000 f936 	bl	8010104 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	2201      	movs	r2, #1
 800fe9c:	601a      	str	r2, [r3, #0]
 800fe9e:	e002      	b.n	800fea6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	2200      	movs	r2, #0
 800fea4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800fea6:	4a04      	ldr	r2, [pc, #16]	; (800feb8 <prvSampleTimeNow+0x3c>)
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800feac:	68fb      	ldr	r3, [r7, #12]
}
 800feae:	4618      	mov	r0, r3
 800feb0:	3710      	adds	r7, #16
 800feb2:	46bd      	mov	sp, r7
 800feb4:	bd80      	pop	{r7, pc}
 800feb6:	bf00      	nop
 800feb8:	20000e48 	.word	0x20000e48

0800febc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800febc:	b580      	push	{r7, lr}
 800febe:	b086      	sub	sp, #24
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	60f8      	str	r0, [r7, #12]
 800fec4:	60b9      	str	r1, [r7, #8]
 800fec6:	607a      	str	r2, [r7, #4]
 800fec8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800feca:	2300      	movs	r3, #0
 800fecc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	68ba      	ldr	r2, [r7, #8]
 800fed2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	68fa      	ldr	r2, [r7, #12]
 800fed8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800feda:	68ba      	ldr	r2, [r7, #8]
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	429a      	cmp	r2, r3
 800fee0:	d812      	bhi.n	800ff08 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fee2:	687a      	ldr	r2, [r7, #4]
 800fee4:	683b      	ldr	r3, [r7, #0]
 800fee6:	1ad2      	subs	r2, r2, r3
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	699b      	ldr	r3, [r3, #24]
 800feec:	429a      	cmp	r2, r3
 800feee:	d302      	bcc.n	800fef6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800fef0:	2301      	movs	r3, #1
 800fef2:	617b      	str	r3, [r7, #20]
 800fef4:	e01b      	b.n	800ff2e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800fef6:	4b10      	ldr	r3, [pc, #64]	; (800ff38 <prvInsertTimerInActiveList+0x7c>)
 800fef8:	681a      	ldr	r2, [r3, #0]
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	3304      	adds	r3, #4
 800fefe:	4619      	mov	r1, r3
 800ff00:	4610      	mov	r0, r2
 800ff02:	f7fd fcd8 	bl	800d8b6 <vListInsert>
 800ff06:	e012      	b.n	800ff2e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ff08:	687a      	ldr	r2, [r7, #4]
 800ff0a:	683b      	ldr	r3, [r7, #0]
 800ff0c:	429a      	cmp	r2, r3
 800ff0e:	d206      	bcs.n	800ff1e <prvInsertTimerInActiveList+0x62>
 800ff10:	68ba      	ldr	r2, [r7, #8]
 800ff12:	683b      	ldr	r3, [r7, #0]
 800ff14:	429a      	cmp	r2, r3
 800ff16:	d302      	bcc.n	800ff1e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ff18:	2301      	movs	r3, #1
 800ff1a:	617b      	str	r3, [r7, #20]
 800ff1c:	e007      	b.n	800ff2e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ff1e:	4b07      	ldr	r3, [pc, #28]	; (800ff3c <prvInsertTimerInActiveList+0x80>)
 800ff20:	681a      	ldr	r2, [r3, #0]
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	3304      	adds	r3, #4
 800ff26:	4619      	mov	r1, r3
 800ff28:	4610      	mov	r0, r2
 800ff2a:	f7fd fcc4 	bl	800d8b6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ff2e:	697b      	ldr	r3, [r7, #20]
}
 800ff30:	4618      	mov	r0, r3
 800ff32:	3718      	adds	r7, #24
 800ff34:	46bd      	mov	sp, r7
 800ff36:	bd80      	pop	{r7, pc}
 800ff38:	20000e3c 	.word	0x20000e3c
 800ff3c:	20000e38 	.word	0x20000e38

0800ff40 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ff40:	b580      	push	{r7, lr}
 800ff42:	b08e      	sub	sp, #56	; 0x38
 800ff44:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ff46:	e0cc      	b.n	80100e2 <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	da19      	bge.n	800ff82 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ff4e:	1d3b      	adds	r3, r7, #4
 800ff50:	3304      	adds	r3, #4
 800ff52:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ff54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d10b      	bne.n	800ff72 <prvProcessReceivedCommands+0x32>
 800ff5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff5e:	b672      	cpsid	i
 800ff60:	f383 8811 	msr	BASEPRI, r3
 800ff64:	f3bf 8f6f 	isb	sy
 800ff68:	f3bf 8f4f 	dsb	sy
 800ff6c:	b662      	cpsie	i
 800ff6e:	61fb      	str	r3, [r7, #28]
 800ff70:	e7fe      	b.n	800ff70 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ff72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ff78:	6850      	ldr	r0, [r2, #4]
 800ff7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ff7c:	6892      	ldr	r2, [r2, #8]
 800ff7e:	4611      	mov	r1, r2
 800ff80:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	f2c0 80ab 	blt.w	80100e0 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ff8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff90:	695b      	ldr	r3, [r3, #20]
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d004      	beq.n	800ffa0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ff96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff98:	3304      	adds	r3, #4
 800ff9a:	4618      	mov	r0, r3
 800ff9c:	f7fd fcc4 	bl	800d928 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ffa0:	463b      	mov	r3, r7
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	f7ff ff6a 	bl	800fe7c <prvSampleTimeNow>
 800ffa8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	2b09      	cmp	r3, #9
 800ffae:	f200 8098 	bhi.w	80100e2 <prvProcessReceivedCommands+0x1a2>
 800ffb2:	a201      	add	r2, pc, #4	; (adr r2, 800ffb8 <prvProcessReceivedCommands+0x78>)
 800ffb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffb8:	0800ffe1 	.word	0x0800ffe1
 800ffbc:	0800ffe1 	.word	0x0800ffe1
 800ffc0:	0800ffe1 	.word	0x0800ffe1
 800ffc4:	08010057 	.word	0x08010057
 800ffc8:	0801006b 	.word	0x0801006b
 800ffcc:	080100b7 	.word	0x080100b7
 800ffd0:	0800ffe1 	.word	0x0800ffe1
 800ffd4:	0800ffe1 	.word	0x0800ffe1
 800ffd8:	08010057 	.word	0x08010057
 800ffdc:	0801006b 	.word	0x0801006b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ffe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffe2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ffe6:	f043 0301 	orr.w	r3, r3, #1
 800ffea:	b2da      	uxtb	r2, r3
 800ffec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800fff2:	68ba      	ldr	r2, [r7, #8]
 800fff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fff6:	699b      	ldr	r3, [r3, #24]
 800fff8:	18d1      	adds	r1, r2, r3
 800fffa:	68bb      	ldr	r3, [r7, #8]
 800fffc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fffe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010000:	f7ff ff5c 	bl	800febc <prvInsertTimerInActiveList>
 8010004:	4603      	mov	r3, r0
 8010006:	2b00      	cmp	r3, #0
 8010008:	d06b      	beq.n	80100e2 <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801000a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801000c:	6a1b      	ldr	r3, [r3, #32]
 801000e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010010:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010014:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010018:	f003 0304 	and.w	r3, r3, #4
 801001c:	2b00      	cmp	r3, #0
 801001e:	d060      	beq.n	80100e2 <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010020:	68ba      	ldr	r2, [r7, #8]
 8010022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010024:	699b      	ldr	r3, [r3, #24]
 8010026:	441a      	add	r2, r3
 8010028:	2300      	movs	r3, #0
 801002a:	9300      	str	r3, [sp, #0]
 801002c:	2300      	movs	r3, #0
 801002e:	2100      	movs	r1, #0
 8010030:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010032:	f7ff fe03 	bl	800fc3c <xTimerGenericCommand>
 8010036:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010038:	6a3b      	ldr	r3, [r7, #32]
 801003a:	2b00      	cmp	r3, #0
 801003c:	d151      	bne.n	80100e2 <prvProcessReceivedCommands+0x1a2>
 801003e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010042:	b672      	cpsid	i
 8010044:	f383 8811 	msr	BASEPRI, r3
 8010048:	f3bf 8f6f 	isb	sy
 801004c:	f3bf 8f4f 	dsb	sy
 8010050:	b662      	cpsie	i
 8010052:	61bb      	str	r3, [r7, #24]
 8010054:	e7fe      	b.n	8010054 <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010058:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801005c:	f023 0301 	bic.w	r3, r3, #1
 8010060:	b2da      	uxtb	r2, r3
 8010062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010064:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8010068:	e03b      	b.n	80100e2 <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801006a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801006c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010070:	f043 0301 	orr.w	r3, r3, #1
 8010074:	b2da      	uxtb	r2, r3
 8010076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010078:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801007c:	68ba      	ldr	r2, [r7, #8]
 801007e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010080:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010084:	699b      	ldr	r3, [r3, #24]
 8010086:	2b00      	cmp	r3, #0
 8010088:	d10b      	bne.n	80100a2 <prvProcessReceivedCommands+0x162>
 801008a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801008e:	b672      	cpsid	i
 8010090:	f383 8811 	msr	BASEPRI, r3
 8010094:	f3bf 8f6f 	isb	sy
 8010098:	f3bf 8f4f 	dsb	sy
 801009c:	b662      	cpsie	i
 801009e:	617b      	str	r3, [r7, #20]
 80100a0:	e7fe      	b.n	80100a0 <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80100a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100a4:	699a      	ldr	r2, [r3, #24]
 80100a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100a8:	18d1      	adds	r1, r2, r3
 80100aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80100ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80100b0:	f7ff ff04 	bl	800febc <prvInsertTimerInActiveList>
					break;
 80100b4:	e015      	b.n	80100e2 <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80100b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80100bc:	f003 0302 	and.w	r3, r3, #2
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d103      	bne.n	80100cc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80100c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80100c6:	f000 fbb9 	bl	801083c <vPortFree>
 80100ca:	e00a      	b.n	80100e2 <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80100cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80100d2:	f023 0301 	bic.w	r3, r3, #1
 80100d6:	b2da      	uxtb	r2, r3
 80100d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80100de:	e000      	b.n	80100e2 <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80100e0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80100e2:	4b07      	ldr	r3, [pc, #28]	; (8010100 <prvProcessReceivedCommands+0x1c0>)
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	1d39      	adds	r1, r7, #4
 80100e8:	2200      	movs	r2, #0
 80100ea:	4618      	mov	r0, r3
 80100ec:	f7fe f8e8 	bl	800e2c0 <xQueueReceive>
 80100f0:	4603      	mov	r3, r0
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	f47f af28 	bne.w	800ff48 <prvProcessReceivedCommands+0x8>
	}
}
 80100f8:	bf00      	nop
 80100fa:	3730      	adds	r7, #48	; 0x30
 80100fc:	46bd      	mov	sp, r7
 80100fe:	bd80      	pop	{r7, pc}
 8010100:	20000e40 	.word	0x20000e40

08010104 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010104:	b580      	push	{r7, lr}
 8010106:	b088      	sub	sp, #32
 8010108:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801010a:	e049      	b.n	80101a0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801010c:	4b2e      	ldr	r3, [pc, #184]	; (80101c8 <prvSwitchTimerLists+0xc4>)
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	68db      	ldr	r3, [r3, #12]
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010116:	4b2c      	ldr	r3, [pc, #176]	; (80101c8 <prvSwitchTimerLists+0xc4>)
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	68db      	ldr	r3, [r3, #12]
 801011c:	68db      	ldr	r3, [r3, #12]
 801011e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	3304      	adds	r3, #4
 8010124:	4618      	mov	r0, r3
 8010126:	f7fd fbff 	bl	800d928 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	6a1b      	ldr	r3, [r3, #32]
 801012e:	68f8      	ldr	r0, [r7, #12]
 8010130:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010138:	f003 0304 	and.w	r3, r3, #4
 801013c:	2b00      	cmp	r3, #0
 801013e:	d02f      	beq.n	80101a0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	699b      	ldr	r3, [r3, #24]
 8010144:	693a      	ldr	r2, [r7, #16]
 8010146:	4413      	add	r3, r2
 8010148:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801014a:	68ba      	ldr	r2, [r7, #8]
 801014c:	693b      	ldr	r3, [r7, #16]
 801014e:	429a      	cmp	r2, r3
 8010150:	d90e      	bls.n	8010170 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	68ba      	ldr	r2, [r7, #8]
 8010156:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	68fa      	ldr	r2, [r7, #12]
 801015c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801015e:	4b1a      	ldr	r3, [pc, #104]	; (80101c8 <prvSwitchTimerLists+0xc4>)
 8010160:	681a      	ldr	r2, [r3, #0]
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	3304      	adds	r3, #4
 8010166:	4619      	mov	r1, r3
 8010168:	4610      	mov	r0, r2
 801016a:	f7fd fba4 	bl	800d8b6 <vListInsert>
 801016e:	e017      	b.n	80101a0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010170:	2300      	movs	r3, #0
 8010172:	9300      	str	r3, [sp, #0]
 8010174:	2300      	movs	r3, #0
 8010176:	693a      	ldr	r2, [r7, #16]
 8010178:	2100      	movs	r1, #0
 801017a:	68f8      	ldr	r0, [r7, #12]
 801017c:	f7ff fd5e 	bl	800fc3c <xTimerGenericCommand>
 8010180:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	2b00      	cmp	r3, #0
 8010186:	d10b      	bne.n	80101a0 <prvSwitchTimerLists+0x9c>
 8010188:	f04f 0350 	mov.w	r3, #80	; 0x50
 801018c:	b672      	cpsid	i
 801018e:	f383 8811 	msr	BASEPRI, r3
 8010192:	f3bf 8f6f 	isb	sy
 8010196:	f3bf 8f4f 	dsb	sy
 801019a:	b662      	cpsie	i
 801019c:	603b      	str	r3, [r7, #0]
 801019e:	e7fe      	b.n	801019e <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80101a0:	4b09      	ldr	r3, [pc, #36]	; (80101c8 <prvSwitchTimerLists+0xc4>)
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d1b0      	bne.n	801010c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80101aa:	4b07      	ldr	r3, [pc, #28]	; (80101c8 <prvSwitchTimerLists+0xc4>)
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80101b0:	4b06      	ldr	r3, [pc, #24]	; (80101cc <prvSwitchTimerLists+0xc8>)
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	4a04      	ldr	r2, [pc, #16]	; (80101c8 <prvSwitchTimerLists+0xc4>)
 80101b6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80101b8:	4a04      	ldr	r2, [pc, #16]	; (80101cc <prvSwitchTimerLists+0xc8>)
 80101ba:	697b      	ldr	r3, [r7, #20]
 80101bc:	6013      	str	r3, [r2, #0]
}
 80101be:	bf00      	nop
 80101c0:	3718      	adds	r7, #24
 80101c2:	46bd      	mov	sp, r7
 80101c4:	bd80      	pop	{r7, pc}
 80101c6:	bf00      	nop
 80101c8:	20000e38 	.word	0x20000e38
 80101cc:	20000e3c 	.word	0x20000e3c

080101d0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80101d0:	b580      	push	{r7, lr}
 80101d2:	b082      	sub	sp, #8
 80101d4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80101d6:	f000 f947 	bl	8010468 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80101da:	4b15      	ldr	r3, [pc, #84]	; (8010230 <prvCheckForValidListAndQueue+0x60>)
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d120      	bne.n	8010224 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80101e2:	4814      	ldr	r0, [pc, #80]	; (8010234 <prvCheckForValidListAndQueue+0x64>)
 80101e4:	f7fd fb16 	bl	800d814 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80101e8:	4813      	ldr	r0, [pc, #76]	; (8010238 <prvCheckForValidListAndQueue+0x68>)
 80101ea:	f7fd fb13 	bl	800d814 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80101ee:	4b13      	ldr	r3, [pc, #76]	; (801023c <prvCheckForValidListAndQueue+0x6c>)
 80101f0:	4a10      	ldr	r2, [pc, #64]	; (8010234 <prvCheckForValidListAndQueue+0x64>)
 80101f2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80101f4:	4b12      	ldr	r3, [pc, #72]	; (8010240 <prvCheckForValidListAndQueue+0x70>)
 80101f6:	4a10      	ldr	r2, [pc, #64]	; (8010238 <prvCheckForValidListAndQueue+0x68>)
 80101f8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80101fa:	2300      	movs	r3, #0
 80101fc:	9300      	str	r3, [sp, #0]
 80101fe:	4b11      	ldr	r3, [pc, #68]	; (8010244 <prvCheckForValidListAndQueue+0x74>)
 8010200:	4a11      	ldr	r2, [pc, #68]	; (8010248 <prvCheckForValidListAndQueue+0x78>)
 8010202:	2110      	movs	r1, #16
 8010204:	200a      	movs	r0, #10
 8010206:	f7fd fc23 	bl	800da50 <xQueueGenericCreateStatic>
 801020a:	4602      	mov	r2, r0
 801020c:	4b08      	ldr	r3, [pc, #32]	; (8010230 <prvCheckForValidListAndQueue+0x60>)
 801020e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010210:	4b07      	ldr	r3, [pc, #28]	; (8010230 <prvCheckForValidListAndQueue+0x60>)
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	2b00      	cmp	r3, #0
 8010216:	d005      	beq.n	8010224 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010218:	4b05      	ldr	r3, [pc, #20]	; (8010230 <prvCheckForValidListAndQueue+0x60>)
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	490b      	ldr	r1, [pc, #44]	; (801024c <prvCheckForValidListAndQueue+0x7c>)
 801021e:	4618      	mov	r0, r3
 8010220:	f7fe fc10 	bl	800ea44 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010224:	f000 f952 	bl	80104cc <vPortExitCritical>
}
 8010228:	bf00      	nop
 801022a:	46bd      	mov	sp, r7
 801022c:	bd80      	pop	{r7, pc}
 801022e:	bf00      	nop
 8010230:	20000e40 	.word	0x20000e40
 8010234:	20000e10 	.word	0x20000e10
 8010238:	20000e24 	.word	0x20000e24
 801023c:	20000e38 	.word	0x20000e38
 8010240:	20000e3c 	.word	0x20000e3c
 8010244:	20000eec 	.word	0x20000eec
 8010248:	20000e4c 	.word	0x20000e4c
 801024c:	080122e4 	.word	0x080122e4

08010250 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010250:	b480      	push	{r7}
 8010252:	b085      	sub	sp, #20
 8010254:	af00      	add	r7, sp, #0
 8010256:	60f8      	str	r0, [r7, #12]
 8010258:	60b9      	str	r1, [r7, #8]
 801025a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	3b04      	subs	r3, #4
 8010260:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010268:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	3b04      	subs	r3, #4
 801026e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010270:	68bb      	ldr	r3, [r7, #8]
 8010272:	f023 0201 	bic.w	r2, r3, #1
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	3b04      	subs	r3, #4
 801027e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010280:	4a0c      	ldr	r2, [pc, #48]	; (80102b4 <pxPortInitialiseStack+0x64>)
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	3b14      	subs	r3, #20
 801028a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801028c:	687a      	ldr	r2, [r7, #4]
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	3b04      	subs	r3, #4
 8010296:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010298:	68fb      	ldr	r3, [r7, #12]
 801029a:	f06f 0202 	mvn.w	r2, #2
 801029e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	3b20      	subs	r3, #32
 80102a4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80102a6:	68fb      	ldr	r3, [r7, #12]
}
 80102a8:	4618      	mov	r0, r3
 80102aa:	3714      	adds	r7, #20
 80102ac:	46bd      	mov	sp, r7
 80102ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b2:	4770      	bx	lr
 80102b4:	080102b9 	.word	0x080102b9

080102b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80102b8:	b480      	push	{r7}
 80102ba:	b085      	sub	sp, #20
 80102bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80102be:	2300      	movs	r3, #0
 80102c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80102c2:	4b13      	ldr	r3, [pc, #76]	; (8010310 <prvTaskExitError+0x58>)
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102ca:	d00b      	beq.n	80102e4 <prvTaskExitError+0x2c>
 80102cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102d0:	b672      	cpsid	i
 80102d2:	f383 8811 	msr	BASEPRI, r3
 80102d6:	f3bf 8f6f 	isb	sy
 80102da:	f3bf 8f4f 	dsb	sy
 80102de:	b662      	cpsie	i
 80102e0:	60fb      	str	r3, [r7, #12]
 80102e2:	e7fe      	b.n	80102e2 <prvTaskExitError+0x2a>
 80102e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102e8:	b672      	cpsid	i
 80102ea:	f383 8811 	msr	BASEPRI, r3
 80102ee:	f3bf 8f6f 	isb	sy
 80102f2:	f3bf 8f4f 	dsb	sy
 80102f6:	b662      	cpsie	i
 80102f8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80102fa:	bf00      	nop
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d0fc      	beq.n	80102fc <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010302:	bf00      	nop
 8010304:	3714      	adds	r7, #20
 8010306:	46bd      	mov	sp, r7
 8010308:	f85d 7b04 	ldr.w	r7, [sp], #4
 801030c:	4770      	bx	lr
 801030e:	bf00      	nop
 8010310:	2000011c 	.word	0x2000011c
	...

08010320 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010320:	4b07      	ldr	r3, [pc, #28]	; (8010340 <pxCurrentTCBConst2>)
 8010322:	6819      	ldr	r1, [r3, #0]
 8010324:	6808      	ldr	r0, [r1, #0]
 8010326:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801032a:	f380 8809 	msr	PSP, r0
 801032e:	f3bf 8f6f 	isb	sy
 8010332:	f04f 0000 	mov.w	r0, #0
 8010336:	f380 8811 	msr	BASEPRI, r0
 801033a:	4770      	bx	lr
 801033c:	f3af 8000 	nop.w

08010340 <pxCurrentTCBConst2>:
 8010340:	20000910 	.word	0x20000910
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010344:	bf00      	nop
 8010346:	bf00      	nop

08010348 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010348:	4808      	ldr	r0, [pc, #32]	; (801036c <prvPortStartFirstTask+0x24>)
 801034a:	6800      	ldr	r0, [r0, #0]
 801034c:	6800      	ldr	r0, [r0, #0]
 801034e:	f380 8808 	msr	MSP, r0
 8010352:	f04f 0000 	mov.w	r0, #0
 8010356:	f380 8814 	msr	CONTROL, r0
 801035a:	b662      	cpsie	i
 801035c:	b661      	cpsie	f
 801035e:	f3bf 8f4f 	dsb	sy
 8010362:	f3bf 8f6f 	isb	sy
 8010366:	df00      	svc	0
 8010368:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801036a:	bf00      	nop
 801036c:	e000ed08 	.word	0xe000ed08

08010370 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010370:	b580      	push	{r7, lr}
 8010372:	b084      	sub	sp, #16
 8010374:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010376:	4b36      	ldr	r3, [pc, #216]	; (8010450 <xPortStartScheduler+0xe0>)
 8010378:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	781b      	ldrb	r3, [r3, #0]
 801037e:	b2db      	uxtb	r3, r3
 8010380:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	22ff      	movs	r2, #255	; 0xff
 8010386:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	781b      	ldrb	r3, [r3, #0]
 801038c:	b2db      	uxtb	r3, r3
 801038e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010390:	78fb      	ldrb	r3, [r7, #3]
 8010392:	b2db      	uxtb	r3, r3
 8010394:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010398:	b2da      	uxtb	r2, r3
 801039a:	4b2e      	ldr	r3, [pc, #184]	; (8010454 <xPortStartScheduler+0xe4>)
 801039c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801039e:	4b2e      	ldr	r3, [pc, #184]	; (8010458 <xPortStartScheduler+0xe8>)
 80103a0:	2207      	movs	r2, #7
 80103a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80103a4:	e009      	b.n	80103ba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80103a6:	4b2c      	ldr	r3, [pc, #176]	; (8010458 <xPortStartScheduler+0xe8>)
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	3b01      	subs	r3, #1
 80103ac:	4a2a      	ldr	r2, [pc, #168]	; (8010458 <xPortStartScheduler+0xe8>)
 80103ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80103b0:	78fb      	ldrb	r3, [r7, #3]
 80103b2:	b2db      	uxtb	r3, r3
 80103b4:	005b      	lsls	r3, r3, #1
 80103b6:	b2db      	uxtb	r3, r3
 80103b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80103ba:	78fb      	ldrb	r3, [r7, #3]
 80103bc:	b2db      	uxtb	r3, r3
 80103be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80103c2:	2b80      	cmp	r3, #128	; 0x80
 80103c4:	d0ef      	beq.n	80103a6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80103c6:	4b24      	ldr	r3, [pc, #144]	; (8010458 <xPortStartScheduler+0xe8>)
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	f1c3 0307 	rsb	r3, r3, #7
 80103ce:	2b04      	cmp	r3, #4
 80103d0:	d00b      	beq.n	80103ea <xPortStartScheduler+0x7a>
 80103d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103d6:	b672      	cpsid	i
 80103d8:	f383 8811 	msr	BASEPRI, r3
 80103dc:	f3bf 8f6f 	isb	sy
 80103e0:	f3bf 8f4f 	dsb	sy
 80103e4:	b662      	cpsie	i
 80103e6:	60bb      	str	r3, [r7, #8]
 80103e8:	e7fe      	b.n	80103e8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80103ea:	4b1b      	ldr	r3, [pc, #108]	; (8010458 <xPortStartScheduler+0xe8>)
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	021b      	lsls	r3, r3, #8
 80103f0:	4a19      	ldr	r2, [pc, #100]	; (8010458 <xPortStartScheduler+0xe8>)
 80103f2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80103f4:	4b18      	ldr	r3, [pc, #96]	; (8010458 <xPortStartScheduler+0xe8>)
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80103fc:	4a16      	ldr	r2, [pc, #88]	; (8010458 <xPortStartScheduler+0xe8>)
 80103fe:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	b2da      	uxtb	r2, r3
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010408:	4b14      	ldr	r3, [pc, #80]	; (801045c <xPortStartScheduler+0xec>)
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	4a13      	ldr	r2, [pc, #76]	; (801045c <xPortStartScheduler+0xec>)
 801040e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010412:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010414:	4b11      	ldr	r3, [pc, #68]	; (801045c <xPortStartScheduler+0xec>)
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	4a10      	ldr	r2, [pc, #64]	; (801045c <xPortStartScheduler+0xec>)
 801041a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801041e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010420:	f000 f8d4 	bl	80105cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010424:	4b0e      	ldr	r3, [pc, #56]	; (8010460 <xPortStartScheduler+0xf0>)
 8010426:	2200      	movs	r2, #0
 8010428:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801042a:	f000 f8f3 	bl	8010614 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801042e:	4b0d      	ldr	r3, [pc, #52]	; (8010464 <xPortStartScheduler+0xf4>)
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	4a0c      	ldr	r2, [pc, #48]	; (8010464 <xPortStartScheduler+0xf4>)
 8010434:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010438:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801043a:	f7ff ff85 	bl	8010348 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801043e:	f7fe ff53 	bl	800f2e8 <vTaskSwitchContext>
	prvTaskExitError();
 8010442:	f7ff ff39 	bl	80102b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010446:	2300      	movs	r3, #0
}
 8010448:	4618      	mov	r0, r3
 801044a:	3710      	adds	r7, #16
 801044c:	46bd      	mov	sp, r7
 801044e:	bd80      	pop	{r7, pc}
 8010450:	e000e400 	.word	0xe000e400
 8010454:	20000f3c 	.word	0x20000f3c
 8010458:	20000f40 	.word	0x20000f40
 801045c:	e000ed20 	.word	0xe000ed20
 8010460:	2000011c 	.word	0x2000011c
 8010464:	e000ef34 	.word	0xe000ef34

08010468 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010468:	b480      	push	{r7}
 801046a:	b083      	sub	sp, #12
 801046c:	af00      	add	r7, sp, #0
 801046e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010472:	b672      	cpsid	i
 8010474:	f383 8811 	msr	BASEPRI, r3
 8010478:	f3bf 8f6f 	isb	sy
 801047c:	f3bf 8f4f 	dsb	sy
 8010480:	b662      	cpsie	i
 8010482:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010484:	4b0f      	ldr	r3, [pc, #60]	; (80104c4 <vPortEnterCritical+0x5c>)
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	3301      	adds	r3, #1
 801048a:	4a0e      	ldr	r2, [pc, #56]	; (80104c4 <vPortEnterCritical+0x5c>)
 801048c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801048e:	4b0d      	ldr	r3, [pc, #52]	; (80104c4 <vPortEnterCritical+0x5c>)
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	2b01      	cmp	r3, #1
 8010494:	d110      	bne.n	80104b8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010496:	4b0c      	ldr	r3, [pc, #48]	; (80104c8 <vPortEnterCritical+0x60>)
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	b2db      	uxtb	r3, r3
 801049c:	2b00      	cmp	r3, #0
 801049e:	d00b      	beq.n	80104b8 <vPortEnterCritical+0x50>
 80104a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104a4:	b672      	cpsid	i
 80104a6:	f383 8811 	msr	BASEPRI, r3
 80104aa:	f3bf 8f6f 	isb	sy
 80104ae:	f3bf 8f4f 	dsb	sy
 80104b2:	b662      	cpsie	i
 80104b4:	603b      	str	r3, [r7, #0]
 80104b6:	e7fe      	b.n	80104b6 <vPortEnterCritical+0x4e>
	}
}
 80104b8:	bf00      	nop
 80104ba:	370c      	adds	r7, #12
 80104bc:	46bd      	mov	sp, r7
 80104be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104c2:	4770      	bx	lr
 80104c4:	2000011c 	.word	0x2000011c
 80104c8:	e000ed04 	.word	0xe000ed04

080104cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80104cc:	b480      	push	{r7}
 80104ce:	b083      	sub	sp, #12
 80104d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80104d2:	4b12      	ldr	r3, [pc, #72]	; (801051c <vPortExitCritical+0x50>)
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d10b      	bne.n	80104f2 <vPortExitCritical+0x26>
 80104da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104de:	b672      	cpsid	i
 80104e0:	f383 8811 	msr	BASEPRI, r3
 80104e4:	f3bf 8f6f 	isb	sy
 80104e8:	f3bf 8f4f 	dsb	sy
 80104ec:	b662      	cpsie	i
 80104ee:	607b      	str	r3, [r7, #4]
 80104f0:	e7fe      	b.n	80104f0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 80104f2:	4b0a      	ldr	r3, [pc, #40]	; (801051c <vPortExitCritical+0x50>)
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	3b01      	subs	r3, #1
 80104f8:	4a08      	ldr	r2, [pc, #32]	; (801051c <vPortExitCritical+0x50>)
 80104fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80104fc:	4b07      	ldr	r3, [pc, #28]	; (801051c <vPortExitCritical+0x50>)
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	2b00      	cmp	r3, #0
 8010502:	d104      	bne.n	801050e <vPortExitCritical+0x42>
 8010504:	2300      	movs	r3, #0
 8010506:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010508:	683b      	ldr	r3, [r7, #0]
 801050a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 801050e:	bf00      	nop
 8010510:	370c      	adds	r7, #12
 8010512:	46bd      	mov	sp, r7
 8010514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010518:	4770      	bx	lr
 801051a:	bf00      	nop
 801051c:	2000011c 	.word	0x2000011c

08010520 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010520:	f3ef 8009 	mrs	r0, PSP
 8010524:	f3bf 8f6f 	isb	sy
 8010528:	4b15      	ldr	r3, [pc, #84]	; (8010580 <pxCurrentTCBConst>)
 801052a:	681a      	ldr	r2, [r3, #0]
 801052c:	f01e 0f10 	tst.w	lr, #16
 8010530:	bf08      	it	eq
 8010532:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010536:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801053a:	6010      	str	r0, [r2, #0]
 801053c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010540:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010544:	b672      	cpsid	i
 8010546:	f380 8811 	msr	BASEPRI, r0
 801054a:	f3bf 8f4f 	dsb	sy
 801054e:	f3bf 8f6f 	isb	sy
 8010552:	b662      	cpsie	i
 8010554:	f7fe fec8 	bl	800f2e8 <vTaskSwitchContext>
 8010558:	f04f 0000 	mov.w	r0, #0
 801055c:	f380 8811 	msr	BASEPRI, r0
 8010560:	bc09      	pop	{r0, r3}
 8010562:	6819      	ldr	r1, [r3, #0]
 8010564:	6808      	ldr	r0, [r1, #0]
 8010566:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801056a:	f01e 0f10 	tst.w	lr, #16
 801056e:	bf08      	it	eq
 8010570:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010574:	f380 8809 	msr	PSP, r0
 8010578:	f3bf 8f6f 	isb	sy
 801057c:	4770      	bx	lr
 801057e:	bf00      	nop

08010580 <pxCurrentTCBConst>:
 8010580:	20000910 	.word	0x20000910
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010584:	bf00      	nop
 8010586:	bf00      	nop

08010588 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010588:	b580      	push	{r7, lr}
 801058a:	b082      	sub	sp, #8
 801058c:	af00      	add	r7, sp, #0
	__asm volatile
 801058e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010592:	b672      	cpsid	i
 8010594:	f383 8811 	msr	BASEPRI, r3
 8010598:	f3bf 8f6f 	isb	sy
 801059c:	f3bf 8f4f 	dsb	sy
 80105a0:	b662      	cpsie	i
 80105a2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80105a4:	f7fe fde6 	bl	800f174 <xTaskIncrementTick>
 80105a8:	4603      	mov	r3, r0
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d003      	beq.n	80105b6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80105ae:	4b06      	ldr	r3, [pc, #24]	; (80105c8 <SysTick_Handler+0x40>)
 80105b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80105b4:	601a      	str	r2, [r3, #0]
 80105b6:	2300      	movs	r3, #0
 80105b8:	603b      	str	r3, [r7, #0]
	__asm volatile
 80105ba:	683b      	ldr	r3, [r7, #0]
 80105bc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80105c0:	bf00      	nop
 80105c2:	3708      	adds	r7, #8
 80105c4:	46bd      	mov	sp, r7
 80105c6:	bd80      	pop	{r7, pc}
 80105c8:	e000ed04 	.word	0xe000ed04

080105cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80105cc:	b480      	push	{r7}
 80105ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80105d0:	4b0b      	ldr	r3, [pc, #44]	; (8010600 <vPortSetupTimerInterrupt+0x34>)
 80105d2:	2200      	movs	r2, #0
 80105d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80105d6:	4b0b      	ldr	r3, [pc, #44]	; (8010604 <vPortSetupTimerInterrupt+0x38>)
 80105d8:	2200      	movs	r2, #0
 80105da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80105dc:	4b0a      	ldr	r3, [pc, #40]	; (8010608 <vPortSetupTimerInterrupt+0x3c>)
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	4a0a      	ldr	r2, [pc, #40]	; (801060c <vPortSetupTimerInterrupt+0x40>)
 80105e2:	fba2 2303 	umull	r2, r3, r2, r3
 80105e6:	099b      	lsrs	r3, r3, #6
 80105e8:	4a09      	ldr	r2, [pc, #36]	; (8010610 <vPortSetupTimerInterrupt+0x44>)
 80105ea:	3b01      	subs	r3, #1
 80105ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80105ee:	4b04      	ldr	r3, [pc, #16]	; (8010600 <vPortSetupTimerInterrupt+0x34>)
 80105f0:	2207      	movs	r2, #7
 80105f2:	601a      	str	r2, [r3, #0]
}
 80105f4:	bf00      	nop
 80105f6:	46bd      	mov	sp, r7
 80105f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105fc:	4770      	bx	lr
 80105fe:	bf00      	nop
 8010600:	e000e010 	.word	0xe000e010
 8010604:	e000e018 	.word	0xe000e018
 8010608:	20000000 	.word	0x20000000
 801060c:	10624dd3 	.word	0x10624dd3
 8010610:	e000e014 	.word	0xe000e014

08010614 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010614:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010624 <vPortEnableVFP+0x10>
 8010618:	6801      	ldr	r1, [r0, #0]
 801061a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801061e:	6001      	str	r1, [r0, #0]
 8010620:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010622:	bf00      	nop
 8010624:	e000ed88 	.word	0xe000ed88

08010628 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010628:	b480      	push	{r7}
 801062a:	b085      	sub	sp, #20
 801062c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801062e:	f3ef 8305 	mrs	r3, IPSR
 8010632:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	2b0f      	cmp	r3, #15
 8010638:	d915      	bls.n	8010666 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801063a:	4a18      	ldr	r2, [pc, #96]	; (801069c <vPortValidateInterruptPriority+0x74>)
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	4413      	add	r3, r2
 8010640:	781b      	ldrb	r3, [r3, #0]
 8010642:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010644:	4b16      	ldr	r3, [pc, #88]	; (80106a0 <vPortValidateInterruptPriority+0x78>)
 8010646:	781b      	ldrb	r3, [r3, #0]
 8010648:	7afa      	ldrb	r2, [r7, #11]
 801064a:	429a      	cmp	r2, r3
 801064c:	d20b      	bcs.n	8010666 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801064e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010652:	b672      	cpsid	i
 8010654:	f383 8811 	msr	BASEPRI, r3
 8010658:	f3bf 8f6f 	isb	sy
 801065c:	f3bf 8f4f 	dsb	sy
 8010660:	b662      	cpsie	i
 8010662:	607b      	str	r3, [r7, #4]
 8010664:	e7fe      	b.n	8010664 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010666:	4b0f      	ldr	r3, [pc, #60]	; (80106a4 <vPortValidateInterruptPriority+0x7c>)
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801066e:	4b0e      	ldr	r3, [pc, #56]	; (80106a8 <vPortValidateInterruptPriority+0x80>)
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	429a      	cmp	r2, r3
 8010674:	d90b      	bls.n	801068e <vPortValidateInterruptPriority+0x66>
 8010676:	f04f 0350 	mov.w	r3, #80	; 0x50
 801067a:	b672      	cpsid	i
 801067c:	f383 8811 	msr	BASEPRI, r3
 8010680:	f3bf 8f6f 	isb	sy
 8010684:	f3bf 8f4f 	dsb	sy
 8010688:	b662      	cpsie	i
 801068a:	603b      	str	r3, [r7, #0]
 801068c:	e7fe      	b.n	801068c <vPortValidateInterruptPriority+0x64>
	}
 801068e:	bf00      	nop
 8010690:	3714      	adds	r7, #20
 8010692:	46bd      	mov	sp, r7
 8010694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010698:	4770      	bx	lr
 801069a:	bf00      	nop
 801069c:	e000e3f0 	.word	0xe000e3f0
 80106a0:	20000f3c 	.word	0x20000f3c
 80106a4:	e000ed0c 	.word	0xe000ed0c
 80106a8:	20000f40 	.word	0x20000f40

080106ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80106ac:	b580      	push	{r7, lr}
 80106ae:	b08a      	sub	sp, #40	; 0x28
 80106b0:	af00      	add	r7, sp, #0
 80106b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80106b4:	2300      	movs	r3, #0
 80106b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80106b8:	f7fe fc8e 	bl	800efd8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80106bc:	4b5a      	ldr	r3, [pc, #360]	; (8010828 <pvPortMalloc+0x17c>)
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d101      	bne.n	80106c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80106c4:	f000 f916 	bl	80108f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80106c8:	4b58      	ldr	r3, [pc, #352]	; (801082c <pvPortMalloc+0x180>)
 80106ca:	681a      	ldr	r2, [r3, #0]
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	4013      	ands	r3, r2
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	f040 8090 	bne.w	80107f6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d01e      	beq.n	801071a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80106dc:	2208      	movs	r2, #8
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	4413      	add	r3, r2
 80106e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	f003 0307 	and.w	r3, r3, #7
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d015      	beq.n	801071a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	f023 0307 	bic.w	r3, r3, #7
 80106f4:	3308      	adds	r3, #8
 80106f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	f003 0307 	and.w	r3, r3, #7
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d00b      	beq.n	801071a <pvPortMalloc+0x6e>
 8010702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010706:	b672      	cpsid	i
 8010708:	f383 8811 	msr	BASEPRI, r3
 801070c:	f3bf 8f6f 	isb	sy
 8010710:	f3bf 8f4f 	dsb	sy
 8010714:	b662      	cpsie	i
 8010716:	617b      	str	r3, [r7, #20]
 8010718:	e7fe      	b.n	8010718 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	2b00      	cmp	r3, #0
 801071e:	d06a      	beq.n	80107f6 <pvPortMalloc+0x14a>
 8010720:	4b43      	ldr	r3, [pc, #268]	; (8010830 <pvPortMalloc+0x184>)
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	687a      	ldr	r2, [r7, #4]
 8010726:	429a      	cmp	r2, r3
 8010728:	d865      	bhi.n	80107f6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801072a:	4b42      	ldr	r3, [pc, #264]	; (8010834 <pvPortMalloc+0x188>)
 801072c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801072e:	4b41      	ldr	r3, [pc, #260]	; (8010834 <pvPortMalloc+0x188>)
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010734:	e004      	b.n	8010740 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8010736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010738:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801073a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010742:	685b      	ldr	r3, [r3, #4]
 8010744:	687a      	ldr	r2, [r7, #4]
 8010746:	429a      	cmp	r2, r3
 8010748:	d903      	bls.n	8010752 <pvPortMalloc+0xa6>
 801074a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	2b00      	cmp	r3, #0
 8010750:	d1f1      	bne.n	8010736 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010752:	4b35      	ldr	r3, [pc, #212]	; (8010828 <pvPortMalloc+0x17c>)
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010758:	429a      	cmp	r2, r3
 801075a:	d04c      	beq.n	80107f6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801075c:	6a3b      	ldr	r3, [r7, #32]
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	2208      	movs	r2, #8
 8010762:	4413      	add	r3, r2
 8010764:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010768:	681a      	ldr	r2, [r3, #0]
 801076a:	6a3b      	ldr	r3, [r7, #32]
 801076c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801076e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010770:	685a      	ldr	r2, [r3, #4]
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	1ad2      	subs	r2, r2, r3
 8010776:	2308      	movs	r3, #8
 8010778:	005b      	lsls	r3, r3, #1
 801077a:	429a      	cmp	r2, r3
 801077c:	d920      	bls.n	80107c0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801077e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	4413      	add	r3, r2
 8010784:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010786:	69bb      	ldr	r3, [r7, #24]
 8010788:	f003 0307 	and.w	r3, r3, #7
 801078c:	2b00      	cmp	r3, #0
 801078e:	d00b      	beq.n	80107a8 <pvPortMalloc+0xfc>
 8010790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010794:	b672      	cpsid	i
 8010796:	f383 8811 	msr	BASEPRI, r3
 801079a:	f3bf 8f6f 	isb	sy
 801079e:	f3bf 8f4f 	dsb	sy
 80107a2:	b662      	cpsie	i
 80107a4:	613b      	str	r3, [r7, #16]
 80107a6:	e7fe      	b.n	80107a6 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80107a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107aa:	685a      	ldr	r2, [r3, #4]
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	1ad2      	subs	r2, r2, r3
 80107b0:	69bb      	ldr	r3, [r7, #24]
 80107b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80107b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107b6:	687a      	ldr	r2, [r7, #4]
 80107b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80107ba:	69b8      	ldr	r0, [r7, #24]
 80107bc:	f000 f8fc 	bl	80109b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80107c0:	4b1b      	ldr	r3, [pc, #108]	; (8010830 <pvPortMalloc+0x184>)
 80107c2:	681a      	ldr	r2, [r3, #0]
 80107c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107c6:	685b      	ldr	r3, [r3, #4]
 80107c8:	1ad3      	subs	r3, r2, r3
 80107ca:	4a19      	ldr	r2, [pc, #100]	; (8010830 <pvPortMalloc+0x184>)
 80107cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80107ce:	4b18      	ldr	r3, [pc, #96]	; (8010830 <pvPortMalloc+0x184>)
 80107d0:	681a      	ldr	r2, [r3, #0]
 80107d2:	4b19      	ldr	r3, [pc, #100]	; (8010838 <pvPortMalloc+0x18c>)
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	429a      	cmp	r2, r3
 80107d8:	d203      	bcs.n	80107e2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80107da:	4b15      	ldr	r3, [pc, #84]	; (8010830 <pvPortMalloc+0x184>)
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	4a16      	ldr	r2, [pc, #88]	; (8010838 <pvPortMalloc+0x18c>)
 80107e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80107e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107e4:	685a      	ldr	r2, [r3, #4]
 80107e6:	4b11      	ldr	r3, [pc, #68]	; (801082c <pvPortMalloc+0x180>)
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	431a      	orrs	r2, r3
 80107ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80107f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107f2:	2200      	movs	r2, #0
 80107f4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80107f6:	f7fe fbfd 	bl	800eff4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80107fa:	69fb      	ldr	r3, [r7, #28]
 80107fc:	f003 0307 	and.w	r3, r3, #7
 8010800:	2b00      	cmp	r3, #0
 8010802:	d00b      	beq.n	801081c <pvPortMalloc+0x170>
 8010804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010808:	b672      	cpsid	i
 801080a:	f383 8811 	msr	BASEPRI, r3
 801080e:	f3bf 8f6f 	isb	sy
 8010812:	f3bf 8f4f 	dsb	sy
 8010816:	b662      	cpsie	i
 8010818:	60fb      	str	r3, [r7, #12]
 801081a:	e7fe      	b.n	801081a <pvPortMalloc+0x16e>
	return pvReturn;
 801081c:	69fb      	ldr	r3, [r7, #28]
}
 801081e:	4618      	mov	r0, r3
 8010820:	3728      	adds	r7, #40	; 0x28
 8010822:	46bd      	mov	sp, r7
 8010824:	bd80      	pop	{r7, pc}
 8010826:	bf00      	nop
 8010828:	20004b4c 	.word	0x20004b4c
 801082c:	20004b58 	.word	0x20004b58
 8010830:	20004b50 	.word	0x20004b50
 8010834:	20004b44 	.word	0x20004b44
 8010838:	20004b54 	.word	0x20004b54

0801083c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801083c:	b580      	push	{r7, lr}
 801083e:	b086      	sub	sp, #24
 8010840:	af00      	add	r7, sp, #0
 8010842:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	2b00      	cmp	r3, #0
 801084c:	d04a      	beq.n	80108e4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801084e:	2308      	movs	r3, #8
 8010850:	425b      	negs	r3, r3
 8010852:	697a      	ldr	r2, [r7, #20]
 8010854:	4413      	add	r3, r2
 8010856:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010858:	697b      	ldr	r3, [r7, #20]
 801085a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801085c:	693b      	ldr	r3, [r7, #16]
 801085e:	685a      	ldr	r2, [r3, #4]
 8010860:	4b22      	ldr	r3, [pc, #136]	; (80108ec <vPortFree+0xb0>)
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	4013      	ands	r3, r2
 8010866:	2b00      	cmp	r3, #0
 8010868:	d10b      	bne.n	8010882 <vPortFree+0x46>
 801086a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801086e:	b672      	cpsid	i
 8010870:	f383 8811 	msr	BASEPRI, r3
 8010874:	f3bf 8f6f 	isb	sy
 8010878:	f3bf 8f4f 	dsb	sy
 801087c:	b662      	cpsie	i
 801087e:	60fb      	str	r3, [r7, #12]
 8010880:	e7fe      	b.n	8010880 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010882:	693b      	ldr	r3, [r7, #16]
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	2b00      	cmp	r3, #0
 8010888:	d00b      	beq.n	80108a2 <vPortFree+0x66>
 801088a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801088e:	b672      	cpsid	i
 8010890:	f383 8811 	msr	BASEPRI, r3
 8010894:	f3bf 8f6f 	isb	sy
 8010898:	f3bf 8f4f 	dsb	sy
 801089c:	b662      	cpsie	i
 801089e:	60bb      	str	r3, [r7, #8]
 80108a0:	e7fe      	b.n	80108a0 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80108a2:	693b      	ldr	r3, [r7, #16]
 80108a4:	685a      	ldr	r2, [r3, #4]
 80108a6:	4b11      	ldr	r3, [pc, #68]	; (80108ec <vPortFree+0xb0>)
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	4013      	ands	r3, r2
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d019      	beq.n	80108e4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80108b0:	693b      	ldr	r3, [r7, #16]
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d115      	bne.n	80108e4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80108b8:	693b      	ldr	r3, [r7, #16]
 80108ba:	685a      	ldr	r2, [r3, #4]
 80108bc:	4b0b      	ldr	r3, [pc, #44]	; (80108ec <vPortFree+0xb0>)
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	43db      	mvns	r3, r3
 80108c2:	401a      	ands	r2, r3
 80108c4:	693b      	ldr	r3, [r7, #16]
 80108c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80108c8:	f7fe fb86 	bl	800efd8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80108cc:	693b      	ldr	r3, [r7, #16]
 80108ce:	685a      	ldr	r2, [r3, #4]
 80108d0:	4b07      	ldr	r3, [pc, #28]	; (80108f0 <vPortFree+0xb4>)
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	4413      	add	r3, r2
 80108d6:	4a06      	ldr	r2, [pc, #24]	; (80108f0 <vPortFree+0xb4>)
 80108d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80108da:	6938      	ldr	r0, [r7, #16]
 80108dc:	f000 f86c 	bl	80109b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80108e0:	f7fe fb88 	bl	800eff4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80108e4:	bf00      	nop
 80108e6:	3718      	adds	r7, #24
 80108e8:	46bd      	mov	sp, r7
 80108ea:	bd80      	pop	{r7, pc}
 80108ec:	20004b58 	.word	0x20004b58
 80108f0:	20004b50 	.word	0x20004b50

080108f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80108f4:	b480      	push	{r7}
 80108f6:	b085      	sub	sp, #20
 80108f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80108fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80108fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010900:	4b27      	ldr	r3, [pc, #156]	; (80109a0 <prvHeapInit+0xac>)
 8010902:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	f003 0307 	and.w	r3, r3, #7
 801090a:	2b00      	cmp	r3, #0
 801090c:	d00c      	beq.n	8010928 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	3307      	adds	r3, #7
 8010912:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010914:	68fb      	ldr	r3, [r7, #12]
 8010916:	f023 0307 	bic.w	r3, r3, #7
 801091a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801091c:	68ba      	ldr	r2, [r7, #8]
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	1ad3      	subs	r3, r2, r3
 8010922:	4a1f      	ldr	r2, [pc, #124]	; (80109a0 <prvHeapInit+0xac>)
 8010924:	4413      	add	r3, r2
 8010926:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801092c:	4a1d      	ldr	r2, [pc, #116]	; (80109a4 <prvHeapInit+0xb0>)
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010932:	4b1c      	ldr	r3, [pc, #112]	; (80109a4 <prvHeapInit+0xb0>)
 8010934:	2200      	movs	r2, #0
 8010936:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	68ba      	ldr	r2, [r7, #8]
 801093c:	4413      	add	r3, r2
 801093e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010940:	2208      	movs	r2, #8
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	1a9b      	subs	r3, r3, r2
 8010946:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	f023 0307 	bic.w	r3, r3, #7
 801094e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	4a15      	ldr	r2, [pc, #84]	; (80109a8 <prvHeapInit+0xb4>)
 8010954:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010956:	4b14      	ldr	r3, [pc, #80]	; (80109a8 <prvHeapInit+0xb4>)
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	2200      	movs	r2, #0
 801095c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801095e:	4b12      	ldr	r3, [pc, #72]	; (80109a8 <prvHeapInit+0xb4>)
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	2200      	movs	r2, #0
 8010964:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801096a:	683b      	ldr	r3, [r7, #0]
 801096c:	68fa      	ldr	r2, [r7, #12]
 801096e:	1ad2      	subs	r2, r2, r3
 8010970:	683b      	ldr	r3, [r7, #0]
 8010972:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010974:	4b0c      	ldr	r3, [pc, #48]	; (80109a8 <prvHeapInit+0xb4>)
 8010976:	681a      	ldr	r2, [r3, #0]
 8010978:	683b      	ldr	r3, [r7, #0]
 801097a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801097c:	683b      	ldr	r3, [r7, #0]
 801097e:	685b      	ldr	r3, [r3, #4]
 8010980:	4a0a      	ldr	r2, [pc, #40]	; (80109ac <prvHeapInit+0xb8>)
 8010982:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010984:	683b      	ldr	r3, [r7, #0]
 8010986:	685b      	ldr	r3, [r3, #4]
 8010988:	4a09      	ldr	r2, [pc, #36]	; (80109b0 <prvHeapInit+0xbc>)
 801098a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801098c:	4b09      	ldr	r3, [pc, #36]	; (80109b4 <prvHeapInit+0xc0>)
 801098e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010992:	601a      	str	r2, [r3, #0]
}
 8010994:	bf00      	nop
 8010996:	3714      	adds	r7, #20
 8010998:	46bd      	mov	sp, r7
 801099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801099e:	4770      	bx	lr
 80109a0:	20000f44 	.word	0x20000f44
 80109a4:	20004b44 	.word	0x20004b44
 80109a8:	20004b4c 	.word	0x20004b4c
 80109ac:	20004b54 	.word	0x20004b54
 80109b0:	20004b50 	.word	0x20004b50
 80109b4:	20004b58 	.word	0x20004b58

080109b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80109b8:	b480      	push	{r7}
 80109ba:	b085      	sub	sp, #20
 80109bc:	af00      	add	r7, sp, #0
 80109be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80109c0:	4b28      	ldr	r3, [pc, #160]	; (8010a64 <prvInsertBlockIntoFreeList+0xac>)
 80109c2:	60fb      	str	r3, [r7, #12]
 80109c4:	e002      	b.n	80109cc <prvInsertBlockIntoFreeList+0x14>
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	60fb      	str	r3, [r7, #12]
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	687a      	ldr	r2, [r7, #4]
 80109d2:	429a      	cmp	r2, r3
 80109d4:	d8f7      	bhi.n	80109c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	685b      	ldr	r3, [r3, #4]
 80109de:	68ba      	ldr	r2, [r7, #8]
 80109e0:	4413      	add	r3, r2
 80109e2:	687a      	ldr	r2, [r7, #4]
 80109e4:	429a      	cmp	r2, r3
 80109e6:	d108      	bne.n	80109fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	685a      	ldr	r2, [r3, #4]
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	685b      	ldr	r3, [r3, #4]
 80109f0:	441a      	add	r2, r3
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	685b      	ldr	r3, [r3, #4]
 8010a02:	68ba      	ldr	r2, [r7, #8]
 8010a04:	441a      	add	r2, r3
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	429a      	cmp	r2, r3
 8010a0c:	d118      	bne.n	8010a40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	681a      	ldr	r2, [r3, #0]
 8010a12:	4b15      	ldr	r3, [pc, #84]	; (8010a68 <prvInsertBlockIntoFreeList+0xb0>)
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	429a      	cmp	r2, r3
 8010a18:	d00d      	beq.n	8010a36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	685a      	ldr	r2, [r3, #4]
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	681b      	ldr	r3, [r3, #0]
 8010a22:	685b      	ldr	r3, [r3, #4]
 8010a24:	441a      	add	r2, r3
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	681a      	ldr	r2, [r3, #0]
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	601a      	str	r2, [r3, #0]
 8010a34:	e008      	b.n	8010a48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010a36:	4b0c      	ldr	r3, [pc, #48]	; (8010a68 <prvInsertBlockIntoFreeList+0xb0>)
 8010a38:	681a      	ldr	r2, [r3, #0]
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	601a      	str	r2, [r3, #0]
 8010a3e:	e003      	b.n	8010a48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010a40:	68fb      	ldr	r3, [r7, #12]
 8010a42:	681a      	ldr	r2, [r3, #0]
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010a48:	68fa      	ldr	r2, [r7, #12]
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	429a      	cmp	r2, r3
 8010a4e:	d002      	beq.n	8010a56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	687a      	ldr	r2, [r7, #4]
 8010a54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010a56:	bf00      	nop
 8010a58:	3714      	adds	r7, #20
 8010a5a:	46bd      	mov	sp, r7
 8010a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a60:	4770      	bx	lr
 8010a62:	bf00      	nop
 8010a64:	20004b44 	.word	0x20004b44
 8010a68:	20004b4c 	.word	0x20004b4c

08010a6c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8010a6c:	b580      	push	{r7, lr}
 8010a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8010a70:	2200      	movs	r2, #0
 8010a72:	4912      	ldr	r1, [pc, #72]	; (8010abc <MX_USB_DEVICE_Init+0x50>)
 8010a74:	4812      	ldr	r0, [pc, #72]	; (8010ac0 <MX_USB_DEVICE_Init+0x54>)
 8010a76:	f7f8 f83d 	bl	8008af4 <USBD_Init>
 8010a7a:	4603      	mov	r3, r0
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d001      	beq.n	8010a84 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8010a80:	f7ef ff3c 	bl	80008fc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8010a84:	490f      	ldr	r1, [pc, #60]	; (8010ac4 <MX_USB_DEVICE_Init+0x58>)
 8010a86:	480e      	ldr	r0, [pc, #56]	; (8010ac0 <MX_USB_DEVICE_Init+0x54>)
 8010a88:	f7f8 f86a 	bl	8008b60 <USBD_RegisterClass>
 8010a8c:	4603      	mov	r3, r0
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d001      	beq.n	8010a96 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8010a92:	f7ef ff33 	bl	80008fc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8010a96:	490c      	ldr	r1, [pc, #48]	; (8010ac8 <MX_USB_DEVICE_Init+0x5c>)
 8010a98:	4809      	ldr	r0, [pc, #36]	; (8010ac0 <MX_USB_DEVICE_Init+0x54>)
 8010a9a:	f7f7 ff8f 	bl	80089bc <USBD_CDC_RegisterInterface>
 8010a9e:	4603      	mov	r3, r0
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d001      	beq.n	8010aa8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8010aa4:	f7ef ff2a 	bl	80008fc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010aa8:	4805      	ldr	r0, [pc, #20]	; (8010ac0 <MX_USB_DEVICE_Init+0x54>)
 8010aaa:	f7f8 f87a 	bl	8008ba2 <USBD_Start>
 8010aae:	4603      	mov	r3, r0
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d001      	beq.n	8010ab8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8010ab4:	f7ef ff22 	bl	80008fc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010ab8:	bf00      	nop
 8010aba:	bd80      	pop	{r7, pc}
 8010abc:	20000134 	.word	0x20000134
 8010ac0:	200087f4 	.word	0x200087f4
 8010ac4:	20000018 	.word	0x20000018
 8010ac8:	20000120 	.word	0x20000120

08010acc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8010acc:	b580      	push	{r7, lr}
 8010ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010ad0:	2200      	movs	r2, #0
 8010ad2:	4905      	ldr	r1, [pc, #20]	; (8010ae8 <CDC_Init_FS+0x1c>)
 8010ad4:	4805      	ldr	r0, [pc, #20]	; (8010aec <CDC_Init_FS+0x20>)
 8010ad6:	f7f7 ff86 	bl	80089e6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8010ada:	4905      	ldr	r1, [pc, #20]	; (8010af0 <CDC_Init_FS+0x24>)
 8010adc:	4803      	ldr	r0, [pc, #12]	; (8010aec <CDC_Init_FS+0x20>)
 8010ade:	f7f7 ff9b 	bl	8008a18 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8010ae2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010ae4:	4618      	mov	r0, r3
 8010ae6:	bd80      	pop	{r7, pc}
 8010ae8:	200092c4 	.word	0x200092c4
 8010aec:	200087f4 	.word	0x200087f4
 8010af0:	20008ac4 	.word	0x20008ac4

08010af4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010af4:	b480      	push	{r7}
 8010af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010af8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8010afa:	4618      	mov	r0, r3
 8010afc:	46bd      	mov	sp, r7
 8010afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b02:	4770      	bx	lr

08010b04 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010b04:	b480      	push	{r7}
 8010b06:	b083      	sub	sp, #12
 8010b08:	af00      	add	r7, sp, #0
 8010b0a:	4603      	mov	r3, r0
 8010b0c:	6039      	str	r1, [r7, #0]
 8010b0e:	71fb      	strb	r3, [r7, #7]
 8010b10:	4613      	mov	r3, r2
 8010b12:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010b14:	79fb      	ldrb	r3, [r7, #7]
 8010b16:	2b23      	cmp	r3, #35	; 0x23
 8010b18:	d84a      	bhi.n	8010bb0 <CDC_Control_FS+0xac>
 8010b1a:	a201      	add	r2, pc, #4	; (adr r2, 8010b20 <CDC_Control_FS+0x1c>)
 8010b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b20:	08010bb1 	.word	0x08010bb1
 8010b24:	08010bb1 	.word	0x08010bb1
 8010b28:	08010bb1 	.word	0x08010bb1
 8010b2c:	08010bb1 	.word	0x08010bb1
 8010b30:	08010bb1 	.word	0x08010bb1
 8010b34:	08010bb1 	.word	0x08010bb1
 8010b38:	08010bb1 	.word	0x08010bb1
 8010b3c:	08010bb1 	.word	0x08010bb1
 8010b40:	08010bb1 	.word	0x08010bb1
 8010b44:	08010bb1 	.word	0x08010bb1
 8010b48:	08010bb1 	.word	0x08010bb1
 8010b4c:	08010bb1 	.word	0x08010bb1
 8010b50:	08010bb1 	.word	0x08010bb1
 8010b54:	08010bb1 	.word	0x08010bb1
 8010b58:	08010bb1 	.word	0x08010bb1
 8010b5c:	08010bb1 	.word	0x08010bb1
 8010b60:	08010bb1 	.word	0x08010bb1
 8010b64:	08010bb1 	.word	0x08010bb1
 8010b68:	08010bb1 	.word	0x08010bb1
 8010b6c:	08010bb1 	.word	0x08010bb1
 8010b70:	08010bb1 	.word	0x08010bb1
 8010b74:	08010bb1 	.word	0x08010bb1
 8010b78:	08010bb1 	.word	0x08010bb1
 8010b7c:	08010bb1 	.word	0x08010bb1
 8010b80:	08010bb1 	.word	0x08010bb1
 8010b84:	08010bb1 	.word	0x08010bb1
 8010b88:	08010bb1 	.word	0x08010bb1
 8010b8c:	08010bb1 	.word	0x08010bb1
 8010b90:	08010bb1 	.word	0x08010bb1
 8010b94:	08010bb1 	.word	0x08010bb1
 8010b98:	08010bb1 	.word	0x08010bb1
 8010b9c:	08010bb1 	.word	0x08010bb1
 8010ba0:	08010bb1 	.word	0x08010bb1
 8010ba4:	08010bb1 	.word	0x08010bb1
 8010ba8:	08010bb1 	.word	0x08010bb1
 8010bac:	08010bb1 	.word	0x08010bb1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010bb0:	bf00      	nop
  }

  return (USBD_OK);
 8010bb2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010bb4:	4618      	mov	r0, r3
 8010bb6:	370c      	adds	r7, #12
 8010bb8:	46bd      	mov	sp, r7
 8010bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bbe:	4770      	bx	lr

08010bc0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010bc0:	b580      	push	{r7, lr}
 8010bc2:	b082      	sub	sp, #8
 8010bc4:	af00      	add	r7, sp, #0
 8010bc6:	6078      	str	r0, [r7, #4]
 8010bc8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8010bca:	6879      	ldr	r1, [r7, #4]
 8010bcc:	4805      	ldr	r0, [pc, #20]	; (8010be4 <CDC_Receive_FS+0x24>)
 8010bce:	f7f7 ff23 	bl	8008a18 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010bd2:	4804      	ldr	r0, [pc, #16]	; (8010be4 <CDC_Receive_FS+0x24>)
 8010bd4:	f7f7 ff64 	bl	8008aa0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8010bd8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8010bda:	4618      	mov	r0, r3
 8010bdc:	3708      	adds	r7, #8
 8010bde:	46bd      	mov	sp, r7
 8010be0:	bd80      	pop	{r7, pc}
 8010be2:	bf00      	nop
 8010be4:	200087f4 	.word	0x200087f4

08010be8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8010be8:	b580      	push	{r7, lr}
 8010bea:	b084      	sub	sp, #16
 8010bec:	af00      	add	r7, sp, #0
 8010bee:	6078      	str	r0, [r7, #4]
 8010bf0:	460b      	mov	r3, r1
 8010bf2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8010bf4:	2300      	movs	r3, #0
 8010bf6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8010bf8:	4b0d      	ldr	r3, [pc, #52]	; (8010c30 <CDC_Transmit_FS+0x48>)
 8010bfa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010bfe:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8010c00:	68bb      	ldr	r3, [r7, #8]
 8010c02:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d001      	beq.n	8010c0e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8010c0a:	2301      	movs	r3, #1
 8010c0c:	e00b      	b.n	8010c26 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8010c0e:	887b      	ldrh	r3, [r7, #2]
 8010c10:	461a      	mov	r2, r3
 8010c12:	6879      	ldr	r1, [r7, #4]
 8010c14:	4806      	ldr	r0, [pc, #24]	; (8010c30 <CDC_Transmit_FS+0x48>)
 8010c16:	f7f7 fee6 	bl	80089e6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8010c1a:	4805      	ldr	r0, [pc, #20]	; (8010c30 <CDC_Transmit_FS+0x48>)
 8010c1c:	f7f7 ff10 	bl	8008a40 <USBD_CDC_TransmitPacket>
 8010c20:	4603      	mov	r3, r0
 8010c22:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8010c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c26:	4618      	mov	r0, r3
 8010c28:	3710      	adds	r7, #16
 8010c2a:	46bd      	mov	sp, r7
 8010c2c:	bd80      	pop	{r7, pc}
 8010c2e:	bf00      	nop
 8010c30:	200087f4 	.word	0x200087f4

08010c34 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010c34:	b480      	push	{r7}
 8010c36:	b087      	sub	sp, #28
 8010c38:	af00      	add	r7, sp, #0
 8010c3a:	60f8      	str	r0, [r7, #12]
 8010c3c:	60b9      	str	r1, [r7, #8]
 8010c3e:	4613      	mov	r3, r2
 8010c40:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8010c42:	2300      	movs	r3, #0
 8010c44:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8010c46:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010c4a:	4618      	mov	r0, r3
 8010c4c:	371c      	adds	r7, #28
 8010c4e:	46bd      	mov	sp, r7
 8010c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c54:	4770      	bx	lr
	...

08010c58 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010c58:	b480      	push	{r7}
 8010c5a:	b083      	sub	sp, #12
 8010c5c:	af00      	add	r7, sp, #0
 8010c5e:	4603      	mov	r3, r0
 8010c60:	6039      	str	r1, [r7, #0]
 8010c62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010c64:	683b      	ldr	r3, [r7, #0]
 8010c66:	2212      	movs	r2, #18
 8010c68:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8010c6a:	4b03      	ldr	r3, [pc, #12]	; (8010c78 <USBD_FS_DeviceDescriptor+0x20>)
}
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	370c      	adds	r7, #12
 8010c70:	46bd      	mov	sp, r7
 8010c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c76:	4770      	bx	lr
 8010c78:	20000154 	.word	0x20000154

08010c7c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010c7c:	b480      	push	{r7}
 8010c7e:	b083      	sub	sp, #12
 8010c80:	af00      	add	r7, sp, #0
 8010c82:	4603      	mov	r3, r0
 8010c84:	6039      	str	r1, [r7, #0]
 8010c86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010c88:	683b      	ldr	r3, [r7, #0]
 8010c8a:	2204      	movs	r2, #4
 8010c8c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010c8e:	4b03      	ldr	r3, [pc, #12]	; (8010c9c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010c90:	4618      	mov	r0, r3
 8010c92:	370c      	adds	r7, #12
 8010c94:	46bd      	mov	sp, r7
 8010c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c9a:	4770      	bx	lr
 8010c9c:	20000174 	.word	0x20000174

08010ca0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010ca0:	b580      	push	{r7, lr}
 8010ca2:	b082      	sub	sp, #8
 8010ca4:	af00      	add	r7, sp, #0
 8010ca6:	4603      	mov	r3, r0
 8010ca8:	6039      	str	r1, [r7, #0]
 8010caa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010cac:	79fb      	ldrb	r3, [r7, #7]
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d105      	bne.n	8010cbe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010cb2:	683a      	ldr	r2, [r7, #0]
 8010cb4:	4907      	ldr	r1, [pc, #28]	; (8010cd4 <USBD_FS_ProductStrDescriptor+0x34>)
 8010cb6:	4808      	ldr	r0, [pc, #32]	; (8010cd8 <USBD_FS_ProductStrDescriptor+0x38>)
 8010cb8:	f7f8 ff6b 	bl	8009b92 <USBD_GetString>
 8010cbc:	e004      	b.n	8010cc8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010cbe:	683a      	ldr	r2, [r7, #0]
 8010cc0:	4904      	ldr	r1, [pc, #16]	; (8010cd4 <USBD_FS_ProductStrDescriptor+0x34>)
 8010cc2:	4805      	ldr	r0, [pc, #20]	; (8010cd8 <USBD_FS_ProductStrDescriptor+0x38>)
 8010cc4:	f7f8 ff65 	bl	8009b92 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010cc8:	4b02      	ldr	r3, [pc, #8]	; (8010cd4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8010cca:	4618      	mov	r0, r3
 8010ccc:	3708      	adds	r7, #8
 8010cce:	46bd      	mov	sp, r7
 8010cd0:	bd80      	pop	{r7, pc}
 8010cd2:	bf00      	nop
 8010cd4:	20009ac4 	.word	0x20009ac4
 8010cd8:	080122ec 	.word	0x080122ec

08010cdc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010cdc:	b580      	push	{r7, lr}
 8010cde:	b082      	sub	sp, #8
 8010ce0:	af00      	add	r7, sp, #0
 8010ce2:	4603      	mov	r3, r0
 8010ce4:	6039      	str	r1, [r7, #0]
 8010ce6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010ce8:	683a      	ldr	r2, [r7, #0]
 8010cea:	4904      	ldr	r1, [pc, #16]	; (8010cfc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010cec:	4804      	ldr	r0, [pc, #16]	; (8010d00 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010cee:	f7f8 ff50 	bl	8009b92 <USBD_GetString>
  return USBD_StrDesc;
 8010cf2:	4b02      	ldr	r3, [pc, #8]	; (8010cfc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010cf4:	4618      	mov	r0, r3
 8010cf6:	3708      	adds	r7, #8
 8010cf8:	46bd      	mov	sp, r7
 8010cfa:	bd80      	pop	{r7, pc}
 8010cfc:	20009ac4 	.word	0x20009ac4
 8010d00:	08012304 	.word	0x08012304

08010d04 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010d04:	b580      	push	{r7, lr}
 8010d06:	b082      	sub	sp, #8
 8010d08:	af00      	add	r7, sp, #0
 8010d0a:	4603      	mov	r3, r0
 8010d0c:	6039      	str	r1, [r7, #0]
 8010d0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010d10:	683b      	ldr	r3, [r7, #0]
 8010d12:	221a      	movs	r2, #26
 8010d14:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010d16:	f000 f855 	bl	8010dc4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8010d1a:	4b02      	ldr	r3, [pc, #8]	; (8010d24 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010d1c:	4618      	mov	r0, r3
 8010d1e:	3708      	adds	r7, #8
 8010d20:	46bd      	mov	sp, r7
 8010d22:	bd80      	pop	{r7, pc}
 8010d24:	20000178 	.word	0x20000178

08010d28 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010d28:	b580      	push	{r7, lr}
 8010d2a:	b082      	sub	sp, #8
 8010d2c:	af00      	add	r7, sp, #0
 8010d2e:	4603      	mov	r3, r0
 8010d30:	6039      	str	r1, [r7, #0]
 8010d32:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010d34:	79fb      	ldrb	r3, [r7, #7]
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d105      	bne.n	8010d46 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010d3a:	683a      	ldr	r2, [r7, #0]
 8010d3c:	4907      	ldr	r1, [pc, #28]	; (8010d5c <USBD_FS_ConfigStrDescriptor+0x34>)
 8010d3e:	4808      	ldr	r0, [pc, #32]	; (8010d60 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010d40:	f7f8 ff27 	bl	8009b92 <USBD_GetString>
 8010d44:	e004      	b.n	8010d50 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010d46:	683a      	ldr	r2, [r7, #0]
 8010d48:	4904      	ldr	r1, [pc, #16]	; (8010d5c <USBD_FS_ConfigStrDescriptor+0x34>)
 8010d4a:	4805      	ldr	r0, [pc, #20]	; (8010d60 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010d4c:	f7f8 ff21 	bl	8009b92 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010d50:	4b02      	ldr	r3, [pc, #8]	; (8010d5c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010d52:	4618      	mov	r0, r3
 8010d54:	3708      	adds	r7, #8
 8010d56:	46bd      	mov	sp, r7
 8010d58:	bd80      	pop	{r7, pc}
 8010d5a:	bf00      	nop
 8010d5c:	20009ac4 	.word	0x20009ac4
 8010d60:	08012318 	.word	0x08012318

08010d64 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010d64:	b580      	push	{r7, lr}
 8010d66:	b082      	sub	sp, #8
 8010d68:	af00      	add	r7, sp, #0
 8010d6a:	4603      	mov	r3, r0
 8010d6c:	6039      	str	r1, [r7, #0]
 8010d6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010d70:	79fb      	ldrb	r3, [r7, #7]
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d105      	bne.n	8010d82 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010d76:	683a      	ldr	r2, [r7, #0]
 8010d78:	4907      	ldr	r1, [pc, #28]	; (8010d98 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010d7a:	4808      	ldr	r0, [pc, #32]	; (8010d9c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010d7c:	f7f8 ff09 	bl	8009b92 <USBD_GetString>
 8010d80:	e004      	b.n	8010d8c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010d82:	683a      	ldr	r2, [r7, #0]
 8010d84:	4904      	ldr	r1, [pc, #16]	; (8010d98 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010d86:	4805      	ldr	r0, [pc, #20]	; (8010d9c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010d88:	f7f8 ff03 	bl	8009b92 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010d8c:	4b02      	ldr	r3, [pc, #8]	; (8010d98 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010d8e:	4618      	mov	r0, r3
 8010d90:	3708      	adds	r7, #8
 8010d92:	46bd      	mov	sp, r7
 8010d94:	bd80      	pop	{r7, pc}
 8010d96:	bf00      	nop
 8010d98:	20009ac4 	.word	0x20009ac4
 8010d9c:	08012324 	.word	0x08012324

08010da0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010da0:	b480      	push	{r7}
 8010da2:	b083      	sub	sp, #12
 8010da4:	af00      	add	r7, sp, #0
 8010da6:	4603      	mov	r3, r0
 8010da8:	6039      	str	r1, [r7, #0]
 8010daa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8010dac:	683b      	ldr	r3, [r7, #0]
 8010dae:	220c      	movs	r2, #12
 8010db0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8010db2:	4b03      	ldr	r3, [pc, #12]	; (8010dc0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8010db4:	4618      	mov	r0, r3
 8010db6:	370c      	adds	r7, #12
 8010db8:	46bd      	mov	sp, r7
 8010dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dbe:	4770      	bx	lr
 8010dc0:	20000168 	.word	0x20000168

08010dc4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010dc4:	b580      	push	{r7, lr}
 8010dc6:	b084      	sub	sp, #16
 8010dc8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010dca:	4b0f      	ldr	r3, [pc, #60]	; (8010e08 <Get_SerialNum+0x44>)
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010dd0:	4b0e      	ldr	r3, [pc, #56]	; (8010e0c <Get_SerialNum+0x48>)
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010dd6:	4b0e      	ldr	r3, [pc, #56]	; (8010e10 <Get_SerialNum+0x4c>)
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010ddc:	68fa      	ldr	r2, [r7, #12]
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	4413      	add	r3, r2
 8010de2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d009      	beq.n	8010dfe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010dea:	2208      	movs	r2, #8
 8010dec:	4909      	ldr	r1, [pc, #36]	; (8010e14 <Get_SerialNum+0x50>)
 8010dee:	68f8      	ldr	r0, [r7, #12]
 8010df0:	f000 f814 	bl	8010e1c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010df4:	2204      	movs	r2, #4
 8010df6:	4908      	ldr	r1, [pc, #32]	; (8010e18 <Get_SerialNum+0x54>)
 8010df8:	68b8      	ldr	r0, [r7, #8]
 8010dfa:	f000 f80f 	bl	8010e1c <IntToUnicode>
  }
}
 8010dfe:	bf00      	nop
 8010e00:	3710      	adds	r7, #16
 8010e02:	46bd      	mov	sp, r7
 8010e04:	bd80      	pop	{r7, pc}
 8010e06:	bf00      	nop
 8010e08:	1ff0f420 	.word	0x1ff0f420
 8010e0c:	1ff0f424 	.word	0x1ff0f424
 8010e10:	1ff0f428 	.word	0x1ff0f428
 8010e14:	2000017a 	.word	0x2000017a
 8010e18:	2000018a 	.word	0x2000018a

08010e1c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010e1c:	b480      	push	{r7}
 8010e1e:	b087      	sub	sp, #28
 8010e20:	af00      	add	r7, sp, #0
 8010e22:	60f8      	str	r0, [r7, #12]
 8010e24:	60b9      	str	r1, [r7, #8]
 8010e26:	4613      	mov	r3, r2
 8010e28:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010e2a:	2300      	movs	r3, #0
 8010e2c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010e2e:	2300      	movs	r3, #0
 8010e30:	75fb      	strb	r3, [r7, #23]
 8010e32:	e027      	b.n	8010e84 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010e34:	68fb      	ldr	r3, [r7, #12]
 8010e36:	0f1b      	lsrs	r3, r3, #28
 8010e38:	2b09      	cmp	r3, #9
 8010e3a:	d80b      	bhi.n	8010e54 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010e3c:	68fb      	ldr	r3, [r7, #12]
 8010e3e:	0f1b      	lsrs	r3, r3, #28
 8010e40:	b2da      	uxtb	r2, r3
 8010e42:	7dfb      	ldrb	r3, [r7, #23]
 8010e44:	005b      	lsls	r3, r3, #1
 8010e46:	4619      	mov	r1, r3
 8010e48:	68bb      	ldr	r3, [r7, #8]
 8010e4a:	440b      	add	r3, r1
 8010e4c:	3230      	adds	r2, #48	; 0x30
 8010e4e:	b2d2      	uxtb	r2, r2
 8010e50:	701a      	strb	r2, [r3, #0]
 8010e52:	e00a      	b.n	8010e6a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	0f1b      	lsrs	r3, r3, #28
 8010e58:	b2da      	uxtb	r2, r3
 8010e5a:	7dfb      	ldrb	r3, [r7, #23]
 8010e5c:	005b      	lsls	r3, r3, #1
 8010e5e:	4619      	mov	r1, r3
 8010e60:	68bb      	ldr	r3, [r7, #8]
 8010e62:	440b      	add	r3, r1
 8010e64:	3237      	adds	r2, #55	; 0x37
 8010e66:	b2d2      	uxtb	r2, r2
 8010e68:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010e6a:	68fb      	ldr	r3, [r7, #12]
 8010e6c:	011b      	lsls	r3, r3, #4
 8010e6e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010e70:	7dfb      	ldrb	r3, [r7, #23]
 8010e72:	005b      	lsls	r3, r3, #1
 8010e74:	3301      	adds	r3, #1
 8010e76:	68ba      	ldr	r2, [r7, #8]
 8010e78:	4413      	add	r3, r2
 8010e7a:	2200      	movs	r2, #0
 8010e7c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010e7e:	7dfb      	ldrb	r3, [r7, #23]
 8010e80:	3301      	adds	r3, #1
 8010e82:	75fb      	strb	r3, [r7, #23]
 8010e84:	7dfa      	ldrb	r2, [r7, #23]
 8010e86:	79fb      	ldrb	r3, [r7, #7]
 8010e88:	429a      	cmp	r2, r3
 8010e8a:	d3d3      	bcc.n	8010e34 <IntToUnicode+0x18>
  }
}
 8010e8c:	bf00      	nop
 8010e8e:	371c      	adds	r7, #28
 8010e90:	46bd      	mov	sp, r7
 8010e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e96:	4770      	bx	lr

08010e98 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010e98:	b580      	push	{r7, lr}
 8010e9a:	b08a      	sub	sp, #40	; 0x28
 8010e9c:	af00      	add	r7, sp, #0
 8010e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010ea0:	f107 0314 	add.w	r3, r7, #20
 8010ea4:	2200      	movs	r2, #0
 8010ea6:	601a      	str	r2, [r3, #0]
 8010ea8:	605a      	str	r2, [r3, #4]
 8010eaa:	609a      	str	r2, [r3, #8]
 8010eac:	60da      	str	r2, [r3, #12]
 8010eae:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010eb8:	d13c      	bne.n	8010f34 <HAL_PCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010eba:	4b20      	ldr	r3, [pc, #128]	; (8010f3c <HAL_PCD_MspInit+0xa4>)
 8010ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ebe:	4a1f      	ldr	r2, [pc, #124]	; (8010f3c <HAL_PCD_MspInit+0xa4>)
 8010ec0:	f043 0301 	orr.w	r3, r3, #1
 8010ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8010ec6:	4b1d      	ldr	r3, [pc, #116]	; (8010f3c <HAL_PCD_MspInit+0xa4>)
 8010ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010eca:	f003 0301 	and.w	r3, r3, #1
 8010ece:	613b      	str	r3, [r7, #16]
 8010ed0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010ed2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8010ed6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010ed8:	2302      	movs	r3, #2
 8010eda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010edc:	2300      	movs	r3, #0
 8010ede:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010ee0:	2303      	movs	r3, #3
 8010ee2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010ee4:	230a      	movs	r3, #10
 8010ee6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010ee8:	f107 0314 	add.w	r3, r7, #20
 8010eec:	4619      	mov	r1, r3
 8010eee:	4814      	ldr	r0, [pc, #80]	; (8010f40 <HAL_PCD_MspInit+0xa8>)
 8010ef0:	f7f0 fede 	bl	8001cb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010ef4:	4b11      	ldr	r3, [pc, #68]	; (8010f3c <HAL_PCD_MspInit+0xa4>)
 8010ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ef8:	4a10      	ldr	r2, [pc, #64]	; (8010f3c <HAL_PCD_MspInit+0xa4>)
 8010efa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010efe:	6353      	str	r3, [r2, #52]	; 0x34
 8010f00:	4b0e      	ldr	r3, [pc, #56]	; (8010f3c <HAL_PCD_MspInit+0xa4>)
 8010f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010f08:	60fb      	str	r3, [r7, #12]
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	4b0b      	ldr	r3, [pc, #44]	; (8010f3c <HAL_PCD_MspInit+0xa4>)
 8010f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f10:	4a0a      	ldr	r2, [pc, #40]	; (8010f3c <HAL_PCD_MspInit+0xa4>)
 8010f12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010f16:	6453      	str	r3, [r2, #68]	; 0x44
 8010f18:	4b08      	ldr	r3, [pc, #32]	; (8010f3c <HAL_PCD_MspInit+0xa4>)
 8010f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010f20:	60bb      	str	r3, [r7, #8]
 8010f22:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8010f24:	2200      	movs	r2, #0
 8010f26:	2105      	movs	r1, #5
 8010f28:	2043      	movs	r0, #67	; 0x43
 8010f2a:	f7f0 faf3 	bl	8001514 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010f2e:	2043      	movs	r0, #67	; 0x43
 8010f30:	f7f0 fb0c 	bl	800154c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010f34:	bf00      	nop
 8010f36:	3728      	adds	r7, #40	; 0x28
 8010f38:	46bd      	mov	sp, r7
 8010f3a:	bd80      	pop	{r7, pc}
 8010f3c:	40023800 	.word	0x40023800
 8010f40:	40020000 	.word	0x40020000

08010f44 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f44:	b580      	push	{r7, lr}
 8010f46:	b082      	sub	sp, #8
 8010f48:	af00      	add	r7, sp, #0
 8010f4a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8010f58:	4619      	mov	r1, r3
 8010f5a:	4610      	mov	r0, r2
 8010f5c:	f7f7 fe6c 	bl	8008c38 <USBD_LL_SetupStage>
}
 8010f60:	bf00      	nop
 8010f62:	3708      	adds	r7, #8
 8010f64:	46bd      	mov	sp, r7
 8010f66:	bd80      	pop	{r7, pc}

08010f68 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f68:	b580      	push	{r7, lr}
 8010f6a:	b082      	sub	sp, #8
 8010f6c:	af00      	add	r7, sp, #0
 8010f6e:	6078      	str	r0, [r7, #4]
 8010f70:	460b      	mov	r3, r1
 8010f72:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 8010f7a:	78fa      	ldrb	r2, [r7, #3]
 8010f7c:	6879      	ldr	r1, [r7, #4]
 8010f7e:	4613      	mov	r3, r2
 8010f80:	00db      	lsls	r3, r3, #3
 8010f82:	1a9b      	subs	r3, r3, r2
 8010f84:	009b      	lsls	r3, r3, #2
 8010f86:	440b      	add	r3, r1
 8010f88:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8010f8c:	681a      	ldr	r2, [r3, #0]
 8010f8e:	78fb      	ldrb	r3, [r7, #3]
 8010f90:	4619      	mov	r1, r3
 8010f92:	f7f7 fea4 	bl	8008cde <USBD_LL_DataOutStage>
}
 8010f96:	bf00      	nop
 8010f98:	3708      	adds	r7, #8
 8010f9a:	46bd      	mov	sp, r7
 8010f9c:	bd80      	pop	{r7, pc}

08010f9e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f9e:	b580      	push	{r7, lr}
 8010fa0:	b082      	sub	sp, #8
 8010fa2:	af00      	add	r7, sp, #0
 8010fa4:	6078      	str	r0, [r7, #4]
 8010fa6:	460b      	mov	r3, r1
 8010fa8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 8010fb0:	78fa      	ldrb	r2, [r7, #3]
 8010fb2:	6879      	ldr	r1, [r7, #4]
 8010fb4:	4613      	mov	r3, r2
 8010fb6:	00db      	lsls	r3, r3, #3
 8010fb8:	1a9b      	subs	r3, r3, r2
 8010fba:	009b      	lsls	r3, r3, #2
 8010fbc:	440b      	add	r3, r1
 8010fbe:	3348      	adds	r3, #72	; 0x48
 8010fc0:	681a      	ldr	r2, [r3, #0]
 8010fc2:	78fb      	ldrb	r3, [r7, #3]
 8010fc4:	4619      	mov	r1, r3
 8010fc6:	f7f7 feed 	bl	8008da4 <USBD_LL_DataInStage>
}
 8010fca:	bf00      	nop
 8010fcc:	3708      	adds	r7, #8
 8010fce:	46bd      	mov	sp, r7
 8010fd0:	bd80      	pop	{r7, pc}

08010fd2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010fd2:	b580      	push	{r7, lr}
 8010fd4:	b082      	sub	sp, #8
 8010fd6:	af00      	add	r7, sp, #0
 8010fd8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	f7f7 fff1 	bl	8008fc8 <USBD_LL_SOF>
}
 8010fe6:	bf00      	nop
 8010fe8:	3708      	adds	r7, #8
 8010fea:	46bd      	mov	sp, r7
 8010fec:	bd80      	pop	{r7, pc}

08010fee <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8010fee:	b580      	push	{r7, lr}
 8010ff0:	b084      	sub	sp, #16
 8010ff2:	af00      	add	r7, sp, #0
 8010ff4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010ff6:	2301      	movs	r3, #1
 8010ff8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	68db      	ldr	r3, [r3, #12]
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d102      	bne.n	8011008 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8011002:	2300      	movs	r3, #0
 8011004:	73fb      	strb	r3, [r7, #15]
 8011006:	e008      	b.n	801101a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	68db      	ldr	r3, [r3, #12]
 801100c:	2b02      	cmp	r3, #2
 801100e:	d102      	bne.n	8011016 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8011010:	2301      	movs	r3, #1
 8011012:	73fb      	strb	r3, [r7, #15]
 8011014:	e001      	b.n	801101a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8011016:	f7ef fc71 	bl	80008fc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8011020:	7bfa      	ldrb	r2, [r7, #15]
 8011022:	4611      	mov	r1, r2
 8011024:	4618      	mov	r0, r3
 8011026:	f7f7 ff94 	bl	8008f52 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8011030:	4618      	mov	r0, r3
 8011032:	f7f7 ff4d 	bl	8008ed0 <USBD_LL_Reset>
}
 8011036:	bf00      	nop
 8011038:	3710      	adds	r7, #16
 801103a:	46bd      	mov	sp, r7
 801103c:	bd80      	pop	{r7, pc}
	...

08011040 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011040:	b580      	push	{r7, lr}
 8011042:	b082      	sub	sp, #8
 8011044:	af00      	add	r7, sp, #0
 8011046:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801104e:	4618      	mov	r0, r3
 8011050:	f7f7 ff8f 	bl	8008f72 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	687a      	ldr	r2, [r7, #4]
 8011060:	6812      	ldr	r2, [r2, #0]
 8011062:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011066:	f043 0301 	orr.w	r3, r3, #1
 801106a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	6a1b      	ldr	r3, [r3, #32]
 8011070:	2b00      	cmp	r3, #0
 8011072:	d005      	beq.n	8011080 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011074:	4b04      	ldr	r3, [pc, #16]	; (8011088 <HAL_PCD_SuspendCallback+0x48>)
 8011076:	691b      	ldr	r3, [r3, #16]
 8011078:	4a03      	ldr	r2, [pc, #12]	; (8011088 <HAL_PCD_SuspendCallback+0x48>)
 801107a:	f043 0306 	orr.w	r3, r3, #6
 801107e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8011080:	bf00      	nop
 8011082:	3708      	adds	r7, #8
 8011084:	46bd      	mov	sp, r7
 8011086:	bd80      	pop	{r7, pc}
 8011088:	e000ed00 	.word	0xe000ed00

0801108c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801108c:	b580      	push	{r7, lr}
 801108e:	b082      	sub	sp, #8
 8011090:	af00      	add	r7, sp, #0
 8011092:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801109a:	4618      	mov	r0, r3
 801109c:	f7f7 ff7e 	bl	8008f9c <USBD_LL_Resume>
}
 80110a0:	bf00      	nop
 80110a2:	3708      	adds	r7, #8
 80110a4:	46bd      	mov	sp, r7
 80110a6:	bd80      	pop	{r7, pc}

080110a8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80110a8:	b580      	push	{r7, lr}
 80110aa:	b082      	sub	sp, #8
 80110ac:	af00      	add	r7, sp, #0
 80110ae:	6078      	str	r0, [r7, #4]
 80110b0:	460b      	mov	r3, r1
 80110b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80110ba:	78fa      	ldrb	r2, [r7, #3]
 80110bc:	4611      	mov	r1, r2
 80110be:	4618      	mov	r0, r3
 80110c0:	f7f7 ffa9 	bl	8009016 <USBD_LL_IsoOUTIncomplete>
}
 80110c4:	bf00      	nop
 80110c6:	3708      	adds	r7, #8
 80110c8:	46bd      	mov	sp, r7
 80110ca:	bd80      	pop	{r7, pc}

080110cc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80110cc:	b580      	push	{r7, lr}
 80110ce:	b082      	sub	sp, #8
 80110d0:	af00      	add	r7, sp, #0
 80110d2:	6078      	str	r0, [r7, #4]
 80110d4:	460b      	mov	r3, r1
 80110d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80110de:	78fa      	ldrb	r2, [r7, #3]
 80110e0:	4611      	mov	r1, r2
 80110e2:	4618      	mov	r0, r3
 80110e4:	f7f7 ff8a 	bl	8008ffc <USBD_LL_IsoINIncomplete>
}
 80110e8:	bf00      	nop
 80110ea:	3708      	adds	r7, #8
 80110ec:	46bd      	mov	sp, r7
 80110ee:	bd80      	pop	{r7, pc}

080110f0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80110f0:	b580      	push	{r7, lr}
 80110f2:	b082      	sub	sp, #8
 80110f4:	af00      	add	r7, sp, #0
 80110f6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80110fe:	4618      	mov	r0, r3
 8011100:	f7f7 ff96 	bl	8009030 <USBD_LL_DevConnected>
}
 8011104:	bf00      	nop
 8011106:	3708      	adds	r7, #8
 8011108:	46bd      	mov	sp, r7
 801110a:	bd80      	pop	{r7, pc}

0801110c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801110c:	b580      	push	{r7, lr}
 801110e:	b082      	sub	sp, #8
 8011110:	af00      	add	r7, sp, #0
 8011112:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801111a:	4618      	mov	r0, r3
 801111c:	f7f7 ff93 	bl	8009046 <USBD_LL_DevDisconnected>
}
 8011120:	bf00      	nop
 8011122:	3708      	adds	r7, #8
 8011124:	46bd      	mov	sp, r7
 8011126:	bd80      	pop	{r7, pc}

08011128 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011128:	b580      	push	{r7, lr}
 801112a:	b082      	sub	sp, #8
 801112c:	af00      	add	r7, sp, #0
 801112e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	781b      	ldrb	r3, [r3, #0]
 8011134:	2b00      	cmp	r3, #0
 8011136:	d13c      	bne.n	80111b2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8011138:	4a20      	ldr	r2, [pc, #128]	; (80111bc <USBD_LL_Init+0x94>)
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	4a1e      	ldr	r2, [pc, #120]	; (80111bc <USBD_LL_Init+0x94>)
 8011144:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8011148:	4b1c      	ldr	r3, [pc, #112]	; (80111bc <USBD_LL_Init+0x94>)
 801114a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801114e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8011150:	4b1a      	ldr	r3, [pc, #104]	; (80111bc <USBD_LL_Init+0x94>)
 8011152:	2206      	movs	r2, #6
 8011154:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8011156:	4b19      	ldr	r3, [pc, #100]	; (80111bc <USBD_LL_Init+0x94>)
 8011158:	2202      	movs	r2, #2
 801115a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801115c:	4b17      	ldr	r3, [pc, #92]	; (80111bc <USBD_LL_Init+0x94>)
 801115e:	2200      	movs	r2, #0
 8011160:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8011162:	4b16      	ldr	r3, [pc, #88]	; (80111bc <USBD_LL_Init+0x94>)
 8011164:	2202      	movs	r2, #2
 8011166:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8011168:	4b14      	ldr	r3, [pc, #80]	; (80111bc <USBD_LL_Init+0x94>)
 801116a:	2200      	movs	r2, #0
 801116c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801116e:	4b13      	ldr	r3, [pc, #76]	; (80111bc <USBD_LL_Init+0x94>)
 8011170:	2200      	movs	r2, #0
 8011172:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8011174:	4b11      	ldr	r3, [pc, #68]	; (80111bc <USBD_LL_Init+0x94>)
 8011176:	2200      	movs	r2, #0
 8011178:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801117a:	4b10      	ldr	r3, [pc, #64]	; (80111bc <USBD_LL_Init+0x94>)
 801117c:	2200      	movs	r2, #0
 801117e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8011180:	4b0e      	ldr	r3, [pc, #56]	; (80111bc <USBD_LL_Init+0x94>)
 8011182:	2200      	movs	r2, #0
 8011184:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8011186:	480d      	ldr	r0, [pc, #52]	; (80111bc <USBD_LL_Init+0x94>)
 8011188:	f7f0 ff3c 	bl	8002004 <HAL_PCD_Init>
 801118c:	4603      	mov	r3, r0
 801118e:	2b00      	cmp	r3, #0
 8011190:	d001      	beq.n	8011196 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8011192:	f7ef fbb3 	bl	80008fc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8011196:	2180      	movs	r1, #128	; 0x80
 8011198:	4808      	ldr	r0, [pc, #32]	; (80111bc <USBD_LL_Init+0x94>)
 801119a:	f7f2 f8bc 	bl	8003316 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801119e:	2240      	movs	r2, #64	; 0x40
 80111a0:	2100      	movs	r1, #0
 80111a2:	4806      	ldr	r0, [pc, #24]	; (80111bc <USBD_LL_Init+0x94>)
 80111a4:	f7f2 f870 	bl	8003288 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80111a8:	2280      	movs	r2, #128	; 0x80
 80111aa:	2101      	movs	r1, #1
 80111ac:	4803      	ldr	r0, [pc, #12]	; (80111bc <USBD_LL_Init+0x94>)
 80111ae:	f7f2 f86b 	bl	8003288 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80111b2:	2300      	movs	r3, #0
}
 80111b4:	4618      	mov	r0, r3
 80111b6:	3708      	adds	r7, #8
 80111b8:	46bd      	mov	sp, r7
 80111ba:	bd80      	pop	{r7, pc}
 80111bc:	20009cc4 	.word	0x20009cc4

080111c0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80111c0:	b580      	push	{r7, lr}
 80111c2:	b084      	sub	sp, #16
 80111c4:	af00      	add	r7, sp, #0
 80111c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80111c8:	2300      	movs	r3, #0
 80111ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80111cc:	2300      	movs	r3, #0
 80111ce:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80111d6:	4618      	mov	r0, r3
 80111d8:	f7f1 f838 	bl	800224c <HAL_PCD_Start>
 80111dc:	4603      	mov	r3, r0
 80111de:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 80111e0:	7bfb      	ldrb	r3, [r7, #15]
 80111e2:	4618      	mov	r0, r3
 80111e4:	f000 f97e 	bl	80114e4 <USBD_Get_USB_Status>
 80111e8:	4603      	mov	r3, r0
 80111ea:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80111ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80111ee:	4618      	mov	r0, r3
 80111f0:	3710      	adds	r7, #16
 80111f2:	46bd      	mov	sp, r7
 80111f4:	bd80      	pop	{r7, pc}

080111f6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80111f6:	b580      	push	{r7, lr}
 80111f8:	b084      	sub	sp, #16
 80111fa:	af00      	add	r7, sp, #0
 80111fc:	6078      	str	r0, [r7, #4]
 80111fe:	4608      	mov	r0, r1
 8011200:	4611      	mov	r1, r2
 8011202:	461a      	mov	r2, r3
 8011204:	4603      	mov	r3, r0
 8011206:	70fb      	strb	r3, [r7, #3]
 8011208:	460b      	mov	r3, r1
 801120a:	70bb      	strb	r3, [r7, #2]
 801120c:	4613      	mov	r3, r2
 801120e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011210:	2300      	movs	r3, #0
 8011212:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011214:	2300      	movs	r3, #0
 8011216:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801121e:	78bb      	ldrb	r3, [r7, #2]
 8011220:	883a      	ldrh	r2, [r7, #0]
 8011222:	78f9      	ldrb	r1, [r7, #3]
 8011224:	f7f1 fc38 	bl	8002a98 <HAL_PCD_EP_Open>
 8011228:	4603      	mov	r3, r0
 801122a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801122c:	7bfb      	ldrb	r3, [r7, #15]
 801122e:	4618      	mov	r0, r3
 8011230:	f000 f958 	bl	80114e4 <USBD_Get_USB_Status>
 8011234:	4603      	mov	r3, r0
 8011236:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8011238:	7bbb      	ldrb	r3, [r7, #14]
}
 801123a:	4618      	mov	r0, r3
 801123c:	3710      	adds	r7, #16
 801123e:	46bd      	mov	sp, r7
 8011240:	bd80      	pop	{r7, pc}

08011242 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011242:	b580      	push	{r7, lr}
 8011244:	b084      	sub	sp, #16
 8011246:	af00      	add	r7, sp, #0
 8011248:	6078      	str	r0, [r7, #4]
 801124a:	460b      	mov	r3, r1
 801124c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801124e:	2300      	movs	r3, #0
 8011250:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011252:	2300      	movs	r3, #0
 8011254:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801125c:	78fa      	ldrb	r2, [r7, #3]
 801125e:	4611      	mov	r1, r2
 8011260:	4618      	mov	r0, r3
 8011262:	f7f1 fc81 	bl	8002b68 <HAL_PCD_EP_Close>
 8011266:	4603      	mov	r3, r0
 8011268:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 801126a:	7bfb      	ldrb	r3, [r7, #15]
 801126c:	4618      	mov	r0, r3
 801126e:	f000 f939 	bl	80114e4 <USBD_Get_USB_Status>
 8011272:	4603      	mov	r3, r0
 8011274:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8011276:	7bbb      	ldrb	r3, [r7, #14]
}
 8011278:	4618      	mov	r0, r3
 801127a:	3710      	adds	r7, #16
 801127c:	46bd      	mov	sp, r7
 801127e:	bd80      	pop	{r7, pc}

08011280 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011280:	b580      	push	{r7, lr}
 8011282:	b084      	sub	sp, #16
 8011284:	af00      	add	r7, sp, #0
 8011286:	6078      	str	r0, [r7, #4]
 8011288:	460b      	mov	r3, r1
 801128a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801128c:	2300      	movs	r3, #0
 801128e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011290:	2300      	movs	r3, #0
 8011292:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801129a:	78fa      	ldrb	r2, [r7, #3]
 801129c:	4611      	mov	r1, r2
 801129e:	4618      	mov	r0, r3
 80112a0:	f7f1 fd59 	bl	8002d56 <HAL_PCD_EP_SetStall>
 80112a4:	4603      	mov	r3, r0
 80112a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80112a8:	7bfb      	ldrb	r3, [r7, #15]
 80112aa:	4618      	mov	r0, r3
 80112ac:	f000 f91a 	bl	80114e4 <USBD_Get_USB_Status>
 80112b0:	4603      	mov	r3, r0
 80112b2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 80112b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80112b6:	4618      	mov	r0, r3
 80112b8:	3710      	adds	r7, #16
 80112ba:	46bd      	mov	sp, r7
 80112bc:	bd80      	pop	{r7, pc}

080112be <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80112be:	b580      	push	{r7, lr}
 80112c0:	b084      	sub	sp, #16
 80112c2:	af00      	add	r7, sp, #0
 80112c4:	6078      	str	r0, [r7, #4]
 80112c6:	460b      	mov	r3, r1
 80112c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80112ca:	2300      	movs	r3, #0
 80112cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80112ce:	2300      	movs	r3, #0
 80112d0:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80112d8:	78fa      	ldrb	r2, [r7, #3]
 80112da:	4611      	mov	r1, r2
 80112dc:	4618      	mov	r0, r3
 80112de:	f7f1 fd9e 	bl	8002e1e <HAL_PCD_EP_ClrStall>
 80112e2:	4603      	mov	r3, r0
 80112e4:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 80112e6:	7bfb      	ldrb	r3, [r7, #15]
 80112e8:	4618      	mov	r0, r3
 80112ea:	f000 f8fb 	bl	80114e4 <USBD_Get_USB_Status>
 80112ee:	4603      	mov	r3, r0
 80112f0:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 80112f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80112f4:	4618      	mov	r0, r3
 80112f6:	3710      	adds	r7, #16
 80112f8:	46bd      	mov	sp, r7
 80112fa:	bd80      	pop	{r7, pc}

080112fc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80112fc:	b480      	push	{r7}
 80112fe:	b085      	sub	sp, #20
 8011300:	af00      	add	r7, sp, #0
 8011302:	6078      	str	r0, [r7, #4]
 8011304:	460b      	mov	r3, r1
 8011306:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801130e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8011310:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011314:	2b00      	cmp	r3, #0
 8011316:	da0b      	bge.n	8011330 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8011318:	78fb      	ldrb	r3, [r7, #3]
 801131a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801131e:	68f9      	ldr	r1, [r7, #12]
 8011320:	4613      	mov	r3, r2
 8011322:	00db      	lsls	r3, r3, #3
 8011324:	1a9b      	subs	r3, r3, r2
 8011326:	009b      	lsls	r3, r3, #2
 8011328:	440b      	add	r3, r1
 801132a:	333e      	adds	r3, #62	; 0x3e
 801132c:	781b      	ldrb	r3, [r3, #0]
 801132e:	e00b      	b.n	8011348 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8011330:	78fb      	ldrb	r3, [r7, #3]
 8011332:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011336:	68f9      	ldr	r1, [r7, #12]
 8011338:	4613      	mov	r3, r2
 801133a:	00db      	lsls	r3, r3, #3
 801133c:	1a9b      	subs	r3, r3, r2
 801133e:	009b      	lsls	r3, r3, #2
 8011340:	440b      	add	r3, r1
 8011342:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011346:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011348:	4618      	mov	r0, r3
 801134a:	3714      	adds	r7, #20
 801134c:	46bd      	mov	sp, r7
 801134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011352:	4770      	bx	lr

08011354 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011354:	b580      	push	{r7, lr}
 8011356:	b084      	sub	sp, #16
 8011358:	af00      	add	r7, sp, #0
 801135a:	6078      	str	r0, [r7, #4]
 801135c:	460b      	mov	r3, r1
 801135e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011360:	2300      	movs	r3, #0
 8011362:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011364:	2300      	movs	r3, #0
 8011366:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801136e:	78fa      	ldrb	r2, [r7, #3]
 8011370:	4611      	mov	r1, r2
 8011372:	4618      	mov	r0, r3
 8011374:	f7f1 fb6b 	bl	8002a4e <HAL_PCD_SetAddress>
 8011378:	4603      	mov	r3, r0
 801137a:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 801137c:	7bfb      	ldrb	r3, [r7, #15]
 801137e:	4618      	mov	r0, r3
 8011380:	f000 f8b0 	bl	80114e4 <USBD_Get_USB_Status>
 8011384:	4603      	mov	r3, r0
 8011386:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8011388:	7bbb      	ldrb	r3, [r7, #14]
}
 801138a:	4618      	mov	r0, r3
 801138c:	3710      	adds	r7, #16
 801138e:	46bd      	mov	sp, r7
 8011390:	bd80      	pop	{r7, pc}

08011392 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011392:	b580      	push	{r7, lr}
 8011394:	b086      	sub	sp, #24
 8011396:	af00      	add	r7, sp, #0
 8011398:	60f8      	str	r0, [r7, #12]
 801139a:	607a      	str	r2, [r7, #4]
 801139c:	603b      	str	r3, [r7, #0]
 801139e:	460b      	mov	r3, r1
 80113a0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80113a2:	2300      	movs	r3, #0
 80113a4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80113a6:	2300      	movs	r3, #0
 80113a8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80113b0:	7af9      	ldrb	r1, [r7, #11]
 80113b2:	683b      	ldr	r3, [r7, #0]
 80113b4:	687a      	ldr	r2, [r7, #4]
 80113b6:	f7f1 fc84 	bl	8002cc2 <HAL_PCD_EP_Transmit>
 80113ba:	4603      	mov	r3, r0
 80113bc:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 80113be:	7dfb      	ldrb	r3, [r7, #23]
 80113c0:	4618      	mov	r0, r3
 80113c2:	f000 f88f 	bl	80114e4 <USBD_Get_USB_Status>
 80113c6:	4603      	mov	r3, r0
 80113c8:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 80113ca:	7dbb      	ldrb	r3, [r7, #22]
}
 80113cc:	4618      	mov	r0, r3
 80113ce:	3718      	adds	r7, #24
 80113d0:	46bd      	mov	sp, r7
 80113d2:	bd80      	pop	{r7, pc}

080113d4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80113d4:	b580      	push	{r7, lr}
 80113d6:	b086      	sub	sp, #24
 80113d8:	af00      	add	r7, sp, #0
 80113da:	60f8      	str	r0, [r7, #12]
 80113dc:	607a      	str	r2, [r7, #4]
 80113de:	603b      	str	r3, [r7, #0]
 80113e0:	460b      	mov	r3, r1
 80113e2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80113e4:	2300      	movs	r3, #0
 80113e6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80113e8:	2300      	movs	r3, #0
 80113ea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80113f2:	7af9      	ldrb	r1, [r7, #11]
 80113f4:	683b      	ldr	r3, [r7, #0]
 80113f6:	687a      	ldr	r2, [r7, #4]
 80113f8:	f7f1 fc00 	bl	8002bfc <HAL_PCD_EP_Receive>
 80113fc:	4603      	mov	r3, r0
 80113fe:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8011400:	7dfb      	ldrb	r3, [r7, #23]
 8011402:	4618      	mov	r0, r3
 8011404:	f000 f86e 	bl	80114e4 <USBD_Get_USB_Status>
 8011408:	4603      	mov	r3, r0
 801140a:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 801140c:	7dbb      	ldrb	r3, [r7, #22]
}
 801140e:	4618      	mov	r0, r3
 8011410:	3718      	adds	r7, #24
 8011412:	46bd      	mov	sp, r7
 8011414:	bd80      	pop	{r7, pc}

08011416 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011416:	b580      	push	{r7, lr}
 8011418:	b082      	sub	sp, #8
 801141a:	af00      	add	r7, sp, #0
 801141c:	6078      	str	r0, [r7, #4]
 801141e:	460b      	mov	r3, r1
 8011420:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011428:	78fa      	ldrb	r2, [r7, #3]
 801142a:	4611      	mov	r1, r2
 801142c:	4618      	mov	r0, r3
 801142e:	f7f1 fc30 	bl	8002c92 <HAL_PCD_EP_GetRxCount>
 8011432:	4603      	mov	r3, r0
}
 8011434:	4618      	mov	r0, r3
 8011436:	3708      	adds	r7, #8
 8011438:	46bd      	mov	sp, r7
 801143a:	bd80      	pop	{r7, pc}

0801143c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 801143c:	b580      	push	{r7, lr}
 801143e:	b082      	sub	sp, #8
 8011440:	af00      	add	r7, sp, #0
 8011442:	6078      	str	r0, [r7, #4]
 8011444:	460b      	mov	r3, r1
 8011446:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8011448:	78fb      	ldrb	r3, [r7, #3]
 801144a:	2b00      	cmp	r3, #0
 801144c:	d002      	beq.n	8011454 <HAL_PCDEx_LPM_Callback+0x18>
 801144e:	2b01      	cmp	r3, #1
 8011450:	d01f      	beq.n	8011492 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 8011452:	e03b      	b.n	80114cc <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	6a1b      	ldr	r3, [r3, #32]
 8011458:	2b00      	cmp	r3, #0
 801145a:	d007      	beq.n	801146c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 801145c:	f000 f83c 	bl	80114d8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011460:	4b1c      	ldr	r3, [pc, #112]	; (80114d4 <HAL_PCDEx_LPM_Callback+0x98>)
 8011462:	691b      	ldr	r3, [r3, #16]
 8011464:	4a1b      	ldr	r2, [pc, #108]	; (80114d4 <HAL_PCDEx_LPM_Callback+0x98>)
 8011466:	f023 0306 	bic.w	r3, r3, #6
 801146a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	687a      	ldr	r2, [r7, #4]
 8011478:	6812      	ldr	r2, [r2, #0]
 801147a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801147e:	f023 0301 	bic.w	r3, r3, #1
 8011482:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801148a:	4618      	mov	r0, r3
 801148c:	f7f7 fd86 	bl	8008f9c <USBD_LL_Resume>
    break;
 8011490:	e01c      	b.n	80114cc <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	687a      	ldr	r2, [r7, #4]
 801149e:	6812      	ldr	r2, [r2, #0]
 80114a0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80114a4:	f043 0301 	orr.w	r3, r3, #1
 80114a8:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80114b0:	4618      	mov	r0, r3
 80114b2:	f7f7 fd5e 	bl	8008f72 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	6a1b      	ldr	r3, [r3, #32]
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d005      	beq.n	80114ca <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80114be:	4b05      	ldr	r3, [pc, #20]	; (80114d4 <HAL_PCDEx_LPM_Callback+0x98>)
 80114c0:	691b      	ldr	r3, [r3, #16]
 80114c2:	4a04      	ldr	r2, [pc, #16]	; (80114d4 <HAL_PCDEx_LPM_Callback+0x98>)
 80114c4:	f043 0306 	orr.w	r3, r3, #6
 80114c8:	6113      	str	r3, [r2, #16]
    break;   
 80114ca:	bf00      	nop
}
 80114cc:	bf00      	nop
 80114ce:	3708      	adds	r7, #8
 80114d0:	46bd      	mov	sp, r7
 80114d2:	bd80      	pop	{r7, pc}
 80114d4:	e000ed00 	.word	0xe000ed00

080114d8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80114d8:	b580      	push	{r7, lr}
 80114da:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80114dc:	f7ef f8e4 	bl	80006a8 <SystemClock_Config>
}
 80114e0:	bf00      	nop
 80114e2:	bd80      	pop	{r7, pc}

080114e4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80114e4:	b480      	push	{r7}
 80114e6:	b085      	sub	sp, #20
 80114e8:	af00      	add	r7, sp, #0
 80114ea:	4603      	mov	r3, r0
 80114ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80114ee:	2300      	movs	r3, #0
 80114f0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80114f2:	79fb      	ldrb	r3, [r7, #7]
 80114f4:	2b03      	cmp	r3, #3
 80114f6:	d817      	bhi.n	8011528 <USBD_Get_USB_Status+0x44>
 80114f8:	a201      	add	r2, pc, #4	; (adr r2, 8011500 <USBD_Get_USB_Status+0x1c>)
 80114fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114fe:	bf00      	nop
 8011500:	08011511 	.word	0x08011511
 8011504:	08011517 	.word	0x08011517
 8011508:	0801151d 	.word	0x0801151d
 801150c:	08011523 	.word	0x08011523
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011510:	2300      	movs	r3, #0
 8011512:	73fb      	strb	r3, [r7, #15]
    break;
 8011514:	e00b      	b.n	801152e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011516:	2303      	movs	r3, #3
 8011518:	73fb      	strb	r3, [r7, #15]
    break;
 801151a:	e008      	b.n	801152e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801151c:	2301      	movs	r3, #1
 801151e:	73fb      	strb	r3, [r7, #15]
    break;
 8011520:	e005      	b.n	801152e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011522:	2303      	movs	r3, #3
 8011524:	73fb      	strb	r3, [r7, #15]
    break;
 8011526:	e002      	b.n	801152e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011528:	2303      	movs	r3, #3
 801152a:	73fb      	strb	r3, [r7, #15]
    break;
 801152c:	bf00      	nop
  }
  return usb_status;
 801152e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011530:	4618      	mov	r0, r3
 8011532:	3714      	adds	r7, #20
 8011534:	46bd      	mov	sp, r7
 8011536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801153a:	4770      	bx	lr

0801153c <__errno>:
 801153c:	4b01      	ldr	r3, [pc, #4]	; (8011544 <__errno+0x8>)
 801153e:	6818      	ldr	r0, [r3, #0]
 8011540:	4770      	bx	lr
 8011542:	bf00      	nop
 8011544:	20000194 	.word	0x20000194

08011548 <__libc_init_array>:
 8011548:	b570      	push	{r4, r5, r6, lr}
 801154a:	4e0d      	ldr	r6, [pc, #52]	; (8011580 <__libc_init_array+0x38>)
 801154c:	4c0d      	ldr	r4, [pc, #52]	; (8011584 <__libc_init_array+0x3c>)
 801154e:	1ba4      	subs	r4, r4, r6
 8011550:	10a4      	asrs	r4, r4, #2
 8011552:	2500      	movs	r5, #0
 8011554:	42a5      	cmp	r5, r4
 8011556:	d109      	bne.n	801156c <__libc_init_array+0x24>
 8011558:	4e0b      	ldr	r6, [pc, #44]	; (8011588 <__libc_init_array+0x40>)
 801155a:	4c0c      	ldr	r4, [pc, #48]	; (801158c <__libc_init_array+0x44>)
 801155c:	f000 fc72 	bl	8011e44 <_init>
 8011560:	1ba4      	subs	r4, r4, r6
 8011562:	10a4      	asrs	r4, r4, #2
 8011564:	2500      	movs	r5, #0
 8011566:	42a5      	cmp	r5, r4
 8011568:	d105      	bne.n	8011576 <__libc_init_array+0x2e>
 801156a:	bd70      	pop	{r4, r5, r6, pc}
 801156c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011570:	4798      	blx	r3
 8011572:	3501      	adds	r5, #1
 8011574:	e7ee      	b.n	8011554 <__libc_init_array+0xc>
 8011576:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801157a:	4798      	blx	r3
 801157c:	3501      	adds	r5, #1
 801157e:	e7f2      	b.n	8011566 <__libc_init_array+0x1e>
 8011580:	080124b4 	.word	0x080124b4
 8011584:	080124b4 	.word	0x080124b4
 8011588:	080124b4 	.word	0x080124b4
 801158c:	080124b8 	.word	0x080124b8

08011590 <malloc>:
 8011590:	4b02      	ldr	r3, [pc, #8]	; (801159c <malloc+0xc>)
 8011592:	4601      	mov	r1, r0
 8011594:	6818      	ldr	r0, [r3, #0]
 8011596:	f000 b86d 	b.w	8011674 <_malloc_r>
 801159a:	bf00      	nop
 801159c:	20000194 	.word	0x20000194

080115a0 <free>:
 80115a0:	4b02      	ldr	r3, [pc, #8]	; (80115ac <free+0xc>)
 80115a2:	4601      	mov	r1, r0
 80115a4:	6818      	ldr	r0, [r3, #0]
 80115a6:	f000 b817 	b.w	80115d8 <_free_r>
 80115aa:	bf00      	nop
 80115ac:	20000194 	.word	0x20000194

080115b0 <memcpy>:
 80115b0:	b510      	push	{r4, lr}
 80115b2:	1e43      	subs	r3, r0, #1
 80115b4:	440a      	add	r2, r1
 80115b6:	4291      	cmp	r1, r2
 80115b8:	d100      	bne.n	80115bc <memcpy+0xc>
 80115ba:	bd10      	pop	{r4, pc}
 80115bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80115c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80115c4:	e7f7      	b.n	80115b6 <memcpy+0x6>

080115c6 <memset>:
 80115c6:	4402      	add	r2, r0
 80115c8:	4603      	mov	r3, r0
 80115ca:	4293      	cmp	r3, r2
 80115cc:	d100      	bne.n	80115d0 <memset+0xa>
 80115ce:	4770      	bx	lr
 80115d0:	f803 1b01 	strb.w	r1, [r3], #1
 80115d4:	e7f9      	b.n	80115ca <memset+0x4>
	...

080115d8 <_free_r>:
 80115d8:	b538      	push	{r3, r4, r5, lr}
 80115da:	4605      	mov	r5, r0
 80115dc:	2900      	cmp	r1, #0
 80115de:	d045      	beq.n	801166c <_free_r+0x94>
 80115e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80115e4:	1f0c      	subs	r4, r1, #4
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	bfb8      	it	lt
 80115ea:	18e4      	addlt	r4, r4, r3
 80115ec:	f000 f906 	bl	80117fc <__malloc_lock>
 80115f0:	4a1f      	ldr	r2, [pc, #124]	; (8011670 <_free_r+0x98>)
 80115f2:	6813      	ldr	r3, [r2, #0]
 80115f4:	4610      	mov	r0, r2
 80115f6:	b933      	cbnz	r3, 8011606 <_free_r+0x2e>
 80115f8:	6063      	str	r3, [r4, #4]
 80115fa:	6014      	str	r4, [r2, #0]
 80115fc:	4628      	mov	r0, r5
 80115fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011602:	f000 b8fc 	b.w	80117fe <__malloc_unlock>
 8011606:	42a3      	cmp	r3, r4
 8011608:	d90c      	bls.n	8011624 <_free_r+0x4c>
 801160a:	6821      	ldr	r1, [r4, #0]
 801160c:	1862      	adds	r2, r4, r1
 801160e:	4293      	cmp	r3, r2
 8011610:	bf04      	itt	eq
 8011612:	681a      	ldreq	r2, [r3, #0]
 8011614:	685b      	ldreq	r3, [r3, #4]
 8011616:	6063      	str	r3, [r4, #4]
 8011618:	bf04      	itt	eq
 801161a:	1852      	addeq	r2, r2, r1
 801161c:	6022      	streq	r2, [r4, #0]
 801161e:	6004      	str	r4, [r0, #0]
 8011620:	e7ec      	b.n	80115fc <_free_r+0x24>
 8011622:	4613      	mov	r3, r2
 8011624:	685a      	ldr	r2, [r3, #4]
 8011626:	b10a      	cbz	r2, 801162c <_free_r+0x54>
 8011628:	42a2      	cmp	r2, r4
 801162a:	d9fa      	bls.n	8011622 <_free_r+0x4a>
 801162c:	6819      	ldr	r1, [r3, #0]
 801162e:	1858      	adds	r0, r3, r1
 8011630:	42a0      	cmp	r0, r4
 8011632:	d10b      	bne.n	801164c <_free_r+0x74>
 8011634:	6820      	ldr	r0, [r4, #0]
 8011636:	4401      	add	r1, r0
 8011638:	1858      	adds	r0, r3, r1
 801163a:	4282      	cmp	r2, r0
 801163c:	6019      	str	r1, [r3, #0]
 801163e:	d1dd      	bne.n	80115fc <_free_r+0x24>
 8011640:	6810      	ldr	r0, [r2, #0]
 8011642:	6852      	ldr	r2, [r2, #4]
 8011644:	605a      	str	r2, [r3, #4]
 8011646:	4401      	add	r1, r0
 8011648:	6019      	str	r1, [r3, #0]
 801164a:	e7d7      	b.n	80115fc <_free_r+0x24>
 801164c:	d902      	bls.n	8011654 <_free_r+0x7c>
 801164e:	230c      	movs	r3, #12
 8011650:	602b      	str	r3, [r5, #0]
 8011652:	e7d3      	b.n	80115fc <_free_r+0x24>
 8011654:	6820      	ldr	r0, [r4, #0]
 8011656:	1821      	adds	r1, r4, r0
 8011658:	428a      	cmp	r2, r1
 801165a:	bf04      	itt	eq
 801165c:	6811      	ldreq	r1, [r2, #0]
 801165e:	6852      	ldreq	r2, [r2, #4]
 8011660:	6062      	str	r2, [r4, #4]
 8011662:	bf04      	itt	eq
 8011664:	1809      	addeq	r1, r1, r0
 8011666:	6021      	streq	r1, [r4, #0]
 8011668:	605c      	str	r4, [r3, #4]
 801166a:	e7c7      	b.n	80115fc <_free_r+0x24>
 801166c:	bd38      	pop	{r3, r4, r5, pc}
 801166e:	bf00      	nop
 8011670:	20004b5c 	.word	0x20004b5c

08011674 <_malloc_r>:
 8011674:	b570      	push	{r4, r5, r6, lr}
 8011676:	1ccd      	adds	r5, r1, #3
 8011678:	f025 0503 	bic.w	r5, r5, #3
 801167c:	3508      	adds	r5, #8
 801167e:	2d0c      	cmp	r5, #12
 8011680:	bf38      	it	cc
 8011682:	250c      	movcc	r5, #12
 8011684:	2d00      	cmp	r5, #0
 8011686:	4606      	mov	r6, r0
 8011688:	db01      	blt.n	801168e <_malloc_r+0x1a>
 801168a:	42a9      	cmp	r1, r5
 801168c:	d903      	bls.n	8011696 <_malloc_r+0x22>
 801168e:	230c      	movs	r3, #12
 8011690:	6033      	str	r3, [r6, #0]
 8011692:	2000      	movs	r0, #0
 8011694:	bd70      	pop	{r4, r5, r6, pc}
 8011696:	f000 f8b1 	bl	80117fc <__malloc_lock>
 801169a:	4a21      	ldr	r2, [pc, #132]	; (8011720 <_malloc_r+0xac>)
 801169c:	6814      	ldr	r4, [r2, #0]
 801169e:	4621      	mov	r1, r4
 80116a0:	b991      	cbnz	r1, 80116c8 <_malloc_r+0x54>
 80116a2:	4c20      	ldr	r4, [pc, #128]	; (8011724 <_malloc_r+0xb0>)
 80116a4:	6823      	ldr	r3, [r4, #0]
 80116a6:	b91b      	cbnz	r3, 80116b0 <_malloc_r+0x3c>
 80116a8:	4630      	mov	r0, r6
 80116aa:	f000 f83d 	bl	8011728 <_sbrk_r>
 80116ae:	6020      	str	r0, [r4, #0]
 80116b0:	4629      	mov	r1, r5
 80116b2:	4630      	mov	r0, r6
 80116b4:	f000 f838 	bl	8011728 <_sbrk_r>
 80116b8:	1c43      	adds	r3, r0, #1
 80116ba:	d124      	bne.n	8011706 <_malloc_r+0x92>
 80116bc:	230c      	movs	r3, #12
 80116be:	6033      	str	r3, [r6, #0]
 80116c0:	4630      	mov	r0, r6
 80116c2:	f000 f89c 	bl	80117fe <__malloc_unlock>
 80116c6:	e7e4      	b.n	8011692 <_malloc_r+0x1e>
 80116c8:	680b      	ldr	r3, [r1, #0]
 80116ca:	1b5b      	subs	r3, r3, r5
 80116cc:	d418      	bmi.n	8011700 <_malloc_r+0x8c>
 80116ce:	2b0b      	cmp	r3, #11
 80116d0:	d90f      	bls.n	80116f2 <_malloc_r+0x7e>
 80116d2:	600b      	str	r3, [r1, #0]
 80116d4:	50cd      	str	r5, [r1, r3]
 80116d6:	18cc      	adds	r4, r1, r3
 80116d8:	4630      	mov	r0, r6
 80116da:	f000 f890 	bl	80117fe <__malloc_unlock>
 80116de:	f104 000b 	add.w	r0, r4, #11
 80116e2:	1d23      	adds	r3, r4, #4
 80116e4:	f020 0007 	bic.w	r0, r0, #7
 80116e8:	1ac3      	subs	r3, r0, r3
 80116ea:	d0d3      	beq.n	8011694 <_malloc_r+0x20>
 80116ec:	425a      	negs	r2, r3
 80116ee:	50e2      	str	r2, [r4, r3]
 80116f0:	e7d0      	b.n	8011694 <_malloc_r+0x20>
 80116f2:	428c      	cmp	r4, r1
 80116f4:	684b      	ldr	r3, [r1, #4]
 80116f6:	bf16      	itet	ne
 80116f8:	6063      	strne	r3, [r4, #4]
 80116fa:	6013      	streq	r3, [r2, #0]
 80116fc:	460c      	movne	r4, r1
 80116fe:	e7eb      	b.n	80116d8 <_malloc_r+0x64>
 8011700:	460c      	mov	r4, r1
 8011702:	6849      	ldr	r1, [r1, #4]
 8011704:	e7cc      	b.n	80116a0 <_malloc_r+0x2c>
 8011706:	1cc4      	adds	r4, r0, #3
 8011708:	f024 0403 	bic.w	r4, r4, #3
 801170c:	42a0      	cmp	r0, r4
 801170e:	d005      	beq.n	801171c <_malloc_r+0xa8>
 8011710:	1a21      	subs	r1, r4, r0
 8011712:	4630      	mov	r0, r6
 8011714:	f000 f808 	bl	8011728 <_sbrk_r>
 8011718:	3001      	adds	r0, #1
 801171a:	d0cf      	beq.n	80116bc <_malloc_r+0x48>
 801171c:	6025      	str	r5, [r4, #0]
 801171e:	e7db      	b.n	80116d8 <_malloc_r+0x64>
 8011720:	20004b5c 	.word	0x20004b5c
 8011724:	20004b60 	.word	0x20004b60

08011728 <_sbrk_r>:
 8011728:	b538      	push	{r3, r4, r5, lr}
 801172a:	4c06      	ldr	r4, [pc, #24]	; (8011744 <_sbrk_r+0x1c>)
 801172c:	2300      	movs	r3, #0
 801172e:	4605      	mov	r5, r0
 8011730:	4608      	mov	r0, r1
 8011732:	6023      	str	r3, [r4, #0]
 8011734:	f7ef fab0 	bl	8000c98 <_sbrk>
 8011738:	1c43      	adds	r3, r0, #1
 801173a:	d102      	bne.n	8011742 <_sbrk_r+0x1a>
 801173c:	6823      	ldr	r3, [r4, #0]
 801173e:	b103      	cbz	r3, 8011742 <_sbrk_r+0x1a>
 8011740:	602b      	str	r3, [r5, #0]
 8011742:	bd38      	pop	{r3, r4, r5, pc}
 8011744:	2000a0c8 	.word	0x2000a0c8

08011748 <siprintf>:
 8011748:	b40e      	push	{r1, r2, r3}
 801174a:	b500      	push	{lr}
 801174c:	b09c      	sub	sp, #112	; 0x70
 801174e:	ab1d      	add	r3, sp, #116	; 0x74
 8011750:	9002      	str	r0, [sp, #8]
 8011752:	9006      	str	r0, [sp, #24]
 8011754:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011758:	4809      	ldr	r0, [pc, #36]	; (8011780 <siprintf+0x38>)
 801175a:	9107      	str	r1, [sp, #28]
 801175c:	9104      	str	r1, [sp, #16]
 801175e:	4909      	ldr	r1, [pc, #36]	; (8011784 <siprintf+0x3c>)
 8011760:	f853 2b04 	ldr.w	r2, [r3], #4
 8011764:	9105      	str	r1, [sp, #20]
 8011766:	6800      	ldr	r0, [r0, #0]
 8011768:	9301      	str	r3, [sp, #4]
 801176a:	a902      	add	r1, sp, #8
 801176c:	f000 f8a2 	bl	80118b4 <_svfiprintf_r>
 8011770:	9b02      	ldr	r3, [sp, #8]
 8011772:	2200      	movs	r2, #0
 8011774:	701a      	strb	r2, [r3, #0]
 8011776:	b01c      	add	sp, #112	; 0x70
 8011778:	f85d eb04 	ldr.w	lr, [sp], #4
 801177c:	b003      	add	sp, #12
 801177e:	4770      	bx	lr
 8011780:	20000194 	.word	0x20000194
 8011784:	ffff0208 	.word	0xffff0208

08011788 <_vsniprintf_r>:
 8011788:	b530      	push	{r4, r5, lr}
 801178a:	1e14      	subs	r4, r2, #0
 801178c:	4605      	mov	r5, r0
 801178e:	b09b      	sub	sp, #108	; 0x6c
 8011790:	4618      	mov	r0, r3
 8011792:	da05      	bge.n	80117a0 <_vsniprintf_r+0x18>
 8011794:	238b      	movs	r3, #139	; 0x8b
 8011796:	602b      	str	r3, [r5, #0]
 8011798:	f04f 30ff 	mov.w	r0, #4294967295
 801179c:	b01b      	add	sp, #108	; 0x6c
 801179e:	bd30      	pop	{r4, r5, pc}
 80117a0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80117a4:	f8ad 300c 	strh.w	r3, [sp, #12]
 80117a8:	bf14      	ite	ne
 80117aa:	f104 33ff 	addne.w	r3, r4, #4294967295
 80117ae:	4623      	moveq	r3, r4
 80117b0:	9302      	str	r3, [sp, #8]
 80117b2:	9305      	str	r3, [sp, #20]
 80117b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80117b8:	9100      	str	r1, [sp, #0]
 80117ba:	9104      	str	r1, [sp, #16]
 80117bc:	f8ad 300e 	strh.w	r3, [sp, #14]
 80117c0:	4602      	mov	r2, r0
 80117c2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80117c4:	4669      	mov	r1, sp
 80117c6:	4628      	mov	r0, r5
 80117c8:	f000 f874 	bl	80118b4 <_svfiprintf_r>
 80117cc:	1c43      	adds	r3, r0, #1
 80117ce:	bfbc      	itt	lt
 80117d0:	238b      	movlt	r3, #139	; 0x8b
 80117d2:	602b      	strlt	r3, [r5, #0]
 80117d4:	2c00      	cmp	r4, #0
 80117d6:	d0e1      	beq.n	801179c <_vsniprintf_r+0x14>
 80117d8:	9b00      	ldr	r3, [sp, #0]
 80117da:	2200      	movs	r2, #0
 80117dc:	701a      	strb	r2, [r3, #0]
 80117de:	e7dd      	b.n	801179c <_vsniprintf_r+0x14>

080117e0 <vsniprintf>:
 80117e0:	b507      	push	{r0, r1, r2, lr}
 80117e2:	9300      	str	r3, [sp, #0]
 80117e4:	4613      	mov	r3, r2
 80117e6:	460a      	mov	r2, r1
 80117e8:	4601      	mov	r1, r0
 80117ea:	4803      	ldr	r0, [pc, #12]	; (80117f8 <vsniprintf+0x18>)
 80117ec:	6800      	ldr	r0, [r0, #0]
 80117ee:	f7ff ffcb 	bl	8011788 <_vsniprintf_r>
 80117f2:	b003      	add	sp, #12
 80117f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80117f8:	20000194 	.word	0x20000194

080117fc <__malloc_lock>:
 80117fc:	4770      	bx	lr

080117fe <__malloc_unlock>:
 80117fe:	4770      	bx	lr

08011800 <__ssputs_r>:
 8011800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011804:	688e      	ldr	r6, [r1, #8]
 8011806:	429e      	cmp	r6, r3
 8011808:	4682      	mov	sl, r0
 801180a:	460c      	mov	r4, r1
 801180c:	4690      	mov	r8, r2
 801180e:	4699      	mov	r9, r3
 8011810:	d837      	bhi.n	8011882 <__ssputs_r+0x82>
 8011812:	898a      	ldrh	r2, [r1, #12]
 8011814:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011818:	d031      	beq.n	801187e <__ssputs_r+0x7e>
 801181a:	6825      	ldr	r5, [r4, #0]
 801181c:	6909      	ldr	r1, [r1, #16]
 801181e:	1a6f      	subs	r7, r5, r1
 8011820:	6965      	ldr	r5, [r4, #20]
 8011822:	2302      	movs	r3, #2
 8011824:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011828:	fb95 f5f3 	sdiv	r5, r5, r3
 801182c:	f109 0301 	add.w	r3, r9, #1
 8011830:	443b      	add	r3, r7
 8011832:	429d      	cmp	r5, r3
 8011834:	bf38      	it	cc
 8011836:	461d      	movcc	r5, r3
 8011838:	0553      	lsls	r3, r2, #21
 801183a:	d530      	bpl.n	801189e <__ssputs_r+0x9e>
 801183c:	4629      	mov	r1, r5
 801183e:	f7ff ff19 	bl	8011674 <_malloc_r>
 8011842:	4606      	mov	r6, r0
 8011844:	b950      	cbnz	r0, 801185c <__ssputs_r+0x5c>
 8011846:	230c      	movs	r3, #12
 8011848:	f8ca 3000 	str.w	r3, [sl]
 801184c:	89a3      	ldrh	r3, [r4, #12]
 801184e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011852:	81a3      	strh	r3, [r4, #12]
 8011854:	f04f 30ff 	mov.w	r0, #4294967295
 8011858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801185c:	463a      	mov	r2, r7
 801185e:	6921      	ldr	r1, [r4, #16]
 8011860:	f7ff fea6 	bl	80115b0 <memcpy>
 8011864:	89a3      	ldrh	r3, [r4, #12]
 8011866:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801186a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801186e:	81a3      	strh	r3, [r4, #12]
 8011870:	6126      	str	r6, [r4, #16]
 8011872:	6165      	str	r5, [r4, #20]
 8011874:	443e      	add	r6, r7
 8011876:	1bed      	subs	r5, r5, r7
 8011878:	6026      	str	r6, [r4, #0]
 801187a:	60a5      	str	r5, [r4, #8]
 801187c:	464e      	mov	r6, r9
 801187e:	454e      	cmp	r6, r9
 8011880:	d900      	bls.n	8011884 <__ssputs_r+0x84>
 8011882:	464e      	mov	r6, r9
 8011884:	4632      	mov	r2, r6
 8011886:	4641      	mov	r1, r8
 8011888:	6820      	ldr	r0, [r4, #0]
 801188a:	f000 fa93 	bl	8011db4 <memmove>
 801188e:	68a3      	ldr	r3, [r4, #8]
 8011890:	1b9b      	subs	r3, r3, r6
 8011892:	60a3      	str	r3, [r4, #8]
 8011894:	6823      	ldr	r3, [r4, #0]
 8011896:	441e      	add	r6, r3
 8011898:	6026      	str	r6, [r4, #0]
 801189a:	2000      	movs	r0, #0
 801189c:	e7dc      	b.n	8011858 <__ssputs_r+0x58>
 801189e:	462a      	mov	r2, r5
 80118a0:	f000 faa1 	bl	8011de6 <_realloc_r>
 80118a4:	4606      	mov	r6, r0
 80118a6:	2800      	cmp	r0, #0
 80118a8:	d1e2      	bne.n	8011870 <__ssputs_r+0x70>
 80118aa:	6921      	ldr	r1, [r4, #16]
 80118ac:	4650      	mov	r0, sl
 80118ae:	f7ff fe93 	bl	80115d8 <_free_r>
 80118b2:	e7c8      	b.n	8011846 <__ssputs_r+0x46>

080118b4 <_svfiprintf_r>:
 80118b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118b8:	461d      	mov	r5, r3
 80118ba:	898b      	ldrh	r3, [r1, #12]
 80118bc:	061f      	lsls	r7, r3, #24
 80118be:	b09d      	sub	sp, #116	; 0x74
 80118c0:	4680      	mov	r8, r0
 80118c2:	460c      	mov	r4, r1
 80118c4:	4616      	mov	r6, r2
 80118c6:	d50f      	bpl.n	80118e8 <_svfiprintf_r+0x34>
 80118c8:	690b      	ldr	r3, [r1, #16]
 80118ca:	b96b      	cbnz	r3, 80118e8 <_svfiprintf_r+0x34>
 80118cc:	2140      	movs	r1, #64	; 0x40
 80118ce:	f7ff fed1 	bl	8011674 <_malloc_r>
 80118d2:	6020      	str	r0, [r4, #0]
 80118d4:	6120      	str	r0, [r4, #16]
 80118d6:	b928      	cbnz	r0, 80118e4 <_svfiprintf_r+0x30>
 80118d8:	230c      	movs	r3, #12
 80118da:	f8c8 3000 	str.w	r3, [r8]
 80118de:	f04f 30ff 	mov.w	r0, #4294967295
 80118e2:	e0c8      	b.n	8011a76 <_svfiprintf_r+0x1c2>
 80118e4:	2340      	movs	r3, #64	; 0x40
 80118e6:	6163      	str	r3, [r4, #20]
 80118e8:	2300      	movs	r3, #0
 80118ea:	9309      	str	r3, [sp, #36]	; 0x24
 80118ec:	2320      	movs	r3, #32
 80118ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80118f2:	2330      	movs	r3, #48	; 0x30
 80118f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80118f8:	9503      	str	r5, [sp, #12]
 80118fa:	f04f 0b01 	mov.w	fp, #1
 80118fe:	4637      	mov	r7, r6
 8011900:	463d      	mov	r5, r7
 8011902:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011906:	b10b      	cbz	r3, 801190c <_svfiprintf_r+0x58>
 8011908:	2b25      	cmp	r3, #37	; 0x25
 801190a:	d13e      	bne.n	801198a <_svfiprintf_r+0xd6>
 801190c:	ebb7 0a06 	subs.w	sl, r7, r6
 8011910:	d00b      	beq.n	801192a <_svfiprintf_r+0x76>
 8011912:	4653      	mov	r3, sl
 8011914:	4632      	mov	r2, r6
 8011916:	4621      	mov	r1, r4
 8011918:	4640      	mov	r0, r8
 801191a:	f7ff ff71 	bl	8011800 <__ssputs_r>
 801191e:	3001      	adds	r0, #1
 8011920:	f000 80a4 	beq.w	8011a6c <_svfiprintf_r+0x1b8>
 8011924:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011926:	4453      	add	r3, sl
 8011928:	9309      	str	r3, [sp, #36]	; 0x24
 801192a:	783b      	ldrb	r3, [r7, #0]
 801192c:	2b00      	cmp	r3, #0
 801192e:	f000 809d 	beq.w	8011a6c <_svfiprintf_r+0x1b8>
 8011932:	2300      	movs	r3, #0
 8011934:	f04f 32ff 	mov.w	r2, #4294967295
 8011938:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801193c:	9304      	str	r3, [sp, #16]
 801193e:	9307      	str	r3, [sp, #28]
 8011940:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011944:	931a      	str	r3, [sp, #104]	; 0x68
 8011946:	462f      	mov	r7, r5
 8011948:	2205      	movs	r2, #5
 801194a:	f817 1b01 	ldrb.w	r1, [r7], #1
 801194e:	4850      	ldr	r0, [pc, #320]	; (8011a90 <_svfiprintf_r+0x1dc>)
 8011950:	f7ee fc66 	bl	8000220 <memchr>
 8011954:	9b04      	ldr	r3, [sp, #16]
 8011956:	b9d0      	cbnz	r0, 801198e <_svfiprintf_r+0xda>
 8011958:	06d9      	lsls	r1, r3, #27
 801195a:	bf44      	itt	mi
 801195c:	2220      	movmi	r2, #32
 801195e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011962:	071a      	lsls	r2, r3, #28
 8011964:	bf44      	itt	mi
 8011966:	222b      	movmi	r2, #43	; 0x2b
 8011968:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801196c:	782a      	ldrb	r2, [r5, #0]
 801196e:	2a2a      	cmp	r2, #42	; 0x2a
 8011970:	d015      	beq.n	801199e <_svfiprintf_r+0xea>
 8011972:	9a07      	ldr	r2, [sp, #28]
 8011974:	462f      	mov	r7, r5
 8011976:	2000      	movs	r0, #0
 8011978:	250a      	movs	r5, #10
 801197a:	4639      	mov	r1, r7
 801197c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011980:	3b30      	subs	r3, #48	; 0x30
 8011982:	2b09      	cmp	r3, #9
 8011984:	d94d      	bls.n	8011a22 <_svfiprintf_r+0x16e>
 8011986:	b1b8      	cbz	r0, 80119b8 <_svfiprintf_r+0x104>
 8011988:	e00f      	b.n	80119aa <_svfiprintf_r+0xf6>
 801198a:	462f      	mov	r7, r5
 801198c:	e7b8      	b.n	8011900 <_svfiprintf_r+0x4c>
 801198e:	4a40      	ldr	r2, [pc, #256]	; (8011a90 <_svfiprintf_r+0x1dc>)
 8011990:	1a80      	subs	r0, r0, r2
 8011992:	fa0b f000 	lsl.w	r0, fp, r0
 8011996:	4318      	orrs	r0, r3
 8011998:	9004      	str	r0, [sp, #16]
 801199a:	463d      	mov	r5, r7
 801199c:	e7d3      	b.n	8011946 <_svfiprintf_r+0x92>
 801199e:	9a03      	ldr	r2, [sp, #12]
 80119a0:	1d11      	adds	r1, r2, #4
 80119a2:	6812      	ldr	r2, [r2, #0]
 80119a4:	9103      	str	r1, [sp, #12]
 80119a6:	2a00      	cmp	r2, #0
 80119a8:	db01      	blt.n	80119ae <_svfiprintf_r+0xfa>
 80119aa:	9207      	str	r2, [sp, #28]
 80119ac:	e004      	b.n	80119b8 <_svfiprintf_r+0x104>
 80119ae:	4252      	negs	r2, r2
 80119b0:	f043 0302 	orr.w	r3, r3, #2
 80119b4:	9207      	str	r2, [sp, #28]
 80119b6:	9304      	str	r3, [sp, #16]
 80119b8:	783b      	ldrb	r3, [r7, #0]
 80119ba:	2b2e      	cmp	r3, #46	; 0x2e
 80119bc:	d10c      	bne.n	80119d8 <_svfiprintf_r+0x124>
 80119be:	787b      	ldrb	r3, [r7, #1]
 80119c0:	2b2a      	cmp	r3, #42	; 0x2a
 80119c2:	d133      	bne.n	8011a2c <_svfiprintf_r+0x178>
 80119c4:	9b03      	ldr	r3, [sp, #12]
 80119c6:	1d1a      	adds	r2, r3, #4
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	9203      	str	r2, [sp, #12]
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	bfb8      	it	lt
 80119d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80119d4:	3702      	adds	r7, #2
 80119d6:	9305      	str	r3, [sp, #20]
 80119d8:	4d2e      	ldr	r5, [pc, #184]	; (8011a94 <_svfiprintf_r+0x1e0>)
 80119da:	7839      	ldrb	r1, [r7, #0]
 80119dc:	2203      	movs	r2, #3
 80119de:	4628      	mov	r0, r5
 80119e0:	f7ee fc1e 	bl	8000220 <memchr>
 80119e4:	b138      	cbz	r0, 80119f6 <_svfiprintf_r+0x142>
 80119e6:	2340      	movs	r3, #64	; 0x40
 80119e8:	1b40      	subs	r0, r0, r5
 80119ea:	fa03 f000 	lsl.w	r0, r3, r0
 80119ee:	9b04      	ldr	r3, [sp, #16]
 80119f0:	4303      	orrs	r3, r0
 80119f2:	3701      	adds	r7, #1
 80119f4:	9304      	str	r3, [sp, #16]
 80119f6:	7839      	ldrb	r1, [r7, #0]
 80119f8:	4827      	ldr	r0, [pc, #156]	; (8011a98 <_svfiprintf_r+0x1e4>)
 80119fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80119fe:	2206      	movs	r2, #6
 8011a00:	1c7e      	adds	r6, r7, #1
 8011a02:	f7ee fc0d 	bl	8000220 <memchr>
 8011a06:	2800      	cmp	r0, #0
 8011a08:	d038      	beq.n	8011a7c <_svfiprintf_r+0x1c8>
 8011a0a:	4b24      	ldr	r3, [pc, #144]	; (8011a9c <_svfiprintf_r+0x1e8>)
 8011a0c:	bb13      	cbnz	r3, 8011a54 <_svfiprintf_r+0x1a0>
 8011a0e:	9b03      	ldr	r3, [sp, #12]
 8011a10:	3307      	adds	r3, #7
 8011a12:	f023 0307 	bic.w	r3, r3, #7
 8011a16:	3308      	adds	r3, #8
 8011a18:	9303      	str	r3, [sp, #12]
 8011a1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a1c:	444b      	add	r3, r9
 8011a1e:	9309      	str	r3, [sp, #36]	; 0x24
 8011a20:	e76d      	b.n	80118fe <_svfiprintf_r+0x4a>
 8011a22:	fb05 3202 	mla	r2, r5, r2, r3
 8011a26:	2001      	movs	r0, #1
 8011a28:	460f      	mov	r7, r1
 8011a2a:	e7a6      	b.n	801197a <_svfiprintf_r+0xc6>
 8011a2c:	2300      	movs	r3, #0
 8011a2e:	3701      	adds	r7, #1
 8011a30:	9305      	str	r3, [sp, #20]
 8011a32:	4619      	mov	r1, r3
 8011a34:	250a      	movs	r5, #10
 8011a36:	4638      	mov	r0, r7
 8011a38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011a3c:	3a30      	subs	r2, #48	; 0x30
 8011a3e:	2a09      	cmp	r2, #9
 8011a40:	d903      	bls.n	8011a4a <_svfiprintf_r+0x196>
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d0c8      	beq.n	80119d8 <_svfiprintf_r+0x124>
 8011a46:	9105      	str	r1, [sp, #20]
 8011a48:	e7c6      	b.n	80119d8 <_svfiprintf_r+0x124>
 8011a4a:	fb05 2101 	mla	r1, r5, r1, r2
 8011a4e:	2301      	movs	r3, #1
 8011a50:	4607      	mov	r7, r0
 8011a52:	e7f0      	b.n	8011a36 <_svfiprintf_r+0x182>
 8011a54:	ab03      	add	r3, sp, #12
 8011a56:	9300      	str	r3, [sp, #0]
 8011a58:	4622      	mov	r2, r4
 8011a5a:	4b11      	ldr	r3, [pc, #68]	; (8011aa0 <_svfiprintf_r+0x1ec>)
 8011a5c:	a904      	add	r1, sp, #16
 8011a5e:	4640      	mov	r0, r8
 8011a60:	f3af 8000 	nop.w
 8011a64:	f1b0 3fff 	cmp.w	r0, #4294967295
 8011a68:	4681      	mov	r9, r0
 8011a6a:	d1d6      	bne.n	8011a1a <_svfiprintf_r+0x166>
 8011a6c:	89a3      	ldrh	r3, [r4, #12]
 8011a6e:	065b      	lsls	r3, r3, #25
 8011a70:	f53f af35 	bmi.w	80118de <_svfiprintf_r+0x2a>
 8011a74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011a76:	b01d      	add	sp, #116	; 0x74
 8011a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a7c:	ab03      	add	r3, sp, #12
 8011a7e:	9300      	str	r3, [sp, #0]
 8011a80:	4622      	mov	r2, r4
 8011a82:	4b07      	ldr	r3, [pc, #28]	; (8011aa0 <_svfiprintf_r+0x1ec>)
 8011a84:	a904      	add	r1, sp, #16
 8011a86:	4640      	mov	r0, r8
 8011a88:	f000 f882 	bl	8011b90 <_printf_i>
 8011a8c:	e7ea      	b.n	8011a64 <_svfiprintf_r+0x1b0>
 8011a8e:	bf00      	nop
 8011a90:	08012478 	.word	0x08012478
 8011a94:	0801247e 	.word	0x0801247e
 8011a98:	08012482 	.word	0x08012482
 8011a9c:	00000000 	.word	0x00000000
 8011aa0:	08011801 	.word	0x08011801

08011aa4 <_printf_common>:
 8011aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011aa8:	4691      	mov	r9, r2
 8011aaa:	461f      	mov	r7, r3
 8011aac:	688a      	ldr	r2, [r1, #8]
 8011aae:	690b      	ldr	r3, [r1, #16]
 8011ab0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011ab4:	4293      	cmp	r3, r2
 8011ab6:	bfb8      	it	lt
 8011ab8:	4613      	movlt	r3, r2
 8011aba:	f8c9 3000 	str.w	r3, [r9]
 8011abe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011ac2:	4606      	mov	r6, r0
 8011ac4:	460c      	mov	r4, r1
 8011ac6:	b112      	cbz	r2, 8011ace <_printf_common+0x2a>
 8011ac8:	3301      	adds	r3, #1
 8011aca:	f8c9 3000 	str.w	r3, [r9]
 8011ace:	6823      	ldr	r3, [r4, #0]
 8011ad0:	0699      	lsls	r1, r3, #26
 8011ad2:	bf42      	ittt	mi
 8011ad4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8011ad8:	3302      	addmi	r3, #2
 8011ada:	f8c9 3000 	strmi.w	r3, [r9]
 8011ade:	6825      	ldr	r5, [r4, #0]
 8011ae0:	f015 0506 	ands.w	r5, r5, #6
 8011ae4:	d107      	bne.n	8011af6 <_printf_common+0x52>
 8011ae6:	f104 0a19 	add.w	sl, r4, #25
 8011aea:	68e3      	ldr	r3, [r4, #12]
 8011aec:	f8d9 2000 	ldr.w	r2, [r9]
 8011af0:	1a9b      	subs	r3, r3, r2
 8011af2:	42ab      	cmp	r3, r5
 8011af4:	dc28      	bgt.n	8011b48 <_printf_common+0xa4>
 8011af6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8011afa:	6822      	ldr	r2, [r4, #0]
 8011afc:	3300      	adds	r3, #0
 8011afe:	bf18      	it	ne
 8011b00:	2301      	movne	r3, #1
 8011b02:	0692      	lsls	r2, r2, #26
 8011b04:	d42d      	bmi.n	8011b62 <_printf_common+0xbe>
 8011b06:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011b0a:	4639      	mov	r1, r7
 8011b0c:	4630      	mov	r0, r6
 8011b0e:	47c0      	blx	r8
 8011b10:	3001      	adds	r0, #1
 8011b12:	d020      	beq.n	8011b56 <_printf_common+0xb2>
 8011b14:	6823      	ldr	r3, [r4, #0]
 8011b16:	68e5      	ldr	r5, [r4, #12]
 8011b18:	f8d9 2000 	ldr.w	r2, [r9]
 8011b1c:	f003 0306 	and.w	r3, r3, #6
 8011b20:	2b04      	cmp	r3, #4
 8011b22:	bf08      	it	eq
 8011b24:	1aad      	subeq	r5, r5, r2
 8011b26:	68a3      	ldr	r3, [r4, #8]
 8011b28:	6922      	ldr	r2, [r4, #16]
 8011b2a:	bf0c      	ite	eq
 8011b2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011b30:	2500      	movne	r5, #0
 8011b32:	4293      	cmp	r3, r2
 8011b34:	bfc4      	itt	gt
 8011b36:	1a9b      	subgt	r3, r3, r2
 8011b38:	18ed      	addgt	r5, r5, r3
 8011b3a:	f04f 0900 	mov.w	r9, #0
 8011b3e:	341a      	adds	r4, #26
 8011b40:	454d      	cmp	r5, r9
 8011b42:	d11a      	bne.n	8011b7a <_printf_common+0xd6>
 8011b44:	2000      	movs	r0, #0
 8011b46:	e008      	b.n	8011b5a <_printf_common+0xb6>
 8011b48:	2301      	movs	r3, #1
 8011b4a:	4652      	mov	r2, sl
 8011b4c:	4639      	mov	r1, r7
 8011b4e:	4630      	mov	r0, r6
 8011b50:	47c0      	blx	r8
 8011b52:	3001      	adds	r0, #1
 8011b54:	d103      	bne.n	8011b5e <_printf_common+0xba>
 8011b56:	f04f 30ff 	mov.w	r0, #4294967295
 8011b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b5e:	3501      	adds	r5, #1
 8011b60:	e7c3      	b.n	8011aea <_printf_common+0x46>
 8011b62:	18e1      	adds	r1, r4, r3
 8011b64:	1c5a      	adds	r2, r3, #1
 8011b66:	2030      	movs	r0, #48	; 0x30
 8011b68:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011b6c:	4422      	add	r2, r4
 8011b6e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011b72:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011b76:	3302      	adds	r3, #2
 8011b78:	e7c5      	b.n	8011b06 <_printf_common+0x62>
 8011b7a:	2301      	movs	r3, #1
 8011b7c:	4622      	mov	r2, r4
 8011b7e:	4639      	mov	r1, r7
 8011b80:	4630      	mov	r0, r6
 8011b82:	47c0      	blx	r8
 8011b84:	3001      	adds	r0, #1
 8011b86:	d0e6      	beq.n	8011b56 <_printf_common+0xb2>
 8011b88:	f109 0901 	add.w	r9, r9, #1
 8011b8c:	e7d8      	b.n	8011b40 <_printf_common+0x9c>
	...

08011b90 <_printf_i>:
 8011b90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011b94:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8011b98:	460c      	mov	r4, r1
 8011b9a:	7e09      	ldrb	r1, [r1, #24]
 8011b9c:	b085      	sub	sp, #20
 8011b9e:	296e      	cmp	r1, #110	; 0x6e
 8011ba0:	4617      	mov	r7, r2
 8011ba2:	4606      	mov	r6, r0
 8011ba4:	4698      	mov	r8, r3
 8011ba6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011ba8:	f000 80b3 	beq.w	8011d12 <_printf_i+0x182>
 8011bac:	d822      	bhi.n	8011bf4 <_printf_i+0x64>
 8011bae:	2963      	cmp	r1, #99	; 0x63
 8011bb0:	d036      	beq.n	8011c20 <_printf_i+0x90>
 8011bb2:	d80a      	bhi.n	8011bca <_printf_i+0x3a>
 8011bb4:	2900      	cmp	r1, #0
 8011bb6:	f000 80b9 	beq.w	8011d2c <_printf_i+0x19c>
 8011bba:	2958      	cmp	r1, #88	; 0x58
 8011bbc:	f000 8083 	beq.w	8011cc6 <_printf_i+0x136>
 8011bc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011bc4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8011bc8:	e032      	b.n	8011c30 <_printf_i+0xa0>
 8011bca:	2964      	cmp	r1, #100	; 0x64
 8011bcc:	d001      	beq.n	8011bd2 <_printf_i+0x42>
 8011bce:	2969      	cmp	r1, #105	; 0x69
 8011bd0:	d1f6      	bne.n	8011bc0 <_printf_i+0x30>
 8011bd2:	6820      	ldr	r0, [r4, #0]
 8011bd4:	6813      	ldr	r3, [r2, #0]
 8011bd6:	0605      	lsls	r5, r0, #24
 8011bd8:	f103 0104 	add.w	r1, r3, #4
 8011bdc:	d52a      	bpl.n	8011c34 <_printf_i+0xa4>
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	6011      	str	r1, [r2, #0]
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	da03      	bge.n	8011bee <_printf_i+0x5e>
 8011be6:	222d      	movs	r2, #45	; 0x2d
 8011be8:	425b      	negs	r3, r3
 8011bea:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8011bee:	486f      	ldr	r0, [pc, #444]	; (8011dac <_printf_i+0x21c>)
 8011bf0:	220a      	movs	r2, #10
 8011bf2:	e039      	b.n	8011c68 <_printf_i+0xd8>
 8011bf4:	2973      	cmp	r1, #115	; 0x73
 8011bf6:	f000 809d 	beq.w	8011d34 <_printf_i+0x1a4>
 8011bfa:	d808      	bhi.n	8011c0e <_printf_i+0x7e>
 8011bfc:	296f      	cmp	r1, #111	; 0x6f
 8011bfe:	d020      	beq.n	8011c42 <_printf_i+0xb2>
 8011c00:	2970      	cmp	r1, #112	; 0x70
 8011c02:	d1dd      	bne.n	8011bc0 <_printf_i+0x30>
 8011c04:	6823      	ldr	r3, [r4, #0]
 8011c06:	f043 0320 	orr.w	r3, r3, #32
 8011c0a:	6023      	str	r3, [r4, #0]
 8011c0c:	e003      	b.n	8011c16 <_printf_i+0x86>
 8011c0e:	2975      	cmp	r1, #117	; 0x75
 8011c10:	d017      	beq.n	8011c42 <_printf_i+0xb2>
 8011c12:	2978      	cmp	r1, #120	; 0x78
 8011c14:	d1d4      	bne.n	8011bc0 <_printf_i+0x30>
 8011c16:	2378      	movs	r3, #120	; 0x78
 8011c18:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011c1c:	4864      	ldr	r0, [pc, #400]	; (8011db0 <_printf_i+0x220>)
 8011c1e:	e055      	b.n	8011ccc <_printf_i+0x13c>
 8011c20:	6813      	ldr	r3, [r2, #0]
 8011c22:	1d19      	adds	r1, r3, #4
 8011c24:	681b      	ldr	r3, [r3, #0]
 8011c26:	6011      	str	r1, [r2, #0]
 8011c28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011c2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011c30:	2301      	movs	r3, #1
 8011c32:	e08c      	b.n	8011d4e <_printf_i+0x1be>
 8011c34:	681b      	ldr	r3, [r3, #0]
 8011c36:	6011      	str	r1, [r2, #0]
 8011c38:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011c3c:	bf18      	it	ne
 8011c3e:	b21b      	sxthne	r3, r3
 8011c40:	e7cf      	b.n	8011be2 <_printf_i+0x52>
 8011c42:	6813      	ldr	r3, [r2, #0]
 8011c44:	6825      	ldr	r5, [r4, #0]
 8011c46:	1d18      	adds	r0, r3, #4
 8011c48:	6010      	str	r0, [r2, #0]
 8011c4a:	0628      	lsls	r0, r5, #24
 8011c4c:	d501      	bpl.n	8011c52 <_printf_i+0xc2>
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	e002      	b.n	8011c58 <_printf_i+0xc8>
 8011c52:	0668      	lsls	r0, r5, #25
 8011c54:	d5fb      	bpl.n	8011c4e <_printf_i+0xbe>
 8011c56:	881b      	ldrh	r3, [r3, #0]
 8011c58:	4854      	ldr	r0, [pc, #336]	; (8011dac <_printf_i+0x21c>)
 8011c5a:	296f      	cmp	r1, #111	; 0x6f
 8011c5c:	bf14      	ite	ne
 8011c5e:	220a      	movne	r2, #10
 8011c60:	2208      	moveq	r2, #8
 8011c62:	2100      	movs	r1, #0
 8011c64:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011c68:	6865      	ldr	r5, [r4, #4]
 8011c6a:	60a5      	str	r5, [r4, #8]
 8011c6c:	2d00      	cmp	r5, #0
 8011c6e:	f2c0 8095 	blt.w	8011d9c <_printf_i+0x20c>
 8011c72:	6821      	ldr	r1, [r4, #0]
 8011c74:	f021 0104 	bic.w	r1, r1, #4
 8011c78:	6021      	str	r1, [r4, #0]
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d13d      	bne.n	8011cfa <_printf_i+0x16a>
 8011c7e:	2d00      	cmp	r5, #0
 8011c80:	f040 808e 	bne.w	8011da0 <_printf_i+0x210>
 8011c84:	4665      	mov	r5, ip
 8011c86:	2a08      	cmp	r2, #8
 8011c88:	d10b      	bne.n	8011ca2 <_printf_i+0x112>
 8011c8a:	6823      	ldr	r3, [r4, #0]
 8011c8c:	07db      	lsls	r3, r3, #31
 8011c8e:	d508      	bpl.n	8011ca2 <_printf_i+0x112>
 8011c90:	6923      	ldr	r3, [r4, #16]
 8011c92:	6862      	ldr	r2, [r4, #4]
 8011c94:	429a      	cmp	r2, r3
 8011c96:	bfde      	ittt	le
 8011c98:	2330      	movle	r3, #48	; 0x30
 8011c9a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011c9e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011ca2:	ebac 0305 	sub.w	r3, ip, r5
 8011ca6:	6123      	str	r3, [r4, #16]
 8011ca8:	f8cd 8000 	str.w	r8, [sp]
 8011cac:	463b      	mov	r3, r7
 8011cae:	aa03      	add	r2, sp, #12
 8011cb0:	4621      	mov	r1, r4
 8011cb2:	4630      	mov	r0, r6
 8011cb4:	f7ff fef6 	bl	8011aa4 <_printf_common>
 8011cb8:	3001      	adds	r0, #1
 8011cba:	d14d      	bne.n	8011d58 <_printf_i+0x1c8>
 8011cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8011cc0:	b005      	add	sp, #20
 8011cc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011cc6:	4839      	ldr	r0, [pc, #228]	; (8011dac <_printf_i+0x21c>)
 8011cc8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8011ccc:	6813      	ldr	r3, [r2, #0]
 8011cce:	6821      	ldr	r1, [r4, #0]
 8011cd0:	1d1d      	adds	r5, r3, #4
 8011cd2:	681b      	ldr	r3, [r3, #0]
 8011cd4:	6015      	str	r5, [r2, #0]
 8011cd6:	060a      	lsls	r2, r1, #24
 8011cd8:	d50b      	bpl.n	8011cf2 <_printf_i+0x162>
 8011cda:	07ca      	lsls	r2, r1, #31
 8011cdc:	bf44      	itt	mi
 8011cde:	f041 0120 	orrmi.w	r1, r1, #32
 8011ce2:	6021      	strmi	r1, [r4, #0]
 8011ce4:	b91b      	cbnz	r3, 8011cee <_printf_i+0x15e>
 8011ce6:	6822      	ldr	r2, [r4, #0]
 8011ce8:	f022 0220 	bic.w	r2, r2, #32
 8011cec:	6022      	str	r2, [r4, #0]
 8011cee:	2210      	movs	r2, #16
 8011cf0:	e7b7      	b.n	8011c62 <_printf_i+0xd2>
 8011cf2:	064d      	lsls	r5, r1, #25
 8011cf4:	bf48      	it	mi
 8011cf6:	b29b      	uxthmi	r3, r3
 8011cf8:	e7ef      	b.n	8011cda <_printf_i+0x14a>
 8011cfa:	4665      	mov	r5, ip
 8011cfc:	fbb3 f1f2 	udiv	r1, r3, r2
 8011d00:	fb02 3311 	mls	r3, r2, r1, r3
 8011d04:	5cc3      	ldrb	r3, [r0, r3]
 8011d06:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8011d0a:	460b      	mov	r3, r1
 8011d0c:	2900      	cmp	r1, #0
 8011d0e:	d1f5      	bne.n	8011cfc <_printf_i+0x16c>
 8011d10:	e7b9      	b.n	8011c86 <_printf_i+0xf6>
 8011d12:	6813      	ldr	r3, [r2, #0]
 8011d14:	6825      	ldr	r5, [r4, #0]
 8011d16:	6961      	ldr	r1, [r4, #20]
 8011d18:	1d18      	adds	r0, r3, #4
 8011d1a:	6010      	str	r0, [r2, #0]
 8011d1c:	0628      	lsls	r0, r5, #24
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	d501      	bpl.n	8011d26 <_printf_i+0x196>
 8011d22:	6019      	str	r1, [r3, #0]
 8011d24:	e002      	b.n	8011d2c <_printf_i+0x19c>
 8011d26:	066a      	lsls	r2, r5, #25
 8011d28:	d5fb      	bpl.n	8011d22 <_printf_i+0x192>
 8011d2a:	8019      	strh	r1, [r3, #0]
 8011d2c:	2300      	movs	r3, #0
 8011d2e:	6123      	str	r3, [r4, #16]
 8011d30:	4665      	mov	r5, ip
 8011d32:	e7b9      	b.n	8011ca8 <_printf_i+0x118>
 8011d34:	6813      	ldr	r3, [r2, #0]
 8011d36:	1d19      	adds	r1, r3, #4
 8011d38:	6011      	str	r1, [r2, #0]
 8011d3a:	681d      	ldr	r5, [r3, #0]
 8011d3c:	6862      	ldr	r2, [r4, #4]
 8011d3e:	2100      	movs	r1, #0
 8011d40:	4628      	mov	r0, r5
 8011d42:	f7ee fa6d 	bl	8000220 <memchr>
 8011d46:	b108      	cbz	r0, 8011d4c <_printf_i+0x1bc>
 8011d48:	1b40      	subs	r0, r0, r5
 8011d4a:	6060      	str	r0, [r4, #4]
 8011d4c:	6863      	ldr	r3, [r4, #4]
 8011d4e:	6123      	str	r3, [r4, #16]
 8011d50:	2300      	movs	r3, #0
 8011d52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011d56:	e7a7      	b.n	8011ca8 <_printf_i+0x118>
 8011d58:	6923      	ldr	r3, [r4, #16]
 8011d5a:	462a      	mov	r2, r5
 8011d5c:	4639      	mov	r1, r7
 8011d5e:	4630      	mov	r0, r6
 8011d60:	47c0      	blx	r8
 8011d62:	3001      	adds	r0, #1
 8011d64:	d0aa      	beq.n	8011cbc <_printf_i+0x12c>
 8011d66:	6823      	ldr	r3, [r4, #0]
 8011d68:	079b      	lsls	r3, r3, #30
 8011d6a:	d413      	bmi.n	8011d94 <_printf_i+0x204>
 8011d6c:	68e0      	ldr	r0, [r4, #12]
 8011d6e:	9b03      	ldr	r3, [sp, #12]
 8011d70:	4298      	cmp	r0, r3
 8011d72:	bfb8      	it	lt
 8011d74:	4618      	movlt	r0, r3
 8011d76:	e7a3      	b.n	8011cc0 <_printf_i+0x130>
 8011d78:	2301      	movs	r3, #1
 8011d7a:	464a      	mov	r2, r9
 8011d7c:	4639      	mov	r1, r7
 8011d7e:	4630      	mov	r0, r6
 8011d80:	47c0      	blx	r8
 8011d82:	3001      	adds	r0, #1
 8011d84:	d09a      	beq.n	8011cbc <_printf_i+0x12c>
 8011d86:	3501      	adds	r5, #1
 8011d88:	68e3      	ldr	r3, [r4, #12]
 8011d8a:	9a03      	ldr	r2, [sp, #12]
 8011d8c:	1a9b      	subs	r3, r3, r2
 8011d8e:	42ab      	cmp	r3, r5
 8011d90:	dcf2      	bgt.n	8011d78 <_printf_i+0x1e8>
 8011d92:	e7eb      	b.n	8011d6c <_printf_i+0x1dc>
 8011d94:	2500      	movs	r5, #0
 8011d96:	f104 0919 	add.w	r9, r4, #25
 8011d9a:	e7f5      	b.n	8011d88 <_printf_i+0x1f8>
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d1ac      	bne.n	8011cfa <_printf_i+0x16a>
 8011da0:	7803      	ldrb	r3, [r0, #0]
 8011da2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011da6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011daa:	e76c      	b.n	8011c86 <_printf_i+0xf6>
 8011dac:	08012489 	.word	0x08012489
 8011db0:	0801249a 	.word	0x0801249a

08011db4 <memmove>:
 8011db4:	4288      	cmp	r0, r1
 8011db6:	b510      	push	{r4, lr}
 8011db8:	eb01 0302 	add.w	r3, r1, r2
 8011dbc:	d807      	bhi.n	8011dce <memmove+0x1a>
 8011dbe:	1e42      	subs	r2, r0, #1
 8011dc0:	4299      	cmp	r1, r3
 8011dc2:	d00a      	beq.n	8011dda <memmove+0x26>
 8011dc4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011dc8:	f802 4f01 	strb.w	r4, [r2, #1]!
 8011dcc:	e7f8      	b.n	8011dc0 <memmove+0xc>
 8011dce:	4283      	cmp	r3, r0
 8011dd0:	d9f5      	bls.n	8011dbe <memmove+0xa>
 8011dd2:	1881      	adds	r1, r0, r2
 8011dd4:	1ad2      	subs	r2, r2, r3
 8011dd6:	42d3      	cmn	r3, r2
 8011dd8:	d100      	bne.n	8011ddc <memmove+0x28>
 8011dda:	bd10      	pop	{r4, pc}
 8011ddc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011de0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8011de4:	e7f7      	b.n	8011dd6 <memmove+0x22>

08011de6 <_realloc_r>:
 8011de6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011de8:	4607      	mov	r7, r0
 8011dea:	4614      	mov	r4, r2
 8011dec:	460e      	mov	r6, r1
 8011dee:	b921      	cbnz	r1, 8011dfa <_realloc_r+0x14>
 8011df0:	4611      	mov	r1, r2
 8011df2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011df6:	f7ff bc3d 	b.w	8011674 <_malloc_r>
 8011dfa:	b922      	cbnz	r2, 8011e06 <_realloc_r+0x20>
 8011dfc:	f7ff fbec 	bl	80115d8 <_free_r>
 8011e00:	4625      	mov	r5, r4
 8011e02:	4628      	mov	r0, r5
 8011e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e06:	f000 f814 	bl	8011e32 <_malloc_usable_size_r>
 8011e0a:	42a0      	cmp	r0, r4
 8011e0c:	d20f      	bcs.n	8011e2e <_realloc_r+0x48>
 8011e0e:	4621      	mov	r1, r4
 8011e10:	4638      	mov	r0, r7
 8011e12:	f7ff fc2f 	bl	8011674 <_malloc_r>
 8011e16:	4605      	mov	r5, r0
 8011e18:	2800      	cmp	r0, #0
 8011e1a:	d0f2      	beq.n	8011e02 <_realloc_r+0x1c>
 8011e1c:	4631      	mov	r1, r6
 8011e1e:	4622      	mov	r2, r4
 8011e20:	f7ff fbc6 	bl	80115b0 <memcpy>
 8011e24:	4631      	mov	r1, r6
 8011e26:	4638      	mov	r0, r7
 8011e28:	f7ff fbd6 	bl	80115d8 <_free_r>
 8011e2c:	e7e9      	b.n	8011e02 <_realloc_r+0x1c>
 8011e2e:	4635      	mov	r5, r6
 8011e30:	e7e7      	b.n	8011e02 <_realloc_r+0x1c>

08011e32 <_malloc_usable_size_r>:
 8011e32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011e36:	1f18      	subs	r0, r3, #4
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	bfbc      	itt	lt
 8011e3c:	580b      	ldrlt	r3, [r1, r0]
 8011e3e:	18c0      	addlt	r0, r0, r3
 8011e40:	4770      	bx	lr
	...

08011e44 <_init>:
 8011e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e46:	bf00      	nop
 8011e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011e4a:	bc08      	pop	{r3}
 8011e4c:	469e      	mov	lr, r3
 8011e4e:	4770      	bx	lr

08011e50 <_fini>:
 8011e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e52:	bf00      	nop
 8011e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011e56:	bc08      	pop	{r3}
 8011e58:	469e      	mov	lr, r3
 8011e5a:	4770      	bx	lr
