
main_board_rev1_template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a4ec  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  0800a6bc  0800a6bc  0001a6bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a7f8  0800a7f8  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a7f8  0800a7f8  0001a7f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a800  0800a800  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a800  0800a800  0001a800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a804  0800a804  0001a804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800a808  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000073bc  200001f8  0800aa00  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200075b4  0800aa00  000275b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025576  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004946  00000000  00000000  0004579e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001888  00000000  00000000  0004a0e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001670  00000000  00000000  0004b970  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000071e6  00000000  00000000  0004cfe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000175fe  00000000  00000000  000541c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f45fa  00000000  00000000  0006b7c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015fdbe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000684c  00000000  00000000  0015fe3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f8 	.word	0x200001f8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a6a4 	.word	0x0800a6a4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001fc 	.word	0x200001fc
 800020c:	0800a6a4 	.word	0x0800a6a4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c4:	f000 fa4d 	bl	8000a62 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c8:	f000 f826 	bl	8000618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005cc:	f000 f8b0 	bl	8000730 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80005d0:	f008 fe9c 	bl	800930c <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005d4:	f006 f912 	bl	80067fc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005d8:	4a09      	ldr	r2, [pc, #36]	; (8000600 <main+0x40>)
 80005da:	2100      	movs	r1, #0
 80005dc:	4809      	ldr	r0, [pc, #36]	; (8000604 <main+0x44>)
 80005de:	f006 f977 	bl	80068d0 <osThreadNew>
 80005e2:	4602      	mov	r2, r0
 80005e4:	4b08      	ldr	r3, [pc, #32]	; (8000608 <main+0x48>)
 80005e6:	601a      	str	r2, [r3, #0]

  /* creation of task_template */
  task_templateHandle = osThreadNew(vTaskTemplate, NULL, &task_template_attributes);
 80005e8:	4a08      	ldr	r2, [pc, #32]	; (800060c <main+0x4c>)
 80005ea:	2100      	movs	r1, #0
 80005ec:	4808      	ldr	r0, [pc, #32]	; (8000610 <main+0x50>)
 80005ee:	f006 f96f 	bl	80068d0 <osThreadNew>
 80005f2:	4602      	mov	r2, r0
 80005f4:	4b07      	ldr	r3, [pc, #28]	; (8000614 <main+0x54>)
 80005f6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005f8:	f006 f934 	bl	8006864 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005fc:	e7fe      	b.n	80005fc <main+0x3c>
 80005fe:	bf00      	nop
 8000600:	0800a764 	.word	0x0800a764
 8000604:	08000779 	.word	0x08000779
 8000608:	20004b2c 	.word	0x20004b2c
 800060c:	0800a788 	.word	0x0800a788
 8000610:	080009e5 	.word	0x080009e5
 8000614:	20004c54 	.word	0x20004c54

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b0b4      	sub	sp, #208	; 0xd0
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000622:	2230      	movs	r2, #48	; 0x30
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f009 fc1d 	bl	8009e66 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800063c:	f107 0308 	add.w	r3, r7, #8
 8000640:	2284      	movs	r2, #132	; 0x84
 8000642:	2100      	movs	r1, #0
 8000644:	4618      	mov	r0, r3
 8000646:	f009 fc0e 	bl	8009e66 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800064a:	4b37      	ldr	r3, [pc, #220]	; (8000728 <SystemClock_Config+0x110>)
 800064c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064e:	4a36      	ldr	r2, [pc, #216]	; (8000728 <SystemClock_Config+0x110>)
 8000650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000654:	6413      	str	r3, [r2, #64]	; 0x40
 8000656:	4b34      	ldr	r3, [pc, #208]	; (8000728 <SystemClock_Config+0x110>)
 8000658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000662:	4b32      	ldr	r3, [pc, #200]	; (800072c <SystemClock_Config+0x114>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800066a:	4a30      	ldr	r2, [pc, #192]	; (800072c <SystemClock_Config+0x114>)
 800066c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000670:	6013      	str	r3, [r2, #0]
 8000672:	4b2e      	ldr	r3, [pc, #184]	; (800072c <SystemClock_Config+0x114>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800067a:	603b      	str	r3, [r7, #0]
 800067c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800067e:	2301      	movs	r3, #1
 8000680:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000684:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000688:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068c:	2302      	movs	r3, #2
 800068e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000692:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000696:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 800069a:	2304      	movs	r3, #4
 800069c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006a0:	23a8      	movs	r3, #168	; 0xa8
 80006a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a6:	2302      	movs	r3, #2
 80006a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006ac:	2307      	movs	r3, #7
 80006ae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f001 fe6c 	bl	8002394 <HAL_RCC_OscConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006c2:	f000 f873 	bl	80007ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c6:	230f      	movs	r3, #15
 80006c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006cc:	2302      	movs	r3, #2
 80006ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006e8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80006ec:	2105      	movs	r1, #5
 80006ee:	4618      	mov	r0, r3
 80006f0:	f002 f8f4 	bl	80028dc <HAL_RCC_ClockConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80006fa:	f000 f857 	bl	80007ac <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80006fe:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000702:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000704:	2300      	movs	r3, #0
 8000706:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800070a:	f107 0308 	add.w	r3, r7, #8
 800070e:	4618      	mov	r0, r3
 8000710:	f002 fafa 	bl	8002d08 <HAL_RCCEx_PeriphCLKConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0x106>
  {
    Error_Handler();
 800071a:	f000 f847 	bl	80007ac <Error_Handler>
  }
}
 800071e:	bf00      	nop
 8000720:	37d0      	adds	r7, #208	; 0xd0
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40023800 	.word	0x40023800
 800072c:	40007000 	.word	0x40007000

08000730 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000736:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <MX_GPIO_Init+0x44>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a0e      	ldr	r2, [pc, #56]	; (8000774 <MX_GPIO_Init+0x44>)
 800073c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <MX_GPIO_Init+0x44>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074e:	4b09      	ldr	r3, [pc, #36]	; (8000774 <MX_GPIO_Init+0x44>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a08      	ldr	r2, [pc, #32]	; (8000774 <MX_GPIO_Init+0x44>)
 8000754:	f043 0301 	orr.w	r3, r3, #1
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b06      	ldr	r3, [pc, #24]	; (8000774 <MX_GPIO_Init+0x44>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	603b      	str	r3, [r7, #0]
 8000764:	683b      	ldr	r3, [r7, #0]

}
 8000766:	bf00      	nop
 8000768:	370c      	adds	r7, #12
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	40023800 	.word	0x40023800

08000778 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000780:	2001      	movs	r0, #1
 8000782:	f006 f94b 	bl	8006a1c <osDelay>
 8000786:	e7fb      	b.n	8000780 <StartDefaultTask+0x8>

08000788 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a04      	ldr	r2, [pc, #16]	; (80007a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d101      	bne.n	800079e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800079a:	f000 f96f 	bl	8000a7c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40000800 	.word	0x40000800

080007ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007b0:	bf00      	nop
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
	...

080007bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80007c2:	4b11      	ldr	r3, [pc, #68]	; (8000808 <HAL_MspInit+0x4c>)
 80007c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c6:	4a10      	ldr	r2, [pc, #64]	; (8000808 <HAL_MspInit+0x4c>)
 80007c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007cc:	6413      	str	r3, [r2, #64]	; 0x40
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <HAL_MspInit+0x4c>)
 80007d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007da:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <HAL_MspInit+0x4c>)
 80007dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007de:	4a0a      	ldr	r2, [pc, #40]	; (8000808 <HAL_MspInit+0x4c>)
 80007e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007e4:	6453      	str	r3, [r2, #68]	; 0x44
 80007e6:	4b08      	ldr	r3, [pc, #32]	; (8000808 <HAL_MspInit+0x4c>)
 80007e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007ee:	603b      	str	r3, [r7, #0]
 80007f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007f2:	2200      	movs	r2, #0
 80007f4:	210f      	movs	r1, #15
 80007f6:	f06f 0001 	mvn.w	r0, #1
 80007fa:	f000 fa39 	bl	8000c70 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40023800 	.word	0x40023800

0800080c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08c      	sub	sp, #48	; 0x30
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000814:	2300      	movs	r3, #0
 8000816:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000818:	2300      	movs	r3, #0
 800081a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 800081c:	2200      	movs	r2, #0
 800081e:	6879      	ldr	r1, [r7, #4]
 8000820:	201e      	movs	r0, #30
 8000822:	f000 fa25 	bl	8000c70 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn); 
 8000826:	201e      	movs	r0, #30
 8000828:	f000 fa3e 	bl	8000ca8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800082c:	4b1f      	ldr	r3, [pc, #124]	; (80008ac <HAL_InitTick+0xa0>)
 800082e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000830:	4a1e      	ldr	r2, [pc, #120]	; (80008ac <HAL_InitTick+0xa0>)
 8000832:	f043 0304 	orr.w	r3, r3, #4
 8000836:	6413      	str	r3, [r2, #64]	; 0x40
 8000838:	4b1c      	ldr	r3, [pc, #112]	; (80008ac <HAL_InitTick+0xa0>)
 800083a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083c:	f003 0304 	and.w	r3, r3, #4
 8000840:	60fb      	str	r3, [r7, #12]
 8000842:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000844:	f107 0210 	add.w	r2, r7, #16
 8000848:	f107 0314 	add.w	r3, r7, #20
 800084c:	4611      	mov	r1, r2
 800084e:	4618      	mov	r0, r3
 8000850:	f002 fa28 	bl	8002ca4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000854:	f002 fa12 	bl	8002c7c <HAL_RCC_GetPCLK1Freq>
 8000858:	4603      	mov	r3, r0
 800085a:	005b      	lsls	r3, r3, #1
 800085c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800085e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000860:	4a13      	ldr	r2, [pc, #76]	; (80008b0 <HAL_InitTick+0xa4>)
 8000862:	fba2 2303 	umull	r2, r3, r2, r3
 8000866:	0c9b      	lsrs	r3, r3, #18
 8000868:	3b01      	subs	r3, #1
 800086a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800086c:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <HAL_InitTick+0xa8>)
 800086e:	4a12      	ldr	r2, [pc, #72]	; (80008b8 <HAL_InitTick+0xac>)
 8000870:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 8000872:	4b10      	ldr	r3, [pc, #64]	; (80008b4 <HAL_InitTick+0xa8>)
 8000874:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000878:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800087a:	4a0e      	ldr	r2, [pc, #56]	; (80008b4 <HAL_InitTick+0xa8>)
 800087c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800087e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000880:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <HAL_InitTick+0xa8>)
 8000882:	2200      	movs	r2, #0
 8000884:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000886:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <HAL_InitTick+0xa8>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 800088c:	4809      	ldr	r0, [pc, #36]	; (80008b4 <HAL_InitTick+0xa8>)
 800088e:	f002 fdf1 	bl	8003474 <HAL_TIM_Base_Init>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d104      	bne.n	80008a2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000898:	4806      	ldr	r0, [pc, #24]	; (80008b4 <HAL_InitTick+0xa8>)
 800089a:	f002 fe21 	bl	80034e0 <HAL_TIM_Base_Start_IT>
 800089e:	4603      	mov	r3, r0
 80008a0:	e000      	b.n	80008a4 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80008a2:	2301      	movs	r3, #1
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	3730      	adds	r7, #48	; 0x30
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	40023800 	.word	0x40023800
 80008b0:	431bde83 	.word	0x431bde83
 80008b4:	20005c58 	.word	0x20005c58
 80008b8:	40000800 	.word	0x40000800

080008bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr

080008ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ce:	e7fe      	b.n	80008ce <HardFault_Handler+0x4>

080008d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <MemManage_Handler+0x4>

080008d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008da:	e7fe      	b.n	80008da <BusFault_Handler+0x4>

080008dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <UsageFault_Handler+0x4>

080008e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008e2:	b480      	push	{r7}
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008e6:	bf00      	nop
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr

080008f0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80008f4:	4802      	ldr	r0, [pc, #8]	; (8000900 <TIM4_IRQHandler+0x10>)
 80008f6:	f002 fe1d 	bl	8003534 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20005c58 	.word	0x20005c58

08000904 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000908:	4802      	ldr	r0, [pc, #8]	; (8000914 <OTG_FS_IRQHandler+0x10>)
 800090a:	f000 fccb 	bl	80012a4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	200071ac 	.word	0x200071ac

08000918 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000920:	4b11      	ldr	r3, [pc, #68]	; (8000968 <_sbrk+0x50>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d102      	bne.n	800092e <_sbrk+0x16>
		heap_end = &end;
 8000928:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <_sbrk+0x50>)
 800092a:	4a10      	ldr	r2, [pc, #64]	; (800096c <_sbrk+0x54>)
 800092c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800092e:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <_sbrk+0x50>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000934:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <_sbrk+0x50>)
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	4413      	add	r3, r2
 800093c:	466a      	mov	r2, sp
 800093e:	4293      	cmp	r3, r2
 8000940:	d907      	bls.n	8000952 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000942:	f009 fa4b 	bl	8009ddc <__errno>
 8000946:	4602      	mov	r2, r0
 8000948:	230c      	movs	r3, #12
 800094a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800094c:	f04f 33ff 	mov.w	r3, #4294967295
 8000950:	e006      	b.n	8000960 <_sbrk+0x48>
	}

	heap_end += incr;
 8000952:	4b05      	ldr	r3, [pc, #20]	; (8000968 <_sbrk+0x50>)
 8000954:	681a      	ldr	r2, [r3, #0]
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	4413      	add	r3, r2
 800095a:	4a03      	ldr	r2, [pc, #12]	; (8000968 <_sbrk+0x50>)
 800095c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800095e:	68fb      	ldr	r3, [r7, #12]
}
 8000960:	4618      	mov	r0, r3
 8000962:	3710      	adds	r7, #16
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	20000214 	.word	0x20000214
 800096c:	200075b8 	.word	0x200075b8

08000970 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000974:	4b08      	ldr	r3, [pc, #32]	; (8000998 <SystemInit+0x28>)
 8000976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800097a:	4a07      	ldr	r2, [pc, #28]	; (8000998 <SystemInit+0x28>)
 800097c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000980:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000984:	4b04      	ldr	r3, [pc, #16]	; (8000998 <SystemInit+0x28>)
 8000986:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800098a:	609a      	str	r2, [r3, #8]
#endif
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	e000ed00 	.word	0xe000ed00

0800099c <UsbPrint>:
#include <string.h>
#include <stdio.h>
#include <stdarg.h>


uint8_t UsbPrint(const char *format, ...) {
 800099c:	b40f      	push	{r0, r1, r2, r3}
 800099e:	b580      	push	{r7, lr}
 80009a0:	b082      	sub	sp, #8
 80009a2:	af00      	add	r7, sp, #0
	uint8_t ret = 1;
 80009a4:	2301      	movs	r3, #1
 80009a6:	71fb      	strb	r3, [r7, #7]
#ifdef DEBUG
	//if (osMutexAcquire(print_mutex, 0U) == osOK) {
		va_list argptr;
		va_start(argptr, format);
 80009a8:	f107 0314 	add.w	r3, r7, #20
 80009ac:	603b      	str	r3, [r7, #0]
		vsnprintf(print_buffer, PRINT_BUFFER_LEN, format, argptr);
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	693a      	ldr	r2, [r7, #16]
 80009b2:	21c8      	movs	r1, #200	; 0xc8
 80009b4:	480a      	ldr	r0, [pc, #40]	; (80009e0 <UsbPrint+0x44>)
 80009b6:	f009 fb43 	bl	800a040 <vsniprintf>
		va_end(argptr);
		ret = CDC_Transmit_FS((uint8_t*) print_buffer, strlen(print_buffer));
 80009ba:	4809      	ldr	r0, [pc, #36]	; (80009e0 <UsbPrint+0x44>)
 80009bc:	f7ff fc28 	bl	8000210 <strlen>
 80009c0:	4603      	mov	r3, r0
 80009c2:	b29b      	uxth	r3, r3
 80009c4:	4619      	mov	r1, r3
 80009c6:	4806      	ldr	r0, [pc, #24]	; (80009e0 <UsbPrint+0x44>)
 80009c8:	f008 fd5e 	bl	8009488 <CDC_Transmit_FS>
 80009cc:	4603      	mov	r3, r0
 80009ce:	71fb      	strb	r3, [r7, #7]
		//osMutexRelease(print_mutex);
	//}
#endif
	return ret;
 80009d0:	79fb      	ldrb	r3, [r7, #7]
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80009dc:	b004      	add	sp, #16
 80009de:	4770      	bx	lr
 80009e0:	20004b30 	.word	0x20004b30

080009e4 <vTaskTemplate>:
#include "util.h"

#include "tasks/task_template.h"


void vTaskTemplate(void *argument) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
	uint32_t out_int = 1;
 80009ec:	2301      	movs	r3, #1
 80009ee:	60fb      	str	r3, [r7, #12]
	char* out_str = "template";
 80009f0:	4b05      	ldr	r3, [pc, #20]	; (8000a08 <vTaskTemplate+0x24>)
 80009f2:	60bb      	str	r3, [r7, #8]
	for (;;) {
		UsbPrint("[DBG] Hello from %s task %d!\n", out_str, out_int);
 80009f4:	68fa      	ldr	r2, [r7, #12]
 80009f6:	68b9      	ldr	r1, [r7, #8]
 80009f8:	4804      	ldr	r0, [pc, #16]	; (8000a0c <vTaskTemplate+0x28>)
 80009fa:	f7ff ffcf 	bl	800099c <UsbPrint>
		osDelay(100);
 80009fe:	2064      	movs	r0, #100	; 0x64
 8000a00:	f006 f80c 	bl	8006a1c <osDelay>
		UsbPrint("[DBG] Hello from %s task %d!\n", out_str, out_int);
 8000a04:	e7f6      	b.n	80009f4 <vTaskTemplate+0x10>
 8000a06:	bf00      	nop
 8000a08:	0800a6d8 	.word	0x0800a6d8
 8000a0c:	0800a6e4 	.word	0x0800a6e4

08000a10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a48 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a14:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a16:	e003      	b.n	8000a20 <LoopCopyDataInit>

08000a18 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a18:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a1a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a1c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a1e:	3104      	adds	r1, #4

08000a20 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a20:	480b      	ldr	r0, [pc, #44]	; (8000a50 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000a22:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000a24:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a26:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a28:	d3f6      	bcc.n	8000a18 <CopyDataInit>
  ldr  r2, =_sbss
 8000a2a:	4a0b      	ldr	r2, [pc, #44]	; (8000a58 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a2c:	e002      	b.n	8000a34 <LoopFillZerobss>

08000a2e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a2e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000a30:	f842 3b04 	str.w	r3, [r2], #4

08000a34 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000a34:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000a36:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000a38:	d3f9      	bcc.n	8000a2e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a3a:	f7ff ff99 	bl	8000970 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a3e:	f009 f9d3 	bl	8009de8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a42:	f7ff fdbd 	bl	80005c0 <main>
  bx  lr    
 8000a46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a48:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8000a4c:	0800a808 	.word	0x0800a808
  ldr  r0, =_sdata
 8000a50:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000a54:	200001f8 	.word	0x200001f8
  ldr  r2, =_sbss
 8000a58:	200001f8 	.word	0x200001f8
  ldr  r3, = _ebss
 8000a5c:	200075b4 	.word	0x200075b4

08000a60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a60:	e7fe      	b.n	8000a60 <ADC_IRQHandler>

08000a62 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a66:	2003      	movs	r0, #3
 8000a68:	f000 f8f7 	bl	8000c5a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a6c:	2000      	movs	r0, #0
 8000a6e:	f7ff fecd 	bl	800080c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000a72:	f7ff fea3 	bl	80007bc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000a76:	2300      	movs	r3, #0
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <HAL_IncTick+0x20>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	461a      	mov	r2, r3
 8000a86:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <HAL_IncTick+0x24>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	4a04      	ldr	r2, [pc, #16]	; (8000aa0 <HAL_IncTick+0x24>)
 8000a8e:	6013      	str	r3, [r2, #0]
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	20000008 	.word	0x20000008
 8000aa0:	20005c98 	.word	0x20005c98

08000aa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8000aa8:	4b03      	ldr	r3, [pc, #12]	; (8000ab8 <HAL_GetTick+0x14>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	20005c98 	.word	0x20005c98

08000abc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ac4:	f7ff ffee 	bl	8000aa4 <HAL_GetTick>
 8000ac8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ad4:	d005      	beq.n	8000ae2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ad6:	4b09      	ldr	r3, [pc, #36]	; (8000afc <HAL_Delay+0x40>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	461a      	mov	r2, r3
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	4413      	add	r3, r2
 8000ae0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ae2:	bf00      	nop
 8000ae4:	f7ff ffde 	bl	8000aa4 <HAL_GetTick>
 8000ae8:	4602      	mov	r2, r0
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	1ad3      	subs	r3, r2, r3
 8000aee:	68fa      	ldr	r2, [r7, #12]
 8000af0:	429a      	cmp	r2, r3
 8000af2:	d8f7      	bhi.n	8000ae4 <HAL_Delay+0x28>
  {
  }
}
 8000af4:	bf00      	nop
 8000af6:	3710      	adds	r7, #16
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	20000008 	.word	0x20000008

08000b00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b085      	sub	sp, #20
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	f003 0307 	and.w	r3, r3, #7
 8000b0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b10:	4b0b      	ldr	r3, [pc, #44]	; (8000b40 <__NVIC_SetPriorityGrouping+0x40>)
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b16:	68ba      	ldr	r2, [r7, #8]
 8000b18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000b28:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <__NVIC_SetPriorityGrouping+0x44>)
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b2e:	4a04      	ldr	r2, [pc, #16]	; (8000b40 <__NVIC_SetPriorityGrouping+0x40>)
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	60d3      	str	r3, [r2, #12]
}
 8000b34:	bf00      	nop
 8000b36:	3714      	adds	r7, #20
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	e000ed00 	.word	0xe000ed00
 8000b44:	05fa0000 	.word	0x05fa0000

08000b48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b4c:	4b04      	ldr	r3, [pc, #16]	; (8000b60 <__NVIC_GetPriorityGrouping+0x18>)
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	0a1b      	lsrs	r3, r3, #8
 8000b52:	f003 0307 	and.w	r3, r3, #7
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	db0b      	blt.n	8000b8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	f003 021f 	and.w	r2, r3, #31
 8000b7c:	4907      	ldr	r1, [pc, #28]	; (8000b9c <__NVIC_EnableIRQ+0x38>)
 8000b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b82:	095b      	lsrs	r3, r3, #5
 8000b84:	2001      	movs	r0, #1
 8000b86:	fa00 f202 	lsl.w	r2, r0, r2
 8000b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b8e:	bf00      	nop
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	e000e100 	.word	0xe000e100

08000ba0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	6039      	str	r1, [r7, #0]
 8000baa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	db0a      	blt.n	8000bca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	b2da      	uxtb	r2, r3
 8000bb8:	490c      	ldr	r1, [pc, #48]	; (8000bec <__NVIC_SetPriority+0x4c>)
 8000bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbe:	0112      	lsls	r2, r2, #4
 8000bc0:	b2d2      	uxtb	r2, r2
 8000bc2:	440b      	add	r3, r1
 8000bc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc8:	e00a      	b.n	8000be0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	b2da      	uxtb	r2, r3
 8000bce:	4908      	ldr	r1, [pc, #32]	; (8000bf0 <__NVIC_SetPriority+0x50>)
 8000bd0:	79fb      	ldrb	r3, [r7, #7]
 8000bd2:	f003 030f 	and.w	r3, r3, #15
 8000bd6:	3b04      	subs	r3, #4
 8000bd8:	0112      	lsls	r2, r2, #4
 8000bda:	b2d2      	uxtb	r2, r2
 8000bdc:	440b      	add	r3, r1
 8000bde:	761a      	strb	r2, [r3, #24]
}
 8000be0:	bf00      	nop
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	e000e100 	.word	0xe000e100
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b089      	sub	sp, #36	; 0x24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	60f8      	str	r0, [r7, #12]
 8000bfc:	60b9      	str	r1, [r7, #8]
 8000bfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	f003 0307 	and.w	r3, r3, #7
 8000c06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c08:	69fb      	ldr	r3, [r7, #28]
 8000c0a:	f1c3 0307 	rsb	r3, r3, #7
 8000c0e:	2b04      	cmp	r3, #4
 8000c10:	bf28      	it	cs
 8000c12:	2304      	movcs	r3, #4
 8000c14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	3304      	adds	r3, #4
 8000c1a:	2b06      	cmp	r3, #6
 8000c1c:	d902      	bls.n	8000c24 <NVIC_EncodePriority+0x30>
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	3b03      	subs	r3, #3
 8000c22:	e000      	b.n	8000c26 <NVIC_EncodePriority+0x32>
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c28:	f04f 32ff 	mov.w	r2, #4294967295
 8000c2c:	69bb      	ldr	r3, [r7, #24]
 8000c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c32:	43da      	mvns	r2, r3
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	401a      	ands	r2, r3
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	fa01 f303 	lsl.w	r3, r1, r3
 8000c46:	43d9      	mvns	r1, r3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c4c:	4313      	orrs	r3, r2
         );
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3724      	adds	r7, #36	; 0x24
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr

08000c5a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b082      	sub	sp, #8
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c62:	6878      	ldr	r0, [r7, #4]
 8000c64:	f7ff ff4c 	bl	8000b00 <__NVIC_SetPriorityGrouping>
}
 8000c68:	bf00      	nop
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b086      	sub	sp, #24
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	60b9      	str	r1, [r7, #8]
 8000c7a:	607a      	str	r2, [r7, #4]
 8000c7c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c82:	f7ff ff61 	bl	8000b48 <__NVIC_GetPriorityGrouping>
 8000c86:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c88:	687a      	ldr	r2, [r7, #4]
 8000c8a:	68b9      	ldr	r1, [r7, #8]
 8000c8c:	6978      	ldr	r0, [r7, #20]
 8000c8e:	f7ff ffb1 	bl	8000bf4 <NVIC_EncodePriority>
 8000c92:	4602      	mov	r2, r0
 8000c94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c98:	4611      	mov	r1, r2
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff ff80 	bl	8000ba0 <__NVIC_SetPriority>
}
 8000ca0:	bf00      	nop
 8000ca2:	3718      	adds	r7, #24
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff ff54 	bl	8000b64 <__NVIC_EnableIRQ>
}
 8000cbc:	bf00      	nop
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b089      	sub	sp, #36	; 0x24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61fb      	str	r3, [r7, #28]
 8000ce2:	e175      	b.n	8000fd0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	697a      	ldr	r2, [r7, #20]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	f040 8164 	bne.w	8000fca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d00b      	beq.n	8000d22 <HAL_GPIO_Init+0x5e>
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	2b02      	cmp	r3, #2
 8000d10:	d007      	beq.n	8000d22 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d16:	2b11      	cmp	r3, #17
 8000d18:	d003      	beq.n	8000d22 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	2b12      	cmp	r3, #18
 8000d20:	d130      	bne.n	8000d84 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	689b      	ldr	r3, [r3, #8]
 8000d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000d28:	69fb      	ldr	r3, [r7, #28]
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	2203      	movs	r2, #3
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	43db      	mvns	r3, r3
 8000d34:	69ba      	ldr	r2, [r7, #24]
 8000d36:	4013      	ands	r3, r2
 8000d38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	68da      	ldr	r2, [r3, #12]
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	69ba      	ldr	r2, [r7, #24]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	69ba      	ldr	r2, [r7, #24]
 8000d50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d58:	2201      	movs	r2, #1
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	43db      	mvns	r3, r3
 8000d62:	69ba      	ldr	r2, [r7, #24]
 8000d64:	4013      	ands	r3, r2
 8000d66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	091b      	lsrs	r3, r3, #4
 8000d6e:	f003 0201 	and.w	r2, r3, #1
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	69ba      	ldr	r2, [r7, #24]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	2203      	movs	r2, #3
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	43db      	mvns	r3, r3
 8000d96:	69ba      	ldr	r2, [r7, #24]
 8000d98:	4013      	ands	r3, r2
 8000d9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	689a      	ldr	r2, [r3, #8]
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	69ba      	ldr	r2, [r7, #24]
 8000db2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	2b02      	cmp	r3, #2
 8000dba:	d003      	beq.n	8000dc4 <HAL_GPIO_Init+0x100>
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	2b12      	cmp	r3, #18
 8000dc2:	d123      	bne.n	8000e0c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	08da      	lsrs	r2, r3, #3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	3208      	adds	r2, #8
 8000dcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	f003 0307 	and.w	r3, r3, #7
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	220f      	movs	r2, #15
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	43db      	mvns	r3, r3
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	4013      	ands	r3, r2
 8000de6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	691a      	ldr	r2, [r3, #16]
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	f003 0307 	and.w	r3, r3, #7
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	69ba      	ldr	r2, [r7, #24]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	08da      	lsrs	r2, r3, #3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	3208      	adds	r2, #8
 8000e06:	69b9      	ldr	r1, [r7, #24]
 8000e08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	2203      	movs	r2, #3
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	4013      	ands	r3, r2
 8000e22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f003 0203 	and.w	r2, r3, #3
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	f000 80be 	beq.w	8000fca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e4e:	4b65      	ldr	r3, [pc, #404]	; (8000fe4 <HAL_GPIO_Init+0x320>)
 8000e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e52:	4a64      	ldr	r2, [pc, #400]	; (8000fe4 <HAL_GPIO_Init+0x320>)
 8000e54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e58:	6453      	str	r3, [r2, #68]	; 0x44
 8000e5a:	4b62      	ldr	r3, [pc, #392]	; (8000fe4 <HAL_GPIO_Init+0x320>)
 8000e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000e66:	4a60      	ldr	r2, [pc, #384]	; (8000fe8 <HAL_GPIO_Init+0x324>)
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	089b      	lsrs	r3, r3, #2
 8000e6c:	3302      	adds	r3, #2
 8000e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	f003 0303 	and.w	r3, r3, #3
 8000e7a:	009b      	lsls	r3, r3, #2
 8000e7c:	220f      	movs	r2, #15
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	43db      	mvns	r3, r3
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	4013      	ands	r3, r2
 8000e88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a57      	ldr	r2, [pc, #348]	; (8000fec <HAL_GPIO_Init+0x328>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d037      	beq.n	8000f02 <HAL_GPIO_Init+0x23e>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a56      	ldr	r2, [pc, #344]	; (8000ff0 <HAL_GPIO_Init+0x32c>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d031      	beq.n	8000efe <HAL_GPIO_Init+0x23a>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a55      	ldr	r2, [pc, #340]	; (8000ff4 <HAL_GPIO_Init+0x330>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d02b      	beq.n	8000efa <HAL_GPIO_Init+0x236>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a54      	ldr	r2, [pc, #336]	; (8000ff8 <HAL_GPIO_Init+0x334>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d025      	beq.n	8000ef6 <HAL_GPIO_Init+0x232>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4a53      	ldr	r2, [pc, #332]	; (8000ffc <HAL_GPIO_Init+0x338>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d01f      	beq.n	8000ef2 <HAL_GPIO_Init+0x22e>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4a52      	ldr	r2, [pc, #328]	; (8001000 <HAL_GPIO_Init+0x33c>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d019      	beq.n	8000eee <HAL_GPIO_Init+0x22a>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4a51      	ldr	r2, [pc, #324]	; (8001004 <HAL_GPIO_Init+0x340>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d013      	beq.n	8000eea <HAL_GPIO_Init+0x226>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a50      	ldr	r2, [pc, #320]	; (8001008 <HAL_GPIO_Init+0x344>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d00d      	beq.n	8000ee6 <HAL_GPIO_Init+0x222>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4a4f      	ldr	r2, [pc, #316]	; (800100c <HAL_GPIO_Init+0x348>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d007      	beq.n	8000ee2 <HAL_GPIO_Init+0x21e>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a4e      	ldr	r2, [pc, #312]	; (8001010 <HAL_GPIO_Init+0x34c>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d101      	bne.n	8000ede <HAL_GPIO_Init+0x21a>
 8000eda:	2309      	movs	r3, #9
 8000edc:	e012      	b.n	8000f04 <HAL_GPIO_Init+0x240>
 8000ede:	230a      	movs	r3, #10
 8000ee0:	e010      	b.n	8000f04 <HAL_GPIO_Init+0x240>
 8000ee2:	2308      	movs	r3, #8
 8000ee4:	e00e      	b.n	8000f04 <HAL_GPIO_Init+0x240>
 8000ee6:	2307      	movs	r3, #7
 8000ee8:	e00c      	b.n	8000f04 <HAL_GPIO_Init+0x240>
 8000eea:	2306      	movs	r3, #6
 8000eec:	e00a      	b.n	8000f04 <HAL_GPIO_Init+0x240>
 8000eee:	2305      	movs	r3, #5
 8000ef0:	e008      	b.n	8000f04 <HAL_GPIO_Init+0x240>
 8000ef2:	2304      	movs	r3, #4
 8000ef4:	e006      	b.n	8000f04 <HAL_GPIO_Init+0x240>
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	e004      	b.n	8000f04 <HAL_GPIO_Init+0x240>
 8000efa:	2302      	movs	r3, #2
 8000efc:	e002      	b.n	8000f04 <HAL_GPIO_Init+0x240>
 8000efe:	2301      	movs	r3, #1
 8000f00:	e000      	b.n	8000f04 <HAL_GPIO_Init+0x240>
 8000f02:	2300      	movs	r3, #0
 8000f04:	69fa      	ldr	r2, [r7, #28]
 8000f06:	f002 0203 	and.w	r2, r2, #3
 8000f0a:	0092      	lsls	r2, r2, #2
 8000f0c:	4093      	lsls	r3, r2
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000f14:	4934      	ldr	r1, [pc, #208]	; (8000fe8 <HAL_GPIO_Init+0x324>)
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	089b      	lsrs	r3, r3, #2
 8000f1a:	3302      	adds	r3, #2
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f22:	4b3c      	ldr	r3, [pc, #240]	; (8001014 <HAL_GPIO_Init+0x350>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d003      	beq.n	8000f46 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f46:	4a33      	ldr	r2, [pc, #204]	; (8001014 <HAL_GPIO_Init+0x350>)
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f4c:	4b31      	ldr	r3, [pc, #196]	; (8001014 <HAL_GPIO_Init+0x350>)
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	43db      	mvns	r3, r3
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d003      	beq.n	8000f70 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f70:	4a28      	ldr	r2, [pc, #160]	; (8001014 <HAL_GPIO_Init+0x350>)
 8000f72:	69bb      	ldr	r3, [r7, #24]
 8000f74:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f76:	4b27      	ldr	r3, [pc, #156]	; (8001014 <HAL_GPIO_Init+0x350>)
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	4013      	ands	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d003      	beq.n	8000f9a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f9a:	4a1e      	ldr	r2, [pc, #120]	; (8001014 <HAL_GPIO_Init+0x350>)
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fa0:	4b1c      	ldr	r3, [pc, #112]	; (8001014 <HAL_GPIO_Init+0x350>)
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4013      	ands	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d003      	beq.n	8000fc4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fc4:	4a13      	ldr	r2, [pc, #76]	; (8001014 <HAL_GPIO_Init+0x350>)
 8000fc6:	69bb      	ldr	r3, [r7, #24]
 8000fc8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	61fb      	str	r3, [r7, #28]
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	2b0f      	cmp	r3, #15
 8000fd4:	f67f ae86 	bls.w	8000ce4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000fd8:	bf00      	nop
 8000fda:	3724      	adds	r7, #36	; 0x24
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	40023800 	.word	0x40023800
 8000fe8:	40013800 	.word	0x40013800
 8000fec:	40020000 	.word	0x40020000
 8000ff0:	40020400 	.word	0x40020400
 8000ff4:	40020800 	.word	0x40020800
 8000ff8:	40020c00 	.word	0x40020c00
 8000ffc:	40021000 	.word	0x40021000
 8001000:	40021400 	.word	0x40021400
 8001004:	40021800 	.word	0x40021800
 8001008:	40021c00 	.word	0x40021c00
 800100c:	40022000 	.word	0x40022000
 8001010:	40022400 	.word	0x40022400
 8001014:	40013c00 	.word	0x40013c00

08001018 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800101a:	b08f      	sub	sp, #60	; 0x3c
 800101c:	af0a      	add	r7, sp, #40	; 0x28
 800101e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d101      	bne.n	800102a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e116      	b.n	8001258 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001036:	b2db      	uxtb	r3, r3
 8001038:	2b00      	cmp	r3, #0
 800103a:	d106      	bne.n	800104a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2200      	movs	r2, #0
 8001040:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f008 fb77 	bl	8009738 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2203      	movs	r2, #3
 800104e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800105a:	2b00      	cmp	r3, #0
 800105c:	d102      	bne.n	8001064 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2200      	movs	r2, #0
 8001062:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4618      	mov	r0, r3
 800106a:	f002 fd74 	bl	8003b56 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	603b      	str	r3, [r7, #0]
 8001074:	687e      	ldr	r6, [r7, #4]
 8001076:	466d      	mov	r5, sp
 8001078:	f106 0410 	add.w	r4, r6, #16
 800107c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800107e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001080:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001082:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001084:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001088:	e885 0003 	stmia.w	r5, {r0, r1}
 800108c:	1d33      	adds	r3, r6, #4
 800108e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001090:	6838      	ldr	r0, [r7, #0]
 8001092:	f002 fc55 	bl	8003940 <USB_CoreInit>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d005      	beq.n	80010a8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2202      	movs	r2, #2
 80010a0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	e0d7      	b.n	8001258 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2100      	movs	r1, #0
 80010ae:	4618      	mov	r0, r3
 80010b0:	f002 fd62 	bl	8003b78 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010b4:	2300      	movs	r3, #0
 80010b6:	73fb      	strb	r3, [r7, #15]
 80010b8:	e04a      	b.n	8001150 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80010ba:	7bfa      	ldrb	r2, [r7, #15]
 80010bc:	6879      	ldr	r1, [r7, #4]
 80010be:	4613      	mov	r3, r2
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	1a9b      	subs	r3, r3, r2
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	440b      	add	r3, r1
 80010c8:	333d      	adds	r3, #61	; 0x3d
 80010ca:	2201      	movs	r2, #1
 80010cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80010ce:	7bfa      	ldrb	r2, [r7, #15]
 80010d0:	6879      	ldr	r1, [r7, #4]
 80010d2:	4613      	mov	r3, r2
 80010d4:	00db      	lsls	r3, r3, #3
 80010d6:	1a9b      	subs	r3, r3, r2
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	440b      	add	r3, r1
 80010dc:	333c      	adds	r3, #60	; 0x3c
 80010de:	7bfa      	ldrb	r2, [r7, #15]
 80010e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80010e2:	7bfa      	ldrb	r2, [r7, #15]
 80010e4:	7bfb      	ldrb	r3, [r7, #15]
 80010e6:	b298      	uxth	r0, r3
 80010e8:	6879      	ldr	r1, [r7, #4]
 80010ea:	4613      	mov	r3, r2
 80010ec:	00db      	lsls	r3, r3, #3
 80010ee:	1a9b      	subs	r3, r3, r2
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	440b      	add	r3, r1
 80010f4:	3342      	adds	r3, #66	; 0x42
 80010f6:	4602      	mov	r2, r0
 80010f8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80010fa:	7bfa      	ldrb	r2, [r7, #15]
 80010fc:	6879      	ldr	r1, [r7, #4]
 80010fe:	4613      	mov	r3, r2
 8001100:	00db      	lsls	r3, r3, #3
 8001102:	1a9b      	subs	r3, r3, r2
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	440b      	add	r3, r1
 8001108:	333f      	adds	r3, #63	; 0x3f
 800110a:	2200      	movs	r2, #0
 800110c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800110e:	7bfa      	ldrb	r2, [r7, #15]
 8001110:	6879      	ldr	r1, [r7, #4]
 8001112:	4613      	mov	r3, r2
 8001114:	00db      	lsls	r3, r3, #3
 8001116:	1a9b      	subs	r3, r3, r2
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	440b      	add	r3, r1
 800111c:	3344      	adds	r3, #68	; 0x44
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001122:	7bfa      	ldrb	r2, [r7, #15]
 8001124:	6879      	ldr	r1, [r7, #4]
 8001126:	4613      	mov	r3, r2
 8001128:	00db      	lsls	r3, r3, #3
 800112a:	1a9b      	subs	r3, r3, r2
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	440b      	add	r3, r1
 8001130:	3348      	adds	r3, #72	; 0x48
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001136:	7bfa      	ldrb	r2, [r7, #15]
 8001138:	6879      	ldr	r1, [r7, #4]
 800113a:	4613      	mov	r3, r2
 800113c:	00db      	lsls	r3, r3, #3
 800113e:	1a9b      	subs	r3, r3, r2
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	440b      	add	r3, r1
 8001144:	3350      	adds	r3, #80	; 0x50
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800114a:	7bfb      	ldrb	r3, [r7, #15]
 800114c:	3301      	adds	r3, #1
 800114e:	73fb      	strb	r3, [r7, #15]
 8001150:	7bfa      	ldrb	r2, [r7, #15]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	429a      	cmp	r2, r3
 8001158:	d3af      	bcc.n	80010ba <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800115a:	2300      	movs	r3, #0
 800115c:	73fb      	strb	r3, [r7, #15]
 800115e:	e044      	b.n	80011ea <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001160:	7bfa      	ldrb	r2, [r7, #15]
 8001162:	6879      	ldr	r1, [r7, #4]
 8001164:	4613      	mov	r3, r2
 8001166:	00db      	lsls	r3, r3, #3
 8001168:	1a9b      	subs	r3, r3, r2
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	440b      	add	r3, r1
 800116e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001172:	2200      	movs	r2, #0
 8001174:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001176:	7bfa      	ldrb	r2, [r7, #15]
 8001178:	6879      	ldr	r1, [r7, #4]
 800117a:	4613      	mov	r3, r2
 800117c:	00db      	lsls	r3, r3, #3
 800117e:	1a9b      	subs	r3, r3, r2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	440b      	add	r3, r1
 8001184:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001188:	7bfa      	ldrb	r2, [r7, #15]
 800118a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800118c:	7bfa      	ldrb	r2, [r7, #15]
 800118e:	6879      	ldr	r1, [r7, #4]
 8001190:	4613      	mov	r3, r2
 8001192:	00db      	lsls	r3, r3, #3
 8001194:	1a9b      	subs	r3, r3, r2
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	440b      	add	r3, r1
 800119a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800119e:	2200      	movs	r2, #0
 80011a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80011a2:	7bfa      	ldrb	r2, [r7, #15]
 80011a4:	6879      	ldr	r1, [r7, #4]
 80011a6:	4613      	mov	r3, r2
 80011a8:	00db      	lsls	r3, r3, #3
 80011aa:	1a9b      	subs	r3, r3, r2
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	440b      	add	r3, r1
 80011b0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80011b8:	7bfa      	ldrb	r2, [r7, #15]
 80011ba:	6879      	ldr	r1, [r7, #4]
 80011bc:	4613      	mov	r3, r2
 80011be:	00db      	lsls	r3, r3, #3
 80011c0:	1a9b      	subs	r3, r3, r2
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	440b      	add	r3, r1
 80011c6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80011ce:	7bfa      	ldrb	r2, [r7, #15]
 80011d0:	6879      	ldr	r1, [r7, #4]
 80011d2:	4613      	mov	r3, r2
 80011d4:	00db      	lsls	r3, r3, #3
 80011d6:	1a9b      	subs	r3, r3, r2
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	440b      	add	r3, r1
 80011dc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
 80011e6:	3301      	adds	r3, #1
 80011e8:	73fb      	strb	r3, [r7, #15]
 80011ea:	7bfa      	ldrb	r2, [r7, #15]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d3b5      	bcc.n	8001160 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	603b      	str	r3, [r7, #0]
 80011fa:	687e      	ldr	r6, [r7, #4]
 80011fc:	466d      	mov	r5, sp
 80011fe:	f106 0410 	add.w	r4, r6, #16
 8001202:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001204:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001206:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001208:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800120a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800120e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001212:	1d33      	adds	r3, r6, #4
 8001214:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001216:	6838      	ldr	r0, [r7, #0]
 8001218:	f002 fcd8 	bl	8003bcc <USB_DevInit>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d005      	beq.n	800122e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2202      	movs	r2, #2
 8001226:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e014      	b.n	8001258 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2200      	movs	r2, #0
 8001232:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2201      	movs	r2, #1
 800123a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001242:	2b01      	cmp	r3, #1
 8001244:	d102      	bne.n	800124c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f001 f880 	bl	800234c <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4618      	mov	r0, r3
 8001252:	f003 fd27 	bl	8004ca4 <USB_DevDisconnect>

  return HAL_OK;
 8001256:	2300      	movs	r3, #0
}
 8001258:	4618      	mov	r0, r3
 800125a:	3714      	adds	r7, #20
 800125c:	46bd      	mov	sp, r7
 800125e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001260 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800126e:	2b01      	cmp	r3, #1
 8001270:	d101      	bne.n	8001276 <HAL_PCD_Start+0x16>
 8001272:	2302      	movs	r3, #2
 8001274:	e012      	b.n	800129c <HAL_PCD_Start+0x3c>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2201      	movs	r2, #1
 800127a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DevConnect(hpcd->Instance);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4618      	mov	r0, r3
 8001284:	f003 fcf6 	bl	8004c74 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4618      	mov	r0, r3
 800128e:	f002 fc51 	bl	8003b34 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2200      	movs	r2, #0
 8001296:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800129a:	2300      	movs	r3, #0
}
 800129c:	4618      	mov	r0, r3
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80012a4:	b590      	push	{r4, r7, lr}
 80012a6:	b08d      	sub	sp, #52	; 0x34
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80012b2:	6a3b      	ldr	r3, [r7, #32]
 80012b4:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f003 fd9d 	bl	8004dfa <USB_GetMode>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	f040 83ca 	bne.w	8001a5c <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f003 fd01 	bl	8004cd4 <USB_ReadInterrupts>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	f000 83c0 	beq.w	8001a5a <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4618      	mov	r0, r3
 80012e0:	f003 fcf8 	bl	8004cd4 <USB_ReadInterrupts>
 80012e4:	4603      	mov	r3, r0
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	d107      	bne.n	80012fe <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	695a      	ldr	r2, [r3, #20]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f002 0202 	and.w	r2, r2, #2
 80012fc:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4618      	mov	r0, r3
 8001304:	f003 fce6 	bl	8004cd4 <USB_ReadInterrupts>
 8001308:	4603      	mov	r3, r0
 800130a:	f003 0310 	and.w	r3, r3, #16
 800130e:	2b10      	cmp	r3, #16
 8001310:	d161      	bne.n	80013d6 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	699a      	ldr	r2, [r3, #24]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f022 0210 	bic.w	r2, r2, #16
 8001320:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001322:	6a3b      	ldr	r3, [r7, #32]
 8001324:	6a1b      	ldr	r3, [r3, #32]
 8001326:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	f003 020f 	and.w	r2, r3, #15
 800132e:	4613      	mov	r3, r2
 8001330:	00db      	lsls	r3, r3, #3
 8001332:	1a9b      	subs	r3, r3, r2
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	4413      	add	r3, r2
 800133e:	3304      	adds	r3, #4
 8001340:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	0c5b      	lsrs	r3, r3, #17
 8001346:	f003 030f 	and.w	r3, r3, #15
 800134a:	2b02      	cmp	r3, #2
 800134c:	d124      	bne.n	8001398 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001354:	4013      	ands	r3, r2
 8001356:	2b00      	cmp	r3, #0
 8001358:	d035      	beq.n	80013c6 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	091b      	lsrs	r3, r3, #4
 8001362:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001364:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001368:	b29b      	uxth	r3, r3
 800136a:	461a      	mov	r2, r3
 800136c:	6a38      	ldr	r0, [r7, #32]
 800136e:	f003 fb5e 	bl	8004a2e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	68da      	ldr	r2, [r3, #12]
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	091b      	lsrs	r3, r3, #4
 800137a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800137e:	441a      	add	r2, r3
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	699a      	ldr	r2, [r3, #24]
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	091b      	lsrs	r3, r3, #4
 800138c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001390:	441a      	add	r2, r3
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	619a      	str	r2, [r3, #24]
 8001396:	e016      	b.n	80013c6 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	0c5b      	lsrs	r3, r3, #17
 800139c:	f003 030f 	and.w	r3, r3, #15
 80013a0:	2b06      	cmp	r3, #6
 80013a2:	d110      	bne.n	80013c6 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80013aa:	2208      	movs	r2, #8
 80013ac:	4619      	mov	r1, r3
 80013ae:	6a38      	ldr	r0, [r7, #32]
 80013b0:	f003 fb3d 	bl	8004a2e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	699a      	ldr	r2, [r3, #24]
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	091b      	lsrs	r3, r3, #4
 80013bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013c0:	441a      	add	r2, r3
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	699a      	ldr	r2, [r3, #24]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f042 0210 	orr.w	r2, r2, #16
 80013d4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4618      	mov	r0, r3
 80013dc:	f003 fc7a 	bl	8004cd4 <USB_ReadInterrupts>
 80013e0:	4603      	mov	r3, r0
 80013e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013e6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80013ea:	d16e      	bne.n	80014ca <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80013ec:	2300      	movs	r3, #0
 80013ee:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f003 fc80 	bl	8004cfa <USB_ReadDevAllOutEpInterrupt>
 80013fa:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80013fc:	e062      	b.n	80014c4 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80013fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001400:	f003 0301 	and.w	r3, r3, #1
 8001404:	2b00      	cmp	r3, #0
 8001406:	d057      	beq.n	80014b8 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800140e:	b2d2      	uxtb	r2, r2
 8001410:	4611      	mov	r1, r2
 8001412:	4618      	mov	r0, r3
 8001414:	f003 fca5 	bl	8004d62 <USB_ReadDevOutEPInterrupt>
 8001418:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	f003 0301 	and.w	r3, r3, #1
 8001420:	2b00      	cmp	r3, #0
 8001422:	d00c      	beq.n	800143e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001426:	015a      	lsls	r2, r3, #5
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	4413      	add	r3, r2
 800142c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001430:	461a      	mov	r2, r3
 8001432:	2301      	movs	r3, #1
 8001434:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001436:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f000 fddd 	bl	8001ff8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	f003 0308 	and.w	r3, r3, #8
 8001444:	2b00      	cmp	r3, #0
 8001446:	d00c      	beq.n	8001462 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144a:	015a      	lsls	r2, r3, #5
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	4413      	add	r3, r2
 8001450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001454:	461a      	mov	r2, r3
 8001456:	2308      	movs	r3, #8
 8001458:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800145a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f000 fed7 	bl	8002210 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	f003 0310 	and.w	r3, r3, #16
 8001468:	2b00      	cmp	r3, #0
 800146a:	d008      	beq.n	800147e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800146c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146e:	015a      	lsls	r2, r3, #5
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	4413      	add	r3, r2
 8001474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001478:	461a      	mov	r2, r3
 800147a:	2310      	movs	r3, #16
 800147c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	f003 0320 	and.w	r3, r3, #32
 8001484:	2b00      	cmp	r3, #0
 8001486:	d008      	beq.n	800149a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148a:	015a      	lsls	r2, r3, #5
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	4413      	add	r3, r2
 8001490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001494:	461a      	mov	r2, r3
 8001496:	2320      	movs	r3, #32
 8001498:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d009      	beq.n	80014b8 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80014a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a6:	015a      	lsls	r2, r3, #5
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	4413      	add	r3, r2
 80014ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014b0:	461a      	mov	r2, r3
 80014b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014b6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80014b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ba:	3301      	adds	r3, #1
 80014bc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80014be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014c0:	085b      	lsrs	r3, r3, #1
 80014c2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80014c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d199      	bne.n	80013fe <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f003 fc00 	bl	8004cd4 <USB_ReadInterrupts>
 80014d4:	4603      	mov	r3, r0
 80014d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014da:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80014de:	f040 80c0 	bne.w	8001662 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f003 fc21 	bl	8004d2e <USB_ReadDevAllInEpInterrupt>
 80014ec:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80014ee:	2300      	movs	r3, #0
 80014f0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80014f2:	e0b2      	b.n	800165a <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80014f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	f000 80a7 	beq.w	800164e <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001506:	b2d2      	uxtb	r2, r2
 8001508:	4611      	mov	r1, r2
 800150a:	4618      	mov	r0, r3
 800150c:	f003 fc47 	bl	8004d9e <USB_ReadDevInEPInterrupt>
 8001510:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	f003 0301 	and.w	r3, r3, #1
 8001518:	2b00      	cmp	r3, #0
 800151a:	d057      	beq.n	80015cc <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800151c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151e:	f003 030f 	and.w	r3, r3, #15
 8001522:	2201      	movs	r2, #1
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001530:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	43db      	mvns	r3, r3
 8001536:	69f9      	ldr	r1, [r7, #28]
 8001538:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800153c:	4013      	ands	r3, r2
 800153e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001542:	015a      	lsls	r2, r3, #5
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	4413      	add	r3, r2
 8001548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800154c:	461a      	mov	r2, r3
 800154e:	2301      	movs	r3, #1
 8001550:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	691b      	ldr	r3, [r3, #16]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d132      	bne.n	80015c0 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800155a:	6879      	ldr	r1, [r7, #4]
 800155c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800155e:	4613      	mov	r3, r2
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	1a9b      	subs	r3, r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	440b      	add	r3, r1
 8001568:	3348      	adds	r3, #72	; 0x48
 800156a:	6819      	ldr	r1, [r3, #0]
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001570:	4613      	mov	r3, r2
 8001572:	00db      	lsls	r3, r3, #3
 8001574:	1a9b      	subs	r3, r3, r2
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	4403      	add	r3, r0
 800157a:	3344      	adds	r3, #68	; 0x44
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4419      	add	r1, r3
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001584:	4613      	mov	r3, r2
 8001586:	00db      	lsls	r3, r3, #3
 8001588:	1a9b      	subs	r3, r3, r2
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	4403      	add	r3, r0
 800158e:	3348      	adds	r3, #72	; 0x48
 8001590:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001594:	2b00      	cmp	r3, #0
 8001596:	d113      	bne.n	80015c0 <HAL_PCD_IRQHandler+0x31c>
 8001598:	6879      	ldr	r1, [r7, #4]
 800159a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800159c:	4613      	mov	r3, r2
 800159e:	00db      	lsls	r3, r3, #3
 80015a0:	1a9b      	subs	r3, r3, r2
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	440b      	add	r3, r1
 80015a6:	3350      	adds	r3, #80	; 0x50
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d108      	bne.n	80015c0 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6818      	ldr	r0, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80015b8:	461a      	mov	r2, r3
 80015ba:	2101      	movs	r1, #1
 80015bc:	f003 fc50 	bl	8004e60 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80015c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	4619      	mov	r1, r3
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f008 f939 	bl	800983e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	f003 0308 	and.w	r3, r3, #8
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d008      	beq.n	80015e8 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80015d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d8:	015a      	lsls	r2, r3, #5
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	4413      	add	r3, r2
 80015de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015e2:	461a      	mov	r2, r3
 80015e4:	2308      	movs	r3, #8
 80015e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	f003 0310 	and.w	r3, r3, #16
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d008      	beq.n	8001604 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80015f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f4:	015a      	lsls	r2, r3, #5
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	4413      	add	r3, r2
 80015fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015fe:	461a      	mov	r2, r3
 8001600:	2310      	movs	r3, #16
 8001602:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800160a:	2b00      	cmp	r3, #0
 800160c:	d008      	beq.n	8001620 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800160e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001610:	015a      	lsls	r2, r3, #5
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	4413      	add	r3, r2
 8001616:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800161a:	461a      	mov	r2, r3
 800161c:	2340      	movs	r3, #64	; 0x40
 800161e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d008      	beq.n	800163c <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800162a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162c:	015a      	lsls	r2, r3, #5
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	4413      	add	r3, r2
 8001632:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001636:	461a      	mov	r2, r3
 8001638:	2302      	movs	r3, #2
 800163a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001642:	2b00      	cmp	r3, #0
 8001644:	d003      	beq.n	800164e <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001646:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f000 fc48 	bl	8001ede <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800164e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001650:	3301      	adds	r3, #1
 8001652:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001656:	085b      	lsrs	r3, r3, #1
 8001658:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800165a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800165c:	2b00      	cmp	r3, #0
 800165e:	f47f af49 	bne.w	80014f4 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4618      	mov	r0, r3
 8001668:	f003 fb34 	bl	8004cd4 <USB_ReadInterrupts>
 800166c:	4603      	mov	r3, r0
 800166e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001672:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001676:	d122      	bne.n	80016be <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	69fa      	ldr	r2, [r7, #28]
 8001682:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001686:	f023 0301 	bic.w	r3, r3, #1
 800168a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001692:	2b01      	cmp	r3, #1
 8001694:	d108      	bne.n	80016a8 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800169e:	2100      	movs	r1, #0
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f008 fb1b 	bl	8009cdc <HAL_PCDEx_LPM_Callback>
 80016a6:	e002      	b.n	80016ae <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f008 f93f 	bl	800992c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	695a      	ldr	r2, [r3, #20]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80016bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f003 fb06 	bl	8004cd4 <USB_ReadInterrupts>
 80016c8:	4603      	mov	r3, r0
 80016ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016d2:	d112      	bne.n	80016fa <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	f003 0301 	and.w	r3, r3, #1
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d102      	bne.n	80016ea <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f008 f8fb 	bl	80098e0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	695a      	ldr	r2, [r3, #20]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80016f8:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4618      	mov	r0, r3
 8001700:	f003 fae8 	bl	8004cd4 <USB_ReadInterrupts>
 8001704:	4603      	mov	r3, r0
 8001706:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800170a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800170e:	d121      	bne.n	8001754 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	695a      	ldr	r2, [r3, #20]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800171e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001726:	2b00      	cmp	r3, #0
 8001728:	d111      	bne.n	800174e <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2201      	movs	r2, #1
 800172e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001738:	089b      	lsrs	r3, r3, #2
 800173a:	f003 020f 	and.w	r2, r3, #15
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001744:	2101      	movs	r1, #1
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f008 fac8 	bl	8009cdc <HAL_PCDEx_LPM_Callback>
 800174c:	e002      	b.n	8001754 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f008 f8c6 	bl	80098e0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4618      	mov	r0, r3
 800175a:	f003 fabb 	bl	8004cd4 <USB_ReadInterrupts>
 800175e:	4603      	mov	r3, r0
 8001760:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001764:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001768:	f040 80c7 	bne.w	80018fa <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	69fa      	ldr	r2, [r7, #28]
 8001776:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800177a:	f023 0301 	bic.w	r3, r3, #1
 800177e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2110      	movs	r1, #16
 8001786:	4618      	mov	r0, r3
 8001788:	f002 fb8e 	bl	8003ea8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800178c:	2300      	movs	r3, #0
 800178e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001790:	e056      	b.n	8001840 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001794:	015a      	lsls	r2, r3, #5
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	4413      	add	r3, r2
 800179a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800179e:	461a      	mov	r2, r3
 80017a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80017a4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80017a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017a8:	015a      	lsls	r2, r3, #5
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	4413      	add	r3, r2
 80017ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017b6:	0151      	lsls	r1, r2, #5
 80017b8:	69fa      	ldr	r2, [r7, #28]
 80017ba:	440a      	add	r2, r1
 80017bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80017c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80017c4:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80017c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017c8:	015a      	lsls	r2, r3, #5
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	4413      	add	r3, r2
 80017ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017d6:	0151      	lsls	r1, r2, #5
 80017d8:	69fa      	ldr	r2, [r7, #28]
 80017da:	440a      	add	r2, r1
 80017dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80017e0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80017e4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80017e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017e8:	015a      	lsls	r2, r3, #5
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	4413      	add	r3, r2
 80017ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017f2:	461a      	mov	r2, r3
 80017f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80017f8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80017fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017fc:	015a      	lsls	r2, r3, #5
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	4413      	add	r3, r2
 8001802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800180a:	0151      	lsls	r1, r2, #5
 800180c:	69fa      	ldr	r2, [r7, #28]
 800180e:	440a      	add	r2, r1
 8001810:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001814:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001818:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800181a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800181c:	015a      	lsls	r2, r3, #5
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	4413      	add	r3, r2
 8001822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800182a:	0151      	lsls	r1, r2, #5
 800182c:	69fa      	ldr	r2, [r7, #28]
 800182e:	440a      	add	r2, r1
 8001830:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001834:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001838:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800183a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800183c:	3301      	adds	r3, #1
 800183e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001846:	429a      	cmp	r2, r3
 8001848:	d3a3      	bcc.n	8001792 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001850:	69db      	ldr	r3, [r3, #28]
 8001852:	69fa      	ldr	r2, [r7, #28]
 8001854:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001858:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800185c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	2b00      	cmp	r3, #0
 8001864:	d016      	beq.n	8001894 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800186c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001870:	69fa      	ldr	r2, [r7, #28]
 8001872:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001876:	f043 030b 	orr.w	r3, r3, #11
 800187a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001886:	69fa      	ldr	r2, [r7, #28]
 8001888:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800188c:	f043 030b 	orr.w	r3, r3, #11
 8001890:	6453      	str	r3, [r2, #68]	; 0x44
 8001892:	e015      	b.n	80018c0 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800189a:	695a      	ldr	r2, [r3, #20]
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018a2:	4619      	mov	r1, r3
 80018a4:	f242 032b 	movw	r3, #8235	; 0x202b
 80018a8:	4313      	orrs	r3, r2
 80018aa:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018b2:	691b      	ldr	r3, [r3, #16]
 80018b4:	69fa      	ldr	r2, [r7, #28]
 80018b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018ba:	f043 030b 	orr.w	r3, r3, #11
 80018be:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	69fa      	ldr	r2, [r7, #28]
 80018ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018ce:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80018d2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6818      	ldr	r0, [r3, #0]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	691b      	ldr	r3, [r3, #16]
 80018dc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80018e4:	461a      	mov	r2, r3
 80018e6:	f003 fabb 	bl	8004e60 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	695a      	ldr	r2, [r3, #20]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80018f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4618      	mov	r0, r3
 8001900:	f003 f9e8 	bl	8004cd4 <USB_ReadInterrupts>
 8001904:	4603      	mov	r3, r0
 8001906:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800190a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800190e:	d124      	bne.n	800195a <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4618      	mov	r0, r3
 8001916:	f003 fa7f 	bl	8004e18 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f002 fb23 	bl	8003f6a <USB_GetDevSpeed>
 8001924:	4603      	mov	r3, r0
 8001926:	461a      	mov	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681c      	ldr	r4, [r3, #0]
 8001930:	f001 f998 	bl	8002c64 <HAL_RCC_GetHCLKFreq>
 8001934:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800193a:	b2db      	uxtb	r3, r3
 800193c:	461a      	mov	r2, r3
 800193e:	4620      	mov	r0, r4
 8001940:	f002 f856 	bl	80039f0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f007 ffa2 	bl	800988e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	695a      	ldr	r2, [r3, #20]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001958:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4618      	mov	r0, r3
 8001960:	f003 f9b8 	bl	8004cd4 <USB_ReadInterrupts>
 8001964:	4603      	mov	r3, r0
 8001966:	f003 0308 	and.w	r3, r3, #8
 800196a:	2b08      	cmp	r3, #8
 800196c:	d10a      	bne.n	8001984 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f007 ff7f 	bl	8009872 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	695a      	ldr	r2, [r3, #20]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f002 0208 	and.w	r2, r2, #8
 8001982:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4618      	mov	r0, r3
 800198a:	f003 f9a3 	bl	8004cd4 <USB_ReadInterrupts>
 800198e:	4603      	mov	r3, r0
 8001990:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001994:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001998:	d10f      	bne.n	80019ba <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800199a:	2300      	movs	r3, #0
 800199c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800199e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	4619      	mov	r1, r3
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f007 ffe1 	bl	800996c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	695a      	ldr	r2, [r3, #20]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80019b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4618      	mov	r0, r3
 80019c0:	f003 f988 	bl	8004cd4 <USB_ReadInterrupts>
 80019c4:	4603      	mov	r3, r0
 80019c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80019ce:	d10f      	bne.n	80019f0 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80019d0:	2300      	movs	r3, #0
 80019d2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80019d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	4619      	mov	r1, r3
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f007 ffb4 	bl	8009948 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	695a      	ldr	r2, [r3, #20]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80019ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f003 f96d 	bl	8004cd4 <USB_ReadInterrupts>
 80019fa:	4603      	mov	r3, r0
 80019fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001a00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a04:	d10a      	bne.n	8001a1c <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f007 ffc2 	bl	8009990 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	695a      	ldr	r2, [r3, #20]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001a1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f003 f957 	bl	8004cd4 <USB_ReadInterrupts>
 8001a26:	4603      	mov	r3, r0
 8001a28:	f003 0304 	and.w	r3, r3, #4
 8001a2c:	2b04      	cmp	r3, #4
 8001a2e:	d115      	bne.n	8001a5c <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	f003 0304 	and.w	r3, r3, #4
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d002      	beq.n	8001a48 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f007 ffb2 	bl	80099ac <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	6859      	ldr	r1, [r3, #4]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	430a      	orrs	r2, r1
 8001a56:	605a      	str	r2, [r3, #4]
 8001a58:	e000      	b.n	8001a5c <HAL_PCD_IRQHandler+0x7b8>
      return;
 8001a5a:	bf00      	nop
    }
  }
}
 8001a5c:	3734      	adds	r7, #52	; 0x34
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd90      	pop	{r4, r7, pc}

08001a62 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b082      	sub	sp, #8
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d101      	bne.n	8001a7c <HAL_PCD_SetAddress+0x1a>
 8001a78:	2302      	movs	r3, #2
 8001a7a:	e013      	b.n	8001aa4 <HAL_PCD_SetAddress+0x42>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	78fa      	ldrb	r2, [r7, #3]
 8001a88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	78fa      	ldrb	r2, [r7, #3]
 8001a92:	4611      	mov	r1, r2
 8001a94:	4618      	mov	r0, r3
 8001a96:	f003 f8c7 	bl	8004c28 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001aa2:	2300      	movs	r3, #0
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3708      	adds	r7, #8
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	4608      	mov	r0, r1
 8001ab6:	4611      	mov	r1, r2
 8001ab8:	461a      	mov	r2, r3
 8001aba:	4603      	mov	r3, r0
 8001abc:	70fb      	strb	r3, [r7, #3]
 8001abe:	460b      	mov	r3, r1
 8001ac0:	803b      	strh	r3, [r7, #0]
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001aca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	da0f      	bge.n	8001af2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ad2:	78fb      	ldrb	r3, [r7, #3]
 8001ad4:	f003 020f 	and.w	r2, r3, #15
 8001ad8:	4613      	mov	r3, r2
 8001ada:	00db      	lsls	r3, r3, #3
 8001adc:	1a9b      	subs	r3, r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	3338      	adds	r3, #56	; 0x38
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	3304      	adds	r3, #4
 8001ae8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2201      	movs	r2, #1
 8001aee:	705a      	strb	r2, [r3, #1]
 8001af0:	e00f      	b.n	8001b12 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001af2:	78fb      	ldrb	r3, [r7, #3]
 8001af4:	f003 020f 	and.w	r2, r3, #15
 8001af8:	4613      	mov	r3, r2
 8001afa:	00db      	lsls	r3, r3, #3
 8001afc:	1a9b      	subs	r3, r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	4413      	add	r3, r2
 8001b08:	3304      	adds	r3, #4
 8001b0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001b12:	78fb      	ldrb	r3, [r7, #3]
 8001b14:	f003 030f 	and.w	r3, r3, #15
 8001b18:	b2da      	uxtb	r2, r3
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001b1e:	883a      	ldrh	r2, [r7, #0]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	78ba      	ldrb	r2, [r7, #2]
 8001b28:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	785b      	ldrb	r3, [r3, #1]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d004      	beq.n	8001b3c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	b29a      	uxth	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001b3c:	78bb      	ldrb	r3, [r7, #2]
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d102      	bne.n	8001b48 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2200      	movs	r2, #0
 8001b46:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d101      	bne.n	8001b56 <HAL_PCD_EP_Open+0xaa>
 8001b52:	2302      	movs	r3, #2
 8001b54:	e00e      	b.n	8001b74 <HAL_PCD_EP_Open+0xc8>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	68f9      	ldr	r1, [r7, #12]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f002 fa25 	bl	8003fb4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001b72:	7afb      	ldrb	r3, [r7, #11]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	460b      	mov	r3, r1
 8001b86:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	da0f      	bge.n	8001bb0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b90:	78fb      	ldrb	r3, [r7, #3]
 8001b92:	f003 020f 	and.w	r2, r3, #15
 8001b96:	4613      	mov	r3, r2
 8001b98:	00db      	lsls	r3, r3, #3
 8001b9a:	1a9b      	subs	r3, r3, r2
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	3338      	adds	r3, #56	; 0x38
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	3304      	adds	r3, #4
 8001ba6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2201      	movs	r2, #1
 8001bac:	705a      	strb	r2, [r3, #1]
 8001bae:	e00f      	b.n	8001bd0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bb0:	78fb      	ldrb	r3, [r7, #3]
 8001bb2:	f003 020f 	and.w	r2, r3, #15
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	00db      	lsls	r3, r3, #3
 8001bba:	1a9b      	subs	r3, r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	3304      	adds	r3, #4
 8001bc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001bd0:	78fb      	ldrb	r3, [r7, #3]
 8001bd2:	f003 030f 	and.w	r3, r3, #15
 8001bd6:	b2da      	uxtb	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d101      	bne.n	8001bea <HAL_PCD_EP_Close+0x6e>
 8001be6:	2302      	movs	r3, #2
 8001be8:	e00e      	b.n	8001c08 <HAL_PCD_EP_Close+0x8c>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2201      	movs	r2, #1
 8001bee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	68f9      	ldr	r1, [r7, #12]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f002 fa63 	bl	80040c4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001c06:	2300      	movs	r3, #0
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3710      	adds	r7, #16
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b086      	sub	sp, #24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	607a      	str	r2, [r7, #4]
 8001c1a:	603b      	str	r3, [r7, #0]
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c20:	7afb      	ldrb	r3, [r7, #11]
 8001c22:	f003 020f 	and.w	r2, r3, #15
 8001c26:	4613      	mov	r3, r2
 8001c28:	00db      	lsls	r3, r3, #3
 8001c2a:	1a9b      	subs	r3, r3, r2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001c32:	68fa      	ldr	r2, [r7, #12]
 8001c34:	4413      	add	r3, r2
 8001c36:	3304      	adds	r3, #4
 8001c38:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	683a      	ldr	r2, [r7, #0]
 8001c44:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c52:	7afb      	ldrb	r3, [r7, #11]
 8001c54:	f003 030f 	and.w	r3, r3, #15
 8001c58:	b2da      	uxtb	r2, r3
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d102      	bne.n	8001c6c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c6c:	7afb      	ldrb	r3, [r7, #11]
 8001c6e:	f003 030f 	and.w	r3, r3, #15
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d109      	bne.n	8001c8a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	6818      	ldr	r0, [r3, #0]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	691b      	ldr	r3, [r3, #16]
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	461a      	mov	r2, r3
 8001c82:	6979      	ldr	r1, [r7, #20]
 8001c84:	f002 fd46 	bl	8004714 <USB_EP0StartXfer>
 8001c88:	e008      	b.n	8001c9c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	6818      	ldr	r0, [r3, #0]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	691b      	ldr	r3, [r3, #16]
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	461a      	mov	r2, r3
 8001c96:	6979      	ldr	r1, [r7, #20]
 8001c98:	f002 faf0 	bl	800427c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3718      	adds	r7, #24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b083      	sub	sp, #12
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
 8001cae:	460b      	mov	r3, r1
 8001cb0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001cb2:	78fb      	ldrb	r3, [r7, #3]
 8001cb4:	f003 020f 	and.w	r2, r3, #15
 8001cb8:	6879      	ldr	r1, [r7, #4]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	00db      	lsls	r3, r3, #3
 8001cbe:	1a9b      	subs	r3, r3, r2
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	440b      	add	r3, r1
 8001cc4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001cc8:	681b      	ldr	r3, [r3, #0]
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr

08001cd6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b086      	sub	sp, #24
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	60f8      	str	r0, [r7, #12]
 8001cde:	607a      	str	r2, [r7, #4]
 8001ce0:	603b      	str	r3, [r7, #0]
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ce6:	7afb      	ldrb	r3, [r7, #11]
 8001ce8:	f003 020f 	and.w	r2, r3, #15
 8001cec:	4613      	mov	r3, r2
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	1a9b      	subs	r3, r3, r2
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	3338      	adds	r3, #56	; 0x38
 8001cf6:	68fa      	ldr	r2, [r7, #12]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	3304      	adds	r3, #4
 8001cfc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	683a      	ldr	r2, [r7, #0]
 8001d08:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	2201      	movs	r2, #1
 8001d14:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d16:	7afb      	ldrb	r3, [r7, #11]
 8001d18:	f003 030f 	and.w	r3, r3, #15
 8001d1c:	b2da      	uxtb	r2, r3
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d102      	bne.n	8001d30 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d30:	7afb      	ldrb	r3, [r7, #11]
 8001d32:	f003 030f 	and.w	r3, r3, #15
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d109      	bne.n	8001d4e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	6818      	ldr	r0, [r3, #0]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	691b      	ldr	r3, [r3, #16]
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	461a      	mov	r2, r3
 8001d46:	6979      	ldr	r1, [r7, #20]
 8001d48:	f002 fce4 	bl	8004714 <USB_EP0StartXfer>
 8001d4c:	e008      	b.n	8001d60 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	6818      	ldr	r0, [r3, #0]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	461a      	mov	r2, r3
 8001d5a:	6979      	ldr	r1, [r7, #20]
 8001d5c:	f002 fa8e 	bl	800427c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3718      	adds	r7, #24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b084      	sub	sp, #16
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
 8001d72:	460b      	mov	r3, r1
 8001d74:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001d76:	78fb      	ldrb	r3, [r7, #3]
 8001d78:	f003 020f 	and.w	r2, r3, #15
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d901      	bls.n	8001d88 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e050      	b.n	8001e2a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	da0f      	bge.n	8001db0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d90:	78fb      	ldrb	r3, [r7, #3]
 8001d92:	f003 020f 	and.w	r2, r3, #15
 8001d96:	4613      	mov	r3, r2
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	1a9b      	subs	r3, r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	3338      	adds	r3, #56	; 0x38
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	4413      	add	r3, r2
 8001da4:	3304      	adds	r3, #4
 8001da6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2201      	movs	r2, #1
 8001dac:	705a      	strb	r2, [r3, #1]
 8001dae:	e00d      	b.n	8001dcc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001db0:	78fa      	ldrb	r2, [r7, #3]
 8001db2:	4613      	mov	r3, r2
 8001db4:	00db      	lsls	r3, r3, #3
 8001db6:	1a9b      	subs	r3, r3, r2
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	3304      	adds	r3, #4
 8001dc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dd2:	78fb      	ldrb	r3, [r7, #3]
 8001dd4:	f003 030f 	and.w	r3, r3, #15
 8001dd8:	b2da      	uxtb	r2, r3
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d101      	bne.n	8001dec <HAL_PCD_EP_SetStall+0x82>
 8001de8:	2302      	movs	r3, #2
 8001dea:	e01e      	b.n	8001e2a <HAL_PCD_EP_SetStall+0xc0>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68f9      	ldr	r1, [r7, #12]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f002 fe40 	bl	8004a80 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e00:	78fb      	ldrb	r3, [r7, #3]
 8001e02:	f003 030f 	and.w	r3, r3, #15
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d10a      	bne.n	8001e20 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6818      	ldr	r0, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	b2d9      	uxtb	r1, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	f003 f820 	bl	8004e60 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b084      	sub	sp, #16
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001e3e:	78fb      	ldrb	r3, [r7, #3]
 8001e40:	f003 020f 	and.w	r2, r3, #15
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d901      	bls.n	8001e50 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e042      	b.n	8001ed6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	da0f      	bge.n	8001e78 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e58:	78fb      	ldrb	r3, [r7, #3]
 8001e5a:	f003 020f 	and.w	r2, r3, #15
 8001e5e:	4613      	mov	r3, r2
 8001e60:	00db      	lsls	r3, r3, #3
 8001e62:	1a9b      	subs	r3, r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	3338      	adds	r3, #56	; 0x38
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	3304      	adds	r3, #4
 8001e6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2201      	movs	r2, #1
 8001e74:	705a      	strb	r2, [r3, #1]
 8001e76:	e00f      	b.n	8001e98 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e78:	78fb      	ldrb	r3, [r7, #3]
 8001e7a:	f003 020f 	and.w	r2, r3, #15
 8001e7e:	4613      	mov	r3, r2
 8001e80:	00db      	lsls	r3, r3, #3
 8001e82:	1a9b      	subs	r3, r3, r2
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	3304      	adds	r3, #4
 8001e90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2200      	movs	r2, #0
 8001e96:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e9e:	78fb      	ldrb	r3, [r7, #3]
 8001ea0:	f003 030f 	and.w	r3, r3, #15
 8001ea4:	b2da      	uxtb	r2, r3
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d101      	bne.n	8001eb8 <HAL_PCD_EP_ClrStall+0x86>
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	e00e      	b.n	8001ed6 <HAL_PCD_EP_ClrStall+0xa4>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	68f9      	ldr	r1, [r7, #12]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f002 fe48 	bl	8004b5c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b08a      	sub	sp, #40	; 0x28
 8001ee2:	af02      	add	r7, sp, #8
 8001ee4:	6078      	str	r0, [r7, #4]
 8001ee6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001ef2:	683a      	ldr	r2, [r7, #0]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	1a9b      	subs	r3, r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	3338      	adds	r3, #56	; 0x38
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	4413      	add	r3, r2
 8001f02:	3304      	adds	r3, #4
 8001f04:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	699a      	ldr	r2, [r3, #24]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d901      	bls.n	8001f16 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e06c      	b.n	8001ff0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	695a      	ldr	r2, [r3, #20]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	69fa      	ldr	r2, [r7, #28]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d902      	bls.n	8001f32 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	3303      	adds	r3, #3
 8001f36:	089b      	lsrs	r3, r3, #2
 8001f38:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f3a:	e02b      	b.n	8001f94 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	695a      	ldr	r2, [r3, #20]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	69fa      	ldr	r2, [r7, #28]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d902      	bls.n	8001f58 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	3303      	adds	r3, #3
 8001f5c:	089b      	lsrs	r3, r3, #2
 8001f5e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	68d9      	ldr	r1, [r3, #12]
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	b2da      	uxtb	r2, r3
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	9300      	str	r3, [sp, #0]
 8001f74:	4603      	mov	r3, r0
 8001f76:	6978      	ldr	r0, [r7, #20]
 8001f78:	f002 fd24 	bl	80049c4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	68da      	ldr	r2, [r3, #12]
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	441a      	add	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	699a      	ldr	r2, [r3, #24]
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	441a      	add	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	015a      	lsls	r2, r3, #5
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fa0:	699b      	ldr	r3, [r3, #24]
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d809      	bhi.n	8001fbe <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	699a      	ldr	r2, [r3, #24]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d203      	bcs.n	8001fbe <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	695b      	ldr	r3, [r3, #20]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1be      	bne.n	8001f3c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	695a      	ldr	r2, [r3, #20]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d811      	bhi.n	8001fee <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	f003 030f 	and.w	r3, r3, #15
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	43db      	mvns	r3, r3
 8001fe4:	6939      	ldr	r1, [r7, #16]
 8001fe6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001fea:	4013      	ands	r3, r2
 8001fec:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3720      	adds	r7, #32
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	333c      	adds	r3, #60	; 0x3c
 8002010:	3304      	adds	r3, #4
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	015a      	lsls	r2, r3, #5
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	4413      	add	r3, r2
 800201e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	2b01      	cmp	r3, #1
 800202c:	f040 80a0 	bne.w	8002170 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	f003 0308 	and.w	r3, r3, #8
 8002036:	2b00      	cmp	r3, #0
 8002038:	d015      	beq.n	8002066 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	4a72      	ldr	r2, [pc, #456]	; (8002208 <PCD_EP_OutXfrComplete_int+0x210>)
 800203e:	4293      	cmp	r3, r2
 8002040:	f240 80dd 	bls.w	80021fe <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800204a:	2b00      	cmp	r3, #0
 800204c:	f000 80d7 	beq.w	80021fe <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	015a      	lsls	r2, r3, #5
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	4413      	add	r3, r2
 8002058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800205c:	461a      	mov	r2, r3
 800205e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002062:	6093      	str	r3, [r2, #8]
 8002064:	e0cb      	b.n	80021fe <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	f003 0320 	and.w	r3, r3, #32
 800206c:	2b00      	cmp	r3, #0
 800206e:	d009      	beq.n	8002084 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	015a      	lsls	r2, r3, #5
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	4413      	add	r3, r2
 8002078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800207c:	461a      	mov	r2, r3
 800207e:	2320      	movs	r3, #32
 8002080:	6093      	str	r3, [r2, #8]
 8002082:	e0bc      	b.n	80021fe <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800208a:	2b00      	cmp	r3, #0
 800208c:	f040 80b7 	bne.w	80021fe <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	4a5d      	ldr	r2, [pc, #372]	; (8002208 <PCD_EP_OutXfrComplete_int+0x210>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d90f      	bls.n	80020b8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d00a      	beq.n	80020b8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	015a      	lsls	r2, r3, #5
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	4413      	add	r3, r2
 80020aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020ae:	461a      	mov	r2, r3
 80020b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020b4:	6093      	str	r3, [r2, #8]
 80020b6:	e0a2      	b.n	80021fe <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80020b8:	6879      	ldr	r1, [r7, #4]
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	4613      	mov	r3, r2
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	1a9b      	subs	r3, r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	440b      	add	r3, r1
 80020c6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80020ca:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	0159      	lsls	r1, r3, #5
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	440b      	add	r3, r1
 80020d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80020de:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	4613      	mov	r3, r2
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	1a9b      	subs	r3, r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	4403      	add	r3, r0
 80020ee:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80020f2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80020f4:	6879      	ldr	r1, [r7, #4]
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	4613      	mov	r3, r2
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	1a9b      	subs	r3, r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	440b      	add	r3, r1
 8002102:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002106:	6819      	ldr	r1, [r3, #0]
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	683a      	ldr	r2, [r7, #0]
 800210c:	4613      	mov	r3, r2
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	1a9b      	subs	r3, r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	4403      	add	r3, r0
 8002116:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4419      	add	r1, r3
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	683a      	ldr	r2, [r7, #0]
 8002122:	4613      	mov	r3, r2
 8002124:	00db      	lsls	r3, r3, #3
 8002126:	1a9b      	subs	r3, r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	4403      	add	r3, r0
 800212c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002130:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d114      	bne.n	8002162 <PCD_EP_OutXfrComplete_int+0x16a>
 8002138:	6879      	ldr	r1, [r7, #4]
 800213a:	683a      	ldr	r2, [r7, #0]
 800213c:	4613      	mov	r3, r2
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	1a9b      	subs	r3, r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	440b      	add	r3, r1
 8002146:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d108      	bne.n	8002162 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6818      	ldr	r0, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800215a:	461a      	mov	r2, r3
 800215c:	2101      	movs	r1, #1
 800215e:	f002 fe7f 	bl	8004e60 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	b2db      	uxtb	r3, r3
 8002166:	4619      	mov	r1, r3
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f007 fb4d 	bl	8009808 <HAL_PCD_DataOutStageCallback>
 800216e:	e046      	b.n	80021fe <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	4a26      	ldr	r2, [pc, #152]	; (800220c <PCD_EP_OutXfrComplete_int+0x214>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d124      	bne.n	80021c2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00a      	beq.n	8002198 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	015a      	lsls	r2, r3, #5
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	4413      	add	r3, r2
 800218a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800218e:	461a      	mov	r2, r3
 8002190:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002194:	6093      	str	r3, [r2, #8]
 8002196:	e032      	b.n	80021fe <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	f003 0320 	and.w	r3, r3, #32
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d008      	beq.n	80021b4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	015a      	lsls	r2, r3, #5
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	4413      	add	r3, r2
 80021aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021ae:	461a      	mov	r2, r3
 80021b0:	2320      	movs	r3, #32
 80021b2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	4619      	mov	r1, r3
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f007 fb24 	bl	8009808 <HAL_PCD_DataOutStageCallback>
 80021c0:	e01d      	b.n	80021fe <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d114      	bne.n	80021f2 <PCD_EP_OutXfrComplete_int+0x1fa>
 80021c8:	6879      	ldr	r1, [r7, #4]
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	4613      	mov	r3, r2
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	1a9b      	subs	r3, r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	440b      	add	r3, r1
 80021d6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d108      	bne.n	80021f2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6818      	ldr	r0, [r3, #0]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80021ea:	461a      	mov	r2, r3
 80021ec:	2100      	movs	r1, #0
 80021ee:	f002 fe37 	bl	8004e60 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	4619      	mov	r1, r3
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f007 fb05 	bl	8009808 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	3718      	adds	r7, #24
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	4f54300a 	.word	0x4f54300a
 800220c:	4f54310a 	.word	0x4f54310a

08002210 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	333c      	adds	r3, #60	; 0x3c
 8002228:	3304      	adds	r3, #4
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	015a      	lsls	r2, r3, #5
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	4413      	add	r3, r2
 8002236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	4a15      	ldr	r2, [pc, #84]	; (8002298 <PCD_EP_OutSetupPacket_int+0x88>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d90e      	bls.n	8002264 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800224c:	2b00      	cmp	r3, #0
 800224e:	d009      	beq.n	8002264 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	015a      	lsls	r2, r3, #5
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	4413      	add	r3, r2
 8002258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800225c:	461a      	mov	r2, r3
 800225e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002262:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f007 fabd 	bl	80097e4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	4a0a      	ldr	r2, [pc, #40]	; (8002298 <PCD_EP_OutSetupPacket_int+0x88>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d90c      	bls.n	800228c <PCD_EP_OutSetupPacket_int+0x7c>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d108      	bne.n	800228c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6818      	ldr	r0, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002284:	461a      	mov	r2, r3
 8002286:	2101      	movs	r1, #1
 8002288:	f002 fdea 	bl	8004e60 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3718      	adds	r7, #24
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	4f54300a 	.word	0x4f54300a

0800229c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	460b      	mov	r3, r1
 80022a6:	70fb      	strb	r3, [r7, #3]
 80022a8:	4613      	mov	r3, r2
 80022aa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80022b4:	78fb      	ldrb	r3, [r7, #3]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d107      	bne.n	80022ca <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80022ba:	883b      	ldrh	r3, [r7, #0]
 80022bc:	0419      	lsls	r1, r3, #16
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68ba      	ldr	r2, [r7, #8]
 80022c4:	430a      	orrs	r2, r1
 80022c6:	629a      	str	r2, [r3, #40]	; 0x28
 80022c8:	e028      	b.n	800231c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d0:	0c1b      	lsrs	r3, r3, #16
 80022d2:	68ba      	ldr	r2, [r7, #8]
 80022d4:	4413      	add	r3, r2
 80022d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80022d8:	2300      	movs	r3, #0
 80022da:	73fb      	strb	r3, [r7, #15]
 80022dc:	e00d      	b.n	80022fa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	7bfb      	ldrb	r3, [r7, #15]
 80022e4:	3340      	adds	r3, #64	; 0x40
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	4413      	add	r3, r2
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	0c1b      	lsrs	r3, r3, #16
 80022ee:	68ba      	ldr	r2, [r7, #8]
 80022f0:	4413      	add	r3, r2
 80022f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80022f4:	7bfb      	ldrb	r3, [r7, #15]
 80022f6:	3301      	adds	r3, #1
 80022f8:	73fb      	strb	r3, [r7, #15]
 80022fa:	7bfa      	ldrb	r2, [r7, #15]
 80022fc:	78fb      	ldrb	r3, [r7, #3]
 80022fe:	3b01      	subs	r3, #1
 8002300:	429a      	cmp	r2, r3
 8002302:	d3ec      	bcc.n	80022de <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002304:	883b      	ldrh	r3, [r7, #0]
 8002306:	0418      	lsls	r0, r3, #16
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6819      	ldr	r1, [r3, #0]
 800230c:	78fb      	ldrb	r3, [r7, #3]
 800230e:	3b01      	subs	r3, #1
 8002310:	68ba      	ldr	r2, [r7, #8]
 8002312:	4302      	orrs	r2, r0
 8002314:	3340      	adds	r3, #64	; 0x40
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	440b      	add	r3, r1
 800231a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3714      	adds	r7, #20
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr

0800232a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800232a:	b480      	push	{r7}
 800232c:	b083      	sub	sp, #12
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
 8002332:	460b      	mov	r3, r1
 8002334:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	887a      	ldrh	r2, [r7, #2]
 800233c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800234c:	b480      	push	{r7}
 800234e:	b085      	sub	sp, #20
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2201      	movs	r2, #1
 800235e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800237a:	4b05      	ldr	r3, [pc, #20]	; (8002390 <HAL_PCDEx_ActivateLPM+0x44>)
 800237c:	4313      	orrs	r3, r2
 800237e:	68fa      	ldr	r2, [r7, #12]
 8002380:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002382:	2300      	movs	r3, #0
}
 8002384:	4618      	mov	r0, r3
 8002386:	3714      	adds	r7, #20
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	10000003 	.word	0x10000003

08002394 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b086      	sub	sp, #24
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800239c:	2300      	movs	r3, #0
 800239e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d101      	bne.n	80023aa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e291      	b.n	80028ce <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f000 8087 	beq.w	80024c6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023b8:	4b96      	ldr	r3, [pc, #600]	; (8002614 <HAL_RCC_OscConfig+0x280>)
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f003 030c 	and.w	r3, r3, #12
 80023c0:	2b04      	cmp	r3, #4
 80023c2:	d00c      	beq.n	80023de <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023c4:	4b93      	ldr	r3, [pc, #588]	; (8002614 <HAL_RCC_OscConfig+0x280>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f003 030c 	and.w	r3, r3, #12
 80023cc:	2b08      	cmp	r3, #8
 80023ce:	d112      	bne.n	80023f6 <HAL_RCC_OscConfig+0x62>
 80023d0:	4b90      	ldr	r3, [pc, #576]	; (8002614 <HAL_RCC_OscConfig+0x280>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023dc:	d10b      	bne.n	80023f6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023de:	4b8d      	ldr	r3, [pc, #564]	; (8002614 <HAL_RCC_OscConfig+0x280>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d06c      	beq.n	80024c4 <HAL_RCC_OscConfig+0x130>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d168      	bne.n	80024c4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e26b      	b.n	80028ce <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023fe:	d106      	bne.n	800240e <HAL_RCC_OscConfig+0x7a>
 8002400:	4b84      	ldr	r3, [pc, #528]	; (8002614 <HAL_RCC_OscConfig+0x280>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a83      	ldr	r2, [pc, #524]	; (8002614 <HAL_RCC_OscConfig+0x280>)
 8002406:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800240a:	6013      	str	r3, [r2, #0]
 800240c:	e02e      	b.n	800246c <HAL_RCC_OscConfig+0xd8>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d10c      	bne.n	8002430 <HAL_RCC_OscConfig+0x9c>
 8002416:	4b7f      	ldr	r3, [pc, #508]	; (8002614 <HAL_RCC_OscConfig+0x280>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a7e      	ldr	r2, [pc, #504]	; (8002614 <HAL_RCC_OscConfig+0x280>)
 800241c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002420:	6013      	str	r3, [r2, #0]
 8002422:	4b7c      	ldr	r3, [pc, #496]	; (8002614 <HAL_RCC_OscConfig+0x280>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a7b      	ldr	r2, [pc, #492]	; (8002614 <HAL_RCC_OscConfig+0x280>)
 8002428:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800242c:	6013      	str	r3, [r2, #0]
 800242e:	e01d      	b.n	800246c <HAL_RCC_OscConfig+0xd8>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002438:	d10c      	bne.n	8002454 <HAL_RCC_OscConfig+0xc0>
 800243a:	4b76      	ldr	r3, [pc, #472]	; (8002614 <HAL_RCC_OscConfig+0x280>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a75      	ldr	r2, [pc, #468]	; (8002614 <HAL_RCC_OscConfig+0x280>)
 8002440:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002444:	6013      	str	r3, [r2, #0]
 8002446:	4b73      	ldr	r3, [pc, #460]	; (8002614 <HAL_RCC_OscConfig+0x280>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a72      	ldr	r2, [pc, #456]	; (8002614 <HAL_RCC_OscConfig+0x280>)
 800244c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002450:	6013      	str	r3, [r2, #0]
 8002452:	e00b      	b.n	800246c <HAL_RCC_OscConfig+0xd8>
 8002454:	4b6f      	ldr	r3, [pc, #444]	; (8002614 <HAL_RCC_OscConfig+0x280>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a6e      	ldr	r2, [pc, #440]	; (8002614 <HAL_RCC_OscConfig+0x280>)
 800245a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800245e:	6013      	str	r3, [r2, #0]
 8002460:	4b6c      	ldr	r3, [pc, #432]	; (8002614 <HAL_RCC_OscConfig+0x280>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a6b      	ldr	r2, [pc, #428]	; (8002614 <HAL_RCC_OscConfig+0x280>)
 8002466:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800246a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d013      	beq.n	800249c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002474:	f7fe fb16 	bl	8000aa4 <HAL_GetTick>
 8002478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800247a:	e008      	b.n	800248e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800247c:	f7fe fb12 	bl	8000aa4 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b64      	cmp	r3, #100	; 0x64
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e21f      	b.n	80028ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800248e:	4b61      	ldr	r3, [pc, #388]	; (8002614 <HAL_RCC_OscConfig+0x280>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d0f0      	beq.n	800247c <HAL_RCC_OscConfig+0xe8>
 800249a:	e014      	b.n	80024c6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800249c:	f7fe fb02 	bl	8000aa4 <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024a4:	f7fe fafe 	bl	8000aa4 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b64      	cmp	r3, #100	; 0x64
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e20b      	b.n	80028ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024b6:	4b57      	ldr	r3, [pc, #348]	; (8002614 <HAL_RCC_OscConfig+0x280>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1f0      	bne.n	80024a4 <HAL_RCC_OscConfig+0x110>
 80024c2:	e000      	b.n	80024c6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d069      	beq.n	80025a6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024d2:	4b50      	ldr	r3, [pc, #320]	; (8002614 <HAL_RCC_OscConfig+0x280>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f003 030c 	and.w	r3, r3, #12
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00b      	beq.n	80024f6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024de:	4b4d      	ldr	r3, [pc, #308]	; (8002614 <HAL_RCC_OscConfig+0x280>)
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f003 030c 	and.w	r3, r3, #12
 80024e6:	2b08      	cmp	r3, #8
 80024e8:	d11c      	bne.n	8002524 <HAL_RCC_OscConfig+0x190>
 80024ea:	4b4a      	ldr	r3, [pc, #296]	; (8002614 <HAL_RCC_OscConfig+0x280>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d116      	bne.n	8002524 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024f6:	4b47      	ldr	r3, [pc, #284]	; (8002614 <HAL_RCC_OscConfig+0x280>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d005      	beq.n	800250e <HAL_RCC_OscConfig+0x17a>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d001      	beq.n	800250e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e1df      	b.n	80028ce <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800250e:	4b41      	ldr	r3, [pc, #260]	; (8002614 <HAL_RCC_OscConfig+0x280>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	00db      	lsls	r3, r3, #3
 800251c:	493d      	ldr	r1, [pc, #244]	; (8002614 <HAL_RCC_OscConfig+0x280>)
 800251e:	4313      	orrs	r3, r2
 8002520:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002522:	e040      	b.n	80025a6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d023      	beq.n	8002574 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800252c:	4b39      	ldr	r3, [pc, #228]	; (8002614 <HAL_RCC_OscConfig+0x280>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a38      	ldr	r2, [pc, #224]	; (8002614 <HAL_RCC_OscConfig+0x280>)
 8002532:	f043 0301 	orr.w	r3, r3, #1
 8002536:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002538:	f7fe fab4 	bl	8000aa4 <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002540:	f7fe fab0 	bl	8000aa4 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e1bd      	b.n	80028ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002552:	4b30      	ldr	r3, [pc, #192]	; (8002614 <HAL_RCC_OscConfig+0x280>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d0f0      	beq.n	8002540 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800255e:	4b2d      	ldr	r3, [pc, #180]	; (8002614 <HAL_RCC_OscConfig+0x280>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	4929      	ldr	r1, [pc, #164]	; (8002614 <HAL_RCC_OscConfig+0x280>)
 800256e:	4313      	orrs	r3, r2
 8002570:	600b      	str	r3, [r1, #0]
 8002572:	e018      	b.n	80025a6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002574:	4b27      	ldr	r3, [pc, #156]	; (8002614 <HAL_RCC_OscConfig+0x280>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a26      	ldr	r2, [pc, #152]	; (8002614 <HAL_RCC_OscConfig+0x280>)
 800257a:	f023 0301 	bic.w	r3, r3, #1
 800257e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002580:	f7fe fa90 	bl	8000aa4 <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002586:	e008      	b.n	800259a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002588:	f7fe fa8c 	bl	8000aa4 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b02      	cmp	r3, #2
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e199      	b.n	80028ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800259a:	4b1e      	ldr	r3, [pc, #120]	; (8002614 <HAL_RCC_OscConfig+0x280>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1f0      	bne.n	8002588 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0308 	and.w	r3, r3, #8
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d038      	beq.n	8002624 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	695b      	ldr	r3, [r3, #20]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d019      	beq.n	80025ee <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025ba:	4b16      	ldr	r3, [pc, #88]	; (8002614 <HAL_RCC_OscConfig+0x280>)
 80025bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025be:	4a15      	ldr	r2, [pc, #84]	; (8002614 <HAL_RCC_OscConfig+0x280>)
 80025c0:	f043 0301 	orr.w	r3, r3, #1
 80025c4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c6:	f7fe fa6d 	bl	8000aa4 <HAL_GetTick>
 80025ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025cc:	e008      	b.n	80025e0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025ce:	f7fe fa69 	bl	8000aa4 <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d901      	bls.n	80025e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e176      	b.n	80028ce <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025e0:	4b0c      	ldr	r3, [pc, #48]	; (8002614 <HAL_RCC_OscConfig+0x280>)
 80025e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025e4:	f003 0302 	and.w	r3, r3, #2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d0f0      	beq.n	80025ce <HAL_RCC_OscConfig+0x23a>
 80025ec:	e01a      	b.n	8002624 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025ee:	4b09      	ldr	r3, [pc, #36]	; (8002614 <HAL_RCC_OscConfig+0x280>)
 80025f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025f2:	4a08      	ldr	r2, [pc, #32]	; (8002614 <HAL_RCC_OscConfig+0x280>)
 80025f4:	f023 0301 	bic.w	r3, r3, #1
 80025f8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025fa:	f7fe fa53 	bl	8000aa4 <HAL_GetTick>
 80025fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002600:	e00a      	b.n	8002618 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002602:	f7fe fa4f 	bl	8000aa4 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d903      	bls.n	8002618 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e15c      	b.n	80028ce <HAL_RCC_OscConfig+0x53a>
 8002614:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002618:	4b91      	ldr	r3, [pc, #580]	; (8002860 <HAL_RCC_OscConfig+0x4cc>)
 800261a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1ee      	bne.n	8002602 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0304 	and.w	r3, r3, #4
 800262c:	2b00      	cmp	r3, #0
 800262e:	f000 80a4 	beq.w	800277a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002632:	4b8b      	ldr	r3, [pc, #556]	; (8002860 <HAL_RCC_OscConfig+0x4cc>)
 8002634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d10d      	bne.n	800265a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800263e:	4b88      	ldr	r3, [pc, #544]	; (8002860 <HAL_RCC_OscConfig+0x4cc>)
 8002640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002642:	4a87      	ldr	r2, [pc, #540]	; (8002860 <HAL_RCC_OscConfig+0x4cc>)
 8002644:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002648:	6413      	str	r3, [r2, #64]	; 0x40
 800264a:	4b85      	ldr	r3, [pc, #532]	; (8002860 <HAL_RCC_OscConfig+0x4cc>)
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002652:	60bb      	str	r3, [r7, #8]
 8002654:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002656:	2301      	movs	r3, #1
 8002658:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800265a:	4b82      	ldr	r3, [pc, #520]	; (8002864 <HAL_RCC_OscConfig+0x4d0>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002662:	2b00      	cmp	r3, #0
 8002664:	d118      	bne.n	8002698 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002666:	4b7f      	ldr	r3, [pc, #508]	; (8002864 <HAL_RCC_OscConfig+0x4d0>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a7e      	ldr	r2, [pc, #504]	; (8002864 <HAL_RCC_OscConfig+0x4d0>)
 800266c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002670:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002672:	f7fe fa17 	bl	8000aa4 <HAL_GetTick>
 8002676:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002678:	e008      	b.n	800268c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800267a:	f7fe fa13 	bl	8000aa4 <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	2b64      	cmp	r3, #100	; 0x64
 8002686:	d901      	bls.n	800268c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e120      	b.n	80028ce <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800268c:	4b75      	ldr	r3, [pc, #468]	; (8002864 <HAL_RCC_OscConfig+0x4d0>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002694:	2b00      	cmp	r3, #0
 8002696:	d0f0      	beq.n	800267a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	2b01      	cmp	r3, #1
 800269e:	d106      	bne.n	80026ae <HAL_RCC_OscConfig+0x31a>
 80026a0:	4b6f      	ldr	r3, [pc, #444]	; (8002860 <HAL_RCC_OscConfig+0x4cc>)
 80026a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a4:	4a6e      	ldr	r2, [pc, #440]	; (8002860 <HAL_RCC_OscConfig+0x4cc>)
 80026a6:	f043 0301 	orr.w	r3, r3, #1
 80026aa:	6713      	str	r3, [r2, #112]	; 0x70
 80026ac:	e02d      	b.n	800270a <HAL_RCC_OscConfig+0x376>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d10c      	bne.n	80026d0 <HAL_RCC_OscConfig+0x33c>
 80026b6:	4b6a      	ldr	r3, [pc, #424]	; (8002860 <HAL_RCC_OscConfig+0x4cc>)
 80026b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ba:	4a69      	ldr	r2, [pc, #420]	; (8002860 <HAL_RCC_OscConfig+0x4cc>)
 80026bc:	f023 0301 	bic.w	r3, r3, #1
 80026c0:	6713      	str	r3, [r2, #112]	; 0x70
 80026c2:	4b67      	ldr	r3, [pc, #412]	; (8002860 <HAL_RCC_OscConfig+0x4cc>)
 80026c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c6:	4a66      	ldr	r2, [pc, #408]	; (8002860 <HAL_RCC_OscConfig+0x4cc>)
 80026c8:	f023 0304 	bic.w	r3, r3, #4
 80026cc:	6713      	str	r3, [r2, #112]	; 0x70
 80026ce:	e01c      	b.n	800270a <HAL_RCC_OscConfig+0x376>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	2b05      	cmp	r3, #5
 80026d6:	d10c      	bne.n	80026f2 <HAL_RCC_OscConfig+0x35e>
 80026d8:	4b61      	ldr	r3, [pc, #388]	; (8002860 <HAL_RCC_OscConfig+0x4cc>)
 80026da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026dc:	4a60      	ldr	r2, [pc, #384]	; (8002860 <HAL_RCC_OscConfig+0x4cc>)
 80026de:	f043 0304 	orr.w	r3, r3, #4
 80026e2:	6713      	str	r3, [r2, #112]	; 0x70
 80026e4:	4b5e      	ldr	r3, [pc, #376]	; (8002860 <HAL_RCC_OscConfig+0x4cc>)
 80026e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e8:	4a5d      	ldr	r2, [pc, #372]	; (8002860 <HAL_RCC_OscConfig+0x4cc>)
 80026ea:	f043 0301 	orr.w	r3, r3, #1
 80026ee:	6713      	str	r3, [r2, #112]	; 0x70
 80026f0:	e00b      	b.n	800270a <HAL_RCC_OscConfig+0x376>
 80026f2:	4b5b      	ldr	r3, [pc, #364]	; (8002860 <HAL_RCC_OscConfig+0x4cc>)
 80026f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f6:	4a5a      	ldr	r2, [pc, #360]	; (8002860 <HAL_RCC_OscConfig+0x4cc>)
 80026f8:	f023 0301 	bic.w	r3, r3, #1
 80026fc:	6713      	str	r3, [r2, #112]	; 0x70
 80026fe:	4b58      	ldr	r3, [pc, #352]	; (8002860 <HAL_RCC_OscConfig+0x4cc>)
 8002700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002702:	4a57      	ldr	r2, [pc, #348]	; (8002860 <HAL_RCC_OscConfig+0x4cc>)
 8002704:	f023 0304 	bic.w	r3, r3, #4
 8002708:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d015      	beq.n	800273e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002712:	f7fe f9c7 	bl	8000aa4 <HAL_GetTick>
 8002716:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002718:	e00a      	b.n	8002730 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800271a:	f7fe f9c3 	bl	8000aa4 <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	f241 3288 	movw	r2, #5000	; 0x1388
 8002728:	4293      	cmp	r3, r2
 800272a:	d901      	bls.n	8002730 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e0ce      	b.n	80028ce <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002730:	4b4b      	ldr	r3, [pc, #300]	; (8002860 <HAL_RCC_OscConfig+0x4cc>)
 8002732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002734:	f003 0302 	and.w	r3, r3, #2
 8002738:	2b00      	cmp	r3, #0
 800273a:	d0ee      	beq.n	800271a <HAL_RCC_OscConfig+0x386>
 800273c:	e014      	b.n	8002768 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800273e:	f7fe f9b1 	bl	8000aa4 <HAL_GetTick>
 8002742:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002744:	e00a      	b.n	800275c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002746:	f7fe f9ad 	bl	8000aa4 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	f241 3288 	movw	r2, #5000	; 0x1388
 8002754:	4293      	cmp	r3, r2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e0b8      	b.n	80028ce <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800275c:	4b40      	ldr	r3, [pc, #256]	; (8002860 <HAL_RCC_OscConfig+0x4cc>)
 800275e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1ee      	bne.n	8002746 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002768:	7dfb      	ldrb	r3, [r7, #23]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d105      	bne.n	800277a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800276e:	4b3c      	ldr	r3, [pc, #240]	; (8002860 <HAL_RCC_OscConfig+0x4cc>)
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	4a3b      	ldr	r2, [pc, #236]	; (8002860 <HAL_RCC_OscConfig+0x4cc>)
 8002774:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002778:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	2b00      	cmp	r3, #0
 8002780:	f000 80a4 	beq.w	80028cc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002784:	4b36      	ldr	r3, [pc, #216]	; (8002860 <HAL_RCC_OscConfig+0x4cc>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f003 030c 	and.w	r3, r3, #12
 800278c:	2b08      	cmp	r3, #8
 800278e:	d06b      	beq.n	8002868 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	2b02      	cmp	r3, #2
 8002796:	d149      	bne.n	800282c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002798:	4b31      	ldr	r3, [pc, #196]	; (8002860 <HAL_RCC_OscConfig+0x4cc>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a30      	ldr	r2, [pc, #192]	; (8002860 <HAL_RCC_OscConfig+0x4cc>)
 800279e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a4:	f7fe f97e 	bl	8000aa4 <HAL_GetTick>
 80027a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ac:	f7fe f97a 	bl	8000aa4 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e087      	b.n	80028ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027be:	4b28      	ldr	r3, [pc, #160]	; (8002860 <HAL_RCC_OscConfig+0x4cc>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1f0      	bne.n	80027ac <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	69da      	ldr	r2, [r3, #28]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a1b      	ldr	r3, [r3, #32]
 80027d2:	431a      	orrs	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d8:	019b      	lsls	r3, r3, #6
 80027da:	431a      	orrs	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e0:	085b      	lsrs	r3, r3, #1
 80027e2:	3b01      	subs	r3, #1
 80027e4:	041b      	lsls	r3, r3, #16
 80027e6:	431a      	orrs	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ec:	061b      	lsls	r3, r3, #24
 80027ee:	4313      	orrs	r3, r2
 80027f0:	4a1b      	ldr	r2, [pc, #108]	; (8002860 <HAL_RCC_OscConfig+0x4cc>)
 80027f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80027f6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027f8:	4b19      	ldr	r3, [pc, #100]	; (8002860 <HAL_RCC_OscConfig+0x4cc>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a18      	ldr	r2, [pc, #96]	; (8002860 <HAL_RCC_OscConfig+0x4cc>)
 80027fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002802:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002804:	f7fe f94e 	bl	8000aa4 <HAL_GetTick>
 8002808:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800280a:	e008      	b.n	800281e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800280c:	f7fe f94a 	bl	8000aa4 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b02      	cmp	r3, #2
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e057      	b.n	80028ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800281e:	4b10      	ldr	r3, [pc, #64]	; (8002860 <HAL_RCC_OscConfig+0x4cc>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d0f0      	beq.n	800280c <HAL_RCC_OscConfig+0x478>
 800282a:	e04f      	b.n	80028cc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800282c:	4b0c      	ldr	r3, [pc, #48]	; (8002860 <HAL_RCC_OscConfig+0x4cc>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a0b      	ldr	r2, [pc, #44]	; (8002860 <HAL_RCC_OscConfig+0x4cc>)
 8002832:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002836:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002838:	f7fe f934 	bl	8000aa4 <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800283e:	e008      	b.n	8002852 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002840:	f7fe f930 	bl	8000aa4 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e03d      	b.n	80028ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002852:	4b03      	ldr	r3, [pc, #12]	; (8002860 <HAL_RCC_OscConfig+0x4cc>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1f0      	bne.n	8002840 <HAL_RCC_OscConfig+0x4ac>
 800285e:	e035      	b.n	80028cc <HAL_RCC_OscConfig+0x538>
 8002860:	40023800 	.word	0x40023800
 8002864:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002868:	4b1b      	ldr	r3, [pc, #108]	; (80028d8 <HAL_RCC_OscConfig+0x544>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d028      	beq.n	80028c8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002880:	429a      	cmp	r2, r3
 8002882:	d121      	bne.n	80028c8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800288e:	429a      	cmp	r2, r3
 8002890:	d11a      	bne.n	80028c8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002898:	4013      	ands	r3, r2
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800289e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d111      	bne.n	80028c8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ae:	085b      	lsrs	r3, r3, #1
 80028b0:	3b01      	subs	r3, #1
 80028b2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d107      	bne.n	80028c8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d001      	beq.n	80028cc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e000      	b.n	80028ce <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3718      	adds	r7, #24
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	40023800 	.word	0x40023800

080028dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80028e6:	2300      	movs	r3, #0
 80028e8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d101      	bne.n	80028f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e0d0      	b.n	8002a96 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028f4:	4b6a      	ldr	r3, [pc, #424]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 030f 	and.w	r3, r3, #15
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d910      	bls.n	8002924 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002902:	4b67      	ldr	r3, [pc, #412]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f023 020f 	bic.w	r2, r3, #15
 800290a:	4965      	ldr	r1, [pc, #404]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	4313      	orrs	r3, r2
 8002910:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002912:	4b63      	ldr	r3, [pc, #396]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 030f 	and.w	r3, r3, #15
 800291a:	683a      	ldr	r2, [r7, #0]
 800291c:	429a      	cmp	r2, r3
 800291e:	d001      	beq.n	8002924 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e0b8      	b.n	8002a96 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0302 	and.w	r3, r3, #2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d020      	beq.n	8002972 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0304 	and.w	r3, r3, #4
 8002938:	2b00      	cmp	r3, #0
 800293a:	d005      	beq.n	8002948 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800293c:	4b59      	ldr	r3, [pc, #356]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c8>)
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	4a58      	ldr	r2, [pc, #352]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c8>)
 8002942:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002946:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0308 	and.w	r3, r3, #8
 8002950:	2b00      	cmp	r3, #0
 8002952:	d005      	beq.n	8002960 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002954:	4b53      	ldr	r3, [pc, #332]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c8>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	4a52      	ldr	r2, [pc, #328]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c8>)
 800295a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800295e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002960:	4b50      	ldr	r3, [pc, #320]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c8>)
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	494d      	ldr	r1, [pc, #308]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c8>)
 800296e:	4313      	orrs	r3, r2
 8002970:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b00      	cmp	r3, #0
 800297c:	d040      	beq.n	8002a00 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d107      	bne.n	8002996 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002986:	4b47      	ldr	r3, [pc, #284]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c8>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d115      	bne.n	80029be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e07f      	b.n	8002a96 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	2b02      	cmp	r3, #2
 800299c:	d107      	bne.n	80029ae <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800299e:	4b41      	ldr	r3, [pc, #260]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c8>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d109      	bne.n	80029be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e073      	b.n	8002a96 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ae:	4b3d      	ldr	r3, [pc, #244]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c8>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d101      	bne.n	80029be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e06b      	b.n	8002a96 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029be:	4b39      	ldr	r3, [pc, #228]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c8>)
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f023 0203 	bic.w	r2, r3, #3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	4936      	ldr	r1, [pc, #216]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c8>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029d0:	f7fe f868 	bl	8000aa4 <HAL_GetTick>
 80029d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029d6:	e00a      	b.n	80029ee <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029d8:	f7fe f864 	bl	8000aa4 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e053      	b.n	8002a96 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ee:	4b2d      	ldr	r3, [pc, #180]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c8>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f003 020c 	and.w	r2, r3, #12
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d1eb      	bne.n	80029d8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a00:	4b27      	ldr	r3, [pc, #156]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 030f 	and.w	r3, r3, #15
 8002a08:	683a      	ldr	r2, [r7, #0]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d210      	bcs.n	8002a30 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a0e:	4b24      	ldr	r3, [pc, #144]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f023 020f 	bic.w	r2, r3, #15
 8002a16:	4922      	ldr	r1, [pc, #136]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a1e:	4b20      	ldr	r3, [pc, #128]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 030f 	and.w	r3, r3, #15
 8002a26:	683a      	ldr	r2, [r7, #0]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d001      	beq.n	8002a30 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e032      	b.n	8002a96 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0304 	and.w	r3, r3, #4
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d008      	beq.n	8002a4e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a3c:	4b19      	ldr	r3, [pc, #100]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c8>)
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	4916      	ldr	r1, [pc, #88]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c8>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0308 	and.w	r3, r3, #8
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d009      	beq.n	8002a6e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a5a:	4b12      	ldr	r3, [pc, #72]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c8>)
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	490e      	ldr	r1, [pc, #56]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c8>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a6e:	f000 f821 	bl	8002ab4 <HAL_RCC_GetSysClockFreq>
 8002a72:	4601      	mov	r1, r0
 8002a74:	4b0b      	ldr	r3, [pc, #44]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c8>)
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	091b      	lsrs	r3, r3, #4
 8002a7a:	f003 030f 	and.w	r3, r3, #15
 8002a7e:	4a0a      	ldr	r2, [pc, #40]	; (8002aa8 <HAL_RCC_ClockConfig+0x1cc>)
 8002a80:	5cd3      	ldrb	r3, [r2, r3]
 8002a82:	fa21 f303 	lsr.w	r3, r1, r3
 8002a86:	4a09      	ldr	r2, [pc, #36]	; (8002aac <HAL_RCC_ClockConfig+0x1d0>)
 8002a88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a8a:	4b09      	ldr	r3, [pc, #36]	; (8002ab0 <HAL_RCC_ClockConfig+0x1d4>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7fd febc 	bl	800080c <HAL_InitTick>

  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	40023c00 	.word	0x40023c00
 8002aa4:	40023800 	.word	0x40023800
 8002aa8:	0800a7ac 	.word	0x0800a7ac
 8002aac:	20000000 	.word	0x20000000
 8002ab0:	20000004 	.word	0x20000004

08002ab4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002aba:	2300      	movs	r3, #0
 8002abc:	607b      	str	r3, [r7, #4]
 8002abe:	2300      	movs	r3, #0
 8002ac0:	60fb      	str	r3, [r7, #12]
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002aca:	4b63      	ldr	r3, [pc, #396]	; (8002c58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f003 030c 	and.w	r3, r3, #12
 8002ad2:	2b04      	cmp	r3, #4
 8002ad4:	d007      	beq.n	8002ae6 <HAL_RCC_GetSysClockFreq+0x32>
 8002ad6:	2b08      	cmp	r3, #8
 8002ad8:	d008      	beq.n	8002aec <HAL_RCC_GetSysClockFreq+0x38>
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	f040 80b4 	bne.w	8002c48 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ae0:	4b5e      	ldr	r3, [pc, #376]	; (8002c5c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002ae2:	60bb      	str	r3, [r7, #8]
      break;
 8002ae4:	e0b3      	b.n	8002c4e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ae6:	4b5e      	ldr	r3, [pc, #376]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002ae8:	60bb      	str	r3, [r7, #8]
      break;
 8002aea:	e0b0      	b.n	8002c4e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002aec:	4b5a      	ldr	r3, [pc, #360]	; (8002c58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002af4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002af6:	4b58      	ldr	r3, [pc, #352]	; (8002c58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d04a      	beq.n	8002b98 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b02:	4b55      	ldr	r3, [pc, #340]	; (8002c58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	099b      	lsrs	r3, r3, #6
 8002b08:	f04f 0400 	mov.w	r4, #0
 8002b0c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002b10:	f04f 0200 	mov.w	r2, #0
 8002b14:	ea03 0501 	and.w	r5, r3, r1
 8002b18:	ea04 0602 	and.w	r6, r4, r2
 8002b1c:	4629      	mov	r1, r5
 8002b1e:	4632      	mov	r2, r6
 8002b20:	f04f 0300 	mov.w	r3, #0
 8002b24:	f04f 0400 	mov.w	r4, #0
 8002b28:	0154      	lsls	r4, r2, #5
 8002b2a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002b2e:	014b      	lsls	r3, r1, #5
 8002b30:	4619      	mov	r1, r3
 8002b32:	4622      	mov	r2, r4
 8002b34:	1b49      	subs	r1, r1, r5
 8002b36:	eb62 0206 	sbc.w	r2, r2, r6
 8002b3a:	f04f 0300 	mov.w	r3, #0
 8002b3e:	f04f 0400 	mov.w	r4, #0
 8002b42:	0194      	lsls	r4, r2, #6
 8002b44:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002b48:	018b      	lsls	r3, r1, #6
 8002b4a:	1a5b      	subs	r3, r3, r1
 8002b4c:	eb64 0402 	sbc.w	r4, r4, r2
 8002b50:	f04f 0100 	mov.w	r1, #0
 8002b54:	f04f 0200 	mov.w	r2, #0
 8002b58:	00e2      	lsls	r2, r4, #3
 8002b5a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002b5e:	00d9      	lsls	r1, r3, #3
 8002b60:	460b      	mov	r3, r1
 8002b62:	4614      	mov	r4, r2
 8002b64:	195b      	adds	r3, r3, r5
 8002b66:	eb44 0406 	adc.w	r4, r4, r6
 8002b6a:	f04f 0100 	mov.w	r1, #0
 8002b6e:	f04f 0200 	mov.w	r2, #0
 8002b72:	0262      	lsls	r2, r4, #9
 8002b74:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002b78:	0259      	lsls	r1, r3, #9
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	4614      	mov	r4, r2
 8002b7e:	4618      	mov	r0, r3
 8002b80:	4621      	mov	r1, r4
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f04f 0400 	mov.w	r4, #0
 8002b88:	461a      	mov	r2, r3
 8002b8a:	4623      	mov	r3, r4
 8002b8c:	f7fd fb98 	bl	80002c0 <__aeabi_uldivmod>
 8002b90:	4603      	mov	r3, r0
 8002b92:	460c      	mov	r4, r1
 8002b94:	60fb      	str	r3, [r7, #12]
 8002b96:	e049      	b.n	8002c2c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b98:	4b2f      	ldr	r3, [pc, #188]	; (8002c58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	099b      	lsrs	r3, r3, #6
 8002b9e:	f04f 0400 	mov.w	r4, #0
 8002ba2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002ba6:	f04f 0200 	mov.w	r2, #0
 8002baa:	ea03 0501 	and.w	r5, r3, r1
 8002bae:	ea04 0602 	and.w	r6, r4, r2
 8002bb2:	4629      	mov	r1, r5
 8002bb4:	4632      	mov	r2, r6
 8002bb6:	f04f 0300 	mov.w	r3, #0
 8002bba:	f04f 0400 	mov.w	r4, #0
 8002bbe:	0154      	lsls	r4, r2, #5
 8002bc0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002bc4:	014b      	lsls	r3, r1, #5
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	4622      	mov	r2, r4
 8002bca:	1b49      	subs	r1, r1, r5
 8002bcc:	eb62 0206 	sbc.w	r2, r2, r6
 8002bd0:	f04f 0300 	mov.w	r3, #0
 8002bd4:	f04f 0400 	mov.w	r4, #0
 8002bd8:	0194      	lsls	r4, r2, #6
 8002bda:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002bde:	018b      	lsls	r3, r1, #6
 8002be0:	1a5b      	subs	r3, r3, r1
 8002be2:	eb64 0402 	sbc.w	r4, r4, r2
 8002be6:	f04f 0100 	mov.w	r1, #0
 8002bea:	f04f 0200 	mov.w	r2, #0
 8002bee:	00e2      	lsls	r2, r4, #3
 8002bf0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002bf4:	00d9      	lsls	r1, r3, #3
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	4614      	mov	r4, r2
 8002bfa:	195b      	adds	r3, r3, r5
 8002bfc:	eb44 0406 	adc.w	r4, r4, r6
 8002c00:	f04f 0100 	mov.w	r1, #0
 8002c04:	f04f 0200 	mov.w	r2, #0
 8002c08:	02a2      	lsls	r2, r4, #10
 8002c0a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002c0e:	0299      	lsls	r1, r3, #10
 8002c10:	460b      	mov	r3, r1
 8002c12:	4614      	mov	r4, r2
 8002c14:	4618      	mov	r0, r3
 8002c16:	4621      	mov	r1, r4
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f04f 0400 	mov.w	r4, #0
 8002c1e:	461a      	mov	r2, r3
 8002c20:	4623      	mov	r3, r4
 8002c22:	f7fd fb4d 	bl	80002c0 <__aeabi_uldivmod>
 8002c26:	4603      	mov	r3, r0
 8002c28:	460c      	mov	r4, r1
 8002c2a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002c2c:	4b0a      	ldr	r3, [pc, #40]	; (8002c58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	0c1b      	lsrs	r3, r3, #16
 8002c32:	f003 0303 	and.w	r3, r3, #3
 8002c36:	3301      	adds	r3, #1
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002c3c:	68fa      	ldr	r2, [r7, #12]
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c44:	60bb      	str	r3, [r7, #8]
      break;
 8002c46:	e002      	b.n	8002c4e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c48:	4b04      	ldr	r3, [pc, #16]	; (8002c5c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002c4a:	60bb      	str	r3, [r7, #8]
      break;
 8002c4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c4e:	68bb      	ldr	r3, [r7, #8]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3714      	adds	r7, #20
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c58:	40023800 	.word	0x40023800
 8002c5c:	00f42400 	.word	0x00f42400
 8002c60:	007a1200 	.word	0x007a1200

08002c64 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c68:	4b03      	ldr	r3, [pc, #12]	; (8002c78 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	20000000 	.word	0x20000000

08002c7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c80:	f7ff fff0 	bl	8002c64 <HAL_RCC_GetHCLKFreq>
 8002c84:	4601      	mov	r1, r0
 8002c86:	4b05      	ldr	r3, [pc, #20]	; (8002c9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	0a9b      	lsrs	r3, r3, #10
 8002c8c:	f003 0307 	and.w	r3, r3, #7
 8002c90:	4a03      	ldr	r2, [pc, #12]	; (8002ca0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c92:	5cd3      	ldrb	r3, [r2, r3]
 8002c94:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40023800 	.word	0x40023800
 8002ca0:	0800a7bc 	.word	0x0800a7bc

08002ca4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	220f      	movs	r2, #15
 8002cb2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002cb4:	4b12      	ldr	r3, [pc, #72]	; (8002d00 <HAL_RCC_GetClockConfig+0x5c>)
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f003 0203 	and.w	r2, r3, #3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002cc0:	4b0f      	ldr	r3, [pc, #60]	; (8002d00 <HAL_RCC_GetClockConfig+0x5c>)
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002ccc:	4b0c      	ldr	r3, [pc, #48]	; (8002d00 <HAL_RCC_GetClockConfig+0x5c>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002cd8:	4b09      	ldr	r3, [pc, #36]	; (8002d00 <HAL_RCC_GetClockConfig+0x5c>)
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	08db      	lsrs	r3, r3, #3
 8002cde:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002ce6:	4b07      	ldr	r3, [pc, #28]	; (8002d04 <HAL_RCC_GetClockConfig+0x60>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 020f 	and.w	r2, r3, #15
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	601a      	str	r2, [r3, #0]
}
 8002cf2:	bf00      	nop
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	40023800 	.word	0x40023800
 8002d04:	40023c00 	.word	0x40023c00

08002d08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b088      	sub	sp, #32
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002d10:	2300      	movs	r3, #0
 8002d12:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002d14:	2300      	movs	r3, #0
 8002d16:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002d20:	2300      	movs	r3, #0
 8002d22:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0301 	and.w	r3, r3, #1
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d012      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002d30:	4b69      	ldr	r3, [pc, #420]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	4a68      	ldr	r2, [pc, #416]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d36:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002d3a:	6093      	str	r3, [r2, #8]
 8002d3c:	4b66      	ldr	r3, [pc, #408]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d44:	4964      	ldr	r1, [pc, #400]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002d52:	2301      	movs	r3, #1
 8002d54:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d017      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d62:	4b5d      	ldr	r3, [pc, #372]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d70:	4959      	ldr	r1, [pc, #356]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d80:	d101      	bne.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002d82:	2301      	movs	r3, #1
 8002d84:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d101      	bne.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d017      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002d9e:	4b4e      	ldr	r3, [pc, #312]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002da0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002da4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dac:	494a      	ldr	r1, [pc, #296]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dbc:	d101      	bne.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0320 	and.w	r3, r3, #32
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	f000 808b 	beq.w	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002dec:	4b3a      	ldr	r3, [pc, #232]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df0:	4a39      	ldr	r2, [pc, #228]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002df2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002df6:	6413      	str	r3, [r2, #64]	; 0x40
 8002df8:	4b37      	ldr	r3, [pc, #220]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e00:	60bb      	str	r3, [r7, #8]
 8002e02:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002e04:	4b35      	ldr	r3, [pc, #212]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a34      	ldr	r2, [pc, #208]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e10:	f7fd fe48 	bl	8000aa4 <HAL_GetTick>
 8002e14:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002e16:	e008      	b.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e18:	f7fd fe44 	bl	8000aa4 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b64      	cmp	r3, #100	; 0x64
 8002e24:	d901      	bls.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e31e      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x760>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002e2a:	4b2c      	ldr	r3, [pc, #176]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d0f0      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e36:	4b28      	ldr	r3, [pc, #160]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e3e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d035      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d02e      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e54:	4b20      	ldr	r3, [pc, #128]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e5c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e5e:	4b1e      	ldr	r3, [pc, #120]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e62:	4a1d      	ldr	r2, [pc, #116]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e68:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e6a:	4b1b      	ldr	r3, [pc, #108]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e6e:	4a1a      	ldr	r2, [pc, #104]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e74:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002e76:	4a18      	ldr	r2, [pc, #96]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002e7c:	4b16      	ldr	r3, [pc, #88]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e80:	f003 0301 	and.w	r3, r3, #1
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d114      	bne.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e88:	f7fd fe0c 	bl	8000aa4 <HAL_GetTick>
 8002e8c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e8e:	e00a      	b.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e90:	f7fd fe08 	bl	8000aa4 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e2e0      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x760>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ea6:	4b0c      	ldr	r3, [pc, #48]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d0ee      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ebe:	d111      	bne.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002ec0:	4b05      	ldr	r3, [pc, #20]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ecc:	4b04      	ldr	r3, [pc, #16]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002ece:	400b      	ands	r3, r1
 8002ed0:	4901      	ldr	r1, [pc, #4]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	608b      	str	r3, [r1, #8]
 8002ed6:	e00b      	b.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002ed8:	40023800 	.word	0x40023800
 8002edc:	40007000 	.word	0x40007000
 8002ee0:	0ffffcff 	.word	0x0ffffcff
 8002ee4:	4bac      	ldr	r3, [pc, #688]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	4aab      	ldr	r2, [pc, #684]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002eee:	6093      	str	r3, [r2, #8]
 8002ef0:	4ba9      	ldr	r3, [pc, #676]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ef2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002efc:	49a6      	ldr	r1, [pc, #664]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0310 	and.w	r3, r3, #16
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d010      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002f0e:	4ba2      	ldr	r3, [pc, #648]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f14:	4aa0      	ldr	r2, [pc, #640]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f1a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002f1e:	4b9e      	ldr	r3, [pc, #632]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f20:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f28:	499b      	ldr	r1, [pc, #620]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d00a      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f3c:	4b96      	ldr	r3, [pc, #600]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f42:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f4a:	4993      	ldr	r1, [pc, #588]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d00a      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f5e:	4b8e      	ldr	r3, [pc, #568]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f64:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f6c:	498a      	ldr	r1, [pc, #552]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d00a      	beq.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f80:	4b85      	ldr	r3, [pc, #532]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f86:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f8e:	4982      	ldr	r1, [pc, #520]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00a      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002fa2:	4b7d      	ldr	r3, [pc, #500]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb0:	4979      	ldr	r1, [pc, #484]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d00a      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002fc4:	4b74      	ldr	r3, [pc, #464]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fca:	f023 0203 	bic.w	r2, r3, #3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd2:	4971      	ldr	r1, [pc, #452]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00a      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002fe6:	4b6c      	ldr	r3, [pc, #432]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fec:	f023 020c 	bic.w	r2, r3, #12
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ff4:	4968      	ldr	r1, [pc, #416]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00a      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003008:	4b63      	ldr	r3, [pc, #396]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800300a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800300e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003016:	4960      	ldr	r1, [pc, #384]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003018:	4313      	orrs	r3, r2
 800301a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00a      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800302a:	4b5b      	ldr	r3, [pc, #364]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800302c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003030:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003038:	4957      	ldr	r1, [pc, #348]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800303a:	4313      	orrs	r3, r2
 800303c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00a      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800304c:	4b52      	ldr	r3, [pc, #328]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800304e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003052:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800305a:	494f      	ldr	r1, [pc, #316]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800305c:	4313      	orrs	r3, r2
 800305e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00a      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800306e:	4b4a      	ldr	r3, [pc, #296]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003074:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800307c:	4946      	ldr	r1, [pc, #280]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800307e:	4313      	orrs	r3, r2
 8003080:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d00a      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003090:	4b41      	ldr	r3, [pc, #260]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003096:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800309e:	493e      	ldr	r1, [pc, #248]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00a      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80030b2:	4b39      	ldr	r3, [pc, #228]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030c0:	4935      	ldr	r1, [pc, #212]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00a      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80030d4:	4b30      	ldr	r3, [pc, #192]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030da:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030e2:	492d      	ldr	r1, [pc, #180]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d011      	beq.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80030f6:	4b28      	ldr	r3, [pc, #160]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030fc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003104:	4924      	ldr	r1, [pc, #144]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003106:	4313      	orrs	r3, r2
 8003108:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003110:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003114:	d101      	bne.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003116:	2301      	movs	r3, #1
 8003118:	61bb      	str	r3, [r7, #24]
    pllsaiused = 1;
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00a      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x434>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003126:	4b1c      	ldr	r3, [pc, #112]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800312c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003134:	4918      	ldr	r1, [pc, #96]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003136:	4313      	orrs	r3, r2
 8003138:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00b      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003148:	4b13      	ldr	r3, [pc, #76]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800314a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800314e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003158:	490f      	ldr	r1, [pc, #60]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800315a:	4313      	orrs	r3, r2
 800315c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d005      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x46a>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800316e:	f040 80d8 	bne.w	8003322 <HAL_RCCEx_PeriphCLKConfig+0x61a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003172:	4b09      	ldr	r3, [pc, #36]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a08      	ldr	r2, [pc, #32]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003178:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800317c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800317e:	f7fd fc91 	bl	8000aa4 <HAL_GetTick>
 8003182:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003184:	e00a      	b.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x494>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003186:	f7fd fc8d 	bl	8000aa4 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b64      	cmp	r3, #100	; 0x64
 8003192:	d903      	bls.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x494>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e167      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8003198:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800319c:	4bad      	ldr	r3, [pc, #692]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d1ee      	bne.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x47e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0301 	and.w	r3, r3, #1
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d021      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d11d      	bne.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80031bc:	4ba5      	ldr	r3, [pc, #660]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80031be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031c2:	0c1b      	lsrs	r3, r3, #16
 80031c4:	f003 0303 	and.w	r3, r3, #3
 80031c8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80031ca:	4ba2      	ldr	r3, [pc, #648]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80031cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031d0:	0e1b      	lsrs	r3, r3, #24
 80031d2:	f003 030f 	and.w	r3, r3, #15
 80031d6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	019a      	lsls	r2, r3, #6
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	041b      	lsls	r3, r3, #16
 80031e2:	431a      	orrs	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	061b      	lsls	r3, r3, #24
 80031e8:	431a      	orrs	r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	071b      	lsls	r3, r3, #28
 80031f0:	4998      	ldr	r1, [pc, #608]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d004      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003208:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800320c:	d00a      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x51c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003216:	2b00      	cmp	r3, #0
 8003218:	d02e      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x570>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003222:	d129      	bne.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x570>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003224:	4b8b      	ldr	r3, [pc, #556]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003226:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800322a:	0c1b      	lsrs	r3, r3, #16
 800322c:	f003 0303 	and.w	r3, r3, #3
 8003230:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003232:	4b88      	ldr	r3, [pc, #544]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003234:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003238:	0f1b      	lsrs	r3, r3, #28
 800323a:	f003 0307 	and.w	r3, r3, #7
 800323e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	019a      	lsls	r2, r3, #6
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	041b      	lsls	r3, r3, #16
 800324a:	431a      	orrs	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	061b      	lsls	r3, r3, #24
 8003252:	431a      	orrs	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	071b      	lsls	r3, r3, #28
 8003258:	497e      	ldr	r1, [pc, #504]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800325a:	4313      	orrs	r3, r2
 800325c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003260:	4b7c      	ldr	r3, [pc, #496]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003262:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003266:	f023 021f 	bic.w	r2, r3, #31
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326e:	3b01      	subs	r3, #1
 8003270:	4978      	ldr	r1, [pc, #480]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003272:	4313      	orrs	r3, r2
 8003274:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d01d      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003284:	4b73      	ldr	r3, [pc, #460]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003286:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800328a:	0e1b      	lsrs	r3, r3, #24
 800328c:	f003 030f 	and.w	r3, r3, #15
 8003290:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003292:	4b70      	ldr	r3, [pc, #448]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003294:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003298:	0f1b      	lsrs	r3, r3, #28
 800329a:	f003 0307 	and.w	r3, r3, #7
 800329e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	019a      	lsls	r2, r3, #6
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	041b      	lsls	r3, r3, #16
 80032ac:	431a      	orrs	r2, r3
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	061b      	lsls	r3, r3, #24
 80032b2:	431a      	orrs	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	071b      	lsls	r3, r3, #28
 80032b8:	4966      	ldr	r1, [pc, #408]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d011      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	019a      	lsls	r2, r3, #6
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	041b      	lsls	r3, r3, #16
 80032d8:	431a      	orrs	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	061b      	lsls	r3, r3, #24
 80032e0:	431a      	orrs	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	071b      	lsls	r3, r3, #28
 80032e8:	495a      	ldr	r1, [pc, #360]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80032f0:	4b58      	ldr	r3, [pc, #352]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a57      	ldr	r2, [pc, #348]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80032f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80032fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032fc:	f7fd fbd2 	bl	8000aa4 <HAL_GetTick>
 8003300:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003302:	e008      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x60e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003304:	f7fd fbce 	bl	8000aa4 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b64      	cmp	r3, #100	; 0x64
 8003310:	d901      	bls.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x60e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e0a8      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x760>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003316:	4b4f      	ldr	r3, [pc, #316]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d0f0      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	2b01      	cmp	r3, #1
 8003326:	f040 809e 	bne.w	8003466 <HAL_RCCEx_PeriphCLKConfig+0x75e>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800332a:	4b4a      	ldr	r3, [pc, #296]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a49      	ldr	r2, [pc, #292]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003330:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003334:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003336:	f7fd fbb5 	bl	8000aa4 <HAL_GetTick>
 800333a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800333c:	e008      	b.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800333e:	f7fd fbb1 	bl	8000aa4 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b64      	cmp	r3, #100	; 0x64
 800334a:	d901      	bls.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e08b      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x760>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003350:	4b40      	ldr	r3, [pc, #256]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003358:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800335c:	d0ef      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x636>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d003      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800336e:	2b00      	cmp	r3, #0
 8003370:	d009      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x67e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800337a:	2b00      	cmp	r3, #0
 800337c:	d02e      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x6d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003382:	2b00      	cmp	r3, #0
 8003384:	d12a      	bne.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003386:	4b33      	ldr	r3, [pc, #204]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338c:	0c1b      	lsrs	r3, r3, #16
 800338e:	f003 0303 	and.w	r3, r3, #3
 8003392:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003394:	4b2f      	ldr	r3, [pc, #188]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800339a:	0f1b      	lsrs	r3, r3, #28
 800339c:	f003 0307 	and.w	r3, r3, #7
 80033a0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	019a      	lsls	r2, r3, #6
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	041b      	lsls	r3, r3, #16
 80033ac:	431a      	orrs	r2, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	061b      	lsls	r3, r3, #24
 80033b4:	431a      	orrs	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	071b      	lsls	r3, r3, #28
 80033ba:	4926      	ldr	r1, [pc, #152]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80033c2:	4b24      	ldr	r3, [pc, #144]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80033c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033c8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d0:	3b01      	subs	r3, #1
 80033d2:	021b      	lsls	r3, r3, #8
 80033d4:	491f      	ldr	r1, [pc, #124]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d022      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x726>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033f0:	d11d      	bne.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x726>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80033f2:	4b18      	ldr	r3, [pc, #96]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80033f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033f8:	0e1b      	lsrs	r3, r3, #24
 80033fa:	f003 030f 	and.w	r3, r3, #15
 80033fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003400:	4b14      	ldr	r3, [pc, #80]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003406:	0f1b      	lsrs	r3, r3, #28
 8003408:	f003 0307 	and.w	r3, r3, #7
 800340c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	695b      	ldr	r3, [r3, #20]
 8003412:	019a      	lsls	r2, r3, #6
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a1b      	ldr	r3, [r3, #32]
 8003418:	041b      	lsls	r3, r3, #16
 800341a:	431a      	orrs	r2, r3
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	061b      	lsls	r3, r3, #24
 8003420:	431a      	orrs	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	071b      	lsls	r3, r3, #28
 8003426:	490b      	ldr	r1, [pc, #44]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003428:	4313      	orrs	r3, r2
 800342a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800342e:	4b09      	ldr	r3, [pc, #36]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a08      	ldr	r2, [pc, #32]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003438:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800343a:	f7fd fb33 	bl	8000aa4 <HAL_GetTick>
 800343e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003440:	e00a      	b.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x750>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003442:	f7fd fb2f 	bl	8000aa4 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b64      	cmp	r3, #100	; 0x64
 800344e:	d903      	bls.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x750>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e009      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8003454:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003458:	4b05      	ldr	r3, [pc, #20]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003460:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003464:	d1ed      	bne.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x73a>
      }
    }
  }
  return HAL_OK;
 8003466:	2300      	movs	r3, #0
}
 8003468:	4618      	mov	r0, r3
 800346a:	3720      	adds	r7, #32
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	40023800 	.word	0x40023800

08003474 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e01d      	b.n	80034c2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d106      	bne.n	80034a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 f815 	bl	80034ca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2202      	movs	r2, #2
 80034a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	3304      	adds	r3, #4
 80034b0:	4619      	mov	r1, r3
 80034b2:	4610      	mov	r0, r2
 80034b4:	f000 f986 	bl	80037c4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3708      	adds	r7, #8
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80034ca:	b480      	push	{r7}
 80034cc:	b083      	sub	sp, #12
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80034d2:	bf00      	nop
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
	...

080034e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68da      	ldr	r2, [r3, #12]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f042 0201 	orr.w	r2, r2, #1
 80034f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	689a      	ldr	r2, [r3, #8]
 80034fe:	4b0c      	ldr	r3, [pc, #48]	; (8003530 <HAL_TIM_Base_Start_IT+0x50>)
 8003500:	4013      	ands	r3, r2
 8003502:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2b06      	cmp	r3, #6
 8003508:	d00b      	beq.n	8003522 <HAL_TIM_Base_Start_IT+0x42>
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003510:	d007      	beq.n	8003522 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f042 0201 	orr.w	r2, r2, #1
 8003520:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	3714      	adds	r7, #20
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr
 8003530:	00010007 	.word	0x00010007

08003534 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	2b02      	cmp	r3, #2
 8003548:	d122      	bne.n	8003590 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	2b02      	cmp	r3, #2
 8003556:	d11b      	bne.n	8003590 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f06f 0202 	mvn.w	r2, #2
 8003560:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2201      	movs	r2, #1
 8003566:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	f003 0303 	and.w	r3, r3, #3
 8003572:	2b00      	cmp	r3, #0
 8003574:	d003      	beq.n	800357e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 f905 	bl	8003786 <HAL_TIM_IC_CaptureCallback>
 800357c:	e005      	b.n	800358a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f000 f8f7 	bl	8003772 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f000 f908 	bl	800379a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	f003 0304 	and.w	r3, r3, #4
 800359a:	2b04      	cmp	r3, #4
 800359c:	d122      	bne.n	80035e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	f003 0304 	and.w	r3, r3, #4
 80035a8:	2b04      	cmp	r3, #4
 80035aa:	d11b      	bne.n	80035e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f06f 0204 	mvn.w	r2, #4
 80035b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2202      	movs	r2, #2
 80035ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d003      	beq.n	80035d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 f8db 	bl	8003786 <HAL_TIM_IC_CaptureCallback>
 80035d0:	e005      	b.n	80035de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 f8cd 	bl	8003772 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f000 f8de 	bl	800379a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	f003 0308 	and.w	r3, r3, #8
 80035ee:	2b08      	cmp	r3, #8
 80035f0:	d122      	bne.n	8003638 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	f003 0308 	and.w	r3, r3, #8
 80035fc:	2b08      	cmp	r3, #8
 80035fe:	d11b      	bne.n	8003638 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f06f 0208 	mvn.w	r2, #8
 8003608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2204      	movs	r2, #4
 800360e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	69db      	ldr	r3, [r3, #28]
 8003616:	f003 0303 	and.w	r3, r3, #3
 800361a:	2b00      	cmp	r3, #0
 800361c:	d003      	beq.n	8003626 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 f8b1 	bl	8003786 <HAL_TIM_IC_CaptureCallback>
 8003624:	e005      	b.n	8003632 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 f8a3 	bl	8003772 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f000 f8b4 	bl	800379a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	f003 0310 	and.w	r3, r3, #16
 8003642:	2b10      	cmp	r3, #16
 8003644:	d122      	bne.n	800368c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	f003 0310 	and.w	r3, r3, #16
 8003650:	2b10      	cmp	r3, #16
 8003652:	d11b      	bne.n	800368c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f06f 0210 	mvn.w	r2, #16
 800365c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2208      	movs	r2, #8
 8003662:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	69db      	ldr	r3, [r3, #28]
 800366a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800366e:	2b00      	cmp	r3, #0
 8003670:	d003      	beq.n	800367a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 f887 	bl	8003786 <HAL_TIM_IC_CaptureCallback>
 8003678:	e005      	b.n	8003686 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 f879 	bl	8003772 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 f88a 	bl	800379a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b01      	cmp	r3, #1
 8003698:	d10e      	bne.n	80036b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	f003 0301 	and.w	r3, r3, #1
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d107      	bne.n	80036b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f06f 0201 	mvn.w	r2, #1
 80036b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f7fd f868 	bl	8000788 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036c2:	2b80      	cmp	r3, #128	; 0x80
 80036c4:	d10e      	bne.n	80036e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036d0:	2b80      	cmp	r3, #128	; 0x80
 80036d2:	d107      	bne.n	80036e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80036dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 f91a 	bl	8003918 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036f2:	d10e      	bne.n	8003712 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036fe:	2b80      	cmp	r3, #128	; 0x80
 8003700:	d107      	bne.n	8003712 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800370a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f000 f90d 	bl	800392c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800371c:	2b40      	cmp	r3, #64	; 0x40
 800371e:	d10e      	bne.n	800373e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800372a:	2b40      	cmp	r3, #64	; 0x40
 800372c:	d107      	bne.n	800373e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003736:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f000 f838 	bl	80037ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	f003 0320 	and.w	r3, r3, #32
 8003748:	2b20      	cmp	r3, #32
 800374a:	d10e      	bne.n	800376a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	f003 0320 	and.w	r3, r3, #32
 8003756:	2b20      	cmp	r3, #32
 8003758:	d107      	bne.n	800376a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f06f 0220 	mvn.w	r2, #32
 8003762:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f000 f8cd 	bl	8003904 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800376a:	bf00      	nop
 800376c:	3708      	adds	r7, #8
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003772:	b480      	push	{r7}
 8003774:	b083      	sub	sp, #12
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800377a:	bf00      	nop
 800377c:	370c      	adds	r7, #12
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr

08003786 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003786:	b480      	push	{r7}
 8003788:	b083      	sub	sp, #12
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800378e:	bf00      	nop
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr

0800379a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800379a:	b480      	push	{r7}
 800379c:	b083      	sub	sp, #12
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037a2:	bf00      	nop
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr

080037ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037ae:	b480      	push	{r7}
 80037b0:	b083      	sub	sp, #12
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037b6:	bf00      	nop
 80037b8:	370c      	adds	r7, #12
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
	...

080037c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b085      	sub	sp, #20
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4a40      	ldr	r2, [pc, #256]	; (80038d8 <TIM_Base_SetConfig+0x114>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d013      	beq.n	8003804 <TIM_Base_SetConfig+0x40>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037e2:	d00f      	beq.n	8003804 <TIM_Base_SetConfig+0x40>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a3d      	ldr	r2, [pc, #244]	; (80038dc <TIM_Base_SetConfig+0x118>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d00b      	beq.n	8003804 <TIM_Base_SetConfig+0x40>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a3c      	ldr	r2, [pc, #240]	; (80038e0 <TIM_Base_SetConfig+0x11c>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d007      	beq.n	8003804 <TIM_Base_SetConfig+0x40>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4a3b      	ldr	r2, [pc, #236]	; (80038e4 <TIM_Base_SetConfig+0x120>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d003      	beq.n	8003804 <TIM_Base_SetConfig+0x40>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4a3a      	ldr	r2, [pc, #232]	; (80038e8 <TIM_Base_SetConfig+0x124>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d108      	bne.n	8003816 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800380a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	4313      	orrs	r3, r2
 8003814:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a2f      	ldr	r2, [pc, #188]	; (80038d8 <TIM_Base_SetConfig+0x114>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d02b      	beq.n	8003876 <TIM_Base_SetConfig+0xb2>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003824:	d027      	beq.n	8003876 <TIM_Base_SetConfig+0xb2>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a2c      	ldr	r2, [pc, #176]	; (80038dc <TIM_Base_SetConfig+0x118>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d023      	beq.n	8003876 <TIM_Base_SetConfig+0xb2>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a2b      	ldr	r2, [pc, #172]	; (80038e0 <TIM_Base_SetConfig+0x11c>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d01f      	beq.n	8003876 <TIM_Base_SetConfig+0xb2>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a2a      	ldr	r2, [pc, #168]	; (80038e4 <TIM_Base_SetConfig+0x120>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d01b      	beq.n	8003876 <TIM_Base_SetConfig+0xb2>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a29      	ldr	r2, [pc, #164]	; (80038e8 <TIM_Base_SetConfig+0x124>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d017      	beq.n	8003876 <TIM_Base_SetConfig+0xb2>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a28      	ldr	r2, [pc, #160]	; (80038ec <TIM_Base_SetConfig+0x128>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d013      	beq.n	8003876 <TIM_Base_SetConfig+0xb2>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a27      	ldr	r2, [pc, #156]	; (80038f0 <TIM_Base_SetConfig+0x12c>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d00f      	beq.n	8003876 <TIM_Base_SetConfig+0xb2>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a26      	ldr	r2, [pc, #152]	; (80038f4 <TIM_Base_SetConfig+0x130>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d00b      	beq.n	8003876 <TIM_Base_SetConfig+0xb2>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a25      	ldr	r2, [pc, #148]	; (80038f8 <TIM_Base_SetConfig+0x134>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d007      	beq.n	8003876 <TIM_Base_SetConfig+0xb2>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a24      	ldr	r2, [pc, #144]	; (80038fc <TIM_Base_SetConfig+0x138>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d003      	beq.n	8003876 <TIM_Base_SetConfig+0xb2>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a23      	ldr	r2, [pc, #140]	; (8003900 <TIM_Base_SetConfig+0x13c>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d108      	bne.n	8003888 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800387c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	68fa      	ldr	r2, [r7, #12]
 8003884:	4313      	orrs	r3, r2
 8003886:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	4313      	orrs	r3, r2
 8003894:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	689a      	ldr	r2, [r3, #8]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a0a      	ldr	r2, [pc, #40]	; (80038d8 <TIM_Base_SetConfig+0x114>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d003      	beq.n	80038bc <TIM_Base_SetConfig+0xf8>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a0c      	ldr	r2, [pc, #48]	; (80038e8 <TIM_Base_SetConfig+0x124>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d103      	bne.n	80038c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	691a      	ldr	r2, [r3, #16]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	615a      	str	r2, [r3, #20]
}
 80038ca:	bf00      	nop
 80038cc:	3714      	adds	r7, #20
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	40010000 	.word	0x40010000
 80038dc:	40000400 	.word	0x40000400
 80038e0:	40000800 	.word	0x40000800
 80038e4:	40000c00 	.word	0x40000c00
 80038e8:	40010400 	.word	0x40010400
 80038ec:	40014000 	.word	0x40014000
 80038f0:	40014400 	.word	0x40014400
 80038f4:	40014800 	.word	0x40014800
 80038f8:	40001800 	.word	0x40001800
 80038fc:	40001c00 	.word	0x40001c00
 8003900:	40002000 	.word	0x40002000

08003904 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003940:	b084      	sub	sp, #16
 8003942:	b580      	push	{r7, lr}
 8003944:	b084      	sub	sp, #16
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
 800394a:	f107 001c 	add.w	r0, r7, #28
 800394e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003954:	2b01      	cmp	r3, #1
 8003956:	d120      	bne.n	800399a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800395c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	68da      	ldr	r2, [r3, #12]
 8003968:	4b20      	ldr	r3, [pc, #128]	; (80039ec <USB_CoreInit+0xac>)
 800396a:	4013      	ands	r3, r2
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800397c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800397e:	2b01      	cmp	r3, #1
 8003980:	d105      	bne.n	800398e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f001 fac4 	bl	8004f1c <USB_CoreReset>
 8003994:	4603      	mov	r3, r0
 8003996:	73fb      	strb	r3, [r7, #15]
 8003998:	e010      	b.n	80039bc <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f001 fab8 	bl	8004f1c <USB_CoreReset>
 80039ac:	4603      	mov	r3, r0
 80039ae:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80039bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d10b      	bne.n	80039da <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f043 0206 	orr.w	r2, r3, #6
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f043 0220 	orr.w	r2, r3, #32
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80039da:	7bfb      	ldrb	r3, [r7, #15]
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3710      	adds	r7, #16
 80039e0:	46bd      	mov	sp, r7
 80039e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80039e6:	b004      	add	sp, #16
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	ffbdffbf 	.word	0xffbdffbf

080039f0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b087      	sub	sp, #28
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	4613      	mov	r3, r2
 80039fc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80039fe:	79fb      	ldrb	r3, [r7, #7]
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d165      	bne.n	8003ad0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	4a41      	ldr	r2, [pc, #260]	; (8003b0c <USB_SetTurnaroundTime+0x11c>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d906      	bls.n	8003a1a <USB_SetTurnaroundTime+0x2a>
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	4a40      	ldr	r2, [pc, #256]	; (8003b10 <USB_SetTurnaroundTime+0x120>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d802      	bhi.n	8003a1a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003a14:	230f      	movs	r3, #15
 8003a16:	617b      	str	r3, [r7, #20]
 8003a18:	e062      	b.n	8003ae0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	4a3c      	ldr	r2, [pc, #240]	; (8003b10 <USB_SetTurnaroundTime+0x120>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d906      	bls.n	8003a30 <USB_SetTurnaroundTime+0x40>
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	4a3b      	ldr	r2, [pc, #236]	; (8003b14 <USB_SetTurnaroundTime+0x124>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d802      	bhi.n	8003a30 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003a2a:	230e      	movs	r3, #14
 8003a2c:	617b      	str	r3, [r7, #20]
 8003a2e:	e057      	b.n	8003ae0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	4a38      	ldr	r2, [pc, #224]	; (8003b14 <USB_SetTurnaroundTime+0x124>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d906      	bls.n	8003a46 <USB_SetTurnaroundTime+0x56>
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	4a37      	ldr	r2, [pc, #220]	; (8003b18 <USB_SetTurnaroundTime+0x128>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d802      	bhi.n	8003a46 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003a40:	230d      	movs	r3, #13
 8003a42:	617b      	str	r3, [r7, #20]
 8003a44:	e04c      	b.n	8003ae0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	4a33      	ldr	r2, [pc, #204]	; (8003b18 <USB_SetTurnaroundTime+0x128>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d906      	bls.n	8003a5c <USB_SetTurnaroundTime+0x6c>
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	4a32      	ldr	r2, [pc, #200]	; (8003b1c <USB_SetTurnaroundTime+0x12c>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d802      	bhi.n	8003a5c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003a56:	230c      	movs	r3, #12
 8003a58:	617b      	str	r3, [r7, #20]
 8003a5a:	e041      	b.n	8003ae0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	4a2f      	ldr	r2, [pc, #188]	; (8003b1c <USB_SetTurnaroundTime+0x12c>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d906      	bls.n	8003a72 <USB_SetTurnaroundTime+0x82>
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	4a2e      	ldr	r2, [pc, #184]	; (8003b20 <USB_SetTurnaroundTime+0x130>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d802      	bhi.n	8003a72 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003a6c:	230b      	movs	r3, #11
 8003a6e:	617b      	str	r3, [r7, #20]
 8003a70:	e036      	b.n	8003ae0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	4a2a      	ldr	r2, [pc, #168]	; (8003b20 <USB_SetTurnaroundTime+0x130>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d906      	bls.n	8003a88 <USB_SetTurnaroundTime+0x98>
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	4a29      	ldr	r2, [pc, #164]	; (8003b24 <USB_SetTurnaroundTime+0x134>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d802      	bhi.n	8003a88 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003a82:	230a      	movs	r3, #10
 8003a84:	617b      	str	r3, [r7, #20]
 8003a86:	e02b      	b.n	8003ae0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	4a26      	ldr	r2, [pc, #152]	; (8003b24 <USB_SetTurnaroundTime+0x134>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d906      	bls.n	8003a9e <USB_SetTurnaroundTime+0xae>
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	4a25      	ldr	r2, [pc, #148]	; (8003b28 <USB_SetTurnaroundTime+0x138>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d802      	bhi.n	8003a9e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003a98:	2309      	movs	r3, #9
 8003a9a:	617b      	str	r3, [r7, #20]
 8003a9c:	e020      	b.n	8003ae0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	4a21      	ldr	r2, [pc, #132]	; (8003b28 <USB_SetTurnaroundTime+0x138>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d906      	bls.n	8003ab4 <USB_SetTurnaroundTime+0xc4>
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	4a20      	ldr	r2, [pc, #128]	; (8003b2c <USB_SetTurnaroundTime+0x13c>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d802      	bhi.n	8003ab4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003aae:	2308      	movs	r3, #8
 8003ab0:	617b      	str	r3, [r7, #20]
 8003ab2:	e015      	b.n	8003ae0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	4a1d      	ldr	r2, [pc, #116]	; (8003b2c <USB_SetTurnaroundTime+0x13c>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d906      	bls.n	8003aca <USB_SetTurnaroundTime+0xda>
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	4a1c      	ldr	r2, [pc, #112]	; (8003b30 <USB_SetTurnaroundTime+0x140>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d802      	bhi.n	8003aca <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003ac4:	2307      	movs	r3, #7
 8003ac6:	617b      	str	r3, [r7, #20]
 8003ac8:	e00a      	b.n	8003ae0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003aca:	2306      	movs	r3, #6
 8003acc:	617b      	str	r3, [r7, #20]
 8003ace:	e007      	b.n	8003ae0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003ad0:	79fb      	ldrb	r3, [r7, #7]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d102      	bne.n	8003adc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003ad6:	2309      	movs	r3, #9
 8003ad8:	617b      	str	r3, [r7, #20]
 8003ada:	e001      	b.n	8003ae0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003adc:	2309      	movs	r3, #9
 8003ade:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	68da      	ldr	r2, [r3, #12]
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	029b      	lsls	r3, r3, #10
 8003af4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003af8:	431a      	orrs	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003afe:	2300      	movs	r3, #0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	371c      	adds	r7, #28
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr
 8003b0c:	00d8acbf 	.word	0x00d8acbf
 8003b10:	00e4e1bf 	.word	0x00e4e1bf
 8003b14:	00f423ff 	.word	0x00f423ff
 8003b18:	0106737f 	.word	0x0106737f
 8003b1c:	011a499f 	.word	0x011a499f
 8003b20:	01312cff 	.word	0x01312cff
 8003b24:	014ca43f 	.word	0x014ca43f
 8003b28:	016e35ff 	.word	0x016e35ff
 8003b2c:	01a6ab1f 	.word	0x01a6ab1f
 8003b30:	01e847ff 	.word	0x01e847ff

08003b34 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f043 0201 	orr.w	r2, r3, #1
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	370c      	adds	r7, #12
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr

08003b56 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003b56:	b480      	push	{r7}
 8003b58:	b083      	sub	sp, #12
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f023 0201 	bic.w	r2, r3, #1
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	460b      	mov	r3, r1
 8003b82:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003b90:	78fb      	ldrb	r3, [r7, #3]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d106      	bne.n	8003ba4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	60da      	str	r2, [r3, #12]
 8003ba2:	e00b      	b.n	8003bbc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003ba4:	78fb      	ldrb	r3, [r7, #3]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d106      	bne.n	8003bb8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	60da      	str	r2, [r3, #12]
 8003bb6:	e001      	b.n	8003bbc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e003      	b.n	8003bc4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003bbc:	2032      	movs	r0, #50	; 0x32
 8003bbe:	f7fc ff7d 	bl	8000abc <HAL_Delay>

  return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3708      	adds	r7, #8
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003bcc:	b084      	sub	sp, #16
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b086      	sub	sp, #24
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
 8003bd6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003bda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003bde:	2300      	movs	r3, #0
 8003be0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003be6:	2300      	movs	r3, #0
 8003be8:	613b      	str	r3, [r7, #16]
 8003bea:	e009      	b.n	8003c00 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	3340      	adds	r3, #64	; 0x40
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	4413      	add	r3, r2
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	613b      	str	r3, [r7, #16]
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	2b0e      	cmp	r3, #14
 8003c04:	d9f2      	bls.n	8003bec <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003c06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d11c      	bne.n	8003c46 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	68fa      	ldr	r2, [r7, #12]
 8003c16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c1a:	f043 0302 	orr.w	r3, r3, #2
 8003c1e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c24:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	601a      	str	r2, [r3, #0]
 8003c44:	e005      	b.n	8003c52 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003c58:	461a      	mov	r2, r3
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c64:	4619      	mov	r1, r3
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	680b      	ldr	r3, [r1, #0]
 8003c70:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d10c      	bne.n	8003c92 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d104      	bne.n	8003c88 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003c7e:	2100      	movs	r1, #0
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f000 f959 	bl	8003f38 <USB_SetDevSpeed>
 8003c86:	e018      	b.n	8003cba <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003c88:	2101      	movs	r1, #1
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 f954 	bl	8003f38 <USB_SetDevSpeed>
 8003c90:	e013      	b.n	8003cba <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8003c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c94:	2b03      	cmp	r3, #3
 8003c96:	d10c      	bne.n	8003cb2 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d104      	bne.n	8003ca8 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003c9e:	2100      	movs	r1, #0
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f000 f949 	bl	8003f38 <USB_SetDevSpeed>
 8003ca6:	e008      	b.n	8003cba <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003ca8:	2101      	movs	r1, #1
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 f944 	bl	8003f38 <USB_SetDevSpeed>
 8003cb0:	e003      	b.n	8003cba <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003cb2:	2103      	movs	r1, #3
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f000 f93f 	bl	8003f38 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003cba:	2110      	movs	r1, #16
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f000 f8f3 	bl	8003ea8 <USB_FlushTxFifo>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d001      	beq.n	8003ccc <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f000 f911 	bl	8003ef4 <USB_FlushRxFifo>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d001      	beq.n	8003cdc <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cee:	461a      	mov	r2, r3
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d00:	2300      	movs	r3, #0
 8003d02:	613b      	str	r3, [r7, #16]
 8003d04:	e043      	b.n	8003d8e <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	015a      	lsls	r2, r3, #5
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d1c:	d118      	bne.n	8003d50 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d10a      	bne.n	8003d3a <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	015a      	lsls	r2, r3, #5
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d30:	461a      	mov	r2, r3
 8003d32:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003d36:	6013      	str	r3, [r2, #0]
 8003d38:	e013      	b.n	8003d62 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	015a      	lsls	r2, r3, #5
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	4413      	add	r3, r2
 8003d42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d46:	461a      	mov	r2, r3
 8003d48:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003d4c:	6013      	str	r3, [r2, #0]
 8003d4e:	e008      	b.n	8003d62 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	015a      	lsls	r2, r3, #5
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	4413      	add	r3, r2
 8003d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	2300      	movs	r3, #0
 8003d60:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	015a      	lsls	r2, r3, #5
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	4413      	add	r3, r2
 8003d6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d6e:	461a      	mov	r2, r3
 8003d70:	2300      	movs	r3, #0
 8003d72:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	015a      	lsls	r2, r3, #5
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d80:	461a      	mov	r2, r3
 8003d82:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003d86:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	613b      	str	r3, [r7, #16]
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d90:	693a      	ldr	r2, [r7, #16]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d3b7      	bcc.n	8003d06 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d96:	2300      	movs	r3, #0
 8003d98:	613b      	str	r3, [r7, #16]
 8003d9a:	e043      	b.n	8003e24 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	015a      	lsls	r2, r3, #5
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	4413      	add	r3, r2
 8003da4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003dae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003db2:	d118      	bne.n	8003de6 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d10a      	bne.n	8003dd0 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	015a      	lsls	r2, r3, #5
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003dcc:	6013      	str	r3, [r2, #0]
 8003dce:	e013      	b.n	8003df8 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	015a      	lsls	r2, r3, #5
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ddc:	461a      	mov	r2, r3
 8003dde:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003de2:	6013      	str	r3, [r2, #0]
 8003de4:	e008      	b.n	8003df8 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	015a      	lsls	r2, r3, #5
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	4413      	add	r3, r2
 8003dee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003df2:	461a      	mov	r2, r3
 8003df4:	2300      	movs	r3, #0
 8003df6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	015a      	lsls	r2, r3, #5
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	4413      	add	r3, r2
 8003e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e04:	461a      	mov	r2, r3
 8003e06:	2300      	movs	r3, #0
 8003e08:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	015a      	lsls	r2, r3, #5
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	4413      	add	r3, r2
 8003e12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e16:	461a      	mov	r2, r3
 8003e18:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e1c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	3301      	adds	r3, #1
 8003e22:	613b      	str	r3, [r7, #16]
 8003e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e26:	693a      	ldr	r2, [r7, #16]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d3b7      	bcc.n	8003d9c <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	68fa      	ldr	r2, [r7, #12]
 8003e36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e3e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003e4c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d105      	bne.n	8003e60 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	699b      	ldr	r3, [r3, #24]
 8003e58:	f043 0210 	orr.w	r2, r3, #16
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	699a      	ldr	r2, [r3, #24]
 8003e64:	4b0e      	ldr	r3, [pc, #56]	; (8003ea0 <USB_DevInit+0x2d4>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003e6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d005      	beq.n	8003e7e <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	f043 0208 	orr.w	r2, r3, #8
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003e7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d105      	bne.n	8003e90 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	699a      	ldr	r2, [r3, #24]
 8003e88:	4b06      	ldr	r3, [pc, #24]	; (8003ea4 <USB_DevInit+0x2d8>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003e90:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3718      	adds	r7, #24
 8003e96:	46bd      	mov	sp, r7
 8003e98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e9c:	b004      	add	sp, #16
 8003e9e:	4770      	bx	lr
 8003ea0:	803c3800 	.word	0x803c3800
 8003ea4:	40000004 	.word	0x40000004

08003ea8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b085      	sub	sp, #20
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	019b      	lsls	r3, r3, #6
 8003eba:	f043 0220 	orr.w	r2, r3, #32
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	60fb      	str	r3, [r7, #12]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	4a09      	ldr	r2, [pc, #36]	; (8003ef0 <USB_FlushTxFifo+0x48>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d901      	bls.n	8003ed4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e006      	b.n	8003ee2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	f003 0320 	and.w	r3, r3, #32
 8003edc:	2b20      	cmp	r3, #32
 8003ede:	d0f0      	beq.n	8003ec2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3714      	adds	r7, #20
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	00030d40 	.word	0x00030d40

08003ef4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003efc:	2300      	movs	r3, #0
 8003efe:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2210      	movs	r2, #16
 8003f04:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	3301      	adds	r3, #1
 8003f0a:	60fb      	str	r3, [r7, #12]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	4a09      	ldr	r2, [pc, #36]	; (8003f34 <USB_FlushRxFifo+0x40>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d901      	bls.n	8003f18 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e006      	b.n	8003f26 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	691b      	ldr	r3, [r3, #16]
 8003f1c:	f003 0310 	and.w	r3, r3, #16
 8003f20:	2b10      	cmp	r3, #16
 8003f22:	d0f0      	beq.n	8003f06 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3714      	adds	r7, #20
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	00030d40 	.word	0x00030d40

08003f38 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b085      	sub	sp, #20
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	460b      	mov	r3, r1
 8003f42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	78fb      	ldrb	r3, [r7, #3]
 8003f52:	68f9      	ldr	r1, [r7, #12]
 8003f54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3714      	adds	r7, #20
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr

08003f6a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003f6a:	b480      	push	{r7}
 8003f6c:	b087      	sub	sp, #28
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f003 0306 	and.w	r3, r3, #6
 8003f82:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d102      	bne.n	8003f90 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	75fb      	strb	r3, [r7, #23]
 8003f8e:	e00a      	b.n	8003fa6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d002      	beq.n	8003f9c <USB_GetDevSpeed+0x32>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2b06      	cmp	r3, #6
 8003f9a:	d102      	bne.n	8003fa2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003f9c:	2302      	movs	r3, #2
 8003f9e:	75fb      	strb	r3, [r7, #23]
 8003fa0:	e001      	b.n	8003fa6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003fa2:	230f      	movs	r3, #15
 8003fa4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003fa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	371c      	adds	r7, #28
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b085      	sub	sp, #20
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	785b      	ldrb	r3, [r3, #1]
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d139      	bne.n	8004044 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fd6:	69da      	ldr	r2, [r3, #28]
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	f003 030f 	and.w	r3, r3, #15
 8003fe0:	2101      	movs	r1, #1
 8003fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	68f9      	ldr	r1, [r7, #12]
 8003fea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	015a      	lsls	r2, r3, #5
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d153      	bne.n	80040b0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	015a      	lsls	r2, r3, #5
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	4413      	add	r3, r2
 8004010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	78db      	ldrb	r3, [r3, #3]
 8004022:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004024:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	059b      	lsls	r3, r3, #22
 800402a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800402c:	431a      	orrs	r2, r3
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	0159      	lsls	r1, r3, #5
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	440b      	add	r3, r1
 8004036:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800403a:	4619      	mov	r1, r3
 800403c:	4b20      	ldr	r3, [pc, #128]	; (80040c0 <USB_ActivateEndpoint+0x10c>)
 800403e:	4313      	orrs	r3, r2
 8004040:	600b      	str	r3, [r1, #0]
 8004042:	e035      	b.n	80040b0 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800404a:	69da      	ldr	r2, [r3, #28]
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	f003 030f 	and.w	r3, r3, #15
 8004054:	2101      	movs	r1, #1
 8004056:	fa01 f303 	lsl.w	r3, r1, r3
 800405a:	041b      	lsls	r3, r3, #16
 800405c:	68f9      	ldr	r1, [r7, #12]
 800405e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004062:	4313      	orrs	r3, r2
 8004064:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	015a      	lsls	r2, r3, #5
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	4413      	add	r3, r2
 800406e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d119      	bne.n	80040b0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	015a      	lsls	r2, r3, #5
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	4413      	add	r3, r2
 8004084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	78db      	ldrb	r3, [r3, #3]
 8004096:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004098:	430b      	orrs	r3, r1
 800409a:	431a      	orrs	r2, r3
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	0159      	lsls	r1, r3, #5
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	440b      	add	r3, r1
 80040a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040a8:	4619      	mov	r1, r3
 80040aa:	4b05      	ldr	r3, [pc, #20]	; (80040c0 <USB_ActivateEndpoint+0x10c>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3714      	adds	r7, #20
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	10008000 	.word	0x10008000

080040c4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b085      	sub	sp, #20
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	785b      	ldrb	r3, [r3, #1]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d161      	bne.n	80041a4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	015a      	lsls	r2, r3, #5
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	4413      	add	r3, r2
 80040e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040f6:	d11f      	bne.n	8004138 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	015a      	lsls	r2, r3, #5
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	4413      	add	r3, r2
 8004100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68ba      	ldr	r2, [r7, #8]
 8004108:	0151      	lsls	r1, r2, #5
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	440a      	add	r2, r1
 800410e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004112:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004116:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	015a      	lsls	r2, r3, #5
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	4413      	add	r3, r2
 8004120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68ba      	ldr	r2, [r7, #8]
 8004128:	0151      	lsls	r1, r2, #5
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	440a      	add	r2, r1
 800412e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004132:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004136:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800413e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	f003 030f 	and.w	r3, r3, #15
 8004148:	2101      	movs	r1, #1
 800414a:	fa01 f303 	lsl.w	r3, r1, r3
 800414e:	b29b      	uxth	r3, r3
 8004150:	43db      	mvns	r3, r3
 8004152:	68f9      	ldr	r1, [r7, #12]
 8004154:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004158:	4013      	ands	r3, r2
 800415a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004162:	69da      	ldr	r2, [r3, #28]
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	f003 030f 	and.w	r3, r3, #15
 800416c:	2101      	movs	r1, #1
 800416e:	fa01 f303 	lsl.w	r3, r1, r3
 8004172:	b29b      	uxth	r3, r3
 8004174:	43db      	mvns	r3, r3
 8004176:	68f9      	ldr	r1, [r7, #12]
 8004178:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800417c:	4013      	ands	r3, r2
 800417e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	015a      	lsls	r2, r3, #5
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	4413      	add	r3, r2
 8004188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	0159      	lsls	r1, r3, #5
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	440b      	add	r3, r1
 8004196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800419a:	4619      	mov	r1, r3
 800419c:	4b35      	ldr	r3, [pc, #212]	; (8004274 <USB_DeactivateEndpoint+0x1b0>)
 800419e:	4013      	ands	r3, r2
 80041a0:	600b      	str	r3, [r1, #0]
 80041a2:	e060      	b.n	8004266 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	015a      	lsls	r2, r3, #5
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	4413      	add	r3, r2
 80041ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041ba:	d11f      	bne.n	80041fc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	015a      	lsls	r2, r3, #5
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	4413      	add	r3, r2
 80041c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68ba      	ldr	r2, [r7, #8]
 80041cc:	0151      	lsls	r1, r2, #5
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	440a      	add	r2, r1
 80041d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80041da:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	015a      	lsls	r2, r3, #5
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	4413      	add	r3, r2
 80041e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68ba      	ldr	r2, [r7, #8]
 80041ec:	0151      	lsls	r1, r2, #5
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	440a      	add	r2, r1
 80041f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80041fa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004202:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	f003 030f 	and.w	r3, r3, #15
 800420c:	2101      	movs	r1, #1
 800420e:	fa01 f303 	lsl.w	r3, r1, r3
 8004212:	041b      	lsls	r3, r3, #16
 8004214:	43db      	mvns	r3, r3
 8004216:	68f9      	ldr	r1, [r7, #12]
 8004218:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800421c:	4013      	ands	r3, r2
 800421e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004226:	69da      	ldr	r2, [r3, #28]
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	f003 030f 	and.w	r3, r3, #15
 8004230:	2101      	movs	r1, #1
 8004232:	fa01 f303 	lsl.w	r3, r1, r3
 8004236:	041b      	lsls	r3, r3, #16
 8004238:	43db      	mvns	r3, r3
 800423a:	68f9      	ldr	r1, [r7, #12]
 800423c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004240:	4013      	ands	r3, r2
 8004242:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	015a      	lsls	r2, r3, #5
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	4413      	add	r3, r2
 800424c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	0159      	lsls	r1, r3, #5
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	440b      	add	r3, r1
 800425a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800425e:	4619      	mov	r1, r3
 8004260:	4b05      	ldr	r3, [pc, #20]	; (8004278 <USB_DeactivateEndpoint+0x1b4>)
 8004262:	4013      	ands	r3, r2
 8004264:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004266:	2300      	movs	r3, #0
}
 8004268:	4618      	mov	r0, r3
 800426a:	3714      	adds	r7, #20
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr
 8004274:	ec337800 	.word	0xec337800
 8004278:	eff37800 	.word	0xeff37800

0800427c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b08a      	sub	sp, #40	; 0x28
 8004280:	af02      	add	r7, sp, #8
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	4613      	mov	r3, r2
 8004288:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	785b      	ldrb	r3, [r3, #1]
 8004298:	2b01      	cmp	r3, #1
 800429a:	f040 8163 	bne.w	8004564 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	695b      	ldr	r3, [r3, #20]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d132      	bne.n	800430c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	015a      	lsls	r2, r3, #5
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	4413      	add	r3, r2
 80042ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042b2:	691a      	ldr	r2, [r3, #16]
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	0159      	lsls	r1, r3, #5
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	440b      	add	r3, r1
 80042bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042c0:	4619      	mov	r1, r3
 80042c2:	4ba5      	ldr	r3, [pc, #660]	; (8004558 <USB_EPStartXfer+0x2dc>)
 80042c4:	4013      	ands	r3, r2
 80042c6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	015a      	lsls	r2, r3, #5
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	4413      	add	r3, r2
 80042d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	69ba      	ldr	r2, [r7, #24]
 80042d8:	0151      	lsls	r1, r2, #5
 80042da:	69fa      	ldr	r2, [r7, #28]
 80042dc:	440a      	add	r2, r1
 80042de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80042e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	015a      	lsls	r2, r3, #5
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	4413      	add	r3, r2
 80042f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042f4:	691a      	ldr	r2, [r3, #16]
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	0159      	lsls	r1, r3, #5
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	440b      	add	r3, r1
 80042fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004302:	4619      	mov	r1, r3
 8004304:	4b95      	ldr	r3, [pc, #596]	; (800455c <USB_EPStartXfer+0x2e0>)
 8004306:	4013      	ands	r3, r2
 8004308:	610b      	str	r3, [r1, #16]
 800430a:	e074      	b.n	80043f6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	015a      	lsls	r2, r3, #5
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	4413      	add	r3, r2
 8004314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004318:	691a      	ldr	r2, [r3, #16]
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	0159      	lsls	r1, r3, #5
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	440b      	add	r3, r1
 8004322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004326:	4619      	mov	r1, r3
 8004328:	4b8c      	ldr	r3, [pc, #560]	; (800455c <USB_EPStartXfer+0x2e0>)
 800432a:	4013      	ands	r3, r2
 800432c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	015a      	lsls	r2, r3, #5
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	4413      	add	r3, r2
 8004336:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800433a:	691a      	ldr	r2, [r3, #16]
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	0159      	lsls	r1, r3, #5
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	440b      	add	r3, r1
 8004344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004348:	4619      	mov	r1, r3
 800434a:	4b83      	ldr	r3, [pc, #524]	; (8004558 <USB_EPStartXfer+0x2dc>)
 800434c:	4013      	ands	r3, r2
 800434e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	015a      	lsls	r2, r3, #5
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	4413      	add	r3, r2
 8004358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800435c:	691a      	ldr	r2, [r3, #16]
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	6959      	ldr	r1, [r3, #20]
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	440b      	add	r3, r1
 8004368:	1e59      	subs	r1, r3, #1
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004372:	04d9      	lsls	r1, r3, #19
 8004374:	4b7a      	ldr	r3, [pc, #488]	; (8004560 <USB_EPStartXfer+0x2e4>)
 8004376:	400b      	ands	r3, r1
 8004378:	69b9      	ldr	r1, [r7, #24]
 800437a:	0148      	lsls	r0, r1, #5
 800437c:	69f9      	ldr	r1, [r7, #28]
 800437e:	4401      	add	r1, r0
 8004380:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004384:	4313      	orrs	r3, r2
 8004386:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	015a      	lsls	r2, r3, #5
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	4413      	add	r3, r2
 8004390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004394:	691a      	ldr	r2, [r3, #16]
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	695b      	ldr	r3, [r3, #20]
 800439a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800439e:	69b9      	ldr	r1, [r7, #24]
 80043a0:	0148      	lsls	r0, r1, #5
 80043a2:	69f9      	ldr	r1, [r7, #28]
 80043a4:	4401      	add	r1, r0
 80043a6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80043aa:	4313      	orrs	r3, r2
 80043ac:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	78db      	ldrb	r3, [r3, #3]
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d11f      	bne.n	80043f6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	015a      	lsls	r2, r3, #5
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	4413      	add	r3, r2
 80043be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	69ba      	ldr	r2, [r7, #24]
 80043c6:	0151      	lsls	r1, r2, #5
 80043c8:	69fa      	ldr	r2, [r7, #28]
 80043ca:	440a      	add	r2, r1
 80043cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043d0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80043d4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	015a      	lsls	r2, r3, #5
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	4413      	add	r3, r2
 80043de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	69ba      	ldr	r2, [r7, #24]
 80043e6:	0151      	lsls	r1, r2, #5
 80043e8:	69fa      	ldr	r2, [r7, #28]
 80043ea:	440a      	add	r2, r1
 80043ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80043f4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80043f6:	79fb      	ldrb	r3, [r7, #7]
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d14b      	bne.n	8004494 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d009      	beq.n	8004418 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	015a      	lsls	r2, r3, #5
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	4413      	add	r3, r2
 800440c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004410:	461a      	mov	r2, r3
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	78db      	ldrb	r3, [r3, #3]
 800441c:	2b01      	cmp	r3, #1
 800441e:	d128      	bne.n	8004472 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800442c:	2b00      	cmp	r3, #0
 800442e:	d110      	bne.n	8004452 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	015a      	lsls	r2, r3, #5
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	4413      	add	r3, r2
 8004438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	69ba      	ldr	r2, [r7, #24]
 8004440:	0151      	lsls	r1, r2, #5
 8004442:	69fa      	ldr	r2, [r7, #28]
 8004444:	440a      	add	r2, r1
 8004446:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800444a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800444e:	6013      	str	r3, [r2, #0]
 8004450:	e00f      	b.n	8004472 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	015a      	lsls	r2, r3, #5
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	4413      	add	r3, r2
 800445a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	69ba      	ldr	r2, [r7, #24]
 8004462:	0151      	lsls	r1, r2, #5
 8004464:	69fa      	ldr	r2, [r7, #28]
 8004466:	440a      	add	r2, r1
 8004468:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800446c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004470:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	015a      	lsls	r2, r3, #5
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	4413      	add	r3, r2
 800447a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	69ba      	ldr	r2, [r7, #24]
 8004482:	0151      	lsls	r1, r2, #5
 8004484:	69fa      	ldr	r2, [r7, #28]
 8004486:	440a      	add	r2, r1
 8004488:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800448c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004490:	6013      	str	r3, [r2, #0]
 8004492:	e133      	b.n	80046fc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	015a      	lsls	r2, r3, #5
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	4413      	add	r3, r2
 800449c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	69ba      	ldr	r2, [r7, #24]
 80044a4:	0151      	lsls	r1, r2, #5
 80044a6:	69fa      	ldr	r2, [r7, #28]
 80044a8:	440a      	add	r2, r1
 80044aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80044b2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	78db      	ldrb	r3, [r3, #3]
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d015      	beq.n	80044e8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	695b      	ldr	r3, [r3, #20]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	f000 811b 	beq.w	80046fc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	f003 030f 	and.w	r3, r3, #15
 80044d6:	2101      	movs	r1, #1
 80044d8:	fa01 f303 	lsl.w	r3, r1, r3
 80044dc:	69f9      	ldr	r1, [r7, #28]
 80044de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044e2:	4313      	orrs	r3, r2
 80044e4:	634b      	str	r3, [r1, #52]	; 0x34
 80044e6:	e109      	b.n	80046fc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d110      	bne.n	800451a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	015a      	lsls	r2, r3, #5
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	4413      	add	r3, r2
 8004500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	69ba      	ldr	r2, [r7, #24]
 8004508:	0151      	lsls	r1, r2, #5
 800450a:	69fa      	ldr	r2, [r7, #28]
 800450c:	440a      	add	r2, r1
 800450e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004512:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004516:	6013      	str	r3, [r2, #0]
 8004518:	e00f      	b.n	800453a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	015a      	lsls	r2, r3, #5
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	4413      	add	r3, r2
 8004522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	69ba      	ldr	r2, [r7, #24]
 800452a:	0151      	lsls	r1, r2, #5
 800452c:	69fa      	ldr	r2, [r7, #28]
 800452e:	440a      	add	r2, r1
 8004530:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004538:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	68d9      	ldr	r1, [r3, #12]
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	781a      	ldrb	r2, [r3, #0]
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	b298      	uxth	r0, r3
 8004548:	79fb      	ldrb	r3, [r7, #7]
 800454a:	9300      	str	r3, [sp, #0]
 800454c:	4603      	mov	r3, r0
 800454e:	68f8      	ldr	r0, [r7, #12]
 8004550:	f000 fa38 	bl	80049c4 <USB_WritePacket>
 8004554:	e0d2      	b.n	80046fc <USB_EPStartXfer+0x480>
 8004556:	bf00      	nop
 8004558:	e007ffff 	.word	0xe007ffff
 800455c:	fff80000 	.word	0xfff80000
 8004560:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004564:	69bb      	ldr	r3, [r7, #24]
 8004566:	015a      	lsls	r2, r3, #5
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	4413      	add	r3, r2
 800456c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004570:	691a      	ldr	r2, [r3, #16]
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	0159      	lsls	r1, r3, #5
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	440b      	add	r3, r1
 800457a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800457e:	4619      	mov	r1, r3
 8004580:	4b61      	ldr	r3, [pc, #388]	; (8004708 <USB_EPStartXfer+0x48c>)
 8004582:	4013      	ands	r3, r2
 8004584:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	015a      	lsls	r2, r3, #5
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	4413      	add	r3, r2
 800458e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004592:	691a      	ldr	r2, [r3, #16]
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	0159      	lsls	r1, r3, #5
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	440b      	add	r3, r1
 800459c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045a0:	4619      	mov	r1, r3
 80045a2:	4b5a      	ldr	r3, [pc, #360]	; (800470c <USB_EPStartXfer+0x490>)
 80045a4:	4013      	ands	r3, r2
 80045a6:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	695b      	ldr	r3, [r3, #20]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d123      	bne.n	80045f8 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	015a      	lsls	r2, r3, #5
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	4413      	add	r3, r2
 80045b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045bc:	691a      	ldr	r2, [r3, #16]
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045c6:	69b9      	ldr	r1, [r7, #24]
 80045c8:	0148      	lsls	r0, r1, #5
 80045ca:	69f9      	ldr	r1, [r7, #28]
 80045cc:	4401      	add	r1, r0
 80045ce:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80045d2:	4313      	orrs	r3, r2
 80045d4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	015a      	lsls	r2, r3, #5
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	4413      	add	r3, r2
 80045de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	69ba      	ldr	r2, [r7, #24]
 80045e6:	0151      	lsls	r1, r2, #5
 80045e8:	69fa      	ldr	r2, [r7, #28]
 80045ea:	440a      	add	r2, r1
 80045ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80045f4:	6113      	str	r3, [r2, #16]
 80045f6:	e033      	b.n	8004660 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	695a      	ldr	r2, [r3, #20]
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	4413      	add	r3, r2
 8004602:	1e5a      	subs	r2, r3, #1
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	fbb2 f3f3 	udiv	r3, r2, r3
 800460c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	015a      	lsls	r2, r3, #5
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	4413      	add	r3, r2
 8004616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800461a:	691a      	ldr	r2, [r3, #16]
 800461c:	8afb      	ldrh	r3, [r7, #22]
 800461e:	04d9      	lsls	r1, r3, #19
 8004620:	4b3b      	ldr	r3, [pc, #236]	; (8004710 <USB_EPStartXfer+0x494>)
 8004622:	400b      	ands	r3, r1
 8004624:	69b9      	ldr	r1, [r7, #24]
 8004626:	0148      	lsls	r0, r1, #5
 8004628:	69f9      	ldr	r1, [r7, #28]
 800462a:	4401      	add	r1, r0
 800462c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004630:	4313      	orrs	r3, r2
 8004632:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	015a      	lsls	r2, r3, #5
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	4413      	add	r3, r2
 800463c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004640:	691a      	ldr	r2, [r3, #16]
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	8af9      	ldrh	r1, [r7, #22]
 8004648:	fb01 f303 	mul.w	r3, r1, r3
 800464c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004650:	69b9      	ldr	r1, [r7, #24]
 8004652:	0148      	lsls	r0, r1, #5
 8004654:	69f9      	ldr	r1, [r7, #28]
 8004656:	4401      	add	r1, r0
 8004658:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800465c:	4313      	orrs	r3, r2
 800465e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004660:	79fb      	ldrb	r3, [r7, #7]
 8004662:	2b01      	cmp	r3, #1
 8004664:	d10d      	bne.n	8004682 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d009      	beq.n	8004682 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	68d9      	ldr	r1, [r3, #12]
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	015a      	lsls	r2, r3, #5
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	4413      	add	r3, r2
 800467a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800467e:	460a      	mov	r2, r1
 8004680:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	78db      	ldrb	r3, [r3, #3]
 8004686:	2b01      	cmp	r3, #1
 8004688:	d128      	bne.n	80046dc <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004696:	2b00      	cmp	r3, #0
 8004698:	d110      	bne.n	80046bc <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	015a      	lsls	r2, r3, #5
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	4413      	add	r3, r2
 80046a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	69ba      	ldr	r2, [r7, #24]
 80046aa:	0151      	lsls	r1, r2, #5
 80046ac:	69fa      	ldr	r2, [r7, #28]
 80046ae:	440a      	add	r2, r1
 80046b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80046b8:	6013      	str	r3, [r2, #0]
 80046ba:	e00f      	b.n	80046dc <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	015a      	lsls	r2, r3, #5
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	4413      	add	r3, r2
 80046c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	69ba      	ldr	r2, [r7, #24]
 80046cc:	0151      	lsls	r1, r2, #5
 80046ce:	69fa      	ldr	r2, [r7, #28]
 80046d0:	440a      	add	r2, r1
 80046d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046da:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	015a      	lsls	r2, r3, #5
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	4413      	add	r3, r2
 80046e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	69ba      	ldr	r2, [r7, #24]
 80046ec:	0151      	lsls	r1, r2, #5
 80046ee:	69fa      	ldr	r2, [r7, #28]
 80046f0:	440a      	add	r2, r1
 80046f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80046fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3720      	adds	r7, #32
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	fff80000 	.word	0xfff80000
 800470c:	e007ffff 	.word	0xe007ffff
 8004710:	1ff80000 	.word	0x1ff80000

08004714 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004714:	b480      	push	{r7}
 8004716:	b087      	sub	sp, #28
 8004718:	af00      	add	r7, sp, #0
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	4613      	mov	r3, r2
 8004720:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	785b      	ldrb	r3, [r3, #1]
 8004730:	2b01      	cmp	r3, #1
 8004732:	f040 80cd 	bne.w	80048d0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	695b      	ldr	r3, [r3, #20]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d132      	bne.n	80047a4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	015a      	lsls	r2, r3, #5
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	4413      	add	r3, r2
 8004746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800474a:	691a      	ldr	r2, [r3, #16]
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	0159      	lsls	r1, r3, #5
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	440b      	add	r3, r1
 8004754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004758:	4619      	mov	r1, r3
 800475a:	4b98      	ldr	r3, [pc, #608]	; (80049bc <USB_EP0StartXfer+0x2a8>)
 800475c:	4013      	ands	r3, r2
 800475e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	015a      	lsls	r2, r3, #5
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	4413      	add	r3, r2
 8004768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	693a      	ldr	r2, [r7, #16]
 8004770:	0151      	lsls	r1, r2, #5
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	440a      	add	r2, r1
 8004776:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800477a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800477e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	015a      	lsls	r2, r3, #5
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	4413      	add	r3, r2
 8004788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800478c:	691a      	ldr	r2, [r3, #16]
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	0159      	lsls	r1, r3, #5
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	440b      	add	r3, r1
 8004796:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800479a:	4619      	mov	r1, r3
 800479c:	4b88      	ldr	r3, [pc, #544]	; (80049c0 <USB_EP0StartXfer+0x2ac>)
 800479e:	4013      	ands	r3, r2
 80047a0:	610b      	str	r3, [r1, #16]
 80047a2:	e04e      	b.n	8004842 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	015a      	lsls	r2, r3, #5
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	4413      	add	r3, r2
 80047ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047b0:	691a      	ldr	r2, [r3, #16]
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	0159      	lsls	r1, r3, #5
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	440b      	add	r3, r1
 80047ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047be:	4619      	mov	r1, r3
 80047c0:	4b7f      	ldr	r3, [pc, #508]	; (80049c0 <USB_EP0StartXfer+0x2ac>)
 80047c2:	4013      	ands	r3, r2
 80047c4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	015a      	lsls	r2, r3, #5
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	4413      	add	r3, r2
 80047ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047d2:	691a      	ldr	r2, [r3, #16]
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	0159      	lsls	r1, r3, #5
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	440b      	add	r3, r1
 80047dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047e0:	4619      	mov	r1, r3
 80047e2:	4b76      	ldr	r3, [pc, #472]	; (80049bc <USB_EP0StartXfer+0x2a8>)
 80047e4:	4013      	ands	r3, r2
 80047e6:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	695a      	ldr	r2, [r3, #20]
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d903      	bls.n	80047fc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	689a      	ldr	r2, [r3, #8]
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	015a      	lsls	r2, r3, #5
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	4413      	add	r3, r2
 8004804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	693a      	ldr	r2, [r7, #16]
 800480c:	0151      	lsls	r1, r2, #5
 800480e:	697a      	ldr	r2, [r7, #20]
 8004810:	440a      	add	r2, r1
 8004812:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004816:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800481a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	015a      	lsls	r2, r3, #5
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	4413      	add	r3, r2
 8004824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004828:	691a      	ldr	r2, [r3, #16]
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004832:	6939      	ldr	r1, [r7, #16]
 8004834:	0148      	lsls	r0, r1, #5
 8004836:	6979      	ldr	r1, [r7, #20]
 8004838:	4401      	add	r1, r0
 800483a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800483e:	4313      	orrs	r3, r2
 8004840:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004842:	79fb      	ldrb	r3, [r7, #7]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d11e      	bne.n	8004886 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d009      	beq.n	8004864 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	015a      	lsls	r2, r3, #5
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	4413      	add	r3, r2
 8004858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800485c:	461a      	mov	r2, r3
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	015a      	lsls	r2, r3, #5
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	4413      	add	r3, r2
 800486c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	693a      	ldr	r2, [r7, #16]
 8004874:	0151      	lsls	r1, r2, #5
 8004876:	697a      	ldr	r2, [r7, #20]
 8004878:	440a      	add	r2, r1
 800487a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800487e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004882:	6013      	str	r3, [r2, #0]
 8004884:	e092      	b.n	80049ac <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	015a      	lsls	r2, r3, #5
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	4413      	add	r3, r2
 800488e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	693a      	ldr	r2, [r7, #16]
 8004896:	0151      	lsls	r1, r2, #5
 8004898:	697a      	ldr	r2, [r7, #20]
 800489a:	440a      	add	r2, r1
 800489c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80048a4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	695b      	ldr	r3, [r3, #20]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d07e      	beq.n	80049ac <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	f003 030f 	and.w	r3, r3, #15
 80048be:	2101      	movs	r1, #1
 80048c0:	fa01 f303 	lsl.w	r3, r1, r3
 80048c4:	6979      	ldr	r1, [r7, #20]
 80048c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048ca:	4313      	orrs	r3, r2
 80048cc:	634b      	str	r3, [r1, #52]	; 0x34
 80048ce:	e06d      	b.n	80049ac <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	015a      	lsls	r2, r3, #5
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	4413      	add	r3, r2
 80048d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048dc:	691a      	ldr	r2, [r3, #16]
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	0159      	lsls	r1, r3, #5
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	440b      	add	r3, r1
 80048e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ea:	4619      	mov	r1, r3
 80048ec:	4b34      	ldr	r3, [pc, #208]	; (80049c0 <USB_EP0StartXfer+0x2ac>)
 80048ee:	4013      	ands	r3, r2
 80048f0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	015a      	lsls	r2, r3, #5
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	4413      	add	r3, r2
 80048fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048fe:	691a      	ldr	r2, [r3, #16]
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	0159      	lsls	r1, r3, #5
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	440b      	add	r3, r1
 8004908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800490c:	4619      	mov	r1, r3
 800490e:	4b2b      	ldr	r3, [pc, #172]	; (80049bc <USB_EP0StartXfer+0x2a8>)
 8004910:	4013      	ands	r3, r2
 8004912:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	695b      	ldr	r3, [r3, #20]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d003      	beq.n	8004924 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	689a      	ldr	r2, [r3, #8]
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	015a      	lsls	r2, r3, #5
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	4413      	add	r3, r2
 800492c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	693a      	ldr	r2, [r7, #16]
 8004934:	0151      	lsls	r1, r2, #5
 8004936:	697a      	ldr	r2, [r7, #20]
 8004938:	440a      	add	r2, r1
 800493a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800493e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004942:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	015a      	lsls	r2, r3, #5
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	4413      	add	r3, r2
 800494c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004950:	691a      	ldr	r2, [r3, #16]
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800495a:	6939      	ldr	r1, [r7, #16]
 800495c:	0148      	lsls	r0, r1, #5
 800495e:	6979      	ldr	r1, [r7, #20]
 8004960:	4401      	add	r1, r0
 8004962:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004966:	4313      	orrs	r3, r2
 8004968:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800496a:	79fb      	ldrb	r3, [r7, #7]
 800496c:	2b01      	cmp	r3, #1
 800496e:	d10d      	bne.n	800498c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d009      	beq.n	800498c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	68d9      	ldr	r1, [r3, #12]
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	015a      	lsls	r2, r3, #5
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	4413      	add	r3, r2
 8004984:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004988:	460a      	mov	r2, r1
 800498a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	015a      	lsls	r2, r3, #5
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	4413      	add	r3, r2
 8004994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	693a      	ldr	r2, [r7, #16]
 800499c:	0151      	lsls	r1, r2, #5
 800499e:	697a      	ldr	r2, [r7, #20]
 80049a0:	440a      	add	r2, r1
 80049a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049a6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80049aa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	371c      	adds	r7, #28
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	e007ffff 	.word	0xe007ffff
 80049c0:	fff80000 	.word	0xfff80000

080049c4 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b089      	sub	sp, #36	; 0x24
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	4611      	mov	r1, r2
 80049d0:	461a      	mov	r2, r3
 80049d2:	460b      	mov	r3, r1
 80049d4:	71fb      	strb	r3, [r7, #7]
 80049d6:	4613      	mov	r3, r2
 80049d8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80049e2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d11a      	bne.n	8004a20 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80049ea:	88bb      	ldrh	r3, [r7, #4]
 80049ec:	3303      	adds	r3, #3
 80049ee:	089b      	lsrs	r3, r3, #2
 80049f0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80049f2:	2300      	movs	r3, #0
 80049f4:	61bb      	str	r3, [r7, #24]
 80049f6:	e00f      	b.n	8004a18 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80049f8:	79fb      	ldrb	r3, [r7, #7]
 80049fa:	031a      	lsls	r2, r3, #12
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	4413      	add	r3, r2
 8004a00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a04:	461a      	mov	r2, r3
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	3304      	adds	r3, #4
 8004a10:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	3301      	adds	r3, #1
 8004a16:	61bb      	str	r3, [r7, #24]
 8004a18:	69ba      	ldr	r2, [r7, #24]
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d3eb      	bcc.n	80049f8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3724      	adds	r7, #36	; 0x24
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr

08004a2e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004a2e:	b480      	push	{r7}
 8004a30:	b089      	sub	sp, #36	; 0x24
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	60f8      	str	r0, [r7, #12]
 8004a36:	60b9      	str	r1, [r7, #8]
 8004a38:	4613      	mov	r3, r2
 8004a3a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004a44:	88fb      	ldrh	r3, [r7, #6]
 8004a46:	3303      	adds	r3, #3
 8004a48:	089b      	lsrs	r3, r3, #2
 8004a4a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	61bb      	str	r3, [r7, #24]
 8004a50:	e00b      	b.n	8004a6a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	601a      	str	r2, [r3, #0]
    pDest++;
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	3304      	adds	r3, #4
 8004a62:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	3301      	adds	r3, #1
 8004a68:	61bb      	str	r3, [r7, #24]
 8004a6a:	69ba      	ldr	r2, [r7, #24]
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d3ef      	bcc.n	8004a52 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004a72:	69fb      	ldr	r3, [r7, #28]
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3724      	adds	r7, #36	; 0x24
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b085      	sub	sp, #20
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	785b      	ldrb	r3, [r3, #1]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d12c      	bne.n	8004af6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	015a      	lsls	r2, r3, #5
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	db12      	blt.n	8004ad4 <USB_EPSetStall+0x54>
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d00f      	beq.n	8004ad4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	015a      	lsls	r2, r3, #5
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	4413      	add	r3, r2
 8004abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68ba      	ldr	r2, [r7, #8]
 8004ac4:	0151      	lsls	r1, r2, #5
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	440a      	add	r2, r1
 8004aca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ace:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004ad2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	015a      	lsls	r2, r3, #5
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	4413      	add	r3, r2
 8004adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68ba      	ldr	r2, [r7, #8]
 8004ae4:	0151      	lsls	r1, r2, #5
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	440a      	add	r2, r1
 8004aea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004aee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004af2:	6013      	str	r3, [r2, #0]
 8004af4:	e02b      	b.n	8004b4e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	015a      	lsls	r2, r3, #5
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	4413      	add	r3, r2
 8004afe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	db12      	blt.n	8004b2e <USB_EPSetStall+0xae>
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00f      	beq.n	8004b2e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	015a      	lsls	r2, r3, #5
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	4413      	add	r3, r2
 8004b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68ba      	ldr	r2, [r7, #8]
 8004b1e:	0151      	lsls	r1, r2, #5
 8004b20:	68fa      	ldr	r2, [r7, #12]
 8004b22:	440a      	add	r2, r1
 8004b24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b28:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004b2c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	015a      	lsls	r2, r3, #5
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	4413      	add	r3, r2
 8004b36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68ba      	ldr	r2, [r7, #8]
 8004b3e:	0151      	lsls	r1, r2, #5
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	440a      	add	r2, r1
 8004b44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b4c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3714      	adds	r7, #20
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	785b      	ldrb	r3, [r3, #1]
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d128      	bne.n	8004bca <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	015a      	lsls	r2, r3, #5
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	4413      	add	r3, r2
 8004b80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68ba      	ldr	r2, [r7, #8]
 8004b88:	0151      	lsls	r1, r2, #5
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	440a      	add	r2, r1
 8004b8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b92:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b96:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	78db      	ldrb	r3, [r3, #3]
 8004b9c:	2b03      	cmp	r3, #3
 8004b9e:	d003      	beq.n	8004ba8 <USB_EPClearStall+0x4c>
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	78db      	ldrb	r3, [r3, #3]
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d138      	bne.n	8004c1a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	015a      	lsls	r2, r3, #5
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	4413      	add	r3, r2
 8004bb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68ba      	ldr	r2, [r7, #8]
 8004bb8:	0151      	lsls	r1, r2, #5
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	440a      	add	r2, r1
 8004bbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bc6:	6013      	str	r3, [r2, #0]
 8004bc8:	e027      	b.n	8004c1a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	015a      	lsls	r2, r3, #5
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68ba      	ldr	r2, [r7, #8]
 8004bda:	0151      	lsls	r1, r2, #5
 8004bdc:	68fa      	ldr	r2, [r7, #12]
 8004bde:	440a      	add	r2, r1
 8004be0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004be4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004be8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	78db      	ldrb	r3, [r3, #3]
 8004bee:	2b03      	cmp	r3, #3
 8004bf0:	d003      	beq.n	8004bfa <USB_EPClearStall+0x9e>
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	78db      	ldrb	r3, [r3, #3]
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d10f      	bne.n	8004c1a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	015a      	lsls	r2, r3, #5
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	4413      	add	r3, r2
 8004c02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68ba      	ldr	r2, [r7, #8]
 8004c0a:	0151      	lsls	r1, r2, #5
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	440a      	add	r2, r1
 8004c10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c18:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3714      	adds	r7, #20
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b085      	sub	sp, #20
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	460b      	mov	r3, r1
 8004c32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68fa      	ldr	r2, [r7, #12]
 8004c42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c46:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004c4a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	78fb      	ldrb	r3, [r7, #3]
 8004c56:	011b      	lsls	r3, r3, #4
 8004c58:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004c5c:	68f9      	ldr	r1, [r7, #12]
 8004c5e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c62:	4313      	orrs	r3, r2
 8004c64:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004c66:	2300      	movs	r3, #0
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3714      	adds	r7, #20
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c8e:	f023 0302 	bic.w	r3, r3, #2
 8004c92:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8004c94:	2003      	movs	r0, #3
 8004c96:	f7fb ff11 	bl	8000abc <HAL_Delay>

  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3710      	adds	r7, #16
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	68fa      	ldr	r2, [r7, #12]
 8004cba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cbe:	f043 0302 	orr.w	r3, r3, #2
 8004cc2:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8004cc4:	2003      	movs	r0, #3
 8004cc6:	f7fb fef9 	bl	8000abc <HAL_Delay>

  return HAL_OK;
 8004cca:	2300      	movs	r3, #0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3710      	adds	r7, #16
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b085      	sub	sp, #20
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	695b      	ldr	r3, [r3, #20]
 8004ce0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	699b      	ldr	r3, [r3, #24]
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	4013      	ands	r3, r2
 8004cea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004cec:	68fb      	ldr	r3, [r7, #12]
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3714      	adds	r7, #20
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr

08004cfa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004cfa:	b480      	push	{r7}
 8004cfc:	b085      	sub	sp, #20
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d0c:	699b      	ldr	r3, [r3, #24]
 8004d0e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d16:	69db      	ldr	r3, [r3, #28]
 8004d18:	68ba      	ldr	r2, [r7, #8]
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	0c1b      	lsrs	r3, r3, #16
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3714      	adds	r7, #20
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr

08004d2e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d2e:	b480      	push	{r7}
 8004d30:	b085      	sub	sp, #20
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d40:	699b      	ldr	r3, [r3, #24]
 8004d42:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d4a:	69db      	ldr	r3, [r3, #28]
 8004d4c:	68ba      	ldr	r2, [r7, #8]
 8004d4e:	4013      	ands	r3, r2
 8004d50:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	b29b      	uxth	r3, r3
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3714      	adds	r7, #20
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr

08004d62 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004d62:	b480      	push	{r7}
 8004d64:	b085      	sub	sp, #20
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
 8004d6a:	460b      	mov	r3, r1
 8004d6c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004d72:	78fb      	ldrb	r3, [r7, #3]
 8004d74:	015a      	lsls	r2, r3, #5
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	4413      	add	r3, r2
 8004d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	68ba      	ldr	r2, [r7, #8]
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004d90:	68bb      	ldr	r3, [r7, #8]
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3714      	adds	r7, #20
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr

08004d9e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004d9e:	b480      	push	{r7}
 8004da0:	b087      	sub	sp, #28
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
 8004da6:	460b      	mov	r3, r1
 8004da8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dc0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004dc2:	78fb      	ldrb	r3, [r7, #3]
 8004dc4:	f003 030f 	and.w	r3, r3, #15
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	fa22 f303 	lsr.w	r3, r2, r3
 8004dce:	01db      	lsls	r3, r3, #7
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	693a      	ldr	r2, [r7, #16]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004dd8:	78fb      	ldrb	r3, [r7, #3]
 8004dda:	015a      	lsls	r2, r3, #5
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	4413      	add	r3, r2
 8004de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	693a      	ldr	r2, [r7, #16]
 8004de8:	4013      	ands	r3, r2
 8004dea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004dec:	68bb      	ldr	r3, [r7, #8]
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	371c      	adds	r7, #28
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr

08004dfa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004dfa:	b480      	push	{r7}
 8004dfc:	b083      	sub	sp, #12
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	f003 0301 	and.w	r3, r3, #1
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	370c      	adds	r7, #12
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
	...

08004e18 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e32:	4619      	mov	r1, r3
 8004e34:	4b09      	ldr	r3, [pc, #36]	; (8004e5c <USB_ActivateSetup+0x44>)
 8004e36:	4013      	ands	r3, r2
 8004e38:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	68fa      	ldr	r2, [r7, #12]
 8004e44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e4c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004e4e:	2300      	movs	r3, #0
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3714      	adds	r7, #20
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr
 8004e5c:	fffff800 	.word	0xfffff800

08004e60 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b087      	sub	sp, #28
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	460b      	mov	r3, r1
 8004e6a:	607a      	str	r2, [r7, #4]
 8004e6c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	333c      	adds	r3, #60	; 0x3c
 8004e76:	3304      	adds	r3, #4
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	4a26      	ldr	r2, [pc, #152]	; (8004f18 <USB_EP0_OutStart+0xb8>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d90a      	bls.n	8004e9a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e94:	d101      	bne.n	8004e9a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004e96:	2300      	movs	r3, #0
 8004e98:	e037      	b.n	8004f0a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	697a      	ldr	r2, [r7, #20]
 8004eb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004eb4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004eb8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	697a      	ldr	r2, [r7, #20]
 8004ec4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ec8:	f043 0318 	orr.w	r3, r3, #24
 8004ecc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	697a      	ldr	r2, [r7, #20]
 8004ed8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004edc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004ee0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004ee2:	7afb      	ldrb	r3, [r7, #11]
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d10f      	bne.n	8004f08 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eee:	461a      	mov	r2, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	697a      	ldr	r2, [r7, #20]
 8004efe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f02:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004f06:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004f08:	2300      	movs	r3, #0
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	371c      	adds	r7, #28
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	4f54300a 	.word	0x4f54300a

08004f1c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b085      	sub	sp, #20
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004f24:	2300      	movs	r3, #0
 8004f26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	60fb      	str	r3, [r7, #12]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	4a13      	ldr	r2, [pc, #76]	; (8004f80 <USB_CoreReset+0x64>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d901      	bls.n	8004f3a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e01b      	b.n	8004f72 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	daf2      	bge.n	8004f28 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004f42:	2300      	movs	r3, #0
 8004f44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	f043 0201 	orr.w	r2, r3, #1
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	3301      	adds	r3, #1
 8004f56:	60fb      	str	r3, [r7, #12]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	4a09      	ldr	r2, [pc, #36]	; (8004f80 <USB_CoreReset+0x64>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d901      	bls.n	8004f64 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004f60:	2303      	movs	r3, #3
 8004f62:	e006      	b.n	8004f72 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	691b      	ldr	r3, [r3, #16]
 8004f68:	f003 0301 	and.w	r3, r3, #1
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d0f0      	beq.n	8004f52 <USB_CoreReset+0x36>

  return HAL_OK;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3714      	adds	r7, #20
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	00030d40 	.word	0x00030d40

08004f84 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004f90:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004f94:	f004 ff4c 	bl	8009e30 <malloc>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d105      	bne.n	8004fae <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004faa:	2302      	movs	r3, #2
 8004fac:	e066      	b.n	800507c <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	68fa      	ldr	r2, [r7, #12]
 8004fb2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	7c1b      	ldrb	r3, [r3, #16]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d119      	bne.n	8004ff2 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004fbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004fc2:	2202      	movs	r2, #2
 8004fc4:	2181      	movs	r1, #129	; 0x81
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f004 fd65 	bl	8009a96 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004fd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004fd6:	2202      	movs	r2, #2
 8004fd8:	2101      	movs	r1, #1
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f004 fd5b 	bl	8009a96 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2210      	movs	r2, #16
 8004fec:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8004ff0:	e016      	b.n	8005020 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004ff2:	2340      	movs	r3, #64	; 0x40
 8004ff4:	2202      	movs	r2, #2
 8004ff6:	2181      	movs	r1, #129	; 0x81
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f004 fd4c 	bl	8009a96 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2201      	movs	r2, #1
 8005002:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005004:	2340      	movs	r3, #64	; 0x40
 8005006:	2202      	movs	r2, #2
 8005008:	2101      	movs	r1, #1
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f004 fd43 	bl	8009a96 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2210      	movs	r2, #16
 800501c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005020:	2308      	movs	r3, #8
 8005022:	2203      	movs	r2, #3
 8005024:	2182      	movs	r1, #130	; 0x82
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f004 fd35 	bl	8009a96 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2200      	movs	r2, #0
 8005042:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2200      	movs	r2, #0
 800504a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	7c1b      	ldrb	r3, [r3, #16]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d109      	bne.n	800506a <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800505c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005060:	2101      	movs	r1, #1
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f004 fe06 	bl	8009c74 <USBD_LL_PrepareReceive>
 8005068:	e007      	b.n	800507a <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005070:	2340      	movs	r3, #64	; 0x40
 8005072:	2101      	movs	r1, #1
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f004 fdfd 	bl	8009c74 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800507a:	2300      	movs	r3, #0
}
 800507c:	4618      	mov	r0, r3
 800507e:	3710      	adds	r7, #16
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	460b      	mov	r3, r1
 800508e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8005090:	2300      	movs	r3, #0
 8005092:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005094:	2181      	movs	r1, #129	; 0x81
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f004 fd23 	bl	8009ae2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80050a2:	2101      	movs	r1, #1
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f004 fd1c 	bl	8009ae2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80050b2:	2182      	movs	r1, #130	; 0x82
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f004 fd14 	bl	8009ae2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d00e      	beq.n	80050f2 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80050e4:	4618      	mov	r0, r3
 80050e6:	f004 feab 	bl	8009e40 <free>
    pdev->pClassData = NULL;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 80050f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3710      	adds	r7, #16
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b086      	sub	sp, #24
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800510c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800510e:	2300      	movs	r3, #0
 8005110:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005112:	2300      	movs	r3, #0
 8005114:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8005116:	2300      	movs	r3, #0
 8005118:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005122:	2b00      	cmp	r3, #0
 8005124:	d03a      	beq.n	800519c <USBD_CDC_Setup+0xa0>
 8005126:	2b20      	cmp	r3, #32
 8005128:	f040 8097 	bne.w	800525a <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	88db      	ldrh	r3, [r3, #6]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d029      	beq.n	8005188 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	b25b      	sxtb	r3, r3
 800513a:	2b00      	cmp	r3, #0
 800513c:	da11      	bge.n	8005162 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	683a      	ldr	r2, [r7, #0]
 8005148:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800514a:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800514c:	683a      	ldr	r2, [r7, #0]
 800514e:	88d2      	ldrh	r2, [r2, #6]
 8005150:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005152:	6939      	ldr	r1, [r7, #16]
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	88db      	ldrh	r3, [r3, #6]
 8005158:	461a      	mov	r2, r3
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f001 fac7 	bl	80066ee <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8005160:	e082      	b.n	8005268 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	785a      	ldrb	r2, [r3, #1]
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	88db      	ldrh	r3, [r3, #6]
 8005170:	b2da      	uxtb	r2, r3
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005178:	6939      	ldr	r1, [r7, #16]
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	88db      	ldrh	r3, [r3, #6]
 800517e:	461a      	mov	r2, r3
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f001 fae0 	bl	8006746 <USBD_CtlPrepareRx>
    break;
 8005186:	e06f      	b.n	8005268 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	683a      	ldr	r2, [r7, #0]
 8005192:	7850      	ldrb	r0, [r2, #1]
 8005194:	2200      	movs	r2, #0
 8005196:	6839      	ldr	r1, [r7, #0]
 8005198:	4798      	blx	r3
    break;
 800519a:	e065      	b.n	8005268 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	785b      	ldrb	r3, [r3, #1]
 80051a0:	2b0b      	cmp	r3, #11
 80051a2:	d84f      	bhi.n	8005244 <USBD_CDC_Setup+0x148>
 80051a4:	a201      	add	r2, pc, #4	; (adr r2, 80051ac <USBD_CDC_Setup+0xb0>)
 80051a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051aa:	bf00      	nop
 80051ac:	080051dd 	.word	0x080051dd
 80051b0:	08005253 	.word	0x08005253
 80051b4:	08005245 	.word	0x08005245
 80051b8:	08005245 	.word	0x08005245
 80051bc:	08005245 	.word	0x08005245
 80051c0:	08005245 	.word	0x08005245
 80051c4:	08005245 	.word	0x08005245
 80051c8:	08005245 	.word	0x08005245
 80051cc:	08005245 	.word	0x08005245
 80051d0:	08005245 	.word	0x08005245
 80051d4:	08005205 	.word	0x08005205
 80051d8:	0800522d 	.word	0x0800522d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051e2:	2b03      	cmp	r3, #3
 80051e4:	d107      	bne.n	80051f6 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80051e6:	f107 030c 	add.w	r3, r7, #12
 80051ea:	2202      	movs	r2, #2
 80051ec:	4619      	mov	r1, r3
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f001 fa7d 	bl	80066ee <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80051f4:	e030      	b.n	8005258 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80051f6:	6839      	ldr	r1, [r7, #0]
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f001 fa07 	bl	800660c <USBD_CtlError>
        ret = USBD_FAIL;
 80051fe:	2303      	movs	r3, #3
 8005200:	75fb      	strb	r3, [r7, #23]
      break;
 8005202:	e029      	b.n	8005258 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800520a:	2b03      	cmp	r3, #3
 800520c:	d107      	bne.n	800521e <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800520e:	f107 030f 	add.w	r3, r7, #15
 8005212:	2201      	movs	r2, #1
 8005214:	4619      	mov	r1, r3
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f001 fa69 	bl	80066ee <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800521c:	e01c      	b.n	8005258 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800521e:	6839      	ldr	r1, [r7, #0]
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f001 f9f3 	bl	800660c <USBD_CtlError>
        ret = USBD_FAIL;
 8005226:	2303      	movs	r3, #3
 8005228:	75fb      	strb	r3, [r7, #23]
      break;
 800522a:	e015      	b.n	8005258 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005232:	2b03      	cmp	r3, #3
 8005234:	d00f      	beq.n	8005256 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8005236:	6839      	ldr	r1, [r7, #0]
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f001 f9e7 	bl	800660c <USBD_CtlError>
        ret = USBD_FAIL;
 800523e:	2303      	movs	r3, #3
 8005240:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005242:	e008      	b.n	8005256 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8005244:	6839      	ldr	r1, [r7, #0]
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f001 f9e0 	bl	800660c <USBD_CtlError>
      ret = USBD_FAIL;
 800524c:	2303      	movs	r3, #3
 800524e:	75fb      	strb	r3, [r7, #23]
      break;
 8005250:	e002      	b.n	8005258 <USBD_CDC_Setup+0x15c>
      break;
 8005252:	bf00      	nop
 8005254:	e008      	b.n	8005268 <USBD_CDC_Setup+0x16c>
      break;
 8005256:	bf00      	nop
    }
    break;
 8005258:	e006      	b.n	8005268 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800525a:	6839      	ldr	r1, [r7, #0]
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f001 f9d5 	bl	800660c <USBD_CtlError>
    ret = USBD_FAIL;
 8005262:	2303      	movs	r3, #3
 8005264:	75fb      	strb	r3, [r7, #23]
    break;
 8005266:	bf00      	nop
  }

  return (uint8_t)ret;
 8005268:	7dfb      	ldrb	r3, [r7, #23]
}
 800526a:	4618      	mov	r0, r3
 800526c:	3718      	adds	r7, #24
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop

08005274 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	460b      	mov	r3, r1
 800527e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005286:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800528e:	2b00      	cmp	r3, #0
 8005290:	d101      	bne.n	8005296 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005292:	2303      	movs	r3, #3
 8005294:	e049      	b.n	800532a <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800529c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800529e:	78fa      	ldrb	r2, [r7, #3]
 80052a0:	6879      	ldr	r1, [r7, #4]
 80052a2:	4613      	mov	r3, r2
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	4413      	add	r3, r2
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	440b      	add	r3, r1
 80052ac:	3318      	adds	r3, #24
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d029      	beq.n	8005308 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80052b4:	78fa      	ldrb	r2, [r7, #3]
 80052b6:	6879      	ldr	r1, [r7, #4]
 80052b8:	4613      	mov	r3, r2
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	4413      	add	r3, r2
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	440b      	add	r3, r1
 80052c2:	3318      	adds	r3, #24
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	78f9      	ldrb	r1, [r7, #3]
 80052c8:	68f8      	ldr	r0, [r7, #12]
 80052ca:	460b      	mov	r3, r1
 80052cc:	00db      	lsls	r3, r3, #3
 80052ce:	1a5b      	subs	r3, r3, r1
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	4403      	add	r3, r0
 80052d4:	3344      	adds	r3, #68	; 0x44
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	fbb2 f1f3 	udiv	r1, r2, r3
 80052dc:	fb03 f301 	mul.w	r3, r3, r1
 80052e0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d110      	bne.n	8005308 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80052e6:	78fa      	ldrb	r2, [r7, #3]
 80052e8:	6879      	ldr	r1, [r7, #4]
 80052ea:	4613      	mov	r3, r2
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	4413      	add	r3, r2
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	440b      	add	r3, r1
 80052f4:	3318      	adds	r3, #24
 80052f6:	2200      	movs	r2, #0
 80052f8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80052fa:	78f9      	ldrb	r1, [r7, #3]
 80052fc:	2300      	movs	r3, #0
 80052fe:	2200      	movs	r2, #0
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f004 fc96 	bl	8009c32 <USBD_LL_Transmit>
 8005306:	e00f      	b.n	8005328 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	2200      	movs	r2, #0
 800530c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	68ba      	ldr	r2, [r7, #8]
 800531a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800531e:	68ba      	ldr	r2, [r7, #8]
 8005320:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005324:	78fa      	ldrb	r2, [r7, #3]
 8005326:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8005328:	2300      	movs	r3, #0
}
 800532a:	4618      	mov	r0, r3
 800532c:	3710      	adds	r7, #16
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}

08005332 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005332:	b580      	push	{r7, lr}
 8005334:	b084      	sub	sp, #16
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
 800533a:	460b      	mov	r3, r1
 800533c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005344:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800534c:	2b00      	cmp	r3, #0
 800534e:	d101      	bne.n	8005354 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005350:	2303      	movs	r3, #3
 8005352:	e015      	b.n	8005380 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005354:	78fb      	ldrb	r3, [r7, #3]
 8005356:	4619      	mov	r1, r3
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f004 fcac 	bl	8009cb6 <USBD_LL_GetRxDataSize>
 800535e:	4602      	mov	r2, r0
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800537a:	4611      	mov	r1, r2
 800537c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	3710      	adds	r7, #16
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005396:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d015      	beq.n	80053ce <USBD_CDC_EP0_RxReady+0x46>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80053a8:	2bff      	cmp	r3, #255	; 0xff
 80053aa:	d010      	beq.n	80053ce <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80053ba:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80053c2:	b292      	uxth	r2, r2
 80053c4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	22ff      	movs	r2, #255	; 0xff
 80053ca:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3710      	adds	r7, #16
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2243      	movs	r2, #67	; 0x43
 80053e4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80053e6:	4b03      	ldr	r3, [pc, #12]	; (80053f4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	370c      	adds	r7, #12
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr
 80053f4:	20000094 	.word	0x20000094

080053f8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2243      	movs	r2, #67	; 0x43
 8005404:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005406:	4b03      	ldr	r3, [pc, #12]	; (8005414 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005408:	4618      	mov	r0, r3
 800540a:	370c      	adds	r7, #12
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr
 8005414:	20000050 	.word	0x20000050

08005418 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2243      	movs	r2, #67	; 0x43
 8005424:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8005426:	4b03      	ldr	r3, [pc, #12]	; (8005434 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005428:	4618      	mov	r0, r3
 800542a:	370c      	adds	r7, #12
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr
 8005434:	200000d8 	.word	0x200000d8

08005438 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	220a      	movs	r2, #10
 8005444:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005446:	4b03      	ldr	r3, [pc, #12]	; (8005454 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005448:	4618      	mov	r0, r3
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr
 8005454:	2000000c 	.word	0x2000000c

08005458 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d101      	bne.n	800546c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005468:	2303      	movs	r3, #3
 800546a:	e004      	b.n	8005476 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	683a      	ldr	r2, [r7, #0]
 8005470:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	370c      	adds	r7, #12
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr

08005482 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005482:	b480      	push	{r7}
 8005484:	b087      	sub	sp, #28
 8005486:	af00      	add	r7, sp, #0
 8005488:	60f8      	str	r0, [r7, #12]
 800548a:	60b9      	str	r1, [r7, #8]
 800548c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005494:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	68ba      	ldr	r2, [r7, #8]
 800549a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80054a6:	2300      	movs	r3, #0
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	371c      	adds	r7, #28
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b085      	sub	sp, #20
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80054c4:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	683a      	ldr	r2, [r7, #0]
 80054ca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80054ce:	2300      	movs	r3, #0
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3714      	adds	r7, #20
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b084      	sub	sp, #16
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80054ea:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80054ec:	2301      	movs	r3, #1
 80054ee:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d101      	bne.n	80054fe <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80054fa:	2303      	movs	r3, #3
 80054fc:	e01a      	b.n	8005534 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005504:	2b00      	cmp	r3, #0
 8005506:	d114      	bne.n	8005532 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	2201      	movs	r2, #1
 800550c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005526:	2181      	movs	r1, #129	; 0x81
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f004 fb82 	bl	8009c32 <USBD_LL_Transmit>

    ret = USBD_OK;
 800552e:	2300      	movs	r3, #0
 8005530:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005532:	7bfb      	ldrb	r3, [r7, #15]
}
 8005534:	4618      	mov	r0, r3
 8005536:	3710      	adds	r7, #16
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800554a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005552:	2b00      	cmp	r3, #0
 8005554:	d101      	bne.n	800555a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005556:	2303      	movs	r3, #3
 8005558:	e016      	b.n	8005588 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	7c1b      	ldrb	r3, [r3, #16]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d109      	bne.n	8005576 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005568:	f44f 7300 	mov.w	r3, #512	; 0x200
 800556c:	2101      	movs	r1, #1
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f004 fb80 	bl	8009c74 <USBD_LL_PrepareReceive>
 8005574:	e007      	b.n	8005586 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800557c:	2340      	movs	r3, #64	; 0x40
 800557e:	2101      	movs	r1, #1
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f004 fb77 	bl	8009c74 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005586:	2300      	movs	r3, #0
}
 8005588:	4618      	mov	r0, r3
 800558a:	3710      	adds	r7, #16
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b086      	sub	sp, #24
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	4613      	mov	r3, r2
 800559c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d101      	bne.n	80055a8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80055a4:	2303      	movs	r3, #3
 80055a6:	e025      	b.n	80055f4 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d003      	beq.n	80055ba <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d003      	beq.n	80055cc <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d003      	beq.n	80055da <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	68ba      	ldr	r2, [r7, #8]
 80055d6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2201      	movs	r2, #1
 80055de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	79fa      	ldrb	r2, [r7, #7]
 80055e6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80055e8:	68f8      	ldr	r0, [r7, #12]
 80055ea:	f004 f9ed 	bl	80099c8 <USBD_LL_Init>
 80055ee:	4603      	mov	r3, r0
 80055f0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80055f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3718      	adds	r7, #24
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b084      	sub	sp, #16
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005606:	2300      	movs	r3, #0
 8005608:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d101      	bne.n	8005614 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005610:	2303      	movs	r3, #3
 8005612:	e010      	b.n	8005636 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	683a      	ldr	r2, [r7, #0]
 8005618:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005624:	f107 020e 	add.w	r2, r7, #14
 8005628:	4610      	mov	r0, r2
 800562a:	4798      	blx	r3
 800562c:	4602      	mov	r2, r0
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	3710      	adds	r7, #16
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}

0800563e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800563e:	b580      	push	{r7, lr}
 8005640:	b082      	sub	sp, #8
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f004 fa0a 	bl	8009a60 <USBD_LL_Start>
 800564c:	4603      	mov	r3, r0
}
 800564e:	4618      	mov	r0, r3
 8005650:	3708      	adds	r7, #8
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}

08005656 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005656:	b480      	push	{r7}
 8005658:	b083      	sub	sp, #12
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800565e:	2300      	movs	r3, #0
}
 8005660:	4618      	mov	r0, r3
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	460b      	mov	r3, r1
 8005676:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005678:	2303      	movs	r3, #3
 800567a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005682:	2b00      	cmp	r3, #0
 8005684:	d009      	beq.n	800569a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	78fa      	ldrb	r2, [r7, #3]
 8005690:	4611      	mov	r1, r2
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	4798      	blx	r3
 8005696:	4603      	mov	r3, r0
 8005698:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800569a:	7bfb      	ldrb	r3, [r7, #15]
}
 800569c:	4618      	mov	r0, r3
 800569e:	3710      	adds	r7, #16
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b082      	sub	sp, #8
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	460b      	mov	r3, r1
 80056ae:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d007      	beq.n	80056ca <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	78fa      	ldrb	r2, [r7, #3]
 80056c4:	4611      	mov	r1, r2
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	4798      	blx	r3
  }

  return USBD_OK;
 80056ca:	2300      	movs	r3, #0
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3708      	adds	r7, #8
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}

080056d4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80056e4:	6839      	ldr	r1, [r7, #0]
 80056e6:	4618      	mov	r0, r3
 80056e8:	f000 ff56 	bl	8006598 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80056fa:	461a      	mov	r2, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005708:	f003 031f 	and.w	r3, r3, #31
 800570c:	2b01      	cmp	r3, #1
 800570e:	d00e      	beq.n	800572e <USBD_LL_SetupStage+0x5a>
 8005710:	2b01      	cmp	r3, #1
 8005712:	d302      	bcc.n	800571a <USBD_LL_SetupStage+0x46>
 8005714:	2b02      	cmp	r3, #2
 8005716:	d014      	beq.n	8005742 <USBD_LL_SetupStage+0x6e>
 8005718:	e01d      	b.n	8005756 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005720:	4619      	mov	r1, r3
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 fa18 	bl	8005b58 <USBD_StdDevReq>
 8005728:	4603      	mov	r3, r0
 800572a:	73fb      	strb	r3, [r7, #15]
      break;
 800572c:	e020      	b.n	8005770 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005734:	4619      	mov	r1, r3
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 fa7c 	bl	8005c34 <USBD_StdItfReq>
 800573c:	4603      	mov	r3, r0
 800573e:	73fb      	strb	r3, [r7, #15]
      break;
 8005740:	e016      	b.n	8005770 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005748:	4619      	mov	r1, r3
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 fab8 	bl	8005cc0 <USBD_StdEPReq>
 8005750:	4603      	mov	r3, r0
 8005752:	73fb      	strb	r3, [r7, #15]
      break;
 8005754:	e00c      	b.n	8005770 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800575c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005760:	b2db      	uxtb	r3, r3
 8005762:	4619      	mov	r1, r3
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f004 f9db 	bl	8009b20 <USBD_LL_StallEP>
 800576a:	4603      	mov	r3, r0
 800576c:	73fb      	strb	r3, [r7, #15]
      break;
 800576e:	bf00      	nop
  }

  return ret;
 8005770:	7bfb      	ldrb	r3, [r7, #15]
}
 8005772:	4618      	mov	r0, r3
 8005774:	3710      	adds	r7, #16
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}

0800577a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800577a:	b580      	push	{r7, lr}
 800577c:	b086      	sub	sp, #24
 800577e:	af00      	add	r7, sp, #0
 8005780:	60f8      	str	r0, [r7, #12]
 8005782:	460b      	mov	r3, r1
 8005784:	607a      	str	r2, [r7, #4]
 8005786:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005788:	7afb      	ldrb	r3, [r7, #11]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d137      	bne.n	80057fe <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005794:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800579c:	2b03      	cmp	r3, #3
 800579e:	d14a      	bne.n	8005836 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	689a      	ldr	r2, [r3, #8]
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d913      	bls.n	80057d4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	689a      	ldr	r2, [r3, #8]
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	1ad2      	subs	r2, r2, r3
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	68da      	ldr	r2, [r3, #12]
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	4293      	cmp	r3, r2
 80057c4:	bf28      	it	cs
 80057c6:	4613      	movcs	r3, r2
 80057c8:	461a      	mov	r2, r3
 80057ca:	6879      	ldr	r1, [r7, #4]
 80057cc:	68f8      	ldr	r0, [r7, #12]
 80057ce:	f000 ffd7 	bl	8006780 <USBD_CtlContinueRx>
 80057d2:	e030      	b.n	8005836 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057da:	691b      	ldr	r3, [r3, #16]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d00a      	beq.n	80057f6 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80057e6:	2b03      	cmp	r3, #3
 80057e8:	d105      	bne.n	80057f6 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	68f8      	ldr	r0, [r7, #12]
 80057f4:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80057f6:	68f8      	ldr	r0, [r7, #12]
 80057f8:	f000 ffd3 	bl	80067a2 <USBD_CtlSendStatus>
 80057fc:	e01b      	b.n	8005836 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005804:	699b      	ldr	r3, [r3, #24]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d013      	beq.n	8005832 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005810:	2b03      	cmp	r3, #3
 8005812:	d10e      	bne.n	8005832 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800581a:	699b      	ldr	r3, [r3, #24]
 800581c:	7afa      	ldrb	r2, [r7, #11]
 800581e:	4611      	mov	r1, r2
 8005820:	68f8      	ldr	r0, [r7, #12]
 8005822:	4798      	blx	r3
 8005824:	4603      	mov	r3, r0
 8005826:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005828:	7dfb      	ldrb	r3, [r7, #23]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d003      	beq.n	8005836 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800582e:	7dfb      	ldrb	r3, [r7, #23]
 8005830:	e002      	b.n	8005838 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005832:	2303      	movs	r3, #3
 8005834:	e000      	b.n	8005838 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8005836:	2300      	movs	r3, #0
}
 8005838:	4618      	mov	r0, r3
 800583a:	3718      	adds	r7, #24
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b086      	sub	sp, #24
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	460b      	mov	r3, r1
 800584a:	607a      	str	r2, [r7, #4]
 800584c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800584e:	7afb      	ldrb	r3, [r7, #11]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d16a      	bne.n	800592a <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	3314      	adds	r3, #20
 8005858:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005860:	2b02      	cmp	r3, #2
 8005862:	d155      	bne.n	8005910 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	689a      	ldr	r2, [r3, #8]
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	429a      	cmp	r2, r3
 800586e:	d914      	bls.n	800589a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	689a      	ldr	r2, [r3, #8]
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	1ad2      	subs	r2, r2, r3
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	461a      	mov	r2, r3
 8005884:	6879      	ldr	r1, [r7, #4]
 8005886:	68f8      	ldr	r0, [r7, #12]
 8005888:	f000 ff4c 	bl	8006724 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800588c:	2300      	movs	r3, #0
 800588e:	2200      	movs	r2, #0
 8005890:	2100      	movs	r1, #0
 8005892:	68f8      	ldr	r0, [r7, #12]
 8005894:	f004 f9ee 	bl	8009c74 <USBD_LL_PrepareReceive>
 8005898:	e03a      	b.n	8005910 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	68da      	ldr	r2, [r3, #12]
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d11c      	bne.n	80058e0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	685a      	ldr	r2, [r3, #4]
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d316      	bcc.n	80058e0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	685a      	ldr	r2, [r3, #4]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80058bc:	429a      	cmp	r2, r3
 80058be:	d20f      	bcs.n	80058e0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80058c0:	2200      	movs	r2, #0
 80058c2:	2100      	movs	r1, #0
 80058c4:	68f8      	ldr	r0, [r7, #12]
 80058c6:	f000 ff2d 	bl	8006724 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80058d2:	2300      	movs	r3, #0
 80058d4:	2200      	movs	r2, #0
 80058d6:	2100      	movs	r1, #0
 80058d8:	68f8      	ldr	r0, [r7, #12]
 80058da:	f004 f9cb 	bl	8009c74 <USBD_LL_PrepareReceive>
 80058de:	e017      	b.n	8005910 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d00a      	beq.n	8005902 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80058f2:	2b03      	cmp	r3, #3
 80058f4:	d105      	bne.n	8005902 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	68f8      	ldr	r0, [r7, #12]
 8005900:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005902:	2180      	movs	r1, #128	; 0x80
 8005904:	68f8      	ldr	r0, [r7, #12]
 8005906:	f004 f90b 	bl	8009b20 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800590a:	68f8      	ldr	r0, [r7, #12]
 800590c:	f000 ff5c 	bl	80067c8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005916:	2b01      	cmp	r3, #1
 8005918:	d123      	bne.n	8005962 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800591a:	68f8      	ldr	r0, [r7, #12]
 800591c:	f7ff fe9b 	bl	8005656 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2200      	movs	r2, #0
 8005924:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005928:	e01b      	b.n	8005962 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005930:	695b      	ldr	r3, [r3, #20]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d013      	beq.n	800595e <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800593c:	2b03      	cmp	r3, #3
 800593e:	d10e      	bne.n	800595e <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005946:	695b      	ldr	r3, [r3, #20]
 8005948:	7afa      	ldrb	r2, [r7, #11]
 800594a:	4611      	mov	r1, r2
 800594c:	68f8      	ldr	r0, [r7, #12]
 800594e:	4798      	blx	r3
 8005950:	4603      	mov	r3, r0
 8005952:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005954:	7dfb      	ldrb	r3, [r7, #23]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d003      	beq.n	8005962 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800595a:	7dfb      	ldrb	r3, [r7, #23]
 800595c:	e002      	b.n	8005964 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800595e:	2303      	movs	r3, #3
 8005960:	e000      	b.n	8005964 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8005962:	2300      	movs	r3, #0
}
 8005964:	4618      	mov	r0, r3
 8005966:	3718      	adds	r7, #24
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}

0800596c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b082      	sub	sp, #8
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005998:	2b00      	cmp	r3, #0
 800599a:	d009      	beq.n	80059b0 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	6852      	ldr	r2, [r2, #4]
 80059a8:	b2d2      	uxtb	r2, r2
 80059aa:	4611      	mov	r1, r2
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80059b0:	2340      	movs	r3, #64	; 0x40
 80059b2:	2200      	movs	r2, #0
 80059b4:	2100      	movs	r1, #0
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f004 f86d 	bl	8009a96 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2240      	movs	r2, #64	; 0x40
 80059c8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80059cc:	2340      	movs	r3, #64	; 0x40
 80059ce:	2200      	movs	r2, #0
 80059d0:	2180      	movs	r1, #128	; 0x80
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f004 f85f 	bl	8009a96 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2240      	movs	r2, #64	; 0x40
 80059e2:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80059e4:	2300      	movs	r3, #0
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3708      	adds	r7, #8
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}

080059ee <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80059ee:	b480      	push	{r7}
 80059f0:	b083      	sub	sp, #12
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	6078      	str	r0, [r7, #4]
 80059f6:	460b      	mov	r3, r1
 80059f8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	78fa      	ldrb	r2, [r7, #3]
 80059fe:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	370c      	adds	r7, #12
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr

08005a0e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005a0e:	b480      	push	{r7}
 8005a10:	b083      	sub	sp, #12
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2204      	movs	r2, #4
 8005a26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005a2a:	2300      	movs	r3, #0
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	370c      	adds	r7, #12
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr

08005a38 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b083      	sub	sp, #12
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a46:	2b04      	cmp	r3, #4
 8005a48:	d105      	bne.n	8005a56 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005a56:	2300      	movs	r3, #0
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	370c      	adds	r7, #12
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b082      	sub	sp, #8
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a72:	2b03      	cmp	r3, #3
 8005a74:	d10b      	bne.n	8005a8e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a7c:	69db      	ldr	r3, [r3, #28]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d005      	beq.n	8005a8e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a88:	69db      	ldr	r3, [r3, #28]
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005a8e:	2300      	movs	r3, #0
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3708      	adds	r7, #8
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b083      	sub	sp, #12
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	370c      	adds	r7, #12
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr

08005ab2 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005ab2:	b480      	push	{r7}
 8005ab4:	b083      	sub	sp, #12
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
 8005aba:	460b      	mov	r3, r1
 8005abc:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8005abe:	2300      	movs	r3, #0
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	370c      	adds	r7, #12
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	370c      	adds	r7, #12
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr

08005ae2 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005ae2:	b580      	push	{r7, lr}
 8005ae4:	b082      	sub	sp, #8
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2201      	movs	r2, #1
 8005aee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d009      	beq.n	8005b10 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	6852      	ldr	r2, [r2, #4]
 8005b08:	b2d2      	uxtb	r2, r2
 8005b0a:	4611      	mov	r1, r2
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	4798      	blx	r3
  }

  return USBD_OK;
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3708      	adds	r7, #8
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}

08005b1a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005b1a:	b480      	push	{r7}
 8005b1c:	b087      	sub	sp, #28
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	3301      	adds	r3, #1
 8005b30:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005b38:	8a3b      	ldrh	r3, [r7, #16]
 8005b3a:	021b      	lsls	r3, r3, #8
 8005b3c:	b21a      	sxth	r2, r3
 8005b3e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	b21b      	sxth	r3, r3
 8005b46:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005b48:	89fb      	ldrh	r3, [r7, #14]
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	371c      	adds	r7, #28
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr
	...

08005b58 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b084      	sub	sp, #16
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b62:	2300      	movs	r3, #0
 8005b64:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b6e:	2b20      	cmp	r3, #32
 8005b70:	d004      	beq.n	8005b7c <USBD_StdDevReq+0x24>
 8005b72:	2b40      	cmp	r3, #64	; 0x40
 8005b74:	d002      	beq.n	8005b7c <USBD_StdDevReq+0x24>
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d00a      	beq.n	8005b90 <USBD_StdDevReq+0x38>
 8005b7a:	e050      	b.n	8005c1e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	6839      	ldr	r1, [r7, #0]
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	4798      	blx	r3
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	73fb      	strb	r3, [r7, #15]
    break;
 8005b8e:	e04b      	b.n	8005c28 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	785b      	ldrb	r3, [r3, #1]
 8005b94:	2b09      	cmp	r3, #9
 8005b96:	d83c      	bhi.n	8005c12 <USBD_StdDevReq+0xba>
 8005b98:	a201      	add	r2, pc, #4	; (adr r2, 8005ba0 <USBD_StdDevReq+0x48>)
 8005b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b9e:	bf00      	nop
 8005ba0:	08005bf5 	.word	0x08005bf5
 8005ba4:	08005c09 	.word	0x08005c09
 8005ba8:	08005c13 	.word	0x08005c13
 8005bac:	08005bff 	.word	0x08005bff
 8005bb0:	08005c13 	.word	0x08005c13
 8005bb4:	08005bd3 	.word	0x08005bd3
 8005bb8:	08005bc9 	.word	0x08005bc9
 8005bbc:	08005c13 	.word	0x08005c13
 8005bc0:	08005beb 	.word	0x08005beb
 8005bc4:	08005bdd 	.word	0x08005bdd
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8005bc8:	6839      	ldr	r1, [r7, #0]
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 f9ce 	bl	8005f6c <USBD_GetDescriptor>
      break;
 8005bd0:	e024      	b.n	8005c1c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8005bd2:	6839      	ldr	r1, [r7, #0]
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f000 fb5d 	bl	8006294 <USBD_SetAddress>
      break;
 8005bda:	e01f      	b.n	8005c1c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8005bdc:	6839      	ldr	r1, [r7, #0]
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f000 fb9a 	bl	8006318 <USBD_SetConfig>
 8005be4:	4603      	mov	r3, r0
 8005be6:	73fb      	strb	r3, [r7, #15]
      break;
 8005be8:	e018      	b.n	8005c1c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8005bea:	6839      	ldr	r1, [r7, #0]
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f000 fc37 	bl	8006460 <USBD_GetConfig>
      break;
 8005bf2:	e013      	b.n	8005c1c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8005bf4:	6839      	ldr	r1, [r7, #0]
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 fc66 	bl	80064c8 <USBD_GetStatus>
      break;
 8005bfc:	e00e      	b.n	8005c1c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8005bfe:	6839      	ldr	r1, [r7, #0]
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f000 fc94 	bl	800652e <USBD_SetFeature>
      break;
 8005c06:	e009      	b.n	8005c1c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8005c08:	6839      	ldr	r1, [r7, #0]
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 fca3 	bl	8006556 <USBD_ClrFeature>
      break;
 8005c10:	e004      	b.n	8005c1c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8005c12:	6839      	ldr	r1, [r7, #0]
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f000 fcf9 	bl	800660c <USBD_CtlError>
      break;
 8005c1a:	bf00      	nop
    }
    break;
 8005c1c:	e004      	b.n	8005c28 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8005c1e:	6839      	ldr	r1, [r7, #0]
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f000 fcf3 	bl	800660c <USBD_CtlError>
    break;
 8005c26:	bf00      	nop
  }

  return ret;
 8005c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3710      	adds	r7, #16
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop

08005c34 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005c4a:	2b20      	cmp	r3, #32
 8005c4c:	d003      	beq.n	8005c56 <USBD_StdItfReq+0x22>
 8005c4e:	2b40      	cmp	r3, #64	; 0x40
 8005c50:	d001      	beq.n	8005c56 <USBD_StdItfReq+0x22>
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d12a      	bne.n	8005cac <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c5c:	3b01      	subs	r3, #1
 8005c5e:	2b02      	cmp	r3, #2
 8005c60:	d81d      	bhi.n	8005c9e <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	889b      	ldrh	r3, [r3, #4]
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d813      	bhi.n	8005c94 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	6839      	ldr	r1, [r7, #0]
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	4798      	blx	r3
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	88db      	ldrh	r3, [r3, #6]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d110      	bne.n	8005ca8 <USBD_StdItfReq+0x74>
 8005c86:	7bfb      	ldrb	r3, [r7, #15]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d10d      	bne.n	8005ca8 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f000 fd88 	bl	80067a2 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8005c92:	e009      	b.n	8005ca8 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8005c94:	6839      	ldr	r1, [r7, #0]
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 fcb8 	bl	800660c <USBD_CtlError>
      break;
 8005c9c:	e004      	b.n	8005ca8 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8005c9e:	6839      	ldr	r1, [r7, #0]
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 fcb3 	bl	800660c <USBD_CtlError>
      break;
 8005ca6:	e000      	b.n	8005caa <USBD_StdItfReq+0x76>
      break;
 8005ca8:	bf00      	nop
    }
    break;
 8005caa:	e004      	b.n	8005cb6 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8005cac:	6839      	ldr	r1, [r7, #0]
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f000 fcac 	bl	800660c <USBD_CtlError>
    break;
 8005cb4:	bf00      	nop
  }

  return ret;
 8005cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3710      	adds	r7, #16
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	889b      	ldrh	r3, [r3, #4]
 8005cd2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005cdc:	2b20      	cmp	r3, #32
 8005cde:	d004      	beq.n	8005cea <USBD_StdEPReq+0x2a>
 8005ce0:	2b40      	cmp	r3, #64	; 0x40
 8005ce2:	d002      	beq.n	8005cea <USBD_StdEPReq+0x2a>
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d00a      	beq.n	8005cfe <USBD_StdEPReq+0x3e>
 8005ce8:	e135      	b.n	8005f56 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	6839      	ldr	r1, [r7, #0]
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	4798      	blx	r3
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	73fb      	strb	r3, [r7, #15]
    break;
 8005cfc:	e130      	b.n	8005f60 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	785b      	ldrb	r3, [r3, #1]
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d03e      	beq.n	8005d84 <USBD_StdEPReq+0xc4>
 8005d06:	2b03      	cmp	r3, #3
 8005d08:	d002      	beq.n	8005d10 <USBD_StdEPReq+0x50>
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d077      	beq.n	8005dfe <USBD_StdEPReq+0x13e>
 8005d0e:	e11c      	b.n	8005f4a <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d16:	2b02      	cmp	r3, #2
 8005d18:	d002      	beq.n	8005d20 <USBD_StdEPReq+0x60>
 8005d1a:	2b03      	cmp	r3, #3
 8005d1c:	d015      	beq.n	8005d4a <USBD_StdEPReq+0x8a>
 8005d1e:	e02b      	b.n	8005d78 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005d20:	7bbb      	ldrb	r3, [r7, #14]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d00c      	beq.n	8005d40 <USBD_StdEPReq+0x80>
 8005d26:	7bbb      	ldrb	r3, [r7, #14]
 8005d28:	2b80      	cmp	r3, #128	; 0x80
 8005d2a:	d009      	beq.n	8005d40 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8005d2c:	7bbb      	ldrb	r3, [r7, #14]
 8005d2e:	4619      	mov	r1, r3
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f003 fef5 	bl	8009b20 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005d36:	2180      	movs	r1, #128	; 0x80
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f003 fef1 	bl	8009b20 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005d3e:	e020      	b.n	8005d82 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8005d40:	6839      	ldr	r1, [r7, #0]
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 fc62 	bl	800660c <USBD_CtlError>
        break;
 8005d48:	e01b      	b.n	8005d82 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	885b      	ldrh	r3, [r3, #2]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d10e      	bne.n	8005d70 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005d52:	7bbb      	ldrb	r3, [r7, #14]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d00b      	beq.n	8005d70 <USBD_StdEPReq+0xb0>
 8005d58:	7bbb      	ldrb	r3, [r7, #14]
 8005d5a:	2b80      	cmp	r3, #128	; 0x80
 8005d5c:	d008      	beq.n	8005d70 <USBD_StdEPReq+0xb0>
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	88db      	ldrh	r3, [r3, #6]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d104      	bne.n	8005d70 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8005d66:	7bbb      	ldrb	r3, [r7, #14]
 8005d68:	4619      	mov	r1, r3
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f003 fed8 	bl	8009b20 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f000 fd16 	bl	80067a2 <USBD_CtlSendStatus>

        break;
 8005d76:	e004      	b.n	8005d82 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8005d78:	6839      	ldr	r1, [r7, #0]
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 fc46 	bl	800660c <USBD_CtlError>
        break;
 8005d80:	bf00      	nop
      }
      break;
 8005d82:	e0e7      	b.n	8005f54 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d8a:	2b02      	cmp	r3, #2
 8005d8c:	d002      	beq.n	8005d94 <USBD_StdEPReq+0xd4>
 8005d8e:	2b03      	cmp	r3, #3
 8005d90:	d015      	beq.n	8005dbe <USBD_StdEPReq+0xfe>
 8005d92:	e02d      	b.n	8005df0 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005d94:	7bbb      	ldrb	r3, [r7, #14]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d00c      	beq.n	8005db4 <USBD_StdEPReq+0xf4>
 8005d9a:	7bbb      	ldrb	r3, [r7, #14]
 8005d9c:	2b80      	cmp	r3, #128	; 0x80
 8005d9e:	d009      	beq.n	8005db4 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8005da0:	7bbb      	ldrb	r3, [r7, #14]
 8005da2:	4619      	mov	r1, r3
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f003 febb 	bl	8009b20 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005daa:	2180      	movs	r1, #128	; 0x80
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f003 feb7 	bl	8009b20 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005db2:	e023      	b.n	8005dfc <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8005db4:	6839      	ldr	r1, [r7, #0]
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 fc28 	bl	800660c <USBD_CtlError>
        break;
 8005dbc:	e01e      	b.n	8005dfc <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	885b      	ldrh	r3, [r3, #2]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d119      	bne.n	8005dfa <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8005dc6:	7bbb      	ldrb	r3, [r7, #14]
 8005dc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d004      	beq.n	8005dda <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005dd0:	7bbb      	ldrb	r3, [r7, #14]
 8005dd2:	4619      	mov	r1, r3
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f003 fec2 	bl	8009b5e <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 fce1 	bl	80067a2 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	6839      	ldr	r1, [r7, #0]
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	4798      	blx	r3
        }
        break;
 8005dee:	e004      	b.n	8005dfa <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8005df0:	6839      	ldr	r1, [r7, #0]
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 fc0a 	bl	800660c <USBD_CtlError>
        break;
 8005df8:	e000      	b.n	8005dfc <USBD_StdEPReq+0x13c>
        break;
 8005dfa:	bf00      	nop
      }
      break;
 8005dfc:	e0aa      	b.n	8005f54 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e04:	2b02      	cmp	r3, #2
 8005e06:	d002      	beq.n	8005e0e <USBD_StdEPReq+0x14e>
 8005e08:	2b03      	cmp	r3, #3
 8005e0a:	d032      	beq.n	8005e72 <USBD_StdEPReq+0x1b2>
 8005e0c:	e097      	b.n	8005f3e <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005e0e:	7bbb      	ldrb	r3, [r7, #14]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d007      	beq.n	8005e24 <USBD_StdEPReq+0x164>
 8005e14:	7bbb      	ldrb	r3, [r7, #14]
 8005e16:	2b80      	cmp	r3, #128	; 0x80
 8005e18:	d004      	beq.n	8005e24 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8005e1a:	6839      	ldr	r1, [r7, #0]
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f000 fbf5 	bl	800660c <USBD_CtlError>
          break;
 8005e22:	e091      	b.n	8005f48 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005e24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	da0b      	bge.n	8005e44 <USBD_StdEPReq+0x184>
 8005e2c:	7bbb      	ldrb	r3, [r7, #14]
 8005e2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005e32:	4613      	mov	r3, r2
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	4413      	add	r3, r2
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	3310      	adds	r3, #16
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	4413      	add	r3, r2
 8005e40:	3304      	adds	r3, #4
 8005e42:	e00b      	b.n	8005e5c <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8005e44:	7bbb      	ldrb	r3, [r7, #14]
 8005e46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005e4a:	4613      	mov	r3, r2
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	4413      	add	r3, r2
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	4413      	add	r3, r2
 8005e5a:	3304      	adds	r3, #4
 8005e5c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	2200      	movs	r2, #0
 8005e62:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	2202      	movs	r2, #2
 8005e68:	4619      	mov	r1, r3
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 fc3f 	bl	80066ee <USBD_CtlSendData>
        break;
 8005e70:	e06a      	b.n	8005f48 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8005e72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	da11      	bge.n	8005e9e <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005e7a:	7bbb      	ldrb	r3, [r7, #14]
 8005e7c:	f003 020f 	and.w	r2, r3, #15
 8005e80:	6879      	ldr	r1, [r7, #4]
 8005e82:	4613      	mov	r3, r2
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	4413      	add	r3, r2
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	440b      	add	r3, r1
 8005e8c:	3324      	adds	r3, #36	; 0x24
 8005e8e:	881b      	ldrh	r3, [r3, #0]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d117      	bne.n	8005ec4 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8005e94:	6839      	ldr	r1, [r7, #0]
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 fbb8 	bl	800660c <USBD_CtlError>
            break;
 8005e9c:	e054      	b.n	8005f48 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005e9e:	7bbb      	ldrb	r3, [r7, #14]
 8005ea0:	f003 020f 	and.w	r2, r3, #15
 8005ea4:	6879      	ldr	r1, [r7, #4]
 8005ea6:	4613      	mov	r3, r2
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	4413      	add	r3, r2
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	440b      	add	r3, r1
 8005eb0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005eb4:	881b      	ldrh	r3, [r3, #0]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d104      	bne.n	8005ec4 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8005eba:	6839      	ldr	r1, [r7, #0]
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f000 fba5 	bl	800660c <USBD_CtlError>
            break;
 8005ec2:	e041      	b.n	8005f48 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005ec4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	da0b      	bge.n	8005ee4 <USBD_StdEPReq+0x224>
 8005ecc:	7bbb      	ldrb	r3, [r7, #14]
 8005ece:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005ed2:	4613      	mov	r3, r2
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	4413      	add	r3, r2
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	3310      	adds	r3, #16
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	4413      	add	r3, r2
 8005ee0:	3304      	adds	r3, #4
 8005ee2:	e00b      	b.n	8005efc <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8005ee4:	7bbb      	ldrb	r3, [r7, #14]
 8005ee6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005eea:	4613      	mov	r3, r2
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	4413      	add	r3, r2
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	4413      	add	r3, r2
 8005efa:	3304      	adds	r3, #4
 8005efc:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005efe:	7bbb      	ldrb	r3, [r7, #14]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d002      	beq.n	8005f0a <USBD_StdEPReq+0x24a>
 8005f04:	7bbb      	ldrb	r3, [r7, #14]
 8005f06:	2b80      	cmp	r3, #128	; 0x80
 8005f08:	d103      	bne.n	8005f12 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	601a      	str	r2, [r3, #0]
 8005f10:	e00e      	b.n	8005f30 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005f12:	7bbb      	ldrb	r3, [r7, #14]
 8005f14:	4619      	mov	r1, r3
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f003 fe40 	bl	8009b9c <USBD_LL_IsStallEP>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d003      	beq.n	8005f2a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	2201      	movs	r2, #1
 8005f26:	601a      	str	r2, [r3, #0]
 8005f28:	e002      	b.n	8005f30 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	2202      	movs	r2, #2
 8005f34:	4619      	mov	r1, r3
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 fbd9 	bl	80066ee <USBD_CtlSendData>
          break;
 8005f3c:	e004      	b.n	8005f48 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8005f3e:	6839      	ldr	r1, [r7, #0]
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f000 fb63 	bl	800660c <USBD_CtlError>
        break;
 8005f46:	bf00      	nop
      }
      break;
 8005f48:	e004      	b.n	8005f54 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8005f4a:	6839      	ldr	r1, [r7, #0]
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f000 fb5d 	bl	800660c <USBD_CtlError>
      break;
 8005f52:	bf00      	nop
    }
    break;
 8005f54:	e004      	b.n	8005f60 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8005f56:	6839      	ldr	r1, [r7, #0]
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 fb57 	bl	800660c <USBD_CtlError>
    break;
 8005f5e:	bf00      	nop
  }

  return ret;
 8005f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3710      	adds	r7, #16
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
	...

08005f6c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005f76:	2300      	movs	r3, #0
 8005f78:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	885b      	ldrh	r3, [r3, #2]
 8005f86:	0a1b      	lsrs	r3, r3, #8
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	3b01      	subs	r3, #1
 8005f8c:	2b0e      	cmp	r3, #14
 8005f8e:	f200 8152 	bhi.w	8006236 <USBD_GetDescriptor+0x2ca>
 8005f92:	a201      	add	r2, pc, #4	; (adr r2, 8005f98 <USBD_GetDescriptor+0x2c>)
 8005f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f98:	08006009 	.word	0x08006009
 8005f9c:	08006021 	.word	0x08006021
 8005fa0:	08006061 	.word	0x08006061
 8005fa4:	08006237 	.word	0x08006237
 8005fa8:	08006237 	.word	0x08006237
 8005fac:	080061d7 	.word	0x080061d7
 8005fb0:	08006203 	.word	0x08006203
 8005fb4:	08006237 	.word	0x08006237
 8005fb8:	08006237 	.word	0x08006237
 8005fbc:	08006237 	.word	0x08006237
 8005fc0:	08006237 	.word	0x08006237
 8005fc4:	08006237 	.word	0x08006237
 8005fc8:	08006237 	.word	0x08006237
 8005fcc:	08006237 	.word	0x08006237
 8005fd0:	08005fd5 	.word	0x08005fd5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fda:	69db      	ldr	r3, [r3, #28]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d00b      	beq.n	8005ff8 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fe6:	69db      	ldr	r3, [r3, #28]
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	7c12      	ldrb	r2, [r2, #16]
 8005fec:	f107 0108 	add.w	r1, r7, #8
 8005ff0:	4610      	mov	r0, r2
 8005ff2:	4798      	blx	r3
 8005ff4:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8005ff6:	e126      	b.n	8006246 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8005ff8:	6839      	ldr	r1, [r7, #0]
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 fb06 	bl	800660c <USBD_CtlError>
      err++;
 8006000:	7afb      	ldrb	r3, [r7, #11]
 8006002:	3301      	adds	r3, #1
 8006004:	72fb      	strb	r3, [r7, #11]
    break;
 8006006:	e11e      	b.n	8006246 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	7c12      	ldrb	r2, [r2, #16]
 8006014:	f107 0108 	add.w	r1, r7, #8
 8006018:	4610      	mov	r0, r2
 800601a:	4798      	blx	r3
 800601c:	60f8      	str	r0, [r7, #12]
    break;
 800601e:	e112      	b.n	8006246 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	7c1b      	ldrb	r3, [r3, #16]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d10d      	bne.n	8006044 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800602e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006030:	f107 0208 	add.w	r2, r7, #8
 8006034:	4610      	mov	r0, r2
 8006036:	4798      	blx	r3
 8006038:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	3301      	adds	r3, #1
 800603e:	2202      	movs	r2, #2
 8006040:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8006042:	e100      	b.n	8006246 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800604a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800604c:	f107 0208 	add.w	r2, r7, #8
 8006050:	4610      	mov	r0, r2
 8006052:	4798      	blx	r3
 8006054:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	3301      	adds	r3, #1
 800605a:	2202      	movs	r2, #2
 800605c:	701a      	strb	r2, [r3, #0]
    break;
 800605e:	e0f2      	b.n	8006246 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	885b      	ldrh	r3, [r3, #2]
 8006064:	b2db      	uxtb	r3, r3
 8006066:	2b05      	cmp	r3, #5
 8006068:	f200 80ac 	bhi.w	80061c4 <USBD_GetDescriptor+0x258>
 800606c:	a201      	add	r2, pc, #4	; (adr r2, 8006074 <USBD_GetDescriptor+0x108>)
 800606e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006072:	bf00      	nop
 8006074:	0800608d 	.word	0x0800608d
 8006078:	080060c1 	.word	0x080060c1
 800607c:	080060f5 	.word	0x080060f5
 8006080:	08006129 	.word	0x08006129
 8006084:	0800615d 	.word	0x0800615d
 8006088:	08006191 	.word	0x08006191
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d00b      	beq.n	80060b0 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	7c12      	ldrb	r2, [r2, #16]
 80060a4:	f107 0108 	add.w	r1, r7, #8
 80060a8:	4610      	mov	r0, r2
 80060aa:	4798      	blx	r3
 80060ac:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80060ae:	e091      	b.n	80061d4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80060b0:	6839      	ldr	r1, [r7, #0]
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 faaa 	bl	800660c <USBD_CtlError>
        err++;
 80060b8:	7afb      	ldrb	r3, [r7, #11]
 80060ba:	3301      	adds	r3, #1
 80060bc:	72fb      	strb	r3, [r7, #11]
      break;
 80060be:	e089      	b.n	80061d4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d00b      	beq.n	80060e4 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	7c12      	ldrb	r2, [r2, #16]
 80060d8:	f107 0108 	add.w	r1, r7, #8
 80060dc:	4610      	mov	r0, r2
 80060de:	4798      	blx	r3
 80060e0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80060e2:	e077      	b.n	80061d4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80060e4:	6839      	ldr	r1, [r7, #0]
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 fa90 	bl	800660c <USBD_CtlError>
        err++;
 80060ec:	7afb      	ldrb	r3, [r7, #11]
 80060ee:	3301      	adds	r3, #1
 80060f0:	72fb      	strb	r3, [r7, #11]
      break;
 80060f2:	e06f      	b.n	80061d4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d00b      	beq.n	8006118 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006106:	68db      	ldr	r3, [r3, #12]
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	7c12      	ldrb	r2, [r2, #16]
 800610c:	f107 0108 	add.w	r1, r7, #8
 8006110:	4610      	mov	r0, r2
 8006112:	4798      	blx	r3
 8006114:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006116:	e05d      	b.n	80061d4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006118:	6839      	ldr	r1, [r7, #0]
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 fa76 	bl	800660c <USBD_CtlError>
        err++;
 8006120:	7afb      	ldrb	r3, [r7, #11]
 8006122:	3301      	adds	r3, #1
 8006124:	72fb      	strb	r3, [r7, #11]
      break;
 8006126:	e055      	b.n	80061d4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800612e:	691b      	ldr	r3, [r3, #16]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d00b      	beq.n	800614c <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800613a:	691b      	ldr	r3, [r3, #16]
 800613c:	687a      	ldr	r2, [r7, #4]
 800613e:	7c12      	ldrb	r2, [r2, #16]
 8006140:	f107 0108 	add.w	r1, r7, #8
 8006144:	4610      	mov	r0, r2
 8006146:	4798      	blx	r3
 8006148:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800614a:	e043      	b.n	80061d4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800614c:	6839      	ldr	r1, [r7, #0]
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 fa5c 	bl	800660c <USBD_CtlError>
        err++;
 8006154:	7afb      	ldrb	r3, [r7, #11]
 8006156:	3301      	adds	r3, #1
 8006158:	72fb      	strb	r3, [r7, #11]
      break;
 800615a:	e03b      	b.n	80061d4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006162:	695b      	ldr	r3, [r3, #20]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d00b      	beq.n	8006180 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800616e:	695b      	ldr	r3, [r3, #20]
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	7c12      	ldrb	r2, [r2, #16]
 8006174:	f107 0108 	add.w	r1, r7, #8
 8006178:	4610      	mov	r0, r2
 800617a:	4798      	blx	r3
 800617c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800617e:	e029      	b.n	80061d4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006180:	6839      	ldr	r1, [r7, #0]
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 fa42 	bl	800660c <USBD_CtlError>
        err++;
 8006188:	7afb      	ldrb	r3, [r7, #11]
 800618a:	3301      	adds	r3, #1
 800618c:	72fb      	strb	r3, [r7, #11]
      break;
 800618e:	e021      	b.n	80061d4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006196:	699b      	ldr	r3, [r3, #24]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d00b      	beq.n	80061b4 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061a2:	699b      	ldr	r3, [r3, #24]
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	7c12      	ldrb	r2, [r2, #16]
 80061a8:	f107 0108 	add.w	r1, r7, #8
 80061ac:	4610      	mov	r0, r2
 80061ae:	4798      	blx	r3
 80061b0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80061b2:	e00f      	b.n	80061d4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80061b4:	6839      	ldr	r1, [r7, #0]
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f000 fa28 	bl	800660c <USBD_CtlError>
        err++;
 80061bc:	7afb      	ldrb	r3, [r7, #11]
 80061be:	3301      	adds	r3, #1
 80061c0:	72fb      	strb	r3, [r7, #11]
      break;
 80061c2:	e007      	b.n	80061d4 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 80061c4:	6839      	ldr	r1, [r7, #0]
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 fa20 	bl	800660c <USBD_CtlError>
      err++;
 80061cc:	7afb      	ldrb	r3, [r7, #11]
 80061ce:	3301      	adds	r3, #1
 80061d0:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 80061d2:	bf00      	nop
    }
    break;
 80061d4:	e037      	b.n	8006246 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	7c1b      	ldrb	r3, [r3, #16]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d109      	bne.n	80061f2 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061e6:	f107 0208 	add.w	r2, r7, #8
 80061ea:	4610      	mov	r0, r2
 80061ec:	4798      	blx	r3
 80061ee:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80061f0:	e029      	b.n	8006246 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80061f2:	6839      	ldr	r1, [r7, #0]
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 fa09 	bl	800660c <USBD_CtlError>
      err++;
 80061fa:	7afb      	ldrb	r3, [r7, #11]
 80061fc:	3301      	adds	r3, #1
 80061fe:	72fb      	strb	r3, [r7, #11]
    break;
 8006200:	e021      	b.n	8006246 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	7c1b      	ldrb	r3, [r3, #16]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d10d      	bne.n	8006226 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006212:	f107 0208 	add.w	r2, r7, #8
 8006216:	4610      	mov	r0, r2
 8006218:	4798      	blx	r3
 800621a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	3301      	adds	r3, #1
 8006220:	2207      	movs	r2, #7
 8006222:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006224:	e00f      	b.n	8006246 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8006226:	6839      	ldr	r1, [r7, #0]
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f000 f9ef 	bl	800660c <USBD_CtlError>
      err++;
 800622e:	7afb      	ldrb	r3, [r7, #11]
 8006230:	3301      	adds	r3, #1
 8006232:	72fb      	strb	r3, [r7, #11]
    break;
 8006234:	e007      	b.n	8006246 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8006236:	6839      	ldr	r1, [r7, #0]
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f000 f9e7 	bl	800660c <USBD_CtlError>
    err++;
 800623e:	7afb      	ldrb	r3, [r7, #11]
 8006240:	3301      	adds	r3, #1
 8006242:	72fb      	strb	r3, [r7, #11]
    break;
 8006244:	bf00      	nop
  }

  if (err != 0U)
 8006246:	7afb      	ldrb	r3, [r7, #11]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d11e      	bne.n	800628a <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	88db      	ldrh	r3, [r3, #6]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d016      	beq.n	8006282 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8006254:	893b      	ldrh	r3, [r7, #8]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d00e      	beq.n	8006278 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	88da      	ldrh	r2, [r3, #6]
 800625e:	893b      	ldrh	r3, [r7, #8]
 8006260:	4293      	cmp	r3, r2
 8006262:	bf28      	it	cs
 8006264:	4613      	movcs	r3, r2
 8006266:	b29b      	uxth	r3, r3
 8006268:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800626a:	893b      	ldrh	r3, [r7, #8]
 800626c:	461a      	mov	r2, r3
 800626e:	68f9      	ldr	r1, [r7, #12]
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 fa3c 	bl	80066ee <USBD_CtlSendData>
 8006276:	e009      	b.n	800628c <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8006278:	6839      	ldr	r1, [r7, #0]
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 f9c6 	bl	800660c <USBD_CtlError>
 8006280:	e004      	b.n	800628c <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 fa8d 	bl	80067a2 <USBD_CtlSendStatus>
 8006288:	e000      	b.n	800628c <USBD_GetDescriptor+0x320>
    return;
 800628a:	bf00      	nop
    }
  }
}
 800628c:	3710      	adds	r7, #16
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
 8006292:	bf00      	nop

08006294 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	889b      	ldrh	r3, [r3, #4]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d130      	bne.n	8006308 <USBD_SetAddress+0x74>
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	88db      	ldrh	r3, [r3, #6]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d12c      	bne.n	8006308 <USBD_SetAddress+0x74>
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	885b      	ldrh	r3, [r3, #2]
 80062b2:	2b7f      	cmp	r3, #127	; 0x7f
 80062b4:	d828      	bhi.n	8006308 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	885b      	ldrh	r3, [r3, #2]
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062c0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062c8:	2b03      	cmp	r3, #3
 80062ca:	d104      	bne.n	80062d6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80062cc:	6839      	ldr	r1, [r7, #0]
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 f99c 	bl	800660c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062d4:	e01c      	b.n	8006310 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	7bfa      	ldrb	r2, [r7, #15]
 80062da:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80062de:	7bfb      	ldrb	r3, [r7, #15]
 80062e0:	4619      	mov	r1, r3
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f003 fc86 	bl	8009bf4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f000 fa5a 	bl	80067a2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80062ee:	7bfb      	ldrb	r3, [r7, #15]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d004      	beq.n	80062fe <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2202      	movs	r2, #2
 80062f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062fc:	e008      	b.n	8006310 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2201      	movs	r2, #1
 8006302:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006306:	e003      	b.n	8006310 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006308:	6839      	ldr	r1, [r7, #0]
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f000 f97e 	bl	800660c <USBD_CtlError>
  }
}
 8006310:	bf00      	nop
 8006312:	3710      	adds	r7, #16
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}

08006318 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006322:	2300      	movs	r3, #0
 8006324:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	885b      	ldrh	r3, [r3, #2]
 800632a:	b2da      	uxtb	r2, r3
 800632c:	4b4b      	ldr	r3, [pc, #300]	; (800645c <USBD_SetConfig+0x144>)
 800632e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006330:	4b4a      	ldr	r3, [pc, #296]	; (800645c <USBD_SetConfig+0x144>)
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	2b01      	cmp	r3, #1
 8006336:	d905      	bls.n	8006344 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006338:	6839      	ldr	r1, [r7, #0]
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 f966 	bl	800660c <USBD_CtlError>
    return USBD_FAIL;
 8006340:	2303      	movs	r3, #3
 8006342:	e087      	b.n	8006454 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800634a:	2b02      	cmp	r3, #2
 800634c:	d002      	beq.n	8006354 <USBD_SetConfig+0x3c>
 800634e:	2b03      	cmp	r3, #3
 8006350:	d025      	beq.n	800639e <USBD_SetConfig+0x86>
 8006352:	e071      	b.n	8006438 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8006354:	4b41      	ldr	r3, [pc, #260]	; (800645c <USBD_SetConfig+0x144>)
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d01c      	beq.n	8006396 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800635c:	4b3f      	ldr	r3, [pc, #252]	; (800645c <USBD_SetConfig+0x144>)
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	461a      	mov	r2, r3
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006366:	4b3d      	ldr	r3, [pc, #244]	; (800645c <USBD_SetConfig+0x144>)
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	4619      	mov	r1, r3
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f7ff f97d 	bl	800566c <USBD_SetClassConfig>
 8006372:	4603      	mov	r3, r0
 8006374:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8006376:	7bfb      	ldrb	r3, [r7, #15]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d004      	beq.n	8006386 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800637c:	6839      	ldr	r1, [r7, #0]
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 f944 	bl	800660c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006384:	e065      	b.n	8006452 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 fa0b 	bl	80067a2 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2203      	movs	r2, #3
 8006390:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006394:	e05d      	b.n	8006452 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 fa03 	bl	80067a2 <USBD_CtlSendStatus>
    break;
 800639c:	e059      	b.n	8006452 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800639e:	4b2f      	ldr	r3, [pc, #188]	; (800645c <USBD_SetConfig+0x144>)
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d112      	bne.n	80063cc <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2202      	movs	r2, #2
 80063aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 80063ae:	4b2b      	ldr	r3, [pc, #172]	; (800645c <USBD_SetConfig+0x144>)
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	461a      	mov	r2, r3
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80063b8:	4b28      	ldr	r3, [pc, #160]	; (800645c <USBD_SetConfig+0x144>)
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	4619      	mov	r1, r3
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f7ff f970 	bl	80056a4 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f000 f9ec 	bl	80067a2 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80063ca:	e042      	b.n	8006452 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80063cc:	4b23      	ldr	r3, [pc, #140]	; (800645c <USBD_SetConfig+0x144>)
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	461a      	mov	r2, r3
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d02a      	beq.n	8006430 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	4619      	mov	r1, r3
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f7ff f95e 	bl	80056a4 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80063e8:	4b1c      	ldr	r3, [pc, #112]	; (800645c <USBD_SetConfig+0x144>)
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	461a      	mov	r2, r3
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80063f2:	4b1a      	ldr	r3, [pc, #104]	; (800645c <USBD_SetConfig+0x144>)
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	4619      	mov	r1, r3
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f7ff f937 	bl	800566c <USBD_SetClassConfig>
 80063fe:	4603      	mov	r3, r0
 8006400:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8006402:	7bfb      	ldrb	r3, [r7, #15]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d00f      	beq.n	8006428 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8006408:	6839      	ldr	r1, [r7, #0]
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 f8fe 	bl	800660c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	b2db      	uxtb	r3, r3
 8006416:	4619      	mov	r1, r3
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f7ff f943 	bl	80056a4 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2202      	movs	r2, #2
 8006422:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006426:	e014      	b.n	8006452 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f000 f9ba 	bl	80067a2 <USBD_CtlSendStatus>
    break;
 800642e:	e010      	b.n	8006452 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f000 f9b6 	bl	80067a2 <USBD_CtlSendStatus>
    break;
 8006436:	e00c      	b.n	8006452 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8006438:	6839      	ldr	r1, [r7, #0]
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 f8e6 	bl	800660c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006440:	4b06      	ldr	r3, [pc, #24]	; (800645c <USBD_SetConfig+0x144>)
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	4619      	mov	r1, r3
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f7ff f92c 	bl	80056a4 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800644c:	2303      	movs	r3, #3
 800644e:	73fb      	strb	r3, [r7, #15]
    break;
 8006450:	bf00      	nop
  }

  return ret;
 8006452:	7bfb      	ldrb	r3, [r7, #15]
}
 8006454:	4618      	mov	r0, r3
 8006456:	3710      	adds	r7, #16
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}
 800645c:	20000218 	.word	0x20000218

08006460 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b082      	sub	sp, #8
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	88db      	ldrh	r3, [r3, #6]
 800646e:	2b01      	cmp	r3, #1
 8006470:	d004      	beq.n	800647c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006472:	6839      	ldr	r1, [r7, #0]
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 f8c9 	bl	800660c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800647a:	e021      	b.n	80064c0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006482:	2b01      	cmp	r3, #1
 8006484:	db17      	blt.n	80064b6 <USBD_GetConfig+0x56>
 8006486:	2b02      	cmp	r3, #2
 8006488:	dd02      	ble.n	8006490 <USBD_GetConfig+0x30>
 800648a:	2b03      	cmp	r3, #3
 800648c:	d00b      	beq.n	80064a6 <USBD_GetConfig+0x46>
 800648e:	e012      	b.n	80064b6 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	3308      	adds	r3, #8
 800649a:	2201      	movs	r2, #1
 800649c:	4619      	mov	r1, r3
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 f925 	bl	80066ee <USBD_CtlSendData>
      break;
 80064a4:	e00c      	b.n	80064c0 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	3304      	adds	r3, #4
 80064aa:	2201      	movs	r2, #1
 80064ac:	4619      	mov	r1, r3
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 f91d 	bl	80066ee <USBD_CtlSendData>
      break;
 80064b4:	e004      	b.n	80064c0 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 80064b6:	6839      	ldr	r1, [r7, #0]
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 f8a7 	bl	800660c <USBD_CtlError>
      break;
 80064be:	bf00      	nop
}
 80064c0:	bf00      	nop
 80064c2:	3708      	adds	r7, #8
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064d8:	3b01      	subs	r3, #1
 80064da:	2b02      	cmp	r3, #2
 80064dc:	d81e      	bhi.n	800651c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	88db      	ldrh	r3, [r3, #6]
 80064e2:	2b02      	cmp	r3, #2
 80064e4:	d004      	beq.n	80064f0 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80064e6:	6839      	ldr	r1, [r7, #0]
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 f88f 	bl	800660c <USBD_CtlError>
      break;
 80064ee:	e01a      	b.n	8006526 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2201      	movs	r2, #1
 80064f4:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d005      	beq.n	800650c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	f043 0202 	orr.w	r2, r3, #2
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	330c      	adds	r3, #12
 8006510:	2202      	movs	r2, #2
 8006512:	4619      	mov	r1, r3
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 f8ea 	bl	80066ee <USBD_CtlSendData>
    break;
 800651a:	e004      	b.n	8006526 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800651c:	6839      	ldr	r1, [r7, #0]
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 f874 	bl	800660c <USBD_CtlError>
    break;
 8006524:	bf00      	nop
  }
}
 8006526:	bf00      	nop
 8006528:	3708      	adds	r7, #8
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}

0800652e <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800652e:	b580      	push	{r7, lr}
 8006530:	b082      	sub	sp, #8
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
 8006536:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	885b      	ldrh	r3, [r3, #2]
 800653c:	2b01      	cmp	r3, #1
 800653e:	d106      	bne.n	800654e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 f92a 	bl	80067a2 <USBD_CtlSendStatus>
  }
}
 800654e:	bf00      	nop
 8006550:	3708      	adds	r7, #8
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}

08006556 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006556:	b580      	push	{r7, lr}
 8006558:	b082      	sub	sp, #8
 800655a:	af00      	add	r7, sp, #0
 800655c:	6078      	str	r0, [r7, #4]
 800655e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006566:	3b01      	subs	r3, #1
 8006568:	2b02      	cmp	r3, #2
 800656a:	d80b      	bhi.n	8006584 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	885b      	ldrh	r3, [r3, #2]
 8006570:	2b01      	cmp	r3, #1
 8006572:	d10c      	bne.n	800658e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f000 f910 	bl	80067a2 <USBD_CtlSendStatus>
      }
      break;
 8006582:	e004      	b.n	800658e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006584:	6839      	ldr	r1, [r7, #0]
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 f840 	bl	800660c <USBD_CtlError>
      break;
 800658c:	e000      	b.n	8006590 <USBD_ClrFeature+0x3a>
      break;
 800658e:	bf00      	nop
  }
}
 8006590:	bf00      	nop
 8006592:	3708      	adds	r7, #8
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}

08006598 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	781a      	ldrb	r2, [r3, #0]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	3301      	adds	r3, #1
 80065b2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	781a      	ldrb	r2, [r3, #0]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	3301      	adds	r3, #1
 80065c0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80065c2:	68f8      	ldr	r0, [r7, #12]
 80065c4:	f7ff faa9 	bl	8005b1a <SWAPBYTE>
 80065c8:	4603      	mov	r3, r0
 80065ca:	461a      	mov	r2, r3
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	3301      	adds	r3, #1
 80065d4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	3301      	adds	r3, #1
 80065da:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80065dc:	68f8      	ldr	r0, [r7, #12]
 80065de:	f7ff fa9c 	bl	8005b1a <SWAPBYTE>
 80065e2:	4603      	mov	r3, r0
 80065e4:	461a      	mov	r2, r3
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	3301      	adds	r3, #1
 80065ee:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	3301      	adds	r3, #1
 80065f4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80065f6:	68f8      	ldr	r0, [r7, #12]
 80065f8:	f7ff fa8f 	bl	8005b1a <SWAPBYTE>
 80065fc:	4603      	mov	r3, r0
 80065fe:	461a      	mov	r2, r3
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	80da      	strh	r2, [r3, #6]
}
 8006604:	bf00      	nop
 8006606:	3710      	adds	r7, #16
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b082      	sub	sp, #8
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006616:	2180      	movs	r1, #128	; 0x80
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f003 fa81 	bl	8009b20 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800661e:	2100      	movs	r1, #0
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f003 fa7d 	bl	8009b20 <USBD_LL_StallEP>
}
 8006626:	bf00      	nop
 8006628:	3708      	adds	r7, #8
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}

0800662e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800662e:	b580      	push	{r7, lr}
 8006630:	b086      	sub	sp, #24
 8006632:	af00      	add	r7, sp, #0
 8006634:	60f8      	str	r0, [r7, #12]
 8006636:	60b9      	str	r1, [r7, #8]
 8006638:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800663a:	2300      	movs	r3, #0
 800663c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d036      	beq.n	80066b2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006648:	6938      	ldr	r0, [r7, #16]
 800664a:	f000 f836 	bl	80066ba <USBD_GetLen>
 800664e:	4603      	mov	r3, r0
 8006650:	3301      	adds	r3, #1
 8006652:	b29b      	uxth	r3, r3
 8006654:	005b      	lsls	r3, r3, #1
 8006656:	b29a      	uxth	r2, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800665c:	7dfb      	ldrb	r3, [r7, #23]
 800665e:	68ba      	ldr	r2, [r7, #8]
 8006660:	4413      	add	r3, r2
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	7812      	ldrb	r2, [r2, #0]
 8006666:	701a      	strb	r2, [r3, #0]
  idx++;
 8006668:	7dfb      	ldrb	r3, [r7, #23]
 800666a:	3301      	adds	r3, #1
 800666c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800666e:	7dfb      	ldrb	r3, [r7, #23]
 8006670:	68ba      	ldr	r2, [r7, #8]
 8006672:	4413      	add	r3, r2
 8006674:	2203      	movs	r2, #3
 8006676:	701a      	strb	r2, [r3, #0]
  idx++;
 8006678:	7dfb      	ldrb	r3, [r7, #23]
 800667a:	3301      	adds	r3, #1
 800667c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800667e:	e013      	b.n	80066a8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006680:	7dfb      	ldrb	r3, [r7, #23]
 8006682:	68ba      	ldr	r2, [r7, #8]
 8006684:	4413      	add	r3, r2
 8006686:	693a      	ldr	r2, [r7, #16]
 8006688:	7812      	ldrb	r2, [r2, #0]
 800668a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	3301      	adds	r3, #1
 8006690:	613b      	str	r3, [r7, #16]
    idx++;
 8006692:	7dfb      	ldrb	r3, [r7, #23]
 8006694:	3301      	adds	r3, #1
 8006696:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006698:	7dfb      	ldrb	r3, [r7, #23]
 800669a:	68ba      	ldr	r2, [r7, #8]
 800669c:	4413      	add	r3, r2
 800669e:	2200      	movs	r2, #0
 80066a0:	701a      	strb	r2, [r3, #0]
    idx++;
 80066a2:	7dfb      	ldrb	r3, [r7, #23]
 80066a4:	3301      	adds	r3, #1
 80066a6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d1e7      	bne.n	8006680 <USBD_GetString+0x52>
 80066b0:	e000      	b.n	80066b4 <USBD_GetString+0x86>
    return;
 80066b2:	bf00      	nop
  }
}
 80066b4:	3718      	adds	r7, #24
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}

080066ba <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80066ba:	b480      	push	{r7}
 80066bc:	b085      	sub	sp, #20
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80066c2:	2300      	movs	r3, #0
 80066c4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80066ca:	e005      	b.n	80066d8 <USBD_GetLen+0x1e>
  {
    len++;
 80066cc:	7bfb      	ldrb	r3, [r7, #15]
 80066ce:	3301      	adds	r3, #1
 80066d0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	3301      	adds	r3, #1
 80066d6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d1f5      	bne.n	80066cc <USBD_GetLen+0x12>
  }

  return len;
 80066e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3714      	adds	r7, #20
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr

080066ee <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80066ee:	b580      	push	{r7, lr}
 80066f0:	b084      	sub	sp, #16
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	60f8      	str	r0, [r7, #12]
 80066f6:	60b9      	str	r1, [r7, #8]
 80066f8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2202      	movs	r2, #2
 80066fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	68ba      	ldr	r2, [r7, #8]
 8006712:	2100      	movs	r1, #0
 8006714:	68f8      	ldr	r0, [r7, #12]
 8006716:	f003 fa8c 	bl	8009c32 <USBD_LL_Transmit>

  return USBD_OK;
 800671a:	2300      	movs	r3, #0
}
 800671c:	4618      	mov	r0, r3
 800671e:	3710      	adds	r7, #16
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}

08006724 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	60b9      	str	r1, [r7, #8]
 800672e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	68ba      	ldr	r2, [r7, #8]
 8006734:	2100      	movs	r1, #0
 8006736:	68f8      	ldr	r0, [r7, #12]
 8006738:	f003 fa7b 	bl	8009c32 <USBD_LL_Transmit>

  return USBD_OK;
 800673c:	2300      	movs	r3, #0
}
 800673e:	4618      	mov	r0, r3
 8006740:	3710      	adds	r7, #16
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}

08006746 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006746:	b580      	push	{r7, lr}
 8006748:	b084      	sub	sp, #16
 800674a:	af00      	add	r7, sp, #0
 800674c:	60f8      	str	r0, [r7, #12]
 800674e:	60b9      	str	r1, [r7, #8]
 8006750:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2203      	movs	r2, #3
 8006756:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	68ba      	ldr	r2, [r7, #8]
 800676e:	2100      	movs	r1, #0
 8006770:	68f8      	ldr	r0, [r7, #12]
 8006772:	f003 fa7f 	bl	8009c74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006776:	2300      	movs	r3, #0
}
 8006778:	4618      	mov	r0, r3
 800677a:	3710      	adds	r7, #16
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}

08006780 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b084      	sub	sp, #16
 8006784:	af00      	add	r7, sp, #0
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	60b9      	str	r1, [r7, #8]
 800678a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	68ba      	ldr	r2, [r7, #8]
 8006790:	2100      	movs	r1, #0
 8006792:	68f8      	ldr	r0, [r7, #12]
 8006794:	f003 fa6e 	bl	8009c74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3710      	adds	r7, #16
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}

080067a2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80067a2:	b580      	push	{r7, lr}
 80067a4:	b082      	sub	sp, #8
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2204      	movs	r2, #4
 80067ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80067b2:	2300      	movs	r3, #0
 80067b4:	2200      	movs	r2, #0
 80067b6:	2100      	movs	r1, #0
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f003 fa3a 	bl	8009c32 <USBD_LL_Transmit>

  return USBD_OK;
 80067be:	2300      	movs	r3, #0
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3708      	adds	r7, #8
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}

080067c8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2205      	movs	r2, #5
 80067d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80067d8:	2300      	movs	r3, #0
 80067da:	2200      	movs	r2, #0
 80067dc:	2100      	movs	r1, #0
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f003 fa48 	bl	8009c74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80067e4:	2300      	movs	r3, #0
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3708      	adds	r7, #8
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}

080067ee <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80067ee:	b480      	push	{r7}
 80067f0:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80067f2:	bf00      	nop
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr

080067fc <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80067fc:	b480      	push	{r7}
 80067fe:	b085      	sub	sp, #20
 8006800:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006802:	f3ef 8305 	mrs	r3, IPSR
 8006806:	60bb      	str	r3, [r7, #8]
  return(result);
 8006808:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800680a:	2b00      	cmp	r3, #0
 800680c:	d10f      	bne.n	800682e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800680e:	f3ef 8310 	mrs	r3, PRIMASK
 8006812:	607b      	str	r3, [r7, #4]
  return(result);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d105      	bne.n	8006826 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800681a:	f3ef 8311 	mrs	r3, BASEPRI
 800681e:	603b      	str	r3, [r7, #0]
  return(result);
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d007      	beq.n	8006836 <osKernelInitialize+0x3a>
 8006826:	4b0e      	ldr	r3, [pc, #56]	; (8006860 <osKernelInitialize+0x64>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	2b02      	cmp	r3, #2
 800682c:	d103      	bne.n	8006836 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800682e:	f06f 0305 	mvn.w	r3, #5
 8006832:	60fb      	str	r3, [r7, #12]
 8006834:	e00c      	b.n	8006850 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006836:	4b0a      	ldr	r3, [pc, #40]	; (8006860 <osKernelInitialize+0x64>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d105      	bne.n	800684a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800683e:	4b08      	ldr	r3, [pc, #32]	; (8006860 <osKernelInitialize+0x64>)
 8006840:	2201      	movs	r2, #1
 8006842:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006844:	2300      	movs	r3, #0
 8006846:	60fb      	str	r3, [r7, #12]
 8006848:	e002      	b.n	8006850 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800684a:	f04f 33ff 	mov.w	r3, #4294967295
 800684e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006850:	68fb      	ldr	r3, [r7, #12]
}
 8006852:	4618      	mov	r0, r3
 8006854:	3714      	adds	r7, #20
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr
 800685e:	bf00      	nop
 8006860:	2000021c 	.word	0x2000021c

08006864 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006864:	b580      	push	{r7, lr}
 8006866:	b084      	sub	sp, #16
 8006868:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800686a:	f3ef 8305 	mrs	r3, IPSR
 800686e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006870:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006872:	2b00      	cmp	r3, #0
 8006874:	d10f      	bne.n	8006896 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006876:	f3ef 8310 	mrs	r3, PRIMASK
 800687a:	607b      	str	r3, [r7, #4]
  return(result);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d105      	bne.n	800688e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006882:	f3ef 8311 	mrs	r3, BASEPRI
 8006886:	603b      	str	r3, [r7, #0]
  return(result);
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d007      	beq.n	800689e <osKernelStart+0x3a>
 800688e:	4b0f      	ldr	r3, [pc, #60]	; (80068cc <osKernelStart+0x68>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	2b02      	cmp	r3, #2
 8006894:	d103      	bne.n	800689e <osKernelStart+0x3a>
    stat = osErrorISR;
 8006896:	f06f 0305 	mvn.w	r3, #5
 800689a:	60fb      	str	r3, [r7, #12]
 800689c:	e010      	b.n	80068c0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800689e:	4b0b      	ldr	r3, [pc, #44]	; (80068cc <osKernelStart+0x68>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d109      	bne.n	80068ba <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80068a6:	f7ff ffa2 	bl	80067ee <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80068aa:	4b08      	ldr	r3, [pc, #32]	; (80068cc <osKernelStart+0x68>)
 80068ac:	2202      	movs	r2, #2
 80068ae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80068b0:	f001 f89c 	bl	80079ec <vTaskStartScheduler>
      stat = osOK;
 80068b4:	2300      	movs	r3, #0
 80068b6:	60fb      	str	r3, [r7, #12]
 80068b8:	e002      	b.n	80068c0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80068ba:	f04f 33ff 	mov.w	r3, #4294967295
 80068be:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80068c0:	68fb      	ldr	r3, [r7, #12]
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3710      	adds	r7, #16
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop
 80068cc:	2000021c 	.word	0x2000021c

080068d0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b090      	sub	sp, #64	; 0x40
 80068d4:	af04      	add	r7, sp, #16
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80068dc:	2300      	movs	r3, #0
 80068de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068e0:	f3ef 8305 	mrs	r3, IPSR
 80068e4:	61fb      	str	r3, [r7, #28]
  return(result);
 80068e6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	f040 808f 	bne.w	8006a0c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068ee:	f3ef 8310 	mrs	r3, PRIMASK
 80068f2:	61bb      	str	r3, [r7, #24]
  return(result);
 80068f4:	69bb      	ldr	r3, [r7, #24]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d105      	bne.n	8006906 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80068fa:	f3ef 8311 	mrs	r3, BASEPRI
 80068fe:	617b      	str	r3, [r7, #20]
  return(result);
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d003      	beq.n	800690e <osThreadNew+0x3e>
 8006906:	4b44      	ldr	r3, [pc, #272]	; (8006a18 <osThreadNew+0x148>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2b02      	cmp	r3, #2
 800690c:	d07e      	beq.n	8006a0c <osThreadNew+0x13c>
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d07b      	beq.n	8006a0c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8006914:	2380      	movs	r3, #128	; 0x80
 8006916:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8006918:	2318      	movs	r3, #24
 800691a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800691c:	2300      	movs	r3, #0
 800691e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8006920:	f04f 33ff 	mov.w	r3, #4294967295
 8006924:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d045      	beq.n	80069b8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d002      	beq.n	800693a <osThreadNew+0x6a>
        name = attr->name;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	699b      	ldr	r3, [r3, #24]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d002      	beq.n	8006948 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	699b      	ldr	r3, [r3, #24]
 8006946:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694a:	2b00      	cmp	r3, #0
 800694c:	d008      	beq.n	8006960 <osThreadNew+0x90>
 800694e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006950:	2b38      	cmp	r3, #56	; 0x38
 8006952:	d805      	bhi.n	8006960 <osThreadNew+0x90>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	f003 0301 	and.w	r3, r3, #1
 800695c:	2b00      	cmp	r3, #0
 800695e:	d001      	beq.n	8006964 <osThreadNew+0x94>
        return (NULL);
 8006960:	2300      	movs	r3, #0
 8006962:	e054      	b.n	8006a0e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	695b      	ldr	r3, [r3, #20]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d003      	beq.n	8006974 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	695b      	ldr	r3, [r3, #20]
 8006970:	089b      	lsrs	r3, r3, #2
 8006972:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d00e      	beq.n	800699a <osThreadNew+0xca>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	68db      	ldr	r3, [r3, #12]
 8006980:	2b5b      	cmp	r3, #91	; 0x5b
 8006982:	d90a      	bls.n	800699a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006988:	2b00      	cmp	r3, #0
 800698a:	d006      	beq.n	800699a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	695b      	ldr	r3, [r3, #20]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d002      	beq.n	800699a <osThreadNew+0xca>
        mem = 1;
 8006994:	2301      	movs	r3, #1
 8006996:	623b      	str	r3, [r7, #32]
 8006998:	e010      	b.n	80069bc <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d10c      	bne.n	80069bc <osThreadNew+0xec>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d108      	bne.n	80069bc <osThreadNew+0xec>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	691b      	ldr	r3, [r3, #16]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d104      	bne.n	80069bc <osThreadNew+0xec>
          mem = 0;
 80069b2:	2300      	movs	r3, #0
 80069b4:	623b      	str	r3, [r7, #32]
 80069b6:	e001      	b.n	80069bc <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80069b8:	2300      	movs	r3, #0
 80069ba:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80069bc:	6a3b      	ldr	r3, [r7, #32]
 80069be:	2b01      	cmp	r3, #1
 80069c0:	d110      	bne.n	80069e4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80069ca:	9202      	str	r2, [sp, #8]
 80069cc:	9301      	str	r3, [sp, #4]
 80069ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d0:	9300      	str	r3, [sp, #0]
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80069d8:	68f8      	ldr	r0, [r7, #12]
 80069da:	f000 fe2b 	bl	8007634 <xTaskCreateStatic>
 80069de:	4603      	mov	r3, r0
 80069e0:	613b      	str	r3, [r7, #16]
 80069e2:	e013      	b.n	8006a0c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80069e4:	6a3b      	ldr	r3, [r7, #32]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d110      	bne.n	8006a0c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80069ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ec:	b29a      	uxth	r2, r3
 80069ee:	f107 0310 	add.w	r3, r7, #16
 80069f2:	9301      	str	r3, [sp, #4]
 80069f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f6:	9300      	str	r3, [sp, #0]
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80069fc:	68f8      	ldr	r0, [r7, #12]
 80069fe:	f000 fe79 	bl	80076f4 <xTaskCreate>
 8006a02:	4603      	mov	r3, r0
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d001      	beq.n	8006a0c <osThreadNew+0x13c>
          hTask = NULL;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006a0c:	693b      	ldr	r3, [r7, #16]
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3730      	adds	r7, #48	; 0x30
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	bf00      	nop
 8006a18:	2000021c 	.word	0x2000021c

08006a1c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b086      	sub	sp, #24
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a24:	f3ef 8305 	mrs	r3, IPSR
 8006a28:	613b      	str	r3, [r7, #16]
  return(result);
 8006a2a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d10f      	bne.n	8006a50 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a30:	f3ef 8310 	mrs	r3, PRIMASK
 8006a34:	60fb      	str	r3, [r7, #12]
  return(result);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d105      	bne.n	8006a48 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006a3c:	f3ef 8311 	mrs	r3, BASEPRI
 8006a40:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d007      	beq.n	8006a58 <osDelay+0x3c>
 8006a48:	4b0a      	ldr	r3, [pc, #40]	; (8006a74 <osDelay+0x58>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	2b02      	cmp	r3, #2
 8006a4e:	d103      	bne.n	8006a58 <osDelay+0x3c>
    stat = osErrorISR;
 8006a50:	f06f 0305 	mvn.w	r3, #5
 8006a54:	617b      	str	r3, [r7, #20]
 8006a56:	e007      	b.n	8006a68 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d002      	beq.n	8006a68 <osDelay+0x4c>
      vTaskDelay(ticks);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 ff8c 	bl	8007980 <vTaskDelay>
    }
  }

  return (stat);
 8006a68:	697b      	ldr	r3, [r7, #20]
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3718      	adds	r7, #24
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
 8006a72:	bf00      	nop
 8006a74:	2000021c 	.word	0x2000021c

08006a78 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006a78:	b480      	push	{r7}
 8006a7a:	b085      	sub	sp, #20
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	60b9      	str	r1, [r7, #8]
 8006a82:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	4a07      	ldr	r2, [pc, #28]	; (8006aa4 <vApplicationGetIdleTaskMemory+0x2c>)
 8006a88:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	4a06      	ldr	r2, [pc, #24]	; (8006aa8 <vApplicationGetIdleTaskMemory+0x30>)
 8006a8e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2280      	movs	r2, #128	; 0x80
 8006a94:	601a      	str	r2, [r3, #0]
}
 8006a96:	bf00      	nop
 8006a98:	3714      	adds	r7, #20
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr
 8006aa2:	bf00      	nop
 8006aa4:	20000220 	.word	0x20000220
 8006aa8:	2000027c 	.word	0x2000027c

08006aac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006aac:	b480      	push	{r7}
 8006aae:	b085      	sub	sp, #20
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	60f8      	str	r0, [r7, #12]
 8006ab4:	60b9      	str	r1, [r7, #8]
 8006ab6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	4a07      	ldr	r2, [pc, #28]	; (8006ad8 <vApplicationGetTimerTaskMemory+0x2c>)
 8006abc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	4a06      	ldr	r2, [pc, #24]	; (8006adc <vApplicationGetTimerTaskMemory+0x30>)
 8006ac2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006aca:	601a      	str	r2, [r3, #0]
}
 8006acc:	bf00      	nop
 8006ace:	3714      	adds	r7, #20
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr
 8006ad8:	2000047c 	.word	0x2000047c
 8006adc:	200004d8 	.word	0x200004d8

08006ae0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b083      	sub	sp, #12
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f103 0208 	add.w	r2, r3, #8
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f04f 32ff 	mov.w	r2, #4294967295
 8006af8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f103 0208 	add.w	r2, r3, #8
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f103 0208 	add.w	r2, r3, #8
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006b14:	bf00      	nop
 8006b16:	370c      	adds	r7, #12
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006b20:	b480      	push	{r7}
 8006b22:	b083      	sub	sp, #12
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006b2e:	bf00      	nop
 8006b30:	370c      	adds	r7, #12
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr

08006b3a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006b3a:	b480      	push	{r7}
 8006b3c:	b085      	sub	sp, #20
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	6078      	str	r0, [r7, #4]
 8006b42:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	68fa      	ldr	r2, [r7, #12]
 8006b4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	689a      	ldr	r2, [r3, #8]
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	683a      	ldr	r2, [r7, #0]
 8006b5e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	683a      	ldr	r2, [r7, #0]
 8006b64:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	1c5a      	adds	r2, r3, #1
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	601a      	str	r2, [r3, #0]
}
 8006b76:	bf00      	nop
 8006b78:	3714      	adds	r7, #20
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr

08006b82 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006b82:	b480      	push	{r7}
 8006b84:	b085      	sub	sp, #20
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
 8006b8a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b98:	d103      	bne.n	8006ba2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	691b      	ldr	r3, [r3, #16]
 8006b9e:	60fb      	str	r3, [r7, #12]
 8006ba0:	e00c      	b.n	8006bbc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	3308      	adds	r3, #8
 8006ba6:	60fb      	str	r3, [r7, #12]
 8006ba8:	e002      	b.n	8006bb0 <vListInsert+0x2e>
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	60fb      	str	r3, [r7, #12]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	68ba      	ldr	r2, [r7, #8]
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d2f6      	bcs.n	8006baa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	685a      	ldr	r2, [r3, #4]
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	683a      	ldr	r2, [r7, #0]
 8006bca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	68fa      	ldr	r2, [r7, #12]
 8006bd0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	683a      	ldr	r2, [r7, #0]
 8006bd6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	687a      	ldr	r2, [r7, #4]
 8006bdc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	1c5a      	adds	r2, r3, #1
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	601a      	str	r2, [r3, #0]
}
 8006be8:	bf00      	nop
 8006bea:	3714      	adds	r7, #20
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b085      	sub	sp, #20
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	691b      	ldr	r3, [r3, #16]
 8006c00:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	6892      	ldr	r2, [r2, #8]
 8006c0a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	6852      	ldr	r2, [r2, #4]
 8006c14:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	687a      	ldr	r2, [r7, #4]
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d103      	bne.n	8006c28 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	689a      	ldr	r2, [r3, #8]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	1e5a      	subs	r2, r3, #1
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3714      	adds	r7, #20
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b084      	sub	sp, #16
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d10b      	bne.n	8006c74 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c60:	b672      	cpsid	i
 8006c62:	f383 8811 	msr	BASEPRI, r3
 8006c66:	f3bf 8f6f 	isb	sy
 8006c6a:	f3bf 8f4f 	dsb	sy
 8006c6e:	b662      	cpsie	i
 8006c70:	60bb      	str	r3, [r7, #8]
 8006c72:	e7fe      	b.n	8006c72 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8006c74:	f002 f848 	bl	8008d08 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c80:	68f9      	ldr	r1, [r7, #12]
 8006c82:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006c84:	fb01 f303 	mul.w	r3, r1, r3
 8006c88:	441a      	add	r2, r3
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2200      	movs	r2, #0
 8006c92:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ca4:	3b01      	subs	r3, #1
 8006ca6:	68f9      	ldr	r1, [r7, #12]
 8006ca8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006caa:	fb01 f303 	mul.w	r3, r1, r3
 8006cae:	441a      	add	r2, r3
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	22ff      	movs	r2, #255	; 0xff
 8006cb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	22ff      	movs	r2, #255	; 0xff
 8006cc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d114      	bne.n	8006cf4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	691b      	ldr	r3, [r3, #16]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d01a      	beq.n	8006d08 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	3310      	adds	r3, #16
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f001 f916 	bl	8007f08 <xTaskRemoveFromEventList>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d012      	beq.n	8006d08 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006ce2:	4b0d      	ldr	r3, [pc, #52]	; (8006d18 <xQueueGenericReset+0xd0>)
 8006ce4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ce8:	601a      	str	r2, [r3, #0]
 8006cea:	f3bf 8f4f 	dsb	sy
 8006cee:	f3bf 8f6f 	isb	sy
 8006cf2:	e009      	b.n	8006d08 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	3310      	adds	r3, #16
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f7ff fef1 	bl	8006ae0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	3324      	adds	r3, #36	; 0x24
 8006d02:	4618      	mov	r0, r3
 8006d04:	f7ff feec 	bl	8006ae0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006d08:	f002 f830 	bl	8008d6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006d0c:	2301      	movs	r3, #1
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3710      	adds	r7, #16
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
 8006d16:	bf00      	nop
 8006d18:	e000ed04 	.word	0xe000ed04

08006d1c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b08e      	sub	sp, #56	; 0x38
 8006d20:	af02      	add	r7, sp, #8
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	607a      	str	r2, [r7, #4]
 8006d28:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d10b      	bne.n	8006d48 <xQueueGenericCreateStatic+0x2c>
 8006d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d34:	b672      	cpsid	i
 8006d36:	f383 8811 	msr	BASEPRI, r3
 8006d3a:	f3bf 8f6f 	isb	sy
 8006d3e:	f3bf 8f4f 	dsb	sy
 8006d42:	b662      	cpsie	i
 8006d44:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d46:	e7fe      	b.n	8006d46 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d10b      	bne.n	8006d66 <xQueueGenericCreateStatic+0x4a>
 8006d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d52:	b672      	cpsid	i
 8006d54:	f383 8811 	msr	BASEPRI, r3
 8006d58:	f3bf 8f6f 	isb	sy
 8006d5c:	f3bf 8f4f 	dsb	sy
 8006d60:	b662      	cpsie	i
 8006d62:	627b      	str	r3, [r7, #36]	; 0x24
 8006d64:	e7fe      	b.n	8006d64 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d002      	beq.n	8006d72 <xQueueGenericCreateStatic+0x56>
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d001      	beq.n	8006d76 <xQueueGenericCreateStatic+0x5a>
 8006d72:	2301      	movs	r3, #1
 8006d74:	e000      	b.n	8006d78 <xQueueGenericCreateStatic+0x5c>
 8006d76:	2300      	movs	r3, #0
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d10b      	bne.n	8006d94 <xQueueGenericCreateStatic+0x78>
 8006d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d80:	b672      	cpsid	i
 8006d82:	f383 8811 	msr	BASEPRI, r3
 8006d86:	f3bf 8f6f 	isb	sy
 8006d8a:	f3bf 8f4f 	dsb	sy
 8006d8e:	b662      	cpsie	i
 8006d90:	623b      	str	r3, [r7, #32]
 8006d92:	e7fe      	b.n	8006d92 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d102      	bne.n	8006da0 <xQueueGenericCreateStatic+0x84>
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d101      	bne.n	8006da4 <xQueueGenericCreateStatic+0x88>
 8006da0:	2301      	movs	r3, #1
 8006da2:	e000      	b.n	8006da6 <xQueueGenericCreateStatic+0x8a>
 8006da4:	2300      	movs	r3, #0
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d10b      	bne.n	8006dc2 <xQueueGenericCreateStatic+0xa6>
 8006daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dae:	b672      	cpsid	i
 8006db0:	f383 8811 	msr	BASEPRI, r3
 8006db4:	f3bf 8f6f 	isb	sy
 8006db8:	f3bf 8f4f 	dsb	sy
 8006dbc:	b662      	cpsie	i
 8006dbe:	61fb      	str	r3, [r7, #28]
 8006dc0:	e7fe      	b.n	8006dc0 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006dc2:	2350      	movs	r3, #80	; 0x50
 8006dc4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	2b50      	cmp	r3, #80	; 0x50
 8006dca:	d00b      	beq.n	8006de4 <xQueueGenericCreateStatic+0xc8>
 8006dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd0:	b672      	cpsid	i
 8006dd2:	f383 8811 	msr	BASEPRI, r3
 8006dd6:	f3bf 8f6f 	isb	sy
 8006dda:	f3bf 8f4f 	dsb	sy
 8006dde:	b662      	cpsie	i
 8006de0:	61bb      	str	r3, [r7, #24]
 8006de2:	e7fe      	b.n	8006de2 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006de4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d00d      	beq.n	8006e0c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df2:	2201      	movs	r2, #1
 8006df4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006df8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dfe:	9300      	str	r3, [sp, #0]
 8006e00:	4613      	mov	r3, r2
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	68b9      	ldr	r1, [r7, #8]
 8006e06:	68f8      	ldr	r0, [r7, #12]
 8006e08:	f000 f805 	bl	8006e16 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3730      	adds	r7, #48	; 0x30
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}

08006e16 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006e16:	b580      	push	{r7, lr}
 8006e18:	b084      	sub	sp, #16
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	60f8      	str	r0, [r7, #12]
 8006e1e:	60b9      	str	r1, [r7, #8]
 8006e20:	607a      	str	r2, [r7, #4]
 8006e22:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d103      	bne.n	8006e32 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006e2a:	69bb      	ldr	r3, [r7, #24]
 8006e2c:	69ba      	ldr	r2, [r7, #24]
 8006e2e:	601a      	str	r2, [r3, #0]
 8006e30:	e002      	b.n	8006e38 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006e32:	69bb      	ldr	r3, [r7, #24]
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006e38:	69bb      	ldr	r3, [r7, #24]
 8006e3a:	68fa      	ldr	r2, [r7, #12]
 8006e3c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006e3e:	69bb      	ldr	r3, [r7, #24]
 8006e40:	68ba      	ldr	r2, [r7, #8]
 8006e42:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006e44:	2101      	movs	r1, #1
 8006e46:	69b8      	ldr	r0, [r7, #24]
 8006e48:	f7ff fefe 	bl	8006c48 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006e4c:	69bb      	ldr	r3, [r7, #24]
 8006e4e:	78fa      	ldrb	r2, [r7, #3]
 8006e50:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006e54:	bf00      	nop
 8006e56:	3710      	adds	r7, #16
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b08e      	sub	sp, #56	; 0x38
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	60b9      	str	r1, [r7, #8]
 8006e66:	607a      	str	r2, [r7, #4]
 8006e68:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d10b      	bne.n	8006e90 <xQueueGenericSend+0x34>
 8006e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e7c:	b672      	cpsid	i
 8006e7e:	f383 8811 	msr	BASEPRI, r3
 8006e82:	f3bf 8f6f 	isb	sy
 8006e86:	f3bf 8f4f 	dsb	sy
 8006e8a:	b662      	cpsie	i
 8006e8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e8e:	e7fe      	b.n	8006e8e <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d103      	bne.n	8006e9e <xQueueGenericSend+0x42>
 8006e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d101      	bne.n	8006ea2 <xQueueGenericSend+0x46>
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e000      	b.n	8006ea4 <xQueueGenericSend+0x48>
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d10b      	bne.n	8006ec0 <xQueueGenericSend+0x64>
 8006ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eac:	b672      	cpsid	i
 8006eae:	f383 8811 	msr	BASEPRI, r3
 8006eb2:	f3bf 8f6f 	isb	sy
 8006eb6:	f3bf 8f4f 	dsb	sy
 8006eba:	b662      	cpsie	i
 8006ebc:	627b      	str	r3, [r7, #36]	; 0x24
 8006ebe:	e7fe      	b.n	8006ebe <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	2b02      	cmp	r3, #2
 8006ec4:	d103      	bne.n	8006ece <xQueueGenericSend+0x72>
 8006ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	d101      	bne.n	8006ed2 <xQueueGenericSend+0x76>
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e000      	b.n	8006ed4 <xQueueGenericSend+0x78>
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d10b      	bne.n	8006ef0 <xQueueGenericSend+0x94>
 8006ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006edc:	b672      	cpsid	i
 8006ede:	f383 8811 	msr	BASEPRI, r3
 8006ee2:	f3bf 8f6f 	isb	sy
 8006ee6:	f3bf 8f4f 	dsb	sy
 8006eea:	b662      	cpsie	i
 8006eec:	623b      	str	r3, [r7, #32]
 8006eee:	e7fe      	b.n	8006eee <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ef0:	f001 f9c8 	bl	8008284 <xTaskGetSchedulerState>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d102      	bne.n	8006f00 <xQueueGenericSend+0xa4>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d101      	bne.n	8006f04 <xQueueGenericSend+0xa8>
 8006f00:	2301      	movs	r3, #1
 8006f02:	e000      	b.n	8006f06 <xQueueGenericSend+0xaa>
 8006f04:	2300      	movs	r3, #0
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d10b      	bne.n	8006f22 <xQueueGenericSend+0xc6>
 8006f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f0e:	b672      	cpsid	i
 8006f10:	f383 8811 	msr	BASEPRI, r3
 8006f14:	f3bf 8f6f 	isb	sy
 8006f18:	f3bf 8f4f 	dsb	sy
 8006f1c:	b662      	cpsie	i
 8006f1e:	61fb      	str	r3, [r7, #28]
 8006f20:	e7fe      	b.n	8006f20 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f22:	f001 fef1 	bl	8008d08 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d302      	bcc.n	8006f38 <xQueueGenericSend+0xdc>
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	2b02      	cmp	r3, #2
 8006f36:	d129      	bne.n	8006f8c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006f38:	683a      	ldr	r2, [r7, #0]
 8006f3a:	68b9      	ldr	r1, [r7, #8]
 8006f3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f3e:	f000 fa0d 	bl	800735c <prvCopyDataToQueue>
 8006f42:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d010      	beq.n	8006f6e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f4e:	3324      	adds	r3, #36	; 0x24
 8006f50:	4618      	mov	r0, r3
 8006f52:	f000 ffd9 	bl	8007f08 <xTaskRemoveFromEventList>
 8006f56:	4603      	mov	r3, r0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d013      	beq.n	8006f84 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006f5c:	4b3f      	ldr	r3, [pc, #252]	; (800705c <xQueueGenericSend+0x200>)
 8006f5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f62:	601a      	str	r2, [r3, #0]
 8006f64:	f3bf 8f4f 	dsb	sy
 8006f68:	f3bf 8f6f 	isb	sy
 8006f6c:	e00a      	b.n	8006f84 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d007      	beq.n	8006f84 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006f74:	4b39      	ldr	r3, [pc, #228]	; (800705c <xQueueGenericSend+0x200>)
 8006f76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f7a:	601a      	str	r2, [r3, #0]
 8006f7c:	f3bf 8f4f 	dsb	sy
 8006f80:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006f84:	f001 fef2 	bl	8008d6c <vPortExitCritical>
				return pdPASS;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e063      	b.n	8007054 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d103      	bne.n	8006f9a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006f92:	f001 feeb 	bl	8008d6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006f96:	2300      	movs	r3, #0
 8006f98:	e05c      	b.n	8007054 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d106      	bne.n	8006fae <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006fa0:	f107 0314 	add.w	r3, r7, #20
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f001 f813 	bl	8007fd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006faa:	2301      	movs	r3, #1
 8006fac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006fae:	f001 fedd 	bl	8008d6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006fb2:	f000 fd83 	bl	8007abc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006fb6:	f001 fea7 	bl	8008d08 <vPortEnterCritical>
 8006fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fbc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006fc0:	b25b      	sxtb	r3, r3
 8006fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fc6:	d103      	bne.n	8006fd0 <xQueueGenericSend+0x174>
 8006fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fca:	2200      	movs	r2, #0
 8006fcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fd6:	b25b      	sxtb	r3, r3
 8006fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fdc:	d103      	bne.n	8006fe6 <xQueueGenericSend+0x18a>
 8006fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006fe6:	f001 fec1 	bl	8008d6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006fea:	1d3a      	adds	r2, r7, #4
 8006fec:	f107 0314 	add.w	r3, r7, #20
 8006ff0:	4611      	mov	r1, r2
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f001 f802 	bl	8007ffc <xTaskCheckForTimeOut>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d124      	bne.n	8007048 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006ffe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007000:	f000 faa4 	bl	800754c <prvIsQueueFull>
 8007004:	4603      	mov	r3, r0
 8007006:	2b00      	cmp	r3, #0
 8007008:	d018      	beq.n	800703c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800700a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800700c:	3310      	adds	r3, #16
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	4611      	mov	r1, r2
 8007012:	4618      	mov	r0, r3
 8007014:	f000 ff26 	bl	8007e64 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007018:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800701a:	f000 fa2f 	bl	800747c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800701e:	f000 fd5b 	bl	8007ad8 <xTaskResumeAll>
 8007022:	4603      	mov	r3, r0
 8007024:	2b00      	cmp	r3, #0
 8007026:	f47f af7c 	bne.w	8006f22 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800702a:	4b0c      	ldr	r3, [pc, #48]	; (800705c <xQueueGenericSend+0x200>)
 800702c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007030:	601a      	str	r2, [r3, #0]
 8007032:	f3bf 8f4f 	dsb	sy
 8007036:	f3bf 8f6f 	isb	sy
 800703a:	e772      	b.n	8006f22 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800703c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800703e:	f000 fa1d 	bl	800747c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007042:	f000 fd49 	bl	8007ad8 <xTaskResumeAll>
 8007046:	e76c      	b.n	8006f22 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007048:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800704a:	f000 fa17 	bl	800747c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800704e:	f000 fd43 	bl	8007ad8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007052:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007054:	4618      	mov	r0, r3
 8007056:	3738      	adds	r7, #56	; 0x38
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}
 800705c:	e000ed04 	.word	0xe000ed04

08007060 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b08e      	sub	sp, #56	; 0x38
 8007064:	af00      	add	r7, sp, #0
 8007066:	60f8      	str	r0, [r7, #12]
 8007068:	60b9      	str	r1, [r7, #8]
 800706a:	607a      	str	r2, [r7, #4]
 800706c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007074:	2b00      	cmp	r3, #0
 8007076:	d10b      	bne.n	8007090 <xQueueGenericSendFromISR+0x30>
 8007078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800707c:	b672      	cpsid	i
 800707e:	f383 8811 	msr	BASEPRI, r3
 8007082:	f3bf 8f6f 	isb	sy
 8007086:	f3bf 8f4f 	dsb	sy
 800708a:	b662      	cpsie	i
 800708c:	627b      	str	r3, [r7, #36]	; 0x24
 800708e:	e7fe      	b.n	800708e <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d103      	bne.n	800709e <xQueueGenericSendFromISR+0x3e>
 8007096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800709a:	2b00      	cmp	r3, #0
 800709c:	d101      	bne.n	80070a2 <xQueueGenericSendFromISR+0x42>
 800709e:	2301      	movs	r3, #1
 80070a0:	e000      	b.n	80070a4 <xQueueGenericSendFromISR+0x44>
 80070a2:	2300      	movs	r3, #0
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d10b      	bne.n	80070c0 <xQueueGenericSendFromISR+0x60>
 80070a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ac:	b672      	cpsid	i
 80070ae:	f383 8811 	msr	BASEPRI, r3
 80070b2:	f3bf 8f6f 	isb	sy
 80070b6:	f3bf 8f4f 	dsb	sy
 80070ba:	b662      	cpsie	i
 80070bc:	623b      	str	r3, [r7, #32]
 80070be:	e7fe      	b.n	80070be <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	2b02      	cmp	r3, #2
 80070c4:	d103      	bne.n	80070ce <xQueueGenericSendFromISR+0x6e>
 80070c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	d101      	bne.n	80070d2 <xQueueGenericSendFromISR+0x72>
 80070ce:	2301      	movs	r3, #1
 80070d0:	e000      	b.n	80070d4 <xQueueGenericSendFromISR+0x74>
 80070d2:	2300      	movs	r3, #0
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d10b      	bne.n	80070f0 <xQueueGenericSendFromISR+0x90>
 80070d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070dc:	b672      	cpsid	i
 80070de:	f383 8811 	msr	BASEPRI, r3
 80070e2:	f3bf 8f6f 	isb	sy
 80070e6:	f3bf 8f4f 	dsb	sy
 80070ea:	b662      	cpsie	i
 80070ec:	61fb      	str	r3, [r7, #28]
 80070ee:	e7fe      	b.n	80070ee <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80070f0:	f001 feea 	bl	8008ec8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80070f4:	f3ef 8211 	mrs	r2, BASEPRI
 80070f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070fc:	b672      	cpsid	i
 80070fe:	f383 8811 	msr	BASEPRI, r3
 8007102:	f3bf 8f6f 	isb	sy
 8007106:	f3bf 8f4f 	dsb	sy
 800710a:	b662      	cpsie	i
 800710c:	61ba      	str	r2, [r7, #24]
 800710e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007110:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007112:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007116:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800711a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800711c:	429a      	cmp	r2, r3
 800711e:	d302      	bcc.n	8007126 <xQueueGenericSendFromISR+0xc6>
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	2b02      	cmp	r3, #2
 8007124:	d12c      	bne.n	8007180 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007128:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800712c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007130:	683a      	ldr	r2, [r7, #0]
 8007132:	68b9      	ldr	r1, [r7, #8]
 8007134:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007136:	f000 f911 	bl	800735c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800713a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800713e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007142:	d112      	bne.n	800716a <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007148:	2b00      	cmp	r3, #0
 800714a:	d016      	beq.n	800717a <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800714c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800714e:	3324      	adds	r3, #36	; 0x24
 8007150:	4618      	mov	r0, r3
 8007152:	f000 fed9 	bl	8007f08 <xTaskRemoveFromEventList>
 8007156:	4603      	mov	r3, r0
 8007158:	2b00      	cmp	r3, #0
 800715a:	d00e      	beq.n	800717a <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d00b      	beq.n	800717a <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2201      	movs	r2, #1
 8007166:	601a      	str	r2, [r3, #0]
 8007168:	e007      	b.n	800717a <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800716a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800716e:	3301      	adds	r3, #1
 8007170:	b2db      	uxtb	r3, r3
 8007172:	b25a      	sxtb	r2, r3
 8007174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007176:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800717a:	2301      	movs	r3, #1
 800717c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800717e:	e001      	b.n	8007184 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007180:	2300      	movs	r3, #0
 8007182:	637b      	str	r3, [r7, #52]	; 0x34
 8007184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007186:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800718e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007190:	4618      	mov	r0, r3
 8007192:	3738      	adds	r7, #56	; 0x38
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}

08007198 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b08c      	sub	sp, #48	; 0x30
 800719c:	af00      	add	r7, sp, #0
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	60b9      	str	r1, [r7, #8]
 80071a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80071a4:	2300      	movs	r3, #0
 80071a6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80071ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d10b      	bne.n	80071ca <xQueueReceive+0x32>
	__asm volatile
 80071b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b6:	b672      	cpsid	i
 80071b8:	f383 8811 	msr	BASEPRI, r3
 80071bc:	f3bf 8f6f 	isb	sy
 80071c0:	f3bf 8f4f 	dsb	sy
 80071c4:	b662      	cpsie	i
 80071c6:	623b      	str	r3, [r7, #32]
 80071c8:	e7fe      	b.n	80071c8 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d103      	bne.n	80071d8 <xQueueReceive+0x40>
 80071d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d101      	bne.n	80071dc <xQueueReceive+0x44>
 80071d8:	2301      	movs	r3, #1
 80071da:	e000      	b.n	80071de <xQueueReceive+0x46>
 80071dc:	2300      	movs	r3, #0
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d10b      	bne.n	80071fa <xQueueReceive+0x62>
 80071e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e6:	b672      	cpsid	i
 80071e8:	f383 8811 	msr	BASEPRI, r3
 80071ec:	f3bf 8f6f 	isb	sy
 80071f0:	f3bf 8f4f 	dsb	sy
 80071f4:	b662      	cpsie	i
 80071f6:	61fb      	str	r3, [r7, #28]
 80071f8:	e7fe      	b.n	80071f8 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80071fa:	f001 f843 	bl	8008284 <xTaskGetSchedulerState>
 80071fe:	4603      	mov	r3, r0
 8007200:	2b00      	cmp	r3, #0
 8007202:	d102      	bne.n	800720a <xQueueReceive+0x72>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d101      	bne.n	800720e <xQueueReceive+0x76>
 800720a:	2301      	movs	r3, #1
 800720c:	e000      	b.n	8007210 <xQueueReceive+0x78>
 800720e:	2300      	movs	r3, #0
 8007210:	2b00      	cmp	r3, #0
 8007212:	d10b      	bne.n	800722c <xQueueReceive+0x94>
 8007214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007218:	b672      	cpsid	i
 800721a:	f383 8811 	msr	BASEPRI, r3
 800721e:	f3bf 8f6f 	isb	sy
 8007222:	f3bf 8f4f 	dsb	sy
 8007226:	b662      	cpsie	i
 8007228:	61bb      	str	r3, [r7, #24]
 800722a:	e7fe      	b.n	800722a <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800722c:	f001 fd6c 	bl	8008d08 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007234:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007238:	2b00      	cmp	r3, #0
 800723a:	d01f      	beq.n	800727c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800723c:	68b9      	ldr	r1, [r7, #8]
 800723e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007240:	f000 f8f6 	bl	8007430 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007246:	1e5a      	subs	r2, r3, #1
 8007248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800724a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800724c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800724e:	691b      	ldr	r3, [r3, #16]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d00f      	beq.n	8007274 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007256:	3310      	adds	r3, #16
 8007258:	4618      	mov	r0, r3
 800725a:	f000 fe55 	bl	8007f08 <xTaskRemoveFromEventList>
 800725e:	4603      	mov	r3, r0
 8007260:	2b00      	cmp	r3, #0
 8007262:	d007      	beq.n	8007274 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007264:	4b3c      	ldr	r3, [pc, #240]	; (8007358 <xQueueReceive+0x1c0>)
 8007266:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800726a:	601a      	str	r2, [r3, #0]
 800726c:	f3bf 8f4f 	dsb	sy
 8007270:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007274:	f001 fd7a 	bl	8008d6c <vPortExitCritical>
				return pdPASS;
 8007278:	2301      	movs	r3, #1
 800727a:	e069      	b.n	8007350 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d103      	bne.n	800728a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007282:	f001 fd73 	bl	8008d6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007286:	2300      	movs	r3, #0
 8007288:	e062      	b.n	8007350 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800728a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800728c:	2b00      	cmp	r3, #0
 800728e:	d106      	bne.n	800729e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007290:	f107 0310 	add.w	r3, r7, #16
 8007294:	4618      	mov	r0, r3
 8007296:	f000 fe9b 	bl	8007fd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800729a:	2301      	movs	r3, #1
 800729c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800729e:	f001 fd65 	bl	8008d6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80072a2:	f000 fc0b 	bl	8007abc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80072a6:	f001 fd2f 	bl	8008d08 <vPortEnterCritical>
 80072aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80072b0:	b25b      	sxtb	r3, r3
 80072b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072b6:	d103      	bne.n	80072c0 <xQueueReceive+0x128>
 80072b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ba:	2200      	movs	r2, #0
 80072bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072c6:	b25b      	sxtb	r3, r3
 80072c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072cc:	d103      	bne.n	80072d6 <xQueueReceive+0x13e>
 80072ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d0:	2200      	movs	r2, #0
 80072d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80072d6:	f001 fd49 	bl	8008d6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80072da:	1d3a      	adds	r2, r7, #4
 80072dc:	f107 0310 	add.w	r3, r7, #16
 80072e0:	4611      	mov	r1, r2
 80072e2:	4618      	mov	r0, r3
 80072e4:	f000 fe8a 	bl	8007ffc <xTaskCheckForTimeOut>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d123      	bne.n	8007336 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80072ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072f0:	f000 f916 	bl	8007520 <prvIsQueueEmpty>
 80072f4:	4603      	mov	r3, r0
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d017      	beq.n	800732a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80072fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072fc:	3324      	adds	r3, #36	; 0x24
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	4611      	mov	r1, r2
 8007302:	4618      	mov	r0, r3
 8007304:	f000 fdae 	bl	8007e64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007308:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800730a:	f000 f8b7 	bl	800747c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800730e:	f000 fbe3 	bl	8007ad8 <xTaskResumeAll>
 8007312:	4603      	mov	r3, r0
 8007314:	2b00      	cmp	r3, #0
 8007316:	d189      	bne.n	800722c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007318:	4b0f      	ldr	r3, [pc, #60]	; (8007358 <xQueueReceive+0x1c0>)
 800731a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800731e:	601a      	str	r2, [r3, #0]
 8007320:	f3bf 8f4f 	dsb	sy
 8007324:	f3bf 8f6f 	isb	sy
 8007328:	e780      	b.n	800722c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800732a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800732c:	f000 f8a6 	bl	800747c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007330:	f000 fbd2 	bl	8007ad8 <xTaskResumeAll>
 8007334:	e77a      	b.n	800722c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007336:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007338:	f000 f8a0 	bl	800747c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800733c:	f000 fbcc 	bl	8007ad8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007340:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007342:	f000 f8ed 	bl	8007520 <prvIsQueueEmpty>
 8007346:	4603      	mov	r3, r0
 8007348:	2b00      	cmp	r3, #0
 800734a:	f43f af6f 	beq.w	800722c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800734e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007350:	4618      	mov	r0, r3
 8007352:	3730      	adds	r7, #48	; 0x30
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}
 8007358:	e000ed04 	.word	0xe000ed04

0800735c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b086      	sub	sp, #24
 8007360:	af00      	add	r7, sp, #0
 8007362:	60f8      	str	r0, [r7, #12]
 8007364:	60b9      	str	r1, [r7, #8]
 8007366:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007368:	2300      	movs	r3, #0
 800736a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007370:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007376:	2b00      	cmp	r3, #0
 8007378:	d10d      	bne.n	8007396 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d14d      	bne.n	800741e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	4618      	mov	r0, r3
 8007388:	f000 ff9a 	bl	80082c0 <xTaskPriorityDisinherit>
 800738c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2200      	movs	r2, #0
 8007392:	609a      	str	r2, [r3, #8]
 8007394:	e043      	b.n	800741e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d119      	bne.n	80073d0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	6858      	ldr	r0, [r3, #4]
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073a4:	461a      	mov	r2, r3
 80073a6:	68b9      	ldr	r1, [r7, #8]
 80073a8:	f002 fd52 	bl	8009e50 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	685a      	ldr	r2, [r3, #4]
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b4:	441a      	add	r2, r3
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	685a      	ldr	r2, [r3, #4]
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d32b      	bcc.n	800741e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681a      	ldr	r2, [r3, #0]
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	605a      	str	r2, [r3, #4]
 80073ce:	e026      	b.n	800741e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	68d8      	ldr	r0, [r3, #12]
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d8:	461a      	mov	r2, r3
 80073da:	68b9      	ldr	r1, [r7, #8]
 80073dc:	f002 fd38 	bl	8009e50 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	68da      	ldr	r2, [r3, #12]
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e8:	425b      	negs	r3, r3
 80073ea:	441a      	add	r2, r3
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	68da      	ldr	r2, [r3, #12]
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d207      	bcs.n	800740c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	689a      	ldr	r2, [r3, #8]
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007404:	425b      	negs	r3, r3
 8007406:	441a      	add	r2, r3
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2b02      	cmp	r3, #2
 8007410:	d105      	bne.n	800741e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d002      	beq.n	800741e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	3b01      	subs	r3, #1
 800741c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	1c5a      	adds	r2, r3, #1
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007426:	697b      	ldr	r3, [r7, #20]
}
 8007428:	4618      	mov	r0, r3
 800742a:	3718      	adds	r7, #24
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}

08007430 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b082      	sub	sp, #8
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800743e:	2b00      	cmp	r3, #0
 8007440:	d018      	beq.n	8007474 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	68da      	ldr	r2, [r3, #12]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744a:	441a      	add	r2, r3
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	68da      	ldr	r2, [r3, #12]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	429a      	cmp	r2, r3
 800745a:	d303      	bcc.n	8007464 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	68d9      	ldr	r1, [r3, #12]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800746c:	461a      	mov	r2, r3
 800746e:	6838      	ldr	r0, [r7, #0]
 8007470:	f002 fcee 	bl	8009e50 <memcpy>
	}
}
 8007474:	bf00      	nop
 8007476:	3708      	adds	r7, #8
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}

0800747c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b084      	sub	sp, #16
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007484:	f001 fc40 	bl	8008d08 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800748e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007490:	e011      	b.n	80074b6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007496:	2b00      	cmp	r3, #0
 8007498:	d012      	beq.n	80074c0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	3324      	adds	r3, #36	; 0x24
 800749e:	4618      	mov	r0, r3
 80074a0:	f000 fd32 	bl	8007f08 <xTaskRemoveFromEventList>
 80074a4:	4603      	mov	r3, r0
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d001      	beq.n	80074ae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80074aa:	f000 fe0b 	bl	80080c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80074ae:	7bfb      	ldrb	r3, [r7, #15]
 80074b0:	3b01      	subs	r3, #1
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80074b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	dce9      	bgt.n	8007492 <prvUnlockQueue+0x16>
 80074be:	e000      	b.n	80074c2 <prvUnlockQueue+0x46>
					break;
 80074c0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	22ff      	movs	r2, #255	; 0xff
 80074c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80074ca:	f001 fc4f 	bl	8008d6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80074ce:	f001 fc1b 	bl	8008d08 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80074d8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80074da:	e011      	b.n	8007500 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	691b      	ldr	r3, [r3, #16]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d012      	beq.n	800750a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	3310      	adds	r3, #16
 80074e8:	4618      	mov	r0, r3
 80074ea:	f000 fd0d 	bl	8007f08 <xTaskRemoveFromEventList>
 80074ee:	4603      	mov	r3, r0
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d001      	beq.n	80074f8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80074f4:	f000 fde6 	bl	80080c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80074f8:	7bbb      	ldrb	r3, [r7, #14]
 80074fa:	3b01      	subs	r3, #1
 80074fc:	b2db      	uxtb	r3, r3
 80074fe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007500:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007504:	2b00      	cmp	r3, #0
 8007506:	dce9      	bgt.n	80074dc <prvUnlockQueue+0x60>
 8007508:	e000      	b.n	800750c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800750a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	22ff      	movs	r2, #255	; 0xff
 8007510:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007514:	f001 fc2a 	bl	8008d6c <vPortExitCritical>
}
 8007518:	bf00      	nop
 800751a:	3710      	adds	r7, #16
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}

08007520 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b084      	sub	sp, #16
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007528:	f001 fbee 	bl	8008d08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007530:	2b00      	cmp	r3, #0
 8007532:	d102      	bne.n	800753a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007534:	2301      	movs	r3, #1
 8007536:	60fb      	str	r3, [r7, #12]
 8007538:	e001      	b.n	800753e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800753a:	2300      	movs	r3, #0
 800753c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800753e:	f001 fc15 	bl	8008d6c <vPortExitCritical>

	return xReturn;
 8007542:	68fb      	ldr	r3, [r7, #12]
}
 8007544:	4618      	mov	r0, r3
 8007546:	3710      	adds	r7, #16
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007554:	f001 fbd8 	bl	8008d08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007560:	429a      	cmp	r2, r3
 8007562:	d102      	bne.n	800756a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007564:	2301      	movs	r3, #1
 8007566:	60fb      	str	r3, [r7, #12]
 8007568:	e001      	b.n	800756e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800756a:	2300      	movs	r3, #0
 800756c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800756e:	f001 fbfd 	bl	8008d6c <vPortExitCritical>

	return xReturn;
 8007572:	68fb      	ldr	r3, [r7, #12]
}
 8007574:	4618      	mov	r0, r3
 8007576:	3710      	adds	r7, #16
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800757c:	b480      	push	{r7}
 800757e:	b085      	sub	sp, #20
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007586:	2300      	movs	r3, #0
 8007588:	60fb      	str	r3, [r7, #12]
 800758a:	e014      	b.n	80075b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800758c:	4a0e      	ldr	r2, [pc, #56]	; (80075c8 <vQueueAddToRegistry+0x4c>)
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d10b      	bne.n	80075b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007598:	490b      	ldr	r1, [pc, #44]	; (80075c8 <vQueueAddToRegistry+0x4c>)
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	683a      	ldr	r2, [r7, #0]
 800759e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80075a2:	4a09      	ldr	r2, [pc, #36]	; (80075c8 <vQueueAddToRegistry+0x4c>)
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	00db      	lsls	r3, r3, #3
 80075a8:	4413      	add	r3, r2
 80075aa:	687a      	ldr	r2, [r7, #4]
 80075ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80075ae:	e005      	b.n	80075bc <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	3301      	adds	r3, #1
 80075b4:	60fb      	str	r3, [r7, #12]
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2b07      	cmp	r3, #7
 80075ba:	d9e7      	bls.n	800758c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80075bc:	bf00      	nop
 80075be:	3714      	adds	r7, #20
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr
 80075c8:	20005c9c 	.word	0x20005c9c

080075cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b086      	sub	sp, #24
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	60f8      	str	r0, [r7, #12]
 80075d4:	60b9      	str	r1, [r7, #8]
 80075d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80075dc:	f001 fb94 	bl	8008d08 <vPortEnterCritical>
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80075e6:	b25b      	sxtb	r3, r3
 80075e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075ec:	d103      	bne.n	80075f6 <vQueueWaitForMessageRestricted+0x2a>
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	2200      	movs	r2, #0
 80075f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80075fc:	b25b      	sxtb	r3, r3
 80075fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007602:	d103      	bne.n	800760c <vQueueWaitForMessageRestricted+0x40>
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	2200      	movs	r2, #0
 8007608:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800760c:	f001 fbae 	bl	8008d6c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007614:	2b00      	cmp	r3, #0
 8007616:	d106      	bne.n	8007626 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	3324      	adds	r3, #36	; 0x24
 800761c:	687a      	ldr	r2, [r7, #4]
 800761e:	68b9      	ldr	r1, [r7, #8]
 8007620:	4618      	mov	r0, r3
 8007622:	f000 fc45 	bl	8007eb0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007626:	6978      	ldr	r0, [r7, #20]
 8007628:	f7ff ff28 	bl	800747c <prvUnlockQueue>
	}
 800762c:	bf00      	nop
 800762e:	3718      	adds	r7, #24
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}

08007634 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007634:	b580      	push	{r7, lr}
 8007636:	b08e      	sub	sp, #56	; 0x38
 8007638:	af04      	add	r7, sp, #16
 800763a:	60f8      	str	r0, [r7, #12]
 800763c:	60b9      	str	r1, [r7, #8]
 800763e:	607a      	str	r2, [r7, #4]
 8007640:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007644:	2b00      	cmp	r3, #0
 8007646:	d10b      	bne.n	8007660 <xTaskCreateStatic+0x2c>
 8007648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800764c:	b672      	cpsid	i
 800764e:	f383 8811 	msr	BASEPRI, r3
 8007652:	f3bf 8f6f 	isb	sy
 8007656:	f3bf 8f4f 	dsb	sy
 800765a:	b662      	cpsie	i
 800765c:	623b      	str	r3, [r7, #32]
 800765e:	e7fe      	b.n	800765e <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8007660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007662:	2b00      	cmp	r3, #0
 8007664:	d10b      	bne.n	800767e <xTaskCreateStatic+0x4a>
 8007666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800766a:	b672      	cpsid	i
 800766c:	f383 8811 	msr	BASEPRI, r3
 8007670:	f3bf 8f6f 	isb	sy
 8007674:	f3bf 8f4f 	dsb	sy
 8007678:	b662      	cpsie	i
 800767a:	61fb      	str	r3, [r7, #28]
 800767c:	e7fe      	b.n	800767c <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800767e:	235c      	movs	r3, #92	; 0x5c
 8007680:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	2b5c      	cmp	r3, #92	; 0x5c
 8007686:	d00b      	beq.n	80076a0 <xTaskCreateStatic+0x6c>
 8007688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800768c:	b672      	cpsid	i
 800768e:	f383 8811 	msr	BASEPRI, r3
 8007692:	f3bf 8f6f 	isb	sy
 8007696:	f3bf 8f4f 	dsb	sy
 800769a:	b662      	cpsie	i
 800769c:	61bb      	str	r3, [r7, #24]
 800769e:	e7fe      	b.n	800769e <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80076a0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80076a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d01e      	beq.n	80076e6 <xTaskCreateStatic+0xb2>
 80076a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d01b      	beq.n	80076e6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80076ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076b0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80076b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80076b6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80076b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ba:	2202      	movs	r2, #2
 80076bc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80076c0:	2300      	movs	r3, #0
 80076c2:	9303      	str	r3, [sp, #12]
 80076c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c6:	9302      	str	r3, [sp, #8]
 80076c8:	f107 0314 	add.w	r3, r7, #20
 80076cc:	9301      	str	r3, [sp, #4]
 80076ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d0:	9300      	str	r3, [sp, #0]
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	68b9      	ldr	r1, [r7, #8]
 80076d8:	68f8      	ldr	r0, [r7, #12]
 80076da:	f000 f850 	bl	800777e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80076de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80076e0:	f000 f8de 	bl	80078a0 <prvAddNewTaskToReadyList>
 80076e4:	e001      	b.n	80076ea <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80076e6:	2300      	movs	r3, #0
 80076e8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80076ea:	697b      	ldr	r3, [r7, #20]
	}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3728      	adds	r7, #40	; 0x28
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}

080076f4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b08c      	sub	sp, #48	; 0x30
 80076f8:	af04      	add	r7, sp, #16
 80076fa:	60f8      	str	r0, [r7, #12]
 80076fc:	60b9      	str	r1, [r7, #8]
 80076fe:	603b      	str	r3, [r7, #0]
 8007700:	4613      	mov	r3, r2
 8007702:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007704:	88fb      	ldrh	r3, [r7, #6]
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	4618      	mov	r0, r3
 800770a:	f001 fc1f 	bl	8008f4c <pvPortMalloc>
 800770e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d00e      	beq.n	8007734 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007716:	205c      	movs	r0, #92	; 0x5c
 8007718:	f001 fc18 	bl	8008f4c <pvPortMalloc>
 800771c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800771e:	69fb      	ldr	r3, [r7, #28]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d003      	beq.n	800772c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007724:	69fb      	ldr	r3, [r7, #28]
 8007726:	697a      	ldr	r2, [r7, #20]
 8007728:	631a      	str	r2, [r3, #48]	; 0x30
 800772a:	e005      	b.n	8007738 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800772c:	6978      	ldr	r0, [r7, #20]
 800772e:	f001 fcd5 	bl	80090dc <vPortFree>
 8007732:	e001      	b.n	8007738 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007734:	2300      	movs	r3, #0
 8007736:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007738:	69fb      	ldr	r3, [r7, #28]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d017      	beq.n	800776e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800773e:	69fb      	ldr	r3, [r7, #28]
 8007740:	2200      	movs	r2, #0
 8007742:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007746:	88fa      	ldrh	r2, [r7, #6]
 8007748:	2300      	movs	r3, #0
 800774a:	9303      	str	r3, [sp, #12]
 800774c:	69fb      	ldr	r3, [r7, #28]
 800774e:	9302      	str	r3, [sp, #8]
 8007750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007752:	9301      	str	r3, [sp, #4]
 8007754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007756:	9300      	str	r3, [sp, #0]
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	68b9      	ldr	r1, [r7, #8]
 800775c:	68f8      	ldr	r0, [r7, #12]
 800775e:	f000 f80e 	bl	800777e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007762:	69f8      	ldr	r0, [r7, #28]
 8007764:	f000 f89c 	bl	80078a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007768:	2301      	movs	r3, #1
 800776a:	61bb      	str	r3, [r7, #24]
 800776c:	e002      	b.n	8007774 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800776e:	f04f 33ff 	mov.w	r3, #4294967295
 8007772:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007774:	69bb      	ldr	r3, [r7, #24]
	}
 8007776:	4618      	mov	r0, r3
 8007778:	3720      	adds	r7, #32
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}

0800777e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800777e:	b580      	push	{r7, lr}
 8007780:	b088      	sub	sp, #32
 8007782:	af00      	add	r7, sp, #0
 8007784:	60f8      	str	r0, [r7, #12]
 8007786:	60b9      	str	r1, [r7, #8]
 8007788:	607a      	str	r2, [r7, #4]
 800778a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800778c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800778e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	009b      	lsls	r3, r3, #2
 8007794:	461a      	mov	r2, r3
 8007796:	21a5      	movs	r1, #165	; 0xa5
 8007798:	f002 fb65 	bl	8009e66 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800779c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800779e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077a0:	6879      	ldr	r1, [r7, #4]
 80077a2:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80077a6:	440b      	add	r3, r1
 80077a8:	009b      	lsls	r3, r3, #2
 80077aa:	4413      	add	r3, r2
 80077ac:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80077ae:	69bb      	ldr	r3, [r7, #24]
 80077b0:	f023 0307 	bic.w	r3, r3, #7
 80077b4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80077b6:	69bb      	ldr	r3, [r7, #24]
 80077b8:	f003 0307 	and.w	r3, r3, #7
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d00b      	beq.n	80077d8 <prvInitialiseNewTask+0x5a>
 80077c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c4:	b672      	cpsid	i
 80077c6:	f383 8811 	msr	BASEPRI, r3
 80077ca:	f3bf 8f6f 	isb	sy
 80077ce:	f3bf 8f4f 	dsb	sy
 80077d2:	b662      	cpsie	i
 80077d4:	617b      	str	r3, [r7, #20]
 80077d6:	e7fe      	b.n	80077d6 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d01f      	beq.n	800781e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80077de:	2300      	movs	r3, #0
 80077e0:	61fb      	str	r3, [r7, #28]
 80077e2:	e012      	b.n	800780a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80077e4:	68ba      	ldr	r2, [r7, #8]
 80077e6:	69fb      	ldr	r3, [r7, #28]
 80077e8:	4413      	add	r3, r2
 80077ea:	7819      	ldrb	r1, [r3, #0]
 80077ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077ee:	69fb      	ldr	r3, [r7, #28]
 80077f0:	4413      	add	r3, r2
 80077f2:	3334      	adds	r3, #52	; 0x34
 80077f4:	460a      	mov	r2, r1
 80077f6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80077f8:	68ba      	ldr	r2, [r7, #8]
 80077fa:	69fb      	ldr	r3, [r7, #28]
 80077fc:	4413      	add	r3, r2
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d006      	beq.n	8007812 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007804:	69fb      	ldr	r3, [r7, #28]
 8007806:	3301      	adds	r3, #1
 8007808:	61fb      	str	r3, [r7, #28]
 800780a:	69fb      	ldr	r3, [r7, #28]
 800780c:	2b0f      	cmp	r3, #15
 800780e:	d9e9      	bls.n	80077e4 <prvInitialiseNewTask+0x66>
 8007810:	e000      	b.n	8007814 <prvInitialiseNewTask+0x96>
			{
				break;
 8007812:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007816:	2200      	movs	r2, #0
 8007818:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800781c:	e003      	b.n	8007826 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800781e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007820:	2200      	movs	r2, #0
 8007822:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007828:	2b37      	cmp	r3, #55	; 0x37
 800782a:	d901      	bls.n	8007830 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800782c:	2337      	movs	r3, #55	; 0x37
 800782e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007832:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007834:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007838:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800783a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800783c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800783e:	2200      	movs	r2, #0
 8007840:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007844:	3304      	adds	r3, #4
 8007846:	4618      	mov	r0, r3
 8007848:	f7ff f96a 	bl	8006b20 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800784c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800784e:	3318      	adds	r3, #24
 8007850:	4618      	mov	r0, r3
 8007852:	f7ff f965 	bl	8006b20 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007858:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800785a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800785c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800785e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007864:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007868:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800786a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800786c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800786e:	2200      	movs	r2, #0
 8007870:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007874:	2200      	movs	r2, #0
 8007876:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800787a:	683a      	ldr	r2, [r7, #0]
 800787c:	68f9      	ldr	r1, [r7, #12]
 800787e:	69b8      	ldr	r0, [r7, #24]
 8007880:	f001 f936 	bl	8008af0 <pxPortInitialiseStack>
 8007884:	4602      	mov	r2, r0
 8007886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007888:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800788a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800788c:	2b00      	cmp	r3, #0
 800788e:	d002      	beq.n	8007896 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007892:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007894:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007896:	bf00      	nop
 8007898:	3720      	adds	r7, #32
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}
	...

080078a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b082      	sub	sp, #8
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80078a8:	f001 fa2e 	bl	8008d08 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80078ac:	4b2d      	ldr	r3, [pc, #180]	; (8007964 <prvAddNewTaskToReadyList+0xc4>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	3301      	adds	r3, #1
 80078b2:	4a2c      	ldr	r2, [pc, #176]	; (8007964 <prvAddNewTaskToReadyList+0xc4>)
 80078b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80078b6:	4b2c      	ldr	r3, [pc, #176]	; (8007968 <prvAddNewTaskToReadyList+0xc8>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d109      	bne.n	80078d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80078be:	4a2a      	ldr	r2, [pc, #168]	; (8007968 <prvAddNewTaskToReadyList+0xc8>)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80078c4:	4b27      	ldr	r3, [pc, #156]	; (8007964 <prvAddNewTaskToReadyList+0xc4>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d110      	bne.n	80078ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80078cc:	f000 fc1e 	bl	800810c <prvInitialiseTaskLists>
 80078d0:	e00d      	b.n	80078ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80078d2:	4b26      	ldr	r3, [pc, #152]	; (800796c <prvAddNewTaskToReadyList+0xcc>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d109      	bne.n	80078ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80078da:	4b23      	ldr	r3, [pc, #140]	; (8007968 <prvAddNewTaskToReadyList+0xc8>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d802      	bhi.n	80078ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80078e8:	4a1f      	ldr	r2, [pc, #124]	; (8007968 <prvAddNewTaskToReadyList+0xc8>)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80078ee:	4b20      	ldr	r3, [pc, #128]	; (8007970 <prvAddNewTaskToReadyList+0xd0>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	3301      	adds	r3, #1
 80078f4:	4a1e      	ldr	r2, [pc, #120]	; (8007970 <prvAddNewTaskToReadyList+0xd0>)
 80078f6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80078f8:	4b1d      	ldr	r3, [pc, #116]	; (8007970 <prvAddNewTaskToReadyList+0xd0>)
 80078fa:	681a      	ldr	r2, [r3, #0]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007904:	4b1b      	ldr	r3, [pc, #108]	; (8007974 <prvAddNewTaskToReadyList+0xd4>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	429a      	cmp	r2, r3
 800790a:	d903      	bls.n	8007914 <prvAddNewTaskToReadyList+0x74>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007910:	4a18      	ldr	r2, [pc, #96]	; (8007974 <prvAddNewTaskToReadyList+0xd4>)
 8007912:	6013      	str	r3, [r2, #0]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007918:	4613      	mov	r3, r2
 800791a:	009b      	lsls	r3, r3, #2
 800791c:	4413      	add	r3, r2
 800791e:	009b      	lsls	r3, r3, #2
 8007920:	4a15      	ldr	r2, [pc, #84]	; (8007978 <prvAddNewTaskToReadyList+0xd8>)
 8007922:	441a      	add	r2, r3
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	3304      	adds	r3, #4
 8007928:	4619      	mov	r1, r3
 800792a:	4610      	mov	r0, r2
 800792c:	f7ff f905 	bl	8006b3a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007930:	f001 fa1c 	bl	8008d6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007934:	4b0d      	ldr	r3, [pc, #52]	; (800796c <prvAddNewTaskToReadyList+0xcc>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d00e      	beq.n	800795a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800793c:	4b0a      	ldr	r3, [pc, #40]	; (8007968 <prvAddNewTaskToReadyList+0xc8>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007946:	429a      	cmp	r2, r3
 8007948:	d207      	bcs.n	800795a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800794a:	4b0c      	ldr	r3, [pc, #48]	; (800797c <prvAddNewTaskToReadyList+0xdc>)
 800794c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007950:	601a      	str	r2, [r3, #0]
 8007952:	f3bf 8f4f 	dsb	sy
 8007956:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800795a:	bf00      	nop
 800795c:	3708      	adds	r7, #8
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}
 8007962:	bf00      	nop
 8007964:	20000dac 	.word	0x20000dac
 8007968:	200008d8 	.word	0x200008d8
 800796c:	20000db8 	.word	0x20000db8
 8007970:	20000dc8 	.word	0x20000dc8
 8007974:	20000db4 	.word	0x20000db4
 8007978:	200008dc 	.word	0x200008dc
 800797c:	e000ed04 	.word	0xe000ed04

08007980 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007980:	b580      	push	{r7, lr}
 8007982:	b084      	sub	sp, #16
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007988:	2300      	movs	r3, #0
 800798a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d018      	beq.n	80079c4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007992:	4b14      	ldr	r3, [pc, #80]	; (80079e4 <vTaskDelay+0x64>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d00b      	beq.n	80079b2 <vTaskDelay+0x32>
 800799a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800799e:	b672      	cpsid	i
 80079a0:	f383 8811 	msr	BASEPRI, r3
 80079a4:	f3bf 8f6f 	isb	sy
 80079a8:	f3bf 8f4f 	dsb	sy
 80079ac:	b662      	cpsie	i
 80079ae:	60bb      	str	r3, [r7, #8]
 80079b0:	e7fe      	b.n	80079b0 <vTaskDelay+0x30>
			vTaskSuspendAll();
 80079b2:	f000 f883 	bl	8007abc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80079b6:	2100      	movs	r1, #0
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f000 fcf1 	bl	80083a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80079be:	f000 f88b 	bl	8007ad8 <xTaskResumeAll>
 80079c2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d107      	bne.n	80079da <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80079ca:	4b07      	ldr	r3, [pc, #28]	; (80079e8 <vTaskDelay+0x68>)
 80079cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079d0:	601a      	str	r2, [r3, #0]
 80079d2:	f3bf 8f4f 	dsb	sy
 80079d6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80079da:	bf00      	nop
 80079dc:	3710      	adds	r7, #16
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}
 80079e2:	bf00      	nop
 80079e4:	20000dd4 	.word	0x20000dd4
 80079e8:	e000ed04 	.word	0xe000ed04

080079ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b08a      	sub	sp, #40	; 0x28
 80079f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80079f2:	2300      	movs	r3, #0
 80079f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80079f6:	2300      	movs	r3, #0
 80079f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80079fa:	463a      	mov	r2, r7
 80079fc:	1d39      	adds	r1, r7, #4
 80079fe:	f107 0308 	add.w	r3, r7, #8
 8007a02:	4618      	mov	r0, r3
 8007a04:	f7ff f838 	bl	8006a78 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007a08:	6839      	ldr	r1, [r7, #0]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	68ba      	ldr	r2, [r7, #8]
 8007a0e:	9202      	str	r2, [sp, #8]
 8007a10:	9301      	str	r3, [sp, #4]
 8007a12:	2300      	movs	r3, #0
 8007a14:	9300      	str	r3, [sp, #0]
 8007a16:	2300      	movs	r3, #0
 8007a18:	460a      	mov	r2, r1
 8007a1a:	4922      	ldr	r1, [pc, #136]	; (8007aa4 <vTaskStartScheduler+0xb8>)
 8007a1c:	4822      	ldr	r0, [pc, #136]	; (8007aa8 <vTaskStartScheduler+0xbc>)
 8007a1e:	f7ff fe09 	bl	8007634 <xTaskCreateStatic>
 8007a22:	4602      	mov	r2, r0
 8007a24:	4b21      	ldr	r3, [pc, #132]	; (8007aac <vTaskStartScheduler+0xc0>)
 8007a26:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007a28:	4b20      	ldr	r3, [pc, #128]	; (8007aac <vTaskStartScheduler+0xc0>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d002      	beq.n	8007a36 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007a30:	2301      	movs	r3, #1
 8007a32:	617b      	str	r3, [r7, #20]
 8007a34:	e001      	b.n	8007a3a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007a36:	2300      	movs	r3, #0
 8007a38:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	d102      	bne.n	8007a46 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007a40:	f000 fd02 	bl	8008448 <xTimerCreateTimerTask>
 8007a44:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d117      	bne.n	8007a7c <vTaskStartScheduler+0x90>
 8007a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a50:	b672      	cpsid	i
 8007a52:	f383 8811 	msr	BASEPRI, r3
 8007a56:	f3bf 8f6f 	isb	sy
 8007a5a:	f3bf 8f4f 	dsb	sy
 8007a5e:	b662      	cpsie	i
 8007a60:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007a62:	4b13      	ldr	r3, [pc, #76]	; (8007ab0 <vTaskStartScheduler+0xc4>)
 8007a64:	f04f 32ff 	mov.w	r2, #4294967295
 8007a68:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007a6a:	4b12      	ldr	r3, [pc, #72]	; (8007ab4 <vTaskStartScheduler+0xc8>)
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007a70:	4b11      	ldr	r3, [pc, #68]	; (8007ab8 <vTaskStartScheduler+0xcc>)
 8007a72:	2200      	movs	r2, #0
 8007a74:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007a76:	f001 f8cb 	bl	8008c10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007a7a:	e00f      	b.n	8007a9c <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a82:	d10b      	bne.n	8007a9c <vTaskStartScheduler+0xb0>
 8007a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a88:	b672      	cpsid	i
 8007a8a:	f383 8811 	msr	BASEPRI, r3
 8007a8e:	f3bf 8f6f 	isb	sy
 8007a92:	f3bf 8f4f 	dsb	sy
 8007a96:	b662      	cpsie	i
 8007a98:	60fb      	str	r3, [r7, #12]
 8007a9a:	e7fe      	b.n	8007a9a <vTaskStartScheduler+0xae>
}
 8007a9c:	bf00      	nop
 8007a9e:	3718      	adds	r7, #24
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}
 8007aa4:	0800a704 	.word	0x0800a704
 8007aa8:	080080dd 	.word	0x080080dd
 8007aac:	20000dd0 	.word	0x20000dd0
 8007ab0:	20000dcc 	.word	0x20000dcc
 8007ab4:	20000db8 	.word	0x20000db8
 8007ab8:	20000db0 	.word	0x20000db0

08007abc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007abc:	b480      	push	{r7}
 8007abe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007ac0:	4b04      	ldr	r3, [pc, #16]	; (8007ad4 <vTaskSuspendAll+0x18>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	4a03      	ldr	r2, [pc, #12]	; (8007ad4 <vTaskSuspendAll+0x18>)
 8007ac8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007aca:	bf00      	nop
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr
 8007ad4:	20000dd4 	.word	0x20000dd4

08007ad8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007ae6:	4b42      	ldr	r3, [pc, #264]	; (8007bf0 <xTaskResumeAll+0x118>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d10b      	bne.n	8007b06 <xTaskResumeAll+0x2e>
 8007aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af2:	b672      	cpsid	i
 8007af4:	f383 8811 	msr	BASEPRI, r3
 8007af8:	f3bf 8f6f 	isb	sy
 8007afc:	f3bf 8f4f 	dsb	sy
 8007b00:	b662      	cpsie	i
 8007b02:	603b      	str	r3, [r7, #0]
 8007b04:	e7fe      	b.n	8007b04 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007b06:	f001 f8ff 	bl	8008d08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007b0a:	4b39      	ldr	r3, [pc, #228]	; (8007bf0 <xTaskResumeAll+0x118>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	3b01      	subs	r3, #1
 8007b10:	4a37      	ldr	r2, [pc, #220]	; (8007bf0 <xTaskResumeAll+0x118>)
 8007b12:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b14:	4b36      	ldr	r3, [pc, #216]	; (8007bf0 <xTaskResumeAll+0x118>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d162      	bne.n	8007be2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007b1c:	4b35      	ldr	r3, [pc, #212]	; (8007bf4 <xTaskResumeAll+0x11c>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d05e      	beq.n	8007be2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007b24:	e02f      	b.n	8007b86 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b26:	4b34      	ldr	r3, [pc, #208]	; (8007bf8 <xTaskResumeAll+0x120>)
 8007b28:	68db      	ldr	r3, [r3, #12]
 8007b2a:	68db      	ldr	r3, [r3, #12]
 8007b2c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	3318      	adds	r3, #24
 8007b32:	4618      	mov	r0, r3
 8007b34:	f7ff f85e 	bl	8006bf4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	3304      	adds	r3, #4
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f7ff f859 	bl	8006bf4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b46:	4b2d      	ldr	r3, [pc, #180]	; (8007bfc <xTaskResumeAll+0x124>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	d903      	bls.n	8007b56 <xTaskResumeAll+0x7e>
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b52:	4a2a      	ldr	r2, [pc, #168]	; (8007bfc <xTaskResumeAll+0x124>)
 8007b54:	6013      	str	r3, [r2, #0]
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b5a:	4613      	mov	r3, r2
 8007b5c:	009b      	lsls	r3, r3, #2
 8007b5e:	4413      	add	r3, r2
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	4a27      	ldr	r2, [pc, #156]	; (8007c00 <xTaskResumeAll+0x128>)
 8007b64:	441a      	add	r2, r3
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	3304      	adds	r3, #4
 8007b6a:	4619      	mov	r1, r3
 8007b6c:	4610      	mov	r0, r2
 8007b6e:	f7fe ffe4 	bl	8006b3a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b76:	4b23      	ldr	r3, [pc, #140]	; (8007c04 <xTaskResumeAll+0x12c>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d302      	bcc.n	8007b86 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007b80:	4b21      	ldr	r3, [pc, #132]	; (8007c08 <xTaskResumeAll+0x130>)
 8007b82:	2201      	movs	r2, #1
 8007b84:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007b86:	4b1c      	ldr	r3, [pc, #112]	; (8007bf8 <xTaskResumeAll+0x120>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d1cb      	bne.n	8007b26 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d001      	beq.n	8007b98 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007b94:	f000 fb56 	bl	8008244 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007b98:	4b1c      	ldr	r3, [pc, #112]	; (8007c0c <xTaskResumeAll+0x134>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d010      	beq.n	8007bc6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007ba4:	f000 f846 	bl	8007c34 <xTaskIncrementTick>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d002      	beq.n	8007bb4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007bae:	4b16      	ldr	r3, [pc, #88]	; (8007c08 <xTaskResumeAll+0x130>)
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	3b01      	subs	r3, #1
 8007bb8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d1f1      	bne.n	8007ba4 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8007bc0:	4b12      	ldr	r3, [pc, #72]	; (8007c0c <xTaskResumeAll+0x134>)
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007bc6:	4b10      	ldr	r3, [pc, #64]	; (8007c08 <xTaskResumeAll+0x130>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d009      	beq.n	8007be2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007bd2:	4b0f      	ldr	r3, [pc, #60]	; (8007c10 <xTaskResumeAll+0x138>)
 8007bd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bd8:	601a      	str	r2, [r3, #0]
 8007bda:	f3bf 8f4f 	dsb	sy
 8007bde:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007be2:	f001 f8c3 	bl	8008d6c <vPortExitCritical>

	return xAlreadyYielded;
 8007be6:	68bb      	ldr	r3, [r7, #8]
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3710      	adds	r7, #16
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}
 8007bf0:	20000dd4 	.word	0x20000dd4
 8007bf4:	20000dac 	.word	0x20000dac
 8007bf8:	20000d6c 	.word	0x20000d6c
 8007bfc:	20000db4 	.word	0x20000db4
 8007c00:	200008dc 	.word	0x200008dc
 8007c04:	200008d8 	.word	0x200008d8
 8007c08:	20000dc0 	.word	0x20000dc0
 8007c0c:	20000dbc 	.word	0x20000dbc
 8007c10:	e000ed04 	.word	0xe000ed04

08007c14 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007c14:	b480      	push	{r7}
 8007c16:	b083      	sub	sp, #12
 8007c18:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007c1a:	4b05      	ldr	r3, [pc, #20]	; (8007c30 <xTaskGetTickCount+0x1c>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007c20:	687b      	ldr	r3, [r7, #4]
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	370c      	adds	r7, #12
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr
 8007c2e:	bf00      	nop
 8007c30:	20000db0 	.word	0x20000db0

08007c34 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b086      	sub	sp, #24
 8007c38:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c3e:	4b4f      	ldr	r3, [pc, #316]	; (8007d7c <xTaskIncrementTick+0x148>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	f040 808a 	bne.w	8007d5c <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007c48:	4b4d      	ldr	r3, [pc, #308]	; (8007d80 <xTaskIncrementTick+0x14c>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	3301      	adds	r3, #1
 8007c4e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007c50:	4a4b      	ldr	r2, [pc, #300]	; (8007d80 <xTaskIncrementTick+0x14c>)
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d121      	bne.n	8007ca0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007c5c:	4b49      	ldr	r3, [pc, #292]	; (8007d84 <xTaskIncrementTick+0x150>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d00b      	beq.n	8007c7e <xTaskIncrementTick+0x4a>
 8007c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c6a:	b672      	cpsid	i
 8007c6c:	f383 8811 	msr	BASEPRI, r3
 8007c70:	f3bf 8f6f 	isb	sy
 8007c74:	f3bf 8f4f 	dsb	sy
 8007c78:	b662      	cpsie	i
 8007c7a:	603b      	str	r3, [r7, #0]
 8007c7c:	e7fe      	b.n	8007c7c <xTaskIncrementTick+0x48>
 8007c7e:	4b41      	ldr	r3, [pc, #260]	; (8007d84 <xTaskIncrementTick+0x150>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	60fb      	str	r3, [r7, #12]
 8007c84:	4b40      	ldr	r3, [pc, #256]	; (8007d88 <xTaskIncrementTick+0x154>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a3e      	ldr	r2, [pc, #248]	; (8007d84 <xTaskIncrementTick+0x150>)
 8007c8a:	6013      	str	r3, [r2, #0]
 8007c8c:	4a3e      	ldr	r2, [pc, #248]	; (8007d88 <xTaskIncrementTick+0x154>)
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	6013      	str	r3, [r2, #0]
 8007c92:	4b3e      	ldr	r3, [pc, #248]	; (8007d8c <xTaskIncrementTick+0x158>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	3301      	adds	r3, #1
 8007c98:	4a3c      	ldr	r2, [pc, #240]	; (8007d8c <xTaskIncrementTick+0x158>)
 8007c9a:	6013      	str	r3, [r2, #0]
 8007c9c:	f000 fad2 	bl	8008244 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007ca0:	4b3b      	ldr	r3, [pc, #236]	; (8007d90 <xTaskIncrementTick+0x15c>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	693a      	ldr	r2, [r7, #16]
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	d349      	bcc.n	8007d3e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007caa:	4b36      	ldr	r3, [pc, #216]	; (8007d84 <xTaskIncrementTick+0x150>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d104      	bne.n	8007cbe <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cb4:	4b36      	ldr	r3, [pc, #216]	; (8007d90 <xTaskIncrementTick+0x15c>)
 8007cb6:	f04f 32ff 	mov.w	r2, #4294967295
 8007cba:	601a      	str	r2, [r3, #0]
					break;
 8007cbc:	e03f      	b.n	8007d3e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cbe:	4b31      	ldr	r3, [pc, #196]	; (8007d84 <xTaskIncrementTick+0x150>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	68db      	ldr	r3, [r3, #12]
 8007cc4:	68db      	ldr	r3, [r3, #12]
 8007cc6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007cce:	693a      	ldr	r2, [r7, #16]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	429a      	cmp	r2, r3
 8007cd4:	d203      	bcs.n	8007cde <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007cd6:	4a2e      	ldr	r2, [pc, #184]	; (8007d90 <xTaskIncrementTick+0x15c>)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007cdc:	e02f      	b.n	8007d3e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	3304      	adds	r3, #4
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f7fe ff86 	bl	8006bf4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d004      	beq.n	8007cfa <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	3318      	adds	r3, #24
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f7fe ff7d 	bl	8006bf4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cfe:	4b25      	ldr	r3, [pc, #148]	; (8007d94 <xTaskIncrementTick+0x160>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	429a      	cmp	r2, r3
 8007d04:	d903      	bls.n	8007d0e <xTaskIncrementTick+0xda>
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d0a:	4a22      	ldr	r2, [pc, #136]	; (8007d94 <xTaskIncrementTick+0x160>)
 8007d0c:	6013      	str	r3, [r2, #0]
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d12:	4613      	mov	r3, r2
 8007d14:	009b      	lsls	r3, r3, #2
 8007d16:	4413      	add	r3, r2
 8007d18:	009b      	lsls	r3, r3, #2
 8007d1a:	4a1f      	ldr	r2, [pc, #124]	; (8007d98 <xTaskIncrementTick+0x164>)
 8007d1c:	441a      	add	r2, r3
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	3304      	adds	r3, #4
 8007d22:	4619      	mov	r1, r3
 8007d24:	4610      	mov	r0, r2
 8007d26:	f7fe ff08 	bl	8006b3a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d2e:	4b1b      	ldr	r3, [pc, #108]	; (8007d9c <xTaskIncrementTick+0x168>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d3b8      	bcc.n	8007caa <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007d38:	2301      	movs	r3, #1
 8007d3a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d3c:	e7b5      	b.n	8007caa <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007d3e:	4b17      	ldr	r3, [pc, #92]	; (8007d9c <xTaskIncrementTick+0x168>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d44:	4914      	ldr	r1, [pc, #80]	; (8007d98 <xTaskIncrementTick+0x164>)
 8007d46:	4613      	mov	r3, r2
 8007d48:	009b      	lsls	r3, r3, #2
 8007d4a:	4413      	add	r3, r2
 8007d4c:	009b      	lsls	r3, r3, #2
 8007d4e:	440b      	add	r3, r1
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d907      	bls.n	8007d66 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8007d56:	2301      	movs	r3, #1
 8007d58:	617b      	str	r3, [r7, #20]
 8007d5a:	e004      	b.n	8007d66 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007d5c:	4b10      	ldr	r3, [pc, #64]	; (8007da0 <xTaskIncrementTick+0x16c>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	3301      	adds	r3, #1
 8007d62:	4a0f      	ldr	r2, [pc, #60]	; (8007da0 <xTaskIncrementTick+0x16c>)
 8007d64:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007d66:	4b0f      	ldr	r3, [pc, #60]	; (8007da4 <xTaskIncrementTick+0x170>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d001      	beq.n	8007d72 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007d72:	697b      	ldr	r3, [r7, #20]
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3718      	adds	r7, #24
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}
 8007d7c:	20000dd4 	.word	0x20000dd4
 8007d80:	20000db0 	.word	0x20000db0
 8007d84:	20000d64 	.word	0x20000d64
 8007d88:	20000d68 	.word	0x20000d68
 8007d8c:	20000dc4 	.word	0x20000dc4
 8007d90:	20000dcc 	.word	0x20000dcc
 8007d94:	20000db4 	.word	0x20000db4
 8007d98:	200008dc 	.word	0x200008dc
 8007d9c:	200008d8 	.word	0x200008d8
 8007da0:	20000dbc 	.word	0x20000dbc
 8007da4:	20000dc0 	.word	0x20000dc0

08007da8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007da8:	b480      	push	{r7}
 8007daa:	b085      	sub	sp, #20
 8007dac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007dae:	4b28      	ldr	r3, [pc, #160]	; (8007e50 <vTaskSwitchContext+0xa8>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d003      	beq.n	8007dbe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007db6:	4b27      	ldr	r3, [pc, #156]	; (8007e54 <vTaskSwitchContext+0xac>)
 8007db8:	2201      	movs	r2, #1
 8007dba:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007dbc:	e042      	b.n	8007e44 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8007dbe:	4b25      	ldr	r3, [pc, #148]	; (8007e54 <vTaskSwitchContext+0xac>)
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dc4:	4b24      	ldr	r3, [pc, #144]	; (8007e58 <vTaskSwitchContext+0xb0>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	60fb      	str	r3, [r7, #12]
 8007dca:	e011      	b.n	8007df0 <vTaskSwitchContext+0x48>
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d10b      	bne.n	8007dea <vTaskSwitchContext+0x42>
 8007dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd6:	b672      	cpsid	i
 8007dd8:	f383 8811 	msr	BASEPRI, r3
 8007ddc:	f3bf 8f6f 	isb	sy
 8007de0:	f3bf 8f4f 	dsb	sy
 8007de4:	b662      	cpsie	i
 8007de6:	607b      	str	r3, [r7, #4]
 8007de8:	e7fe      	b.n	8007de8 <vTaskSwitchContext+0x40>
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	3b01      	subs	r3, #1
 8007dee:	60fb      	str	r3, [r7, #12]
 8007df0:	491a      	ldr	r1, [pc, #104]	; (8007e5c <vTaskSwitchContext+0xb4>)
 8007df2:	68fa      	ldr	r2, [r7, #12]
 8007df4:	4613      	mov	r3, r2
 8007df6:	009b      	lsls	r3, r3, #2
 8007df8:	4413      	add	r3, r2
 8007dfa:	009b      	lsls	r3, r3, #2
 8007dfc:	440b      	add	r3, r1
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d0e3      	beq.n	8007dcc <vTaskSwitchContext+0x24>
 8007e04:	68fa      	ldr	r2, [r7, #12]
 8007e06:	4613      	mov	r3, r2
 8007e08:	009b      	lsls	r3, r3, #2
 8007e0a:	4413      	add	r3, r2
 8007e0c:	009b      	lsls	r3, r3, #2
 8007e0e:	4a13      	ldr	r2, [pc, #76]	; (8007e5c <vTaskSwitchContext+0xb4>)
 8007e10:	4413      	add	r3, r2
 8007e12:	60bb      	str	r3, [r7, #8]
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	685a      	ldr	r2, [r3, #4]
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	605a      	str	r2, [r3, #4]
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	685a      	ldr	r2, [r3, #4]
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	3308      	adds	r3, #8
 8007e26:	429a      	cmp	r2, r3
 8007e28:	d104      	bne.n	8007e34 <vTaskSwitchContext+0x8c>
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	685a      	ldr	r2, [r3, #4]
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	605a      	str	r2, [r3, #4]
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	685b      	ldr	r3, [r3, #4]
 8007e38:	68db      	ldr	r3, [r3, #12]
 8007e3a:	4a09      	ldr	r2, [pc, #36]	; (8007e60 <vTaskSwitchContext+0xb8>)
 8007e3c:	6013      	str	r3, [r2, #0]
 8007e3e:	4a06      	ldr	r2, [pc, #24]	; (8007e58 <vTaskSwitchContext+0xb0>)
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	6013      	str	r3, [r2, #0]
}
 8007e44:	bf00      	nop
 8007e46:	3714      	adds	r7, #20
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr
 8007e50:	20000dd4 	.word	0x20000dd4
 8007e54:	20000dc0 	.word	0x20000dc0
 8007e58:	20000db4 	.word	0x20000db4
 8007e5c:	200008dc 	.word	0x200008dc
 8007e60:	200008d8 	.word	0x200008d8

08007e64 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b084      	sub	sp, #16
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d10b      	bne.n	8007e8c <vTaskPlaceOnEventList+0x28>
 8007e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e78:	b672      	cpsid	i
 8007e7a:	f383 8811 	msr	BASEPRI, r3
 8007e7e:	f3bf 8f6f 	isb	sy
 8007e82:	f3bf 8f4f 	dsb	sy
 8007e86:	b662      	cpsie	i
 8007e88:	60fb      	str	r3, [r7, #12]
 8007e8a:	e7fe      	b.n	8007e8a <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007e8c:	4b07      	ldr	r3, [pc, #28]	; (8007eac <vTaskPlaceOnEventList+0x48>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	3318      	adds	r3, #24
 8007e92:	4619      	mov	r1, r3
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f7fe fe74 	bl	8006b82 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007e9a:	2101      	movs	r1, #1
 8007e9c:	6838      	ldr	r0, [r7, #0]
 8007e9e:	f000 fa7f 	bl	80083a0 <prvAddCurrentTaskToDelayedList>
}
 8007ea2:	bf00      	nop
 8007ea4:	3710      	adds	r7, #16
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}
 8007eaa:	bf00      	nop
 8007eac:	200008d8 	.word	0x200008d8

08007eb0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b086      	sub	sp, #24
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	60f8      	str	r0, [r7, #12]
 8007eb8:	60b9      	str	r1, [r7, #8]
 8007eba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d10b      	bne.n	8007eda <vTaskPlaceOnEventListRestricted+0x2a>
 8007ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec6:	b672      	cpsid	i
 8007ec8:	f383 8811 	msr	BASEPRI, r3
 8007ecc:	f3bf 8f6f 	isb	sy
 8007ed0:	f3bf 8f4f 	dsb	sy
 8007ed4:	b662      	cpsie	i
 8007ed6:	617b      	str	r3, [r7, #20]
 8007ed8:	e7fe      	b.n	8007ed8 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007eda:	4b0a      	ldr	r3, [pc, #40]	; (8007f04 <vTaskPlaceOnEventListRestricted+0x54>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	3318      	adds	r3, #24
 8007ee0:	4619      	mov	r1, r3
 8007ee2:	68f8      	ldr	r0, [r7, #12]
 8007ee4:	f7fe fe29 	bl	8006b3a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d002      	beq.n	8007ef4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007eee:	f04f 33ff 	mov.w	r3, #4294967295
 8007ef2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007ef4:	6879      	ldr	r1, [r7, #4]
 8007ef6:	68b8      	ldr	r0, [r7, #8]
 8007ef8:	f000 fa52 	bl	80083a0 <prvAddCurrentTaskToDelayedList>
	}
 8007efc:	bf00      	nop
 8007efe:	3718      	adds	r7, #24
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}
 8007f04:	200008d8 	.word	0x200008d8

08007f08 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b086      	sub	sp, #24
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	68db      	ldr	r3, [r3, #12]
 8007f14:	68db      	ldr	r3, [r3, #12]
 8007f16:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d10b      	bne.n	8007f36 <xTaskRemoveFromEventList+0x2e>
 8007f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f22:	b672      	cpsid	i
 8007f24:	f383 8811 	msr	BASEPRI, r3
 8007f28:	f3bf 8f6f 	isb	sy
 8007f2c:	f3bf 8f4f 	dsb	sy
 8007f30:	b662      	cpsie	i
 8007f32:	60fb      	str	r3, [r7, #12]
 8007f34:	e7fe      	b.n	8007f34 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	3318      	adds	r3, #24
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f7fe fe5a 	bl	8006bf4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f40:	4b1d      	ldr	r3, [pc, #116]	; (8007fb8 <xTaskRemoveFromEventList+0xb0>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d11d      	bne.n	8007f84 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	3304      	adds	r3, #4
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f7fe fe51 	bl	8006bf4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f56:	4b19      	ldr	r3, [pc, #100]	; (8007fbc <xTaskRemoveFromEventList+0xb4>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	d903      	bls.n	8007f66 <xTaskRemoveFromEventList+0x5e>
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f62:	4a16      	ldr	r2, [pc, #88]	; (8007fbc <xTaskRemoveFromEventList+0xb4>)
 8007f64:	6013      	str	r3, [r2, #0]
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f6a:	4613      	mov	r3, r2
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	4413      	add	r3, r2
 8007f70:	009b      	lsls	r3, r3, #2
 8007f72:	4a13      	ldr	r2, [pc, #76]	; (8007fc0 <xTaskRemoveFromEventList+0xb8>)
 8007f74:	441a      	add	r2, r3
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	3304      	adds	r3, #4
 8007f7a:	4619      	mov	r1, r3
 8007f7c:	4610      	mov	r0, r2
 8007f7e:	f7fe fddc 	bl	8006b3a <vListInsertEnd>
 8007f82:	e005      	b.n	8007f90 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	3318      	adds	r3, #24
 8007f88:	4619      	mov	r1, r3
 8007f8a:	480e      	ldr	r0, [pc, #56]	; (8007fc4 <xTaskRemoveFromEventList+0xbc>)
 8007f8c:	f7fe fdd5 	bl	8006b3a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f94:	4b0c      	ldr	r3, [pc, #48]	; (8007fc8 <xTaskRemoveFromEventList+0xc0>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	d905      	bls.n	8007faa <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007fa2:	4b0a      	ldr	r3, [pc, #40]	; (8007fcc <xTaskRemoveFromEventList+0xc4>)
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	601a      	str	r2, [r3, #0]
 8007fa8:	e001      	b.n	8007fae <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007faa:	2300      	movs	r3, #0
 8007fac:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007fae:	697b      	ldr	r3, [r7, #20]
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3718      	adds	r7, #24
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}
 8007fb8:	20000dd4 	.word	0x20000dd4
 8007fbc:	20000db4 	.word	0x20000db4
 8007fc0:	200008dc 	.word	0x200008dc
 8007fc4:	20000d6c 	.word	0x20000d6c
 8007fc8:	200008d8 	.word	0x200008d8
 8007fcc:	20000dc0 	.word	0x20000dc0

08007fd0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b083      	sub	sp, #12
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007fd8:	4b06      	ldr	r3, [pc, #24]	; (8007ff4 <vTaskInternalSetTimeOutState+0x24>)
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007fe0:	4b05      	ldr	r3, [pc, #20]	; (8007ff8 <vTaskInternalSetTimeOutState+0x28>)
 8007fe2:	681a      	ldr	r2, [r3, #0]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	605a      	str	r2, [r3, #4]
}
 8007fe8:	bf00      	nop
 8007fea:	370c      	adds	r7, #12
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr
 8007ff4:	20000dc4 	.word	0x20000dc4
 8007ff8:	20000db0 	.word	0x20000db0

08007ffc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b088      	sub	sp, #32
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d10b      	bne.n	8008024 <xTaskCheckForTimeOut+0x28>
 800800c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008010:	b672      	cpsid	i
 8008012:	f383 8811 	msr	BASEPRI, r3
 8008016:	f3bf 8f6f 	isb	sy
 800801a:	f3bf 8f4f 	dsb	sy
 800801e:	b662      	cpsie	i
 8008020:	613b      	str	r3, [r7, #16]
 8008022:	e7fe      	b.n	8008022 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d10b      	bne.n	8008042 <xTaskCheckForTimeOut+0x46>
 800802a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800802e:	b672      	cpsid	i
 8008030:	f383 8811 	msr	BASEPRI, r3
 8008034:	f3bf 8f6f 	isb	sy
 8008038:	f3bf 8f4f 	dsb	sy
 800803c:	b662      	cpsie	i
 800803e:	60fb      	str	r3, [r7, #12]
 8008040:	e7fe      	b.n	8008040 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8008042:	f000 fe61 	bl	8008d08 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008046:	4b1d      	ldr	r3, [pc, #116]	; (80080bc <xTaskCheckForTimeOut+0xc0>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	69ba      	ldr	r2, [r7, #24]
 8008052:	1ad3      	subs	r3, r2, r3
 8008054:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800805e:	d102      	bne.n	8008066 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008060:	2300      	movs	r3, #0
 8008062:	61fb      	str	r3, [r7, #28]
 8008064:	e023      	b.n	80080ae <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681a      	ldr	r2, [r3, #0]
 800806a:	4b15      	ldr	r3, [pc, #84]	; (80080c0 <xTaskCheckForTimeOut+0xc4>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	429a      	cmp	r2, r3
 8008070:	d007      	beq.n	8008082 <xTaskCheckForTimeOut+0x86>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	69ba      	ldr	r2, [r7, #24]
 8008078:	429a      	cmp	r2, r3
 800807a:	d302      	bcc.n	8008082 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800807c:	2301      	movs	r3, #1
 800807e:	61fb      	str	r3, [r7, #28]
 8008080:	e015      	b.n	80080ae <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	697a      	ldr	r2, [r7, #20]
 8008088:	429a      	cmp	r2, r3
 800808a:	d20b      	bcs.n	80080a4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	681a      	ldr	r2, [r3, #0]
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	1ad2      	subs	r2, r2, r3
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f7ff ff99 	bl	8007fd0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800809e:	2300      	movs	r3, #0
 80080a0:	61fb      	str	r3, [r7, #28]
 80080a2:	e004      	b.n	80080ae <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	2200      	movs	r2, #0
 80080a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80080aa:	2301      	movs	r3, #1
 80080ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80080ae:	f000 fe5d 	bl	8008d6c <vPortExitCritical>

	return xReturn;
 80080b2:	69fb      	ldr	r3, [r7, #28]
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3720      	adds	r7, #32
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}
 80080bc:	20000db0 	.word	0x20000db0
 80080c0:	20000dc4 	.word	0x20000dc4

080080c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80080c4:	b480      	push	{r7}
 80080c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80080c8:	4b03      	ldr	r3, [pc, #12]	; (80080d8 <vTaskMissedYield+0x14>)
 80080ca:	2201      	movs	r2, #1
 80080cc:	601a      	str	r2, [r3, #0]
}
 80080ce:	bf00      	nop
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr
 80080d8:	20000dc0 	.word	0x20000dc0

080080dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b082      	sub	sp, #8
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80080e4:	f000 f852 	bl	800818c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80080e8:	4b06      	ldr	r3, [pc, #24]	; (8008104 <prvIdleTask+0x28>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d9f9      	bls.n	80080e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80080f0:	4b05      	ldr	r3, [pc, #20]	; (8008108 <prvIdleTask+0x2c>)
 80080f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080f6:	601a      	str	r2, [r3, #0]
 80080f8:	f3bf 8f4f 	dsb	sy
 80080fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008100:	e7f0      	b.n	80080e4 <prvIdleTask+0x8>
 8008102:	bf00      	nop
 8008104:	200008dc 	.word	0x200008dc
 8008108:	e000ed04 	.word	0xe000ed04

0800810c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b082      	sub	sp, #8
 8008110:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008112:	2300      	movs	r3, #0
 8008114:	607b      	str	r3, [r7, #4]
 8008116:	e00c      	b.n	8008132 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008118:	687a      	ldr	r2, [r7, #4]
 800811a:	4613      	mov	r3, r2
 800811c:	009b      	lsls	r3, r3, #2
 800811e:	4413      	add	r3, r2
 8008120:	009b      	lsls	r3, r3, #2
 8008122:	4a12      	ldr	r2, [pc, #72]	; (800816c <prvInitialiseTaskLists+0x60>)
 8008124:	4413      	add	r3, r2
 8008126:	4618      	mov	r0, r3
 8008128:	f7fe fcda 	bl	8006ae0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	3301      	adds	r3, #1
 8008130:	607b      	str	r3, [r7, #4]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2b37      	cmp	r3, #55	; 0x37
 8008136:	d9ef      	bls.n	8008118 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008138:	480d      	ldr	r0, [pc, #52]	; (8008170 <prvInitialiseTaskLists+0x64>)
 800813a:	f7fe fcd1 	bl	8006ae0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800813e:	480d      	ldr	r0, [pc, #52]	; (8008174 <prvInitialiseTaskLists+0x68>)
 8008140:	f7fe fcce 	bl	8006ae0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008144:	480c      	ldr	r0, [pc, #48]	; (8008178 <prvInitialiseTaskLists+0x6c>)
 8008146:	f7fe fccb 	bl	8006ae0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800814a:	480c      	ldr	r0, [pc, #48]	; (800817c <prvInitialiseTaskLists+0x70>)
 800814c:	f7fe fcc8 	bl	8006ae0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008150:	480b      	ldr	r0, [pc, #44]	; (8008180 <prvInitialiseTaskLists+0x74>)
 8008152:	f7fe fcc5 	bl	8006ae0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008156:	4b0b      	ldr	r3, [pc, #44]	; (8008184 <prvInitialiseTaskLists+0x78>)
 8008158:	4a05      	ldr	r2, [pc, #20]	; (8008170 <prvInitialiseTaskLists+0x64>)
 800815a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800815c:	4b0a      	ldr	r3, [pc, #40]	; (8008188 <prvInitialiseTaskLists+0x7c>)
 800815e:	4a05      	ldr	r2, [pc, #20]	; (8008174 <prvInitialiseTaskLists+0x68>)
 8008160:	601a      	str	r2, [r3, #0]
}
 8008162:	bf00      	nop
 8008164:	3708      	adds	r7, #8
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}
 800816a:	bf00      	nop
 800816c:	200008dc 	.word	0x200008dc
 8008170:	20000d3c 	.word	0x20000d3c
 8008174:	20000d50 	.word	0x20000d50
 8008178:	20000d6c 	.word	0x20000d6c
 800817c:	20000d80 	.word	0x20000d80
 8008180:	20000d98 	.word	0x20000d98
 8008184:	20000d64 	.word	0x20000d64
 8008188:	20000d68 	.word	0x20000d68

0800818c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b082      	sub	sp, #8
 8008190:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008192:	e019      	b.n	80081c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008194:	f000 fdb8 	bl	8008d08 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008198:	4b0f      	ldr	r3, [pc, #60]	; (80081d8 <prvCheckTasksWaitingTermination+0x4c>)
 800819a:	68db      	ldr	r3, [r3, #12]
 800819c:	68db      	ldr	r3, [r3, #12]
 800819e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	3304      	adds	r3, #4
 80081a4:	4618      	mov	r0, r3
 80081a6:	f7fe fd25 	bl	8006bf4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80081aa:	4b0c      	ldr	r3, [pc, #48]	; (80081dc <prvCheckTasksWaitingTermination+0x50>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	3b01      	subs	r3, #1
 80081b0:	4a0a      	ldr	r2, [pc, #40]	; (80081dc <prvCheckTasksWaitingTermination+0x50>)
 80081b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80081b4:	4b0a      	ldr	r3, [pc, #40]	; (80081e0 <prvCheckTasksWaitingTermination+0x54>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	3b01      	subs	r3, #1
 80081ba:	4a09      	ldr	r2, [pc, #36]	; (80081e0 <prvCheckTasksWaitingTermination+0x54>)
 80081bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80081be:	f000 fdd5 	bl	8008d6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 f80e 	bl	80081e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80081c8:	4b05      	ldr	r3, [pc, #20]	; (80081e0 <prvCheckTasksWaitingTermination+0x54>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d1e1      	bne.n	8008194 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80081d0:	bf00      	nop
 80081d2:	3708      	adds	r7, #8
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}
 80081d8:	20000d80 	.word	0x20000d80
 80081dc:	20000dac 	.word	0x20000dac
 80081e0:	20000d94 	.word	0x20000d94

080081e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b084      	sub	sp, #16
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d108      	bne.n	8008208 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081fa:	4618      	mov	r0, r3
 80081fc:	f000 ff6e 	bl	80090dc <vPortFree>
				vPortFree( pxTCB );
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f000 ff6b 	bl	80090dc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008206:	e019      	b.n	800823c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800820e:	2b01      	cmp	r3, #1
 8008210:	d103      	bne.n	800821a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 ff62 	bl	80090dc <vPortFree>
	}
 8008218:	e010      	b.n	800823c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008220:	2b02      	cmp	r3, #2
 8008222:	d00b      	beq.n	800823c <prvDeleteTCB+0x58>
 8008224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008228:	b672      	cpsid	i
 800822a:	f383 8811 	msr	BASEPRI, r3
 800822e:	f3bf 8f6f 	isb	sy
 8008232:	f3bf 8f4f 	dsb	sy
 8008236:	b662      	cpsie	i
 8008238:	60fb      	str	r3, [r7, #12]
 800823a:	e7fe      	b.n	800823a <prvDeleteTCB+0x56>
	}
 800823c:	bf00      	nop
 800823e:	3710      	adds	r7, #16
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008244:	b480      	push	{r7}
 8008246:	b083      	sub	sp, #12
 8008248:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800824a:	4b0c      	ldr	r3, [pc, #48]	; (800827c <prvResetNextTaskUnblockTime+0x38>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d104      	bne.n	800825e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008254:	4b0a      	ldr	r3, [pc, #40]	; (8008280 <prvResetNextTaskUnblockTime+0x3c>)
 8008256:	f04f 32ff 	mov.w	r2, #4294967295
 800825a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800825c:	e008      	b.n	8008270 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800825e:	4b07      	ldr	r3, [pc, #28]	; (800827c <prvResetNextTaskUnblockTime+0x38>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	68db      	ldr	r3, [r3, #12]
 8008264:	68db      	ldr	r3, [r3, #12]
 8008266:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	685b      	ldr	r3, [r3, #4]
 800826c:	4a04      	ldr	r2, [pc, #16]	; (8008280 <prvResetNextTaskUnblockTime+0x3c>)
 800826e:	6013      	str	r3, [r2, #0]
}
 8008270:	bf00      	nop
 8008272:	370c      	adds	r7, #12
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr
 800827c:	20000d64 	.word	0x20000d64
 8008280:	20000dcc 	.word	0x20000dcc

08008284 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008284:	b480      	push	{r7}
 8008286:	b083      	sub	sp, #12
 8008288:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800828a:	4b0b      	ldr	r3, [pc, #44]	; (80082b8 <xTaskGetSchedulerState+0x34>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d102      	bne.n	8008298 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008292:	2301      	movs	r3, #1
 8008294:	607b      	str	r3, [r7, #4]
 8008296:	e008      	b.n	80082aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008298:	4b08      	ldr	r3, [pc, #32]	; (80082bc <xTaskGetSchedulerState+0x38>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d102      	bne.n	80082a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80082a0:	2302      	movs	r3, #2
 80082a2:	607b      	str	r3, [r7, #4]
 80082a4:	e001      	b.n	80082aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80082a6:	2300      	movs	r3, #0
 80082a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80082aa:	687b      	ldr	r3, [r7, #4]
	}
 80082ac:	4618      	mov	r0, r3
 80082ae:	370c      	adds	r7, #12
 80082b0:	46bd      	mov	sp, r7
 80082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b6:	4770      	bx	lr
 80082b8:	20000db8 	.word	0x20000db8
 80082bc:	20000dd4 	.word	0x20000dd4

080082c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b086      	sub	sp, #24
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80082cc:	2300      	movs	r3, #0
 80082ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d058      	beq.n	8008388 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80082d6:	4b2f      	ldr	r3, [pc, #188]	; (8008394 <xTaskPriorityDisinherit+0xd4>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	693a      	ldr	r2, [r7, #16]
 80082dc:	429a      	cmp	r2, r3
 80082de:	d00b      	beq.n	80082f8 <xTaskPriorityDisinherit+0x38>
 80082e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e4:	b672      	cpsid	i
 80082e6:	f383 8811 	msr	BASEPRI, r3
 80082ea:	f3bf 8f6f 	isb	sy
 80082ee:	f3bf 8f4f 	dsb	sy
 80082f2:	b662      	cpsie	i
 80082f4:	60fb      	str	r3, [r7, #12]
 80082f6:	e7fe      	b.n	80082f6 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d10b      	bne.n	8008318 <xTaskPriorityDisinherit+0x58>
 8008300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008304:	b672      	cpsid	i
 8008306:	f383 8811 	msr	BASEPRI, r3
 800830a:	f3bf 8f6f 	isb	sy
 800830e:	f3bf 8f4f 	dsb	sy
 8008312:	b662      	cpsie	i
 8008314:	60bb      	str	r3, [r7, #8]
 8008316:	e7fe      	b.n	8008316 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800831c:	1e5a      	subs	r2, r3, #1
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800832a:	429a      	cmp	r2, r3
 800832c:	d02c      	beq.n	8008388 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800832e:	693b      	ldr	r3, [r7, #16]
 8008330:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008332:	2b00      	cmp	r3, #0
 8008334:	d128      	bne.n	8008388 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	3304      	adds	r3, #4
 800833a:	4618      	mov	r0, r3
 800833c:	f7fe fc5a 	bl	8006bf4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008348:	693b      	ldr	r3, [r7, #16]
 800834a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800834c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008358:	4b0f      	ldr	r3, [pc, #60]	; (8008398 <xTaskPriorityDisinherit+0xd8>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	429a      	cmp	r2, r3
 800835e:	d903      	bls.n	8008368 <xTaskPriorityDisinherit+0xa8>
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008364:	4a0c      	ldr	r2, [pc, #48]	; (8008398 <xTaskPriorityDisinherit+0xd8>)
 8008366:	6013      	str	r3, [r2, #0]
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800836c:	4613      	mov	r3, r2
 800836e:	009b      	lsls	r3, r3, #2
 8008370:	4413      	add	r3, r2
 8008372:	009b      	lsls	r3, r3, #2
 8008374:	4a09      	ldr	r2, [pc, #36]	; (800839c <xTaskPriorityDisinherit+0xdc>)
 8008376:	441a      	add	r2, r3
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	3304      	adds	r3, #4
 800837c:	4619      	mov	r1, r3
 800837e:	4610      	mov	r0, r2
 8008380:	f7fe fbdb 	bl	8006b3a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008384:	2301      	movs	r3, #1
 8008386:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008388:	697b      	ldr	r3, [r7, #20]
	}
 800838a:	4618      	mov	r0, r3
 800838c:	3718      	adds	r7, #24
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}
 8008392:	bf00      	nop
 8008394:	200008d8 	.word	0x200008d8
 8008398:	20000db4 	.word	0x20000db4
 800839c:	200008dc 	.word	0x200008dc

080083a0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b084      	sub	sp, #16
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
 80083a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80083aa:	4b21      	ldr	r3, [pc, #132]	; (8008430 <prvAddCurrentTaskToDelayedList+0x90>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80083b0:	4b20      	ldr	r3, [pc, #128]	; (8008434 <prvAddCurrentTaskToDelayedList+0x94>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	3304      	adds	r3, #4
 80083b6:	4618      	mov	r0, r3
 80083b8:	f7fe fc1c 	bl	8006bf4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083c2:	d10a      	bne.n	80083da <prvAddCurrentTaskToDelayedList+0x3a>
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d007      	beq.n	80083da <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80083ca:	4b1a      	ldr	r3, [pc, #104]	; (8008434 <prvAddCurrentTaskToDelayedList+0x94>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	3304      	adds	r3, #4
 80083d0:	4619      	mov	r1, r3
 80083d2:	4819      	ldr	r0, [pc, #100]	; (8008438 <prvAddCurrentTaskToDelayedList+0x98>)
 80083d4:	f7fe fbb1 	bl	8006b3a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80083d8:	e026      	b.n	8008428 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80083da:	68fa      	ldr	r2, [r7, #12]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	4413      	add	r3, r2
 80083e0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80083e2:	4b14      	ldr	r3, [pc, #80]	; (8008434 <prvAddCurrentTaskToDelayedList+0x94>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	68ba      	ldr	r2, [r7, #8]
 80083e8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80083ea:	68ba      	ldr	r2, [r7, #8]
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	429a      	cmp	r2, r3
 80083f0:	d209      	bcs.n	8008406 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80083f2:	4b12      	ldr	r3, [pc, #72]	; (800843c <prvAddCurrentTaskToDelayedList+0x9c>)
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	4b0f      	ldr	r3, [pc, #60]	; (8008434 <prvAddCurrentTaskToDelayedList+0x94>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	3304      	adds	r3, #4
 80083fc:	4619      	mov	r1, r3
 80083fe:	4610      	mov	r0, r2
 8008400:	f7fe fbbf 	bl	8006b82 <vListInsert>
}
 8008404:	e010      	b.n	8008428 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008406:	4b0e      	ldr	r3, [pc, #56]	; (8008440 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008408:	681a      	ldr	r2, [r3, #0]
 800840a:	4b0a      	ldr	r3, [pc, #40]	; (8008434 <prvAddCurrentTaskToDelayedList+0x94>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	3304      	adds	r3, #4
 8008410:	4619      	mov	r1, r3
 8008412:	4610      	mov	r0, r2
 8008414:	f7fe fbb5 	bl	8006b82 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008418:	4b0a      	ldr	r3, [pc, #40]	; (8008444 <prvAddCurrentTaskToDelayedList+0xa4>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	68ba      	ldr	r2, [r7, #8]
 800841e:	429a      	cmp	r2, r3
 8008420:	d202      	bcs.n	8008428 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008422:	4a08      	ldr	r2, [pc, #32]	; (8008444 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	6013      	str	r3, [r2, #0]
}
 8008428:	bf00      	nop
 800842a:	3710      	adds	r7, #16
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}
 8008430:	20000db0 	.word	0x20000db0
 8008434:	200008d8 	.word	0x200008d8
 8008438:	20000d98 	.word	0x20000d98
 800843c:	20000d68 	.word	0x20000d68
 8008440:	20000d64 	.word	0x20000d64
 8008444:	20000dcc 	.word	0x20000dcc

08008448 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b08a      	sub	sp, #40	; 0x28
 800844c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800844e:	2300      	movs	r3, #0
 8008450:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008452:	f000 fb0d 	bl	8008a70 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008456:	4b1d      	ldr	r3, [pc, #116]	; (80084cc <xTimerCreateTimerTask+0x84>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d021      	beq.n	80084a2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800845e:	2300      	movs	r3, #0
 8008460:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008462:	2300      	movs	r3, #0
 8008464:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008466:	1d3a      	adds	r2, r7, #4
 8008468:	f107 0108 	add.w	r1, r7, #8
 800846c:	f107 030c 	add.w	r3, r7, #12
 8008470:	4618      	mov	r0, r3
 8008472:	f7fe fb1b 	bl	8006aac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008476:	6879      	ldr	r1, [r7, #4]
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	68fa      	ldr	r2, [r7, #12]
 800847c:	9202      	str	r2, [sp, #8]
 800847e:	9301      	str	r3, [sp, #4]
 8008480:	2302      	movs	r3, #2
 8008482:	9300      	str	r3, [sp, #0]
 8008484:	2300      	movs	r3, #0
 8008486:	460a      	mov	r2, r1
 8008488:	4911      	ldr	r1, [pc, #68]	; (80084d0 <xTimerCreateTimerTask+0x88>)
 800848a:	4812      	ldr	r0, [pc, #72]	; (80084d4 <xTimerCreateTimerTask+0x8c>)
 800848c:	f7ff f8d2 	bl	8007634 <xTaskCreateStatic>
 8008490:	4602      	mov	r2, r0
 8008492:	4b11      	ldr	r3, [pc, #68]	; (80084d8 <xTimerCreateTimerTask+0x90>)
 8008494:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008496:	4b10      	ldr	r3, [pc, #64]	; (80084d8 <xTimerCreateTimerTask+0x90>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d001      	beq.n	80084a2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800849e:	2301      	movs	r3, #1
 80084a0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d10b      	bne.n	80084c0 <xTimerCreateTimerTask+0x78>
 80084a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ac:	b672      	cpsid	i
 80084ae:	f383 8811 	msr	BASEPRI, r3
 80084b2:	f3bf 8f6f 	isb	sy
 80084b6:	f3bf 8f4f 	dsb	sy
 80084ba:	b662      	cpsie	i
 80084bc:	613b      	str	r3, [r7, #16]
 80084be:	e7fe      	b.n	80084be <xTimerCreateTimerTask+0x76>
	return xReturn;
 80084c0:	697b      	ldr	r3, [r7, #20]
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3718      	adds	r7, #24
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}
 80084ca:	bf00      	nop
 80084cc:	20000e08 	.word	0x20000e08
 80084d0:	0800a70c 	.word	0x0800a70c
 80084d4:	08008615 	.word	0x08008615
 80084d8:	20000e0c 	.word	0x20000e0c

080084dc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b08a      	sub	sp, #40	; 0x28
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	60f8      	str	r0, [r7, #12]
 80084e4:	60b9      	str	r1, [r7, #8]
 80084e6:	607a      	str	r2, [r7, #4]
 80084e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80084ea:	2300      	movs	r3, #0
 80084ec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d10b      	bne.n	800850c <xTimerGenericCommand+0x30>
 80084f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f8:	b672      	cpsid	i
 80084fa:	f383 8811 	msr	BASEPRI, r3
 80084fe:	f3bf 8f6f 	isb	sy
 8008502:	f3bf 8f4f 	dsb	sy
 8008506:	b662      	cpsie	i
 8008508:	623b      	str	r3, [r7, #32]
 800850a:	e7fe      	b.n	800850a <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800850c:	4b19      	ldr	r3, [pc, #100]	; (8008574 <xTimerGenericCommand+0x98>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d02a      	beq.n	800856a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	2b05      	cmp	r3, #5
 8008524:	dc18      	bgt.n	8008558 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008526:	f7ff fead 	bl	8008284 <xTaskGetSchedulerState>
 800852a:	4603      	mov	r3, r0
 800852c:	2b02      	cmp	r3, #2
 800852e:	d109      	bne.n	8008544 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008530:	4b10      	ldr	r3, [pc, #64]	; (8008574 <xTimerGenericCommand+0x98>)
 8008532:	6818      	ldr	r0, [r3, #0]
 8008534:	f107 0110 	add.w	r1, r7, #16
 8008538:	2300      	movs	r3, #0
 800853a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800853c:	f7fe fc8e 	bl	8006e5c <xQueueGenericSend>
 8008540:	6278      	str	r0, [r7, #36]	; 0x24
 8008542:	e012      	b.n	800856a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008544:	4b0b      	ldr	r3, [pc, #44]	; (8008574 <xTimerGenericCommand+0x98>)
 8008546:	6818      	ldr	r0, [r3, #0]
 8008548:	f107 0110 	add.w	r1, r7, #16
 800854c:	2300      	movs	r3, #0
 800854e:	2200      	movs	r2, #0
 8008550:	f7fe fc84 	bl	8006e5c <xQueueGenericSend>
 8008554:	6278      	str	r0, [r7, #36]	; 0x24
 8008556:	e008      	b.n	800856a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008558:	4b06      	ldr	r3, [pc, #24]	; (8008574 <xTimerGenericCommand+0x98>)
 800855a:	6818      	ldr	r0, [r3, #0]
 800855c:	f107 0110 	add.w	r1, r7, #16
 8008560:	2300      	movs	r3, #0
 8008562:	683a      	ldr	r2, [r7, #0]
 8008564:	f7fe fd7c 	bl	8007060 <xQueueGenericSendFromISR>
 8008568:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800856a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800856c:	4618      	mov	r0, r3
 800856e:	3728      	adds	r7, #40	; 0x28
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}
 8008574:	20000e08 	.word	0x20000e08

08008578 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b088      	sub	sp, #32
 800857c:	af02      	add	r7, sp, #8
 800857e:	6078      	str	r0, [r7, #4]
 8008580:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008582:	4b23      	ldr	r3, [pc, #140]	; (8008610 <prvProcessExpiredTimer+0x98>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	68db      	ldr	r3, [r3, #12]
 8008588:	68db      	ldr	r3, [r3, #12]
 800858a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	3304      	adds	r3, #4
 8008590:	4618      	mov	r0, r3
 8008592:	f7fe fb2f 	bl	8006bf4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800859c:	f003 0304 	and.w	r3, r3, #4
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d023      	beq.n	80085ec <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	699a      	ldr	r2, [r3, #24]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	18d1      	adds	r1, r2, r3
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	683a      	ldr	r2, [r7, #0]
 80085b0:	6978      	ldr	r0, [r7, #20]
 80085b2:	f000 f8d3 	bl	800875c <prvInsertTimerInActiveList>
 80085b6:	4603      	mov	r3, r0
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d020      	beq.n	80085fe <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80085bc:	2300      	movs	r3, #0
 80085be:	9300      	str	r3, [sp, #0]
 80085c0:	2300      	movs	r3, #0
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	2100      	movs	r1, #0
 80085c6:	6978      	ldr	r0, [r7, #20]
 80085c8:	f7ff ff88 	bl	80084dc <xTimerGenericCommand>
 80085cc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d114      	bne.n	80085fe <prvProcessExpiredTimer+0x86>
 80085d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d8:	b672      	cpsid	i
 80085da:	f383 8811 	msr	BASEPRI, r3
 80085de:	f3bf 8f6f 	isb	sy
 80085e2:	f3bf 8f4f 	dsb	sy
 80085e6:	b662      	cpsie	i
 80085e8:	60fb      	str	r3, [r7, #12]
 80085ea:	e7fe      	b.n	80085ea <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80085f2:	f023 0301 	bic.w	r3, r3, #1
 80085f6:	b2da      	uxtb	r2, r3
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	6a1b      	ldr	r3, [r3, #32]
 8008602:	6978      	ldr	r0, [r7, #20]
 8008604:	4798      	blx	r3
}
 8008606:	bf00      	nop
 8008608:	3718      	adds	r7, #24
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}
 800860e:	bf00      	nop
 8008610:	20000e00 	.word	0x20000e00

08008614 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b084      	sub	sp, #16
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800861c:	f107 0308 	add.w	r3, r7, #8
 8008620:	4618      	mov	r0, r3
 8008622:	f000 f857 	bl	80086d4 <prvGetNextExpireTime>
 8008626:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	4619      	mov	r1, r3
 800862c:	68f8      	ldr	r0, [r7, #12]
 800862e:	f000 f803 	bl	8008638 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008632:	f000 f8d5 	bl	80087e0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008636:	e7f1      	b.n	800861c <prvTimerTask+0x8>

08008638 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b084      	sub	sp, #16
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008642:	f7ff fa3b 	bl	8007abc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008646:	f107 0308 	add.w	r3, r7, #8
 800864a:	4618      	mov	r0, r3
 800864c:	f000 f866 	bl	800871c <prvSampleTimeNow>
 8008650:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d130      	bne.n	80086ba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d10a      	bne.n	8008674 <prvProcessTimerOrBlockTask+0x3c>
 800865e:	687a      	ldr	r2, [r7, #4]
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	429a      	cmp	r2, r3
 8008664:	d806      	bhi.n	8008674 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008666:	f7ff fa37 	bl	8007ad8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800866a:	68f9      	ldr	r1, [r7, #12]
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f7ff ff83 	bl	8008578 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008672:	e024      	b.n	80086be <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d008      	beq.n	800868c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800867a:	4b13      	ldr	r3, [pc, #76]	; (80086c8 <prvProcessTimerOrBlockTask+0x90>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d101      	bne.n	8008688 <prvProcessTimerOrBlockTask+0x50>
 8008684:	2301      	movs	r3, #1
 8008686:	e000      	b.n	800868a <prvProcessTimerOrBlockTask+0x52>
 8008688:	2300      	movs	r3, #0
 800868a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800868c:	4b0f      	ldr	r3, [pc, #60]	; (80086cc <prvProcessTimerOrBlockTask+0x94>)
 800868e:	6818      	ldr	r0, [r3, #0]
 8008690:	687a      	ldr	r2, [r7, #4]
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	1ad3      	subs	r3, r2, r3
 8008696:	683a      	ldr	r2, [r7, #0]
 8008698:	4619      	mov	r1, r3
 800869a:	f7fe ff97 	bl	80075cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800869e:	f7ff fa1b 	bl	8007ad8 <xTaskResumeAll>
 80086a2:	4603      	mov	r3, r0
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d10a      	bne.n	80086be <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80086a8:	4b09      	ldr	r3, [pc, #36]	; (80086d0 <prvProcessTimerOrBlockTask+0x98>)
 80086aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086ae:	601a      	str	r2, [r3, #0]
 80086b0:	f3bf 8f4f 	dsb	sy
 80086b4:	f3bf 8f6f 	isb	sy
}
 80086b8:	e001      	b.n	80086be <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80086ba:	f7ff fa0d 	bl	8007ad8 <xTaskResumeAll>
}
 80086be:	bf00      	nop
 80086c0:	3710      	adds	r7, #16
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}
 80086c6:	bf00      	nop
 80086c8:	20000e04 	.word	0x20000e04
 80086cc:	20000e08 	.word	0x20000e08
 80086d0:	e000ed04 	.word	0xe000ed04

080086d4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80086d4:	b480      	push	{r7}
 80086d6:	b085      	sub	sp, #20
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80086dc:	4b0e      	ldr	r3, [pc, #56]	; (8008718 <prvGetNextExpireTime+0x44>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d101      	bne.n	80086ea <prvGetNextExpireTime+0x16>
 80086e6:	2201      	movs	r2, #1
 80086e8:	e000      	b.n	80086ec <prvGetNextExpireTime+0x18>
 80086ea:	2200      	movs	r2, #0
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d105      	bne.n	8008704 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80086f8:	4b07      	ldr	r3, [pc, #28]	; (8008718 <prvGetNextExpireTime+0x44>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	68db      	ldr	r3, [r3, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	60fb      	str	r3, [r7, #12]
 8008702:	e001      	b.n	8008708 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008704:	2300      	movs	r3, #0
 8008706:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008708:	68fb      	ldr	r3, [r7, #12]
}
 800870a:	4618      	mov	r0, r3
 800870c:	3714      	adds	r7, #20
 800870e:	46bd      	mov	sp, r7
 8008710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008714:	4770      	bx	lr
 8008716:	bf00      	nop
 8008718:	20000e00 	.word	0x20000e00

0800871c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b084      	sub	sp, #16
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008724:	f7ff fa76 	bl	8007c14 <xTaskGetTickCount>
 8008728:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800872a:	4b0b      	ldr	r3, [pc, #44]	; (8008758 <prvSampleTimeNow+0x3c>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	68fa      	ldr	r2, [r7, #12]
 8008730:	429a      	cmp	r2, r3
 8008732:	d205      	bcs.n	8008740 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008734:	f000 f936 	bl	80089a4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2201      	movs	r2, #1
 800873c:	601a      	str	r2, [r3, #0]
 800873e:	e002      	b.n	8008746 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2200      	movs	r2, #0
 8008744:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008746:	4a04      	ldr	r2, [pc, #16]	; (8008758 <prvSampleTimeNow+0x3c>)
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800874c:	68fb      	ldr	r3, [r7, #12]
}
 800874e:	4618      	mov	r0, r3
 8008750:	3710      	adds	r7, #16
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}
 8008756:	bf00      	nop
 8008758:	20000e10 	.word	0x20000e10

0800875c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b086      	sub	sp, #24
 8008760:	af00      	add	r7, sp, #0
 8008762:	60f8      	str	r0, [r7, #12]
 8008764:	60b9      	str	r1, [r7, #8]
 8008766:	607a      	str	r2, [r7, #4]
 8008768:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800876a:	2300      	movs	r3, #0
 800876c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	68ba      	ldr	r2, [r7, #8]
 8008772:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	68fa      	ldr	r2, [r7, #12]
 8008778:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800877a:	68ba      	ldr	r2, [r7, #8]
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	429a      	cmp	r2, r3
 8008780:	d812      	bhi.n	80087a8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008782:	687a      	ldr	r2, [r7, #4]
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	1ad2      	subs	r2, r2, r3
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	699b      	ldr	r3, [r3, #24]
 800878c:	429a      	cmp	r2, r3
 800878e:	d302      	bcc.n	8008796 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008790:	2301      	movs	r3, #1
 8008792:	617b      	str	r3, [r7, #20]
 8008794:	e01b      	b.n	80087ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008796:	4b10      	ldr	r3, [pc, #64]	; (80087d8 <prvInsertTimerInActiveList+0x7c>)
 8008798:	681a      	ldr	r2, [r3, #0]
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	3304      	adds	r3, #4
 800879e:	4619      	mov	r1, r3
 80087a0:	4610      	mov	r0, r2
 80087a2:	f7fe f9ee 	bl	8006b82 <vListInsert>
 80087a6:	e012      	b.n	80087ce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80087a8:	687a      	ldr	r2, [r7, #4]
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	429a      	cmp	r2, r3
 80087ae:	d206      	bcs.n	80087be <prvInsertTimerInActiveList+0x62>
 80087b0:	68ba      	ldr	r2, [r7, #8]
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d302      	bcc.n	80087be <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80087b8:	2301      	movs	r3, #1
 80087ba:	617b      	str	r3, [r7, #20]
 80087bc:	e007      	b.n	80087ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80087be:	4b07      	ldr	r3, [pc, #28]	; (80087dc <prvInsertTimerInActiveList+0x80>)
 80087c0:	681a      	ldr	r2, [r3, #0]
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	3304      	adds	r3, #4
 80087c6:	4619      	mov	r1, r3
 80087c8:	4610      	mov	r0, r2
 80087ca:	f7fe f9da 	bl	8006b82 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80087ce:	697b      	ldr	r3, [r7, #20]
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	3718      	adds	r7, #24
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}
 80087d8:	20000e04 	.word	0x20000e04
 80087dc:	20000e00 	.word	0x20000e00

080087e0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b08e      	sub	sp, #56	; 0x38
 80087e4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80087e6:	e0cc      	b.n	8008982 <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	da19      	bge.n	8008822 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80087ee:	1d3b      	adds	r3, r7, #4
 80087f0:	3304      	adds	r3, #4
 80087f2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80087f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d10b      	bne.n	8008812 <prvProcessReceivedCommands+0x32>
 80087fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087fe:	b672      	cpsid	i
 8008800:	f383 8811 	msr	BASEPRI, r3
 8008804:	f3bf 8f6f 	isb	sy
 8008808:	f3bf 8f4f 	dsb	sy
 800880c:	b662      	cpsie	i
 800880e:	61fb      	str	r3, [r7, #28]
 8008810:	e7fe      	b.n	8008810 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008818:	6850      	ldr	r0, [r2, #4]
 800881a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800881c:	6892      	ldr	r2, [r2, #8]
 800881e:	4611      	mov	r1, r2
 8008820:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2b00      	cmp	r3, #0
 8008826:	f2c0 80ab 	blt.w	8008980 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800882e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008830:	695b      	ldr	r3, [r3, #20]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d004      	beq.n	8008840 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008838:	3304      	adds	r3, #4
 800883a:	4618      	mov	r0, r3
 800883c:	f7fe f9da 	bl	8006bf4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008840:	463b      	mov	r3, r7
 8008842:	4618      	mov	r0, r3
 8008844:	f7ff ff6a 	bl	800871c <prvSampleTimeNow>
 8008848:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2b09      	cmp	r3, #9
 800884e:	f200 8098 	bhi.w	8008982 <prvProcessReceivedCommands+0x1a2>
 8008852:	a201      	add	r2, pc, #4	; (adr r2, 8008858 <prvProcessReceivedCommands+0x78>)
 8008854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008858:	08008881 	.word	0x08008881
 800885c:	08008881 	.word	0x08008881
 8008860:	08008881 	.word	0x08008881
 8008864:	080088f7 	.word	0x080088f7
 8008868:	0800890b 	.word	0x0800890b
 800886c:	08008957 	.word	0x08008957
 8008870:	08008881 	.word	0x08008881
 8008874:	08008881 	.word	0x08008881
 8008878:	080088f7 	.word	0x080088f7
 800887c:	0800890b 	.word	0x0800890b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008882:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008886:	f043 0301 	orr.w	r3, r3, #1
 800888a:	b2da      	uxtb	r2, r3
 800888c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800888e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008892:	68ba      	ldr	r2, [r7, #8]
 8008894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008896:	699b      	ldr	r3, [r3, #24]
 8008898:	18d1      	adds	r1, r2, r3
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800889e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088a0:	f7ff ff5c 	bl	800875c <prvInsertTimerInActiveList>
 80088a4:	4603      	mov	r3, r0
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d06b      	beq.n	8008982 <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80088aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ac:	6a1b      	ldr	r3, [r3, #32]
 80088ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088b0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80088b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80088b8:	f003 0304 	and.w	r3, r3, #4
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d060      	beq.n	8008982 <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80088c0:	68ba      	ldr	r2, [r7, #8]
 80088c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088c4:	699b      	ldr	r3, [r3, #24]
 80088c6:	441a      	add	r2, r3
 80088c8:	2300      	movs	r3, #0
 80088ca:	9300      	str	r3, [sp, #0]
 80088cc:	2300      	movs	r3, #0
 80088ce:	2100      	movs	r1, #0
 80088d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088d2:	f7ff fe03 	bl	80084dc <xTimerGenericCommand>
 80088d6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80088d8:	6a3b      	ldr	r3, [r7, #32]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d151      	bne.n	8008982 <prvProcessReceivedCommands+0x1a2>
 80088de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e2:	b672      	cpsid	i
 80088e4:	f383 8811 	msr	BASEPRI, r3
 80088e8:	f3bf 8f6f 	isb	sy
 80088ec:	f3bf 8f4f 	dsb	sy
 80088f0:	b662      	cpsie	i
 80088f2:	61bb      	str	r3, [r7, #24]
 80088f4:	e7fe      	b.n	80088f4 <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80088f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80088fc:	f023 0301 	bic.w	r3, r3, #1
 8008900:	b2da      	uxtb	r2, r3
 8008902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008904:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008908:	e03b      	b.n	8008982 <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800890a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800890c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008910:	f043 0301 	orr.w	r3, r3, #1
 8008914:	b2da      	uxtb	r2, r3
 8008916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008918:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800891c:	68ba      	ldr	r2, [r7, #8]
 800891e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008920:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008924:	699b      	ldr	r3, [r3, #24]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d10b      	bne.n	8008942 <prvProcessReceivedCommands+0x162>
 800892a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800892e:	b672      	cpsid	i
 8008930:	f383 8811 	msr	BASEPRI, r3
 8008934:	f3bf 8f6f 	isb	sy
 8008938:	f3bf 8f4f 	dsb	sy
 800893c:	b662      	cpsie	i
 800893e:	617b      	str	r3, [r7, #20]
 8008940:	e7fe      	b.n	8008940 <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008944:	699a      	ldr	r2, [r3, #24]
 8008946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008948:	18d1      	adds	r1, r2, r3
 800894a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800894c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800894e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008950:	f7ff ff04 	bl	800875c <prvInsertTimerInActiveList>
					break;
 8008954:	e015      	b.n	8008982 <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008958:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800895c:	f003 0302 	and.w	r3, r3, #2
 8008960:	2b00      	cmp	r3, #0
 8008962:	d103      	bne.n	800896c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008964:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008966:	f000 fbb9 	bl	80090dc <vPortFree>
 800896a:	e00a      	b.n	8008982 <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800896c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800896e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008972:	f023 0301 	bic.w	r3, r3, #1
 8008976:	b2da      	uxtb	r2, r3
 8008978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800897a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800897e:	e000      	b.n	8008982 <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008980:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008982:	4b07      	ldr	r3, [pc, #28]	; (80089a0 <prvProcessReceivedCommands+0x1c0>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	1d39      	adds	r1, r7, #4
 8008988:	2200      	movs	r2, #0
 800898a:	4618      	mov	r0, r3
 800898c:	f7fe fc04 	bl	8007198 <xQueueReceive>
 8008990:	4603      	mov	r3, r0
 8008992:	2b00      	cmp	r3, #0
 8008994:	f47f af28 	bne.w	80087e8 <prvProcessReceivedCommands+0x8>
	}
}
 8008998:	bf00      	nop
 800899a:	3730      	adds	r7, #48	; 0x30
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}
 80089a0:	20000e08 	.word	0x20000e08

080089a4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b088      	sub	sp, #32
 80089a8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80089aa:	e049      	b.n	8008a40 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80089ac:	4b2e      	ldr	r3, [pc, #184]	; (8008a68 <prvSwitchTimerLists+0xc4>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	68db      	ldr	r3, [r3, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089b6:	4b2c      	ldr	r3, [pc, #176]	; (8008a68 <prvSwitchTimerLists+0xc4>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	68db      	ldr	r3, [r3, #12]
 80089bc:	68db      	ldr	r3, [r3, #12]
 80089be:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	3304      	adds	r3, #4
 80089c4:	4618      	mov	r0, r3
 80089c6:	f7fe f915 	bl	8006bf4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	6a1b      	ldr	r3, [r3, #32]
 80089ce:	68f8      	ldr	r0, [r7, #12]
 80089d0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80089d8:	f003 0304 	and.w	r3, r3, #4
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d02f      	beq.n	8008a40 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	699b      	ldr	r3, [r3, #24]
 80089e4:	693a      	ldr	r2, [r7, #16]
 80089e6:	4413      	add	r3, r2
 80089e8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80089ea:	68ba      	ldr	r2, [r7, #8]
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	429a      	cmp	r2, r3
 80089f0:	d90e      	bls.n	8008a10 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	68ba      	ldr	r2, [r7, #8]
 80089f6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	68fa      	ldr	r2, [r7, #12]
 80089fc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80089fe:	4b1a      	ldr	r3, [pc, #104]	; (8008a68 <prvSwitchTimerLists+0xc4>)
 8008a00:	681a      	ldr	r2, [r3, #0]
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	3304      	adds	r3, #4
 8008a06:	4619      	mov	r1, r3
 8008a08:	4610      	mov	r0, r2
 8008a0a:	f7fe f8ba 	bl	8006b82 <vListInsert>
 8008a0e:	e017      	b.n	8008a40 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008a10:	2300      	movs	r3, #0
 8008a12:	9300      	str	r3, [sp, #0]
 8008a14:	2300      	movs	r3, #0
 8008a16:	693a      	ldr	r2, [r7, #16]
 8008a18:	2100      	movs	r1, #0
 8008a1a:	68f8      	ldr	r0, [r7, #12]
 8008a1c:	f7ff fd5e 	bl	80084dc <xTimerGenericCommand>
 8008a20:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d10b      	bne.n	8008a40 <prvSwitchTimerLists+0x9c>
 8008a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a2c:	b672      	cpsid	i
 8008a2e:	f383 8811 	msr	BASEPRI, r3
 8008a32:	f3bf 8f6f 	isb	sy
 8008a36:	f3bf 8f4f 	dsb	sy
 8008a3a:	b662      	cpsie	i
 8008a3c:	603b      	str	r3, [r7, #0]
 8008a3e:	e7fe      	b.n	8008a3e <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008a40:	4b09      	ldr	r3, [pc, #36]	; (8008a68 <prvSwitchTimerLists+0xc4>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d1b0      	bne.n	80089ac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008a4a:	4b07      	ldr	r3, [pc, #28]	; (8008a68 <prvSwitchTimerLists+0xc4>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008a50:	4b06      	ldr	r3, [pc, #24]	; (8008a6c <prvSwitchTimerLists+0xc8>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4a04      	ldr	r2, [pc, #16]	; (8008a68 <prvSwitchTimerLists+0xc4>)
 8008a56:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008a58:	4a04      	ldr	r2, [pc, #16]	; (8008a6c <prvSwitchTimerLists+0xc8>)
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	6013      	str	r3, [r2, #0]
}
 8008a5e:	bf00      	nop
 8008a60:	3718      	adds	r7, #24
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
 8008a66:	bf00      	nop
 8008a68:	20000e00 	.word	0x20000e00
 8008a6c:	20000e04 	.word	0x20000e04

08008a70 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b082      	sub	sp, #8
 8008a74:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008a76:	f000 f947 	bl	8008d08 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008a7a:	4b15      	ldr	r3, [pc, #84]	; (8008ad0 <prvCheckForValidListAndQueue+0x60>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d120      	bne.n	8008ac4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008a82:	4814      	ldr	r0, [pc, #80]	; (8008ad4 <prvCheckForValidListAndQueue+0x64>)
 8008a84:	f7fe f82c 	bl	8006ae0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008a88:	4813      	ldr	r0, [pc, #76]	; (8008ad8 <prvCheckForValidListAndQueue+0x68>)
 8008a8a:	f7fe f829 	bl	8006ae0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008a8e:	4b13      	ldr	r3, [pc, #76]	; (8008adc <prvCheckForValidListAndQueue+0x6c>)
 8008a90:	4a10      	ldr	r2, [pc, #64]	; (8008ad4 <prvCheckForValidListAndQueue+0x64>)
 8008a92:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008a94:	4b12      	ldr	r3, [pc, #72]	; (8008ae0 <prvCheckForValidListAndQueue+0x70>)
 8008a96:	4a10      	ldr	r2, [pc, #64]	; (8008ad8 <prvCheckForValidListAndQueue+0x68>)
 8008a98:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	9300      	str	r3, [sp, #0]
 8008a9e:	4b11      	ldr	r3, [pc, #68]	; (8008ae4 <prvCheckForValidListAndQueue+0x74>)
 8008aa0:	4a11      	ldr	r2, [pc, #68]	; (8008ae8 <prvCheckForValidListAndQueue+0x78>)
 8008aa2:	2110      	movs	r1, #16
 8008aa4:	200a      	movs	r0, #10
 8008aa6:	f7fe f939 	bl	8006d1c <xQueueGenericCreateStatic>
 8008aaa:	4602      	mov	r2, r0
 8008aac:	4b08      	ldr	r3, [pc, #32]	; (8008ad0 <prvCheckForValidListAndQueue+0x60>)
 8008aae:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008ab0:	4b07      	ldr	r3, [pc, #28]	; (8008ad0 <prvCheckForValidListAndQueue+0x60>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d005      	beq.n	8008ac4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008ab8:	4b05      	ldr	r3, [pc, #20]	; (8008ad0 <prvCheckForValidListAndQueue+0x60>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	490b      	ldr	r1, [pc, #44]	; (8008aec <prvCheckForValidListAndQueue+0x7c>)
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f7fe fd5c 	bl	800757c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008ac4:	f000 f952 	bl	8008d6c <vPortExitCritical>
}
 8008ac8:	bf00      	nop
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}
 8008ace:	bf00      	nop
 8008ad0:	20000e08 	.word	0x20000e08
 8008ad4:	20000dd8 	.word	0x20000dd8
 8008ad8:	20000dec 	.word	0x20000dec
 8008adc:	20000e00 	.word	0x20000e00
 8008ae0:	20000e04 	.word	0x20000e04
 8008ae4:	20000eb4 	.word	0x20000eb4
 8008ae8:	20000e14 	.word	0x20000e14
 8008aec:	0800a714 	.word	0x0800a714

08008af0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008af0:	b480      	push	{r7}
 8008af2:	b085      	sub	sp, #20
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	60f8      	str	r0, [r7, #12]
 8008af8:	60b9      	str	r1, [r7, #8]
 8008afa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	3b04      	subs	r3, #4
 8008b00:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008b08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	3b04      	subs	r3, #4
 8008b0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	f023 0201 	bic.w	r2, r3, #1
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	3b04      	subs	r3, #4
 8008b1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008b20:	4a0c      	ldr	r2, [pc, #48]	; (8008b54 <pxPortInitialiseStack+0x64>)
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	3b14      	subs	r3, #20
 8008b2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008b2c:	687a      	ldr	r2, [r7, #4]
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	3b04      	subs	r3, #4
 8008b36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	f06f 0202 	mvn.w	r2, #2
 8008b3e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	3b20      	subs	r3, #32
 8008b44:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008b46:	68fb      	ldr	r3, [r7, #12]
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3714      	adds	r7, #20
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b52:	4770      	bx	lr
 8008b54:	08008b59 	.word	0x08008b59

08008b58 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b085      	sub	sp, #20
 8008b5c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008b62:	4b13      	ldr	r3, [pc, #76]	; (8008bb0 <prvTaskExitError+0x58>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b6a:	d00b      	beq.n	8008b84 <prvTaskExitError+0x2c>
 8008b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b70:	b672      	cpsid	i
 8008b72:	f383 8811 	msr	BASEPRI, r3
 8008b76:	f3bf 8f6f 	isb	sy
 8008b7a:	f3bf 8f4f 	dsb	sy
 8008b7e:	b662      	cpsie	i
 8008b80:	60fb      	str	r3, [r7, #12]
 8008b82:	e7fe      	b.n	8008b82 <prvTaskExitError+0x2a>
 8008b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b88:	b672      	cpsid	i
 8008b8a:	f383 8811 	msr	BASEPRI, r3
 8008b8e:	f3bf 8f6f 	isb	sy
 8008b92:	f3bf 8f4f 	dsb	sy
 8008b96:	b662      	cpsie	i
 8008b98:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008b9a:	bf00      	nop
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d0fc      	beq.n	8008b9c <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008ba2:	bf00      	nop
 8008ba4:	3714      	adds	r7, #20
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bac:	4770      	bx	lr
 8008bae:	bf00      	nop
 8008bb0:	2000011c 	.word	0x2000011c
	...

08008bc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008bc0:	4b07      	ldr	r3, [pc, #28]	; (8008be0 <pxCurrentTCBConst2>)
 8008bc2:	6819      	ldr	r1, [r3, #0]
 8008bc4:	6808      	ldr	r0, [r1, #0]
 8008bc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bca:	f380 8809 	msr	PSP, r0
 8008bce:	f3bf 8f6f 	isb	sy
 8008bd2:	f04f 0000 	mov.w	r0, #0
 8008bd6:	f380 8811 	msr	BASEPRI, r0
 8008bda:	4770      	bx	lr
 8008bdc:	f3af 8000 	nop.w

08008be0 <pxCurrentTCBConst2>:
 8008be0:	200008d8 	.word	0x200008d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008be4:	bf00      	nop
 8008be6:	bf00      	nop

08008be8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008be8:	4808      	ldr	r0, [pc, #32]	; (8008c0c <prvPortStartFirstTask+0x24>)
 8008bea:	6800      	ldr	r0, [r0, #0]
 8008bec:	6800      	ldr	r0, [r0, #0]
 8008bee:	f380 8808 	msr	MSP, r0
 8008bf2:	f04f 0000 	mov.w	r0, #0
 8008bf6:	f380 8814 	msr	CONTROL, r0
 8008bfa:	b662      	cpsie	i
 8008bfc:	b661      	cpsie	f
 8008bfe:	f3bf 8f4f 	dsb	sy
 8008c02:	f3bf 8f6f 	isb	sy
 8008c06:	df00      	svc	0
 8008c08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008c0a:	bf00      	nop
 8008c0c:	e000ed08 	.word	0xe000ed08

08008c10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b084      	sub	sp, #16
 8008c14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008c16:	4b36      	ldr	r3, [pc, #216]	; (8008cf0 <xPortStartScheduler+0xe0>)
 8008c18:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	781b      	ldrb	r3, [r3, #0]
 8008c1e:	b2db      	uxtb	r3, r3
 8008c20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	22ff      	movs	r2, #255	; 0xff
 8008c26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	781b      	ldrb	r3, [r3, #0]
 8008c2c:	b2db      	uxtb	r3, r3
 8008c2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008c30:	78fb      	ldrb	r3, [r7, #3]
 8008c32:	b2db      	uxtb	r3, r3
 8008c34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008c38:	b2da      	uxtb	r2, r3
 8008c3a:	4b2e      	ldr	r3, [pc, #184]	; (8008cf4 <xPortStartScheduler+0xe4>)
 8008c3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008c3e:	4b2e      	ldr	r3, [pc, #184]	; (8008cf8 <xPortStartScheduler+0xe8>)
 8008c40:	2207      	movs	r2, #7
 8008c42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008c44:	e009      	b.n	8008c5a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008c46:	4b2c      	ldr	r3, [pc, #176]	; (8008cf8 <xPortStartScheduler+0xe8>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	3b01      	subs	r3, #1
 8008c4c:	4a2a      	ldr	r2, [pc, #168]	; (8008cf8 <xPortStartScheduler+0xe8>)
 8008c4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008c50:	78fb      	ldrb	r3, [r7, #3]
 8008c52:	b2db      	uxtb	r3, r3
 8008c54:	005b      	lsls	r3, r3, #1
 8008c56:	b2db      	uxtb	r3, r3
 8008c58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008c5a:	78fb      	ldrb	r3, [r7, #3]
 8008c5c:	b2db      	uxtb	r3, r3
 8008c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c62:	2b80      	cmp	r3, #128	; 0x80
 8008c64:	d0ef      	beq.n	8008c46 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008c66:	4b24      	ldr	r3, [pc, #144]	; (8008cf8 <xPortStartScheduler+0xe8>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f1c3 0307 	rsb	r3, r3, #7
 8008c6e:	2b04      	cmp	r3, #4
 8008c70:	d00b      	beq.n	8008c8a <xPortStartScheduler+0x7a>
 8008c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c76:	b672      	cpsid	i
 8008c78:	f383 8811 	msr	BASEPRI, r3
 8008c7c:	f3bf 8f6f 	isb	sy
 8008c80:	f3bf 8f4f 	dsb	sy
 8008c84:	b662      	cpsie	i
 8008c86:	60bb      	str	r3, [r7, #8]
 8008c88:	e7fe      	b.n	8008c88 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008c8a:	4b1b      	ldr	r3, [pc, #108]	; (8008cf8 <xPortStartScheduler+0xe8>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	021b      	lsls	r3, r3, #8
 8008c90:	4a19      	ldr	r2, [pc, #100]	; (8008cf8 <xPortStartScheduler+0xe8>)
 8008c92:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008c94:	4b18      	ldr	r3, [pc, #96]	; (8008cf8 <xPortStartScheduler+0xe8>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008c9c:	4a16      	ldr	r2, [pc, #88]	; (8008cf8 <xPortStartScheduler+0xe8>)
 8008c9e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	b2da      	uxtb	r2, r3
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008ca8:	4b14      	ldr	r3, [pc, #80]	; (8008cfc <xPortStartScheduler+0xec>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4a13      	ldr	r2, [pc, #76]	; (8008cfc <xPortStartScheduler+0xec>)
 8008cae:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008cb2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008cb4:	4b11      	ldr	r3, [pc, #68]	; (8008cfc <xPortStartScheduler+0xec>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4a10      	ldr	r2, [pc, #64]	; (8008cfc <xPortStartScheduler+0xec>)
 8008cba:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008cbe:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008cc0:	f000 f8d4 	bl	8008e6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008cc4:	4b0e      	ldr	r3, [pc, #56]	; (8008d00 <xPortStartScheduler+0xf0>)
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008cca:	f000 f8f3 	bl	8008eb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008cce:	4b0d      	ldr	r3, [pc, #52]	; (8008d04 <xPortStartScheduler+0xf4>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	4a0c      	ldr	r2, [pc, #48]	; (8008d04 <xPortStartScheduler+0xf4>)
 8008cd4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008cd8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008cda:	f7ff ff85 	bl	8008be8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008cde:	f7ff f863 	bl	8007da8 <vTaskSwitchContext>
	prvTaskExitError();
 8008ce2:	f7ff ff39 	bl	8008b58 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008ce6:	2300      	movs	r3, #0
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3710      	adds	r7, #16
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}
 8008cf0:	e000e400 	.word	0xe000e400
 8008cf4:	20000f04 	.word	0x20000f04
 8008cf8:	20000f08 	.word	0x20000f08
 8008cfc:	e000ed20 	.word	0xe000ed20
 8008d00:	2000011c 	.word	0x2000011c
 8008d04:	e000ef34 	.word	0xe000ef34

08008d08 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b083      	sub	sp, #12
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d12:	b672      	cpsid	i
 8008d14:	f383 8811 	msr	BASEPRI, r3
 8008d18:	f3bf 8f6f 	isb	sy
 8008d1c:	f3bf 8f4f 	dsb	sy
 8008d20:	b662      	cpsie	i
 8008d22:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008d24:	4b0f      	ldr	r3, [pc, #60]	; (8008d64 <vPortEnterCritical+0x5c>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	3301      	adds	r3, #1
 8008d2a:	4a0e      	ldr	r2, [pc, #56]	; (8008d64 <vPortEnterCritical+0x5c>)
 8008d2c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008d2e:	4b0d      	ldr	r3, [pc, #52]	; (8008d64 <vPortEnterCritical+0x5c>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	2b01      	cmp	r3, #1
 8008d34:	d110      	bne.n	8008d58 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008d36:	4b0c      	ldr	r3, [pc, #48]	; (8008d68 <vPortEnterCritical+0x60>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	b2db      	uxtb	r3, r3
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d00b      	beq.n	8008d58 <vPortEnterCritical+0x50>
 8008d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d44:	b672      	cpsid	i
 8008d46:	f383 8811 	msr	BASEPRI, r3
 8008d4a:	f3bf 8f6f 	isb	sy
 8008d4e:	f3bf 8f4f 	dsb	sy
 8008d52:	b662      	cpsie	i
 8008d54:	603b      	str	r3, [r7, #0]
 8008d56:	e7fe      	b.n	8008d56 <vPortEnterCritical+0x4e>
	}
}
 8008d58:	bf00      	nop
 8008d5a:	370c      	adds	r7, #12
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d62:	4770      	bx	lr
 8008d64:	2000011c 	.word	0x2000011c
 8008d68:	e000ed04 	.word	0xe000ed04

08008d6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b083      	sub	sp, #12
 8008d70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008d72:	4b12      	ldr	r3, [pc, #72]	; (8008dbc <vPortExitCritical+0x50>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d10b      	bne.n	8008d92 <vPortExitCritical+0x26>
 8008d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d7e:	b672      	cpsid	i
 8008d80:	f383 8811 	msr	BASEPRI, r3
 8008d84:	f3bf 8f6f 	isb	sy
 8008d88:	f3bf 8f4f 	dsb	sy
 8008d8c:	b662      	cpsie	i
 8008d8e:	607b      	str	r3, [r7, #4]
 8008d90:	e7fe      	b.n	8008d90 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8008d92:	4b0a      	ldr	r3, [pc, #40]	; (8008dbc <vPortExitCritical+0x50>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	3b01      	subs	r3, #1
 8008d98:	4a08      	ldr	r2, [pc, #32]	; (8008dbc <vPortExitCritical+0x50>)
 8008d9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008d9c:	4b07      	ldr	r3, [pc, #28]	; (8008dbc <vPortExitCritical+0x50>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d104      	bne.n	8008dae <vPortExitCritical+0x42>
 8008da4:	2300      	movs	r3, #0
 8008da6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008dae:	bf00      	nop
 8008db0:	370c      	adds	r7, #12
 8008db2:	46bd      	mov	sp, r7
 8008db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db8:	4770      	bx	lr
 8008dba:	bf00      	nop
 8008dbc:	2000011c 	.word	0x2000011c

08008dc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008dc0:	f3ef 8009 	mrs	r0, PSP
 8008dc4:	f3bf 8f6f 	isb	sy
 8008dc8:	4b15      	ldr	r3, [pc, #84]	; (8008e20 <pxCurrentTCBConst>)
 8008dca:	681a      	ldr	r2, [r3, #0]
 8008dcc:	f01e 0f10 	tst.w	lr, #16
 8008dd0:	bf08      	it	eq
 8008dd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008dd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dda:	6010      	str	r0, [r2, #0]
 8008ddc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008de0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008de4:	b672      	cpsid	i
 8008de6:	f380 8811 	msr	BASEPRI, r0
 8008dea:	f3bf 8f4f 	dsb	sy
 8008dee:	f3bf 8f6f 	isb	sy
 8008df2:	b662      	cpsie	i
 8008df4:	f7fe ffd8 	bl	8007da8 <vTaskSwitchContext>
 8008df8:	f04f 0000 	mov.w	r0, #0
 8008dfc:	f380 8811 	msr	BASEPRI, r0
 8008e00:	bc09      	pop	{r0, r3}
 8008e02:	6819      	ldr	r1, [r3, #0]
 8008e04:	6808      	ldr	r0, [r1, #0]
 8008e06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e0a:	f01e 0f10 	tst.w	lr, #16
 8008e0e:	bf08      	it	eq
 8008e10:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008e14:	f380 8809 	msr	PSP, r0
 8008e18:	f3bf 8f6f 	isb	sy
 8008e1c:	4770      	bx	lr
 8008e1e:	bf00      	nop

08008e20 <pxCurrentTCBConst>:
 8008e20:	200008d8 	.word	0x200008d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008e24:	bf00      	nop
 8008e26:	bf00      	nop

08008e28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b082      	sub	sp, #8
 8008e2c:	af00      	add	r7, sp, #0
	__asm volatile
 8008e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e32:	b672      	cpsid	i
 8008e34:	f383 8811 	msr	BASEPRI, r3
 8008e38:	f3bf 8f6f 	isb	sy
 8008e3c:	f3bf 8f4f 	dsb	sy
 8008e40:	b662      	cpsie	i
 8008e42:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008e44:	f7fe fef6 	bl	8007c34 <xTaskIncrementTick>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d003      	beq.n	8008e56 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008e4e:	4b06      	ldr	r3, [pc, #24]	; (8008e68 <SysTick_Handler+0x40>)
 8008e50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e54:	601a      	str	r2, [r3, #0]
 8008e56:	2300      	movs	r3, #0
 8008e58:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8008e60:	bf00      	nop
 8008e62:	3708      	adds	r7, #8
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}
 8008e68:	e000ed04 	.word	0xe000ed04

08008e6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008e70:	4b0b      	ldr	r3, [pc, #44]	; (8008ea0 <vPortSetupTimerInterrupt+0x34>)
 8008e72:	2200      	movs	r2, #0
 8008e74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008e76:	4b0b      	ldr	r3, [pc, #44]	; (8008ea4 <vPortSetupTimerInterrupt+0x38>)
 8008e78:	2200      	movs	r2, #0
 8008e7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008e7c:	4b0a      	ldr	r3, [pc, #40]	; (8008ea8 <vPortSetupTimerInterrupt+0x3c>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a0a      	ldr	r2, [pc, #40]	; (8008eac <vPortSetupTimerInterrupt+0x40>)
 8008e82:	fba2 2303 	umull	r2, r3, r2, r3
 8008e86:	099b      	lsrs	r3, r3, #6
 8008e88:	4a09      	ldr	r2, [pc, #36]	; (8008eb0 <vPortSetupTimerInterrupt+0x44>)
 8008e8a:	3b01      	subs	r3, #1
 8008e8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008e8e:	4b04      	ldr	r3, [pc, #16]	; (8008ea0 <vPortSetupTimerInterrupt+0x34>)
 8008e90:	2207      	movs	r2, #7
 8008e92:	601a      	str	r2, [r3, #0]
}
 8008e94:	bf00      	nop
 8008e96:	46bd      	mov	sp, r7
 8008e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9c:	4770      	bx	lr
 8008e9e:	bf00      	nop
 8008ea0:	e000e010 	.word	0xe000e010
 8008ea4:	e000e018 	.word	0xe000e018
 8008ea8:	20000000 	.word	0x20000000
 8008eac:	10624dd3 	.word	0x10624dd3
 8008eb0:	e000e014 	.word	0xe000e014

08008eb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008eb4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008ec4 <vPortEnableVFP+0x10>
 8008eb8:	6801      	ldr	r1, [r0, #0]
 8008eba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008ebe:	6001      	str	r1, [r0, #0]
 8008ec0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008ec2:	bf00      	nop
 8008ec4:	e000ed88 	.word	0xe000ed88

08008ec8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008ec8:	b480      	push	{r7}
 8008eca:	b085      	sub	sp, #20
 8008ecc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008ece:	f3ef 8305 	mrs	r3, IPSR
 8008ed2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	2b0f      	cmp	r3, #15
 8008ed8:	d915      	bls.n	8008f06 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008eda:	4a18      	ldr	r2, [pc, #96]	; (8008f3c <vPortValidateInterruptPriority+0x74>)
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	4413      	add	r3, r2
 8008ee0:	781b      	ldrb	r3, [r3, #0]
 8008ee2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008ee4:	4b16      	ldr	r3, [pc, #88]	; (8008f40 <vPortValidateInterruptPriority+0x78>)
 8008ee6:	781b      	ldrb	r3, [r3, #0]
 8008ee8:	7afa      	ldrb	r2, [r7, #11]
 8008eea:	429a      	cmp	r2, r3
 8008eec:	d20b      	bcs.n	8008f06 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef2:	b672      	cpsid	i
 8008ef4:	f383 8811 	msr	BASEPRI, r3
 8008ef8:	f3bf 8f6f 	isb	sy
 8008efc:	f3bf 8f4f 	dsb	sy
 8008f00:	b662      	cpsie	i
 8008f02:	607b      	str	r3, [r7, #4]
 8008f04:	e7fe      	b.n	8008f04 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008f06:	4b0f      	ldr	r3, [pc, #60]	; (8008f44 <vPortValidateInterruptPriority+0x7c>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008f0e:	4b0e      	ldr	r3, [pc, #56]	; (8008f48 <vPortValidateInterruptPriority+0x80>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	429a      	cmp	r2, r3
 8008f14:	d90b      	bls.n	8008f2e <vPortValidateInterruptPriority+0x66>
 8008f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f1a:	b672      	cpsid	i
 8008f1c:	f383 8811 	msr	BASEPRI, r3
 8008f20:	f3bf 8f6f 	isb	sy
 8008f24:	f3bf 8f4f 	dsb	sy
 8008f28:	b662      	cpsie	i
 8008f2a:	603b      	str	r3, [r7, #0]
 8008f2c:	e7fe      	b.n	8008f2c <vPortValidateInterruptPriority+0x64>
	}
 8008f2e:	bf00      	nop
 8008f30:	3714      	adds	r7, #20
 8008f32:	46bd      	mov	sp, r7
 8008f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f38:	4770      	bx	lr
 8008f3a:	bf00      	nop
 8008f3c:	e000e3f0 	.word	0xe000e3f0
 8008f40:	20000f04 	.word	0x20000f04
 8008f44:	e000ed0c 	.word	0xe000ed0c
 8008f48:	20000f08 	.word	0x20000f08

08008f4c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b08a      	sub	sp, #40	; 0x28
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008f54:	2300      	movs	r3, #0
 8008f56:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008f58:	f7fe fdb0 	bl	8007abc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008f5c:	4b5a      	ldr	r3, [pc, #360]	; (80090c8 <pvPortMalloc+0x17c>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d101      	bne.n	8008f68 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008f64:	f000 f916 	bl	8009194 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008f68:	4b58      	ldr	r3, [pc, #352]	; (80090cc <pvPortMalloc+0x180>)
 8008f6a:	681a      	ldr	r2, [r3, #0]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	4013      	ands	r3, r2
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	f040 8090 	bne.w	8009096 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d01e      	beq.n	8008fba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008f7c:	2208      	movs	r2, #8
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	4413      	add	r3, r2
 8008f82:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f003 0307 	and.w	r3, r3, #7
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d015      	beq.n	8008fba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f023 0307 	bic.w	r3, r3, #7
 8008f94:	3308      	adds	r3, #8
 8008f96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f003 0307 	and.w	r3, r3, #7
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d00b      	beq.n	8008fba <pvPortMalloc+0x6e>
 8008fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa6:	b672      	cpsid	i
 8008fa8:	f383 8811 	msr	BASEPRI, r3
 8008fac:	f3bf 8f6f 	isb	sy
 8008fb0:	f3bf 8f4f 	dsb	sy
 8008fb4:	b662      	cpsie	i
 8008fb6:	617b      	str	r3, [r7, #20]
 8008fb8:	e7fe      	b.n	8008fb8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d06a      	beq.n	8009096 <pvPortMalloc+0x14a>
 8008fc0:	4b43      	ldr	r3, [pc, #268]	; (80090d0 <pvPortMalloc+0x184>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	687a      	ldr	r2, [r7, #4]
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	d865      	bhi.n	8009096 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008fca:	4b42      	ldr	r3, [pc, #264]	; (80090d4 <pvPortMalloc+0x188>)
 8008fcc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008fce:	4b41      	ldr	r3, [pc, #260]	; (80090d4 <pvPortMalloc+0x188>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008fd4:	e004      	b.n	8008fe0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe2:	685b      	ldr	r3, [r3, #4]
 8008fe4:	687a      	ldr	r2, [r7, #4]
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d903      	bls.n	8008ff2 <pvPortMalloc+0xa6>
 8008fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d1f1      	bne.n	8008fd6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008ff2:	4b35      	ldr	r3, [pc, #212]	; (80090c8 <pvPortMalloc+0x17c>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ff8:	429a      	cmp	r2, r3
 8008ffa:	d04c      	beq.n	8009096 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008ffc:	6a3b      	ldr	r3, [r7, #32]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	2208      	movs	r2, #8
 8009002:	4413      	add	r3, r2
 8009004:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009008:	681a      	ldr	r2, [r3, #0]
 800900a:	6a3b      	ldr	r3, [r7, #32]
 800900c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800900e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009010:	685a      	ldr	r2, [r3, #4]
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	1ad2      	subs	r2, r2, r3
 8009016:	2308      	movs	r3, #8
 8009018:	005b      	lsls	r3, r3, #1
 800901a:	429a      	cmp	r2, r3
 800901c:	d920      	bls.n	8009060 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800901e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	4413      	add	r3, r2
 8009024:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009026:	69bb      	ldr	r3, [r7, #24]
 8009028:	f003 0307 	and.w	r3, r3, #7
 800902c:	2b00      	cmp	r3, #0
 800902e:	d00b      	beq.n	8009048 <pvPortMalloc+0xfc>
 8009030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009034:	b672      	cpsid	i
 8009036:	f383 8811 	msr	BASEPRI, r3
 800903a:	f3bf 8f6f 	isb	sy
 800903e:	f3bf 8f4f 	dsb	sy
 8009042:	b662      	cpsie	i
 8009044:	613b      	str	r3, [r7, #16]
 8009046:	e7fe      	b.n	8009046 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800904a:	685a      	ldr	r2, [r3, #4]
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	1ad2      	subs	r2, r2, r3
 8009050:	69bb      	ldr	r3, [r7, #24]
 8009052:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009056:	687a      	ldr	r2, [r7, #4]
 8009058:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800905a:	69b8      	ldr	r0, [r7, #24]
 800905c:	f000 f8fc 	bl	8009258 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009060:	4b1b      	ldr	r3, [pc, #108]	; (80090d0 <pvPortMalloc+0x184>)
 8009062:	681a      	ldr	r2, [r3, #0]
 8009064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009066:	685b      	ldr	r3, [r3, #4]
 8009068:	1ad3      	subs	r3, r2, r3
 800906a:	4a19      	ldr	r2, [pc, #100]	; (80090d0 <pvPortMalloc+0x184>)
 800906c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800906e:	4b18      	ldr	r3, [pc, #96]	; (80090d0 <pvPortMalloc+0x184>)
 8009070:	681a      	ldr	r2, [r3, #0]
 8009072:	4b19      	ldr	r3, [pc, #100]	; (80090d8 <pvPortMalloc+0x18c>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	429a      	cmp	r2, r3
 8009078:	d203      	bcs.n	8009082 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800907a:	4b15      	ldr	r3, [pc, #84]	; (80090d0 <pvPortMalloc+0x184>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	4a16      	ldr	r2, [pc, #88]	; (80090d8 <pvPortMalloc+0x18c>)
 8009080:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009084:	685a      	ldr	r2, [r3, #4]
 8009086:	4b11      	ldr	r3, [pc, #68]	; (80090cc <pvPortMalloc+0x180>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	431a      	orrs	r2, r3
 800908c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800908e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009092:	2200      	movs	r2, #0
 8009094:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009096:	f7fe fd1f 	bl	8007ad8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800909a:	69fb      	ldr	r3, [r7, #28]
 800909c:	f003 0307 	and.w	r3, r3, #7
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d00b      	beq.n	80090bc <pvPortMalloc+0x170>
 80090a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a8:	b672      	cpsid	i
 80090aa:	f383 8811 	msr	BASEPRI, r3
 80090ae:	f3bf 8f6f 	isb	sy
 80090b2:	f3bf 8f4f 	dsb	sy
 80090b6:	b662      	cpsie	i
 80090b8:	60fb      	str	r3, [r7, #12]
 80090ba:	e7fe      	b.n	80090ba <pvPortMalloc+0x16e>
	return pvReturn;
 80090bc:	69fb      	ldr	r3, [r7, #28]
}
 80090be:	4618      	mov	r0, r3
 80090c0:	3728      	adds	r7, #40	; 0x28
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}
 80090c6:	bf00      	nop
 80090c8:	20004b14 	.word	0x20004b14
 80090cc:	20004b20 	.word	0x20004b20
 80090d0:	20004b18 	.word	0x20004b18
 80090d4:	20004b0c 	.word	0x20004b0c
 80090d8:	20004b1c 	.word	0x20004b1c

080090dc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b086      	sub	sp, #24
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d04a      	beq.n	8009184 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80090ee:	2308      	movs	r3, #8
 80090f0:	425b      	negs	r3, r3
 80090f2:	697a      	ldr	r2, [r7, #20]
 80090f4:	4413      	add	r3, r2
 80090f6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	685a      	ldr	r2, [r3, #4]
 8009100:	4b22      	ldr	r3, [pc, #136]	; (800918c <vPortFree+0xb0>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4013      	ands	r3, r2
 8009106:	2b00      	cmp	r3, #0
 8009108:	d10b      	bne.n	8009122 <vPortFree+0x46>
 800910a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800910e:	b672      	cpsid	i
 8009110:	f383 8811 	msr	BASEPRI, r3
 8009114:	f3bf 8f6f 	isb	sy
 8009118:	f3bf 8f4f 	dsb	sy
 800911c:	b662      	cpsie	i
 800911e:	60fb      	str	r3, [r7, #12]
 8009120:	e7fe      	b.n	8009120 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009122:	693b      	ldr	r3, [r7, #16]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d00b      	beq.n	8009142 <vPortFree+0x66>
 800912a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800912e:	b672      	cpsid	i
 8009130:	f383 8811 	msr	BASEPRI, r3
 8009134:	f3bf 8f6f 	isb	sy
 8009138:	f3bf 8f4f 	dsb	sy
 800913c:	b662      	cpsie	i
 800913e:	60bb      	str	r3, [r7, #8]
 8009140:	e7fe      	b.n	8009140 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009142:	693b      	ldr	r3, [r7, #16]
 8009144:	685a      	ldr	r2, [r3, #4]
 8009146:	4b11      	ldr	r3, [pc, #68]	; (800918c <vPortFree+0xb0>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	4013      	ands	r3, r2
 800914c:	2b00      	cmp	r3, #0
 800914e:	d019      	beq.n	8009184 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d115      	bne.n	8009184 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009158:	693b      	ldr	r3, [r7, #16]
 800915a:	685a      	ldr	r2, [r3, #4]
 800915c:	4b0b      	ldr	r3, [pc, #44]	; (800918c <vPortFree+0xb0>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	43db      	mvns	r3, r3
 8009162:	401a      	ands	r2, r3
 8009164:	693b      	ldr	r3, [r7, #16]
 8009166:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009168:	f7fe fca8 	bl	8007abc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	685a      	ldr	r2, [r3, #4]
 8009170:	4b07      	ldr	r3, [pc, #28]	; (8009190 <vPortFree+0xb4>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	4413      	add	r3, r2
 8009176:	4a06      	ldr	r2, [pc, #24]	; (8009190 <vPortFree+0xb4>)
 8009178:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800917a:	6938      	ldr	r0, [r7, #16]
 800917c:	f000 f86c 	bl	8009258 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009180:	f7fe fcaa 	bl	8007ad8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009184:	bf00      	nop
 8009186:	3718      	adds	r7, #24
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}
 800918c:	20004b20 	.word	0x20004b20
 8009190:	20004b18 	.word	0x20004b18

08009194 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009194:	b480      	push	{r7}
 8009196:	b085      	sub	sp, #20
 8009198:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800919a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800919e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80091a0:	4b27      	ldr	r3, [pc, #156]	; (8009240 <prvHeapInit+0xac>)
 80091a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	f003 0307 	and.w	r3, r3, #7
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d00c      	beq.n	80091c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	3307      	adds	r3, #7
 80091b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	f023 0307 	bic.w	r3, r3, #7
 80091ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80091bc:	68ba      	ldr	r2, [r7, #8]
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	1ad3      	subs	r3, r2, r3
 80091c2:	4a1f      	ldr	r2, [pc, #124]	; (8009240 <prvHeapInit+0xac>)
 80091c4:	4413      	add	r3, r2
 80091c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80091cc:	4a1d      	ldr	r2, [pc, #116]	; (8009244 <prvHeapInit+0xb0>)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80091d2:	4b1c      	ldr	r3, [pc, #112]	; (8009244 <prvHeapInit+0xb0>)
 80091d4:	2200      	movs	r2, #0
 80091d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	68ba      	ldr	r2, [r7, #8]
 80091dc:	4413      	add	r3, r2
 80091de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80091e0:	2208      	movs	r2, #8
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	1a9b      	subs	r3, r3, r2
 80091e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	f023 0307 	bic.w	r3, r3, #7
 80091ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	4a15      	ldr	r2, [pc, #84]	; (8009248 <prvHeapInit+0xb4>)
 80091f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80091f6:	4b14      	ldr	r3, [pc, #80]	; (8009248 <prvHeapInit+0xb4>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	2200      	movs	r2, #0
 80091fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80091fe:	4b12      	ldr	r3, [pc, #72]	; (8009248 <prvHeapInit+0xb4>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	2200      	movs	r2, #0
 8009204:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	68fa      	ldr	r2, [r7, #12]
 800920e:	1ad2      	subs	r2, r2, r3
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009214:	4b0c      	ldr	r3, [pc, #48]	; (8009248 <prvHeapInit+0xb4>)
 8009216:	681a      	ldr	r2, [r3, #0]
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	685b      	ldr	r3, [r3, #4]
 8009220:	4a0a      	ldr	r2, [pc, #40]	; (800924c <prvHeapInit+0xb8>)
 8009222:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	685b      	ldr	r3, [r3, #4]
 8009228:	4a09      	ldr	r2, [pc, #36]	; (8009250 <prvHeapInit+0xbc>)
 800922a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800922c:	4b09      	ldr	r3, [pc, #36]	; (8009254 <prvHeapInit+0xc0>)
 800922e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009232:	601a      	str	r2, [r3, #0]
}
 8009234:	bf00      	nop
 8009236:	3714      	adds	r7, #20
 8009238:	46bd      	mov	sp, r7
 800923a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923e:	4770      	bx	lr
 8009240:	20000f0c 	.word	0x20000f0c
 8009244:	20004b0c 	.word	0x20004b0c
 8009248:	20004b14 	.word	0x20004b14
 800924c:	20004b1c 	.word	0x20004b1c
 8009250:	20004b18 	.word	0x20004b18
 8009254:	20004b20 	.word	0x20004b20

08009258 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009258:	b480      	push	{r7}
 800925a:	b085      	sub	sp, #20
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009260:	4b28      	ldr	r3, [pc, #160]	; (8009304 <prvInsertBlockIntoFreeList+0xac>)
 8009262:	60fb      	str	r3, [r7, #12]
 8009264:	e002      	b.n	800926c <prvInsertBlockIntoFreeList+0x14>
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	60fb      	str	r3, [r7, #12]
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	687a      	ldr	r2, [r7, #4]
 8009272:	429a      	cmp	r2, r3
 8009274:	d8f7      	bhi.n	8009266 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	685b      	ldr	r3, [r3, #4]
 800927e:	68ba      	ldr	r2, [r7, #8]
 8009280:	4413      	add	r3, r2
 8009282:	687a      	ldr	r2, [r7, #4]
 8009284:	429a      	cmp	r2, r3
 8009286:	d108      	bne.n	800929a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	685a      	ldr	r2, [r3, #4]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	685b      	ldr	r3, [r3, #4]
 8009290:	441a      	add	r2, r3
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	685b      	ldr	r3, [r3, #4]
 80092a2:	68ba      	ldr	r2, [r7, #8]
 80092a4:	441a      	add	r2, r3
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	429a      	cmp	r2, r3
 80092ac:	d118      	bne.n	80092e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681a      	ldr	r2, [r3, #0]
 80092b2:	4b15      	ldr	r3, [pc, #84]	; (8009308 <prvInsertBlockIntoFreeList+0xb0>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	429a      	cmp	r2, r3
 80092b8:	d00d      	beq.n	80092d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	685a      	ldr	r2, [r3, #4]
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	441a      	add	r2, r3
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	681a      	ldr	r2, [r3, #0]
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	601a      	str	r2, [r3, #0]
 80092d4:	e008      	b.n	80092e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80092d6:	4b0c      	ldr	r3, [pc, #48]	; (8009308 <prvInsertBlockIntoFreeList+0xb0>)
 80092d8:	681a      	ldr	r2, [r3, #0]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	601a      	str	r2, [r3, #0]
 80092de:	e003      	b.n	80092e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681a      	ldr	r2, [r3, #0]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80092e8:	68fa      	ldr	r2, [r7, #12]
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d002      	beq.n	80092f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	687a      	ldr	r2, [r7, #4]
 80092f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80092f6:	bf00      	nop
 80092f8:	3714      	adds	r7, #20
 80092fa:	46bd      	mov	sp, r7
 80092fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009300:	4770      	bx	lr
 8009302:	bf00      	nop
 8009304:	20004b0c 	.word	0x20004b0c
 8009308:	20004b14 	.word	0x20004b14

0800930c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009310:	2200      	movs	r2, #0
 8009312:	4912      	ldr	r1, [pc, #72]	; (800935c <MX_USB_DEVICE_Init+0x50>)
 8009314:	4812      	ldr	r0, [pc, #72]	; (8009360 <MX_USB_DEVICE_Init+0x54>)
 8009316:	f7fc f93b 	bl	8005590 <USBD_Init>
 800931a:	4603      	mov	r3, r0
 800931c:	2b00      	cmp	r3, #0
 800931e:	d001      	beq.n	8009324 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009320:	f7f7 fa44 	bl	80007ac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009324:	490f      	ldr	r1, [pc, #60]	; (8009364 <MX_USB_DEVICE_Init+0x58>)
 8009326:	480e      	ldr	r0, [pc, #56]	; (8009360 <MX_USB_DEVICE_Init+0x54>)
 8009328:	f7fc f968 	bl	80055fc <USBD_RegisterClass>
 800932c:	4603      	mov	r3, r0
 800932e:	2b00      	cmp	r3, #0
 8009330:	d001      	beq.n	8009336 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009332:	f7f7 fa3b 	bl	80007ac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009336:	490c      	ldr	r1, [pc, #48]	; (8009368 <MX_USB_DEVICE_Init+0x5c>)
 8009338:	4809      	ldr	r0, [pc, #36]	; (8009360 <MX_USB_DEVICE_Init+0x54>)
 800933a:	f7fc f88d 	bl	8005458 <USBD_CDC_RegisterInterface>
 800933e:	4603      	mov	r3, r0
 8009340:	2b00      	cmp	r3, #0
 8009342:	d001      	beq.n	8009348 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009344:	f7f7 fa32 	bl	80007ac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009348:	4805      	ldr	r0, [pc, #20]	; (8009360 <MX_USB_DEVICE_Init+0x54>)
 800934a:	f7fc f978 	bl	800563e <USBD_Start>
 800934e:	4603      	mov	r3, r0
 8009350:	2b00      	cmp	r3, #0
 8009352:	d001      	beq.n	8009358 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009354:	f7f7 fa2a 	bl	80007ac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009358:	bf00      	nop
 800935a:	bd80      	pop	{r7, pc}
 800935c:	20000134 	.word	0x20000134
 8009360:	20005cdc 	.word	0x20005cdc
 8009364:	20000018 	.word	0x20000018
 8009368:	20000120 	.word	0x20000120

0800936c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009370:	2200      	movs	r2, #0
 8009372:	4905      	ldr	r1, [pc, #20]	; (8009388 <CDC_Init_FS+0x1c>)
 8009374:	4805      	ldr	r0, [pc, #20]	; (800938c <CDC_Init_FS+0x20>)
 8009376:	f7fc f884 	bl	8005482 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800937a:	4905      	ldr	r1, [pc, #20]	; (8009390 <CDC_Init_FS+0x24>)
 800937c:	4803      	ldr	r0, [pc, #12]	; (800938c <CDC_Init_FS+0x20>)
 800937e:	f7fc f899 	bl	80054b4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009382:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009384:	4618      	mov	r0, r3
 8009386:	bd80      	pop	{r7, pc}
 8009388:	200067ac 	.word	0x200067ac
 800938c:	20005cdc 	.word	0x20005cdc
 8009390:	20005fac 	.word	0x20005fac

08009394 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009394:	b480      	push	{r7}
 8009396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009398:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800939a:	4618      	mov	r0, r3
 800939c:	46bd      	mov	sp, r7
 800939e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a2:	4770      	bx	lr

080093a4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b083      	sub	sp, #12
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	4603      	mov	r3, r0
 80093ac:	6039      	str	r1, [r7, #0]
 80093ae:	71fb      	strb	r3, [r7, #7]
 80093b0:	4613      	mov	r3, r2
 80093b2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80093b4:	79fb      	ldrb	r3, [r7, #7]
 80093b6:	2b23      	cmp	r3, #35	; 0x23
 80093b8:	d84a      	bhi.n	8009450 <CDC_Control_FS+0xac>
 80093ba:	a201      	add	r2, pc, #4	; (adr r2, 80093c0 <CDC_Control_FS+0x1c>)
 80093bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093c0:	08009451 	.word	0x08009451
 80093c4:	08009451 	.word	0x08009451
 80093c8:	08009451 	.word	0x08009451
 80093cc:	08009451 	.word	0x08009451
 80093d0:	08009451 	.word	0x08009451
 80093d4:	08009451 	.word	0x08009451
 80093d8:	08009451 	.word	0x08009451
 80093dc:	08009451 	.word	0x08009451
 80093e0:	08009451 	.word	0x08009451
 80093e4:	08009451 	.word	0x08009451
 80093e8:	08009451 	.word	0x08009451
 80093ec:	08009451 	.word	0x08009451
 80093f0:	08009451 	.word	0x08009451
 80093f4:	08009451 	.word	0x08009451
 80093f8:	08009451 	.word	0x08009451
 80093fc:	08009451 	.word	0x08009451
 8009400:	08009451 	.word	0x08009451
 8009404:	08009451 	.word	0x08009451
 8009408:	08009451 	.word	0x08009451
 800940c:	08009451 	.word	0x08009451
 8009410:	08009451 	.word	0x08009451
 8009414:	08009451 	.word	0x08009451
 8009418:	08009451 	.word	0x08009451
 800941c:	08009451 	.word	0x08009451
 8009420:	08009451 	.word	0x08009451
 8009424:	08009451 	.word	0x08009451
 8009428:	08009451 	.word	0x08009451
 800942c:	08009451 	.word	0x08009451
 8009430:	08009451 	.word	0x08009451
 8009434:	08009451 	.word	0x08009451
 8009438:	08009451 	.word	0x08009451
 800943c:	08009451 	.word	0x08009451
 8009440:	08009451 	.word	0x08009451
 8009444:	08009451 	.word	0x08009451
 8009448:	08009451 	.word	0x08009451
 800944c:	08009451 	.word	0x08009451
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009450:	bf00      	nop
  }

  return (USBD_OK);
 8009452:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009454:	4618      	mov	r0, r3
 8009456:	370c      	adds	r7, #12
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr

08009460 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b082      	sub	sp, #8
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
 8009468:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800946a:	6879      	ldr	r1, [r7, #4]
 800946c:	4805      	ldr	r0, [pc, #20]	; (8009484 <CDC_Receive_FS+0x24>)
 800946e:	f7fc f821 	bl	80054b4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009472:	4804      	ldr	r0, [pc, #16]	; (8009484 <CDC_Receive_FS+0x24>)
 8009474:	f7fc f862 	bl	800553c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009478:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800947a:	4618      	mov	r0, r3
 800947c:	3708      	adds	r7, #8
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}
 8009482:	bf00      	nop
 8009484:	20005cdc 	.word	0x20005cdc

08009488 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b084      	sub	sp, #16
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
 8009490:	460b      	mov	r3, r1
 8009492:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009494:	2300      	movs	r3, #0
 8009496:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009498:	4b0d      	ldr	r3, [pc, #52]	; (80094d0 <CDC_Transmit_FS+0x48>)
 800949a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800949e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d001      	beq.n	80094ae <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80094aa:	2301      	movs	r3, #1
 80094ac:	e00b      	b.n	80094c6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80094ae:	887b      	ldrh	r3, [r7, #2]
 80094b0:	461a      	mov	r2, r3
 80094b2:	6879      	ldr	r1, [r7, #4]
 80094b4:	4806      	ldr	r0, [pc, #24]	; (80094d0 <CDC_Transmit_FS+0x48>)
 80094b6:	f7fb ffe4 	bl	8005482 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80094ba:	4805      	ldr	r0, [pc, #20]	; (80094d0 <CDC_Transmit_FS+0x48>)
 80094bc:	f7fc f80e 	bl	80054dc <USBD_CDC_TransmitPacket>
 80094c0:	4603      	mov	r3, r0
 80094c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80094c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	3710      	adds	r7, #16
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}
 80094ce:	bf00      	nop
 80094d0:	20005cdc 	.word	0x20005cdc

080094d4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b087      	sub	sp, #28
 80094d8:	af00      	add	r7, sp, #0
 80094da:	60f8      	str	r0, [r7, #12]
 80094dc:	60b9      	str	r1, [r7, #8]
 80094de:	4613      	mov	r3, r2
 80094e0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80094e2:	2300      	movs	r3, #0
 80094e4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80094e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	371c      	adds	r7, #28
 80094ee:	46bd      	mov	sp, r7
 80094f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f4:	4770      	bx	lr
	...

080094f8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b083      	sub	sp, #12
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	4603      	mov	r3, r0
 8009500:	6039      	str	r1, [r7, #0]
 8009502:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	2212      	movs	r2, #18
 8009508:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800950a:	4b03      	ldr	r3, [pc, #12]	; (8009518 <USBD_FS_DeviceDescriptor+0x20>)
}
 800950c:	4618      	mov	r0, r3
 800950e:	370c      	adds	r7, #12
 8009510:	46bd      	mov	sp, r7
 8009512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009516:	4770      	bx	lr
 8009518:	20000154 	.word	0x20000154

0800951c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800951c:	b480      	push	{r7}
 800951e:	b083      	sub	sp, #12
 8009520:	af00      	add	r7, sp, #0
 8009522:	4603      	mov	r3, r0
 8009524:	6039      	str	r1, [r7, #0]
 8009526:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	2204      	movs	r2, #4
 800952c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800952e:	4b03      	ldr	r3, [pc, #12]	; (800953c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009530:	4618      	mov	r0, r3
 8009532:	370c      	adds	r7, #12
 8009534:	46bd      	mov	sp, r7
 8009536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953a:	4770      	bx	lr
 800953c:	20000174 	.word	0x20000174

08009540 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b082      	sub	sp, #8
 8009544:	af00      	add	r7, sp, #0
 8009546:	4603      	mov	r3, r0
 8009548:	6039      	str	r1, [r7, #0]
 800954a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800954c:	79fb      	ldrb	r3, [r7, #7]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d105      	bne.n	800955e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009552:	683a      	ldr	r2, [r7, #0]
 8009554:	4907      	ldr	r1, [pc, #28]	; (8009574 <USBD_FS_ProductStrDescriptor+0x34>)
 8009556:	4808      	ldr	r0, [pc, #32]	; (8009578 <USBD_FS_ProductStrDescriptor+0x38>)
 8009558:	f7fd f869 	bl	800662e <USBD_GetString>
 800955c:	e004      	b.n	8009568 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800955e:	683a      	ldr	r2, [r7, #0]
 8009560:	4904      	ldr	r1, [pc, #16]	; (8009574 <USBD_FS_ProductStrDescriptor+0x34>)
 8009562:	4805      	ldr	r0, [pc, #20]	; (8009578 <USBD_FS_ProductStrDescriptor+0x38>)
 8009564:	f7fd f863 	bl	800662e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009568:	4b02      	ldr	r3, [pc, #8]	; (8009574 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800956a:	4618      	mov	r0, r3
 800956c:	3708      	adds	r7, #8
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}
 8009572:	bf00      	nop
 8009574:	20006fac 	.word	0x20006fac
 8009578:	0800a71c 	.word	0x0800a71c

0800957c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b082      	sub	sp, #8
 8009580:	af00      	add	r7, sp, #0
 8009582:	4603      	mov	r3, r0
 8009584:	6039      	str	r1, [r7, #0]
 8009586:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009588:	683a      	ldr	r2, [r7, #0]
 800958a:	4904      	ldr	r1, [pc, #16]	; (800959c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800958c:	4804      	ldr	r0, [pc, #16]	; (80095a0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800958e:	f7fd f84e 	bl	800662e <USBD_GetString>
  return USBD_StrDesc;
 8009592:	4b02      	ldr	r3, [pc, #8]	; (800959c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009594:	4618      	mov	r0, r3
 8009596:	3708      	adds	r7, #8
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}
 800959c:	20006fac 	.word	0x20006fac
 80095a0:	0800a734 	.word	0x0800a734

080095a4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b082      	sub	sp, #8
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	4603      	mov	r3, r0
 80095ac:	6039      	str	r1, [r7, #0]
 80095ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	221a      	movs	r2, #26
 80095b4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80095b6:	f000 f855 	bl	8009664 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80095ba:	4b02      	ldr	r3, [pc, #8]	; (80095c4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80095bc:	4618      	mov	r0, r3
 80095be:	3708      	adds	r7, #8
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}
 80095c4:	20000178 	.word	0x20000178

080095c8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b082      	sub	sp, #8
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	4603      	mov	r3, r0
 80095d0:	6039      	str	r1, [r7, #0]
 80095d2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80095d4:	79fb      	ldrb	r3, [r7, #7]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d105      	bne.n	80095e6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80095da:	683a      	ldr	r2, [r7, #0]
 80095dc:	4907      	ldr	r1, [pc, #28]	; (80095fc <USBD_FS_ConfigStrDescriptor+0x34>)
 80095de:	4808      	ldr	r0, [pc, #32]	; (8009600 <USBD_FS_ConfigStrDescriptor+0x38>)
 80095e0:	f7fd f825 	bl	800662e <USBD_GetString>
 80095e4:	e004      	b.n	80095f0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80095e6:	683a      	ldr	r2, [r7, #0]
 80095e8:	4904      	ldr	r1, [pc, #16]	; (80095fc <USBD_FS_ConfigStrDescriptor+0x34>)
 80095ea:	4805      	ldr	r0, [pc, #20]	; (8009600 <USBD_FS_ConfigStrDescriptor+0x38>)
 80095ec:	f7fd f81f 	bl	800662e <USBD_GetString>
  }
  return USBD_StrDesc;
 80095f0:	4b02      	ldr	r3, [pc, #8]	; (80095fc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3708      	adds	r7, #8
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}
 80095fa:	bf00      	nop
 80095fc:	20006fac 	.word	0x20006fac
 8009600:	0800a748 	.word	0x0800a748

08009604 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b082      	sub	sp, #8
 8009608:	af00      	add	r7, sp, #0
 800960a:	4603      	mov	r3, r0
 800960c:	6039      	str	r1, [r7, #0]
 800960e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009610:	79fb      	ldrb	r3, [r7, #7]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d105      	bne.n	8009622 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009616:	683a      	ldr	r2, [r7, #0]
 8009618:	4907      	ldr	r1, [pc, #28]	; (8009638 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800961a:	4808      	ldr	r0, [pc, #32]	; (800963c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800961c:	f7fd f807 	bl	800662e <USBD_GetString>
 8009620:	e004      	b.n	800962c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009622:	683a      	ldr	r2, [r7, #0]
 8009624:	4904      	ldr	r1, [pc, #16]	; (8009638 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009626:	4805      	ldr	r0, [pc, #20]	; (800963c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009628:	f7fd f801 	bl	800662e <USBD_GetString>
  }
  return USBD_StrDesc;
 800962c:	4b02      	ldr	r3, [pc, #8]	; (8009638 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800962e:	4618      	mov	r0, r3
 8009630:	3708      	adds	r7, #8
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}
 8009636:	bf00      	nop
 8009638:	20006fac 	.word	0x20006fac
 800963c:	0800a754 	.word	0x0800a754

08009640 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009640:	b480      	push	{r7}
 8009642:	b083      	sub	sp, #12
 8009644:	af00      	add	r7, sp, #0
 8009646:	4603      	mov	r3, r0
 8009648:	6039      	str	r1, [r7, #0]
 800964a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	220c      	movs	r2, #12
 8009650:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8009652:	4b03      	ldr	r3, [pc, #12]	; (8009660 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8009654:	4618      	mov	r0, r3
 8009656:	370c      	adds	r7, #12
 8009658:	46bd      	mov	sp, r7
 800965a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965e:	4770      	bx	lr
 8009660:	20000168 	.word	0x20000168

08009664 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b084      	sub	sp, #16
 8009668:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800966a:	4b0f      	ldr	r3, [pc, #60]	; (80096a8 <Get_SerialNum+0x44>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009670:	4b0e      	ldr	r3, [pc, #56]	; (80096ac <Get_SerialNum+0x48>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009676:	4b0e      	ldr	r3, [pc, #56]	; (80096b0 <Get_SerialNum+0x4c>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800967c:	68fa      	ldr	r2, [r7, #12]
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	4413      	add	r3, r2
 8009682:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d009      	beq.n	800969e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800968a:	2208      	movs	r2, #8
 800968c:	4909      	ldr	r1, [pc, #36]	; (80096b4 <Get_SerialNum+0x50>)
 800968e:	68f8      	ldr	r0, [r7, #12]
 8009690:	f000 f814 	bl	80096bc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009694:	2204      	movs	r2, #4
 8009696:	4908      	ldr	r1, [pc, #32]	; (80096b8 <Get_SerialNum+0x54>)
 8009698:	68b8      	ldr	r0, [r7, #8]
 800969a:	f000 f80f 	bl	80096bc <IntToUnicode>
  }
}
 800969e:	bf00      	nop
 80096a0:	3710      	adds	r7, #16
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}
 80096a6:	bf00      	nop
 80096a8:	1ff0f420 	.word	0x1ff0f420
 80096ac:	1ff0f424 	.word	0x1ff0f424
 80096b0:	1ff0f428 	.word	0x1ff0f428
 80096b4:	2000017a 	.word	0x2000017a
 80096b8:	2000018a 	.word	0x2000018a

080096bc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80096bc:	b480      	push	{r7}
 80096be:	b087      	sub	sp, #28
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	60f8      	str	r0, [r7, #12]
 80096c4:	60b9      	str	r1, [r7, #8]
 80096c6:	4613      	mov	r3, r2
 80096c8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80096ca:	2300      	movs	r3, #0
 80096cc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80096ce:	2300      	movs	r3, #0
 80096d0:	75fb      	strb	r3, [r7, #23]
 80096d2:	e027      	b.n	8009724 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	0f1b      	lsrs	r3, r3, #28
 80096d8:	2b09      	cmp	r3, #9
 80096da:	d80b      	bhi.n	80096f4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	0f1b      	lsrs	r3, r3, #28
 80096e0:	b2da      	uxtb	r2, r3
 80096e2:	7dfb      	ldrb	r3, [r7, #23]
 80096e4:	005b      	lsls	r3, r3, #1
 80096e6:	4619      	mov	r1, r3
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	440b      	add	r3, r1
 80096ec:	3230      	adds	r2, #48	; 0x30
 80096ee:	b2d2      	uxtb	r2, r2
 80096f0:	701a      	strb	r2, [r3, #0]
 80096f2:	e00a      	b.n	800970a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	0f1b      	lsrs	r3, r3, #28
 80096f8:	b2da      	uxtb	r2, r3
 80096fa:	7dfb      	ldrb	r3, [r7, #23]
 80096fc:	005b      	lsls	r3, r3, #1
 80096fe:	4619      	mov	r1, r3
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	440b      	add	r3, r1
 8009704:	3237      	adds	r2, #55	; 0x37
 8009706:	b2d2      	uxtb	r2, r2
 8009708:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	011b      	lsls	r3, r3, #4
 800970e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009710:	7dfb      	ldrb	r3, [r7, #23]
 8009712:	005b      	lsls	r3, r3, #1
 8009714:	3301      	adds	r3, #1
 8009716:	68ba      	ldr	r2, [r7, #8]
 8009718:	4413      	add	r3, r2
 800971a:	2200      	movs	r2, #0
 800971c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800971e:	7dfb      	ldrb	r3, [r7, #23]
 8009720:	3301      	adds	r3, #1
 8009722:	75fb      	strb	r3, [r7, #23]
 8009724:	7dfa      	ldrb	r2, [r7, #23]
 8009726:	79fb      	ldrb	r3, [r7, #7]
 8009728:	429a      	cmp	r2, r3
 800972a:	d3d3      	bcc.n	80096d4 <IntToUnicode+0x18>
  }
}
 800972c:	bf00      	nop
 800972e:	371c      	adds	r7, #28
 8009730:	46bd      	mov	sp, r7
 8009732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009736:	4770      	bx	lr

08009738 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b08a      	sub	sp, #40	; 0x28
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009740:	f107 0314 	add.w	r3, r7, #20
 8009744:	2200      	movs	r2, #0
 8009746:	601a      	str	r2, [r3, #0]
 8009748:	605a      	str	r2, [r3, #4]
 800974a:	609a      	str	r2, [r3, #8]
 800974c:	60da      	str	r2, [r3, #12]
 800974e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009758:	d13c      	bne.n	80097d4 <HAL_PCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800975a:	4b20      	ldr	r3, [pc, #128]	; (80097dc <HAL_PCD_MspInit+0xa4>)
 800975c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800975e:	4a1f      	ldr	r2, [pc, #124]	; (80097dc <HAL_PCD_MspInit+0xa4>)
 8009760:	f043 0301 	orr.w	r3, r3, #1
 8009764:	6313      	str	r3, [r2, #48]	; 0x30
 8009766:	4b1d      	ldr	r3, [pc, #116]	; (80097dc <HAL_PCD_MspInit+0xa4>)
 8009768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800976a:	f003 0301 	and.w	r3, r3, #1
 800976e:	613b      	str	r3, [r7, #16]
 8009770:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009772:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009776:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009778:	2302      	movs	r3, #2
 800977a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800977c:	2300      	movs	r3, #0
 800977e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009780:	2303      	movs	r3, #3
 8009782:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009784:	230a      	movs	r3, #10
 8009786:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009788:	f107 0314 	add.w	r3, r7, #20
 800978c:	4619      	mov	r1, r3
 800978e:	4814      	ldr	r0, [pc, #80]	; (80097e0 <HAL_PCD_MspInit+0xa8>)
 8009790:	f7f7 fa98 	bl	8000cc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009794:	4b11      	ldr	r3, [pc, #68]	; (80097dc <HAL_PCD_MspInit+0xa4>)
 8009796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009798:	4a10      	ldr	r2, [pc, #64]	; (80097dc <HAL_PCD_MspInit+0xa4>)
 800979a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800979e:	6353      	str	r3, [r2, #52]	; 0x34
 80097a0:	4b0e      	ldr	r3, [pc, #56]	; (80097dc <HAL_PCD_MspInit+0xa4>)
 80097a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097a8:	60fb      	str	r3, [r7, #12]
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	4b0b      	ldr	r3, [pc, #44]	; (80097dc <HAL_PCD_MspInit+0xa4>)
 80097ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097b0:	4a0a      	ldr	r2, [pc, #40]	; (80097dc <HAL_PCD_MspInit+0xa4>)
 80097b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80097b6:	6453      	str	r3, [r2, #68]	; 0x44
 80097b8:	4b08      	ldr	r3, [pc, #32]	; (80097dc <HAL_PCD_MspInit+0xa4>)
 80097ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80097c0:	60bb      	str	r3, [r7, #8]
 80097c2:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80097c4:	2200      	movs	r2, #0
 80097c6:	2105      	movs	r1, #5
 80097c8:	2043      	movs	r0, #67	; 0x43
 80097ca:	f7f7 fa51 	bl	8000c70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80097ce:	2043      	movs	r0, #67	; 0x43
 80097d0:	f7f7 fa6a 	bl	8000ca8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80097d4:	bf00      	nop
 80097d6:	3728      	adds	r7, #40	; 0x28
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}
 80097dc:	40023800 	.word	0x40023800
 80097e0:	40020000 	.word	0x40020000

080097e4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b082      	sub	sp, #8
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80097f8:	4619      	mov	r1, r3
 80097fa:	4610      	mov	r0, r2
 80097fc:	f7fb ff6a 	bl	80056d4 <USBD_LL_SetupStage>
}
 8009800:	bf00      	nop
 8009802:	3708      	adds	r7, #8
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}

08009808 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b082      	sub	sp, #8
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	460b      	mov	r3, r1
 8009812:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 800981a:	78fa      	ldrb	r2, [r7, #3]
 800981c:	6879      	ldr	r1, [r7, #4]
 800981e:	4613      	mov	r3, r2
 8009820:	00db      	lsls	r3, r3, #3
 8009822:	1a9b      	subs	r3, r3, r2
 8009824:	009b      	lsls	r3, r3, #2
 8009826:	440b      	add	r3, r1
 8009828:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800982c:	681a      	ldr	r2, [r3, #0]
 800982e:	78fb      	ldrb	r3, [r7, #3]
 8009830:	4619      	mov	r1, r3
 8009832:	f7fb ffa2 	bl	800577a <USBD_LL_DataOutStage>
}
 8009836:	bf00      	nop
 8009838:	3708      	adds	r7, #8
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}

0800983e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800983e:	b580      	push	{r7, lr}
 8009840:	b082      	sub	sp, #8
 8009842:	af00      	add	r7, sp, #0
 8009844:	6078      	str	r0, [r7, #4]
 8009846:	460b      	mov	r3, r1
 8009848:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 8009850:	78fa      	ldrb	r2, [r7, #3]
 8009852:	6879      	ldr	r1, [r7, #4]
 8009854:	4613      	mov	r3, r2
 8009856:	00db      	lsls	r3, r3, #3
 8009858:	1a9b      	subs	r3, r3, r2
 800985a:	009b      	lsls	r3, r3, #2
 800985c:	440b      	add	r3, r1
 800985e:	3348      	adds	r3, #72	; 0x48
 8009860:	681a      	ldr	r2, [r3, #0]
 8009862:	78fb      	ldrb	r3, [r7, #3]
 8009864:	4619      	mov	r1, r3
 8009866:	f7fb ffeb 	bl	8005840 <USBD_LL_DataInStage>
}
 800986a:	bf00      	nop
 800986c:	3708      	adds	r7, #8
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}

08009872 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009872:	b580      	push	{r7, lr}
 8009874:	b082      	sub	sp, #8
 8009876:	af00      	add	r7, sp, #0
 8009878:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009880:	4618      	mov	r0, r3
 8009882:	f7fc f8ef 	bl	8005a64 <USBD_LL_SOF>
}
 8009886:	bf00      	nop
 8009888:	3708      	adds	r7, #8
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}

0800988e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800988e:	b580      	push	{r7, lr}
 8009890:	b084      	sub	sp, #16
 8009892:	af00      	add	r7, sp, #0
 8009894:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009896:	2301      	movs	r3, #1
 8009898:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	68db      	ldr	r3, [r3, #12]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d102      	bne.n	80098a8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80098a2:	2300      	movs	r3, #0
 80098a4:	73fb      	strb	r3, [r7, #15]
 80098a6:	e008      	b.n	80098ba <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	68db      	ldr	r3, [r3, #12]
 80098ac:	2b02      	cmp	r3, #2
 80098ae:	d102      	bne.n	80098b6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80098b0:	2301      	movs	r3, #1
 80098b2:	73fb      	strb	r3, [r7, #15]
 80098b4:	e001      	b.n	80098ba <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80098b6:	f7f6 ff79 	bl	80007ac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80098c0:	7bfa      	ldrb	r2, [r7, #15]
 80098c2:	4611      	mov	r1, r2
 80098c4:	4618      	mov	r0, r3
 80098c6:	f7fc f892 	bl	80059ee <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80098d0:	4618      	mov	r0, r3
 80098d2:	f7fc f84b 	bl	800596c <USBD_LL_Reset>
}
 80098d6:	bf00      	nop
 80098d8:	3710      	adds	r7, #16
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}
	...

080098e0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b082      	sub	sp, #8
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80098ee:	4618      	mov	r0, r3
 80098f0:	f7fc f88d 	bl	8005a0e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	687a      	ldr	r2, [r7, #4]
 8009900:	6812      	ldr	r2, [r2, #0]
 8009902:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009906:	f043 0301 	orr.w	r3, r3, #1
 800990a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6a1b      	ldr	r3, [r3, #32]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d005      	beq.n	8009920 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009914:	4b04      	ldr	r3, [pc, #16]	; (8009928 <HAL_PCD_SuspendCallback+0x48>)
 8009916:	691b      	ldr	r3, [r3, #16]
 8009918:	4a03      	ldr	r2, [pc, #12]	; (8009928 <HAL_PCD_SuspendCallback+0x48>)
 800991a:	f043 0306 	orr.w	r3, r3, #6
 800991e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009920:	bf00      	nop
 8009922:	3708      	adds	r7, #8
 8009924:	46bd      	mov	sp, r7
 8009926:	bd80      	pop	{r7, pc}
 8009928:	e000ed00 	.word	0xe000ed00

0800992c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b082      	sub	sp, #8
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800993a:	4618      	mov	r0, r3
 800993c:	f7fc f87c 	bl	8005a38 <USBD_LL_Resume>
}
 8009940:	bf00      	nop
 8009942:	3708      	adds	r7, #8
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}

08009948 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b082      	sub	sp, #8
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
 8009950:	460b      	mov	r3, r1
 8009952:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800995a:	78fa      	ldrb	r2, [r7, #3]
 800995c:	4611      	mov	r1, r2
 800995e:	4618      	mov	r0, r3
 8009960:	f7fc f8a7 	bl	8005ab2 <USBD_LL_IsoOUTIncomplete>
}
 8009964:	bf00      	nop
 8009966:	3708      	adds	r7, #8
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}

0800996c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b082      	sub	sp, #8
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
 8009974:	460b      	mov	r3, r1
 8009976:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800997e:	78fa      	ldrb	r2, [r7, #3]
 8009980:	4611      	mov	r1, r2
 8009982:	4618      	mov	r0, r3
 8009984:	f7fc f888 	bl	8005a98 <USBD_LL_IsoINIncomplete>
}
 8009988:	bf00      	nop
 800998a:	3708      	adds	r7, #8
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}

08009990 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b082      	sub	sp, #8
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800999e:	4618      	mov	r0, r3
 80099a0:	f7fc f894 	bl	8005acc <USBD_LL_DevConnected>
}
 80099a4:	bf00      	nop
 80099a6:	3708      	adds	r7, #8
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}

080099ac <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b082      	sub	sp, #8
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80099ba:	4618      	mov	r0, r3
 80099bc:	f7fc f891 	bl	8005ae2 <USBD_LL_DevDisconnected>
}
 80099c0:	bf00      	nop
 80099c2:	3708      	adds	r7, #8
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}

080099c8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b082      	sub	sp, #8
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	781b      	ldrb	r3, [r3, #0]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d13c      	bne.n	8009a52 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80099d8:	4a20      	ldr	r2, [pc, #128]	; (8009a5c <USBD_LL_Init+0x94>)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	4a1e      	ldr	r2, [pc, #120]	; (8009a5c <USBD_LL_Init+0x94>)
 80099e4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80099e8:	4b1c      	ldr	r3, [pc, #112]	; (8009a5c <USBD_LL_Init+0x94>)
 80099ea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80099ee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80099f0:	4b1a      	ldr	r3, [pc, #104]	; (8009a5c <USBD_LL_Init+0x94>)
 80099f2:	2206      	movs	r2, #6
 80099f4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80099f6:	4b19      	ldr	r3, [pc, #100]	; (8009a5c <USBD_LL_Init+0x94>)
 80099f8:	2202      	movs	r2, #2
 80099fa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80099fc:	4b17      	ldr	r3, [pc, #92]	; (8009a5c <USBD_LL_Init+0x94>)
 80099fe:	2200      	movs	r2, #0
 8009a00:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009a02:	4b16      	ldr	r3, [pc, #88]	; (8009a5c <USBD_LL_Init+0x94>)
 8009a04:	2202      	movs	r2, #2
 8009a06:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009a08:	4b14      	ldr	r3, [pc, #80]	; (8009a5c <USBD_LL_Init+0x94>)
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009a0e:	4b13      	ldr	r3, [pc, #76]	; (8009a5c <USBD_LL_Init+0x94>)
 8009a10:	2200      	movs	r2, #0
 8009a12:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009a14:	4b11      	ldr	r3, [pc, #68]	; (8009a5c <USBD_LL_Init+0x94>)
 8009a16:	2200      	movs	r2, #0
 8009a18:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009a1a:	4b10      	ldr	r3, [pc, #64]	; (8009a5c <USBD_LL_Init+0x94>)
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009a20:	4b0e      	ldr	r3, [pc, #56]	; (8009a5c <USBD_LL_Init+0x94>)
 8009a22:	2200      	movs	r2, #0
 8009a24:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009a26:	480d      	ldr	r0, [pc, #52]	; (8009a5c <USBD_LL_Init+0x94>)
 8009a28:	f7f7 faf6 	bl	8001018 <HAL_PCD_Init>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d001      	beq.n	8009a36 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009a32:	f7f6 febb 	bl	80007ac <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009a36:	2180      	movs	r1, #128	; 0x80
 8009a38:	4808      	ldr	r0, [pc, #32]	; (8009a5c <USBD_LL_Init+0x94>)
 8009a3a:	f7f8 fc76 	bl	800232a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009a3e:	2240      	movs	r2, #64	; 0x40
 8009a40:	2100      	movs	r1, #0
 8009a42:	4806      	ldr	r0, [pc, #24]	; (8009a5c <USBD_LL_Init+0x94>)
 8009a44:	f7f8 fc2a 	bl	800229c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009a48:	2280      	movs	r2, #128	; 0x80
 8009a4a:	2101      	movs	r1, #1
 8009a4c:	4803      	ldr	r0, [pc, #12]	; (8009a5c <USBD_LL_Init+0x94>)
 8009a4e:	f7f8 fc25 	bl	800229c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009a52:	2300      	movs	r3, #0
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	3708      	adds	r7, #8
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}
 8009a5c:	200071ac 	.word	0x200071ac

08009a60 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b084      	sub	sp, #16
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009a76:	4618      	mov	r0, r3
 8009a78:	f7f7 fbf2 	bl	8001260 <HAL_PCD_Start>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8009a80:	7bfb      	ldrb	r3, [r7, #15]
 8009a82:	4618      	mov	r0, r3
 8009a84:	f000 f97e 	bl	8009d84 <USBD_Get_USB_Status>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009a8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3710      	adds	r7, #16
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}

08009a96 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009a96:	b580      	push	{r7, lr}
 8009a98:	b084      	sub	sp, #16
 8009a9a:	af00      	add	r7, sp, #0
 8009a9c:	6078      	str	r0, [r7, #4]
 8009a9e:	4608      	mov	r0, r1
 8009aa0:	4611      	mov	r1, r2
 8009aa2:	461a      	mov	r2, r3
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	70fb      	strb	r3, [r7, #3]
 8009aa8:	460b      	mov	r3, r1
 8009aaa:	70bb      	strb	r3, [r7, #2]
 8009aac:	4613      	mov	r3, r2
 8009aae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009abe:	78bb      	ldrb	r3, [r7, #2]
 8009ac0:	883a      	ldrh	r2, [r7, #0]
 8009ac2:	78f9      	ldrb	r1, [r7, #3]
 8009ac4:	f7f7 fff2 	bl	8001aac <HAL_PCD_EP_Open>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009acc:	7bfb      	ldrb	r3, [r7, #15]
 8009ace:	4618      	mov	r0, r3
 8009ad0:	f000 f958 	bl	8009d84 <USBD_Get_USB_Status>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009ad8:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3710      	adds	r7, #16
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}

08009ae2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ae2:	b580      	push	{r7, lr}
 8009ae4:	b084      	sub	sp, #16
 8009ae6:	af00      	add	r7, sp, #0
 8009ae8:	6078      	str	r0, [r7, #4]
 8009aea:	460b      	mov	r3, r1
 8009aec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009aee:	2300      	movs	r3, #0
 8009af0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009af2:	2300      	movs	r3, #0
 8009af4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009afc:	78fa      	ldrb	r2, [r7, #3]
 8009afe:	4611      	mov	r1, r2
 8009b00:	4618      	mov	r0, r3
 8009b02:	f7f8 f83b 	bl	8001b7c <HAL_PCD_EP_Close>
 8009b06:	4603      	mov	r3, r0
 8009b08:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8009b0a:	7bfb      	ldrb	r3, [r7, #15]
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f000 f939 	bl	8009d84 <USBD_Get_USB_Status>
 8009b12:	4603      	mov	r3, r0
 8009b14:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8009b16:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	3710      	adds	r7, #16
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}

08009b20 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b084      	sub	sp, #16
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
 8009b28:	460b      	mov	r3, r1
 8009b2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b30:	2300      	movs	r3, #0
 8009b32:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009b3a:	78fa      	ldrb	r2, [r7, #3]
 8009b3c:	4611      	mov	r1, r2
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f7f8 f913 	bl	8001d6a <HAL_PCD_EP_SetStall>
 8009b44:	4603      	mov	r3, r0
 8009b46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b48:	7bfb      	ldrb	r3, [r7, #15]
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f000 f91a 	bl	8009d84 <USBD_Get_USB_Status>
 8009b50:	4603      	mov	r3, r0
 8009b52:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8009b54:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3710      	adds	r7, #16
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}

08009b5e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b5e:	b580      	push	{r7, lr}
 8009b60:	b084      	sub	sp, #16
 8009b62:	af00      	add	r7, sp, #0
 8009b64:	6078      	str	r0, [r7, #4]
 8009b66:	460b      	mov	r3, r1
 8009b68:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009b78:	78fa      	ldrb	r2, [r7, #3]
 8009b7a:	4611      	mov	r1, r2
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	f7f8 f958 	bl	8001e32 <HAL_PCD_EP_ClrStall>
 8009b82:	4603      	mov	r3, r0
 8009b84:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8009b86:	7bfb      	ldrb	r3, [r7, #15]
 8009b88:	4618      	mov	r0, r3
 8009b8a:	f000 f8fb 	bl	8009d84 <USBD_Get_USB_Status>
 8009b8e:	4603      	mov	r3, r0
 8009b90:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8009b92:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b94:	4618      	mov	r0, r3
 8009b96:	3710      	adds	r7, #16
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}

08009b9c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	b085      	sub	sp, #20
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
 8009ba4:	460b      	mov	r3, r1
 8009ba6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009bae:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8009bb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	da0b      	bge.n	8009bd0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8009bb8:	78fb      	ldrb	r3, [r7, #3]
 8009bba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009bbe:	68f9      	ldr	r1, [r7, #12]
 8009bc0:	4613      	mov	r3, r2
 8009bc2:	00db      	lsls	r3, r3, #3
 8009bc4:	1a9b      	subs	r3, r3, r2
 8009bc6:	009b      	lsls	r3, r3, #2
 8009bc8:	440b      	add	r3, r1
 8009bca:	333e      	adds	r3, #62	; 0x3e
 8009bcc:	781b      	ldrb	r3, [r3, #0]
 8009bce:	e00b      	b.n	8009be8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8009bd0:	78fb      	ldrb	r3, [r7, #3]
 8009bd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009bd6:	68f9      	ldr	r1, [r7, #12]
 8009bd8:	4613      	mov	r3, r2
 8009bda:	00db      	lsls	r3, r3, #3
 8009bdc:	1a9b      	subs	r3, r3, r2
 8009bde:	009b      	lsls	r3, r3, #2
 8009be0:	440b      	add	r3, r1
 8009be2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009be6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3714      	adds	r7, #20
 8009bec:	46bd      	mov	sp, r7
 8009bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf2:	4770      	bx	lr

08009bf4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b084      	sub	sp, #16
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
 8009bfc:	460b      	mov	r3, r1
 8009bfe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c00:	2300      	movs	r3, #0
 8009c02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c04:	2300      	movs	r3, #0
 8009c06:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009c0e:	78fa      	ldrb	r2, [r7, #3]
 8009c10:	4611      	mov	r1, r2
 8009c12:	4618      	mov	r0, r3
 8009c14:	f7f7 ff25 	bl	8001a62 <HAL_PCD_SetAddress>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c1c:	7bfb      	ldrb	r3, [r7, #15]
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f000 f8b0 	bl	8009d84 <USBD_Get_USB_Status>
 8009c24:	4603      	mov	r3, r0
 8009c26:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8009c28:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	3710      	adds	r7, #16
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}

08009c32 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009c32:	b580      	push	{r7, lr}
 8009c34:	b086      	sub	sp, #24
 8009c36:	af00      	add	r7, sp, #0
 8009c38:	60f8      	str	r0, [r7, #12]
 8009c3a:	607a      	str	r2, [r7, #4]
 8009c3c:	603b      	str	r3, [r7, #0]
 8009c3e:	460b      	mov	r3, r1
 8009c40:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c42:	2300      	movs	r3, #0
 8009c44:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c46:	2300      	movs	r3, #0
 8009c48:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009c50:	7af9      	ldrb	r1, [r7, #11]
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	687a      	ldr	r2, [r7, #4]
 8009c56:	f7f8 f83e 	bl	8001cd6 <HAL_PCD_EP_Transmit>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8009c5e:	7dfb      	ldrb	r3, [r7, #23]
 8009c60:	4618      	mov	r0, r3
 8009c62:	f000 f88f 	bl	8009d84 <USBD_Get_USB_Status>
 8009c66:	4603      	mov	r3, r0
 8009c68:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8009c6a:	7dbb      	ldrb	r3, [r7, #22]
}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	3718      	adds	r7, #24
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd80      	pop	{r7, pc}

08009c74 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b086      	sub	sp, #24
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	60f8      	str	r0, [r7, #12]
 8009c7c:	607a      	str	r2, [r7, #4]
 8009c7e:	603b      	str	r3, [r7, #0]
 8009c80:	460b      	mov	r3, r1
 8009c82:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c84:	2300      	movs	r3, #0
 8009c86:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009c92:	7af9      	ldrb	r1, [r7, #11]
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	687a      	ldr	r2, [r7, #4]
 8009c98:	f7f7 ffba 	bl	8001c10 <HAL_PCD_EP_Receive>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8009ca0:	7dfb      	ldrb	r3, [r7, #23]
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f000 f86e 	bl	8009d84 <USBD_Get_USB_Status>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8009cac:	7dbb      	ldrb	r3, [r7, #22]
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	3718      	adds	r7, #24
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}

08009cb6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009cb6:	b580      	push	{r7, lr}
 8009cb8:	b082      	sub	sp, #8
 8009cba:	af00      	add	r7, sp, #0
 8009cbc:	6078      	str	r0, [r7, #4]
 8009cbe:	460b      	mov	r3, r1
 8009cc0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009cc8:	78fa      	ldrb	r2, [r7, #3]
 8009cca:	4611      	mov	r1, r2
 8009ccc:	4618      	mov	r0, r3
 8009cce:	f7f7 ffea 	bl	8001ca6 <HAL_PCD_EP_GetRxCount>
 8009cd2:	4603      	mov	r3, r0
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	3708      	adds	r7, #8
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}

08009cdc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b082      	sub	sp, #8
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
 8009ce4:	460b      	mov	r3, r1
 8009ce6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8009ce8:	78fb      	ldrb	r3, [r7, #3]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d002      	beq.n	8009cf4 <HAL_PCDEx_LPM_Callback+0x18>
 8009cee:	2b01      	cmp	r3, #1
 8009cf0:	d01f      	beq.n	8009d32 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 8009cf2:	e03b      	b.n	8009d6c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6a1b      	ldr	r3, [r3, #32]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d007      	beq.n	8009d0c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009cfc:	f000 f83c 	bl	8009d78 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009d00:	4b1c      	ldr	r3, [pc, #112]	; (8009d74 <HAL_PCDEx_LPM_Callback+0x98>)
 8009d02:	691b      	ldr	r3, [r3, #16]
 8009d04:	4a1b      	ldr	r2, [pc, #108]	; (8009d74 <HAL_PCDEx_LPM_Callback+0x98>)
 8009d06:	f023 0306 	bic.w	r3, r3, #6
 8009d0a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	687a      	ldr	r2, [r7, #4]
 8009d18:	6812      	ldr	r2, [r2, #0]
 8009d1a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009d1e:	f023 0301 	bic.w	r3, r3, #1
 8009d22:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f7fb fe84 	bl	8005a38 <USBD_LL_Resume>
    break;
 8009d30:	e01c      	b.n	8009d6c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	687a      	ldr	r2, [r7, #4]
 8009d3e:	6812      	ldr	r2, [r2, #0]
 8009d40:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009d44:	f043 0301 	orr.w	r3, r3, #1
 8009d48:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009d50:	4618      	mov	r0, r3
 8009d52:	f7fb fe5c 	bl	8005a0e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6a1b      	ldr	r3, [r3, #32]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d005      	beq.n	8009d6a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009d5e:	4b05      	ldr	r3, [pc, #20]	; (8009d74 <HAL_PCDEx_LPM_Callback+0x98>)
 8009d60:	691b      	ldr	r3, [r3, #16]
 8009d62:	4a04      	ldr	r2, [pc, #16]	; (8009d74 <HAL_PCDEx_LPM_Callback+0x98>)
 8009d64:	f043 0306 	orr.w	r3, r3, #6
 8009d68:	6113      	str	r3, [r2, #16]
    break;   
 8009d6a:	bf00      	nop
}
 8009d6c:	bf00      	nop
 8009d6e:	3708      	adds	r7, #8
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bd80      	pop	{r7, pc}
 8009d74:	e000ed00 	.word	0xe000ed00

08009d78 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009d7c:	f7f6 fc4c 	bl	8000618 <SystemClock_Config>
}
 8009d80:	bf00      	nop
 8009d82:	bd80      	pop	{r7, pc}

08009d84 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009d84:	b480      	push	{r7}
 8009d86:	b085      	sub	sp, #20
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009d92:	79fb      	ldrb	r3, [r7, #7]
 8009d94:	2b03      	cmp	r3, #3
 8009d96:	d817      	bhi.n	8009dc8 <USBD_Get_USB_Status+0x44>
 8009d98:	a201      	add	r2, pc, #4	; (adr r2, 8009da0 <USBD_Get_USB_Status+0x1c>)
 8009d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d9e:	bf00      	nop
 8009da0:	08009db1 	.word	0x08009db1
 8009da4:	08009db7 	.word	0x08009db7
 8009da8:	08009dbd 	.word	0x08009dbd
 8009dac:	08009dc3 	.word	0x08009dc3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009db0:	2300      	movs	r3, #0
 8009db2:	73fb      	strb	r3, [r7, #15]
    break;
 8009db4:	e00b      	b.n	8009dce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009db6:	2303      	movs	r3, #3
 8009db8:	73fb      	strb	r3, [r7, #15]
    break;
 8009dba:	e008      	b.n	8009dce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	73fb      	strb	r3, [r7, #15]
    break;
 8009dc0:	e005      	b.n	8009dce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009dc2:	2303      	movs	r3, #3
 8009dc4:	73fb      	strb	r3, [r7, #15]
    break;
 8009dc6:	e002      	b.n	8009dce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009dc8:	2303      	movs	r3, #3
 8009dca:	73fb      	strb	r3, [r7, #15]
    break;
 8009dcc:	bf00      	nop
  }
  return usb_status;
 8009dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	3714      	adds	r7, #20
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dda:	4770      	bx	lr

08009ddc <__errno>:
 8009ddc:	4b01      	ldr	r3, [pc, #4]	; (8009de4 <__errno+0x8>)
 8009dde:	6818      	ldr	r0, [r3, #0]
 8009de0:	4770      	bx	lr
 8009de2:	bf00      	nop
 8009de4:	20000194 	.word	0x20000194

08009de8 <__libc_init_array>:
 8009de8:	b570      	push	{r4, r5, r6, lr}
 8009dea:	4e0d      	ldr	r6, [pc, #52]	; (8009e20 <__libc_init_array+0x38>)
 8009dec:	4c0d      	ldr	r4, [pc, #52]	; (8009e24 <__libc_init_array+0x3c>)
 8009dee:	1ba4      	subs	r4, r4, r6
 8009df0:	10a4      	asrs	r4, r4, #2
 8009df2:	2500      	movs	r5, #0
 8009df4:	42a5      	cmp	r5, r4
 8009df6:	d109      	bne.n	8009e0c <__libc_init_array+0x24>
 8009df8:	4e0b      	ldr	r6, [pc, #44]	; (8009e28 <__libc_init_array+0x40>)
 8009dfa:	4c0c      	ldr	r4, [pc, #48]	; (8009e2c <__libc_init_array+0x44>)
 8009dfc:	f000 fc52 	bl	800a6a4 <_init>
 8009e00:	1ba4      	subs	r4, r4, r6
 8009e02:	10a4      	asrs	r4, r4, #2
 8009e04:	2500      	movs	r5, #0
 8009e06:	42a5      	cmp	r5, r4
 8009e08:	d105      	bne.n	8009e16 <__libc_init_array+0x2e>
 8009e0a:	bd70      	pop	{r4, r5, r6, pc}
 8009e0c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009e10:	4798      	blx	r3
 8009e12:	3501      	adds	r5, #1
 8009e14:	e7ee      	b.n	8009df4 <__libc_init_array+0xc>
 8009e16:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009e1a:	4798      	blx	r3
 8009e1c:	3501      	adds	r5, #1
 8009e1e:	e7f2      	b.n	8009e06 <__libc_init_array+0x1e>
 8009e20:	0800a800 	.word	0x0800a800
 8009e24:	0800a800 	.word	0x0800a800
 8009e28:	0800a800 	.word	0x0800a800
 8009e2c:	0800a804 	.word	0x0800a804

08009e30 <malloc>:
 8009e30:	4b02      	ldr	r3, [pc, #8]	; (8009e3c <malloc+0xc>)
 8009e32:	4601      	mov	r1, r0
 8009e34:	6818      	ldr	r0, [r3, #0]
 8009e36:	f000 b86d 	b.w	8009f14 <_malloc_r>
 8009e3a:	bf00      	nop
 8009e3c:	20000194 	.word	0x20000194

08009e40 <free>:
 8009e40:	4b02      	ldr	r3, [pc, #8]	; (8009e4c <free+0xc>)
 8009e42:	4601      	mov	r1, r0
 8009e44:	6818      	ldr	r0, [r3, #0]
 8009e46:	f000 b817 	b.w	8009e78 <_free_r>
 8009e4a:	bf00      	nop
 8009e4c:	20000194 	.word	0x20000194

08009e50 <memcpy>:
 8009e50:	b510      	push	{r4, lr}
 8009e52:	1e43      	subs	r3, r0, #1
 8009e54:	440a      	add	r2, r1
 8009e56:	4291      	cmp	r1, r2
 8009e58:	d100      	bne.n	8009e5c <memcpy+0xc>
 8009e5a:	bd10      	pop	{r4, pc}
 8009e5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e60:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e64:	e7f7      	b.n	8009e56 <memcpy+0x6>

08009e66 <memset>:
 8009e66:	4402      	add	r2, r0
 8009e68:	4603      	mov	r3, r0
 8009e6a:	4293      	cmp	r3, r2
 8009e6c:	d100      	bne.n	8009e70 <memset+0xa>
 8009e6e:	4770      	bx	lr
 8009e70:	f803 1b01 	strb.w	r1, [r3], #1
 8009e74:	e7f9      	b.n	8009e6a <memset+0x4>
	...

08009e78 <_free_r>:
 8009e78:	b538      	push	{r3, r4, r5, lr}
 8009e7a:	4605      	mov	r5, r0
 8009e7c:	2900      	cmp	r1, #0
 8009e7e:	d045      	beq.n	8009f0c <_free_r+0x94>
 8009e80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e84:	1f0c      	subs	r4, r1, #4
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	bfb8      	it	lt
 8009e8a:	18e4      	addlt	r4, r4, r3
 8009e8c:	f000 f8e6 	bl	800a05c <__malloc_lock>
 8009e90:	4a1f      	ldr	r2, [pc, #124]	; (8009f10 <_free_r+0x98>)
 8009e92:	6813      	ldr	r3, [r2, #0]
 8009e94:	4610      	mov	r0, r2
 8009e96:	b933      	cbnz	r3, 8009ea6 <_free_r+0x2e>
 8009e98:	6063      	str	r3, [r4, #4]
 8009e9a:	6014      	str	r4, [r2, #0]
 8009e9c:	4628      	mov	r0, r5
 8009e9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ea2:	f000 b8dc 	b.w	800a05e <__malloc_unlock>
 8009ea6:	42a3      	cmp	r3, r4
 8009ea8:	d90c      	bls.n	8009ec4 <_free_r+0x4c>
 8009eaa:	6821      	ldr	r1, [r4, #0]
 8009eac:	1862      	adds	r2, r4, r1
 8009eae:	4293      	cmp	r3, r2
 8009eb0:	bf04      	itt	eq
 8009eb2:	681a      	ldreq	r2, [r3, #0]
 8009eb4:	685b      	ldreq	r3, [r3, #4]
 8009eb6:	6063      	str	r3, [r4, #4]
 8009eb8:	bf04      	itt	eq
 8009eba:	1852      	addeq	r2, r2, r1
 8009ebc:	6022      	streq	r2, [r4, #0]
 8009ebe:	6004      	str	r4, [r0, #0]
 8009ec0:	e7ec      	b.n	8009e9c <_free_r+0x24>
 8009ec2:	4613      	mov	r3, r2
 8009ec4:	685a      	ldr	r2, [r3, #4]
 8009ec6:	b10a      	cbz	r2, 8009ecc <_free_r+0x54>
 8009ec8:	42a2      	cmp	r2, r4
 8009eca:	d9fa      	bls.n	8009ec2 <_free_r+0x4a>
 8009ecc:	6819      	ldr	r1, [r3, #0]
 8009ece:	1858      	adds	r0, r3, r1
 8009ed0:	42a0      	cmp	r0, r4
 8009ed2:	d10b      	bne.n	8009eec <_free_r+0x74>
 8009ed4:	6820      	ldr	r0, [r4, #0]
 8009ed6:	4401      	add	r1, r0
 8009ed8:	1858      	adds	r0, r3, r1
 8009eda:	4282      	cmp	r2, r0
 8009edc:	6019      	str	r1, [r3, #0]
 8009ede:	d1dd      	bne.n	8009e9c <_free_r+0x24>
 8009ee0:	6810      	ldr	r0, [r2, #0]
 8009ee2:	6852      	ldr	r2, [r2, #4]
 8009ee4:	605a      	str	r2, [r3, #4]
 8009ee6:	4401      	add	r1, r0
 8009ee8:	6019      	str	r1, [r3, #0]
 8009eea:	e7d7      	b.n	8009e9c <_free_r+0x24>
 8009eec:	d902      	bls.n	8009ef4 <_free_r+0x7c>
 8009eee:	230c      	movs	r3, #12
 8009ef0:	602b      	str	r3, [r5, #0]
 8009ef2:	e7d3      	b.n	8009e9c <_free_r+0x24>
 8009ef4:	6820      	ldr	r0, [r4, #0]
 8009ef6:	1821      	adds	r1, r4, r0
 8009ef8:	428a      	cmp	r2, r1
 8009efa:	bf04      	itt	eq
 8009efc:	6811      	ldreq	r1, [r2, #0]
 8009efe:	6852      	ldreq	r2, [r2, #4]
 8009f00:	6062      	str	r2, [r4, #4]
 8009f02:	bf04      	itt	eq
 8009f04:	1809      	addeq	r1, r1, r0
 8009f06:	6021      	streq	r1, [r4, #0]
 8009f08:	605c      	str	r4, [r3, #4]
 8009f0a:	e7c7      	b.n	8009e9c <_free_r+0x24>
 8009f0c:	bd38      	pop	{r3, r4, r5, pc}
 8009f0e:	bf00      	nop
 8009f10:	20004b24 	.word	0x20004b24

08009f14 <_malloc_r>:
 8009f14:	b570      	push	{r4, r5, r6, lr}
 8009f16:	1ccd      	adds	r5, r1, #3
 8009f18:	f025 0503 	bic.w	r5, r5, #3
 8009f1c:	3508      	adds	r5, #8
 8009f1e:	2d0c      	cmp	r5, #12
 8009f20:	bf38      	it	cc
 8009f22:	250c      	movcc	r5, #12
 8009f24:	2d00      	cmp	r5, #0
 8009f26:	4606      	mov	r6, r0
 8009f28:	db01      	blt.n	8009f2e <_malloc_r+0x1a>
 8009f2a:	42a9      	cmp	r1, r5
 8009f2c:	d903      	bls.n	8009f36 <_malloc_r+0x22>
 8009f2e:	230c      	movs	r3, #12
 8009f30:	6033      	str	r3, [r6, #0]
 8009f32:	2000      	movs	r0, #0
 8009f34:	bd70      	pop	{r4, r5, r6, pc}
 8009f36:	f000 f891 	bl	800a05c <__malloc_lock>
 8009f3a:	4a21      	ldr	r2, [pc, #132]	; (8009fc0 <_malloc_r+0xac>)
 8009f3c:	6814      	ldr	r4, [r2, #0]
 8009f3e:	4621      	mov	r1, r4
 8009f40:	b991      	cbnz	r1, 8009f68 <_malloc_r+0x54>
 8009f42:	4c20      	ldr	r4, [pc, #128]	; (8009fc4 <_malloc_r+0xb0>)
 8009f44:	6823      	ldr	r3, [r4, #0]
 8009f46:	b91b      	cbnz	r3, 8009f50 <_malloc_r+0x3c>
 8009f48:	4630      	mov	r0, r6
 8009f4a:	f000 f83d 	bl	8009fc8 <_sbrk_r>
 8009f4e:	6020      	str	r0, [r4, #0]
 8009f50:	4629      	mov	r1, r5
 8009f52:	4630      	mov	r0, r6
 8009f54:	f000 f838 	bl	8009fc8 <_sbrk_r>
 8009f58:	1c43      	adds	r3, r0, #1
 8009f5a:	d124      	bne.n	8009fa6 <_malloc_r+0x92>
 8009f5c:	230c      	movs	r3, #12
 8009f5e:	6033      	str	r3, [r6, #0]
 8009f60:	4630      	mov	r0, r6
 8009f62:	f000 f87c 	bl	800a05e <__malloc_unlock>
 8009f66:	e7e4      	b.n	8009f32 <_malloc_r+0x1e>
 8009f68:	680b      	ldr	r3, [r1, #0]
 8009f6a:	1b5b      	subs	r3, r3, r5
 8009f6c:	d418      	bmi.n	8009fa0 <_malloc_r+0x8c>
 8009f6e:	2b0b      	cmp	r3, #11
 8009f70:	d90f      	bls.n	8009f92 <_malloc_r+0x7e>
 8009f72:	600b      	str	r3, [r1, #0]
 8009f74:	50cd      	str	r5, [r1, r3]
 8009f76:	18cc      	adds	r4, r1, r3
 8009f78:	4630      	mov	r0, r6
 8009f7a:	f000 f870 	bl	800a05e <__malloc_unlock>
 8009f7e:	f104 000b 	add.w	r0, r4, #11
 8009f82:	1d23      	adds	r3, r4, #4
 8009f84:	f020 0007 	bic.w	r0, r0, #7
 8009f88:	1ac3      	subs	r3, r0, r3
 8009f8a:	d0d3      	beq.n	8009f34 <_malloc_r+0x20>
 8009f8c:	425a      	negs	r2, r3
 8009f8e:	50e2      	str	r2, [r4, r3]
 8009f90:	e7d0      	b.n	8009f34 <_malloc_r+0x20>
 8009f92:	428c      	cmp	r4, r1
 8009f94:	684b      	ldr	r3, [r1, #4]
 8009f96:	bf16      	itet	ne
 8009f98:	6063      	strne	r3, [r4, #4]
 8009f9a:	6013      	streq	r3, [r2, #0]
 8009f9c:	460c      	movne	r4, r1
 8009f9e:	e7eb      	b.n	8009f78 <_malloc_r+0x64>
 8009fa0:	460c      	mov	r4, r1
 8009fa2:	6849      	ldr	r1, [r1, #4]
 8009fa4:	e7cc      	b.n	8009f40 <_malloc_r+0x2c>
 8009fa6:	1cc4      	adds	r4, r0, #3
 8009fa8:	f024 0403 	bic.w	r4, r4, #3
 8009fac:	42a0      	cmp	r0, r4
 8009fae:	d005      	beq.n	8009fbc <_malloc_r+0xa8>
 8009fb0:	1a21      	subs	r1, r4, r0
 8009fb2:	4630      	mov	r0, r6
 8009fb4:	f000 f808 	bl	8009fc8 <_sbrk_r>
 8009fb8:	3001      	adds	r0, #1
 8009fba:	d0cf      	beq.n	8009f5c <_malloc_r+0x48>
 8009fbc:	6025      	str	r5, [r4, #0]
 8009fbe:	e7db      	b.n	8009f78 <_malloc_r+0x64>
 8009fc0:	20004b24 	.word	0x20004b24
 8009fc4:	20004b28 	.word	0x20004b28

08009fc8 <_sbrk_r>:
 8009fc8:	b538      	push	{r3, r4, r5, lr}
 8009fca:	4c06      	ldr	r4, [pc, #24]	; (8009fe4 <_sbrk_r+0x1c>)
 8009fcc:	2300      	movs	r3, #0
 8009fce:	4605      	mov	r5, r0
 8009fd0:	4608      	mov	r0, r1
 8009fd2:	6023      	str	r3, [r4, #0]
 8009fd4:	f7f6 fca0 	bl	8000918 <_sbrk>
 8009fd8:	1c43      	adds	r3, r0, #1
 8009fda:	d102      	bne.n	8009fe2 <_sbrk_r+0x1a>
 8009fdc:	6823      	ldr	r3, [r4, #0]
 8009fde:	b103      	cbz	r3, 8009fe2 <_sbrk_r+0x1a>
 8009fe0:	602b      	str	r3, [r5, #0]
 8009fe2:	bd38      	pop	{r3, r4, r5, pc}
 8009fe4:	200075b0 	.word	0x200075b0

08009fe8 <_vsniprintf_r>:
 8009fe8:	b530      	push	{r4, r5, lr}
 8009fea:	1e14      	subs	r4, r2, #0
 8009fec:	4605      	mov	r5, r0
 8009fee:	b09b      	sub	sp, #108	; 0x6c
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	da05      	bge.n	800a000 <_vsniprintf_r+0x18>
 8009ff4:	238b      	movs	r3, #139	; 0x8b
 8009ff6:	602b      	str	r3, [r5, #0]
 8009ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8009ffc:	b01b      	add	sp, #108	; 0x6c
 8009ffe:	bd30      	pop	{r4, r5, pc}
 800a000:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a004:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a008:	bf14      	ite	ne
 800a00a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a00e:	4623      	moveq	r3, r4
 800a010:	9302      	str	r3, [sp, #8]
 800a012:	9305      	str	r3, [sp, #20]
 800a014:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a018:	9100      	str	r1, [sp, #0]
 800a01a:	9104      	str	r1, [sp, #16]
 800a01c:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a020:	4602      	mov	r2, r0
 800a022:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a024:	4669      	mov	r1, sp
 800a026:	4628      	mov	r0, r5
 800a028:	f000 f874 	bl	800a114 <_svfiprintf_r>
 800a02c:	1c43      	adds	r3, r0, #1
 800a02e:	bfbc      	itt	lt
 800a030:	238b      	movlt	r3, #139	; 0x8b
 800a032:	602b      	strlt	r3, [r5, #0]
 800a034:	2c00      	cmp	r4, #0
 800a036:	d0e1      	beq.n	8009ffc <_vsniprintf_r+0x14>
 800a038:	9b00      	ldr	r3, [sp, #0]
 800a03a:	2200      	movs	r2, #0
 800a03c:	701a      	strb	r2, [r3, #0]
 800a03e:	e7dd      	b.n	8009ffc <_vsniprintf_r+0x14>

0800a040 <vsniprintf>:
 800a040:	b507      	push	{r0, r1, r2, lr}
 800a042:	9300      	str	r3, [sp, #0]
 800a044:	4613      	mov	r3, r2
 800a046:	460a      	mov	r2, r1
 800a048:	4601      	mov	r1, r0
 800a04a:	4803      	ldr	r0, [pc, #12]	; (800a058 <vsniprintf+0x18>)
 800a04c:	6800      	ldr	r0, [r0, #0]
 800a04e:	f7ff ffcb 	bl	8009fe8 <_vsniprintf_r>
 800a052:	b003      	add	sp, #12
 800a054:	f85d fb04 	ldr.w	pc, [sp], #4
 800a058:	20000194 	.word	0x20000194

0800a05c <__malloc_lock>:
 800a05c:	4770      	bx	lr

0800a05e <__malloc_unlock>:
 800a05e:	4770      	bx	lr

0800a060 <__ssputs_r>:
 800a060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a064:	688e      	ldr	r6, [r1, #8]
 800a066:	429e      	cmp	r6, r3
 800a068:	4682      	mov	sl, r0
 800a06a:	460c      	mov	r4, r1
 800a06c:	4690      	mov	r8, r2
 800a06e:	4699      	mov	r9, r3
 800a070:	d837      	bhi.n	800a0e2 <__ssputs_r+0x82>
 800a072:	898a      	ldrh	r2, [r1, #12]
 800a074:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a078:	d031      	beq.n	800a0de <__ssputs_r+0x7e>
 800a07a:	6825      	ldr	r5, [r4, #0]
 800a07c:	6909      	ldr	r1, [r1, #16]
 800a07e:	1a6f      	subs	r7, r5, r1
 800a080:	6965      	ldr	r5, [r4, #20]
 800a082:	2302      	movs	r3, #2
 800a084:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a088:	fb95 f5f3 	sdiv	r5, r5, r3
 800a08c:	f109 0301 	add.w	r3, r9, #1
 800a090:	443b      	add	r3, r7
 800a092:	429d      	cmp	r5, r3
 800a094:	bf38      	it	cc
 800a096:	461d      	movcc	r5, r3
 800a098:	0553      	lsls	r3, r2, #21
 800a09a:	d530      	bpl.n	800a0fe <__ssputs_r+0x9e>
 800a09c:	4629      	mov	r1, r5
 800a09e:	f7ff ff39 	bl	8009f14 <_malloc_r>
 800a0a2:	4606      	mov	r6, r0
 800a0a4:	b950      	cbnz	r0, 800a0bc <__ssputs_r+0x5c>
 800a0a6:	230c      	movs	r3, #12
 800a0a8:	f8ca 3000 	str.w	r3, [sl]
 800a0ac:	89a3      	ldrh	r3, [r4, #12]
 800a0ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0b2:	81a3      	strh	r3, [r4, #12]
 800a0b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a0b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0bc:	463a      	mov	r2, r7
 800a0be:	6921      	ldr	r1, [r4, #16]
 800a0c0:	f7ff fec6 	bl	8009e50 <memcpy>
 800a0c4:	89a3      	ldrh	r3, [r4, #12]
 800a0c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a0ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0ce:	81a3      	strh	r3, [r4, #12]
 800a0d0:	6126      	str	r6, [r4, #16]
 800a0d2:	6165      	str	r5, [r4, #20]
 800a0d4:	443e      	add	r6, r7
 800a0d6:	1bed      	subs	r5, r5, r7
 800a0d8:	6026      	str	r6, [r4, #0]
 800a0da:	60a5      	str	r5, [r4, #8]
 800a0dc:	464e      	mov	r6, r9
 800a0de:	454e      	cmp	r6, r9
 800a0e0:	d900      	bls.n	800a0e4 <__ssputs_r+0x84>
 800a0e2:	464e      	mov	r6, r9
 800a0e4:	4632      	mov	r2, r6
 800a0e6:	4641      	mov	r1, r8
 800a0e8:	6820      	ldr	r0, [r4, #0]
 800a0ea:	f000 fa93 	bl	800a614 <memmove>
 800a0ee:	68a3      	ldr	r3, [r4, #8]
 800a0f0:	1b9b      	subs	r3, r3, r6
 800a0f2:	60a3      	str	r3, [r4, #8]
 800a0f4:	6823      	ldr	r3, [r4, #0]
 800a0f6:	441e      	add	r6, r3
 800a0f8:	6026      	str	r6, [r4, #0]
 800a0fa:	2000      	movs	r0, #0
 800a0fc:	e7dc      	b.n	800a0b8 <__ssputs_r+0x58>
 800a0fe:	462a      	mov	r2, r5
 800a100:	f000 faa1 	bl	800a646 <_realloc_r>
 800a104:	4606      	mov	r6, r0
 800a106:	2800      	cmp	r0, #0
 800a108:	d1e2      	bne.n	800a0d0 <__ssputs_r+0x70>
 800a10a:	6921      	ldr	r1, [r4, #16]
 800a10c:	4650      	mov	r0, sl
 800a10e:	f7ff feb3 	bl	8009e78 <_free_r>
 800a112:	e7c8      	b.n	800a0a6 <__ssputs_r+0x46>

0800a114 <_svfiprintf_r>:
 800a114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a118:	461d      	mov	r5, r3
 800a11a:	898b      	ldrh	r3, [r1, #12]
 800a11c:	061f      	lsls	r7, r3, #24
 800a11e:	b09d      	sub	sp, #116	; 0x74
 800a120:	4680      	mov	r8, r0
 800a122:	460c      	mov	r4, r1
 800a124:	4616      	mov	r6, r2
 800a126:	d50f      	bpl.n	800a148 <_svfiprintf_r+0x34>
 800a128:	690b      	ldr	r3, [r1, #16]
 800a12a:	b96b      	cbnz	r3, 800a148 <_svfiprintf_r+0x34>
 800a12c:	2140      	movs	r1, #64	; 0x40
 800a12e:	f7ff fef1 	bl	8009f14 <_malloc_r>
 800a132:	6020      	str	r0, [r4, #0]
 800a134:	6120      	str	r0, [r4, #16]
 800a136:	b928      	cbnz	r0, 800a144 <_svfiprintf_r+0x30>
 800a138:	230c      	movs	r3, #12
 800a13a:	f8c8 3000 	str.w	r3, [r8]
 800a13e:	f04f 30ff 	mov.w	r0, #4294967295
 800a142:	e0c8      	b.n	800a2d6 <_svfiprintf_r+0x1c2>
 800a144:	2340      	movs	r3, #64	; 0x40
 800a146:	6163      	str	r3, [r4, #20]
 800a148:	2300      	movs	r3, #0
 800a14a:	9309      	str	r3, [sp, #36]	; 0x24
 800a14c:	2320      	movs	r3, #32
 800a14e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a152:	2330      	movs	r3, #48	; 0x30
 800a154:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a158:	9503      	str	r5, [sp, #12]
 800a15a:	f04f 0b01 	mov.w	fp, #1
 800a15e:	4637      	mov	r7, r6
 800a160:	463d      	mov	r5, r7
 800a162:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a166:	b10b      	cbz	r3, 800a16c <_svfiprintf_r+0x58>
 800a168:	2b25      	cmp	r3, #37	; 0x25
 800a16a:	d13e      	bne.n	800a1ea <_svfiprintf_r+0xd6>
 800a16c:	ebb7 0a06 	subs.w	sl, r7, r6
 800a170:	d00b      	beq.n	800a18a <_svfiprintf_r+0x76>
 800a172:	4653      	mov	r3, sl
 800a174:	4632      	mov	r2, r6
 800a176:	4621      	mov	r1, r4
 800a178:	4640      	mov	r0, r8
 800a17a:	f7ff ff71 	bl	800a060 <__ssputs_r>
 800a17e:	3001      	adds	r0, #1
 800a180:	f000 80a4 	beq.w	800a2cc <_svfiprintf_r+0x1b8>
 800a184:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a186:	4453      	add	r3, sl
 800a188:	9309      	str	r3, [sp, #36]	; 0x24
 800a18a:	783b      	ldrb	r3, [r7, #0]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	f000 809d 	beq.w	800a2cc <_svfiprintf_r+0x1b8>
 800a192:	2300      	movs	r3, #0
 800a194:	f04f 32ff 	mov.w	r2, #4294967295
 800a198:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a19c:	9304      	str	r3, [sp, #16]
 800a19e:	9307      	str	r3, [sp, #28]
 800a1a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a1a4:	931a      	str	r3, [sp, #104]	; 0x68
 800a1a6:	462f      	mov	r7, r5
 800a1a8:	2205      	movs	r2, #5
 800a1aa:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a1ae:	4850      	ldr	r0, [pc, #320]	; (800a2f0 <_svfiprintf_r+0x1dc>)
 800a1b0:	f7f6 f836 	bl	8000220 <memchr>
 800a1b4:	9b04      	ldr	r3, [sp, #16]
 800a1b6:	b9d0      	cbnz	r0, 800a1ee <_svfiprintf_r+0xda>
 800a1b8:	06d9      	lsls	r1, r3, #27
 800a1ba:	bf44      	itt	mi
 800a1bc:	2220      	movmi	r2, #32
 800a1be:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a1c2:	071a      	lsls	r2, r3, #28
 800a1c4:	bf44      	itt	mi
 800a1c6:	222b      	movmi	r2, #43	; 0x2b
 800a1c8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a1cc:	782a      	ldrb	r2, [r5, #0]
 800a1ce:	2a2a      	cmp	r2, #42	; 0x2a
 800a1d0:	d015      	beq.n	800a1fe <_svfiprintf_r+0xea>
 800a1d2:	9a07      	ldr	r2, [sp, #28]
 800a1d4:	462f      	mov	r7, r5
 800a1d6:	2000      	movs	r0, #0
 800a1d8:	250a      	movs	r5, #10
 800a1da:	4639      	mov	r1, r7
 800a1dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1e0:	3b30      	subs	r3, #48	; 0x30
 800a1e2:	2b09      	cmp	r3, #9
 800a1e4:	d94d      	bls.n	800a282 <_svfiprintf_r+0x16e>
 800a1e6:	b1b8      	cbz	r0, 800a218 <_svfiprintf_r+0x104>
 800a1e8:	e00f      	b.n	800a20a <_svfiprintf_r+0xf6>
 800a1ea:	462f      	mov	r7, r5
 800a1ec:	e7b8      	b.n	800a160 <_svfiprintf_r+0x4c>
 800a1ee:	4a40      	ldr	r2, [pc, #256]	; (800a2f0 <_svfiprintf_r+0x1dc>)
 800a1f0:	1a80      	subs	r0, r0, r2
 800a1f2:	fa0b f000 	lsl.w	r0, fp, r0
 800a1f6:	4318      	orrs	r0, r3
 800a1f8:	9004      	str	r0, [sp, #16]
 800a1fa:	463d      	mov	r5, r7
 800a1fc:	e7d3      	b.n	800a1a6 <_svfiprintf_r+0x92>
 800a1fe:	9a03      	ldr	r2, [sp, #12]
 800a200:	1d11      	adds	r1, r2, #4
 800a202:	6812      	ldr	r2, [r2, #0]
 800a204:	9103      	str	r1, [sp, #12]
 800a206:	2a00      	cmp	r2, #0
 800a208:	db01      	blt.n	800a20e <_svfiprintf_r+0xfa>
 800a20a:	9207      	str	r2, [sp, #28]
 800a20c:	e004      	b.n	800a218 <_svfiprintf_r+0x104>
 800a20e:	4252      	negs	r2, r2
 800a210:	f043 0302 	orr.w	r3, r3, #2
 800a214:	9207      	str	r2, [sp, #28]
 800a216:	9304      	str	r3, [sp, #16]
 800a218:	783b      	ldrb	r3, [r7, #0]
 800a21a:	2b2e      	cmp	r3, #46	; 0x2e
 800a21c:	d10c      	bne.n	800a238 <_svfiprintf_r+0x124>
 800a21e:	787b      	ldrb	r3, [r7, #1]
 800a220:	2b2a      	cmp	r3, #42	; 0x2a
 800a222:	d133      	bne.n	800a28c <_svfiprintf_r+0x178>
 800a224:	9b03      	ldr	r3, [sp, #12]
 800a226:	1d1a      	adds	r2, r3, #4
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	9203      	str	r2, [sp, #12]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	bfb8      	it	lt
 800a230:	f04f 33ff 	movlt.w	r3, #4294967295
 800a234:	3702      	adds	r7, #2
 800a236:	9305      	str	r3, [sp, #20]
 800a238:	4d2e      	ldr	r5, [pc, #184]	; (800a2f4 <_svfiprintf_r+0x1e0>)
 800a23a:	7839      	ldrb	r1, [r7, #0]
 800a23c:	2203      	movs	r2, #3
 800a23e:	4628      	mov	r0, r5
 800a240:	f7f5 ffee 	bl	8000220 <memchr>
 800a244:	b138      	cbz	r0, 800a256 <_svfiprintf_r+0x142>
 800a246:	2340      	movs	r3, #64	; 0x40
 800a248:	1b40      	subs	r0, r0, r5
 800a24a:	fa03 f000 	lsl.w	r0, r3, r0
 800a24e:	9b04      	ldr	r3, [sp, #16]
 800a250:	4303      	orrs	r3, r0
 800a252:	3701      	adds	r7, #1
 800a254:	9304      	str	r3, [sp, #16]
 800a256:	7839      	ldrb	r1, [r7, #0]
 800a258:	4827      	ldr	r0, [pc, #156]	; (800a2f8 <_svfiprintf_r+0x1e4>)
 800a25a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a25e:	2206      	movs	r2, #6
 800a260:	1c7e      	adds	r6, r7, #1
 800a262:	f7f5 ffdd 	bl	8000220 <memchr>
 800a266:	2800      	cmp	r0, #0
 800a268:	d038      	beq.n	800a2dc <_svfiprintf_r+0x1c8>
 800a26a:	4b24      	ldr	r3, [pc, #144]	; (800a2fc <_svfiprintf_r+0x1e8>)
 800a26c:	bb13      	cbnz	r3, 800a2b4 <_svfiprintf_r+0x1a0>
 800a26e:	9b03      	ldr	r3, [sp, #12]
 800a270:	3307      	adds	r3, #7
 800a272:	f023 0307 	bic.w	r3, r3, #7
 800a276:	3308      	adds	r3, #8
 800a278:	9303      	str	r3, [sp, #12]
 800a27a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a27c:	444b      	add	r3, r9
 800a27e:	9309      	str	r3, [sp, #36]	; 0x24
 800a280:	e76d      	b.n	800a15e <_svfiprintf_r+0x4a>
 800a282:	fb05 3202 	mla	r2, r5, r2, r3
 800a286:	2001      	movs	r0, #1
 800a288:	460f      	mov	r7, r1
 800a28a:	e7a6      	b.n	800a1da <_svfiprintf_r+0xc6>
 800a28c:	2300      	movs	r3, #0
 800a28e:	3701      	adds	r7, #1
 800a290:	9305      	str	r3, [sp, #20]
 800a292:	4619      	mov	r1, r3
 800a294:	250a      	movs	r5, #10
 800a296:	4638      	mov	r0, r7
 800a298:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a29c:	3a30      	subs	r2, #48	; 0x30
 800a29e:	2a09      	cmp	r2, #9
 800a2a0:	d903      	bls.n	800a2aa <_svfiprintf_r+0x196>
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d0c8      	beq.n	800a238 <_svfiprintf_r+0x124>
 800a2a6:	9105      	str	r1, [sp, #20]
 800a2a8:	e7c6      	b.n	800a238 <_svfiprintf_r+0x124>
 800a2aa:	fb05 2101 	mla	r1, r5, r1, r2
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	4607      	mov	r7, r0
 800a2b2:	e7f0      	b.n	800a296 <_svfiprintf_r+0x182>
 800a2b4:	ab03      	add	r3, sp, #12
 800a2b6:	9300      	str	r3, [sp, #0]
 800a2b8:	4622      	mov	r2, r4
 800a2ba:	4b11      	ldr	r3, [pc, #68]	; (800a300 <_svfiprintf_r+0x1ec>)
 800a2bc:	a904      	add	r1, sp, #16
 800a2be:	4640      	mov	r0, r8
 800a2c0:	f3af 8000 	nop.w
 800a2c4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a2c8:	4681      	mov	r9, r0
 800a2ca:	d1d6      	bne.n	800a27a <_svfiprintf_r+0x166>
 800a2cc:	89a3      	ldrh	r3, [r4, #12]
 800a2ce:	065b      	lsls	r3, r3, #25
 800a2d0:	f53f af35 	bmi.w	800a13e <_svfiprintf_r+0x2a>
 800a2d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a2d6:	b01d      	add	sp, #116	; 0x74
 800a2d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2dc:	ab03      	add	r3, sp, #12
 800a2de:	9300      	str	r3, [sp, #0]
 800a2e0:	4622      	mov	r2, r4
 800a2e2:	4b07      	ldr	r3, [pc, #28]	; (800a300 <_svfiprintf_r+0x1ec>)
 800a2e4:	a904      	add	r1, sp, #16
 800a2e6:	4640      	mov	r0, r8
 800a2e8:	f000 f882 	bl	800a3f0 <_printf_i>
 800a2ec:	e7ea      	b.n	800a2c4 <_svfiprintf_r+0x1b0>
 800a2ee:	bf00      	nop
 800a2f0:	0800a7c4 	.word	0x0800a7c4
 800a2f4:	0800a7ca 	.word	0x0800a7ca
 800a2f8:	0800a7ce 	.word	0x0800a7ce
 800a2fc:	00000000 	.word	0x00000000
 800a300:	0800a061 	.word	0x0800a061

0800a304 <_printf_common>:
 800a304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a308:	4691      	mov	r9, r2
 800a30a:	461f      	mov	r7, r3
 800a30c:	688a      	ldr	r2, [r1, #8]
 800a30e:	690b      	ldr	r3, [r1, #16]
 800a310:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a314:	4293      	cmp	r3, r2
 800a316:	bfb8      	it	lt
 800a318:	4613      	movlt	r3, r2
 800a31a:	f8c9 3000 	str.w	r3, [r9]
 800a31e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a322:	4606      	mov	r6, r0
 800a324:	460c      	mov	r4, r1
 800a326:	b112      	cbz	r2, 800a32e <_printf_common+0x2a>
 800a328:	3301      	adds	r3, #1
 800a32a:	f8c9 3000 	str.w	r3, [r9]
 800a32e:	6823      	ldr	r3, [r4, #0]
 800a330:	0699      	lsls	r1, r3, #26
 800a332:	bf42      	ittt	mi
 800a334:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a338:	3302      	addmi	r3, #2
 800a33a:	f8c9 3000 	strmi.w	r3, [r9]
 800a33e:	6825      	ldr	r5, [r4, #0]
 800a340:	f015 0506 	ands.w	r5, r5, #6
 800a344:	d107      	bne.n	800a356 <_printf_common+0x52>
 800a346:	f104 0a19 	add.w	sl, r4, #25
 800a34a:	68e3      	ldr	r3, [r4, #12]
 800a34c:	f8d9 2000 	ldr.w	r2, [r9]
 800a350:	1a9b      	subs	r3, r3, r2
 800a352:	42ab      	cmp	r3, r5
 800a354:	dc28      	bgt.n	800a3a8 <_printf_common+0xa4>
 800a356:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a35a:	6822      	ldr	r2, [r4, #0]
 800a35c:	3300      	adds	r3, #0
 800a35e:	bf18      	it	ne
 800a360:	2301      	movne	r3, #1
 800a362:	0692      	lsls	r2, r2, #26
 800a364:	d42d      	bmi.n	800a3c2 <_printf_common+0xbe>
 800a366:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a36a:	4639      	mov	r1, r7
 800a36c:	4630      	mov	r0, r6
 800a36e:	47c0      	blx	r8
 800a370:	3001      	adds	r0, #1
 800a372:	d020      	beq.n	800a3b6 <_printf_common+0xb2>
 800a374:	6823      	ldr	r3, [r4, #0]
 800a376:	68e5      	ldr	r5, [r4, #12]
 800a378:	f8d9 2000 	ldr.w	r2, [r9]
 800a37c:	f003 0306 	and.w	r3, r3, #6
 800a380:	2b04      	cmp	r3, #4
 800a382:	bf08      	it	eq
 800a384:	1aad      	subeq	r5, r5, r2
 800a386:	68a3      	ldr	r3, [r4, #8]
 800a388:	6922      	ldr	r2, [r4, #16]
 800a38a:	bf0c      	ite	eq
 800a38c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a390:	2500      	movne	r5, #0
 800a392:	4293      	cmp	r3, r2
 800a394:	bfc4      	itt	gt
 800a396:	1a9b      	subgt	r3, r3, r2
 800a398:	18ed      	addgt	r5, r5, r3
 800a39a:	f04f 0900 	mov.w	r9, #0
 800a39e:	341a      	adds	r4, #26
 800a3a0:	454d      	cmp	r5, r9
 800a3a2:	d11a      	bne.n	800a3da <_printf_common+0xd6>
 800a3a4:	2000      	movs	r0, #0
 800a3a6:	e008      	b.n	800a3ba <_printf_common+0xb6>
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	4652      	mov	r2, sl
 800a3ac:	4639      	mov	r1, r7
 800a3ae:	4630      	mov	r0, r6
 800a3b0:	47c0      	blx	r8
 800a3b2:	3001      	adds	r0, #1
 800a3b4:	d103      	bne.n	800a3be <_printf_common+0xba>
 800a3b6:	f04f 30ff 	mov.w	r0, #4294967295
 800a3ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3be:	3501      	adds	r5, #1
 800a3c0:	e7c3      	b.n	800a34a <_printf_common+0x46>
 800a3c2:	18e1      	adds	r1, r4, r3
 800a3c4:	1c5a      	adds	r2, r3, #1
 800a3c6:	2030      	movs	r0, #48	; 0x30
 800a3c8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a3cc:	4422      	add	r2, r4
 800a3ce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a3d2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a3d6:	3302      	adds	r3, #2
 800a3d8:	e7c5      	b.n	800a366 <_printf_common+0x62>
 800a3da:	2301      	movs	r3, #1
 800a3dc:	4622      	mov	r2, r4
 800a3de:	4639      	mov	r1, r7
 800a3e0:	4630      	mov	r0, r6
 800a3e2:	47c0      	blx	r8
 800a3e4:	3001      	adds	r0, #1
 800a3e6:	d0e6      	beq.n	800a3b6 <_printf_common+0xb2>
 800a3e8:	f109 0901 	add.w	r9, r9, #1
 800a3ec:	e7d8      	b.n	800a3a0 <_printf_common+0x9c>
	...

0800a3f0 <_printf_i>:
 800a3f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a3f4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a3f8:	460c      	mov	r4, r1
 800a3fa:	7e09      	ldrb	r1, [r1, #24]
 800a3fc:	b085      	sub	sp, #20
 800a3fe:	296e      	cmp	r1, #110	; 0x6e
 800a400:	4617      	mov	r7, r2
 800a402:	4606      	mov	r6, r0
 800a404:	4698      	mov	r8, r3
 800a406:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a408:	f000 80b3 	beq.w	800a572 <_printf_i+0x182>
 800a40c:	d822      	bhi.n	800a454 <_printf_i+0x64>
 800a40e:	2963      	cmp	r1, #99	; 0x63
 800a410:	d036      	beq.n	800a480 <_printf_i+0x90>
 800a412:	d80a      	bhi.n	800a42a <_printf_i+0x3a>
 800a414:	2900      	cmp	r1, #0
 800a416:	f000 80b9 	beq.w	800a58c <_printf_i+0x19c>
 800a41a:	2958      	cmp	r1, #88	; 0x58
 800a41c:	f000 8083 	beq.w	800a526 <_printf_i+0x136>
 800a420:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a424:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a428:	e032      	b.n	800a490 <_printf_i+0xa0>
 800a42a:	2964      	cmp	r1, #100	; 0x64
 800a42c:	d001      	beq.n	800a432 <_printf_i+0x42>
 800a42e:	2969      	cmp	r1, #105	; 0x69
 800a430:	d1f6      	bne.n	800a420 <_printf_i+0x30>
 800a432:	6820      	ldr	r0, [r4, #0]
 800a434:	6813      	ldr	r3, [r2, #0]
 800a436:	0605      	lsls	r5, r0, #24
 800a438:	f103 0104 	add.w	r1, r3, #4
 800a43c:	d52a      	bpl.n	800a494 <_printf_i+0xa4>
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	6011      	str	r1, [r2, #0]
 800a442:	2b00      	cmp	r3, #0
 800a444:	da03      	bge.n	800a44e <_printf_i+0x5e>
 800a446:	222d      	movs	r2, #45	; 0x2d
 800a448:	425b      	negs	r3, r3
 800a44a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a44e:	486f      	ldr	r0, [pc, #444]	; (800a60c <_printf_i+0x21c>)
 800a450:	220a      	movs	r2, #10
 800a452:	e039      	b.n	800a4c8 <_printf_i+0xd8>
 800a454:	2973      	cmp	r1, #115	; 0x73
 800a456:	f000 809d 	beq.w	800a594 <_printf_i+0x1a4>
 800a45a:	d808      	bhi.n	800a46e <_printf_i+0x7e>
 800a45c:	296f      	cmp	r1, #111	; 0x6f
 800a45e:	d020      	beq.n	800a4a2 <_printf_i+0xb2>
 800a460:	2970      	cmp	r1, #112	; 0x70
 800a462:	d1dd      	bne.n	800a420 <_printf_i+0x30>
 800a464:	6823      	ldr	r3, [r4, #0]
 800a466:	f043 0320 	orr.w	r3, r3, #32
 800a46a:	6023      	str	r3, [r4, #0]
 800a46c:	e003      	b.n	800a476 <_printf_i+0x86>
 800a46e:	2975      	cmp	r1, #117	; 0x75
 800a470:	d017      	beq.n	800a4a2 <_printf_i+0xb2>
 800a472:	2978      	cmp	r1, #120	; 0x78
 800a474:	d1d4      	bne.n	800a420 <_printf_i+0x30>
 800a476:	2378      	movs	r3, #120	; 0x78
 800a478:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a47c:	4864      	ldr	r0, [pc, #400]	; (800a610 <_printf_i+0x220>)
 800a47e:	e055      	b.n	800a52c <_printf_i+0x13c>
 800a480:	6813      	ldr	r3, [r2, #0]
 800a482:	1d19      	adds	r1, r3, #4
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	6011      	str	r1, [r2, #0]
 800a488:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a48c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a490:	2301      	movs	r3, #1
 800a492:	e08c      	b.n	800a5ae <_printf_i+0x1be>
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	6011      	str	r1, [r2, #0]
 800a498:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a49c:	bf18      	it	ne
 800a49e:	b21b      	sxthne	r3, r3
 800a4a0:	e7cf      	b.n	800a442 <_printf_i+0x52>
 800a4a2:	6813      	ldr	r3, [r2, #0]
 800a4a4:	6825      	ldr	r5, [r4, #0]
 800a4a6:	1d18      	adds	r0, r3, #4
 800a4a8:	6010      	str	r0, [r2, #0]
 800a4aa:	0628      	lsls	r0, r5, #24
 800a4ac:	d501      	bpl.n	800a4b2 <_printf_i+0xc2>
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	e002      	b.n	800a4b8 <_printf_i+0xc8>
 800a4b2:	0668      	lsls	r0, r5, #25
 800a4b4:	d5fb      	bpl.n	800a4ae <_printf_i+0xbe>
 800a4b6:	881b      	ldrh	r3, [r3, #0]
 800a4b8:	4854      	ldr	r0, [pc, #336]	; (800a60c <_printf_i+0x21c>)
 800a4ba:	296f      	cmp	r1, #111	; 0x6f
 800a4bc:	bf14      	ite	ne
 800a4be:	220a      	movne	r2, #10
 800a4c0:	2208      	moveq	r2, #8
 800a4c2:	2100      	movs	r1, #0
 800a4c4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a4c8:	6865      	ldr	r5, [r4, #4]
 800a4ca:	60a5      	str	r5, [r4, #8]
 800a4cc:	2d00      	cmp	r5, #0
 800a4ce:	f2c0 8095 	blt.w	800a5fc <_printf_i+0x20c>
 800a4d2:	6821      	ldr	r1, [r4, #0]
 800a4d4:	f021 0104 	bic.w	r1, r1, #4
 800a4d8:	6021      	str	r1, [r4, #0]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d13d      	bne.n	800a55a <_printf_i+0x16a>
 800a4de:	2d00      	cmp	r5, #0
 800a4e0:	f040 808e 	bne.w	800a600 <_printf_i+0x210>
 800a4e4:	4665      	mov	r5, ip
 800a4e6:	2a08      	cmp	r2, #8
 800a4e8:	d10b      	bne.n	800a502 <_printf_i+0x112>
 800a4ea:	6823      	ldr	r3, [r4, #0]
 800a4ec:	07db      	lsls	r3, r3, #31
 800a4ee:	d508      	bpl.n	800a502 <_printf_i+0x112>
 800a4f0:	6923      	ldr	r3, [r4, #16]
 800a4f2:	6862      	ldr	r2, [r4, #4]
 800a4f4:	429a      	cmp	r2, r3
 800a4f6:	bfde      	ittt	le
 800a4f8:	2330      	movle	r3, #48	; 0x30
 800a4fa:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a4fe:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a502:	ebac 0305 	sub.w	r3, ip, r5
 800a506:	6123      	str	r3, [r4, #16]
 800a508:	f8cd 8000 	str.w	r8, [sp]
 800a50c:	463b      	mov	r3, r7
 800a50e:	aa03      	add	r2, sp, #12
 800a510:	4621      	mov	r1, r4
 800a512:	4630      	mov	r0, r6
 800a514:	f7ff fef6 	bl	800a304 <_printf_common>
 800a518:	3001      	adds	r0, #1
 800a51a:	d14d      	bne.n	800a5b8 <_printf_i+0x1c8>
 800a51c:	f04f 30ff 	mov.w	r0, #4294967295
 800a520:	b005      	add	sp, #20
 800a522:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a526:	4839      	ldr	r0, [pc, #228]	; (800a60c <_printf_i+0x21c>)
 800a528:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a52c:	6813      	ldr	r3, [r2, #0]
 800a52e:	6821      	ldr	r1, [r4, #0]
 800a530:	1d1d      	adds	r5, r3, #4
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	6015      	str	r5, [r2, #0]
 800a536:	060a      	lsls	r2, r1, #24
 800a538:	d50b      	bpl.n	800a552 <_printf_i+0x162>
 800a53a:	07ca      	lsls	r2, r1, #31
 800a53c:	bf44      	itt	mi
 800a53e:	f041 0120 	orrmi.w	r1, r1, #32
 800a542:	6021      	strmi	r1, [r4, #0]
 800a544:	b91b      	cbnz	r3, 800a54e <_printf_i+0x15e>
 800a546:	6822      	ldr	r2, [r4, #0]
 800a548:	f022 0220 	bic.w	r2, r2, #32
 800a54c:	6022      	str	r2, [r4, #0]
 800a54e:	2210      	movs	r2, #16
 800a550:	e7b7      	b.n	800a4c2 <_printf_i+0xd2>
 800a552:	064d      	lsls	r5, r1, #25
 800a554:	bf48      	it	mi
 800a556:	b29b      	uxthmi	r3, r3
 800a558:	e7ef      	b.n	800a53a <_printf_i+0x14a>
 800a55a:	4665      	mov	r5, ip
 800a55c:	fbb3 f1f2 	udiv	r1, r3, r2
 800a560:	fb02 3311 	mls	r3, r2, r1, r3
 800a564:	5cc3      	ldrb	r3, [r0, r3]
 800a566:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a56a:	460b      	mov	r3, r1
 800a56c:	2900      	cmp	r1, #0
 800a56e:	d1f5      	bne.n	800a55c <_printf_i+0x16c>
 800a570:	e7b9      	b.n	800a4e6 <_printf_i+0xf6>
 800a572:	6813      	ldr	r3, [r2, #0]
 800a574:	6825      	ldr	r5, [r4, #0]
 800a576:	6961      	ldr	r1, [r4, #20]
 800a578:	1d18      	adds	r0, r3, #4
 800a57a:	6010      	str	r0, [r2, #0]
 800a57c:	0628      	lsls	r0, r5, #24
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	d501      	bpl.n	800a586 <_printf_i+0x196>
 800a582:	6019      	str	r1, [r3, #0]
 800a584:	e002      	b.n	800a58c <_printf_i+0x19c>
 800a586:	066a      	lsls	r2, r5, #25
 800a588:	d5fb      	bpl.n	800a582 <_printf_i+0x192>
 800a58a:	8019      	strh	r1, [r3, #0]
 800a58c:	2300      	movs	r3, #0
 800a58e:	6123      	str	r3, [r4, #16]
 800a590:	4665      	mov	r5, ip
 800a592:	e7b9      	b.n	800a508 <_printf_i+0x118>
 800a594:	6813      	ldr	r3, [r2, #0]
 800a596:	1d19      	adds	r1, r3, #4
 800a598:	6011      	str	r1, [r2, #0]
 800a59a:	681d      	ldr	r5, [r3, #0]
 800a59c:	6862      	ldr	r2, [r4, #4]
 800a59e:	2100      	movs	r1, #0
 800a5a0:	4628      	mov	r0, r5
 800a5a2:	f7f5 fe3d 	bl	8000220 <memchr>
 800a5a6:	b108      	cbz	r0, 800a5ac <_printf_i+0x1bc>
 800a5a8:	1b40      	subs	r0, r0, r5
 800a5aa:	6060      	str	r0, [r4, #4]
 800a5ac:	6863      	ldr	r3, [r4, #4]
 800a5ae:	6123      	str	r3, [r4, #16]
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a5b6:	e7a7      	b.n	800a508 <_printf_i+0x118>
 800a5b8:	6923      	ldr	r3, [r4, #16]
 800a5ba:	462a      	mov	r2, r5
 800a5bc:	4639      	mov	r1, r7
 800a5be:	4630      	mov	r0, r6
 800a5c0:	47c0      	blx	r8
 800a5c2:	3001      	adds	r0, #1
 800a5c4:	d0aa      	beq.n	800a51c <_printf_i+0x12c>
 800a5c6:	6823      	ldr	r3, [r4, #0]
 800a5c8:	079b      	lsls	r3, r3, #30
 800a5ca:	d413      	bmi.n	800a5f4 <_printf_i+0x204>
 800a5cc:	68e0      	ldr	r0, [r4, #12]
 800a5ce:	9b03      	ldr	r3, [sp, #12]
 800a5d0:	4298      	cmp	r0, r3
 800a5d2:	bfb8      	it	lt
 800a5d4:	4618      	movlt	r0, r3
 800a5d6:	e7a3      	b.n	800a520 <_printf_i+0x130>
 800a5d8:	2301      	movs	r3, #1
 800a5da:	464a      	mov	r2, r9
 800a5dc:	4639      	mov	r1, r7
 800a5de:	4630      	mov	r0, r6
 800a5e0:	47c0      	blx	r8
 800a5e2:	3001      	adds	r0, #1
 800a5e4:	d09a      	beq.n	800a51c <_printf_i+0x12c>
 800a5e6:	3501      	adds	r5, #1
 800a5e8:	68e3      	ldr	r3, [r4, #12]
 800a5ea:	9a03      	ldr	r2, [sp, #12]
 800a5ec:	1a9b      	subs	r3, r3, r2
 800a5ee:	42ab      	cmp	r3, r5
 800a5f0:	dcf2      	bgt.n	800a5d8 <_printf_i+0x1e8>
 800a5f2:	e7eb      	b.n	800a5cc <_printf_i+0x1dc>
 800a5f4:	2500      	movs	r5, #0
 800a5f6:	f104 0919 	add.w	r9, r4, #25
 800a5fa:	e7f5      	b.n	800a5e8 <_printf_i+0x1f8>
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d1ac      	bne.n	800a55a <_printf_i+0x16a>
 800a600:	7803      	ldrb	r3, [r0, #0]
 800a602:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a606:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a60a:	e76c      	b.n	800a4e6 <_printf_i+0xf6>
 800a60c:	0800a7d5 	.word	0x0800a7d5
 800a610:	0800a7e6 	.word	0x0800a7e6

0800a614 <memmove>:
 800a614:	4288      	cmp	r0, r1
 800a616:	b510      	push	{r4, lr}
 800a618:	eb01 0302 	add.w	r3, r1, r2
 800a61c:	d807      	bhi.n	800a62e <memmove+0x1a>
 800a61e:	1e42      	subs	r2, r0, #1
 800a620:	4299      	cmp	r1, r3
 800a622:	d00a      	beq.n	800a63a <memmove+0x26>
 800a624:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a628:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a62c:	e7f8      	b.n	800a620 <memmove+0xc>
 800a62e:	4283      	cmp	r3, r0
 800a630:	d9f5      	bls.n	800a61e <memmove+0xa>
 800a632:	1881      	adds	r1, r0, r2
 800a634:	1ad2      	subs	r2, r2, r3
 800a636:	42d3      	cmn	r3, r2
 800a638:	d100      	bne.n	800a63c <memmove+0x28>
 800a63a:	bd10      	pop	{r4, pc}
 800a63c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a640:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a644:	e7f7      	b.n	800a636 <memmove+0x22>

0800a646 <_realloc_r>:
 800a646:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a648:	4607      	mov	r7, r0
 800a64a:	4614      	mov	r4, r2
 800a64c:	460e      	mov	r6, r1
 800a64e:	b921      	cbnz	r1, 800a65a <_realloc_r+0x14>
 800a650:	4611      	mov	r1, r2
 800a652:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a656:	f7ff bc5d 	b.w	8009f14 <_malloc_r>
 800a65a:	b922      	cbnz	r2, 800a666 <_realloc_r+0x20>
 800a65c:	f7ff fc0c 	bl	8009e78 <_free_r>
 800a660:	4625      	mov	r5, r4
 800a662:	4628      	mov	r0, r5
 800a664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a666:	f000 f814 	bl	800a692 <_malloc_usable_size_r>
 800a66a:	42a0      	cmp	r0, r4
 800a66c:	d20f      	bcs.n	800a68e <_realloc_r+0x48>
 800a66e:	4621      	mov	r1, r4
 800a670:	4638      	mov	r0, r7
 800a672:	f7ff fc4f 	bl	8009f14 <_malloc_r>
 800a676:	4605      	mov	r5, r0
 800a678:	2800      	cmp	r0, #0
 800a67a:	d0f2      	beq.n	800a662 <_realloc_r+0x1c>
 800a67c:	4631      	mov	r1, r6
 800a67e:	4622      	mov	r2, r4
 800a680:	f7ff fbe6 	bl	8009e50 <memcpy>
 800a684:	4631      	mov	r1, r6
 800a686:	4638      	mov	r0, r7
 800a688:	f7ff fbf6 	bl	8009e78 <_free_r>
 800a68c:	e7e9      	b.n	800a662 <_realloc_r+0x1c>
 800a68e:	4635      	mov	r5, r6
 800a690:	e7e7      	b.n	800a662 <_realloc_r+0x1c>

0800a692 <_malloc_usable_size_r>:
 800a692:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a696:	1f18      	subs	r0, r3, #4
 800a698:	2b00      	cmp	r3, #0
 800a69a:	bfbc      	itt	lt
 800a69c:	580b      	ldrlt	r3, [r1, r0]
 800a69e:	18c0      	addlt	r0, r0, r3
 800a6a0:	4770      	bx	lr
	...

0800a6a4 <_init>:
 800a6a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6a6:	bf00      	nop
 800a6a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6aa:	bc08      	pop	{r3}
 800a6ac:	469e      	mov	lr, r3
 800a6ae:	4770      	bx	lr

0800a6b0 <_fini>:
 800a6b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6b2:	bf00      	nop
 800a6b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6b6:	bc08      	pop	{r3}
 800a6b8:	469e      	mov	lr, r3
 800a6ba:	4770      	bx	lr
